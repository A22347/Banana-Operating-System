
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d 7b 00 00       	call   c0007b2d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c4 37 02 c0       	mov    eax,0xc00237c4
c0000025:	3d c4 37 02 c0       	cmp    eax,0xc00237c4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c4 37 02 c0       	push   0xc00237c4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c4 37 02 c0       	mov    eax,0xc00237c4
c0000051:	2d c4 37 02 c0       	sub    eax,0xc00237c4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c4 37 02 c0       	push   0xc00237c4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb dc fe 01 c0       	mov    ebx,0xc001fedc
c0000097:	81 eb d8 fe 01 c0    	sub    ebx,0xc001fed8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be d8 fe 01 c0       	mov    esi,0xc001fed8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c4 37 02 c0       	push   0xc00237c4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 c4 37 02 c0       	push   0xc00237c4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 db 50 01 00       	call   c0015388 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 fc a3 00 00       	call   c000a6c1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b9 50 01 00       	call   c0015388 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c6 55 01 00       	call   c00158b4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 61 5c 01 00       	call   c0015f58 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 b9 0e 01 00       	jmp    c0011238 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0120],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0120],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0120],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0120],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0120],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0120],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>

c0000c1b <largebin_index>:
c0000c1b:	89 c2                	mov    edx,eax
c0000c1d:	c1 ea 08             	shr    edx,0x8
c0000c20:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c26:	77 10                	ja     c0000c38 <largebin_index+0x1d>
c0000c28:	0f bd d2             	bsr    edx,edx
c0000c2b:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c2e:	d3 e8                	shr    eax,cl
c0000c30:	83 e0 03             	and    eax,0x3
c0000c33:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c37:	c3                   	ret    
c0000c38:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c3d:	c3                   	ret    

c0000c3e <malloc_init_state>:
c0000c3e:	8d 50 34             	lea    edx,[eax+0x34]
c0000c41:	53                   	push   ebx
c0000c42:	89 d1                	mov    ecx,edx
c0000c44:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c4a:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c4d:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c50:	83 c2 08             	add    edx,0x8
c0000c53:	39 da                	cmp    edx,ebx
c0000c55:	75 f3                	jne    c0000c4a <malloc_init_state+0xc>
c0000c57:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c61:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c63:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c6d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c77:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c81:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c88:	83 e2 03             	and    edx,0x3
c0000c8b:	5b                   	pop    ebx
c0000c8c:	83 ca 48             	or     edx,0x48
c0000c8f:	89 10                	mov    DWORD PTR [eax],edx
c0000c91:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c94:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c9e:	c3                   	ret    

c0000c9f <malloc_consolidate>:
c0000c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ca1:	85 d2                	test   edx,edx
c0000ca3:	0f 84 d8 00 00 00    	je     c0000d81 <malloc_consolidate+0xe2>
c0000ca9:	55                   	push   ebp
c0000caa:	83 e2 fd             	and    edx,0xfffffffd
c0000cad:	57                   	push   edi
c0000cae:	89 c5                	mov    ebp,eax
c0000cb0:	56                   	push   esi
c0000cb1:	53                   	push   ebx
c0000cb2:	8d 78 34             	lea    edi,[eax+0x34]
c0000cb5:	83 ec 10             	sub    esp,0x10
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	c1 ea 03             	shr    edx,0x3
c0000cbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cc1:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cc5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cc9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ccc:	85 d2                	test   edx,edx
c0000cce:	0f 84 98 00 00 00    	je     c0000d6c <malloc_consolidate+0xcd>
c0000cd4:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000cdb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cde:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ce1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce5:	89 f9                	mov    ecx,edi
c0000ce7:	83 e1 fe             	and    ecx,0xfffffffe
c0000cea:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ced:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cf0:	83 e3 fc             	and    ebx,0xfffffffc
c0000cf3:	83 e7 01             	and    edi,0x1
c0000cf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cf9:	75 14                	jne    c0000d0f <malloc_consolidate+0x70>
c0000cfb:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cfd:	29 fa                	sub    edx,edi
c0000cff:	01 f9                	add    ecx,edi
c0000d01:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d04:	89 fb                	mov    ebx,edi
c0000d06:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d09:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d0c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d0f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d12:	74 40                	je     c0000d54 <malloc_consolidate+0xb5>
c0000d14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d17:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d1a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d1e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d21:	83 e7 01             	and    edi,0x1
c0000d24:	75 0e                	jne    c0000d34 <malloc_consolidate+0x95>
c0000d26:	01 d9                	add    ecx,ebx
c0000d28:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d2b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d2e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d31:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d34:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d37:	89 ce                	mov    esi,ecx
c0000d39:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d3c:	83 ce 01             	or     esi,0x1
c0000d3f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d42:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d45:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d49:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d4c:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d4f:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d52:	eb 0c                	jmp    c0000d60 <malloc_consolidate+0xc1>
c0000d54:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d57:	83 c9 01             	or     ecx,0x1
c0000d5a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d5d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d64:	85 d2                	test   edx,edx
c0000d66:	0f 85 6f ff ff ff    	jne    c0000cdb <malloc_consolidate+0x3c>
c0000d6c:	83 c5 04             	add    ebp,0x4
c0000d6f:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d73:	0f 85 50 ff ff ff    	jne    c0000cc9 <malloc_consolidate+0x2a>
c0000d79:	83 c4 10             	add    esp,0x10
c0000d7c:	5b                   	pop    ebx
c0000d7d:	5e                   	pop    esi
c0000d7e:	5f                   	pop    edi
c0000d7f:	5d                   	pop    ebp
c0000d80:	c3                   	ret    
c0000d81:	e9 b8 fe ff ff       	jmp    c0000c3e <malloc_init_state>

c0000d86 <dlfree>:
c0000d86:	57                   	push   edi
c0000d87:	56                   	push   esi
c0000d88:	53                   	push   ebx
c0000d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d8d:	85 db                	test   ebx,ebx
c0000d8f:	0f 84 e2 00 00 00    	je     c0000e77 <dlfree+0xf1>
c0000d95:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d98:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d9b:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000da1:	89 f0                	mov    eax,esi
c0000da3:	83 e0 fc             	and    eax,0xfffffffc
c0000da6:	39 c1                	cmp    ecx,eax
c0000da8:	72 24                	jb     c0000dce <dlfree+0x48>
c0000daa:	c1 e8 03             	shr    eax,0x3
c0000dad:	83 c9 03             	or     ecx,0x3
c0000db0:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db6:	83 e8 02             	sub    eax,0x2
c0000db9:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000dc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dc2:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000dc9:	e9 a9 00 00 00       	jmp    c0000e77 <dlfree+0xf1>
c0000dce:	83 e6 02             	and    esi,0x2
c0000dd1:	0f 85 a0 00 00 00    	jne    c0000e77 <dlfree+0xf1>
c0000dd7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000dda:	83 c9 01             	or     ecx,0x1
c0000ddd:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000de3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000de6:	83 e1 fc             	and    ecx,0xfffffffc
c0000de9:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ded:	75 13                	jne    c0000e02 <dlfree+0x7c>
c0000def:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000df2:	29 da                	sub    edx,ebx
c0000df4:	01 d8                	add    eax,ebx
c0000df6:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000df9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dfc:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dff:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e02:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000e08:	74 40                	je     c0000e4a <dlfree+0xc4>
c0000e0a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e0e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e11:	80 e3 01             	and    bl,0x1
c0000e14:	75 0e                	jne    c0000e24 <dlfree+0x9e>
c0000e16:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e19:	01 c8                	add    eax,ecx
c0000e1b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e1e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e21:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e24:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000e2a:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000e31:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e34:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e3a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e3d:	89 c1                	mov    ecx,eax
c0000e3f:	83 c9 01             	or     ecx,0x1
c0000e42:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e45:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e48:	eb 10                	jmp    c0000e5a <dlfree+0xd4>
c0000e4a:	01 c8                	add    eax,ecx
c0000e4c:	89 c1                	mov    ecx,eax
c0000e4e:	83 c9 01             	or     ecx,0x1
c0000e51:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e54:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e5a:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e5f:	76 16                	jbe    c0000e77 <dlfree+0xf1>
c0000e61:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e68:	74 0d                	je     c0000e77 <dlfree+0xf1>
c0000e6a:	5b                   	pop    ebx
c0000e6b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e70:	5e                   	pop    esi
c0000e71:	5f                   	pop    edi
c0000e72:	e9 28 fe ff ff       	jmp    c0000c9f <malloc_consolidate>
c0000e77:	5b                   	pop    ebx
c0000e78:	5e                   	pop    esi
c0000e79:	5f                   	pop    edi
c0000e7a:	c3                   	ret    

c0000e7b <sYSMALLOc>:
c0000e7b:	55                   	push   ebp
c0000e7c:	57                   	push   edi
c0000e7d:	56                   	push   esi
c0000e7e:	53                   	push   ebx
c0000e7f:	89 d3                	mov    ebx,edx
c0000e81:	83 ec 2c             	sub    esp,0x2c
c0000e84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000e88:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000e8e:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e91:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000e94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e98:	74 1f                	je     c0000eb9 <sYSMALLOc+0x3e>
c0000e9a:	89 d0                	mov    eax,edx
c0000e9c:	e8 fe fd ff ff       	call   c0000c9f <malloc_consolidate>
c0000ea1:	83 ec 0c             	sub    esp,0xc
c0000ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000ea8:	83 e8 07             	sub    eax,0x7
c0000eab:	50                   	push   eax
c0000eac:	e8 33 02 00 00       	call   c00010e4 <dlmalloc>
c0000eb1:	83 c4 10             	add    esp,0x10
c0000eb4:	e9 23 02 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000eb9:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ec0:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ec6:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000ec9:	83 c0 10             	add    eax,0x10
c0000ecc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	83 e5 fc             	and    ebp,0xfffffffc
c0000ed5:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000edc:	74 02                	je     c0000ee0 <sYSMALLOc+0x65>
c0000ede:	29 ea                	sub    edx,ebp
c0000ee0:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000ee4:	f7 d9                	neg    ecx
c0000ee6:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000eea:	21 ca                	and    edx,ecx
c0000eec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ef0:	7f 07                	jg     c0000ef9 <sYSMALLOc+0x7e>
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	e9 e3 01 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0000ef9:	83 ec 0c             	sub    esp,0xc
c0000efc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f00:	e8 a3 6a 00 00       	call   c00079a8 <sbrk>
c0000f05:	83 c4 10             	add    esp,0x10
c0000f08:	83 f8 ff             	cmp    eax,0xffffffff
c0000f0b:	89 c6                	mov    esi,eax
c0000f0d:	74 e3                	je     c0000ef2 <sYSMALLOc+0x77>
c0000f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f13:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000f16:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000f1c:	39 c2                	cmp    edx,eax
c0000f1e:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f24:	75 11                	jne    c0000f37 <sYSMALLOc+0xbc>
c0000f26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2a:	01 e8                	add    eax,ebp
c0000f2c:	83 c8 01             	or     eax,0x1
c0000f2f:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f32:	e9 93 00 00 00       	jmp    c0000fca <sYSMALLOc+0x14f>
c0000f37:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000f3d:	a8 01                	test   al,0x1
c0000f3f:	0f 84 73 01 00 00    	je     c00010b8 <sYSMALLOc+0x23d>
c0000f45:	85 ed                	test   ebp,ebp
c0000f47:	74 12                	je     c0000f5b <sYSMALLOc+0xe0>
c0000f49:	39 f2                	cmp    edx,esi
c0000f4b:	76 0e                	jbe    c0000f5b <sYSMALLOc+0xe0>
c0000f4d:	83 e0 fe             	and    eax,0xfffffffe
c0000f50:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000f56:	e9 5d 01 00 00       	jmp    c00010b8 <sYSMALLOc+0x23d>
c0000f5b:	85 ed                	test   ebp,ebp
c0000f5d:	74 0c                	je     c0000f6b <sYSMALLOc+0xf0>
c0000f5f:	89 f0                	mov    eax,esi
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	01 c1                	add    ecx,eax
c0000f65:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000f6b:	89 f2                	mov    edx,esi
c0000f6d:	83 e2 07             	and    edx,0x7
c0000f70:	0f 84 b1 00 00 00    	je     c0001027 <sYSMALLOc+0x1ac>
c0000f76:	b8 08 00 00 00       	mov    eax,0x8
c0000f7b:	29 d0                	sub    eax,edx
c0000f7d:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000f80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f88:	01 e8                	add    eax,ebp
c0000f8a:	83 ec 0c             	sub    esp,0xc
c0000f8d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000f90:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000f94:	01 f2                	add    edx,esi
c0000f96:	29 d0                	sub    eax,edx
c0000f98:	01 d1                	add    ecx,edx
c0000f9a:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000f9e:	01 c1                	add    ecx,eax
c0000fa0:	51                   	push   ecx
c0000fa1:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000fa5:	e8 fe 69 00 00       	call   c00079a8 <sbrk>
c0000faa:	83 c4 10             	add    esp,0x10
c0000fad:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000fb1:	83 f8 ff             	cmp    eax,0xffffffff
c0000fb4:	75 7c                	jne    c0001032 <sYSMALLOc+0x1b7>
c0000fb6:	83 ec 0c             	sub    esp,0xc
c0000fb9:	6a 00                	push   0x0
c0000fbb:	e8 e8 69 00 00       	call   c00079a8 <sbrk>
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	31 c9                	xor    ecx,ecx
c0000fc5:	83 f8 ff             	cmp    eax,0xffffffff
c0000fc8:	75 7e                	jne    c0001048 <sYSMALLOc+0x1cd>
c0000fca:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd0:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fd6:	73 06                	jae    c0000fde <sYSMALLOc+0x163>
c0000fd8:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fde:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fe4:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fea:	73 06                	jae    c0000ff2 <sYSMALLOc+0x177>
c0000fec:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ff2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ff5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff8:	83 e2 fc             	and    edx,0xfffffffc
c0000ffb:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000fff:	0f 87 ed fe ff ff    	ja     c0000ef2 <sYSMALLOc+0x77>
c0001005:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001009:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000100c:	29 fa                	sub    edx,edi
c000100e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001011:	89 fb                	mov    ebx,edi
c0001013:	83 ca 01             	or     edx,0x1
c0001016:	83 cb 01             	or     ebx,0x1
c0001019:	83 c0 08             	add    eax,0x8
c000101c:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000101f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001022:	e9 b5 00 00 00       	jmp    c00010dc <sYSMALLOc+0x261>
c0001027:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000102b:	31 c0                	xor    eax,eax
c000102d:	e9 52 ff ff ff       	jmp    c0000f84 <sYSMALLOc+0x109>
c0001032:	39 c6                	cmp    esi,eax
c0001034:	76 12                	jbe    c0001048 <sYSMALLOc+0x1cd>
c0001036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000103a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001041:	01 f0                	add    eax,esi
c0001043:	e9 7b ff ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c0001048:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000104c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000104f:	29 f0                	sub    eax,esi
c0001051:	01 c8                	add    eax,ecx
c0001053:	83 c8 01             	or     eax,0x1
c0001056:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001059:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c000105f:	85 ed                	test   ebp,ebp
c0001061:	0f 84 63 ff ff ff    	je     c0000fca <sYSMALLOc+0x14f>
c0001067:	8d 45 f4             	lea    eax,[ebp-0xc]
c000106a:	83 e0 f8             	and    eax,0xfffffff8
c000106d:	89 c2                	mov    edx,eax
c000106f:	83 ca 01             	or     edx,0x1
c0001072:	83 f8 0f             	cmp    eax,0xf
c0001075:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001078:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001080:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001088:	0f 86 3c ff ff ff    	jbe    c0000fca <sYSMALLOc+0x14f>
c000108e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001094:	83 ec 0c             	sub    esp,0xc
c0001097:	83 c7 08             	add    edi,0x8
c000109a:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a4:	57                   	push   edi
c00010a5:	e8 dc fc ff ff       	call   c0000d86 <dlfree>
c00010aa:	83 c4 10             	add    esp,0x10
c00010ad:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b3:	e9 12 ff ff ff       	jmp    c0000fca <sYSMALLOc+0x14f>
c00010b8:	83 ec 0c             	sub    esp,0xc
c00010bb:	6a 00                	push   0x0
c00010bd:	e8 e6 68 00 00       	call   c00079a8 <sbrk>
c00010c2:	89 c2                	mov    edx,eax
c00010c4:	29 f2                	sub    edx,esi
c00010c6:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010ca:	83 c4 10             	add    esp,0x10
c00010cd:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00010d7:	e9 e7 fe ff ff       	jmp    c0000fc3 <sYSMALLOc+0x148>
c00010dc:	83 c4 2c             	add    esp,0x2c
c00010df:	5b                   	pop    ebx
c00010e0:	5e                   	pop    esi
c00010e1:	5f                   	pop    edi
c00010e2:	5d                   	pop    ebp
c00010e3:	c3                   	ret    

c00010e4 <dlmalloc>:
c00010e4:	55                   	push   ebp
c00010e5:	57                   	push   edi
c00010e6:	56                   	push   esi
c00010e7:	53                   	push   ebx
c00010e8:	83 ec 1c             	sub    esp,0x1c
c00010eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010ef:	83 f8 df             	cmp    eax,0xffffffdf
c00010f2:	0f 87 70 03 00 00    	ja     c0001468 <dlmalloc+0x384>
c00010f8:	83 c0 0b             	add    eax,0xb
c00010fb:	be 10 00 00 00       	mov    esi,0x10
c0001100:	83 f8 0f             	cmp    eax,0xf
c0001103:	76 05                	jbe    c000110a <dlmalloc+0x26>
c0001105:	83 e0 f8             	and    eax,0xfffffff8
c0001108:	89 c6                	mov    esi,eax
c000110a:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c0001110:	f7 c7 01 00 00 00    	test   edi,0x1
c0001116:	75 17                	jne    c000112f <dlmalloc+0x4b>
c0001118:	85 ff                	test   edi,edi
c000111a:	0f 85 05 03 00 00    	jne    c0001425 <dlmalloc+0x341>
c0001120:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001125:	e8 75 fb ff ff       	call   c0000c9f <malloc_consolidate>
c000112a:	e9 f6 02 00 00       	jmp    c0001425 <dlmalloc+0x341>
c000112f:	39 f7                	cmp    edi,esi
c0001131:	72 1f                	jb     c0001152 <dlmalloc+0x6e>
c0001133:	89 f2                	mov    edx,esi
c0001135:	c1 ea 03             	shr    edx,0x3
c0001138:	83 ea 02             	sub    edx,0x2
c000113b:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001142:	85 c0                	test   eax,eax
c0001144:	74 0c                	je     c0001152 <dlmalloc+0x6e>
c0001146:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001149:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001150:	eb 30                	jmp    c0001182 <dlmalloc+0x9e>
c0001152:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001158:	89 f0                	mov    eax,esi
c000115a:	77 2e                	ja     c000118a <dlmalloc+0xa6>
c000115c:	c1 e8 03             	shr    eax,0x3
c000115f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001163:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000116a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000116d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001170:	39 c3                	cmp    ebx,eax
c0001172:	74 2e                	je     c00011a2 <dlmalloc+0xbe>
c0001174:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001177:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000117c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000117f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001182:	83 c0 08             	add    eax,0x8
c0001185:	e9 e0 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c000118a:	e8 8c fa ff ff       	call   c0000c1b <largebin_index>
c000118f:	83 e7 02             	and    edi,0x2
c0001192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001196:	74 0a                	je     c00011a2 <dlmalloc+0xbe>
c0001198:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000119d:	e8 fd fa ff ff       	call   c0000c9f <malloc_consolidate>
c00011a2:	8d 46 10             	lea    eax,[esi+0x10]
c00011a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011a9:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c00011af:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c00011b5:	0f 84 13 01 00 00    	je     c00012ce <dlmalloc+0x1ea>
c00011bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011c1:	83 e7 fc             	and    edi,0xfffffffc
c00011c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011ca:	77 4c                	ja     c0001218 <dlmalloc+0x134>
c00011cc:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c00011d1:	75 45                	jne    c0001218 <dlmalloc+0x134>
c00011d3:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011d9:	75 3d                	jne    c0001218 <dlmalloc+0x134>
c00011db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011df:	73 37                	jae    c0001218 <dlmalloc+0x134>
c00011e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011e4:	89 fa                	mov    edx,edi
c00011e6:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011eb:	29 f2                	sub    edx,esi
c00011ed:	83 ce 01             	or     esi,0x1
c00011f0:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011f5:	89 d1                	mov    ecx,edx
c00011f7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011fc:	83 c9 01             	or     ecx,0x1
c00011ff:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001206:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c000120d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001213:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001216:	eb 15                	jmp    c000122d <dlmalloc+0x149>
c0001218:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c000121d:	39 fe                	cmp    esi,edi
c000121f:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c0001226:	75 0d                	jne    c0001235 <dlmalloc+0x151>
c0001228:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000122d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001230:	e9 35 02 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001235:	81 ff ff 00 00 00    	cmp    edi,0xff
c000123b:	89 f8                	mov    eax,edi
c000123d:	77 19                	ja     c0001258 <dlmalloc+0x174>
c000123f:	c1 e8 03             	shr    eax,0x3
c0001242:	8d 14 00             	lea    edx,[eax+eax*1]
c0001245:	83 c2 0d             	add    edx,0xd
c0001248:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c000124f:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001256:	eb 46                	jmp    c000129e <dlmalloc+0x1ba>
c0001258:	e8 be f9 ff ff       	call   c0000c1b <largebin_index>
c000125d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001260:	83 c2 0d             	add    edx,0xd
c0001263:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c000126a:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001271:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001274:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001278:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000127c:	89 d5                	mov    ebp,edx
c000127e:	74 1e                	je     c000129e <dlmalloc+0x1ba>
c0001280:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001283:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001286:	77 12                	ja     c000129a <dlmalloc+0x1b6>
c0001288:	83 cf 01             	or     edi,0x1
c000128b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000128e:	76 05                	jbe    c0001295 <dlmalloc+0x1b1>
c0001290:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001293:	eb f6                	jmp    c000128b <dlmalloc+0x1a7>
c0001295:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001298:	eb 04                	jmp    c000129e <dlmalloc+0x1ba>
c000129a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000129e:	89 c7                	mov    edi,eax
c00012a0:	88 c1                	mov    cl,al
c00012a2:	c1 ff 05             	sar    edi,0x5
c00012a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012a9:	bf 01 00 00 00       	mov    edi,0x1
c00012ae:	d3 e7                	shl    edi,cl
c00012b0:	89 f8                	mov    eax,edi
c00012b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012b6:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c00012bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012c9:	e9 db fe ff ff       	jmp    c00011a9 <dlmalloc+0xc5>
c00012ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d4:	76 78                	jbe    c000134e <dlmalloc+0x26a>
c00012d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012da:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012e1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012e4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012e7:	39 ca                	cmp    edx,ecx
c00012e9:	74 63                	je     c000134e <dlmalloc+0x26a>
c00012eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012f1:	83 e3 fc             	and    ebx,0xfffffffc
c00012f4:	39 de                	cmp    esi,ebx
c00012f6:	77 52                	ja     c000134a <dlmalloc+0x266>
c00012f8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012fb:	89 df                	mov    edi,ebx
c00012fd:	01 d3                	add    ebx,edx
c00012ff:	29 f7                	sub    edi,esi
c0001301:	83 ff 0f             	cmp    edi,0xf
c0001304:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001307:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000130a:	8d 42 08             	lea    eax,[edx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x234>
c000130f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001313:	e9 52 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c0001318:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000131b:	83 ce 01             	or     esi,0x1
c000131e:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c0001324:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c000132a:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c0001331:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c0001338:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000133b:	89 fa                	mov    edx,edi
c000133d:	83 ca 01             	or     edx,0x1
c0001340:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001343:	89 3b                	mov    DWORD PTR [ebx],edi
c0001345:	e9 20 01 00 00       	jmp    c000146a <dlmalloc+0x386>
c000134a:	89 c2                	mov    edx,eax
c000134c:	eb 99                	jmp    c00012e7 <dlmalloc+0x203>
c000134e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001352:	b8 01 00 00 00       	mov    eax,0x1
c0001357:	41                   	inc    ecx
c0001358:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c000135f:	89 cb                	mov    ebx,ecx
c0001361:	c1 eb 05             	shr    ebx,0x5
c0001364:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000136b:	d3 e0                	shl    eax,cl
c000136d:	39 f8                	cmp    eax,edi
c000136f:	77 04                	ja     c0001375 <dlmalloc+0x291>
c0001371:	85 c0                	test   eax,eax
c0001373:	75 26                	jne    c000139b <dlmalloc+0x2b7>
c0001375:	43                   	inc    ebx
c0001376:	83 fb 02             	cmp    ebx,0x2
c0001379:	0f 87 a6 00 00 00    	ja     c0001425 <dlmalloc+0x341>
c000137f:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001386:	85 ff                	test   edi,edi
c0001388:	74 eb                	je     c0001375 <dlmalloc+0x291>
c000138a:	89 d8                	mov    eax,ebx
c000138c:	c1 e0 06             	shl    eax,0x6
c000138f:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c0001396:	b8 01 00 00 00       	mov    eax,0x1
c000139b:	85 f8                	test   eax,edi
c000139d:	75 07                	jne    c00013a6 <dlmalloc+0x2c2>
c000139f:	83 c2 08             	add    edx,0x8
c00013a2:	01 c0                	add    eax,eax
c00013a4:	eb f5                	jmp    c000139b <dlmalloc+0x2b7>
c00013a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013a9:	39 ca                	cmp    edx,ecx
c00013ab:	75 14                	jne    c00013c1 <dlmalloc+0x2dd>
c00013ad:	89 c1                	mov    ecx,eax
c00013af:	83 c2 08             	add    edx,0x8
c00013b2:	f7 d1                	not    ecx
c00013b4:	01 c0                	add    eax,eax
c00013b6:	21 cf                	and    edi,ecx
c00013b8:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c00013bf:	eb ac                	jmp    c000136d <dlmalloc+0x289>
c00013c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013c7:	83 e0 fc             	and    eax,0xfffffffc
c00013ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013cd:	89 c3                	mov    ebx,eax
c00013cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013d2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	8d 41 08             	lea    eax,[ecx+0x8]
c00013da:	83 fb 0f             	cmp    ebx,0xf
c00013dd:	77 09                	ja     c00013e8 <dlmalloc+0x304>
c00013df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013e3:	e9 82 00 00 00       	jmp    c000146a <dlmalloc+0x386>
c00013e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013f1:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013f7:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013fd:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c0001404:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c000140b:	77 06                	ja     c0001413 <dlmalloc+0x32f>
c000140d:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c0001413:	83 ce 01             	or     esi,0x1
c0001416:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001419:	89 d9                	mov    ecx,ebx
c000141b:	83 c9 01             	or     ecx,0x1
c000141e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001421:	89 1a                	mov    DWORD PTR [edx],ebx
c0001423:	eb 45                	jmp    c000146a <dlmalloc+0x386>
c0001425:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c000142a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000142d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001430:	83 e2 fc             	and    edx,0xfffffffc
c0001433:	39 d1                	cmp    ecx,edx
c0001435:	77 1e                	ja     c0001455 <dlmalloc+0x371>
c0001437:	89 f3                	mov    ebx,esi
c0001439:	29 f2                	sub    edx,esi
c000143b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000143e:	83 cb 01             	or     ebx,0x1
c0001441:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001447:	83 ca 01             	or     edx,0x1
c000144a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000144d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001450:	e9 2d fd ff ff       	jmp    c0001182 <dlmalloc+0x9e>
c0001455:	83 c4 1c             	add    esp,0x1c
c0001458:	89 f0                	mov    eax,esi
c000145a:	5b                   	pop    ebx
c000145b:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 13 fa ff ff       	jmp    c0000e7b <sYSMALLOc>
c0001468:	31 c0                	xor    eax,eax
c000146a:	83 c4 1c             	add    esp,0x1c
c000146d:	5b                   	pop    ebx
c000146e:	5e                   	pop    esi
c000146f:	5f                   	pop    edi
c0001470:	5d                   	pop    ebp
c0001471:	c3                   	ret    

c0001472 <iALLOc>:
c0001472:	55                   	push   ebp
c0001473:	89 c5                	mov    ebp,eax
c0001475:	57                   	push   edi
c0001476:	56                   	push   esi
c0001477:	53                   	push   ebx
c0001478:	83 ec 2c             	sub    esp,0x2c
c000147b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000147f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001483:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c000148a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000148e:	75 12                	jne    c00014a2 <iALLOc+0x30>
c0001490:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001494:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001499:	e8 01 f8 ff ff       	call   c0000c9f <malloc_consolidate>
c000149e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014a7:	74 12                	je     c00014bb <iALLOc+0x49>
c00014a9:	85 ed                	test   ebp,ebp
c00014ab:	0f 84 64 01 00 00    	je     c0001615 <iALLOc+0x1a3>
c00014b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014b9:	eb 33                	jmp    c00014ee <iALLOc+0x7c>
c00014bb:	85 ed                	test   ebp,ebp
c00014bd:	75 14                	jne    c00014d3 <iALLOc+0x61>
c00014bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014c7:	83 c4 2c             	add    esp,0x2c
c00014ca:	5b                   	pop    ebx
c00014cb:	5e                   	pop    esi
c00014cc:	5f                   	pop    edi
c00014cd:	5d                   	pop    ebp
c00014ce:	e9 11 fc ff ff       	jmp    c00010e4 <dlmalloc>
c00014d3:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014db:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e2:	83 f8 0f             	cmp    eax,0xf
c00014e5:	76 07                	jbe    c00014ee <iALLOc+0x7c>
c00014e7:	83 e0 f8             	and    eax,0xfffffff8
c00014ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014f3:	75 09                	jne    c00014fe <iALLOc+0x8c>
c00014f5:	89 d0                	mov    eax,edx
c00014f7:	31 f6                	xor    esi,esi
c00014f9:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014fc:	eb 3b                	jmp    c0001539 <iALLOc+0xc7>
c00014fe:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001506:	8b 02                	mov    eax,DWORD PTR [edx]
c0001508:	83 c0 0b             	add    eax,0xb
c000150b:	83 f8 0f             	cmp    eax,0xf
c000150e:	76 07                	jbe    c0001517 <iALLOc+0xa5>
c0001510:	83 e0 f8             	and    eax,0xfffffff8
c0001513:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001517:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000151b:	0f af f5             	imul   esi,ebp
c000151e:	eb 25                	jmp    c0001545 <iALLOc+0xd3>
c0001520:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001522:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001525:	bb 10 00 00 00       	mov    ebx,0x10
c000152a:	83 f9 0f             	cmp    ecx,0xf
c000152d:	76 05                	jbe    c0001534 <iALLOc+0xc2>
c000152f:	83 e1 f8             	and    ecx,0xfffffff8
c0001532:	89 cb                	mov    ebx,ecx
c0001534:	01 de                	add    esi,ebx
c0001536:	83 c0 04             	add    eax,0x4
c0001539:	39 c7                	cmp    edi,eax
c000153b:	75 e3                	jne    c0001520 <iALLOc+0xae>
c000153d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001545:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001549:	83 ec 0c             	sub    esp,0xc
c000154c:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001552:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c000155c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001560:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001564:	50                   	push   eax
c0001565:	e8 7a fb ff ff       	call   c00010e4 <dlmalloc>
c000156a:	83 c4 10             	add    esp,0x10
c000156d:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c0001573:	85 c0                	test   eax,eax
c0001575:	0f 84 92 00 00 00    	je     c000160d <iALLOc+0x19b>
c000157b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000157e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001581:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001585:	83 e3 fc             	and    ebx,0xfffffffc
c0001588:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000158d:	74 1e                	je     c00015ad <iALLOc+0x13b>
c000158f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001593:	89 d9                	mov    ecx,ebx
c0001595:	52                   	push   edx
c0001596:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000159a:	83 e9 04             	sub    ecx,0x4
c000159d:	51                   	push   ecx
c000159e:	6a 00                	push   0x0
c00015a0:	50                   	push   eax
c00015a1:	e8 4a ef ff ff       	call   c00004f0 <memset>
c00015a6:	83 c4 10             	add    esp,0x10
c00015a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015b2:	75 14                	jne    c00015c8 <iALLOc+0x156>
c00015b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00015b7:	29 f3                	sub    ebx,esi
c00015b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00015bc:	83 cb 01             	or     ebx,0x1
c00015bf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015c2:	89 f3                	mov    ebx,esi
c00015c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c8:	31 c0                	xor    eax,eax
c00015ca:	4d                   	dec    ebp
c00015cb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015cf:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d2:	39 c5                	cmp    ebp,eax
c00015d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015d7:	74 2c                	je     c0001605 <iALLOc+0x193>
c00015d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015dd:	85 c9                	test   ecx,ecx
c00015df:	75 15                	jne    c00015f6 <iALLOc+0x184>
c00015e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015e7:	b9 10 00 00 00       	mov    ecx,0x10
c00015ec:	83 fe 0f             	cmp    esi,0xf
c00015ef:	76 05                	jbe    c00015f6 <iALLOc+0x184>
c00015f1:	83 e6 f8             	and    esi,0xfffffff8
c00015f4:	89 f1                	mov    ecx,esi
c00015f6:	89 ce                	mov    esi,ecx
c00015f8:	29 cb                	sub    ebx,ecx
c00015fa:	83 ce 01             	or     esi,0x1
c00015fd:	40                   	inc    eax
c00015fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001601:	01 cf                	add    edi,ecx
c0001603:	eb c6                	jmp    c00015cb <iALLOc+0x159>
c0001605:	83 cb 01             	or     ebx,0x1
c0001608:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000160b:	eb 08                	jmp    c0001615 <iALLOc+0x1a3>
c000160d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001619:	83 c4 2c             	add    esp,0x2c
c000161c:	5b                   	pop    ebx
c000161d:	5e                   	pop    esi
c000161e:	5f                   	pop    edi
c000161f:	5d                   	pop    ebp
c0001620:	c3                   	ret    

c0001621 <dlrealloc>:
c0001621:	55                   	push   ebp
c0001622:	57                   	push   edi
c0001623:	56                   	push   esi
c0001624:	53                   	push   ebx
c0001625:	83 ec 1c             	sub    esp,0x1c
c0001628:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000162c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001630:	85 db                	test   ebx,ebx
c0001632:	75 10                	jne    c0001644 <dlrealloc+0x23>
c0001634:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001638:	83 c4 1c             	add    esp,0x1c
c000163b:	5b                   	pop    ebx
c000163c:	5e                   	pop    esi
c000163d:	5f                   	pop    edi
c000163e:	5d                   	pop    ebp
c000163f:	e9 a0 fa ff ff       	jmp    c00010e4 <dlmalloc>
c0001644:	83 f8 df             	cmp    eax,0xffffffdf
c0001647:	76 07                	jbe    c0001650 <dlrealloc+0x2f>
c0001649:	31 db                	xor    ebx,ebx
c000164b:	e9 6b 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c0001650:	83 c0 0b             	add    eax,0xb
c0001653:	bd 10 00 00 00       	mov    ebp,0x10
c0001658:	83 f8 0f             	cmp    eax,0xf
c000165b:	76 05                	jbe    c0001662 <dlrealloc+0x41>
c000165d:	83 e0 f8             	and    eax,0xfffffff8
c0001660:	89 c5                	mov    ebp,eax
c0001662:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001665:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001668:	89 ce                	mov    esi,ecx
c000166a:	83 e6 fc             	and    esi,0xfffffffc
c000166d:	f6 c1 02             	test   cl,0x2
c0001670:	75 d7                	jne    c0001649 <dlrealloc+0x28>
c0001672:	39 f5                	cmp    ebp,esi
c0001674:	0f 86 04 01 00 00    	jbe    c000177e <dlrealloc+0x15d>
c000167a:	8d 14 37             	lea    edx,[edi+esi*1]
c000167d:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c0001683:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001686:	75 33                	jne    c00016bb <dlrealloc+0x9a>
c0001688:	83 e0 fc             	and    eax,0xfffffffc
c000168b:	01 f0                	add    eax,esi
c000168d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001691:	8d 45 10             	lea    eax,[ebp+0x10]
c0001694:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0001698:	77 49                	ja     c00016e3 <dlrealloc+0xc2>
c000169a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000169e:	83 e1 01             	and    ecx,0x1
c00016a1:	01 ef                	add    edi,ebp
c00016a3:	09 e9                	or     ecx,ebp
c00016a5:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00016a8:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c00016ae:	29 e8                	sub    eax,ebp
c00016b0:	83 c8 01             	or     eax,0x1
c00016b3:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016b6:	e9 00 01 00 00       	jmp    c00017bb <dlrealloc+0x19a>
c00016bb:	89 c1                	mov    ecx,eax
c00016bd:	83 e1 fe             	and    ecx,0xfffffffe
c00016c0:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00016c5:	75 1c                	jne    c00016e3 <dlrealloc+0xc2>
c00016c7:	83 e0 fc             	and    eax,0xfffffffc
c00016ca:	01 f0                	add    eax,esi
c00016cc:	39 c5                	cmp    ebp,eax
c00016ce:	77 13                	ja     c00016e3 <dlrealloc+0xc2>
c00016d0:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00016d3:	89 c6                	mov    esi,eax
c00016d5:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00016d8:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00016db:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00016de:	e9 9b 00 00 00       	jmp    c000177e <dlrealloc+0x15d>
c00016e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016e7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016ea:	83 ec 0c             	sub    esp,0xc
c00016ed:	50                   	push   eax
c00016ee:	e8 f1 f9 ff ff       	call   c00010e4 <dlmalloc>
c00016f3:	83 c4 10             	add    esp,0x10
c00016f6:	85 c0                	test   eax,eax
c00016f8:	0f 84 4b ff ff ff    	je     c0001649 <dlrealloc+0x28>
c00016fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001702:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001705:	39 ca                	cmp    edx,ecx
c0001707:	75 0a                	jne    c0001713 <dlrealloc+0xf2>
c0001709:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000170c:	83 e0 fc             	and    eax,0xfffffffc
c000170f:	01 c6                	add    esi,eax
c0001711:	eb 6b                	jmp    c000177e <dlrealloc+0x15d>
c0001713:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001716:	83 f9 27             	cmp    ecx,0x27
c0001719:	76 08                	jbe    c0001723 <dlrealloc+0x102>
c000171b:	89 de                	mov    esi,ebx
c000171d:	89 c7                	mov    edi,eax
c000171f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001721:	eb 43                	jmp    c0001766 <dlrealloc+0x145>
c0001723:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001725:	83 f9 13             	cmp    ecx,0x13
c0001728:	89 10                	mov    DWORD PTR [eax],edx
c000172a:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000172d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001730:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001733:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001736:	76 2e                	jbe    c0001766 <dlrealloc+0x145>
c0001738:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000173b:	83 f9 1b             	cmp    ecx,0x1b
c000173e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001741:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001744:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001747:	76 1d                	jbe    c0001766 <dlrealloc+0x145>
c0001749:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000174c:	83 f9 23             	cmp    ecx,0x23
c000174f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001752:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001755:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001758:	76 0c                	jbe    c0001766 <dlrealloc+0x145>
c000175a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000175d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001760:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001763:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000176a:	83 ec 0c             	sub    esp,0xc
c000176d:	53                   	push   ebx
c000176e:	e8 13 f6 ff ff       	call   c0000d86 <dlfree>
c0001773:	83 c4 10             	add    esp,0x10
c0001776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000177a:	89 c3                	mov    ebx,eax
c000177c:	eb 3d                	jmp    c00017bb <dlrealloc+0x19a>
c000177e:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001781:	8d 04 37             	lea    eax,[edi+esi*1]
c0001784:	89 f2                	mov    edx,esi
c0001786:	29 ea                	sub    edx,ebp
c0001788:	83 e1 01             	and    ecx,0x1
c000178b:	83 fa 0f             	cmp    edx,0xf
c000178e:	77 0b                	ja     c000179b <dlrealloc+0x17a>
c0001790:	09 ce                	or     esi,ecx
c0001792:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001795:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001799:	eb 20                	jmp    c00017bb <dlrealloc+0x19a>
c000179b:	01 ef                	add    edi,ebp
c000179d:	83 ca 01             	or     edx,0x1
c00017a0:	09 cd                	or     ebp,ecx
c00017a2:	83 ec 0c             	sub    esp,0xc
c00017a5:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017a8:	83 c7 08             	add    edi,0x8
c00017ab:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017ae:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017b2:	57                   	push   edi
c00017b3:	e8 ce f5 ff ff       	call   c0000d86 <dlfree>
c00017b8:	83 c4 10             	add    esp,0x10
c00017bb:	83 c4 1c             	add    esp,0x1c
c00017be:	89 d8                	mov    eax,ebx
c00017c0:	5b                   	pop    ebx
c00017c1:	5e                   	pop    esi
c00017c2:	5f                   	pop    edi
c00017c3:	5d                   	pop    ebp
c00017c4:	c3                   	ret    

c00017c5 <dlmemalign>:
c00017c5:	55                   	push   ebp
c00017c6:	57                   	push   edi
c00017c7:	56                   	push   esi
c00017c8:	53                   	push   ebx
c00017c9:	83 ec 0c             	sub    esp,0xc
c00017cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017d4:	83 fa 08             	cmp    edx,0x8
c00017d7:	77 10                	ja     c00017e9 <dlmemalign+0x24>
c00017d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017dd:	83 c4 0c             	add    esp,0xc
c00017e0:	5b                   	pop    ebx
c00017e1:	5e                   	pop    esi
c00017e2:	5f                   	pop    edi
c00017e3:	5d                   	pop    ebp
c00017e4:	e9 fb f8 ff ff       	jmp    c00010e4 <dlmalloc>
c00017e9:	83 fa 0f             	cmp    edx,0xf
c00017ec:	bf 10 00 00 00       	mov    edi,0x10
c00017f1:	76 13                	jbe    c0001806 <dlmemalign+0x41>
c00017f3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017f6:	85 d1                	test   ecx,edx
c00017f8:	75 04                	jne    c00017fe <dlmemalign+0x39>
c00017fa:	89 d7                	mov    edi,edx
c00017fc:	eb 08                	jmp    c0001806 <dlmemalign+0x41>
c00017fe:	39 d7                	cmp    edi,edx
c0001800:	73 04                	jae    c0001806 <dlmemalign+0x41>
c0001802:	01 ff                	add    edi,edi
c0001804:	eb f8                	jmp    c00017fe <dlmemalign+0x39>
c0001806:	83 f8 df             	cmp    eax,0xffffffdf
c0001809:	76 07                	jbe    c0001812 <dlmemalign+0x4d>
c000180b:	31 c0                	xor    eax,eax
c000180d:	e9 ce 00 00 00       	jmp    c00018e0 <dlmemalign+0x11b>
c0001812:	83 c0 0b             	add    eax,0xb
c0001815:	bd 10 00 00 00       	mov    ebp,0x10
c000181a:	83 f8 0f             	cmp    eax,0xf
c000181d:	76 05                	jbe    c0001824 <dlmemalign+0x5f>
c000181f:	83 e0 f8             	and    eax,0xfffffff8
c0001822:	89 c5                	mov    ebp,eax
c0001824:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001828:	83 ec 0c             	sub    esp,0xc
c000182b:	50                   	push   eax
c000182c:	e8 b3 f8 ff ff       	call   c00010e4 <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	85 c0                	test   eax,eax
c0001836:	89 c1                	mov    ecx,eax
c0001838:	74 d1                	je     c000180b <dlmemalign+0x46>
c000183a:	8d 70 f8             	lea    esi,[eax-0x8]
c000183d:	31 d2                	xor    edx,edx
c000183f:	f7 f7                	div    edi
c0001841:	85 d2                	test   edx,edx
c0001843:	74 62                	je     c00018a7 <dlmemalign+0xe2>
c0001845:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001849:	89 f8                	mov    eax,edi
c000184b:	f7 d8                	neg    eax
c000184d:	21 c3                	and    ebx,eax
c000184f:	83 eb 08             	sub    ebx,0x8
c0001852:	89 d8                	mov    eax,ebx
c0001854:	29 f0                	sub    eax,esi
c0001856:	83 f8 0f             	cmp    eax,0xf
c0001859:	77 02                	ja     c000185d <dlmemalign+0x98>
c000185b:	01 fb                	add    ebx,edi
c000185d:	89 d8                	mov    eax,ebx
c000185f:	29 f0                	sub    eax,esi
c0001861:	89 c6                	mov    esi,eax
c0001863:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001866:	89 c2                	mov    edx,eax
c0001868:	83 e2 fc             	and    edx,0xfffffffc
c000186b:	29 f2                	sub    edx,esi
c000186d:	a8 02                	test   al,0x2
c000186f:	74 10                	je     c0001881 <dlmemalign+0xbc>
c0001871:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001874:	83 ca 02             	or     edx,0x2
c0001877:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000187a:	8d 43 08             	lea    eax,[ebx+0x8]
c000187d:	89 33                	mov    DWORD PTR [ebx],esi
c000187f:	eb 5f                	jmp    c00018e0 <dlmemalign+0x11b>
c0001881:	89 d0                	mov    eax,edx
c0001883:	83 ec 0c             	sub    esp,0xc
c0001886:	83 c8 01             	or     eax,0x1
c0001889:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000188c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001891:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001894:	83 e0 01             	and    eax,0x1
c0001897:	09 f0                	or     eax,esi
c0001899:	89 de                	mov    esi,ebx
c000189b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000189e:	51                   	push   ecx
c000189f:	e8 e2 f4 ff ff       	call   c0000d86 <dlfree>
c00018a4:	83 c4 10             	add    esp,0x10
c00018a7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018aa:	a8 02                	test   al,0x2
c00018ac:	75 2f                	jne    c00018dd <dlmemalign+0x118>
c00018ae:	8d 55 10             	lea    edx,[ebp+0x10]
c00018b1:	83 e0 fc             	and    eax,0xfffffffc
c00018b4:	39 c2                	cmp    edx,eax
c00018b6:	73 25                	jae    c00018dd <dlmemalign+0x118>
c00018b8:	29 e8                	sub    eax,ebp
c00018ba:	83 ec 0c             	sub    esp,0xc
c00018bd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c0:	83 c8 01             	or     eax,0x1
c00018c3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00018c6:	83 c2 08             	add    edx,0x8
c00018c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cc:	83 e0 01             	and    eax,0x1
c00018cf:	09 c5                	or     ebp,eax
c00018d1:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018d4:	52                   	push   edx
c00018d5:	e8 ac f4 ff ff       	call   c0000d86 <dlfree>
c00018da:	83 c4 10             	add    esp,0x10
c00018dd:	8d 46 08             	lea    eax,[esi+0x8]
c00018e0:	83 c4 0c             	add    esp,0xc
c00018e3:	5b                   	pop    ebx
c00018e4:	5e                   	pop    esi
c00018e5:	5f                   	pop    edi
c00018e6:	5d                   	pop    ebp
c00018e7:	c3                   	ret    

c00018e8 <dlcalloc>:
c00018e8:	53                   	push   ebx
c00018e9:	83 ec 14             	sub    esp,0x14
c00018ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018f0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018f5:	50                   	push   eax
c00018f6:	e8 e9 f7 ff ff       	call   c00010e4 <dlmalloc>
c00018fb:	83 c4 10             	add    esp,0x10
c00018fe:	85 c0                	test   eax,eax
c0001900:	89 c3                	mov    ebx,eax
c0001902:	74 77                	je     c000197b <dlcalloc+0x93>
c0001904:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001907:	89 d0                	mov    eax,edx
c0001909:	83 e0 fc             	and    eax,0xfffffffc
c000190c:	80 e2 02             	and    dl,0x2
c000190f:	75 5a                	jne    c000196b <dlcalloc+0x83>
c0001911:	83 e8 04             	sub    eax,0x4
c0001914:	83 f8 27             	cmp    eax,0x27
c0001917:	76 03                	jbe    c000191c <dlcalloc+0x34>
c0001919:	51                   	push   ecx
c000191a:	eb 53                	jmp    c000196f <dlcalloc+0x87>
c000191c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001922:	83 f8 13             	cmp    eax,0x13
c0001925:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000192c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001933:	76 46                	jbe    c000197b <dlcalloc+0x93>
c0001935:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000193c:	83 f8 1b             	cmp    eax,0x1b
c000193f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001946:	76 33                	jbe    c000197b <dlcalloc+0x93>
c0001948:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000194f:	83 f8 23             	cmp    eax,0x23
c0001952:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001959:	76 20                	jbe    c000197b <dlcalloc+0x93>
c000195b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001962:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001969:	eb 10                	jmp    c000197b <dlcalloc+0x93>
c000196b:	52                   	push   edx
c000196c:	83 e8 08             	sub    eax,0x8
c000196f:	50                   	push   eax
c0001970:	6a 00                	push   0x0
c0001972:	53                   	push   ebx
c0001973:	e8 78 eb ff ff       	call   c00004f0 <memset>
c0001978:	83 c4 10             	add    esp,0x10
c000197b:	83 c4 08             	add    esp,0x8
c000197e:	89 d8                	mov    eax,ebx
c0001980:	5b                   	pop    ebx
c0001981:	c3                   	ret    

c0001982 <dlcfree>:
c0001982:	e9 ff f3 ff ff       	jmp    c0000d86 <dlfree>

c0001987 <dlindependent_calloc>:
c0001987:	83 ec 28             	sub    esp,0x28
c000198a:	b9 03 00 00 00       	mov    ecx,0x3
c000198f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001993:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000199b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a3:	e8 ca fa ff ff       	call   c0001472 <iALLOc>
c00019a8:	83 c4 2c             	add    esp,0x2c
c00019ab:	c3                   	ret    

c00019ac <dlindependent_comalloc>:
c00019ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019b0:	31 c9                	xor    ecx,ecx
c00019b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019be:	e9 af fa ff ff       	jmp    c0001472 <iALLOc>

c00019c3 <dlvalloc>:
c00019c3:	83 ec 0c             	sub    esp,0xc
c00019c6:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019cd:	75 0a                	jne    c00019d9 <dlvalloc+0x16>
c00019cf:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019d4:	e8 c6 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c00019d9:	50                   	push   eax
c00019da:	50                   	push   eax
c00019db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019df:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019e5:	e8 db fd ff ff       	call   c00017c5 <dlmemalign>
c00019ea:	83 c4 1c             	add    esp,0x1c
c00019ed:	c3                   	ret    

c00019ee <dlpvalloc>:
c00019ee:	83 ec 0c             	sub    esp,0xc
c00019f1:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019f8:	75 0a                	jne    c0001a04 <dlpvalloc+0x16>
c00019fa:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ff:	e8 9b f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a04:	52                   	push   edx
c0001a05:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c0001a0a:	52                   	push   edx
c0001a0b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a0f:	89 c1                	mov    ecx,eax
c0001a11:	f7 d9                	neg    ecx
c0001a13:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a17:	21 ca                	and    edx,ecx
c0001a19:	52                   	push   edx
c0001a1a:	50                   	push   eax
c0001a1b:	e8 a5 fd ff ff       	call   c00017c5 <dlmemalign>
c0001a20:	83 c4 1c             	add    esp,0x1c
c0001a23:	c3                   	ret    

c0001a24 <dlmalloc_trim>:
c0001a24:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a29:	e8 71 f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a2e:	31 c0                	xor    eax,eax
c0001a30:	c3                   	ret    

c0001a31 <dlmalloc_usable_size>:
c0001a31:	53                   	push   ebx
c0001a32:	31 c0                	xor    eax,eax
c0001a34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a38:	85 c9                	test   ecx,ecx
c0001a3a:	74 24                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a3c:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a3f:	f6 c2 02             	test   dl,0x2
c0001a42:	74 08                	je     c0001a4c <dlmalloc_usable_size+0x1b>
c0001a44:	83 e2 fc             	and    edx,0xfffffffc
c0001a47:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a4a:	eb 14                	jmp    c0001a60 <dlmalloc_usable_size+0x2f>
c0001a4c:	89 d3                	mov    ebx,edx
c0001a4e:	31 c0                	xor    eax,eax
c0001a50:	83 e3 fe             	and    ebx,0xfffffffe
c0001a53:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a58:	74 06                	je     c0001a60 <dlmalloc_usable_size+0x2f>
c0001a5a:	83 e2 fc             	and    edx,0xfffffffc
c0001a5d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a60:	5b                   	pop    ebx
c0001a61:	c3                   	ret    

c0001a62 <dlmallinfo>:
c0001a62:	55                   	push   ebp
c0001a63:	57                   	push   edi
c0001a64:	56                   	push   esi
c0001a65:	53                   	push   ebx
c0001a66:	83 ec 08             	sub    esp,0x8
c0001a69:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a74:	75 0a                	jne    c0001a80 <dlmallinfo+0x1e>
c0001a76:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a7b:	e8 1f f2 ff ff       	call   c0000c9f <malloc_consolidate>
c0001a80:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a85:	31 ed                	xor    ebp,ebp
c0001a87:	31 c9                	xor    ecx,ecx
c0001a89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a8c:	83 e0 fc             	and    eax,0xfffffffc
c0001a8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a93:	31 c0                	xor    eax,eax
c0001a95:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a9c:	85 d2                	test   edx,edx
c0001a9e:	74 0e                	je     c0001aae <dlmallinfo+0x4c>
c0001aa0:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aa3:	45                   	inc    ebp
c0001aa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aa7:	83 e6 fc             	and    esi,0xfffffffc
c0001aaa:	01 f1                	add    ecx,esi
c0001aac:	eb ee                	jmp    c0001a9c <dlmallinfo+0x3a>
c0001aae:	40                   	inc    eax
c0001aaf:	83 f8 0a             	cmp    eax,0xa
c0001ab2:	75 e1                	jne    c0001a95 <dlmallinfo+0x33>
c0001ab4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001abb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abf:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ac2:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001ac7:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aca:	39 f0                	cmp    eax,esi
c0001acc:	74 10                	je     c0001ade <dlmallinfo+0x7c>
c0001ace:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001ad1:	ff 04 24             	inc    DWORD PTR [esp]
c0001ad4:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ad7:	83 e7 fc             	and    edi,0xfffffffc
c0001ada:	01 fa                	add    edx,edi
c0001adc:	eb ec                	jmp    c0001aca <dlmallinfo+0x68>
c0001ade:	83 c0 08             	add    eax,0x8
c0001ae1:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001ae6:	75 df                	jne    c0001ac7 <dlmallinfo+0x65>
c0001ae8:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aee:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af1:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001af6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001afc:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001aff:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b02:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001b08:	89 03                	mov    DWORD PTR [ebx],eax
c0001b0a:	29 d0                	sub    eax,edx
c0001b0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b13:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b16:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b19:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001b1f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b22:	89 d8                	mov    eax,ebx
c0001b24:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b27:	83 c4 08             	add    esp,0x8
c0001b2a:	5b                   	pop    ebx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	5d                   	pop    ebp
c0001b2e:	c2 04 00             	ret    0x4

c0001b31 <dlmalloc_stats>:
c0001b31:	83 ec 30             	sub    esp,0x30
c0001b34:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b38:	50                   	push   eax
c0001b39:	e8 24 ff ff ff       	call   c0001a62 <dlmallinfo>
c0001b3e:	83 c4 30             	add    esp,0x30
c0001b41:	c3                   	ret    

c0001b42 <dlmallopt>:
c0001b42:	56                   	push   esi
c0001b43:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b48:	53                   	push   ebx
c0001b49:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b51:	e8 49 f1 ff ff       	call   c0000c9f <malloc_consolidate>
c0001b56:	8d 46 04             	lea    eax,[esi+0x4]
c0001b59:	83 f8 05             	cmp    eax,0x5
c0001b5c:	77 67                	ja     c0001bc5 <dlmallopt+0x83>
c0001b5e:	ff 24 85 e4 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe001c]
c0001b65:	83 fb 50             	cmp    ebx,0x50
c0001b68:	77 5b                	ja     c0001bc5 <dlmallopt+0x83>
c0001b6a:	85 db                	test   ebx,ebx
c0001b6c:	ba 08 00 00 00       	mov    edx,0x8
c0001b71:	74 12                	je     c0001b85 <dlmallopt+0x43>
c0001b73:	83 c3 0b             	add    ebx,0xb
c0001b76:	ba 10 00 00 00       	mov    edx,0x10
c0001b7b:	83 fb 0f             	cmp    ebx,0xf
c0001b7e:	76 05                	jbe    c0001b85 <dlmallopt+0x43>
c0001b80:	89 da                	mov    edx,ebx
c0001b82:	83 e2 f8             	and    edx,0xfffffff8
c0001b85:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b8a:	83 e0 03             	and    eax,0x3
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b94:	eb 31                	jmp    c0001bc7 <dlmallopt+0x85>
c0001b96:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b9c:	eb 06                	jmp    c0001ba4 <dlmallopt+0x62>
c0001b9e:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001ba4:	be 01 00 00 00       	mov    esi,0x1
c0001ba9:	eb 1c                	jmp    c0001bc7 <dlmallopt+0x85>
c0001bab:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001bb1:	eb f1                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bb3:	31 f6                	xor    esi,esi
c0001bb5:	85 db                	test   ebx,ebx
c0001bb7:	75 0e                	jne    c0001bc7 <dlmallopt+0x85>
c0001bb9:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001bc3:	eb df                	jmp    c0001ba4 <dlmallopt+0x62>
c0001bc5:	31 f6                	xor    esi,esi
c0001bc7:	5b                   	pop    ebx
c0001bc8:	89 f0                	mov    eax,esi
c0001bca:	5e                   	pop    esi
c0001bcb:	c3                   	ret    

c0001bcc <isblank>:
c0001bcc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001bd1:	74 09                	je     c0001bdc <isblank+0x10>
c0001bd3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001bd8:	75 0a                	jne    c0001be4 <isblank+0x18>
c0001bda:	66 90                	xchg   ax,ax
c0001bdc:	b8 01 00 00 00       	mov    eax,0x1
c0001be1:	c3                   	ret    
c0001be2:	66 90                	xchg   ax,ax
c0001be4:	b8 00 00 00 00       	mov    eax,0x0
c0001be9:	c3                   	ret    
c0001bea:	66 90                	xchg   ax,ax

c0001bec <iscntrl>:
c0001bec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bf1:	7e 09                	jle    c0001bfc <iscntrl+0x10>
c0001bf3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bf8:	75 0a                	jne    c0001c04 <iscntrl+0x18>
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 01 00 00 00       	mov    eax,0x1
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isdigit>:
c0001c0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001c11:	7e 0d                	jle    c0001c20 <isdigit+0x14>
c0001c13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001c18:	7f 06                	jg     c0001c20 <isdigit+0x14>
c0001c1a:	b8 01 00 00 00       	mov    eax,0x1
c0001c1f:	c3                   	ret    
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <islower>:
c0001c28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001c2d:	7e 0d                	jle    c0001c3c <islower+0x14>
c0001c2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001c34:	7f 06                	jg     c0001c3c <islower+0x14>
c0001c36:	b8 01 00 00 00       	mov    eax,0x1
c0001c3b:	c3                   	ret    
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isspace>:
c0001c44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c49:	7c 19                	jl     c0001c64 <isspace+0x20>
c0001c4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c50:	7e 0a                	jle    c0001c5c <isspace+0x18>
c0001c52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c57:	75 0b                	jne    c0001c64 <isspace+0x20>
c0001c59:	8d 76 00             	lea    esi,[esi+0x0]
c0001c5c:	b8 01 00 00 00       	mov    eax,0x1
c0001c61:	c3                   	ret    
c0001c62:	66 90                	xchg   ax,ax
c0001c64:	b8 00 00 00 00       	mov    eax,0x0
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax

c0001c6c <isupper>:
c0001c6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c71:	7e 0d                	jle    c0001c80 <isupper+0x14>
c0001c73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c78:	7f 06                	jg     c0001c80 <isupper+0x14>
c0001c7a:	b8 01 00 00 00       	mov    eax,0x1
c0001c7f:	c3                   	ret    
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isalpha>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 db ff ff ff       	call   c0001c6c <isupper>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 10                	jne    c0001ca8 <isalpha+0x20>
c0001c98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c9c:	e8 87 ff ff ff       	call   c0001c28 <islower>
c0001ca1:	83 c4 04             	add    esp,0x4
c0001ca4:	85 c0                	test   eax,eax
c0001ca6:	74 08                	je     c0001cb0 <isalpha+0x28>
c0001ca8:	b8 01 00 00 00       	mov    eax,0x1
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 00 00 00 00       	mov    eax,0x0
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax

c0001cb8 <isalnum>:
c0001cb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cbc:	e8 c7 ff ff ff       	call   c0001c88 <isalpha>
c0001cc1:	83 c4 04             	add    esp,0x4
c0001cc4:	85 c0                	test   eax,eax
c0001cc6:	75 10                	jne    c0001cd8 <isalnum+0x20>
c0001cc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ccc:	e8 3b ff ff ff       	call   c0001c0c <isdigit>
c0001cd1:	83 c4 04             	add    esp,0x4
c0001cd4:	85 c0                	test   eax,eax
c0001cd6:	74 08                	je     c0001ce0 <isalnum+0x28>
c0001cd8:	b8 01 00 00 00       	mov    eax,0x1
c0001cdd:	c3                   	ret    
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <ispunct>:
c0001ce8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cec:	e8 c7 ff ff ff       	call   c0001cb8 <isalnum>
c0001cf1:	83 c4 04             	add    esp,0x4
c0001cf4:	85 c0                	test   eax,eax
c0001cf6:	75 28                	jne    c0001d20 <ispunct+0x38>
c0001cf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cfc:	e8 43 ff ff ff       	call   c0001c44 <isspace>
c0001d01:	83 c4 04             	add    esp,0x4
c0001d04:	85 c0                	test   eax,eax
c0001d06:	75 18                	jne    c0001d20 <ispunct+0x38>
c0001d08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d0c:	e8 db fe ff ff       	call   c0001bec <iscntrl>
c0001d11:	83 c4 04             	add    esp,0x4
c0001d14:	85 c0                	test   eax,eax
c0001d16:	75 08                	jne    c0001d20 <ispunct+0x38>
c0001d18:	b8 01 00 00 00       	mov    eax,0x1
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax
c0001d20:	b8 00 00 00 00       	mov    eax,0x0
c0001d25:	c3                   	ret    
c0001d26:	66 90                	xchg   ax,ax

c0001d28 <isgraph>:
c0001d28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d2c:	e8 87 ff ff ff       	call   c0001cb8 <isalnum>
c0001d31:	83 c4 04             	add    esp,0x4
c0001d34:	85 c0                	test   eax,eax
c0001d36:	75 10                	jne    c0001d48 <isgraph+0x20>
c0001d38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d3c:	e8 a7 ff ff ff       	call   c0001ce8 <ispunct>
c0001d41:	83 c4 04             	add    esp,0x4
c0001d44:	85 c0                	test   eax,eax
c0001d46:	74 08                	je     c0001d50 <isgraph+0x28>
c0001d48:	b8 01 00 00 00       	mov    eax,0x1
c0001d4d:	c3                   	ret    
c0001d4e:	66 90                	xchg   ax,ax
c0001d50:	b8 00 00 00 00       	mov    eax,0x0
c0001d55:	c3                   	ret    
c0001d56:	66 90                	xchg   ax,ax

c0001d58 <isprint>:
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 c7 ff ff ff       	call   c0001d28 <isgraph>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	75 08                	jne    c0001d70 <isprint+0x18>
c0001d68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d6d:	75 09                	jne    c0001d78 <isprint+0x20>
c0001d6f:	90                   	nop
c0001d70:	b8 01 00 00 00       	mov    eax,0x1
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 00 00 00 00       	mov    eax,0x0
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax

c0001d80 <isxdigit>:
c0001d80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d84:	e8 83 fe ff ff       	call   c0001c0c <isdigit>
c0001d89:	83 c4 04             	add    esp,0x4
c0001d8c:	85 c0                	test   eax,eax
c0001d8e:	75 20                	jne    c0001db0 <isxdigit+0x30>
c0001d90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d95:	7e 09                	jle    c0001da0 <isxdigit+0x20>
c0001d97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d9c:	7e 12                	jle    c0001db0 <isxdigit+0x30>
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001da5:	7e 11                	jle    c0001db8 <isxdigit+0x38>
c0001da7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001dac:	7f 0a                	jg     c0001db8 <isxdigit+0x38>
c0001dae:	66 90                	xchg   ax,ax
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    

c0001dbe <disk_status>:
c0001dbe:	31 c0                	xor    eax,eax
c0001dc0:	c3                   	ret    

c0001dc1 <disk_initialize>:
c0001dc1:	31 c0                	xor    eax,eax
c0001dc3:	c3                   	ret    

c0001dc4 <disk_read>:
c0001dc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc9:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd5:	e9 4a 77 01 00       	jmp    c0019524 <fatWrapperReadDisk>

c0001dda <disk_write>:
c0001dda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ddf:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001de7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001deb:	e9 74 77 01 00       	jmp    c0019564 <fatWrapperWriteDisk>

c0001df0 <disk_ioctl>:
c0001df0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001df5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001df9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dfe:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001e06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e0a:	e9 95 77 01 00       	jmp    c00195a4 <fatWrapperIoctl>

c0001e0f <ld_word>:
c0001e0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e16:	c1 e2 08             	shl    edx,0x8
c0001e19:	09 d0                	or     eax,edx
c0001e1b:	c3                   	ret    

c0001e1c <ld_dword>:
c0001e1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001e20:	89 d1                	mov    ecx,edx
c0001e22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001e26:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e29:	c1 e1 08             	shl    ecx,0x8
c0001e2c:	09 ca                	or     edx,ecx
c0001e2e:	c1 e2 08             	shl    edx,0x8
c0001e31:	09 d0                	or     eax,edx
c0001e33:	c3                   	ret    

c0001e34 <st_word>:
c0001e34:	66 89 10             	mov    WORD PTR [eax],dx
c0001e37:	c3                   	ret    

c0001e38 <st_dword>:
c0001e38:	89 10                	mov    DWORD PTR [eax],edx
c0001e3a:	c3                   	ret    

c0001e3b <mem_cpy>:
c0001e3b:	85 c9                	test   ecx,ecx
c0001e3d:	74 10                	je     c0001e4f <mem_cpy+0x14>
c0001e3f:	57                   	push   edi
c0001e40:	01 c1                	add    ecx,eax
c0001e42:	56                   	push   esi
c0001e43:	89 c7                	mov    edi,eax
c0001e45:	89 d6                	mov    esi,edx
c0001e47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e48:	39 f9                	cmp    ecx,edi
c0001e4a:	75 fb                	jne    c0001e47 <mem_cpy+0xc>
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    
c0001e4f:	c3                   	ret    

c0001e50 <mem_set>:
c0001e50:	01 c1                	add    ecx,eax
c0001e52:	88 10                	mov    BYTE PTR [eax],dl
c0001e54:	40                   	inc    eax
c0001e55:	39 c8                	cmp    eax,ecx
c0001e57:	75 f9                	jne    c0001e52 <mem_set+0x2>
c0001e59:	c3                   	ret    

c0001e5a <mem_cmp>:
c0001e5a:	57                   	push   edi
c0001e5b:	56                   	push   esi
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	53                   	push   ebx
c0001e5f:	46                   	inc    esi
c0001e60:	42                   	inc    edx
c0001e61:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e65:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e69:	29 fb                	sub    ebx,edi
c0001e6b:	89 cf                	mov    edi,ecx
c0001e6d:	29 f7                	sub    edi,esi
c0001e6f:	01 c7                	add    edi,eax
c0001e71:	74 04                	je     c0001e77 <mem_cmp+0x1d>
c0001e73:	85 db                	test   ebx,ebx
c0001e75:	74 e8                	je     c0001e5f <mem_cmp+0x5>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	5b                   	pop    ebx
c0001e7a:	5e                   	pop    esi
c0001e7b:	5f                   	pop    edi
c0001e7c:	c3                   	ret    

c0001e7d <chk_chr>:
c0001e7d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e80:	85 c9                	test   ecx,ecx
c0001e82:	74 07                	je     c0001e8b <chk_chr+0xe>
c0001e84:	39 d1                	cmp    ecx,edx
c0001e86:	74 03                	je     c0001e8b <chk_chr+0xe>
c0001e88:	40                   	inc    eax
c0001e89:	eb f2                	jmp    c0001e7d <chk_chr>
c0001e8b:	89 c8                	mov    eax,ecx
c0001e8d:	c3                   	ret    

c0001e8e <dbc_1st>:
c0001e8e:	31 c0                	xor    eax,eax
c0001e90:	c3                   	ret    

c0001e91 <dbc_2nd>:
c0001e91:	31 c0                	xor    eax,eax
c0001e93:	c3                   	ret    

c0001e94 <tchar2uni>:
c0001e94:	57                   	push   edi
c0001e95:	56                   	push   esi
c0001e96:	53                   	push   ebx
c0001e97:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e99:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e9b:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e9e:	f6 c1 80             	test   cl,0x80
c0001ea1:	75 0a                	jne    c0001ead <tchar2uni+0x19>
c0001ea3:	0f b6 d1             	movzx  edx,cl
c0001ea6:	89 f3                	mov    ebx,esi
c0001ea8:	e9 b2 00 00 00       	jmp    c0001f5f <tchar2uni+0xcb>
c0001ead:	89 ca                	mov    edx,ecx
c0001eaf:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001eb5:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001ebb:	89 ca                	mov    edx,ecx
c0001ebd:	75 0a                	jne    c0001ec9 <tchar2uni+0x35>
c0001ebf:	83 e2 1f             	and    edx,0x1f
c0001ec2:	b9 01 00 00 00       	mov    ecx,0x1
c0001ec7:	eb 37                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ec9:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001ecf:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001ed5:	75 0c                	jne    c0001ee3 <tchar2uni+0x4f>
c0001ed7:	89 ca                	mov    edx,ecx
c0001ed9:	b9 02 00 00 00       	mov    ecx,0x2
c0001ede:	83 e2 0f             	and    edx,0xf
c0001ee1:	eb 1d                	jmp    c0001f00 <tchar2uni+0x6c>
c0001ee3:	89 cf                	mov    edi,ecx
c0001ee5:	83 ca ff             	or     edx,0xffffffff
c0001ee8:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eee:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ef4:	75 70                	jne    c0001f66 <tchar2uni+0xd2>
c0001ef6:	89 ca                	mov    edx,ecx
c0001ef8:	b9 03 00 00 00       	mov    ecx,0x3
c0001efd:	83 e2 07             	and    edx,0x7
c0001f00:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001f04:	46                   	inc    esi
c0001f05:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001f08:	89 cf                	mov    edi,ecx
c0001f0a:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001f10:	83 c7 80             	add    edi,0xffffff80
c0001f13:	75 4e                	jne    c0001f63 <tchar2uni+0xcf>
c0001f15:	c1 e2 06             	shl    edx,0x6
c0001f18:	83 e1 3f             	and    ecx,0x3f
c0001f1b:	09 ca                	or     edx,ecx
c0001f1d:	39 de                	cmp    esi,ebx
c0001f1f:	75 e3                	jne    c0001f04 <tchar2uni+0x70>
c0001f21:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001f27:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f2d:	76 34                	jbe    c0001f63 <tchar2uni+0xcf>
c0001f2f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001f32:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001f38:	77 29                	ja     c0001f63 <tchar2uni+0xcf>
c0001f3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f40:	76 1d                	jbe    c0001f5f <tchar2uni+0xcb>
c0001f42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f4e:	c1 e1 06             	shl    ecx,0x6
c0001f51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f57:	09 ca                	or     edx,ecx
c0001f59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f5f:	89 18                	mov    DWORD PTR [eax],ebx
c0001f61:	eb 03                	jmp    c0001f66 <tchar2uni+0xd2>
c0001f63:	83 ca ff             	or     edx,0xffffffff
c0001f66:	5b                   	pop    ebx
c0001f67:	89 d0                	mov    eax,edx
c0001f69:	5e                   	pop    esi
c0001f6a:	5f                   	pop    edi
c0001f6b:	c3                   	ret    

c0001f6c <put_utf>:
c0001f6c:	53                   	push   ebx
c0001f6d:	83 f8 7f             	cmp    eax,0x7f
c0001f70:	89 c3                	mov    ebx,eax
c0001f72:	b0 00                	mov    al,0x0
c0001f74:	77 11                	ja     c0001f87 <put_utf+0x1b>
c0001f76:	85 c9                	test   ecx,ecx
c0001f78:	0f 84 e5 00 00 00    	je     c0002063 <put_utf+0xf7>
c0001f7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001f80:	b0 01                	mov    al,0x1
c0001f82:	e9 dc 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001f87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f8d:	77 23                	ja     c0001fb2 <put_utf+0x46>
c0001f8f:	83 f9 01             	cmp    ecx,0x1
c0001f92:	0f 86 cb 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001f98:	89 d8                	mov    eax,ebx
c0001f9a:	83 e3 3f             	and    ebx,0x3f
c0001f9d:	c1 e8 06             	shr    eax,0x6
c0001fa0:	83 cb 80             	or     ebx,0xffffff80
c0001fa3:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001fa6:	83 c8 c0             	or     eax,0xffffffc0
c0001fa9:	88 02                	mov    BYTE PTR [edx],al
c0001fab:	b0 02                	mov    al,0x2
c0001fad:	e9 b1 00 00 00       	jmp    c0002063 <put_utf+0xf7>
c0001fb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001fb8:	77 40                	ja     c0001ffa <put_utf+0x8e>
c0001fba:	83 f9 02             	cmp    ecx,0x2
c0001fbd:	0f 86 a0 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fc3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001fc9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001fcf:	0f 86 8e 00 00 00    	jbe    c0002063 <put_utf+0xf7>
c0001fd5:	89 d8                	mov    eax,ebx
c0001fd7:	c1 e8 0c             	shr    eax,0xc
c0001fda:	83 c8 e0             	or     eax,0xffffffe0
c0001fdd:	88 02                	mov    BYTE PTR [edx],al
c0001fdf:	89 d8                	mov    eax,ebx
c0001fe1:	83 e3 3f             	and    ebx,0x3f
c0001fe4:	c1 e8 06             	shr    eax,0x6
c0001fe7:	83 cb 80             	or     ebx,0xffffff80
c0001fea:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fed:	83 e0 3f             	and    eax,0x3f
c0001ff0:	83 c8 80             	or     eax,0xffffff80
c0001ff3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ff6:	b0 03                	mov    al,0x3
c0001ff8:	eb 69                	jmp    c0002063 <put_utf+0xf7>
c0001ffa:	83 f9 03             	cmp    ecx,0x3
c0001ffd:	76 64                	jbe    c0002063 <put_utf+0xf7>
c0001fff:	89 d9                	mov    ecx,ebx
c0002001:	0f b7 c3             	movzx  eax,bx
c0002004:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c000200a:	66 31 c9             	xor    cx,cx
c000200d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0002013:	c1 e9 06             	shr    ecx,0x6
c0002016:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c000201c:	77 43                	ja     c0002061 <put_utf+0xf5>
c000201e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0002024:	77 3b                	ja     c0002061 <put_utf+0xf5>
c0002026:	09 cb                	or     ebx,ecx
c0002028:	81 c3 00 00 01 00    	add    ebx,0x10000
c000202e:	89 d8                	mov    eax,ebx
c0002030:	c1 e8 12             	shr    eax,0x12
c0002033:	83 c8 f0             	or     eax,0xfffffff0
c0002036:	88 02                	mov    BYTE PTR [edx],al
c0002038:	89 d8                	mov    eax,ebx
c000203a:	c1 e8 0c             	shr    eax,0xc
c000203d:	83 e0 3f             	and    eax,0x3f
c0002040:	83 c8 80             	or     eax,0xffffff80
c0002043:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002046:	89 d8                	mov    eax,ebx
c0002048:	83 e3 3f             	and    ebx,0x3f
c000204b:	c1 e8 06             	shr    eax,0x6
c000204e:	83 cb 80             	or     ebx,0xffffff80
c0002051:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002054:	83 e0 3f             	and    eax,0x3f
c0002057:	83 c8 80             	or     eax,0xffffff80
c000205a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000205d:	b0 04                	mov    al,0x4
c000205f:	eb 02                	jmp    c0002063 <put_utf+0xf7>
c0002061:	31 c0                	xor    eax,eax
c0002063:	5b                   	pop    ebx
c0002064:	c3                   	ret    

c0002065 <clst2sect>:
c0002065:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002068:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000206b:	83 ea 02             	sub    edx,0x2
c000206e:	39 ca                	cmp    edx,ecx
c0002070:	76 0d                	jbe    c000207f <clst2sect+0x1a>
c0002072:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002076:	0f af d1             	imul   edx,ecx
c0002079:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000207c:	89 d0                	mov    eax,edx
c000207e:	c3                   	ret    
c000207f:	31 c0                	xor    eax,eax
c0002081:	c3                   	ret    

c0002082 <pick_lfn>:
c0002082:	55                   	push   ebp
c0002083:	57                   	push   edi
c0002084:	89 c7                	mov    edi,eax
c0002086:	56                   	push   esi
c0002087:	53                   	push   ebx
c0002088:	89 d3                	mov    ebx,edx
c000208a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000208d:	e8 7d fd ff ff       	call   c0001e0f <ld_word>
c0002092:	66 85 c0             	test   ax,ax
c0002095:	74 04                	je     c000209b <pick_lfn+0x19>
c0002097:	31 c0                	xor    eax,eax
c0002099:	eb 62                	jmp    c00020fd <pick_lfn+0x7b>
c000209b:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000209e:	bd 01 00 00 00       	mov    ebp,0x1
c00020a3:	31 f6                	xor    esi,esi
c00020a5:	83 e1 bf             	and    ecx,0xffffffbf
c00020a8:	49                   	dec    ecx
c00020a9:	6b c9 0d             	imul   ecx,ecx,0xd
c00020ac:	0f b6 86 40 01 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfec0]
c00020b3:	01 d8                	add    eax,ebx
c00020b5:	e8 55 fd ff ff       	call   c0001e0f <ld_word>
c00020ba:	66 85 ed             	test   bp,bp
c00020bd:	74 11                	je     c00020d0 <pick_lfn+0x4e>
c00020bf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020c5:	77 d0                	ja     c0002097 <pick_lfn+0x15>
c00020c7:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00020cb:	89 c5                	mov    ebp,eax
c00020cd:	41                   	inc    ecx
c00020ce:	eb 0a                	jmp    c00020da <pick_lfn+0x58>
c00020d0:	0f b7 c0             	movzx  eax,ax
c00020d3:	3d ff ff 00 00       	cmp    eax,0xffff
c00020d8:	75 bd                	jne    c0002097 <pick_lfn+0x15>
c00020da:	46                   	inc    esi
c00020db:	83 fe 0d             	cmp    esi,0xd
c00020de:	75 cc                	jne    c00020ac <pick_lfn+0x2a>
c00020e0:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020e3:	74 13                	je     c00020f8 <pick_lfn+0x76>
c00020e5:	66 85 ed             	test   bp,bp
c00020e8:	74 0e                	je     c00020f8 <pick_lfn+0x76>
c00020ea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020f0:	77 a5                	ja     c0002097 <pick_lfn+0x15>
c00020f2:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020f8:	b8 01 00 00 00       	mov    eax,0x1
c00020fd:	5b                   	pop    ebx
c00020fe:	5e                   	pop    esi
c00020ff:	5f                   	pop    edi
c0002100:	5d                   	pop    ebp
c0002101:	c3                   	ret    

c0002102 <put_lfn>:
c0002102:	55                   	push   ebp
c0002103:	57                   	push   edi
c0002104:	89 d7                	mov    edi,edx
c0002106:	56                   	push   esi
c0002107:	31 f6                	xor    esi,esi
c0002109:	53                   	push   ebx
c000210a:	83 ec 0c             	sub    esp,0xc
c000210d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002111:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0002115:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000211b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000211f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002122:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002125:	31 d2                	xor    edx,edx
c0002127:	e8 08 fd ff ff       	call   c0001e34 <st_word>
c000212c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002133:	0f b6 d9             	movzx  ebx,cl
c0002136:	4b                   	dec    ebx
c0002137:	6b db 0d             	imul   ebx,ebx,0xd
c000213a:	0f b7 c6             	movzx  eax,si
c000213d:	3d ff ff 00 00       	cmp    eax,0xffff
c0002142:	74 09                	je     c000214d <put_lfn+0x4b>
c0002144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002148:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000214c:	43                   	inc    ebx
c000214d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002150:	0f b7 ee             	movzx  ebp,si
c0002153:	89 ea                	mov    edx,ebp
c0002155:	0f b6 80 40 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfec0]
c000215c:	01 f8                	add    eax,edi
c000215e:	e8 d1 fc ff ff       	call   c0001e34 <st_word>
c0002163:	85 ed                	test   ebp,ebp
c0002165:	75 05                	jne    c000216c <put_lfn+0x6a>
c0002167:	be ff ff 00 00       	mov    esi,0xffff
c000216c:	ff 04 24             	inc    DWORD PTR [esp]
c000216f:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002173:	75 c5                	jne    c000213a <put_lfn+0x38>
c0002175:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000217b:	74 0b                	je     c0002188 <put_lfn+0x86>
c000217d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002181:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002186:	75 07                	jne    c000218f <put_lfn+0x8d>
c0002188:	83 c9 40             	or     ecx,0x40
c000218b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000218f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002193:	88 07                	mov    BYTE PTR [edi],al
c0002195:	83 c4 0c             	add    esp,0xc
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	5f                   	pop    edi
c000219b:	5d                   	pop    ebp
c000219c:	c3                   	ret    

c000219d <gen_numname>:
c000219d:	57                   	push   edi
c000219e:	89 cf                	mov    edi,ecx
c00021a0:	56                   	push   esi
c00021a1:	b9 0b 00 00 00       	mov    ecx,0xb
c00021a6:	53                   	push   ebx
c00021a7:	89 c6                	mov    esi,eax
c00021a9:	83 ec 10             	sub    esp,0x10
c00021ac:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00021b0:	e8 86 fc ff ff       	call   c0001e3b <mem_cpy>
c00021b5:	83 fb 05             	cmp    ebx,0x5
c00021b8:	76 30                	jbe    c00021ea <gen_numname+0x4d>
c00021ba:	66 8b 07             	mov    ax,WORD PTR [edi]
c00021bd:	66 85 c0             	test   ax,ax
c00021c0:	74 28                	je     c00021ea <gen_numname+0x4d>
c00021c2:	83 c7 02             	add    edi,0x2
c00021c5:	ba 10 00 00 00       	mov    edx,0x10
c00021ca:	89 c1                	mov    ecx,eax
c00021cc:	01 db                	add    ebx,ebx
c00021ce:	c1 e0 10             	shl    eax,0x10
c00021d1:	83 e1 01             	and    ecx,0x1
c00021d4:	c1 e8 11             	shr    eax,0x11
c00021d7:	01 cb                	add    ebx,ecx
c00021d9:	0f ba e3 10          	bt     ebx,0x10
c00021dd:	73 06                	jae    c00021e5 <gen_numname+0x48>
c00021df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021e5:	4a                   	dec    edx
c00021e6:	75 e2                	jne    c00021ca <gen_numname+0x2d>
c00021e8:	eb d0                	jmp    c00021ba <gen_numname+0x1d>
c00021ea:	b8 07 00 00 00       	mov    eax,0x7
c00021ef:	89 d9                	mov    ecx,ebx
c00021f1:	83 e1 0f             	and    ecx,0xf
c00021f4:	8d 79 30             	lea    edi,[ecx+0x30]
c00021f7:	83 ff 39             	cmp    edi,0x39
c00021fa:	89 fa                	mov    edx,edi
c00021fc:	76 03                	jbe    c0002201 <gen_numname+0x64>
c00021fe:	8d 51 37             	lea    edx,[ecx+0x37]
c0002201:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002204:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002208:	89 da                	mov    edx,ebx
c000220a:	c1 ea 04             	shr    edx,0x4
c000220d:	83 fb 0f             	cmp    ebx,0xf
c0002210:	76 06                	jbe    c0002218 <gen_numname+0x7b>
c0002212:	89 c8                	mov    eax,ecx
c0002214:	89 d3                	mov    ebx,edx
c0002216:	eb d7                	jmp    c00021ef <gen_numname+0x52>
c0002218:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000221d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002220:	31 d2                	xor    edx,edx
c0002222:	8d 04 16             	lea    eax,[esi+edx*1]
c0002225:	39 ca                	cmp    edx,ecx
c0002227:	73 19                	jae    c0002242 <gen_numname+0xa5>
c0002229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000222c:	83 f8 20             	cmp    eax,0x20
c000222f:	74 11                	je     c0002242 <gen_numname+0xa5>
c0002231:	e8 58 fc ff ff       	call   c0001e8e <dbc_1st>
c0002236:	85 c0                	test   eax,eax
c0002238:	74 05                	je     c000223f <gen_numname+0xa2>
c000223a:	39 d3                	cmp    ebx,edx
c000223c:	74 04                	je     c0002242 <gen_numname+0xa5>
c000223e:	42                   	inc    edx
c000223f:	42                   	inc    edx
c0002240:	eb e0                	jmp    c0002222 <gen_numname+0x85>
c0002242:	83 f9 07             	cmp    ecx,0x7
c0002245:	b0 20                	mov    al,0x20
c0002247:	77 05                	ja     c000224e <gen_numname+0xb1>
c0002249:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000224d:	41                   	inc    ecx
c000224e:	42                   	inc    edx
c000224f:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002253:	83 fa 07             	cmp    edx,0x7
c0002256:	76 ea                	jbe    c0002242 <gen_numname+0xa5>
c0002258:	83 c4 10             	add    esp,0x10
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	5f                   	pop    edi
c000225e:	c3                   	ret    

c000225f <sum_sfn>:
c000225f:	53                   	push   ebx
c0002260:	31 c9                	xor    ecx,ecx
c0002262:	31 db                	xor    ebx,ebx
c0002264:	0f b6 d1             	movzx  edx,cl
c0002267:	d1 ea                	shr    edx,1
c0002269:	c1 e1 07             	shl    ecx,0x7
c000226c:	09 ca                	or     edx,ecx
c000226e:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002271:	43                   	inc    ebx
c0002272:	01 ca                	add    edx,ecx
c0002274:	83 fb 0b             	cmp    ebx,0xb
c0002277:	88 d1                	mov    cl,dl
c0002279:	75 e9                	jne    c0002264 <sum_sfn+0x5>
c000227b:	5b                   	pop    ebx
c000227c:	88 d0                	mov    al,dl
c000227e:	c3                   	ret    

c000227f <get_ldnumber>:
c000227f:	55                   	push   ebp
c0002280:	57                   	push   edi
c0002281:	56                   	push   esi
c0002282:	83 ce ff             	or     esi,0xffffffff
c0002285:	53                   	push   ebx
c0002286:	8b 10                	mov    edx,DWORD PTR [eax]
c0002288:	85 d2                	test   edx,edx
c000228a:	74 38                	je     c00022c4 <get_ldnumber+0x45>
c000228c:	89 c5                	mov    ebp,eax
c000228e:	89 d1                	mov    ecx,edx
c0002290:	41                   	inc    ecx
c0002291:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c0002295:	80 fb 1f             	cmp    bl,0x1f
c0002298:	76 05                	jbe    c000229f <get_ldnumber+0x20>
c000229a:	83 fb 3a             	cmp    ebx,0x3a
c000229d:	75 f1                	jne    c0002290 <get_ldnumber+0x11>
c000229f:	31 f6                	xor    esi,esi
c00022a1:	83 fb 3a             	cmp    ebx,0x3a
c00022a4:	75 1e                	jne    c00022c4 <get_ldnumber+0x45>
c00022a6:	8a 1a                	mov    bl,BYTE PTR [edx]
c00022a8:	83 ce ff             	or     esi,0xffffffff
c00022ab:	8d 7b d0             	lea    edi,[ebx-0x30]
c00022ae:	89 f8                	mov    eax,edi
c00022b0:	3c 09                	cmp    al,0x9
c00022b2:	77 10                	ja     c00022c4 <get_ldnumber+0x45>
c00022b4:	83 c2 02             	add    edx,0x2
c00022b7:	39 d1                	cmp    ecx,edx
c00022b9:	75 09                	jne    c00022c4 <get_ldnumber+0x45>
c00022bb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00022be:	0f be f3             	movsx  esi,bl
c00022c1:	83 ee 30             	sub    esi,0x30
c00022c4:	5b                   	pop    ebx
c00022c5:	89 f0                	mov    eax,esi
c00022c7:	5e                   	pop    esi
c00022c8:	5f                   	pop    edi
c00022c9:	5d                   	pop    ebp
c00022ca:	c3                   	ret    

c00022cb <validate>:
c00022cb:	56                   	push   esi
c00022cc:	85 c0                	test   eax,eax
c00022ce:	53                   	push   ebx
c00022cf:	89 d6                	mov    esi,edx
c00022d1:	51                   	push   ecx
c00022d2:	75 09                	jne    c00022dd <validate+0x12>
c00022d4:	b8 09 00 00 00       	mov    eax,0x9
c00022d9:	31 c9                	xor    ecx,ecx
c00022db:	eb 2e                	jmp    c000230b <validate+0x40>
c00022dd:	89 c3                	mov    ebx,eax
c00022df:	8b 00                	mov    eax,DWORD PTR [eax]
c00022e1:	85 c0                	test   eax,eax
c00022e3:	74 ef                	je     c00022d4 <validate+0x9>
c00022e5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022e8:	74 ea                	je     c00022d4 <validate+0x9>
c00022ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022ed:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022f1:	75 e1                	jne    c00022d4 <validate+0x9>
c00022f3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f7:	83 ec 0c             	sub    esp,0xc
c00022fa:	50                   	push   eax
c00022fb:	e8 be fa ff ff       	call   c0001dbe <disk_status>
c0002300:	83 c4 10             	add    esp,0x10
c0002303:	a8 01                	test   al,0x1
c0002305:	75 cd                	jne    c00022d4 <validate+0x9>
c0002307:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002309:	31 c0                	xor    eax,eax
c000230b:	89 0e                	mov    DWORD PTR [esi],ecx
c000230d:	5a                   	pop    edx
c000230e:	5b                   	pop    ebx
c000230f:	5e                   	pop    esi
c0002310:	c3                   	ret    

c0002311 <sync_window>:
c0002311:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002315:	74 58                	je     c000236f <sync_window+0x5e>
c0002317:	56                   	push   esi
c0002318:	53                   	push   ebx
c0002319:	89 c3                	mov    ebx,eax
c000231b:	51                   	push   ecx
c000231c:	6a 01                	push   0x1
c000231e:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002321:	8d 70 34             	lea    esi,[eax+0x34]
c0002324:	56                   	push   esi
c0002325:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002329:	50                   	push   eax
c000232a:	e8 ab fa ff ff       	call   c0001dda <disk_write>
c000232f:	83 c4 10             	add    esp,0x10
c0002332:	ba 01 00 00 00       	mov    edx,0x1
c0002337:	85 c0                	test   eax,eax
c0002339:	75 2e                	jne    c0002369 <sync_window+0x58>
c000233b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000233f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002342:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002345:	89 c1                	mov    ecx,eax
c0002347:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000234a:	39 d1                	cmp    ecx,edx
c000234c:	73 19                	jae    c0002367 <sync_window+0x56>
c000234e:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002352:	75 13                	jne    c0002367 <sync_window+0x56>
c0002354:	6a 01                	push   0x1
c0002356:	01 d0                	add    eax,edx
c0002358:	50                   	push   eax
c0002359:	56                   	push   esi
c000235a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000235e:	50                   	push   eax
c000235f:	e8 76 fa ff ff       	call   c0001dda <disk_write>
c0002364:	83 c4 10             	add    esp,0x10
c0002367:	31 d2                	xor    edx,edx
c0002369:	89 d0                	mov    eax,edx
c000236b:	5a                   	pop    edx
c000236c:	5b                   	pop    ebx
c000236d:	5e                   	pop    esi
c000236e:	c3                   	ret    
c000236f:	31 d2                	xor    edx,edx
c0002371:	89 d0                	mov    eax,edx
c0002373:	c3                   	ret    

c0002374 <move_window>:
c0002374:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002377:	74 3a                	je     c00023b3 <move_window+0x3f>
c0002379:	56                   	push   esi
c000237a:	89 d6                	mov    esi,edx
c000237c:	53                   	push   ebx
c000237d:	89 c3                	mov    ebx,eax
c000237f:	51                   	push   ecx
c0002380:	e8 8c ff ff ff       	call   c0002311 <sync_window>
c0002385:	85 c0                	test   eax,eax
c0002387:	75 2d                	jne    c00023b6 <move_window+0x42>
c0002389:	6a 01                	push   0x1
c000238b:	56                   	push   esi
c000238c:	8d 43 34             	lea    eax,[ebx+0x34]
c000238f:	50                   	push   eax
c0002390:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 2a fa ff ff       	call   c0001dc4 <disk_read>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	89 c2                	mov    edx,eax
c000239f:	31 c0                	xor    eax,eax
c00023a1:	85 d2                	test   edx,edx
c00023a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00023a8:	0f 45 f2             	cmovne esi,edx
c00023ab:	0f 95 c0             	setne  al
c00023ae:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00023b1:	eb 03                	jmp    c00023b6 <move_window+0x42>
c00023b3:	31 c0                	xor    eax,eax
c00023b5:	c3                   	ret    
c00023b6:	5a                   	pop    edx
c00023b7:	5b                   	pop    ebx
c00023b8:	5e                   	pop    esi
c00023b9:	c3                   	ret    

c00023ba <check_fs>:
c00023ba:	53                   	push   ebx
c00023bb:	89 c3                	mov    ebx,eax
c00023bd:	83 ec 08             	sub    esp,0x8
c00023c0:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c4:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00023cb:	e8 a4 ff ff ff       	call   c0002374 <move_window>
c00023d0:	ba 04 00 00 00       	mov    edx,0x4
c00023d5:	85 c0                	test   eax,eax
c00023d7:	75 68                	jne    c0002441 <check_fs+0x87>
c00023d9:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023df:	e8 2b fa ff ff       	call   c0001e0f <ld_word>
c00023e4:	ba 03 00 00 00       	mov    edx,0x3
c00023e9:	66 3d 55 aa          	cmp    ax,0xaa55
c00023ed:	75 52                	jne    c0002441 <check_fs+0x87>
c00023ef:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023f2:	8d 50 18             	lea    edx,[eax+0x18]
c00023f5:	80 fa 01             	cmp    dl,0x1
c00023f8:	76 09                	jbe    c0002403 <check_fs+0x49>
c00023fa:	3c eb                	cmp    al,0xeb
c00023fc:	ba 02 00 00 00       	mov    edx,0x2
c0002401:	75 3e                	jne    c0002441 <check_fs+0x87>
c0002403:	ba e4 27 02 c0       	mov    edx,0xc00227e4
c0002408:	b9 03 00 00 00       	mov    ecx,0x3
c000240d:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002410:	e8 45 fa ff ff       	call   c0001e5a <mem_cmp>
c0002415:	31 d2                	xor    edx,edx
c0002417:	85 c0                	test   eax,eax
c0002419:	74 26                	je     c0002441 <check_fs+0x87>
c000241b:	ba fc ff 01 c0       	mov    edx,0xc001fffc
c0002420:	b9 05 00 00 00       	mov    ecx,0x5
c0002425:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c000242b:	e8 2a fa ff ff       	call   c0001e5a <mem_cmp>
c0002430:	31 d2                	xor    edx,edx
c0002432:	85 c0                	test   eax,eax
c0002434:	74 0b                	je     c0002441 <check_fs+0x87>
c0002436:	31 d2                	xor    edx,edx
c0002438:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000243c:	0f 95 c2             	setne  dl
c000243f:	01 d2                	add    edx,edx
c0002441:	83 c4 08             	add    esp,0x8
c0002444:	89 d0                	mov    eax,edx
c0002446:	5b                   	pop    ebx
c0002447:	c3                   	ret    

c0002448 <find_volume>:
c0002448:	55                   	push   ebp
c0002449:	57                   	push   edi
c000244a:	56                   	push   esi
c000244b:	89 c6                	mov    esi,eax
c000244d:	53                   	push   ebx
c000244e:	89 d3                	mov    ebx,edx
c0002450:	83 ec 2c             	sub    esp,0x2c
c0002453:	31 d2                	xor    edx,edx
c0002455:	e8 60 ff ff ff       	call   c00023ba <check_fs>
c000245a:	85 db                	test   ebx,ebx
c000245c:	0f 94 c2             	sete   dl
c000245f:	83 f8 02             	cmp    eax,0x2
c0002462:	74 07                	je     c000246b <find_volume+0x23>
c0002464:	77 63                	ja     c00024c9 <find_volume+0x81>
c0002466:	f6 c2 01             	test   dl,0x1
c0002469:	75 5e                	jne    c00024c9 <find_volume+0x81>
c000246b:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002475:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c000247b:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000247f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0002483:	89 f8                	mov    eax,edi
c0002485:	83 c7 10             	add    edi,0x10
c0002488:	e8 8f f9 ff ff       	call   c0001e1c <ld_dword>
c000248d:	83 c5 04             	add    ebp,0x4
c0002490:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0002494:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0002497:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000249b:	75 e2                	jne    c000247f <find_volume+0x37>
c000249d:	83 fb 01             	cmp    ebx,0x1
c00024a0:	0f b6 fa             	movzx  edi,dl
c00024a3:	83 d3 ff             	adc    ebx,0xffffffff
c00024a6:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00024aa:	b8 03 00 00 00       	mov    eax,0x3
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 07                	je     c00024ba <find_volume+0x72>
c00024b3:	89 f0                	mov    eax,esi
c00024b5:	e8 00 ff ff ff       	call   c00023ba <check_fs>
c00024ba:	83 f8 01             	cmp    eax,0x1
c00024bd:	76 0a                	jbe    c00024c9 <find_volume+0x81>
c00024bf:	85 ff                	test   edi,edi
c00024c1:	74 06                	je     c00024c9 <find_volume+0x81>
c00024c3:	43                   	inc    ebx
c00024c4:	83 fb 03             	cmp    ebx,0x3
c00024c7:	76 dd                	jbe    c00024a6 <find_volume+0x5e>
c00024c9:	83 c4 2c             	add    esp,0x2c
c00024cc:	5b                   	pop    ebx
c00024cd:	5e                   	pop    esi
c00024ce:	5f                   	pop    edi
c00024cf:	5d                   	pop    ebp
c00024d0:	c3                   	ret    

c00024d1 <mount_volume>:
c00024d1:	55                   	push   ebp
c00024d2:	89 d5                	mov    ebp,edx
c00024d4:	57                   	push   edi
c00024d5:	89 cf                	mov    edi,ecx
c00024d7:	56                   	push   esi
c00024d8:	53                   	push   ebx
c00024d9:	bb 0b 00 00 00       	mov    ebx,0xb
c00024de:	83 ec 2c             	sub    esp,0x2c
c00024e1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e7:	e8 93 fd ff ff       	call   c000227f <get_ldnumber>
c00024ec:	85 c0                	test   eax,eax
c00024ee:	0f 88 d0 02 00 00    	js     c00027c4 <mount_volume+0x2f3>
c00024f4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024fb:	89 c2                	mov    edx,eax
c00024fd:	bb 0c 00 00 00       	mov    ebx,0xc
c0002502:	85 f6                	test   esi,esi
c0002504:	0f 84 ba 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000250a:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0002513:	74 3c                	je     c0002551 <mount_volume+0x80>
c0002515:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002519:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	50                   	push   eax
c0002521:	e8 98 f8 ff ff       	call   c0001dbe <disk_status>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000252d:	a8 01                	test   al,0x1
c000252f:	75 20                	jne    c0002551 <mount_volume+0x80>
c0002531:	31 db                	xor    ebx,ebx
c0002533:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002539:	0f 84 85 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c000253f:	a8 04                	test   al,0x4
c0002541:	0f 84 7d 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002547:	bb 0a 00 00 00       	mov    ebx,0xa
c000254c:	e9 73 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c0002551:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002554:	83 ec 0c             	sub    esp,0xc
c0002557:	0f b6 c2             	movzx  eax,dl
c000255a:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000255d:	bb 03 00 00 00       	mov    ebx,0x3
c0002562:	50                   	push   eax
c0002563:	e8 59 f8 ff ff       	call   c0001dc1 <disk_initialize>
c0002568:	83 c4 10             	add    esp,0x10
c000256b:	a8 01                	test   al,0x1
c000256d:	0f 85 51 02 00 00    	jne    c00027c4 <mount_volume+0x2f3>
c0002573:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002579:	74 04                	je     c000257f <mount_volume+0xae>
c000257b:	a8 04                	test   al,0x4
c000257d:	75 c8                	jne    c0002547 <mount_volume+0x76>
c000257f:	31 d2                	xor    edx,edx
c0002581:	89 f0                	mov    eax,esi
c0002583:	e8 c0 fe ff ff       	call   c0002448 <find_volume>
c0002588:	bb 01 00 00 00       	mov    ebx,0x1
c000258d:	83 f8 04             	cmp    eax,0x4
c0002590:	0f 84 2e 02 00 00    	je     c00027c4 <mount_volume+0x2f3>
c0002596:	83 f8 01             	cmp    eax,0x1
c0002599:	76 0a                	jbe    c00025a5 <mount_volume+0xd4>
c000259b:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a0:	e9 1f 02 00 00       	jmp    c00027c4 <mount_volume+0x2f3>
c00025a5:	8d 46 3f             	lea    eax,[esi+0x3f]
c00025a8:	e8 62 f8 ff ff       	call   c0001e0f <ld_word>
c00025ad:	66 3d 00 02          	cmp    ax,0x200
c00025b1:	75 e8                	jne    c000259b <mount_volume+0xca>
c00025b3:	8d 46 4a             	lea    eax,[esi+0x4a]
c00025b6:	e8 54 f8 ff ff       	call   c0001e0f <ld_word>
c00025bb:	0f b7 c0             	movzx  eax,ax
c00025be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025c2:	85 c0                	test   eax,eax
c00025c4:	75 0c                	jne    c00025d2 <mount_volume+0x101>
c00025c6:	8d 46 58             	lea    eax,[esi+0x58]
c00025c9:	e8 4e f8 ff ff       	call   c0001e1c <ld_dword>
c00025ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00025d2:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00025d5:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00025d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00025e0:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00025e3:	89 e8                	mov    eax,ebp
c00025e5:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025e8:	8d 45 ff             	lea    eax,[ebp-0x1]
c00025eb:	3c 01                	cmp    al,0x1
c00025ed:	77 ac                	ja     c000259b <mount_volume+0xca>
c00025ef:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025f3:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025f7:	66 85 c0             	test   ax,ax
c00025fa:	89 c3                	mov    ebx,eax
c00025fc:	74 9d                	je     c000259b <mount_volume+0xca>
c00025fe:	8d 40 ff             	lea    eax,[eax-0x1]
c0002601:	85 d8                	test   eax,ebx
c0002603:	75 96                	jne    c000259b <mount_volume+0xca>
c0002605:	8d 46 45             	lea    eax,[esi+0x45]
c0002608:	e8 02 f8 ff ff       	call   c0001e0f <ld_word>
c000260d:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002611:	a8 0f                	test   al,0xf
c0002613:	89 c7                	mov    edi,eax
c0002615:	75 84                	jne    c000259b <mount_volume+0xca>
c0002617:	8d 46 47             	lea    eax,[esi+0x47]
c000261a:	e8 f0 f7 ff ff       	call   c0001e0f <ld_word>
c000261f:	0f b7 d0             	movzx  edx,ax
c0002622:	85 d2                	test   edx,edx
c0002624:	75 0a                	jne    c0002630 <mount_volume+0x15f>
c0002626:	8d 46 54             	lea    eax,[esi+0x54]
c0002629:	e8 ee f7 ff ff       	call   c0001e1c <ld_dword>
c000262e:	89 c2                	mov    edx,eax
c0002630:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002634:	8d 46 42             	lea    eax,[esi+0x42]
c0002637:	e8 d3 f7 ff ff       	call   c0001e0f <ld_word>
c000263c:	0f b7 c8             	movzx  ecx,ax
c000263f:	85 c9                	test   ecx,ecx
c0002641:	0f 84 54 ff ff ff    	je     c000259b <mount_volume+0xca>
c0002647:	89 e8                	mov    eax,ebp
c0002649:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000264d:	0f b6 e8             	movzx  ebp,al
c0002650:	0f b7 c7             	movzx  eax,di
c0002653:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002658:	c1 e8 04             	shr    eax,0x4
c000265b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000265f:	01 e8                	add    eax,ebp
c0002661:	01 c8                	add    eax,ecx
c0002663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002667:	39 c2                	cmp    edx,eax
c0002669:	0f 82 2c ff ff ff    	jb     c000259b <mount_volume+0xca>
c000266f:	29 c2                	sub    edx,eax
c0002671:	89 d5                	mov    ebp,edx
c0002673:	89 d0                	mov    eax,edx
c0002675:	31 d2                	xor    edx,edx
c0002677:	f7 f3                	div    ebx
c0002679:	39 dd                	cmp    ebp,ebx
c000267b:	0f 82 1a ff ff ff    	jb     c000259b <mount_volume+0xca>
c0002681:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002686:	0f 87 0f ff ff ff    	ja     c000259b <mount_volume+0xca>
c000268c:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002691:	0f 86 1e 01 00 00    	jbe    c00027b5 <mount_volume+0x2e4>
c0002697:	bb 03 00 00 00       	mov    ebx,0x3
c000269c:	8d 68 02             	lea    ebp,[eax+0x2]
c000269f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00026a3:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00026a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00026aa:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00026ae:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00026b1:	01 c8                	add    eax,ecx
c00026b3:	83 fb 03             	cmp    ebx,0x3
c00026b6:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00026b9:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00026bc:	75 23                	jne    c00026e1 <mount_volume+0x210>
c00026be:	8d 46 5e             	lea    eax,[esi+0x5e]
c00026c1:	e8 49 f7 ff ff       	call   c0001e0f <ld_word>
c00026c6:	09 c7                	or     edi,eax
c00026c8:	66 85 ff             	test   di,di
c00026cb:	0f 85 ca fe ff ff    	jne    c000259b <mount_volume+0xca>
c00026d1:	8d 46 60             	lea    eax,[esi+0x60]
c00026d4:	e8 43 f7 ff ff       	call   c0001e1c <ld_dword>
c00026d9:	c1 e5 02             	shl    ebp,0x2
c00026dc:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026df:	eb 25                	jmp    c0002706 <mount_volume+0x235>
c00026e1:	66 85 ff             	test   di,di
c00026e4:	0f 84 b1 fe ff ff    	je     c000259b <mount_volume+0xca>
c00026ea:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00026ee:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00026f2:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00026f6:	83 e5 01             	and    ebp,0x1
c00026f9:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026fc:	d1 ea                	shr    edx,1
c00026fe:	01 d5                	add    ebp,edx
c0002700:	83 fb 02             	cmp    ebx,0x2
c0002703:	0f 44 ef             	cmove  ebp,edi
c0002706:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c000270c:	c1 ed 09             	shr    ebp,0x9
c000270f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002713:	0f 87 82 fe ff ff    	ja     c000259b <mount_volume+0xca>
c0002719:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002720:	83 fb 03             	cmp    ebx,0x3
c0002723:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c000272a:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c000272e:	75 6e                	jne    c000279e <mount_volume+0x2cd>
c0002730:	8d 46 64             	lea    eax,[esi+0x64]
c0002733:	e8 d7 f6 ff ff       	call   c0001e0f <ld_word>
c0002738:	66 48                	dec    ax
c000273a:	75 62                	jne    c000279e <mount_volume+0x2cd>
c000273c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002740:	89 f0                	mov    eax,esi
c0002742:	42                   	inc    edx
c0002743:	e8 2c fc ff ff       	call   c0002374 <move_window>
c0002748:	85 c0                	test   eax,eax
c000274a:	75 52                	jne    c000279e <mount_volume+0x2cd>
c000274c:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002750:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002756:	e8 b4 f6 ff ff       	call   c0001e0f <ld_word>
c000275b:	66 3d 55 aa          	cmp    ax,0xaa55
c000275f:	75 3d                	jne    c000279e <mount_volume+0x2cd>
c0002761:	8d 46 34             	lea    eax,[esi+0x34]
c0002764:	e8 b3 f6 ff ff       	call   c0001e1c <ld_dword>
c0002769:	3d 52 52 61 41       	cmp    eax,0x41615252
c000276e:	75 2e                	jne    c000279e <mount_volume+0x2cd>
c0002770:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002776:	e8 a1 f6 ff ff       	call   c0001e1c <ld_dword>
c000277b:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002780:	75 1c                	jne    c000279e <mount_volume+0x2cd>
c0002782:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002788:	e8 8f f6 ff ff       	call   c0001e1c <ld_dword>
c000278d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002790:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002796:	e8 81 f6 ff ff       	call   c0001e1c <ld_dword>
c000279b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000279e:	88 1e                	mov    BYTE PTR [esi],bl
c00027a0:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c00027a6:	31 db                	xor    ebx,ebx
c00027a8:	40                   	inc    eax
c00027a9:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c00027af:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00027b3:	eb 0f                	jmp    c00027c4 <mount_volume+0x2f3>
c00027b5:	3d f6 0f 00 00       	cmp    eax,0xff6
c00027ba:	19 db                	sbb    ebx,ebx
c00027bc:	83 c3 02             	add    ebx,0x2
c00027bf:	e9 d8 fe ff ff       	jmp    c000269c <mount_volume+0x1cb>
c00027c4:	83 c4 2c             	add    esp,0x2c
c00027c7:	89 d8                	mov    eax,ebx
c00027c9:	5b                   	pop    ebx
c00027ca:	5e                   	pop    esi
c00027cb:	5f                   	pop    edi
c00027cc:	5d                   	pop    ebp
c00027cd:	c3                   	ret    

c00027ce <put_fat>:
c00027ce:	55                   	push   ebp
c00027cf:	bd 02 00 00 00       	mov    ebp,0x2
c00027d4:	57                   	push   edi
c00027d5:	56                   	push   esi
c00027d6:	53                   	push   ebx
c00027d7:	83 ec 1c             	sub    esp,0x1c
c00027da:	83 fa 01             	cmp    edx,0x1
c00027dd:	0f 86 38 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027e3:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00027e6:	0f 86 2f 01 00 00    	jbe    c000291b <put_fat+0x14d>
c00027ec:	89 c6                	mov    esi,eax
c00027ee:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027f1:	89 cf                	mov    edi,ecx
c00027f3:	89 d3                	mov    ebx,edx
c00027f5:	83 f8 02             	cmp    eax,0x2
c00027f8:	0f 84 b1 00 00 00    	je     c00028af <put_fat+0xe1>
c00027fe:	83 f8 03             	cmp    eax,0x3
c0002801:	0f 84 d5 00 00 00    	je     c00028dc <put_fat+0x10e>
c0002807:	48                   	dec    eax
c0002808:	0f 85 0d 01 00 00    	jne    c000291b <put_fat+0x14d>
c000280e:	89 d1                	mov    ecx,edx
c0002810:	89 f0                	mov    eax,esi
c0002812:	d1 e9                	shr    ecx,1
c0002814:	01 d1                	add    ecx,edx
c0002816:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000281a:	89 ca                	mov    edx,ecx
c000281c:	c1 ea 09             	shr    edx,0x9
c000281f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002822:	e8 4d fb ff ff       	call   c0002374 <move_window>
c0002827:	85 c0                	test   eax,eax
c0002829:	89 c5                	mov    ebp,eax
c000282b:	0f 85 ea 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002835:	8d 46 34             	lea    eax,[esi+0x34]
c0002838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000283c:	8d 41 01             	lea    eax,[ecx+0x1]
c000283f:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002845:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002849:	83 e3 01             	and    ebx,0x1
c000284c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002850:	89 f8                	mov    eax,edi
c0002852:	74 11                	je     c0002865 <put_fat+0x97>
c0002854:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002856:	89 f8                	mov    eax,edi
c0002858:	c1 e0 04             	shl    eax,0x4
c000285b:	25 f0 0f 00 00       	and    eax,0xff0
c0002860:	83 e2 0f             	and    edx,0xf
c0002863:	09 d0                	or     eax,edx
c0002865:	88 01                	mov    BYTE PTR [ecx],al
c0002867:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000286b:	89 f0                	mov    eax,esi
c000286d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002871:	c1 ea 09             	shr    edx,0x9
c0002874:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002877:	e8 f8 fa ff ff       	call   c0002374 <move_window>
c000287c:	85 c0                	test   eax,eax
c000287e:	89 c5                	mov    ebp,eax
c0002880:	0f 85 95 00 00 00    	jne    c000291b <put_fat+0x14d>
c0002886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000288a:	25 ff 01 00 00       	and    eax,0x1ff
c000288f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002893:	85 db                	test   ebx,ebx
c0002895:	74 07                	je     c000289e <put_fat+0xd0>
c0002897:	c1 ef 04             	shr    edi,0x4
c000289a:	89 f9                	mov    ecx,edi
c000289c:	eb 0d                	jmp    c00028ab <put_fat+0xdd>
c000289e:	8a 08                	mov    cl,BYTE PTR [eax]
c00028a0:	c1 ef 08             	shr    edi,0x8
c00028a3:	83 e7 0f             	and    edi,0xf
c00028a6:	83 e1 f0             	and    ecx,0xfffffff0
c00028a9:	09 f9                	or     ecx,edi
c00028ab:	88 08                	mov    BYTE PTR [eax],cl
c00028ad:	eb 27                	jmp    c00028d6 <put_fat+0x108>
c00028af:	c1 ea 08             	shr    edx,0x8
c00028b2:	89 f0                	mov    eax,esi
c00028b4:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028b7:	e8 b8 fa ff ff       	call   c0002374 <move_window>
c00028bc:	85 c0                	test   eax,eax
c00028be:	89 c5                	mov    ebp,eax
c00028c0:	75 59                	jne    c000291b <put_fat+0x14d>
c00028c2:	01 db                	add    ebx,ebx
c00028c4:	0f b7 d7             	movzx  edx,di
c00028c7:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00028cd:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00028d1:	e8 5e f5 ff ff       	call   c0001e34 <st_word>
c00028d6:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00028da:	eb 3f                	jmp    c000291b <put_fat+0x14d>
c00028dc:	c1 ea 07             	shr    edx,0x7
c00028df:	89 f0                	mov    eax,esi
c00028e1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028e4:	e8 8b fa ff ff       	call   c0002374 <move_window>
c00028e9:	85 c0                	test   eax,eax
c00028eb:	89 c5                	mov    ebp,eax
c00028ed:	75 2c                	jne    c000291b <put_fat+0x14d>
c00028ef:	c1 e3 02             	shl    ebx,0x2
c00028f2:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028f8:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028fe:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002902:	89 d8                	mov    eax,ebx
c0002904:	e8 13 f5 ff ff       	call   c0001e1c <ld_dword>
c0002909:	25 00 00 00 f0       	and    eax,0xf0000000
c000290e:	09 f8                	or     eax,edi
c0002910:	89 c2                	mov    edx,eax
c0002912:	89 d8                	mov    eax,ebx
c0002914:	e8 1f f5 ff ff       	call   c0001e38 <st_dword>
c0002919:	eb bb                	jmp    c00028d6 <put_fat+0x108>
c000291b:	83 c4 1c             	add    esp,0x1c
c000291e:	89 e8                	mov    eax,ebp
c0002920:	5b                   	pop    ebx
c0002921:	5e                   	pop    esi
c0002922:	5f                   	pop    edi
c0002923:	5d                   	pop    ebp
c0002924:	c3                   	ret    

c0002925 <dir_clear>:
c0002925:	55                   	push   ebp
c0002926:	57                   	push   edi
c0002927:	56                   	push   esi
c0002928:	89 c6                	mov    esi,eax
c000292a:	53                   	push   ebx
c000292b:	83 ec 1c             	sub    esp,0x1c
c000292e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002932:	e8 da f9 ff ff       	call   c0002311 <sync_window>
c0002937:	85 c0                	test   eax,eax
c0002939:	0f 85 c1 00 00 00    	jne    c0002a00 <dir_clear+0xdb>
c000293f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002943:	89 f0                	mov    eax,esi
c0002945:	e8 1b f7 ff ff       	call   c0002065 <clst2sect>
c000294a:	31 d2                	xor    edx,edx
c000294c:	b9 00 02 00 00       	mov    ecx,0x200
c0002951:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002954:	89 c5                	mov    ebp,eax
c0002956:	8d 46 34             	lea    eax,[esi+0x34]
c0002959:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000295d:	e8 ee f4 ff ff       	call   c0001e50 <mem_set>
c0002962:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002966:	b8 00 80 00 00       	mov    eax,0x8000
c000296b:	c1 e3 09             	shl    ebx,0x9
c000296e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002974:	0f 47 d8             	cmova  ebx,eax
c0002977:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000297d:	76 16                	jbe    c0002995 <dir_clear+0x70>
c000297f:	83 ec 0c             	sub    esp,0xc
c0002982:	53                   	push   ebx
c0002983:	e8 cc 32 00 00       	call   c0005c54 <ff_memalloc>
c0002988:	83 c4 10             	add    esp,0x10
c000298b:	85 c0                	test   eax,eax
c000298d:	89 c7                	mov    edi,eax
c000298f:	75 76                	jne    c0002a07 <dir_clear+0xe2>
c0002991:	d1 eb                	shr    ebx,1
c0002993:	eb e2                	jmp    c0002977 <dir_clear+0x52>
c0002995:	31 db                	xor    ebx,ebx
c0002997:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000299b:	39 d8                	cmp    eax,ebx
c000299d:	76 53                	jbe    c00029f2 <dir_clear+0xcd>
c000299f:	6a 01                	push   0x1
c00029a1:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029a4:	50                   	push   eax
c00029a5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00029ad:	50                   	push   eax
c00029ae:	e8 27 f4 ff ff       	call   c0001dda <disk_write>
c00029b3:	83 c4 10             	add    esp,0x10
c00029b6:	85 c0                	test   eax,eax
c00029b8:	75 38                	jne    c00029f2 <dir_clear+0xcd>
c00029ba:	43                   	inc    ebx
c00029bb:	eb da                	jmp    c0002997 <dir_clear+0x72>
c00029bd:	52                   	push   edx
c00029be:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00029c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00029c5:	50                   	push   eax
c00029c6:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00029ca:	57                   	push   edi
c00029cb:	50                   	push   eax
c00029cc:	e8 09 f4 ff ff       	call   c0001dda <disk_write>
c00029d1:	83 c4 10             	add    esp,0x10
c00029d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d8:	85 c0                	test   eax,eax
c00029da:	75 0a                	jne    c00029e6 <dir_clear+0xc1>
c00029dc:	01 d3                	add    ebx,edx
c00029de:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029e2:	39 d8                	cmp    eax,ebx
c00029e4:	77 d7                	ja     c00029bd <dir_clear+0x98>
c00029e6:	83 ec 0c             	sub    esp,0xc
c00029e9:	57                   	push   edi
c00029ea:	e8 7d 32 00 00       	call   c0005c6c <ff_memfree>
c00029ef:	83 c4 10             	add    esp,0x10
c00029f2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029f6:	39 d8                	cmp    eax,ebx
c00029f8:	0f 95 c0             	setne  al
c00029fb:	0f b6 c0             	movzx  eax,al
c00029fe:	eb 19                	jmp    c0002a19 <dir_clear+0xf4>
c0002a00:	b8 01 00 00 00       	mov    eax,0x1
c0002a05:	eb 12                	jmp    c0002a19 <dir_clear+0xf4>
c0002a07:	89 d9                	mov    ecx,ebx
c0002a09:	31 d2                	xor    edx,edx
c0002a0b:	e8 40 f4 ff ff       	call   c0001e50 <mem_set>
c0002a10:	89 da                	mov    edx,ebx
c0002a12:	31 db                	xor    ebx,ebx
c0002a14:	c1 ea 09             	shr    edx,0x9
c0002a17:	eb c5                	jmp    c00029de <dir_clear+0xb9>
c0002a19:	83 c4 1c             	add    esp,0x1c
c0002a1c:	5b                   	pop    ebx
c0002a1d:	5e                   	pop    esi
c0002a1e:	5f                   	pop    edi
c0002a1f:	5d                   	pop    ebp
c0002a20:	c3                   	ret    

c0002a21 <create_name>:
c0002a21:	55                   	push   ebp
c0002a22:	89 c5                	mov    ebp,eax
c0002a24:	57                   	push   edi
c0002a25:	89 d7                	mov    edi,edx
c0002a27:	56                   	push   esi
c0002a28:	31 f6                	xor    esi,esi
c0002a2a:	53                   	push   ebx
c0002a2b:	83 ec 3c             	sub    esp,0x3c
c0002a2e:	8b 02                	mov    eax,DWORD PTR [edx]
c0002a30:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002a37:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002a3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a3e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002a42:	e8 4d f4 ff ff       	call   c0001e94 <tchar2uni>
c0002a47:	83 f8 ff             	cmp    eax,0xffffffff
c0002a4a:	89 c3                	mov    ebx,eax
c0002a4c:	75 0a                	jne    c0002a58 <create_name+0x37>
c0002a4e:	b8 06 00 00 00       	mov    eax,0x6
c0002a53:	e9 7c 02 00 00       	jmp    c0002cd4 <create_name+0x2b3>
c0002a58:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a5d:	76 0c                	jbe    c0002a6b <create_name+0x4a>
c0002a5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a63:	c1 e8 10             	shr    eax,0x10
c0002a66:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002a6a:	46                   	inc    esi
c0002a6b:	0f b7 d3             	movzx  edx,bx
c0002a6e:	89 d8                	mov    eax,ebx
c0002a70:	83 fa 1f             	cmp    edx,0x1f
c0002a73:	76 30                	jbe    c0002aa5 <create_name+0x84>
c0002a75:	83 fa 2f             	cmp    edx,0x2f
c0002a78:	74 2b                	je     c0002aa5 <create_name+0x84>
c0002a7a:	83 fa 5c             	cmp    edx,0x5c
c0002a7d:	74 35                	je     c0002ab4 <create_name+0x93>
c0002a7f:	83 fa 7f             	cmp    edx,0x7f
c0002a82:	77 0e                	ja     c0002a92 <create_name+0x71>
c0002a84:	b8 02 00 02 c0       	mov    eax,0xc0020002
c0002a89:	e8 ef f3 ff ff       	call   c0001e7d <chk_chr>
c0002a8e:	85 c0                	test   eax,eax
c0002a90:	75 bc                	jne    c0002a4e <create_name+0x2d>
c0002a92:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a98:	77 b4                	ja     c0002a4e <create_name+0x2d>
c0002a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9e:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002aa2:	46                   	inc    esi
c0002aa3:	eb 99                	jmp    c0002a3e <create_name+0x1d>
c0002aa5:	66 83 f8 1f          	cmp    ax,0x1f
c0002aa9:	b3 04                	mov    bl,0x4
c0002aab:	76 1a                	jbe    c0002ac7 <create_name+0xa6>
c0002aad:	eb 05                	jmp    c0002ab4 <create_name+0x93>
c0002aaf:	40                   	inc    eax
c0002ab0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ab4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002ab8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002abb:	83 fa 2f             	cmp    edx,0x2f
c0002abe:	74 ef                	je     c0002aaf <create_name+0x8e>
c0002ac0:	83 fa 5c             	cmp    edx,0x5c
c0002ac3:	74 ea                	je     c0002aaf <create_name+0x8e>
c0002ac5:	31 db                	xor    ebx,ebx
c0002ac7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002acb:	89 07                	mov    DWORD PTR [edi],eax
c0002acd:	85 f6                	test   esi,esi
c0002acf:	74 16                	je     c0002ae7 <create_name+0xc6>
c0002ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad5:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002ada:	83 f8 20             	cmp    eax,0x20
c0002add:	74 05                	je     c0002ae4 <create_name+0xc3>
c0002adf:	83 f8 2e             	cmp    eax,0x2e
c0002ae2:	75 03                	jne    c0002ae7 <create_name+0xc6>
c0002ae4:	4e                   	dec    esi
c0002ae5:	eb e6                	jmp    c0002acd <create_name+0xac>
c0002ae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aeb:	31 ff                	xor    edi,edi
c0002aed:	85 f6                	test   esi,esi
c0002aef:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002af5:	0f 84 53 ff ff ff    	je     c0002a4e <create_name+0x2d>
c0002afb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aff:	8d 57 01             	lea    edx,[edi+0x1]
c0002b02:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b06:	83 f8 20             	cmp    eax,0x20
c0002b09:	75 04                	jne    c0002b0f <create_name+0xee>
c0002b0b:	89 d7                	mov    edi,edx
c0002b0d:	eb ec                	jmp    c0002afb <create_name+0xda>
c0002b0f:	85 ff                	test   edi,edi
c0002b11:	75 05                	jne    c0002b18 <create_name+0xf7>
c0002b13:	83 f8 2e             	cmp    eax,0x2e
c0002b16:	75 08                	jne    c0002b20 <create_name+0xff>
c0002b18:	83 cb 03             	or     ebx,0x3
c0002b1b:	eb 03                	jmp    c0002b20 <create_name+0xff>
c0002b1d:	4e                   	dec    esi
c0002b1e:	74 0c                	je     c0002b2c <create_name+0x10b>
c0002b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b24:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002b2a:	75 f1                	jne    c0002b1d <create_name+0xfc>
c0002b2c:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b31:	ba 20 00 00 00       	mov    edx,0x20
c0002b36:	8d 45 20             	lea    eax,[ebp+0x20]
c0002b39:	e8 12 f3 ff ff       	call   c0001e50 <mem_set>
c0002b3e:	31 c9                	xor    ecx,ecx
c0002b40:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002b48:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002b4d:	8d 47 01             	lea    eax,[edi+0x1]
c0002b50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b58:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b5c:	85 c0                	test   eax,eax
c0002b5e:	89 c7                	mov    edi,eax
c0002b60:	0f 84 1d 01 00 00    	je     c0002c83 <create_name+0x262>
c0002b66:	83 f8 20             	cmp    eax,0x20
c0002b69:	74 0b                	je     c0002b76 <create_name+0x155>
c0002b6b:	83 f8 2e             	cmp    eax,0x2e
c0002b6e:	75 0f                	jne    c0002b7f <create_name+0x15e>
c0002b70:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b74:	74 09                	je     c0002b7f <create_name+0x15e>
c0002b76:	83 cb 03             	or     ebx,0x3
c0002b79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002b7d:	eb ce                	jmp    c0002b4d <create_name+0x12c>
c0002b7f:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002b83:	73 06                	jae    c0002b8b <create_name+0x16a>
c0002b85:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b89:	75 3a                	jne    c0002bc5 <create_name+0x1a4>
c0002b8b:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002b90:	75 08                	jne    c0002b9a <create_name+0x179>
c0002b92:	83 cb 03             	or     ebx,0x3
c0002b95:	e9 e9 00 00 00       	jmp    c0002c83 <create_name+0x262>
c0002b9a:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002b9e:	74 0d                	je     c0002bad <create_name+0x18c>
c0002ba0:	83 cb 03             	or     ebx,0x3
c0002ba3:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ba7:	0f 87 d6 00 00 00    	ja     c0002c83 <create_name+0x262>
c0002bad:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002bb2:	b9 08 00 00 00       	mov    ecx,0x8
c0002bb7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002bbb:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002bc3:	eb b4                	jmp    c0002b79 <create_name+0x158>
c0002bc5:	0f b7 c7             	movzx  eax,di
c0002bc8:	83 f8 7f             	cmp    eax,0x7f
c0002bcb:	76 66                	jbe    c0002c33 <create_name+0x212>
c0002bcd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002bd1:	89 d9                	mov    ecx,ebx
c0002bd3:	83 c9 02             	or     ecx,0x2
c0002bd6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bda:	52                   	push   edx
c0002bdb:	52                   	push   edx
c0002bdc:	68 b5 01 00 00       	push   0x1b5
c0002be1:	50                   	push   eax
c0002be2:	e8 9d 30 00 00       	call   c0005c84 <ff_uni2oem>
c0002be7:	83 c4 10             	add    esp,0x10
c0002bea:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002bee:	a8 80                	test   al,0x80
c0002bf0:	89 c7                	mov    edi,eax
c0002bf2:	74 0c                	je     c0002c00 <create_name+0x1df>
c0002bf4:	83 e7 7f             	and    edi,0x7f
c0002bf7:	0f b6 bf c0 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdff40]
c0002bfe:	eb 2a                	jmp    c0002c2a <create_name+0x209>
c0002c00:	0f b7 c0             	movzx  eax,ax
c0002c03:	3d ff 00 00 00       	cmp    eax,0xff
c0002c08:	76 20                	jbe    c0002c2a <create_name+0x209>
c0002c0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002c0e:	4a                   	dec    edx
c0002c0f:	39 ca                	cmp    edx,ecx
c0002c11:	77 0c                	ja     c0002c1f <create_name+0x1fe>
c0002c13:	83 cb 03             	or     ebx,0x3
c0002c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002c1a:	e9 5a ff ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c1f:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002c23:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c27:	41                   	inc    ecx
c0002c28:	eb 4d                	jmp    c0002c77 <create_name+0x256>
c0002c2a:	66 85 ff             	test   di,di
c0002c2d:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002c31:	74 19                	je     c0002c4c <create_name+0x22b>
c0002c33:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c37:	0f b7 d7             	movzx  edx,di
c0002c3a:	b8 0b 00 02 c0       	mov    eax,0xc002000b
c0002c3f:	e8 39 f2 ff ff       	call   c0001e7d <chk_chr>
c0002c44:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002c48:	85 c0                	test   eax,eax
c0002c4a:	74 0a                	je     c0002c56 <create_name+0x235>
c0002c4c:	83 cb 03             	or     ebx,0x3
c0002c4f:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c54:	eb 21                	jmp    c0002c77 <create_name+0x256>
c0002c56:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c59:	66 83 f8 19          	cmp    ax,0x19
c0002c5d:	77 07                	ja     c0002c66 <create_name+0x245>
c0002c5f:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c64:	eb 11                	jmp    c0002c77 <create_name+0x256>
c0002c66:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c69:	66 83 f8 19          	cmp    ax,0x19
c0002c6d:	77 08                	ja     c0002c77 <create_name+0x256>
c0002c6f:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c74:	83 ef 20             	sub    edi,0x20
c0002c77:	89 f8                	mov    eax,edi
c0002c79:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002c7d:	41                   	inc    ecx
c0002c7e:	e9 f6 fe ff ff       	jmp    c0002b79 <create_name+0x158>
c0002c83:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002c87:	75 04                	jne    c0002c8d <create_name+0x26c>
c0002c89:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002c8d:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002c92:	75 05                	jne    c0002c99 <create_name+0x278>
c0002c94:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c9d:	83 e0 0c             	and    eax,0xc
c0002ca0:	83 f8 0c             	cmp    eax,0xc
c0002ca3:	74 0c                	je     c0002cb1 <create_name+0x290>
c0002ca5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca9:	83 e0 03             	and    eax,0x3
c0002cac:	83 f8 03             	cmp    eax,0x3
c0002caf:	75 05                	jne    c0002cb6 <create_name+0x295>
c0002cb1:	83 cb 02             	or     ebx,0x2
c0002cb4:	eb 19                	jmp    c0002ccf <create_name+0x2ae>
c0002cb6:	f6 c3 02             	test   bl,0x2
c0002cb9:	75 14                	jne    c0002ccf <create_name+0x2ae>
c0002cbb:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002cc0:	74 03                	je     c0002cc5 <create_name+0x2a4>
c0002cc2:	83 cb 10             	or     ebx,0x10
c0002cc5:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002cca:	74 03                	je     c0002ccf <create_name+0x2ae>
c0002ccc:	83 cb 08             	or     ebx,0x8
c0002ccf:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002cd2:	31 c0                	xor    eax,eax
c0002cd4:	83 c4 3c             	add    esp,0x3c
c0002cd7:	5b                   	pop    ebx
c0002cd8:	5e                   	pop    esi
c0002cd9:	5f                   	pop    edi
c0002cda:	5d                   	pop    ebp
c0002cdb:	c3                   	ret    

c0002cdc <cmp_lfn>:
c0002cdc:	55                   	push   ebp
c0002cdd:	57                   	push   edi
c0002cde:	89 d7                	mov    edi,edx
c0002ce0:	56                   	push   esi
c0002ce1:	53                   	push   ebx
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ce9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cec:	e8 1e f1 ff ff       	call   c0001e0f <ld_word>
c0002cf1:	66 85 c0             	test   ax,ax
c0002cf4:	74 07                	je     c0002cfd <cmp_lfn+0x21>
c0002cf6:	31 c0                	xor    eax,eax
c0002cf8:	e9 a4 00 00 00       	jmp    c0002da1 <cmp_lfn+0xc5>
c0002cfd:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cff:	bd 01 00 00 00       	mov    ebp,0x1
c0002d04:	31 c9                	xor    ecx,ecx
c0002d06:	83 e3 3f             	and    ebx,0x3f
c0002d09:	4b                   	dec    ebx
c0002d0a:	6b db 0d             	imul   ebx,ebx,0xd
c0002d0d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d11:	0f b6 81 40 01 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffdfec0]
c0002d18:	01 f8                	add    eax,edi
c0002d1a:	e8 f0 f0 ff ff       	call   c0001e0f <ld_word>
c0002d1f:	66 85 ed             	test   bp,bp
c0002d22:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d26:	0f b7 f0             	movzx  esi,ax
c0002d29:	74 44                	je     c0002d6f <cmp_lfn+0x93>
c0002d2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002d2f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d35:	77 bf                	ja     c0002cf6 <cmp_lfn+0x1a>
c0002d37:	83 ec 0c             	sub    esp,0xc
c0002d3a:	0f b7 c6             	movzx  eax,si
c0002d3d:	50                   	push   eax
c0002d3e:	e8 55 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d43:	89 c5                	mov    ebp,eax
c0002d45:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002d50:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d54:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d57:	e8 3c 30 00 00       	call   c0005d98 <ff_wtoupper>
c0002d5c:	83 c4 10             	add    esp,0x10
c0002d5f:	39 c5                	cmp    ebp,eax
c0002d61:	75 93                	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d63:	89 f5                	mov    ebp,esi
c0002d65:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002d69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002d6d:	eb 0c                	jmp    c0002d7b <cmp_lfn+0x9f>
c0002d6f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002d75:	0f 85 7b ff ff ff    	jne    c0002cf6 <cmp_lfn+0x1a>
c0002d7b:	41                   	inc    ecx
c0002d7c:	83 f9 0d             	cmp    ecx,0xd
c0002d7f:	75 8c                	jne    c0002d0d <cmp_lfn+0x31>
c0002d81:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d84:	74 16                	je     c0002d9c <cmp_lfn+0xc0>
c0002d86:	66 85 ed             	test   bp,bp
c0002d89:	74 11                	je     c0002d9c <cmp_lfn+0xc0>
c0002d8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d8f:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d94:	0f 94 c0             	sete   al
c0002d97:	0f b6 c0             	movzx  eax,al
c0002d9a:	eb 05                	jmp    c0002da1 <cmp_lfn+0xc5>
c0002d9c:	b8 01 00 00 00       	mov    eax,0x1
c0002da1:	83 c4 1c             	add    esp,0x1c
c0002da4:	5b                   	pop    ebx
c0002da5:	5e                   	pop    esi
c0002da6:	5f                   	pop    edi
c0002da7:	5d                   	pop    ebp
c0002da8:	c3                   	ret    

c0002da9 <sync_fs>:
c0002da9:	56                   	push   esi
c0002daa:	53                   	push   ebx
c0002dab:	53                   	push   ebx
c0002dac:	89 c3                	mov    ebx,eax
c0002dae:	e8 5e f5 ff ff       	call   c0002311 <sync_window>
c0002db3:	85 c0                	test   eax,eax
c0002db5:	0f 85 9a 00 00 00    	jne    c0002e55 <sync_fs+0xac>
c0002dbb:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002dbe:	75 7b                	jne    c0002e3b <sync_fs+0x92>
c0002dc0:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002dc4:	75 75                	jne    c0002e3b <sync_fs+0x92>
c0002dc6:	8d 73 34             	lea    esi,[ebx+0x34]
c0002dc9:	b9 00 02 00 00       	mov    ecx,0x200
c0002dce:	31 d2                	xor    edx,edx
c0002dd0:	89 f0                	mov    eax,esi
c0002dd2:	e8 79 f0 ff ff       	call   c0001e50 <mem_set>
c0002dd7:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ddd:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002de2:	e8 4d f0 ff ff       	call   c0001e34 <st_word>
c0002de7:	ba 52 52 61 41       	mov    edx,0x41615252
c0002dec:	89 f0                	mov    eax,esi
c0002dee:	e8 45 f0 ff ff       	call   c0001e38 <st_dword>
c0002df3:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002df9:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dfe:	e8 35 f0 ff ff       	call   c0001e38 <st_dword>
c0002e03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002e06:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002e0c:	e8 27 f0 ff ff       	call   c0001e38 <st_dword>
c0002e11:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e14:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002e1a:	e8 19 f0 ff ff       	call   c0001e38 <st_dword>
c0002e1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002e22:	6a 01                	push   0x1
c0002e24:	40                   	inc    eax
c0002e25:	50                   	push   eax
c0002e26:	56                   	push   esi
c0002e27:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002e2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e2e:	50                   	push   eax
c0002e2f:	e8 a6 ef ff ff       	call   c0001dda <disk_write>
c0002e34:	83 c4 10             	add    esp,0x10
c0002e37:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e3b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e3f:	51                   	push   ecx
c0002e40:	6a 00                	push   0x0
c0002e42:	6a 00                	push   0x0
c0002e44:	50                   	push   eax
c0002e45:	e8 a6 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e4a:	83 c4 10             	add    esp,0x10
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 95 c0             	setne  al
c0002e52:	0f b6 c0             	movzx  eax,al
c0002e55:	5a                   	pop    edx
c0002e56:	5b                   	pop    ebx
c0002e57:	5e                   	pop    esi
c0002e58:	c3                   	ret    

c0002e59 <create_partition>:
c0002e59:	55                   	push   ebp
c0002e5a:	0f b6 c0             	movzx  eax,al
c0002e5d:	57                   	push   edi
c0002e5e:	56                   	push   esi
c0002e5f:	53                   	push   ebx
c0002e60:	83 ec 40             	sub    esp,0x40
c0002e63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e67:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e6f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e73:	50                   	push   eax
c0002e74:	6a 01                	push   0x1
c0002e76:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e7a:	e8 71 ef ff ff       	call   c0001df0 <disk_ioctl>
c0002e7f:	83 c4 10             	add    esp,0x10
c0002e82:	85 c0                	test   eax,eax
c0002e84:	0f 85 68 01 00 00    	jne    c0002ff2 <create_partition+0x199>
c0002e8a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002e8e:	b9 05 00 00 00       	mov    ecx,0x5
c0002e93:	be 08 00 00 00       	mov    esi,0x8
c0002e98:	89 f0                	mov    eax,esi
c0002e9a:	31 d2                	xor    edx,edx
c0002e9c:	0f b6 d8             	movzx  ebx,al
c0002e9f:	89 e8                	mov    eax,ebp
c0002ea1:	f7 f3                	div    ebx
c0002ea3:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002ea8:	76 0a                	jbe    c0002eb4 <create_partition+0x5b>
c0002eaa:	d1 e6                	shl    esi,1
c0002eac:	49                   	dec    ecx
c0002ead:	75 e9                	jne    c0002e98 <create_partition+0x3f>
c0002eaf:	be ff ff ff ff       	mov    esi,0xffffffff
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	b9 00 02 00 00       	mov    ecx,0x200
c0002ebd:	31 d2                	xor    edx,edx
c0002ebf:	e8 8c ef ff ff       	call   c0001e50 <mem_set>
c0002ec4:	b9 64 00 00 00       	mov    ecx,0x64
c0002ec9:	89 e8                	mov    eax,ebp
c0002ecb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ed3:	31 d2                	xor    edx,edx
c0002ed5:	f7 f1                	div    ecx
c0002ed7:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002edc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002ee0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ee4:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002eea:	89 f0                	mov    eax,esi
c0002eec:	0f b6 c0             	movzx  eax,al
c0002eef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ef3:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0002ef8:	0f 96 c0             	setbe  al
c0002efb:	31 d2                	xor    edx,edx
c0002efd:	85 c9                	test   ecx,ecx
c0002eff:	0f 95 c2             	setne  dl
c0002f02:	85 c2                	test   edx,eax
c0002f04:	0f 84 b7 00 00 00    	je     c0002fc1 <create_partition+0x168>
c0002f0a:	39 e9                	cmp    ecx,ebp
c0002f0c:	0f 83 af 00 00 00    	jae    c0002fc1 <create_partition+0x168>
c0002f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f16:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f1a:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f1d:	83 fe 64             	cmp    esi,0x64
c0002f20:	77 0b                	ja     c0002f2d <create_partition+0xd4>
c0002f22:	74 07                	je     c0002f2b <create_partition+0xd2>
c0002f24:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f29:	eb 02                	jmp    c0002f2d <create_partition+0xd4>
c0002f2b:	89 ee                	mov    esi,ebp
c0002f2d:	89 ca                	mov    edx,ecx
c0002f2f:	31 c0                	xor    eax,eax
c0002f31:	01 f2                	add    edx,esi
c0002f33:	0f 92 c0             	setb   al
c0002f36:	39 ea                	cmp    edx,ebp
c0002f38:	77 04                	ja     c0002f3e <create_partition+0xe5>
c0002f3a:	85 c0                	test   eax,eax
c0002f3c:	74 06                	je     c0002f44 <create_partition+0xeb>
c0002f3e:	89 ee                	mov    esi,ebp
c0002f40:	29 ce                	sub    esi,ecx
c0002f42:	eb 04                	jmp    c0002f48 <create_partition+0xef>
c0002f44:	85 f6                	test   esi,esi
c0002f46:	74 79                	je     c0002fc1 <create_partition+0x168>
c0002f48:	89 ca                	mov    edx,ecx
c0002f4a:	89 d8                	mov    eax,ebx
c0002f4c:	e8 e7 ee ff ff       	call   c0001e38 <st_dword>
c0002f51:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f54:	89 f2                	mov    edx,esi
c0002f56:	e8 dd ee ff ff       	call   c0001e38 <st_dword>
c0002f5b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f5f:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f64:	31 d2                	xor    edx,edx
c0002f66:	83 c3 10             	add    ebx,0x10
c0002f69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f6d:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f70:	89 c8                	mov    eax,ecx
c0002f72:	01 f1                	add    ecx,esi
c0002f74:	f7 f7                	div    edi
c0002f76:	89 d7                	mov    edi,edx
c0002f78:	31 d2                	xor    edx,edx
c0002f7a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f7e:	47                   	inc    edi
c0002f7f:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f82:	89 c2                	mov    edx,eax
c0002f84:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f87:	c1 ea 02             	shr    edx,0x2
c0002f8a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f8d:	83 e2 c0             	and    edx,0xffffffc0
c0002f90:	09 fa                	or     edx,edi
c0002f92:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f97:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f9a:	31 d2                	xor    edx,edx
c0002f9c:	f7 f7                	div    edi
c0002f9e:	89 d6                	mov    esi,edx
c0002fa0:	31 d2                	xor    edx,edx
c0002fa2:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002fa6:	46                   	inc    esi
c0002fa7:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002faa:	89 c7                	mov    edi,eax
c0002fac:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002faf:	c1 ef 02             	shr    edi,0x2
c0002fb2:	83 e7 c0             	and    edi,0xffffffc0
c0002fb5:	09 fe                	or     esi,edi
c0002fb7:	89 f2                	mov    edx,esi
c0002fb9:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fbc:	e9 32 ff ff ff       	jmp    c0002ef3 <create_partition+0x9a>
c0002fc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fca:	05 fe 01 00 00       	add    eax,0x1fe
c0002fcf:	e8 60 ee ff ff       	call   c0001e34 <st_word>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	6a 00                	push   0x0
c0002fd8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fdc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe0:	e8 f5 ed ff ff       	call   c0001dda <disk_write>
c0002fe5:	83 c4 10             	add    esp,0x10
c0002fe8:	85 c0                	test   eax,eax
c0002fea:	0f 95 c0             	setne  al
c0002fed:	0f b6 c0             	movzx  eax,al
c0002ff0:	eb 05                	jmp    c0002ff7 <create_partition+0x19e>
c0002ff2:	b8 01 00 00 00       	mov    eax,0x1
c0002ff7:	83 c4 3c             	add    esp,0x3c
c0002ffa:	5b                   	pop    ebx
c0002ffb:	5e                   	pop    esi
c0002ffc:	5f                   	pop    edi
c0002ffd:	5d                   	pop    ebp
c0002ffe:	c3                   	ret    

c0002fff <get_fileinfo>:
c0002fff:	55                   	push   ebp
c0003000:	57                   	push   edi
c0003001:	56                   	push   esi
c0003002:	53                   	push   ebx
c0003003:	83 ec 1c             	sub    esp,0x1c
c0003006:	8b 30                	mov    esi,DWORD PTR [eax]
c0003008:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c000300c:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003010:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003014:	0f 84 de 01 00 00    	je     c00031f8 <get_fileinfo+0x1f9>
c000301a:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c000301e:	89 d3                	mov    ebx,edx
c0003020:	89 c6                	mov    esi,eax
c0003022:	74 7d                	je     c00030a1 <get_fileinfo+0xa2>
c0003024:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000302c:	31 ff                	xor    edi,edi
c000302e:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c0003035:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003040:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003044:	85 c0                	test   eax,eax
c0003046:	89 c2                	mov    edx,eax
c0003048:	74 44                	je     c000308e <get_fileinfo+0x8f>
c000304a:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c000304f:	85 ed                	test   ebp,ebp
c0003051:	75 0d                	jne    c0003060 <get_fileinfo+0x61>
c0003053:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003059:	66 81 f9 ff 07       	cmp    cx,0x7ff
c000305e:	76 20                	jbe    c0003080 <get_fileinfo+0x81>
c0003060:	c1 e5 10             	shl    ebp,0x10
c0003063:	b9 ff 00 00 00       	mov    ecx,0xff
c0003068:	29 f9                	sub    ecx,edi
c000306a:	09 e8                	or     eax,ebp
c000306c:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003070:	e8 f7 ee ff ff       	call   c0001f6c <put_utf>
c0003075:	0f b6 c0             	movzx  eax,al
c0003078:	85 c0                	test   eax,eax
c000307a:	74 10                	je     c000308c <get_fileinfo+0x8d>
c000307c:	01 c7                	add    edi,eax
c000307e:	31 d2                	xor    edx,edx
c0003080:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0003085:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c000308a:	eb a9                	jmp    c0003035 <get_fileinfo+0x36>
c000308c:	31 ff                	xor    edi,edi
c000308e:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c0003094:	b8 00 00 00 00       	mov    eax,0x0
c0003099:	0f 45 f8             	cmovne edi,eax
c000309c:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00030a1:	31 ff                	xor    edi,edi
c00030a3:	31 c9                	xor    ecx,ecx
c00030a5:	83 f9 0a             	cmp    ecx,0xa
c00030a8:	0f 87 ac 00 00 00    	ja     c000315a <get_fileinfo+0x15b>
c00030ae:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b1:	8d 69 01             	lea    ebp,[ecx+0x1]
c00030b4:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00030b8:	83 f8 20             	cmp    eax,0x20
c00030bb:	89 c2                	mov    edx,eax
c00030bd:	0f 84 90 00 00 00    	je     c0003153 <get_fileinfo+0x154>
c00030c3:	83 f8 05             	cmp    eax,0x5
c00030c6:	75 05                	jne    c00030cd <get_fileinfo+0xce>
c00030c8:	ba e5 00 00 00       	mov    edx,0xe5
c00030cd:	83 fd 09             	cmp    ebp,0x9
c00030d0:	75 0b                	jne    c00030dd <get_fileinfo+0xde>
c00030d2:	83 ff 0b             	cmp    edi,0xb
c00030d5:	77 06                	ja     c00030dd <get_fileinfo+0xde>
c00030d7:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00030dc:	47                   	inc    edi
c00030dd:	0f b7 c2             	movzx  eax,dx
c00030e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030e4:	e8 a5 ed ff ff       	call   c0001e8e <dbc_1st>
c00030e9:	85 c0                	test   eax,eax
c00030eb:	74 2f                	je     c000311c <get_fileinfo+0x11d>
c00030ed:	83 fd 08             	cmp    ebp,0x8
c00030f0:	74 2a                	je     c000311c <get_fileinfo+0x11d>
c00030f2:	83 fd 0b             	cmp    ebp,0xb
c00030f5:	74 25                	je     c000311c <get_fileinfo+0x11d>
c00030f7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030fa:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030fe:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c0003102:	e8 8a ed ff ff       	call   c0001e91 <dbc_2nd>
c0003107:	85 c0                	test   eax,eax
c0003109:	74 11                	je     c000311c <get_fileinfo+0x11d>
c000310b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000310f:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003112:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c0003117:	c1 e0 08             	shl    eax,0x8
c000311a:	09 c2                	or     edx,eax
c000311c:	50                   	push   eax
c000311d:	0f b7 d2             	movzx  edx,dx
c0003120:	50                   	push   eax
c0003121:	68 b5 01 00 00       	push   0x1b5
c0003126:	52                   	push   edx
c0003127:	e8 f4 2b 00 00       	call   c0005d20 <ff_oem2uni>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	0f b7 c0             	movzx  eax,ax
c0003132:	85 c0                	test   eax,eax
c0003134:	75 04                	jne    c000313a <get_fileinfo+0x13b>
c0003136:	31 ff                	xor    edi,edi
c0003138:	eb 20                	jmp    c000315a <get_fileinfo+0x15b>
c000313a:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000313e:	b9 0c 00 00 00       	mov    ecx,0xc
c0003143:	29 f9                	sub    ecx,edi
c0003145:	e8 22 ee ff ff       	call   c0001f6c <put_utf>
c000314a:	0f b6 c0             	movzx  eax,al
c000314d:	85 c0                	test   eax,eax
c000314f:	74 e5                	je     c0003136 <get_fileinfo+0x137>
c0003151:	01 c7                	add    edi,eax
c0003153:	89 e9                	mov    ecx,ebp
c0003155:	e9 4b ff ff ff       	jmp    c00030a5 <get_fileinfo+0xa6>
c000315a:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000315f:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003163:	75 5f                	jne    c00031c4 <get_fileinfo+0x1c5>
c0003165:	85 ff                	test   edi,edi
c0003167:	75 0b                	jne    c0003174 <get_fileinfo+0x175>
c0003169:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000316d:	ba 01 00 00 00       	mov    edx,0x1
c0003172:	eb 3e                	jmp    c00031b2 <get_fileinfo+0x1b3>
c0003174:	bf 08 00 00 00       	mov    edi,0x8
c0003179:	31 d2                	xor    edx,edx
c000317b:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003181:	84 c0                	test   al,al
c0003183:	74 2d                	je     c00031b2 <get_fileinfo+0x1b3>
c0003185:	66 83 f8 2e          	cmp    ax,0x2e
c0003189:	74 1b                	je     c00031a6 <get_fileinfo+0x1a7>
c000318b:	8d 48 bf             	lea    ecx,[eax-0x41]
c000318e:	66 83 f9 19          	cmp    cx,0x19
c0003192:	77 17                	ja     c00031ab <get_fileinfo+0x1ac>
c0003194:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003197:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000319a:	21 f9                	and    ecx,edi
c000319c:	80 e1 18             	and    cl,0x18
c000319f:	74 0a                	je     c00031ab <get_fileinfo+0x1ac>
c00031a1:	83 c0 20             	add    eax,0x20
c00031a4:	eb 05                	jmp    c00031ab <get_fileinfo+0x1ac>
c00031a6:	bf 10 00 00 00       	mov    edi,0x10
c00031ab:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00031af:	42                   	inc    edx
c00031b0:	eb c9                	jmp    c000317b <get_fileinfo+0x17c>
c00031b2:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00031b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ba:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00031be:	75 04                	jne    c00031c4 <get_fileinfo+0x1c5>
c00031c0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00031c4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031c7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00031ca:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00031cd:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031d0:	83 c0 1c             	add    eax,0x1c
c00031d3:	e8 44 ec ff ff       	call   c0001e1c <ld_dword>
c00031d8:	89 03                	mov    DWORD PTR [ebx],eax
c00031da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031dd:	83 c0 16             	add    eax,0x16
c00031e0:	e8 2a ec ff ff       	call   c0001e0f <ld_word>
c00031e5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031e9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031ec:	83 c0 18             	add    eax,0x18
c00031ef:	e8 1b ec ff ff       	call   c0001e0f <ld_word>
c00031f4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031f8:	83 c4 1c             	add    esp,0x1c
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    

c0003200 <ld_clust.isra.0>:
c0003200:	56                   	push   esi
c0003201:	89 c6                	mov    esi,eax
c0003203:	53                   	push   ebx
c0003204:	89 d3                	mov    ebx,edx
c0003206:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003209:	e8 01 ec ff ff       	call   c0001e0f <ld_word>
c000320e:	0f b7 c8             	movzx  ecx,ax
c0003211:	89 f0                	mov    eax,esi
c0003213:	3c 03                	cmp    al,0x3
c0003215:	75 0d                	jne    c0003224 <ld_clust.isra.0+0x24>
c0003217:	8d 43 14             	lea    eax,[ebx+0x14]
c000321a:	e8 f0 eb ff ff       	call   c0001e0f <ld_word>
c000321f:	c1 e0 10             	shl    eax,0x10
c0003222:	09 c1                	or     ecx,eax
c0003224:	5b                   	pop    ebx
c0003225:	89 c8                	mov    eax,ecx
c0003227:	5e                   	pop    esi
c0003228:	c3                   	ret    

c0003229 <st_clust.isra.1>:
c0003229:	56                   	push   esi
c000322a:	89 c6                	mov    esi,eax
c000322c:	53                   	push   ebx
c000322d:	89 d3                	mov    ebx,edx
c000322f:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003232:	0f b7 d1             	movzx  edx,cx
c0003235:	e8 fa eb ff ff       	call   c0001e34 <st_word>
c000323a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000323d:	75 0f                	jne    c000324e <st_clust.isra.1+0x25>
c000323f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003242:	5b                   	pop    ebx
c0003243:	c1 e9 10             	shr    ecx,0x10
c0003246:	89 ca                	mov    edx,ecx
c0003248:	5e                   	pop    esi
c0003249:	e9 e6 eb ff ff       	jmp    c0001e34 <st_word>
c000324e:	5b                   	pop    ebx
c000324f:	5e                   	pop    esi
c0003250:	c3                   	ret    

c0003251 <get_fat.isra.2>:
c0003251:	83 fa 01             	cmp    edx,0x1
c0003254:	b9 01 00 00 00       	mov    ecx,0x1
c0003259:	0f 86 f4 00 00 00    	jbe    c0003353 <get_fat.isra.2+0x102>
c000325f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003262:	0f 83 eb 00 00 00    	jae    c0003353 <get_fat.isra.2+0x102>
c0003268:	55                   	push   ebp
c0003269:	57                   	push   edi
c000326a:	56                   	push   esi
c000326b:	89 c6                	mov    esi,eax
c000326d:	53                   	push   ebx
c000326e:	89 d3                	mov    ebx,edx
c0003270:	83 ec 0c             	sub    esp,0xc
c0003273:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003276:	83 f8 02             	cmp    eax,0x2
c0003279:	74 79                	je     c00032f4 <get_fat.isra.2+0xa3>
c000327b:	83 f8 03             	cmp    eax,0x3
c000327e:	0f 84 97 00 00 00    	je     c000331b <get_fat.isra.2+0xca>
c0003284:	48                   	dec    eax
c0003285:	0f 85 be 00 00 00    	jne    c0003349 <get_fat.isra.2+0xf8>
c000328b:	89 d7                	mov    edi,edx
c000328d:	89 f0                	mov    eax,esi
c000328f:	d1 ef                	shr    edi,1
c0003291:	01 d7                	add    edi,edx
c0003293:	89 fa                	mov    edx,edi
c0003295:	c1 ea 09             	shr    edx,0x9
c0003298:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000329b:	e8 d4 f0 ff ff       	call   c0002374 <move_window>
c00032a0:	85 c0                	test   eax,eax
c00032a2:	74 08                	je     c00032ac <get_fat.isra.2+0x5b>
c00032a4:	83 c9 ff             	or     ecx,0xffffffff
c00032a7:	e9 9d 00 00 00       	jmp    c0003349 <get_fat.isra.2+0xf8>
c00032ac:	8d 6f 01             	lea    ebp,[edi+0x1]
c00032af:	89 f0                	mov    eax,esi
c00032b1:	89 ea                	mov    edx,ebp
c00032b3:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00032b9:	c1 ea 09             	shr    edx,0x9
c00032bc:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00032c1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032c4:	e8 ab f0 ff ff       	call   c0002374 <move_window>
c00032c9:	85 c0                	test   eax,eax
c00032cb:	75 d7                	jne    c00032a4 <get_fat.isra.2+0x53>
c00032cd:	89 f8                	mov    eax,edi
c00032cf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00032d5:	0f b6 f8             	movzx  edi,al
c00032d8:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00032dd:	c1 e0 08             	shl    eax,0x8
c00032e0:	09 f8                	or     eax,edi
c00032e2:	89 c1                	mov    ecx,eax
c00032e4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032ea:	80 e3 01             	and    bl,0x1
c00032ed:	74 5a                	je     c0003349 <get_fat.isra.2+0xf8>
c00032ef:	c1 e8 04             	shr    eax,0x4
c00032f2:	eb 53                	jmp    c0003347 <get_fat.isra.2+0xf6>
c00032f4:	c1 ea 08             	shr    edx,0x8
c00032f7:	89 f0                	mov    eax,esi
c00032f9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00032fc:	e8 73 f0 ff ff       	call   c0002374 <move_window>
c0003301:	85 c0                	test   eax,eax
c0003303:	75 9f                	jne    c00032a4 <get_fat.isra.2+0x53>
c0003305:	01 db                	add    ebx,ebx
c0003307:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c000330d:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003311:	e8 f9 ea ff ff       	call   c0001e0f <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	eb 2e                	jmp    c0003349 <get_fat.isra.2+0xf8>
c000331b:	c1 ea 07             	shr    edx,0x7
c000331e:	89 f0                	mov    eax,esi
c0003320:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003323:	e8 4c f0 ff ff       	call   c0002374 <move_window>
c0003328:	85 c0                	test   eax,eax
c000332a:	0f 85 74 ff ff ff    	jne    c00032a4 <get_fat.isra.2+0x53>
c0003330:	c1 e3 02             	shl    ebx,0x2
c0003333:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003339:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000333d:	e8 da ea ff ff       	call   c0001e1c <ld_dword>
c0003342:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003347:	89 c1                	mov    ecx,eax
c0003349:	83 c4 0c             	add    esp,0xc
c000334c:	89 c8                	mov    eax,ecx
c000334e:	5b                   	pop    ebx
c000334f:	5e                   	pop    esi
c0003350:	5f                   	pop    edi
c0003351:	5d                   	pop    ebp
c0003352:	c3                   	ret    
c0003353:	89 c8                	mov    eax,ecx
c0003355:	c3                   	ret    

c0003356 <dir_sdi>:
c0003356:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000335c:	0f 87 b6 00 00 00    	ja     c0003418 <dir_sdi+0xc2>
c0003362:	55                   	push   ebp
c0003363:	57                   	push   edi
c0003364:	56                   	push   esi
c0003365:	53                   	push   ebx
c0003366:	89 d3                	mov    ebx,edx
c0003368:	83 ec 1c             	sub    esp,0x1c
c000336b:	f6 c2 1f             	test   dl,0x1f
c000336e:	74 0a                	je     c000337a <dir_sdi+0x24>
c0003370:	b8 02 00 00 00       	mov    eax,0x2
c0003375:	e9 96 00 00 00       	jmp    c0003410 <dir_sdi+0xba>
c000337a:	89 c6                	mov    esi,eax
c000337c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000337e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003381:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c0003384:	85 ff                	test   edi,edi
c0003386:	75 21                	jne    c00033a9 <dir_sdi+0x53>
c0003388:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c000338c:	76 07                	jbe    c0003395 <dir_sdi+0x3f>
c000338e:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003391:	85 c0                	test   eax,eax
c0003393:	75 12                	jne    c00033a7 <dir_sdi+0x51>
c0003395:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003399:	89 da                	mov    edx,ebx
c000339b:	c1 ea 05             	shr    edx,0x5
c000339e:	39 c2                	cmp    edx,eax
c00033a0:	73 ce                	jae    c0003370 <dir_sdi+0x1a>
c00033a2:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00033a5:	eb 3c                	jmp    c00033e3 <dir_sdi+0x8d>
c00033a7:	89 c7                	mov    edi,eax
c00033a9:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00033ad:	c1 e1 09             	shl    ecx,0x9
c00033b0:	39 cb                	cmp    ebx,ecx
c00033b2:	72 26                	jb     c00033da <dir_sdi+0x84>
c00033b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00033ba:	89 fa                	mov    edx,edi
c00033bc:	e8 90 fe ff ff       	call   c0003251 <get_fat.isra.2>
c00033c1:	83 f8 ff             	cmp    eax,0xffffffff
c00033c4:	89 c7                	mov    edi,eax
c00033c6:	74 43                	je     c000340b <dir_sdi+0xb5>
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 a3                	jbe    c0003370 <dir_sdi+0x1a>
c00033cd:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00033d0:	76 9e                	jbe    c0003370 <dir_sdi+0x1a>
c00033d2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d6:	29 cb                	sub    ebx,ecx
c00033d8:	eb d6                	jmp    c00033b0 <dir_sdi+0x5a>
c00033da:	89 fa                	mov    edx,edi
c00033dc:	89 e8                	mov    eax,ebp
c00033de:	e8 82 ec ff ff       	call   c0002065 <clst2sect>
c00033e3:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033e6:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00033e9:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ec:	85 d2                	test   edx,edx
c00033ee:	74 80                	je     c0003370 <dir_sdi+0x1a>
c00033f0:	89 d8                	mov    eax,ebx
c00033f2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033f8:	c1 e8 09             	shr    eax,0x9
c00033fb:	01 d0                	add    eax,edx
c00033fd:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003400:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c0003404:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0003407:	31 c0                	xor    eax,eax
c0003409:	eb 05                	jmp    c0003410 <dir_sdi+0xba>
c000340b:	b8 01 00 00 00       	mov    eax,0x1
c0003410:	83 c4 1c             	add    esp,0x1c
c0003413:	5b                   	pop    ebx
c0003414:	5e                   	pop    esi
c0003415:	5f                   	pop    edi
c0003416:	5d                   	pop    ebp
c0003417:	c3                   	ret    
c0003418:	b8 02 00 00 00       	mov    eax,0x2
c000341d:	c3                   	ret    

c000341e <create_chain>:
c000341e:	55                   	push   ebp
c000341f:	89 c5                	mov    ebp,eax
c0003421:	57                   	push   edi
c0003422:	89 d7                	mov    edi,edx
c0003424:	56                   	push   esi
c0003425:	53                   	push   ebx
c0003426:	83 ec 1c             	sub    esp,0x1c
c0003429:	85 d2                	test   edx,edx
c000342b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000342d:	75 0e                	jne    c000343d <create_chain+0x1f>
c000342f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0003432:	85 c9                	test   ecx,ecx
c0003434:	74 32                	je     c0003468 <create_chain+0x4a>
c0003436:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003439:	77 32                	ja     c000346d <create_chain+0x4f>
c000343b:	eb 2b                	jmp    c0003468 <create_chain+0x4a>
c000343d:	89 d8                	mov    eax,ebx
c000343f:	e8 0d fe ff ff       	call   c0003251 <get_fat.isra.2>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	77 0a                	ja     c0003453 <create_chain+0x35>
c0003449:	b8 01 00 00 00       	mov    eax,0x1
c000344e:	e9 fd 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003453:	83 f8 ff             	cmp    eax,0xffffffff
c0003456:	0f 84 f1 00 00 00    	je     c000354d <create_chain+0x12f>
c000345c:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000345f:	89 f9                	mov    ecx,edi
c0003461:	76 0a                	jbe    c000346d <create_chain+0x4f>
c0003463:	e9 e8 00 00 00       	jmp    c0003550 <create_chain+0x132>
c0003468:	b9 01 00 00 00       	mov    ecx,0x1
c000346d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003471:	75 07                	jne    c000347a <create_chain+0x5c>
c0003473:	31 c0                	xor    eax,eax
c0003475:	e9 d6 00 00 00       	jmp    c0003550 <create_chain+0x132>
c000347a:	39 f9                	cmp    ecx,edi
c000347c:	75 49                	jne    c00034c7 <create_chain+0xa9>
c000347e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003481:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003484:	77 05                	ja     c000348b <create_chain+0x6d>
c0003486:	be 02 00 00 00       	mov    esi,0x2
c000348b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000348f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003492:	89 f2                	mov    edx,esi
c0003494:	e8 b8 fd ff ff       	call   c0003251 <get_fat.isra.2>
c0003499:	83 f8 01             	cmp    eax,0x1
c000349c:	0f 84 ae 00 00 00    	je     c0003550 <create_chain+0x132>
c00034a2:	83 f8 ff             	cmp    eax,0xffffffff
c00034a5:	0f 84 a5 00 00 00    	je     c0003550 <create_chain+0x132>
c00034ab:	85 c0                	test   eax,eax
c00034ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034b1:	74 10                	je     c00034c3 <create_chain+0xa5>
c00034b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00034b6:	83 f8 01             	cmp    eax,0x1
c00034b9:	76 0c                	jbe    c00034c7 <create_chain+0xa9>
c00034bb:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00034be:	0f 47 c8             	cmova  ecx,eax
c00034c1:	eb 04                	jmp    c00034c7 <create_chain+0xa9>
c00034c3:	85 f6                	test   esi,esi
c00034c5:	75 3b                	jne    c0003502 <create_chain+0xe4>
c00034c7:	89 ce                	mov    esi,ecx
c00034c9:	46                   	inc    esi
c00034ca:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00034cd:	77 0a                	ja     c00034d9 <create_chain+0xbb>
c00034cf:	83 f9 01             	cmp    ecx,0x1
c00034d2:	76 9f                	jbe    c0003473 <create_chain+0x55>
c00034d4:	be 02 00 00 00       	mov    esi,0x2
c00034d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034dd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034e0:	89 f2                	mov    edx,esi
c00034e2:	e8 6a fd ff ff       	call   c0003251 <get_fat.isra.2>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	74 17                	je     c0003502 <create_chain+0xe4>
c00034eb:	83 f8 01             	cmp    eax,0x1
c00034ee:	74 60                	je     c0003550 <create_chain+0x132>
c00034f0:	83 f8 ff             	cmp    eax,0xffffffff
c00034f3:	74 5b                	je     c0003550 <create_chain+0x132>
c00034f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034f9:	39 ce                	cmp    esi,ecx
c00034fb:	75 cc                	jne    c00034c9 <create_chain+0xab>
c00034fd:	e9 71 ff ff ff       	jmp    c0003473 <create_chain+0x55>
c0003502:	83 c9 ff             	or     ecx,0xffffffff
c0003505:	89 f2                	mov    edx,esi
c0003507:	89 d8                	mov    eax,ebx
c0003509:	e8 c0 f2 ff ff       	call   c00027ce <put_fat>
c000350e:	85 c0                	test   eax,eax
c0003510:	75 0f                	jne    c0003521 <create_chain+0x103>
c0003512:	85 ff                	test   edi,edi
c0003514:	74 0b                	je     c0003521 <create_chain+0x103>
c0003516:	89 f1                	mov    ecx,esi
c0003518:	89 fa                	mov    edx,edi
c000351a:	89 d8                	mov    eax,ebx
c000351c:	e8 ad f2 ff ff       	call   c00027ce <put_fat>
c0003521:	85 c0                	test   eax,eax
c0003523:	75 21                	jne    c0003546 <create_chain+0x128>
c0003525:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003528:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000352b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000352e:	8d 57 fe             	lea    edx,[edi-0x2]
c0003531:	39 d0                	cmp    eax,edx
c0003533:	77 04                	ja     c0003539 <create_chain+0x11b>
c0003535:	48                   	dec    eax
c0003536:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003539:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000353c:	83 c8 01             	or     eax,0x1
c000353f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003542:	89 f0                	mov    eax,esi
c0003544:	eb 0a                	jmp    c0003550 <create_chain+0x132>
c0003546:	48                   	dec    eax
c0003547:	0f 85 fc fe ff ff    	jne    c0003449 <create_chain+0x2b>
c000354d:	83 c8 ff             	or     eax,0xffffffff
c0003550:	83 c4 1c             	add    esp,0x1c
c0003553:	5b                   	pop    ebx
c0003554:	5e                   	pop    esi
c0003555:	5f                   	pop    edi
c0003556:	5d                   	pop    ebp
c0003557:	c3                   	ret    

c0003558 <remove_chain>:
c0003558:	55                   	push   ebp
c0003559:	57                   	push   edi
c000355a:	56                   	push   esi
c000355b:	89 d6                	mov    esi,edx
c000355d:	53                   	push   ebx
c000355e:	83 ec 0c             	sub    esp,0xc
c0003561:	83 fa 01             	cmp    edx,0x1
c0003564:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003566:	76 6a                	jbe    c00035d2 <remove_chain+0x7a>
c0003568:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000356b:	76 65                	jbe    c00035d2 <remove_chain+0x7a>
c000356d:	85 c9                	test   ecx,ecx
c000356f:	89 c5                	mov    ebp,eax
c0003571:	89 ca                	mov    edx,ecx
c0003573:	74 0e                	je     c0003583 <remove_chain+0x2b>
c0003575:	83 c9 ff             	or     ecx,0xffffffff
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 4f f2 ff ff       	call   c00027ce <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	75 5b                	jne    c00035de <remove_chain+0x86>
c0003583:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003586:	89 f2                	mov    edx,esi
c0003588:	e8 c4 fc ff ff       	call   c0003251 <get_fat.isra.2>
c000358d:	85 c0                	test   eax,eax
c000358f:	89 c7                	mov    edi,eax
c0003591:	75 04                	jne    c0003597 <remove_chain+0x3f>
c0003593:	31 c0                	xor    eax,eax
c0003595:	eb 47                	jmp    c00035de <remove_chain+0x86>
c0003597:	83 f8 01             	cmp    eax,0x1
c000359a:	74 36                	je     c00035d2 <remove_chain+0x7a>
c000359c:	83 f8 ff             	cmp    eax,0xffffffff
c000359f:	74 38                	je     c00035d9 <remove_chain+0x81>
c00035a1:	31 c9                	xor    ecx,ecx
c00035a3:	89 f2                	mov    edx,esi
c00035a5:	89 d8                	mov    eax,ebx
c00035a7:	e8 22 f2 ff ff       	call   c00027ce <put_fat>
c00035ac:	85 c0                	test   eax,eax
c00035ae:	75 2e                	jne    c00035de <remove_chain+0x86>
c00035b0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00035b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00035b6:	8d 4a fe             	lea    ecx,[edx-0x2]
c00035b9:	39 c8                	cmp    eax,ecx
c00035bb:	73 0d                	jae    c00035ca <remove_chain+0x72>
c00035bd:	40                   	inc    eax
c00035be:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00035c1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00035c4:	83 c8 01             	or     eax,0x1
c00035c7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00035ca:	39 fa                	cmp    edx,edi
c00035cc:	89 fe                	mov    esi,edi
c00035ce:	77 b3                	ja     c0003583 <remove_chain+0x2b>
c00035d0:	eb c1                	jmp    c0003593 <remove_chain+0x3b>
c00035d2:	b8 02 00 00 00       	mov    eax,0x2
c00035d7:	eb 05                	jmp    c00035de <remove_chain+0x86>
c00035d9:	b8 01 00 00 00       	mov    eax,0x1
c00035de:	83 c4 0c             	add    esp,0xc
c00035e1:	5b                   	pop    ebx
c00035e2:	5e                   	pop    esi
c00035e3:	5f                   	pop    edi
c00035e4:	5d                   	pop    ebp
c00035e5:	c3                   	ret    

c00035e6 <dir_next>:
c00035e6:	55                   	push   ebp
c00035e7:	57                   	push   edi
c00035e8:	56                   	push   esi
c00035e9:	53                   	push   ebx
c00035ea:	83 ec 1c             	sub    esp,0x1c
c00035ed:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035f2:	83 c7 20             	add    edi,0x20
c00035f5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035fb:	76 07                	jbe    c0003604 <dir_next+0x1e>
c00035fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0003604:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c0003607:	b9 04 00 00 00       	mov    ecx,0x4
c000360c:	85 f6                	test   esi,esi
c000360e:	0f 84 cd 00 00 00    	je     c00036e1 <dir_next+0xfb>
c0003614:	89 c3                	mov    ebx,eax
c0003616:	89 f8                	mov    eax,edi
c0003618:	25 ff 01 00 00       	and    eax,0x1ff
c000361d:	89 d1                	mov    ecx,edx
c000361f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003623:	0f 85 a8 00 00 00    	jne    c00036d1 <dir_next+0xeb>
c0003629:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000362c:	46                   	inc    esi
c000362d:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003630:	85 d2                	test   edx,edx
c0003632:	75 22                	jne    c0003656 <dir_next+0x70>
c0003634:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003638:	89 fa                	mov    edx,edi
c000363a:	c1 ea 05             	shr    edx,0x5
c000363d:	39 c2                	cmp    edx,eax
c000363f:	0f 82 8c 00 00 00    	jb     c00036d1 <dir_next+0xeb>
c0003645:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000364c:	b9 04 00 00 00       	mov    ecx,0x4
c0003651:	e9 8b 00 00 00       	jmp    c00036e1 <dir_next+0xfb>
c0003656:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000365a:	89 fe                	mov    esi,edi
c000365c:	c1 ee 09             	shr    esi,0x9
c000365f:	48                   	dec    eax
c0003660:	85 f0                	test   eax,esi
c0003662:	75 6d                	jne    c00036d1 <dir_next+0xeb>
c0003664:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003668:	89 e8                	mov    eax,ebp
c000366a:	e8 e2 fb ff ff       	call   c0003251 <get_fat.isra.2>
c000366f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003673:	83 f8 01             	cmp    eax,0x1
c0003676:	89 c6                	mov    esi,eax
c0003678:	77 07                	ja     c0003681 <dir_next+0x9b>
c000367a:	b9 02 00 00 00       	mov    ecx,0x2
c000367f:	eb 60                	jmp    c00036e1 <dir_next+0xfb>
c0003681:	83 f8 ff             	cmp    eax,0xffffffff
c0003684:	75 07                	jne    c000368d <dir_next+0xa7>
c0003686:	b9 01 00 00 00       	mov    ecx,0x1
c000368b:	eb 54                	jmp    c00036e1 <dir_next+0xfb>
c000368d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003690:	77 30                	ja     c00036c2 <dir_next+0xdc>
c0003692:	85 c9                	test   ecx,ecx
c0003694:	74 af                	je     c0003645 <dir_next+0x5f>
c0003696:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003699:	89 d8                	mov    eax,ebx
c000369b:	e8 7e fd ff ff       	call   c000341e <create_chain>
c00036a0:	b9 07 00 00 00       	mov    ecx,0x7
c00036a5:	85 c0                	test   eax,eax
c00036a7:	89 c6                	mov    esi,eax
c00036a9:	74 36                	je     c00036e1 <dir_next+0xfb>
c00036ab:	83 f8 01             	cmp    eax,0x1
c00036ae:	74 ca                	je     c000367a <dir_next+0x94>
c00036b0:	83 f8 ff             	cmp    eax,0xffffffff
c00036b3:	74 d1                	je     c0003686 <dir_next+0xa0>
c00036b5:	89 c2                	mov    edx,eax
c00036b7:	89 e8                	mov    eax,ebp
c00036b9:	e8 67 f2 ff ff       	call   c0002925 <dir_clear>
c00036be:	85 c0                	test   eax,eax
c00036c0:	75 c4                	jne    c0003686 <dir_next+0xa0>
c00036c2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00036c5:	89 f2                	mov    edx,esi
c00036c7:	89 e8                	mov    eax,ebp
c00036c9:	e8 97 e9 ff ff       	call   c0002065 <clst2sect>
c00036ce:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00036d1:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00036d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00036d8:	31 c9                	xor    ecx,ecx
c00036da:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036de:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036e1:	83 c4 1c             	add    esp,0x1c
c00036e4:	89 c8                	mov    eax,ecx
c00036e6:	5b                   	pop    ebx
c00036e7:	5e                   	pop    esi
c00036e8:	5f                   	pop    edi
c00036e9:	5d                   	pop    ebp
c00036ea:	c3                   	ret    

c00036eb <dir_alloc>:
c00036eb:	55                   	push   ebp
c00036ec:	89 c5                	mov    ebp,eax
c00036ee:	57                   	push   edi
c00036ef:	89 d7                	mov    edi,edx
c00036f1:	56                   	push   esi
c00036f2:	31 d2                	xor    edx,edx
c00036f4:	53                   	push   ebx
c00036f5:	83 ec 0c             	sub    esp,0xc
c00036f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00036fa:	e8 57 fc ff ff       	call   c0003356 <dir_sdi>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 3b                	jne    c000373e <dir_alloc+0x53>
c0003703:	31 db                	xor    ebx,ebx
c0003705:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003708:	89 f0                	mov    eax,esi
c000370a:	e8 65 ec ff ff       	call   c0002374 <move_window>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 2b                	jne    c000373e <dir_alloc+0x53>
c0003713:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c0003716:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003719:	81 fa e5 00 00 00    	cmp    edx,0xe5
c000371f:	74 04                	je     c0003725 <dir_alloc+0x3a>
c0003721:	85 d2                	test   edx,edx
c0003723:	75 07                	jne    c000372c <dir_alloc+0x41>
c0003725:	43                   	inc    ebx
c0003726:	39 fb                	cmp    ebx,edi
c0003728:	75 04                	jne    c000372e <dir_alloc+0x43>
c000372a:	eb 1c                	jmp    c0003748 <dir_alloc+0x5d>
c000372c:	31 db                	xor    ebx,ebx
c000372e:	ba 01 00 00 00       	mov    edx,0x1
c0003733:	89 e8                	mov    eax,ebp
c0003735:	e8 ac fe ff ff       	call   c00035e6 <dir_next>
c000373a:	85 c0                	test   eax,eax
c000373c:	74 c7                	je     c0003705 <dir_alloc+0x1a>
c000373e:	83 f8 04             	cmp    eax,0x4
c0003741:	75 05                	jne    c0003748 <dir_alloc+0x5d>
c0003743:	b8 07 00 00 00       	mov    eax,0x7
c0003748:	83 c4 0c             	add    esp,0xc
c000374b:	5b                   	pop    ebx
c000374c:	5e                   	pop    esi
c000374d:	5f                   	pop    edi
c000374e:	5d                   	pop    ebp
c000374f:	c3                   	ret    

c0003750 <dir_read>:
c0003750:	55                   	push   ebp
c0003751:	57                   	push   edi
c0003752:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003757:	56                   	push   esi
c0003758:	be 04 00 00 00       	mov    esi,0x4
c000375d:	53                   	push   ebx
c000375e:	89 c3                	mov    ebx,eax
c0003760:	83 ec 1c             	sub    esp,0x1c
c0003763:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003767:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003769:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000376e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003771:	85 d2                	test   edx,edx
c0003773:	0f 84 e3 00 00 00    	je     c000385c <dir_read+0x10c>
c0003779:	89 e8                	mov    eax,ebp
c000377b:	e8 f4 eb ff ff       	call   c0002374 <move_window>
c0003780:	85 c0                	test   eax,eax
c0003782:	89 c6                	mov    esi,eax
c0003784:	0f 85 dd 00 00 00    	jne    c0003867 <dir_read+0x117>
c000378a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000378d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003790:	88 04 24             	mov    BYTE PTR [esp],al
c0003793:	85 c0                	test   eax,eax
c0003795:	0f 84 c7 00 00 00    	je     c0003862 <dir_read+0x112>
c000379b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000379e:	83 e1 3f             	and    ecx,0x3f
c00037a1:	3d e5 00 00 00       	cmp    eax,0xe5
c00037a6:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00037a9:	0f 84 93 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037af:	83 f8 2e             	cmp    eax,0x2e
c00037b2:	0f 84 8a 00 00 00    	je     c0003842 <dir_read+0xf2>
c00037b8:	0f b6 c9             	movzx  ecx,cl
c00037bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00037bf:	83 e1 df             	and    ecx,0xffffffdf
c00037c2:	83 f9 08             	cmp    ecx,0x8
c00037c5:	0f 94 c1             	sete   cl
c00037c8:	0f b6 c9             	movzx  ecx,cl
c00037cb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00037cf:	75 71                	jne    c0003842 <dir_read+0xf2>
c00037d1:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00037d6:	75 4a                	jne    c0003822 <dir_read+0xd2>
c00037d8:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037dc:	74 16                	je     c00037f4 <dir_read+0xa4>
c00037de:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037e1:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037e8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037ef:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037f2:	eb 0e                	jmp    c0003802 <dir_read+0xb2>
c00037f4:	89 f9                	mov    ecx,edi
c00037f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037fb:	0f b6 c9             	movzx  ecx,cl
c00037fe:	39 c1                	cmp    ecx,eax
c0003800:	75 45                	jne    c0003847 <dir_read+0xf7>
c0003802:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003806:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380b:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c000380e:	75 37                	jne    c0003847 <dir_read+0xf7>
c0003810:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0003813:	e8 6a e8 ff ff       	call   c0002082 <pick_lfn>
c0003818:	85 c0                	test   eax,eax
c000381a:	74 2b                	je     c0003847 <dir_read+0xf7>
c000381c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000381f:	4f                   	dec    edi
c0003820:	eb 25                	jmp    c0003847 <dir_read+0xf7>
c0003822:	89 f8                	mov    eax,edi
c0003824:	84 c0                	test   al,al
c0003826:	75 11                	jne    c0003839 <dir_read+0xe9>
c0003828:	89 d0                	mov    eax,edx
c000382a:	e8 30 ea ff ff       	call   c000225f <sum_sfn>
c000382f:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003833:	75 04                	jne    c0003839 <dir_read+0xe9>
c0003835:	31 f6                	xor    esi,esi
c0003837:	eb 35                	jmp    c000386e <dir_read+0x11e>
c0003839:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003840:	eb 2c                	jmp    c000386e <dir_read+0x11e>
c0003842:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003847:	31 d2                	xor    edx,edx
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 96 fd ff ff       	call   c00035e6 <dir_next>
c0003850:	85 c0                	test   eax,eax
c0003852:	89 c6                	mov    esi,eax
c0003854:	0f 84 14 ff ff ff    	je     c000376e <dir_read+0x1e>
c000385a:	eb 0b                	jmp    c0003867 <dir_read+0x117>
c000385c:	85 f6                	test   esi,esi
c000385e:	74 d5                	je     c0003835 <dir_read+0xe5>
c0003860:	eb 05                	jmp    c0003867 <dir_read+0x117>
c0003862:	be 04 00 00 00       	mov    esi,0x4
c0003867:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000386e:	83 c4 1c             	add    esp,0x1c
c0003871:	89 f0                	mov    eax,esi
c0003873:	5b                   	pop    ebx
c0003874:	5e                   	pop    esi
c0003875:	5f                   	pop    edi
c0003876:	5d                   	pop    ebp
c0003877:	c3                   	ret    

c0003878 <dir_remove>:
c0003878:	57                   	push   edi
c0003879:	56                   	push   esi
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003880:	8b 30                	mov    esi,DWORD PTR [eax]
c0003882:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003885:	83 fa ff             	cmp    edx,0xffffffff
c0003888:	74 09                	je     c0003893 <dir_remove+0x1b>
c000388a:	e8 c7 fa ff ff       	call   c0003356 <dir_sdi>
c000388f:	85 c0                	test   eax,eax
c0003891:	75 34                	jne    c00038c7 <dir_remove+0x4f>
c0003893:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003896:	89 f0                	mov    eax,esi
c0003898:	e8 d7 ea ff ff       	call   c0002374 <move_window>
c000389d:	85 c0                	test   eax,eax
c000389f:	75 1c                	jne    c00038bd <dir_remove+0x45>
c00038a1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00038a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00038a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00038ab:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00038ae:	73 17                	jae    c00038c7 <dir_remove+0x4f>
c00038b0:	31 d2                	xor    edx,edx
c00038b2:	89 d8                	mov    eax,ebx
c00038b4:	e8 2d fd ff ff       	call   c00035e6 <dir_next>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 d6                	je     c0003893 <dir_remove+0x1b>
c00038bd:	83 f8 04             	cmp    eax,0x4
c00038c0:	75 05                	jne    c00038c7 <dir_remove+0x4f>
c00038c2:	b8 02 00 00 00       	mov    eax,0x2
c00038c7:	5b                   	pop    ebx
c00038c8:	5e                   	pop    esi
c00038c9:	5f                   	pop    edi
c00038ca:	c3                   	ret    

c00038cb <dir_find>:
c00038cb:	55                   	push   ebp
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	57                   	push   edi
c00038cf:	56                   	push   esi
c00038d0:	53                   	push   ebx
c00038d1:	89 c3                	mov    ebx,eax
c00038d3:	83 ec 1c             	sub    esp,0x1c
c00038d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00038d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038dc:	89 d8                	mov    eax,ebx
c00038de:	e8 73 fa ff ff       	call   c0003356 <dir_sdi>
c00038e3:	85 c0                	test   eax,eax
c00038e5:	89 c6                	mov    esi,eax
c00038e7:	0f 85 22 01 00 00    	jne    c0003a0f <dir_find+0x144>
c00038ed:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038f4:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00038f9:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038fe:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003901:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003905:	e8 6a ea ff ff       	call   c0002374 <move_window>
c000390a:	85 c0                	test   eax,eax
c000390c:	89 c6                	mov    esi,eax
c000390e:	0f 85 fb 00 00 00    	jne    c0003a0f <dir_find+0x144>
c0003914:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003917:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c000391a:	85 d2                	test   edx,edx
c000391c:	89 d1                	mov    ecx,edx
c000391e:	0f 84 e6 00 00 00    	je     c0003a0a <dir_find+0x13f>
c0003924:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003927:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000392b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000392f:	83 e0 3f             	and    eax,0x3f
c0003932:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003938:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000393b:	0f 84 a8 00 00 00    	je     c00039e9 <dir_find+0x11e>
c0003941:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003946:	0f b6 c0             	movzx  eax,al
c0003949:	74 0b                	je     c0003956 <dir_find+0x8b>
c000394b:	83 f8 0f             	cmp    eax,0xf
c000394e:	0f 85 95 00 00 00    	jne    c00039e9 <dir_find+0x11e>
c0003954:	eb 05                	jmp    c000395b <dir_find+0x90>
c0003956:	83 f8 0f             	cmp    eax,0xf
c0003959:	75 62                	jne    c00039bd <dir_find+0xf2>
c000395b:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c000395f:	0f 85 90 00 00 00    	jne    c00039f5 <dir_find+0x12a>
c0003965:	f6 c1 40             	test   cl,0x40
c0003968:	74 15                	je     c000397f <dir_find+0xb4>
c000396a:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c000396d:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003973:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003977:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000397a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000397d:	eb 11                	jmp    c0003990 <dir_find+0xc5>
c000397f:	89 e8                	mov    eax,ebp
c0003981:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003986:	0f b6 d0             	movzx  edx,al
c0003989:	0f b6 c1             	movzx  eax,cl
c000398c:	39 c2                	cmp    edx,eax
c000398e:	75 65                	jne    c00039f5 <dir_find+0x12a>
c0003990:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003994:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003999:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c000399c:	75 57                	jne    c00039f5 <dir_find+0x12a>
c000399e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039a6:	89 fa                	mov    edx,edi
c00039a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039ab:	e8 2c f3 ff ff       	call   c0002cdc <cmp_lfn>
c00039b0:	85 c0                	test   eax,eax
c00039b2:	74 41                	je     c00039f5 <dir_find+0x12a>
c00039b4:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039b8:	8d 69 ff             	lea    ebp,[ecx-0x1]
c00039bb:	eb 38                	jmp    c00039f5 <dir_find+0x12a>
c00039bd:	89 e8                	mov    eax,ebp
c00039bf:	84 c0                	test   al,al
c00039c1:	75 0d                	jne    c00039d0 <dir_find+0x105>
c00039c3:	89 f8                	mov    eax,edi
c00039c5:	e8 95 e8 ff ff       	call   c000225f <sum_sfn>
c00039ca:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039ce:	74 3f                	je     c0003a0f <dir_find+0x144>
c00039d0:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c00039d4:	75 13                	jne    c00039e9 <dir_find+0x11e>
c00039d6:	8d 53 20             	lea    edx,[ebx+0x20]
c00039d9:	b9 0b 00 00 00       	mov    ecx,0xb
c00039de:	89 f8                	mov    eax,edi
c00039e0:	e8 75 e4 ff ff       	call   c0001e5a <mem_cmp>
c00039e5:	85 c0                	test   eax,eax
c00039e7:	74 26                	je     c0003a0f <dir_find+0x144>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	bd ff ff ff ff       	mov    ebp,0xffffffff
c00039f5:	31 d2                	xor    edx,edx
c00039f7:	89 d8                	mov    eax,ebx
c00039f9:	e8 e8 fb ff ff       	call   c00035e6 <dir_next>
c00039fe:	85 c0                	test   eax,eax
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	0f 84 f6 fe ff ff    	je     c00038fe <dir_find+0x33>
c0003a08:	eb 05                	jmp    c0003a0f <dir_find+0x144>
c0003a0a:	be 04 00 00 00       	mov    esi,0x4
c0003a0f:	83 c4 1c             	add    esp,0x1c
c0003a12:	89 f0                	mov    eax,esi
c0003a14:	5b                   	pop    ebx
c0003a15:	5e                   	pop    esi
c0003a16:	5f                   	pop    edi
c0003a17:	5d                   	pop    ebp
c0003a18:	c3                   	ret    

c0003a19 <follow_path>:
c0003a19:	56                   	push   esi
c0003a1a:	53                   	push   ebx
c0003a1b:	89 c3                	mov    ebx,eax
c0003a1d:	83 ec 14             	sub    esp,0x14
c0003a20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a24:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a2a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003a2d:	83 fa 2f             	cmp    edx,0x2f
c0003a30:	75 07                	jne    c0003a39 <follow_path+0x20>
c0003a32:	40                   	inc    eax
c0003a33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a37:	eb ed                	jmp    c0003a26 <follow_path+0xd>
c0003a39:	83 fa 5c             	cmp    edx,0x5c
c0003a3c:	74 f4                	je     c0003a32 <follow_path+0x19>
c0003a3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a45:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a48:	77 3e                	ja     c0003a88 <follow_path+0x6f>
c0003a4a:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a4e:	31 d2                	xor    edx,edx
c0003a50:	89 d8                	mov    eax,ebx
c0003a52:	e8 ff f8 ff ff       	call   c0003356 <dir_sdi>
c0003a57:	eb 57                	jmp    c0003ab0 <follow_path+0x97>
c0003a59:	89 d8                	mov    eax,ebx
c0003a5b:	e8 6b fe ff ff       	call   c00038cb <dir_find>
c0003a60:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a63:	85 c0                	test   eax,eax
c0003a65:	75 32                	jne    c0003a99 <follow_path+0x80>
c0003a67:	80 e2 04             	and    dl,0x4
c0003a6a:	75 44                	jne    c0003ab0 <follow_path+0x97>
c0003a6c:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a70:	74 39                	je     c0003aab <follow_path+0x92>
c0003a72:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a75:	25 ff 01 00 00       	and    eax,0x1ff
c0003a7a:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a7e:	8a 06                	mov    al,BYTE PTR [esi]
c0003a80:	e8 7b f7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003a85:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 8e ef ff ff       	call   c0002a21 <create_name>
c0003a93:	85 c0                	test   eax,eax
c0003a95:	74 c2                	je     c0003a59 <follow_path+0x40>
c0003a97:	eb 17                	jmp    c0003ab0 <follow_path+0x97>
c0003a99:	83 f8 04             	cmp    eax,0x4
c0003a9c:	75 12                	jne    c0003ab0 <follow_path+0x97>
c0003a9e:	80 e2 04             	and    dl,0x4
c0003aa1:	ba 05 00 00 00       	mov    edx,0x5
c0003aa6:	0f 44 c2             	cmove  eax,edx
c0003aa9:	eb 05                	jmp    c0003ab0 <follow_path+0x97>
c0003aab:	b8 05 00 00 00       	mov    eax,0x5
c0003ab0:	83 c4 14             	add    esp,0x14
c0003ab3:	5b                   	pop    ebx
c0003ab4:	5e                   	pop    esi
c0003ab5:	c3                   	ret    

c0003ab6 <dir_register>:
c0003ab6:	55                   	push   ebp
c0003ab7:	57                   	push   edi
c0003ab8:	56                   	push   esi
c0003ab9:	be 06 00 00 00       	mov    esi,0x6
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 2c             	sub    esp,0x2c
c0003ac2:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003ac5:	80 e2 a0             	and    dl,0xa0
c0003ac8:	0f 85 66 01 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ace:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003ad6:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ad8:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003adf:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003ae4:	74 06                	je     c0003aec <dir_register+0x36>
c0003ae6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aea:	eb ef                	jmp    c0003adb <dir_register+0x25>
c0003aec:	89 c3                	mov    ebx,eax
c0003aee:	b9 0c 00 00 00       	mov    ecx,0xc
c0003af3:	8d 40 20             	lea    eax,[eax+0x20]
c0003af6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003afa:	89 c2                	mov    edx,eax
c0003afc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003b00:	e8 36 e3 ff ff       	call   c0001e3b <mem_cpy>
c0003b05:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003b0a:	74 48                	je     c0003b54 <dir_register+0x9e>
c0003b0c:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003b10:	bd 01 00 00 00       	mov    ebp,0x1
c0003b15:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003b18:	55                   	push   ebp
c0003b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003b21:	e8 77 e6 ff ff       	call   c000219d <gen_numname>
c0003b26:	58                   	pop    eax
c0003b27:	89 d8                	mov    eax,ebx
c0003b29:	e8 9d fd ff ff       	call   c00038cb <dir_find>
c0003b2e:	85 c0                	test   eax,eax
c0003b30:	89 c6                	mov    esi,eax
c0003b32:	75 10                	jne    c0003b44 <dir_register+0x8e>
c0003b34:	45                   	inc    ebp
c0003b35:	83 fd 64             	cmp    ebp,0x64
c0003b38:	75 db                	jne    c0003b15 <dir_register+0x5f>
c0003b3a:	be 07 00 00 00       	mov    esi,0x7
c0003b3f:	e9 f0 00 00 00       	jmp    c0003c34 <dir_register+0x17e>
c0003b44:	83 f8 04             	cmp    eax,0x4
c0003b47:	0f 85 e7 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b4d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b51:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b54:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b59:	bd 01 00 00 00       	mov    ebp,0x1
c0003b5e:	74 13                	je     c0003b73 <dir_register+0xbd>
c0003b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b64:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b69:	31 d2                	xor    edx,edx
c0003b6b:	83 c0 0c             	add    eax,0xc
c0003b6e:	f7 f1                	div    ecx
c0003b70:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b73:	89 ea                	mov    edx,ebp
c0003b75:	89 d8                	mov    eax,ebx
c0003b77:	e8 6f fb ff ff       	call   c00036eb <dir_alloc>
c0003b7c:	85 c0                	test   eax,eax
c0003b7e:	89 c6                	mov    esi,eax
c0003b80:	0f 85 ae 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003b86:	4d                   	dec    ebp
c0003b87:	74 6b                	je     c0003bf4 <dir_register+0x13e>
c0003b89:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b8c:	89 e8                	mov    eax,ebp
c0003b8e:	c1 e0 05             	shl    eax,0x5
c0003b91:	29 c2                	sub    edx,eax
c0003b93:	89 d8                	mov    eax,ebx
c0003b95:	e8 bc f7 ff ff       	call   c0003356 <dir_sdi>
c0003b9a:	85 c0                	test   eax,eax
c0003b9c:	89 c6                	mov    esi,eax
c0003b9e:	0f 85 90 00 00 00    	jne    c0003c34 <dir_register+0x17e>
c0003ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ba8:	e8 b2 e6 ff ff       	call   c000225f <sum_sfn>
c0003bad:	0f b6 c0             	movzx  eax,al
c0003bb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bb4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb7:	89 f8                	mov    eax,edi
c0003bb9:	e8 b6 e7 ff ff       	call   c0002374 <move_window>
c0003bbe:	85 c0                	test   eax,eax
c0003bc0:	89 c6                	mov    esi,eax
c0003bc2:	75 70                	jne    c0003c34 <dir_register+0x17e>
c0003bc4:	83 ec 0c             	sub    esp,0xc
c0003bc7:	89 e8                	mov    eax,ebp
c0003bc9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003bcc:	0f b6 c8             	movzx  ecx,al
c0003bcf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003bd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003bd6:	e8 27 e5 ff ff       	call   c0002102 <put_lfn>
c0003bdb:	31 d2                	xor    edx,edx
c0003bdd:	89 d8                	mov    eax,ebx
c0003bdf:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003be3:	e8 fe f9 ff ff       	call   c00035e6 <dir_next>
c0003be8:	83 c4 10             	add    esp,0x10
c0003beb:	85 c0                	test   eax,eax
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	75 43                	jne    c0003c34 <dir_register+0x17e>
c0003bf1:	4d                   	dec    ebp
c0003bf2:	75 c0                	jne    c0003bb4 <dir_register+0xfe>
c0003bf4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bf7:	89 f8                	mov    eax,edi
c0003bf9:	e8 76 e7 ff ff       	call   c0002374 <move_window>
c0003bfe:	85 c0                	test   eax,eax
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	75 30                	jne    c0003c34 <dir_register+0x17e>
c0003c04:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c07:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0c:	31 d2                	xor    edx,edx
c0003c0e:	e8 3d e2 ff ff       	call   c0001e50 <mem_set>
c0003c13:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0003c1b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003c1f:	e8 17 e2 ff ff       	call   c0001e3b <mem_cpy>
c0003c24:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003c27:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c2a:	83 e0 18             	and    eax,0x18
c0003c2d:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003c30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c34:	83 c4 2c             	add    esp,0x2c
c0003c37:	89 f0                	mov    eax,esi
c0003c39:	5b                   	pop    ebx
c0003c3a:	5e                   	pop    esi
c0003c3b:	5f                   	pop    edi
c0003c3c:	5d                   	pop    ebp
c0003c3d:	c3                   	ret    

c0003c3e <f_mount>:
c0003c3e:	53                   	push   ebx
c0003c3f:	83 ec 18             	sub    esp,0x18
c0003c42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c46:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c52:	e8 28 e6 ff ff       	call   c000227f <get_ldnumber>
c0003c57:	89 c2                	mov    edx,eax
c0003c59:	b8 0b 00 00 00       	mov    eax,0xb
c0003c5e:	85 d2                	test   edx,edx
c0003c60:	78 39                	js     c0003c9b <f_mount+0x5d>
c0003c62:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c69:	85 c0                	test   eax,eax
c0003c6b:	74 03                	je     c0003c70 <f_mount+0x32>
c0003c6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c74:	85 c0                	test   eax,eax
c0003c76:	74 03                	je     c0003c7b <f_mount+0x3d>
c0003c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c7f:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c86:	31 c0                	xor    eax,eax
c0003c88:	84 db                	test   bl,bl
c0003c8a:	74 0f                	je     c0003c9b <f_mount+0x5d>
c0003c8c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c90:	31 c9                	xor    ecx,ecx
c0003c92:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c96:	e8 36 e8 ff ff       	call   c00024d1 <mount_volume>
c0003c9b:	83 c4 18             	add    esp,0x18
c0003c9e:	5b                   	pop    ebx
c0003c9f:	c3                   	ret    

c0003ca0 <f_open>:
c0003ca0:	55                   	push   ebp
c0003ca1:	b8 09 00 00 00       	mov    eax,0x9
c0003ca6:	57                   	push   edi
c0003ca7:	56                   	push   esi
c0003ca8:	53                   	push   ebx
c0003ca9:	83 ec 5c             	sub    esp,0x5c
c0003cac:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003cb0:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003cb4:	85 db                	test   ebx,ebx
c0003cb6:	0f 84 9f 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003cbc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003cc0:	89 fd                	mov    ebp,edi
c0003cc2:	83 e5 3f             	and    ebp,0x3f
c0003cc5:	89 e8                	mov    eax,ebp
c0003cc7:	89 ee                	mov    esi,ebp
c0003cc9:	0f b6 c8             	movzx  ecx,al
c0003ccc:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003cd0:	e8 fc e7 ff ff       	call   c00024d1 <mount_volume>
c0003cd5:	85 c0                	test   eax,eax
c0003cd7:	0f 85 78 02 00 00    	jne    c0003f55 <f_open+0x2b5>
c0003cdd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ce1:	83 ec 0c             	sub    esp,0xc
c0003ce4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ce8:	68 00 02 00 00       	push   0x200
c0003ced:	e8 62 1f 00 00       	call   c0005c54 <ff_memalloc>
c0003cf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cf6:	83 c4 10             	add    esp,0x10
c0003cf9:	b8 11 00 00 00       	mov    eax,0x11
c0003cfe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003d03:	0f 84 52 02 00 00    	je     c0003f5b <f_open+0x2bb>
c0003d09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d11:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003d15:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003d18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d1c:	e8 f8 fc ff ff       	call   c0003a19 <follow_path>
c0003d21:	85 c0                	test   eax,eax
c0003d23:	75 0d                	jne    c0003d32 <f_open+0x92>
c0003d25:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003d2a:	ba 06 00 00 00       	mov    edx,0x6
c0003d2f:	0f 45 c2             	cmovne eax,edx
c0003d32:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003d38:	0f 84 d5 00 00 00    	je     c0003e13 <f_open+0x173>
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	74 21                	je     c0003d63 <f_open+0xc3>
c0003d42:	83 f8 04             	cmp    eax,0x4
c0003d45:	0f 85 ef 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d4b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d4f:	e8 62 fd ff ff       	call   c0003ab6 <dir_register>
c0003d54:	85 c0                	test   eax,eax
c0003d56:	0f 85 de 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d5c:	83 cd 08             	or     ebp,0x8
c0003d5f:	89 ee                	mov    esi,ebp
c0003d61:	eb 2c                	jmp    c0003d8f <f_open+0xef>
c0003d63:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d67:	b8 07 00 00 00       	mov    eax,0x7
c0003d6c:	80 e2 11             	and    dl,0x11
c0003d6f:	0f 85 c5 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d75:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d7b:	b8 08 00 00 00       	mov    eax,0x8
c0003d80:	0f 85 b4 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003d86:	83 e7 08             	and    edi,0x8
c0003d89:	0f 84 b1 00 00 00    	je     c0003e40 <f_open+0x1a0>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d97:	8a 00                	mov    al,BYTE PTR [eax]
c0003d99:	89 ea                	mov    edx,ebp
c0003d9b:	e8 60 f4 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003da0:	ba 00 00 21 50       	mov    edx,0x50210000
c0003da5:	89 c7                	mov    edi,eax
c0003da7:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003daa:	e8 89 e0 ff ff       	call   c0001e38 <st_dword>
c0003daf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003db3:	31 c9                	xor    ecx,ecx
c0003db5:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003dc1:	e8 63 f4 ff ff       	call   c0003229 <st_clust.isra.1>
c0003dc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003dca:	31 d2                	xor    edx,edx
c0003dcc:	83 c0 1c             	add    eax,0x1c
c0003dcf:	e8 64 e0 ff ff       	call   c0001e38 <st_dword>
c0003dd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dd8:	85 ff                	test   edi,edi
c0003dda:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003dde:	74 60                	je     c0003e40 <f_open+0x1a0>
c0003de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de4:	31 c9                	xor    ecx,ecx
c0003de6:	89 fa                	mov    edx,edi
c0003de8:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003deb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003def:	e8 64 f7 ff ff       	call   c0003558 <remove_chain>
c0003df4:	85 c0                	test   eax,eax
c0003df6:	0f 85 3e 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e00:	89 ea                	mov    edx,ebp
c0003e02:	4f                   	dec    edi
c0003e03:	e8 6c e5 ff ff       	call   c0002374 <move_window>
c0003e08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003e0c:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003e0f:	85 c0                	test   eax,eax
c0003e11:	eb 27                	jmp    c0003e3a <f_open+0x19a>
c0003e13:	85 c0                	test   eax,eax
c0003e15:	0f 85 1f 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e1f:	b8 04 00 00 00       	mov    eax,0x4
c0003e24:	f6 c2 10             	test   dl,0x10
c0003e27:	0f 85 0d 01 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e2d:	83 e7 02             	and    edi,0x2
c0003e30:	74 0e                	je     c0003e40 <f_open+0x1a0>
c0003e32:	b8 07 00 00 00       	mov    eax,0x7
c0003e37:	80 e2 01             	and    dl,0x1
c0003e3a:	0f 85 fa 00 00 00    	jne    c0003f3a <f_open+0x29a>
c0003e40:	f7 c6 08 00 00 00    	test   esi,0x8
c0003e46:	74 03                	je     c0003e4b <f_open+0x1ab>
c0003e48:	83 ce 40             	or     esi,0x40
c0003e4b:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e4f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e53:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e56:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e59:	89 fa                	mov    edx,edi
c0003e5b:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e5e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e61:	e8 9a f3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0003e66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e69:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e6c:	e8 ab df ff ff       	call   c0001e1c <ld_dword>
c0003e71:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e74:	31 d2                	xor    edx,edx
c0003e76:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e78:	b9 00 02 00 00       	mov    ecx,0x200
c0003e7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e80:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e84:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e88:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e8f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e96:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e9a:	89 f0                	mov    eax,esi
c0003e9c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e9f:	89 f8                	mov    eax,edi
c0003ea1:	e8 aa df ff ff       	call   c0001e50 <mem_set>
c0003ea6:	83 e6 20             	and    esi,0x20
c0003ea9:	75 07                	jne    c0003eb2 <f_open+0x212>
c0003eab:	31 c0                	xor    eax,eax
c0003ead:	e9 88 00 00 00       	jmp    c0003f3a <f_open+0x29a>
c0003eb2:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003eb5:	85 f6                	test   esi,esi
c0003eb7:	74 f2                	je     c0003eab <f_open+0x20b>
c0003eb9:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003ec3:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003ec7:	31 c0                	xor    eax,eax
c0003ec9:	c1 e5 09             	shl    ebp,0x9
c0003ecc:	85 c0                	test   eax,eax
c0003ece:	75 23                	jne    c0003ef3 <f_open+0x253>
c0003ed0:	39 ee                	cmp    esi,ebp
c0003ed2:	76 1f                	jbe    c0003ef3 <f_open+0x253>
c0003ed4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ed6:	e8 76 f3 ff ff       	call   c0003251 <get_fat.isra.2>
c0003edb:	89 c2                	mov    edx,eax
c0003edd:	b8 02 00 00 00       	mov    eax,0x2
c0003ee2:	83 fa 01             	cmp    edx,0x1
c0003ee5:	76 08                	jbe    c0003eef <f_open+0x24f>
c0003ee7:	31 c0                	xor    eax,eax
c0003ee9:	83 fa ff             	cmp    edx,0xffffffff
c0003eec:	0f 94 c0             	sete   al
c0003eef:	29 ee                	sub    esi,ebp
c0003ef1:	eb d9                	jmp    c0003ecc <f_open+0x22c>
c0003ef3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	75 40                	jne    c0003f3a <f_open+0x29a>
c0003efa:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0003f00:	74 a9                	je     c0003eab <f_open+0x20b>
c0003f02:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f06:	89 e8                	mov    eax,ebp
c0003f08:	e8 58 e1 ff ff       	call   c0002065 <clst2sect>
c0003f0d:	89 c2                	mov    edx,eax
c0003f0f:	b8 02 00 00 00       	mov    eax,0x2
c0003f14:	85 d2                	test   edx,edx
c0003f16:	74 22                	je     c0003f3a <f_open+0x29a>
c0003f18:	c1 ee 09             	shr    esi,0x9
c0003f1b:	8d 04 16             	lea    eax,[esi+edx*1]
c0003f1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f21:	6a 01                	push   0x1
c0003f23:	50                   	push   eax
c0003f24:	57                   	push   edi
c0003f25:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0003f29:	50                   	push   eax
c0003f2a:	e8 95 de ff ff       	call   c0001dc4 <disk_read>
c0003f2f:	83 c4 10             	add    esp,0x10
c0003f32:	85 c0                	test   eax,eax
c0003f34:	0f 95 c0             	setne  al
c0003f37:	0f b6 c0             	movzx  eax,al
c0003f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003f3e:	83 ec 0c             	sub    esp,0xc
c0003f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003f45:	e8 22 1d 00 00       	call   c0005c6c <ff_memfree>
c0003f4a:	83 c4 10             	add    esp,0x10
c0003f4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f51:	85 c0                	test   eax,eax
c0003f53:	74 06                	je     c0003f5b <f_open+0x2bb>
c0003f55:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f5b:	83 c4 5c             	add    esp,0x5c
c0003f5e:	5b                   	pop    ebx
c0003f5f:	5e                   	pop    esi
c0003f60:	5f                   	pop    edi
c0003f61:	5d                   	pop    ebp
c0003f62:	c3                   	ret    

c0003f63 <f_read>:
c0003f63:	55                   	push   ebp
c0003f64:	57                   	push   edi
c0003f65:	56                   	push   esi
c0003f66:	53                   	push   ebx
c0003f67:	83 ec 2c             	sub    esp,0x2c
c0003f6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f6e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f72:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f76:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0003f7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f80:	89 d8                	mov    eax,ebx
c0003f82:	e8 44 e3 ff ff       	call   c00022cb <validate>
c0003f87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f8b:	85 c0                	test   eax,eax
c0003f8d:	0f 85 a5 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003f93:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c0003f97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f9b:	85 c0                	test   eax,eax
c0003f9d:	0f 85 95 01 00 00    	jne    c0004138 <f_read+0x1d5>
c0003fa3:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003fa7:	0f 84 83 01 00 00    	je     c0004130 <f_read+0x1cd>
c0003fad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003fb0:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003fb3:	39 f8                	cmp    eax,edi
c0003fb5:	0f 46 f8             	cmovbe edi,eax
c0003fb8:	85 ff                	test   edi,edi
c0003fba:	0f 84 78 01 00 00    	je     c0004138 <f_read+0x1d5>
c0003fc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc3:	a9 ff 01 00 00       	test   eax,0x1ff
c0003fc8:	0f 85 2b 01 00 00    	jne    c00040f9 <f_read+0x196>
c0003fce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fd2:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c0003fd6:	89 c2                	mov    edx,eax
c0003fd8:	c1 ea 09             	shr    edx,0x9
c0003fdb:	4d                   	dec    ebp
c0003fdc:	21 d5                	and    ebp,edx
c0003fde:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0003fe2:	75 42                	jne    c0004026 <f_read+0xc3>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	75 05                	jne    c0003fed <f_read+0x8a>
c0003fe8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003feb:	eb 0a                	jmp    c0003ff7 <f_read+0x94>
c0003fed:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ff0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ff2:	e8 5a f2 ff ff       	call   c0003251 <get_fat.isra.2>
c0003ff7:	83 f8 01             	cmp    eax,0x1
c0003ffa:	77 11                	ja     c000400d <f_read+0xaa>
c0003ffc:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004000:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004008:	e9 2b 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c000400d:	83 f8 ff             	cmp    eax,0xffffffff
c0004010:	75 11                	jne    c0004023 <f_read+0xc0>
c0004012:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004016:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000401e:	e9 15 01 00 00       	jmp    c0004138 <f_read+0x1d5>
c0004023:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004026:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000402a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000402d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004031:	89 c8                	mov    eax,ecx
c0004033:	e8 2d e0 ff ff       	call   c0002065 <clst2sect>
c0004038:	85 c0                	test   eax,eax
c000403a:	74 c0                	je     c0003ffc <f_read+0x99>
c000403c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004040:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0004046:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000404d:	76 58                	jbe    c00040a7 <f_read+0x144>
c000404f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004053:	89 fe                	mov    esi,edi
c0004055:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004059:	c1 ee 09             	shr    esi,0x9
c000405c:	01 f2                	add    edx,esi
c000405e:	39 c2                	cmp    edx,eax
c0004060:	76 06                	jbe    c0004068 <f_read+0x105>
c0004062:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004066:	89 c6                	mov    esi,eax
c0004068:	56                   	push   esi
c0004069:	55                   	push   ebp
c000406a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000406e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004072:	50                   	push   eax
c0004073:	e8 4c dd ff ff       	call   c0001dc4 <disk_read>
c0004078:	83 c4 10             	add    esp,0x10
c000407b:	85 c0                	test   eax,eax
c000407d:	75 93                	jne    c0004012 <f_read+0xaf>
c000407f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004083:	74 1d                	je     c00040a2 <f_read+0x13f>
c0004085:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004088:	29 e8                	sub    eax,ebp
c000408a:	39 f0                	cmp    eax,esi
c000408c:	73 14                	jae    c00040a2 <f_read+0x13f>
c000408e:	c1 e0 09             	shl    eax,0x9
c0004091:	b9 00 02 00 00       	mov    ecx,0x200
c0004096:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000409a:	8d 53 28             	lea    edx,[ebx+0x28]
c000409d:	e8 99 dd ff ff       	call   c0001e3b <mem_cpy>
c00040a2:	c1 e6 09             	shl    esi,0x9
c00040a5:	eb 75                	jmp    c000411c <f_read+0x1b9>
c00040a7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00040aa:	39 e8                	cmp    eax,ebp
c00040ac:	74 48                	je     c00040f6 <f_read+0x193>
c00040ae:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040b2:	8d 73 28             	lea    esi,[ebx+0x28]
c00040b5:	74 22                	je     c00040d9 <f_read+0x176>
c00040b7:	6a 01                	push   0x1
c00040b9:	50                   	push   eax
c00040ba:	56                   	push   esi
c00040bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bf:	50                   	push   eax
c00040c0:	e8 15 dd ff ff       	call   c0001dda <disk_write>
c00040c5:	83 c4 10             	add    esp,0x10
c00040c8:	85 c0                	test   eax,eax
c00040ca:	0f 85 42 ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040d0:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040d3:	83 e0 7f             	and    eax,0x7f
c00040d6:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040d9:	6a 01                	push   0x1
c00040db:	55                   	push   ebp
c00040dc:	56                   	push   esi
c00040dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040e1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040e5:	50                   	push   eax
c00040e6:	e8 d9 dc ff ff       	call   c0001dc4 <disk_read>
c00040eb:	83 c4 10             	add    esp,0x10
c00040ee:	85 c0                	test   eax,eax
c00040f0:	0f 85 1c ff ff ff    	jne    c0004012 <f_read+0xaf>
c00040f6:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00040f9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040fc:	be 00 02 00 00       	mov    esi,0x200
c0004101:	25 ff 01 00 00       	and    eax,0x1ff
c0004106:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c000410a:	29 c6                	sub    esi,eax
c000410c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004110:	39 f7                	cmp    edi,esi
c0004112:	0f 46 f7             	cmovbe esi,edi
c0004115:	89 f1                	mov    ecx,esi
c0004117:	e8 1f dd ff ff       	call   c0001e3b <mem_cpy>
c000411c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004120:	29 f7                	sub    edi,esi
c0004122:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004126:	01 30                	add    DWORD PTR [eax],esi
c0004128:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000412b:	e9 88 fe ff ff       	jmp    c0003fb8 <f_read+0x55>
c0004130:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000413c:	83 c4 2c             	add    esp,0x2c
c000413f:	5b                   	pop    ebx
c0004140:	5e                   	pop    esi
c0004141:	5f                   	pop    edi
c0004142:	5d                   	pop    ebp
c0004143:	c3                   	ret    

c0004144 <f_write>:
c0004144:	55                   	push   ebp
c0004145:	57                   	push   edi
c0004146:	56                   	push   esi
c0004147:	53                   	push   ebx
c0004148:	83 ec 2c             	sub    esp,0x2c
c000414b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000414f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004153:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004157:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 67 e1 ff ff       	call   c00022cb <validate>
c0004164:	85 c0                	test   eax,eax
c0004166:	89 c7                	mov    edi,eax
c0004168:	0f 85 13 02 00 00    	jne    c0004381 <f_write+0x23d>
c000416e:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c0004172:	85 ff                	test   edi,edi
c0004174:	0f 85 07 02 00 00    	jne    c0004381 <f_write+0x23d>
c000417a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000417e:	0f 84 f8 01 00 00    	je     c000437c <f_write+0x238>
c0004184:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004187:	89 c1                	mov    ecx,eax
c0004189:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000418d:	0f 83 ed 00 00 00    	jae    c0004280 <f_write+0x13c>
c0004193:	f7 d0                	not    eax
c0004195:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004199:	e9 e2 00 00 00       	jmp    c0004280 <f_write+0x13c>
c000419e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041a1:	a9 ff 01 00 00       	test   eax,0x1ff
c00041a6:	0f 85 9b 01 00 00    	jne    c0004347 <f_write+0x203>
c00041ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00041b0:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00041b4:	89 c2                	mov    edx,eax
c00041b6:	c1 ea 09             	shr    edx,0x9
c00041b9:	4d                   	dec    ebp
c00041ba:	21 d5                	and    ebp,edx
c00041bc:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00041c0:	0f 84 c7 00 00 00    	je     c000428d <f_write+0x149>
c00041c6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ca:	0f 85 23 01 00 00    	jne    c00042f3 <f_write+0x1af>
c00041d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041d4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041d7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041db:	89 c8                	mov    eax,ecx
c00041dd:	e8 83 de ff ff       	call   c0002065 <clst2sect>
c00041e2:	85 c0                	test   eax,eax
c00041e4:	0f 84 d3 00 00 00    	je     c00042bd <f_write+0x179>
c00041ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ee:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041f6:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00041f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041fd:	0f 86 1c 01 00 00    	jbe    c000431f <f_write+0x1db>
c0004203:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000420f:	c1 ee 09             	shr    esi,0x9
c0004212:	01 f2                	add    edx,esi
c0004214:	39 c2                	cmp    edx,eax
c0004216:	76 06                	jbe    c000421e <f_write+0xda>
c0004218:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421c:	89 c6                	mov    esi,eax
c000421e:	56                   	push   esi
c000421f:	55                   	push   ebp
c0004220:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004224:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004228:	50                   	push   eax
c0004229:	e8 ac db ff ff       	call   c0001dda <disk_write>
c000422e:	83 c4 10             	add    esp,0x10
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 97 00 00 00    	jne    c00042d0 <f_write+0x18c>
c0004239:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000423c:	29 ea                	sub    edx,ebp
c000423e:	39 f2                	cmp    edx,esi
c0004240:	73 1d                	jae    c000425f <f_write+0x11b>
c0004242:	c1 e2 09             	shl    edx,0x9
c0004245:	b9 00 02 00 00       	mov    ecx,0x200
c000424a:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000424e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004251:	e8 e5 db ff ff       	call   c0001e3b <mem_cpy>
c0004256:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004259:	83 e0 7f             	and    eax,0x7f
c000425c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000425f:	c1 e6 09             	shl    esi,0x9
c0004262:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004266:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000426a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000426e:	01 30                	add    DWORD PTR [eax],esi
c0004270:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004273:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0004276:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004279:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c000427d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004280:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004285:	0f 85 13 ff ff ff    	jne    c000419e <f_write+0x5a>
c000428b:	eb 1d                	jmp    c00042aa <f_write+0x166>
c000428d:	85 c0                	test   eax,eax
c000428f:	75 0b                	jne    c000429c <f_write+0x158>
c0004291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004294:	31 d2                	xor    edx,edx
c0004296:	85 c0                	test   eax,eax
c0004298:	75 1e                	jne    c00042b8 <f_write+0x174>
c000429a:	eb 03                	jmp    c000429f <f_write+0x15b>
c000429c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000429f:	89 d8                	mov    eax,ebx
c00042a1:	e8 78 f1 ff ff       	call   c000341e <create_chain>
c00042a6:	85 c0                	test   eax,eax
c00042a8:	75 0e                	jne    c00042b8 <f_write+0x174>
c00042aa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ad:	83 c8 40             	or     eax,0x40
c00042b0:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042b3:	e9 c9 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042b8:	83 f8 01             	cmp    eax,0x1
c00042bb:	75 0e                	jne    c00042cb <f_write+0x187>
c00042bd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00042c1:	bf 02 00 00 00       	mov    edi,0x2
c00042c6:	e9 b6 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042cb:	83 f8 ff             	cmp    eax,0xffffffff
c00042ce:	75 0e                	jne    c00042de <f_write+0x19a>
c00042d0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042d4:	bf 01 00 00 00       	mov    edi,0x1
c00042d9:	e9 a3 00 00 00       	jmp    c0004381 <f_write+0x23d>
c00042de:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042e2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042e5:	0f 85 db fe ff ff    	jne    c00041c6 <f_write+0x82>
c00042eb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042ee:	e9 d3 fe ff ff       	jmp    c00041c6 <f_write+0x82>
c00042f3:	6a 01                	push   0x1
c00042f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00042fb:	50                   	push   eax
c00042fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004300:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004304:	50                   	push   eax
c0004305:	e8 d0 da ff ff       	call   c0001dda <disk_write>
c000430a:	83 c4 10             	add    esp,0x10
c000430d:	85 c0                	test   eax,eax
c000430f:	75 bf                	jne    c00042d0 <f_write+0x18c>
c0004311:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004314:	83 e0 7f             	and    eax,0x7f
c0004317:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000431a:	e9 b1 fe ff ff       	jmp    c00041d0 <f_write+0x8c>
c000431f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0004322:	74 20                	je     c0004344 <f_write+0x200>
c0004324:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004327:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c000432a:	76 18                	jbe    c0004344 <f_write+0x200>
c000432c:	6a 01                	push   0x1
c000432e:	55                   	push   ebp
c000432f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004332:	50                   	push   eax
c0004333:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004337:	50                   	push   eax
c0004338:	e8 87 da ff ff       	call   c0001dc4 <disk_read>
c000433d:	83 c4 10             	add    esp,0x10
c0004340:	85 c0                	test   eax,eax
c0004342:	75 8c                	jne    c00042d0 <f_write+0x18c>
c0004344:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004347:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000434a:	be 00 02 00 00       	mov    esi,0x200
c000434f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004353:	25 ff 01 00 00       	and    eax,0x1ff
c0004358:	29 c6                	sub    esi,eax
c000435a:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c000435e:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004362:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c0004367:	89 f1                	mov    ecx,esi
c0004369:	e8 cd da ff ff       	call   c0001e3b <mem_cpy>
c000436e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004371:	83 c8 80             	or     eax,0xffffff80
c0004374:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004377:	e9 e6 fe ff ff       	jmp    c0004262 <f_write+0x11e>
c000437c:	bf 07 00 00 00       	mov    edi,0x7
c0004381:	83 c4 2c             	add    esp,0x2c
c0004384:	89 f8                	mov    eax,edi
c0004386:	5b                   	pop    ebx
c0004387:	5e                   	pop    esi
c0004388:	5f                   	pop    edi
c0004389:	5d                   	pop    ebp
c000438a:	c3                   	ret    

c000438b <f_sync>:
c000438b:	56                   	push   esi
c000438c:	53                   	push   ebx
c000438d:	83 ec 14             	sub    esp,0x14
c0004390:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004394:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004398:	89 d8                	mov    eax,ebx
c000439a:	e8 2c df ff ff       	call   c00022cb <validate>
c000439f:	85 c0                	test   eax,eax
c00043a1:	0f 85 a3 00 00 00    	jne    c000444a <f_sync+0xbf>
c00043a7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00043aa:	f6 c2 40             	test   dl,0x40
c00043ad:	0f 84 97 00 00 00    	je     c000444a <f_sync+0xbf>
c00043b3:	80 e2 80             	and    dl,0x80
c00043b6:	74 2e                	je     c00043e6 <f_sync+0x5b>
c00043b8:	6a 01                	push   0x1
c00043ba:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043bd:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c0:	50                   	push   eax
c00043c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043c9:	50                   	push   eax
c00043ca:	e8 0b da ff ff       	call   c0001dda <disk_write>
c00043cf:	83 c4 10             	add    esp,0x10
c00043d2:	89 c2                	mov    edx,eax
c00043d4:	b8 01 00 00 00       	mov    eax,0x1
c00043d9:	85 d2                	test   edx,edx
c00043db:	75 6d                	jne    c000444a <f_sync+0xbf>
c00043dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e0:	83 e0 7f             	and    eax,0x7f
c00043e3:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043e6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043ed:	e8 82 df ff ff       	call   c0002374 <move_window>
c00043f2:	85 c0                	test   eax,eax
c00043f4:	75 54                	jne    c000444a <f_sync+0xbf>
c00043f6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043f9:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043fc:	89 f2                	mov    edx,esi
c00043fe:	83 c8 20             	or     eax,0x20
c0004401:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0004404:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0004407:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004409:	e8 1b ee ff ff       	call   c0003229 <st_clust.isra.1>
c000440e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004411:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004414:	e8 1f da ff ff       	call   c0001e38 <st_dword>
c0004419:	8d 46 16             	lea    eax,[esi+0x16]
c000441c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004421:	e8 12 da ff ff       	call   c0001e38 <st_dword>
c0004426:	8d 46 12             	lea    eax,[esi+0x12]
c0004429:	31 d2                	xor    edx,edx
c000442b:	e8 04 da ff ff       	call   c0001e34 <st_word>
c0004430:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004434:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000443c:	e8 68 e9 ff ff       	call   c0002da9 <sync_fs>
c0004441:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004444:	83 e2 bf             	and    edx,0xffffffbf
c0004447:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000444a:	83 c4 14             	add    esp,0x14
c000444d:	5b                   	pop    ebx
c000444e:	5e                   	pop    esi
c000444f:	c3                   	ret    

c0004450 <f_close>:
c0004450:	53                   	push   ebx
c0004451:	83 ec 24             	sub    esp,0x24
c0004454:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004458:	53                   	push   ebx
c0004459:	e8 2d ff ff ff       	call   c000438b <f_sync>
c000445e:	83 c4 10             	add    esp,0x10
c0004461:	85 c0                	test   eax,eax
c0004463:	75 15                	jne    c000447a <f_close+0x2a>
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 5b de ff ff       	call   c00022cb <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	75 06                	jne    c000447a <f_close+0x2a>
c0004474:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000447a:	83 c4 18             	add    esp,0x18
c000447d:	5b                   	pop    ebx
c000447e:	c3                   	ret    

c000447f <f_lseek>:
c000447f:	55                   	push   ebp
c0004480:	57                   	push   edi
c0004481:	56                   	push   esi
c0004482:	53                   	push   ebx
c0004483:	83 ec 2c             	sub    esp,0x2c
c0004486:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000448a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000448e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004492:	89 d8                	mov    eax,ebx
c0004494:	e8 32 de ff ff       	call   c00022cb <validate>
c0004499:	85 c0                	test   eax,eax
c000449b:	89 c5                	mov    ebp,eax
c000449d:	0f 85 82 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044a3:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00044a7:	85 ed                	test   ebp,ebp
c00044a9:	0f 85 76 01 00 00    	jne    c0004625 <f_lseek+0x1a6>
c00044af:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00044b2:	39 f0                	cmp    eax,esi
c00044b4:	73 07                	jae    c00044bd <f_lseek+0x3e>
c00044b6:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00044ba:	0f 44 f0             	cmove  esi,eax
c00044bd:	85 f6                	test   esi,esi
c00044bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00044c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044c9:	75 07                	jne    c00044d2 <f_lseek+0x53>
c00044cb:	31 f6                	xor    esi,esi
c00044cd:	e9 e2 00 00 00       	jmp    c00045b4 <f_lseek+0x135>
c00044d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d6:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044da:	c1 e7 09             	shl    edi,0x9
c00044dd:	85 c9                	test   ecx,ecx
c00044df:	74 28                	je     c0004509 <f_lseek+0x8a>
c00044e1:	31 d2                	xor    edx,edx
c00044e3:	49                   	dec    ecx
c00044e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00044e7:	f7 f7                	div    edi
c00044e9:	31 d2                	xor    edx,edx
c00044eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044ef:	89 c8                	mov    eax,ecx
c00044f1:	f7 f7                	div    edi
c00044f3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044f7:	72 10                	jb     c0004509 <f_lseek+0x8a>
c00044f9:	89 f8                	mov    eax,edi
c00044fb:	f7 d8                	neg    eax
c00044fd:	21 c1                	and    ecx,eax
c00044ff:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004502:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004505:	29 ce                	sub    esi,ecx
c0004507:	eb 3c                	jmp    c0004545 <f_lseek+0xc6>
c0004509:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000450c:	85 c0                	test   eax,eax
c000450e:	75 32                	jne    c0004542 <f_lseek+0xc3>
c0004510:	31 d2                	xor    edx,edx
c0004512:	89 d8                	mov    eax,ebx
c0004514:	e8 05 ef ff ff       	call   c000341e <create_chain>
c0004519:	83 f8 01             	cmp    eax,0x1
c000451c:	75 0e                	jne    c000452c <f_lseek+0xad>
c000451e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004522:	bd 02 00 00 00       	mov    ebp,0x2
c0004527:	e9 f9 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000452c:	83 f8 ff             	cmp    eax,0xffffffff
c000452f:	75 0e                	jne    c000453f <f_lseek+0xc0>
c0004531:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004535:	bd 01 00 00 00       	mov    ebp,0x1
c000453a:	e9 e6 00 00 00       	jmp    c0004625 <f_lseek+0x1a6>
c000453f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004542:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004545:	85 c0                	test   eax,eax
c0004547:	74 82                	je     c00044cb <f_lseek+0x4c>
c0004549:	39 fe                	cmp    esi,edi
c000454b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000454e:	76 3d                	jbe    c000458d <f_lseek+0x10e>
c0004550:	01 fa                	add    edx,edi
c0004552:	29 fe                	sub    esi,edi
c0004554:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004558:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000455b:	89 c2                	mov    edx,eax
c000455d:	74 0d                	je     c000456c <f_lseek+0xed>
c000455f:	89 d8                	mov    eax,ebx
c0004561:	e8 b8 ee ff ff       	call   c000341e <create_chain>
c0004566:	85 c0                	test   eax,eax
c0004568:	75 09                	jne    c0004573 <f_lseek+0xf4>
c000456a:	eb 1f                	jmp    c000458b <f_lseek+0x10c>
c000456c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000456e:	e8 de ec ff ff       	call   c0003251 <get_fat.isra.2>
c0004573:	83 f8 ff             	cmp    eax,0xffffffff
c0004576:	74 b9                	je     c0004531 <f_lseek+0xb2>
c0004578:	83 f8 01             	cmp    eax,0x1
c000457b:	76 a1                	jbe    c000451e <f_lseek+0x9f>
c000457d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004581:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004584:	76 98                	jbe    c000451e <f_lseek+0x9f>
c0004586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004589:	eb be                	jmp    c0004549 <f_lseek+0xca>
c000458b:	31 f6                	xor    esi,esi
c000458d:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004590:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004596:	0f 84 2f ff ff ff    	je     c00044cb <f_lseek+0x4c>
c000459c:	89 c2                	mov    edx,eax
c000459e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a2:	e8 be da ff ff       	call   c0002065 <clst2sect>
c00045a7:	85 c0                	test   eax,eax
c00045a9:	0f 84 6f ff ff ff    	je     c000451e <f_lseek+0x9f>
c00045af:	c1 ee 09             	shr    esi,0x9
c00045b2:	01 c6                	add    esi,eax
c00045b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00045b7:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00045ba:	76 0c                	jbe    c00045c8 <f_lseek+0x149>
c00045bc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00045bf:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045c2:	83 ca 40             	or     edx,0x40
c00045c5:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045c8:	a9 ff 01 00 00       	test   eax,0x1ff
c00045cd:	74 56                	je     c0004625 <f_lseek+0x1a6>
c00045cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045d2:	39 f0                	cmp    eax,esi
c00045d4:	74 4f                	je     c0004625 <f_lseek+0x1a6>
c00045d6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045da:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045dd:	74 26                	je     c0004605 <f_lseek+0x186>
c00045df:	6a 01                	push   0x1
c00045e1:	50                   	push   eax
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 e9 d7 ff ff       	call   c0001dda <disk_write>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 35 ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c00045fc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045ff:	83 e0 7f             	and    eax,0x7f
c0004602:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004605:	6a 01                	push   0x1
c0004607:	56                   	push   esi
c0004608:	57                   	push   edi
c0004609:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000460d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004611:	50                   	push   eax
c0004612:	e8 ad d7 ff ff       	call   c0001dc4 <disk_read>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	85 c0                	test   eax,eax
c000461c:	0f 85 0f ff ff ff    	jne    c0004531 <f_lseek+0xb2>
c0004622:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0004625:	83 c4 2c             	add    esp,0x2c
c0004628:	89 e8                	mov    eax,ebp
c000462a:	5b                   	pop    ebx
c000462b:	5e                   	pop    esi
c000462c:	5f                   	pop    edi
c000462d:	5d                   	pop    ebp
c000462e:	c3                   	ret    

c000462f <f_opendir>:
c000462f:	56                   	push   esi
c0004630:	b8 09 00 00 00       	mov    eax,0x9
c0004635:	53                   	push   ebx
c0004636:	83 ec 24             	sub    esp,0x24
c0004639:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000463d:	85 db                	test   ebx,ebx
c000463f:	0f 84 af 00 00 00    	je     c00046f4 <f_opendir+0xc5>
c0004645:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004649:	31 c9                	xor    ecx,ecx
c000464b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000464f:	e8 7d de ff ff       	call   c00024d1 <mount_volume>
c0004654:	85 c0                	test   eax,eax
c0004656:	0f 85 92 00 00 00    	jne    c00046ee <f_opendir+0xbf>
c000465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004660:	83 ec 0c             	sub    esp,0xc
c0004663:	89 03                	mov    DWORD PTR [ebx],eax
c0004665:	68 00 02 00 00       	push   0x200
c000466a:	e8 e5 15 00 00       	call   c0005c54 <ff_memalloc>
c000466f:	83 c4 10             	add    esp,0x10
c0004672:	89 c6                	mov    esi,eax
c0004674:	b8 11 00 00 00       	mov    eax,0x11
c0004679:	85 f6                	test   esi,esi
c000467b:	74 77                	je     c00046f4 <f_opendir+0xc5>
c000467d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004681:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004685:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004688:	89 d8                	mov    eax,ebx
c000468a:	e8 8a f3 ff ff       	call   c0003a19 <follow_path>
c000468f:	85 c0                	test   eax,eax
c0004691:	75 37                	jne    c00046ca <f_opendir+0x9b>
c0004693:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004697:	75 1c                	jne    c00046b5 <f_opendir+0x86>
c0004699:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000469d:	b8 05 00 00 00       	mov    eax,0x5
c00046a2:	74 26                	je     c00046ca <f_opendir+0x9b>
c00046a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00046ab:	8a 00                	mov    al,BYTE PTR [eax]
c00046ad:	e8 4e eb ff ff       	call   c0003200 <ld_clust.isra.0>
c00046b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046b9:	31 d2                	xor    edx,edx
c00046bb:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00046bf:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00046c3:	89 d8                	mov    eax,ebx
c00046c5:	e8 8c ec ff ff       	call   c0003356 <dir_sdi>
c00046ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046ce:	83 ec 0c             	sub    esp,0xc
c00046d1:	56                   	push   esi
c00046d2:	e8 95 15 00 00       	call   c0005c6c <ff_memfree>
c00046d7:	83 c4 10             	add    esp,0x10
c00046da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046de:	83 f8 04             	cmp    eax,0x4
c00046e1:	74 06                	je     c00046e9 <f_opendir+0xba>
c00046e3:	85 c0                	test   eax,eax
c00046e5:	74 0d                	je     c00046f4 <f_opendir+0xc5>
c00046e7:	eb 05                	jmp    c00046ee <f_opendir+0xbf>
c00046e9:	b8 05 00 00 00       	mov    eax,0x5
c00046ee:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f4:	83 c4 24             	add    esp,0x24
c00046f7:	5b                   	pop    ebx
c00046f8:	5e                   	pop    esi
c00046f9:	c3                   	ret    

c00046fa <f_closedir>:
c00046fa:	53                   	push   ebx
c00046fb:	83 ec 18             	sub    esp,0x18
c00046fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004702:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004706:	89 d8                	mov    eax,ebx
c0004708:	e8 be db ff ff       	call   c00022cb <validate>
c000470d:	85 c0                	test   eax,eax
c000470f:	75 06                	jne    c0004717 <f_closedir+0x1d>
c0004711:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004717:	83 c4 18             	add    esp,0x18
c000471a:	5b                   	pop    ebx
c000471b:	c3                   	ret    

c000471c <f_readdir>:
c000471c:	57                   	push   edi
c000471d:	56                   	push   esi
c000471e:	53                   	push   ebx
c000471f:	83 ec 20             	sub    esp,0x20
c0004722:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004726:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000472a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000472e:	89 d8                	mov    eax,ebx
c0004730:	e8 96 db ff ff       	call   c00022cb <validate>
c0004735:	85 c0                	test   eax,eax
c0004737:	75 6e                	jne    c00047a7 <f_readdir+0x8b>
c0004739:	85 ff                	test   edi,edi
c000473b:	75 0b                	jne    c0004748 <f_readdir+0x2c>
c000473d:	31 d2                	xor    edx,edx
c000473f:	89 d8                	mov    eax,ebx
c0004741:	e8 10 ec ff ff       	call   c0003356 <dir_sdi>
c0004746:	eb 5f                	jmp    c00047a7 <f_readdir+0x8b>
c0004748:	83 ec 0c             	sub    esp,0xc
c000474b:	68 00 02 00 00       	push   0x200
c0004750:	e8 ff 14 00 00       	call   c0005c54 <ff_memalloc>
c0004755:	83 c4 10             	add    esp,0x10
c0004758:	89 c6                	mov    esi,eax
c000475a:	b8 11 00 00 00       	mov    eax,0x11
c000475f:	85 f6                	test   esi,esi
c0004761:	74 44                	je     c00047a7 <f_readdir+0x8b>
c0004763:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004767:	31 d2                	xor    edx,edx
c0004769:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000476c:	89 d8                	mov    eax,ebx
c000476e:	e8 dd ef ff ff       	call   c0003750 <dir_read>
c0004773:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004778:	75 19                	jne    c0004793 <f_readdir+0x77>
c000477a:	89 fa                	mov    edx,edi
c000477c:	89 d8                	mov    eax,ebx
c000477e:	e8 7c e8 ff ff       	call   c0002fff <get_fileinfo>
c0004783:	31 d2                	xor    edx,edx
c0004785:	89 d8                	mov    eax,ebx
c0004787:	e8 5a ee ff ff       	call   c00035e6 <dir_next>
c000478c:	83 f8 04             	cmp    eax,0x4
c000478f:	75 02                	jne    c0004793 <f_readdir+0x77>
c0004791:	31 c0                	xor    eax,eax
c0004793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004797:	83 ec 0c             	sub    esp,0xc
c000479a:	56                   	push   esi
c000479b:	e8 cc 14 00 00       	call   c0005c6c <ff_memfree>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047a7:	83 c4 20             	add    esp,0x20
c00047aa:	5b                   	pop    ebx
c00047ab:	5e                   	pop    esi
c00047ac:	5f                   	pop    edi
c00047ad:	c3                   	ret    

c00047ae <f_stat>:
c00047ae:	57                   	push   edi
c00047af:	31 c9                	xor    ecx,ecx
c00047b1:	56                   	push   esi
c00047b2:	53                   	push   ebx
c00047b3:	83 ec 30             	sub    esp,0x30
c00047b6:	8d 44 24 40          	lea    eax,[esp+0x40]
c00047ba:	89 e2                	mov    edx,esp
c00047bc:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00047c0:	e8 0c dd ff ff       	call   c00024d1 <mount_volume>
c00047c5:	85 c0                	test   eax,eax
c00047c7:	89 c3                	mov    ebx,eax
c00047c9:	75 59                	jne    c0004824 <f_stat+0x76>
c00047cb:	83 ec 0c             	sub    esp,0xc
c00047ce:	bb 11 00 00 00       	mov    ebx,0x11
c00047d3:	68 00 02 00 00       	push   0x200
c00047d8:	e8 77 14 00 00       	call   c0005c54 <ff_memalloc>
c00047dd:	83 c4 10             	add    esp,0x10
c00047e0:	85 c0                	test   eax,eax
c00047e2:	89 c6                	mov    esi,eax
c00047e4:	74 3e                	je     c0004824 <f_stat+0x76>
c00047e6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047f0:	89 e0                	mov    eax,esp
c00047f2:	e8 22 f2 ff ff       	call   c0003a19 <follow_path>
c00047f7:	85 c0                	test   eax,eax
c00047f9:	89 c3                	mov    ebx,eax
c00047fb:	75 1b                	jne    c0004818 <f_stat+0x6a>
c00047fd:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c0004802:	75 0f                	jne    c0004813 <f_stat+0x65>
c0004804:	85 ff                	test   edi,edi
c0004806:	74 10                	je     c0004818 <f_stat+0x6a>
c0004808:	89 fa                	mov    edx,edi
c000480a:	89 e0                	mov    eax,esp
c000480c:	e8 ee e7 ff ff       	call   c0002fff <get_fileinfo>
c0004811:	eb 05                	jmp    c0004818 <f_stat+0x6a>
c0004813:	bb 06 00 00 00       	mov    ebx,0x6
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	56                   	push   esi
c000481c:	e8 4b 14 00 00       	call   c0005c6c <ff_memfree>
c0004821:	83 c4 10             	add    esp,0x10
c0004824:	83 c4 30             	add    esp,0x30
c0004827:	89 d8                	mov    eax,ebx
c0004829:	5b                   	pop    ebx
c000482a:	5e                   	pop    esi
c000482b:	5f                   	pop    edi
c000482c:	c3                   	ret    

c000482d <f_getfree>:
c000482d:	55                   	push   ebp
c000482e:	31 c9                	xor    ecx,ecx
c0004830:	57                   	push   edi
c0004831:	56                   	push   esi
c0004832:	53                   	push   ebx
c0004833:	83 ec 2c             	sub    esp,0x2c
c0004836:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000483a:	8d 44 24 40          	lea    eax,[esp+0x40]
c000483e:	e8 8e dc ff ff       	call   c00024d1 <mount_volume>
c0004843:	85 c0                	test   eax,eax
c0004845:	89 c6                	mov    esi,eax
c0004847:	0f 85 df 00 00 00    	jne    c000492c <f_getfree+0xff>
c000484d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004851:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004855:	89 18                	mov    DWORD PTR [eax],ebx
c0004857:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000485a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000485d:	8d 57 fe             	lea    edx,[edi-0x2]
c0004860:	39 d0                	cmp    eax,edx
c0004862:	77 0b                	ja     c000486f <f_getfree+0x42>
c0004864:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004868:	89 01                	mov    DWORD PTR [ecx],eax
c000486a:	e9 bd 00 00 00       	jmp    c000492c <f_getfree+0xff>
c000486f:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004872:	75 29                	jne    c000489d <f_getfree+0x70>
c0004874:	bf 02 00 00 00       	mov    edi,0x2
c0004879:	31 ed                	xor    ebp,ebp
c000487b:	89 fa                	mov    edx,edi
c000487d:	89 d8                	mov    eax,ebx
c000487f:	e8 cd e9 ff ff       	call   c0003251 <get_fat.isra.2>
c0004884:	83 f8 ff             	cmp    eax,0xffffffff
c0004887:	74 7d                	je     c0004906 <f_getfree+0xd9>
c0004889:	83 f8 01             	cmp    eax,0x1
c000488c:	74 7f                	je     c000490d <f_getfree+0xe0>
c000488e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004892:	83 d5 00             	adc    ebp,0x0
c0004895:	47                   	inc    edi
c0004896:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004899:	77 e0                	ja     c000487b <f_getfree+0x4e>
c000489b:	eb 79                	jmp    c0004916 <f_getfree+0xe9>
c000489d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00048a0:	31 ed                	xor    ebp,ebp
c00048a2:	31 db                	xor    ebx,ebx
c00048a4:	85 db                	test   ebx,ebx
c00048a6:	75 18                	jne    c00048c0 <f_getfree+0x93>
c00048a8:	8d 42 01             	lea    eax,[edx+0x1]
c00048ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00048af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b3:	e8 bc da ff ff       	call   c0002374 <move_window>
c00048b8:	85 c0                	test   eax,eax
c00048ba:	75 58                	jne    c0004914 <f_getfree+0xe7>
c00048bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00048c8:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048cb:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00048cf:	75 13                	jne    c00048e4 <f_getfree+0xb7>
c00048d1:	e8 39 d5 ff ff       	call   c0001e0f <ld_word>
c00048d6:	0f b7 c0             	movzx  eax,ax
c00048d9:	83 f8 01             	cmp    eax,0x1
c00048dc:	83 d5 00             	adc    ebp,0x0
c00048df:	83 c3 02             	add    ebx,0x2
c00048e2:	eb 13                	jmp    c00048f7 <f_getfree+0xca>
c00048e4:	e8 33 d5 ff ff       	call   c0001e1c <ld_dword>
c00048e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048ee:	83 f8 01             	cmp    eax,0x1
c00048f1:	83 d5 00             	adc    ebp,0x0
c00048f4:	83 c3 04             	add    ebx,0x4
c00048f7:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00048fd:	4f                   	dec    edi
c00048fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004902:	75 a0                	jne    c00048a4 <f_getfree+0x77>
c0004904:	eb 10                	jmp    c0004916 <f_getfree+0xe9>
c0004906:	be 01 00 00 00       	mov    esi,0x1
c000490b:	eb 09                	jmp    c0004916 <f_getfree+0xe9>
c000490d:	be 02 00 00 00       	mov    esi,0x2
c0004912:	eb 02                	jmp    c0004916 <f_getfree+0xe9>
c0004914:	89 c6                	mov    esi,eax
c0004916:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000491a:	89 28                	mov    DWORD PTR [eax],ebp
c000491c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004920:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004923:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004926:	83 ca 01             	or     edx,0x1
c0004929:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c000492c:	83 c4 2c             	add    esp,0x2c
c000492f:	89 f0                	mov    eax,esi
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	5d                   	pop    ebp
c0004935:	c3                   	ret    

c0004936 <f_truncate>:
c0004936:	56                   	push   esi
c0004937:	53                   	push   ebx
c0004938:	83 ec 14             	sub    esp,0x14
c000493b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000493f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004943:	89 d8                	mov    eax,ebx
c0004945:	e8 81 d9 ff ff       	call   c00022cb <validate>
c000494a:	85 c0                	test   eax,eax
c000494c:	89 c6                	mov    esi,eax
c000494e:	0f 85 c4 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004954:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004958:	85 f6                	test   esi,esi
c000495a:	0f 85 b8 00 00 00    	jne    c0004a18 <f_truncate+0xe2>
c0004960:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004964:	0f 84 a9 00 00 00    	je     c0004a13 <f_truncate+0xdd>
c000496a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000496d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004970:	0f 83 a2 00 00 00    	jae    c0004a18 <f_truncate+0xe2>
c0004976:	85 c0                	test   eax,eax
c0004978:	75 15                	jne    c000498f <f_truncate+0x59>
c000497a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000497d:	31 c9                	xor    ecx,ecx
c000497f:	89 d8                	mov    eax,ebx
c0004981:	e8 d2 eb ff ff       	call   c0003558 <remove_chain>
c0004986:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000498d:	eb 35                	jmp    c00049c4 <f_truncate+0x8e>
c000498f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004994:	e8 b8 e8 ff ff       	call   c0003251 <get_fat.isra.2>
c0004999:	89 c2                	mov    edx,eax
c000499b:	b8 01 00 00 00       	mov    eax,0x1
c00049a0:	83 fa ff             	cmp    edx,0xffffffff
c00049a3:	74 1f                	je     c00049c4 <f_truncate+0x8e>
c00049a5:	83 fa 01             	cmp    edx,0x1
c00049a8:	b8 02 00 00 00       	mov    eax,0x2
c00049ad:	74 15                	je     c00049c4 <f_truncate+0x8e>
c00049af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049b3:	31 c0                	xor    eax,eax
c00049b5:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c00049b8:	76 0a                	jbe    c00049c4 <f_truncate+0x8e>
c00049ba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c00049bd:	89 d8                	mov    eax,ebx
c00049bf:	e8 94 eb ff ff       	call   c0003558 <remove_chain>
c00049c4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049c7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049ca:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049cd:	83 ca 40             	or     edx,0x40
c00049d0:	85 c0                	test   eax,eax
c00049d2:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049d5:	75 35                	jne    c0004a0c <f_truncate+0xd6>
c00049d7:	80 e2 80             	and    dl,0x80
c00049da:	74 3c                	je     c0004a18 <f_truncate+0xe2>
c00049dc:	6a 01                	push   0x1
c00049de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049e1:	8d 43 28             	lea    eax,[ebx+0x28]
c00049e4:	50                   	push   eax
c00049e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049ed:	50                   	push   eax
c00049ee:	e8 e7 d3 ff ff       	call   c0001dda <disk_write>
c00049f3:	83 c4 10             	add    esp,0x10
c00049f6:	85 c0                	test   eax,eax
c00049f8:	75 0d                	jne    c0004a07 <f_truncate+0xd1>
c00049fa:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049fd:	31 f6                	xor    esi,esi
c00049ff:	83 e0 7f             	and    eax,0x7f
c0004a02:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004a05:	eb 11                	jmp    c0004a18 <f_truncate+0xe2>
c0004a07:	b8 01 00 00 00       	mov    eax,0x1
c0004a0c:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004a0f:	89 c6                	mov    esi,eax
c0004a11:	eb 05                	jmp    c0004a18 <f_truncate+0xe2>
c0004a13:	be 07 00 00 00       	mov    esi,0x7
c0004a18:	83 c4 14             	add    esp,0x14
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	5b                   	pop    ebx
c0004a1e:	5e                   	pop    esi
c0004a1f:	c3                   	ret    

c0004a20 <f_unlink>:
c0004a20:	55                   	push   ebp
c0004a21:	b9 02 00 00 00       	mov    ecx,0x2
c0004a26:	57                   	push   edi
c0004a27:	56                   	push   esi
c0004a28:	53                   	push   ebx
c0004a29:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a2f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a33:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a3a:	e8 92 da ff ff       	call   c00024d1 <mount_volume>
c0004a3f:	85 c0                	test   eax,eax
c0004a41:	0f 85 ee 00 00 00    	jne    c0004b35 <f_unlink+0x115>
c0004a47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4b:	83 ec 0c             	sub    esp,0xc
c0004a4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a52:	68 00 02 00 00       	push   0x200
c0004a57:	e8 f8 11 00 00       	call   c0005c54 <ff_memalloc>
c0004a5c:	83 c4 10             	add    esp,0x10
c0004a5f:	89 c3                	mov    ebx,eax
c0004a61:	b8 11 00 00 00       	mov    eax,0x11
c0004a66:	85 db                	test   ebx,ebx
c0004a68:	0f 84 c7 00 00 00    	je     c0004b35 <f_unlink+0x115>
c0004a6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a72:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a79:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a80:	e8 94 ef ff ff       	call   c0003a19 <follow_path>
c0004a85:	85 c0                	test   eax,eax
c0004a87:	0f 85 94 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a8d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a92:	b8 06 00 00 00       	mov    eax,0x6
c0004a97:	0f 85 84 00 00 00    	jne    c0004b21 <f_unlink+0x101>
c0004a9d:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004aa2:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004aa8:	74 07                	je     c0004ab1 <f_unlink+0x91>
c0004aaa:	b8 07 00 00 00       	mov    eax,0x7
c0004aaf:	eb 70                	jmp    c0004b21 <f_unlink+0x101>
c0004ab1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ab5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ab9:	8a 07                	mov    al,BYTE PTR [edi]
c0004abb:	e8 40 e7 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004ac0:	83 e5 10             	and    ebp,0x10
c0004ac3:	89 c6                	mov    esi,eax
c0004ac5:	75 20                	jne    c0004ae7 <f_unlink+0xc7>
c0004ac7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004acb:	e8 a8 ed ff ff       	call   c0003878 <dir_remove>
c0004ad0:	85 c0                	test   eax,eax
c0004ad2:	75 40                	jne    c0004b14 <f_unlink+0xf4>
c0004ad4:	85 f6                	test   esi,esi
c0004ad6:	74 3c                	je     c0004b14 <f_unlink+0xf4>
c0004ad8:	31 c9                	xor    ecx,ecx
c0004ada:	89 f2                	mov    edx,esi
c0004adc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ae0:	e8 73 ea ff ff       	call   c0003558 <remove_chain>
c0004ae5:	eb 2d                	jmp    c0004b14 <f_unlink+0xf4>
c0004ae7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004aeb:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004aef:	31 d2                	xor    edx,edx
c0004af1:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004af5:	e8 5c e8 ff ff       	call   c0003356 <dir_sdi>
c0004afa:	85 c0                	test   eax,eax
c0004afc:	75 23                	jne    c0004b21 <f_unlink+0x101>
c0004afe:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004b02:	31 d2                	xor    edx,edx
c0004b04:	e8 47 ec ff ff       	call   c0003750 <dir_read>
c0004b09:	85 c0                	test   eax,eax
c0004b0b:	74 9d                	je     c0004aaa <f_unlink+0x8a>
c0004b0d:	83 f8 04             	cmp    eax,0x4
c0004b10:	75 0f                	jne    c0004b21 <f_unlink+0x101>
c0004b12:	eb b3                	jmp    c0004ac7 <f_unlink+0xa7>
c0004b14:	85 c0                	test   eax,eax
c0004b16:	75 09                	jne    c0004b21 <f_unlink+0x101>
c0004b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1c:	e8 88 e2 ff ff       	call   c0002da9 <sync_fs>
c0004b21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b25:	83 ec 0c             	sub    esp,0xc
c0004b28:	53                   	push   ebx
c0004b29:	e8 3e 11 00 00       	call   c0005c6c <ff_memfree>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b35:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b3b:	5b                   	pop    ebx
c0004b3c:	5e                   	pop    esi
c0004b3d:	5f                   	pop    edi
c0004b3e:	5d                   	pop    ebp
c0004b3f:	c3                   	ret    

c0004b40 <f_mkdir>:
c0004b40:	57                   	push   edi
c0004b41:	b9 02 00 00 00       	mov    ecx,0x2
c0004b46:	56                   	push   esi
c0004b47:	53                   	push   ebx
c0004b48:	83 ec 50             	sub    esp,0x50
c0004b4b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b4f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b53:	e8 79 d9 ff ff       	call   c00024d1 <mount_volume>
c0004b58:	85 c0                	test   eax,eax
c0004b5a:	89 c3                	mov    ebx,eax
c0004b5c:	0f 85 70 01 00 00    	jne    c0004cd2 <f_mkdir+0x192>
c0004b62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b66:	83 ec 0c             	sub    esp,0xc
c0004b69:	bb 11 00 00 00       	mov    ebx,0x11
c0004b6e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b72:	68 00 02 00 00       	push   0x200
c0004b77:	e8 d8 10 00 00       	call   c0005c54 <ff_memalloc>
c0004b7c:	83 c4 10             	add    esp,0x10
c0004b7f:	85 c0                	test   eax,eax
c0004b81:	89 c7                	mov    edi,eax
c0004b83:	0f 84 49 01 00 00    	je     c0004cd2 <f_mkdir+0x192>
c0004b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b91:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b98:	e8 7c ee ff ff       	call   c0003a19 <follow_path>
c0004b9d:	85 c0                	test   eax,eax
c0004b9f:	89 c3                	mov    ebx,eax
c0004ba1:	74 3e                	je     c0004be1 <f_mkdir+0xa1>
c0004ba3:	83 f8 04             	cmp    eax,0x4
c0004ba6:	75 3e                	jne    c0004be6 <f_mkdir+0xa6>
c0004ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 63 e8 ff ff       	call   c000341e <create_chain>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	89 c6                	mov    esi,eax
c0004bbf:	74 0c                	je     c0004bcd <f_mkdir+0x8d>
c0004bc1:	83 f8 01             	cmp    eax,0x1
c0004bc4:	bb 02 00 00 00       	mov    ebx,0x2
c0004bc9:	74 07                	je     c0004bd2 <f_mkdir+0x92>
c0004bcb:	eb 2a                	jmp    c0004bf7 <f_mkdir+0xb7>
c0004bcd:	bb 07 00 00 00       	mov    ebx,0x7
c0004bd2:	31 c9                	xor    ecx,ecx
c0004bd4:	89 f2                	mov    edx,esi
c0004bd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bda:	e8 79 e9 ff ff       	call   c0003558 <remove_chain>
c0004bdf:	eb 05                	jmp    c0004be6 <f_mkdir+0xa6>
c0004be1:	bb 08 00 00 00       	mov    ebx,0x8
c0004be6:	83 ec 0c             	sub    esp,0xc
c0004be9:	57                   	push   edi
c0004bea:	e8 7d 10 00 00       	call   c0005c6c <ff_memfree>
c0004bef:	83 c4 10             	add    esp,0x10
c0004bf2:	e9 db 00 00 00       	jmp    c0004cd2 <f_mkdir+0x192>
c0004bf7:	83 f8 ff             	cmp    eax,0xffffffff
c0004bfa:	bb 01 00 00 00       	mov    ebx,0x1
c0004bff:	74 d1                	je     c0004bd2 <f_mkdir+0x92>
c0004c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c05:	89 f2                	mov    edx,esi
c0004c07:	e8 19 dd ff ff       	call   c0002925 <dir_clear>
c0004c0c:	85 c0                	test   eax,eax
c0004c0e:	89 c3                	mov    ebx,eax
c0004c10:	75 c0                	jne    c0004bd2 <f_mkdir+0x92>
c0004c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c16:	b9 0b 00 00 00       	mov    ecx,0xb
c0004c1b:	ba 20 00 00 00       	mov    edx,0x20
c0004c20:	83 c0 34             	add    eax,0x34
c0004c23:	e8 28 d2 ff ff       	call   c0001e50 <mem_set>
c0004c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c31:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c35:	83 c0 4a             	add    eax,0x4a
c0004c38:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004c3c:	e8 f7 d1 ff ff       	call   c0001e38 <st_dword>
c0004c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c45:	89 f1                	mov    ecx,esi
c0004c47:	8d 50 34             	lea    edx,[eax+0x34]
c0004c4a:	e8 da e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c53:	b9 20 00 00 00       	mov    ecx,0x20
c0004c58:	8d 50 34             	lea    edx,[eax+0x34]
c0004c5b:	83 c0 54             	add    eax,0x54
c0004c5e:	e8 d8 d1 ff ff       	call   c0001e3b <mem_cpy>
c0004c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c67:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c6b:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c6f:	8d 50 54             	lea    edx,[eax+0x54]
c0004c72:	e8 b2 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 2e ee ff ff       	call   c0003ab6 <dir_register>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	89 c3                	mov    ebx,eax
c0004c8c:	0f 85 40 ff ff ff    	jne    c0004bd2 <f_mkdir+0x92>
c0004c92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c96:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c9b:	83 c0 16             	add    eax,0x16
c0004c9e:	e8 95 d1 ff ff       	call   c0001e38 <st_dword>
c0004ca3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004ca7:	89 f1                	mov    ecx,esi
c0004ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cad:	e8 77 e5 ff ff       	call   c0003229 <st_clust.isra.1>
c0004cb2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004cb6:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cbe:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cc6:	e8 de e0 ff ff       	call   c0002da9 <sync_fs>
c0004ccb:	89 c3                	mov    ebx,eax
c0004ccd:	e9 14 ff ff ff       	jmp    c0004be6 <f_mkdir+0xa6>
c0004cd2:	83 c4 50             	add    esp,0x50
c0004cd5:	89 d8                	mov    eax,ebx
c0004cd7:	5b                   	pop    ebx
c0004cd8:	5e                   	pop    esi
c0004cd9:	5f                   	pop    edi
c0004cda:	c3                   	ret    

c0004cdb <f_rename>:
c0004cdb:	57                   	push   edi
c0004cdc:	56                   	push   esi
c0004cdd:	53                   	push   ebx
c0004cde:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ce4:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ceb:	e8 8f d5 ff ff       	call   c000227f <get_ldnumber>
c0004cf0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf4:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf9:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004d00:	e8 cc d7 ff ff       	call   c00024d1 <mount_volume>
c0004d05:	85 c0                	test   eax,eax
c0004d07:	0f 85 7c 01 00 00    	jne    c0004e89 <f_rename+0x1ae>
c0004d0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004d18:	68 00 02 00 00       	push   0x200
c0004d1d:	e8 32 0f 00 00       	call   c0005c54 <ff_memalloc>
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	89 c6                	mov    esi,eax
c0004d27:	b8 11 00 00 00       	mov    eax,0x11
c0004d2c:	85 f6                	test   esi,esi
c0004d2e:	0f 84 55 01 00 00    	je     c0004e89 <f_rename+0x1ae>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d3f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d42:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d46:	e8 ce ec ff ff       	call   c0003a19 <follow_path>
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	0f 85 22 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d53:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d57:	b8 06 00 00 00       	mov    eax,0x6
c0004d5c:	80 e2 a0             	and    dl,0xa0
c0004d5f:	0f 85 10 01 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004d65:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d69:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d6d:	b9 20 00 00 00       	mov    ecx,0x20
c0004d72:	e8 c4 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d77:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d7b:	b9 30 00 00 00       	mov    ecx,0x30
c0004d80:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d84:	e8 b2 d0 ff ff       	call   c0001e3b <mem_cpy>
c0004d89:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d94:	e8 80 ec ff ff       	call   c0003a19 <follow_path>
c0004d99:	85 c0                	test   eax,eax
c0004d9b:	75 20                	jne    c0004dbd <f_rename+0xe2>
c0004d9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004da1:	b8 08 00 00 00       	mov    eax,0x8
c0004da6:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004daa:	0f 85 c5 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004db0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004db4:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004dbb:	eb 03                	jmp    c0004dc0 <f_rename+0xe5>
c0004dbd:	83 f8 04             	cmp    eax,0x4
c0004dc0:	0f 85 af 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dc6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004dca:	e8 e7 ec ff ff       	call   c0003ab6 <dir_register>
c0004dcf:	85 c0                	test   eax,eax
c0004dd1:	0f 85 9e 00 00 00    	jne    c0004e75 <f_rename+0x19a>
c0004dd7:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dde:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004de2:	b9 13 00 00 00       	mov    ecx,0x13
c0004de7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dea:	e8 4c d0 ff ff       	call   c0001e3b <mem_cpy>
c0004def:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004df3:	a8 10                	test   al,0x10
c0004df5:	75 03                	jne    c0004dfa <f_rename+0x11f>
c0004df7:	83 c8 20             	or     eax,0x20
c0004dfa:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e01:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e05:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004e09:	74 54                	je     c0004e5f <f_rename+0x184>
c0004e0b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004e0f:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004e13:	74 4a                	je     c0004e5f <f_rename+0x184>
c0004e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004e19:	89 da                	mov    edx,ebx
c0004e1b:	8a 07                	mov    al,BYTE PTR [edi]
c0004e1d:	e8 de e3 ff ff       	call   c0003200 <ld_clust.isra.0>
c0004e22:	89 c2                	mov    edx,eax
c0004e24:	89 f8                	mov    eax,edi
c0004e26:	e8 3a d2 ff ff       	call   c0002065 <clst2sect>
c0004e2b:	89 c2                	mov    edx,eax
c0004e2d:	b8 02 00 00 00       	mov    eax,0x2
c0004e32:	85 d2                	test   edx,edx
c0004e34:	74 3f                	je     c0004e75 <f_rename+0x19a>
c0004e36:	89 f8                	mov    eax,edi
c0004e38:	e8 37 d5 ff ff       	call   c0002374 <move_window>
c0004e3d:	85 c0                	test   eax,eax
c0004e3f:	75 34                	jne    c0004e75 <f_rename+0x19a>
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e49:	75 14                	jne    c0004e5f <f_rename+0x184>
c0004e4b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e4f:	8d 50 54             	lea    edx,[eax+0x54]
c0004e52:	e8 d2 e3 ff ff       	call   c0003229 <st_clust.isra.1>
c0004e57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e5f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e63:	e8 10 ea ff ff       	call   c0003878 <dir_remove>
c0004e68:	85 c0                	test   eax,eax
c0004e6a:	75 09                	jne    c0004e75 <f_rename+0x19a>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	e8 34 df ff ff       	call   c0002da9 <sync_fs>
c0004e75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e79:	83 ec 0c             	sub    esp,0xc
c0004e7c:	56                   	push   esi
c0004e7d:	e8 ea 0d 00 00       	call   c0005c6c <ff_memfree>
c0004e82:	83 c4 10             	add    esp,0x10
c0004e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e89:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_chmod>:
c0004e93:	57                   	push   edi
c0004e94:	b9 02 00 00 00       	mov    ecx,0x2
c0004e99:	56                   	push   esi
c0004e9a:	53                   	push   ebx
c0004e9b:	83 ec 50             	sub    esp,0x50
c0004e9e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ea2:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004ea6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004eaa:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004eae:	e8 1e d6 ff ff       	call   c00024d1 <mount_volume>
c0004eb3:	85 c0                	test   eax,eax
c0004eb5:	0f 85 81 00 00 00    	jne    c0004f3c <f_chmod+0xa9>
c0004ebb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebf:	83 ec 0c             	sub    esp,0xc
c0004ec2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ec6:	68 00 02 00 00       	push   0x200
c0004ecb:	e8 84 0d 00 00       	call   c0005c54 <ff_memalloc>
c0004ed0:	83 c4 10             	add    esp,0x10
c0004ed3:	89 c6                	mov    esi,eax
c0004ed5:	b8 11 00 00 00       	mov    eax,0x11
c0004eda:	85 f6                	test   esi,esi
c0004edc:	74 5e                	je     c0004f3c <f_chmod+0xa9>
c0004ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ee2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ee6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eed:	e8 27 eb ff ff       	call   c0003a19 <follow_path>
c0004ef2:	85 c0                	test   eax,eax
c0004ef4:	75 32                	jne    c0004f28 <f_chmod+0x95>
c0004ef6:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004efa:	b8 06 00 00 00       	mov    eax,0x6
c0004eff:	80 e2 a0             	and    dl,0xa0
c0004f02:	75 24                	jne    c0004f28 <f_chmod+0x95>
c0004f04:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f08:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004f0b:	31 d7                	xor    edi,edx
c0004f0d:	21 fb                	and    ebx,edi
c0004f0f:	83 e3 27             	and    ebx,0x27
c0004f12:	31 d3                	xor    ebx,edx
c0004f14:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f23:	e8 81 de ff ff       	call   c0002da9 <sync_fs>
c0004f28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2c:	83 ec 0c             	sub    esp,0xc
c0004f2f:	56                   	push   esi
c0004f30:	e8 37 0d 00 00       	call   c0005c6c <ff_memfree>
c0004f35:	83 c4 10             	add    esp,0x10
c0004f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f3c:	83 c4 50             	add    esp,0x50
c0004f3f:	5b                   	pop    ebx
c0004f40:	5e                   	pop    esi
c0004f41:	5f                   	pop    edi
c0004f42:	c3                   	ret    

c0004f43 <f_utime>:
c0004f43:	56                   	push   esi
c0004f44:	b9 02 00 00 00       	mov    ecx,0x2
c0004f49:	53                   	push   ebx
c0004f4a:	83 ec 54             	sub    esp,0x54
c0004f4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f51:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f55:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f59:	e8 73 d5 ff ff       	call   c00024d1 <mount_volume>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	0f 85 87 00 00 00    	jne    c0004fed <f_utime+0xaa>
c0004f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6a:	83 ec 0c             	sub    esp,0xc
c0004f6d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f71:	68 00 02 00 00       	push   0x200
c0004f76:	e8 d9 0c 00 00       	call   c0005c54 <ff_memalloc>
c0004f7b:	83 c4 10             	add    esp,0x10
c0004f7e:	89 c3                	mov    ebx,eax
c0004f80:	b8 11 00 00 00       	mov    eax,0x11
c0004f85:	85 db                	test   ebx,ebx
c0004f87:	74 64                	je     c0004fed <f_utime+0xaa>
c0004f89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f91:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f98:	e8 7c ea ff ff       	call   c0003a19 <follow_path>
c0004f9d:	85 c0                	test   eax,eax
c0004f9f:	75 38                	jne    c0004fd9 <f_utime+0x96>
c0004fa1:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fa5:	b8 06 00 00 00       	mov    eax,0x6
c0004faa:	80 e2 a0             	and    dl,0xa0
c0004fad:	75 2a                	jne    c0004fd9 <f_utime+0x96>
c0004faf:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004fb3:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004fb7:	c1 e2 10             	shl    edx,0x10
c0004fba:	09 c2                	or     edx,eax
c0004fbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fc0:	83 c0 16             	add    eax,0x16
c0004fc3:	e8 70 ce ff ff       	call   c0001e38 <st_dword>
c0004fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fcc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fd4:	e8 d0 dd ff ff       	call   c0002da9 <sync_fs>
c0004fd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fdd:	83 ec 0c             	sub    esp,0xc
c0004fe0:	53                   	push   ebx
c0004fe1:	e8 86 0c 00 00       	call   c0005c6c <ff_memfree>
c0004fe6:	83 c4 10             	add    esp,0x10
c0004fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fed:	83 c4 54             	add    esp,0x54
c0004ff0:	5b                   	pop    ebx
c0004ff1:	5e                   	pop    esi
c0004ff2:	c3                   	ret    

c0004ff3 <f_getlabel>:
c0004ff3:	55                   	push   ebp
c0004ff4:	31 c9                	xor    ecx,ecx
c0004ff6:	57                   	push   edi
c0004ff7:	56                   	push   esi
c0004ff8:	53                   	push   ebx
c0004ff9:	83 ec 5c             	sub    esp,0x5c
c0004ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005000:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c0005004:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005008:	e8 c4 d4 ff ff       	call   c00024d1 <mount_volume>
c000500d:	85 c0                	test   eax,eax
c000500f:	89 c3                	mov    ebx,eax
c0005011:	0f 85 d9 00 00 00    	jne    c00050f0 <f_getlabel+0xfd>
c0005017:	85 ff                	test   edi,edi
c0005019:	0f 84 d1 00 00 00    	je     c00050f0 <f_getlabel+0xfd>
c000501f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	31 d2                	xor    edx,edx
c000502d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005031:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005035:	e8 1c e3 ff ff       	call   c0003356 <dir_sdi>
c000503a:	85 c0                	test   eax,eax
c000503c:	89 c3                	mov    ebx,eax
c000503e:	0f 85 a2 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c0005044:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005048:	ba 01 00 00 00       	mov    edx,0x1
c000504d:	e8 fe e6 ff ff       	call   c0003750 <dir_read>
c0005052:	85 c0                	test   eax,eax
c0005054:	89 c3                	mov    ebx,eax
c0005056:	0f 85 8a 00 00 00    	jne    c00050e6 <f_getlabel+0xf3>
c000505c:	31 f6                	xor    esi,esi
c000505e:	31 d2                	xor    edx,edx
c0005060:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005064:	8d 6a 01             	lea    ebp,[edx+0x1]
c0005067:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000506b:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c000506f:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c0005074:	89 c8                	mov    eax,ecx
c0005076:	e8 13 ce ff ff       	call   c0001e8e <dbc_1st>
c000507b:	85 c0                	test   eax,eax
c000507d:	74 19                	je     c0005098 <f_getlabel+0xa5>
c000507f:	83 fd 0b             	cmp    ebp,0xb
c0005082:	74 14                	je     c0005098 <f_getlabel+0xa5>
c0005084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005088:	c1 e1 08             	shl    ecx,0x8
c000508b:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c000508f:	8d 6a 02             	lea    ebp,[edx+0x2]
c0005092:	09 c1                	or     ecx,eax
c0005094:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005098:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000509d:	52                   	push   edx
c000509e:	52                   	push   edx
c000509f:	68 b5 01 00 00       	push   0x1b5
c00050a4:	50                   	push   eax
c00050a5:	e8 76 0c 00 00       	call   c0005d20 <ff_oem2uni>
c00050aa:	83 c4 10             	add    esp,0x10
c00050ad:	0f b7 c0             	movzx  eax,ax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	74 1f                	je     c00050d3 <f_getlabel+0xe0>
c00050b4:	8d 14 37             	lea    edx,[edi+esi*1]
c00050b7:	b9 04 00 00 00       	mov    ecx,0x4
c00050bc:	e8 ab ce ff ff       	call   c0001f6c <put_utf>
c00050c1:	0f b6 c0             	movzx  eax,al
c00050c4:	85 c0                	test   eax,eax
c00050c6:	74 0b                	je     c00050d3 <f_getlabel+0xe0>
c00050c8:	01 c6                	add    esi,eax
c00050ca:	83 fd 0b             	cmp    ebp,0xb
c00050cd:	74 06                	je     c00050d5 <f_getlabel+0xe2>
c00050cf:	89 ea                	mov    edx,ebp
c00050d1:	eb 8d                	jmp    c0005060 <f_getlabel+0x6d>
c00050d3:	31 f6                	xor    esi,esi
c00050d5:	01 fe                	add    esi,edi
c00050d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00050da:	39 f7                	cmp    edi,esi
c00050dc:	74 12                	je     c00050f0 <f_getlabel+0xfd>
c00050de:	4e                   	dec    esi
c00050df:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00050e2:	74 f3                	je     c00050d7 <f_getlabel+0xe4>
c00050e4:	eb 0a                	jmp    c00050f0 <f_getlabel+0xfd>
c00050e6:	83 fb 04             	cmp    ebx,0x4
c00050e9:	75 05                	jne    c00050f0 <f_getlabel+0xfd>
c00050eb:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00050ee:	31 db                	xor    ebx,ebx
c00050f0:	85 db                	test   ebx,ebx
c00050f2:	75 49                	jne    c000513d <f_getlabel+0x14a>
c00050f4:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050f9:	74 42                	je     c000513d <f_getlabel+0x14a>
c00050fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0005102:	e8 6d d2 ff ff       	call   c0002374 <move_window>
c0005107:	85 c0                	test   eax,eax
c0005109:	89 c3                	mov    ebx,eax
c000510b:	75 30                	jne    c000513d <f_getlabel+0x14a>
c000510d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005111:	b8 43 00 00 00       	mov    eax,0x43
c0005116:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005119:	83 f9 03             	cmp    ecx,0x3
c000511c:	74 10                	je     c000512e <f_getlabel+0x13b>
c000511e:	83 f9 04             	cmp    ecx,0x4
c0005121:	b8 64 00 00 00       	mov    eax,0x64
c0005126:	b9 27 00 00 00       	mov    ecx,0x27
c000512b:	0f 45 c1             	cmovne eax,ecx
c000512e:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005132:	e8 e5 cc ff ff       	call   c0001e1c <ld_dword>
c0005137:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000513b:	89 07                	mov    DWORD PTR [edi],eax
c000513d:	83 c4 5c             	add    esp,0x5c
c0005140:	89 d8                	mov    eax,ebx
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	5f                   	pop    edi
c0005145:	5d                   	pop    ebp
c0005146:	c3                   	ret    

c0005147 <f_setlabel>:
c0005147:	57                   	push   edi
c0005148:	b9 02 00 00 00       	mov    ecx,0x2
c000514d:	56                   	push   esi
c000514e:	53                   	push   ebx
c000514f:	83 ec 50             	sub    esp,0x50
c0005152:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005156:	8d 44 24 60          	lea    eax,[esp+0x60]
c000515a:	e8 72 d3 ff ff       	call   c00024d1 <mount_volume>
c000515f:	85 c0                	test   eax,eax
c0005161:	89 c6                	mov    esi,eax
c0005163:	0f 85 65 01 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005169:	b9 0b 00 00 00       	mov    ecx,0xb
c000516e:	ba 20 00 00 00       	mov    edx,0x20
c0005173:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005177:	31 db                	xor    ebx,ebx
c0005179:	e8 d2 cc ff ff       	call   c0001e50 <mem_set>
c000517e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005182:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005185:	76 5d                	jbe    c00051e4 <f_setlabel+0x9d>
c0005187:	8d 44 24 60          	lea    eax,[esp+0x60]
c000518b:	e8 04 cd ff ff       	call   c0001e94 <tchar2uni>
c0005190:	3d ff ff 00 00       	cmp    eax,0xffff
c0005195:	76 0a                	jbe    c00051a1 <f_setlabel+0x5a>
c0005197:	be 06 00 00 00       	mov    esi,0x6
c000519c:	e9 2d 01 00 00       	jmp    c00052ce <f_setlabel+0x187>
c00051a1:	83 ec 0c             	sub    esp,0xc
c00051a4:	50                   	push   eax
c00051a5:	e8 ee 0b 00 00       	call   c0005d98 <ff_wtoupper>
c00051aa:	5a                   	pop    edx
c00051ab:	59                   	pop    ecx
c00051ac:	68 b5 01 00 00       	push   0x1b5
c00051b1:	50                   	push   eax
c00051b2:	e8 cd 0a 00 00       	call   c0005c84 <ff_uni2oem>
c00051b7:	83 c4 10             	add    esp,0x10
c00051ba:	0f b7 f0             	movzx  esi,ax
c00051bd:	85 f6                	test   esi,esi
c00051bf:	89 f7                	mov    edi,esi
c00051c1:	74 d4                	je     c0005197 <f_setlabel+0x50>
c00051c3:	89 f2                	mov    edx,esi
c00051c5:	b8 90 00 02 c0       	mov    eax,0xc0020090
c00051ca:	e8 ae cc ff ff       	call   c0001e7d <chk_chr>
c00051cf:	85 c0                	test   eax,eax
c00051d1:	75 c4                	jne    c0005197 <f_setlabel+0x50>
c00051d3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051d9:	0f 87 c9 00 00 00    	ja     c00052a8 <f_setlabel+0x161>
c00051df:	e9 e0 00 00 00       	jmp    c00052c4 <f_setlabel+0x17d>
c00051e4:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051e9:	74 ac                	je     c0005197 <f_setlabel+0x50>
c00051eb:	85 db                	test   ebx,ebx
c00051ed:	74 0e                	je     c00051fd <f_setlabel+0xb6>
c00051ef:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051f4:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051f7:	75 04                	jne    c00051fd <f_setlabel+0xb6>
c00051f9:	89 c3                	mov    ebx,eax
c00051fb:	eb ee                	jmp    c00051eb <f_setlabel+0xa4>
c00051fd:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005209:	31 d2                	xor    edx,edx
c000520b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000520f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005213:	e8 3e e1 ff ff       	call   c0003356 <dir_sdi>
c0005218:	85 c0                	test   eax,eax
c000521a:	89 c6                	mov    esi,eax
c000521c:	0f 85 ac 00 00 00    	jne    c00052ce <f_setlabel+0x187>
c0005222:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005226:	ba 01 00 00 00       	mov    edx,0x1
c000522b:	e8 20 e5 ff ff       	call   c0003750 <dir_read>
c0005230:	85 c0                	test   eax,eax
c0005232:	75 18                	jne    c000524c <f_setlabel+0x105>
c0005234:	85 db                	test   ebx,ebx
c0005236:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000523a:	74 0b                	je     c0005247 <f_setlabel+0x100>
c000523c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005240:	b9 0b 00 00 00       	mov    ecx,0xb
c0005245:	eb 47                	jmp    c000528e <f_setlabel+0x147>
c0005247:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000524a:	eb 47                	jmp    c0005293 <f_setlabel+0x14c>
c000524c:	83 f8 04             	cmp    eax,0x4
c000524f:	75 53                	jne    c00052a4 <f_setlabel+0x15d>
c0005251:	85 db                	test   ebx,ebx
c0005253:	74 79                	je     c00052ce <f_setlabel+0x187>
c0005255:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005259:	ba 01 00 00 00       	mov    edx,0x1
c000525e:	e8 88 e4 ff ff       	call   c00036eb <dir_alloc>
c0005263:	85 c0                	test   eax,eax
c0005265:	89 c6                	mov    esi,eax
c0005267:	75 65                	jne    c00052ce <f_setlabel+0x187>
c0005269:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000526d:	b9 20 00 00 00       	mov    ecx,0x20
c0005272:	31 d2                	xor    edx,edx
c0005274:	e8 d7 cb ff ff       	call   c0001e50 <mem_set>
c0005279:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000527d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005282:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005286:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000528a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000528e:	e8 a8 cb ff ff       	call   c0001e3b <mem_cpy>
c0005293:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005297:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000529b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000529f:	e8 05 db ff ff       	call   c0002da9 <sync_fs>
c00052a4:	89 c6                	mov    esi,eax
c00052a6:	eb 26                	jmp    c00052ce <f_setlabel+0x187>
c00052a8:	83 fb 09             	cmp    ebx,0x9
c00052ab:	0f 87 e6 fe ff ff    	ja     c0005197 <f_setlabel+0x50>
c00052b1:	89 f0                	mov    eax,esi
c00052b3:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00052b7:	43                   	inc    ebx
c00052b8:	89 f8                	mov    eax,edi
c00052ba:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00052be:	43                   	inc    ebx
c00052bf:	e9 ba fe ff ff       	jmp    c000517e <f_setlabel+0x37>
c00052c4:	83 fb 0a             	cmp    ebx,0xa
c00052c7:	76 ef                	jbe    c00052b8 <f_setlabel+0x171>
c00052c9:	e9 c9 fe ff ff       	jmp    c0005197 <f_setlabel+0x50>
c00052ce:	83 c4 50             	add    esp,0x50
c00052d1:	89 f0                	mov    eax,esi
c00052d3:	5b                   	pop    ebx
c00052d4:	5e                   	pop    esi
c00052d5:	5f                   	pop    edi
c00052d6:	c3                   	ret    

c00052d7 <f_expand>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ee:	89 d8                	mov    eax,ebx
c00052f0:	e8 d6 cf ff ff       	call   c00022cb <validate>
c00052f5:	85 c0                	test   eax,eax
c00052f7:	89 c6                	mov    esi,eax
c00052f9:	0f 85 3b 01 00 00    	jne    c000543a <f_expand+0x163>
c00052ff:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005303:	85 f6                	test   esi,esi
c0005305:	0f 85 2f 01 00 00    	jne    c000543a <f_expand+0x163>
c000530b:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005310:	75 0a                	jne    c000531c <f_expand+0x45>
c0005312:	be 07 00 00 00       	mov    esi,0x7
c0005317:	e9 1e 01 00 00       	jmp    c000543a <f_expand+0x163>
c000531c:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005320:	75 f0                	jne    c0005312 <f_expand+0x3b>
c0005322:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005326:	74 ea                	je     c0005312 <f_expand+0x3b>
c0005328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000532c:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8d 47 ff             	lea    eax,[edi-0x1]
c0005336:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000533a:	0f 95 c0             	setne  al
c000533d:	31 d2                	xor    edx,edx
c000533f:	0f b6 c0             	movzx  eax,al
c0005342:	89 c5                	mov    ebp,eax
c0005344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005348:	f7 f7                	div    edi
c000534a:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c000534d:	01 e8                	add    eax,ebp
c000534f:	83 ff 01             	cmp    edi,0x1
c0005352:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005356:	76 05                	jbe    c000535d <f_expand+0x86>
c0005358:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c000535b:	77 05                	ja     c0005362 <f_expand+0x8b>
c000535d:	bf 02 00 00 00       	mov    edi,0x2
c0005362:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005365:	89 fd                	mov    ebp,edi
c0005367:	31 c9                	xor    ecx,ecx
c0005369:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000536d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000536f:	89 ea                	mov    edx,ebp
c0005371:	45                   	inc    ebp
c0005372:	e8 da de ff ff       	call   c0003251 <get_fat.isra.2>
c0005377:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000537b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000537f:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005382:	77 05                	ja     c0005389 <f_expand+0xb2>
c0005384:	bd 02 00 00 00       	mov    ebp,0x2
c0005389:	83 f8 01             	cmp    eax,0x1
c000538c:	74 20                	je     c00053ae <f_expand+0xd7>
c000538e:	83 f8 ff             	cmp    eax,0xffffffff
c0005391:	74 25                	je     c00053b8 <f_expand+0xe1>
c0005393:	85 c0                	test   eax,eax
c0005395:	75 09                	jne    c00053a0 <f_expand+0xc9>
c0005397:	41                   	inc    ecx
c0005398:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000539c:	75 07                	jne    c00053a5 <f_expand+0xce>
c000539e:	eb 1f                	jmp    c00053bf <f_expand+0xe8>
c00053a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00053a3:	31 c9                	xor    ecx,ecx
c00053a5:	39 fd                	cmp    ebp,edi
c00053a7:	75 c0                	jne    c0005369 <f_expand+0x92>
c00053a9:	e9 64 ff ff ff       	jmp    c0005312 <f_expand+0x3b>
c00053ae:	be 02 00 00 00       	mov    esi,0x2
c00053b3:	e9 82 00 00 00       	jmp    c000543a <f_expand+0x163>
c00053b8:	be 01 00 00 00       	mov    esi,0x1
c00053bd:	eb 7b                	jmp    c000543a <f_expand+0x163>
c00053bf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053c4:	74 2b                	je     c00053f1 <f_expand+0x11a>
c00053c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053c9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053cd:	85 ed                	test   ebp,ebp
c00053cf:	74 24                	je     c00053f5 <f_expand+0x11e>
c00053d1:	83 c9 ff             	or     ecx,0xffffffff
c00053d4:	83 fd 01             	cmp    ebp,0x1
c00053d7:	74 03                	je     c00053dc <f_expand+0x105>
c00053d9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e0:	89 fa                	mov    edx,edi
c00053e2:	e8 e7 d3 ff ff       	call   c00027ce <put_fat>
c00053e7:	85 c0                	test   eax,eax
c00053e9:	75 4d                	jne    c0005438 <f_expand+0x161>
c00053eb:	89 f8                	mov    eax,edi
c00053ed:	4d                   	dec    ebp
c00053ee:	47                   	inc    edi
c00053ef:	eb dc                	jmp    c00053cd <f_expand+0xf6>
c00053f1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053f4:	48                   	dec    eax
c00053f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053f9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053fe:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005401:	74 37                	je     c000543a <f_expand+0x163>
c0005403:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005406:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005409:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000540d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005410:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0005413:	83 c8 40             	or     eax,0x40
c0005416:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005419:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c000541c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000541f:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005422:	39 c8                	cmp    eax,ecx
c0005424:	77 14                	ja     c000543a <f_expand+0x163>
c0005426:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000542a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000542d:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005430:	83 c8 01             	or     eax,0x1
c0005433:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005436:	eb 02                	jmp    c000543a <f_expand+0x163>
c0005438:	89 c6                	mov    esi,eax
c000543a:	83 c4 2c             	add    esp,0x2c
c000543d:	89 f0                	mov    eax,esi
c000543f:	5b                   	pop    ebx
c0005440:	5e                   	pop    esi
c0005441:	5f                   	pop    edi
c0005442:	5d                   	pop    ebp
c0005443:	c3                   	ret    

c0005444 <f_mkfs>:
c0005444:	55                   	push   ebp
c0005445:	57                   	push   edi
c0005446:	56                   	push   esi
c0005447:	be 0b 00 00 00       	mov    esi,0xb
c000544c:	53                   	push   ebx
c000544d:	83 ec 5c             	sub    esp,0x5c
c0005450:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005454:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005458:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000545c:	e8 1e ce ff ff       	call   c000227f <get_ldnumber>
c0005461:	85 c0                	test   eax,eax
c0005463:	0f 88 e0 07 00 00    	js     c0005c49 <f_mkfs+0x805>
c0005469:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005470:	85 d2                	test   edx,edx
c0005472:	74 03                	je     c0005477 <f_mkfs+0x33>
c0005474:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005477:	85 db                	test   ebx,ebx
c0005479:	75 05                	jne    c0005480 <f_mkfs+0x3c>
c000547b:	bb 80 00 02 c0       	mov    ebx,0xc0020080
c0005480:	0f b6 c0             	movzx  eax,al
c0005483:	83 ec 0c             	sub    esp,0xc
c0005486:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000548a:	be 03 00 00 00       	mov    esi,0x3
c000548f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005493:	e8 29 c9 ff ff       	call   c0001dc1 <disk_initialize>
c0005498:	83 c4 10             	add    esp,0x10
c000549b:	a8 01                	test   al,0x1
c000549d:	0f 85 a6 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054a3:	a8 04                	test   al,0x4
c00054a5:	be 0a 00 00 00       	mov    esi,0xa
c00054aa:	0f 85 99 07 00 00    	jne    c0005c49 <f_mkfs+0x805>
c00054b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00054b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00054b7:	85 c0                	test   eax,eax
c00054b9:	75 20                	jne    c00054db <f_mkfs+0x97>
c00054bb:	51                   	push   ecx
c00054bc:	8d 44 24 44          	lea    eax,[esp+0x44]
c00054c0:	50                   	push   eax
c00054c1:	6a 03                	push   0x3
c00054c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054c7:	e8 24 c9 ff ff       	call   c0001df0 <disk_ioctl>
c00054cc:	83 c4 10             	add    esp,0x10
c00054cf:	85 c0                	test   eax,eax
c00054d1:	74 08                	je     c00054db <f_mkfs+0x97>
c00054d3:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054df:	8d 42 ff             	lea    eax,[edx-0x1]
c00054e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054e7:	77 04                	ja     c00054ed <f_mkfs+0xa9>
c00054e9:	85 c2                	test   edx,eax
c00054eb:	74 08                	je     c00054f5 <f_mkfs+0xb1>
c00054ed:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054f5:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005500:	48                   	dec    eax
c0005501:	3c 01                	cmp    al,0x1
c0005503:	76 05                	jbe    c000550a <f_mkfs+0xc6>
c0005505:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005511:	48                   	dec    eax
c0005512:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005517:	77 15                	ja     c000552e <f_mkfs+0xea>
c0005519:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c000551e:	b8 00 02 00 00       	mov    eax,0x200
c0005523:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005528:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000552c:	eb 08                	jmp    c0005536 <f_mkfs+0xf2>
c000552e:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c0005536:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005539:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000553f:	77 0f                	ja     c0005550 <f_mkfs+0x10c>
c0005541:	8d 47 ff             	lea    eax,[edi-0x1]
c0005544:	85 f8                	test   eax,edi
c0005546:	b8 00 00 00 00       	mov    eax,0x0
c000554b:	0f 45 f8             	cmovne edi,eax
c000554e:	eb 02                	jmp    c0005552 <f_mkfs+0x10e>
c0005550:	31 ff                	xor    edi,edi
c0005552:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000555a:	77 0a                	ja     c0005566 <f_mkfs+0x122>
c000555c:	be 11 00 00 00       	mov    esi,0x11
c0005561:	e9 e3 06 00 00       	jmp    c0005c49 <f_mkfs+0x805>
c0005566:	85 ed                	test   ebp,ebp
c0005568:	8b 33                	mov    esi,DWORD PTR [ebx]
c000556a:	89 eb                	mov    ebx,ebp
c000556c:	75 1e                	jne    c000558c <f_mkfs+0x148>
c000556e:	83 ec 0c             	sub    esp,0xc
c0005571:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005578:	25 00 fe ff ff       	and    eax,0xfffffe00
c000557d:	50                   	push   eax
c000557e:	e8 d1 06 00 00       	call   c0005c54 <ff_memalloc>
c0005583:	83 c4 10             	add    esp,0x10
c0005586:	85 c0                	test   eax,eax
c0005588:	89 c3                	mov    ebx,eax
c000558a:	74 d0                	je     c000555c <f_mkfs+0x118>
c000558c:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005594:	52                   	push   edx
c0005595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005599:	50                   	push   eax
c000559a:	6a 01                	push   0x1
c000559c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055a0:	e8 4b c8 ff ff       	call   c0001df0 <disk_ioctl>
c00055a5:	83 c4 10             	add    esp,0x10
c00055a8:	85 c0                	test   eax,eax
c00055aa:	0f 85 42 06 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00055b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00055b8:	89 f0                	mov    eax,esi
c00055ba:	83 e0 08             	and    eax,0x8
c00055bd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00055c1:	75 18                	jne    c00055db <f_mkfs+0x197>
c00055c3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c7:	83 f8 3f             	cmp    eax,0x3f
c00055ca:	76 0f                	jbe    c00055db <f_mkfs+0x197>
c00055cc:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00055d4:	83 e8 3f             	sub    eax,0x3f
c00055d7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00055db:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055e3:	83 f8 7f             	cmp    eax,0x7f
c00055e6:	0f 86 5f 02 00 00    	jbe    c000584b <f_mkfs+0x407>
c00055ec:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055f2:	b9 80 00 00 00       	mov    ecx,0x80
c00055f7:	77 05                	ja     c00055fe <f_mkfs+0x1ba>
c00055f9:	c1 ef 09             	shr    edi,0x9
c00055fc:	89 f9                	mov    ecx,edi
c00055fe:	89 f0                	mov    eax,esi
c0005600:	89 f7                	mov    edi,esi
c0005602:	83 e0 01             	and    eax,0x1
c0005605:	83 e7 02             	and    edi,0x2
c0005608:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000560c:	0f b6 c0             	movzx  eax,al
c000560f:	74 0a                	je     c000561b <f_mkfs+0x1d7>
c0005611:	85 c0                	test   eax,eax
c0005613:	0f 84 53 01 00 00    	je     c000576c <f_mkfs+0x328>
c0005619:	eb 37                	jmp    c0005652 <f_mkfs+0x20e>
c000561b:	85 c0                	test   eax,eax
c000561d:	be 13 00 00 00       	mov    esi,0x13
c0005622:	75 2e                	jne    c0005652 <f_mkfs+0x20e>
c0005624:	e9 e0 05 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005629:	83 f8 02             	cmp    eax,0x2
c000562c:	0f 85 11 02 00 00    	jne    c0005843 <f_mkfs+0x3ff>
c0005632:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005638:	0f 86 e8 01 00 00    	jbe    c0005826 <f_mkfs+0x3e2>
c000563e:	85 c9                	test   ecx,ecx
c0005640:	0f 85 d5 05 00 00    	jne    c0005c1b <f_mkfs+0x7d7>
c0005646:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005649:	83 f9 40             	cmp    ecx,0x40
c000564c:	0f 87 d9 05 00 00    	ja     c0005c2b <f_mkfs+0x7e7>
c0005652:	85 c9                	test   ecx,ecx
c0005654:	89 cf                	mov    edi,ecx
c0005656:	75 1c                	jne    c0005674 <f_mkfs+0x230>
c0005658:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000565c:	b8 60 00 02 c0       	mov    eax,0xc0020060
c0005661:	bf 01 00 00 00       	mov    edi,0x1
c0005666:	c1 ee 0c             	shr    esi,0xc
c0005669:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000566c:	85 d2                	test   edx,edx
c000566e:	0f 85 67 01 00 00    	jne    c00057db <f_mkfs+0x397>
c0005674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005678:	31 d2                	xor    edx,edx
c000567a:	f7 f7                	div    edi
c000567c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005681:	0f 86 66 01 00 00    	jbe    c00057ed <f_mkfs+0x3a9>
c0005687:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000568c:	83 c0 02             	add    eax,0x2
c000568f:	01 c0                	add    eax,eax
c0005691:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005699:	05 ff 01 00 00       	add    eax,0x1ff
c000569e:	c1 e8 09             	shr    eax,0x9
c00056a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00056a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056a9:	c1 e0 05             	shl    eax,0x5
c00056ac:	c1 e8 09             	shr    eax,0x9
c00056af:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00056b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00056b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00056bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00056c0:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00056c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00056c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00056cc:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00056d1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00056d5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00056d9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e5:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056e9:	f7 d8                	neg    eax
c00056eb:	21 c6                	and    esi,eax
c00056ed:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056f2:	29 d6                	sub    esi,edx
c00056f4:	83 f8 03             	cmp    eax,0x3
c00056f7:	0f 85 03 01 00 00    	jne    c0005800 <f_mkfs+0x3bc>
c00056fd:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005701:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005705:	89 f8                	mov    eax,edi
c0005707:	c1 e0 04             	shl    eax,0x4
c000570a:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000570e:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c0005712:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005716:	0f 82 2f 01 00 00    	jb     c000584b <f_mkfs+0x407>
c000571c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005720:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0005724:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005728:	89 c2                	mov    edx,eax
c000572a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000572e:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005733:	29 c2                	sub    edx,eax
c0005735:	89 d0                	mov    eax,edx
c0005737:	31 d2                	xor    edx,edx
c0005739:	f7 f7                	div    edi
c000573b:	89 c6                	mov    esi,eax
c000573d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005742:	83 f8 03             	cmp    eax,0x3
c0005745:	0f 85 de fe ff ff    	jne    c0005629 <f_mkfs+0x1e5>
c000574b:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005751:	0f 87 03 01 00 00    	ja     c000585a <f_mkfs+0x416>
c0005757:	85 c9                	test   ecx,ecx
c0005759:	0f 85 ec 00 00 00    	jne    c000584b <f_mkfs+0x407>
c000575f:	83 ff 01             	cmp    edi,0x1
c0005762:	0f 86 e3 00 00 00    	jbe    c000584b <f_mkfs+0x407>
c0005768:	d1 ef                	shr    edi,1
c000576a:	89 f9                	mov    ecx,edi
c000576c:	85 c9                	test   ecx,ecx
c000576e:	89 ce                	mov    esi,ecx
c0005770:	75 25                	jne    c0005797 <f_mkfs+0x353>
c0005772:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005776:	b8 70 00 02 c0       	mov    eax,0xc0020070
c000577b:	b9 01 00 00 00       	mov    ecx,0x1
c0005780:	c1 ee 11             	shr    esi,0x11
c0005783:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005786:	85 d2                	test   edx,edx
c0005788:	74 0b                	je     c0005795 <f_mkfs+0x351>
c000578a:	83 c0 02             	add    eax,0x2
c000578d:	39 f2                	cmp    edx,esi
c000578f:	77 04                	ja     c0005795 <f_mkfs+0x351>
c0005791:	01 c9                	add    ecx,ecx
c0005793:	eb ee                	jmp    c0005783 <f_mkfs+0x33f>
c0005795:	31 f6                	xor    esi,esi
c0005797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000579b:	31 d2                	xor    edx,edx
c000579d:	f7 f1                	div    ecx
c000579f:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00057a6:	2d f6 ff 00 00       	sub    eax,0xfff6
c00057ab:	c1 ea 09             	shr    edx,0x9
c00057ae:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00057b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00057b7:	0f 87 8e 00 00 00    	ja     c000584b <f_mkfs+0x407>
c00057bd:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00057c5:	89 cf                	mov    edi,ecx
c00057c7:	89 f1                	mov    ecx,esi
c00057c9:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00057d1:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00057d6:	e9 d8 fe ff ff       	jmp    c00056b3 <f_mkfs+0x26f>
c00057db:	83 c0 02             	add    eax,0x2
c00057de:	39 f2                	cmp    edx,esi
c00057e0:	0f 87 8e fe ff ff    	ja     c0005674 <f_mkfs+0x230>
c00057e6:	01 ff                	add    edi,edi
c00057e8:	e9 7c fe ff ff       	jmp    c0005669 <f_mkfs+0x225>
c00057ed:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057f2:	8d 04 40             	lea    eax,[eax+eax*2]
c00057f5:	40                   	inc    eax
c00057f6:	d1 e8                	shr    eax,1
c00057f8:	83 c0 03             	add    eax,0x3
c00057fb:	e9 91 fe ff ff       	jmp    c0005691 <f_mkfs+0x24d>
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005808:	85 d2                	test   edx,edx
c000580a:	74 09                	je     c0005815 <f_mkfs+0x3d1>
c000580c:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005810:	4e                   	dec    esi
c0005811:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0005815:	89 f0                	mov    eax,esi
c0005817:	31 d2                	xor    edx,edx
c0005819:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000581d:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005821:	e9 df fe ff ff       	jmp    c0005705 <f_mkfs+0x2c1>
c0005826:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c000582c:	77 2c                	ja     c000585a <f_mkfs+0x416>
c000582e:	85 c9                	test   ecx,ecx
c0005830:	75 19                	jne    c000584b <f_mkfs+0x407>
c0005832:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005835:	81 f9 80 00 00 00    	cmp    ecx,0x80
c000583b:	0f 86 11 fe ff ff    	jbe    c0005652 <f_mkfs+0x20e>
c0005841:	eb 08                	jmp    c000584b <f_mkfs+0x407>
c0005843:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005849:	76 0a                	jbe    c0005855 <f_mkfs+0x411>
c000584b:	be 0e 00 00 00       	mov    esi,0xe
c0005850:	e9 b4 03 00 00       	jmp    c0005c09 <f_mkfs+0x7c5>
c0005855:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000585a:	31 d2                	xor    edx,edx
c000585c:	b9 00 02 00 00       	mov    ecx,0x200
c0005861:	89 d8                	mov    eax,ebx
c0005863:	e8 e8 c5 ff ff       	call   c0001e50 <mem_set>
c0005868:	b9 0b 00 00 00       	mov    ecx,0xb
c000586d:	ba 12 00 02 c0       	mov    edx,0xc0020012
c0005872:	89 d8                	mov    eax,ebx
c0005874:	e8 c2 c5 ff ff       	call   c0001e3b <mem_cpy>
c0005879:	8d 43 0b             	lea    eax,[ebx+0xb]
c000587c:	ba 00 02 00 00       	mov    edx,0x200
c0005881:	e8 ae c5 ff ff       	call   c0001e34 <st_word>
c0005886:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000588b:	89 f8                	mov    eax,edi
c000588d:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005890:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005893:	e8 9c c5 ff ff       	call   c0001e34 <st_word>
c0005898:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000589c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000589f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058a4:	83 f8 03             	cmp    eax,0x3
c00058a7:	b8 00 00 00 00       	mov    eax,0x0
c00058ac:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00058b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00058b5:	8d 43 11             	lea    eax,[ebx+0x11]
c00058b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bc:	e8 73 c5 ff ff       	call   c0001e34 <st_word>
c00058c1:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058c5:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00058cb:	77 0a                	ja     c00058d7 <f_mkfs+0x493>
c00058cd:	8d 43 13             	lea    eax,[ebx+0x13]
c00058d0:	e8 5f c5 ff ff       	call   c0001e34 <st_word>
c00058d5:	eb 08                	jmp    c00058df <f_mkfs+0x49b>
c00058d7:	8d 43 20             	lea    eax,[ebx+0x20]
c00058da:	e8 59 c5 ff ff       	call   c0001e38 <st_dword>
c00058df:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00058e6:	ba 3f 00 00 00       	mov    edx,0x3f
c00058eb:	e8 44 c5 ff ff       	call   c0001e34 <st_word>
c00058f0:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058f3:	ba ff 00 00 00       	mov    edx,0xff
c00058f8:	e8 37 c5 ff ff       	call   c0001e34 <st_word>
c00058fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005901:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005904:	e8 2f c5 ff ff       	call   c0001e38 <st_dword>
c0005909:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000590e:	83 f8 03             	cmp    eax,0x3
c0005911:	75 57                	jne    c000596a <f_mkfs+0x526>
c0005913:	8d 43 43             	lea    eax,[ebx+0x43]
c0005916:	ba 00 00 21 50       	mov    edx,0x50210000
c000591b:	e8 18 c5 ff ff       	call   c0001e38 <st_dword>
c0005920:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005924:	8d 43 24             	lea    eax,[ebx+0x24]
c0005927:	e8 0c c5 ff ff       	call   c0001e38 <st_dword>
c000592c:	8d 43 2c             	lea    eax,[ebx+0x2c]
c000592f:	ba 02 00 00 00       	mov    edx,0x2
c0005934:	e8 ff c4 ff ff       	call   c0001e38 <st_dword>
c0005939:	8d 43 30             	lea    eax,[ebx+0x30]
c000593c:	ba 01 00 00 00       	mov    edx,0x1
c0005941:	e8 ee c4 ff ff       	call   c0001e34 <st_word>
c0005946:	8d 43 32             	lea    eax,[ebx+0x32]
c0005949:	ba 06 00 00 00       	mov    edx,0x6
c000594e:	e8 e1 c4 ff ff       	call   c0001e34 <st_word>
c0005953:	8d 43 47             	lea    eax,[ebx+0x47]
c0005956:	b9 13 00 00 00       	mov    ecx,0x13
c000595b:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c000595f:	ba 1e 00 02 c0       	mov    edx,0xc002001e
c0005964:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005968:	eb 2f                	jmp    c0005999 <f_mkfs+0x555>
c000596a:	8d 43 27             	lea    eax,[ebx+0x27]
c000596d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005972:	e8 c1 c4 ff ff       	call   c0001e38 <st_dword>
c0005977:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000597c:	8d 43 16             	lea    eax,[ebx+0x16]
c000597f:	e8 b0 c4 ff ff       	call   c0001e34 <st_word>
c0005984:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005987:	b9 13 00 00 00       	mov    ecx,0x13
c000598c:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005990:	ba 32 00 02 c0       	mov    edx,0xc0020032
c0005995:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005999:	e8 9d c4 ff ff       	call   c0001e3b <mem_cpy>
c000599e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059a4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059ad:	e8 82 c4 ff ff       	call   c0001e34 <st_word>
c00059b2:	6a 01                	push   0x1
c00059b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059b8:	53                   	push   ebx
c00059b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059bd:	e8 18 c4 ff ff       	call   c0001dda <disk_write>
c00059c2:	83 c4 10             	add    esp,0x10
c00059c5:	85 c0                	test   eax,eax
c00059c7:	0f 85 25 02 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c00059cd:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059d2:	83 f8 03             	cmp    eax,0x3
c00059d5:	0f 85 98 00 00 00    	jne    c0005a73 <f_mkfs+0x62f>
c00059db:	6a 01                	push   0x1
c00059dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00059e1:	83 c0 06             	add    eax,0x6
c00059e4:	50                   	push   eax
c00059e5:	53                   	push   ebx
c00059e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059ea:	e8 eb c3 ff ff       	call   c0001dda <disk_write>
c00059ef:	b9 00 02 00 00       	mov    ecx,0x200
c00059f4:	31 d2                	xor    edx,edx
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 53 c4 ff ff       	call   c0001e50 <mem_set>
c00059fd:	ba 52 52 61 41       	mov    edx,0x41615252
c0005a02:	89 d8                	mov    eax,ebx
c0005a04:	e8 2f c4 ff ff       	call   c0001e38 <st_dword>
c0005a09:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005a0f:	ba 72 72 41 61       	mov    edx,0x61417272
c0005a14:	e8 1f c4 ff ff       	call   c0001e38 <st_dword>
c0005a19:	8d 56 ff             	lea    edx,[esi-0x1]
c0005a1c:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005a22:	e8 11 c4 ff ff       	call   c0001e38 <st_dword>
c0005a27:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005a2d:	ba 02 00 00 00       	mov    edx,0x2
c0005a32:	e8 01 c4 ff ff       	call   c0001e38 <st_dword>
c0005a37:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a42:	e8 ed c3 ff ff       	call   c0001e34 <st_word>
c0005a47:	6a 01                	push   0x1
c0005a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005a4d:	83 c0 07             	add    eax,0x7
c0005a50:	50                   	push   eax
c0005a51:	53                   	push   ebx
c0005a52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a56:	e8 7f c3 ff ff       	call   c0001dda <disk_write>
c0005a5b:	83 c4 20             	add    esp,0x20
c0005a5e:	6a 01                	push   0x1
c0005a60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005a64:	40                   	inc    eax
c0005a65:	50                   	push   eax
c0005a66:	53                   	push   ebx
c0005a67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a6b:	e8 6a c3 ff ff       	call   c0001dda <disk_write>
c0005a70:	83 c4 10             	add    esp,0x10
c0005a73:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a77:	31 d2                	xor    edx,edx
c0005a79:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a7d:	c1 e8 09             	shr    eax,0x9
c0005a80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a84:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a8a:	89 d8                	mov    eax,ebx
c0005a8c:	e8 bf c3 ff ff       	call   c0001e50 <mem_set>
c0005a91:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a96:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005a9b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005aa3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005aa8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005aac:	83 f8 01             	cmp    eax,0x1
c0005aaf:	0f 44 d1             	cmove  edx,ecx
c0005ab2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005ab6:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005abb:	75 21                	jne    c0005ade <f_mkfs+0x69a>
c0005abd:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 6f c3 ff ff       	call   c0001e38 <st_dword>
c0005ac9:	8d 43 04             	lea    eax,[ebx+0x4]
c0005acc:	83 ca ff             	or     edx,0xffffffff
c0005acf:	e8 64 c3 ff ff       	call   c0001e38 <st_dword>
c0005ad4:	8d 43 08             	lea    eax,[ebx+0x8]
c0005ad7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005adc:	eb 06                	jmp    c0005ae4 <f_mkfs+0x6a0>
c0005ade:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005ae2:	89 d8                	mov    eax,ebx
c0005ae4:	e8 4f c3 ff ff       	call   c0001e38 <st_dword>
c0005ae9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005af5:	0f 46 c6             	cmovbe eax,esi
c0005af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005afc:	50                   	push   eax
c0005afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b01:	53                   	push   ebx
c0005b02:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b06:	e8 cf c2 ff ff       	call   c0001dda <disk_write>
c0005b0b:	83 c4 10             	add    esp,0x10
c0005b0e:	85 c0                	test   eax,eax
c0005b10:	0f 85 dc 00 00 00    	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b16:	b9 00 02 00 00       	mov    ecx,0x200
c0005b1b:	31 d2                	xor    edx,edx
c0005b1d:	89 d8                	mov    eax,ebx
c0005b1f:	e8 2c c3 ff ff       	call   c0001e50 <mem_set>
c0005b24:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005b28:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005b2c:	29 ce                	sub    esi,ecx
c0005b2e:	75 bd                	jne    c0005aed <f_mkfs+0x6a9>
c0005b30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005b3c:	40                   	inc    eax
c0005b3d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b41:	0f 87 6f ff ff ff    	ja     c0005ab6 <f_mkfs+0x672>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	83 f8 03             	cmp    eax,0x3
c0005b4f:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005b54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b58:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b5c:	0f 46 f7             	cmovbe esi,edi
c0005b5f:	56                   	push   esi
c0005b60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b64:	53                   	push   ebx
c0005b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b69:	e8 6c c2 ff ff       	call   c0001dda <disk_write>
c0005b6e:	83 c4 10             	add    esp,0x10
c0005b71:	85 c0                	test   eax,eax
c0005b73:	75 7d                	jne    c0005bf2 <f_mkfs+0x7ae>
c0005b75:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b79:	29 f7                	sub    edi,esi
c0005b7b:	75 d7                	jne    c0005b54 <f_mkfs+0x710>
c0005b7d:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b82:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b87:	83 f8 03             	cmp    eax,0x3
c0005b8a:	74 1e                	je     c0005baa <f_mkfs+0x766>
c0005b8c:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b94:	b9 06 00 00 00       	mov    ecx,0x6
c0005b99:	77 0f                	ja     c0005baa <f_mkfs+0x766>
c0005b9b:	83 f8 02             	cmp    eax,0x2
c0005b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0005ba3:	74 05                	je     c0005baa <f_mkfs+0x766>
c0005ba5:	b9 01 00 00 00       	mov    ecx,0x1
c0005baa:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005baf:	75 2a                	jne    c0005bdb <f_mkfs+0x797>
c0005bb1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005bb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005bbd:	83 ec 0c             	sub    esp,0xc
c0005bc0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005bc4:	53                   	push   ebx
c0005bc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005bc9:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005bcd:	e8 87 d2 ff ff       	call   c0002e59 <create_partition>
c0005bd2:	83 c4 10             	add    esp,0x10
c0005bd5:	85 c0                	test   eax,eax
c0005bd7:	89 c6                	mov    esi,eax
c0005bd9:	75 2e                	jne    c0005c09 <f_mkfs+0x7c5>
c0005bdb:	50                   	push   eax
c0005bdc:	31 f6                	xor    esi,esi
c0005bde:	6a 00                	push   0x0
c0005be0:	6a 00                	push   0x0
c0005be2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005be6:	e8 05 c2 ff ff       	call   c0001df0 <disk_ioctl>
c0005beb:	83 c4 10             	add    esp,0x10
c0005bee:	85 c0                	test   eax,eax
c0005bf0:	74 17                	je     c0005c09 <f_mkfs+0x7c5>
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	75 0c                	jne    c0005c02 <f_mkfs+0x7be>
c0005bf6:	83 ec 0c             	sub    esp,0xc
c0005bf9:	53                   	push   ebx
c0005bfa:	e8 6d 00 00 00       	call   c0005c6c <ff_memfree>
c0005bff:	83 c4 10             	add    esp,0x10
c0005c02:	be 01 00 00 00       	mov    esi,0x1
c0005c07:	eb 40                	jmp    c0005c49 <f_mkfs+0x805>
c0005c09:	85 ed                	test   ebp,ebp
c0005c0b:	75 3c                	jne    c0005c49 <f_mkfs+0x805>
c0005c0d:	83 ec 0c             	sub    esp,0xc
c0005c10:	53                   	push   ebx
c0005c11:	e8 56 00 00 00       	call   c0005c6c <ff_memfree>
c0005c16:	83 c4 10             	add    esp,0x10
c0005c19:	eb 2e                	jmp    c0005c49 <f_mkfs+0x805>
c0005c1b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c20:	0f 85 46 fb ff ff    	jne    c000576c <f_mkfs+0x328>
c0005c26:	e9 20 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c2b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005c30:	0f 85 3c fb ff ff    	jne    c0005772 <f_mkfs+0x32e>
c0005c36:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c3c:	89 cf                	mov    edi,ecx
c0005c3e:	0f 86 30 fa ff ff    	jbe    c0005674 <f_mkfs+0x230>
c0005c44:	e9 02 fc ff ff       	jmp    c000584b <f_mkfs+0x407>
c0005c49:	83 c4 5c             	add    esp,0x5c
c0005c4c:	89 f0                	mov    eax,esi
c0005c4e:	5b                   	pop    ebx
c0005c4f:	5e                   	pop    esi
c0005c50:	5f                   	pop    edi
c0005c51:	5d                   	pop    ebp
c0005c52:	c3                   	ret    
c0005c53:	90                   	nop

c0005c54 <ff_memalloc>:
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	83 ec 0c             	sub    esp,0xc
c0005c5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c5e:	e8 70 1e 00 00       	call   c0007ad3 <malloc>
c0005c63:	83 c4 10             	add    esp,0x10
c0005c66:	83 c4 0c             	add    esp,0xc
c0005c69:	c3                   	ret    
c0005c6a:	66 90                	xchg   ax,ax

c0005c6c <ff_memfree>:
c0005c6c:	83 ec 0c             	sub    esp,0xc
c0005c6f:	83 ec 0c             	sub    esp,0xc
c0005c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c76:	e8 68 1e 00 00       	call   c0007ae3 <free>
c0005c7b:	83 c4 10             	add    esp,0x10
c0005c7e:	90                   	nop
c0005c7f:	83 c4 0c             	add    esp,0xc
c0005c82:	c3                   	ret    
c0005c83:	90                   	nop

c0005c84 <ff_uni2oem>:
c0005c84:	83 ec 14             	sub    esp,0x14
c0005c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8b:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c8f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c96:	c7 44 24 0c 60 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020460
c0005c9e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005ca3:	77 0b                	ja     c0005cb0 <ff_uni2oem+0x2c>
c0005ca5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ca9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cae:	eb 64                	jmp    c0005d14 <ff_uni2oem+0x90>
c0005cb0:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005cb8:	77 5a                	ja     c0005d14 <ff_uni2oem+0x90>
c0005cba:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005cbe:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005cc3:	75 4f                	jne    c0005d14 <ff_uni2oem+0x90>
c0005cc5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ccc:	eb 12                	jmp    c0005ce0 <ff_uni2oem+0x5c>
c0005cce:	66 90                	xchg   ax,ax
c0005cd0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd5:	83 c0 01             	add    eax,0x1
c0005cd8:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ce0:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ce5:	83 f8 7f             	cmp    eax,0x7f
c0005ce8:	77 1a                	ja     c0005d04 <ff_uni2oem+0x80>
c0005cea:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cef:	8d 14 00             	lea    edx,[eax+eax*1]
c0005cf2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cf6:	01 d0                	add    eax,edx
c0005cf8:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cfb:	0f b7 c0             	movzx  eax,ax
c0005cfe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005d02:	75 cc                	jne    c0005cd0 <ff_uni2oem+0x4c>
c0005d04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d09:	83 e8 80             	sub    eax,0xffffff80
c0005d0c:	0f b6 c0             	movzx  eax,al
c0005d0f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d14:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d19:	83 c4 14             	add    esp,0x14
c0005d1c:	c3                   	ret    
c0005d1d:	8d 76 00             	lea    esi,[esi+0x0]

c0005d20 <ff_oem2uni>:
c0005d20:	83 ec 18             	sub    esp,0x18
c0005d23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005d2b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d30:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d34:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d3b:	c7 44 24 10 60 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020460
c0005d43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d48:	83 f8 7f             	cmp    eax,0x7f
c0005d4b:	77 0b                	ja     c0005d58 <ff_oem2uni+0x38>
c0005d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d51:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d56:	eb 34                	jmp    c0005d8c <ff_oem2uni+0x6c>
c0005d58:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d5c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d61:	75 29                	jne    c0005d8c <ff_oem2uni+0x6c>
c0005d63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d68:	3d ff 00 00 00       	cmp    eax,0xff
c0005d6d:	77 1d                	ja     c0005d8c <ff_oem2uni+0x6c>
c0005d6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d74:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d79:	8d 14 00             	lea    edx,[eax+eax*1]
c0005d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d80:	01 d0                	add    eax,edx
c0005d82:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d85:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d8a:	66 90                	xchg   ax,ax
c0005d8c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d91:	83 c4 18             	add    esp,0x18
c0005d94:	c3                   	ret    
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]

c0005d98 <ff_wtoupper>:
c0005d98:	83 ec 10             	sub    esp,0x10
c0005d9b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005da3:	0f 87 a7 01 00 00    	ja     c0005f50 <ff_wtoupper+0x1b8>
c0005da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005dad:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005db2:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005db7:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005dbc:	77 0a                	ja     c0005dc8 <ff_wtoupper+0x30>
c0005dbe:	b8 60 02 02 c0       	mov    eax,0xc0020260
c0005dc3:	eb 0b                	jmp    c0005dd0 <ff_wtoupper+0x38>
c0005dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005dc8:	b8 a0 01 02 c0       	mov    eax,0xc00201a0
c0005dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0005dd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dd8:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ddf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005de7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dec:	85 c0                	test   eax,eax
c0005dee:	0f 84 50 01 00 00    	je     c0005f44 <ff_wtoupper+0x1ac>
c0005df4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005df9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dfe:	39 c2                	cmp    edx,eax
c0005e00:	0f 82 3e 01 00 00    	jb     c0005f44 <ff_wtoupper+0x1ac>
c0005e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e0a:	8d 50 02             	lea    edx,[eax+0x2]
c0005e0d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005e11:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e14:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e19:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005e1e:	c1 e8 08             	shr    eax,0x8
c0005e21:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005e26:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005e2b:	0f b6 c0             	movzx  eax,al
c0005e2e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e33:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e38:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e3d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e42:	01 ca                	add    edx,ecx
c0005e44:	39 d0                	cmp    eax,edx
c0005e46:	0f 8d d4 00 00 00    	jge    c0005f20 <ff_wtoupper+0x188>
c0005e4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e51:	83 f8 08             	cmp    eax,0x8
c0005e54:	0f 87 e6 00 00 00    	ja     c0005f40 <ff_wtoupper+0x1a8>
c0005e5a:	8b 04 85 60 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfea0]
c0005e61:	ff e0                	jmp    eax
c0005e63:	90                   	nop
c0005e64:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e69:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e6e:	29 c2                	sub    edx,eax
c0005e70:	89 d0                	mov    eax,edx
c0005e72:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e79:	01 d0                	add    eax,edx
c0005e7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e7e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e83:	e9 94 00 00 00       	jmp    c0005f1c <ff_wtoupper+0x184>
c0005e88:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e91:	89 d1                	mov    ecx,edx
c0005e93:	29 c1                	sub    ecx,eax
c0005e95:	89 c8                	mov    eax,ecx
c0005e97:	83 e0 01             	and    eax,0x1
c0005e9a:	89 c2                	mov    edx,eax
c0005e9c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea1:	29 d0                	sub    eax,edx
c0005ea3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ea8:	eb 72                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eaa:	66 90                	xchg   ax,ax
c0005eac:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb1:	83 e8 10             	sub    eax,0x10
c0005eb4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eb9:	eb 61                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ebb:	90                   	nop
c0005ebc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec1:	83 e8 20             	sub    eax,0x20
c0005ec4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ec9:	eb 51                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005ecb:	90                   	nop
c0005ecc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed1:	83 e8 30             	sub    eax,0x30
c0005ed4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ed9:	eb 41                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005edb:	90                   	nop
c0005edc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee1:	83 e8 1a             	sub    eax,0x1a
c0005ee4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ee9:	eb 31                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005eeb:	90                   	nop
c0005eec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ef1:	83 c0 08             	add    eax,0x8
c0005ef4:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ef9:	eb 21                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005efb:	90                   	nop
c0005efc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f01:	83 e8 50             	sub    eax,0x50
c0005f04:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f09:	eb 11                	jmp    c0005f1c <ff_wtoupper+0x184>
c0005f0b:	90                   	nop
c0005f0c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f11:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005f16:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f1b:	90                   	nop
c0005f1c:	eb 22                	jmp    c0005f40 <ff_wtoupper+0x1a8>
c0005f1e:	66 90                	xchg   ax,ax
c0005f20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f25:	85 c0                	test   eax,eax
c0005f27:	0f 85 a7 fe ff ff    	jne    c0005dd4 <ff_wtoupper+0x3c>
c0005f2d:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f32:	d1 e0                	shl    eax,1
c0005f34:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f38:	e9 97 fe ff ff       	jmp    c0005dd4 <ff_wtoupper+0x3c>
c0005f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f40:	90                   	nop
c0005f41:	8d 76 00             	lea    esi,[esi+0x0]
c0005f44:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f54:	83 c4 10             	add    esp,0x10
c0005f57:	c3                   	ret    

c0005f58 <utf2ucs>:
c0005f58:	57                   	push   edi
c0005f59:	31 c9                	xor    ecx,ecx
c0005f5b:	56                   	push   esi
c0005f5c:	89 d7                	mov    edi,edx
c0005f5e:	53                   	push   ebx
c0005f5f:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f63:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f67:	89 de                	mov    esi,ebx
c0005f69:	c1 fe 08             	sar    esi,0x8
c0005f6c:	89 f2                	mov    edx,esi
c0005f6e:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f71:	41                   	inc    ecx
c0005f72:	85 db                	test   ebx,ebx
c0005f74:	75 e9                	jne    c0005f5f <utf2ucs+0x7>
c0005f76:	5b                   	pop    ebx
c0005f77:	5e                   	pop    esi
c0005f78:	5f                   	pop    edi
c0005f79:	c3                   	ret    

c0005f7a <ucs2utfn>:
c0005f7a:	83 e1 fe             	and    ecx,0xfffffffe
c0005f7d:	01 d1                	add    ecx,edx
c0005f7f:	39 d1                	cmp    ecx,edx
c0005f81:	75 04                	jne    c0005f87 <ucs2utfn+0xd>
c0005f83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f86:	c3                   	ret    
c0005f87:	57                   	push   edi
c0005f88:	56                   	push   esi
c0005f89:	53                   	push   ebx
c0005f8a:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f8d:	83 c2 02             	add    edx,0x2
c0005f90:	89 de                	mov    esi,ebx
c0005f92:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f96:	c1 e6 08             	shl    esi,0x8
c0005f99:	09 f3                	or     ebx,esi
c0005f9b:	83 fb 3b             	cmp    ebx,0x3b
c0005f9e:	74 50                	je     c0005ff0 <ucs2utfn+0x76>
c0005fa0:	83 fb 7f             	cmp    ebx,0x7f
c0005fa3:	7f 05                	jg     c0005faa <ucs2utfn+0x30>
c0005fa5:	88 18                	mov    BYTE PTR [eax],bl
c0005fa7:	40                   	inc    eax
c0005fa8:	eb 42                	jmp    c0005fec <ucs2utfn+0x72>
c0005faa:	89 df                	mov    edi,ebx
c0005fac:	89 de                	mov    esi,ebx
c0005fae:	c1 fe 06             	sar    esi,0x6
c0005fb1:	83 e7 3f             	and    edi,0x3f
c0005fb4:	83 cf 80             	or     edi,0xffffff80
c0005fb7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005fbd:	7f 12                	jg     c0005fd1 <ucs2utfn+0x57>
c0005fbf:	83 ce c0             	or     esi,0xffffffc0
c0005fc2:	83 c0 02             	add    eax,0x2
c0005fc5:	89 f3                	mov    ebx,esi
c0005fc7:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fca:	89 fb                	mov    ebx,edi
c0005fcc:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fcf:	eb 1b                	jmp    c0005fec <ucs2utfn+0x72>
c0005fd1:	c1 fb 0c             	sar    ebx,0xc
c0005fd4:	83 e6 3f             	and    esi,0x3f
c0005fd7:	83 cb e0             	or     ebx,0xffffffe0
c0005fda:	83 ce 80             	or     esi,0xffffff80
c0005fdd:	88 18                	mov    BYTE PTR [eax],bl
c0005fdf:	89 f3                	mov    ebx,esi
c0005fe1:	83 c0 03             	add    eax,0x3
c0005fe4:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fe7:	89 fb                	mov    ebx,edi
c0005fe9:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fec:	39 d1                	cmp    ecx,edx
c0005fee:	75 9a                	jne    c0005f8a <ucs2utfn+0x10>
c0005ff0:	5b                   	pop    ebx
c0005ff1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005ff4:	5e                   	pop    esi
c0005ff5:	5f                   	pop    edi
c0005ff6:	c3                   	ret    

c0005ff7 <isjoliet>:
c0005ff7:	31 d2                	xor    edx,edx
c0005ff9:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005ffc:	75 26                	jne    c0006024 <isjoliet+0x2d>
c0005ffe:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0006002:	75 20                	jne    c0006024 <isjoliet+0x2d>
c0006004:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006008:	ba 02 00 00 00       	mov    edx,0x2
c000600d:	83 f8 43             	cmp    eax,0x43
c0006010:	74 12                	je     c0006024 <isjoliet+0x2d>
c0006012:	83 f8 45             	cmp    eax,0x45
c0006015:	ba 03 00 00 00       	mov    edx,0x3
c000601a:	74 08                	je     c0006024 <isjoliet+0x2d>
c000601c:	31 d2                	xor    edx,edx
c000601e:	83 f8 40             	cmp    eax,0x40
c0006021:	0f 94 c2             	sete   dl
c0006024:	89 d0                	mov    eax,edx
c0006026:	c3                   	ret    

c0006027 <htohl_32>:
c0006027:	8b 00                	mov    eax,DWORD PTR [eax]
c0006029:	c3                   	ret    

c000602a <iso_733>:
c000602a:	eb fb                	jmp    c0006027 <htohl_32>

c000602c <bgrad_cache>:
c000602c:	83 fa 0e             	cmp    edx,0xe
c000602f:	77 16                	ja     c0006047 <bgrad_cache+0x1b>
c0006031:	53                   	push   ebx
c0006032:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006035:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006039:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c000603c:	42                   	inc    edx
c000603d:	83 fa 0f             	cmp    edx,0xf
c0006040:	75 f3                	jne    c0006035 <bgrad_cache+0x9>
c0006042:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006045:	5b                   	pop    ebx
c0006046:	c3                   	ret    
c0006047:	c3                   	ret    

c0006048 <ucscompare>:
c0006048:	55                   	push   ebp
c0006049:	57                   	push   edi
c000604a:	89 c7                	mov    edi,eax
c000604c:	56                   	push   esi
c000604d:	89 d6                	mov    esi,edx
c000604f:	53                   	push   ebx
c0006050:	31 d2                	xor    edx,edx
c0006052:	83 ec 1c             	sub    esp,0x1c
c0006055:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006059:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000605e:	c1 e3 08             	shl    ebx,0x8
c0006061:	09 c3                	or     ebx,eax
c0006063:	39 ca                	cmp    edx,ecx
c0006065:	7d 42                	jge    c00060a9 <ucscompare+0x61>
c0006067:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000606b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000606f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006073:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006078:	c1 e0 08             	shl    eax,0x8
c000607b:	09 e8                	or     eax,ebp
c000607d:	83 f8 3b             	cmp    eax,0x3b
c0006080:	74 27                	je     c00060a9 <ucscompare+0x61>
c0006082:	83 ec 0c             	sub    esp,0xc
c0006085:	50                   	push   eax
c0006086:	e8 f5 a8 ff ff       	call   c0000980 <tolower>
c000608b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000608e:	89 c5                	mov    ebp,eax
c0006090:	e8 eb a8 ff ff       	call   c0000980 <tolower>
c0006095:	83 c4 10             	add    esp,0x10
c0006098:	39 c5                	cmp    ebp,eax
c000609a:	75 20                	jne    c00060bc <ucscompare+0x74>
c000609c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00060a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00060a4:	83 c2 02             	add    edx,0x2
c00060a7:	eb ac                	jmp    c0006055 <ucscompare+0xd>
c00060a9:	83 fb 2f             	cmp    ebx,0x2f
c00060ac:	0f 95 c2             	setne  dl
c00060af:	31 c0                	xor    eax,eax
c00060b1:	85 db                	test   ebx,ebx
c00060b3:	0f 95 c0             	setne  al
c00060b6:	21 d0                	and    eax,edx
c00060b8:	f7 d8                	neg    eax
c00060ba:	eb 03                	jmp    c00060bf <ucscompare+0x77>
c00060bc:	83 c8 ff             	or     eax,0xffffffff
c00060bf:	83 c4 1c             	add    esp,0x1c
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <fncompare>:
c00060c7:	55                   	push   ebp
c00060c8:	57                   	push   edi
c00060c9:	89 c7                	mov    edi,eax
c00060cb:	56                   	push   esi
c00060cc:	89 ce                	mov    esi,ecx
c00060ce:	53                   	push   ebx
c00060cf:	31 db                	xor    ebx,ebx
c00060d1:	83 ec 1c             	sub    esp,0x1c
c00060d4:	39 d3                	cmp    ebx,edx
c00060d6:	7d 45                	jge    c000611d <fncompare+0x56>
c00060d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060dc:	83 f8 3b             	cmp    eax,0x3b
c00060df:	74 3c                	je     c000611d <fncompare+0x56>
c00060e1:	83 f8 2e             	cmp    eax,0x2e
c00060e4:	75 0e                	jne    c00060f4 <fncompare+0x2d>
c00060e6:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060e9:	39 d9                	cmp    ecx,ebx
c00060eb:	74 30                	je     c000611d <fncompare+0x56>
c00060ed:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060f2:	74 29                	je     c000611d <fncompare+0x56>
c00060f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060f8:	83 ec 0c             	sub    esp,0xc
c00060fb:	50                   	push   eax
c00060fc:	e8 7f a8 ff ff       	call   c0000980 <tolower>
c0006101:	89 c5                	mov    ebp,eax
c0006103:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0006107:	89 04 24             	mov    DWORD PTR [esp],eax
c000610a:	e8 71 a8 ff ff       	call   c0000980 <tolower>
c000610f:	83 c4 10             	add    esp,0x10
c0006112:	39 c5                	cmp    ebp,eax
c0006114:	75 1e                	jne    c0006134 <fncompare+0x6d>
c0006116:	43                   	inc    ebx
c0006117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000611b:	eb b7                	jmp    c00060d4 <fncompare+0xd>
c000611d:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006121:	83 fa 2f             	cmp    edx,0x2f
c0006124:	0f 95 c1             	setne  cl
c0006127:	31 c0                	xor    eax,eax
c0006129:	85 d2                	test   edx,edx
c000612b:	0f 95 c0             	setne  al
c000612e:	21 c8                	and    eax,ecx
c0006130:	f7 d8                	neg    eax
c0006132:	eb 03                	jmp    c0006137 <fncompare+0x70>
c0006134:	83 c8 ff             	or     eax,0xffffffff
c0006137:	83 c4 1c             	add    esp,0x1c
c000613a:	5b                   	pop    ebx
c000613b:	5e                   	pop    esi
c000613c:	5f                   	pop    edi
c000613d:	5d                   	pop    ebp
c000613e:	c3                   	ret    

c000613f <bclear_cache>:
c000613f:	83 ec 18             	sub    esp,0x18
c0006142:	68 60 05 02 c0       	push   0xc0020560
c0006147:	e8 7c 3d 01 00       	call   c0019ec8 <iso_kprintf>
c000614c:	83 c4 10             	add    esp,0x10
c000614f:	31 c0                	xor    eax,eax
c0006151:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c0006158:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000615e:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006165:	40                   	inc    eax
c0006166:	83 f8 10             	cmp    eax,0x10
c0006169:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000616f:	75 e0                	jne    c0006151 <bclear_cache+0x12>
c0006171:	83 c4 0c             	add    esp,0xc
c0006174:	c3                   	ret    

c0006175 <bclear>:
c0006175:	eb c8                	jmp    c000613f <bclear_cache>

c0006177 <iso_break_all>:
c0006177:	83 ec 18             	sub    esp,0x18
c000617a:	68 6e 05 02 c0       	push   0xc002056e
c000617f:	e8 44 3d 01 00       	call   c0019ec8 <iso_kprintf>
c0006184:	83 c4 10             	add    esp,0x10
c0006187:	31 c0                	xor    eax,eax
c0006189:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006193:	05 94 00 00 00       	add    eax,0x94
c0006198:	3d 40 09 00 00       	cmp    eax,0x940
c000619d:	75 ea                	jne    c0006189 <iso_break_all+0x12>
c000619f:	83 c4 0c             	add    esp,0xc
c00061a2:	c3                   	ret    

c00061a3 <isoReadDiscSector>:
c00061a3:	83 ec 0c             	sub    esp,0xc
c00061a6:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c00061ad:	50                   	push   eax
c00061ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00061ba:	e8 ad 3c 01 00       	call   c0019e6c <isoReadDiscSectorHelper>
c00061bf:	83 c4 1c             	add    esp,0x1c
c00061c2:	c3                   	ret    

c00061c3 <bread_cache>:
c00061c3:	55                   	push   ebp
c00061c4:	57                   	push   edi
c00061c5:	89 d7                	mov    edi,edx
c00061c7:	56                   	push   esi
c00061c8:	ba 0f 00 00 00       	mov    edx,0xf
c00061cd:	53                   	push   ebx
c00061ce:	89 c6                	mov    esi,eax
c00061d0:	83 ec 0c             	sub    esp,0xc
c00061d3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061d6:	39 38                	cmp    DWORD PTR [eax],edi
c00061d8:	74 3c                	je     c0006216 <bread_cache+0x53>
c00061da:	4a                   	dec    edx
c00061db:	83 fa ff             	cmp    edx,0xffffffff
c00061de:	75 f3                	jne    c00061d3 <bread_cache+0x10>
c00061e0:	31 db                	xor    ebx,ebx
c00061e2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061e5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061e8:	74 08                	je     c00061f2 <bread_cache+0x2f>
c00061ea:	43                   	inc    ebx
c00061eb:	83 fb 10             	cmp    ebx,0x10
c00061ee:	75 f2                	jne    c00061e2 <bread_cache+0x1f>
c00061f0:	31 db                	xor    ebx,ebx
c00061f2:	50                   	push   eax
c00061f3:	6a 01                	push   0x1
c00061f5:	57                   	push   edi
c00061f6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061fc:	83 c0 04             	add    eax,0x4
c00061ff:	50                   	push   eax
c0006200:	e8 9e ff ff ff       	call   c00061a3 <isoReadDiscSector>
c0006205:	83 c4 10             	add    esp,0x10
c0006208:	83 c9 ff             	or     ecx,0xffffffff
c000620b:	85 c0                	test   eax,eax
c000620d:	78 13                	js     c0006222 <bread_cache+0x5f>
c000620f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006212:	89 da                	mov    edx,ebx
c0006214:	89 38                	mov    DWORD PTR [eax],edi
c0006216:	89 f0                	mov    eax,esi
c0006218:	e8 0f fe ff ff       	call   c000602c <bgrad_cache>
c000621d:	b9 0f 00 00 00       	mov    ecx,0xf
c0006222:	83 c4 0c             	add    esp,0xc
c0006225:	89 c8                	mov    eax,ecx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <biread>:
c000622c:	89 c2                	mov    edx,eax
c000622e:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006233:	eb 8e                	jmp    c00061c3 <bread_cache>

c0006235 <bdread>:
c0006235:	89 c2                	mov    edx,eax
c0006237:	b8 20 50 02 c0       	mov    eax,0xc0025020
c000623c:	eb 85                	jmp    c00061c3 <bread_cache>

c000623e <strnicmp>:
c000623e:	55                   	push   ebp
c000623f:	57                   	push   edi
c0006240:	31 ff                	xor    edi,edi
c0006242:	56                   	push   esi
c0006243:	53                   	push   ebx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000624b:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000624f:	74 43                	je     c0006294 <strnicmp+0x56>
c0006251:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006255:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006259:	85 c0                	test   eax,eax
c000625b:	74 37                	je     c0006294 <strnicmp+0x56>
c000625d:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006261:	85 d2                	test   edx,edx
c0006263:	74 2f                	je     c0006294 <strnicmp+0x56>
c0006265:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006268:	39 d0                	cmp    eax,edx
c000626a:	75 04                	jne    c0006270 <strnicmp+0x32>
c000626c:	89 ef                	mov    edi,ebp
c000626e:	eb db                	jmp    c000624b <strnicmp+0xd>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	50                   	push   eax
c0006274:	e8 07 a7 ff ff       	call   c0000980 <tolower>
c0006279:	89 c3                	mov    ebx,eax
c000627b:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000627f:	89 ef                	mov    edi,ebp
c0006281:	89 04 24             	mov    DWORD PTR [esp],eax
c0006284:	e8 f7 a6 ff ff       	call   c0000980 <tolower>
c0006289:	83 c4 10             	add    esp,0x10
c000628c:	29 c3                	sub    ebx,eax
c000628e:	89 d8                	mov    eax,ebx
c0006290:	74 b9                	je     c000624b <strnicmp+0xd>
c0006292:	eb 02                	jmp    c0006296 <strnicmp+0x58>
c0006294:	31 c0                	xor    eax,eax
c0006296:	83 c4 0c             	add    esp,0xc
c0006299:	5b                   	pop    ebx
c000629a:	5e                   	pop    esi
c000629b:	5f                   	pop    edi
c000629c:	5d                   	pop    ebp
c000629d:	c3                   	ret    

c000629e <find_object>:
c000629e:	55                   	push   ebp
c000629f:	57                   	push   edi
c00062a0:	89 c7                	mov    edi,eax
c00062a2:	56                   	push   esi
c00062a3:	53                   	push   ebx
c00062a4:	89 d3                	mov    ebx,edx
c00062a6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00062ac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00062b0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00062b7:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c00062be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00062c2:	74 0b                	je     c00062cf <find_object+0x31>
c00062c4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062c8:	89 fa                	mov    edx,edi
c00062ca:	e8 89 fc ff ff       	call   c0005f58 <utf2ucs>
c00062cf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062d6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00062db:	7e 11                	jle    c00062ee <find_object+0x50>
c00062dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062e1:	e8 46 ff ff ff       	call   c000622c <biread>
c00062e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	79 07                	jns    c00062f5 <find_object+0x57>
c00062ee:	31 db                	xor    ebx,ebx
c00062f0:	e9 47 01 00 00       	jmp    c000643c <find_object+0x19e>
c00062f5:	31 ed                	xor    ebp,ebp
c00062f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062fb:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006302:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c0006306:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006309:	85 f6                	test   esi,esi
c000630b:	75 0e                	jne    c000631b <find_object+0x7d>
c000630d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006311:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006319:	eb bb                	jmp    c00062d6 <find_object+0x38>
c000631b:	8b 0d b4 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025eb4
c0006321:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006325:	85 c9                	test   ecx,ecx
c0006327:	89 d0                	mov    eax,edx
c0006329:	74 2b                	je     c0006356 <find_object+0xb8>
c000632b:	8d 43 21             	lea    eax,[ebx+0x21]
c000632e:	89 d1                	mov    ecx,edx
c0006330:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006334:	e8 0f fd ff ff       	call   c0006048 <ucscompare>
c0006339:	85 c0                	test   eax,eax
c000633b:	0f 84 cd 00 00 00    	je     c000640e <find_object+0x170>
c0006341:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006344:	01 c5                	add    ebp,eax
c0006346:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c000634c:	7f bf                	jg     c000630d <find_object+0x6f>
c000634e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0006352:	7f a3                	jg     c00062f7 <find_object+0x59>
c0006354:	eb b7                	jmp    c000630d <find_object+0x6f>
c0006356:	29 d6                	sub    esi,edx
c0006358:	a8 01                	test   al,0x1
c000635a:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c000635e:	74 05                	je     c0006365 <find_object+0xc7>
c0006360:	83 ee 21             	sub    esi,0x21
c0006363:	eb 6a                	jmp    c00063cf <find_object+0x131>
c0006365:	42                   	inc    edx
c0006366:	83 ee 22             	sub    esi,0x22
c0006369:	eb 64                	jmp    c00063cf <find_object+0x131>
c000636b:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000636e:	48                   	dec    eax
c000636f:	3c 01                	cmp    al,0x1
c0006371:	77 61                	ja     c00063d4 <find_object+0x136>
c0006373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006377:	50                   	push   eax
c0006378:	6a 02                	push   0x2
c000637a:	68 7d 05 02 c0       	push   0xc002057d
c000637f:	52                   	push   edx
c0006380:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0006384:	e8 87 a4 ff ff       	call   c0000810 <strncmp>
c0006389:	83 c4 10             	add    esp,0x10
c000638c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006390:	85 c0                	test   eax,eax
c0006392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006396:	75 2f                	jne    c00063c7 <find_object+0x129>
c0006398:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c000639c:	50                   	push   eax
c000639d:	8d 42 05             	lea    eax,[edx+0x5]
c00063a0:	83 e9 05             	sub    ecx,0x5
c00063a3:	51                   	push   ecx
c00063a4:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00063a8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00063ac:	50                   	push   eax
c00063ad:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063b1:	50                   	push   eax
c00063b2:	e8 d9 a2 ff ff       	call   c0000690 <strncpy>
c00063b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00063bb:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00063c0:	83 c4 10             	add    esp,0x10
c00063c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c7:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00063cb:	29 c6                	sub    esi,eax
c00063cd:	01 c2                	add    edx,eax
c00063cf:	83 fe 03             	cmp    esi,0x3
c00063d2:	7f 97                	jg     c000636b <find_object+0xcd>
c00063d4:	85 c9                	test   ecx,ecx
c00063d6:	7e 40                	jle    c0006418 <find_object+0x17a>
c00063d8:	51                   	push   ecx
c00063d9:	51                   	push   ecx
c00063da:	6a 2f                	push   0x2f
c00063dc:	57                   	push   edi
c00063dd:	e8 ee a3 ff ff       	call   c00007d0 <strchr>
c00063e2:	83 c4 10             	add    esp,0x10
c00063e5:	85 c0                	test   eax,eax
c00063e7:	74 04                	je     c00063ed <find_object+0x14f>
c00063e9:	29 f8                	sub    eax,edi
c00063eb:	eb 0c                	jmp    c00063f9 <find_object+0x15b>
c00063ed:	83 ec 0c             	sub    esp,0xc
c00063f0:	57                   	push   edi
c00063f1:	e8 8a a1 ff ff       	call   c0000580 <strlen>
c00063f6:	83 c4 10             	add    esp,0x10
c00063f9:	52                   	push   edx
c00063fa:	50                   	push   eax
c00063fb:	57                   	push   edi
c00063fc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006400:	50                   	push   eax
c0006401:	e8 38 fe ff ff       	call   c000623e <strnicmp>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	e9 2b ff ff ff       	jmp    c0006339 <find_object+0x9b>
c000640e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006412:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006416:	eb 1e                	jmp    c0006436 <find_object+0x198>
c0006418:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000641c:	8d 43 21             	lea    eax,[ebx+0x21]
c000641f:	89 f9                	mov    ecx,edi
c0006421:	e8 a1 fc ff ff       	call   c00060c7 <fncompare>
c0006426:	85 c0                	test   eax,eax
c0006428:	0f 85 13 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000642e:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006432:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006436:	0f 85 05 ff ff ff    	jne    c0006341 <find_object+0xa3>
c000643c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006442:	89 d8                	mov    eax,ebx
c0006444:	5b                   	pop    ebx
c0006445:	5e                   	pop    esi
c0006446:	5f                   	pop    edi
c0006447:	5d                   	pop    ebp
c0006448:	c3                   	ret    

c0006449 <find_object_path>:
c0006449:	55                   	push   ebp
c000644a:	57                   	push   edi
c000644b:	89 d7                	mov    edi,edx
c000644d:	56                   	push   esi
c000644e:	89 c6                	mov    esi,eax
c0006450:	53                   	push   ebx
c0006451:	89 cb                	mov    ebx,ecx
c0006453:	83 ec 0c             	sub    esp,0xc
c0006456:	50                   	push   eax
c0006457:	50                   	push   eax
c0006458:	6a 2f                	push   0x2f
c000645a:	56                   	push   esi
c000645b:	e8 70 a3 ff ff       	call   c00007d0 <strchr>
c0006460:	83 c4 10             	add    esp,0x10
c0006463:	85 c0                	test   eax,eax
c0006465:	89 c5                	mov    ebp,eax
c0006467:	74 3a                	je     c00064a3 <find_object_path+0x5a>
c0006469:	39 ee                	cmp    esi,ebp
c000646b:	74 31                	je     c000649e <find_object_path+0x55>
c000646d:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006470:	e8 b5 fb ff ff       	call   c000602a <iso_733>
c0006475:	89 c2                	mov    edx,eax
c0006477:	8d 43 02             	lea    eax,[ebx+0x2]
c000647a:	e8 ab fb ff ff       	call   c000602a <iso_733>
c000647f:	83 ec 0c             	sub    esp,0xc
c0006482:	52                   	push   edx
c0006483:	89 c1                	mov    ecx,eax
c0006485:	ba 01 00 00 00       	mov    edx,0x1
c000648a:	89 f0                	mov    eax,esi
c000648c:	e8 0d fe ff ff       	call   c000629e <find_object>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	85 c0                	test   eax,eax
c0006496:	89 c3                	mov    ebx,eax
c0006498:	75 04                	jne    c000649e <find_object_path+0x55>
c000649a:	31 db                	xor    ebx,ebx
c000649c:	eb 36                	jmp    c00064d4 <find_object_path+0x8b>
c000649e:	8d 75 01             	lea    esi,[ebp+0x1]
c00064a1:	eb b3                	jmp    c0006456 <find_object_path+0xd>
c00064a3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00064a6:	74 28                	je     c00064d0 <find_object_path+0x87>
c00064a8:	8d 43 0a             	lea    eax,[ebx+0xa]
c00064ab:	e8 7a fb ff ff       	call   c000602a <iso_733>
c00064b0:	89 c2                	mov    edx,eax
c00064b2:	8d 43 02             	lea    eax,[ebx+0x2]
c00064b5:	e8 70 fb ff ff       	call   c000602a <iso_733>
c00064ba:	83 ec 0c             	sub    esp,0xc
c00064bd:	52                   	push   edx
c00064be:	89 c1                	mov    ecx,eax
c00064c0:	89 fa                	mov    edx,edi
c00064c2:	89 f0                	mov    eax,esi
c00064c4:	e8 d5 fd ff ff       	call   c000629e <find_object>
c00064c9:	83 c4 10             	add    esp,0x10
c00064cc:	89 c3                	mov    ebx,eax
c00064ce:	eb 04                	jmp    c00064d4 <find_object_path+0x8b>
c00064d0:	85 ff                	test   edi,edi
c00064d2:	74 c6                	je     c000649a <find_object_path+0x51>
c00064d4:	83 c4 0c             	add    esp,0xc
c00064d7:	89 d8                	mov    eax,ebx
c00064d9:	5b                   	pop    ebx
c00064da:	5e                   	pop    esi
c00064db:	5f                   	pop    edi
c00064dc:	5d                   	pop    ebp
c00064dd:	c3                   	ret    

c00064de <stricmp>:
c00064de:	57                   	push   edi
c00064df:	56                   	push   esi
c00064e0:	31 f6                	xor    esi,esi
c00064e2:	53                   	push   ebx
c00064e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064e7:	83 ec 0c             	sub    esp,0xc
c00064ea:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f2:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064f6:	46                   	inc    esi
c00064f7:	50                   	push   eax
c00064f8:	e8 63 a4 ff ff       	call   c0000960 <toupper>
c00064fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0006500:	e8 7b a4 ff ff       	call   c0000980 <tolower>
c0006505:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006508:	89 c3                	mov    ebx,eax
c000650a:	e8 51 a4 ff ff       	call   c0000960 <toupper>
c000650f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006512:	e8 69 a4 ff ff       	call   c0000980 <tolower>
c0006517:	83 c4 10             	add    esp,0x10
c000651a:	39 c3                	cmp    ebx,eax
c000651c:	75 04                	jne    c0006522 <stricmp+0x44>
c000651e:	85 db                	test   ebx,ebx
c0006520:	75 c1                	jne    c00064e3 <stricmp+0x5>
c0006522:	29 c3                	sub    ebx,eax
c0006524:	89 d8                	mov    eax,ebx
c0006526:	5b                   	pop    ebx
c0006527:	5e                   	pop    esi
c0006528:	5f                   	pop    edi
c0006529:	c3                   	ret    

c000652a <iso_open>:
c000652a:	57                   	push   edi
c000652b:	31 c0                	xor    eax,eax
c000652d:	56                   	push   esi
c000652e:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006533:	53                   	push   ebx
c0006534:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006539:	0f 95 c0             	setne  al
c000653c:	89 c2                	mov    edx,eax
c000653e:	89 c6                	mov    esi,eax
c0006540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006544:	e8 00 ff ff ff       	call   c0006449 <find_object_path>
c0006549:	83 ca ff             	or     edx,0xffffffff
c000654c:	85 c0                	test   eax,eax
c000654e:	74 5e                	je     c00065ae <iso_open+0x84>
c0006550:	89 c1                	mov    ecx,eax
c0006552:	31 d2                	xor    edx,edx
c0006554:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000655a:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006561:	75 42                	jne    c00065a5 <iso_open+0x7b>
c0006563:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c000656d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006570:	e8 b5 fa ff ff       	call   c000602a <iso_733>
c0006575:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000657b:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c0006585:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c000658b:	8d 41 0a             	lea    eax,[ecx+0xa]
c000658e:	e8 97 fa ff ff       	call   c000602a <iso_733>
c0006593:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c000659d:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c00065a3:	eb 09                	jmp    c00065ae <iso_open+0x84>
c00065a5:	42                   	inc    edx
c00065a6:	83 fa 10             	cmp    edx,0x10
c00065a9:	75 a9                	jne    c0006554 <iso_open+0x2a>
c00065ab:	83 ca ff             	or     edx,0xffffffff
c00065ae:	5b                   	pop    ebx
c00065af:	89 d0                	mov    eax,edx
c00065b1:	5e                   	pop    esi
c00065b2:	5f                   	pop    edi
c00065b3:	c3                   	ret    

c00065b4 <iso_close>:
c00065b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00065b8:	83 f8 0f             	cmp    eax,0xf
c00065bb:	7f 10                	jg     c00065cd <iso_close+0x19>
c00065bd:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065c3:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065cd:	e9 6d fb ff ff       	jmp    c000613f <bclear_cache>

c00065d2 <iso_read>:
c00065d2:	55                   	push   ebp
c00065d3:	57                   	push   edi
c00065d4:	56                   	push   esi
c00065d5:	53                   	push   ebx
c00065d6:	83 ec 1c             	sub    esp,0x1c
c00065d9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065dd:	83 fd 0f             	cmp    ebp,0xf
c00065e0:	7e 0a                	jle    c00065ec <iso_read+0x1a>
c00065e2:	83 c8 ff             	or     eax,0xffffffff
c00065e5:	89 c2                	mov    edx,eax
c00065e7:	e9 f4 00 00 00       	jmp    c00066e0 <iso_read+0x10e>
c00065ec:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065f2:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065f9:	74 e7                	je     c00065e2 <iso_read+0x10>
c00065fb:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c0006601:	85 d2                	test   edx,edx
c0006603:	75 dd                	jne    c00065e2 <iso_read+0x10>
c0006605:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c000660a:	0f 84 cd 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006610:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c0006616:	8b 9d 4c 55 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdaab4]
c000661c:	29 c3                	sub    ebx,eax
c000661e:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c0006622:	89 d9                	mov    ecx,ebx
c0006624:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006629:	85 c9                	test   ecx,ecx
c000662b:	0f 84 ac 00 00 00    	je     c00066dd <iso_read+0x10b>
c0006631:	89 c6                	mov    esi,eax
c0006633:	bb 00 08 00 00       	mov    ebx,0x800
c0006638:	c1 e8 0b             	shr    eax,0xb
c000663b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006641:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c0006647:	29 f3                	sub    ebx,esi
c0006649:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000664f:	75 3f                	jne    c0006690 <iso_read+0xbe>
c0006651:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006657:	7e 37                	jle    c0006690 <iso_read+0xbe>
c0006659:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000665f:	be 20 00 00 00       	mov    esi,0x20
c0006664:	7f 05                	jg     c000666b <iso_read+0x99>
c0006666:	89 ce                	mov    esi,ecx
c0006668:	c1 fe 0b             	sar    esi,0xb
c000666b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000666f:	89 f3                	mov    ebx,esi
c0006671:	52                   	push   edx
c0006672:	56                   	push   esi
c0006673:	50                   	push   eax
c0006674:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006678:	c1 e3 0b             	shl    ebx,0xb
c000667b:	e8 23 fb ff ff       	call   c00061a3 <isoReadDiscSector>
c0006680:	83 c4 10             	add    esp,0x10
c0006683:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006687:	85 c0                	test   eax,eax
c0006689:	7f 3d                	jg     c00066c8 <iso_read+0xf6>
c000668b:	e9 52 ff ff ff       	jmp    c00065e2 <iso_read+0x10>
c0006690:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006694:	39 d9                	cmp    ecx,ebx
c0006696:	0f 4e d9             	cmovle ebx,ecx
c0006699:	e8 97 fb ff ff       	call   c0006235 <bdread>
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 88 3c ff ff ff    	js     c00065e2 <iso_read+0x10>
c00066a6:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c00066ad:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00066b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066c0:	89 d9                	mov    ecx,ebx
c00066c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066c8:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066cc:	01 da                	add    edx,ebx
c00066ce:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066d4:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066d8:	e9 28 ff ff ff       	jmp    c0006605 <iso_read+0x33>
c00066dd:	89 d0                	mov    eax,edx
c00066df:	99                   	cdq    
c00066e0:	83 c4 1c             	add    esp,0x1c
c00066e3:	5b                   	pop    ebx
c00066e4:	5e                   	pop    esi
c00066e5:	5f                   	pop    edi
c00066e6:	5d                   	pop    ebp
c00066e7:	c3                   	ret    

c00066e8 <iso_seek>:
c00066e8:	55                   	push   ebp
c00066e9:	83 c8 ff             	or     eax,0xffffffff
c00066ec:	57                   	push   edi
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	56                   	push   esi
c00066f0:	53                   	push   ebx
c00066f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066f5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066f9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066fd:	83 fe 0f             	cmp    esi,0xf
c0006700:	7f 65                	jg     c0006767 <iso_seek+0x7f>
c0006702:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006708:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c000670f:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c0006715:	74 50                	je     c0006767 <iso_seek+0x7f>
c0006717:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c000671e:	75 47                	jne    c0006767 <iso_seek+0x7f>
c0006720:	83 fb 01             	cmp    ebx,0x1
c0006723:	74 0e                	je     c0006733 <iso_seek+0x4b>
c0006725:	83 fb 02             	cmp    ebx,0x2
c0006728:	74 0e                	je     c0006738 <iso_seek+0x50>
c000672a:	85 db                	test   ebx,ebx
c000672c:	75 39                	jne    c0006767 <iso_seek+0x7f>
c000672e:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006731:	eb 0d                	jmp    c0006740 <iso_seek+0x58>
c0006733:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006736:	eb 08                	jmp    c0006740 <iso_seek+0x58>
c0006738:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000673b:	01 f8                	add    eax,edi
c000673d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006740:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006746:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000674c:	05 40 55 02 c0       	add    eax,0xc0025540
c0006751:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006754:	76 03                	jbe    c0006759 <iso_seek+0x71>
c0006756:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006759:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000675f:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006765:	31 d2                	xor    edx,edx
c0006767:	5b                   	pop    ebx
c0006768:	5e                   	pop    esi
c0006769:	5f                   	pop    edi
c000676a:	5d                   	pop    ebp
c000676b:	c3                   	ret    

c000676c <iso_tell>:
c000676c:	53                   	push   ebx
c000676d:	83 c8 ff             	or     eax,0xffffffff
c0006770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006774:	89 c2                	mov    edx,eax
c0006776:	83 f9 0f             	cmp    ecx,0xf
c0006779:	7f 20                	jg     c000679b <iso_tell+0x2f>
c000677b:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006781:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c0006788:	74 11                	je     c000679b <iso_tell+0x2f>
c000678a:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006791:	75 08                	jne    c000679b <iso_tell+0x2f>
c0006793:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c0006799:	31 d2                	xor    edx,edx
c000679b:	5b                   	pop    ebx
c000679c:	c3                   	ret    

c000679d <iso_total>:
c000679d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067a1:	83 c8 ff             	or     eax,0xffffffff
c00067a4:	83 fa 0f             	cmp    edx,0xf
c00067a7:	7f 1e                	jg     c00067c7 <iso_total+0x2a>
c00067a9:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00067af:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c00067b6:	74 0f                	je     c00067c7 <iso_total+0x2a>
c00067b8:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067bf:	75 06                	jne    c00067c7 <iso_total+0x2a>
c00067c1:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067c7:	c3                   	ret    

c00067c8 <fn_postprocess>:
c00067c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067cc:	89 d0                	mov    eax,edx
c00067ce:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067d1:	85 c9                	test   ecx,ecx
c00067d3:	74 08                	je     c00067dd <fn_postprocess+0x15>
c00067d5:	83 f9 3b             	cmp    ecx,0x3b
c00067d8:	74 03                	je     c00067dd <fn_postprocess+0x15>
c00067da:	40                   	inc    eax
c00067db:	eb f1                	jmp    c00067ce <fn_postprocess+0x6>
c00067dd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067e0:	39 d0                	cmp    eax,edx
c00067e2:	76 0a                	jbe    c00067ee <fn_postprocess+0x26>
c00067e4:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067e8:	75 04                	jne    c00067ee <fn_postprocess+0x26>
c00067ea:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067ee:	c3                   	ret    

c00067ef <iso_readdir>:
c00067ef:	55                   	push   ebp
c00067f0:	57                   	push   edi
c00067f1:	56                   	push   esi
c00067f2:	53                   	push   ebx
c00067f3:	83 ec 1c             	sub    esp,0x1c
c00067f6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067fa:	83 fb 0f             	cmp    ebx,0xf
c00067fd:	7f 28                	jg     c0006827 <iso_readdir+0x38>
c00067ff:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006805:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c000680c:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c0006812:	74 13                	je     c0006827 <iso_readdir+0x38>
c0006814:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006818:	74 0d                	je     c0006827 <iso_readdir+0x38>
c000681a:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006821:	0f 84 b1 00 00 00    	je     c00068d8 <iso_readdir+0xe9>
c0006827:	83 ec 0c             	sub    esp,0xc
c000682a:	68 80 05 02 c0       	push   0xc0020580
c000682f:	e8 94 36 01 00       	call   c0019ec8 <iso_kprintf>
c0006834:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006837:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000683d:	e8 a2 36 01 00       	call   c0019ee4 <iso_kprintfd>
c0006842:	c7 04 24 85 05 02 c0 	mov    DWORD PTR [esp],0xc0020585
c0006849:	e8 7a 36 01 00       	call   c0019ec8 <iso_kprintf>
c000684e:	58                   	pop    eax
c000684f:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006855:	e8 8a 36 01 00       	call   c0019ee4 <iso_kprintfd>
c000685a:	c7 04 24 8b 05 02 c0 	mov    DWORD PTR [esp],0xc002058b
c0006861:	e8 62 36 01 00       	call   c0019ec8 <iso_kprintf>
c0006866:	58                   	pop    eax
c0006867:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c000686d:	e8 72 36 01 00       	call   c0019ee4 <iso_kprintfd>
c0006872:	c7 04 24 91 05 02 c0 	mov    DWORD PTR [esp],0xc0020591
c0006879:	e8 4a 36 01 00       	call   c0019ec8 <iso_kprintf>
c000687e:	58                   	pop    eax
c000687f:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006885:	e8 5a 36 01 00       	call   c0019ee4 <iso_kprintfd>
c000688a:	83 c4 10             	add    esp,0x10
c000688d:	eb 42                	jmp    c00068d1 <iso_readdir+0xe2>
c000688f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006892:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c0006899:	89 d1                	mov    ecx,edx
c000689b:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00068a1:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00068a5:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00068a8:	75 35                	jne    c00068df <iso_readdir+0xf0>
c00068aa:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00068b0:	81 c2 00 08 00 00    	add    edx,0x800
c00068b6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00068b9:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00068bc:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068bf:	73 1e                	jae    c00068df <iso_readdir+0xf0>
c00068c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00068c3:	c1 ea 0b             	shr    edx,0xb
c00068c6:	01 d0                	add    eax,edx
c00068c8:	e8 5f f9 ff ff       	call   c000622c <biread>
c00068cd:	85 c0                	test   eax,eax
c00068cf:	79 be                	jns    c000688f <iso_readdir+0xa0>
c00068d1:	31 c0                	xor    eax,eax
c00068d3:	e9 6a 01 00 00       	jmp    c0006a42 <iso_readdir+0x253>
c00068d8:	31 f6                	xor    esi,esi
c00068da:	83 c8 ff             	or     eax,0xffffffff
c00068dd:	eb da                	jmp    c00068b9 <iso_readdir+0xca>
c00068df:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068e5:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068eb:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068f1:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068f4:	73 db                	jae    c00068d1 <iso_readdir+0xe2>
c00068f6:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068fa:	75 34                	jne    c0006930 <iso_readdir+0x141>
c00068fc:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006900:	75 2e                	jne    c0006930 <iso_readdir+0x141>
c0006902:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006905:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000690c:	01 f9                	add    ecx,edi
c000690e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006911:	89 c8                	mov    eax,ecx
c0006913:	25 ff 07 00 00       	and    eax,0x7ff
c0006918:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c000691d:	01 c8                	add    eax,ecx
c000691f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006922:	25 ff 07 00 00       	and    eax,0x7ff
c0006927:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000692b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000692e:	74 a1                	je     c00068d1 <iso_readdir+0xe2>
c0006930:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006936:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000693a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006941:	8d 56 21             	lea    edx,[esi+0x21]
c0006944:	8d af 58 55 02 c0    	lea    ebp,[edi-0x3ffdaaa8]
c000694a:	74 0c                	je     c0006958 <iso_readdir+0x169>
c000694c:	89 e8                	mov    eax,ebp
c000694e:	e8 27 f6 ff ff       	call   c0005f7a <ucs2utfn>
c0006953:	e9 b1 00 00 00       	jmp    c0006a09 <iso_readdir+0x21a>
c0006958:	50                   	push   eax
c0006959:	51                   	push   ecx
c000695a:	52                   	push   edx
c000695b:	55                   	push   ebp
c000695c:	e8 2f 9d ff ff       	call   c0000690 <strncpy>
c0006961:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006965:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006968:	c6 84 07 58 55 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdaaa8],0x0
c0006970:	e8 53 fe ff ff       	call   c00067c8 <fn_postprocess>
c0006975:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000697f:	89 d1                	mov    ecx,edx
c0006981:	29 d0                	sub    eax,edx
c0006983:	80 e1 01             	and    cl,0x1
c0006986:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c000698a:	74 05                	je     c0006991 <iso_readdir+0x1a2>
c000698c:	83 e8 21             	sub    eax,0x21
c000698f:	eb 04                	jmp    c0006995 <iso_readdir+0x1a6>
c0006991:	42                   	inc    edx
c0006992:	83 e8 22             	sub    eax,0x22
c0006995:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006999:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000699f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00069a3:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c00069a8:	7e 5f                	jle    c0006a09 <iso_readdir+0x21a>
c00069aa:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c00069ad:	48                   	dec    eax
c00069ae:	3c 01                	cmp    al,0x1
c00069b0:	77 57                	ja     c0006a09 <iso_readdir+0x21a>
c00069b2:	51                   	push   ecx
c00069b3:	6a 02                	push   0x2
c00069b5:	68 7d 05 02 c0       	push   0xc002057d
c00069ba:	52                   	push   edx
c00069bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00069bf:	e8 4c 9e ff ff       	call   c0000810 <strncmp>
c00069c4:	83 c4 10             	add    esp,0x10
c00069c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00069cb:	85 c0                	test   eax,eax
c00069cd:	75 2e                	jne    c00069fd <iso_readdir+0x20e>
c00069cf:	50                   	push   eax
c00069d0:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069d4:	83 e8 05             	sub    eax,0x5
c00069d7:	50                   	push   eax
c00069d8:	8d 42 05             	lea    eax,[edx+0x5]
c00069db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00069df:	50                   	push   eax
c00069e0:	55                   	push   ebp
c00069e1:	e8 aa 9c ff ff       	call   c0000690 <strncpy>
c00069e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00069ea:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00069f5:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069fd:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006a01:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006a05:	01 c2                	add    edx,eax
c0006a07:	eb 9a                	jmp    c00069a3 <iso_readdir+0x1b4>
c0006a09:	83 c8 ff             	or     eax,0xffffffff
c0006a0c:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006a10:	89 c2                	mov    edx,eax
c0006a12:	75 0a                	jne    c0006a1e <iso_readdir+0x22f>
c0006a14:	8d 46 0a             	lea    eax,[esi+0xa]
c0006a17:	e8 0e f6 ff ff       	call   c000602a <iso_733>
c0006a1c:	31 d2                	xor    edx,edx
c0006a1e:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a24:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a2a:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a30:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a36:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a39:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a3c:	8d 87 50 55 02 c0    	lea    eax,[edi-0x3ffdaab0]
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	5b                   	pop    ebx
c0006a46:	5e                   	pop    esi
c0006a47:	5f                   	pop    edi
c0006a48:	5d                   	pop    ebp
c0006a49:	c3                   	ret    

c0006a4a <iso_reset>:
c0006a4a:	83 ec 18             	sub    esp,0x18
c0006a4d:	68 9a 05 02 c0       	push   0xc002059a
c0006a52:	e8 71 34 01 00       	call   c0019ec8 <iso_kprintf>
c0006a57:	e8 1b f7 ff ff       	call   c0006177 <iso_break_all>
c0006a5c:	e8 14 f7 ff ff       	call   c0006175 <bclear>
c0006a61:	31 c0                	xor    eax,eax
c0006a63:	83 c4 1c             	add    esp,0x1c
c0006a66:	c3                   	ret    

c0006a67 <init_percd>:
c0006a67:	57                   	push   edi
c0006a68:	56                   	push   esi
c0006a69:	53                   	push   ebx
c0006a6a:	bb 01 00 00 00       	mov    ebx,0x1
c0006a6f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006a73:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a78:	e8 cd ff ff ff       	call   c0006a4a <iso_reset>
c0006a7d:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a87:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a8c:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a90:	e8 97 f7 ff ff       	call   c000622c <biread>
c0006a95:	85 c0                	test   eax,eax
c0006a97:	89 c6                	mov    esi,eax
c0006a99:	0f 88 ba 00 00 00    	js     c0006b59 <init_percd+0xf2>
c0006a9f:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006aa6:	52                   	push   edx
c0006aa7:	6a 06                	push   0x6
c0006aa9:	68 a5 05 02 c0       	push   0xc00205a5
c0006aae:	83 c0 04             	add    eax,0x4
c0006ab1:	50                   	push   eax
c0006ab2:	e8 c9 98 ff ff       	call   c0000380 <memcmp>
c0006ab7:	83 c4 10             	add    esp,0x10
c0006aba:	85 c0                	test   eax,eax
c0006abc:	74 08                	je     c0006ac6 <init_percd+0x5f>
c0006abe:	43                   	inc    ebx
c0006abf:	83 fb 04             	cmp    ebx,0x4
c0006ac2:	75 c3                	jne    c0006a87 <init_percd+0x20>
c0006ac4:	eb 1a                	jmp    c0006ae0 <init_percd+0x79>
c0006ac6:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006acd:	83 c0 5c             	add    eax,0x5c
c0006ad0:	e8 22 f5 ff ff       	call   c0005ff7 <isjoliet>
c0006ad5:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ada:	85 c0                	test   eax,eax
c0006adc:	74 e0                	je     c0006abe <init_percd+0x57>
c0006ade:	eb 3e                	jmp    c0006b1e <init_percd+0xb7>
c0006ae0:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ae7:	75 35                	jne    c0006b1e <init_percd+0xb7>
c0006ae9:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006aee:	83 c0 10             	add    eax,0x10
c0006af1:	e8 36 f7 ff ff       	call   c000622c <biread>
c0006af6:	85 c0                	test   eax,eax
c0006af8:	89 c6                	mov    esi,eax
c0006afa:	78 5f                	js     c0006b5b <init_percd+0xf4>
c0006afc:	50                   	push   eax
c0006afd:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	83 cb ff             	or     ebx,0xffffffff
c0006b07:	6a 06                	push   0x6
c0006b09:	68 ac 05 02 c0       	push   0xc00205ac
c0006b0e:	83 c0 04             	add    eax,0x4
c0006b11:	50                   	push   eax
c0006b12:	e8 69 98 ff ff       	call   c0000380 <memcmp>
c0006b17:	83 c4 10             	add    esp,0x10
c0006b1a:	85 c0                	test   eax,eax
c0006b1c:	75 3d                	jne    c0006b5b <init_percd+0xf4>
c0006b1e:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b25:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b2a:	b9 22 00 00 00       	mov    ecx,0x22
c0006b2f:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b35:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b37:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	e8 e7 f4 ff ff       	call   c000602a <iso_733>
c0006b43:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b48:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b4d:	e8 d8 f4 ff ff       	call   c000602a <iso_733>
c0006b52:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b57:	eb 02                	jmp    c0006b5b <init_percd+0xf4>
c0006b59:	89 c3                	mov    ebx,eax
c0006b5b:	89 d8                	mov    eax,ebx
c0006b5d:	5b                   	pop    ebx
c0006b5e:	5e                   	pop    esi
c0006b5f:	5f                   	pop    edi
c0006b60:	c3                   	ret    

c0006b61 <iso_ioctl>:
c0006b61:	83 ec 18             	sub    esp,0x18
c0006b64:	68 b3 05 02 c0       	push   0xc00205b3
c0006b69:	e8 5a 33 01 00       	call   c0019ec8 <iso_kprintf>
c0006b6e:	e8 d7 fe ff ff       	call   c0006a4a <iso_reset>
c0006b73:	31 c0                	xor    eax,eax
c0006b75:	83 c4 1c             	add    esp,0x1c
c0006b78:	c3                   	ret    

c0006b79 <fs_iso9660_init>:
c0006b79:	53                   	push   ebx
c0006b7a:	31 db                	xor    ebx,ebx
c0006b7c:	83 ec 14             	sub    esp,0x14
c0006b7f:	68 be 05 02 c0       	push   0xc00205be
c0006b84:	e8 3f 33 01 00       	call   c0019ec8 <iso_kprintf>
c0006b89:	83 c4 0c             	add    esp,0xc
c0006b8c:	68 40 09 00 00       	push   0x940
c0006b91:	6a 00                	push   0x0
c0006b93:	68 40 55 02 c0       	push   0xc0025540
c0006b98:	e8 53 99 ff ff       	call   c00004f0 <memset>
c0006b9d:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006ba7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bae:	e8 20 0f 00 00       	call   c0007ad3 <malloc>
c0006bb3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006bba:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006bbf:	e8 0f 0f 00 00       	call   c0007ad3 <malloc>
c0006bc4:	83 c4 10             	add    esp,0x10
c0006bc7:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	68 04 08 00 00       	push   0x804
c0006bd4:	e8 fa 0e 00 00       	call   c0007ad3 <malloc>
c0006bd9:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006be0:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be6:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bed:	e8 e1 0e 00 00       	call   c0007ad3 <malloc>
c0006bf2:	83 c4 10             	add    esp,0x10
c0006bf5:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bfc:	43                   	inc    ebx
c0006bfd:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006c03:	83 fb 10             	cmp    ebx,0x10
c0006c06:	75 c4                	jne    c0006bcc <fs_iso9660_init+0x53>
c0006c08:	83 c4 08             	add    esp,0x8
c0006c0b:	31 c0                	xor    eax,eax
c0006c0d:	5b                   	pop    ebx
c0006c0e:	c3                   	ret    

c0006c0f <fs_iso9660_shutdown>:
c0006c0f:	53                   	push   ebx
c0006c10:	31 db                	xor    ebx,ebx
c0006c12:	83 ec 08             	sub    esp,0x8
c0006c15:	83 ec 0c             	sub    esp,0xc
c0006c18:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006c1f:	e8 bf 0e 00 00       	call   c0007ae3 <free>
c0006c24:	58                   	pop    eax
c0006c25:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c2c:	43                   	inc    ebx
c0006c2d:	e8 b1 0e 00 00       	call   c0007ae3 <free>
c0006c32:	83 c4 10             	add    esp,0x10
c0006c35:	83 fb 10             	cmp    ebx,0x10
c0006c38:	75 db                	jne    c0006c15 <fs_iso9660_shutdown+0x6>
c0006c3a:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c3f:	85 c0                	test   eax,eax
c0006c41:	74 0c                	je     c0006c4f <fs_iso9660_shutdown+0x40>
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	50                   	push   eax
c0006c47:	e8 97 0e 00 00       	call   c0007ae3 <free>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c54:	85 c0                	test   eax,eax
c0006c56:	74 0c                	je     c0006c64 <fs_iso9660_shutdown+0x55>
c0006c58:	83 ec 0c             	sub    esp,0xc
c0006c5b:	50                   	push   eax
c0006c5c:	e8 82 0e 00 00       	call   c0007ae3 <free>
c0006c61:	83 c4 10             	add    esp,0x10
c0006c64:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c6e:	31 c0                	xor    eax,eax
c0006c70:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c7a:	83 c4 08             	add    esp,0x8
c0006c7d:	5b                   	pop    ebx
c0006c7e:	c3                   	ret    
c0006c7f:	90                   	nop

c0006c80 <Computer::close(int, int, void*)>:
c0006c80:	57                   	push   edi
c0006c81:	56                   	push   esi
c0006c82:	53                   	push   ebx
c0006c83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c87:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c8f:	e8 06 9e 00 00       	call   c0010a9a <KeExecuteAtexit()>
c0006c94:	83 ec 0c             	sub    esp,0xc
c0006c97:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c9d:	50                   	push   eax
c0006c9e:	e8 2b 5b 00 00       	call   c000c7ce <Device::closeAll()>
c0006ca3:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006ca9:	83 c4 10             	add    esp,0x10
c0006cac:	8b 10                	mov    edx,DWORD PTR [eax]
c0006cae:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006cb2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006cba:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006cc2:	5b                   	pop    ebx
c0006cc3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006cc6:	5e                   	pop    esi
c0006cc7:	5f                   	pop    edi
c0006cc8:	ff e0                	jmp    eax

c0006cca <Krnl::firstTask()>:
c0006cca:	53                   	push   ebx
c0006ccb:	83 ec 14             	sub    esp,0x14
c0006cce:	fb                   	sti    
c0006ccf:	68 cf 05 02 c0       	push   0xc00205cf
c0006cd4:	e8 a0 9e 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0006cd9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006ce0:	e8 ee 0d 00 00       	call   c0007ad3 <malloc>
c0006ce5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cec:	89 c3                	mov    ebx,eax
c0006cee:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cf3:	50                   	push   eax
c0006cf4:	68 e8 05 02 c0       	push   0xc00205e8
c0006cf9:	6a 01                	push   0x1
c0006cfb:	53                   	push   ebx
c0006cfc:	e8 df e9 00 00       	call   c00156e0 <Process::Process(bool, char const*, Process*, char**)>
c0006d01:	83 c4 20             	add    esp,0x20
c0006d04:	68 ff 00 00 00       	push   0xff
c0006d09:	6a 00                	push   0x0
c0006d0b:	68 1d 75 00 c0       	push   0xc000751d
c0006d10:	53                   	push   ebx
c0006d11:	e8 ee eb 00 00       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c0006d16:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006d1c:	6a 7a                	push   0x7a
c0006d1e:	6a 00                	push   0x0
c0006d20:	68 c8 63 01 c0       	push   0xc00163c8
c0006d25:	52                   	push   edx
c0006d26:	e8 d9 eb 00 00       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c0006d2b:	83 c4 14             	add    esp,0x14
c0006d2e:	68 e4 06 02 c0       	push   0xc00206e4
c0006d33:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d38:	e8 3c 9e 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0006d3d:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d44:	e8 bb a6 00 00       	call   c0011404 <KeInitRand()>
c0006d49:	e8 9d fa 00 00       	call   c00167eb <Vm::initialise8086()>
c0006d4e:	e8 2f 48 00 00       	call   c000b582 <Fs::initVFS()>
c0006d53:	c7 04 24 f5 05 02 c0 	mov    DWORD PTR [esp],0xc00205f5
c0006d5a:	e8 1a 9e 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0006d5f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d64:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d6c:	6a 00                	push   0x0
c0006d6e:	6a 00                	push   0x0
c0006d70:	6a 00                	push   0x0
c0006d72:	50                   	push   eax
c0006d73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d76:	83 c4 14             	add    esp,0x14
c0006d79:	68 e4 06 02 c0       	push   0xc00206e4
c0006d7e:	e8 f6 9d 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0006d83:	e8 d7 44 00 00       	call   c000b25f <KeInitialiseSymlinks()>
c0006d88:	e8 23 a3 00 00       	call   c00110b0 <KeLoadSystemEnv()>
c0006d8d:	e8 80 a5 00 00       	call   c0011312 <KeSetupPowerManager()>
c0006d92:	83 c4 0c             	add    esp,0xc
c0006d95:	6a 3a                	push   0x3a
c0006d97:	68 0f 06 02 c0       	push   0xc002060f
c0006d9c:	68 18 06 02 c0       	push   0xc0020618
c0006da1:	e8 68 cb 00 00       	call   c001390e <Reg::readIntWithDefault(char*, char*, int)>
c0006da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0006da9:	e8 7a 53 00 00       	call   c000c128 <User::loadClockSettings(int)>
c0006dae:	c7 04 24 08 07 02 c0 	mov    DWORD PTR [esp],0xc0020708
c0006db5:	e8 bf 9d 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0006dba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006dbf:	59                   	pop    ecx
c0006dc0:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006dc6:	53                   	push   ebx
c0006dc7:	e8 00 5a 00 00       	call   c000c7cc <Device::loadDriversForAll()>
c0006dcc:	c7 04 24 20 06 02 c0 	mov    DWORD PTR [esp],0xc0020620
c0006dd3:	e8 a1 9d 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0006dd8:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dde:	58                   	pop    eax
c0006ddf:	5a                   	pop    edx
c0006de0:	6a 01                	push   0x1
c0006de2:	68 31 06 02 c0       	push   0xc0020631
c0006de7:	e8 f8 e2 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c0006dec:	59                   	pop    ecx
c0006ded:	5a                   	pop    edx
c0006dee:	53                   	push   ebx
c0006def:	50                   	push   eax
c0006df0:	e8 2f e5 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	83 ec 0c             	sub    esp,0xc
c0006dfb:	6a 02                	push   0x2
c0006dfd:	e8 4e ef 00 00       	call   c0015d50 <blockTask(TaskState)>
c0006e02:	83 c4 10             	add    esp,0x10
c0006e05:	eb f1                	jmp    c0006df8 <Krnl::firstTask()+0x12e>
c0006e07:	90                   	nop

c0006e08 <Computer::Computer()>:
c0006e08:	83 ec 0c             	sub    esp,0xc
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	83 ec 08             	sub    esp,0x8
c0006e12:	68 4d 06 02 c0       	push   0xc002064d
c0006e17:	50                   	push   eax
c0006e18:	e8 2b 5a 00 00       	call   c000c848 <Device::Device(char const*)>
c0006e1d:	83 c4 10             	add    esp,0x10
c0006e20:	ba 54 07 02 c0       	mov    edx,0xc0020754
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	89 10                	mov    DWORD PTR [eax],edx
c0006e2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e51:	83 ca 04             	or     edx,0x4
c0006e54:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e64:	0f b6 d0             	movzx  edx,al
c0006e67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e7c:	0f b6 d0             	movzx  edx,al
c0006e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e83:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e92:	8d 50 01             	lea    edx,[eax+0x1]
c0006e95:	88 d1                	mov    cl,dl
c0006e97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e9b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006ea1:	0f b6 d0             	movzx  edx,al
c0006ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006eac:	83 e1 3f             	and    ecx,0x3f
c0006eaf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006eb3:	90                   	nop
c0006eb4:	83 c4 0c             	add    esp,0xc
c0006eb7:	c3                   	ret    

c0006eb8 <Computer::setBootMessage(char const*)>:
c0006eb8:	c3                   	ret    
c0006eb9:	90                   	nop

c0006eba <Computer::detectFeatures()>:
c0006eba:	55                   	push   ebp
c0006ebb:	57                   	push   edi
c0006ebc:	56                   	push   esi
c0006ebd:	53                   	push   ebx
c0006ebe:	83 ec 1c             	sub    esp,0x1c
c0006ec1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ec5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ecb:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ed1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ed7:	e8 1d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006edc:	31 d2                	xor    edx,edx
c0006ede:	85 c0                	test   eax,eax
c0006ee0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee6:	0f 95 c2             	setne  dl
c0006ee9:	d1 e2                	shl    edx,1
c0006eeb:	83 e0 fd             	and    eax,0xfffffffd
c0006eee:	09 d0                	or     eax,edx
c0006ef0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef6:	a8 02                	test   al,0x2
c0006ef8:	75 51                	jne    c0006f4b <Computer::detectFeatures()+0x91>
c0006efa:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006f01:	74 0f                	je     c0006f12 <Computer::detectFeatures()+0x58>
c0006f03:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f09:	83 e0 fb             	and    eax,0xfffffffb
c0006f0c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f12:	e8 bf 7f 01 00       	call   c001eed6 <x87Detect>
c0006f17:	83 e0 01             	and    eax,0x1
c0006f1a:	c1 e0 04             	shl    eax,0x4
c0006f1d:	89 c2                	mov    edx,eax
c0006f1f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f25:	83 e0 ef             	and    eax,0xffffffef
c0006f28:	09 d0                	or     eax,edx
c0006f2a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f30:	a8 10                	test   al,0x10
c0006f32:	88 c2                	mov    dl,al
c0006f34:	0f 85 33 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1b3>
c0006f3a:	80 e2 80             	and    dl,0x80
c0006f3d:	0f 85 4c 01 00 00    	jne    c000708f <Computer::detectFeatures()+0x1d5>
c0006f43:	83 c4 1c             	add    esp,0x1c
c0006f46:	5b                   	pop    ebx
c0006f47:	5e                   	pop    esi
c0006f48:	5f                   	pop    edi
c0006f49:	5d                   	pop    ebp
c0006f4a:	c3                   	ret    
c0006f4b:	83 ec 0c             	sub    esp,0xc
c0006f4e:	6a 20                	push   0x20
c0006f50:	e8 5d 90 00 00       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f55:	83 e0 01             	and    eax,0x1
c0006f58:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f5f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f65:	83 e0 f7             	and    eax,0xfffffff7
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f70:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f77:	e8 36 90 00 00       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	83 e2 01             	and    edx,0x1
c0006f87:	83 e0 fe             	and    eax,0xfffffffe
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f99:	e8 14 90 00 00       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	89 c2                	mov    edx,eax
c0006fa0:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006fa6:	c1 e2 07             	shl    edx,0x7
c0006fa9:	83 e0 7f             	and    eax,0x7f
c0006fac:	09 d0                	or     eax,edx
c0006fae:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fb4:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006fbb:	e8 f2 8f 00 00       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0006fc0:	83 c4 10             	add    esp,0x10
c0006fc3:	83 e0 01             	and    eax,0x1
c0006fc6:	c1 e0 05             	shl    eax,0x5
c0006fc9:	89 c2                	mov    edx,eax
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	83 e0 df             	and    eax,0xffffffdf
c0006fd4:	09 d0                	or     eax,edx
c0006fd6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fe0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe6:	0f 84 c9 00 00 00    	je     c00070b5 <Computer::detectFeatures()+0x1fb>
c0006fec:	83 e0 fe             	and    eax,0xfffffffe
c0006fef:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ff5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ffb:	89 c2                	mov    edx,eax
c0006ffd:	83 e2 09             	and    edx,0x9
c0007000:	83 fa 01             	cmp    edx,0x1
c0007003:	75 09                	jne    c000700e <Computer::detectFeatures()+0x154>
c0007005:	83 e0 fe             	and    eax,0xfffffffe
c0007008:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c000700e:	83 ec 0c             	sub    esp,0xc
c0007011:	8d 44 24 18          	lea    eax,[esp+0x18]
c0007015:	50                   	push   eax
c0007016:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000701a:	55                   	push   ebp
c000701b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000701f:	57                   	push   edi
c0007020:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007024:	56                   	push   esi
c0007025:	68 00 00 00 80       	push   0x80000000
c000702a:	e8 ff 8e 00 00       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702f:	83 c4 20             	add    esp,0x20
c0007032:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007039:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000703d:	0f 86 b7 fe ff ff    	jbe    c0006efa <Computer::detectFeatures()+0x40>
c0007043:	83 ec 0c             	sub    esp,0xc
c0007046:	50                   	push   eax
c0007047:	55                   	push   ebp
c0007048:	57                   	push   edi
c0007049:	56                   	push   esi
c000704a:	68 01 00 00 80       	push   0x80000001
c000704f:	e8 da 8e 00 00       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007054:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000705a:	83 c4 20             	add    esp,0x20
c000705d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007062:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007068:	e9 8d fe ff ff       	jmp    c0006efa <Computer::detectFeatures()+0x40>
c000706d:	e8 1e 7e 01 00       	call   c001ee90 <absolutelyNoChanceInHell>
c0007072:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007078:	83 e2 7f             	and    edx,0x7f
c000707b:	c1 e0 07             	shl    eax,0x7
c000707e:	09 c2                	or     edx,eax
c0007080:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007086:	80 e2 80             	and    dl,0x80
c0007089:	0f 84 b4 fe ff ff    	je     c0006f43 <Computer::detectFeatures()+0x89>
c000708f:	e8 6c 7a 01 00       	call   c001eb00 <avxDetect>
c0007094:	83 e0 01             	and    eax,0x1
c0007097:	c1 e0 05             	shl    eax,0x5
c000709a:	89 c2                	mov    edx,eax
c000709c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00070a2:	83 e0 df             	and    eax,0xffffffdf
c00070a5:	09 d0                	or     eax,edx
c00070a7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00070ad:	83 c4 1c             	add    esp,0x1c
c00070b0:	5b                   	pop    ebx
c00070b1:	5e                   	pop    esi
c00070b2:	5f                   	pop    edi
c00070b3:	5d                   	pop    ebp
c00070b4:	c3                   	ret    
c00070b5:	83 ec 0c             	sub    esp,0xc
c00070b8:	68 00 02 00 00       	push   0x200
c00070bd:	e8 f0 8e 00 00       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c00070c2:	83 c4 10             	add    esp,0x10
c00070c5:	89 c2                	mov    edx,eax
c00070c7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070cd:	83 e2 01             	and    edx,0x1
c00070d0:	83 e0 fe             	and    eax,0xfffffffe
c00070d3:	09 d0                	or     eax,edx
c00070d5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070db:	e9 15 ff ff ff       	jmp    c0006ff5 <Computer::detectFeatures()+0x13b>

c00070e0 <Computer::displayFeatures()>:
c00070e0:	c3                   	ret    
c00070e1:	90                   	nop

c00070e2 <Computer::rdmsr(unsigned int)>:
c00070e2:	83 ec 0c             	sub    esp,0xc
c00070e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070e9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070f0:	74 0a                	je     c00070fc <Computer::rdmsr(unsigned int)+0x1a>
c00070f2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070f6:	0f 32                	rdmsr  
c00070f8:	83 c4 0c             	add    esp,0xc
c00070fb:	c3                   	ret    
c00070fc:	83 ec 0c             	sub    esp,0xc
c00070ff:	68 56 06 02 c0       	push   0xc0020656
c0007104:	e8 44 a1 00 00       	call   c001124d <KePanic(char const*)>
c0007109:	83 c4 10             	add    esp,0x10
c000710c:	eb e4                	jmp    c00070f2 <Computer::rdmsr(unsigned int)+0x10>

c000710e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000710e:	57                   	push   edi
c000710f:	56                   	push   esi
c0007110:	83 ec 04             	sub    esp,0x4
c0007113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007117:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000711b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000711f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007126:	74 10                	je     c0007138 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007128:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000712c:	89 f0                	mov    eax,esi
c000712e:	89 fa                	mov    edx,edi
c0007130:	0f 30                	wrmsr  
c0007132:	83 c4 04             	add    esp,0x4
c0007135:	5e                   	pop    esi
c0007136:	5f                   	pop    edi
c0007137:	c3                   	ret    
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	68 5c 06 02 c0       	push   0xc002065c
c0007140:	e8 08 a1 00 00       	call   c001124d <KePanic(char const*)>
c0007145:	83 c4 10             	add    esp,0x10
c0007148:	eb de                	jmp    c0007128 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000714a <Computer::shutdown()>:
c000714a:	83 ec 0c             	sub    esp,0xc
c000714d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007151:	8b 10                	mov    edx,DWORD PTR [eax]
c0007153:	6a 00                	push   0x0
c0007155:	6a 00                	push   0x0
c0007157:	6a 00                	push   0x0
c0007159:	50                   	push   eax
c000715a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000715d:	83 c4 1c             	add    esp,0x1c
c0007160:	c3                   	ret    
c0007161:	90                   	nop

c0007162 <Computer::restart()>:
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007169:	8b 10                	mov    edx,DWORD PTR [eax]
c000716b:	6a 00                	push   0x0
c000716d:	6a 00                	push   0x0
c000716f:	6a 01                	push   0x1
c0007171:	50                   	push   eax
c0007172:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007175:	83 c4 1c             	add    esp,0x1c
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::sleep()>:
c000717a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000717e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007184:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007188:	e9 f7 88 00 00       	jmp    c000fa84 <ACPI::sleep()>
c000718d:	90                   	nop

c000718e <Computer::nmiEnabled()>:
c000718e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007192:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007198:	c3                   	ret    
c0007199:	90                   	nop

c000719a <Computer::readCMOS(unsigned char)>:
c000719a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000719e:	31 d2                	xor    edx,edx
c00071a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a4:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00071ab:	75 02                	jne    c00071af <Computer::readCMOS(unsigned char)+0x15>
c00071ad:	b2 80                	mov    dl,0x80
c00071af:	09 d0                	or     eax,edx
c00071b1:	e6 70                	out    0x70,al
c00071b3:	e4 71                	in     al,0x71
c00071b5:	c3                   	ret    

c00071b6 <Computer::enableNMI(bool)>:
c00071b6:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c00071ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071be:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071c4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071cc:	eb cc                	jmp    c000719a <Computer::readCMOS(unsigned char)>

c00071ce <Computer::open(int, int, void*)>:
c00071ce:	56                   	push   esi
c00071cf:	53                   	push   ebx
c00071d0:	83 ec 10             	sub    esp,0x10
c00071d3:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071de:	68 62 06 02 c0       	push   0xc0020662
c00071e3:	0f 94 05 20 30 02 c0 	sete   BYTE PTR ds:0xc0023020
c00071ea:	e8 8a 99 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c00071ef:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071f6:	e8 d8 08 00 00       	call   c0007ad3 <malloc>
c00071fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00071fe:	89 c6                	mov    esi,eax
c0007200:	e8 f3 83 00 00       	call   c000f5f8 <ACPI::ACPI()>
c0007205:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000720b:	58                   	pop    eax
c000720c:	5a                   	pop    edx
c000720d:	56                   	push   esi
c000720e:	53                   	push   ebx
c000720f:	e8 9c 54 00 00       	call   c000c6b0 <Device::addChild(Device*)>
c0007214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007217:	e8 9e fc ff ff       	call   c0006eba <Computer::detectFeatures()>
c000721c:	59                   	pop    ecx
c000721d:	5e                   	pop    esi
c000721e:	6a 01                	push   0x1
c0007220:	53                   	push   ebx
c0007221:	e8 90 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c0007226:	c7 04 24 7a 06 02 c0 	mov    DWORD PTR [esp],0xc002067a
c000722d:	e8 47 99 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0007232:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007239:	e8 95 08 00 00       	call   c0007ad3 <malloc>
c000723e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007241:	89 c6                	mov    esi,eax
c0007243:	e8 22 8e 00 00       	call   c001006a <CPU::CPU()>
c0007248:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000724e:	58                   	pop    eax
c000724f:	5a                   	pop    edx
c0007250:	56                   	push   esi
c0007251:	53                   	push   ebx
c0007252:	e8 59 54 00 00       	call   c000c6b0 <Device::addChild(Device*)>
c0007257:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000725d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007261:	8b 10                	mov    edx,DWORD PTR [eax]
c0007263:	51                   	push   ecx
c0007264:	6a 00                	push   0x0
c0007266:	6a 00                	push   0x0
c0007268:	50                   	push   eax
c0007269:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000726c:	83 c4 14             	add    esp,0x14
c000726f:	68 28 07 02 c0       	push   0xc0020728
c0007274:	e8 00 99 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c0007279:	e8 b4 07 01 00       	call   c0017a32 <HalInitialiseCoprocessor()>
c000727e:	c7 04 24 94 06 02 c0 	mov    DWORD PTR [esp],0xc0020694
c0007285:	e8 ef 98 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000728a:	c7 04 24 ca 6c 00 c0 	mov    DWORD PTR [esp],0xc0006cca
c0007291:	e8 96 e7 00 00       	call   c0015a2c <setupMultitasking(void (*)())>
c0007296:	83 c4 14             	add    esp,0x14
c0007299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000729e:	5b                   	pop    ebx
c000729f:	5e                   	pop    esi
c00072a0:	c3                   	ret    
c00072a1:	90                   	nop

c00072a2 <Computer::disableNMI()>:
c00072a2:	6a 00                	push   0x0
c00072a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a8:	50                   	push   eax
c00072a9:	e8 08 ff ff ff       	call   c00071b6 <Computer::enableNMI(bool)>
c00072ae:	5a                   	pop    edx
c00072af:	59                   	pop    ecx
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop

c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00072b2:	53                   	push   ebx
c00072b3:	b2 80                	mov    dl,0x80
c00072b5:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00072b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00072c1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00072c8:	74 02                	je     c00072cc <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c00072ca:	31 d2                	xor    edx,edx
c00072cc:	09 d0                	or     eax,edx
c00072ce:	e6 70                	out    0x70,al
c00072d0:	88 c8                	mov    al,cl
c00072d2:	e6 71                	out    0x71,al
c00072d4:	5b                   	pop    ebx
c00072d5:	c3                   	ret    

c00072d6 <Computer::handleNMI()>:
c00072d6:	56                   	push   esi
c00072d7:	53                   	push   ebx
c00072d8:	83 ec 10             	sub    esp,0x10
c00072db:	e4 92                	in     al,0x92
c00072dd:	89 c6                	mov    esi,eax
c00072df:	e4 61                	in     al,0x61
c00072e1:	68 af 06 02 c0       	push   0xc00206af
c00072e6:	88 c3                	mov    bl,al
c00072e8:	e8 1d 36 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	83 e6 10             	and    esi,0x10
c00072f3:	75 10                	jne    c0007305 <Computer::handleNMI()+0x2f>
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	75 20                	jne    c000731a <Computer::handleNMI()+0x44>
c00072fa:	80 e3 80             	and    bl,0x80
c00072fd:	75 30                	jne    c000732f <Computer::handleNMI()+0x59>
c00072ff:	83 c4 04             	add    esp,0x4
c0007302:	5b                   	pop    ebx
c0007303:	5e                   	pop    esi
c0007304:	c3                   	ret    
c0007305:	83 ec 0c             	sub    esp,0xc
c0007308:	68 c0 06 02 c0       	push   0xc00206c0
c000730d:	e8 3b 9f 00 00       	call   c001124d <KePanic(char const*)>
c0007312:	83 c4 10             	add    esp,0x10
c0007315:	f6 c3 40             	test   bl,0x40
c0007318:	74 e0                	je     c00072fa <Computer::handleNMI()+0x24>
c000731a:	83 ec 0c             	sub    esp,0xc
c000731d:	68 cd 06 02 c0       	push   0xc00206cd
c0007322:	e8 26 9f 00 00       	call   c001124d <KePanic(char const*)>
c0007327:	83 c4 10             	add    esp,0x10
c000732a:	80 e3 80             	and    bl,0x80
c000732d:	74 d0                	je     c00072ff <Computer::handleNMI()+0x29>
c000732f:	c7 44 24 10 d7 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc00206d7
c0007337:	83 c4 04             	add    esp,0x4
c000733a:	5b                   	pop    ebx
c000733b:	5e                   	pop    esi
c000733c:	e9 0c 9f 00 00       	jmp    c001124d <KePanic(char const*)>
c0007341:	90                   	nop

c0007342 <GDTEntry::setBase(unsigned int)>:
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734a:	89 c1                	mov    ecx,eax
c000734c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007350:	c1 e9 10             	shr    ecx,0x10
c0007353:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007356:	c1 e8 18             	shr    eax,0x18
c0007359:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDTEntry::setLimit(unsigned int)>:
c000735e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007362:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007366:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007369:	66 89 01             	mov    WORD PTR [ecx],ax
c000736c:	c1 e8 10             	shr    eax,0x10
c000736f:	83 e0 0f             	and    eax,0xf
c0007372:	83 e2 f0             	and    edx,0xfffffff0
c0007375:	09 d0                	or     eax,edx
c0007377:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000737a:	c3                   	ret    
c000737b:	90                   	nop

c000737c <GDT::GDT()>:
c000737c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007380:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000738a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007390:	90                   	nop
c0007391:	c3                   	ret    

c0007392 <GDT::addEntry(GDTEntry)>:
c0007392:	53                   	push   ebx
c0007393:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007397:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000739f:	8b 02                	mov    eax,DWORD PTR [edx]
c00073a1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00073a5:	8d 48 01             	lea    ecx,[eax+0x1]
c00073a8:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00073ac:	c1 e0 03             	shl    eax,0x3
c00073af:	89 0a                	mov    DWORD PTR [edx],ecx
c00073b1:	5b                   	pop    ebx
c00073b2:	c3                   	ret    
c00073b3:	90                   	nop

c00073b4 <GDT::getNumberOfEntries()>:
c00073b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00073ba:	c3                   	ret    
c00073bb:	90                   	nop

c00073bc <GDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073c2:	83 c0 04             	add    eax,0x4
c00073c5:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073ca:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073d1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073d8:	e9 7d 8f ff ff       	jmp    c000035a <loadGDT>
c00073dd:	90                   	nop

c00073de <GDT::setup()>:
c00073de:	57                   	push   edi
c00073df:	56                   	push   esi
c00073e0:	53                   	push   ebx
c00073e1:	83 ec 30             	sub    esp,0x30
c00073e4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073e8:	6a 00                	push   0x0
c00073ea:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ee:	56                   	push   esi
c00073ef:	e8 4e ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c00073f4:	6a 00                	push   0x0
c00073f6:	56                   	push   esi
c00073f7:	e8 62 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c00073fc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007404:	6a 00                	push   0x0
c0007406:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000740a:	56                   	push   esi
c000740b:	e8 32 ff ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007410:	68 ff ff ff 00       	push   0xffffff
c0007415:	56                   	push   esi
c0007416:	e8 43 ff ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c000741b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000741f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007423:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007428:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000742c:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007431:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007435:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007439:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000743d:	89 f8                	mov    eax,edi
c000743f:	89 fa                	mov    edx,edi
c0007441:	80 e4 f7             	and    ah,0xf7
c0007444:	80 ce 60             	or     dh,0x60
c0007447:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000744b:	89 c7                	mov    edi,eax
c000744d:	80 cc 60             	or     ah,0x60
c0007450:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007454:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000745c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007460:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007464:	83 c4 20             	add    esp,0x20
c0007467:	6a 00                	push   0x0
c0007469:	8d 44 24 24          	lea    eax,[esp+0x24]
c000746d:	50                   	push   eax
c000746e:	e8 cf fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007473:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007477:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000747b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000747f:	83 e0 3f             	and    eax,0x3f
c0007482:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007486:	6a 00                	push   0x0
c0007488:	8d 44 24 34          	lea    eax,[esp+0x34]
c000748c:	50                   	push   eax
c000748d:	e8 b0 fe ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0007492:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007496:	83 e0 3f             	and    eax,0x3f
c0007499:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000749d:	83 c4 0c             	add    esp,0xc
c00074a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a8:	53                   	push   ebx
c00074a9:	e8 e4 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ae:	83 c4 0c             	add    esp,0xc
c00074b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074b9:	53                   	push   ebx
c00074ba:	e8 d3 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074bf:	83 c4 0c             	add    esp,0xc
c00074c2:	57                   	push   edi
c00074c3:	56                   	push   esi
c00074c4:	53                   	push   ebx
c00074c5:	e8 c8 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ca:	83 c4 0c             	add    esp,0xc
c00074cd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074d5:	53                   	push   ebx
c00074d6:	e8 b7 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074db:	83 c4 0c             	add    esp,0xc
c00074de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074e6:	53                   	push   ebx
c00074e7:	e8 a6 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074ec:	83 c4 0c             	add    esp,0xc
c00074ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074f7:	53                   	push   ebx
c00074f8:	e8 95 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00074fd:	83 c4 0c             	add    esp,0xc
c0007500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007504:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007508:	53                   	push   ebx
c0007509:	e8 84 fe ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c000750e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007511:	e8 a6 fe ff ff       	call   c00073bc <GDT::flush()>
c0007516:	83 c4 40             	add    esp,0x40
c0007519:	5b                   	pop    ebx
c000751a:	5e                   	pop    esi
c000751b:	5f                   	pop    edi
c000751c:	c3                   	ret    

c000751d <idleFunction(void*)>:
c000751d:	83 ec 0c             	sub    esp,0xc
c0007520:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007525:	48                   	dec    eax
c0007526:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000752b:	75 01                	jne    c000752e <idleFunction(void*)+0x11>
c000752d:	fb                   	sti    
c000752e:	e8 cb 01 01 00       	call   c00176fe <HalSystemIdle()>
c0007533:	e8 5a 7f 01 00       	call   c001f492 <idleCommon()>
c0007538:	eb f4                	jmp    c000752e <idleFunction(void*)+0x11>
c000753a:	66 90                	xchg   ax,ax

c000753c <IDTEntry::IDTEntry(bool)>:
c000753c:	53                   	push   ebx
c000753d:	83 ec 04             	sub    esp,0x4
c0007540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007544:	88 04 24             	mov    BYTE PTR [esp],al
c0007547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007555:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007559:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000755d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007560:	83 e2 f0             	and    edx,0xfffffff0
c0007563:	83 ca 0e             	or     edx,0xe
c0007566:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007570:	83 e2 ef             	and    edx,0xffffffef
c0007573:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007576:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000757a:	85 c0                	test   eax,eax
c000757c:	74 06                	je     c0007584 <IDTEntry::IDTEntry(bool)+0x48>
c000757e:	b2 03                	mov    dl,0x3
c0007580:	eb 06                	jmp    c0007588 <IDTEntry::IDTEntry(bool)+0x4c>
c0007582:	66 90                	xchg   ax,ax
c0007584:	b2 00                	mov    dl,0x0
c0007586:	66 90                	xchg   ax,ax
c0007588:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000758c:	83 e2 03             	and    edx,0x3
c000758f:	89 d3                	mov    ebx,edx
c0007591:	c1 e3 05             	shl    ebx,0x5
c0007594:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007597:	83 e2 9f             	and    edx,0xffffff9f
c000759a:	88 d1                	mov    cl,dl
c000759c:	88 da                	mov    dl,bl
c000759e:	09 ca                	or     edx,ecx
c00075a0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075a7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00075aa:	83 ca 80             	or     edx,0xffffff80
c00075ad:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00075b0:	90                   	nop
c00075b1:	83 c4 04             	add    esp,0x4
c00075b4:	5b                   	pop    ebx
c00075b5:	c3                   	ret    

c00075b6 <IDTEntry::setOffset(unsigned int)>:
c00075b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00075ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075be:	66 89 02             	mov    WORD PTR [edx],ax
c00075c1:	c1 e8 10             	shr    eax,0x10
c00075c4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075c8:	c3                   	ret    
c00075c9:	90                   	nop
c00075ca:	66 90                	xchg   ax,ax

c00075cc <IDT::IDT()>:
c00075cc:	90                   	nop
c00075cd:	c3                   	ret    

c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075d2:	83 c0 30             	add    eax,0x30
c00075d5:	c3                   	ret    

c00075d6 <IDT::addEntry(IDTEntry, int)>:
c00075d6:	53                   	push   ebx
c00075d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075e7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ea:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ee:	5b                   	pop    ebx
c00075ef:	c3                   	ret    

c00075f0 <IDT::addEntry(int, void (*)(), bool)>:
c00075f0:	53                   	push   ebx
c00075f1:	83 ec 10             	sub    esp,0x10
c00075f4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075f9:	50                   	push   eax
c00075fa:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075fe:	53                   	push   ebx
c00075ff:	e8 38 ff ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c0007604:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007608:	53                   	push   ebx
c0007609:	e8 a8 ff ff ff       	call   c00075b6 <IDTEntry::setOffset(unsigned int)>
c000760e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0007612:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007616:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000761a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000761e:	e8 b3 ff ff ff       	call   c00075d6 <IDT::addEntry(IDTEntry, int)>
c0007623:	83 c4 30             	add    esp,0x30
c0007626:	5b                   	pop    ebx
c0007627:	c3                   	ret    

c0007628 <IDT::flush()>:
c0007628:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007631:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007635:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000763a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007641:	c3                   	ret    

c0007642 <IDT::setup()>:
c0007642:	57                   	push   edi
c0007643:	56                   	push   esi
c0007644:	53                   	push   ebx
c0007645:	83 ec 10             	sub    esp,0x10
c0007648:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000764c:	6a 00                	push   0x0
c000764e:	68 90 eb 01 c0       	push   0xc001eb90
c0007653:	6a 00                	push   0x0
c0007655:	53                   	push   ebx
c0007656:	e8 95 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	6a 00                	push   0x0
c000765d:	68 a0 eb 01 c0       	push   0xc001eba0
c0007662:	6a 01                	push   0x1
c0007664:	53                   	push   ebx
c0007665:	e8 86 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000766a:	83 c4 20             	add    esp,0x20
c000766d:	6a 00                	push   0x0
c000766f:	68 aa eb 01 c0       	push   0xc001ebaa
c0007674:	6a 02                	push   0x2
c0007676:	53                   	push   ebx
c0007677:	e8 74 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	6a 00                	push   0x0
c000767e:	68 b4 eb 01 c0       	push   0xc001ebb4
c0007683:	6a 03                	push   0x3
c0007685:	53                   	push   ebx
c0007686:	e8 65 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000768b:	83 c4 20             	add    esp,0x20
c000768e:	6a 00                	push   0x0
c0007690:	68 be eb 01 c0       	push   0xc001ebbe
c0007695:	6a 04                	push   0x4
c0007697:	53                   	push   ebx
c0007698:	e8 53 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	6a 00                	push   0x0
c000769f:	68 c8 eb 01 c0       	push   0xc001ebc8
c00076a4:	6a 05                	push   0x5
c00076a6:	53                   	push   ebx
c00076a7:	e8 44 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ac:	83 c4 20             	add    esp,0x20
c00076af:	6a 00                	push   0x0
c00076b1:	68 d2 eb 01 c0       	push   0xc001ebd2
c00076b6:	6a 06                	push   0x6
c00076b8:	53                   	push   ebx
c00076b9:	e8 32 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	6a 00                	push   0x0
c00076c0:	68 dc eb 01 c0       	push   0xc001ebdc
c00076c5:	6a 07                	push   0x7
c00076c7:	53                   	push   ebx
c00076c8:	e8 23 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076cd:	83 c4 20             	add    esp,0x20
c00076d0:	6a 00                	push   0x0
c00076d2:	68 e6 eb 01 c0       	push   0xc001ebe6
c00076d7:	6a 08                	push   0x8
c00076d9:	53                   	push   ebx
c00076da:	e8 11 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	6a 00                	push   0x0
c00076e1:	68 ee eb 01 c0       	push   0xc001ebee
c00076e6:	6a 09                	push   0x9
c00076e8:	53                   	push   ebx
c00076e9:	e8 02 ff ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00076ee:	83 c4 20             	add    esp,0x20
c00076f1:	6a 00                	push   0x0
c00076f3:	68 f8 eb 01 c0       	push   0xc001ebf8
c00076f8:	6a 0a                	push   0xa
c00076fa:	53                   	push   ebx
c00076fb:	e8 f0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	6a 00                	push   0x0
c0007702:	68 00 ec 01 c0       	push   0xc001ec00
c0007707:	6a 0b                	push   0xb
c0007709:	53                   	push   ebx
c000770a:	e8 e1 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000770f:	83 c4 20             	add    esp,0x20
c0007712:	6a 00                	push   0x0
c0007714:	68 08 ec 01 c0       	push   0xc001ec08
c0007719:	6a 0c                	push   0xc
c000771b:	53                   	push   ebx
c000771c:	e8 cf fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	6a 00                	push   0x0
c0007723:	68 10 ec 01 c0       	push   0xc001ec10
c0007728:	6a 0d                	push   0xd
c000772a:	53                   	push   ebx
c000772b:	e8 c0 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007730:	83 c4 20             	add    esp,0x20
c0007733:	6a 00                	push   0x0
c0007735:	68 2a ec 01 c0       	push   0xc001ec2a
c000773a:	6a 0e                	push   0xe
c000773c:	53                   	push   ebx
c000773d:	e8 ae fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	6a 00                	push   0x0
c0007744:	68 32 ec 01 c0       	push   0xc001ec32
c0007749:	6a 0f                	push   0xf
c000774b:	53                   	push   ebx
c000774c:	e8 9f fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007751:	83 c4 20             	add    esp,0x20
c0007754:	6a 00                	push   0x0
c0007756:	68 3c ec 01 c0       	push   0xc001ec3c
c000775b:	6a 10                	push   0x10
c000775d:	53                   	push   ebx
c000775e:	e8 8d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	6a 00                	push   0x0
c0007765:	68 46 ec 01 c0       	push   0xc001ec46
c000776a:	6a 11                	push   0x11
c000776c:	53                   	push   ebx
c000776d:	e8 7e fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007772:	83 c4 20             	add    esp,0x20
c0007775:	6a 00                	push   0x0
c0007777:	68 50 ec 01 c0       	push   0xc001ec50
c000777c:	6a 12                	push   0x12
c000777e:	53                   	push   ebx
c000777f:	e8 6c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	6a 01                	push   0x1
c0007786:	68 ea ec 01 c0       	push   0xc001ecea
c000778b:	6a 60                	push   0x60
c000778d:	53                   	push   ebx
c000778e:	e8 5d fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007793:	83 c4 20             	add    esp,0x20
c0007796:	6a 00                	push   0x0
c0007798:	68 f1 ec 01 c0       	push   0xc001ecf1
c000779d:	6a 20                	push   0x20
c000779f:	53                   	push   ebx
c00077a0:	e8 4b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	6a 00                	push   0x0
c00077a7:	68 dc ec 01 c0       	push   0xc001ecdc
c00077ac:	6a 21                	push   0x21
c00077ae:	53                   	push   ebx
c00077af:	e8 3c fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077b4:	83 c4 20             	add    esp,0x20
c00077b7:	6a 00                	push   0x0
c00077b9:	68 e3 ec 01 c0       	push   0xc001ece3
c00077be:	6a 22                	push   0x22
c00077c0:	53                   	push   ebx
c00077c1:	e8 2a fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	6a 00                	push   0x0
c00077c8:	68 5a ec 01 c0       	push   0xc001ec5a
c00077cd:	6a 23                	push   0x23
c00077cf:	53                   	push   ebx
c00077d0:	e8 1b fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	6a 00                	push   0x0
c00077da:	68 64 ec 01 c0       	push   0xc001ec64
c00077df:	6a 24                	push   0x24
c00077e1:	53                   	push   ebx
c00077e2:	e8 09 fe ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	6a 00                	push   0x0
c00077e9:	68 6e ec 01 c0       	push   0xc001ec6e
c00077ee:	6a 25                	push   0x25
c00077f0:	53                   	push   ebx
c00077f1:	e8 fa fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00077f6:	83 c4 20             	add    esp,0x20
c00077f9:	6a 00                	push   0x0
c00077fb:	68 78 ec 01 c0       	push   0xc001ec78
c0007800:	6a 26                	push   0x26
c0007802:	53                   	push   ebx
c0007803:	e8 e8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007808:	6a 00                	push   0x0
c000780a:	68 82 ec 01 c0       	push   0xc001ec82
c000780f:	6a 27                	push   0x27
c0007811:	53                   	push   ebx
c0007812:	e8 d9 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007817:	83 c4 20             	add    esp,0x20
c000781a:	6a 00                	push   0x0
c000781c:	68 8c ec 01 c0       	push   0xc001ec8c
c0007821:	6a 28                	push   0x28
c0007823:	53                   	push   ebx
c0007824:	e8 c7 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007829:	6a 00                	push   0x0
c000782b:	68 96 ec 01 c0       	push   0xc001ec96
c0007830:	6a 29                	push   0x29
c0007832:	53                   	push   ebx
c0007833:	e8 b8 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007838:	83 c4 20             	add    esp,0x20
c000783b:	6a 00                	push   0x0
c000783d:	68 a0 ec 01 c0       	push   0xc001eca0
c0007842:	6a 2a                	push   0x2a
c0007844:	53                   	push   ebx
c0007845:	e8 a6 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000784a:	6a 00                	push   0x0
c000784c:	68 aa ec 01 c0       	push   0xc001ecaa
c0007851:	6a 2b                	push   0x2b
c0007853:	53                   	push   ebx
c0007854:	e8 97 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007859:	83 c4 20             	add    esp,0x20
c000785c:	6a 00                	push   0x0
c000785e:	68 b4 ec 01 c0       	push   0xc001ecb4
c0007863:	6a 2c                	push   0x2c
c0007865:	53                   	push   ebx
c0007866:	e8 85 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000786b:	6a 00                	push   0x0
c000786d:	68 be ec 01 c0       	push   0xc001ecbe
c0007872:	6a 2d                	push   0x2d
c0007874:	53                   	push   ebx
c0007875:	e8 76 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000787a:	83 c4 20             	add    esp,0x20
c000787d:	6a 00                	push   0x0
c000787f:	68 c8 ec 01 c0       	push   0xc001ecc8
c0007884:	6a 2e                	push   0x2e
c0007886:	53                   	push   ebx
c0007887:	e8 64 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000788c:	6a 00                	push   0x0
c000788e:	68 d2 ec 01 c0       	push   0xc001ecd2
c0007893:	6a 2f                	push   0x2f
c0007895:	53                   	push   ebx
c0007896:	e8 55 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000789b:	83 c4 20             	add    esp,0x20
c000789e:	6a 00                	push   0x0
c00078a0:	68 2c ee 01 c0       	push   0xc001ee2c
c00078a5:	6a 30                	push   0x30
c00078a7:	53                   	push   ebx
c00078a8:	e8 43 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ad:	6a 00                	push   0x0
c00078af:	68 36 ee 01 c0       	push   0xc001ee36
c00078b4:	6a 31                	push   0x31
c00078b6:	53                   	push   ebx
c00078b7:	e8 34 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078bc:	83 c4 20             	add    esp,0x20
c00078bf:	6a 00                	push   0x0
c00078c1:	68 40 ee 01 c0       	push   0xc001ee40
c00078c6:	6a 32                	push   0x32
c00078c8:	53                   	push   ebx
c00078c9:	e8 22 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ce:	6a 00                	push   0x0
c00078d0:	68 4a ee 01 c0       	push   0xc001ee4a
c00078d5:	6a 33                	push   0x33
c00078d7:	53                   	push   ebx
c00078d8:	e8 13 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078dd:	83 c4 20             	add    esp,0x20
c00078e0:	6a 00                	push   0x0
c00078e2:	68 54 ee 01 c0       	push   0xc001ee54
c00078e7:	6a 34                	push   0x34
c00078e9:	53                   	push   ebx
c00078ea:	e8 01 fd ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078ef:	6a 00                	push   0x0
c00078f1:	68 5e ee 01 c0       	push   0xc001ee5e
c00078f6:	6a 35                	push   0x35
c00078f8:	53                   	push   ebx
c00078f9:	e8 f2 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c00078fe:	83 c4 20             	add    esp,0x20
c0007901:	6a 00                	push   0x0
c0007903:	68 68 ee 01 c0       	push   0xc001ee68
c0007908:	6a 36                	push   0x36
c000790a:	53                   	push   ebx
c000790b:	e8 e0 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c0007910:	6a 00                	push   0x0
c0007912:	68 72 ee 01 c0       	push   0xc001ee72
c0007917:	6a 37                	push   0x37
c0007919:	53                   	push   ebx
c000791a:	e8 d1 fc ff ff       	call   c00075f0 <IDT::addEntry(int, void (*)(), bool)>
c000791f:	83 c4 1c             	add    esp,0x1c
c0007922:	6a 03                	push   0x3
c0007924:	6a 02                	push   0x2
c0007926:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000792c:	e8 d5 24 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007931:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007938:	89 c6                	mov    esi,eax
c000793a:	e8 94 01 00 00       	call   c0007ad3 <malloc>
c000793f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007945:	89 04 24             	mov    DWORD PTR [esp],eax
c0007948:	89 c7                	mov    edi,eax
c000794a:	e8 dd 15 00 00       	call   c0008f2c <TSS::TSS()>
c000794f:	83 c4 0c             	add    esp,0xc
c0007952:	68 e6 eb 01 c0       	push   0xc001ebe6
c0007957:	56                   	push   esi
c0007958:	57                   	push   edi
c0007959:	e8 12 16 00 00       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c000795e:	89 c6                	mov    esi,eax
c0007960:	58                   	pop    eax
c0007961:	5a                   	pop    edx
c0007962:	6a 00                	push   0x0
c0007964:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007968:	50                   	push   eax
c0007969:	e8 ce fb ff ff       	call   c000753c <IDTEntry::IDTEntry(bool)>
c000796e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007972:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007977:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000797e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007982:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007988:	80 ce 05             	or     dh,0x5
c000798b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000798f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007992:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007996:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007999:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000799c:	e8 87 fc ff ff       	call   c0007628 <IDT::flush()>
c00079a1:	83 c4 20             	add    esp,0x20
c00079a4:	5b                   	pop    ebx
c00079a5:	5e                   	pop    esi
c00079a6:	5f                   	pop    edi
c00079a7:	c3                   	ret    

c00079a8 <sbrk>:
c00079a8:	55                   	push   ebp
c00079a9:	57                   	push   edi
c00079aa:	56                   	push   esi
c00079ab:	53                   	push   ebx
c00079ac:	83 ec 1c             	sub    esp,0x1c
c00079af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00079b3:	85 c0                	test   eax,eax
c00079b5:	74 66                	je     c0007a1d <sbrk+0x75>
c00079b7:	78 6b                	js     c0007a24 <sbrk+0x7c>
c00079b9:	8b 15 14 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023014
c00079bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079c3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00079c9:	05 ff 0f 00 00       	add    eax,0xfff
c00079ce:	0f 49 e8             	cmovns ebp,eax
c00079d1:	c1 fd 0c             	sar    ebp,0xc
c00079d4:	bb 00 00 00 00       	mov    ebx,0x0
c00079d9:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079df:	8b 3d 14 30 02 c0    	mov    edi,DWORD PTR ds:0xc0023014
c00079e5:	e8 f8 03 00 00       	call   c0007de2 <Phys::allocatePage()>
c00079ea:	68 01 04 00 00       	push   0x401
c00079ef:	57                   	push   edi
c00079f0:	50                   	push   eax
c00079f1:	56                   	push   esi
c00079f2:	e8 07 23 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c00079f7:	81 05 14 30 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023014,0x1000
c0007a01:	83 c3 01             	add    ebx,0x1
c0007a04:	83 c4 10             	add    esp,0x10
c0007a07:	39 dd                	cmp    ebp,ebx
c0007a09:	75 ce                	jne    c00079d9 <sbrk+0x31>
c0007a0b:	0f 20 d8             	mov    eax,cr3
c0007a0e:	0f 22 d8             	mov    cr3,eax
c0007a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	5b                   	pop    ebx
c0007a19:	5e                   	pop    esi
c0007a1a:	5f                   	pop    edi
c0007a1b:	5d                   	pop    ebp
c0007a1c:	c3                   	ret    
c0007a1d:	a1 14 30 02 c0       	mov    eax,ds:0xc0023014
c0007a22:	eb f1                	jmp    c0007a15 <sbrk+0x6d>
c0007a24:	83 ec 08             	sub    esp,0x8
c0007a27:	50                   	push   eax
c0007a28:	68 78 07 02 c0       	push   0xc0020778
c0007a2d:	e8 d8 2e 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007a32:	83 c4 10             	add    esp,0x10
c0007a35:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a3a:	eb d9                	jmp    c0007a15 <sbrk+0x6d>

c0007a3c <mmap>:
c0007a3c:	83 ec 18             	sub    esp,0x18
c0007a3f:	68 a8 07 02 c0       	push   0xc00207a8
c0007a44:	e8 04 98 00 00       	call   c001124d <KePanic(char const*)>
c0007a49:	b8 00 00 00 00       	mov    eax,0x0
c0007a4e:	83 c4 1c             	add    esp,0x1c
c0007a51:	c3                   	ret    

c0007a52 <munmap>:
c0007a52:	83 ec 18             	sub    esp,0x18
c0007a55:	68 ad 07 02 c0       	push   0xc00207ad
c0007a5a:	e8 ee 97 00 00       	call   c001124d <KePanic(char const*)>
c0007a5f:	b8 00 00 00 00       	mov    eax,0x0
c0007a64:	83 c4 1c             	add    esp,0x1c
c0007a67:	c3                   	ret    

c0007a68 <liballoc_lock()>:
c0007a68:	fa                   	cli    
c0007a69:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a70:	b8 00 00 00 00       	mov    eax,0x0
c0007a75:	c3                   	ret    

c0007a76 <liballoc_unlock()>:
c0007a76:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a7b:	83 e8 01             	sub    eax,0x1
c0007a7e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a83:	75 01                	jne    c0007a86 <liballoc_unlock()+0x10>
c0007a85:	fb                   	sti    
c0007a86:	b8 00 00 00 00       	mov    eax,0x0
c0007a8b:	c3                   	ret    

c0007a8c <liballoc_alloc(int)>:
c0007a8c:	83 ec 10             	sub    esp,0x10
c0007a8f:	6a 01                	push   0x1
c0007a91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a95:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a9b:	e8 66 23 00 00       	call   c0009e06 <VAS::allocatePages(int, int)>
c0007aa0:	83 c4 1c             	add    esp,0x1c
c0007aa3:	c3                   	ret    

c0007aa4 <liballoc_free(void*, int)>:
c0007aa4:	83 ec 14             	sub    esp,0x14
c0007aa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007aab:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007ab1:	e8 90 1f 00 00       	call   c0009a46 <VAS::freeAllocatedPages(unsigned long)>
c0007ab6:	b8 00 00 00 00       	mov    eax,0x0
c0007abb:	83 c4 1c             	add    esp,0x1c
c0007abe:	c3                   	ret    

c0007abf <realloc>:
c0007abf:	83 ec 14             	sub    esp,0x14
c0007ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aca:	e8 52 9b ff ff       	call   c0001621 <dlrealloc>
c0007acf:	83 c4 1c             	add    esp,0x1c
c0007ad2:	c3                   	ret    

c0007ad3 <malloc>:
c0007ad3:	83 ec 18             	sub    esp,0x18
c0007ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ada:	e8 05 96 ff ff       	call   c00010e4 <dlmalloc>
c0007adf:	83 c4 1c             	add    esp,0x1c
c0007ae2:	c3                   	ret    

c0007ae3 <free>:
c0007ae3:	83 ec 18             	sub    esp,0x18
c0007ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aea:	e8 97 92 ff ff       	call   c0000d86 <dlfree>
c0007aef:	83 c4 1c             	add    esp,0x1c
c0007af2:	c3                   	ret    

c0007af3 <rfree>:
c0007af3:	83 ec 18             	sub    esp,0x18
c0007af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007afa:	e8 87 92 ff ff       	call   c0000d86 <dlfree>
c0007aff:	83 c4 1c             	add    esp,0x1c
c0007b02:	c3                   	ret    

c0007b03 <calloc>:
c0007b03:	56                   	push   esi
c0007b04:	53                   	push   ebx
c0007b05:	83 ec 10             	sub    esp,0x10
c0007b08:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007b0c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007b11:	53                   	push   ebx
c0007b12:	e8 bc ff ff ff       	call   c0007ad3 <malloc>
c0007b17:	89 c6                	mov    esi,eax
c0007b19:	83 c4 0c             	add    esp,0xc
c0007b1c:	53                   	push   ebx
c0007b1d:	6a 00                	push   0x0
c0007b1f:	50                   	push   eax
c0007b20:	e8 cb 89 ff ff       	call   c00004f0 <memset>
c0007b25:	89 f0                	mov    eax,esi
c0007b27:	83 c4 14             	add    esp,0x14
c0007b2a:	5b                   	pop    ebx
c0007b2b:	5e                   	pop    esi
c0007b2c:	c3                   	ret    

c0007b2d <KeEntryPoint>:
c0007b2d:	57                   	push   edi
c0007b2e:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b33:	56                   	push   esi
c0007b34:	31 f6                	xor    esi,esi
c0007b36:	53                   	push   ebx
c0007b37:	89 fa                	mov    edx,edi
c0007b39:	83 ec 2c             	sub    esp,0x2c
c0007b3c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b41:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b46:	89 f0                	mov    eax,esi
c0007b48:	ee                   	out    dx,al
c0007b49:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b4e:	b0 80                	mov    al,0x80
c0007b50:	89 da                	mov    edx,ebx
c0007b52:	ee                   	out    dx,al
c0007b53:	b1 03                	mov    cl,0x3
c0007b55:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b5a:	88 c8                	mov    al,cl
c0007b5c:	ee                   	out    dx,al
c0007b5d:	89 f0                	mov    eax,esi
c0007b5f:	89 fa                	mov    edx,edi
c0007b61:	ee                   	out    dx,al
c0007b62:	88 c8                	mov    al,cl
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	ee                   	out    dx,al
c0007b67:	b0 c7                	mov    al,0xc7
c0007b69:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b6e:	ee                   	out    dx,al
c0007b6f:	b0 0b                	mov    al,0xb
c0007b71:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b76:	ee                   	out    dx,al
c0007b77:	68 b4 07 02 c0       	push   0xc00207b4
c0007b7c:	e8 89 2d 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007b81:	e8 77 8f 00 00       	call   c0010afd <KeDisplaySplashScreen()>
c0007b86:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b8b:	05 ff 0f 00 00       	add    eax,0xfff
c0007b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b98:	e8 b3 03 00 00       	call   c0007f50 <Phys::physicalMemorySetup(unsigned int)>
c0007b9d:	e8 27 1c 00 00       	call   c00097c9 <Virt::virtualMemorySetup()>
c0007ba2:	e8 a0 8e 00 00       	call   c0010a47 <KeInitialiseAtexit()>
c0007ba7:	58                   	pop    eax
c0007ba8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007bac:	53                   	push   ebx
c0007bad:	e8 14 1f 00 00       	call   c0009ac6 <VAS::VAS()>
c0007bb2:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007bb8:	e8 6d 78 01 00       	call   c001f42a <_init>
c0007bbd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007bc4:	e8 0a ff ff ff       	call   c0007ad3 <malloc>
c0007bc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bcc:	89 c6                	mov    esi,eax
c0007bce:	e8 35 f2 ff ff       	call   c0006e08 <Computer::Computer()>
c0007bd3:	53                   	push   ebx
c0007bd4:	6a 00                	push   0x0
c0007bd6:	6a 00                	push   0x0
c0007bd8:	56                   	push   esi
c0007bd9:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bdf:	e8 ea f5 ff ff       	call   c00071ce <Computer::open(int, int, void*)>
c0007be4:	83 c4 14             	add    esp,0x14
c0007be7:	53                   	push   ebx
c0007be8:	e8 a3 1f 00 00       	call   c0009b90 <VAS::~VAS()>
c0007bed:	83 c4 30             	add    esp,0x30
c0007bf0:	5b                   	pop    ebx
c0007bf1:	5e                   	pop    esi
c0007bf2:	5f                   	pop    edi
c0007bf3:	c3                   	ret    

c0007bf4 <Phys::allocateDMA(unsigned long)>:
c0007bf4:	55                   	push   ebp
c0007bf5:	31 ed                	xor    ebp,ebp
c0007bf7:	57                   	push   edi
c0007bf8:	56                   	push   esi
c0007bf9:	31 f6                	xor    esi,esi
c0007bfb:	53                   	push   ebx
c0007bfc:	31 db                	xor    ebx,ebx
c0007bfe:	83 ec 1c             	sub    esp,0x1c
c0007c01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007c05:	05 ff 0f 00 00       	add    eax,0xfff
c0007c0a:	c1 e8 0c             	shr    eax,0xc
c0007c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c11:	31 c0                	xor    eax,eax
c0007c13:	eb 1b                	jmp    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c15:	8d 78 01             	lea    edi,[eax+0x1]
c0007c18:	85 c0                	test   eax,eax
c0007c1a:	0f 44 eb             	cmove  ebp,ebx
c0007c1d:	0f 44 f3             	cmove  esi,ebx
c0007c20:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0007c24:	74 37                	je     c0007c5d <Phys::allocateDMA(unsigned long)+0x69>
c0007c26:	89 f8                	mov    eax,edi
c0007c28:	83 c3 01             	add    ebx,0x1
c0007c2b:	83 fb 0f             	cmp    ebx,0xf
c0007c2e:	7f 13                	jg     c0007c43 <Phys::allocateDMA(unsigned long)+0x4f>
c0007c30:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c37:	74 dc                	je     c0007c15 <Phys::allocateDMA(unsigned long)+0x21>
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c3 01             	add    ebx,0x1
c0007c3e:	83 fb 0f             	cmp    ebx,0xf
c0007c41:	7e ed                	jle    c0007c30 <Phys::allocateDMA(unsigned long)+0x3c>
c0007c43:	83 ec 0c             	sub    esp,0xc
c0007c46:	68 cc 07 02 c0       	push   0xc00207cc
c0007c4b:	e8 fd 95 00 00       	call   c001124d <KePanic(char const*)>
c0007c50:	83 c4 10             	add    esp,0x10
c0007c53:	31 c0                	xor    eax,eax
c0007c55:	83 c4 1c             	add    esp,0x1c
c0007c58:	5b                   	pop    ebx
c0007c59:	5e                   	pop    esi
c0007c5a:	5f                   	pop    edi
c0007c5b:	5d                   	pop    ebp
c0007c5c:	c3                   	ret    
c0007c5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007c61:	89 f2                	mov    edx,esi
c0007c63:	c1 fa 04             	sar    edx,0x4
c0007c66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c6a:	01 f1                	add    ecx,esi
c0007c6c:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c6f:	83 e9 01             	sub    ecx,0x1
c0007c72:	0f 48 ca             	cmovs  ecx,edx
c0007c75:	c1 f9 04             	sar    ecx,0x4
c0007c78:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0007c7c:	74 06                	je     c0007c84 <Phys::allocateDMA(unsigned long)+0x90>
c0007c7e:	89 eb                	mov    ebx,ebp
c0007c80:	31 c0                	xor    eax,eax
c0007c82:	eb b7                	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x47>
c0007c84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c88:	85 d2                	test   edx,edx
c0007c8a:	74 17                	je     c0007ca3 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c8c:	8d 96 ec 5e 02 c0    	lea    edx,[esi-0x3ffda114]
c0007c92:	8d 84 06 ed 5e 02 c0 	lea    eax,[esi+eax*1-0x3ffda113]
c0007c99:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c9c:	83 c2 01             	add    edx,0x1
c0007c9f:	39 d0                	cmp    eax,edx
c0007ca1:	75 f6                	jne    c0007c99 <Phys::allocateDMA(unsigned long)+0xa5>
c0007ca3:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007ca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cb1:	01 c2                	add    edx,eax
c0007cb3:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007cb9:	85 c9                	test   ecx,ecx
c0007cbb:	74 17                	je     c0007cd4 <Phys::allocateDMA(unsigned long)+0xe0>
c0007cbd:	83 ec 0c             	sub    esp,0xc
c0007cc0:	68 cc 07 02 c0       	push   0xc00207cc
c0007cc5:	e8 83 95 00 00       	call   c001124d <KePanic(char const*)>
c0007cca:	83 c4 10             	add    esp,0x10
c0007ccd:	89 f8                	mov    eax,edi
c0007ccf:	e9 54 ff ff ff       	jmp    c0007c28 <Phys::allocateDMA(unsigned long)+0x34>
c0007cd4:	c1 e6 0c             	shl    esi,0xc
c0007cd7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c0007cdd:	e9 73 ff ff ff       	jmp    c0007c55 <Phys::allocateDMA(unsigned long)+0x61>

c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007ce2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ce6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cec:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cf1:	c1 ea 0c             	shr    edx,0xc
c0007cf4:	29 d0                	sub    eax,edx
c0007cf6:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cff:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007d04:	c1 e8 0c             	shr    eax,0xc
c0007d07:	85 d2                	test   edx,edx
c0007d09:	74 11                	je     c0007d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007d0b:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007d10:	01 c2                	add    edx,eax
c0007d12:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007d15:	83 c0 01             	add    eax,0x1
c0007d18:	39 d0                	cmp    eax,edx
c0007d1a:	75 f6                	jne    c0007d12 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007d1c:	c3                   	ret    

c0007d1d <Phys::setPageState(unsigned long, bool)>:
c0007d1d:	57                   	push   edi
c0007d1e:	56                   	push   esi
c0007d1f:	8b 35 18 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023018
c0007d25:	53                   	push   ebx
c0007d26:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d2b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d33:	89 ca                	mov    edx,ecx
c0007d35:	83 e1 07             	and    ecx,0x7
c0007d38:	c1 ea 03             	shr    edx,0x3
c0007d3b:	0f b6 c0             	movzx  eax,al
c0007d3e:	d3 c3                	rol    ebx,cl
c0007d40:	01 d6                	add    esi,edx
c0007d42:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d45:	d3 e0                	shl    eax,cl
c0007d47:	21 fb                	and    ebx,edi
c0007d49:	88 1e                	mov    BYTE PTR [esi],bl
c0007d4b:	8b 1d 18 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023018
c0007d51:	01 da                	add    edx,ebx
c0007d53:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d55:	09 c8                	or     eax,ecx
c0007d57:	88 02                	mov    BYTE PTR [edx],al
c0007d59:	5b                   	pop    ebx
c0007d5a:	5e                   	pop    esi
c0007d5b:	5f                   	pop    edi
c0007d5c:	c3                   	ret    

c0007d5d <Phys::getPageState(unsigned long)>:
c0007d5d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d61:	8b 15 18 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023018
c0007d67:	89 c8                	mov    eax,ecx
c0007d69:	83 e1 07             	and    ecx,0x7
c0007d6c:	c1 e8 03             	shr    eax,0x3
c0007d6f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d73:	d3 f8                	sar    eax,cl
c0007d75:	83 e0 01             	and    eax,0x1
c0007d78:	c3                   	ret    

c0007d79 <Phys::freePage(unsigned long)>:
c0007d79:	53                   	push   ebx
c0007d7a:	83 ec 08             	sub    esp,0x8
c0007d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d81:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d87:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d8d:	76 41                	jbe    c0007dd0 <Phys::freePage(unsigned long)+0x57>
c0007d8f:	c1 e8 0c             	shr    eax,0xc
c0007d92:	50                   	push   eax
c0007d93:	89 c3                	mov    ebx,eax
c0007d95:	e8 c3 ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007d9a:	5a                   	pop    edx
c0007d9b:	84 c0                	test   al,al
c0007d9d:	74 20                	je     c0007dbf <Phys::freePage(unsigned long)+0x46>
c0007d9f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007da4:	83 ec 08             	sub    esp,0x8
c0007da7:	6a 00                	push   0x0
c0007da9:	53                   	push   ebx
c0007daa:	83 e8 01             	sub    eax,0x1
c0007dad:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007db2:	e8 66 ff ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007db7:	83 c4 10             	add    esp,0x10
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    
c0007dbf:	c7 44 24 10 71 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020871
c0007dc7:	83 c4 08             	add    esp,0x8
c0007dca:	5b                   	pop    ebx
c0007dcb:	e9 7d 94 00 00       	jmp    c001124d <KePanic(char const*)>
c0007dd0:	68 00 10 00 00       	push   0x1000
c0007dd5:	50                   	push   eax
c0007dd6:	e8 07 ff ff ff       	call   c0007ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0007ddb:	59                   	pop    ecx
c0007ddc:	5b                   	pop    ebx
c0007ddd:	83 c4 08             	add    esp,0x8
c0007de0:	5b                   	pop    ebx
c0007de1:	c3                   	ret    

c0007de2 <Phys::allocatePage()>:
c0007de2:	56                   	push   esi
c0007de3:	53                   	push   ebx
c0007de4:	83 ec 14             	sub    esp,0x14
c0007de7:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007ded:	89 f3                	mov    ebx,esi
c0007def:	eb 0a                	jmp    c0007dfb <Phys::allocatePage()+0x19>
c0007df1:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007df7:	39 de                	cmp    esi,ebx
c0007df9:	74 26                	je     c0007e21 <Phys::allocatePage()+0x3f>
c0007dfb:	53                   	push   ebx
c0007dfc:	e8 5c ff ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e01:	5a                   	pop    edx
c0007e02:	84 c0                	test   al,al
c0007e04:	74 67                	je     c0007e6d <Phys::allocatePage()+0x8b>
c0007e06:	83 c3 01             	add    ebx,0x1
c0007e09:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007e0f:	75 e0                	jne    c0007df1 <Phys::allocatePage()+0xf>
c0007e11:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007e1b:	31 db                	xor    ebx,ebx
c0007e1d:	39 de                	cmp    esi,ebx
c0007e1f:	75 da                	jne    c0007dfb <Phys::allocatePage()+0x19>
c0007e21:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e26:	83 ec 0c             	sub    esp,0xc
c0007e29:	83 f0 01             	xor    eax,0x1
c0007e2c:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e3f:	50                   	push   eax
c0007e40:	e8 79 27 00 00       	call   c000a5be <VAS::scanForEviction()>
c0007e45:	83 c4 10             	add    esp,0x10
c0007e48:	85 c0                	test   eax,eax
c0007e4a:	75 48                	jne    c0007e94 <Phys::allocatePage()+0xb2>
c0007e4c:	83 ec 0c             	sub    esp,0xc
c0007e4f:	68 f4 07 02 c0       	push   0xc00207f4
c0007e54:	e8 f4 93 00 00       	call   c001124d <KePanic(char const*)>
c0007e59:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	53                   	push   ebx
c0007e63:	e8 f5 fe ff ff       	call   c0007d5d <Phys::getPageState(unsigned long)>
c0007e68:	5a                   	pop    edx
c0007e69:	84 c0                	test   al,al
c0007e6b:	75 99                	jne    c0007e06 <Phys::allocatePage()+0x24>
c0007e6d:	6a 01                	push   0x1
c0007e6f:	53                   	push   ebx
c0007e70:	e8 a8 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007e75:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e7b:	59                   	pop    ecx
c0007e7c:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e81:	5b                   	pop    ebx
c0007e82:	83 c2 01             	add    edx,0x1
c0007e85:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e8b:	c1 e0 0c             	shl    eax,0xc
c0007e8e:	83 c4 14             	add    esp,0x14
c0007e91:	5b                   	pop    ebx
c0007e92:	5e                   	pop    esi
c0007e93:	c3                   	ret    
c0007e94:	83 ec 08             	sub    esp,0x8
c0007e97:	89 c2                	mov    edx,eax
c0007e99:	6a 01                	push   0x1
c0007e9b:	c1 ea 0c             	shr    edx,0xc
c0007e9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007ea2:	52                   	push   edx
c0007ea3:	e8 75 fe ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007ea8:	83 c4 10             	add    esp,0x10
c0007eab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eaf:	eb dd                	jmp    c0007e8e <Phys::allocatePage()+0xac>

c0007eb1 <Phys::allocateContiguousPages(int)>:
c0007eb1:	57                   	push   edi
c0007eb2:	56                   	push   esi
c0007eb3:	53                   	push   ebx
c0007eb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007eb8:	fa                   	cli    
c0007eb9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007ebe:	31 db                	xor    ebx,ebx
c0007ec0:	83 c0 01             	add    eax,0x1
c0007ec3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ec8:	85 db                	test   ebx,ebx
c0007eca:	75 11                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ecc:	e8 11 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	89 c7                	mov    edi,eax
c0007ed6:	74 21                	je     c0007ef9 <Phys::allocateContiguousPages(int)+0x48>
c0007ed8:	bb 01 00 00 00       	mov    ebx,0x1
c0007edd:	e8 00 ff ff ff       	call   c0007de2 <Phys::allocatePage()>
c0007ee2:	89 da                	mov    edx,ebx
c0007ee4:	c1 e2 0c             	shl    edx,0xc
c0007ee7:	01 fa                	add    edx,edi
c0007ee9:	39 c2                	cmp    edx,eax
c0007eeb:	74 22                	je     c0007f0f <Phys::allocateContiguousPages(int)+0x5e>
c0007eed:	83 fe 01             	cmp    esi,0x1
c0007ef0:	bb 01 00 00 00       	mov    ebx,0x1
c0007ef5:	89 c7                	mov    edi,eax
c0007ef7:	75 e4                	jne    c0007edd <Phys::allocateContiguousPages(int)+0x2c>
c0007ef9:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007efe:	83 e8 01             	sub    eax,0x1
c0007f01:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007f06:	75 01                	jne    c0007f09 <Phys::allocateContiguousPages(int)+0x58>
c0007f08:	fb                   	sti    
c0007f09:	5b                   	pop    ebx
c0007f0a:	89 f8                	mov    eax,edi
c0007f0c:	5e                   	pop    esi
c0007f0d:	5f                   	pop    edi
c0007f0e:	c3                   	ret    
c0007f0f:	83 c3 01             	add    ebx,0x1
c0007f12:	39 f3                	cmp    ebx,esi
c0007f14:	75 b2                	jne    c0007ec8 <Phys::allocateContiguousPages(int)+0x17>
c0007f16:	eb e1                	jmp    c0007ef9 <Phys::allocateContiguousPages(int)+0x48>

c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007f18:	56                   	push   esi
c0007f19:	53                   	push   ebx
c0007f1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007f1e:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f24:	73 06                	jae    c0007f2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f26:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f30:	c1 eb 0c             	shr    ebx,0xc
c0007f33:	c1 e8 0c             	shr    eax,0xc
c0007f36:	39 d8                	cmp    eax,ebx
c0007f38:	73 13                	jae    c0007f4d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f3a:	6a 00                	push   0x0
c0007f3c:	50                   	push   eax
c0007f3d:	8d 70 01             	lea    esi,[eax+0x1]
c0007f40:	e8 d8 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f45:	39 f3                	cmp    ebx,esi
c0007f47:	89 f0                	mov    eax,esi
c0007f49:	5a                   	pop    edx
c0007f4a:	59                   	pop    ecx
c0007f4b:	75 ed                	jne    c0007f3a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f4d:	5b                   	pop    ebx
c0007f4e:	5e                   	pop    esi
c0007f4f:	c3                   	ret    

c0007f50 <Phys::physicalMemorySetup(unsigned int)>:
c0007f50:	55                   	push   ebp
c0007f51:	57                   	push   edi
c0007f52:	56                   	push   esi
c0007f53:	53                   	push   ebx
c0007f54:	31 db                	xor    ebx,ebx
c0007f56:	83 ec 40             	sub    esp,0x40
c0007f59:	6a 10                	push   0x10
c0007f5b:	6a 00                	push   0x0
c0007f5d:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f62:	e8 89 85 ff ff       	call   c00004f0 <memset>
c0007f67:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f70:	05 00 10 00 00       	add    eax,0x1000
c0007f75:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007f79:	5a                   	pop    edx
c0007f7a:	59                   	pop    ecx
c0007f7b:	50                   	push   eax
c0007f7c:	68 87 08 02 c0       	push   0xc0020887
c0007f81:	e8 84 29 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0007f86:	83 c4 10             	add    esp,0x10
c0007f89:	83 ec 08             	sub    esp,0x8
c0007f8c:	6a 01                	push   0x1
c0007f8e:	53                   	push   ebx
c0007f8f:	83 c3 01             	add    ebx,0x1
c0007f92:	e8 86 fd ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0007f97:	83 c4 10             	add    esp,0x10
c0007f9a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007fa0:	75 e7                	jne    c0007f89 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007fa2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007fa9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007fb0:	c1 e0 08             	shl    eax,0x8
c0007fb3:	09 c2                	or     edx,eax
c0007fb5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0007fb9:	0f 84 43 01 00 00    	je     c0008102 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0007fbf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fc7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fcc:	e9 82 00 00 00       	jmp    c0008053 <Phys::physicalMemorySetup(unsigned int)+0x103>
c0007fd1:	ba 00 00 08 00       	mov    edx,0x80000
c0007fd6:	89 c1                	mov    ecx,eax
c0007fd8:	39 f2                	cmp    edx,esi
c0007fda:	19 f9                	sbb    ecx,edi
c0007fdc:	0f 82 c0 00 00 00    	jb     c00080a2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c0007fe2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fe6:	89 c5                	mov    ebp,eax
c0007fe8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007ff0:	19 cd                	sbb    ebp,ecx
c0007ff2:	0f 83 af 00 00 00    	jae    c00080a7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0007ff8:	89 d6                	mov    esi,edx
c0007ffa:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fff:	39 f2                	cmp    edx,esi
c0008001:	89 cf                	mov    edi,ecx
c0008003:	19 c8                	sbb    eax,ecx
c0008005:	73 07                	jae    c000800e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0008007:	be 00 00 0a 00       	mov    esi,0xa0000
c000800c:	31 ff                	xor    edi,edi
c000800e:	89 f2                	mov    edx,esi
c0008010:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0008015:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000801b:	89 f9                	mov    ecx,edi
c000801d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008021:	83 d1 ff             	adc    ecx,0xffffffff
c0008024:	39 d0                	cmp    eax,edx
c0008026:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000802a:	b8 00 00 00 00       	mov    eax,0x0
c000802f:	19 c8                	sbb    eax,ecx
c0008031:	0f 82 9d 01 00 00    	jb     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0008037:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000803b:	83 c3 18             	add    ebx,0x18
c000803e:	83 c6 01             	add    esi,0x1
c0008041:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008045:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008049:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000804d:	0f 84 bf 00 00 00    	je     c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008053:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000805b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000805e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008062:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008069:	01 f0                	add    eax,esi
c000806b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000806f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008073:	55                   	push   ebp
c0008074:	11 fa                	adc    edx,edi
c0008076:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000807a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000807e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008082:	50                   	push   eax
c0008083:	56                   	push   esi
c0008084:	68 24 08 02 c0       	push   0xc0020824
c0008089:	e8 7c 28 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000808e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008092:	83 c4 10             	add    esp,0x10
c0008095:	09 f8                	or     eax,edi
c0008097:	75 79                	jne    c0008112 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0008099:	83 fd 01             	cmp    ebp,0x1
c000809c:	0f 84 2f ff ff ff    	je     c0007fd1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00080a2:	83 fd 01             	cmp    ebp,0x1
c00080a5:	75 90                	jne    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080a7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00080ab:	31 d2                	xor    edx,edx
c00080ad:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00080b1:	89 c8                	mov    eax,ecx
c00080b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080b7:	19 d1                	sbb    ecx,edx
c00080b9:	0f 82 78 ff ff ff    	jb     c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080bf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00080c4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00080c8:	b9 00 00 00 00       	mov    ecx,0x0
c00080cd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00080d1:	0f 83 60 ff ff ff    	jae    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00080d7:	39 c6                	cmp    esi,eax
c00080d9:	19 d7                	sbb    edi,edx
c00080db:	0f 83 ff 00 00 00    	jae    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00080e1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00080e9:	29 c7                	sub    edi,eax
c00080eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00080ef:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00080f3:	19 d5                	sbb    ebp,edx
c00080f5:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00080f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00080fd:	e9 de 00 00 00       	jmp    c00081e0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0008102:	83 ec 0c             	sub    esp,0xc
c0008105:	68 9f 08 02 c0       	push   0xc002089f
c000810a:	e8 3e 91 00 00       	call   c001124d <KePanic(char const*)>
c000810f:	83 c4 10             	add    esp,0x10
c0008112:	83 ec 08             	sub    esp,0x8
c0008115:	bb 60 00 00 00       	mov    ebx,0x60
c000811a:	6a 00                	push   0x0
c000811c:	6a 06                	push   0x6
c000811e:	e8 fa fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c0008123:	58                   	pop    eax
c0008124:	5a                   	pop    edx
c0008125:	6a 00                	push   0x0
c0008127:	6a 07                	push   0x7
c0008129:	e8 ef fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000812e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008134:	83 c4 10             	add    esp,0x10
c0008137:	83 c1 02             	add    ecx,0x2
c000813a:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008140:	83 ec 08             	sub    esp,0x8
c0008143:	6a 00                	push   0x0
c0008145:	53                   	push   ebx
c0008146:	83 c3 01             	add    ebx,0x1
c0008149:	e8 cf fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000814e:	83 c4 10             	add    esp,0x10
c0008151:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008157:	75 e7                	jne    c0008140 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0008159:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000815e:	bb 40 01 00 00       	mov    ebx,0x140
c0008163:	83 c0 20             	add    eax,0x20
c0008166:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000816b:	eb 26                	jmp    c0008193 <Phys::physicalMemorySetup(unsigned int)+0x243>
c000816d:	83 ec 08             	sub    esp,0x8
c0008170:	6a 00                	push   0x0
c0008172:	53                   	push   ebx
c0008173:	83 c3 01             	add    ebx,0x1
c0008176:	e8 a2 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c000817b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	83 c0 01             	add    eax,0x1
c0008186:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000818c:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c0008191:	74 07                	je     c000819a <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0008193:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008198:	7e d3                	jle    c000816d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c000819a:	bb d0 01 00 00       	mov    ebx,0x1d0
c000819f:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081a4:	7f 26                	jg     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c00081a6:	83 ec 08             	sub    esp,0x8
c00081a9:	6a 00                	push   0x0
c00081ab:	53                   	push   ebx
c00081ac:	83 c3 01             	add    ebx,0x1
c00081af:	e8 69 fb ff ff       	call   c0007d1d <Phys::setPageState(unsigned long, bool)>
c00081b4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	83 c0 01             	add    eax,0x1
c00081bf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081c5:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081ca:	75 d3                	jne    c000819f <Phys::physicalMemorySetup(unsigned int)+0x24f>
c00081cc:	83 c4 3c             	add    esp,0x3c
c00081cf:	5b                   	pop    ebx
c00081d0:	5e                   	pop    esi
c00081d1:	5f                   	pop    edi
c00081d2:	5d                   	pop    ebp
c00081d3:	c3                   	ret    
c00081d4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00081d8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c00081e0:	83 ec 04             	sub    esp,0x4
c00081e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00081e7:	56                   	push   esi
c00081e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00081ec:	57                   	push   edi
c00081ed:	68 48 08 02 c0       	push   0xc0020848
c00081f2:	e8 13 27 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00081f7:	5d                   	pop    ebp
c00081f8:	58                   	pop    eax
c00081f9:	56                   	push   esi
c00081fa:	57                   	push   edi
c00081fb:	e8 18 fd ff ff       	call   c0007f18 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008200:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008208:	83 c4 0c             	add    esp,0xc
c000820b:	8b 35 e8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ee8
c0008211:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008215:	01 f0                	add    eax,esi
c0008217:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000821c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	68 ad 08 02 c0       	push   0xc00208ad
c000822a:	e8 db 26 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000822f:	83 c4 10             	add    esp,0x10
c0008232:	e9 00 fe ff ff       	jmp    c0008037 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0008237:	90                   	nop

c0008238 <Pipe::isAtty()>:
c0008238:	31 c0                	xor    eax,eax
c000823a:	c3                   	ret    
c000823b:	90                   	nop

c000823c <Pipe::~Pipe()>:
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	ba 0c 09 02 c0       	mov    edx,0xc002090c
c0008244:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008248:	89 10                	mov    DWORD PTR [eax],edx
c000824a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000824e:	83 ec 0c             	sub    esp,0xc
c0008251:	50                   	push   eax
c0008252:	e8 35 11 00 00       	call   c000938c <UnixFile::~UnixFile()>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    
c000825f:	90                   	nop

c0008260 <Pipe::~Pipe()>:
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	83 ec 0c             	sub    esp,0xc
c0008266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000826a:	e8 cd ff ff ff       	call   c000823c <Pipe::~Pipe()>
c000826f:	83 c4 10             	add    esp,0x10
c0008272:	83 ec 08             	sub    esp,0x8
c0008275:	6a 20                	push   0x20
c0008277:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000827b:	e8 8c 25 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0008280:	83 c4 10             	add    esp,0x10
c0008283:	83 c4 0c             	add    esp,0xc
c0008286:	c3                   	ret    
c0008287:	90                   	nop

c0008288 <Pipe::write(unsigned long long, void*, int*)>:
c0008288:	55                   	push   ebp
c0008289:	57                   	push   edi
c000828a:	56                   	push   esi
c000828b:	53                   	push   ebx
c000828c:	83 ec 1c             	sub    esp,0x1c
c000828f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008293:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000829b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000829e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082a2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00082a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00082a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00082ac:	89 d8                	mov    eax,ebx
c00082ae:	89 d6                	mov    esi,edx
c00082b0:	89 d7                	mov    edi,edx
c00082b2:	c1 ff 1f             	sar    edi,0x1f
c00082b5:	03 34 24             	add    esi,DWORD PTR [esp]
c00082b8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082bc:	c1 f8 1f             	sar    eax,0x1f
c00082bf:	39 f3                	cmp    ebx,esi
c00082c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082c9:	19 f8                	sbb    eax,edi
c00082cb:	b8 01 00 00 00       	mov    eax,0x1
c00082d0:	72 72                	jb     c0008344 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c00082d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082d5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00082d9:	01 d0                	add    eax,edx
c00082db:	99                   	cdq    
c00082dc:	f7 fb                	idiv   ebx
c00082de:	89 d8                	mov    eax,ebx
c00082e0:	29 d0                	sub    eax,edx
c00082e2:	89 d6                	mov    esi,edx
c00082e4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082e7:	89 c3                	mov    ebx,eax
c00082e9:	c1 fb 1f             	sar    ebx,0x1f
c00082ec:	39 c2                	cmp    edx,eax
c00082ee:	19 df                	sbb    edi,ebx
c00082f0:	bb 00 00 00 00       	mov    ebx,0x0
c00082f5:	72 04                	jb     c00082fb <Pipe::write(unsigned long long, void*, int*)+0x73>
c00082f7:	89 d3                	mov    ebx,edx
c00082f9:	29 c3                	sub    ebx,eax
c00082fb:	89 d0                	mov    eax,edx
c00082fd:	29 d8                	sub    eax,ebx
c00082ff:	74 0d                	je     c000830e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0008301:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008304:	89 c1                	mov    ecx,eax
c0008306:	01 f7                	add    edi,esi
c0008308:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000830c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000830e:	85 db                	test   ebx,ebx
c0008310:	74 0d                	je     c000831f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0008312:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008316:	89 d9                	mov    ecx,ebx
c0008318:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000831b:	89 c6                	mov    esi,eax
c000831d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000831f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008322:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008327:	75 10                	jne    c0008339 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	68 c9 08 02 c0       	push   0xc00208c9
c0008331:	e8 17 8f 00 00       	call   c001124d <KePanic(char const*)>
c0008336:	83 c4 10             	add    esp,0x10
c0008339:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000833d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008340:	89 08                	mov    DWORD PTR [eax],ecx
c0008342:	31 c0                	xor    eax,eax
c0008344:	83 c4 1c             	add    esp,0x1c
c0008347:	5b                   	pop    ebx
c0008348:	5e                   	pop    esi
c0008349:	5f                   	pop    edi
c000834a:	5d                   	pop    ebp
c000834b:	c3                   	ret    

c000834c <Pipe::read(unsigned long long, void*, int*)>:
c000834c:	55                   	push   ebp
c000834d:	57                   	push   edi
c000834e:	56                   	push   esi
c000834f:	53                   	push   ebx
c0008350:	83 ec 1c             	sub    esp,0x1c
c0008353:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008357:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000835b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000835f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008362:	89 c8                	mov    eax,ecx
c0008364:	99                   	cdq    
c0008365:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008369:	74 24                	je     c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000836b:	39 f9                	cmp    ecx,edi
c000836d:	89 d1                	mov    ecx,edx
c000836f:	19 f1                	sbb    ecx,esi
c0008371:	73 1c                	jae    c000838f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008373:	fa                   	cli    
c0008374:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000837a:	e8 d1 d7 00 00       	call   c0015b50 <schedule()>
c000837f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008384:	48                   	dec    eax
c0008385:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000838a:	75 d3                	jne    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838c:	fb                   	sti    
c000838d:	eb d0                	jmp    c000835f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000838f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008393:	39 f8                	cmp    eax,edi
c0008395:	89 d1                	mov    ecx,edx
c0008397:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000839b:	19 f1                	sbb    ecx,esi
c000839d:	73 08                	jae    c00083a7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c000839f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00083aa:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00083ad:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00083b1:	29 f7                	sub    edi,esi
c00083b3:	89 f8                	mov    eax,edi
c00083b5:	99                   	cdq    
c00083b6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00083ba:	89 d0                	mov    eax,edx
c00083bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083c0:	19 c2                	sbb    edx,eax
c00083c2:	89 f8                	mov    eax,edi
c00083c4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c00083c9:	89 ea                	mov    edx,ebp
c00083cb:	29 c2                	sub    edx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	74 0b                	je     c00083dc <Pipe::read(unsigned long long, void*, int*)+0x90>
c00083d1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083d4:	89 c1                	mov    ecx,eax
c00083d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083dc:	85 d2                	test   edx,edx
c00083de:	74 0d                	je     c00083ed <Pipe::read(unsigned long long, void*, int*)+0xa1>
c00083e0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083e4:	89 d1                	mov    ecx,edx
c00083e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083e9:	89 c7                	mov    edi,eax
c00083eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083f0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083f3:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083f6:	99                   	cdq    
c00083f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00083fb:	89 f7                	mov    edi,esi
c00083fd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0008401:	c1 ff 1f             	sar    edi,0x1f
c0008404:	57                   	push   edi
c0008405:	56                   	push   esi
c0008406:	52                   	push   edx
c0008407:	50                   	push   eax
c0008408:	e8 03 6f 01 00       	call   c001f310 <__umoddi3>
c000840d:	83 c4 10             	add    esp,0x10
c0008410:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008415:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008418:	75 10                	jne    c000842a <Pipe::read(unsigned long long, void*, int*)+0xde>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	68 e6 08 02 c0       	push   0xc00208e6
c0008422:	e8 26 8e 00 00       	call   c001124d <KePanic(char const*)>
c0008427:	83 c4 10             	add    esp,0x10
c000842a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000842e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008432:	89 10                	mov    DWORD PTR [eax],edx
c0008434:	83 c4 1c             	add    esp,0x1c
c0008437:	31 c0                	xor    eax,eax
c0008439:	5b                   	pop    ebx
c000843a:	5e                   	pop    esi
c000843b:	5f                   	pop    edi
c000843c:	5d                   	pop    ebp
c000843d:	c3                   	ret    

c000843e <Pipe::Pipe(int)>:
c000843e:	83 ec 0c             	sub    esp,0xc
c0008441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008445:	83 ec 08             	sub    esp,0x8
c0008448:	6a 00                	push   0x0
c000844a:	50                   	push   eax
c000844b:	e8 56 0d 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008450:	83 c4 10             	add    esp,0x10
c0008453:	ba 0c 09 02 c0       	mov    edx,0xc002090c
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	89 10                	mov    DWORD PTR [eax],edx
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008466:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000846d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008478:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000847f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008483:	83 ec 0c             	sub    esp,0xc
c0008486:	50                   	push   eax
c0008487:	e8 47 f6 ff ff       	call   c0007ad3 <malloc>
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	89 c2                	mov    edx,eax
c0008491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008495:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000849c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00084a0:	90                   	nop
c00084a1:	83 c4 0c             	add    esp,0xc
c00084a4:	c3                   	ret    
c00084a5:	90                   	nop

c00084a6 <VgaText::isAtty()>:
c00084a6:	b0 01                	mov    al,0x1
c00084a8:	c3                   	ret    
c00084a9:	90                   	nop

c00084aa <VgaText::~VgaText()>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	ba 54 09 02 c0       	mov    edx,0xc0020954
c00084b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084b6:	89 10                	mov    DWORD PTR [eax],edx
c00084b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084bc:	83 ec 0c             	sub    esp,0xc
c00084bf:	50                   	push   eax
c00084c0:	e8 c7 0e 00 00       	call   c000938c <UnixFile::~UnixFile()>
c00084c5:	83 c4 10             	add    esp,0x10
c00084c8:	90                   	nop
c00084c9:	83 c4 0c             	add    esp,0xc
c00084cc:	c3                   	ret    
c00084cd:	90                   	nop

c00084ce <VgaText::~VgaText()>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 cd ff ff ff       	call   c00084aa <VgaText::~VgaText()>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	83 ec 08             	sub    esp,0x8
c00084e3:	68 84 01 00 00       	push   0x184
c00084e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ec:	e8 1b 23 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c00084f1:	83 c4 10             	add    esp,0x10
c00084f4:	83 c4 0c             	add    esp,0xc
c00084f7:	c3                   	ret    

c00084f8 <VgaText::read(unsigned long long, void*, int*)>:
c00084f8:	83 ec 10             	sub    esp,0x10
c00084fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008507:	e8 86 50 00 00       	call   c000d592 <readKeyboard(VgaText*, char*, unsigned long)>
c000850c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008510:	89 02                	mov    DWORD PTR [edx],eax
c0008512:	31 c0                	xor    eax,eax
c0008514:	83 c4 1c             	add    esp,0x1c
c0008517:	c3                   	ret    

c0008518 <setTerminalScrollLock(bool)>:
c0008518:	c3                   	ret    

c0008519 <doTerminalCycle()>:
c0008519:	c3                   	ret    

c000851a <addToTerminalCycle(VgaText*)>:
c000851a:	c3                   	ret    

c000851b <scrollTerminalScrollLock(int)>:
c000851b:	c3                   	ret    

c000851c <VgaText::updateTitle()>:
c000851c:	c3                   	ret    
c000851d:	90                   	nop

c000851e <VgaText::load()>:
c000851e:	c3                   	ret    
c000851f:	90                   	nop

c0008520 <VgaText::updateCursor()>:
c0008520:	83 ec 14             	sub    esp,0x14
c0008523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008527:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000852a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000852d:	e8 be 03 01 00       	call   c00188f0 <HalConsoleCursorUpdate(int, int)>
c0008532:	83 c4 1c             	add    esp,0x1c
c0008535:	c3                   	ret    

c0008536 <VgaText::doANSI_SGR(int)>:
c0008536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000853e:	85 d2                	test   edx,edx
c0008540:	75 0b                	jne    c000854d <VgaText::doANSI_SGR(int)+0x17>
c0008542:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008545:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008548:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000854b:	eb 59                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000854d:	83 fa 07             	cmp    edx,0x7
c0008550:	75 0b                	jne    c000855d <VgaText::doANSI_SGR(int)+0x27>
c0008552:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008555:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008558:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000855b:	eb 49                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c000855d:	83 fa 1b             	cmp    edx,0x1b
c0008560:	74 e0                	je     c0008542 <VgaText::doANSI_SGR(int)+0xc>
c0008562:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008565:	83 f9 07             	cmp    ecx,0x7
c0008568:	77 09                	ja     c0008573 <VgaText::doANSI_SGR(int)+0x3d>
c000856a:	8b 14 8d 40 30 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcfc0]
c0008571:	eb 20                	jmp    c0008593 <VgaText::doANSI_SGR(int)+0x5d>
c0008573:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008576:	83 f9 07             	cmp    ecx,0x7
c0008579:	77 09                	ja     c0008584 <VgaText::doANSI_SGR(int)+0x4e>
c000857b:	8b 14 8d 40 30 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcfc0]
c0008582:	eb 22                	jmp    c00085a6 <VgaText::doANSI_SGR(int)+0x70>
c0008584:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008587:	83 f9 07             	cmp    ecx,0x7
c000858a:	77 0b                	ja     c0008597 <VgaText::doANSI_SGR(int)+0x61>
c000858c:	8b 14 95 f8 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd108]
c0008593:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008596:	c3                   	ret    
c0008597:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000859a:	83 f9 07             	cmp    ecx,0x7
c000859d:	77 0a                	ja     c00085a9 <VgaText::doANSI_SGR(int)+0x73>
c000859f:	8b 14 95 d0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd130]
c00085a6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a9:	c3                   	ret    

c00085aa <VgaText::setDefaultBgColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00085b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::setDefaultFgColour(VgaColour)>:
c00085ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085c2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085c8:	c3                   	ret    
c00085c9:	90                   	nop

c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085ca:	53                   	push   ebx
c00085cb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085cf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085d7:	51                   	push   ecx
c00085d8:	e8 cd ff ff ff       	call   c00085aa <VgaText::setDefaultBgColour(VgaColour)>
c00085dd:	58                   	pop    eax
c00085de:	5a                   	pop    edx
c00085df:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085e7:	5b                   	pop    ebx
c00085e8:	eb d0                	jmp    c00085ba <VgaText::setDefaultFgColour(VgaColour)>

c00085ea <VgaText::setTitleTextColour(VgaColour)>:
c00085ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085f2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085f5:	c3                   	ret    

c00085f6 <VgaText::setTitleColour(VgaColour)>:
c00085f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008601:	c3                   	ret    

c0008602 <VgaText::setTitle(char*)>:
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008608:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000860d:	83 e0 0f             	and    eax,0xf
c0008610:	c1 e2 04             	shl    edx,0x4
c0008613:	09 d0                	or     eax,edx
c0008615:	c3                   	ret    

c0008616 <VgaText::scrollScreen()>:
c0008616:	55                   	push   ebp
c0008617:	57                   	push   edi
c0008618:	56                   	push   esi
c0008619:	be 01 00 00 00       	mov    esi,0x1
c000861e:	53                   	push   ebx
c000861f:	83 ec 0c             	sub    esp,0xc
c0008622:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008626:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008629:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000862f:	31 ff                	xor    edi,edi
c0008631:	01 e9                	add    ecx,ebp
c0008633:	8a 01                	mov    al,BYTE PTR [ecx]
c0008635:	83 fe 18             	cmp    esi,0x18
c0008638:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000863e:	75 20                	jne    c0008660 <VgaText::scrollScreen()+0x4a>
c0008640:	f7 c7 01 00 00 00    	test   edi,0x1
c0008646:	74 15                	je     c000865d <VgaText::scrollScreen()+0x47>
c0008648:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000864c:	50                   	push   eax
c000864d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008651:	50                   	push   eax
c0008652:	e8 ad ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008657:	5a                   	pop    edx
c0008658:	5a                   	pop    edx
c0008659:	88 01                	mov    BYTE PTR [ecx],al
c000865b:	eb 03                	jmp    c0008660 <VgaText::scrollScreen()+0x4a>
c000865d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008660:	47                   	inc    edi
c0008661:	41                   	inc    ecx
c0008662:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008668:	75 c9                	jne    c0008633 <VgaText::scrollScreen()+0x1d>
c000866a:	46                   	inc    esi
c000866b:	83 fe 19             	cmp    esi,0x19
c000866e:	75 b9                	jne    c0008629 <VgaText::scrollScreen()+0x13>
c0008670:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008676:	75 1f                	jne    c0008697 <VgaText::scrollScreen()+0x81>
c0008678:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000867c:	74 05                	je     c0008683 <VgaText::scrollScreen()+0x6d>
c000867e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008681:	eb 14                	jmp    c0008697 <VgaText::scrollScreen()+0x81>
c0008683:	50                   	push   eax
c0008684:	50                   	push   eax
c0008685:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008689:	50                   	push   eax
c000868a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000868e:	50                   	push   eax
c000868f:	e8 f0 00 01 00       	call   c0018784 <HalConsoleScroll(int, int)>
c0008694:	83 c4 10             	add    esp,0x10
c0008697:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000869b:	83 c4 0c             	add    esp,0xc
c000869e:	5b                   	pop    ebx
c000869f:	5e                   	pop    esi
c00086a0:	5f                   	pop    edi
c00086a1:	5d                   	pop    ebp
c00086a2:	e9 79 fe ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00086a7:	90                   	nop

c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00086a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00086ad:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00086b2:	c1 e0 08             	shl    eax,0x8
c00086b5:	09 d0                	or     eax,edx
c00086b7:	c3                   	ret    

c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086b8:	55                   	push   ebp
c00086b9:	57                   	push   edi
c00086ba:	56                   	push   esi
c00086bb:	53                   	push   ebx
c00086bc:	83 ec 1c             	sub    esp,0x1c
c00086bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086c3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086d7:	0f b6 c3             	movzx  eax,bl
c00086da:	50                   	push   eax
c00086db:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086e0:	50                   	push   eax
c00086e1:	e8 1e ff ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c00086e6:	5a                   	pop    edx
c00086e7:	59                   	pop    ecx
c00086e8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086ed:	0f b6 c0             	movzx  eax,al
c00086f0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086f4:	50                   	push   eax
c00086f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086f9:	e8 aa ff ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00086fe:	5a                   	pop    edx
c00086ff:	6b d7 50             	imul   edx,edi,0x50
c0008702:	59                   	pop    ecx
c0008703:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008706:	01 f2                	add    edx,esi
c0008708:	0f b7 d2             	movzx  edx,dx
c000870b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000870f:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008715:	75 28                	jne    c000873f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008717:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000871b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000871f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008723:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008727:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000872b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000872f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008733:	83 c4 1c             	add    esp,0x1c
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	5f                   	pop    edi
c0008739:	5d                   	pop    ebp
c000873a:	e9 4d 01 01 00       	jmp    c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000873f:	83 c4 1c             	add    esp,0x1c
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	5d                   	pop    ebp
c0008746:	c3                   	ret    
c0008747:	90                   	nop

c0008748 <VgaText::getCursorX()>:
c0008748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000874c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000874f:	c3                   	ret    

c0008750 <VgaText::getCursorY()>:
c0008750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008754:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008757:	c3                   	ret    

c0008758 <VgaText::setCursor(int, int)>:
c0008758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000875c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008763:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008767:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000876a:	e9 b1 fd ff ff       	jmp    c0008520 <VgaText::updateCursor()>

c000876f <setActiveTerminal(VgaText*)>:
c000876f:	53                   	push   ebx
c0008770:	83 ec 08             	sub    esp,0x8
c0008773:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008777:	85 db                	test   ebx,ebx
c0008779:	75 11                	jne    c000878c <setActiveTerminal(VgaText*)+0x1d>
c000877b:	c7 44 24 10 20 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020920
c0008783:	83 c4 08             	add    esp,0x8
c0008786:	5b                   	pop    ebx
c0008787:	e9 c1 8a 00 00       	jmp    c001124d <KePanic(char const*)>
c000878c:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0008791:	85 c0                	test   eax,eax
c0008793:	74 0c                	je     c00087a1 <setActiveTerminal(VgaText*)+0x32>
c0008795:	83 ec 0c             	sub    esp,0xc
c0008798:	50                   	push   eax
c0008799:	e8 82 fd ff ff       	call   c0008520 <VgaText::updateCursor()>
c000879e:	83 c4 10             	add    esp,0x10
c00087a1:	50                   	push   eax
c00087a2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00087a5:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c00087ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00087ae:	53                   	push   ebx
c00087af:	e8 a4 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087b4:	83 c4 18             	add    esp,0x18
c00087b7:	5b                   	pop    ebx
c00087b8:	c3                   	ret    
c00087b9:	90                   	nop

c00087ba <VgaText::clearScreen()>:
c00087ba:	57                   	push   edi
c00087bb:	56                   	push   esi
c00087bc:	31 f6                	xor    esi,esi
c00087be:	53                   	push   ebx
c00087bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087c3:	52                   	push   edx
c00087c4:	6a 00                	push   0x0
c00087c6:	6a 00                	push   0x0
c00087c8:	53                   	push   ebx
c00087c9:	e8 8a ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c00087ce:	83 c4 10             	add    esp,0x10
c00087d1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087d8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087db:	7e 20                	jle    c00087fd <VgaText::clearScreen()+0x43>
c00087dd:	31 ff                	xor    edi,edi
c00087df:	50                   	push   eax
c00087e0:	50                   	push   eax
c00087e1:	56                   	push   esi
c00087e2:	57                   	push   edi
c00087e3:	47                   	inc    edi
c00087e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ea:	6a 20                	push   0x20
c00087ec:	53                   	push   ebx
c00087ed:	e8 c6 fe ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087f2:	83 c4 20             	add    esp,0x20
c00087f5:	83 ff 50             	cmp    edi,0x50
c00087f8:	75 e5                	jne    c00087df <VgaText::clearScreen()+0x25>
c00087fa:	46                   	inc    esi
c00087fb:	eb db                	jmp    c00087d8 <VgaText::clearScreen()+0x1e>
c00087fd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008804:	5b                   	pop    ebx
c0008805:	5e                   	pop    esi
c0008806:	5f                   	pop    edi
c0008807:	c3                   	ret    

c0008808 <VgaText::setCursorX(int)>:
c0008808:	83 ec 10             	sub    esp,0x10
c000880b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000880f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008816:	50                   	push   eax
c0008817:	e8 3c ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c000881c:	83 c4 1c             	add    esp,0x1c
c000881f:	c3                   	ret    

c0008820 <VgaText::setCursorY(int)>:
c0008820:	83 ec 10             	sub    esp,0x10
c0008823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008827:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000882b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000882e:	50                   	push   eax
c000882f:	e8 24 ff ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008834:	83 c4 1c             	add    esp,0x1c
c0008837:	c3                   	ret    

c0008838 <VgaText::incrementCursor(bool)>:
c0008838:	56                   	push   esi
c0008839:	53                   	push   ebx
c000883a:	51                   	push   ecx
c000883b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000883f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008843:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008846:	40                   	inc    eax
c0008847:	83 f8 50             	cmp    eax,0x50
c000884a:	74 05                	je     c0008851 <VgaText::incrementCursor(bool)+0x19>
c000884c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000884f:	eb 24                	jmp    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008851:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008858:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000885b:	8d 50 01             	lea    edx,[eax+0x1]
c000885e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008861:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008864:	75 0f                	jne    c0008875 <VgaText::incrementCursor(bool)+0x3d>
c0008866:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008869:	83 ec 0c             	sub    esp,0xc
c000886c:	53                   	push   ebx
c000886d:	e8 a4 fd ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008872:	83 c4 10             	add    esp,0x10
c0008875:	89 f0                	mov    eax,esi
c0008877:	84 c0                	test   al,al
c0008879:	74 0c                	je     c0008887 <VgaText::incrementCursor(bool)+0x4f>
c000887b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887f:	5a                   	pop    edx
c0008880:	5b                   	pop    ebx
c0008881:	5e                   	pop    esi
c0008882:	e9 99 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c0008887:	58                   	pop    eax
c0008888:	5b                   	pop    ebx
c0008889:	5e                   	pop    esi
c000888a:	c3                   	ret    
c000888b:	90                   	nop

c000888c <VgaText::decrementCursor(bool)>:
c000888c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008890:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008894:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008897:	85 c0                	test   eax,eax
c0008899:	74 04                	je     c000889f <VgaText::decrementCursor(bool)+0x13>
c000889b:	48                   	dec    eax
c000889c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000889f:	84 c9                	test   cl,cl
c00088a1:	74 09                	je     c00088ac <VgaText::decrementCursor(bool)+0x20>
c00088a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00088a7:	e9 74 fc ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c00088ac:	c3                   	ret    
c00088ad:	90                   	nop

c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>:
c00088ae:	53                   	push   ebx
c00088af:	83 ec 08             	sub    esp,0x8
c00088b2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088bf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088c3:	83 f8 07             	cmp    eax,0x7
c00088c6:	75 21                	jne    c00088e9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088c8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088d0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088d8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088e0:	83 c4 08             	add    esp,0x8
c00088e3:	5b                   	pop    ebx
c00088e4:	e9 e6 37 00 00       	jmp    c000c0cf <Krnl::beep(int, int, bool)>
c00088e9:	83 f8 0d             	cmp    eax,0xd
c00088ec:	75 09                	jne    c00088f7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f5:	eb 2d                	jmp    c0008924 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088f7:	83 f8 0a             	cmp    eax,0xa
c00088fa:	75 31                	jne    c000892d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008903:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008906:	8d 50 01             	lea    edx,[eax+0x1]
c0008909:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000890c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000890f:	75 0f                	jne    c0008920 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008911:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008914:	83 ec 0c             	sub    esp,0xc
c0008917:	53                   	push   ebx
c0008918:	e8 f9 fc ff ff       	call   c0008616 <VgaText::scrollScreen()>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008924:	83 c4 08             	add    esp,0x8
c0008927:	5b                   	pop    ebx
c0008928:	e9 f3 fb ff ff       	jmp    c0008520 <VgaText::updateCursor()>
c000892d:	83 f8 08             	cmp    eax,0x8
c0008930:	75 25                	jne    c0008957 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0008932:	50                   	push   eax
c0008933:	50                   	push   eax
c0008934:	6a 01                	push   0x1
c0008936:	53                   	push   ebx
c0008937:	e8 50 ff ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c000893c:	5a                   	pop    edx
c000893d:	59                   	pop    ecx
c000893e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008941:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008944:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008947:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000894a:	6a 20                	push   0x20
c000894c:	53                   	push   ebx
c000894d:	e8 66 fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008952:	83 c4 28             	add    esp,0x28
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    
c0008957:	83 ec 08             	sub    esp,0x8
c000895a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000895d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008960:	51                   	push   ecx
c0008961:	52                   	push   edx
c0008962:	50                   	push   eax
c0008963:	53                   	push   ebx
c0008964:	e8 4f fd ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008969:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000896d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008975:	83 c4 28             	add    esp,0x28
c0008978:	5b                   	pop    ebx
c0008979:	e9 ba fe ff ff       	jmp    c0008838 <VgaText::incrementCursor(bool)>

c000897e <VgaText::putchar(char)>:
c000897e:	57                   	push   edi
c000897f:	56                   	push   esi
c0008980:	53                   	push   ebx
c0008981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008985:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008989:	0f be c2             	movsx  eax,dl
c000898c:	83 f8 5b             	cmp    eax,0x5b
c000898f:	75 18                	jne    c00089a9 <VgaText::putchar(char)+0x2b>
c0008991:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008995:	74 20                	je     c00089b7 <VgaText::putchar(char)+0x39>
c0008997:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000899d:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00089a4:	e9 b8 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089a9:	83 f8 1b             	cmp    eax,0x1b
c00089ac:	75 09                	jne    c00089b7 <VgaText::putchar(char)+0x39>
c00089ae:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089b2:	e9 aa 00 00 00       	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c00089b7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00089bb:	89 f9                	mov    ecx,edi
c00089bd:	84 c9                	test   cl,cl
c00089bf:	0f 84 8c 00 00 00    	je     c0008a51 <VgaText::putchar(char)+0xd3>
c00089c5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00089c8:	80 f9 3e             	cmp    cl,0x3e
c00089cb:	77 70                	ja     c0008a3d <VgaText::putchar(char)+0xbf>
c00089cd:	83 f8 6d             	cmp    eax,0x6d
c00089d0:	75 3f                	jne    c0008a11 <VgaText::putchar(char)+0x93>
c00089d2:	31 f6                	xor    esi,esi
c00089d4:	31 d2                	xor    edx,edx
c00089d6:	31 c0                	xor    eax,eax
c00089d8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089db:	7e 25                	jle    c0008a02 <VgaText::putchar(char)+0x84>
c00089dd:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089e2:	83 fa 3b             	cmp    edx,0x3b
c00089e5:	75 0f                	jne    c00089f6 <VgaText::putchar(char)+0x78>
c00089e7:	50                   	push   eax
c00089e8:	53                   	push   ebx
c00089e9:	e8 48 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c00089ee:	31 d2                	xor    edx,edx
c00089f0:	59                   	pop    ecx
c00089f1:	58                   	pop    eax
c00089f2:	31 c0                	xor    eax,eax
c00089f4:	eb 09                	jmp    c00089ff <VgaText::putchar(char)+0x81>
c00089f6:	6b c0 0a             	imul   eax,eax,0xa
c00089f9:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089fd:	89 fa                	mov    edx,edi
c00089ff:	46                   	inc    esi
c0008a00:	eb d6                	jmp    c00089d8 <VgaText::putchar(char)+0x5a>
c0008a02:	84 d2                	test   dl,dl
c0008a04:	74 2f                	je     c0008a35 <VgaText::putchar(char)+0xb7>
c0008a06:	50                   	push   eax
c0008a07:	53                   	push   ebx
c0008a08:	e8 29 fb ff ff       	call   c0008536 <VgaText::doANSI_SGR(int)>
c0008a0d:	58                   	pop    eax
c0008a0e:	5a                   	pop    edx
c0008a0f:	eb 24                	jmp    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a11:	83 f8 4a             	cmp    eax,0x4a
c0008a14:	75 1f                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a16:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a1a:	75 19                	jne    c0008a35 <VgaText::putchar(char)+0xb7>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	53                   	push   ebx
c0008a20:	e8 95 fd ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008a25:	83 c4 0c             	add    esp,0xc
c0008a28:	6a 00                	push   0x0
c0008a2a:	6a 00                	push   0x0
c0008a2c:	53                   	push   ebx
c0008a2d:	e8 26 fd ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a3b:	eb 24                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a3d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a40:	83 f8 0e             	cmp    eax,0xe
c0008a43:	7f 1c                	jg     c0008a61 <VgaText::putchar(char)+0xe3>
c0008a45:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a48:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a4b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0008a4f:	eb 10                	jmp    c0008a61 <VgaText::putchar(char)+0xe3>
c0008a51:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a54:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a57:	50                   	push   eax
c0008a58:	53                   	push   ebx
c0008a59:	e8 50 fe ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a5e:	83 c4 10             	add    esp,0x10
c0008a61:	5b                   	pop    ebx
c0008a62:	5e                   	pop    esi
c0008a63:	5f                   	pop    edi
c0008a64:	c3                   	ret    
c0008a65:	90                   	nop

c0008a66 <VgaText::putx(unsigned int)>:
c0008a66:	57                   	push   edi
c0008a67:	b9 11 00 00 00       	mov    ecx,0x11
c0008a6c:	56                   	push   esi
c0008a6d:	be 2e 09 02 c0       	mov    esi,0xc002092e
c0008a72:	53                   	push   ebx
c0008a73:	83 ec 20             	sub    esp,0x20
c0008a76:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a7a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a7e:	fc                   	cld    
c0008a7f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a81:	be 08 00 00 00       	mov    esi,0x8
c0008a86:	50                   	push   eax
c0008a87:	50                   	push   eax
c0008a88:	89 d8                	mov    eax,ebx
c0008a8a:	c1 e8 1c             	shr    eax,0x1c
c0008a8d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a92:	c1 e3 04             	shl    ebx,0x4
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a9a:	e8 df fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008a9f:	83 c4 10             	add    esp,0x10
c0008aa2:	4e                   	dec    esi
c0008aa3:	75 e1                	jne    c0008a86 <VgaText::putx(unsigned int)+0x20>
c0008aa5:	83 c4 20             	add    esp,0x20
c0008aa8:	5b                   	pop    ebx
c0008aa9:	5e                   	pop    esi
c0008aaa:	5f                   	pop    edi
c0008aab:	c3                   	ret    

c0008aac <VgaText::puts(char const*)>:
c0008aac:	53                   	push   ebx
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008ab4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab7:	85 c0                	test   eax,eax
c0008ab9:	74 12                	je     c0008acd <VgaText::puts(char const*)+0x21>
c0008abb:	51                   	push   ecx
c0008abc:	43                   	inc    ebx
c0008abd:	51                   	push   ecx
c0008abe:	50                   	push   eax
c0008abf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ac3:	e8 b6 fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ac8:	83 c4 10             	add    esp,0x10
c0008acb:	eb e7                	jmp    c0008ab4 <VgaText::puts(char const*)+0x8>
c0008acd:	83 c4 08             	add    esp,0x8
c0008ad0:	5b                   	pop    ebx
c0008ad1:	c3                   	ret    

c0008ad2 <VgaText::write(unsigned long long, void*, int*)>:
c0008ad2:	55                   	push   ebp
c0008ad3:	57                   	push   edi
c0008ad4:	56                   	push   esi
c0008ad5:	53                   	push   ebx
c0008ad6:	83 ec 0c             	sub    esp,0xc
c0008ad9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008add:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ae1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ae5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008aec:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008aef:	39 eb                	cmp    ebx,ebp
c0008af1:	74 13                	je     c0008b06 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008af3:	50                   	push   eax
c0008af4:	43                   	inc    ebx
c0008af5:	50                   	push   eax
c0008af6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008afa:	50                   	push   eax
c0008afb:	56                   	push   esi
c0008afc:	e8 7d fe ff ff       	call   c000897e <VgaText::putchar(char)>
c0008b01:	83 c4 10             	add    esp,0x10
c0008b04:	eb e9                	jmp    c0008aef <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b06:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b11:	89 38                	mov    DWORD PTR [eax],edi
c0008b13:	83 c4 0c             	add    esp,0xc
c0008b16:	31 c0                	xor    eax,eax
c0008b18:	5b                   	pop    ebx
c0008b19:	5e                   	pop    esi
c0008b1a:	5f                   	pop    edi
c0008b1b:	5d                   	pop    ebp
c0008b1c:	c3                   	ret    
c0008b1d:	90                   	nop

c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b1e:	55                   	push   ebp
c0008b1f:	57                   	push   edi
c0008b20:	56                   	push   esi
c0008b21:	53                   	push   ebx
c0008b22:	83 ec 0c             	sub    esp,0xc
c0008b25:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0008b29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b2e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0008b35:	50                   	push   eax
c0008b36:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b3b:	50                   	push   eax
c0008b3c:	e8 c3 fa ff ff       	call   c0008604 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008b45:	5a                   	pop    edx
c0008b46:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008b49:	59                   	pop    ecx
c0008b4a:	0f b6 f8             	movzx  edi,al
c0008b4d:	0f b7 db             	movzx  ebx,bx
c0008b50:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b54:	01 db                	add    ebx,ebx
c0008b56:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008b59:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008b5c:	85 c0                	test   eax,eax
c0008b5e:	0f 84 ef 00 00 00    	je     c0008c53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b64:	83 f8 0d             	cmp    eax,0xd
c0008b67:	75 0c                	jne    c0008b75 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b69:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b70:	e9 d8 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b75:	83 f8 0a             	cmp    eax,0xa
c0008b78:	75 44                	jne    c0008bbe <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b7a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0008b81:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0008b84:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b87:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0008b8a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0008b8d:	75 0f                	jne    c0008b9e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b8f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0008b92:	83 ec 0c             	sub    esp,0xc
c0008b95:	55                   	push   ebp
c0008b96:	e8 7b fa ff ff       	call   c0008616 <VgaText::scrollScreen()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 0c             	sub    esp,0xc
c0008ba1:	55                   	push   ebp
c0008ba2:	e8 79 f9 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008ba7:	83 c4 10             	add    esp,0x10
c0008baa:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bae:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bb1:	0f b7 db             	movzx  ebx,bx
c0008bb4:	01 db                	add    ebx,ebx
c0008bb6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bb9:	e9 8f 00 00 00       	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bbe:	83 f8 08             	cmp    eax,0x8
c0008bc1:	75 34                	jne    c0008bf7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bc3:	51                   	push   ecx
c0008bc4:	51                   	push   ecx
c0008bc5:	6a 01                	push   0x1
c0008bc7:	55                   	push   ebp
c0008bc8:	e8 bf fc ff ff       	call   c000888c <VgaText::decrementCursor(bool)>
c0008bcd:	5b                   	pop    ebx
c0008bce:	58                   	pop    eax
c0008bcf:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008bd2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008bd5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c0008bd8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c0008bdb:	6a 20                	push   0x20
c0008bdd:	55                   	push   ebp
c0008bde:	e8 d5 fa ff ff       	call   c00086b8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008be3:	83 c4 20             	add    esp,0x20
c0008be6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008bea:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0008bed:	0f b7 db             	movzx  ebx,bx
c0008bf0:	01 db                	add    ebx,ebx
c0008bf2:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008bf5:	eb 56                	jmp    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf7:	52                   	push   edx
c0008bf8:	52                   	push   edx
c0008bf9:	57                   	push   edi
c0008bfa:	50                   	push   eax
c0008bfb:	e8 a8 fa ff ff       	call   c00086a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0008c00:	83 c4 10             	add    esp,0x10
c0008c03:	66 89 03             	mov    WORD PTR [ebx],ax
c0008c06:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c0008c0c:	75 1d                	jne    c0008c2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0008c14:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0008c17:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c1f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0008c22:	50                   	push   eax
c0008c23:	e8 64 fc 00 00       	call   c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c28:	83 c4 20             	add    esp,0x20
c0008c2b:	50                   	push   eax
c0008c2c:	83 c3 02             	add    ebx,0x2
c0008c2f:	50                   	push   eax
c0008c30:	6a 00                	push   0x0
c0008c32:	55                   	push   ebp
c0008c33:	e8 00 fc ff ff       	call   c0008838 <VgaText::incrementCursor(bool)>
c0008c38:	83 c4 10             	add    esp,0x10
c0008c3b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0008c3f:	75 0c                	jne    c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c41:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0008c45:	0f b7 db             	movzx  ebx,bx
c0008c48:	01 db                	add    ebx,ebx
c0008c4a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0008c4d:	46                   	inc    esi
c0008c4e:	e9 06 ff ff ff       	jmp    c0008b59 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c53:	83 ec 0c             	sub    esp,0xc
c0008c56:	55                   	push   ebp
c0008c57:	e8 c4 f8 ff ff       	call   c0008520 <VgaText::updateCursor()>
c0008c5c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0008c63:	83 c4 1c             	add    esp,0x1c
c0008c66:	5b                   	pop    ebx
c0008c67:	5e                   	pop    esi
c0008c68:	5f                   	pop    edi
c0008c69:	5d                   	pop    ebp
c0008c6a:	c3                   	ret    
c0008c6b:	90                   	nop

c0008c6c <VgaText::VgaText(char const*)>:
c0008c6c:	56                   	push   esi
c0008c6d:	53                   	push   ebx
c0008c6e:	83 ec 04             	sub    esp,0x4
c0008c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c75:	83 ec 08             	sub    esp,0x8
c0008c78:	6a 00                	push   0x0
c0008c7a:	50                   	push   eax
c0008c7b:	e8 26 05 00 00       	call   c00091a6 <UnixFile::UnixFile(int)>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	ba 54 09 02 c0       	mov    edx,0xc0020954
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	89 10                	mov    DWORD PTR [eax],edx
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ceb:	83 ec 0c             	sub    esp,0xc
c0008cee:	6a 01                	push   0x1
c0008cf0:	e8 00 09 00 00       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0008cf5:	83 c4 10             	add    esp,0x10
c0008cf8:	89 c2                	mov    edx,eax
c0008cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008d01:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d0e:	89 c6                	mov    esi,eax
c0008d10:	e8 cd f0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0008d15:	68 05 0c 00 00       	push   0xc05
c0008d1a:	56                   	push   esi
c0008d1b:	50                   	push   eax
c0008d1c:	53                   	push   ebx
c0008d1d:	e8 dc 0f 00 00       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d2c:	83 ec 04             	sub    esp,0x4
c0008d2f:	68 a0 0f 00 00       	push   0xfa0
c0008d34:	6a 00                	push   0x0
c0008d36:	50                   	push   eax
c0008d37:	e8 b4 77 ff ff       	call   c00004f0 <memset>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	83 ec 04             	sub    esp,0x4
c0008d42:	6a 00                	push   0x0
c0008d44:	6a 07                	push   0x7
c0008d46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d4a:	e8 7b f8 ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	83 ec 04             	sub    esp,0x4
c0008d55:	6a 00                	push   0x0
c0008d57:	6a 00                	push   0x0
c0008d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d5d:	e8 f6 f9 ff ff       	call   c0008758 <VgaText::setCursor(int, int)>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	83 ec 0c             	sub    esp,0xc
c0008d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d6c:	e8 49 fa ff ff       	call   c00087ba <VgaText::clearScreen()>
c0008d71:	83 c4 10             	add    esp,0x10
c0008d74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d78:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d80:	05 82 00 00 00       	add    eax,0x82
c0008d85:	83 ec 04             	sub    esp,0x4
c0008d88:	68 80 00 00 00       	push   0x80
c0008d8d:	6a 00                	push   0x0
c0008d8f:	50                   	push   eax
c0008d90:	e8 5b 77 ff ff       	call   c00004f0 <memset>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d9c:	05 02 01 00 00       	add    eax,0x102
c0008da1:	83 ec 04             	sub    esp,0x4
c0008da4:	68 80 00 00 00       	push   0x80
c0008da9:	6a 00                	push   0x0
c0008dab:	50                   	push   eax
c0008dac:	e8 3f 77 ff ff       	call   c00004f0 <memset>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	90                   	nop
c0008db5:	83 c4 04             	add    esp,0x4
c0008db8:	5b                   	pop    ebx
c0008db9:	5e                   	pop    esi
c0008dba:	c3                   	ret    
c0008dbb:	90                   	nop

c0008dbc <VgaText::receiveKey(unsigned char)>:
c0008dbc:	55                   	push   ebp
c0008dbd:	57                   	push   edi
c0008dbe:	56                   	push   esi
c0008dbf:	53                   	push   ebx
c0008dc0:	83 ec 2c             	sub    esp,0x2c
c0008dc3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008dc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dcb:	89 fd                	mov    ebp,edi
c0008dcd:	81 e5 ff 00 00 00    	and    ebp,0xff
c0008dd3:	0f 84 48 01 00 00    	je     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008dd9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008ddf:	83 fd 08             	cmp    ebp,0x8
c0008de2:	75 6a                	jne    c0008e4e <VgaText::receiveKey(unsigned char)+0x92>
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	56                   	push   esi
c0008de8:	e8 93 77 ff ff       	call   c0000580 <strlen>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	85 c0                	test   eax,eax
c0008df2:	0f 84 ef 00 00 00    	je     c0008ee7 <VgaText::receiveKey(unsigned char)+0x12b>
c0008df8:	50                   	push   eax
c0008df9:	50                   	push   eax
c0008dfa:	6a 08                	push   0x8
c0008dfc:	53                   	push   ebx
c0008dfd:	e8 7c fb ff ff       	call   c000897e <VgaText::putchar(char)>
c0008e02:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e05:	e8 76 77 ff ff       	call   c0000580 <strlen>
c0008e0a:	83 c4 10             	add    esp,0x10
c0008e0d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e15:	83 fa 1f             	cmp    edx,0x1f
c0008e18:	89 d0                	mov    eax,edx
c0008e1a:	7f 1c                	jg     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e1c:	83 e8 08             	sub    eax,0x8
c0008e1f:	3c 02                	cmp    al,0x2
c0008e21:	76 15                	jbe    c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e23:	83 fa 0d             	cmp    edx,0xd
c0008e26:	74 10                	je     c0008e38 <VgaText::receiveKey(unsigned char)+0x7c>
c0008e28:	57                   	push   edi
c0008e29:	57                   	push   edi
c0008e2a:	68 3f 09 02 c0       	push   0xc002093f
c0008e2f:	53                   	push   ebx
c0008e30:	e8 77 fc ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0008e35:	83 c4 10             	add    esp,0x10
c0008e38:	83 ec 0c             	sub    esp,0xc
c0008e3b:	56                   	push   esi
c0008e3c:	e8 3f 77 ff ff       	call   c0000580 <strlen>
c0008e41:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e49:	e9 96 00 00 00       	jmp    c0008ee4 <VgaText::receiveKey(unsigned char)+0x128>
c0008e4e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	50                   	push   eax
c0008e58:	e8 23 77 ff ff       	call   c0000580 <strlen>
c0008e5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e60:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e64:	e8 17 77 ff ff       	call   c0000580 <strlen>
c0008e69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e6d:	83 c4 10             	add    esp,0x10
c0008e70:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e74:	3d 80 00 00 00       	cmp    eax,0x80
c0008e79:	0f 87 a2 00 00 00    	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008e7f:	8d 47 ff             	lea    eax,[edi-0x1]
c0008e82:	3c 1e                	cmp    al,0x1e
c0008e84:	77 35                	ja     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e86:	8d 47 f7             	lea    eax,[edi-0x9]
c0008e89:	3c 01                	cmp    al,0x1
c0008e8b:	76 2e                	jbe    c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e8d:	83 fd 0d             	cmp    ebp,0xd
c0008e90:	74 29                	je     c0008ebb <VgaText::receiveKey(unsigned char)+0xff>
c0008e92:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e95:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e98:	68 45 09 02 c0       	push   0xc0020945
c0008e9d:	53                   	push   ebx
c0008e9e:	e8 7b fc ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008ea3:	8d 47 40             	lea    eax,[edi+0x40]
c0008ea6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea9:	0f b6 c0             	movzx  eax,al
c0008eac:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eaf:	50                   	push   eax
c0008eb0:	53                   	push   ebx
c0008eb1:	e8 f8 f9 ff ff       	call   c00088ae <VgaText::putchar(char, VgaColour, VgaColour)>
c0008eb6:	83 c4 20             	add    esp,0x20
c0008eb9:	eb 11                	jmp    c0008ecc <VgaText::receiveKey(unsigned char)+0x110>
c0008ebb:	51                   	push   ecx
c0008ebc:	89 f8                	mov    eax,edi
c0008ebe:	51                   	push   ecx
c0008ebf:	0f be c0             	movsx  eax,al
c0008ec2:	50                   	push   eax
c0008ec3:	53                   	push   ebx
c0008ec4:	e8 b5 fa ff ff       	call   c000897e <VgaText::putchar(char)>
c0008ec9:	83 c4 10             	add    esp,0x10
c0008ecc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ed1:	89 f8                	mov    eax,edi
c0008ed3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ed7:	52                   	push   edx
c0008ed8:	52                   	push   edx
c0008ed9:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008edd:	50                   	push   eax
c0008ede:	56                   	push   esi
c0008edf:	e8 8c 79 ff ff       	call   c0000870 <strcat>
c0008ee4:	83 c4 10             	add    esp,0x10
c0008ee7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008eee:	75 0f                	jne    c0008eff <VgaText::receiveKey(unsigned char)+0x143>
c0008ef0:	83 fd 1c             	cmp    ebp,0x1c
c0008ef3:	77 2c                	ja     c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008ef5:	b8 08 04 00 10       	mov    eax,0x10000408
c0008efa:	0f a3 e8             	bt     eax,ebp
c0008efd:	73 22                	jae    c0008f21 <VgaText::receiveKey(unsigned char)+0x165>
c0008eff:	50                   	push   eax
c0008f00:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f06:	50                   	push   eax
c0008f07:	56                   	push   esi
c0008f08:	53                   	push   ebx
c0008f09:	e8 62 79 ff ff       	call   c0000870 <strcat>
c0008f0e:	83 c4 0c             	add    esp,0xc
c0008f11:	68 80 00 00 00       	push   0x80
c0008f16:	6a 00                	push   0x0
c0008f18:	56                   	push   esi
c0008f19:	e8 d2 75 ff ff       	call   c00004f0 <memset>
c0008f1e:	83 c4 10             	add    esp,0x10
c0008f21:	83 c4 2c             	add    esp,0x2c
c0008f24:	5b                   	pop    ebx
c0008f25:	5e                   	pop    esi
c0008f26:	5f                   	pop    edi
c0008f27:	5d                   	pop    ebp
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <VgaText::doUpdate()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <TSS::TSS()>:
c0008f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f37:	90                   	nop
c0008f38:	c3                   	ret    
c0008f39:	90                   	nop
c0008f3a:	66 90                	xchg   ax,ax

c0008f3c <TSS::setESP(unsigned long)>:
c0008f3c:	55                   	push   ebp
c0008f3d:	89 e5                	mov    ebp,esp
c0008f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f4b:	90                   	nop
c0008f4c:	5d                   	pop    ebp
c0008f4d:	c3                   	ret    
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::flush()>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	83 ec 10             	sub    esp,0x10
c0008f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f5b:	83 c8 03             	or     eax,0x3
c0008f5e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f62:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f66:	66 89 d0             	mov    ax,dx
c0008f69:	0f 00 d8             	ltr    ax
c0008f6c:	90                   	nop
c0008f6d:	c9                   	leave  
c0008f6e:	c3                   	ret    
c0008f6f:	90                   	nop

c0008f70 <TSS::setup(unsigned long, unsigned long)>:
c0008f70:	55                   	push   ebp
c0008f71:	89 e5                	mov    ebp,esp
c0008f73:	83 ec 18             	sub    esp,0x18
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	6a 68                	push   0x68
c0008f7b:	e8 53 eb ff ff       	call   c0007ad3 <malloc>
c0008f80:	83 c4 10             	add    esp,0x10
c0008f83:	89 c2                	mov    edx,eax
c0008f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f88:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f91:	83 ec 04             	sub    esp,0x4
c0008f94:	6a 68                	push   0x68
c0008f96:	6a 00                	push   0x0
c0008f98:	50                   	push   eax
c0008f99:	e8 52 75 ff ff       	call   c00004f0 <memset>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fb3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fc2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0009016:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009022:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009038:	0f 20 da             	mov    edx,cr3
c000903b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000903e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009041:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009047:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904a:	83 ec 08             	sub    esp,0x8
c000904d:	50                   	push   eax
c000904e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009051:	50                   	push   eax
c0009052:	e8 eb e2 ff ff       	call   c0007342 <GDTEntry::setBase(unsigned int)>
c0009057:	83 c4 10             	add    esp,0x10
c000905a:	83 ec 08             	sub    esp,0x8
c000905d:	6a 68                	push   0x68
c000905f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009062:	50                   	push   eax
c0009063:	e8 f6 e2 ff ff       	call   c000735e <GDTEntry::setLimit(unsigned int)>
c0009068:	83 c4 10             	add    esp,0x10
c000906b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000906f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009072:	83 e0 0f             	and    eax,0xf
c0009075:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009078:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000907b:	83 c8 40             	or     eax,0x40
c000907e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009081:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009086:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000908c:	05 78 01 00 00       	add    eax,0x178
c0009091:	83 ec 04             	sub    esp,0x4
c0009094:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000909a:	50                   	push   eax
c000909b:	e8 f2 e2 ff ff       	call   c0007392 <GDT::addEntry(GDTEntry)>
c00090a0:	83 c4 10             	add    esp,0x10
c00090a3:	89 c2                	mov    edx,eax
c00090a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090a8:	89 10                	mov    DWORD PTR [eax],edx
c00090aa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090af:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090b5:	05 78 01 00 00       	add    eax,0x178
c00090ba:	83 ec 0c             	sub    esp,0xc
c00090bd:	50                   	push   eax
c00090be:	e8 f9 e2 ff ff       	call   c00073bc <GDT::flush()>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00090cb:	c9                   	leave  
c00090cc:	c3                   	ret    
c00090cd:	90                   	nop

c00090ce <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090d9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090de:	75 08                	jne    c00090e8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090e6:	eb 38                	jmp    c0009120 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090e8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00090ed:	75 17                	jne    c0009106 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00090ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00090f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00090f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00090fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00090ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009103:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0009106:	89 c1                	mov    ecx,eax
c0009108:	83 e1 fd             	and    ecx,0xfffffffd
c000910b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009111:	74 cd                	je     c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009113:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009118:	83 e0 ef             	and    eax,0xffffffef
c000911b:	83 f8 08             	cmp    eax,0x8
c000911e:	76 c0                	jbe    c00090e0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009120:	31 c0                	xor    eax,eax
c0009122:	c3                   	ret    
c0009123:	90                   	nop

c0009124 <ReservedFilename::isAtty()>:
c0009124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009128:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000912b:	31 c0                	xor    eax,eax
c000912d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009133:	74 09                	je     c000913e <ReservedFilename::isAtty()+0x1a>
c0009135:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000913b:	0f 94 c0             	sete   al
c000913e:	c3                   	ret    
c000913f:	90                   	nop

c0009140 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009148:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000914c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000914f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009154:	75 08                	jne    c000915e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009156:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000915c:	eb 3d                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000915e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009163:	75 17                	jne    c000917c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009165:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000916a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000916d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009173:	8b 10                	mov    edx,DWORD PTR [eax]
c0009175:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009179:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000917c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009181:	75 04                	jne    c0009187 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009183:	89 0a                	mov    DWORD PTR [edx],ecx
c0009185:	eb 14                	jmp    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009187:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000918c:	74 c8                	je     c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000918e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009193:	83 e0 ef             	and    eax,0xffffffef
c0009196:	83 f8 08             	cmp    eax,0x8
c0009199:	76 bb                	jbe    c0009156 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000919b:	31 c0                	xor    eax,eax
c000919d:	c3                   	ret    

c000919e <UnixFile::getFileDescriptor()>:
c000919e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091a5:	c3                   	ret    

c00091a6 <UnixFile::UnixFile(int)>:
c00091a6:	53                   	push   ebx
c00091a7:	83 ec 28             	sub    esp,0x28
c00091aa:	ba 1c 0a 02 c0       	mov    edx,0xc0020a1c
c00091af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b3:	89 10                	mov    DWORD PTR [eax],edx
c00091b5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091bd:	0f 8f 90 01 00 00    	jg     c0009353 <UnixFile::UnixFile(int)+0x1ad>
c00091c3:	a1 80 30 02 c0       	mov    eax,ds:0xc0023080
c00091c8:	8d 50 01             	lea    edx,[eax+0x1]
c00091cb:	89 15 80 30 02 c0    	mov    DWORD PTR ds:0xc0023080,edx
c00091d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091d8:	83 ec 08             	sub    esp,0x8
c00091db:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091df:	68 98 5f 02 c0       	push   0xc0025f98
c00091e4:	e8 0f 63 01 00       	call   c001f4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091e9:	83 c4 10             	add    esp,0x10
c00091ec:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c00091f1:	83 f0 01             	xor    eax,0x1
c00091f4:	0f b6 c0             	movzx  eax,al
c00091f7:	85 c0                	test   eax,eax
c00091f9:	0f 84 55 01 00 00    	je     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00091ff:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c0009206:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000920e:	83 ec 0c             	sub    esp,0xc
c0009211:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009215:	e8 b9 e8 ff ff       	call   c0007ad3 <malloc>
c000921a:	83 c4 10             	add    esp,0x10
c000921d:	89 c3                	mov    ebx,eax
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 03 ff ff 0f       	push   0xfffff03
c0009227:	53                   	push   ebx
c0009228:	e8 2d 01 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c0009236:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000923e:	83 ec 0c             	sub    esp,0xc
c0009241:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009245:	e8 89 e8 ff ff       	call   c0007ad3 <malloc>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	89 c3                	mov    ebx,eax
c000924f:	83 ec 08             	sub    esp,0x8
c0009252:	68 01 ff ff 0f       	push   0xfffff01
c0009257:	53                   	push   ebx
c0009258:	e8 fd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000925d:	83 c4 10             	add    esp,0x10
c0009260:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c0009266:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000926e:	83 ec 0c             	sub    esp,0xc
c0009271:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009275:	e8 59 e8 ff ff       	call   c0007ad3 <malloc>
c000927a:	83 c4 10             	add    esp,0x10
c000927d:	89 c3                	mov    ebx,eax
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 00 ff ff 0f       	push   0xfffff00
c0009287:	53                   	push   ebx
c0009288:	e8 cd 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c0009296:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000929e:	83 ec 0c             	sub    esp,0xc
c00092a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092a5:	e8 29 e8 ff ff       	call   c0007ad3 <malloc>
c00092aa:	83 c4 10             	add    esp,0x10
c00092ad:	89 c3                	mov    ebx,eax
c00092af:	83 ec 08             	sub    esp,0x8
c00092b2:	68 02 ff ff 0f       	push   0xfffff02
c00092b7:	53                   	push   ebx
c00092b8:	e8 9d 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c00092bd:	83 c4 10             	add    esp,0x10
c00092c0:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092c6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092ce:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092d3:	7f 7f                	jg     c0009354 <UnixFile::UnixFile(int)+0x1ae>
c00092d5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092dd:	83 ec 0c             	sub    esp,0xc
c00092e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092e4:	e8 ea e7 ff ff       	call   c0007ad3 <malloc>
c00092e9:	83 c4 10             	add    esp,0x10
c00092ec:	89 c3                	mov    ebx,eax
c00092ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092f2:	05 10 ff ff 0f       	add    eax,0xfffff10
c00092f7:	83 ec 08             	sub    esp,0x8
c00092fa:	50                   	push   eax
c00092fb:	53                   	push   ebx
c00092fc:	e8 59 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009308:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c000930f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009317:	83 ec 0c             	sub    esp,0xc
c000931a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000931e:	e8 b0 e7 ff ff       	call   c0007ad3 <malloc>
c0009323:	83 c4 10             	add    esp,0x10
c0009326:	89 c3                	mov    ebx,eax
c0009328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000932c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009331:	83 ec 08             	sub    esp,0x8
c0009334:	50                   	push   eax
c0009335:	53                   	push   ebx
c0009336:	e8 1f 00 00 00       	call   c000935a <ReservedFilename::ReservedFilename(int)>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009342:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009349:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000934e:	e9 7b ff ff ff       	jmp    c00092ce <UnixFile::UnixFile(int)+0x128>
c0009353:	90                   	nop
c0009354:	83 c4 28             	add    esp,0x28
c0009357:	5b                   	pop    ebx
c0009358:	c3                   	ret    
c0009359:	90                   	nop

c000935a <ReservedFilename::ReservedFilename(int)>:
c000935a:	83 ec 0c             	sub    esp,0xc
c000935d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009361:	83 ec 08             	sub    esp,0x8
c0009364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009368:	50                   	push   eax
c0009369:	e8 38 fe ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000936e:	83 c4 10             	add    esp,0x10
c0009371:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c0009376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000937a:	89 10                	mov    DWORD PTR [eax],edx
c000937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009380:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009384:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009387:	90                   	nop
c0009388:	83 c4 0c             	add    esp,0xc
c000938b:	c3                   	ret    

c000938c <UnixFile::~UnixFile()>:
c000938c:	83 ec 1c             	sub    esp,0x1c
c000938f:	ba 1c 0a 02 c0       	mov    edx,0xc0020a1c
c0009394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009398:	89 10                	mov    DWORD PTR [eax],edx
c000939a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000939e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093a6:	7f 76                	jg     c000941e <UnixFile::~UnixFile()+0x92>
c00093a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093b0:	83 ec 0c             	sub    esp,0xc
c00093b3:	68 98 5f 02 c0       	push   0xc0025f98
c00093b8:	e8 0f 62 01 00       	call   c001f5cc <LinkedList<UnixFile>::getFirstElement()>
c00093bd:	83 c4 10             	add    esp,0x10
c00093c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 5f 02 c0       	push   0xc0025f98
c00093cc:	e8 03 62 01 00       	call   c001f5d4 <LinkedList<UnixFile>::removeFirst()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093dc:	74 43                	je     c0009421 <UnixFile::~UnixFile()+0x95>
c00093de:	83 ec 08             	sub    esp,0x8
c00093e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093e5:	68 98 5f 02 c0       	push   0xc0025f98
c00093ea:	e8 09 61 01 00       	call   c001f4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00093ef:	83 c4 10             	add    esp,0x10
c00093f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093f6:	8d 50 01             	lea    edx,[eax+0x1]
c00093f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00093fd:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009402:	0f 94 c0             	sete   al
c0009405:	0f b6 c0             	movzx  eax,al
c0009408:	85 c0                	test   eax,eax
c000940a:	74 a4                	je     c00093b0 <UnixFile::~UnixFile()+0x24>
c000940c:	83 ec 0c             	sub    esp,0xc
c000940f:	68 f4 09 02 c0       	push   0xc00209f4
c0009414:	e8 34 7e 00 00       	call   c001124d <KePanic(char const*)>
c0009419:	83 c4 10             	add    esp,0x10
c000941c:	eb 92                	jmp    c00093b0 <UnixFile::~UnixFile()+0x24>
c000941e:	90                   	nop
c000941f:	eb 01                	jmp    c0009422 <UnixFile::~UnixFile()+0x96>
c0009421:	90                   	nop
c0009422:	90                   	nop
c0009423:	83 c4 1c             	add    esp,0x1c
c0009426:	c3                   	ret    
c0009427:	90                   	nop

c0009428 <UnixFile::~UnixFile()>:
c0009428:	83 ec 0c             	sub    esp,0xc
c000942b:	83 ec 0c             	sub    esp,0xc
c000942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009432:	e8 55 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c0009437:	83 c4 10             	add    esp,0x10
c000943a:	83 ec 08             	sub    esp,0x8
c000943d:	6a 0c                	push   0xc
c000943f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009443:	e8 c4 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009448:	83 c4 10             	add    esp,0x10
c000944b:	83 c4 0c             	add    esp,0xc
c000944e:	c3                   	ret    
c000944f:	90                   	nop

c0009450 <ReservedFilename::~ReservedFilename()>:
c0009450:	83 ec 0c             	sub    esp,0xc
c0009453:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c0009458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945c:	89 10                	mov    DWORD PTR [eax],edx
c000945e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009462:	83 ec 0c             	sub    esp,0xc
c0009465:	50                   	push   eax
c0009466:	e8 21 ff ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	90                   	nop
c000946f:	83 c4 0c             	add    esp,0xc
c0009472:	c3                   	ret    
c0009473:	90                   	nop

c0009474 <ReservedFilename::~ReservedFilename()>:
c0009474:	83 ec 0c             	sub    esp,0xc
c0009477:	83 ec 0c             	sub    esp,0xc
c000947a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000947e:	e8 cd ff ff ff       	call   c0009450 <ReservedFilename::~ReservedFilename()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	83 ec 08             	sub    esp,0x8
c0009489:	6a 0c                	push   0xc
c000948b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000948f:	e8 78 13 00 00       	call   c000a80c <operator delete(void*, unsigned long)>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	83 c4 0c             	add    esp,0xc
c000949a:	c3                   	ret    

c000949b <KeGetFileFromDescriptor(int)>:
c000949b:	53                   	push   ebx
c000949c:	83 ec 08             	sub    esp,0x8
c000949f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094a3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094a9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094af:	7f 2c                	jg     c00094dd <KeGetFileFromDescriptor(int)+0x42>
c00094b1:	83 ec 0c             	sub    esp,0xc
c00094b4:	68 98 5f 02 c0       	push   0xc0025f98
c00094b9:	e8 0e 61 01 00       	call   c001f5cc <LinkedList<UnixFile>::getFirstElement()>
c00094be:	83 c4 10             	add    esp,0x10
c00094c1:	85 c0                	test   eax,eax
c00094c3:	75 04                	jne    c00094c9 <KeGetFileFromDescriptor(int)+0x2e>
c00094c5:	31 c0                	xor    eax,eax
c00094c7:	eb 6e                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094c9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094cc:	74 69                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ce:	52                   	push   edx
c00094cf:	52                   	push   edx
c00094d0:	50                   	push   eax
c00094d1:	68 98 5f 02 c0       	push   0xc0025f98
c00094d6:	e8 9b 61 01 00       	call   c001f676 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094db:	eb e1                	jmp    c00094be <KeGetFileFromDescriptor(int)+0x23>
c00094dd:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094e3:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094e8:	74 4d                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094ea:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00094f0:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c00094f5:	74 40                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c00094f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00094fd:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009502:	74 33                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009504:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000950a:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c000950f:	74 26                	je     c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009511:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009517:	83 f8 08             	cmp    eax,0x8
c000951a:	77 09                	ja     c0009525 <KeGetFileFromDescriptor(int)+0x8a>
c000951c:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c0009523:	eb 12                	jmp    c0009537 <KeGetFileFromDescriptor(int)+0x9c>
c0009525:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000952b:	83 fb 08             	cmp    ebx,0x8
c000952e:	77 95                	ja     c00094c5 <KeGetFileFromDescriptor(int)+0x2a>
c0009530:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	5b                   	pop    ebx
c000953b:	c3                   	ret    

c000953c <__static_initialization_and_destruction_0(int, int)>:
c000953c:	83 ec 0c             	sub    esp,0xc
c000953f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009544:	75 34                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009546:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000954e:	75 2a                	jne    c000957a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	68 98 5f 02 c0       	push   0xc0025f98
c0009558:	e8 59 5f 01 00       	call   c001f4b6 <LinkedList<UnixFile>::LinkedList()>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	83 ec 04             	sub    esp,0x4
c0009563:	68 10 30 02 c0       	push   0xc0023010
c0009568:	68 98 5f 02 c0       	push   0xc0025f98
c000956d:	68 b4 f4 01 c0       	push   0xc001f4b4
c0009572:	e8 45 12 00 00       	call   c000a7bc <__cxa_atexit>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	90                   	nop
c000957b:	83 c4 0c             	add    esp,0xc
c000957e:	c3                   	ret    

c000957f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000957f:	83 ec 0c             	sub    esp,0xc
c0009582:	83 ec 08             	sub    esp,0x8
c0009585:	68 ff ff 00 00       	push   0xffff
c000958a:	6a 01                	push   0x1
c000958c:	e8 ab ff ff ff       	call   c000953c <__static_initialization_and_destruction_0(int, int)>
c0009591:	83 c4 10             	add    esp,0x10
c0009594:	83 c4 0c             	add    esp,0xc
c0009597:	c3                   	ret    

c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009598:	53                   	push   ebx
c0009599:	8b 15 88 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023088
c000959f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095a7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095ad:	89 d8                	mov    eax,ebx
c00095af:	d1 e8                	shr    eax,1
c00095b1:	01 d0                	add    eax,edx
c00095b3:	80 e3 01             	and    bl,0x1
c00095b6:	8a 10                	mov    dl,BYTE PTR [eax]
c00095b8:	75 09                	jne    c00095c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ba:	83 e2 f0             	and    edx,0xfffffff0
c00095bd:	09 ca                	or     edx,ecx
c00095bf:	88 10                	mov    BYTE PTR [eax],dl
c00095c1:	5b                   	pop    ebx
c00095c2:	c3                   	ret    
c00095c3:	0f b6 c9             	movzx  ecx,cl
c00095c6:	83 e2 0f             	and    edx,0xf
c00095c9:	c1 e1 04             	shl    ecx,0x4
c00095cc:	09 ca                	or     edx,ecx
c00095ce:	88 10                	mov    BYTE PTR [eax],dl
c00095d0:	5b                   	pop    ebx
c00095d1:	c3                   	ret    

c00095d2 <Virt::getPageState(unsigned long)>:
c00095d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095d6:	8b 0d 88 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023088
c00095dc:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095e2:	89 d0                	mov    eax,edx
c00095e4:	d1 e8                	shr    eax,1
c00095e6:	80 e2 01             	and    dl,0x1
c00095e9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00095ec:	74 03                	je     c00095f1 <Virt::getPageState(unsigned long)+0x1f>
c00095ee:	c1 e8 04             	shr    eax,0x4
c00095f1:	83 e0 0f             	and    eax,0xf
c00095f4:	c3                   	ret    

c00095f5 <Virt::allocateKernelVirtualPages(int)>:
c00095f5:	55                   	push   ebp
c00095f6:	57                   	push   edi
c00095f7:	56                   	push   esi
c00095f8:	31 f6                	xor    esi,esi
c00095fa:	53                   	push   ebx
c00095fb:	31 db                	xor    ebx,ebx
c00095fd:	83 ec 1c             	sub    esp,0x1c
c0009600:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009605:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009609:	8b 2d 84 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023084
c000960f:	55                   	push   ebp
c0009610:	e8 bd ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009615:	5a                   	pop    edx
c0009616:	84 c0                	test   al,al
c0009618:	75 3d                	jne    c0009657 <Virt::allocateKernelVirtualPages(int)+0x62>
c000961a:	85 db                	test   ebx,ebx
c000961c:	0f 44 f5             	cmove  esi,ebp
c000961f:	83 c3 01             	add    ebx,0x1
c0009622:	39 fb                	cmp    ebx,edi
c0009624:	74 5e                	je     c0009684 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0009626:	83 c5 01             	add    ebp,0x1
c0009629:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c000962f:	76 33                	jbe    c0009664 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0009631:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0009636:	c7 05 84 30 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023084,0xc8000
c0009640:	75 2a                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x77>
c0009642:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009647:	bd 00 80 0c 00       	mov    ebp,0xc8000
c000964c:	55                   	push   ebp
c000964d:	e8 80 ff ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c0009652:	5a                   	pop    edx
c0009653:	84 c0                	test   al,al
c0009655:	74 c3                	je     c000961a <Virt::allocateKernelVirtualPages(int)+0x25>
c0009657:	83 c5 01             	add    ebp,0x1
c000965a:	31 db                	xor    ebx,ebx
c000965c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0009662:	77 cd                	ja     c0009631 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0009664:	89 2d 84 30 02 c0    	mov    DWORD PTR ds:0xc0023084,ebp
c000966a:	eb a3                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000966c:	83 ec 0c             	sub    esp,0xc
c000966f:	68 4c 0a 02 c0       	push   0xc0020a4c
c0009674:	e8 d4 7b 00 00       	call   c001124d <KePanic(char const*)>
c0009679:	8b 2d 84 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023084
c000967f:	83 c4 10             	add    esp,0x10
c0009682:	eb 8b                	jmp    c000960f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009684:	89 35 84 30 02 c0    	mov    DWORD PTR ds:0xc0023084,esi
c000968a:	83 fb 01             	cmp    ebx,0x1
c000968d:	74 63                	je     c00096f2 <Virt::allocateKernelVirtualPages(int)+0xfd>
c000968f:	85 ff                	test   edi,edi
c0009691:	74 41                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0009693:	89 f0                	mov    eax,esi
c0009695:	31 db                	xor    ebx,ebx
c0009697:	8d 6f ff             	lea    ebp,[edi-0x1]
c000969a:	eb 16                	jmp    c00096b2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c000969c:	6a 01                	push   0x1
c000969e:	83 c3 01             	add    ebx,0x1
c00096a1:	50                   	push   eax
c00096a2:	e8 f1 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a7:	39 fb                	cmp    ebx,edi
c00096a9:	58                   	pop    eax
c00096aa:	5a                   	pop    edx
c00096ab:	74 27                	je     c00096d4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c00096ad:	a1 84 30 02 c0       	mov    eax,ds:0xc0023084
c00096b2:	8d 50 01             	lea    edx,[eax+0x1]
c00096b5:	85 db                	test   ebx,ebx
c00096b7:	89 15 84 30 02 c0    	mov    DWORD PTR ds:0xc0023084,edx
c00096bd:	74 22                	je     c00096e1 <Virt::allocateKernelVirtualPages(int)+0xec>
c00096bf:	39 dd                	cmp    ebp,ebx
c00096c1:	75 d9                	jne    c000969c <Virt::allocateKernelVirtualPages(int)+0xa7>
c00096c3:	6a 03                	push   0x3
c00096c5:	83 c3 01             	add    ebx,0x1
c00096c8:	50                   	push   eax
c00096c9:	e8 ca fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ce:	39 fb                	cmp    ebx,edi
c00096d0:	59                   	pop    ecx
c00096d1:	58                   	pop    eax
c00096d2:	75 d9                	jne    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096d4:	83 c4 1c             	add    esp,0x1c
c00096d7:	89 f0                	mov    eax,esi
c00096d9:	5b                   	pop    ebx
c00096da:	c1 e0 0c             	shl    eax,0xc
c00096dd:	5e                   	pop    esi
c00096de:	5f                   	pop    edi
c00096df:	5d                   	pop    ebp
c00096e0:	c3                   	ret    
c00096e1:	6a 02                	push   0x2
c00096e3:	bb 01 00 00 00       	mov    ebx,0x1
c00096e8:	50                   	push   eax
c00096e9:	e8 aa fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ee:	58                   	pop    eax
c00096ef:	5a                   	pop    edx
c00096f0:	eb bb                	jmp    c00096ad <Virt::allocateKernelVirtualPages(int)+0xb8>
c00096f2:	6a 04                	push   0x4
c00096f4:	56                   	push   esi
c00096f5:	8d 46 01             	lea    eax,[esi+0x1]
c00096f8:	a3 84 30 02 c0       	mov    ds:0xc0023084,eax
c00096fd:	e8 96 fe ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009702:	89 f0                	mov    eax,esi
c0009704:	59                   	pop    ecx
c0009705:	c1 e0 0c             	shl    eax,0xc
c0009708:	5b                   	pop    ebx
c0009709:	83 c4 1c             	add    esp,0x1c
c000970c:	5b                   	pop    ebx
c000970d:	5e                   	pop    esi
c000970e:	5f                   	pop    edi
c000970f:	5d                   	pop    ebp
c0009710:	c3                   	ret    

c0009711 <Virt::freeSwapfilePage(unsigned long)>:
c0009711:	53                   	push   ebx
c0009712:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009718:	b8 01 00 00 00       	mov    eax,0x1
c000971d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009721:	d3 e0                	shl    eax,cl
c0009723:	89 cb                	mov    ebx,ecx
c0009725:	c1 eb 05             	shr    ebx,0x5
c0009728:	f7 d0                	not    eax
c000972a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000972d:	21 c1                	and    ecx,eax
c000972f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009732:	5b                   	pop    ebx
c0009733:	c3                   	ret    

c0009734 <Virt::swapIDToSector(unsigned long)>:
c0009734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009738:	8b 15 8c 30 02 c0    	mov    edx,DWORD PTR ds:0xc002308c
c000973e:	8b 0d 94 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023094
c0009744:	0f af c2             	imul   eax,edx
c0009747:	01 c8                	add    eax,ecx
c0009749:	c3                   	ret    

c000974a <Virt::allocateSwapfilePage()>:
c000974a:	55                   	push   ebp
c000974b:	31 d2                	xor    edx,edx
c000974d:	57                   	push   edi
c000974e:	56                   	push   esi
c000974f:	53                   	push   ebx
c0009750:	83 ec 0c             	sub    esp,0xc
c0009753:	8b 1d 90 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023090
c0009759:	8b 0d 8c 30 02 c0    	mov    ecx,DWORD PTR ds:0xc002308c
c000975f:	89 d8                	mov    eax,ebx
c0009761:	f7 f1                	div    ecx
c0009763:	39 cb                	cmp    ebx,ecx
c0009765:	72 2f                	jb     c0009796 <Virt::allocateSwapfilePage()+0x4c>
c0009767:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000976d:	8b 16                	mov    edx,DWORD PTR [esi]
c000976f:	f6 c2 01             	test   dl,0x1
c0009772:	74 3e                	je     c00097b2 <Virt::allocateSwapfilePage()+0x68>
c0009774:	31 c9                	xor    ecx,ecx
c0009776:	bf 01 00 00 00       	mov    edi,0x1
c000977b:	eb 12                	jmp    c000978f <Virt::allocateSwapfilePage()+0x45>
c000977d:	89 ca                	mov    edx,ecx
c000977f:	89 fd                	mov    ebp,edi
c0009781:	c1 ea 05             	shr    edx,0x5
c0009784:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009787:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009789:	d3 e5                	shl    ebp,cl
c000978b:	85 ea                	test   edx,ebp
c000978d:	74 2c                	je     c00097bb <Virt::allocateSwapfilePage()+0x71>
c000978f:	83 c1 01             	add    ecx,0x1
c0009792:	39 c8                	cmp    eax,ecx
c0009794:	77 e7                	ja     c000977d <Virt::allocateSwapfilePage()+0x33>
c0009796:	83 ec 0c             	sub    esp,0xc
c0009799:	68 e0 0c 02 c0       	push   0xc0020ce0
c000979e:	e8 aa 7a 00 00       	call   c001124d <KePanic(char const*)>
c00097a3:	83 c4 10             	add    esp,0x10
c00097a6:	31 c9                	xor    ecx,ecx
c00097a8:	83 c4 0c             	add    esp,0xc
c00097ab:	89 c8                	mov    eax,ecx
c00097ad:	5b                   	pop    ebx
c00097ae:	5e                   	pop    esi
c00097af:	5f                   	pop    edi
c00097b0:	5d                   	pop    ebp
c00097b1:	c3                   	ret    
c00097b2:	89 f3                	mov    ebx,esi
c00097b4:	bd 01 00 00 00       	mov    ebp,0x1
c00097b9:	31 c9                	xor    ecx,ecx
c00097bb:	09 ea                	or     edx,ebp
c00097bd:	89 c8                	mov    eax,ecx
c00097bf:	89 13                	mov    DWORD PTR [ebx],edx
c00097c1:	83 c4 0c             	add    esp,0xc
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <Virt::virtualMemorySetup()>:
c00097c9:	53                   	push   ebx
c00097ca:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097cf:	6a 0f                	push   0xf
c00097d1:	53                   	push   ebx
c00097d2:	83 c3 01             	add    ebx,0x1
c00097d5:	e8 be fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097da:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097e0:	58                   	pop    eax
c00097e1:	5a                   	pop    edx
c00097e2:	75 eb                	jne    c00097cf <Virt::virtualMemorySetup()+0x6>
c00097e4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097e9:	6a 00                	push   0x0
c00097eb:	53                   	push   ebx
c00097ec:	83 c3 01             	add    ebx,0x1
c00097ef:	e8 a4 fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097fa:	59                   	pop    ecx
c00097fb:	58                   	pop    eax
c00097fc:	75 eb                	jne    c00097e9 <Virt::virtualMemorySetup()+0x20>
c00097fe:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009803:	6a 0f                	push   0xf
c0009805:	53                   	push   ebx
c0009806:	83 c3 01             	add    ebx,0x1
c0009809:	e8 8a fd ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000980e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009814:	58                   	pop    eax
c0009815:	5a                   	pop    edx
c0009816:	75 eb                	jne    c0009803 <Virt::virtualMemorySetup()+0x3a>
c0009818:	5b                   	pop    ebx
c0009819:	c3                   	ret    

c000981a <Virt::setupPageSwapping(int)>:
c000981a:	53                   	push   ebx
c000981b:	83 ec 0c             	sub    esp,0xc
c000981e:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009823:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009827:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000982d:	8b 10                	mov    edx,DWORD PTR [eax]
c000982f:	53                   	push   ebx
c0009830:	68 f7 0c 02 c0       	push   0xc0020cf7
c0009835:	50                   	push   eax
c0009836:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0009839:	c1 e3 0b             	shl    ebx,0xb
c000983c:	89 1d 90 30 02 c0    	mov    DWORD PTR ds:0xc0023090,ebx
c0009842:	c1 eb 08             	shr    ebx,0x8
c0009845:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009848:	c6 05 98 30 02 c0 43 	mov    BYTE PTR ds:0xc0023098,0x43
c000984f:	c7 05 8c 30 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002308c,0x8
c0009859:	a3 94 30 02 c0       	mov    ds:0xc0023094,eax
c000985e:	e8 70 e2 ff ff       	call   c0007ad3 <malloc>
c0009863:	31 d2                	xor    edx,edx
c0009865:	83 c4 0c             	add    esp,0xc
c0009868:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000986d:	89 c1                	mov    ecx,eax
c000986f:	a1 90 30 02 c0       	mov    eax,ds:0xc0023090
c0009874:	f7 35 8c 30 02 c0    	div    DWORD PTR ds:0xc002308c
c000987a:	c1 e8 05             	shr    eax,0x5
c000987d:	50                   	push   eax
c000987e:	6a 00                	push   0x0
c0009880:	51                   	push   ecx
c0009881:	e8 6a 6c ff ff       	call   c00004f0 <memset>
c0009886:	83 c4 18             	add    esp,0x18
c0009889:	5b                   	pop    ebx
c000988a:	c3                   	ret    
c000988b:	90                   	nop

c000988c <VAS::setCPUSpecific(unsigned long)>:
c000988c:	c3                   	ret    
c000988d:	90                   	nop

c000988e <VAS::VAS(VAS*)>:
c000988e:	83 ec 0c             	sub    esp,0xc
c0009891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009895:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000989c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098a7:	83 ec 0c             	sub    esp,0xc
c00098aa:	68 6c 0a 02 c0       	push   0xc0020a6c
c00098af:	e8 99 79 00 00       	call   c001124d <KePanic(char const*)>
c00098b4:	83 c4 10             	add    esp,0x10
c00098b7:	90                   	nop
c00098b8:	83 c4 0c             	add    esp,0xc
c00098bb:	c3                   	ret    

c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098c0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098c5:	89 c2                	mov    edx,eax
c00098c7:	c1 ea 16             	shr    edx,0x16
c00098ca:	c1 e8 0a             	shr    eax,0xa
c00098cd:	83 f9 01             	cmp    ecx,0x1
c00098d0:	19 c9                	sbb    ecx,ecx
c00098d2:	25 fc 0f 00 00       	and    eax,0xffc
c00098d7:	c1 e2 0c             	shl    edx,0xc
c00098da:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098e0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00098e7:	01 d0                	add    eax,edx
c00098e9:	c3                   	ret    

c00098ea <VAS::getPageTableEntry(unsigned long)>:
c00098ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00098ee:	89 ca                	mov    edx,ecx
c00098f0:	c1 ea 16             	shr    edx,0x16
c00098f3:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00098f9:	c1 e9 0a             	shr    ecx,0xa
c00098fc:	c1 e0 0c             	shl    eax,0xc
c00098ff:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009905:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009908:	c3                   	ret    

c0009909 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009909:	55                   	push   ebp
c000990a:	57                   	push   edi
c000990b:	bf 01 00 00 00       	mov    edi,0x1
c0009910:	56                   	push   esi
c0009911:	53                   	push   ebx
c0009912:	83 ec 1c             	sub    esp,0x1c
c0009915:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009919:	c1 ee 0c             	shr    esi,0xc
c000991c:	eb 48                	jmp    c0009966 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c000991e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009923:	83 ec 08             	sub    esp,0x8
c0009926:	55                   	push   ebp
c0009927:	50                   	push   eax
c0009928:	e8 bd ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000992d:	83 c4 10             	add    esp,0x10
c0009930:	8b 10                	mov    edx,DWORD PTR [eax]
c0009932:	f6 c6 04             	test   dh,0x4
c0009935:	75 70                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009937:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000993d:	83 fb 04             	cmp    ebx,0x4
c0009940:	0f 84 8a 00 00 00    	je     c00099d0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009946:	83 fb 02             	cmp    ebx,0x2
c0009949:	0f 84 9a 00 00 00    	je     c00099e9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c000994f:	83 fb 03             	cmp    ebx,0x3
c0009952:	0f 84 be 00 00 00    	je     c0009a16 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0009958:	83 fb 01             	cmp    ebx,0x1
c000995b:	0f 84 a2 00 00 00    	je     c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009961:	83 c6 01             	add    esi,0x1
c0009964:	31 ff                	xor    edi,edi
c0009966:	56                   	push   esi
c0009967:	89 f5                	mov    ebp,esi
c0009969:	e8 64 fc ff ff       	call   c00095d2 <Virt::getPageState(unsigned long)>
c000996e:	c1 e5 0c             	shl    ebp,0xc
c0009971:	5a                   	pop    edx
c0009972:	0f b6 d8             	movzx  ebx,al
c0009975:	85 db                	test   ebx,ebx
c0009977:	75 a5                	jne    c000991e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	68 0e 0d 02 c0       	push   0xc0020d0e
c0009981:	e8 c7 78 00 00       	call   c001124d <KePanic(char const*)>
c0009986:	5a                   	pop    edx
c0009987:	59                   	pop    ecx
c0009988:	55                   	push   ebp
c0009989:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c000998f:	55                   	push   ebp
c0009990:	e8 55 ff ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	8b 10                	mov    edx,DWORD PTR [eax]
c000999a:	f6 c6 04             	test   dh,0x4
c000999d:	75 08                	jne    c00099a7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c000999f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099a5:	eb ba                	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099b1:	83 ec 0c             	sub    esp,0xc
c00099b4:	52                   	push   edx
c00099b5:	e8 bf e3 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c00099ba:	83 c4 10             	add    esp,0x10
c00099bd:	83 fb 04             	cmp    ebx,0x4
c00099c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ca:	0f 85 76 ff ff ff    	jne    c0009946 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099d0:	83 e7 01             	and    edi,0x1
c00099d3:	75 46                	jne    c0009a1b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099d5:	c7 44 24 30 90 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020a90
c00099dd:	83 c4 1c             	add    esp,0x1c
c00099e0:	5b                   	pop    ebx
c00099e1:	5e                   	pop    esi
c00099e2:	5f                   	pop    edi
c00099e3:	5d                   	pop    ebp
c00099e4:	e9 64 78 00 00       	jmp    c001124d <KePanic(char const*)>
c00099e9:	83 e7 01             	and    edi,0x1
c00099ec:	75 15                	jne    c0009a03 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00099ee:	83 ec 0c             	sub    esp,0xc
c00099f1:	68 2a 0d 02 c0       	push   0xc0020d2a
c00099f6:	e8 52 78 00 00       	call   c001124d <KePanic(char const*)>
c00099fb:	83 c4 10             	add    esp,0x10
c00099fe:	e9 5e ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a03:	83 ec 08             	sub    esp,0x8
c0009a06:	6a 00                	push   0x0
c0009a08:	56                   	push   esi
c0009a09:	e8 8a fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a0e:	83 c4 10             	add    esp,0x10
c0009a11:	e9 4b ff ff ff       	jmp    c0009961 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a16:	83 e7 01             	and    edi,0x1
c0009a19:	75 16                	jne    c0009a31 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a1b:	83 ec 08             	sub    esp,0x8
c0009a1e:	6a 00                	push   0x0
c0009a20:	56                   	push   esi
c0009a21:	e8 72 fb ff ff       	call   c0009598 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 c4 1c             	add    esp,0x1c
c0009a2c:	5b                   	pop    ebx
c0009a2d:	5e                   	pop    esi
c0009a2e:	5f                   	pop    edi
c0009a2f:	5d                   	pop    ebp
c0009a30:	c3                   	ret    
c0009a31:	c7 44 24 30 46 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020d46
c0009a39:	83 c4 1c             	add    esp,0x1c
c0009a3c:	5b                   	pop    ebx
c0009a3d:	5e                   	pop    esi
c0009a3e:	5f                   	pop    edi
c0009a3f:	5d                   	pop    ebp
c0009a40:	e9 08 78 00 00       	jmp    c001124d <KePanic(char const*)>
c0009a45:	90                   	nop

c0009a46 <VAS::freeAllocatedPages(unsigned long)>:
c0009a46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a4e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a52:	74 09                	je     c0009a5d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a54:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a58:	e9 ac fe ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a5d:	c7 44 24 04 b4 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ab4
c0009a65:	e9 a0 0e 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c0009a6a <VAS::virtualToPhysical(unsigned long)>:
c0009a6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a6e:	50                   	push   eax
c0009a6f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a73:	52                   	push   edx
c0009a74:	e8 71 fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009a79:	59                   	pop    ecx
c0009a7a:	5a                   	pop    edx
c0009a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a7d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a82:	c3                   	ret    
c0009a83:	90                   	nop

c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009a84:	55                   	push   ebp
c0009a85:	57                   	push   edi
c0009a86:	56                   	push   esi
c0009a87:	53                   	push   ebx
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a98:	85 db                	test   ebx,ebx
c0009a9a:	7e 24                	jle    c0009ac0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009a9c:	c1 e3 0c             	shl    ebx,0xc
c0009a9f:	01 f3                	add    ebx,esi
c0009aa1:	56                   	push   esi
c0009aa2:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aa8:	55                   	push   ebp
c0009aa9:	e8 3c fe ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c0009aae:	5a                   	pop    edx
c0009aaf:	59                   	pop    ecx
c0009ab0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ab2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ab6:	21 f9                	and    ecx,edi
c0009ab8:	09 d1                	or     ecx,edx
c0009aba:	39 f3                	cmp    ebx,esi
c0009abc:	89 08                	mov    DWORD PTR [eax],ecx
c0009abe:	75 e1                	jne    c0009aa1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ac0:	5b                   	pop    ebx
c0009ac1:	5e                   	pop    esi
c0009ac2:	5f                   	pop    edi
c0009ac3:	5d                   	pop    ebp
c0009ac4:	c3                   	ret    
c0009ac5:	90                   	nop

c0009ac6 <VAS::VAS()>:
c0009ac6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae0:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009aed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af1:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009af4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af8:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009aff:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b04:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b09:	29 c2                	sub    edx,eax
c0009b0b:	89 d0                	mov    eax,edx
c0009b0d:	05 ff 0f 00 00       	add    eax,0xfff
c0009b12:	c1 e8 0c             	shr    eax,0xc
c0009b15:	89 c2                	mov    edx,eax
c0009b17:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b1c:	6a 04                	push   0x4
c0009b1e:	6a ff                	push   0xffffffff
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b26:	e8 59 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b2b:	83 c4 14             	add    esp,0x14
c0009b2e:	90                   	nop
c0009b2f:	c3                   	ret    

c0009b30 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b3b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b42:	75 01                	jne    c0009b45 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b44:	c3                   	ret    
c0009b45:	68 80 00 00 00       	push   0x80
c0009b4a:	6a ff                	push   0xffffffff
c0009b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b50:	50                   	push   eax
c0009b51:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b55:	52                   	push   edx
c0009b56:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b5a:	51                   	push   ecx
c0009b5b:	e8 24 ff ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b60:	83 c4 14             	add    esp,0x14
c0009b63:	c3                   	ret    

c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b68:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b6f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b77:	83 f8 01             	cmp    eax,0x1
c0009b7a:	19 c0                	sbb    eax,eax
c0009b7c:	83 ca 03             	or     edx,0x3
c0009b7f:	83 e0 fc             	and    eax,0xfffffffc
c0009b82:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b89:	0f 20 d8             	mov    eax,cr3
c0009b8c:	0f 22 d8             	mov    cr3,eax
c0009b8f:	c3                   	ret    

c0009b90 <VAS::~VAS()>:
c0009b90:	83 ec 2c             	sub    esp,0x2c
c0009b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b9b:	fa                   	cli    
c0009b9c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ba1:	83 c0 01             	add    eax,0x1
c0009ba4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009ba9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bb0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bb3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bb9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bbd:	6a 01                	push   0x1
c0009bbf:	50                   	push   eax
c0009bc0:	e8 9f ff ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bc5:	83 c4 0c             	add    esp,0xc
c0009bc8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bd0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bd8:	0f 8f d8 00 00 00    	jg     c0009cb6 <VAS::~VAS()+0x126>
c0009bde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009be5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009be9:	c1 e2 02             	shl    edx,0x2
c0009bec:	01 d0                	add    eax,edx
c0009bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bf8:	83 e0 01             	and    eax,0x1
c0009bfb:	0f 84 ab 00 00 00    	je     c0009cac <VAS::~VAS()+0x11c>
c0009c01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c09:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c11:	7f 74                	jg     c0009c87 <VAS::~VAS()+0xf7>
c0009c13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c17:	c1 e0 0a             	shl    eax,0xa
c0009c1a:	89 c2                	mov    edx,eax
c0009c1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c20:	01 d0                	add    eax,edx
c0009c22:	c1 e0 0c             	shl    eax,0xc
c0009c25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c29:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c30:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c33:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c3d:	6a 01                	push   0x1
c0009c3f:	50                   	push   eax
c0009c40:	e8 77 fc ff ff       	call   c00098bc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c45:	83 c4 0c             	add    esp,0xc
c0009c48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5a:	25 01 04 00 00       	and    eax,0x401
c0009c5f:	3d 01 04 00 00       	cmp    eax,0x401
c0009c64:	75 1a                	jne    c0009c80 <VAS::~VAS()+0xf0>
c0009c66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c6a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c6f:	83 ec 0c             	sub    esp,0xc
c0009c72:	50                   	push   eax
c0009c73:	e8 01 e1 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009c78:	83 c4 10             	add    esp,0x10
c0009c7b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c80:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c85:	eb 82                	jmp    c0009c09 <VAS::~VAS()+0x79>
c0009c87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c8b:	25 00 04 00 00       	and    eax,0x400
c0009c90:	74 1a                	je     c0009cac <VAS::~VAS()+0x11c>
c0009c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c96:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c9b:	83 ec 0c             	sub    esp,0xc
c0009c9e:	50                   	push   eax
c0009c9f:	e8 d5 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009ca4:	83 c4 10             	add    esp,0x10
c0009ca7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cac:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cb1:	e9 1a ff ff ff       	jmp    c0009bd0 <VAS::~VAS()+0x40>
c0009cb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 43 fc ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ccd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cd0:	83 ec 0c             	sub    esp,0xc
c0009cd3:	50                   	push   eax
c0009cd4:	e8 a0 e0 ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0009cd9:	83 c4 10             	add    esp,0x10
c0009cdc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ce1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009ce6:	83 e8 01             	sub    eax,0x1
c0009ce9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009cee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009cf3:	85 c0                	test   eax,eax
c0009cf5:	75 01                	jne    c0009cf8 <VAS::~VAS()+0x168>
c0009cf7:	fb                   	sti    
c0009cf8:	90                   	nop
c0009cf9:	83 c4 2c             	add    esp,0x2c
c0009cfc:	c3                   	ret    
c0009cfd:	90                   	nop

c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cfe:	55                   	push   ebp
c0009cff:	57                   	push   edi
c0009d00:	56                   	push   esi
c0009d01:	53                   	push   ebx
c0009d02:	83 ec 1c             	sub    esp,0x1c
c0009d05:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009d0d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009d11:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d17:	77 08                	ja     c0009d21 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0009d19:	0f 20 d8             	mov    eax,cr3
c0009d1c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c0009d1f:	75 43                	jne    c0009d64 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0009d21:	89 d8                	mov    eax,ebx
c0009d23:	09 f8                	or     eax,edi
c0009d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2a:	75 53                	jne    c0009d7f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0009d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009d2f:	89 de                	mov    esi,ebx
c0009d31:	c1 ee 16             	shr    esi,0x16
c0009d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d3f:	74 50                	je     c0009d91 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0009d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d45:	c1 eb 0a             	shr    ebx,0xa
c0009d48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d4e:	c1 e6 0c             	shl    esi,0xc
c0009d51:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d57:	09 c7                	or     edi,eax
c0009d59:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0009d5c:	83 c4 1c             	add    esp,0x1c
c0009d5f:	5b                   	pop    ebx
c0009d60:	5e                   	pop    esi
c0009d61:	5f                   	pop    edi
c0009d62:	5d                   	pop    ebp
c0009d63:	c3                   	ret    
c0009d64:	83 ec 0c             	sub    esp,0xc
c0009d67:	68 d8 0a 02 c0       	push   0xc0020ad8
c0009d6c:	e8 99 0b 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0009d71:	89 d8                	mov    eax,ebx
c0009d73:	83 c4 10             	add    esp,0x10
c0009d76:	09 f8                	or     eax,edi
c0009d78:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d7d:	74 ad                	je     c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d7f:	83 ec 0c             	sub    esp,0xc
c0009d82:	68 40 0b 02 c0       	push   0xc0020b40
c0009d87:	e8 c1 74 00 00       	call   c001124d <KePanic(char const*)>
c0009d8c:	83 c4 10             	add    esp,0x10
c0009d8f:	eb 9b                	jmp    c0009d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0009d91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d95:	e8 48 e0 ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009d9a:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009da0:	83 ec 0c             	sub    esp,0xc
c0009da3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009dab:	6a 01                	push   0x1
c0009dad:	e8 43 f8 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009db2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db9:	6a 01                	push   0x1
c0009dbb:	50                   	push   eax
c0009dbc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009dc0:	52                   	push   edx
c0009dc1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc5:	51                   	push   ecx
c0009dc6:	e8 3d 01 00 00       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcb:	83 c4 1c             	add    esp,0x1c
c0009dce:	68 00 10 00 00       	push   0x1000
c0009dd3:	6a 00                	push   0x0
c0009dd5:	50                   	push   eax
c0009dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dda:	e8 11 67 ff ff       	call   c00004f0 <memset>
c0009ddf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de6:	e8 1e fb ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0009deb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0009df9:	0d 07 04 00 00       	or     eax,0x407
c0009dfe:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0009e01:	e9 3b ff ff ff       	jmp    c0009d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0009e06 <VAS::allocatePages(int, int)>:
c0009e06:	55                   	push   ebp
c0009e07:	57                   	push   edi
c0009e08:	56                   	push   esi
c0009e09:	53                   	push   ebx
c0009e0a:	83 ec 1c             	sub    esp,0x1c
c0009e0d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e15:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e19:	75 75                	jne    c0009e90 <VAS::allocatePages(int, int)+0x8a>
c0009e1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e22:	85 c0                	test   eax,eax
c0009e24:	74 49                	je     c0009e6f <VAS::allocatePages(int, int)+0x69>
c0009e26:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e2a:	89 d5                	mov    ebp,edx
c0009e2c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e30:	c1 e5 0c             	shl    ebp,0xc
c0009e33:	01 dd                	add    ebp,ebx
c0009e35:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e38:	81 cf 00 04 00 00    	or     edi,0x400
c0009e3e:	85 d2                	test   edx,edx
c0009e40:	7e 1b                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009e42:	e8 9b df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009e47:	57                   	push   edi
c0009e48:	53                   	push   ebx
c0009e49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e4f:	50                   	push   eax
c0009e50:	56                   	push   esi
c0009e51:	e8 a8 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e56:	83 c4 10             	add    esp,0x10
c0009e59:	39 dd                	cmp    ebp,ebx
c0009e5b:	75 e5                	jne    c0009e42 <VAS::allocatePages(int, int)+0x3c>
c0009e5d:	0f 20 d8             	mov    eax,cr3
c0009e60:	0f 22 d8             	mov    cr3,eax
c0009e63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e67:	83 c4 1c             	add    esp,0x1c
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	5f                   	pop    edi
c0009e6d:	5d                   	pop    ebp
c0009e6e:	c3                   	ret    
c0009e6f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e73:	83 ec 0c             	sub    esp,0xc
c0009e76:	68 64 0b 02 c0       	push   0xc0020b64
c0009e7b:	e8 cd 73 00 00       	call   c001124d <KePanic(char const*)>
c0009e80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e87:	83 c4 10             	add    esp,0x10
c0009e8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e8e:	eb 96                	jmp    c0009e26 <VAS::allocatePages(int, int)+0x20>
c0009e90:	83 ec 0c             	sub    esp,0xc
c0009e93:	52                   	push   edx
c0009e94:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009e98:	e8 58 f7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c0009e9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ea9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ead:	77 38                	ja     c0009ee7 <VAS::allocatePages(int, int)+0xe1>
c0009eaf:	85 d2                	test   edx,edx
c0009eb1:	7e aa                	jle    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009eb3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009eb7:	c1 e2 0c             	shl    edx,0xc
c0009eba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ebe:	81 cf 00 04 00 00    	or     edi,0x400
c0009ec4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c0009ec7:	e8 16 df ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009ecc:	57                   	push   edi
c0009ecd:	53                   	push   ebx
c0009ece:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ed4:	50                   	push   eax
c0009ed5:	56                   	push   esi
c0009ed6:	e8 23 fe ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	39 dd                	cmp    ebp,ebx
c0009ee0:	75 e5                	jne    c0009ec7 <VAS::allocatePages(int, int)+0xc1>
c0009ee2:	e9 76 ff ff ff       	jmp    c0009e5d <VAS::allocatePages(int, int)+0x57>
c0009ee7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009eec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ef2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009ef9:	74 b4                	je     c0009eaf <VAS::allocatePages(int, int)+0xa9>
c0009efb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eff:	80 cc 01             	or     ah,0x1
c0009f02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f06:	eb a7                	jmp    c0009eaf <VAS::allocatePages(int, int)+0xa9>

c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f08:	55                   	push   ebp
c0009f09:	57                   	push   edi
c0009f0a:	56                   	push   esi
c0009f0b:	53                   	push   ebx
c0009f0c:	83 ec 1c             	sub    esp,0x1c
c0009f0f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009f13:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009f17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009f1b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009f1f:	85 db                	test   ebx,ebx
c0009f21:	7e 2c                	jle    c0009f4f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0009f23:	c1 e3 0c             	shl    ebx,0xc
c0009f26:	8d 04 33             	lea    eax,[ebx+esi*1]
c0009f29:	89 f3                	mov    ebx,esi
c0009f2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f2f:	55                   	push   ebp
c0009f30:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0009f34:	29 f2                	sub    edx,esi
c0009f36:	01 da                	add    edx,ebx
c0009f38:	52                   	push   edx
c0009f39:	53                   	push   ebx
c0009f3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f40:	57                   	push   edi
c0009f41:	e8 b8 fd ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f46:	83 c4 10             	add    esp,0x10
c0009f49:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0009f4d:	75 e0                	jne    c0009f2f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0009f4f:	0f 20 d8             	mov    eax,cr3
c0009f52:	0f 22 d8             	mov    cr3,eax
c0009f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009f59:	83 c4 1c             	add    esp,0x1c
c0009f5c:	5b                   	pop    ebx
c0009f5d:	5e                   	pop    esi
c0009f5e:	5f                   	pop    edi
c0009f5f:	5d                   	pop    ebp
c0009f60:	c3                   	ret    
c0009f61:	90                   	nop

c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f62:	55                   	push   ebp
c0009f63:	57                   	push   edi
c0009f64:	56                   	push   esi
c0009f65:	53                   	push   ebx
c0009f66:	83 ec 1c             	sub    esp,0x1c
c0009f69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009f7d:	09 d8                	or     eax,ebx
c0009f7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f84:	75 4b                	jne    c0009fd1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f86:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f89:	89 de                	mov    esi,ebx
c0009f8b:	c1 ee 16             	shr    esi,0x16
c0009f8e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c0009f95:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0009f99:	74 48                	je     c0009fe3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0009f9b:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0009fa0:	c1 eb 0a             	shr    ebx,0xa
c0009fa3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009fa7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0009fab:	83 ff 01             	cmp    edi,0x1
c0009fae:	19 c0                	sbb    eax,eax
c0009fb0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009fb6:	c1 e6 0c             	shl    esi,0xc
c0009fb9:	25 00 00 c0 ff       	and    eax,0xffc00000
c0009fbe:	01 f3                	add    ebx,esi
c0009fc0:	09 ca                	or     edx,ecx
c0009fc2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c0009fc9:	83 c4 1c             	add    esp,0x1c
c0009fcc:	5b                   	pop    ebx
c0009fcd:	5e                   	pop    esi
c0009fce:	5f                   	pop    edi
c0009fcf:	5d                   	pop    ebp
c0009fd0:	c3                   	ret    
c0009fd1:	83 ec 0c             	sub    esp,0xc
c0009fd4:	68 90 0b 02 c0       	push   0xc0020b90
c0009fd9:	e8 6f 72 00 00       	call   c001124d <KePanic(char const*)>
c0009fde:	83 c4 10             	add    esp,0x10
c0009fe1:	eb a3                	jmp    c0009f86 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c0009fe3:	e8 fa dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c0009fe8:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009fee:	83 ec 0c             	sub    esp,0xc
c0009ff1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009ff5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0009ff9:	6a 01                	push   0x1
c0009ffb:	e8 f5 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a000:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a007:	6a 01                	push   0x1
c000a009:	50                   	push   eax
c000a00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a00e:	50                   	push   eax
c000a00f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000a013:	51                   	push   ecx
c000a014:	e8 ef fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a019:	83 c4 1c             	add    esp,0x1c
c000a01c:	68 00 10 00 00       	push   0x1000
c000a021:	6a 00                	push   0x0
c000a023:	50                   	push   eax
c000a024:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a028:	e8 c3 64 ff ff       	call   c00004f0 <memset>
c000a02d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a031:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a034:	e8 d0 f8 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a039:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a03d:	83 c4 10             	add    esp,0x10
c000a040:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a043:	81 ca 07 04 00 00    	or     edx,0x407
c000a049:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c000a04c:	e9 4a ff ff ff       	jmp    c0009f9b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c000a051:	90                   	nop

c000a052 <VAS::VAS(bool)>:
c000a052:	53                   	push   ebx
c000a053:	83 ec 28             	sub    esp,0x28
c000a056:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a05a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a05e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a062:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a069:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a07c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a07f:	e8 5e dd ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a084:	89 c2                	mov    edx,eax
c000a086:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a08d:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	6a 01                	push   0x1
c000a098:	e8 58 f5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 c2                	mov    edx,eax
c000a0a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 03                	push   0x3
c000a0ae:	6a 01                	push   0x1
c000a0b0:	52                   	push   edx
c000a0b1:	50                   	push   eax
c000a0b2:	53                   	push   ebx
c000a0b3:	e8 50 fe ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0b8:	83 c4 20             	add    esp,0x20
c000a0bb:	89 c2                	mov    edx,eax
c000a0bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0c4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0cc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0d4:	7f 1d                	jg     c000a0f3 <VAS::VAS(bool)+0xa1>
c000a0d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0dd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0e1:	c1 e2 02             	shl    edx,0x2
c000a0e4:	01 d0                	add    eax,edx
c000a0e6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a0f1:	eb d9                	jmp    c000a0cc <VAS::VAS(bool)+0x7a>
c000a0f3:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0fb:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a103:	7f 7e                	jg     c000a183 <VAS::VAS(bool)+0x131>
c000a105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a109:	2d 00 02 00 00       	sub    eax,0x200
c000a10e:	c1 e0 0c             	shl    eax,0xc
c000a111:	83 c8 05             	or     eax,0x5
c000a114:	89 c2                	mov    edx,eax
c000a116:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a11b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a121:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a127:	83 e0 10             	and    eax,0x10
c000a12a:	0f b6 c0             	movzx  eax,al
c000a12d:	85 c0                	test   eax,eax
c000a12f:	74 07                	je     c000a138 <VAS::VAS(bool)+0xe6>
c000a131:	b8 00 01 00 00       	mov    eax,0x100
c000a136:	eb 05                	jmp    c000a13d <VAS::VAS(bool)+0xeb>
c000a138:	b8 00 00 00 00       	mov    eax,0x0
c000a13d:	09 d0                	or     eax,edx
c000a13f:	89 c1                	mov    ecx,eax
c000a141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a148:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a14c:	c1 e2 02             	shl    edx,0x2
c000a14f:	01 d0                	add    eax,edx
c000a151:	89 ca                	mov    edx,ecx
c000a153:	89 10                	mov    DWORD PTR [eax],edx
c000a155:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a159:	2d 40 03 00 00       	sub    eax,0x340
c000a15e:	83 f8 7f             	cmp    eax,0x7f
c000a161:	77 16                	ja     c000a179 <VAS::VAS(bool)+0x127>
c000a163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a167:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a16a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a16e:	c1 e2 02             	shl    edx,0x2
c000a171:	01 d0                	add    eax,edx
c000a173:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a179:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a17e:	e9 78 ff ff ff       	jmp    c000a0fb <VAS::VAS(bool)+0xa9>
c000a183:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a18e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a194:	83 e0 10             	and    eax,0x10
c000a197:	0f b6 c0             	movzx  eax,al
c000a19a:	85 c0                	test   eax,eax
c000a19c:	74 07                	je     c000a1a5 <VAS::VAS(bool)+0x153>
c000a19e:	b8 03 41 00 00       	mov    eax,0x4103
c000a1a3:	eb 05                	jmp    c000a1aa <VAS::VAS(bool)+0x158>
c000a1a5:	b8 03 40 00 00       	mov    eax,0x4003
c000a1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1ae:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1b1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1b7:	89 02                	mov    DWORD PTR [edx],eax
c000a1b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1cb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1d1:	83 e0 10             	and    eax,0x10
c000a1d4:	0f b6 c0             	movzx  eax,al
c000a1d7:	85 c0                	test   eax,eax
c000a1d9:	74 07                	je     c000a1e2 <VAS::VAS(bool)+0x190>
c000a1db:	b8 00 01 00 00       	mov    eax,0x100
c000a1e0:	eb 05                	jmp    c000a1e7 <VAS::VAS(bool)+0x195>
c000a1e2:	b8 00 00 00 00       	mov    eax,0x0
c000a1e7:	09 c2                	or     edx,eax
c000a1e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1ed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1f0:	05 fc 0f 00 00       	add    eax,0xffc
c000a1f5:	83 ca 03             	or     edx,0x3
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a205:	83 ec 0c             	sub    esp,0xc
c000a208:	50                   	push   eax
c000a209:	e8 36 27 00 00       	call   c000c944 <Device::getName()>
c000a20e:	83 c4 10             	add    esp,0x10
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	68 60 0d 02 c0       	push   0xc0020d60
c000a219:	50                   	push   eax
c000a21a:	e8 61 65 ff ff       	call   c0000780 <strcmp>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	85 c0                	test   eax,eax
c000a224:	0f 94 c0             	sete   al
c000a227:	0f b6 c0             	movzx  eax,al
c000a22a:	85 c0                	test   eax,eax
c000a22c:	74 68                	je     c000a296 <VAS::VAS(bool)+0x244>
c000a22e:	fa                   	cli    
c000a22f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a234:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a23a:	05 7c 09 00 00       	add    eax,0x97c
c000a23f:	83 ec 0c             	sub    esp,0xc
c000a242:	50                   	push   eax
c000a243:	e8 86 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a248:	83 c4 10             	add    esp,0x10
c000a24b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a250:	89 c3                	mov    ebx,eax
c000a252:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a25d:	05 7c 09 00 00       	add    eax,0x97c
c000a262:	83 ec 0c             	sub    esp,0xc
c000a265:	50                   	push   eax
c000a266:	e8 63 d3 ff ff       	call   c00075ce <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a26b:	83 c4 10             	add    esp,0x10
c000a26e:	83 ec 08             	sub    esp,0x8
c000a271:	50                   	push   eax
c000a272:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a276:	e8 6f f6 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a280:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a285:	6a 11                	push   0x11
c000a287:	53                   	push   ebx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28d:	e8 6c fa ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a292:	83 c4 10             	add    esp,0x10
c000a295:	fb                   	sti    
c000a296:	90                   	nop
c000a297:	83 c4 28             	add    esp,0x28
c000a29a:	5b                   	pop    ebx
c000a29b:	c3                   	ret    

c000a29c <VAS::evict(unsigned long)>:
c000a29c:	55                   	push   ebp
c000a29d:	57                   	push   edi
c000a29e:	56                   	push   esi
c000a29f:	53                   	push   ebx
c000a2a0:	83 ec 1c             	sub    esp,0x1c
c000a2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2af:	e8 96 f4 ff ff       	call   c000974a <Virt::allocateSwapfilePage()>
c000a2b4:	89 c7                	mov    edi,eax
c000a2b6:	a1 8c 30 02 c0       	mov    eax,ds:0xc002308c
c000a2bb:	85 c0                	test   eax,eax
c000a2bd:	7e 40                	jle    c000a2ff <VAS::evict(unsigned long)+0x63>
c000a2bf:	89 ee                	mov    esi,ebp
c000a2c1:	31 db                	xor    ebx,ebx
c000a2c3:	83 ec 0c             	sub    esp,0xc
c000a2c6:	57                   	push   edi
c000a2c7:	e8 68 f4 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a2cc:	31 d2                	xor    edx,edx
c000a2ce:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2d1:	81 c6 00 02 00 00    	add    esi,0x200
c000a2d7:	6a 01                	push   0x1
c000a2d9:	52                   	push   edx
c000a2da:	01 d8                	add    eax,ebx
c000a2dc:	83 c3 01             	add    ebx,0x1
c000a2df:	50                   	push   eax
c000a2e0:	0f be 05 98 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023098
c000a2e7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a2ee:	50                   	push   eax
c000a2ef:	e8 12 38 00 00       	call   c000db06 <LogicalDisk::write(unsigned long long, int, void*)>
c000a2f4:	83 c4 20             	add    esp,0x20
c000a2f7:	39 1d 8c 30 02 c0    	cmp    DWORD PTR ds:0xc002308c,ebx
c000a2fd:	7f c4                	jg     c000a2c3 <VAS::evict(unsigned long)+0x27>
c000a2ff:	c1 e7 0c             	shl    edi,0xc
c000a302:	83 ec 08             	sub    esp,0x8
c000a305:	55                   	push   ebp
c000a306:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a30a:	50                   	push   eax
c000a30b:	e8 da f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a310:	8b 10                	mov    edx,DWORD PTR [eax]
c000a312:	89 d3                	mov    ebx,edx
c000a314:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a31a:	09 d7                	or     edi,edx
c000a31c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a322:	89 38                	mov    DWORD PTR [eax],edi
c000a324:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a327:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a32d:	83 c2 01             	add    edx,0x1
c000a330:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a336:	e8 3e da ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c000a33b:	0f 20 d8             	mov    eax,cr3
c000a33e:	0f 22 d8             	mov    cr3,eax
c000a341:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a347:	51                   	push   ecx
c000a348:	55                   	push   ebp
c000a349:	53                   	push   ebx
c000a34a:	68 b4 0b 02 c0       	push   0xc0020bb4
c000a34f:	e8 b6 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a354:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a359:	c7 44 24 50 6e 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020d6e
c000a361:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a365:	8d 50 01             	lea    edx,[eax+0x1]
c000a368:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a36e:	83 c4 3c             	add    esp,0x3c
c000a371:	5b                   	pop    ebx
c000a372:	5e                   	pop    esi
c000a373:	5f                   	pop    edi
c000a374:	5d                   	pop    ebp
c000a375:	e9 90 05 00 00       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>

c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a37a:	55                   	push   ebp
c000a37b:	57                   	push   edi
c000a37c:	56                   	push   esi
c000a37d:	53                   	push   ebx
c000a37e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a384:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c000a38b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c000a391:	77 78                	ja     c000a40b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c000a393:	83 ec 08             	sub    esp,0x8
c000a396:	53                   	push   ebx
c000a397:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a39d:	68 91 0d 02 c0       	push   0xc0020d91
c000a3a2:	e8 63 05 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a3a7:	58                   	pop    eax
c000a3a8:	5a                   	pop    edx
c000a3a9:	53                   	push   ebx
c000a3aa:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3b1:	51                   	push   ecx
c000a3b2:	e8 33 f5 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	85 c0                	test   eax,eax
c000a3bc:	89 c5                	mov    ebp,eax
c000a3be:	0f 95 c0             	setne  al
c000a3c1:	85 db                	test   ebx,ebx
c000a3c3:	0f 95 c2             	setne  dl
c000a3c6:	21 d0                	and    eax,edx
c000a3c8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000a3cc:	a8 01                	test   al,0x1
c000a3ce:	75 0f                	jne    c000a3df <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c000a3d0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a3d4:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3da:	5b                   	pop    ebx
c000a3db:	5e                   	pop    esi
c000a3dc:	5f                   	pop    edi
c000a3dd:	5d                   	pop    ebp
c000a3de:	c3                   	ret    
c000a3df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3e2:	f6 c4 02             	test   ah,0x2
c000a3e5:	75 39                	jne    c000a420 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c000a3e7:	89 c2                	mov    edx,eax
c000a3e9:	81 e2 01 04 00 00    	and    edx,0x401
c000a3ef:	81 fa 00 04 00 00    	cmp    edx,0x400
c000a3f5:	74 73                	je     c000a46a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c000a3f7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c000a3fc:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000a400:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a406:	5b                   	pop    ebx
c000a407:	5e                   	pop    esi
c000a408:	5f                   	pop    edi
c000a409:	5d                   	pop    ebp
c000a40a:	c3                   	ret    
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	68 7f 0d 02 c0       	push   0xc0020d7f
c000a413:	e8 35 6e 00 00       	call   c001124d <KePanic(char const*)>
c000a418:	83 c4 10             	add    esp,0x10
c000a41b:	e9 73 ff ff ff       	jmp    c000a393 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c000a420:	83 ec 0c             	sub    esp,0xc
c000a423:	89 de                	mov    esi,ebx
c000a425:	68 e4 0b 02 c0       	push   0xc0020be4
c000a42a:	e8 db 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a42f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a433:	e8 aa d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a438:	ba 00 10 00 00       	mov    edx,0x1000
c000a43d:	89 d1                	mov    ecx,edx
c000a43f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a441:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000a444:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a44a:	09 c8                	or     eax,ecx
c000a44c:	83 c8 02             	or     eax,0x2
c000a44f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000a452:	0f 20 d8             	mov    eax,cr3
c000a455:	0f 22 d8             	mov    cr3,eax
c000a458:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a45c:	89 df                	mov    edi,ebx
c000a45e:	89 d1                	mov    ecx,edx
c000a460:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	e9 66 ff ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c000a46a:	c1 e8 0c             	shr    eax,0xc
c000a46d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a471:	e8 6c d9 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a476:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000a479:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a47f:	09 c2                	or     edx,eax
c000a481:	81 ca 01 08 00 00    	or     edx,0x801
c000a487:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c000a48a:	a1 8c 30 02 c0       	mov    eax,ds:0xc002308c
c000a48f:	85 c0                	test   eax,eax
c000a491:	7e 44                	jle    c000a4d7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c000a493:	89 df                	mov    edi,ebx
c000a495:	31 f6                	xor    esi,esi
c000a497:	83 ec 0c             	sub    esp,0xc
c000a49a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a49e:	51                   	push   ecx
c000a49f:	e8 90 f2 ff ff       	call   c0009734 <Virt::swapIDToSector(unsigned long)>
c000a4a4:	31 d2                	xor    edx,edx
c000a4a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a4a9:	81 c7 00 02 00 00    	add    edi,0x200
c000a4af:	6a 01                	push   0x1
c000a4b1:	52                   	push   edx
c000a4b2:	01 f0                	add    eax,esi
c000a4b4:	83 c6 01             	add    esi,0x1
c000a4b7:	50                   	push   eax
c000a4b8:	0f be 05 98 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023098
c000a4bf:	8b 2c 85 7c 87 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd7884]
c000a4c6:	55                   	push   ebp
c000a4c7:	e8 ce 35 00 00       	call   c000da9a <LogicalDisk::read(unsigned long long, int, void*)>
c000a4cc:	83 c4 20             	add    esp,0x20
c000a4cf:	39 35 8c 30 02 c0    	cmp    DWORD PTR ds:0xc002308c,esi
c000a4d5:	7f c0                	jg     c000a497 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c000a4d7:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a4dc:	83 ec 04             	sub    esp,0x4
c000a4df:	83 e8 01             	sub    eax,0x1
c000a4e2:	50                   	push   eax
c000a4e3:	53                   	push   ebx
c000a4e4:	68 a4 0d 02 c0       	push   0xc0020da4
c000a4e9:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4ee:	e8 17 04 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a4f3:	58                   	pop    eax
c000a4f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a4f8:	52                   	push   edx
c000a4f9:	e8 13 f2 ff ff       	call   c0009711 <Virt::freeSwapfilePage(unsigned long)>
c000a4fe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a503:	83 c4 10             	add    esp,0x10
c000a506:	83 e8 01             	sub    eax,0x1
c000a509:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a50e:	85 c0                	test   eax,eax
c000a510:	75 01                	jne    c000a513 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c000a512:	fb                   	sti    
c000a513:	0f 20 d8             	mov    eax,cr3
c000a516:	0f 22 d8             	mov    cr3,eax
c000a519:	e9 b2 fe ff ff       	jmp    c000a3d0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c000a51e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a51e:	55                   	push   ebp
c000a51f:	57                   	push   edi
c000a520:	56                   	push   esi
c000a521:	53                   	push   ebx
c000a522:	83 ec 28             	sub    esp,0x28
c000a525:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a529:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52d:	50                   	push   eax
c000a52e:	e8 c2 f0 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000a533:	83 c4 0c             	add    esp,0xc
c000a536:	6a 07                	push   0x7
c000a538:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a53c:	52                   	push   edx
c000a53d:	89 c5                	mov    ebp,eax
c000a53f:	53                   	push   ebx
c000a540:	e8 c1 f8 ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c000a545:	83 c4 10             	add    esp,0x10
c000a548:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a54c:	89 c7                	mov    edi,eax
c000a54e:	85 c9                	test   ecx,ecx
c000a550:	74 2f                	je     c000a581 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a552:	31 f6                	xor    esi,esi
c000a554:	e8 89 d8 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a559:	83 c6 01             	add    esi,0x1
c000a55c:	6a 03                	push   0x3
c000a55e:	55                   	push   ebp
c000a55f:	50                   	push   eax
c000a560:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a564:	53                   	push   ebx
c000a565:	e8 94 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a56a:	6a 07                	push   0x7
c000a56c:	57                   	push   edi
c000a56d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a571:	50                   	push   eax
c000a572:	53                   	push   ebx
c000a573:	e8 86 f7 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c000a57f:	75 d3                	jne    c000a554 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a581:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a585:	89 28                	mov    DWORD PTR [eax],ebp
c000a587:	83 c4 1c             	add    esp,0x1c
c000a58a:	89 f8                	mov    eax,edi
c000a58c:	5b                   	pop    ebx
c000a58d:	5e                   	pop    esi
c000a58e:	5f                   	pop    edi
c000a58f:	5d                   	pop    ebp
c000a590:	c3                   	ret    
c000a591:	90                   	nop

c000a592 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a592:	53                   	push   ebx
c000a593:	83 ec 14             	sub    esp,0x14
c000a596:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a59a:	68 04 0c 02 c0       	push   0xc0020c04
c000a59f:	e8 66 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5a4:	c7 04 24 64 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c64
c000a5ab:	e8 5a 03 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a5b0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5b4:	83 c4 18             	add    esp,0x18
c000a5b7:	5b                   	pop    ebx
c000a5b8:	e9 4c f3 ff ff       	jmp    c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000a5bd:	90                   	nop

c000a5be <VAS::scanForEviction()>:
c000a5be:	57                   	push   edi
c000a5bf:	56                   	push   esi
c000a5c0:	31 f6                	xor    esi,esi
c000a5c2:	53                   	push   ebx
c000a5c3:	83 ec 10             	sub    esp,0x10
c000a5c6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5ca:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5cd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5d3:	75 0e                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a5d5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5d8:	89 da                	mov    edx,ebx
c000a5da:	c1 ea 16             	shr    edx,0x16
c000a5dd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5e1:	74 57                	je     c000a63a <VAS::scanForEviction()+0x7c>
c000a5e3:	53                   	push   ebx
c000a5e4:	57                   	push   edi
c000a5e5:	e8 00 f3 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c000a5ea:	5a                   	pop    edx
c000a5eb:	59                   	pop    ecx
c000a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5ee:	89 d1                	mov    ecx,edx
c000a5f0:	c1 e9 0c             	shr    ecx,0xc
c000a5f3:	74 10                	je     c000a605 <VAS::scanForEviction()+0x47>
c000a5f5:	89 d1                	mov    ecx,edx
c000a5f7:	81 e1 01 08 00 00    	and    ecx,0x801
c000a5fd:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a603:	74 40                	je     c000a645 <VAS::scanForEviction()+0x87>
c000a605:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a60b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a611:	76 2d                	jbe    c000a640 <VAS::scanForEviction()+0x82>
c000a613:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a61a:	83 c6 01             	add    esi,0x1
c000a61d:	83 fe 03             	cmp    esi,0x3
c000a620:	74 32                	je     c000a654 <VAS::scanForEviction()+0x96>
c000a622:	31 db                	xor    ebx,ebx
c000a624:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a62a:	75 b7                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a62c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a62f:	89 da                	mov    edx,ebx
c000a631:	c1 ea 16             	shr    edx,0x16
c000a634:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a638:	75 a9                	jne    c000a5e3 <VAS::scanForEviction()+0x25>
c000a63a:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a640:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a643:	eb 88                	jmp    c000a5cd <VAS::scanForEviction()+0xf>
c000a645:	f6 c2 20             	test   dl,0x20
c000a648:	74 13                	je     c000a65d <VAS::scanForEviction()+0x9f>
c000a64a:	83 e2 df             	and    edx,0xffffffdf
c000a64d:	89 10                	mov    DWORD PTR [eax],edx
c000a64f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a652:	eb b1                	jmp    c000a605 <VAS::scanForEviction()+0x47>
c000a654:	83 c4 10             	add    esp,0x10
c000a657:	31 c0                	xor    eax,eax
c000a659:	5b                   	pop    ebx
c000a65a:	5e                   	pop    esi
c000a65b:	5f                   	pop    edi
c000a65c:	c3                   	ret    
c000a65d:	89 d0                	mov    eax,edx
c000a65f:	83 ec 08             	sub    esp,0x8
c000a662:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a667:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a66b:	53                   	push   ebx
c000a66c:	68 b9 0d 02 c0       	push   0xc0020db9
c000a671:	e8 94 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a676:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a679:	58                   	pop    eax
c000a67a:	5a                   	pop    edx
c000a67b:	51                   	push   ecx
c000a67c:	57                   	push   edi
c000a67d:	e8 1a fc ff ff       	call   c000a29c <VAS::evict(unsigned long)>
c000a682:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a685:	5b                   	pop    ebx
c000a686:	5e                   	pop    esi
c000a687:	50                   	push   eax
c000a688:	68 cd 0d 02 c0       	push   0xc0020dcd
c000a68d:	e8 78 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a692:	58                   	pop    eax
c000a693:	5a                   	pop    edx
c000a694:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a698:	50                   	push   eax
c000a699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a69d:	68 e0 0d 02 c0       	push   0xc0020de0
c000a6a2:	e8 63 02 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a6a7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6aa:	83 c4 10             	add    esp,0x10
c000a6ad:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6b3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	c3                   	ret    

c000a6c1 <mapVASFirstTime>:
c000a6c1:	55                   	push   ebp
c000a6c2:	57                   	push   edi
c000a6c3:	56                   	push   esi
c000a6c4:	53                   	push   ebx
c000a6c5:	83 ec 0c             	sub    esp,0xc
c000a6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6cd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6d0:	83 fa 01             	cmp    edx,0x1
c000a6d3:	0f 84 cb 00 00 00    	je     c000a7a4 <mapVASFirstTime+0xe3>
c000a6d9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6dc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6e1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6e6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6e9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6ef:	c1 e5 15             	shl    ebp,0x15
c000a6f2:	29 eb                	sub    ebx,ebp
c000a6f4:	29 ef                	sub    edi,ebp
c000a6f6:	e8 e7 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	68 03 04 00 00       	push   0x403
c000a703:	6a 01                	push   0x1
c000a705:	53                   	push   ebx
c000a706:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a70c:	50                   	push   eax
c000a70d:	56                   	push   esi
c000a70e:	e8 f5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a713:	83 c4 20             	add    esp,0x20
c000a716:	39 fb                	cmp    ebx,edi
c000a718:	75 dc                	jne    c000a6f6 <mapVASFirstTime+0x35>
c000a71a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a71f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a724:	29 eb                	sub    ebx,ebp
c000a726:	29 ef                	sub    edi,ebp
c000a728:	e8 b5 d6 ff ff       	call   c0007de2 <Phys::allocatePage()>
c000a72d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a731:	83 fa 01             	cmp    edx,0x1
c000a734:	19 d2                	sbb    edx,edx
c000a736:	83 ec 0c             	sub    esp,0xc
c000a739:	83 e2 04             	and    edx,0x4
c000a73c:	81 c2 03 04 00 00    	add    edx,0x403
c000a742:	52                   	push   edx
c000a743:	6a 01                	push   0x1
c000a745:	53                   	push   ebx
c000a746:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a74c:	50                   	push   eax
c000a74d:	56                   	push   esi
c000a74e:	e8 b5 f7 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a753:	83 c4 20             	add    esp,0x20
c000a756:	39 df                	cmp    edi,ebx
c000a758:	75 ce                	jne    c000a728 <mapVASFirstTime+0x67>
c000a75a:	83 ec 0c             	sub    esp,0xc
c000a75d:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a762:	6a 04                	push   0x4
c000a764:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a76a:	6a ff                	push   0xffffffff
c000a76c:	c1 eb 0c             	shr    ebx,0xc
c000a76f:	53                   	push   ebx
c000a770:	68 00 40 02 c0       	push   0xc0024000
c000a775:	56                   	push   esi
c000a776:	e8 09 f3 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a77b:	83 c4 14             	add    esp,0x14
c000a77e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a783:	6a 04                	push   0x4
c000a785:	6a ff                	push   0xffffffff
c000a787:	53                   	push   ebx
c000a788:	68 00 40 02 c0       	push   0xc0024000
c000a78d:	50                   	push   eax
c000a78e:	e8 f1 f2 ff ff       	call   c0009a84 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a793:	0f 20 d8             	mov    eax,cr3
c000a796:	0f 22 d8             	mov    cr3,eax
c000a799:	83 c4 20             	add    esp,0x20
c000a79c:	83 c4 0c             	add    esp,0xc
c000a79f:	5b                   	pop    ebx
c000a7a0:	5e                   	pop    esi
c000a7a1:	5f                   	pop    edi
c000a7a2:	5d                   	pop    ebp
c000a7a3:	c3                   	ret    
c000a7a4:	83 ec 0c             	sub    esp,0xc
c000a7a7:	68 ed 0d 02 c0       	push   0xc0020ded
c000a7ac:	e8 59 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c4 0c             	add    esp,0xc
c000a7b7:	5b                   	pop    ebx
c000a7b8:	5e                   	pop    esi
c000a7b9:	5f                   	pop    edi
c000a7ba:	5d                   	pop    ebp
c000a7bb:	c3                   	ret    

c000a7bc <__cxa_atexit>:
c000a7bc:	31 c0                	xor    eax,eax
c000a7be:	c3                   	ret    

c000a7bf <__cxa_finalize>:
c000a7bf:	c3                   	ret    

c000a7c0 <__stack_chk_fail>:
c000a7c0:	55                   	push   ebp
c000a7c1:	89 e5                	mov    ebp,esp
c000a7c3:	83 ec 10             	sub    esp,0x10
c000a7c6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7c9:	68 06 0e 02 c0       	push   0xc0020e06
c000a7ce:	e8 37 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7d3:	58                   	pop    eax
c000a7d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7d7:	5a                   	pop    edx
c000a7d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7db:	68 06 0e 02 c0       	push   0xc0020e06
c000a7e0:	e8 25 01 00 00       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000a7e5:	c7 04 24 0e 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e0e
c000a7ec:	e8 5c 6a 00 00       	call   c001124d <KePanic(char const*)>
c000a7f1:	83 c4 10             	add    esp,0x10
c000a7f4:	c9                   	leave  
c000a7f5:	c3                   	ret    

c000a7f6 <__cxa_pure_virtual>:
c000a7f6:	83 ec 18             	sub    esp,0x18
c000a7f9:	68 26 0e 02 c0       	push   0xc0020e26
c000a7fe:	e8 4a 6a 00 00       	call   c001124d <KePanic(char const*)>
c000a803:	83 c4 1c             	add    esp,0x1c
c000a806:	c3                   	ret    

c000a807 <operator new[](unsigned long)>:
c000a807:	e9 c7 d2 ff ff       	jmp    c0007ad3 <malloc>

c000a80c <operator delete(void*, unsigned long)>:
c000a80c:	e9 e2 d2 ff ff       	jmp    c0007af3 <rfree>

c000a811 <operator delete[](void*)>:
c000a811:	e9 dd d2 ff ff       	jmp    c0007af3 <rfree>

c000a816 <operator delete[](void*, unsigned long)>:
c000a816:	e9 d8 d2 ff ff       	jmp    c0007af3 <rfree>

c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a81b:	55                   	push   ebp
c000a81c:	57                   	push   edi
c000a81d:	56                   	push   esi
c000a81e:	53                   	push   ebx
c000a81f:	83 ec 20             	sub    esp,0x20
c000a822:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000a826:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a82e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000a832:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a83a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000a83e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a846:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a84e:	89 f7                	mov    edi,esi
c000a850:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a855:	89 eb                	mov    ebx,ebp
c000a857:	eb 02                	jmp    c000a85b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c000a859:	89 c7                	mov    edi,eax
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	89 f8                	mov    eax,edi
c000a85f:	f7 f1                	div    ecx
c000a861:	83 c3 01             	add    ebx,0x1
c000a864:	39 cf                	cmp    edi,ecx
c000a866:	73 f1                	jae    c000a859 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c000a868:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a86b:	eb 02                	jmp    c000a86f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c000a86d:	89 c6                	mov    esi,eax
c000a86f:	31 d2                	xor    edx,edx
c000a871:	89 f0                	mov    eax,esi
c000a873:	f7 f1                	div    ecx
c000a875:	83 eb 01             	sub    ebx,0x1
c000a878:	39 ce                	cmp    esi,ecx
c000a87a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a87e:	88 13                	mov    BYTE PTR [ebx],dl
c000a880:	73 eb                	jae    c000a86d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c000a882:	83 c4 20             	add    esp,0x20
c000a885:	89 e8                	mov    eax,ebp
c000a887:	5b                   	pop    ebx
c000a888:	5e                   	pop    esi
c000a889:	5f                   	pop    edi
c000a88a:	5d                   	pop    ebp
c000a88b:	c3                   	ret    

c000a88c <Dbg::logc(char)>:
c000a88c:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a893:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a897:	75 12                	jne    c000a8ab <Dbg::logc(char)+0x1f>
c000a899:	ba fd 03 00 00       	mov    edx,0x3fd
c000a89e:	ec                   	in     al,dx
c000a89f:	a8 20                	test   al,0x20
c000a8a1:	74 fb                	je     c000a89e <Dbg::logc(char)+0x12>
c000a8a3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8a8:	88 c8                	mov    al,cl
c000a8aa:	ee                   	out    dx,al
c000a8ab:	c3                   	ret    

c000a8ac <Dbg::logs(char*)>:
c000a8ac:	53                   	push   ebx
c000a8ad:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8b4:	85 c0                	test   eax,eax
c000a8b6:	74 11                	je     c000a8c9 <Dbg::logs(char*)+0x1d>
c000a8b8:	50                   	push   eax
c000a8b9:	83 c3 01             	add    ebx,0x1
c000a8bc:	e8 cb ff ff ff       	call   c000a88c <Dbg::logc(char)>
c000a8c1:	58                   	pop    eax
c000a8c2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8c5:	85 c0                	test   eax,eax
c000a8c7:	75 ef                	jne    c000a8b8 <Dbg::logs(char*)+0xc>
c000a8c9:	5b                   	pop    ebx
c000a8ca:	c3                   	ret    

c000a8cb <Dbg::logWriteInt(unsigned int)>:
c000a8cb:	83 ec 10             	sub    esp,0x10
c000a8ce:	6a 0a                	push   0xa
c000a8d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8d4:	50                   	push   eax
c000a8d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d9:	50                   	push   eax
c000a8da:	e8 3c ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a8df:	50                   	push   eax
c000a8e0:	e8 c7 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a8e5:	83 c4 20             	add    esp,0x20
c000a8e8:	c3                   	ret    

c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a8e9:	83 ec 10             	sub    esp,0x10
c000a8ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8f0:	50                   	push   eax
c000a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a8f5:	50                   	push   eax
c000a8f6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a8fa:	52                   	push   edx
c000a8fb:	e8 1b ff ff ff       	call   c000a81b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a900:	50                   	push   eax
c000a901:	e8 a6 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a906:	83 c4 20             	add    esp,0x20
c000a909:	c3                   	ret    

c000a90a <Dbg::kprintf(char const*, ...)>:
c000a90a:	55                   	push   ebp
c000a90b:	57                   	push   edi
c000a90c:	56                   	push   esi
c000a90d:	53                   	push   ebx
c000a90e:	83 ec 0c             	sub    esp,0xc
c000a911:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a918:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a91c:	74 08                	je     c000a926 <Dbg::kprintf(char const*, ...)+0x1c>
c000a91e:	83 c4 0c             	add    esp,0xc
c000a921:	5b                   	pop    ebx
c000a922:	5e                   	pop    esi
c000a923:	5f                   	pop    edi
c000a924:	5d                   	pop    ebp
c000a925:	c3                   	ret    
c000a926:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a92a:	31 ff                	xor    edi,edi
c000a92c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a930:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 e7                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a937:	8d 77 01             	lea    esi,[edi+0x1]
c000a93a:	83 f8 25             	cmp    eax,0x25
c000a93d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a940:	75 47                	jne    c000a989 <Dbg::kprintf(char const*, ...)+0x7f>
c000a942:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a945:	83 c7 02             	add    edi,0x2
c000a948:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a94b:	83 e8 25             	sub    eax,0x25
c000a94e:	0f b6 c0             	movzx  eax,al
c000a951:	83 f8 53             	cmp    eax,0x53
c000a954:	0f 87 ce 00 00 00    	ja     c000aa28 <Dbg::kprintf(char const*, ...)+0x11e>
c000a95a:	ff 24 85 3c 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf1c4]
c000a961:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a965:	89 c8                	mov    eax,ecx
c000a967:	83 c1 04             	add    ecx,0x4
c000a96a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a96e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a970:	55                   	push   ebp
c000a971:	e8 55 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a976:	58                   	pop    eax
c000a977:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a97a:	85 c0                	test   eax,eax
c000a97c:	74 a0                	je     c000a91e <Dbg::kprintf(char const*, ...)+0x14>
c000a97e:	8d 77 01             	lea    esi,[edi+0x1]
c000a981:	83 f8 25             	cmp    eax,0x25
c000a984:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a987:	74 b9                	je     c000a942 <Dbg::kprintf(char const*, ...)+0x38>
c000a989:	50                   	push   eax
c000a98a:	89 f7                	mov    edi,esi
c000a98c:	e8 fb fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a991:	89 ee                	mov    esi,ebp
c000a993:	58                   	pop    eax
c000a994:	eb e1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a996:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a99a:	89 c8                	mov    eax,ecx
c000a99c:	83 c1 04             	add    ecx,0x4
c000a99f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a3:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9a5:	50                   	push   eax
c000a9a6:	e8 01 ff ff ff       	call   c000a8ac <Dbg::logs(char*)>
c000a9ab:	58                   	pop    eax
c000a9ac:	eb c9                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9b2:	89 d0                	mov    eax,edx
c000a9b4:	83 c2 04             	add    edx,0x4
c000a9b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9bd:	50                   	push   eax
c000a9be:	e8 08 ff ff ff       	call   c000a8cb <Dbg::logWriteInt(unsigned int)>
c000a9c3:	58                   	pop    eax
c000a9c4:	eb b1                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ca:	89 d0                	mov    eax,edx
c000a9cc:	83 c2 04             	add    edx,0x4
c000a9cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9d3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a9d6:	50                   	push   eax
c000a9d7:	e8 b0 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000a9dc:	58                   	pop    eax
c000a9dd:	eb 98                	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9e3:	89 c8                	mov    eax,ecx
c000a9e5:	83 c1 04             	add    ecx,0x4
c000a9e8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9ec:	6a 10                	push   0x10
c000a9ee:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a9f0:	51                   	push   ecx
c000a9f1:	e8 f3 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a9f6:	5d                   	pop    ebp
c000a9f7:	58                   	pop    eax
c000a9f8:	e9 7a ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9fd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa01:	89 d0                	mov    eax,edx
c000aa03:	83 c2 08             	add    edx,0x8
c000aa06:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa0a:	6a 10                	push   0x10
c000aa0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa0e:	50                   	push   eax
c000aa0f:	e8 d5 fe ff ff       	call   c000a8e9 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa14:	58                   	pop    eax
c000aa15:	5a                   	pop    edx
c000aa16:	e9 5c ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1b:	6a 25                	push   0x25
c000aa1d:	e8 6a fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa22:	5a                   	pop    edx
c000aa23:	e9 4f ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa28:	6a 25                	push   0x25
c000aa2a:	e8 5d fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa2f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa33:	50                   	push   eax
c000aa34:	e8 53 fe ff ff       	call   c000a88c <Dbg::logc(char)>
c000aa39:	5a                   	pop    edx
c000aa3a:	59                   	pop    ecx
c000aa3b:	e9 37 ff ff ff       	jmp    c000a977 <Dbg::kprintf(char const*, ...)+0x6d>

c000aa40 <KiUbsanPrintDetails(char const*, void*)>:
c000aa40:	83 ec 1c             	sub    esp,0x1c
c000aa43:	83 ec 08             	sub    esp,0x8
c000aa46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa4a:	68 8c 0f 02 c0       	push   0xc0020f8c
c000aa4f:	e8 b6 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa54:	83 c4 10             	add    esp,0x10
c000aa57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa63:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	50                   	push   eax
c000aa69:	68 a0 0f 02 c0       	push   0xc0020fa0
c000aa6e:	e8 97 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa73:	83 c4 10             	add    esp,0x10
c000aa76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aa7d:	83 ec 08             	sub    esp,0x8
c000aa80:	50                   	push   eax
c000aa81:	68 aa 0f 02 c0       	push   0xc0020faa
c000aa86:	e8 7f fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aa8b:	83 c4 10             	add    esp,0x10
c000aa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa92:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aa95:	83 ec 08             	sub    esp,0x8
c000aa98:	50                   	push   eax
c000aa99:	68 b4 0f 02 c0       	push   0xc0020fb4
c000aa9e:	e8 67 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	90                   	nop
c000aaa7:	83 c4 1c             	add    esp,0x1c
c000aaaa:	c3                   	ret    
c000aaab:	90                   	nop

c000aaac <__ubsan_handle_type_mismatch_v1>:
c000aaac:	83 ec 0c             	sub    esp,0xc
c000aaaf:	83 ec 08             	sub    esp,0x8
c000aab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aab6:	68 f8 10 02 c0       	push   0xc00210f8
c000aabb:	e8 80 ff ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aac0:	83 c4 10             	add    esp,0x10
c000aac3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000aac8:	75 16                	jne    c000aae0 <__ubsan_handle_type_mismatch_v1+0x34>
c000aaca:	83 ec 0c             	sub    esp,0xc
c000aacd:	68 be 0f 02 c0       	push   0xc0020fbe
c000aad2:	e8 33 fe ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000aad7:	83 c4 10             	add    esp,0x10
c000aada:	e9 91 00 00 00       	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000aadf:	90                   	nop
c000aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aae7:	85 c0                	test   eax,eax
c000aae9:	74 29                	je     c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaf2:	83 e8 01             	sub    eax,0x1
c000aaf5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000aaf9:	75 19                	jne    c000ab14 <__ubsan_handle_type_mismatch_v1+0x68>
c000aafb:	83 ec 08             	sub    esp,0x8
c000aafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab02:	68 18 11 02 c0       	push   0xc0021118
c000ab07:	e8 fe fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab0c:	83 c4 10             	add    esp,0x10
c000ab0f:	eb 5f                	jmp    c000ab70 <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab11:	8d 76 00             	lea    esi,[esi+0x0]
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	68 d3 0f 02 c0       	push   0xc0020fd3
c000ab1c:	e8 e9 fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab28:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab2b:	0f b6 c0             	movzx  eax,al
c000ab2e:	83 ec 08             	sub    esp,0x8
c000ab31:	50                   	push   eax
c000ab32:	68 ed 0f 02 c0       	push   0xc0020fed
c000ab37:	e8 ce fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab43:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab46:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab49:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab51:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab54:	0f b6 c0             	movzx  eax,al
c000ab57:	8b 04 85 a0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf60]
c000ab5e:	51                   	push   ecx
c000ab5f:	52                   	push   edx
c000ab60:	50                   	push   eax
c000ab61:	68 40 11 02 c0       	push   0xc0021140
c000ab66:	e8 9f fd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ab6b:	83 c4 10             	add    esp,0x10
c000ab6e:	66 90                	xchg   ax,ax
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	68 f8 10 02 c0       	push   0xc00210f8
c000ab78:	e8 d0 66 00 00       	call   c001124d <KePanic(char const*)>
c000ab7d:	83 c4 10             	add    esp,0x10
c000ab80:	90                   	nop
c000ab81:	83 c4 0c             	add    esp,0xc
c000ab84:	c3                   	ret    
c000ab85:	8d 76 00             	lea    esi,[esi+0x0]

c000ab88 <__ubsan_handle_pointer_overflow>:
c000ab88:	83 ec 0c             	sub    esp,0xc
c000ab8b:	83 ec 08             	sub    esp,0x8
c000ab8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab92:	68 88 11 02 c0       	push   0xc0021188
c000ab97:	e8 a4 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	83 ec 0c             	sub    esp,0xc
c000aba2:	68 88 11 02 c0       	push   0xc0021188
c000aba7:	e8 a1 66 00 00       	call   c001124d <KePanic(char const*)>
c000abac:	83 c4 10             	add    esp,0x10
c000abaf:	90                   	nop
c000abb0:	83 c4 0c             	add    esp,0xc
c000abb3:	c3                   	ret    

c000abb4 <__ubsan_handle_out_of_bounds>:
c000abb4:	83 ec 0c             	sub    esp,0xc
c000abb7:	83 ec 08             	sub    esp,0x8
c000abba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abbe:	68 f8 0f 02 c0       	push   0xc0020ff8
c000abc3:	e8 78 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abc8:	83 c4 10             	add    esp,0x10
c000abcb:	83 ec 0c             	sub    esp,0xc
c000abce:	68 f8 0f 02 c0       	push   0xc0020ff8
c000abd3:	e8 75 66 00 00       	call   c001124d <KePanic(char const*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	90                   	nop
c000abdc:	83 c4 0c             	add    esp,0xc
c000abdf:	c3                   	ret    

c000abe0 <__ubsan_handle_add_overflow>:
c000abe0:	83 ec 0c             	sub    esp,0xc
c000abe3:	83 ec 08             	sub    esp,0x8
c000abe6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abea:	68 15 10 02 c0       	push   0xc0021015
c000abef:	e8 4c fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	83 ec 0c             	sub    esp,0xc
c000abfa:	68 15 10 02 c0       	push   0xc0021015
c000abff:	e8 49 66 00 00       	call   c001124d <KePanic(char const*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	90                   	nop
c000ac08:	83 c4 0c             	add    esp,0xc
c000ac0b:	c3                   	ret    

c000ac0c <__ubsan_handle_load_invalid_value>:
c000ac0c:	83 ec 0c             	sub    esp,0xc
c000ac0f:	83 ec 08             	sub    esp,0x8
c000ac12:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac16:	68 a8 11 02 c0       	push   0xc00211a8
c000ac1b:	e8 20 fe ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac20:	83 c4 10             	add    esp,0x10
c000ac23:	83 ec 0c             	sub    esp,0xc
c000ac26:	68 a8 11 02 c0       	push   0xc00211a8
c000ac2b:	e8 1d 66 00 00       	call   c001124d <KePanic(char const*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	90                   	nop
c000ac34:	83 c4 0c             	add    esp,0xc
c000ac37:	c3                   	ret    

c000ac38 <__ubsan_handle_divrem_overflow>:
c000ac38:	83 ec 0c             	sub    esp,0xc
c000ac3b:	83 ec 08             	sub    esp,0x8
c000ac3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac42:	68 cc 11 02 c0       	push   0xc00211cc
c000ac47:	e8 f4 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	83 ec 0c             	sub    esp,0xc
c000ac52:	68 cc 11 02 c0       	push   0xc00211cc
c000ac57:	e8 f1 65 00 00       	call   c001124d <KePanic(char const*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	90                   	nop
c000ac60:	83 c4 0c             	add    esp,0xc
c000ac63:	c3                   	ret    

c000ac64 <__ubsan_handle_mul_overflow>:
c000ac64:	83 ec 0c             	sub    esp,0xc
c000ac67:	83 ec 08             	sub    esp,0x8
c000ac6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac6e:	68 31 10 02 c0       	push   0xc0021031
c000ac73:	e8 c8 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	83 ec 0c             	sub    esp,0xc
c000ac7e:	68 31 10 02 c0       	push   0xc0021031
c000ac83:	e8 c5 65 00 00       	call   c001124d <KePanic(char const*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	90                   	nop
c000ac8c:	83 c4 0c             	add    esp,0xc
c000ac8f:	c3                   	ret    

c000ac90 <__ubsan_handle_sub_overflow>:
c000ac90:	83 ec 0c             	sub    esp,0xc
c000ac93:	83 ec 08             	sub    esp,0x8
c000ac96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac9a:	68 4d 10 02 c0       	push   0xc002104d
c000ac9f:	e8 9c fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000aca4:	83 c4 10             	add    esp,0x10
c000aca7:	83 ec 0c             	sub    esp,0xc
c000acaa:	68 4d 10 02 c0       	push   0xc002104d
c000acaf:	e8 99 65 00 00       	call   c001124d <KePanic(char const*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	90                   	nop
c000acb8:	83 c4 0c             	add    esp,0xc
c000acbb:	c3                   	ret    

c000acbc <__ubsan_handle_shift_out_of_bounds>:
c000acbc:	83 ec 0c             	sub    esp,0xc
c000acbf:	83 ec 08             	sub    esp,0x8
c000acc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acc6:	68 ec 11 02 c0       	push   0xc00211ec
c000accb:	e8 70 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acd0:	83 c4 10             	add    esp,0x10
c000acd3:	83 ec 0c             	sub    esp,0xc
c000acd6:	68 ec 11 02 c0       	push   0xc00211ec
c000acdb:	e8 6d 65 00 00       	call   c001124d <KePanic(char const*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	90                   	nop
c000ace4:	83 c4 0c             	add    esp,0xc
c000ace7:	c3                   	ret    

c000ace8 <__ubsan_handle_negate_overflow>:
c000ace8:	83 ec 0c             	sub    esp,0xc
c000aceb:	83 ec 08             	sub    esp,0x8
c000acee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acf2:	68 10 12 02 c0       	push   0xc0021210
c000acf7:	e8 44 fd ff ff       	call   c000aa40 <KiUbsanPrintDetails(char const*, void*)>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	68 10 12 02 c0       	push   0xc0021210
c000ad07:	e8 41 65 00 00       	call   c001124d <KePanic(char const*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	90                   	nop
c000ad10:	83 c4 0c             	add    esp,0xc
c000ad13:	c3                   	ret    

c000ad14 <KiCreateSymlinkID()>:
c000ad14:	55                   	push   ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	31 db                	xor    ebx,ebx
c000ad1a:	83 ec 1c             	sub    esp,0x1c
c000ad1d:	e8 79 66 00 00       	call   c001139b <KeRand()>
c000ad22:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad28:	31 d2                	xor    edx,edx
c000ad2a:	43                   	inc    ebx
c000ad2b:	31 ff                	xor    edi,edi
c000ad2d:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad30:	89 ee                	mov    esi,ebp
c000ad32:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad38:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad40:	c1 e0 1b             	shl    eax,0x1b
c000ad43:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad4d:	75 10                	jne    c000ad5f <KiCreateSymlinkID()+0x4b>
c000ad4f:	83 ec 0c             	sub    esp,0xc
c000ad52:	68 2f 12 02 c0       	push   0xc002122f
c000ad57:	e8 f1 64 00 00       	call   c001124d <KePanic(char const*)>
c000ad5c:	83 c4 10             	add    esp,0x10
c000ad5f:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000ad63:	75 06                	jne    c000ad6b <KiCreateSymlinkID()+0x57>
c000ad65:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000ad69:	74 b2                	je     c000ad1d <KiCreateSymlinkID()+0x9>
c000ad6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ad6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad73:	83 c4 1c             	add    esp,0x1c
c000ad76:	5b                   	pop    ebx
c000ad77:	31 f0                	xor    eax,esi
c000ad79:	5e                   	pop    esi
c000ad7a:	31 fa                	xor    edx,edi
c000ad7c:	5f                   	pop    edi
c000ad7d:	5d                   	pop    ebp
c000ad7e:	c3                   	ret    

c000ad7f <KiFlushSymlinkChanges()>:
c000ad7f:	56                   	push   esi
c000ad80:	53                   	push   ebx
c000ad81:	83 ec 20             	sub    esp,0x20
c000ad84:	68 14 01 00 00       	push   0x114
c000ad89:	e8 45 cd ff ff       	call   c0007ad3 <malloc>
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000ad97:	68 38 12 02 c0       	push   0xc0021238
c000ad9c:	50                   	push   eax
c000ad9d:	89 c3                	mov    ebx,eax
c000ad9f:	e8 fc 09 00 00       	call   c000b7a0 <File::File(char const*, Process*)>
c000ada4:	83 c4 10             	add    esp,0x10
c000ada7:	85 db                	test   ebx,ebx
c000ada9:	75 10                	jne    c000adbb <KiFlushSymlinkChanges()+0x3c>
c000adab:	83 ec 0c             	sub    esp,0xc
c000adae:	68 56 12 02 c0       	push   0xc0021256
c000adb3:	e8 95 64 00 00       	call   c001124d <KePanic(char const*)>
c000adb8:	83 c4 10             	add    esp,0x10
c000adbb:	50                   	push   eax
c000adbc:	50                   	push   eax
c000adbd:	6a 06                	push   0x6
c000adbf:	53                   	push   ebx
c000adc0:	e8 97 0a 00 00       	call   c000b85c <File::open(FileOpenMode)>
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	85 c0                	test   eax,eax
c000adca:	74 10                	je     c000addc <KiFlushSymlinkChanges()+0x5d>
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	68 70 12 02 c0       	push   0xc0021270
c000add4:	e8 74 64 00 00       	call   c001124d <KePanic(char const*)>
c000add9:	83 c4 10             	add    esp,0x10
c000addc:	31 f6                	xor    esi,esi
c000adde:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ade4:	7e 40                	jle    c000ae26 <KiFlushSymlinkChanges()+0xa7>
c000ade6:	83 ec 0c             	sub    esp,0xc
c000ade9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000adeb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000adef:	50                   	push   eax
c000adf0:	89 f0                	mov    eax,esi
c000adf2:	c1 e0 08             	shl    eax,0x8
c000adf5:	05 00 60 02 c0       	add    eax,0xc0026000
c000adfa:	50                   	push   eax
c000adfb:	6a 00                	push   0x0
c000adfd:	68 00 01 00 00       	push   0x100
c000ae02:	53                   	push   ebx
c000ae03:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae06:	83 c4 20             	add    esp,0x20
c000ae09:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae11:	74 10                	je     c000ae23 <KiFlushSymlinkChanges()+0xa4>
c000ae13:	83 ec 0c             	sub    esp,0xc
c000ae16:	68 8a 12 02 c0       	push   0xc002128a
c000ae1b:	e8 2d 64 00 00       	call   c001124d <KePanic(char const*)>
c000ae20:	83 c4 10             	add    esp,0x10
c000ae23:	46                   	inc    esi
c000ae24:	eb b8                	jmp    c000adde <KiFlushSymlinkChanges()+0x5f>
c000ae26:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae30:	83 ec 0c             	sub    esp,0xc
c000ae33:	53                   	push   ebx
c000ae34:	e8 81 0a 00 00       	call   c000b8ba <File::close()>
c000ae39:	83 c4 10             	add    esp,0x10
c000ae3c:	85 db                	test   ebx,ebx
c000ae3e:	74 0c                	je     c000ae4c <KiFlushSymlinkChanges()+0xcd>
c000ae40:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	53                   	push   ebx
c000ae46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae49:	83 c4 10             	add    esp,0x10
c000ae4c:	83 c4 14             	add    esp,0x14
c000ae4f:	5b                   	pop    ebx
c000ae50:	5e                   	pop    esi
c000ae51:	c3                   	ret    

c000ae52 <KiDeinitialiseSymlinks(void*)>:
c000ae52:	e9 28 ff ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>

c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae57:	53                   	push   ebx
c000ae58:	83 ec 0c             	sub    esp,0xc
c000ae5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ae63:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae68:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae6c:	68 00 01 00 00       	push   0x100
c000ae71:	6a 00                	push   0x0
c000ae73:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000ae7a:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000ae81:	c1 e0 08             	shl    eax,0x8
c000ae84:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae89:	50                   	push   eax
c000ae8a:	e8 61 56 ff ff       	call   c00004f0 <memset>
c000ae8f:	58                   	pop    eax
c000ae90:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000ae95:	5a                   	pop    edx
c000ae96:	c1 e0 08             	shl    eax,0x8
c000ae99:	53                   	push   ebx
c000ae9a:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae9f:	50                   	push   eax
c000aea0:	e8 ab 57 ff ff       	call   c0000650 <strcpy>
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	83 c4 10             	add    esp,0x10
c000aead:	40                   	inc    eax
c000aeae:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aeb3:	83 f8 03             	cmp    eax,0x3
c000aeb6:	7e 09                	jle    c000aec1 <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aeb8:	83 c4 08             	add    esp,0x8
c000aebb:	5b                   	pop    ebx
c000aebc:	e9 be fe ff ff       	jmp    c000ad7f <KiFlushSymlinkChanges()>
c000aec1:	83 c4 08             	add    esp,0x8
c000aec4:	5b                   	pop    ebx
c000aec5:	c3                   	ret    

c000aec6 <KiIsSymlinkRegistered(char const*)>:
c000aec6:	53                   	push   ebx
c000aec7:	31 db                	xor    ebx,ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000aed2:	7e 30                	jle    c000af04 <KiIsSymlinkRegistered(char const*)+0x3e>
c000aed4:	50                   	push   eax
c000aed5:	50                   	push   eax
c000aed6:	89 d8                	mov    eax,ebx
c000aed8:	c1 e0 08             	shl    eax,0x8
c000aedb:	05 00 60 02 c0       	add    eax,0xc0026000
c000aee0:	50                   	push   eax
c000aee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aee5:	e8 96 58 ff ff       	call   c0000780 <strcmp>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	85 c0                	test   eax,eax
c000aeef:	75 10                	jne    c000af01 <KiIsSymlinkRegistered(char const*)+0x3b>
c000aef1:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000aef8:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000aeff:	eb 07                	jmp    c000af08 <KiIsSymlinkRegistered(char const*)+0x42>
c000af01:	43                   	inc    ebx
c000af02:	eb c8                	jmp    c000aecc <KiIsSymlinkRegistered(char const*)+0x6>
c000af04:	31 c0                	xor    eax,eax
c000af06:	31 d2                	xor    edx,edx
c000af08:	83 c4 08             	add    esp,0x8
c000af0b:	5b                   	pop    ebx
c000af0c:	c3                   	ret    

c000af0d <KeDereferenceSymlink(char const*, char*)>:
c000af0d:	55                   	push   ebp
c000af0e:	57                   	push   edi
c000af0f:	56                   	push   esi
c000af10:	53                   	push   ebx
c000af11:	83 ec 44             	sub    esp,0x44
c000af14:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af18:	56                   	push   esi
c000af19:	68 a4 12 02 c0       	push   0xc00212a4
c000af1e:	e8 e7 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af23:	89 34 24             	mov    DWORD PTR [esp],esi
c000af26:	e8 9b ff ff ff       	call   c000aec6 <KiIsSymlinkRegistered(char const*)>
c000af2b:	83 c4 10             	add    esp,0x10
c000af2e:	89 c7                	mov    edi,eax
c000af30:	89 d0                	mov    eax,edx
c000af32:	09 f8                	or     eax,edi
c000af34:	0f 84 de 01 00 00    	je     c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af3a:	53                   	push   ebx
c000af3b:	89 d5                	mov    ebp,edx
c000af3d:	53                   	push   ebx
c000af3e:	57                   	push   edi
c000af3f:	68 be 12 02 c0       	push   0xc00212be
c000af44:	e8 c1 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af49:	58                   	pop    eax
c000af4a:	5a                   	pop    edx
c000af4b:	55                   	push   ebp
c000af4c:	68 cc 12 02 c0       	push   0xc00212cc
c000af51:	e8 b4 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af56:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af5d:	e8 71 cb ff ff       	call   c0007ad3 <malloc>
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af6b:	56                   	push   esi
c000af6c:	50                   	push   eax
c000af6d:	89 c3                	mov    ebx,eax
c000af6f:	e8 2c 08 00 00       	call   c000b7a0 <File::File(char const*, Process*)>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	85 db                	test   ebx,ebx
c000af79:	0f 84 68 01 00 00    	je     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000af7f:	83 ec 0c             	sub    esp,0xc
c000af82:	68 80 1e 02 c0       	push   0xc0021e80
c000af87:	e8 7e f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000af8c:	5a                   	pop    edx
c000af8d:	59                   	pop    ecx
c000af8e:	6a 01                	push   0x1
c000af90:	53                   	push   ebx
c000af91:	e8 c6 08 00 00       	call   c000b85c <File::open(FileOpenMode)>
c000af96:	83 c4 10             	add    esp,0x10
c000af99:	85 c0                	test   eax,eax
c000af9b:	74 0b                	je     c000afa8 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000af9d:	83 ec 0c             	sub    esp,0xc
c000afa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afa2:	53                   	push   ebx
c000afa3:	e9 39 01 00 00       	jmp    c000b0e1 <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	68 c6 08 02 c0       	push   0xc00208c6
c000afb0:	e8 55 f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afb5:	58                   	pop    eax
c000afb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000afbc:	56                   	push   esi
c000afbd:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afc1:	52                   	push   edx
c000afc2:	6a 00                	push   0x0
c000afc4:	6a 08                	push   0x8
c000afc6:	53                   	push   ebx
c000afc7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afca:	83 c4 20             	add    esp,0x20
c000afcd:	85 c0                	test   eax,eax
c000afcf:	0f 85 fe 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afd5:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000afda:	0f 85 f3 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000afe0:	83 ec 0c             	sub    esp,0xc
c000afe3:	68 b2 1e 02 c0       	push   0xc0021eb2
c000afe8:	e8 1d f9 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000afed:	8d 54 24 20          	lea    edx,[esp+0x20]
c000aff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff3:	89 34 24             	mov    DWORD PTR [esp],esi
c000aff6:	52                   	push   edx
c000aff7:	6a 00                	push   0x0
c000aff9:	6a 08                	push   0x8
c000affb:	53                   	push   ebx
c000affc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afff:	83 c4 20             	add    esp,0x20
c000b002:	85 c0                	test   eax,eax
c000b004:	0f 85 c9 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b00a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b00f:	0f 85 be 00 00 00    	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b015:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b019:	0f 85 f9 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b01f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b023:	0f 85 ef 00 00 00    	jne    c000b118 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	68 da 12 02 c0       	push   0xc00212da
c000b031:	e8 d4 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b036:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b03e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b046:	83 c4 0c             	add    esp,0xc
c000b049:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b04d:	50                   	push   eax
c000b04e:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b052:	50                   	push   eax
c000b053:	53                   	push   ebx
c000b054:	e8 05 0b 00 00       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c000b059:	83 c4 10             	add    esp,0x10
c000b05c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b061:	75 70                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b063:	b8 0f 00 00 00       	mov    eax,0xf
c000b068:	31 ff                	xor    edi,edi
c000b06a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b06e:	89 f8                	mov    eax,edi
c000b070:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b074:	73 5d                	jae    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	68 da 12 02 c0       	push   0xc00212da
c000b07e:	e8 87 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b083:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b087:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b090:	83 c0 f0             	add    eax,0xfffffff0
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	83 d2 ff             	adc    edx,0xffffffff
c000b09a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	39 c1                	cmp    ecx,eax
c000b0a3:	19 d7                	sbb    edi,edx
c000b0a5:	72 40                	jb     c000b0e7 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0a7:	83 ec 0c             	sub    esp,0xc
c000b0aa:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ac:	56                   	push   esi
c000b0ad:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0b1:	52                   	push   edx
c000b0b2:	50                   	push   eax
c000b0b3:	53                   	push   ebx
c000b0b4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0b7:	83 c4 20             	add    esp,0x20
c000b0ba:	85 c0                	test   eax,eax
c000b0bc:	75 15                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0c2:	89 c7                	mov    edi,eax
c000b0c4:	c1 ff 1f             	sar    edi,0x1f
c000b0c7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b0cb:	75 06                	jne    c000b0d3 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0cd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0d1:	74 19                	je     c000b0ec <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b0d3:	83 ec 0c             	sub    esp,0xc
c000b0d6:	53                   	push   ebx
c000b0d7:	e8 de 07 00 00       	call   c000b8ba <File::close()>
c000b0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	83 c8 ff             	or     eax,0xffffffff
c000b0ea:	eb 2e                	jmp    c000b11a <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	68 92 29 02 c0       	push   0xc0022992
c000b0f4:	e8 11 f8 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b0f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0fc:	e8 b9 07 00 00       	call   c000b8ba <File::close()>
c000b101:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b103:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b109:	c7 04 24 dd 12 02 c0 	mov    DWORD PTR [esp],0xc00212dd
c000b110:	e8 f5 f7 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000b115:	83 c4 10             	add    esp,0x10
c000b118:	31 c0                	xor    eax,eax
c000b11a:	83 c4 3c             	add    esp,0x3c
c000b11d:	5b                   	pop    ebx
c000b11e:	5e                   	pop    esi
c000b11f:	5f                   	pop    edi
c000b120:	5d                   	pop    ebp
c000b121:	c3                   	ret    

c000b122 <KeCreateSymlink(char const*, char const*)>:
c000b122:	55                   	push   ebp
c000b123:	57                   	push   edi
c000b124:	56                   	push   esi
c000b125:	53                   	push   ebx
c000b126:	83 ec 38             	sub    esp,0x38
c000b129:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b12d:	68 14 01 00 00       	push   0x114
c000b132:	e8 9c c9 ff ff       	call   c0007ad3 <malloc>
c000b137:	83 c4 0c             	add    esp,0xc
c000b13a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b140:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b144:	89 c3                	mov    ebx,eax
c000b146:	50                   	push   eax
c000b147:	e8 54 06 00 00       	call   c000b7a0 <File::File(char const*, Process*)>
c000b14c:	83 c4 10             	add    esp,0x10
c000b14f:	85 db                	test   ebx,ebx
c000b151:	b8 01 00 00 00       	mov    eax,0x1
c000b156:	0f 84 fb 00 00 00    	je     c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b15c:	52                   	push   edx
c000b15d:	52                   	push   edx
c000b15e:	6a 12                	push   0x12
c000b160:	53                   	push   ebx
c000b161:	e8 f6 06 00 00       	call   c000b85c <File::open(FileOpenMode)>
c000b166:	83 c4 10             	add    esp,0x10
c000b169:	85 c0                	test   eax,eax
c000b16b:	74 0b                	je     c000b178 <KeCreateSymlink(char const*, char const*)+0x56>
c000b16d:	83 ec 0c             	sub    esp,0xc
c000b170:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b172:	53                   	push   ebx
c000b173:	e9 d4 00 00 00       	jmp    c000b24c <KeCreateSymlink(char const*, char const*)+0x12a>
c000b178:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b17c:	be e0 12 02 c0       	mov    esi,0xc00212e0
c000b181:	b9 09 00 00 00       	mov    ecx,0x9
c000b186:	fc                   	cld    
c000b187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b189:	83 ec 0c             	sub    esp,0xc
c000b18c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b190:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b192:	56                   	push   esi
c000b193:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b197:	52                   	push   edx
c000b198:	6a 00                	push   0x0
c000b19a:	6a 08                	push   0x8
c000b19c:	53                   	push   ebx
c000b19d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1a0:	83 c4 20             	add    esp,0x20
c000b1a3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1a8:	0f 85 90 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	0f 85 88 00 00 00    	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1b6:	e8 59 fb ff ff       	call   c000ad14 <KiCreateSymlinkID()>
c000b1bb:	83 ec 0c             	sub    esp,0xc
c000b1be:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c8:	56                   	push   esi
c000b1c9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1cd:	52                   	push   edx
c000b1ce:	6a 00                	push   0x0
c000b1d0:	6a 08                	push   0x8
c000b1d2:	53                   	push   ebx
c000b1d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1d6:	83 c4 20             	add    esp,0x20
c000b1d9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1de:	75 5e                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e0:	85 c0                	test   eax,eax
c000b1e2:	75 5a                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e6:	83 ec 0c             	sub    esp,0xc
c000b1e9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1ec:	55                   	push   ebp
c000b1ed:	e8 8e 53 ff ff       	call   c0000580 <strlen>
c000b1f2:	31 d2                	xor    edx,edx
c000b1f4:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1f7:	55                   	push   ebp
c000b1f8:	52                   	push   edx
c000b1f9:	50                   	push   eax
c000b1fa:	53                   	push   ebx
c000b1fb:	ff d7                	call   edi
c000b1fd:	83 c4 14             	add    esp,0x14
c000b200:	55                   	push   ebp
c000b201:	89 c6                	mov    esi,eax
c000b203:	e8 78 53 ff ff       	call   c0000580 <strlen>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b20f:	75 2d                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b211:	85 f6                	test   esi,esi
c000b213:	75 29                	jne    c000b23e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b215:	50                   	push   eax
c000b216:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b222:	e8 30 fc ff ff       	call   c000ae57 <KeRegisterSymlink(char const*, unsigned long long)>
c000b227:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22a:	e8 8b 06 00 00       	call   c000b8ba <File::close()>
c000b22f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b231:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b234:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	31 c0                	xor    eax,eax
c000b23c:	eb 19                	jmp    c000b257 <KeCreateSymlink(char const*, char const*)+0x135>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	53                   	push   ebx
c000b242:	e8 73 06 00 00       	call   c000b8ba <File::close()>
c000b247:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b249:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b24c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b24f:	83 c4 10             	add    esp,0x10
c000b252:	b8 01 00 00 00       	mov    eax,0x1
c000b257:	83 c4 2c             	add    esp,0x2c
c000b25a:	5b                   	pop    ebx
c000b25b:	5e                   	pop    esi
c000b25c:	5f                   	pop    edi
c000b25d:	5d                   	pop    ebp
c000b25e:	c3                   	ret    

c000b25f <KeInitialiseSymlinks()>:
c000b25f:	53                   	push   ebx
c000b260:	83 ec 10             	sub    esp,0x10
c000b263:	6a 00                	push   0x0
c000b265:	68 52 ae 00 c0       	push   0xc000ae52
c000b26a:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b274:	e8 ed 57 00 00       	call   c0010a66 <KeRegisterAtexit(void (*)(void*), void*)>
c000b279:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b280:	e8 4e c8 ff ff       	call   c0007ad3 <malloc>
c000b285:	83 c4 0c             	add    esp,0xc
c000b288:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b28e:	68 38 12 02 c0       	push   0xc0021238
c000b293:	50                   	push   eax
c000b294:	89 c3                	mov    ebx,eax
c000b296:	e8 05 05 00 00       	call   c000b7a0 <File::File(char const*, Process*)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	85 db                	test   ebx,ebx
c000b2a0:	75 10                	jne    c000b2b2 <KeInitialiseSymlinks()+0x53>
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	68 e9 12 02 c0       	push   0xc00212e9
c000b2aa:	e8 9e 5f 00 00       	call   c001124d <KePanic(char const*)>
c000b2af:	83 c4 10             	add    esp,0x10
c000b2b2:	83 ec 0c             	sub    esp,0xc
c000b2b5:	53                   	push   ebx
c000b2b6:	e8 65 08 00 00       	call   c000bb20 <File::exists()>
c000b2bb:	83 c4 10             	add    esp,0x10
c000b2be:	84 c0                	test   al,al
c000b2c0:	75 2d                	jne    c000b2ef <KeInitialiseSymlinks()+0x90>
c000b2c2:	52                   	push   edx
c000b2c3:	52                   	push   edx
c000b2c4:	6a 12                	push   0x12
c000b2c6:	53                   	push   ebx
c000b2c7:	e8 90 05 00 00       	call   c000b85c <File::open(FileOpenMode)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	85 c0                	test   eax,eax
c000b2d1:	74 10                	je     c000b2e3 <KeInitialiseSymlinks()+0x84>
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	68 06 13 02 c0       	push   0xc0021306
c000b2db:	e8 6d 5f 00 00       	call   c001124d <KePanic(char const*)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 ec 0c             	sub    esp,0xc
c000b2e6:	53                   	push   ebx
c000b2e7:	e8 ce 05 00 00       	call   c000b8ba <File::close()>
c000b2ec:	83 c4 10             	add    esp,0x10
c000b2ef:	85 db                	test   ebx,ebx
c000b2f1:	74 0c                	je     c000b2ff <KeInitialiseSymlinks()+0xa0>
c000b2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f5:	83 ec 0c             	sub    esp,0xc
c000b2f8:	53                   	push   ebx
c000b2f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	50                   	push   eax
c000b300:	50                   	push   eax
c000b301:	68 23 13 02 c0       	push   0xc0021323
c000b306:	68 31 13 02 c0       	push   0xc0021331
c000b30b:	e8 12 fe ff ff       	call   c000b122 <KeCreateSymlink(char const*, char const*)>
c000b310:	83 c4 18             	add    esp,0x18
c000b313:	5b                   	pop    ebx
c000b314:	c3                   	ret    
c000b315:	90                   	nop

c000b316 <File::read(unsigned long long, void*, int*)>:
c000b316:	53                   	push   ebx
c000b317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b31b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b31f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b326:	83 f8 19             	cmp    eax,0x19
c000b329:	77 35                	ja     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b32b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b332:	85 c0                	test   eax,eax
c000b334:	74 2a                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b336:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b33c:	85 c0                	test   eax,eax
c000b33e:	74 20                	je     c000b360 <File::read(unsigned long long, void*, int*)+0x4a>
c000b340:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b344:	74 21                	je     c000b367 <File::read(unsigned long long, void*, int*)+0x51>
c000b346:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b348:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b34c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b352:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b356:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b35a:	5b                   	pop    ebx
c000b35b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b35e:	ff e0                	jmp    eax
c000b360:	b8 0b 00 00 00       	mov    eax,0xb
c000b365:	eb 05                	jmp    c000b36c <File::read(unsigned long long, void*, int*)+0x56>
c000b367:	b8 05 00 00 00       	mov    eax,0x5
c000b36c:	5b                   	pop    ebx
c000b36d:	c3                   	ret    

c000b36e <File::write(unsigned long long, void*, int*)>:
c000b36e:	53                   	push   ebx
c000b36f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b377:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b37e:	83 f8 19             	cmp    eax,0x19
c000b381:	77 35                	ja     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b383:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b38a:	85 c0                	test   eax,eax
c000b38c:	74 2a                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b38e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b394:	85 c0                	test   eax,eax
c000b396:	74 20                	je     c000b3b8 <File::write(unsigned long long, void*, int*)+0x4a>
c000b398:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b39c:	74 21                	je     c000b3bf <File::write(unsigned long long, void*, int*)+0x51>
c000b39e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3a0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3a4:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3b2:	5b                   	pop    ebx
c000b3b3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3b6:	ff e0                	jmp    eax
c000b3b8:	b8 0b 00 00 00       	mov    eax,0xb
c000b3bd:	eb 05                	jmp    c000b3c4 <File::write(unsigned long long, void*, int*)+0x56>
c000b3bf:	b8 05 00 00 00       	mov    eax,0x5
c000b3c4:	5b                   	pop    ebx
c000b3c5:	c3                   	ret    

c000b3c6 <Directory::read(unsigned long long, void*, int*)>:
c000b3c6:	53                   	push   ebx
c000b3c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3d6:	83 f8 19             	cmp    eax,0x19
c000b3d9:	77 35                	ja     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3db:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3e2:	85 c0                	test   eax,eax
c000b3e4:	74 2a                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3e6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3ec:	85 c0                	test   eax,eax
c000b3ee:	74 20                	je     c000b410 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3f4:	74 21                	je     c000b417 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3f6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3fc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b402:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b406:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40a:	5b                   	pop    ebx
c000b40b:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b40e:	ff e0                	jmp    eax
c000b410:	b8 0b 00 00 00       	mov    eax,0xb
c000b415:	eb 05                	jmp    c000b41c <Directory::read(unsigned long long, void*, int*)+0x56>
c000b417:	b8 05 00 00 00       	mov    eax,0x5
c000b41c:	5b                   	pop    ebx
c000b41d:	c3                   	ret    

c000b41e <Directory::write(unsigned long long, void*, int*)>:
c000b41e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b422:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b429:	b8 0b 00 00 00       	mov    eax,0xb
c000b42e:	83 fa 19             	cmp    edx,0x19
c000b431:	77 18                	ja     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b433:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b43a:	85 d2                	test   edx,edx
c000b43c:	74 0d                	je     c000b44b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b43e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b445:	19 c0                	sbb    eax,eax
c000b447:	83 e0 0a             	and    eax,0xa
c000b44a:	40                   	inc    eax
c000b44b:	c3                   	ret    

c000b44c <File::isAtty()>:
c000b44c:	31 c0                	xor    eax,eax
c000b44e:	c3                   	ret    
c000b44f:	90                   	nop

c000b450 <Directory::isAtty()>:
c000b450:	31 c0                	xor    eax,eax
c000b452:	c3                   	ret    
c000b453:	90                   	nop

c000b454 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b454:	b8 0a 00 00 00       	mov    eax,0xa
c000b459:	c3                   	ret    

c000b45a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b45a:	b8 0a 00 00 00       	mov    eax,0xa
c000b45f:	c3                   	ret    

c000b460 <Filesystem::allocateSwapfile(char const*, int)>:
c000b460:	31 c0                	xor    eax,eax
c000b462:	31 d2                	xor    edx,edx
c000b464:	c3                   	ret    
c000b465:	90                   	nop

c000b466 <File::~File()>:
c000b466:	83 ec 0c             	sub    esp,0xc
c000b469:	ba c4 13 02 c0       	mov    edx,0xc00213c4
c000b46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b472:	89 10                	mov    DWORD PTR [eax],edx
c000b474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b478:	83 ec 0c             	sub    esp,0xc
c000b47b:	50                   	push   eax
c000b47c:	e8 0b df ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	90                   	nop
c000b485:	83 c4 0c             	add    esp,0xc
c000b488:	c3                   	ret    
c000b489:	90                   	nop

c000b48a <File::~File()>:
c000b48a:	83 ec 0c             	sub    esp,0xc
c000b48d:	83 ec 0c             	sub    esp,0xc
c000b490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b494:	e8 cd ff ff ff       	call   c000b466 <File::~File()>
c000b499:	83 c4 10             	add    esp,0x10
c000b49c:	83 ec 08             	sub    esp,0x8
c000b49f:	68 14 01 00 00       	push   0x114
c000b4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a8:	e8 5f f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4ad:	83 c4 10             	add    esp,0x10
c000b4b0:	83 c4 0c             	add    esp,0xc
c000b4b3:	c3                   	ret    

c000b4b4 <Directory::~Directory()>:
c000b4b4:	83 ec 0c             	sub    esp,0xc
c000b4b7:	ba e0 13 02 c0       	mov    edx,0xc00213e0
c000b4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c0:	89 10                	mov    DWORD PTR [eax],edx
c000b4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c6:	83 ec 0c             	sub    esp,0xc
c000b4c9:	50                   	push   eax
c000b4ca:	e8 bd de ff ff       	call   c000938c <UnixFile::~UnixFile()>
c000b4cf:	83 c4 10             	add    esp,0x10
c000b4d2:	90                   	nop
c000b4d3:	83 c4 0c             	add    esp,0xc
c000b4d6:	c3                   	ret    
c000b4d7:	90                   	nop

c000b4d8 <Directory::~Directory()>:
c000b4d8:	83 ec 0c             	sub    esp,0xc
c000b4db:	83 ec 0c             	sub    esp,0xc
c000b4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e2:	e8 cd ff ff ff       	call   c000b4b4 <Directory::~Directory()>
c000b4e7:	83 c4 10             	add    esp,0x10
c000b4ea:	83 ec 08             	sub    esp,0x8
c000b4ed:	68 14 01 00 00       	push   0x114
c000b4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4f6:	e8 11 f3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	83 c4 0c             	add    esp,0xc
c000b501:	c3                   	ret    

c000b502 <Filesystem::Filesystem()>:
c000b502:	ba 58 13 02 c0       	mov    edx,0xc0021358
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	89 10                	mov    DWORD PTR [eax],edx
c000b50d:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b51a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b51e:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b523:	90                   	nop
c000b524:	c3                   	ret    
c000b525:	90                   	nop

c000b526 <Filesystem::~Filesystem()>:
c000b526:	ba 58 13 02 c0       	mov    edx,0xc0021358
c000b52b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52f:	89 10                	mov    DWORD PTR [eax],edx
c000b531:	90                   	nop
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Filesystem::~Filesystem()>:
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b53b:	e8 e6 ff ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c000b540:	83 c4 04             	add    esp,0x4
c000b543:	83 ec 08             	sub    esp,0x8
c000b546:	6a 08                	push   0x8
c000b548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b54c:	e8 bb f2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000b551:	83 c4 10             	add    esp,0x10
c000b554:	83 c4 0c             	add    esp,0xc
c000b557:	c3                   	ret    

c000b558 <Fs::getcwd(Process*, char*, int)>:
c000b558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b55c:	31 c0                	xor    eax,eax
c000b55e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b562:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b565:	7d 15                	jge    c000b57c <Fs::getcwd(Process*, char*, int)+0x24>
c000b567:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b56b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b572:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b575:	84 c9                	test   cl,cl
c000b577:	74 06                	je     c000b57f <Fs::getcwd(Process*, char*, int)+0x27>
c000b579:	40                   	inc    eax
c000b57a:	eb e2                	jmp    c000b55e <Fs::getcwd(Process*, char*, int)+0x6>
c000b57c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b57f:	31 c0                	xor    eax,eax
c000b581:	c3                   	ret    

c000b582 <Fs::initVFS()>:
c000b582:	83 ec 18             	sub    esp,0x18
c000b585:	6a 08                	push   0x8
c000b587:	e8 47 c5 ff ff       	call   c0007ad3 <malloc>
c000b58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58f:	e8 30 e1 00 00       	call   c00196c4 <FAT::FAT()>
c000b594:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b59b:	e8 33 c5 ff ff       	call   c0007ad3 <malloc>
c000b5a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5a3:	e8 4a f0 00 00       	call   c001a5f2 <ISO9660::ISO9660()>
c000b5a8:	83 c4 1c             	add    esp,0x1c
c000b5ab:	c3                   	ret    

c000b5ac <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b5ac:	55                   	push   ebp
c000b5ad:	57                   	push   edi
c000b5ae:	56                   	push   esi
c000b5af:	53                   	push   ebx
c000b5b0:	81 ec 20 04 00 00    	sub    esp,0x420
c000b5b6:	8b bc 24 38 04 00 00 	mov    edi,DWORD PTR [esp+0x438]
c000b5bd:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c000b5c4:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c000b5cb:	68 00 04 00 00       	push   0x400
c000b5d0:	6a 00                	push   0x0
c000b5d2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b5d6:	56                   	push   esi
c000b5d7:	e8 14 4f ff ff       	call   c00004f0 <memset>
c000b5dc:	83 c4 10             	add    esp,0x10
c000b5df:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b5e3:	75 0b                	jne    c000b5f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b5e5:	50                   	push   eax
c000b5e6:	50                   	push   eax
c000b5e7:	57                   	push   edi
c000b5e8:	56                   	push   esi
c000b5e9:	e8 62 50 ff ff       	call   c0000650 <strcpy>
c000b5ee:	eb 45                	jmp    c000b635 <Fs::standardiseFiles(char*, char const*, char const*)+0x89>
c000b5f0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b5f3:	83 f8 2f             	cmp    eax,0x2f
c000b5f6:	74 05                	je     c000b5fd <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b5f8:	83 f8 5c             	cmp    eax,0x5c
c000b5fb:	75 19                	jne    c000b616 <Fs::standardiseFiles(char*, char const*, char const*)+0x6a>
c000b5fd:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b600:	3c 60                	cmp    al,0x60
c000b602:	7e 03                	jle    c000b607 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b604:	83 e8 20             	sub    eax,0x20
c000b607:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b60b:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b612:	50                   	push   eax
c000b613:	50                   	push   eax
c000b614:	eb 18                	jmp    c000b62e <Fs::standardiseFiles(char*, char const*, char const*)+0x82>
c000b616:	50                   	push   eax
c000b617:	50                   	push   eax
c000b618:	55                   	push   ebp
c000b619:	56                   	push   esi
c000b61a:	e8 31 50 ff ff       	call   c0000650 <strcpy>
c000b61f:	58                   	pop    eax
c000b620:	5a                   	pop    edx
c000b621:	68 03 23 02 c0       	push   0xc0022303
c000b626:	56                   	push   esi
c000b627:	e8 44 52 ff ff       	call   c0000870 <strcat>
c000b62c:	59                   	pop    ecx
c000b62d:	5d                   	pop    ebp
c000b62e:	57                   	push   edi
c000b62f:	56                   	push   esi
c000b630:	e8 3b 52 ff ff       	call   c0000870 <strcat>
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c000b63c:	3c 60                	cmp    al,0x60
c000b63e:	7e 03                	jle    c000b643 <Fs::standardiseFiles(char*, char const*, char const*)+0x97>
c000b640:	83 e8 20             	sub    eax,0x20
c000b643:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000b647:	88 03                	mov    BYTE PTR [ebx],al
c000b649:	b8 03 00 00 00       	mov    eax,0x3
c000b64e:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c000b655:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b65b:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b65f:	c7 44 24 0c 03 00 00 00 	mov    DWORD PTR [esp+0xc],0x3
c000b667:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b66b:	0f b6 7c 3c 10       	movzx  edi,BYTE PTR [esp+edi*1+0x10]
c000b670:	89 fa                	mov    edx,edi
c000b672:	0f be ea             	movsx  ebp,dl
c000b675:	85 ed                	test   ebp,ebp
c000b677:	0f 84 af 00 00 00    	je     c000b72c <Fs::standardiseFiles(char*, char const*, char const*)+0x180>
c000b67d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b681:	42                   	inc    edx
c000b682:	83 fd 2f             	cmp    ebp,0x2f
c000b685:	74 05                	je     c000b68c <Fs::standardiseFiles(char*, char const*, char const*)+0xe0>
c000b687:	83 fd 5c             	cmp    ebp,0x5c
c000b68a:	75 14                	jne    c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b68c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b691:	89 c5                	mov    ebp,eax
c000b693:	74 0b                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*)+0xf4>
c000b695:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b699:	40                   	inc    eax
c000b69a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b69e:	eb c7                	jmp    c000b667 <Fs::standardiseFiles(char*, char const*, char const*)+0xbb>
c000b6a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6a4:	80 7c 0c 0f 2f       	cmp    BYTE PTR [esp+ecx*1+0xf],0x2f
c000b6a9:	89 f9                	mov    ecx,edi
c000b6ab:	0f be e9             	movsx  ebp,cl
c000b6ae:	75 63                	jne    c000b713 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b6b0:	83 fd 2e             	cmp    ebp,0x2e
c000b6b3:	75 5e                	jne    c000b713 <Fs::standardiseFiles(char*, char const*, char const*)+0x167>
c000b6b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b6b9:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c000b6be:	0f be 6c 0c 12       	movsx  ebp,BYTE PTR [esp+ecx*1+0x12]
c000b6c3:	74 18                	je     c000b6dd <Fs::standardiseFiles(char*, char const*, char const*)+0x131>
c000b6c5:	83 fd 2e             	cmp    ebp,0x2e
c000b6c8:	74 57                	je     c000b721 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b6ca:	89 ca                	mov    edx,ecx
c000b6cc:	42                   	inc    edx
c000b6cd:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b6d1:	83 f9 2f             	cmp    ecx,0x2f
c000b6d4:	74 f6                	je     c000b6cc <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b6d6:	83 f9 5c             	cmp    ecx,0x5c
c000b6d9:	74 f1                	je     c000b6cc <Fs::standardiseFiles(char*, char const*, char const*)+0x120>
c000b6db:	eb bd                	jmp    c000b69a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6dd:	83 fd 2e             	cmp    ebp,0x2e
c000b6e0:	74 3f                	je     c000b721 <Fs::standardiseFiles(char*, char const*, char const*)+0x175>
c000b6e2:	83 f8 03             	cmp    eax,0x3
c000b6e5:	74 b3                	je     c000b69a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b6e7:	42                   	inc    edx
c000b6e8:	0f be 0c 16          	movsx  ecx,BYTE PTR [esi+edx*1]
c000b6ec:	83 f9 2f             	cmp    ecx,0x2f
c000b6ef:	74 f6                	je     c000b6e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b6f1:	83 f9 5c             	cmp    ecx,0x5c
c000b6f4:	74 f1                	je     c000b6e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000b6f6:	48                   	dec    eax
c000b6f7:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6fb:	75 06                	jne    c000b703 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b6fd:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b701:	eb f3                	jmp    c000b6f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b703:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b707:	74 07                	je     c000b710 <Fs::standardiseFiles(char*, char const*, char const*)+0x164>
c000b709:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b70d:	48                   	dec    eax
c000b70e:	eb f3                	jmp    c000b703 <Fs::standardiseFiles(char*, char const*, char const*)+0x157>
c000b710:	40                   	inc    eax
c000b711:	eb 87                	jmp    c000b69a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b713:	83 fd 2f             	cmp    ebp,0x2f
c000b716:	74 82                	je     c000b69a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b718:	83 fd 5c             	cmp    ebp,0x5c
c000b71b:	0f 84 79 ff ff ff    	je     c000b69a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b721:	89 f9                	mov    ecx,edi
c000b723:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c000b726:	40                   	inc    eax
c000b727:	e9 6e ff ff ff       	jmp    c000b69a <Fs::standardiseFiles(char*, char const*, char const*)+0xee>
c000b72c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b730:	83 ec 0c             	sub    esp,0xc
c000b733:	53                   	push   ebx
c000b734:	e8 47 4e ff ff       	call   c0000580 <strlen>
c000b739:	83 c4 10             	add    esp,0x10
c000b73c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b741:	75 26                	jne    c000b769 <Fs::standardiseFiles(char*, char const*, char const*)+0x1bd>
c000b743:	83 ec 0c             	sub    esp,0xc
c000b746:	53                   	push   ebx
c000b747:	e8 34 4e ff ff       	call   c0000580 <strlen>
c000b74c:	83 c4 10             	add    esp,0x10
c000b74f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b754:	74 26                	je     c000b77c <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b756:	83 ec 0c             	sub    esp,0xc
c000b759:	53                   	push   ebx
c000b75a:	e8 21 4e ff ff       	call   c0000580 <strlen>
c000b75f:	83 c4 10             	add    esp,0x10
c000b762:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b767:	eb c7                	jmp    c000b730 <Fs::standardiseFiles(char*, char const*, char const*)+0x184>
c000b769:	83 ec 0c             	sub    esp,0xc
c000b76c:	53                   	push   ebx
c000b76d:	e8 0e 4e ff ff       	call   c0000580 <strlen>
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b77a:	74 c7                	je     c000b743 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b77c:	50                   	push   eax
c000b77d:	50                   	push   eax
c000b77e:	53                   	push   ebx
c000b77f:	56                   	push   esi
c000b780:	e8 cb 4e ff ff       	call   c0000650 <strcpy>
c000b785:	5a                   	pop    edx
c000b786:	59                   	pop    ecx
c000b787:	53                   	push   ebx
c000b788:	56                   	push   esi
c000b789:	e8 7f f7 ff ff       	call   c000af0d <KeDereferenceSymlink(char const*, char*)>
c000b78e:	83 c4 10             	add    esp,0x10
c000b791:	48                   	dec    eax
c000b792:	74 e8                	je     c000b77c <Fs::standardiseFiles(char*, char const*, char const*)+0x1d0>
c000b794:	81 c4 1c 04 00 00    	add    esp,0x41c
c000b79a:	5b                   	pop    ebx
c000b79b:	5e                   	pop    esi
c000b79c:	5f                   	pop    edi
c000b79d:	5d                   	pop    ebp
c000b79e:	c3                   	ret    
c000b79f:	90                   	nop

c000b7a0 <File::File(char const*, Process*)>:
c000b7a0:	83 ec 0c             	sub    esp,0xc
c000b7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a7:	83 ec 08             	sub    esp,0x8
c000b7aa:	6a 00                	push   0x0
c000b7ac:	50                   	push   eax
c000b7ad:	e8 f4 d9 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000b7b2:	83 c4 10             	add    esp,0x10
c000b7b5:	ba c4 13 02 c0       	mov    edx,0xc00213c4
c000b7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7be:	89 10                	mov    DWORD PTR [eax],edx
c000b7c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7c4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7ce:	83 c0 0d             	add    eax,0xd
c000b7d1:	83 ec 04             	sub    esp,0x4
c000b7d4:	52                   	push   edx
c000b7d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d9:	50                   	push   eax
c000b7da:	e8 cd fd ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000b7df:	83 c4 10             	add    esp,0x10
c000b7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7e6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b7e9:	83 e8 41             	sub    eax,0x41
c000b7ec:	88 c2                	mov    dl,al
c000b7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7f2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7fc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b804:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b80a:	0f b6 c0             	movzx  eax,al
c000b80d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b814:	85 c0                	test   eax,eax
c000b816:	74 3e                	je     c000b856 <File::File(char const*, Process*)+0xb6>
c000b818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b81c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b822:	0f b6 c0             	movzx  eax,al
c000b825:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b82c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b832:	85 c0                	test   eax,eax
c000b834:	75 20                	jne    c000b856 <File::File(char const*, Process*)+0xb6>
c000b836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b83a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b840:	0f b6 c0             	movzx  eax,al
c000b843:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b84a:	83 ec 0c             	sub    esp,0xc
c000b84d:	50                   	push   eax
c000b84e:	e8 85 21 00 00       	call   c000d9d8 <LogicalDisk::mount()>
c000b853:	83 c4 10             	add    esp,0x10
c000b856:	90                   	nop
c000b857:	83 c4 0c             	add    esp,0xc
c000b85a:	c3                   	ret    
c000b85b:	90                   	nop

c000b85c <File::open(FileOpenMode)>:
c000b85c:	53                   	push   ebx
c000b85d:	b8 0b 00 00 00       	mov    eax,0xb
c000b862:	83 ec 08             	sub    esp,0x8
c000b865:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b869:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b870:	83 fa 19             	cmp    edx,0x19
c000b873:	77 40                	ja     c000b8b5 <File::open(FileOpenMode)+0x59>
c000b875:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b87c:	85 d2                	test   edx,edx
c000b87e:	74 35                	je     c000b8b5 <File::open(FileOpenMode)+0x59>
c000b880:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b886:	85 d2                	test   edx,edx
c000b888:	74 2b                	je     c000b8b5 <File::open(FileOpenMode)+0x59>
c000b88a:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b88e:	b8 06 00 00 00       	mov    eax,0x6
c000b893:	75 20                	jne    c000b8b5 <File::open(FileOpenMode)+0x59>
c000b895:	8b 02                	mov    eax,DWORD PTR [edx]
c000b897:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b89d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8a1:	51                   	push   ecx
c000b8a2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b8a5:	51                   	push   ecx
c000b8a6:	52                   	push   edx
c000b8a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	85 c0                	test   eax,eax
c000b8af:	75 04                	jne    c000b8b5 <File::open(FileOpenMode)+0x59>
c000b8b1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b8b5:	83 c4 08             	add    esp,0x8
c000b8b8:	5b                   	pop    ebx
c000b8b9:	c3                   	ret    

c000b8ba <File::close()>:
c000b8ba:	53                   	push   ebx
c000b8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000b8c0:	83 ec 08             	sub    esp,0x8
c000b8c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8c7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8ce:	83 f9 19             	cmp    ecx,0x19
c000b8d1:	77 41                	ja     c000b914 <File::close()+0x5a>
c000b8d3:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b8da:	85 db                	test   ebx,ebx
c000b8dc:	74 36                	je     c000b914 <File::close()+0x5a>
c000b8de:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b8e5:	74 2d                	je     c000b914 <File::close()+0x5a>
c000b8e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b8eb:	b8 05 00 00 00       	mov    eax,0x5
c000b8f0:	74 22                	je     c000b914 <File::close()+0x5a>
c000b8f2:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b8f6:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b8fd:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b903:	53                   	push   ebx
c000b904:	53                   	push   ebx
c000b905:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b907:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b90d:	50                   	push   eax
c000b90e:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b911:	83 c4 10             	add    esp,0x10
c000b914:	83 c4 08             	add    esp,0x8
c000b917:	5b                   	pop    ebx
c000b918:	c3                   	ret    
c000b919:	90                   	nop

c000b91a <File::seek(unsigned long long)>:
c000b91a:	56                   	push   esi
c000b91b:	b8 0b 00 00 00       	mov    eax,0xb
c000b920:	53                   	push   ebx
c000b921:	51                   	push   ecx
c000b922:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b926:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b92a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b92e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b935:	83 fa 19             	cmp    edx,0x19
c000b938:	77 31                	ja     c000b96b <File::seek(unsigned long long)+0x51>
c000b93a:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b941:	85 d2                	test   edx,edx
c000b943:	74 26                	je     c000b96b <File::seek(unsigned long long)+0x51>
c000b945:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b94b:	85 d2                	test   edx,edx
c000b94d:	74 1c                	je     c000b96b <File::seek(unsigned long long)+0x51>
c000b94f:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b953:	b8 05 00 00 00       	mov    eax,0x5
c000b958:	74 11                	je     c000b96b <File::seek(unsigned long long)+0x51>
c000b95a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b95c:	53                   	push   ebx
c000b95d:	51                   	push   ecx
c000b95e:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b964:	52                   	push   edx
c000b965:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b968:	83 c4 10             	add    esp,0x10
c000b96b:	5a                   	pop    edx
c000b96c:	5b                   	pop    ebx
c000b96d:	5e                   	pop    esi
c000b96e:	c3                   	ret    
c000b96f:	90                   	nop

c000b970 <File::truncate(unsigned long long)>:
c000b970:	56                   	push   esi
c000b971:	b8 0b 00 00 00       	mov    eax,0xb
c000b976:	53                   	push   ebx
c000b977:	51                   	push   ecx
c000b978:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b97c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b980:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b984:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b98b:	83 fa 19             	cmp    edx,0x19
c000b98e:	77 31                	ja     c000b9c1 <File::truncate(unsigned long long)+0x51>
c000b990:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b997:	85 d2                	test   edx,edx
c000b999:	74 26                	je     c000b9c1 <File::truncate(unsigned long long)+0x51>
c000b99b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9a1:	85 d2                	test   edx,edx
c000b9a3:	74 1c                	je     c000b9c1 <File::truncate(unsigned long long)+0x51>
c000b9a5:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9a9:	b8 05 00 00 00       	mov    eax,0x5
c000b9ae:	74 11                	je     c000b9c1 <File::truncate(unsigned long long)+0x51>
c000b9b0:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9b2:	53                   	push   ebx
c000b9b3:	51                   	push   ecx
c000b9b4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9ba:	52                   	push   edx
c000b9bb:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b9be:	83 c4 10             	add    esp,0x10
c000b9c1:	5a                   	pop    edx
c000b9c2:	5b                   	pop    ebx
c000b9c3:	5e                   	pop    esi
c000b9c4:	c3                   	ret    
c000b9c5:	90                   	nop

c000b9c6 <File::tell(unsigned long long*)>:
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b9ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9d2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b9d9:	83 fa 19             	cmp    edx,0x19
c000b9dc:	77 34                	ja     c000ba12 <File::tell(unsigned long long*)+0x4c>
c000b9de:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9e5:	85 d2                	test   edx,edx
c000b9e7:	74 29                	je     c000ba12 <File::tell(unsigned long long*)+0x4c>
c000b9e9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9ef:	85 d2                	test   edx,edx
c000b9f1:	74 1f                	je     c000ba12 <File::tell(unsigned long long*)+0x4c>
c000b9f3:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b9f7:	b8 05 00 00 00       	mov    eax,0x5
c000b9fc:	74 14                	je     c000ba12 <File::tell(unsigned long long*)+0x4c>
c000b9fe:	50                   	push   eax
c000b9ff:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba05:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba0b:	52                   	push   edx
c000ba0c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	83 c4 0c             	add    esp,0xc
c000ba15:	c3                   	ret    

c000ba16 <File::rewind()>:
c000ba16:	83 ec 10             	sub    esp,0x10
c000ba19:	6a 00                	push   0x0
c000ba1b:	6a 00                	push   0x0
c000ba1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba21:	e8 f4 fe ff ff       	call   c000b91a <File::seek(unsigned long long)>
c000ba26:	83 c4 1c             	add    esp,0x1c
c000ba29:	c3                   	ret    

c000ba2a <File::unlink()>:
c000ba2a:	83 ec 0c             	sub    esp,0xc
c000ba2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ba32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba3d:	83 f9 19             	cmp    ecx,0x19
c000ba40:	77 2f                	ja     c000ba71 <File::unlink()+0x47>
c000ba42:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba49:	85 c9                	test   ecx,ecx
c000ba4b:	74 24                	je     c000ba71 <File::unlink()+0x47>
c000ba4d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba53:	85 c9                	test   ecx,ecx
c000ba55:	74 1a                	je     c000ba71 <File::unlink()+0x47>
c000ba57:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba5b:	b8 06 00 00 00       	mov    eax,0x6
c000ba60:	75 0f                	jne    c000ba71 <File::unlink()+0x47>
c000ba62:	50                   	push   eax
c000ba63:	83 c2 0d             	add    edx,0xd
c000ba66:	50                   	push   eax
c000ba67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba69:	52                   	push   edx
c000ba6a:	51                   	push   ecx
c000ba6b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000ba6e:	83 c4 10             	add    esp,0x10
c000ba71:	83 c4 0c             	add    esp,0xc
c000ba74:	c3                   	ret    
c000ba75:	90                   	nop

c000ba76 <File::rename(char const*)>:
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	b8 0b 00 00 00       	mov    eax,0xb
c000ba7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba89:	83 f9 19             	cmp    ecx,0x19
c000ba8c:	77 32                	ja     c000bac0 <File::rename(char const*)+0x4a>
c000ba8e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba95:	85 c9                	test   ecx,ecx
c000ba97:	74 27                	je     c000bac0 <File::rename(char const*)+0x4a>
c000ba99:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba9f:	85 c9                	test   ecx,ecx
c000baa1:	74 1d                	je     c000bac0 <File::rename(char const*)+0x4a>
c000baa3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baa7:	b8 06 00 00 00       	mov    eax,0x6
c000baac:	75 12                	jne    c000bac0 <File::rename(char const*)+0x4a>
c000baae:	50                   	push   eax
c000baaf:	83 c2 0d             	add    edx,0xd
c000bab2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bab4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bab8:	52                   	push   edx
c000bab9:	51                   	push   ecx
c000baba:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	83 c4 0c             	add    esp,0xc
c000bac3:	c3                   	ret    

c000bac4 <File::chfatattr(unsigned char, unsigned char)>:
c000bac4:	57                   	push   edi
c000bac5:	b8 0b 00 00 00       	mov    eax,0xb
c000baca:	56                   	push   esi
c000bacb:	53                   	push   ebx
c000bacc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bad0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bad4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bad8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000badf:	83 f9 19             	cmp    ecx,0x19
c000bae2:	77 37                	ja     c000bb1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bae4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000baeb:	85 c9                	test   ecx,ecx
c000baed:	74 2c                	je     c000bb1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000baef:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000baf5:	85 c9                	test   ecx,ecx
c000baf7:	74 22                	je     c000bb1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000baf9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bafd:	b8 06 00 00 00       	mov    eax,0x6
c000bb02:	75 17                	jne    c000bb1b <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb04:	89 f0                	mov    eax,esi
c000bb06:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb08:	0f b6 db             	movzx  ebx,bl
c000bb0b:	0f b6 f0             	movzx  esi,al
c000bb0e:	83 c2 0d             	add    edx,0xd
c000bb11:	56                   	push   esi
c000bb12:	53                   	push   ebx
c000bb13:	52                   	push   edx
c000bb14:	51                   	push   ecx
c000bb15:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb18:	83 c4 10             	add    esp,0x10
c000bb1b:	5b                   	pop    ebx
c000bb1c:	5e                   	pop    esi
c000bb1d:	5f                   	pop    edi
c000bb1e:	c3                   	ret    
c000bb1f:	90                   	nop

c000bb20 <File::exists()>:
c000bb20:	83 ec 0c             	sub    esp,0xc
c000bb23:	31 c0                	xor    eax,eax
c000bb25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb29:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb30:	83 f9 19             	cmp    ecx,0x19
c000bb33:	77 24                	ja     c000bb59 <File::exists()+0x39>
c000bb35:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb3c:	85 c9                	test   ecx,ecx
c000bb3e:	74 19                	je     c000bb59 <File::exists()+0x39>
c000bb40:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb46:	85 c9                	test   ecx,ecx
c000bb48:	74 0f                	je     c000bb59 <File::exists()+0x39>
c000bb4a:	50                   	push   eax
c000bb4b:	83 c2 0d             	add    edx,0xd
c000bb4e:	50                   	push   eax
c000bb4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb51:	52                   	push   edx
c000bb52:	51                   	push   ecx
c000bb53:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bb56:	83 c4 10             	add    esp,0x10
c000bb59:	83 c4 0c             	add    esp,0xc
c000bb5c:	c3                   	ret    
c000bb5d:	90                   	nop

c000bb5e <File::stat(unsigned long long*, bool*)>:
c000bb5e:	56                   	push   esi
c000bb5f:	53                   	push   ebx
c000bb60:	50                   	push   eax
c000bb61:	b8 0b 00 00 00       	mov    eax,0xb
c000bb66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb6e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb72:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb79:	83 f9 19             	cmp    ecx,0x19
c000bb7c:	77 3d                	ja     c000bbbb <File::stat(unsigned long long*, bool*)+0x5d>
c000bb7e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb85:	85 c9                	test   ecx,ecx
c000bb87:	74 32                	je     c000bbbb <File::stat(unsigned long long*, bool*)+0x5d>
c000bb89:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb8f:	85 c9                	test   ecx,ecx
c000bb91:	74 28                	je     c000bbbb <File::stat(unsigned long long*, bool*)+0x5d>
c000bb93:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb99:	74 13                	je     c000bbae <File::stat(unsigned long long*, bool*)+0x50>
c000bb9b:	83 ec 04             	sub    esp,0x4
c000bb9e:	56                   	push   esi
c000bb9f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bba5:	51                   	push   ecx
c000bba6:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bba9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bbac:	eb 0a                	jmp    c000bbb8 <File::stat(unsigned long long*, bool*)+0x5a>
c000bbae:	53                   	push   ebx
c000bbaf:	83 c2 0d             	add    edx,0xd
c000bbb2:	56                   	push   esi
c000bbb3:	52                   	push   edx
c000bbb4:	51                   	push   ecx
c000bbb5:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bbb8:	83 c4 10             	add    esp,0x10
c000bbbb:	5a                   	pop    edx
c000bbbc:	5b                   	pop    ebx
c000bbbd:	5e                   	pop    esi
c000bbbe:	c3                   	ret    

c000bbbf <Fs::setcwd(Process*, char*)>:
c000bbbf:	55                   	push   ebp
c000bbc0:	57                   	push   edi
c000bbc1:	56                   	push   esi
c000bbc2:	53                   	push   ebx
c000bbc3:	81 ec 20 02 00 00    	sub    esp,0x220
c000bbc9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bbd0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bbd6:	57                   	push   edi
c000bbd7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bbde:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bbe2:	56                   	push   esi
c000bbe3:	e8 c4 f9 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000bbe8:	89 34 24             	mov    DWORD PTR [esp],esi
c000bbeb:	e8 90 49 ff ff       	call   c0000580 <strlen>
c000bbf0:	83 c4 10             	add    esp,0x10
c000bbf3:	83 f8 02             	cmp    eax,0x2
c000bbf6:	77 15                	ja     c000bc0d <Fs::setcwd(Process*, char*)+0x4e>
c000bbf8:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bbfd:	83 eb 41             	sub    ebx,0x41
c000bc00:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc07:	85 c0                	test   eax,eax
c000bc09:	75 1c                	jne    c000bc27 <Fs::setcwd(Process*, char*)+0x68>
c000bc0b:	eb 2f                	jmp    c000bc3c <Fs::setcwd(Process*, char*)+0x7d>
c000bc0d:	83 ec 0c             	sub    esp,0xc
c000bc10:	56                   	push   esi
c000bc11:	e8 6a 49 ff ff       	call   c0000580 <strlen>
c000bc16:	83 c4 10             	add    esp,0x10
c000bc19:	83 f8 03             	cmp    eax,0x3
c000bc1c:	75 57                	jne    c000bc75 <Fs::setcwd(Process*, char*)+0xb6>
c000bc1e:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc23:	75 50                	jne    c000bc75 <Fs::setcwd(Process*, char*)+0xb6>
c000bc25:	eb d1                	jmp    c000bbf8 <Fs::setcwd(Process*, char*)+0x39>
c000bc27:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc2e:	75 0c                	jne    c000bc3c <Fs::setcwd(Process*, char*)+0x7d>
c000bc30:	83 ec 0c             	sub    esp,0xc
c000bc33:	50                   	push   eax
c000bc34:	e8 9f 1d 00 00       	call   c000d9d8 <LogicalDisk::mount()>
c000bc39:	83 c4 10             	add    esp,0x10
c000bc3c:	83 fb 19             	cmp    ebx,0x19
c000bc3f:	b8 03 00 00 00       	mov    eax,0x3
c000bc44:	0f 87 c6 00 00 00    	ja     c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bc4a:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bc51:	b8 05 00 00 00       	mov    eax,0x5
c000bc56:	85 d2                	test   edx,edx
c000bc58:	0f 84 b2 00 00 00    	je     c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bc5e:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bc65:	b8 06 00 00 00       	mov    eax,0x6
c000bc6a:	0f 85 92 00 00 00    	jne    c000bd02 <Fs::setcwd(Process*, char*)+0x143>
c000bc70:	e9 9b 00 00 00       	jmp    c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bc75:	83 ec 0c             	sub    esp,0xc
c000bc78:	68 14 01 00 00       	push   0x114
c000bc7d:	e8 51 be ff ff       	call   c0007ad3 <malloc>
c000bc82:	83 c4 0c             	add    esp,0xc
c000bc85:	55                   	push   ebp
c000bc86:	56                   	push   esi
c000bc87:	50                   	push   eax
c000bc88:	89 c3                	mov    ebx,eax
c000bc8a:	e8 11 fb ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c000bc8f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bc94:	83 c4 0c             	add    esp,0xc
c000bc97:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bc9b:	50                   	push   eax
c000bc9c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bca0:	50                   	push   eax
c000bca1:	53                   	push   ebx
c000bca2:	e8 b7 fe ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c000bca7:	83 c4 10             	add    esp,0x10
c000bcaa:	83 f8 02             	cmp    eax,0x2
c000bcad:	74 27                	je     c000bcd6 <Fs::setcwd(Process*, char*)+0x117>
c000bcaf:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bcb4:	75 1c                	jne    c000bcd2 <Fs::setcwd(Process*, char*)+0x113>
c000bcb6:	85 db                	test   ebx,ebx
c000bcb8:	b8 02 00 00 00       	mov    eax,0x2
c000bcbd:	74 51                	je     c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bcbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcc1:	83 ec 0c             	sub    esp,0xc
c000bcc4:	53                   	push   ebx
c000bcc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bcc8:	83 c4 10             	add    esp,0x10
c000bccb:	b8 02 00 00 00       	mov    eax,0x2
c000bcd0:	eb 3e                	jmp    c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bcd2:	85 c0                	test   eax,eax
c000bcd4:	74 1c                	je     c000bcf2 <Fs::setcwd(Process*, char*)+0x133>
c000bcd6:	85 db                	test   ebx,ebx
c000bcd8:	b8 01 00 00 00       	mov    eax,0x1
c000bcdd:	74 31                	je     c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bcdf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bce1:	83 ec 0c             	sub    esp,0xc
c000bce4:	53                   	push   ebx
c000bce5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bce8:	83 c4 10             	add    esp,0x10
c000bceb:	b8 01 00 00 00       	mov    eax,0x1
c000bcf0:	eb 1e                	jmp    c000bd10 <Fs::setcwd(Process*, char*)+0x151>
c000bcf2:	85 db                	test   ebx,ebx
c000bcf4:	74 0c                	je     c000bd02 <Fs::setcwd(Process*, char*)+0x143>
c000bcf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcf8:	83 ec 0c             	sub    esp,0xc
c000bcfb:	53                   	push   ebx
c000bcfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bcff:	83 c4 10             	add    esp,0x10
c000bd02:	50                   	push   eax
c000bd03:	50                   	push   eax
c000bd04:	56                   	push   esi
c000bd05:	57                   	push   edi
c000bd06:	e8 45 49 ff ff       	call   c0000650 <strcpy>
c000bd0b:	83 c4 10             	add    esp,0x10
c000bd0e:	31 c0                	xor    eax,eax
c000bd10:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd16:	5b                   	pop    ebx
c000bd17:	5e                   	pop    esi
c000bd18:	5f                   	pop    edi
c000bd19:	5d                   	pop    ebp
c000bd1a:	c3                   	ret    
c000bd1b:	90                   	nop

c000bd1c <Directory::Directory(char const*, Process*)>:
c000bd1c:	83 ec 0c             	sub    esp,0xc
c000bd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd23:	83 ec 08             	sub    esp,0x8
c000bd26:	6a 00                	push   0x0
c000bd28:	50                   	push   eax
c000bd29:	e8 78 d4 ff ff       	call   c00091a6 <UnixFile::UnixFile(int)>
c000bd2e:	83 c4 10             	add    esp,0x10
c000bd31:	ba e0 13 02 c0       	mov    edx,0xc00213e0
c000bd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3a:	89 10                	mov    DWORD PTR [eax],edx
c000bd3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd40:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4a:	83 c0 0d             	add    eax,0xd
c000bd4d:	83 ec 04             	sub    esp,0x4
c000bd50:	52                   	push   edx
c000bd51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd55:	50                   	push   eax
c000bd56:	e8 51 f8 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd62:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bd65:	83 e8 41             	sub    eax,0x41
c000bd68:	88 c2                	mov    dl,al
c000bd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd6e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd78:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bd7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd80:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd86:	0f b6 c0             	movzx  eax,al
c000bd89:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd90:	85 c0                	test   eax,eax
c000bd92:	74 3e                	je     c000bdd2 <Directory::Directory(char const*, Process*)+0xb6>
c000bd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd98:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd9e:	0f b6 c0             	movzx  eax,al
c000bda1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bda8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdae:	85 c0                	test   eax,eax
c000bdb0:	75 20                	jne    c000bdd2 <Directory::Directory(char const*, Process*)+0xb6>
c000bdb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdbc:	0f b6 c0             	movzx  eax,al
c000bdbf:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bdc6:	83 ec 0c             	sub    esp,0xc
c000bdc9:	50                   	push   eax
c000bdca:	e8 09 1c 00 00       	call   c000d9d8 <LogicalDisk::mount()>
c000bdcf:	83 c4 10             	add    esp,0x10
c000bdd2:	90                   	nop
c000bdd3:	83 c4 0c             	add    esp,0xc
c000bdd6:	c3                   	ret    
c000bdd7:	90                   	nop

c000bdd8 <Directory::open()>:
c000bdd8:	53                   	push   ebx
c000bdd9:	b8 0b 00 00 00       	mov    eax,0xb
c000bdde:	83 ec 08             	sub    esp,0x8
c000bde1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bde5:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bdec:	83 fa 19             	cmp    edx,0x19
c000bdef:	77 3d                	ja     c000be2e <Directory::open()+0x56>
c000bdf1:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bdf8:	85 d2                	test   edx,edx
c000bdfa:	74 32                	je     c000be2e <Directory::open()+0x56>
c000bdfc:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be02:	85 d2                	test   edx,edx
c000be04:	74 28                	je     c000be2e <Directory::open()+0x56>
c000be06:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be0a:	b8 06 00 00 00       	mov    eax,0x6
c000be0f:	75 1d                	jne    c000be2e <Directory::open()+0x56>
c000be11:	50                   	push   eax
c000be12:	8b 02                	mov    eax,DWORD PTR [edx]
c000be14:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be1a:	51                   	push   ecx
c000be1b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be1e:	51                   	push   ecx
c000be1f:	52                   	push   edx
c000be20:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be23:	83 c4 10             	add    esp,0x10
c000be26:	85 c0                	test   eax,eax
c000be28:	75 04                	jne    c000be2e <Directory::open()+0x56>
c000be2a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000be2e:	83 c4 08             	add    esp,0x8
c000be31:	5b                   	pop    ebx
c000be32:	c3                   	ret    
c000be33:	90                   	nop

c000be34 <Directory::close()>:
c000be34:	53                   	push   ebx
c000be35:	b8 0b 00 00 00       	mov    eax,0xb
c000be3a:	83 ec 08             	sub    esp,0x8
c000be3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be41:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be48:	83 f9 19             	cmp    ecx,0x19
c000be4b:	77 41                	ja     c000be8e <Directory::close()+0x5a>
c000be4d:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000be54:	85 db                	test   ebx,ebx
c000be56:	74 36                	je     c000be8e <Directory::close()+0x5a>
c000be58:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000be5f:	74 2d                	je     c000be8e <Directory::close()+0x5a>
c000be61:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be65:	b8 05 00 00 00       	mov    eax,0x5
c000be6a:	74 22                	je     c000be8e <Directory::close()+0x5a>
c000be6c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000be70:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000be77:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be7d:	53                   	push   ebx
c000be7e:	53                   	push   ebx
c000be7f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be81:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be87:	50                   	push   eax
c000be88:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000be8b:	83 c4 10             	add    esp,0x10
c000be8e:	83 c4 08             	add    esp,0x8
c000be91:	5b                   	pop    ebx
c000be92:	c3                   	ret    
c000be93:	90                   	nop

c000be94 <Directory::unlink()>:
c000be94:	83 ec 0c             	sub    esp,0xc
c000be97:	b8 0b 00 00 00       	mov    eax,0xb
c000be9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bea0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bea7:	83 f9 19             	cmp    ecx,0x19
c000beaa:	77 2f                	ja     c000bedb <Directory::unlink()+0x47>
c000beac:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000beb3:	85 c9                	test   ecx,ecx
c000beb5:	74 24                	je     c000bedb <Directory::unlink()+0x47>
c000beb7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bebd:	85 c9                	test   ecx,ecx
c000bebf:	74 1a                	je     c000bedb <Directory::unlink()+0x47>
c000bec1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bec5:	b8 06 00 00 00       	mov    eax,0x6
c000beca:	75 0f                	jne    c000bedb <Directory::unlink()+0x47>
c000becc:	50                   	push   eax
c000becd:	83 c2 0d             	add    edx,0xd
c000bed0:	50                   	push   eax
c000bed1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bed3:	52                   	push   edx
c000bed4:	51                   	push   ecx
c000bed5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bed8:	83 c4 10             	add    esp,0x10
c000bedb:	83 c4 0c             	add    esp,0xc
c000bede:	c3                   	ret    
c000bedf:	90                   	nop

c000bee0 <Directory::rename(char const*)>:
c000bee0:	83 ec 0c             	sub    esp,0xc
c000bee3:	b8 0b 00 00 00       	mov    eax,0xb
c000bee8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bef3:	83 f9 19             	cmp    ecx,0x19
c000bef6:	77 32                	ja     c000bf2a <Directory::rename(char const*)+0x4a>
c000bef8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000beff:	85 c9                	test   ecx,ecx
c000bf01:	74 27                	je     c000bf2a <Directory::rename(char const*)+0x4a>
c000bf03:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf09:	85 c9                	test   ecx,ecx
c000bf0b:	74 1d                	je     c000bf2a <Directory::rename(char const*)+0x4a>
c000bf0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf11:	b8 06 00 00 00       	mov    eax,0x6
c000bf16:	75 12                	jne    c000bf2a <Directory::rename(char const*)+0x4a>
c000bf18:	50                   	push   eax
c000bf19:	83 c2 0d             	add    edx,0xd
c000bf1c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf22:	52                   	push   edx
c000bf23:	51                   	push   ecx
c000bf24:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bf27:	83 c4 10             	add    esp,0x10
c000bf2a:	83 c4 0c             	add    esp,0xc
c000bf2d:	c3                   	ret    

c000bf2e <Directory::exists()>:
c000bf2e:	83 ec 0c             	sub    esp,0xc
c000bf31:	31 c0                	xor    eax,eax
c000bf33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf37:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf3e:	83 f9 19             	cmp    ecx,0x19
c000bf41:	77 24                	ja     c000bf67 <Directory::exists()+0x39>
c000bf43:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf4a:	85 c9                	test   ecx,ecx
c000bf4c:	74 19                	je     c000bf67 <Directory::exists()+0x39>
c000bf4e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf54:	85 c9                	test   ecx,ecx
c000bf56:	74 0f                	je     c000bf67 <Directory::exists()+0x39>
c000bf58:	50                   	push   eax
c000bf59:	83 c2 0d             	add    edx,0xd
c000bf5c:	50                   	push   eax
c000bf5d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf5f:	52                   	push   edx
c000bf60:	51                   	push   ecx
c000bf61:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bf64:	83 c4 10             	add    esp,0x10
c000bf67:	83 c4 0c             	add    esp,0xc
c000bf6a:	c3                   	ret    
c000bf6b:	90                   	nop

c000bf6c <Directory::read(dirent*)>:
c000bf6c:	83 ec 1c             	sub    esp,0x1c
c000bf6f:	b8 0b 00 00 00       	mov    eax,0xb
c000bf74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf78:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf7f:	83 f9 19             	cmp    ecx,0x19
c000bf82:	77 30                	ja     c000bfb4 <Directory::read(dirent*)+0x48>
c000bf84:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf8b:	85 c9                	test   ecx,ecx
c000bf8d:	74 25                	je     c000bfb4 <Directory::read(dirent*)+0x48>
c000bf8f:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bf96:	74 1c                	je     c000bfb4 <Directory::read(dirent*)+0x48>
c000bf98:	83 ec 0c             	sub    esp,0xc
c000bf9b:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf9d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bfa1:	51                   	push   ecx
c000bfa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfa6:	6a 00                	push   0x0
c000bfa8:	68 10 01 00 00       	push   0x110
c000bfad:	52                   	push   edx
c000bfae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bfb1:	83 c4 20             	add    esp,0x20
c000bfb4:	83 c4 1c             	add    esp,0x1c
c000bfb7:	c3                   	ret    

c000bfb8 <Directory::create()>:
c000bfb8:	83 ec 0c             	sub    esp,0xc
c000bfbb:	b8 0b 00 00 00       	mov    eax,0xb
c000bfc0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfc4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfcb:	83 f9 19             	cmp    ecx,0x19
c000bfce:	77 2f                	ja     c000bfff <Directory::create()+0x47>
c000bfd0:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfd7:	85 c9                	test   ecx,ecx
c000bfd9:	74 24                	je     c000bfff <Directory::create()+0x47>
c000bfdb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bfe1:	85 c9                	test   ecx,ecx
c000bfe3:	74 1a                	je     c000bfff <Directory::create()+0x47>
c000bfe5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bfe9:	b8 06 00 00 00       	mov    eax,0x6
c000bfee:	75 0f                	jne    c000bfff <Directory::create()+0x47>
c000bff0:	50                   	push   eax
c000bff1:	83 c2 0d             	add    edx,0xd
c000bff4:	50                   	push   eax
c000bff5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bff7:	52                   	push   edx
c000bff8:	51                   	push   ecx
c000bff9:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	83 c4 0c             	add    esp,0xc
c000c002:	c3                   	ret    
c000c003:	90                   	nop

c000c004 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c004:	b8 0a 00 00 00       	mov    eax,0xa
c000c009:	c3                   	ret    
c000c00a:	66 90                	xchg   ax,ax

c000c00c <Bus::Bus(char const*)>:
c000c00c:	83 ec 0c             	sub    esp,0xc
c000c00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c013:	83 ec 08             	sub    esp,0x8
c000c016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c01a:	50                   	push   eax
c000c01b:	e8 28 08 00 00       	call   c000c848 <Device::Device(char const*)>
c000c020:	83 c4 10             	add    esp,0x10
c000c023:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c000c028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02c:	89 10                	mov    DWORD PTR [eax],edx
c000c02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c032:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c03c:	90                   	nop
c000c03d:	83 c4 0c             	add    esp,0xc
c000c040:	c3                   	ret    
c000c041:	90                   	nop
c000c042:	66 90                	xchg   ax,ax

c000c044 <Bus::~Bus()>:
c000c044:	83 ec 0c             	sub    esp,0xc
c000c047:	ba fc 13 02 c0       	mov    edx,0xc00213fc
c000c04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c050:	89 10                	mov    DWORD PTR [eax],edx
c000c052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c056:	83 ec 0c             	sub    esp,0xc
c000c059:	50                   	push   eax
c000c05a:	e8 53 05 00 00       	call   c000c5b2 <Device::~Device()>
c000c05f:	83 c4 10             	add    esp,0x10
c000c062:	90                   	nop
c000c063:	83 c4 0c             	add    esp,0xc
c000c066:	c3                   	ret    
c000c067:	90                   	nop

c000c068 <Bus::~Bus()>:
c000c068:	83 ec 0c             	sub    esp,0xc
c000c06b:	83 ec 0c             	sub    esp,0xc
c000c06e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c072:	e8 cd ff ff ff       	call   c000c044 <Bus::~Bus()>
c000c077:	83 c4 10             	add    esp,0x10
c000c07a:	83 ec 08             	sub    esp,0x8
c000c07d:	68 58 01 00 00       	push   0x158
c000c082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c086:	e8 81 e7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c08b:	83 c4 10             	add    esp,0x10
c000c08e:	83 c4 0c             	add    esp,0xc
c000c091:	c3                   	ret    

c000c092 <beepThread(void*)>:
c000c092:	83 ec 0c             	sub    esp,0xc
c000c095:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c09a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c09e:	48                   	dec    eax
c000c09f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c0a4:	75 01                	jne    c000c0a7 <beepThread(void*)+0x15>
c000c0a6:	fb                   	sti    
c000c0a7:	6b c2 0a             	imul   eax,edx,0xa
c000c0aa:	83 ec 0c             	sub    esp,0xc
c000c0ad:	50                   	push   eax
c000c0ae:	e8 b9 9d 00 00       	call   c0015e6c <milliTenthSleep(unsigned int)>
c000c0b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c0ba:	e8 06 bd 00 00       	call   c0017dc5 <HalMakeBeep(int)>
c000c0bf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c0c7:	83 c4 1c             	add    esp,0x1c
c000c0ca:	e9 81 9c 00 00       	jmp    c0015d50 <blockTask(TaskState)>

c000c0cf <Krnl::beep(int, int, bool)>:
c000c0cf:	56                   	push   esi
c000c0d0:	53                   	push   ebx
c000c0d1:	83 ec 10             	sub    esp,0x10
c000c0d4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c0d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e0:	e8 e0 bc 00 00       	call   c0017dc5 <HalMakeBeep(int)>
c000c0e5:	89 f0                	mov    eax,esi
c000c0e7:	83 c4 10             	add    esp,0x10
c000c0ea:	84 c0                	test   al,al
c000c0ec:	74 1e                	je     c000c10c <Krnl::beep(int, int, bool)+0x3d>
c000c0ee:	6b db 0a             	imul   ebx,ebx,0xa
c000c0f1:	83 ec 0c             	sub    esp,0xc
c000c0f4:	53                   	push   ebx
c000c0f5:	e8 72 9d 00 00       	call   c0015e6c <milliTenthSleep(unsigned int)>
c000c0fa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c102:	83 c4 14             	add    esp,0x14
c000c105:	5b                   	pop    ebx
c000c106:	5e                   	pop    esi
c000c107:	e9 b9 bc 00 00       	jmp    c0017dc5 <HalMakeBeep(int)>
c000c10c:	68 e6 00 00 00       	push   0xe6
c000c111:	53                   	push   ebx
c000c112:	68 92 c0 00 c0       	push   0xc000c092
c000c117:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c11d:	e8 e2 97 00 00       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c000c122:	83 c4 14             	add    esp,0x14
c000c125:	5b                   	pop    ebx
c000c126:	5e                   	pop    esi
c000c127:	c3                   	ret    

c000c128 <User::loadClockSettings(int)>:
c000c128:	53                   	push   ebx
c000c129:	83 ec 14             	sub    esp,0x14
c000c12c:	68 14 01 00 00       	push   0x114
c000c131:	e8 9d b9 ff ff       	call   c0007ad3 <malloc>
c000c136:	83 c4 0c             	add    esp,0xc
c000c139:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c13f:	68 20 14 02 c0       	push   0xc0021420
c000c144:	50                   	push   eax
c000c145:	89 c3                	mov    ebx,eax
c000c147:	e8 54 f6 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c000c14c:	58                   	pop    eax
c000c14d:	5a                   	pop    edx
c000c14e:	6a 01                	push   0x1
c000c150:	53                   	push   ebx
c000c151:	e8 06 f7 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c000c156:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c159:	e8 5c f7 ff ff       	call   c000b8ba <File::close()>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	85 db                	test   ebx,ebx
c000c163:	74 0f                	je     c000c174 <User::loadClockSettings(int)+0x4c>
c000c165:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c167:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c16b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c16e:	83 c4 08             	add    esp,0x8
c000c171:	5b                   	pop    ebx
c000c172:	ff e0                	jmp    eax
c000c174:	83 c4 08             	add    esp,0x8
c000c177:	5b                   	pop    ebx
c000c178:	c3                   	ret    
c000c179:	90                   	nop

c000c17a <Clock::Clock(char const*)>:
c000c17a:	83 ec 0c             	sub    esp,0xc
c000c17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c181:	83 ec 08             	sub    esp,0x8
c000c184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c188:	50                   	push   eax
c000c189:	e8 ba 06 00 00       	call   c000c848 <Device::Device(char const*)>
c000c18e:	83 c4 10             	add    esp,0x10
c000c191:	ba 48 14 02 c0       	mov    edx,0xc0021448
c000c196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c19a:	89 10                	mov    DWORD PTR [eax],edx
c000c19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c1aa:	90                   	nop
c000c1ab:	83 c4 0c             	add    esp,0xc
c000c1ae:	c3                   	ret    
c000c1af:	90                   	nop

c000c1b0 <Clock::~Clock()>:
c000c1b0:	83 ec 0c             	sub    esp,0xc
c000c1b3:	ba 48 14 02 c0       	mov    edx,0xc0021448
c000c1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1bc:	89 10                	mov    DWORD PTR [eax],edx
c000c1be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1c2:	83 ec 0c             	sub    esp,0xc
c000c1c5:	50                   	push   eax
c000c1c6:	e8 e7 03 00 00       	call   c000c5b2 <Device::~Device()>
c000c1cb:	83 c4 10             	add    esp,0x10
c000c1ce:	90                   	nop
c000c1cf:	83 c4 0c             	add    esp,0xc
c000c1d2:	c3                   	ret    
c000c1d3:	90                   	nop

c000c1d4 <Clock::~Clock()>:
c000c1d4:	83 ec 0c             	sub    esp,0xc
c000c1d7:	83 ec 0c             	sub    esp,0xc
c000c1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1de:	e8 cd ff ff ff       	call   c000c1b0 <Clock::~Clock()>
c000c1e3:	83 c4 10             	add    esp,0x10
c000c1e6:	83 ec 08             	sub    esp,0x8
c000c1e9:	68 58 01 00 00       	push   0x158
c000c1ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1f2:	e8 15 e6 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c1f7:	83 c4 10             	add    esp,0x10
c000c1fa:	83 c4 0c             	add    esp,0xc
c000c1fd:	c3                   	ret    

c000c1fe <Clock::timeInSecondsLocal()>:
c000c1fe:	53                   	push   ebx
c000c1ff:	83 ec 14             	sub    esp,0x14
c000c202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c206:	8b 10                	mov    edx,DWORD PTR [eax]
c000c208:	50                   	push   eax
c000c209:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c20c:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c213:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c219:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c21f:	89 cb                	mov    ebx,ecx
c000c221:	c1 fb 1f             	sar    ebx,0x1f
c000c224:	01 c8                	add    eax,ecx
c000c226:	11 da                	adc    edx,ebx
c000c228:	83 c4 10             	add    esp,0x10
c000c22b:	31 c9                	xor    ecx,ecx
c000c22d:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c234:	74 05                	je     c000c23b <Clock::timeInSecondsLocal()+0x3d>
c000c236:	b9 08 07 00 00       	mov    ecx,0x708
c000c23b:	31 db                	xor    ebx,ebx
c000c23d:	01 c8                	add    eax,ecx
c000c23f:	11 da                	adc    edx,ebx
c000c241:	83 c4 08             	add    esp,0x8
c000c244:	5b                   	pop    ebx
c000c245:	c3                   	ret    

c000c246 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c246:	57                   	push   edi
c000c247:	56                   	push   esi
c000c248:	53                   	push   ebx
c000c249:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c24d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c251:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c255:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c257:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c25a:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c261:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c267:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c26d:	99                   	cdq    
c000c26e:	29 c6                	sub    esi,eax
c000c270:	19 d7                	sbb    edi,edx
c000c272:	89 f0                	mov    eax,esi
c000c274:	31 f6                	xor    esi,esi
c000c276:	89 fa                	mov    edx,edi
c000c278:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c27f:	74 05                	je     c000c286 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c281:	be 08 07 00 00       	mov    esi,0x708
c000c286:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c28a:	31 ff                	xor    edi,edi
c000c28c:	29 f0                	sub    eax,esi
c000c28e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c292:	19 fa                	sbb    edx,edi
c000c294:	89 d8                	mov    eax,ebx
c000c296:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c29a:	5b                   	pop    ebx
c000c29b:	5e                   	pop    esi
c000c29c:	5f                   	pop    edi
c000c29d:	ff e0                	jmp    eax

c000c29f <datetimeToSeconds(datetime_t)>:
c000c29f:	55                   	push   ebp
c000c2a0:	57                   	push   edi
c000c2a1:	56                   	push   esi
c000c2a2:	53                   	push   ebx
c000c2a3:	83 ec 0c             	sub    esp,0xc
c000c2a6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c2aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c2ae:	89 f7                	mov    edi,esi
c000c2b0:	89 f0                	mov    eax,esi
c000c2b2:	0f b6 cf             	movzx  ecx,bh
c000c2b5:	0f b6 c4             	movzx  eax,ah
c000c2b8:	c1 ef 10             	shr    edi,0x10
c000c2bb:	89 da                	mov    edx,ebx
c000c2bd:	8d 69 ff             	lea    ebp,[ecx-0x1]
c000c2c0:	89 f9                	mov    ecx,edi
c000c2c2:	0f b6 f9             	movzx  edi,cl
c000c2c5:	89 f1                	mov    ecx,esi
c000c2c7:	6b c0 3c             	imul   eax,eax,0x3c
c000c2ca:	0f b6 f1             	movzx  esi,cl
c000c2cd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c000c2d3:	0f b6 db             	movzx  ebx,bl
c000c2d6:	c1 ea 10             	shr    edx,0x10
c000c2d9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c000c2df:	01 f8                	add    eax,edi
c000c2e1:	01 f0                	add    eax,esi
c000c2e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2e6:	c1 f8 1f             	sar    eax,0x1f
c000c2e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c2ed:	89 e8                	mov    eax,ebp
c000c2ef:	0f b6 c0             	movzx  eax,al
c000c2f2:	8b 0c 85 80 14 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeb80]
c000c2f9:	83 f8 01             	cmp    eax,0x1
c000c2fc:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c000c300:	0f b7 da             	movzx  ebx,dx
c000c303:	76 27                	jbe    c000c32c <datetimeToSeconds(datetime_t)+0x8d>
c000c305:	80 e2 03             	and    dl,0x3
c000c308:	75 22                	jne    c000c32c <datetimeToSeconds(datetime_t)+0x8d>
c000c30a:	31 d2                	xor    edx,edx
c000c30c:	be 64 00 00 00       	mov    esi,0x64
c000c311:	89 d8                	mov    eax,ebx
c000c313:	f7 f6                	div    esi
c000c315:	85 d2                	test   edx,edx
c000c317:	75 12                	jne    c000c32b <datetimeToSeconds(datetime_t)+0x8c>
c000c319:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c31f:	be 90 01 00 00       	mov    esi,0x190
c000c324:	99                   	cdq    
c000c325:	f7 fe                	idiv   esi
c000c327:	85 d2                	test   edx,edx
c000c329:	75 01                	jne    c000c32c <datetimeToSeconds(datetime_t)+0x8d>
c000c32b:	41                   	inc    ecx
c000c32c:	83 fb 46             	cmp    ebx,0x46
c000c32f:	76 48                	jbe    c000c379 <datetimeToSeconds(datetime_t)+0xda>
c000c331:	be 46 00 00 00       	mov    esi,0x46
c000c336:	bf 64 00 00 00       	mov    edi,0x64
c000c33b:	bd 90 01 00 00       	mov    ebp,0x190
c000c340:	f7 c6 03 00 00 00    	test   esi,0x3
c000c346:	b8 6d 01 00 00       	mov    eax,0x16d
c000c34b:	75 23                	jne    c000c370 <datetimeToSeconds(datetime_t)+0xd1>
c000c34d:	89 f0                	mov    eax,esi
c000c34f:	99                   	cdq    
c000c350:	f7 ff                	idiv   edi
c000c352:	b8 6e 01 00 00       	mov    eax,0x16e
c000c357:	85 d2                	test   edx,edx
c000c359:	75 15                	jne    c000c370 <datetimeToSeconds(datetime_t)+0xd1>
c000c35b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c361:	99                   	cdq    
c000c362:	f7 fd                	idiv   ebp
c000c364:	83 fa 01             	cmp    edx,0x1
c000c367:	19 c0                	sbb    eax,eax
c000c369:	f7 d0                	not    eax
c000c36b:	05 6e 01 00 00       	add    eax,0x16e
c000c370:	46                   	inc    esi
c000c371:	01 c1                	add    ecx,eax
c000c373:	39 de                	cmp    esi,ebx
c000c375:	7c c9                	jl     c000c340 <datetimeToSeconds(datetime_t)+0xa1>
c000c377:	eb 34                	jmp    c000c3ad <datetimeToSeconds(datetime_t)+0x10e>
c000c379:	74 32                	je     c000c3ad <datetimeToSeconds(datetime_t)+0x10e>
c000c37b:	b8 45 00 00 00       	mov    eax,0x45
c000c380:	89 c2                	mov    edx,eax
c000c382:	83 e2 03             	and    edx,0x3
c000c385:	39 d8                	cmp    eax,ebx
c000c387:	7e 0f                	jle    c000c398 <datetimeToSeconds(datetime_t)+0xf9>
c000c389:	83 fa 01             	cmp    edx,0x1
c000c38c:	19 d2                	sbb    edx,edx
c000c38e:	48                   	dec    eax
c000c38f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c396:	eb e8                	jmp    c000c380 <datetimeToSeconds(datetime_t)+0xe1>
c000c398:	85 d2                	test   edx,edx
c000c39a:	b8 6d 01 00 00       	mov    eax,0x16d
c000c39f:	75 0a                	jne    c000c3ab <datetimeToSeconds(datetime_t)+0x10c>
c000c3a1:	83 fb 01             	cmp    ebx,0x1
c000c3a4:	19 c0                	sbb    eax,eax
c000c3a6:	05 6e 01 00 00       	add    eax,0x16e
c000c3ab:	29 c1                	sub    ecx,eax
c000c3ad:	b8 80 51 01 00       	mov    eax,0x15180
c000c3b2:	f7 e9                	imul   ecx
c000c3b4:	03 04 24             	add    eax,DWORD PTR [esp]
c000c3b7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c3bb:	83 c4 0c             	add    esp,0xc
c000c3be:	5b                   	pop    ebx
c000c3bf:	5e                   	pop    esi
c000c3c0:	5f                   	pop    edi
c000c3c1:	5d                   	pop    ebp
c000c3c2:	c3                   	ret    
c000c3c3:	90                   	nop

c000c3c4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c3c4:	57                   	push   edi
c000c3c5:	56                   	push   esi
c000c3c6:	53                   	push   ebx
c000c3c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c3cb:	8b 06                	mov    eax,DWORD PTR [esi]
c000c3cd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c3d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3d8:	e8 c2 fe ff ff       	call   c000c29f <datetimeToSeconds(datetime_t)>
c000c3dd:	59                   	pop    ecx
c000c3de:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c3e5:	5b                   	pop    ebx
c000c3e6:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c3ec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c3f2:	89 cb                	mov    ebx,ecx
c000c3f4:	c1 fb 1f             	sar    ebx,0x1f
c000c3f7:	29 c8                	sub    eax,ecx
c000c3f9:	19 da                	sbb    edx,ebx
c000c3fb:	31 c9                	xor    ecx,ecx
c000c3fd:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c404:	74 05                	je     c000c40b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c406:	b9 08 07 00 00       	mov    ecx,0x708
c000c40b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c40f:	31 db                	xor    ebx,ebx
c000c411:	29 c8                	sub    eax,ecx
c000c413:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c417:	19 da                	sbb    edx,ebx
c000c419:	89 f8                	mov    eax,edi
c000c41b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c41f:	5b                   	pop    ebx
c000c420:	5e                   	pop    esi
c000c421:	5f                   	pop    edi
c000c422:	ff e0                	jmp    eax

c000c424 <secondsToDatetime(unsigned long long)>:
c000c424:	55                   	push   ebp
c000c425:	57                   	push   edi
c000c426:	56                   	push   esi
c000c427:	53                   	push   ebx
c000c428:	83 ec 1c             	sub    esp,0x1c
c000c42b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c42f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c433:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c437:	6a 00                	push   0x0
c000c439:	68 80 51 01 00       	push   0x15180
c000c43e:	55                   	push   ebp
c000c43f:	57                   	push   edi
c000c440:	e8 cb 2d 01 00       	call   c001f210 <__udivdi3>
c000c445:	83 c4 10             	add    esp,0x10
c000c448:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c44c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c452:	6a 00                	push   0x0
c000c454:	68 80 51 01 00       	push   0x15180
c000c459:	55                   	push   ebp
c000c45a:	57                   	push   edi
c000c45b:	bf 10 0e 00 00       	mov    edi,0xe10
c000c460:	e8 ab 2e 01 00       	call   c001f310 <__umoddi3>
c000c465:	83 c4 10             	add    esp,0x10
c000c468:	99                   	cdq    
c000c469:	f7 ff                	idiv   edi
c000c46b:	bf 3c 00 00 00       	mov    edi,0x3c
c000c470:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c473:	89 d0                	mov    eax,edx
c000c475:	99                   	cdq    
c000c476:	f7 ff                	idiv   edi
c000c478:	85 db                	test   ebx,ebx
c000c47a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c47d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c480:	79 11                	jns    c000c493 <secondsToDatetime(unsigned long long)+0x6f>
c000c482:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c486:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c48c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c491:	eb 07                	jmp    c000c49a <secondsToDatetime(unsigned long long)+0x76>
c000c493:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c498:	89 d8                	mov    eax,ebx
c000c49a:	99                   	cdq    
c000c49b:	bf b4 05 00 00       	mov    edi,0x5b4
c000c4a0:	f7 f9                	idiv   ecx
c000c4a2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c4a7:	31 d2                	xor    edx,edx
c000c4a9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c4ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4b2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c4ba:	01 c3                	add    ebx,eax
c000c4bc:	89 d8                	mov    eax,ebx
c000c4be:	f7 f1                	div    ecx
c000c4c0:	31 d2                	xor    edx,edx
c000c4c2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c4c5:	89 d8                	mov    eax,ebx
c000c4c7:	f7 f7                	div    edi
c000c4c9:	31 d2                	xor    edx,edx
c000c4cb:	29 c1                	sub    ecx,eax
c000c4cd:	89 d8                	mov    eax,ebx
c000c4cf:	f7 f5                	div    ebp
c000c4d1:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c4d6:	31 d2                	xor    edx,edx
c000c4d8:	29 c1                	sub    ecx,eax
c000c4da:	89 c8                	mov    eax,ecx
c000c4dc:	f7 f5                	div    ebp
c000c4de:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c4e3:	31 d2                	xor    edx,edx
c000c4e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4e9:	89 c8                	mov    eax,ecx
c000c4eb:	f7 f5                	div    ebp
c000c4ed:	31 d2                	xor    edx,edx
c000c4ef:	01 c3                	add    ebx,eax
c000c4f1:	89 c8                	mov    eax,ecx
c000c4f3:	f7 f7                	div    edi
c000c4f5:	bf 99 00 00 00       	mov    edi,0x99
c000c4fa:	31 d2                	xor    edx,edx
c000c4fc:	29 c3                	sub    ebx,eax
c000c4fe:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c506:	29 c3                	sub    ebx,eax
c000c508:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c50b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c50e:	83 c1 02             	add    ecx,0x2
c000c511:	89 c8                	mov    eax,ecx
c000c513:	bb 05 00 00 00       	mov    ebx,0x5
c000c518:	f7 f7                	div    edi
c000c51a:	31 d2                	xor    edx,edx
c000c51c:	89 c7                	mov    edi,eax
c000c51e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c524:	83 c0 02             	add    eax,0x2
c000c527:	f7 f3                	div    ebx
c000c529:	89 eb                	mov    ebx,ebp
c000c52b:	29 c3                	sub    ebx,eax
c000c52d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c533:	88 1e                	mov    BYTE PTR [esi],bl
c000c535:	19 c0                	sbb    eax,eax
c000c537:	31 d2                	xor    edx,edx
c000c539:	83 e0 0c             	and    eax,0xc
c000c53c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c540:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c548:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c54c:	83 f9 01             	cmp    ecx,0x1
c000c54f:	0f 96 c2             	setbe  dl
c000c552:	41                   	inc    ecx
c000c553:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c556:	01 d0                	add    eax,edx
c000c558:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c55c:	83 c4 1c             	add    esp,0x1c
c000c55f:	89 f0                	mov    eax,esi
c000c561:	5b                   	pop    ebx
c000c562:	5e                   	pop    esi
c000c563:	5f                   	pop    edi
c000c564:	5d                   	pop    ebp
c000c565:	c2 04 00             	ret    0x4

c000c568 <Clock::timeInDatetimeLocal()>:
c000c568:	53                   	push   ebx
c000c569:	83 ec 14             	sub    esp,0x14
c000c56c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c574:	e8 85 fc ff ff       	call   c000c1fe <Clock::timeInSecondsLocal()>
c000c579:	83 c4 0c             	add    esp,0xc
c000c57c:	52                   	push   edx
c000c57d:	50                   	push   eax
c000c57e:	53                   	push   ebx
c000c57f:	e8 a0 fe ff ff       	call   c000c424 <secondsToDatetime(unsigned long long)>
c000c584:	89 d8                	mov    eax,ebx
c000c586:	83 c4 14             	add    esp,0x14
c000c589:	5b                   	pop    ebx
c000c58a:	c2 04 00             	ret    0x4
c000c58d:	90                   	nop

c000c58e <Device::hibernate()>:
c000c58e:	c3                   	ret    
c000c58f:	90                   	nop

c000c590 <Device::wake()>:
c000c590:	c3                   	ret    
c000c591:	90                   	nop

c000c592 <Device::detect()>:
c000c592:	c3                   	ret    
c000c593:	90                   	nop

c000c594 <Device::disableLegacy()>:
c000c594:	c3                   	ret    
c000c595:	90                   	nop

c000c596 <Device::powerSaving(PowerSavingLevel)>:
c000c596:	c3                   	ret    
c000c597:	90                   	nop

c000c598 <DriverlessDevice::close(int, int, void*)>:
c000c598:	31 c0                	xor    eax,eax
c000c59a:	c3                   	ret    
c000c59b:	90                   	nop

c000c59c <DriverlessDevice::detect()>:
c000c59c:	c3                   	ret    
c000c59d:	90                   	nop

c000c59e <DriverlessDevice::open(int, int, void*)>:
c000c59e:	83 ec 18             	sub    esp,0x18
c000c5a1:	68 b0 14 02 c0       	push   0xc00214b0
c000c5a6:	e8 a2 4c 00 00       	call   c001124d <KePanic(char const*)>
c000c5ab:	83 c8 ff             	or     eax,0xffffffff
c000c5ae:	83 c4 1c             	add    esp,0x1c
c000c5b1:	c3                   	ret    

c000c5b2 <Device::~Device()>:
c000c5b2:	ba 10 15 02 c0       	mov    edx,0xc0021510
c000c5b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5bb:	89 10                	mov    DWORD PTR [eax],edx
c000c5bd:	90                   	nop
c000c5be:	c3                   	ret    
c000c5bf:	90                   	nop

c000c5c0 <Device::~Device()>:
c000c5c0:	83 ec 0c             	sub    esp,0xc
c000c5c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c5c7:	e8 e6 ff ff ff       	call   c000c5b2 <Device::~Device()>
c000c5cc:	83 c4 04             	add    esp,0x4
c000c5cf:	83 ec 08             	sub    esp,0x8
c000c5d2:	68 58 01 00 00       	push   0x158
c000c5d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5db:	e8 2c e2 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000c5e0:	83 c4 10             	add    esp,0x10
c000c5e3:	83 c4 0c             	add    esp,0xc
c000c5e6:	c3                   	ret    
c000c5e7:	90                   	nop

c000c5e8 <Device::findAndLoadDriver()>:
c000c5e8:	c7 44 24 04 ce 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214ce
c000c5f0:	e9 15 e3 ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c000c5f5:	90                   	nop

c000c5f6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c5f6:	57                   	push   edi
c000c5f7:	b9 09 00 00 00       	mov    ecx,0x9
c000c5fc:	56                   	push   esi
c000c5fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c601:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c605:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c60f:	81 c7 18 01 00 00    	add    edi,0x118
c000c615:	fc                   	cld    
c000c616:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c618:	5e                   	pop    esi
c000c619:	5f                   	pop    edi
c000c61a:	c3                   	ret    
c000c61b:	90                   	nop

c000c61c <Device::preOpenACPI(void*, char*, char*)>:
c000c61c:	57                   	push   edi
c000c61d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c622:	56                   	push   esi
c000c623:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c62b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c62f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c639:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c63f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c645:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c647:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c64d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c651:	b9 0e 00 00 00       	mov    ecx,0xe
c000c656:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c658:	5e                   	pop    esi
c000c659:	5f                   	pop    edi
c000c65a:	c3                   	ret    
c000c65b:	90                   	nop

c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c65c:	53                   	push   ebx
c000c65d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c661:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c665:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c669:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c66d:	0f b6 c0             	movzx  eax,al
c000c670:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c674:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c678:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c67c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c680:	5b                   	pop    ebx
c000c681:	e9 aa 05 00 00       	jmp    c000cc30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c686 <Device::getParent()>:
c000c686:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c68a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c690:	c3                   	ret    
c000c691:	90                   	nop

c000c692 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c692:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c69a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c69f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6ab:	e9 f7 06 00 00       	jmp    c000cda7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c6b0 <Device::addChild(Device*)>:
c000c6b0:	53                   	push   ebx
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6bc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c6c2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c6c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c6ca:	85 d2                	test   edx,edx
c000c6cc:	74 04                	je     c000c6d2 <Device::addChild(Device*)+0x22>
c000c6ce:	89 d3                	mov    ebx,edx
c000c6d0:	eb f6                	jmp    c000c6c8 <Device::addChild(Device*)+0x18>
c000c6d2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c6d5:	83 ec 0c             	sub    esp,0xc
c000c6d8:	6a 08                	push   0x8
c000c6da:	e8 f4 b3 ff ff       	call   c0007ad3 <malloc>
c000c6df:	89 03                	mov    DWORD PTR [ebx],eax
c000c6e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6ee:	83 c4 18             	add    esp,0x18
c000c6f1:	5b                   	pop    ebx
c000c6f2:	c3                   	ret    
c000c6f3:	90                   	nop

c000c6f4 <Device::removeAllChildren()>:
c000c6f4:	56                   	push   esi
c000c6f5:	53                   	push   ebx
c000c6f6:	52                   	push   edx
c000c6f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6fb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c701:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c704:	74 17                	je     c000c71d <Device::removeAllChildren()+0x29>
c000c706:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c709:	85 c0                	test   eax,eax
c000c70b:	74 0c                	je     c000c719 <Device::removeAllChildren()+0x25>
c000c70d:	8b 10                	mov    edx,DWORD PTR [eax]
c000c70f:	83 ec 0c             	sub    esp,0xc
c000c712:	50                   	push   eax
c000c713:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c716:	83 c4 10             	add    esp,0x10
c000c719:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c71b:	eb e4                	jmp    c000c701 <Device::removeAllChildren()+0xd>
c000c71d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c723:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c729:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c72f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c736:	58                   	pop    eax
c000c737:	5b                   	pop    ebx
c000c738:	5e                   	pop    esi
c000c739:	c3                   	ret    

c000c73a <Device::hibernateAll()>:
c000c73a:	53                   	push   ebx
c000c73b:	83 ec 14             	sub    esp,0x14
c000c73e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c742:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c744:	53                   	push   ebx
c000c745:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c748:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c74e:	83 c4 10             	add    esp,0x10
c000c751:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c754:	74 0f                	je     c000c765 <Device::hibernateAll()+0x2b>
c000c756:	83 ec 0c             	sub    esp,0xc
c000c759:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c75c:	e8 d9 ff ff ff       	call   c000c73a <Device::hibernateAll()>
c000c761:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c763:	eb e9                	jmp    c000c74e <Device::hibernateAll()+0x14>
c000c765:	83 c4 08             	add    esp,0x8
c000c768:	5b                   	pop    ebx
c000c769:	c3                   	ret    

c000c76a <Device::wakeAll()>:
c000c76a:	53                   	push   ebx
c000c76b:	83 ec 14             	sub    esp,0x14
c000c76e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c772:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c774:	53                   	push   ebx
c000c775:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c778:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c784:	74 0f                	je     c000c795 <Device::wakeAll()+0x2b>
c000c786:	83 ec 0c             	sub    esp,0xc
c000c789:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c78c:	e8 d9 ff ff ff       	call   c000c76a <Device::wakeAll()>
c000c791:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c793:	eb e9                	jmp    c000c77e <Device::wakeAll()+0x14>
c000c795:	83 c4 08             	add    esp,0x8
c000c798:	5b                   	pop    ebx
c000c799:	c3                   	ret    

c000c79a <Device::detectAll()>:
c000c79a:	53                   	push   ebx
c000c79b:	83 ec 14             	sub    esp,0x14
c000c79e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7a4:	53                   	push   ebx
c000c7a5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c7a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7ae:	83 c4 10             	add    esp,0x10
c000c7b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7b4:	74 0f                	je     c000c7c5 <Device::detectAll()+0x2b>
c000c7b6:	83 ec 0c             	sub    esp,0xc
c000c7b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7bc:	e8 d9 ff ff ff       	call   c000c79a <Device::detectAll()>
c000c7c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7c3:	eb e9                	jmp    c000c7ae <Device::detectAll()+0x14>
c000c7c5:	83 c4 08             	add    esp,0x8
c000c7c8:	5b                   	pop    ebx
c000c7c9:	c3                   	ret    

c000c7ca <Device::disableLegacyAll()>:
c000c7ca:	c3                   	ret    
c000c7cb:	90                   	nop

c000c7cc <Device::loadDriversForAll()>:
c000c7cc:	c3                   	ret    
c000c7cd:	90                   	nop

c000c7ce <Device::closeAll()>:
c000c7ce:	53                   	push   ebx
c000c7cf:	83 ec 08             	sub    esp,0x8
c000c7d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c7d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7d8:	6a 00                	push   0x0
c000c7da:	6a 00                	push   0x0
c000c7dc:	6a 00                	push   0x0
c000c7de:	53                   	push   ebx
c000c7df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c7e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7e8:	83 c4 10             	add    esp,0x10
c000c7eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7ee:	74 0f                	je     c000c7ff <Device::closeAll()+0x31>
c000c7f0:	83 ec 0c             	sub    esp,0xc
c000c7f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7f6:	e8 d3 ff ff ff       	call   c000c7ce <Device::closeAll()>
c000c7fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7fd:	eb e9                	jmp    c000c7e8 <Device::closeAll()+0x1a>
c000c7ff:	83 c4 08             	add    esp,0x8
c000c802:	5b                   	pop    ebx
c000c803:	c3                   	ret    

c000c804 <Device::powerSavingAll(PowerSavingLevel)>:
c000c804:	56                   	push   esi
c000c805:	53                   	push   ebx
c000c806:	83 ec 0c             	sub    esp,0xc
c000c809:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c80d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c811:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c813:	56                   	push   esi
c000c814:	53                   	push   ebx
c000c815:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c818:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c81e:	83 c4 10             	add    esp,0x10
c000c821:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c824:	74 0f                	je     c000c835 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c826:	52                   	push   edx
c000c827:	52                   	push   edx
c000c828:	56                   	push   esi
c000c829:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c82c:	e8 d3 ff ff ff       	call   c000c804 <Device::powerSavingAll(PowerSavingLevel)>
c000c831:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c833:	eb e9                	jmp    c000c81e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c835:	58                   	pop    eax
c000c836:	5b                   	pop    ebx
c000c837:	5e                   	pop    esi
c000c838:	c3                   	ret    
c000c839:	90                   	nop

c000c83a <Device::setName(char const*)>:
c000c83a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c842:	e9 09 3e ff ff       	jmp    c0000650 <strcpy>
c000c847:	90                   	nop

c000c848 <Device::Device(char const*)>:
c000c848:	83 ec 1c             	sub    esp,0x1c
c000c84b:	ba 10 15 02 c0       	mov    edx,0xc0021510
c000c850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c854:	89 10                	mov    DWORD PTR [eax],edx
c000c856:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c85a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c868:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c876:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c884:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c88e:	83 ec 08             	sub    esp,0x8
c000c891:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c899:	e8 9c ff ff ff       	call   c000c83a <Device::setName(char const*)>
c000c89e:	83 c4 10             	add    esp,0x10
c000c8a1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c8a9:	83 ec 0c             	sub    esp,0xc
c000c8ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8b0:	e8 1e b2 ff ff       	call   c0007ad3 <malloc>
c000c8b5:	83 c4 10             	add    esp,0x10
c000c8b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c8be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c8c9:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8d3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c8d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c8df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e3:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c8e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c8fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ff:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c90a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c918:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c922:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c926:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c934:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c93e:	90                   	nop
c000c93f:	83 c4 1c             	add    esp,0x1c
c000c942:	c3                   	ret    
c000c943:	90                   	nop

c000c944 <Device::getName()>:
c000c944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c948:	05 d0 00 00 00       	add    eax,0xd0
c000c94d:	c3                   	ret    

c000c94e <DriverlessDevice::DriverlessDevice(char const*)>:
c000c94e:	83 ec 0c             	sub    esp,0xc
c000c951:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c955:	83 ec 08             	sub    esp,0x8
c000c958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c95c:	50                   	push   eax
c000c95d:	e8 e6 fe ff ff       	call   c000c848 <Device::Device(char const*)>
c000c962:	83 c4 10             	add    esp,0x10
c000c965:	ba 3c 15 02 c0       	mov    edx,0xc002153c
c000c96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96e:	89 10                	mov    DWORD PTR [eax],edx
c000c970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c974:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c97e:	90                   	nop
c000c97f:	83 c4 0c             	add    esp,0xc
c000c982:	c3                   	ret    
c000c983:	90                   	nop

c000c984 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c984:	57                   	push   edi
c000c985:	56                   	push   esi
c000c986:	53                   	push   ebx
c000c987:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c98b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c98f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c993:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c999:	75 0c                	jne    c000c9a7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c99b:	52                   	push   edx
c000c99c:	52                   	push   edx
c000c99d:	53                   	push   ebx
c000c99e:	56                   	push   esi
c000c99f:	e8 1e 2d 01 00       	call   c001f6c2 <LinkedList<Device>::addElement(Device*)>
c000c9a4:	83 c4 10             	add    esp,0x10
c000c9a7:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c9ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9b0:	74 12                	je     c000c9c4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c9b2:	50                   	push   eax
c000c9b3:	57                   	push   edi
c000c9b4:	56                   	push   esi
c000c9b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c9b8:	e8 c7 ff ff ff       	call   c000c984 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c9bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9bf:	83 c4 10             	add    esp,0x10
c000c9c2:	eb e9                	jmp    c000c9ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c9c4:	5b                   	pop    ebx
c000c9c5:	5e                   	pop    esi
c000c9c6:	5f                   	pop    edi
c000c9c7:	c3                   	ret    

c000c9c8 <getDevicesOfType(DeviceType)>:
c000c9c8:	53                   	push   ebx
c000c9c9:	83 ec 14             	sub    esp,0x14
c000c9cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c9d0:	53                   	push   ebx
c000c9d1:	e8 c8 2d 01 00       	call   c001f79e <LinkedList<Device>::LinkedList()>
c000c9d6:	83 c4 0c             	add    esp,0xc
c000c9d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c9dd:	53                   	push   ebx
c000c9de:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c9e4:	e8 9b ff ff ff       	call   c000c984 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c9e9:	83 c4 18             	add    esp,0x18
c000c9ec:	89 d8                	mov    eax,ebx
c000c9ee:	5b                   	pop    ebx
c000c9ef:	c2 04 00             	ret    0x4
c000c9f2:	66 90                	xchg   ax,ax

c000c9f4 <HardDiskController::HardDiskController(char const*)>:
c000c9f4:	83 ec 0c             	sub    esp,0xc
c000c9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9fb:	83 ec 08             	sub    esp,0x8
c000c9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca02:	50                   	push   eax
c000ca03:	e8 40 fe ff ff       	call   c000c848 <Device::Device(char const*)>
c000ca08:	83 c4 10             	add    esp,0x10
c000ca0b:	ba 68 15 02 c0       	mov    edx,0xc0021568
c000ca10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca14:	89 10                	mov    DWORD PTR [eax],edx
c000ca16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca24:	90                   	nop
c000ca25:	83 c4 0c             	add    esp,0xc
c000ca28:	c3                   	ret    
c000ca29:	90                   	nop
c000ca2a:	66 90                	xchg   ax,ax

c000ca2c <HardDiskController::~HardDiskController()>:
c000ca2c:	83 ec 0c             	sub    esp,0xc
c000ca2f:	ba 68 15 02 c0       	mov    edx,0xc0021568
c000ca34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca38:	89 10                	mov    DWORD PTR [eax],edx
c000ca3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3e:	83 ec 0c             	sub    esp,0xc
c000ca41:	50                   	push   eax
c000ca42:	e8 6b fb ff ff       	call   c000c5b2 <Device::~Device()>
c000ca47:	83 c4 10             	add    esp,0x10
c000ca4a:	90                   	nop
c000ca4b:	83 c4 0c             	add    esp,0xc
c000ca4e:	c3                   	ret    
c000ca4f:	90                   	nop

c000ca50 <HardDiskController::~HardDiskController()>:
c000ca50:	83 ec 0c             	sub    esp,0xc
c000ca53:	83 ec 0c             	sub    esp,0xc
c000ca56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca5a:	e8 cd ff ff ff       	call   c000ca2c <HardDiskController::~HardDiskController()>
c000ca5f:	83 c4 10             	add    esp,0x10
c000ca62:	83 ec 08             	sub    esp,0x8
c000ca65:	68 58 01 00 00       	push   0x158
c000ca6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca6e:	e8 99 dd ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000ca73:	83 c4 10             	add    esp,0x10
c000ca76:	83 c4 0c             	add    esp,0xc
c000ca79:	c3                   	ret    

c000ca7a <PhysicalDisk::eject()>:
c000ca7a:	83 c8 ff             	or     eax,0xffffffff
c000ca7d:	c3                   	ret    

c000ca7e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ca7e:	83 ec 0c             	sub    esp,0xc
c000ca81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca85:	83 ec 08             	sub    esp,0x8
c000ca88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8c:	50                   	push   eax
c000ca8d:	e8 b6 fd ff ff       	call   c000c848 <Device::Device(char const*)>
c000ca92:	83 c4 10             	add    esp,0x10
c000ca95:	ba 94 15 02 c0       	mov    edx,0xc0021594
c000ca9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca9e:	89 10                	mov    DWORD PTR [eax],edx
c000caa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caa4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000caab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caaf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caba:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cacc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000cae0:	90                   	nop
c000cae1:	83 c4 0c             	add    esp,0xc
c000cae4:	c3                   	ret    
c000cae5:	90                   	nop

c000cae6 <PhysicalDisk::startCache()>:
c000cae6:	56                   	push   esi
c000cae7:	53                   	push   ebx
c000cae8:	83 ec 10             	sub    esp,0x10
c000caeb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caef:	6a 44                	push   0x44
c000caf1:	e8 dd af ff ff       	call   c0007ad3 <malloc>
c000caf6:	89 c6                	mov    esi,eax
c000caf8:	58                   	pop    eax
c000caf9:	5a                   	pop    edx
c000cafa:	53                   	push   ebx
c000cafb:	56                   	push   esi
c000cafc:	e8 83 17 00 00       	call   c000e284 <VCache::VCache(PhysicalDisk*)>
c000cb01:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb07:	83 c4 14             	add    esp,0x14
c000cb0a:	5b                   	pop    ebx
c000cb0b:	5e                   	pop    esi
c000cb0c:	c3                   	ret    
c000cb0d:	90                   	nop

c000cb0e <PhysicalDisk::~PhysicalDisk()>:
c000cb0e:	83 ec 0c             	sub    esp,0xc
c000cb11:	ba 94 15 02 c0       	mov    edx,0xc0021594
c000cb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1a:	89 10                	mov    DWORD PTR [eax],edx
c000cb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb20:	83 ec 0c             	sub    esp,0xc
c000cb23:	50                   	push   eax
c000cb24:	e8 89 fa ff ff       	call   c000c5b2 <Device::~Device()>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	90                   	nop
c000cb2d:	83 c4 0c             	add    esp,0xc
c000cb30:	c3                   	ret    
c000cb31:	90                   	nop

c000cb32 <PhysicalDisk::~PhysicalDisk()>:
c000cb32:	83 ec 0c             	sub    esp,0xc
c000cb35:	83 ec 0c             	sub    esp,0xc
c000cb38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb3c:	e8 cd ff ff ff       	call   c000cb0e <PhysicalDisk::~PhysicalDisk()>
c000cb41:	83 c4 10             	add    esp,0x10
c000cb44:	83 ec 08             	sub    esp,0x8
c000cb47:	68 6c 01 00 00       	push   0x16c
c000cb4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb50:	e8 b7 dc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	83 c4 0c             	add    esp,0xc
c000cb5b:	c3                   	ret    

c000cb5c <int_handler>:
c000cb5c:	55                   	push   ebp
c000cb5d:	57                   	push   edi
c000cb5e:	56                   	push   esi
c000cb5f:	53                   	push   ebx
c000cb60:	83 ec 0c             	sub    esp,0xc
c000cb63:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb6a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cb6e:	74 0b                	je     c000cb7b <int_handler+0x1f>
c000cb70:	fa                   	cli    
c000cb71:	f4                   	hlt    
c000cb72:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb79:	75 f5                	jne    c000cb70 <int_handler+0x14>
c000cb7b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cb7e:	8d 46 e0             	lea    eax,[esi-0x20]
c000cb81:	83 f8 17             	cmp    eax,0x17
c000cb84:	76 40                	jbe    c000cbc6 <int_handler+0x6a>
c000cb86:	c1 e6 04             	shl    esi,0x4
c000cb89:	31 db                	xor    ebx,ebx
c000cb8b:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cb91:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cb97:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cb9b:	85 c0                	test   eax,eax
c000cb9d:	74 13                	je     c000cbb2 <int_handler+0x56>
c000cb9f:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cba3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cba6:	74 2c                	je     c000cbd4 <int_handler+0x78>
c000cba8:	83 ec 08             	sub    esp,0x8
c000cbab:	52                   	push   edx
c000cbac:	57                   	push   edi
c000cbad:	ff d0                	call   eax
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	83 c3 01             	add    ebx,0x1
c000cbb5:	83 fb 04             	cmp    ebx,0x4
c000cbb8:	75 dd                	jne    c000cb97 <int_handler+0x3b>
c000cbba:	83 c4 0c             	add    esp,0xc
c000cbbd:	31 c0                	xor    eax,eax
c000cbbf:	5b                   	pop    ebx
c000cbc0:	31 d2                	xor    edx,edx
c000cbc2:	5e                   	pop    esi
c000cbc3:	5f                   	pop    edi
c000cbc4:	5d                   	pop    ebp
c000cbc5:	c3                   	ret    
c000cbc6:	83 ec 0c             	sub    esp,0xc
c000cbc9:	50                   	push   eax
c000cbca:	e8 33 b2 00 00       	call   c0017e02 <HalEndOfInterrupt(int)>
c000cbcf:	83 c4 10             	add    esp,0x10
c000cbd2:	eb b2                	jmp    c000cb86 <int_handler+0x2a>
c000cbd4:	83 ec 08             	sub    esp,0x8
c000cbd7:	52                   	push   edx
c000cbd8:	57                   	push   edi
c000cbd9:	ff d0                	call   eax
c000cbdb:	83 c4 10             	add    esp,0x10
c000cbde:	83 c4 0c             	add    esp,0xc
c000cbe1:	5b                   	pop    ebx
c000cbe2:	5e                   	pop    esi
c000cbe3:	5f                   	pop    edi
c000cbe4:	5d                   	pop    ebp
c000cbe5:	c3                   	ret    

c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cbe6:	56                   	push   esi
c000cbe7:	31 c0                	xor    eax,eax
c000cbe9:	53                   	push   ebx
c000cbea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cbee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cbf2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cbf6:	89 ca                	mov    edx,ecx
c000cbf8:	c1 e2 04             	shl    edx,0x4
c000cbfb:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc03:	74 17                	je     c000cc1c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc05:	83 c0 01             	add    eax,0x1
c000cc08:	83 f8 04             	cmp    eax,0x4
c000cc0b:	75 ee                	jne    c000cbfb <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc0d:	c7 44 24 0c c4 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc00215c4
c000cc15:	5b                   	pop    ebx
c000cc16:	5e                   	pop    esi
c000cc17:	e9 31 46 00 00       	jmp    c001124d <KePanic(char const*)>
c000cc1c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc1f:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc26:	5b                   	pop    ebx
c000cc27:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cc2e:	5e                   	pop    esi
c000cc2f:	c3                   	ret    

c000cc30 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cc30:	55                   	push   ebp
c000cc31:	57                   	push   edi
c000cc32:	56                   	push   esi
c000cc33:	53                   	push   ebx
c000cc34:	83 ec 0c             	sub    esp,0xc
c000cc37:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cc3d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc41:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc45:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cc4c:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc4f:	74 57                	je     c000cca8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc51:	84 c0                	test   al,al
c000cc53:	89 c7                	mov    edi,eax
c000cc55:	74 1d                	je     c000cc74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cc57:	83 fe 0f             	cmp    esi,0xf
c000cc5a:	0f 8f d9 00 00 00    	jg     c000cd39 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c000cc60:	0f b6 b6 c8 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcf38]
c000cc67:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cc6f:	d1 ef                	shr    edi,1
c000cc71:	83 e7 01             	and    edi,0x1
c000cc74:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc79:	83 ec 08             	sub    esp,0x8
c000cc7c:	31 db                	xor    ebx,ebx
c000cc7e:	50                   	push   eax
c000cc7f:	68 d1 15 02 c0       	push   0xc00215d1
c000cc84:	e8 81 dc ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000cc89:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	85 c0                	test   eax,eax
c000cc93:	7f 59                	jg     c000ccee <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c000cc95:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cc98:	83 ec 0c             	sub    esp,0xc
c000cc9b:	68 e8 15 02 c0       	push   0xc00215e8
c000cca0:	e8 a8 45 00 00       	call   c001124d <KePanic(char const*)>
c000cca5:	83 c4 10             	add    esp,0x10
c000cca8:	89 e8                	mov    eax,ebp
c000ccaa:	31 d2                	xor    edx,edx
c000ccac:	c1 e0 04             	shl    eax,0x4
c000ccaf:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000ccb6:	85 c9                	test   ecx,ecx
c000ccb8:	0f 84 92 00 00 00    	je     c000cd50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c000ccbe:	83 c2 01             	add    edx,0x1
c000ccc1:	83 fa 04             	cmp    edx,0x4
c000ccc4:	75 e9                	jne    c000ccaf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000ccc6:	83 ec 0c             	sub    esp,0xc
c000ccc9:	68 3c 16 02 c0       	push   0xc002163c
c000ccce:	e8 7a 45 00 00       	call   c001124d <KePanic(char const*)>
c000ccd3:	83 c4 10             	add    esp,0x10
c000ccd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ccdb:	83 c4 0c             	add    esp,0xc
c000ccde:	5b                   	pop    ebx
c000ccdf:	5e                   	pop    esi
c000cce0:	5f                   	pop    edi
c000cce1:	5d                   	pop    ebp
c000cce2:	c3                   	ret    
c000cce3:	83 c3 01             	add    ebx,0x1
c000cce6:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000ccec:	7e a7                	jle    c000cc95 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000ccee:	8b 2c 9d e0 a0 02 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffd5f20]
c000ccf5:	83 ec 08             	sub    esp,0x8
c000ccf8:	56                   	push   esi
c000ccf9:	55                   	push   ebp
c000ccfa:	e8 ed 18 01 00       	call   c001e5ec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000ccff:	83 c4 10             	add    esp,0x10
c000cd02:	84 c0                	test   al,al
c000cd04:	74 dd                	je     c000cce3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cd06:	89 f8                	mov    eax,edi
c000cd08:	83 ec 04             	sub    esp,0x4
c000cd0b:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd12:	8d 6e 20             	lea    ebp,[esi+0x20]
c000cd15:	0f b6 f8             	movzx  edi,al
c000cd18:	57                   	push   edi
c000cd19:	89 e8                	mov    eax,ebp
c000cd1b:	6a 00                	push   0x0
c000cd1d:	0f b6 c0             	movzx  eax,al
c000cd20:	50                   	push   eax
c000cd21:	89 f0                	mov    eax,esi
c000cd23:	6a 00                	push   0x0
c000cd25:	0f b6 c0             	movzx  eax,al
c000cd28:	6a 00                	push   0x0
c000cd2a:	50                   	push   eax
c000cd2b:	53                   	push   ebx
c000cd2c:	e8 27 1a 01 00       	call   c001e758 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cd31:	83 c4 20             	add    esp,0x20
c000cd34:	e9 6f ff ff ff       	jmp    c000cca8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cd39:	83 ec 0c             	sub    esp,0xc
c000cd3c:	31 ff                	xor    edi,edi
c000cd3e:	68 04 16 02 c0       	push   0xc0021604
c000cd43:	e8 05 45 00 00       	call   c001124d <KePanic(char const*)>
c000cd48:	83 c4 10             	add    esp,0x10
c000cd4b:	e9 24 ff ff ff       	jmp    c000cc74 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000cd50:	8d 04 aa             	lea    eax,[edx+ebp*4]
c000cd53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cd57:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cd5e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cd62:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cd69:	83 c4 0c             	add    esp,0xc
c000cd6c:	89 f0                	mov    eax,esi
c000cd6e:	5b                   	pop    ebx
c000cd6f:	5e                   	pop    esi
c000cd70:	5f                   	pop    edi
c000cd71:	5d                   	pop    ebp
c000cd72:	c3                   	ret    

c000cd73 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cd73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd77:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd7b:	c1 e0 04             	shl    eax,0x4
c000cd7e:	8d 50 10             	lea    edx,[eax+0x10]
c000cd81:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cd87:	74 08                	je     c000cd91 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cd89:	83 c0 04             	add    eax,0x4
c000cd8c:	39 d0                	cmp    eax,edx
c000cd8e:	75 f1                	jne    c000cd81 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cd90:	c3                   	ret    
c000cd91:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd9b:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cda5:	eb e2                	jmp    c000cd89 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cda7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cda7:	56                   	push   esi
c000cda8:	53                   	push   ebx
c000cda9:	83 ec 04             	sub    esp,0x4
c000cdac:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cdb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cdb9:	74 0e                	je     c000cdc9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000cdbb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cdc0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cdc7:	75 34                	jne    c000cdfd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c000cdc9:	8d 43 20             	lea    eax,[ebx+0x20]
c000cdcc:	c1 e0 04             	shl    eax,0x4
c000cdcf:	8d 50 10             	lea    edx,[eax+0x10]
c000cdd2:	39 b0 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],esi
c000cdd8:	74 0d                	je     c000cde7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c000cdda:	83 c0 04             	add    eax,0x4
c000cddd:	39 d0                	cmp    eax,edx
c000cddf:	75 f1                	jne    c000cdd2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000cde1:	83 c4 04             	add    esp,0x4
c000cde4:	5b                   	pop    ebx
c000cde5:	5e                   	pop    esi
c000cde6:	c3                   	ret    
c000cde7:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdf1:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cdfb:	eb dd                	jmp    c000cdda <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c000cdfd:	83 fb 0f             	cmp    ebx,0xf
c000ce00:	7f 09                	jg     c000ce0b <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c000ce02:	0f b6 9b c8 30 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdcf38]
c000ce09:	eb be                	jmp    c000cdc9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c000ce0b:	83 ec 0c             	sub    esp,0xc
c000ce0e:	68 f5 15 02 c0       	push   0xc00215f5
c000ce13:	e8 35 44 00 00       	call   c001124d <KePanic(char const*)>
c000ce18:	83 c4 10             	add    esp,0x10
c000ce1b:	eb ac                	jmp    c000cdc9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c000ce1d <setupINTS()>:
c000ce1d:	31 c0                	xor    eax,eax
c000ce1f:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce29:	83 c0 10             	add    eax,0x10
c000ce2c:	c7 80 10 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bf0],0x0
c000ce36:	c7 80 14 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bec],0x0
c000ce40:	c7 80 14 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bec],0x0
c000ce4a:	c7 80 18 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be8],0x0
c000ce54:	c7 80 18 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be8],0x0
c000ce5e:	c7 80 1c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be4],0x0
c000ce68:	c7 80 1c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be4],0x0
c000ce72:	3d 00 10 00 00       	cmp    eax,0x1000
c000ce77:	75 a6                	jne    c000ce1f <setupINTS()+0x2>
c000ce79:	c3                   	ret    

c000ce7a <convertLegacyIRQNumber(int)>:
c000ce7a:	83 ec 0c             	sub    esp,0xc
c000ce7d:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ce83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce87:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ce8e:	74 0c                	je     c000ce9c <convertLegacyIRQNumber(int)+0x22>
c000ce90:	83 f8 0f             	cmp    eax,0xf
c000ce93:	7f 0b                	jg     c000cea0 <convertLegacyIRQNumber(int)+0x26>
c000ce95:	0f b6 80 c8 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcf38]
c000ce9c:	83 c4 0c             	add    esp,0xc
c000ce9f:	c3                   	ret    
c000cea0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cea4:	83 ec 0c             	sub    esp,0xc
c000cea7:	68 04 16 02 c0       	push   0xc0021604
c000ceac:	e8 9c 43 00 00       	call   c001124d <KePanic(char const*)>
c000ceb1:	83 c4 10             	add    esp,0x10
c000ceb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb8:	83 c4 0c             	add    esp,0xc
c000cebb:	c3                   	ret    

c000cebc <startGUI(void*)>:
c000cebc:	55                   	push   ebp
c000cebd:	89 e5                	mov    ebp,esp
c000cebf:	53                   	push   ebx
c000cec0:	83 ec 04             	sub    esp,0x4
c000cec3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cec8:	83 e8 01             	sub    eax,0x1
c000cecb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ced0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ced5:	85 c0                	test   eax,eax
c000ced7:	75 01                	jne    c000ceda <startGUI(void*)+0x1e>
c000ced9:	fb                   	sti    
c000ceda:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cee0:	83 ec 08             	sub    esp,0x8
c000cee3:	6a 01                	push   0x1
c000cee5:	68 61 16 02 c0       	push   0xc0021661
c000ceea:	e8 f5 81 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	83 ec 08             	sub    esp,0x8
c000cef5:	53                   	push   ebx
c000cef6:	50                   	push   eax
c000cef7:	e8 28 84 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf05:	83 ec 08             	sub    esp,0x8
c000cf08:	6a 01                	push   0x1
c000cf0a:	68 7b 16 02 c0       	push   0xc002167b
c000cf0f:	e8 d0 81 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000cf14:	83 c4 10             	add    esp,0x10
c000cf17:	83 ec 08             	sub    esp,0x8
c000cf1a:	53                   	push   ebx
c000cf1b:	50                   	push   eax
c000cf1c:	e8 03 84 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000cf21:	83 c4 10             	add    esp,0x10
c000cf24:	90                   	nop
c000cf25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf28:	c9                   	leave  
c000cf29:	c3                   	ret    

c000cf2a <startGUIVESA(void*)>:
c000cf2a:	55                   	push   ebp
c000cf2b:	89 e5                	mov    ebp,esp
c000cf2d:	53                   	push   ebx
c000cf2e:	83 ec 04             	sub    esp,0x4
c000cf31:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf36:	83 e8 01             	sub    eax,0x1
c000cf39:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf3e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf43:	85 c0                	test   eax,eax
c000cf45:	75 01                	jne    c000cf48 <startGUIVESA(void*)+0x1e>
c000cf47:	fb                   	sti    
c000cf48:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf4e:	83 ec 08             	sub    esp,0x8
c000cf51:	6a 01                	push   0x1
c000cf53:	68 99 16 02 c0       	push   0xc0021699
c000cf58:	e8 87 81 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000cf5d:	83 c4 10             	add    esp,0x10
c000cf60:	83 ec 08             	sub    esp,0x8
c000cf63:	53                   	push   ebx
c000cf64:	50                   	push   eax
c000cf65:	e8 ba 83 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf73:	83 ec 08             	sub    esp,0x8
c000cf76:	6a 01                	push   0x1
c000cf78:	68 7b 16 02 c0       	push   0xc002167b
c000cf7d:	e8 62 81 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000cf82:	83 c4 10             	add    esp,0x10
c000cf85:	83 ec 08             	sub    esp,0x8
c000cf88:	53                   	push   ebx
c000cf89:	50                   	push   eax
c000cf8a:	e8 95 83 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	90                   	nop
c000cf93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf96:	c9                   	leave  
c000cf97:	c3                   	ret    

c000cf98 <sendKeyToTerminal(unsigned char)>:
c000cf98:	55                   	push   ebp
c000cf99:	89 e5                	mov    ebp,esp
c000cf9b:	83 ec 28             	sub    esp,0x28
c000cf9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfa1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cfa4:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cfa9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cfad:	83 ec 08             	sub    esp,0x8
c000cfb0:	52                   	push   edx
c000cfb1:	50                   	push   eax
c000cfb2:	e8 05 be ff ff       	call   c0008dbc <VgaText::receiveKey(unsigned char)>
c000cfb7:	83 c4 10             	add    esp,0x10
c000cfba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cfbe:	83 f8 0a             	cmp    eax,0xa
c000cfc1:	74 16                	je     c000cfd9 <sendKeyToTerminal(unsigned char)+0x41>
c000cfc3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cfc7:	83 f8 03             	cmp    eax,0x3
c000cfca:	74 0d                	je     c000cfd9 <sendKeyToTerminal(unsigned char)+0x41>
c000cfcc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cfd0:	83 f8 1c             	cmp    eax,0x1c
c000cfd3:	0f 85 97 00 00 00    	jne    c000d070 <sendKeyToTerminal(unsigned char)+0xd8>
c000cfd9:	fa                   	cli    
c000cfda:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfdf:	83 c0 01             	add    eax,0x1
c000cfe2:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cfe7:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfec:	83 c0 01             	add    eax,0x1
c000cfef:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cff4:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cff9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cffc:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d006:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d00a:	74 1f                	je     c000d02b <sendKeyToTerminal(unsigned char)+0x93>
c000d00c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d00f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d012:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d015:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d018:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d01b:	83 ec 0c             	sub    esp,0xc
c000d01e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d021:	e8 22 90 00 00       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c000d026:	83 c4 10             	add    esp,0x10
c000d029:	eb db                	jmp    c000d006 <sendKeyToTerminal(unsigned char)+0x6e>
c000d02b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d030:	83 e8 01             	sub    eax,0x1
c000d033:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d038:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d03d:	85 c0                	test   eax,eax
c000d03f:	75 18                	jne    c000d059 <sendKeyToTerminal(unsigned char)+0xc1>
c000d041:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d046:	85 c0                	test   eax,eax
c000d048:	74 0f                	je     c000d059 <sendKeyToTerminal(unsigned char)+0xc1>
c000d04a:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d054:	e8 f7 8a 00 00       	call   c0015b50 <schedule()>
c000d059:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d05e:	83 e8 01             	sub    eax,0x1
c000d061:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d066:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d06b:	85 c0                	test   eax,eax
c000d06d:	75 01                	jne    c000d070 <sendKeyToTerminal(unsigned char)+0xd8>
c000d06f:	fb                   	sti    
c000d070:	90                   	nop
c000d071:	c9                   	leave  
c000d072:	c3                   	ret    

c000d073 <sendKeyboardToken(KeyboardToken)>:
c000d073:	55                   	push   ebp
c000d074:	89 e5                	mov    ebp,esp
c000d076:	83 ec 18             	sub    esp,0x18
c000d079:	e8 1f 42 00 00       	call   c001129d <KeUserIOReceived()>
c000d07e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d084:	0f b7 c0             	movzx  eax,ax
c000d087:	83 f2 01             	xor    edx,0x1
c000d08a:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d090:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d095:	85 c0                	test   eax,eax
c000d097:	74 24                	je     c000d0bd <sendKeyboardToken(KeyboardToken)+0x4a>
c000d099:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d09f:	83 ec 04             	sub    esp,0x4
c000d0a2:	68 40 84 02 c0       	push   0xc0028440
c000d0a7:	83 ec 08             	sub    esp,0x8
c000d0aa:	89 e0                	mov    eax,esp
c000d0ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c000d0af:	89 08                	mov    DWORD PTR [eax],ecx
c000d0b1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000d0b4:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d0b8:	ff d2                	call   edx
c000d0ba:	83 c4 10             	add    esp,0x10
c000d0bd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d0c1:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d0c4:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d0c9:	0f b6 d2             	movzx  edx,dl
c000d0cc:	0f b6 c0             	movzx  eax,al
c000d0cf:	39 c2                	cmp    edx,eax
c000d0d1:	74 1c                	je     c000d0ef <sendKeyboardToken(KeyboardToken)+0x7c>
c000d0d3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d0d6:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d0db:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d0e0:	0f b6 c0             	movzx  eax,al
c000d0e3:	83 ec 0c             	sub    esp,0xc
c000d0e6:	50                   	push   eax
c000d0e7:	e8 2c b4 ff ff       	call   c0008518 <setTerminalScrollLock(bool)>
c000d0ec:	83 c4 10             	add    esp,0x10
c000d0ef:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d0f2:	0f b6 c0             	movzx  eax,al
c000d0f5:	85 c0                	test   eax,eax
c000d0f7:	0f 84 da 00 00 00    	je     c000d1d7 <sendKeyboardToken(KeyboardToken)+0x164>
c000d0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d100:	0f b7 c0             	movzx  eax,ax
c000d103:	3d 18 03 00 00       	cmp    eax,0x318
c000d108:	75 06                	jne    c000d110 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d10a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d113:	0f b7 c0             	movzx  eax,ax
c000d116:	3d 19 03 00 00       	cmp    eax,0x319
c000d11b:	75 06                	jne    c000d123 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d11d:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d126:	0f b7 c0             	movzx  eax,ax
c000d129:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d12e:	75 06                	jne    c000d136 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d130:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d139:	0f b7 c0             	movzx  eax,ax
c000d13c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d141:	75 06                	jne    c000d149 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d143:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d14c:	0f b7 c0             	movzx  eax,ax
c000d14f:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d154:	75 06                	jne    c000d15c <sendKeyboardToken(KeyboardToken)+0xe9>
c000d156:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d15c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d15f:	0f b7 c0             	movzx  eax,ax
c000d162:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d167:	75 06                	jne    c000d16f <sendKeyboardToken(KeyboardToken)+0xfc>
c000d169:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d172:	0f b7 c0             	movzx  eax,ax
c000d175:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d17a:	75 06                	jne    c000d182 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d17c:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d185:	0f b7 c0             	movzx  eax,ax
c000d188:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d18d:	75 06                	jne    c000d195 <sendKeyboardToken(KeyboardToken)+0x122>
c000d18f:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d198:	0f b7 c0             	movzx  eax,ax
c000d19b:	3d 20 03 00 00       	cmp    eax,0x320
c000d1a0:	75 06                	jne    c000d1a8 <sendKeyboardToken(KeyboardToken)+0x135>
c000d1a2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d1a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ab:	0f b7 c0             	movzx  eax,ax
c000d1ae:	3d 21 03 00 00       	cmp    eax,0x321
c000d1b3:	75 06                	jne    c000d1bb <sendKeyboardToken(KeyboardToken)+0x148>
c000d1b5:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d1bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1be:	0f b7 c0             	movzx  eax,ax
c000d1c1:	3d 22 03 00 00       	cmp    eax,0x322
c000d1c6:	0f 85 f1 00 00 00    	jne    c000d2bd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1cc:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d1d2:	e9 e6 00 00 00       	jmp    c000d2bd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1da:	0f b7 c0             	movzx  eax,ax
c000d1dd:	3d 18 03 00 00       	cmp    eax,0x318
c000d1e2:	75 0a                	jne    c000d1ee <sendKeyboardToken(KeyboardToken)+0x17b>
c000d1e4:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f1:	0f b7 c0             	movzx  eax,ax
c000d1f4:	3d 19 03 00 00       	cmp    eax,0x319
c000d1f9:	75 0a                	jne    c000d205 <sendKeyboardToken(KeyboardToken)+0x192>
c000d1fb:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d208:	0f b7 c0             	movzx  eax,ax
c000d20b:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d210:	75 0a                	jne    c000d21c <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d212:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d21f:	0f b7 c0             	movzx  eax,ax
c000d222:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d227:	75 0a                	jne    c000d233 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d229:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d22f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d236:	0f b7 c0             	movzx  eax,ax
c000d239:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d23e:	75 0a                	jne    c000d24a <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d240:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d24a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d24d:	0f b7 c0             	movzx  eax,ax
c000d250:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d255:	75 0a                	jne    c000d261 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d257:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d25d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d264:	0f b7 c0             	movzx  eax,ax
c000d267:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d26c:	75 0a                	jne    c000d278 <sendKeyboardToken(KeyboardToken)+0x205>
c000d26e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d27b:	0f b7 c0             	movzx  eax,ax
c000d27e:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d283:	75 0a                	jne    c000d28f <sendKeyboardToken(KeyboardToken)+0x21c>
c000d285:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d28b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d28f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d292:	0f b7 c0             	movzx  eax,ax
c000d295:	3d 20 03 00 00       	cmp    eax,0x320
c000d29a:	75 0a                	jne    c000d2a6 <sendKeyboardToken(KeyboardToken)+0x233>
c000d29c:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d2a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2a9:	0f b7 c0             	movzx  eax,ax
c000d2ac:	3d 21 03 00 00       	cmp    eax,0x321
c000d2b1:	75 0a                	jne    c000d2bd <sendKeyboardToken(KeyboardToken)+0x24a>
c000d2b3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d2b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c0:	0f b7 c0             	movzx  eax,ax
c000d2c3:	3d 00 02 00 00       	cmp    eax,0x200
c000d2c8:	75 2f                	jne    c000d2f9 <sendKeyboardToken(KeyboardToken)+0x286>
c000d2ca:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d2cf:	83 f0 01             	xor    eax,0x1
c000d2d2:	0f b6 c0             	movzx  eax,al
c000d2d5:	85 c0                	test   eax,eax
c000d2d7:	74 20                	je     c000d2f9 <sendKeyboardToken(KeyboardToken)+0x286>
c000d2d9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d2de:	6a 01                	push   0x1
c000d2e0:	6a 00                	push   0x0
c000d2e2:	68 bc ce 00 c0       	push   0xc000cebc
c000d2e7:	50                   	push   eax
c000d2e8:	e8 17 86 00 00       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c000d2ed:	83 c4 10             	add    esp,0x10
c000d2f0:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d2f7:	eb 3a                	jmp    c000d333 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d2f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2fc:	0f b7 c0             	movzx  eax,ax
c000d2ff:	3d 01 02 00 00       	cmp    eax,0x201
c000d304:	75 2d                	jne    c000d333 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d306:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d30b:	83 f0 01             	xor    eax,0x1
c000d30e:	0f b6 c0             	movzx  eax,al
c000d311:	85 c0                	test   eax,eax
c000d313:	74 1e                	je     c000d333 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d315:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d31a:	6a 01                	push   0x1
c000d31c:	6a 00                	push   0x0
c000d31e:	68 2a cf 00 c0       	push   0xc000cf2a
c000d323:	50                   	push   eax
c000d324:	e8 db 85 00 00       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c000d329:	83 c4 10             	add    esp,0x10
c000d32c:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d336:	0f b7 c0             	movzx  eax,ax
c000d339:	3d 25 03 00 00       	cmp    eax,0x325
c000d33e:	75 06                	jne    c000d346 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d340:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d349:	0f b7 c0             	movzx  eax,ax
c000d34c:	3d 24 03 00 00       	cmp    eax,0x324
c000d351:	75 06                	jne    c000d359 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d353:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35c:	0f b7 c0             	movzx  eax,ax
c000d35f:	3d 23 03 00 00       	cmp    eax,0x323
c000d364:	75 06                	jne    c000d36c <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d366:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d36c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d36f:	0f b7 c0             	movzx  eax,ax
c000d372:	3d 26 03 00 00       	cmp    eax,0x326
c000d377:	75 06                	jne    c000d37f <sendKeyboardToken(KeyboardToken)+0x30c>
c000d379:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d37f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d382:	0f b7 c0             	movzx  eax,ax
c000d385:	3d 27 03 00 00       	cmp    eax,0x327
c000d38a:	75 06                	jne    c000d392 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d38c:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d395:	0f b7 c0             	movzx  eax,ax
c000d398:	3d 22 03 00 00       	cmp    eax,0x322
c000d39d:	75 06                	jne    c000d3a5 <sendKeyboardToken(KeyboardToken)+0x332>
c000d39f:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d3a5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d3a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3ac:	83 f0 01             	xor    eax,0x1
c000d3af:	0f b6 c0             	movzx  eax,al
c000d3b2:	85 c0                	test   eax,eax
c000d3b4:	74 7c                	je     c000d432 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d3b6:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d3bb:	0f b6 c0             	movzx  eax,al
c000d3be:	85 c0                	test   eax,eax
c000d3c0:	74 43                	je     c000d405 <sendKeyboardToken(KeyboardToken)+0x392>
c000d3c2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3c6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d3ca:	85 c0                	test   eax,eax
c000d3cc:	74 2b                	je     c000d3f9 <sendKeyboardToken(KeyboardToken)+0x386>
c000d3ce:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d3d4:	89 d0                	mov    eax,edx
c000d3d6:	c1 e0 02             	shl    eax,0x2
c000d3d9:	01 d0                	add    eax,edx
c000d3db:	d1 e0                	shl    eax,1
c000d3dd:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d3e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e5:	0f b7 c0             	movzx  eax,ax
c000d3e8:	8d 50 d0             	lea    edx,[eax-0x30]
c000d3eb:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3f0:	01 d0                	add    eax,edx
c000d3f2:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d3f7:	eb 71                	jmp    c000d46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3f9:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d403:	eb 65                	jmp    c000d46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d405:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d40a:	85 c0                	test   eax,eax
c000d40c:	74 18                	je     c000d426 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d40e:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d413:	0f b6 c0             	movzx  eax,al
c000d416:	83 ec 0c             	sub    esp,0xc
c000d419:	50                   	push   eax
c000d41a:	e8 79 fb ff ff       	call   c000cf98 <sendKeyToTerminal(unsigned char)>
c000d41f:	83 c4 10             	add    esp,0x10
c000d422:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d426:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d430:	eb 38                	jmp    c000d46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d435:	0f b7 c0             	movzx  eax,ax
c000d438:	3d 01 01 00 00       	cmp    eax,0x101
c000d43d:	75 2b                	jne    c000d46a <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d43f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d444:	85 c0                	test   eax,eax
c000d446:	74 18                	je     c000d460 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d448:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d44d:	0f b6 c0             	movzx  eax,al
c000d450:	83 ec 0c             	sub    esp,0xc
c000d453:	50                   	push   eax
c000d454:	e8 3f fb ff ff       	call   c000cf98 <sendKeyToTerminal(unsigned char)>
c000d459:	83 c4 10             	add    esp,0x10
c000d45c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d460:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d46a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d46d:	83 f0 01             	xor    eax,0x1
c000d470:	0f b6 c0             	movzx  eax,al
c000d473:	85 c0                	test   eax,eax
c000d475:	74 5a                	je     c000d4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d477:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d47a:	83 f0 01             	xor    eax,0x1
c000d47d:	0f b6 c0             	movzx  eax,al
c000d480:	85 c0                	test   eax,eax
c000d482:	74 4d                	je     c000d4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d484:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d489:	83 f0 01             	xor    eax,0x1
c000d48c:	0f b6 c0             	movzx  eax,al
c000d48f:	85 c0                	test   eax,eax
c000d491:	74 3e                	je     c000d4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d496:	0f b7 c0             	movzx  eax,ax
c000d499:	83 f8 1f             	cmp    eax,0x1f
c000d49c:	76 0b                	jbe    c000d4a9 <sendKeyboardToken(KeyboardToken)+0x436>
c000d49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a1:	0f b7 c0             	movzx  eax,ax
c000d4a4:	83 f8 7e             	cmp    eax,0x7e
c000d4a7:	76 16                	jbe    c000d4bf <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ac:	0f b7 c0             	movzx  eax,ax
c000d4af:	83 f8 0a             	cmp    eax,0xa
c000d4b2:	74 0b                	je     c000d4bf <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b7:	0f b7 c0             	movzx  eax,ax
c000d4ba:	83 f8 08             	cmp    eax,0x8
c000d4bd:	75 12                	jne    c000d4d1 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c2:	0f b6 c0             	movzx  eax,al
c000d4c5:	83 ec 0c             	sub    esp,0xc
c000d4c8:	50                   	push   eax
c000d4c9:	e8 ca fa ff ff       	call   c000cf98 <sendKeyToTerminal(unsigned char)>
c000d4ce:	83 c4 10             	add    esp,0x10
c000d4d1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4d4:	83 f0 01             	xor    eax,0x1
c000d4d7:	0f b6 c0             	movzx  eax,al
c000d4da:	85 c0                	test   eax,eax
c000d4dc:	74 5d                	je     c000d53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d4de:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4e1:	83 f0 01             	xor    eax,0x1
c000d4e4:	0f b6 c0             	movzx  eax,al
c000d4e7:	85 c0                	test   eax,eax
c000d4e9:	74 50                	je     c000d53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d4eb:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4f0:	0f b6 c0             	movzx  eax,al
c000d4f3:	85 c0                	test   eax,eax
c000d4f5:	74 44                	je     c000d53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d4f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4fa:	0f b7 c0             	movzx  eax,ax
c000d4fd:	83 f8 3f             	cmp    eax,0x3f
c000d500:	76 39                	jbe    c000d53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d505:	0f b7 c0             	movzx  eax,ax
c000d508:	83 f8 7f             	cmp    eax,0x7f
c000d50b:	77 2e                	ja     c000d53b <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d510:	88 c2                	mov    dl,al
c000d512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d515:	0f b7 c0             	movzx  eax,ax
c000d518:	83 f8 5f             	cmp    eax,0x5f
c000d51b:	76 04                	jbe    c000d521 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d51d:	b0 20                	mov    al,0x20
c000d51f:	eb 02                	jmp    c000d523 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d521:	b0 00                	mov    al,0x0
c000d523:	89 d1                	mov    ecx,edx
c000d525:	29 c1                	sub    ecx,eax
c000d527:	89 c8                	mov    eax,ecx
c000d529:	83 e8 40             	sub    eax,0x40
c000d52c:	0f b6 c0             	movzx  eax,al
c000d52f:	83 ec 0c             	sub    esp,0xc
c000d532:	50                   	push   eax
c000d533:	e8 60 fa ff ff       	call   c000cf98 <sendKeyToTerminal(unsigned char)>
c000d538:	83 c4 10             	add    esp,0x10
c000d53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d53e:	0f b7 c0             	movzx  eax,ax
c000d541:	3d 00 03 00 00       	cmp    eax,0x300
c000d546:	75 12                	jne    c000d55a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d548:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d54b:	83 f0 01             	xor    eax,0x1
c000d54e:	0f b6 c0             	movzx  eax,al
c000d551:	85 c0                	test   eax,eax
c000d553:	74 05                	je     c000d55a <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d555:	e8 bf af ff ff       	call   c0008519 <doTerminalCycle()>
c000d55a:	90                   	nop
c000d55b:	c9                   	leave  
c000d55c:	c3                   	ret    

c000d55d <clearInternalKeybuffer(VgaText*)>:
c000d55d:	55                   	push   ebp
c000d55e:	89 e5                	mov    ebp,esp
c000d560:	83 ec 08             	sub    esp,0x8
c000d563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d566:	05 02 01 00 00       	add    eax,0x102
c000d56b:	83 ec 0c             	sub    esp,0xc
c000d56e:	50                   	push   eax
c000d56f:	e8 0c 30 ff ff       	call   c0000580 <strlen>
c000d574:	83 c4 10             	add    esp,0x10
c000d577:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d57a:	81 c2 02 01 00 00    	add    edx,0x102
c000d580:	83 ec 04             	sub    esp,0x4
c000d583:	50                   	push   eax
c000d584:	6a 00                	push   0x0
c000d586:	52                   	push   edx
c000d587:	e8 64 2f ff ff       	call   c00004f0 <memset>
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	90                   	nop
c000d590:	c9                   	leave  
c000d591:	c3                   	ret    

c000d592 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d592:	55                   	push   ebp
c000d593:	89 e5                	mov    ebp,esp
c000d595:	83 ec 18             	sub    esp,0x18
c000d598:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d59d:	85 c0                	test   eax,eax
c000d59f:	74 2a                	je     c000d5cb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d5a1:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d5a7:	8b 15 28 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028428
c000d5ad:	83 ec 04             	sub    esp,0x4
c000d5b0:	68 40 84 02 c0       	push   0xc0028440
c000d5b5:	83 ec 08             	sub    esp,0x8
c000d5b8:	89 e0                	mov    eax,esp
c000d5ba:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c000d5bd:	89 08                	mov    DWORD PTR [eax],ecx
c000d5bf:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000d5c2:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c000d5c6:	ff d2                	call   edx
c000d5c8:	83 c4 10             	add    esp,0x10
c000d5cb:	fb                   	sti    
c000d5cc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d5d3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d5d7:	0f 84 0d 01 00 00    	je     c000d6ea <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5e0:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5e6:	0f be c0             	movsx  eax,al
c000d5e9:	85 c0                	test   eax,eax
c000d5eb:	75 2c                	jne    c000d619 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d5ed:	fa                   	cli    
c000d5ee:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d5f3:	83 c0 01             	add    eax,0x1
c000d5f6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d5fb:	e8 50 85 00 00       	call   c0015b50 <schedule()>
c000d600:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d605:	83 e8 01             	sub    eax,0x1
c000d608:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d60d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d612:	85 c0                	test   eax,eax
c000d614:	75 c7                	jne    c000d5dd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d616:	fb                   	sti    
c000d617:	eb c4                	jmp    c000d5dd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d619:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d61c:	8d 50 01             	lea    edx,[eax+0x1]
c000d61f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d622:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d625:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d62b:	88 10                	mov    BYTE PTR [eax],dl
c000d62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d630:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d636:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d639:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d63d:	83 f8 03             	cmp    eax,0x3
c000d640:	75 1e                	jne    c000d660 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d642:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d647:	8b 00                	mov    eax,DWORD PTR [eax]
c000d649:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d64c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d652:	83 ec 08             	sub    esp,0x8
c000d655:	6a 02                	push   0x2
c000d657:	50                   	push   eax
c000d658:	e8 8e 40 00 00       	call   c00116eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d65d:	83 c4 10             	add    esp,0x10
c000d660:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d664:	83 f8 1c             	cmp    eax,0x1c
c000d667:	75 1e                	jne    c000d687 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d669:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d66e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d673:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d679:	83 ec 08             	sub    esp,0x8
c000d67c:	6a 09                	push   0x9
c000d67e:	50                   	push   eax
c000d67f:	e8 67 40 00 00       	call   c00116eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000d684:	83 c4 10             	add    esp,0x10
c000d687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d68a:	05 02 01 00 00       	add    eax,0x102
c000d68f:	83 ec 0c             	sub    esp,0xc
c000d692:	50                   	push   eax
c000d693:	e8 e8 2e ff ff       	call   c0000580 <strlen>
c000d698:	83 c4 10             	add    esp,0x10
c000d69b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d69e:	81 c2 02 01 00 00    	add    edx,0x102
c000d6a4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d6a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6aa:	81 c2 02 01 00 00    	add    edx,0x102
c000d6b0:	83 ec 04             	sub    esp,0x4
c000d6b3:	50                   	push   eax
c000d6b4:	51                   	push   ecx
c000d6b5:	52                   	push   edx
c000d6b6:	e8 15 2d ff ff       	call   c00003d0 <memmove>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d6c2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d6c6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6ca:	83 f8 0a             	cmp    eax,0xa
c000d6cd:	74 16                	je     c000d6e5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d6cf:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d3:	83 f8 03             	cmp    eax,0x3
c000d6d6:	74 0d                	je     c000d6e5 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d6d8:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6dc:	83 f8 1c             	cmp    eax,0x1c
c000d6df:	0f 85 ee fe ff ff    	jne    c000d5d3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d6e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d6e8:	eb 03                	jmp    c000d6ed <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d6ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d6ed:	c9                   	leave  
c000d6ee:	c3                   	ret    
c000d6ef:	90                   	nop

c000d6f0 <Keyboard::Keyboard(char const*)>:
c000d6f0:	83 ec 0c             	sub    esp,0xc
c000d6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6f7:	83 ec 08             	sub    esp,0x8
c000d6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6fe:	50                   	push   eax
c000d6ff:	e8 44 f1 ff ff       	call   c000c848 <Device::Device(char const*)>
c000d704:	83 c4 10             	add    esp,0x10
c000d707:	ba bc 16 02 c0       	mov    edx,0xc00216bc
c000d70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d710:	89 10                	mov    DWORD PTR [eax],edx
c000d712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d716:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d720:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d727:	90                   	nop
c000d728:	83 c4 0c             	add    esp,0xc
c000d72b:	c3                   	ret    

c000d72c <Keyboard::~Keyboard()>:
c000d72c:	83 ec 0c             	sub    esp,0xc
c000d72f:	ba bc 16 02 c0       	mov    edx,0xc00216bc
c000d734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d738:	89 10                	mov    DWORD PTR [eax],edx
c000d73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73e:	83 ec 0c             	sub    esp,0xc
c000d741:	50                   	push   eax
c000d742:	e8 6b ee ff ff       	call   c000c5b2 <Device::~Device()>
c000d747:	83 c4 10             	add    esp,0x10
c000d74a:	90                   	nop
c000d74b:	83 c4 0c             	add    esp,0xc
c000d74e:	c3                   	ret    
c000d74f:	90                   	nop

c000d750 <Keyboard::~Keyboard()>:
c000d750:	83 ec 0c             	sub    esp,0xc
c000d753:	83 ec 0c             	sub    esp,0xc
c000d756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d75a:	e8 cd ff ff ff       	call   c000d72c <Keyboard::~Keyboard()>
c000d75f:	83 c4 10             	add    esp,0x10
c000d762:	83 ec 08             	sub    esp,0x8
c000d765:	68 5c 01 00 00       	push   0x15c
c000d76a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d76e:	e8 99 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	83 c4 0c             	add    esp,0xc
c000d779:	c3                   	ret    

c000d77a <LogicalDisk::close(int, int, void*)>:
c000d77a:	83 c8 ff             	or     eax,0xffffffff
c000d77d:	c3                   	ret    

c000d77e <LogicalDisk::~LogicalDisk()>:
c000d77e:	83 ec 0c             	sub    esp,0xc
c000d781:	ba 34 17 02 c0       	mov    edx,0xc0021734
c000d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78a:	89 10                	mov    DWORD PTR [eax],edx
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	83 ec 0c             	sub    esp,0xc
c000d793:	50                   	push   eax
c000d794:	e8 19 ee ff ff       	call   c000c5b2 <Device::~Device()>
c000d799:	83 c4 10             	add    esp,0x10
c000d79c:	90                   	nop
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	c3                   	ret    
c000d7a1:	90                   	nop

c000d7a2 <LogicalDisk::~LogicalDisk()>:
c000d7a2:	83 ec 0c             	sub    esp,0xc
c000d7a5:	83 ec 0c             	sub    esp,0xc
c000d7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ac:	e8 cd ff ff ff       	call   c000d77e <LogicalDisk::~LogicalDisk()>
c000d7b1:	83 c4 10             	add    esp,0x10
c000d7b4:	83 ec 08             	sub    esp,0x8
c000d7b7:	68 78 01 00 00       	push   0x178
c000d7bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c0:	e8 47 d0 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	83 c4 0c             	add    esp,0xc
c000d7cb:	c3                   	ret    

c000d7cc <LogicalDisk::open(int, int, void*)>:
c000d7cc:	83 ec 18             	sub    esp,0x18
c000d7cf:	68 e8 16 02 c0       	push   0xc00216e8
c000d7d4:	e8 74 3a 00 00       	call   c001124d <KePanic(char const*)>
c000d7d9:	83 c8 ff             	or     eax,0xffffffff
c000d7dc:	83 c4 1c             	add    esp,0x1c
c000d7df:	c3                   	ret    

c000d7e0 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d7e0:	53                   	push   ebx
c000d7e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7e9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7ed:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d7f3:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d7f9:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d7ff:	77 10                	ja     c000d811 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d801:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d807:	89 d3                	mov    ebx,edx
c000d809:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d80f:	72 05                	jb     c000d816 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d811:	83 c8 ff             	or     eax,0xffffffff
c000d814:	89 c2                	mov    edx,eax
c000d816:	5b                   	pop    ebx
c000d817:	c3                   	ret    

c000d818 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d818:	56                   	push   esi
c000d819:	83 c8 ff             	or     eax,0xffffffff
c000d81c:	53                   	push   ebx
c000d81d:	89 c2                	mov    edx,eax
c000d81f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d823:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d827:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d82b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d831:	77 27                	ja     c000d85a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d833:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d839:	89 d8                	mov    eax,ebx
c000d83b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d841:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d846:	89 c2                	mov    edx,eax
c000d848:	73 10                	jae    c000d85a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d84a:	89 c8                	mov    eax,ecx
c000d84c:	89 da                	mov    edx,ebx
c000d84e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d854:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d85a:	5b                   	pop    ebx
c000d85b:	5e                   	pop    esi
c000d85c:	c3                   	ret    
c000d85d:	90                   	nop

c000d85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d85e:	83 ec 1c             	sub    esp,0x1c
c000d861:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d869:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d86d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d875:	89 04 24             	mov    DWORD PTR [esp],eax
c000d878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d87c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d884:	83 ec 08             	sub    esp,0x8
c000d887:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88b:	50                   	push   eax
c000d88c:	e8 b7 ef ff ff       	call   c000c848 <Device::Device(char const*)>
c000d891:	83 c4 10             	add    esp,0x10
c000d894:	ba 34 17 02 c0       	mov    edx,0xc0021734
c000d899:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89d:	89 10                	mov    DWORD PTR [eax],edx
c000d89f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d8aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ae:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d8c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c4:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d8ce:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d8d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8da:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d8e0:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d8e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d8ea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d8ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8f1:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d8f7:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d8fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d901:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d905:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90f:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d919:	90                   	nop
c000d91a:	83 c4 1c             	add    esp,0x1c
c000d91d:	c3                   	ret    

c000d91e <LogicalDisk::assignDriveLetter()>:
c000d91e:	55                   	push   ebp
c000d91f:	57                   	push   edi
c000d920:	56                   	push   esi
c000d921:	53                   	push   ebx
c000d922:	83 ec 14             	sub    esp,0x14
c000d925:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d929:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d92f:	b0 41                	mov    al,0x41
c000d931:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d937:	84 d2                	test   dl,dl
c000d939:	75 02                	jne    c000d93d <LogicalDisk::assignDriveLetter()+0x1f>
c000d93b:	b0 43                	mov    al,0x43
c000d93d:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d943:	0f b6 ca             	movzx  ecx,dl
c000d946:	0f be e8             	movsx  ebp,al
c000d949:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d94d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d951:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d957:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d95b:	3c 43                	cmp    al,0x43
c000d95d:	75 10                	jne    c000d96f <LogicalDisk::assignDriveLetter()+0x51>
c000d95f:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d966:	75 5a                	jne    c000d9c2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d968:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d96d:	75 53                	jne    c000d9c2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d96f:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d972:	ba 01 00 00 00       	mov    edx,0x1
c000d977:	89 34 24             	mov    DWORD PTR [esp],esi
c000d97a:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d97d:	d3 e2                	shl    edx,cl
c000d97f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d983:	89 d7                	mov    edi,edx
c000d985:	89 d6                	mov    esi,edx
c000d987:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d98b:	c1 ff 1f             	sar    edi,0x1f
c000d98e:	21 f9                	and    ecx,edi
c000d990:	09 d1                	or     ecx,edx
c000d992:	75 2e                	jne    c000d9c2 <LogicalDisk::assignDriveLetter()+0xa4>
c000d994:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d998:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d99c:	09 f2                	or     edx,esi
c000d99e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d9a1:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d9a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d9ab:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d9b1:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d9b8:	09 fa                	or     edx,edi
c000d9ba:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d9c0:	eb 0d                	jmp    c000d9cf <LogicalDisk::assignDriveLetter()+0xb1>
c000d9c2:	8d 50 01             	lea    edx,[eax+0x1]
c000d9c5:	45                   	inc    ebp
c000d9c6:	80 fa 5b             	cmp    dl,0x5b
c000d9c9:	88 d0                	mov    al,dl
c000d9cb:	75 8e                	jne    c000d95b <LogicalDisk::assignDriveLetter()+0x3d>
c000d9cd:	31 c0                	xor    eax,eax
c000d9cf:	83 c4 14             	add    esp,0x14
c000d9d2:	5b                   	pop    ebx
c000d9d3:	5e                   	pop    esi
c000d9d4:	5f                   	pop    edi
c000d9d5:	5d                   	pop    ebp
c000d9d6:	c3                   	ret    
c000d9d7:	90                   	nop

c000d9d8 <LogicalDisk::mount()>:
c000d9d8:	56                   	push   esi
c000d9d9:	53                   	push   ebx
c000d9da:	53                   	push   ebx
c000d9db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9df:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d9e5:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d9ef:	85 db                	test   ebx,ebx
c000d9f1:	74 27                	je     c000da1a <LogicalDisk::mount()+0x42>
c000d9f3:	51                   	push   ecx
c000d9f4:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d9fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d9fd:	83 e8 41             	sub    eax,0x41
c000da00:	50                   	push   eax
c000da01:	56                   	push   esi
c000da02:	53                   	push   ebx
c000da03:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da06:	83 c4 10             	add    esp,0x10
c000da09:	84 c0                	test   al,al
c000da0b:	74 08                	je     c000da15 <LogicalDisk::mount()+0x3d>
c000da0d:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da13:	eb 07                	jmp    c000da1c <LogicalDisk::mount()+0x44>
c000da15:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da18:	eb d5                	jmp    c000d9ef <LogicalDisk::mount()+0x17>
c000da1a:	31 c0                	xor    eax,eax
c000da1c:	5a                   	pop    edx
c000da1d:	5b                   	pop    ebx
c000da1e:	5e                   	pop    esi
c000da1f:	c3                   	ret    

c000da20 <LogicalDisk::unmount()>:
c000da20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da24:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da2e:	c3                   	ret    
c000da2f:	90                   	nop

c000da30 <LogicalDisk::eject()>:
c000da30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da34:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000da3a:	8b 10                	mov    edx,DWORD PTR [eax]
c000da3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000da40:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000da43:	90                   	nop

c000da44 <LogicalDisk::unassignDriveLetter()>:
c000da44:	57                   	push   edi
c000da45:	56                   	push   esi
c000da46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da4a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000da51:	85 c9                	test   ecx,ecx
c000da53:	75 0f                	jne    c000da64 <LogicalDisk::unassignDriveLetter()+0x20>
c000da55:	c7 44 24 0c 0c 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc002170c
c000da5d:	5e                   	pop    esi
c000da5e:	5f                   	pop    edi
c000da5f:	e9 e9 37 00 00       	jmp    c001124d <KePanic(char const*)>
c000da64:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000da6b:	83 e9 41             	sub    ecx,0x41
c000da6e:	b8 01 00 00 00       	mov    eax,0x1
c000da73:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000da7e:	d3 e0                	shl    eax,cl
c000da80:	89 c7                	mov    edi,eax
c000da82:	f7 d0                	not    eax
c000da84:	c1 ff 1f             	sar    edi,0x1f
c000da87:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000da8d:	89 fe                	mov    esi,edi
c000da8f:	f7 d6                	not    esi
c000da91:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000da97:	5e                   	pop    esi
c000da98:	5f                   	pop    edi
c000da99:	c3                   	ret    

c000da9a <LogicalDisk::read(unsigned long long, int, void*)>:
c000da9a:	57                   	push   edi
c000da9b:	56                   	push   esi
c000da9c:	53                   	push   ebx
c000da9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000daa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000daa5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000daa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000daad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dab3:	77 41                	ja     c000daf6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dab5:	99                   	cdq    
c000dab6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dabc:	01 c8                	add    eax,ecx
c000dabe:	11 da                	adc    edx,ebx
c000dac0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dac6:	19 d7                	sbb    edi,edx
c000dac8:	72 33                	jb     c000dafd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000daca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dad0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dad6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dada:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dade:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dae4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daee:	5b                   	pop    ebx
c000daef:	5e                   	pop    esi
c000daf0:	5f                   	pop    edi
c000daf1:	e9 d4 0a 00 00       	jmp    c000e5ca <VCache::read(unsigned long long, int, void*)>
c000daf6:	b8 05 00 00 00       	mov    eax,0x5
c000dafb:	eb 05                	jmp    c000db02 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000dafd:	b8 07 00 00 00       	mov    eax,0x7
c000db02:	5b                   	pop    ebx
c000db03:	5e                   	pop    esi
c000db04:	5f                   	pop    edi
c000db05:	c3                   	ret    

c000db06 <LogicalDisk::write(unsigned long long, int, void*)>:
c000db06:	57                   	push   edi
c000db07:	56                   	push   esi
c000db08:	53                   	push   ebx
c000db09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db19:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db1f:	77 41                	ja     c000db62 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db21:	99                   	cdq    
c000db22:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db28:	01 c8                	add    eax,ecx
c000db2a:	11 da                	adc    edx,ebx
c000db2c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db32:	19 d7                	sbb    edi,edx
c000db34:	72 33                	jb     c000db69 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000db36:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db3c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db42:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db46:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db4a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db50:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db5a:	5b                   	pop    ebx
c000db5b:	5e                   	pop    esi
c000db5c:	5f                   	pop    edi
c000db5d:	e9 6e 09 00 00       	jmp    c000e4d0 <VCache::write(unsigned long long, int, void*)>
c000db62:	b8 05 00 00 00       	mov    eax,0x5
c000db67:	eb 05                	jmp    c000db6e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000db69:	b8 07 00 00 00       	mov    eax,0x7
c000db6e:	5b                   	pop    ebx
c000db6f:	5e                   	pop    esi
c000db70:	5f                   	pop    edi
c000db71:	c3                   	ret    
c000db72:	66 90                	xchg   ax,ax

c000db74 <Mouse::Mouse(char const*)>:
c000db74:	83 ec 0c             	sub    esp,0xc
c000db77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7b:	83 ec 08             	sub    esp,0x8
c000db7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db82:	50                   	push   eax
c000db83:	e8 c0 ec ff ff       	call   c000c848 <Device::Device(char const*)>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000db90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db94:	89 10                	mov    DWORD PTR [eax],edx
c000db96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dba4:	90                   	nop
c000dba5:	83 c4 0c             	add    esp,0xc
c000dba8:	c3                   	ret    
c000dba9:	90                   	nop
c000dbaa:	66 90                	xchg   ax,ax

c000dbac <Mouse::~Mouse()>:
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	ba 60 17 02 c0       	mov    edx,0xc0021760
c000dbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb8:	89 10                	mov    DWORD PTR [eax],edx
c000dbba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbe:	83 ec 0c             	sub    esp,0xc
c000dbc1:	50                   	push   eax
c000dbc2:	e8 eb e9 ff ff       	call   c000c5b2 <Device::~Device()>
c000dbc7:	83 c4 10             	add    esp,0x10
c000dbca:	90                   	nop
c000dbcb:	83 c4 0c             	add    esp,0xc
c000dbce:	c3                   	ret    
c000dbcf:	90                   	nop

c000dbd0 <Mouse::~Mouse()>:
c000dbd0:	83 ec 0c             	sub    esp,0xc
c000dbd3:	83 ec 0c             	sub    esp,0xc
c000dbd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbda:	e8 cd ff ff ff       	call   c000dbac <Mouse::~Mouse()>
c000dbdf:	83 c4 10             	add    esp,0x10
c000dbe2:	83 ec 08             	sub    esp,0x8
c000dbe5:	68 58 01 00 00       	push   0x158
c000dbea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbee:	e8 19 cc ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dbf3:	83 c4 10             	add    esp,0x10
c000dbf6:	83 c4 0c             	add    esp,0xc
c000dbf9:	c3                   	ret    

c000dbfa <NIC::getMAC()>:
c000dbfa:	31 c0                	xor    eax,eax
c000dbfc:	31 d2                	xor    edx,edx
c000dbfe:	c3                   	ret    
c000dbff:	90                   	nop

c000dc00 <NIC::write(int, unsigned char*, int*)>:
c000dc00:	b8 01 00 00 00       	mov    eax,0x1
c000dc05:	c3                   	ret    

c000dc06 <NIC::NIC(char const*)>:
c000dc06:	83 ec 0c             	sub    esp,0xc
c000dc09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc0d:	83 ec 08             	sub    esp,0x8
c000dc10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc14:	50                   	push   eax
c000dc15:	e8 2e ec ff ff       	call   c000c848 <Device::Device(char const*)>
c000dc1a:	83 c4 10             	add    esp,0x10
c000dc1d:	ba 8c 17 02 c0       	mov    edx,0xc002178c
c000dc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc26:	89 10                	mov    DWORD PTR [eax],edx
c000dc28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dc36:	90                   	nop
c000dc37:	83 c4 0c             	add    esp,0xc
c000dc3a:	c3                   	ret    
c000dc3b:	90                   	nop

c000dc3c <NIC::~NIC()>:
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	ba 8c 17 02 c0       	mov    edx,0xc002178c
c000dc44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc48:	89 10                	mov    DWORD PTR [eax],edx
c000dc4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc4e:	83 ec 0c             	sub    esp,0xc
c000dc51:	50                   	push   eax
c000dc52:	e8 5b e9 ff ff       	call   c000c5b2 <Device::~Device()>
c000dc57:	83 c4 10             	add    esp,0x10
c000dc5a:	90                   	nop
c000dc5b:	83 c4 0c             	add    esp,0xc
c000dc5e:	c3                   	ret    
c000dc5f:	90                   	nop

c000dc60 <NIC::~NIC()>:
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	83 ec 0c             	sub    esp,0xc
c000dc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc6a:	e8 cd ff ff ff       	call   c000dc3c <NIC::~NIC()>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	83 ec 08             	sub    esp,0x8
c000dc75:	68 58 01 00 00       	push   0x158
c000dc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc7e:	e8 89 cb ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000dc83:	83 c4 10             	add    esp,0x10
c000dc86:	83 c4 0c             	add    esp,0xc
c000dc89:	c3                   	ret    

c000dc8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc8a:	55                   	push   ebp
c000dc8b:	57                   	push   edi
c000dc8c:	56                   	push   esi
c000dc8d:	53                   	push   ebx
c000dc8e:	81 ec 28 01 00 00    	sub    esp,0x128
c000dc94:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c000dc9b:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c000dca2:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c000dca9:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c000dcb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcb4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcb8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dcbf:	e8 80 ec ff ff       	call   c000c944 <Device::getName()>
c000dcc4:	5a                   	pop    edx
c000dcc5:	59                   	pop    ecx
c000dcc6:	50                   	push   eax
c000dcc7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dccb:	55                   	push   ebp
c000dccc:	e8 7f 29 ff ff       	call   c0000650 <strcpy>
c000dcd1:	5b                   	pop    ebx
c000dcd2:	58                   	pop    eax
c000dcd3:	68 b8 17 02 c0       	push   0xc00217b8
c000dcd8:	55                   	push   ebp
c000dcd9:	e8 92 2b ff ff       	call   c0000870 <strcat>
c000dcde:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dce5:	e8 e9 9d ff ff       	call   c0007ad3 <malloc>
c000dcea:	83 c4 0c             	add    esp,0xc
c000dced:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dcf1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dcf5:	89 c3                	mov    ebx,eax
c000dcf7:	57                   	push   edi
c000dcf8:	56                   	push   esi
c000dcf9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd00:	55                   	push   ebp
c000dd01:	50                   	push   eax
c000dd02:	e8 57 fb ff ff       	call   c000d85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd07:	83 c4 14             	add    esp,0x14
c000dd0a:	53                   	push   ebx
c000dd0b:	e8 0e fc ff ff       	call   c000d91e <LogicalDisk::assignDriveLetter()>
c000dd10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd13:	e8 c0 fc ff ff       	call   c000d9d8 <LogicalDisk::mount()>
c000dd18:	58                   	pop    eax
c000dd19:	5a                   	pop    edx
c000dd1a:	53                   	push   ebx
c000dd1b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd22:	e8 89 e9 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c000dd27:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dd2d:	5b                   	pop    ebx
c000dd2e:	5e                   	pop    esi
c000dd2f:	5f                   	pop    edi
c000dd30:	5d                   	pop    ebp
c000dd31:	c3                   	ret    

c000dd32 <createPartitionsForDisk(PhysicalDisk*)>:
c000dd32:	55                   	push   ebp
c000dd33:	57                   	push   edi
c000dd34:	56                   	push   esi
c000dd35:	53                   	push   ebx
c000dd36:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dd3c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dd43:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dd49:	3d 00 02 00 00       	cmp    eax,0x200
c000dd4e:	74 27                	je     c000dd77 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dd50:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dd56:	83 ec 10             	sub    esp,0x10
c000dd59:	99                   	cdq    
c000dd5a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dd60:	52                   	push   edx
c000dd61:	50                   	push   eax
c000dd62:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dd66:	c1 e6 0a             	shl    esi,0xa
c000dd69:	89 fd                	mov    ebp,edi
c000dd6b:	55                   	push   ebp
c000dd6c:	56                   	push   esi
c000dd6d:	e8 9e 14 01 00       	call   c001f210 <__udivdi3>
c000dd72:	e9 b9 00 00 00       	jmp    c000de30 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd77:	83 ec 0c             	sub    esp,0xc
c000dd7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd7c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dd80:	56                   	push   esi
c000dd81:	6a 01                	push   0x1
c000dd83:	6a 00                	push   0x0
c000dd85:	6a 00                	push   0x0
c000dd87:	53                   	push   ebx
c000dd88:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dd8b:	83 c4 20             	add    esp,0x20
c000dd8e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dd96:	75 0a                	jne    c000dda2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dd98:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dda0:	74 2c                	je     c000ddce <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dda2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dda8:	83 ec 10             	sub    esp,0x10
c000ddab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ddb1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ddb7:	89 f7                	mov    edi,esi
c000ddb9:	c1 ff 1f             	sar    edi,0x1f
c000ddbc:	57                   	push   edi
c000ddbd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ddc1:	56                   	push   esi
c000ddc2:	c1 e0 0a             	shl    eax,0xa
c000ddc5:	52                   	push   edx
c000ddc6:	50                   	push   eax
c000ddc7:	e8 44 14 01 00       	call   c001f210 <__udivdi3>
c000ddcc:	eb 62                	jmp    c000de30 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddce:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ddd5:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dddc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dde3:	89 cf                	mov    edi,ecx
c000dde5:	83 e2 7f             	and    edx,0x7f
c000dde8:	83 e7 7f             	and    edi,0x7f
c000ddeb:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ddee:	83 e0 7f             	and    eax,0x7f
c000ddf1:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ddf4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ddfb:	83 e0 7f             	and    eax,0x7f
c000ddfe:	01 d0                	add    eax,edx
c000de00:	84 c0                	test   al,al
c000de02:	89 c5                	mov    ebp,eax
c000de04:	74 41                	je     c000de47 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de06:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de0c:	83 ec 10             	sub    esp,0x10
c000de0f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de15:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de1b:	89 f7                	mov    edi,esi
c000de1d:	c1 ff 1f             	sar    edi,0x1f
c000de20:	57                   	push   edi
c000de21:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de25:	56                   	push   esi
c000de26:	c1 e0 0a             	shl    eax,0xa
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	e8 e0 13 01 00       	call   c001f210 <__udivdi3>
c000de30:	83 c4 14             	add    esp,0x14
c000de33:	52                   	push   edx
c000de34:	50                   	push   eax
c000de35:	6a 00                	push   0x0
c000de37:	6a 00                	push   0x0
c000de39:	53                   	push   ebx
c000de3a:	e8 4b fe ff ff       	call   c000dc8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000de3f:	83 c4 20             	add    esp,0x20
c000de42:	e9 73 01 00 00       	jmp    c000dfba <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000de47:	89 f0                	mov    eax,esi
c000de49:	31 c9                	xor    ecx,ecx
c000de4b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000de52:	75 02                	jne    c000de56 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000de54:	89 cd                	mov    ebp,ecx
c000de56:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000de5e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000de65:	83 c0 10             	add    eax,0x10
c000de68:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000de70:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c000de77:	c1 e2 08             	shl    edx,0x8
c000de7a:	c1 e6 10             	shl    esi,0x10
c000de7d:	09 f2                	or     edx,esi
c000de7f:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c000de86:	09 f2                	or     edx,esi
c000de88:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000de8f:	c1 e6 18             	shl    esi,0x18
c000de92:	09 f2                	or     edx,esi
c000de94:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000de9b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000de9f:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000dea6:	c1 e6 10             	shl    esi,0x10
c000dea9:	c1 e2 08             	shl    edx,0x8
c000deac:	09 f2                	or     edx,esi
c000deae:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000deb5:	09 f2                	or     edx,esi
c000deb7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000debe:	c1 e6 18             	shl    esi,0x18
c000dec1:	09 f2                	or     edx,esi
c000dec3:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000dec7:	41                   	inc    ecx
c000dec8:	83 f9 04             	cmp    ecx,0x4
c000decb:	0f 85 7a ff ff ff    	jne    c000de4b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ded1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded5:	83 f0 01             	xor    eax,0x1
c000ded8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000dedc:	75 4f                	jne    c000df2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000dede:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dee2:	83 f0 01             	xor    eax,0x1
c000dee5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000dee9:	75 42                	jne    c000df2d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000deeb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000def1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000def9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000deff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df07:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df0d:	89 f7                	mov    edi,esi
c000df0f:	c1 ff 1f             	sar    edi,0x1f
c000df12:	57                   	push   edi
c000df13:	56                   	push   esi
c000df14:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df18:	52                   	push   edx
c000df19:	c1 e0 0a             	shl    eax,0xa
c000df1c:	50                   	push   eax
c000df1d:	e8 ee 12 01 00       	call   c001f210 <__udivdi3>
c000df22:	83 c4 10             	add    esp,0x10
c000df25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000df2d:	89 e8                	mov    eax,ebp
c000df2f:	0f b6 e8             	movzx  ebp,al
c000df32:	85 ed                	test   ebp,ebp
c000df34:	74 50                	je     c000df86 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000df36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df3a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df3e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df4e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df52:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df66:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000df6a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df6e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000df72:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df76:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000df7a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000df7e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000df82:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000df86:	31 ed                	xor    ebp,ebp
c000df88:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df8c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df90:	89 f8                	mov    eax,edi
c000df92:	09 f0                	or     eax,esi
c000df94:	74 1e                	je     c000dfb4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df96:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df9a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df9e:	89 d1                	mov    ecx,edx
c000dfa0:	09 c1                	or     ecx,eax
c000dfa2:	74 10                	je     c000dfb4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dfa4:	83 ec 0c             	sub    esp,0xc
c000dfa7:	57                   	push   edi
c000dfa8:	56                   	push   esi
c000dfa9:	52                   	push   edx
c000dfaa:	50                   	push   eax
c000dfab:	53                   	push   ebx
c000dfac:	e8 d9 fc ff ff       	call   c000dc8a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfb1:	83 c4 20             	add    esp,0x20
c000dfb4:	45                   	inc    ebp
c000dfb5:	83 fd 04             	cmp    ebp,0x4
c000dfb8:	75 ce                	jne    c000df88 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000dfba:	81 c4 5c 02 00 00    	add    esp,0x25c
c000dfc0:	5b                   	pop    ebx
c000dfc1:	5e                   	pop    esi
c000dfc2:	5f                   	pop    edi
c000dfc3:	5d                   	pop    ebp
c000dfc4:	c3                   	ret    
c000dfc5:	66 90                	xchg   ax,ax
c000dfc7:	90                   	nop

c000dfc8 <Serial::Serial(char const*)>:
c000dfc8:	83 ec 0c             	sub    esp,0xc
c000dfcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfcf:	83 ec 08             	sub    esp,0x8
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	50                   	push   eax
c000dfd7:	e8 6c e8 ff ff       	call   c000c848 <Device::Device(char const*)>
c000dfdc:	83 c4 10             	add    esp,0x10
c000dfdf:	ba cc 17 02 c0       	mov    edx,0xc00217cc
c000dfe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe8:	89 10                	mov    DWORD PTR [eax],edx
c000dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfee:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000dff8:	90                   	nop
c000dff9:	83 c4 0c             	add    esp,0xc
c000dffc:	c3                   	ret    
c000dffd:	90                   	nop
c000dffe:	66 90                	xchg   ax,ax

c000e000 <Serial::~Serial()>:
c000e000:	83 ec 0c             	sub    esp,0xc
c000e003:	ba cc 17 02 c0       	mov    edx,0xc00217cc
c000e008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00c:	89 10                	mov    DWORD PTR [eax],edx
c000e00e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e012:	83 ec 0c             	sub    esp,0xc
c000e015:	50                   	push   eax
c000e016:	e8 97 e5 ff ff       	call   c000c5b2 <Device::~Device()>
c000e01b:	83 c4 10             	add    esp,0x10
c000e01e:	90                   	nop
c000e01f:	83 c4 0c             	add    esp,0xc
c000e022:	c3                   	ret    
c000e023:	90                   	nop

c000e024 <Serial::~Serial()>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	83 ec 0c             	sub    esp,0xc
c000e02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e02e:	e8 cd ff ff ff       	call   c000e000 <Serial::~Serial()>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	83 ec 08             	sub    esp,0x8
c000e039:	68 58 01 00 00       	push   0x158
c000e03e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e042:	e8 c5 c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e047:	83 c4 10             	add    esp,0x10
c000e04a:	83 c4 0c             	add    esp,0xc
c000e04d:	c3                   	ret    
c000e04e:	66 90                	xchg   ax,ax

c000e050 <Timer::Timer(char const*)>:
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e057:	83 ec 08             	sub    esp,0x8
c000e05a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05e:	50                   	push   eax
c000e05f:	e8 e4 e7 ff ff       	call   c000c848 <Device::Device(char const*)>
c000e064:	83 c4 10             	add    esp,0x10
c000e067:	ba 10 18 02 c0       	mov    edx,0xc0021810
c000e06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e070:	89 10                	mov    DWORD PTR [eax],edx
c000e072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e076:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e080:	90                   	nop
c000e081:	83 c4 0c             	add    esp,0xc
c000e084:	c3                   	ret    
c000e085:	90                   	nop
c000e086:	66 90                	xchg   ax,ax

c000e088 <Timer::~Timer()>:
c000e088:	83 ec 0c             	sub    esp,0xc
c000e08b:	ba 10 18 02 c0       	mov    edx,0xc0021810
c000e090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e094:	89 10                	mov    DWORD PTR [eax],edx
c000e096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09a:	83 ec 0c             	sub    esp,0xc
c000e09d:	50                   	push   eax
c000e09e:	e8 0f e5 ff ff       	call   c000c5b2 <Device::~Device()>
c000e0a3:	83 c4 10             	add    esp,0x10
c000e0a6:	90                   	nop
c000e0a7:	83 c4 0c             	add    esp,0xc
c000e0aa:	c3                   	ret    
c000e0ab:	90                   	nop

c000e0ac <Timer::~Timer()>:
c000e0ac:	83 ec 0c             	sub    esp,0xc
c000e0af:	83 ec 0c             	sub    esp,0xc
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	e8 cd ff ff ff       	call   c000e088 <Timer::~Timer()>
c000e0bb:	83 c4 10             	add    esp,0x10
c000e0be:	83 ec 08             	sub    esp,0x8
c000e0c1:	68 5c 01 00 00       	push   0x15c
c000e0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ca:	e8 3d c7 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	83 c4 0c             	add    esp,0xc
c000e0d5:	c3                   	ret    

c000e0d6 <Timer::read()>:
c000e0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e0e0:	c3                   	ret    

c000e0e1 <setupTimer(int)>:
c000e0e1:	53                   	push   ebx
c000e0e2:	83 ec 14             	sub    esp,0x14
c000e0e5:	68 5c 01 00 00       	push   0x15c
c000e0ea:	e8 e4 99 ff ff       	call   c0007ad3 <malloc>
c000e0ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0f2:	89 c3                	mov    ebx,eax
c000e0f4:	e8 7b 09 01 00       	call   c001ea74 <PIT::PIT()>
c000e0f9:	58                   	pop    eax
c000e0fa:	5a                   	pop    edx
c000e0fb:	53                   	push   ebx
c000e0fc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e102:	e8 a9 e5 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c000e107:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e109:	6a 00                	push   0x0
c000e10b:	6a 00                	push   0x0
c000e10d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e111:	53                   	push   ebx
c000e112:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e115:	83 c4 28             	add    esp,0x28
c000e118:	89 d8                	mov    eax,ebx
c000e11a:	5b                   	pop    ebx
c000e11b:	c3                   	ret    

c000e11c <timerHandler(unsigned int)>:
c000e11c:	56                   	push   esi
c000e11d:	53                   	push   ebx
c000e11e:	51                   	push   ecx
c000e11f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e123:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e129:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e130:	0f 84 4a 01 00 00    	je     c000e280 <timerHandler(unsigned int)+0x164>
c000e136:	fa                   	cli    
c000e137:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e13d:	83 ec 0c             	sub    esp,0xc
c000e140:	68 d8 96 02 c0       	push   0xc00296d8
c000e145:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e14b:	e8 90 16 01 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e150:	83 c4 10             	add    esp,0x10
c000e153:	84 c0                	test   al,al
c000e155:	0f 85 a1 00 00 00    	jne    c000e1fc <timerHandler(unsigned int)+0xe0>
c000e15b:	83 ec 0c             	sub    esp,0xc
c000e15e:	68 d8 96 02 c0       	push   0xc00296d8
c000e163:	e8 94 16 01 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e168:	83 c4 10             	add    esp,0x10
c000e16b:	89 c6                	mov    esi,eax
c000e16d:	8d 76 00             	lea    esi,[esi+0x0]
c000e170:	83 ec 0c             	sub    esp,0xc
c000e173:	68 d8 96 02 c0       	push   0xc00296d8
c000e178:	e8 7f 16 01 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e17d:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e184:	89 c3                	mov    ebx,eax
c000e186:	e8 79 16 01 00       	call   c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e18b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e197:	77 23                	ja     c000e1bc <timerHandler(unsigned int)+0xa0>
c000e199:	83 ec 0c             	sub    esp,0xc
c000e19c:	53                   	push   ebx
c000e19d:	e8 a6 7e 00 00       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c000e1a2:	83 c4 10             	add    esp,0x10
c000e1a5:	39 de                	cmp    esi,ebx
c000e1a7:	75 27                	jne    c000e1d0 <timerHandler(unsigned int)+0xb4>
c000e1a9:	83 ec 0c             	sub    esp,0xc
c000e1ac:	68 d8 96 02 c0       	push   0xc00296d8
c000e1b1:	e8 46 16 01 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1b6:	89 c6                	mov    esi,eax
c000e1b8:	eb 12                	jmp    c000e1cc <timerHandler(unsigned int)+0xb0>
c000e1ba:	66 90                	xchg   ax,ax
c000e1bc:	52                   	push   edx
c000e1bd:	52                   	push   edx
c000e1be:	53                   	push   ebx
c000e1bf:	68 d8 96 02 c0       	push   0xc00296d8
c000e1c4:	e8 f7 16 01 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	90                   	nop
c000e1d0:	83 ec 0c             	sub    esp,0xc
c000e1d3:	68 d8 96 02 c0       	push   0xc00296d8
c000e1d8:	e8 03 16 01 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1dd:	83 c4 10             	add    esp,0x10
c000e1e0:	84 c0                	test   al,al
c000e1e2:	75 18                	jne    c000e1fc <timerHandler(unsigned int)+0xe0>
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	68 d8 96 02 c0       	push   0xc00296d8
c000e1ec:	e8 0b 16 01 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1f1:	83 c4 10             	add    esp,0x10
c000e1f4:	39 f0                	cmp    eax,esi
c000e1f6:	0f 85 74 ff ff ff    	jne    c000e170 <timerHandler(unsigned int)+0x54>
c000e1fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e201:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e205:	74 41                	je     c000e248 <timerHandler(unsigned int)+0x12c>
c000e207:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e20e:	74 38                	je     c000e248 <timerHandler(unsigned int)+0x12c>
c000e210:	fa                   	cli    
c000e211:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e217:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e21c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e222:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e225:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e22b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e22e:	72 08                	jb     c000e238 <timerHandler(unsigned int)+0x11c>
c000e230:	e8 1b 79 00 00       	call   c0015b50 <schedule()>
c000e235:	8d 76 00             	lea    esi,[esi+0x0]
c000e238:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e23d:	48                   	dec    eax
c000e23e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e243:	75 03                	jne    c000e248 <timerHandler(unsigned int)+0x12c>
c000e245:	fb                   	sti    
c000e246:	66 90                	xchg   ax,ax
c000e248:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e24d:	48                   	dec    eax
c000e24e:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e253:	75 1b                	jne    c000e270 <timerHandler(unsigned int)+0x154>
c000e255:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e25c:	74 12                	je     c000e270 <timerHandler(unsigned int)+0x154>
c000e25e:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e268:	e8 e3 78 00 00       	call   c0015b50 <schedule()>
c000e26d:	8d 76 00             	lea    esi,[esi+0x0]
c000e270:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e275:	48                   	dec    eax
c000e276:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e27b:	75 03                	jne    c000e280 <timerHandler(unsigned int)+0x164>
c000e27d:	fb                   	sti    
c000e27e:	66 90                	xchg   ax,ax
c000e280:	58                   	pop    eax
c000e281:	5b                   	pop    ebx
c000e282:	5e                   	pop    esi
c000e283:	c3                   	ret    

c000e284 <VCache::VCache(PhysicalDisk*)>:
c000e284:	53                   	push   ebx
c000e285:	83 ec 18             	sub    esp,0x18
c000e288:	ba 40 18 02 c0       	mov    edx,0xc0021840
c000e28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e291:	89 10                	mov    DWORD PTR [eax],edx
c000e293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e297:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e29e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e2a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ad:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e2b4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e2bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2bf:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e2c6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e2cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e2eb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e2f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fe:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e306:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e315:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e31d:	83 ec 0c             	sub    esp,0xc
c000e320:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e324:	e8 aa 97 ff ff       	call   c0007ad3 <malloc>
c000e329:	83 c4 10             	add    esp,0x10
c000e32c:	89 c3                	mov    ebx,eax
c000e32e:	83 ec 0c             	sub    esp,0xc
c000e331:	53                   	push   ebx
c000e332:	e8 b9 75 00 00       	call   c00158f0 <Mutex::Mutex()>
c000e337:	83 c4 10             	add    esp,0x10
c000e33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e345:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e349:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e350:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e357:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e35b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e365:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e36c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e372:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e378:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e37c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e37f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e386:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e38a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e38e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e394:	05 00 02 00 00       	add    eax,0x200
c000e399:	c1 e0 03             	shl    eax,0x3
c000e39c:	83 ec 0c             	sub    esp,0xc
c000e39f:	50                   	push   eax
c000e3a0:	e8 2e 97 ff ff       	call   c0007ad3 <malloc>
c000e3a5:	83 c4 10             	add    esp,0x10
c000e3a8:	89 c2                	mov    edx,eax
c000e3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e3b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e3c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3c8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3ce:	89 d0                	mov    eax,edx
c000e3d0:	c1 e0 02             	shl    eax,0x2
c000e3d3:	01 d0                	add    eax,edx
c000e3d5:	c1 e0 04             	shl    eax,0x4
c000e3d8:	83 ec 0c             	sub    esp,0xc
c000e3db:	50                   	push   eax
c000e3dc:	e8 f2 96 ff ff       	call   c0007ad3 <malloc>
c000e3e1:	83 c4 10             	add    esp,0x10
c000e3e4:	89 c2                	mov    edx,eax
c000e3e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3ea:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e3ed:	90                   	nop
c000e3ee:	83 c4 18             	add    esp,0x18
c000e3f1:	5b                   	pop    ebx
c000e3f2:	c3                   	ret    
c000e3f3:	90                   	nop

c000e3f4 <VCache::invalidateReadBuffer()>:
c000e3f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e3fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e402:	c3                   	ret    
c000e403:	90                   	nop

c000e404 <VCache::writeWriteBuffer()>:
c000e404:	53                   	push   ebx
c000e405:	83 ec 08             	sub    esp,0x8
c000e408:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e40c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e410:	74 1e                	je     c000e430 <VCache::writeWriteBuffer()+0x2c>
c000e412:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e415:	83 ec 0c             	sub    esp,0xc
c000e418:	8b 10                	mov    edx,DWORD PTR [eax]
c000e41a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e41d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e420:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e423:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e426:	50                   	push   eax
c000e427:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e42a:	83 c4 20             	add    esp,0x20
c000e42d:	8d 76 00             	lea    esi,[esi+0x0]
c000e430:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e437:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e43e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e442:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e449:	83 c4 08             	add    esp,0x8
c000e44c:	5b                   	pop    ebx
c000e44d:	c3                   	ret    
c000e44e:	66 90                	xchg   ax,ax

c000e450 <VCache::~VCache()>:
c000e450:	83 ec 0c             	sub    esp,0xc
c000e453:	ba 40 18 02 c0       	mov    edx,0xc0021840
c000e458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e45c:	89 10                	mov    DWORD PTR [eax],edx
c000e45e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e462:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e465:	0f b6 c0             	movzx  eax,al
c000e468:	85 c0                	test   eax,eax
c000e46a:	74 10                	je     c000e47c <VCache::~VCache()+0x2c>
c000e46c:	83 ec 0c             	sub    esp,0xc
c000e46f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e473:	e8 8c ff ff ff       	call   c000e404 <VCache::writeWriteBuffer()>
c000e478:	83 c4 10             	add    esp,0x10
c000e47b:	90                   	nop
c000e47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e480:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e483:	83 ec 0c             	sub    esp,0xc
c000e486:	50                   	push   eax
c000e487:	e8 57 96 ff ff       	call   c0007ae3 <free>
c000e48c:	83 c4 10             	add    esp,0x10
c000e48f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e493:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e496:	83 ec 0c             	sub    esp,0xc
c000e499:	50                   	push   eax
c000e49a:	e8 44 96 ff ff       	call   c0007ae3 <free>
c000e49f:	83 c4 10             	add    esp,0x10
c000e4a2:	90                   	nop
c000e4a3:	83 c4 0c             	add    esp,0xc
c000e4a6:	c3                   	ret    
c000e4a7:	90                   	nop

c000e4a8 <VCache::~VCache()>:
c000e4a8:	83 ec 0c             	sub    esp,0xc
c000e4ab:	83 ec 0c             	sub    esp,0xc
c000e4ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4b2:	e8 99 ff ff ff       	call   c000e450 <VCache::~VCache()>
c000e4b7:	83 c4 10             	add    esp,0x10
c000e4ba:	83 ec 08             	sub    esp,0x8
c000e4bd:	6a 44                	push   0x44
c000e4bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c3:	e8 44 c3 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	83 c4 0c             	add    esp,0xc
c000e4ce:	c3                   	ret    
c000e4cf:	90                   	nop

c000e4d0 <VCache::write(unsigned long long, int, void*)>:
c000e4d0:	55                   	push   ebp
c000e4d1:	57                   	push   edi
c000e4d2:	56                   	push   esi
c000e4d3:	53                   	push   ebx
c000e4d4:	83 ec 1c             	sub    esp,0x1c
c000e4d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e4db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4df:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e4e3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e4e7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e4f3:	74 0f                	je     c000e504 <VCache::write(unsigned long long, int, void*)+0x34>
c000e4f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e4f9:	53                   	push   ebx
c000e4fa:	e8 f5 fe ff ff       	call   c000e3f4 <VCache::invalidateReadBuffer()>
c000e4ff:	58                   	pop    eax
c000e500:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e504:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e508:	74 66                	je     c000e570 <VCache::write(unsigned long long, int, void*)+0xa0>
c000e50a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e50d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e511:	99                   	cdq    
c000e512:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e515:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e518:	89 c6                	mov    esi,eax
c000e51a:	31 ce                	xor    esi,ecx
c000e51c:	89 d0                	mov    eax,edx
c000e51e:	31 e8                	xor    eax,ebp
c000e520:	09 c6                	or     esi,eax
c000e522:	75 38                	jne    c000e55c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e524:	83 ff 01             	cmp    edi,0x1
c000e527:	75 33                	jne    c000e55c <VCache::write(unsigned long long, int, void*)+0x8c>
c000e529:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e52c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e534:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e53a:	0f af f9             	imul   edi,ecx
c000e53d:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000e540:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e542:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e545:	40                   	inc    eax
c000e546:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e549:	83 f8 50             	cmp    eax,0x50
c000e54c:	75 72                	jne    c000e5c0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e54e:	83 ec 0c             	sub    esp,0xc
c000e551:	53                   	push   ebx
c000e552:	e8 ad fe ff ff       	call   c000e404 <VCache::writeWriteBuffer()>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	eb 64                	jmp    c000e5c0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e55c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	53                   	push   ebx
c000e564:	e8 9b fe ff ff       	call   c000e404 <VCache::writeWriteBuffer()>
c000e569:	83 c4 10             	add    esp,0x10
c000e56c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e570:	83 ff 4f             	cmp    edi,0x4f
c000e573:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e576:	7f 20                	jg     c000e598 <VCache::write(unsigned long long, int, void*)+0xc8>
c000e578:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e57b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e57f:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c000e582:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e585:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e588:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e58c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e592:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e594:	eb 2a                	jmp    c000e5c0 <VCache::write(unsigned long long, int, void*)+0xf0>
c000e596:	66 90                	xchg   ax,ax
c000e598:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e59c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e59e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e5a2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e5a6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e5aa:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000e5ae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5b2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e5b5:	83 c4 1c             	add    esp,0x1c
c000e5b8:	5b                   	pop    ebx
c000e5b9:	5e                   	pop    esi
c000e5ba:	5f                   	pop    edi
c000e5bb:	5d                   	pop    ebp
c000e5bc:	ff e0                	jmp    eax
c000e5be:	66 90                	xchg   ax,ax
c000e5c0:	83 c4 1c             	add    esp,0x1c
c000e5c3:	31 c0                	xor    eax,eax
c000e5c5:	5b                   	pop    ebx
c000e5c6:	5e                   	pop    esi
c000e5c7:	5f                   	pop    edi
c000e5c8:	5d                   	pop    ebp
c000e5c9:	c3                   	ret    

c000e5ca <VCache::read(unsigned long long, int, void*)>:
c000e5ca:	55                   	push   ebp
c000e5cb:	57                   	push   edi
c000e5cc:	56                   	push   esi
c000e5cd:	53                   	push   ebx
c000e5ce:	83 ec 1c             	sub    esp,0x1c
c000e5d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e5d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e5d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e5dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5e1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e5e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5e9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e5ed:	74 0d                	je     c000e5fc <VCache::read(unsigned long long, int, void*)+0x32>
c000e5ef:	83 ec 0c             	sub    esp,0xc
c000e5f2:	57                   	push   edi
c000e5f3:	e8 0c fe ff ff       	call   c000e404 <VCache::writeWriteBuffer()>
c000e5f8:	83 c4 10             	add    esp,0x10
c000e5fb:	90                   	nop
c000e5fc:	83 fd 01             	cmp    ebp,0x1
c000e5ff:	0f 85 93 00 00 00    	jne    c000e698 <VCache::read(unsigned long long, int, void*)+0xce>
c000e605:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e608:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e60f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e612:	0f 85 80 00 00 00    	jne    c000e698 <VCache::read(unsigned long long, int, void*)+0xce>
c000e618:	8b 4f 40             	mov    ecx,DWORD PTR [edi+0x40]
c000e61b:	89 cd                	mov    ebp,ecx
c000e61d:	f7 dd                	neg    ebp
c000e61f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000e623:	89 e8                	mov    eax,ebp
c000e625:	21 dd                	and    ebp,ebx
c000e627:	c1 f8 1f             	sar    eax,0x1f
c000e62a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e62e:	89 e8                	mov    eax,ebp
c000e630:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000e634:	21 f5                	and    ebp,esi
c000e636:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e63a:	89 ea                	mov    edx,ebp
c000e63c:	74 2e                	je     c000e66c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e63e:	39 6f 34             	cmp    DWORD PTR [edi+0x34],ebp
c000e641:	75 29                	jne    c000e66c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e643:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e646:	75 24                	jne    c000e66c <VCache::read(unsigned long long, int, void*)+0xa2>
c000e648:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e64b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e651:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e654:	8d 70 ff             	lea    esi,[eax-0x1]
c000e657:	21 f3                	and    ebx,esi
c000e659:	0f af d9             	imul   ebx,ecx
c000e65c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e65f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e663:	89 de                	mov    esi,ebx
c000e665:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e667:	31 c0                	xor    eax,eax
c000e669:	eb 61                	jmp    c000e6cc <VCache::read(unsigned long long, int, void*)+0x102>
c000e66b:	90                   	nop
c000e66c:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e670:	83 ec 0c             	sub    esp,0xc
c000e673:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e676:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e67a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e67d:	8b 36                	mov    esi,DWORD PTR [esi]
c000e67f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e682:	51                   	push   ecx
c000e683:	52                   	push   edx
c000e684:	50                   	push   eax
c000e685:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e689:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000e68c:	83 c4 20             	add    esp,0x20
c000e68f:	85 c0                	test   eax,eax
c000e691:	75 39                	jne    c000e6cc <VCache::read(unsigned long long, int, void*)+0x102>
c000e693:	eb b3                	jmp    c000e648 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e695:	8d 76 00             	lea    esi,[esi+0x0]
c000e698:	83 ec 0c             	sub    esp,0xc
c000e69b:	57                   	push   edi
c000e69c:	e8 53 fd ff ff       	call   c000e3f4 <VCache::invalidateReadBuffer()>
c000e6a1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6aa:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e6ae:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e6b2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e6b6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e6ba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6be:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e6c1:	83 c4 2c             	add    esp,0x2c
c000e6c4:	5b                   	pop    ebx
c000e6c5:	5e                   	pop    esi
c000e6c6:	5f                   	pop    edi
c000e6c7:	5d                   	pop    ebp
c000e6c8:	ff e0                	jmp    eax
c000e6ca:	66 90                	xchg   ax,ax
c000e6cc:	83 c4 1c             	add    esp,0x1c
c000e6cf:	5b                   	pop    ebx
c000e6d0:	5e                   	pop    esi
c000e6d1:	5f                   	pop    edi
c000e6d2:	5d                   	pop    ebp
c000e6d3:	c3                   	ret    

c000e6d4 <Video::putrect(int, int, int, int, unsigned int)>:
c000e6d4:	55                   	push   ebp
c000e6d5:	57                   	push   edi
c000e6d6:	56                   	push   esi
c000e6d7:	53                   	push   ebx
c000e6d8:	83 ec 1c             	sub    esp,0x1c
c000e6db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e6df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6e3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e6e7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e6eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6f3:	01 df                	add    edi,ebx
c000e6f5:	39 fb                	cmp    ebx,edi
c000e6f7:	7d 1f                	jge    c000e718 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e6f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e6fd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e701:	7d 12                	jge    c000e715 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e703:	8b 16                	mov    edx,DWORD PTR [esi]
c000e705:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e709:	53                   	push   ebx
c000e70a:	55                   	push   ebp
c000e70b:	45                   	inc    ebp
c000e70c:	56                   	push   esi
c000e70d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	eb e8                	jmp    c000e6fd <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e715:	43                   	inc    ebx
c000e716:	eb dd                	jmp    c000e6f5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e718:	83 c4 1c             	add    esp,0x1c
c000e71b:	5b                   	pop    ebx
c000e71c:	5e                   	pop    esi
c000e71d:	5f                   	pop    edi
c000e71e:	5d                   	pop    ebp
c000e71f:	c3                   	ret    

c000e720 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e720:	55                   	push   ebp
c000e721:	57                   	push   edi
c000e722:	31 ff                	xor    edi,edi
c000e724:	56                   	push   esi
c000e725:	53                   	push   ebx
c000e726:	83 ec 1c             	sub    esp,0x1c
c000e729:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e72d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e731:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e738:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e73d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e741:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e745:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e749:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e74c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e750:	01 f9                	add    ecx,edi
c000e752:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e756:	7d 2f                	jge    c000e787 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e758:	31 f6                	xor    esi,esi
c000e75a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e75e:	01 f2                	add    edx,esi
c000e760:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e764:	7d 1a                	jge    c000e780 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e766:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e769:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e76c:	46                   	inc    esi
c000e76d:	51                   	push   ecx
c000e76e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e772:	52                   	push   edx
c000e773:	55                   	push   ebp
c000e774:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e777:	83 c4 10             	add    esp,0x10
c000e77a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e77e:	eb da                	jmp    c000e75a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e780:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e784:	47                   	inc    edi
c000e785:	eb c5                	jmp    c000e74c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e787:	83 c4 1c             	add    esp,0x1c
c000e78a:	5b                   	pop    ebx
c000e78b:	5e                   	pop    esi
c000e78c:	5f                   	pop    edi
c000e78d:	5d                   	pop    ebp
c000e78e:	c3                   	ret    
c000e78f:	90                   	nop

c000e790 <Video::blit(unsigned int*, int, int, int, int)>:
c000e790:	55                   	push   ebp
c000e791:	ba 00 00 00 00       	mov    edx,0x0
c000e796:	57                   	push   edi
c000e797:	56                   	push   esi
c000e798:	53                   	push   ebx
c000e799:	83 ec 1c             	sub    esp,0x1c
c000e79c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e7a0:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e7a4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e7a8:	85 c0                	test   eax,eax
c000e7aa:	0f 49 d0             	cmovns edx,eax
c000e7ad:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c000e7b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e7b8:	89 eb                	mov    ebx,ebp
c000e7ba:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e7be:	01 ea                	add    edx,ebp
c000e7c0:	39 da                	cmp    edx,ebx
c000e7c2:	7e 54                	jle    c000e818 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e7c4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e7ca:	7c 4c                	jl     c000e818 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c000e7cc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e7d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e7d4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7d8:	01 c1                	add    ecx,eax
c000e7da:	39 f9                	cmp    ecx,edi
c000e7dc:	7e 2f                	jle    c000e80d <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c000e7de:	83 c2 04             	add    edx,0x4
c000e7e1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e7e7:	7c 21                	jl     c000e80a <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c000e7e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e7ed:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e7ef:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c000e7f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e7f6:	55                   	push   ebp
c000e7f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e7fb:	56                   	push   esi
c000e7fc:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e7ff:	83 c4 10             	add    esp,0x10
c000e802:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e806:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e80a:	47                   	inc    edi
c000e80b:	eb c7                	jmp    c000e7d4 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c000e80d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000e811:	43                   	inc    ebx
c000e812:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c000e816:	eb a2                	jmp    c000e7ba <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c000e818:	83 c4 1c             	add    esp,0x1c
c000e81b:	5b                   	pop    ebx
c000e81c:	5e                   	pop    esi
c000e81d:	5f                   	pop    edi
c000e81e:	5d                   	pop    ebp
c000e81f:	c3                   	ret    

c000e820 <Video::clearScreen(unsigned int)>:
c000e820:	57                   	push   edi
c000e821:	56                   	push   esi
c000e822:	53                   	push   ebx
c000e823:	31 db                	xor    ebx,ebx
c000e825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e829:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e82f:	7e 1f                	jle    c000e850 <Video::clearScreen(unsigned int)+0x30>
c000e831:	31 ff                	xor    edi,edi
c000e833:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e839:	7e 12                	jle    c000e84d <Video::clearScreen(unsigned int)+0x2d>
c000e83b:	8b 06                	mov    eax,DWORD PTR [esi]
c000e83d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e841:	53                   	push   ebx
c000e842:	57                   	push   edi
c000e843:	47                   	inc    edi
c000e844:	56                   	push   esi
c000e845:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e848:	83 c4 10             	add    esp,0x10
c000e84b:	eb e6                	jmp    c000e833 <Video::clearScreen(unsigned int)+0x13>
c000e84d:	43                   	inc    ebx
c000e84e:	eb d9                	jmp    c000e829 <Video::clearScreen(unsigned int)+0x9>
c000e850:	5b                   	pop    ebx
c000e851:	5e                   	pop    esi
c000e852:	5f                   	pop    edi
c000e853:	c3                   	ret    

c000e854 <Video::putpixel(int, int, unsigned int)>:
c000e854:	c7 44 24 04 48 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021848
c000e85c:	e9 ec 29 00 00       	jmp    c001124d <KePanic(char const*)>
c000e861:	90                   	nop

c000e862 <Video::readPixelApprox(int, int)>:
c000e862:	83 ec 18             	sub    esp,0x18
c000e865:	68 69 18 02 c0       	push   0xc0021869
c000e86a:	e8 de 29 00 00       	call   c001124d <KePanic(char const*)>
c000e86f:	31 c0                	xor    eax,eax
c000e871:	83 c4 1c             	add    esp,0x1c
c000e874:	c3                   	ret    
c000e875:	90                   	nop

c000e876 <Video::Video(char const*)>:
c000e876:	83 ec 0c             	sub    esp,0xc
c000e879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87d:	83 ec 08             	sub    esp,0x8
c000e880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e884:	50                   	push   eax
c000e885:	e8 be df ff ff       	call   c000c848 <Device::Device(char const*)>
c000e88a:	83 c4 10             	add    esp,0x10
c000e88d:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c000e892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e896:	89 10                	mov    DWORD PTR [eax],edx
c000e898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e8a6:	90                   	nop
c000e8a7:	83 c4 0c             	add    esp,0xc
c000e8aa:	c3                   	ret    
c000e8ab:	90                   	nop

c000e8ac <Video::~Video()>:
c000e8ac:	83 ec 0c             	sub    esp,0xc
c000e8af:	ba e4 18 02 c0       	mov    edx,0xc00218e4
c000e8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b8:	89 10                	mov    DWORD PTR [eax],edx
c000e8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	50                   	push   eax
c000e8c2:	e8 eb dc ff ff       	call   c000c5b2 <Device::~Device()>
c000e8c7:	83 c4 10             	add    esp,0x10
c000e8ca:	90                   	nop
c000e8cb:	83 c4 0c             	add    esp,0xc
c000e8ce:	c3                   	ret    
c000e8cf:	90                   	nop

c000e8d0 <Video::~Video()>:
c000e8d0:	83 ec 0c             	sub    esp,0xc
c000e8d3:	83 ec 0c             	sub    esp,0xc
c000e8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8da:	e8 cd ff ff ff       	call   c000e8ac <Video::~Video()>
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	83 ec 08             	sub    esp,0x8
c000e8e5:	68 64 01 00 00       	push   0x164
c000e8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ee:	e8 19 bf ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c000e8f3:	83 c4 10             	add    esp,0x10
c000e8f6:	83 c4 0c             	add    esp,0xc
c000e8f9:	c3                   	ret    

c000e8fa <Video::isMonochrome()>:
c000e8fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8fe:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e904:	c3                   	ret    
c000e905:	90                   	nop

c000e906 <Video::getWidth()>:
c000e906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e90a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e910:	c3                   	ret    
c000e911:	90                   	nop

c000e912 <Video::getHeight()>:
c000e912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e916:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e91c:	c3                   	ret    
c000e91d:	90                   	nop

c000e91e <Video::drawCursor(int, int, unsigned int*, int)>:
c000e91e:	55                   	push   ebp
c000e91f:	57                   	push   edi
c000e920:	56                   	push   esi
c000e921:	53                   	push   ebx
c000e922:	83 ec 2c             	sub    esp,0x2c
c000e925:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e929:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e92d:	83 f8 01             	cmp    eax,0x1
c000e930:	19 c9                	sbb    ecx,ecx
c000e932:	31 db                	xor    ebx,ebx
c000e934:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e938:	89 ce                	mov    esi,ecx
c000e93a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e942:	f7 d6                	not    esi
c000e944:	81 e6 ff ff ff 00    	and    esi,0xffffff
c000e94a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e94e:	01 d8                	add    eax,ebx
c000e950:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e954:	57                   	push   edi
c000e955:	e8 b8 ff ff ff       	call   c000e912 <Video::getHeight()>
c000e95a:	59                   	pop    ecx
c000e95b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e95f:	7e 70                	jle    c000e9d1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e961:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e965:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c000e969:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e96c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e970:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e974:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e97b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e97f:	89 e8                	mov    eax,ebp
c000e981:	83 c0 20             	add    eax,0x20
c000e984:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e988:	57                   	push   edi
c000e989:	e8 78 ff ff ff       	call   c000e906 <Video::getWidth()>
c000e98e:	5a                   	pop    edx
c000e98f:	39 c5                	cmp    ebp,eax
c000e991:	7d 34                	jge    c000e9c7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e993:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e998:	74 05                	je     c000e99f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e99a:	8b 07                	mov    eax,DWORD PTR [edi]
c000e99c:	56                   	push   esi
c000e99d:	eb 0d                	jmp    c000e9ac <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e99f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e9a4:	74 12                	je     c000e9b8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e9a6:	8b 07                	mov    eax,DWORD PTR [edi]
c000e9a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9b0:	55                   	push   ebp
c000e9b1:	57                   	push   edi
c000e9b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e9b5:	83 c4 10             	add    esp,0x10
c000e9b8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e9bc:	45                   	inc    ebp
c000e9bd:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e9c1:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c000e9c5:	75 c1                	jne    c000e988 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e9c7:	43                   	inc    ebx
c000e9c8:	83 fb 20             	cmp    ebx,0x20
c000e9cb:	0f 85 79 ff ff ff    	jne    c000e94a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e9d1:	83 c4 2c             	add    esp,0x2c
c000e9d4:	5b                   	pop    ebx
c000e9d5:	5e                   	pop    esi
c000e9d6:	5f                   	pop    edi
c000e9d7:	5d                   	pop    ebp
c000e9d8:	c3                   	ret    
c000e9d9:	90                   	nop

c000e9da <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e9da:	55                   	push   ebp
c000e9db:	57                   	push   edi
c000e9dc:	56                   	push   esi
c000e9dd:	53                   	push   ebx
c000e9de:	83 ec 28             	sub    esp,0x28
c000e9e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9e5:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c000e9e9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e9ed:	0f b6 73 0f          	movzx  esi,BYTE PTR [ebx+0xf]
c000e9f1:	c1 e7 08             	shl    edi,0x8
c000e9f4:	01 c7                	add    edi,eax
c000e9f6:	0f b6 43 0e          	movzx  eax,BYTE PTR [ebx+0xe]
c000e9fa:	c1 e6 08             	shl    esi,0x8
c000e9fd:	01 f0                	add    eax,esi
c000e9ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ea03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea07:	0f af c7             	imul   eax,edi
c000ea0a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ea11:	50                   	push   eax
c000ea12:	e8 bc 90 ff ff       	call   c0007ad3 <malloc>
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	85 c0                	test   eax,eax
c000ea1c:	89 c5                	mov    ebp,eax
c000ea1e:	75 10                	jne    c000ea30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	68 94 18 02 c0       	push   0xc0021894
c000ea28:	e8 20 28 00 00       	call   c001124d <KePanic(char const*)>
c000ea2d:	83 c4 10             	add    esp,0x10
c000ea30:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ea34:	ba 12 00 00 00       	mov    edx,0x12
c000ea39:	85 c0                	test   eax,eax
c000ea3b:	74 11                	je     c000ea4e <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ea3d:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ea41:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ea45:	c1 fa 03             	sar    edx,0x3
c000ea48:	0f af d1             	imul   edx,ecx
c000ea4b:	83 c2 12             	add    edx,0x12
c000ea4e:	85 ff                	test   edi,edi
c000ea50:	74 06                	je     c000ea58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ea52:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ea56:	75 12                	jne    c000ea6a <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ea58:	83 ec 0c             	sub    esp,0xc
c000ea5b:	68 a4 18 02 c0       	push   0xc00218a4
c000ea60:	e8 a5 be ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000ea65:	e9 b8 00 00 00       	jmp    c000eb22 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ea6a:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ea6e:	83 f9 02             	cmp    ecx,0x2
c000ea71:	0f 85 96 00 00 00    	jne    c000eb0d <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ea77:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ea7c:	75 0e                	jne    c000ea8c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ea7e:	85 c0                	test   eax,eax
c000ea80:	75 0a                	jne    c000ea8c <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ea82:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ea85:	83 e8 18             	sub    eax,0x18
c000ea88:	a8 f7                	test   al,0xf7
c000ea8a:	74 0a                	je     c000ea96 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	68 b9 18 02 c0       	push   0xc00218b9
c000ea94:	eb 7f                	jmp    c000eb15 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ea96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea9e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eaa6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000eaaa:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eaae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000eab6:	75 0c                	jne    c000eac4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eab8:	0f b6 4c 13 03       	movzx  ecx,BYTE PTR [ebx+edx*1+0x3]
c000eabd:	c1 e1 18             	shl    ecx,0x18
c000eac0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000eac4:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eac9:	46                   	inc    esi
c000eaca:	89 c8                	mov    eax,ecx
c000eacc:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ead1:	c1 e0 10             	shl    eax,0x10
c000ead4:	c1 e1 08             	shl    ecx,0x8
c000ead7:	09 c1                	or     ecx,eax
c000ead9:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eadd:	09 c1                	or     ecx,eax
c000eadf:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eae3:	89 4c b5 fc          	mov    DWORD PTR [ebp+esi*4-0x4],ecx
c000eae7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000eaeb:	c1 f8 03             	sar    eax,0x3
c000eaee:	01 c2                	add    edx,eax
c000eaf0:	89 f0                	mov    eax,esi
c000eaf2:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eaf6:	39 c7                	cmp    edi,eax
c000eaf8:	7f b0                	jg     c000eaaa <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eafa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eafe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eb02:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eb05:	7e 22                	jle    c000eb29 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eb07:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000eb0b:	eb 99                	jmp    c000eaa6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eb0d:	50                   	push   eax
c000eb0e:	50                   	push   eax
c000eb0f:	51                   	push   ecx
c000eb10:	68 c7 18 02 c0       	push   0xc00218c7
c000eb15:	e8 f0 bd ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c000eb1a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eb1d:	e8 c1 8f ff ff       	call   c0007ae3 <free>
c000eb22:	83 c4 10             	add    esp,0x10
c000eb25:	31 ed                	xor    ebp,ebp
c000eb27:	eb 0f                	jmp    c000eb38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2d:	89 38                	mov    DWORD PTR [eax],edi
c000eb2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000eb36:	89 38                	mov    DWORD PTR [eax],edi
c000eb38:	83 c4 1c             	add    esp,0x1c
c000eb3b:	89 e8                	mov    eax,ebp
c000eb3d:	5b                   	pop    ebx
c000eb3e:	5e                   	pop    esi
c000eb3f:	5f                   	pop    edi
c000eb40:	5d                   	pop    ebp
c000eb41:	c3                   	ret    

c000eb42 <Video::putTGA(int, int, unsigned char*, int)>:
c000eb42:	55                   	push   ebp
c000eb43:	57                   	push   edi
c000eb44:	56                   	push   esi
c000eb45:	53                   	push   ebx
c000eb46:	83 ec 28             	sub    esp,0x28
c000eb49:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb4d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eb51:	50                   	push   eax
c000eb52:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb56:	50                   	push   eax
c000eb57:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb5f:	57                   	push   edi
c000eb60:	e8 75 fe ff ff       	call   c000e9da <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eb65:	83 c4 20             	add    esp,0x20
c000eb68:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eb6c:	85 c0                	test   eax,eax
c000eb6e:	74 35                	je     c000eba5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eb70:	89 c6                	mov    esi,eax
c000eb72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb76:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eb7a:	39 d8                	cmp    eax,ebx
c000eb7c:	7e 27                	jle    c000eba5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eb7e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb82:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eb86:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000eb8a:	39 e9                	cmp    ecx,ebp
c000eb8c:	7e 14                	jle    c000eba2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eb8e:	83 c6 04             	add    esi,0x4
c000eb91:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000eb93:	ff 76 fc             	push   DWORD PTR [esi-0x4]
c000eb96:	53                   	push   ebx
c000eb97:	55                   	push   ebp
c000eb98:	45                   	inc    ebp
c000eb99:	57                   	push   edi
c000eb9a:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb9d:	83 c4 10             	add    esp,0x10
c000eba0:	eb e0                	jmp    c000eb82 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eba2:	43                   	inc    ebx
c000eba3:	eb cd                	jmp    c000eb72 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eba5:	83 c4 1c             	add    esp,0x1c
c000eba8:	5b                   	pop    ebx
c000eba9:	5e                   	pop    esi
c000ebaa:	5f                   	pop    edi
c000ebab:	5d                   	pop    ebp
c000ebac:	c3                   	ret    
c000ebad:	66 90                	xchg   ax,ax
c000ebaf:	90                   	nop

c000ebb0 <ACPI::close(int, int, void*)>:
c000ebb0:	83 ec 1c             	sub    esp,0x1c
c000ebb3:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000ebbb:	74 0b                	je     c000ebc8 <ACPI::close(int, int, void*)+0x18>
c000ebbd:	b8 00 00 00 00       	mov    eax,0x0
c000ebc2:	e9 99 00 00 00       	jmp    c000ec60 <ACPI::close(int, int, void*)+0xb0>
c000ebc7:	90                   	nop
c000ebc8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ebcd:	75 29                	jne    c000ebf8 <ACPI::close(int, int, void*)+0x48>
c000ebcf:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ebd4:	85 c0                	test   eax,eax
c000ebd6:	74 08                	je     c000ebe0 <ACPI::close(int, int, void*)+0x30>
c000ebd8:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ebdd:	ff d0                	call   eax
c000ebdf:	90                   	nop
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	68 28 19 02 c0       	push   0xc0021928
c000ebe8:	e8 60 26 00 00       	call   c001124d <KePanic(char const*)>
c000ebed:	83 c4 10             	add    esp,0x10
c000ebf0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf5:	eb 69                	jmp    c000ec60 <ACPI::close(int, int, void*)+0xb0>
c000ebf7:	90                   	nop
c000ebf8:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ebfd:	75 59                	jne    c000ec58 <ACPI::close(int, int, void*)+0xa8>
c000ebff:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec04:	85 c0                	test   eax,eax
c000ec06:	74 08                	je     c000ec10 <ACPI::close(int, int, void*)+0x60>
c000ec08:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ec0d:	ff d0                	call   eax
c000ec0f:	90                   	nop
c000ec10:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ec15:	8d 76 00             	lea    esi,[esi+0x0]
c000ec18:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec1d:	83 e0 02             	and    eax,0x2
c000ec20:	74 1e                	je     c000ec40 <ACPI::close(int, int, void*)+0x90>
c000ec22:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec2d:	89 c2                	mov    edx,eax
c000ec2f:	ec                   	in     al,dx
c000ec30:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ec34:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ec38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec3c:	eb da                	jmp    c000ec18 <ACPI::close(int, int, void*)+0x68>
c000ec3e:	66 90                	xchg   ax,ax
c000ec40:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ec47:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ec4c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ec50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec54:	ee                   	out    dx,al
c000ec55:	8d 76 00             	lea    esi,[esi+0x0]
c000ec58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec60:	83 c4 1c             	add    esp,0x1c
c000ec63:	c3                   	ret    

c000ec64 <findRSDP()>:
c000ec64:	83 ec 1c             	sub    esp,0x1c
c000ec67:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec6c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec72:	83 e0 04             	and    eax,0x4
c000ec75:	0f b6 c0             	movzx  eax,al
c000ec78:	85 c0                	test   eax,eax
c000ec7a:	75 08                	jne    c000ec84 <findRSDP()+0x20>
c000ec7c:	b8 00 00 00 00       	mov    eax,0x0
c000ec81:	eb 75                	jmp    c000ecf8 <findRSDP()+0x94>
c000ec83:	90                   	nop
c000ec84:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ec89:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ec8e:	7f 1c                	jg     c000ecac <findRSDP()+0x48>
c000ec90:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec95:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ec9b:	83 e2 fb             	and    edx,0xfffffffb
c000ec9e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000eca4:	b8 00 00 00 00       	mov    eax,0x0
c000eca9:	eb 4d                	jmp    c000ecf8 <findRSDP()+0x94>
c000ecab:	90                   	nop
c000ecac:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ecb4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ecbc:	77 32                	ja     c000ecf0 <findRSDP()+0x8c>
c000ecbe:	83 ec 04             	sub    esp,0x4
c000ecc1:	6a 08                	push   0x8
c000ecc3:	68 c3 19 02 c0       	push   0xc00219c3
c000ecc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eccc:	e8 af 16 ff ff       	call   c0000380 <memcmp>
c000ecd1:	83 c4 10             	add    esp,0x10
c000ecd4:	85 c0                	test   eax,eax
c000ecd6:	0f 94 c0             	sete   al
c000ecd9:	0f b6 c0             	movzx  eax,al
c000ecdc:	85 c0                	test   eax,eax
c000ecde:	74 08                	je     c000ece8 <findRSDP()+0x84>
c000ece0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ece4:	eb 12                	jmp    c000ecf8 <findRSDP()+0x94>
c000ece6:	66 90                	xchg   ax,ax
c000ece8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000eced:	eb c5                	jmp    c000ecb4 <findRSDP()+0x50>
c000ecef:	90                   	nop
c000ecf0:	b8 00 00 00 00       	mov    eax,0x0
c000ecf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf8:	83 c4 1c             	add    esp,0x1c
c000ecfb:	c3                   	ret    

c000ecfc <loadACPITables(unsigned char*)>:
c000ecfc:	57                   	push   edi
c000ecfd:	56                   	push   esi
c000ecfe:	53                   	push   ebx
c000ecff:	83 ec 60             	sub    esp,0x60
c000ed02:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ed07:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ed0d:	83 e0 04             	and    eax,0x4
c000ed10:	0f b6 c0             	movzx  eax,al
c000ed13:	85 c0                	test   eax,eax
c000ed15:	0f 84 41 02 00 00    	je     c000ef5c <loadACPITables(unsigned char*)+0x260>
c000ed1b:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed20:	0f b6 c0             	movzx  eax,al
c000ed23:	85 c0                	test   eax,eax
c000ed25:	74 79                	je     c000eda0 <loadACPITables(unsigned char*)+0xa4>
c000ed27:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed2b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed2f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed36:	83 e8 24             	sub    eax,0x24
c000ed39:	c1 e8 03             	shr    eax,0x3
c000ed3c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ed40:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ed48:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed4c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ed50:	0f 8d ba 00 00 00    	jge    c000ee10 <loadACPITables(unsigned char*)+0x114>
c000ed56:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed5a:	83 c0 24             	add    eax,0x24
c000ed5d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ed61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ed65:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ed69:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed6d:	c1 e0 03             	shl    eax,0x3
c000ed70:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ed74:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed78:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ed7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed7d:	89 c1                	mov    ecx,eax
c000ed7f:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed84:	8d 50 01             	lea    edx,[eax+0x1]
c000ed87:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed8d:	89 ca                	mov    edx,ecx
c000ed8f:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed96:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ed9b:	eb ab                	jmp    c000ed48 <loadACPITables(unsigned char*)+0x4c>
c000ed9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eda0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eda4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eda8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edaf:	83 e8 24             	sub    eax,0x24
c000edb2:	c1 e8 02             	shr    eax,0x2
c000edb5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edb9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000edc1:	8d 76 00             	lea    esi,[esi+0x0]
c000edc4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000edc8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000edcc:	7d 42                	jge    c000ee10 <loadACPITables(unsigned char*)+0x114>
c000edce:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edd2:	83 c0 24             	add    eax,0x24
c000edd5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000edd9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eddd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ede1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ede5:	c1 e0 02             	shl    eax,0x2
c000ede8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000edec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edf0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000edf2:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000edf7:	8d 50 01             	lea    edx,[eax+0x1]
c000edfa:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ee00:	89 ca                	mov    edx,ecx
c000ee02:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ee09:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ee0e:	eb b4                	jmp    c000edc4 <loadACPITables(unsigned char*)+0xc8>
c000ee10:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee18:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee1d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee21:	0f 8d 39 01 00 00    	jge    c000ef60 <loadACPITables(unsigned char*)+0x264>
c000ee27:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee2b:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ee32:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee3a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee42:	25 ff 0f 00 00       	and    eax,0xfff
c000ee47:	89 c6                	mov    esi,eax
c000ee49:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee4f:	83 ec 0c             	sub    esp,0xc
c000ee52:	6a 01                	push   0x1
c000ee54:	e8 9c a7 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee66:	83 ec 0c             	sub    esp,0xc
c000ee69:	6a 01                	push   0x1
c000ee6b:	6a 01                	push   0x1
c000ee6d:	50                   	push   eax
c000ee6e:	52                   	push   edx
c000ee6f:	53                   	push   ebx
c000ee70:	e8 93 b0 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee75:	83 c4 20             	add    esp,0x20
c000ee78:	09 f0                	or     eax,esi
c000ee7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee7e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee82:	c1 e0 03             	shl    eax,0x3
c000ee85:	05 20 89 02 c0       	add    eax,0xc0028920
c000ee8a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee96:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ee9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eeaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eeae:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eeb2:	89 c6                	mov    esi,eax
c000eeb4:	89 d7                	mov    edi,edx
c000eeb6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eeb8:	89 c8                	mov    eax,ecx
c000eeba:	89 fa                	mov    edx,edi
c000eebc:	89 f3                	mov    ebx,esi
c000eebe:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eec2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eeca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eed1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eed5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eed9:	05 00 10 00 00       	add    eax,0x1000
c000eede:	c1 e8 0c             	shr    eax,0xc
c000eee1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000eeed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eef1:	25 ff 0f 00 00       	and    eax,0xfff
c000eef6:	89 c6                	mov    esi,eax
c000eef8:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eefe:	83 ec 0c             	sub    esp,0xc
c000ef01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef05:	e8 eb a6 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000ef0a:	83 c4 10             	add    esp,0x10
c000ef0d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ef11:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef17:	83 ec 0c             	sub    esp,0xc
c000ef1a:	6a 01                	push   0x1
c000ef1c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef20:	50                   	push   eax
c000ef21:	52                   	push   edx
c000ef22:	53                   	push   ebx
c000ef23:	e8 e0 af ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef28:	83 c4 20             	add    esp,0x20
c000ef2b:	09 f0                	or     eax,esi
c000ef2d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef35:	83 ec 0c             	sub    esp,0xc
c000ef38:	50                   	push   eax
c000ef39:	e8 cb a9 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c000ef3e:	83 c4 10             	add    esp,0x10
c000ef41:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef45:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ef49:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ef50:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ef55:	e9 be fe ff ff       	jmp    c000ee18 <loadACPITables(unsigned char*)+0x11c>
c000ef5a:	66 90                	xchg   ax,ax
c000ef5c:	90                   	nop
c000ef5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef60:	83 c4 60             	add    esp,0x60
c000ef63:	5b                   	pop    ebx
c000ef64:	5e                   	pop    esi
c000ef65:	5f                   	pop    edi
c000ef66:	c3                   	ret    
c000ef67:	90                   	nop

c000ef68 <findRSDT(unsigned char*)>:
c000ef68:	57                   	push   edi
c000ef69:	56                   	push   esi
c000ef6a:	53                   	push   ebx
c000ef6b:	83 ec 50             	sub    esp,0x50
c000ef6e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ef73:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef79:	83 e0 04             	and    eax,0x4
c000ef7c:	0f b6 c0             	movzx  eax,al
c000ef7f:	85 c0                	test   eax,eax
c000ef81:	75 0d                	jne    c000ef90 <findRSDT(unsigned char*)+0x28>
c000ef83:	b8 00 00 00 00       	mov    eax,0x0
c000ef88:	e9 2b 01 00 00       	jmp    c000f0b8 <findRSDT(unsigned char*)+0x150>
c000ef8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef90:	89 e0                	mov    eax,esp
c000ef92:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef96:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef9e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000efa6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000efaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000efae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000efb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000efb6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000efba:	89 c6                	mov    esi,eax
c000efbc:	89 d7                	mov    edi,edx
c000efbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efc0:	89 c8                	mov    eax,ecx
c000efc2:	89 fa                	mov    edx,edi
c000efc4:	89 f3                	mov    ebx,esi
c000efc6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000efca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000efce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000efd2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000efd6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000efda:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000efe2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efe6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efea:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000efee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eff2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eff6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000effa:	25 ff 0f 00 00       	and    eax,0xfff
c000efff:	89 c6                	mov    esi,eax
c000f001:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f007:	83 ec 0c             	sub    esp,0xc
c000f00a:	6a 02                	push   0x2
c000f00c:	e8 e4 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f011:	83 c4 10             	add    esp,0x10
c000f014:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f018:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f01e:	83 ec 0c             	sub    esp,0xc
c000f021:	6a 01                	push   0x1
c000f023:	6a 02                	push   0x2
c000f025:	50                   	push   eax
c000f026:	52                   	push   edx
c000f027:	53                   	push   ebx
c000f028:	e8 db ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f02d:	83 c4 20             	add    esp,0x20
c000f030:	09 f0                	or     eax,esi
c000f032:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f036:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f03a:	25 ff 0f 00 00       	and    eax,0xfff
c000f03f:	89 c6                	mov    esi,eax
c000f041:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f047:	83 ec 0c             	sub    esp,0xc
c000f04a:	6a 02                	push   0x2
c000f04c:	e8 a4 a5 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c000f051:	83 c4 10             	add    esp,0x10
c000f054:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f058:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f05e:	83 ec 0c             	sub    esp,0xc
c000f061:	6a 01                	push   0x1
c000f063:	6a 02                	push   0x2
c000f065:	50                   	push   eax
c000f066:	52                   	push   edx
c000f067:	53                   	push   ebx
c000f068:	e8 9b ae ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f06d:	83 c4 20             	add    esp,0x20
c000f070:	09 f0                	or     eax,esi
c000f072:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f076:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f07b:	85 c0                	test   eax,eax
c000f07d:	75 11                	jne    c000f090 <findRSDT(unsigned char*)+0x128>
c000f07f:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f086:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f08a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f08e:	eb 24                	jmp    c000f0b4 <findRSDT(unsigned char*)+0x14c>
c000f090:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f095:	83 f8 02             	cmp    eax,0x2
c000f098:	75 12                	jne    c000f0ac <findRSDT(unsigned char*)+0x144>
c000f09a:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f0a1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f0a5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f0a9:	eb 09                	jmp    c000f0b4 <findRSDT(unsigned char*)+0x14c>
c000f0ab:	90                   	nop
c000f0ac:	b8 00 00 00 00       	mov    eax,0x0
c000f0b1:	eb 05                	jmp    c000f0b8 <findRSDT(unsigned char*)+0x150>
c000f0b3:	90                   	nop
c000f0b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f0b8:	83 c4 50             	add    esp,0x50
c000f0bb:	5b                   	pop    ebx
c000f0bc:	5e                   	pop    esi
c000f0bd:	5f                   	pop    edi
c000f0be:	c3                   	ret    
c000f0bf:	90                   	nop

c000f0c0 <findDataTable(unsigned char*, char*)>:
c000f0c0:	83 ec 1c             	sub    esp,0x1c
c000f0c3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0c8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0ce:	83 e0 04             	and    eax,0x4
c000f0d1:	0f b6 c0             	movzx  eax,al
c000f0d4:	85 c0                	test   eax,eax
c000f0d6:	75 08                	jne    c000f0e0 <findDataTable(unsigned char*, char*)+0x20>
c000f0d8:	b8 00 00 00 00       	mov    eax,0x0
c000f0dd:	eb 5d                	jmp    c000f13c <findDataTable(unsigned char*, char*)+0x7c>
c000f0df:	90                   	nop
c000f0e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f0e8:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f0ed:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f0f1:	7d 41                	jge    c000f134 <findDataTable(unsigned char*, char*)+0x74>
c000f0f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0f7:	c1 e0 03             	shl    eax,0x3
c000f0fa:	05 20 89 02 c0       	add    eax,0xc0028920
c000f0ff:	83 ec 04             	sub    esp,0x4
c000f102:	6a 04                	push   0x4
c000f104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f108:	50                   	push   eax
c000f109:	e8 72 12 ff ff       	call   c0000380 <memcmp>
c000f10e:	83 c4 10             	add    esp,0x10
c000f111:	85 c0                	test   eax,eax
c000f113:	0f 94 c0             	sete   al
c000f116:	0f b6 c0             	movzx  eax,al
c000f119:	85 c0                	test   eax,eax
c000f11b:	74 0f                	je     c000f12c <findDataTable(unsigned char*, char*)+0x6c>
c000f11d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f121:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f128:	eb 12                	jmp    c000f13c <findDataTable(unsigned char*, char*)+0x7c>
c000f12a:	66 90                	xchg   ax,ax
c000f12c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f131:	eb b5                	jmp    c000f0e8 <findDataTable(unsigned char*, char*)+0x28>
c000f133:	90                   	nop
c000f134:	b8 00 00 00 00       	mov    eax,0x0
c000f139:	8d 76 00             	lea    esi,[esi+0x0]
c000f13c:	83 c4 1c             	add    esp,0x1c
c000f13f:	c3                   	ret    

c000f140 <scanMADT()>:
c000f140:	53                   	push   ebx
c000f141:	83 ec 38             	sub    esp,0x38
c000f144:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f149:	25 00 04 00 00       	and    eax,0x400
c000f14e:	74 14                	je     c000f164 <scanMADT()+0x24>
c000f150:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f155:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f15b:	83 e2 fb             	and    edx,0xfffffffb
c000f15e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f164:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f169:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f16f:	83 e0 04             	and    eax,0x4
c000f172:	0f b6 c0             	movzx  eax,al
c000f175:	85 c0                	test   eax,eax
c000f177:	0f 84 6b 04 00 00    	je     c000f5e8 <scanMADT()+0x4a8>
c000f17d:	e8 e2 fa ff ff       	call   c000ec64 <findRSDP()>
c000f182:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f187:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f18c:	85 c0                	test   eax,eax
c000f18e:	75 1c                	jne    c000f1ac <scanMADT()+0x6c>
c000f190:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f195:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f19b:	83 e2 fb             	and    edx,0xfffffffb
c000f19e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1a4:	e9 47 04 00 00       	jmp    c000f5f0 <scanMADT()+0x4b0>
c000f1a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f1ac:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f1b1:	83 ec 0c             	sub    esp,0xc
c000f1b4:	50                   	push   eax
c000f1b5:	e8 ae fd ff ff       	call   c000ef68 <findRSDT(unsigned char*)>
c000f1ba:	83 c4 10             	add    esp,0x10
c000f1bd:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f1c2:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f1c7:	85 c0                	test   eax,eax
c000f1c9:	75 19                	jne    c000f1e4 <scanMADT()+0xa4>
c000f1cb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1d0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1d6:	83 e2 fb             	and    edx,0xfffffffb
c000f1d9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1df:	e9 0c 04 00 00       	jmp    c000f5f0 <scanMADT()+0x4b0>
c000f1e4:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f1e9:	83 ec 0c             	sub    esp,0xc
c000f1ec:	50                   	push   eax
c000f1ed:	e8 0a fb ff ff       	call   c000ecfc <loadACPITables(unsigned char*)>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f1fa:	83 ec 08             	sub    esp,0x8
c000f1fd:	68 cc 19 02 c0       	push   0xc00219cc
c000f202:	50                   	push   eax
c000f203:	e8 b8 fe ff ff       	call   c000f0c0 <findDataTable(unsigned char*, char*)>
c000f208:	83 c4 10             	add    esp,0x10
c000f20b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f20f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f214:	75 1a                	jne    c000f230 <scanMADT()+0xf0>
c000f216:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f21b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f221:	83 e2 fe             	and    edx,0xfffffffe
c000f224:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f22a:	e9 c1 03 00 00       	jmp    c000f5f0 <scanMADT()+0x4b0>
c000f22f:	90                   	nop
c000f230:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f238:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f23c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f23f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f243:	0f 87 a7 03 00 00    	ja     c000f5f0 <scanMADT()+0x4b0>
c000f249:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f251:	0f 87 99 03 00 00    	ja     c000f5f0 <scanMADT()+0x4b0>
c000f257:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f25b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f25f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f263:	8d 50 01             	lea    edx,[eax+0x1]
c000f266:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f26a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f26e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f272:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f276:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f27a:	8d 50 01             	lea    edx,[eax+0x1]
c000f27d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f281:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f285:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f289:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f28d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f292:	83 f8 02             	cmp    eax,0x2
c000f295:	0f 86 51 03 00 00    	jbe    c000f5ec <scanMADT()+0x4ac>
c000f29b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f2a0:	85 c0                	test   eax,eax
c000f2a2:	75 58                	jne    c000f2fc <scanMADT()+0x1bc>
c000f2a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a8:	8d 50 01             	lea    edx,[eax+0x1]
c000f2ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2af:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f2b5:	0f b6 d2             	movzx  edx,dl
c000f2b8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f2bc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f2c0:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f2c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ca:	8d 50 01             	lea    edx,[eax+0x1]
c000f2cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2d1:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f2d7:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f2da:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f2e0:	0f b6 d2             	movzx  edx,dl
c000f2e3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f2e7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f2eb:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f2f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2f6:	e9 d9 02 00 00       	jmp    c000f5d4 <scanMADT()+0x494>
c000f2fb:	90                   	nop
c000f2fc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f301:	83 f8 01             	cmp    eax,0x1
c000f304:	0f 85 1a 01 00 00    	jne    c000f424 <scanMADT()+0x2e4>
c000f30a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f30e:	8d 50 01             	lea    edx,[eax+0x1]
c000f311:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f315:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f31b:	0f b6 d2             	movzx  edx,dl
c000f31e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f322:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f326:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f32c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f331:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f335:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f339:	01 d0                	add    eax,edx
c000f33b:	83 c0 2c             	add    eax,0x2c
c000f33e:	8a 00                	mov    al,BYTE PTR [eax]
c000f340:	0f b6 d0             	movzx  edx,al
c000f343:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f347:	8d 48 01             	lea    ecx,[eax+0x1]
c000f34a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f34e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f352:	0f b6 c0             	movzx  eax,al
c000f355:	c1 e0 08             	shl    eax,0x8
c000f358:	89 d1                	mov    ecx,edx
c000f35a:	09 c1                	or     ecx,eax
c000f35c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f360:	8d 50 02             	lea    edx,[eax+0x2]
c000f363:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f367:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f36b:	0f b6 c0             	movzx  eax,al
c000f36e:	c1 e0 10             	shl    eax,0x10
c000f371:	09 c1                	or     ecx,eax
c000f373:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f377:	8d 50 03             	lea    edx,[eax+0x3]
c000f37a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f37e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f382:	0f b6 c0             	movzx  eax,al
c000f385:	c1 e0 18             	shl    eax,0x18
c000f388:	09 c1                	or     ecx,eax
c000f38a:	89 ca                	mov    edx,ecx
c000f38c:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f391:	0f b6 c0             	movzx  eax,al
c000f394:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f39b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3a0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a8:	01 d0                	add    eax,edx
c000f3aa:	83 c0 2c             	add    eax,0x2c
c000f3ad:	8a 00                	mov    al,BYTE PTR [eax]
c000f3af:	0f b6 d0             	movzx  edx,al
c000f3b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3bd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3c1:	0f b6 c0             	movzx  eax,al
c000f3c4:	c1 e0 08             	shl    eax,0x8
c000f3c7:	89 d1                	mov    ecx,edx
c000f3c9:	09 c1                	or     ecx,eax
c000f3cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3cf:	8d 50 02             	lea    edx,[eax+0x2]
c000f3d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3d6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3da:	0f b6 c0             	movzx  eax,al
c000f3dd:	c1 e0 10             	shl    eax,0x10
c000f3e0:	09 c1                	or     ecx,eax
c000f3e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e6:	8d 50 03             	lea    edx,[eax+0x3]
c000f3e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3f1:	0f b6 c0             	movzx  eax,al
c000f3f4:	c1 e0 18             	shl    eax,0x18
c000f3f7:	09 c1                	or     ecx,eax
c000f3f9:	89 ca                	mov    edx,ecx
c000f3fb:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f400:	0f b6 c0             	movzx  eax,al
c000f403:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f40a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f40f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f414:	83 c0 01             	add    eax,0x1
c000f417:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f41c:	e9 b3 01 00 00       	jmp    c000f5d4 <scanMADT()+0x494>
c000f421:	8d 76 00             	lea    esi,[esi+0x0]
c000f424:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f429:	83 f8 02             	cmp    eax,0x2
c000f42c:	0f 85 ea 00 00 00    	jne    c000f51c <scanMADT()+0x3dc>
c000f432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f436:	8d 50 01             	lea    edx,[eax+0x1]
c000f439:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f43d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f441:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f445:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f449:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f44d:	8d 50 01             	lea    edx,[eax+0x1]
c000f450:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f454:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f458:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f45c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f460:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f468:	01 d0                	add    eax,edx
c000f46a:	83 c0 2c             	add    eax,0x2c
c000f46d:	8a 00                	mov    al,BYTE PTR [eax]
c000f46f:	0f b6 d0             	movzx  edx,al
c000f472:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f476:	8d 48 01             	lea    ecx,[eax+0x1]
c000f479:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f47d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f481:	0f b6 c0             	movzx  eax,al
c000f484:	c1 e0 08             	shl    eax,0x8
c000f487:	89 d1                	mov    ecx,edx
c000f489:	09 c1                	or     ecx,eax
c000f48b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48f:	8d 50 02             	lea    edx,[eax+0x2]
c000f492:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f496:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f49a:	0f b6 c0             	movzx  eax,al
c000f49d:	c1 e0 10             	shl    eax,0x10
c000f4a0:	09 c1                	or     ecx,eax
c000f4a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4a6:	8d 50 03             	lea    edx,[eax+0x3]
c000f4a9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4ad:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f4b1:	0f b6 c0             	movzx  eax,al
c000f4b4:	c1 e0 18             	shl    eax,0x18
c000f4b7:	09 c8                	or     eax,ecx
c000f4b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f4bd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ca:	01 d0                	add    eax,edx
c000f4cc:	83 c0 2c             	add    eax,0x2c
c000f4cf:	8a 00                	mov    al,BYTE PTR [eax]
c000f4d1:	0f b6 d0             	movzx  edx,al
c000f4d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4d8:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4df:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4e3:	0f b6 c0             	movzx  eax,al
c000f4e6:	c1 e0 08             	shl    eax,0x8
c000f4e9:	09 d0                	or     eax,edx
c000f4eb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f4f0:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4f5:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f4fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f4fe:	88 90 c8 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcf38],dl
c000f504:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f509:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000f50e:	66 89 94 00 c0 8b 02 c0 	mov    WORD PTR [eax+eax*1-0x3ffd7440],dx
c000f516:	e9 b9 00 00 00       	jmp    c000f5d4 <scanMADT()+0x494>
c000f51b:	90                   	nop
c000f51c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f521:	83 f8 04             	cmp    eax,0x4
c000f524:	0f 85 9a 00 00 00    	jne    c000f5c4 <scanMADT()+0x484>
c000f52a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f52e:	8d 50 01             	lea    edx,[eax+0x1]
c000f531:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f539:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f53d:	0f b6 c0             	movzx  eax,al
c000f540:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f544:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f548:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f54c:	01 d0                	add    eax,edx
c000f54e:	83 c0 2c             	add    eax,0x2c
c000f551:	8a 00                	mov    al,BYTE PTR [eax]
c000f553:	0f b6 d0             	movzx  edx,al
c000f556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55a:	8d 48 01             	lea    ecx,[eax+0x1]
c000f55d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f561:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f565:	0f b6 c0             	movzx  eax,al
c000f568:	c1 e0 08             	shl    eax,0x8
c000f56b:	09 d0                	or     eax,edx
c000f56d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f571:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f576:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f57a:	8d 50 01             	lea    edx,[eax+0x1]
c000f57d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f581:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f585:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f589:	0f b6 c0             	movzx  eax,al
c000f58c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f594:	c1 e0 08             	shl    eax,0x8
c000f597:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f59b:	89 c1                	mov    ecx,eax
c000f59d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5a1:	c1 e0 18             	shl    eax,0x18
c000f5a4:	89 c3                	mov    ebx,eax
c000f5a6:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f5ab:	8d 50 01             	lea    edx,[eax+0x1]
c000f5ae:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f5b4:	09 d9                	or     ecx,ebx
c000f5b6:	89 ca                	mov    edx,ecx
c000f5b8:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f5bf:	eb 13                	jmp    c000f5d4 <scanMADT()+0x494>
c000f5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5c4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5c9:	83 f8 05             	cmp    eax,0x5
c000f5cc:	75 06                	jne    c000f5d4 <scanMADT()+0x494>
c000f5ce:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f5d3:	90                   	nop
c000f5d4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f5d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5dd:	01 d0                	add    eax,edx
c000f5df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5e3:	e9 50 fc ff ff       	jmp    c000f238 <scanMADT()+0xf8>
c000f5e8:	90                   	nop
c000f5e9:	eb 05                	jmp    c000f5f0 <scanMADT()+0x4b0>
c000f5eb:	90                   	nop
c000f5ec:	90                   	nop
c000f5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f5f0:	83 c4 38             	add    esp,0x38
c000f5f3:	5b                   	pop    ebx
c000f5f4:	c3                   	ret    
c000f5f5:	90                   	nop
c000f5f6:	66 90                	xchg   ax,ax

c000f5f8 <ACPI::ACPI()>:
c000f5f8:	83 ec 0c             	sub    esp,0xc
c000f5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5ff:	83 ec 08             	sub    esp,0x8
c000f602:	68 d1 19 02 c0       	push   0xc00219d1
c000f607:	50                   	push   eax
c000f608:	e8 3b d2 ff ff       	call   c000c848 <Device::Device(char const*)>
c000f60d:	83 c4 10             	add    esp,0x10
c000f610:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c000f615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f619:	89 10                	mov    DWORD PTR [eax],edx
c000f61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f61f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f62a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f638:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f642:	e8 f9 fa ff ff       	call   c000f140 <scanMADT()>
c000f647:	90                   	nop
c000f648:	83 c4 0c             	add    esp,0xc
c000f64b:	c3                   	ret    

c000f64c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f64c:	83 ec 2c             	sub    esp,0x2c
c000f64f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f653:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f657:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c000f65b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000f65f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f664:	88 c8                	mov    al,cl
c000f666:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f66a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f66f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f677:	90                   	nop
c000f678:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f67c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f682:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f686:	0f 8d b0 00 00 00    	jge    c000f73c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f68c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f690:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f694:	83 c2 2a             	add    edx,0x2a
c000f697:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f69b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f6a0:	0f b7 c0             	movzx  eax,ax
c000f6a3:	39 c2                	cmp    edx,eax
c000f6a5:	0f 85 85 00 00 00    	jne    c000f730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6b3:	83 c2 2a             	add    edx,0x2a
c000f6b6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f6ba:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f6bf:	0f b6 c0             	movzx  eax,al
c000f6c2:	39 c2                	cmp    edx,eax
c000f6c4:	75 6a                	jne    c000f730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6c6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f6cb:	85 c0                	test   eax,eax
c000f6cd:	74 3d                	je     c000f70c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f6cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6d7:	83 c2 2a             	add    edx,0x2a
c000f6da:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f6de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6e5:	39 c2                	cmp    edx,eax
c000f6e7:	74 13                	je     c000f6fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f6e9:	83 ec 0c             	sub    esp,0xc
c000f6ec:	68 4c 19 02 c0       	push   0xc002194c
c000f6f1:	e8 57 1b 00 00       	call   c001124d <KePanic(char const*)>
c000f6f6:	83 c4 10             	add    esp,0x10
c000f6f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6fc:	83 ec 0c             	sub    esp,0xc
c000f6ff:	68 d6 19 02 c0       	push   0xc00219d6
c000f704:	e8 44 1b 00 00       	call   c001124d <KePanic(char const*)>
c000f709:	83 c4 10             	add    esp,0x10
c000f70c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f714:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f718:	83 c2 2a             	add    edx,0x2a
c000f71b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f71f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f721:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f724:	89 01                	mov    DWORD PTR [ecx],eax
c000f726:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f729:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f72e:	66 90                	xchg   ax,ax
c000f730:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f735:	e9 3e ff ff ff       	jmp    c000f678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f73a:	66 90                	xchg   ax,ax
c000f73c:	90                   	nop
c000f73d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f741:	83 c4 2c             	add    esp,0x2c
c000f744:	c2 04 00             	ret    0x4
c000f747:	90                   	nop

c000f748 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f748:	83 ec 1c             	sub    esp,0x1c
c000f74b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f74f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f753:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f757:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f75c:	88 c8                	mov    al,cl
c000f75e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f762:	88 d0                	mov    al,dl
c000f764:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f76c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f776:	83 c2 2a             	add    edx,0x2a
c000f779:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f77d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c000f781:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f785:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f78b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f78f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f796:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c000f79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f79f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7a5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f7a9:	83 c0 01             	add    eax,0x1
c000f7ac:	88 c1                	mov    cl,al
c000f7ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7b2:	83 c2 2a             	add    edx,0x2a
c000f7b5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f7b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7c7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7ca:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f7ce:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f7d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7dc:	8d 50 01             	lea    edx,[eax+0x1]
c000f7df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7e3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f7e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7f3:	3d 00 02 00 00       	cmp    eax,0x200
c000f7f8:	75 12                	jne    c000f80c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f7fa:	83 ec 0c             	sub    esp,0xc
c000f7fd:	68 e5 19 02 c0       	push   0xc00219e5
c000f802:	e8 46 1a 00 00       	call   c001124d <KePanic(char const*)>
c000f807:	83 c4 10             	add    esp,0x10
c000f80a:	66 90                	xchg   ax,ax
c000f80c:	90                   	nop
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    
c000f811:	90                   	nop
c000f812:	66 90                	xchg   ax,ax

c000f814 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f814:	b8 00 00 00 00       	mov    eax,0x0
c000f819:	c3                   	ret    
c000f81a:	66 90                	xchg   ax,ax

c000f81c <ACPI::detectPCI()>:
c000f81c:	53                   	push   ebx
c000f81d:	83 ec 28             	sub    esp,0x28
c000f820:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f825:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f82a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f82f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f835:	83 e0 04             	and    eax,0x4
c000f838:	0f b6 c0             	movzx  eax,al
c000f83b:	85 c0                	test   eax,eax
c000f83d:	74 2d                	je     c000f86c <ACPI::detectPCI()+0x50>
c000f83f:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f844:	83 ec 08             	sub    esp,0x8
c000f847:	68 02 1a 02 c0       	push   0xc0021a02
c000f84c:	50                   	push   eax
c000f84d:	e8 6e f8 ff ff       	call   c000f0c0 <findDataTable(unsigned char*, char*)>
c000f852:	83 c4 10             	add    esp,0x10
c000f855:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f859:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f85e:	74 0c                	je     c000f86c <ACPI::detectPCI()+0x50>
c000f860:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f865:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f86a:	66 90                	xchg   ax,ax
c000f86c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f878:	8a 00                	mov    al,BYTE PTR [eax]
c000f87a:	0f b6 c0             	movzx  eax,al
c000f87d:	83 f8 01             	cmp    eax,0x1
c000f880:	75 0e                	jne    c000f890 <ACPI::detectPCI()+0x74>
c000f882:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f887:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f88c:	eb 2e                	jmp    c000f8bc <ACPI::detectPCI()+0xa0>
c000f88e:	66 90                	xchg   ax,ax
c000f890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f894:	8a 00                	mov    al,BYTE PTR [eax]
c000f896:	0f b6 c0             	movzx  eax,al
c000f899:	83 f8 02             	cmp    eax,0x2
c000f89c:	75 1e                	jne    c000f8bc <ACPI::detectPCI()+0xa0>
c000f89e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8a3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8a8:	85 c0                	test   eax,eax
c000f8aa:	74 10                	je     c000f8bc <ACPI::detectPCI()+0xa0>
c000f8ac:	83 ec 0c             	sub    esp,0xc
c000f8af:	68 7c 19 02 c0       	push   0xc002197c
c000f8b4:	e8 94 19 00 00       	call   c001124d <KePanic(char const*)>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f8c0:	83 f0 01             	xor    eax,0x1
c000f8c3:	0f b6 c0             	movzx  eax,al
c000f8c6:	85 c0                	test   eax,eax
c000f8c8:	74 46                	je     c000f910 <ACPI::detectPCI()+0xf4>
c000f8ca:	e8 61 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f8cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f8d8:	75 0e                	jne    c000f8e8 <ACPI::detectPCI()+0xcc>
c000f8da:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8df:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8e4:	eb 2a                	jmp    c000f910 <ACPI::detectPCI()+0xf4>
c000f8e6:	66 90                	xchg   ax,ax
c000f8e8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f8ed:	75 21                	jne    c000f910 <ACPI::detectPCI()+0xf4>
c000f8ef:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8f4:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8f9:	85 c0                	test   eax,eax
c000f8fb:	74 13                	je     c000f910 <ACPI::detectPCI()+0xf4>
c000f8fd:	83 ec 0c             	sub    esp,0xc
c000f900:	68 7c 19 02 c0       	push   0xc002197c
c000f905:	e8 43 19 00 00       	call   c001124d <KePanic(char const*)>
c000f90a:	83 c4 10             	add    esp,0x10
c000f90d:	8d 76 00             	lea    esi,[esi+0x0]
c000f910:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f915:	85 c0                	test   eax,eax
c000f917:	0f 84 87 00 00 00    	je     c000f9a4 <ACPI::detectPCI()+0x188>
c000f91d:	83 ec 0c             	sub    esp,0xc
c000f920:	68 07 1a 02 c0       	push   0xc0021a07
c000f925:	e8 4f 12 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f935:	83 ec 0c             	sub    esp,0xc
c000f938:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f93c:	e8 92 81 ff ff       	call   c0007ad3 <malloc>
c000f941:	83 c4 10             	add    esp,0x10
c000f944:	89 c3                	mov    ebx,eax
c000f946:	83 ec 0c             	sub    esp,0xc
c000f949:	53                   	push   ebx
c000f94a:	e8 ef b2 00 00       	call   c001ac3e <PCI::PCI()>
c000f94f:	83 c4 10             	add    esp,0x10
c000f952:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f956:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f95a:	83 ec 08             	sub    esp,0x8
c000f95d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f961:	50                   	push   eax
c000f962:	e8 49 cd ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c000f967:	83 c4 10             	add    esp,0x10
c000f96a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f96e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f970:	83 c0 08             	add    eax,0x8
c000f973:	8b 00                	mov    eax,DWORD PTR [eax]
c000f975:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f97a:	85 d2                	test   edx,edx
c000f97c:	74 0a                	je     c000f988 <ACPI::detectPCI()+0x16c>
c000f97e:	ba 01 00 00 00       	mov    edx,0x1
c000f983:	eb 0b                	jmp    c000f990 <ACPI::detectPCI()+0x174>
c000f985:	8d 76 00             	lea    esi,[esi+0x0]
c000f988:	ba 02 00 00 00       	mov    edx,0x2
c000f98d:	8d 76 00             	lea    esi,[esi+0x0]
c000f990:	6a 00                	push   0x0
c000f992:	6a 00                	push   0x0
c000f994:	52                   	push   edx
c000f995:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f999:	ff d0                	call   eax
c000f99b:	83 c4 10             	add    esp,0x10
c000f99e:	e9 91 00 00 00       	jmp    c000fa34 <ACPI::detectPCI()+0x218>
c000f9a3:	90                   	nop
c000f9a4:	83 ec 0c             	sub    esp,0xc
c000f9a7:	68 1f 1a 02 c0       	push   0xc0021a1f
c000f9ac:	e8 c8 11 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000f9b1:	83 c4 10             	add    esp,0x10
c000f9b4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f9c2:	e8 0c 81 ff ff       	call   c0007ad3 <malloc>
c000f9c7:	83 c4 10             	add    esp,0x10
c000f9ca:	89 c3                	mov    ebx,eax
c000f9cc:	83 ec 0c             	sub    esp,0xc
c000f9cf:	53                   	push   ebx
c000f9d0:	e8 11 be 00 00       	call   c001b7e6 <IDE::IDE()>
c000f9d5:	83 c4 10             	add    esp,0x10
c000f9d8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f9dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9e0:	83 ec 08             	sub    esp,0x8
c000f9e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9e7:	50                   	push   eax
c000f9e8:	e8 c3 cc ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c000f9ed:	83 c4 10             	add    esp,0x10
c000f9f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9f4:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f9fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa02:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fa0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa0f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa1e:	83 c0 08             	add    eax,0x8
c000fa21:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa23:	6a 00                	push   0x0
c000fa25:	6a 00                	push   0x0
c000fa27:	6a 00                	push   0x0
c000fa29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa2d:	ff d0                	call   eax
c000fa2f:	83 c4 10             	add    esp,0x10
c000fa32:	66 90                	xchg   ax,ax
c000fa34:	90                   	nop
c000fa35:	83 c4 28             	add    esp,0x28
c000fa38:	5b                   	pop    ebx
c000fa39:	c3                   	ret    
c000fa3a:	66 90                	xchg   ax,ax

c000fa3c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fa3c:	83 ec 1c             	sub    esp,0x1c
c000fa3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa43:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa46:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa4a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa4f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fa54:	83 ec 08             	sub    esp,0x8
c000fa57:	52                   	push   edx
c000fa58:	50                   	push   eax
c000fa59:	e8 3c 77 ff ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c000fa5e:	83 c4 10             	add    esp,0x10
c000fa61:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fa65:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa6a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fa6f:	83 ec 04             	sub    esp,0x4
c000fa72:	6a 01                	push   0x1
c000fa74:	52                   	push   edx
c000fa75:	50                   	push   eax
c000fa76:	e8 37 78 ff ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	90                   	nop
c000fa7f:	83 c4 1c             	add    esp,0x1c
c000fa82:	c3                   	ret    
c000fa83:	90                   	nop

c000fa84 <ACPI::sleep()>:
c000fa84:	83 ec 0c             	sub    esp,0xc
c000fa87:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa8c:	85 c0                	test   eax,eax
c000fa8e:	74 08                	je     c000fa98 <ACPI::sleep()+0x14>
c000fa90:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa95:	ff d0                	call   eax
c000fa97:	90                   	nop
c000fa98:	90                   	nop
c000fa99:	83 c4 0c             	add    esp,0xc
c000fa9c:	c3                   	ret    
c000fa9d:	90                   	nop
c000fa9e:	66 90                	xchg   ax,ax

c000faa0 <ACPI::open(int, int, void*)>:
c000faa0:	55                   	push   ebp
c000faa1:	89 e5                	mov    ebp,esp
c000faa3:	53                   	push   ebx
c000faa4:	81 ec 74 01 00 00    	sub    esp,0x174
c000faaa:	83 ec 0c             	sub    esp,0xc
c000faad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fab0:	e8 67 fd ff ff       	call   c000f81c <ACPI::detectPCI()>
c000fab5:	83 c4 10             	add    esp,0x10
c000fab8:	83 ec 0c             	sub    esp,0xc
c000fabb:	68 a4 19 02 c0       	push   0xc00219a4
c000fac0:	e8 b4 10 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000fac5:	83 c4 10             	add    esp,0x10
c000fac8:	b8 4c 05 00 00       	mov    eax,0x54c
c000facd:	8a 00                	mov    al,BYTE PTR [eax]
c000facf:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000fad2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000fad6:	83 f8 01             	cmp    eax,0x1
c000fad9:	75 15                	jne    c000faf0 <ACPI::open(int, int, void*)+0x50>
c000fadb:	83 ec 0c             	sub    esp,0xc
c000fade:	68 31 13 02 c0       	push   0xc0021331
c000fae3:	e8 7a 4b 00 00       	call   c0014662 <Thr::loadKernelSymbolTable(char const*)>
c000fae8:	83 c4 10             	add    esp,0x10
c000faeb:	eb 33                	jmp    c000fb20 <ACPI::open(int, int, void*)+0x80>
c000faed:	8d 76 00             	lea    esi,[esi+0x0]
c000faf0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c000faf4:	3d bb 00 00 00       	cmp    eax,0xbb
c000faf9:	75 15                	jne    c000fb10 <ACPI::open(int, int, void*)+0x70>
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	68 34 1a 02 c0       	push   0xc0021a34
c000fb03:	e8 5a 4b 00 00       	call   c0014662 <Thr::loadKernelSymbolTable(char const*)>
c000fb08:	83 c4 10             	add    esp,0x10
c000fb0b:	eb 13                	jmp    c000fb20 <ACPI::open(int, int, void*)+0x80>
c000fb0d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb10:	83 ec 0c             	sub    esp,0xc
c000fb13:	68 52 1a 02 c0       	push   0xc0021a52
c000fb18:	e8 30 17 00 00       	call   c001124d <KePanic(char const*)>
c000fb1d:	83 c4 10             	add    esp,0x10
c000fb20:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fb24:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c000fb2b:	83 ec 0c             	sub    esp,0xc
c000fb2e:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c000fb31:	e8 9d 7f ff ff       	call   c0007ad3 <malloc>
c000fb36:	83 c4 10             	add    esp,0x10
c000fb39:	89 c3                	mov    ebx,eax
c000fb3b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fb40:	83 ec 04             	sub    esp,0x4
c000fb43:	50                   	push   eax
c000fb44:	68 6c 1a 02 c0       	push   0xc0021a6c
c000fb49:	53                   	push   ebx
c000fb4a:	e8 51 bc ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fb55:	83 ec 08             	sub    esp,0x8
c000fb58:	6a 01                	push   0x1
c000fb5a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb5d:	e8 fa bc ff ff       	call   c000b85c <File::open(FileOpenMode)>
c000fb62:	83 c4 10             	add    esp,0x10
c000fb65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000fb68:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c000fb6c:	75 12                	jne    c000fb80 <ACPI::open(int, int, void*)+0xe0>
c000fb6e:	83 ec 0c             	sub    esp,0xc
c000fb71:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb74:	e8 41 bd ff ff       	call   c000b8ba <File::close()>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	eb 06                	jmp    c000fb84 <ACPI::open(int, int, void*)+0xe4>
c000fb7e:	66 90                	xchg   ax,ax
c000fb80:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fb84:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000fb88:	74 16                	je     c000fba0 <ACPI::open(int, int, void*)+0x100>
c000fb8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb8f:	83 c0 08             	add    eax,0x8
c000fb92:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb94:	83 ec 0c             	sub    esp,0xc
c000fb97:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb9a:	ff d0                	call   eax
c000fb9c:	83 c4 10             	add    esp,0x10
c000fb9f:	90                   	nop
c000fba0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c000fba3:	83 f0 01             	xor    eax,0x1
c000fba6:	0f b6 c0             	movzx  eax,al
c000fba9:	85 c0                	test   eax,eax
c000fbab:	74 3b                	je     c000fbe8 <ACPI::open(int, int, void*)+0x148>
c000fbad:	83 ec 0c             	sub    esp,0xc
c000fbb0:	68 8a 1a 02 c0       	push   0xc0021a8a
c000fbb5:	e8 bf 0f 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000fbba:	83 c4 10             	add    esp,0x10
c000fbbd:	83 ec 04             	sub    esp,0x4
c000fbc0:	6a 0c                	push   0xc
c000fbc2:	68 a5 1a 02 c0       	push   0xc0021aa5
c000fbc7:	68 b6 1a 02 c0       	push   0xc0021ab6
c000fbcc:	e8 3d 3d 00 00       	call   c001390e <Reg::readIntWithDefault(char*, char*, int)>
c000fbd1:	83 c4 10             	add    esp,0x10
c000fbd4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000fbd7:	83 ec 0c             	sub    esp,0xc
c000fbda:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000fbdd:	e8 38 9c ff ff       	call   c000981a <Virt::setupPageSwapping(int)>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbe8:	83 ec 0c             	sub    esp,0xc
c000fbeb:	68 f5 05 02 c0       	push   0xc00205f5
c000fbf0:	e8 84 0f 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000fbf5:	83 c4 10             	add    esp,0x10
c000fbf8:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fbfb:	83 ec 08             	sub    esp,0x8
c000fbfe:	6a 13                	push   0x13
c000fc00:	50                   	push   eax
c000fc01:	e8 c2 cd ff ff       	call   c000c9c8 <getDevicesOfType(DeviceType)>
c000fc06:	83 c4 0c             	add    esp,0xc
c000fc09:	8d 76 00             	lea    esi,[esi+0x0]
c000fc0c:	83 ec 0c             	sub    esp,0xc
c000fc0f:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc12:	50                   	push   eax
c000fc13:	e8 d8 fd 00 00       	call   c001f9f0 <LinkedList<Device>::isEmpty()>
c000fc18:	83 c4 10             	add    esp,0x10
c000fc1b:	83 f0 01             	xor    eax,0x1
c000fc1e:	0f b6 c0             	movzx  eax,al
c000fc21:	85 c0                	test   eax,eax
c000fc23:	0f 84 1f 01 00 00    	je     c000fd48 <ACPI::open(int, int, void*)+0x2a8>
c000fc29:	83 ec 0c             	sub    esp,0xc
c000fc2c:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc2f:	50                   	push   eax
c000fc30:	e8 d7 fd 00 00       	call   c001fa0c <LinkedList<Device>::getFirstElement()>
c000fc35:	83 c4 10             	add    esp,0x10
c000fc38:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c000fc3b:	83 ec 0c             	sub    esp,0xc
c000fc3e:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fc41:	50                   	push   eax
c000fc42:	e8 cd fd 00 00       	call   c001fa14 <LinkedList<Device>::removeFirst()>
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c000fc4d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000fc50:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c000fc53:	b8 24 00 00 00       	mov    eax,0x24
c000fc58:	83 e0 fc             	and    eax,0xfffffffc
c000fc5b:	89 c3                	mov    ebx,eax
c000fc5d:	b8 00 00 00 00       	mov    eax,0x0
c000fc62:	66 90                	xchg   ax,ax
c000fc64:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c000fc6b:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c000fc72:	83 c0 04             	add    eax,0x4
c000fc75:	39 d8                	cmp    eax,ebx
c000fc77:	72 eb                	jb     c000fc64 <ACPI::open(int, int, void*)+0x1c4>
c000fc79:	83 ec 08             	sub    esp,0x8
c000fc7c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c000fc82:	50                   	push   eax
c000fc83:	83 ec 24             	sub    esp,0x24
c000fc86:	89 e1                	mov    ecx,esp
c000fc88:	b8 24 00 00 00       	mov    eax,0x24
c000fc8d:	83 e0 fc             	and    eax,0xfffffffc
c000fc90:	89 c3                	mov    ebx,eax
c000fc92:	b8 00 00 00 00       	mov    eax,0x0
c000fc97:	90                   	nop
c000fc98:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c000fc9f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c000fca2:	83 c0 04             	add    eax,0x4
c000fca5:	39 d8                	cmp    eax,ebx
c000fca7:	72 ef                	jb     c000fc98 <ACPI::open(int, int, void*)+0x1f8>
c000fca9:	e8 78 b4 00 00       	call   c001b126 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fcae:	83 c4 30             	add    esp,0x30
c000fcb1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c000fcb4:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c000fcb8:	0f 84 4e ff ff ff    	je     c000fc0c <ACPI::open(int, int, void*)+0x16c>
c000fcbe:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c000fcc5:	83 ec 0c             	sub    esp,0xc
c000fcc8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c000fccb:	e8 03 7e ff ff       	call   c0007ad3 <malloc>
c000fcd0:	83 c4 10             	add    esp,0x10
c000fcd3:	89 c3                	mov    ebx,eax
c000fcd5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fcda:	83 ec 04             	sub    esp,0x4
c000fcdd:	50                   	push   eax
c000fcde:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fce1:	53                   	push   ebx
c000fce2:	e8 b9 ba ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c000fce7:	83 c4 10             	add    esp,0x10
c000fcea:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c000fced:	83 ec 0c             	sub    esp,0xc
c000fcf0:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fcf3:	e8 28 be ff ff       	call   c000bb20 <File::exists()>
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	0f b6 c0             	movzx  eax,al
c000fcfe:	85 c0                	test   eax,eax
c000fd00:	74 22                	je     c000fd24 <ACPI::open(int, int, void*)+0x284>
c000fd02:	83 ec 08             	sub    esp,0x8
c000fd05:	6a 01                	push   0x1
c000fd07:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c000fd0a:	e8 d5 53 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000fd0f:	83 c4 10             	add    esp,0x10
c000fd12:	83 ec 08             	sub    esp,0x8
c000fd15:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fd18:	50                   	push   eax
c000fd19:	e8 06 56 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000fd1e:	83 c4 10             	add    esp,0x10
c000fd21:	8d 76 00             	lea    esi,[esi+0x0]
c000fd24:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c000fd28:	0f 84 de fe ff ff    	je     c000fc0c <ACPI::open(int, int, void*)+0x16c>
c000fd2e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000fd31:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd33:	83 c0 08             	add    eax,0x8
c000fd36:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c000fd3e:	ff d0                	call   eax
c000fd40:	83 c4 10             	add    esp,0x10
c000fd43:	e9 c4 fe ff ff       	jmp    c000fc0c <ACPI::open(int, int, void*)+0x16c>
c000fd48:	83 ec 0c             	sub    esp,0xc
c000fd4b:	8d 45 b8             	lea    eax,[ebp-0x48]
c000fd4e:	50                   	push   eax
c000fd4f:	e8 98 fc 00 00       	call   c001f9ec <LinkedList<Device>::~LinkedList()>
c000fd54:	83 c4 10             	add    esp,0x10
c000fd57:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fd5d:	83 ec 08             	sub    esp,0x8
c000fd60:	6a 01                	push   0x1
c000fd62:	68 bd 1a 02 c0       	push   0xc0021abd
c000fd67:	e8 78 53 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000fd6c:	83 c4 10             	add    esp,0x10
c000fd6f:	83 ec 08             	sub    esp,0x8
c000fd72:	53                   	push   ebx
c000fd73:	50                   	push   eax
c000fd74:	e8 ab 55 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000fd79:	83 c4 10             	add    esp,0x10
c000fd7c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd81:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd87:	83 e0 04             	and    eax,0x4
c000fd8a:	0f b6 c0             	movzx  eax,al
c000fd8d:	85 c0                	test   eax,eax
c000fd8f:	0f 84 e3 00 00 00    	je     c000fe78 <ACPI::open(int, int, void*)+0x3d8>
c000fd95:	83 ec 0c             	sub    esp,0xc
c000fd98:	68 da 1a 02 c0       	push   0xc0021ada
c000fd9d:	e8 d7 0d 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c000fda2:	83 c4 10             	add    esp,0x10
c000fda5:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c000fdac:	83 ec 0c             	sub    esp,0xc
c000fdaf:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c000fdb2:	e8 1c 7d ff ff       	call   c0007ad3 <malloc>
c000fdb7:	83 c4 10             	add    esp,0x10
c000fdba:	89 c3                	mov    ebx,eax
c000fdbc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fdc1:	83 ec 04             	sub    esp,0x4
c000fdc4:	50                   	push   eax
c000fdc5:	68 f7 1a 02 c0       	push   0xc0021af7
c000fdca:	53                   	push   ebx
c000fdcb:	e8 d0 b9 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c000fdd6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fdda:	74 1c                	je     c000fdf8 <ACPI::open(int, int, void*)+0x358>
c000fddc:	83 ec 0c             	sub    esp,0xc
c000fddf:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fde2:	e8 39 bd ff ff       	call   c000bb20 <File::exists()>
c000fde7:	83 c4 10             	add    esp,0x10
c000fdea:	0f b6 c0             	movzx  eax,al
c000fded:	85 c0                	test   eax,eax
c000fdef:	74 07                	je     c000fdf8 <ACPI::open(int, int, void*)+0x358>
c000fdf1:	b0 01                	mov    al,0x1
c000fdf3:	eb 07                	jmp    c000fdfc <ACPI::open(int, int, void*)+0x35c>
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fdf8:	b0 00                	mov    al,0x0
c000fdfa:	66 90                	xchg   ax,ax
c000fdfc:	0f b6 c0             	movzx  eax,al
c000fdff:	85 c0                	test   eax,eax
c000fe01:	74 21                	je     c000fe24 <ACPI::open(int, int, void*)+0x384>
c000fe03:	83 ec 08             	sub    esp,0x8
c000fe06:	6a 01                	push   0x1
c000fe08:	68 f7 1a 02 c0       	push   0xc0021af7
c000fe0d:	e8 d2 52 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	83 ec 08             	sub    esp,0x8
c000fe18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe1b:	50                   	push   eax
c000fe1c:	e8 03 55 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe28:	74 1e                	je     c000fe48 <ACPI::open(int, int, void*)+0x3a8>
c000fe2a:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c000fe2e:	74 18                	je     c000fe48 <ACPI::open(int, int, void*)+0x3a8>
c000fe30:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c000fe33:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe35:	83 c0 08             	add    eax,0x8
c000fe38:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe3a:	83 ec 0c             	sub    esp,0xc
c000fe3d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c000fe40:	ff d0                	call   eax
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	8d 76 00             	lea    esi,[esi+0x0]
c000fe48:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fe4d:	83 ec 08             	sub    esp,0x8
c000fe50:	68 14 1b 02 c0       	push   0xc0021b14
c000fe55:	50                   	push   eax
c000fe56:	e8 65 f2 ff ff       	call   c000f0c0 <findDataTable(unsigned char*, char*)>
c000fe5b:	83 c4 10             	add    esp,0x10
c000fe5e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c000fe61:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c000fe65:	74 11                	je     c000fe78 <ACPI::open(int, int, void*)+0x3d8>
c000fe67:	83 ec 08             	sub    esp,0x8
c000fe6a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c000fe6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe70:	e8 c7 fb ff ff       	call   c000fa3c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe75:	83 c4 10             	add    esp,0x10
c000fe78:	b8 00 00 00 00       	mov    eax,0x0
c000fe7d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fe80:	c9                   	leave  
c000fe81:	c3                   	ret    

c000fe82 <CPU::close(int, int, void*)>:
c000fe82:	31 c0                	xor    eax,eax
c000fe84:	c3                   	ret    
c000fe85:	90                   	nop

c000fe86 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fe86:	60                   	pusha  
c000fe87:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe93:	9c                   	pushf  
c000fe94:	fa                   	cli    
c000fe95:	0f 09                	wbinvd 
c000fe97:	0f 30                	wrmsr  
c000fe99:	9d                   	popf   
c000fe9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe9e:	89 02                	mov    DWORD PTR [edx],eax
c000fea0:	61                   	popa   
c000fea1:	c3                   	ret    

c000fea2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fea2:	60                   	pusha  
c000fea3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fea7:	9c                   	pushf  
c000fea8:	fa                   	cli    
c000fea9:	0f 09                	wbinvd 
c000feab:	31 c0                	xor    eax,eax
c000fead:	31 d2                	xor    edx,edx
c000feaf:	0f 32                	rdmsr  
c000feb1:	9d                   	popf   
c000feb2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feb6:	89 02                	mov    DWORD PTR [edx],eax
c000feb8:	61                   	popa   
c000feb9:	c3                   	ret    

c000feba <CPU::AMD_K6_writeback(int, int, int)>:
c000feba:	56                   	push   esi
c000febb:	53                   	push   ebx
c000febc:	83 ec 10             	sub    esp,0x10
c000febf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fec8:	75 5d                	jne    c000ff27 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000feca:	83 f8 08             	cmp    eax,0x8
c000fecd:	75 09                	jne    c000fed8 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fecf:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fed4:	7e 13                	jle    c000fee9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fed6:	eb 30                	jmp    c000ff08 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fed8:	83 f8 06             	cmp    eax,0x6
c000fedb:	7c 4a                	jl     c000ff27 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fedd:	83 f8 07             	cmp    eax,0x7
c000fee0:	7e 07                	jle    c000fee9 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fee2:	83 f8 09             	cmp    eax,0x9
c000fee5:	74 21                	je     c000ff08 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fee7:	eb 3e                	jmp    c000ff27 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fee9:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000feef:	89 e6                	mov    esi,esp
c000fef1:	56                   	push   esi
c000fef2:	68 82 00 00 c0       	push   0xc0000082
c000fef7:	e8 a6 ff ff ff       	call   c000fea2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fefc:	c1 eb 15             	shr    ebx,0x15
c000feff:	56                   	push   esi
c000ff00:	83 e3 7e             	and    ebx,0x7e
c000ff03:	6a 00                	push   0x0
c000ff05:	53                   	push   ebx
c000ff06:	eb 12                	jmp    c000ff1a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff08:	89 e3                	mov    ebx,esp
c000ff0a:	53                   	push   ebx
c000ff0b:	68 82 00 00 c0       	push   0xc0000082
c000ff10:	e8 8d ff ff ff       	call   c000fea2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff15:	53                   	push   ebx
c000ff16:	6a 00                	push   0x0
c000ff18:	6a 00                	push   0x0
c000ff1a:	68 82 00 00 c0       	push   0xc0000082
c000ff1f:	e8 62 ff ff ff       	call   c000fe86 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff24:	83 c4 18             	add    esp,0x18
c000ff27:	83 c4 10             	add    esp,0x10
c000ff2a:	5b                   	pop    ebx
c000ff2b:	5e                   	pop    esi
c000ff2c:	c3                   	ret    
c000ff2d:	90                   	nop

c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff2e:	55                   	push   ebp
c000ff2f:	57                   	push   edi
c000ff30:	56                   	push   esi
c000ff31:	53                   	push   ebx
c000ff32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff36:	39 05 d8 30 02 c0    	cmp    DWORD PTR ds:0xc00230d8,eax
c000ff3c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff40:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff44:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff48:	75 23                	jne    c000ff6d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff4a:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ff4f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff53:	89 06                	mov    DWORD PTR [esi],eax
c000ff55:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ff5a:	89 07                	mov    DWORD PTR [edi],eax
c000ff5c:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ff61:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff64:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ff69:	89 02                	mov    DWORD PTR [edx],eax
c000ff6b:	eb 3f                	jmp    c000ffac <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff6d:	31 c9                	xor    ecx,ecx
c000ff6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff73:	0f a2                	cpuid  
c000ff75:	89 06                	mov    DWORD PTR [esi],eax
c000ff77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff7b:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff7d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff80:	89 10                	mov    DWORD PTR [eax],edx
c000ff82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff86:	a3 d8 30 02 c0       	mov    ds:0xc00230d8,eax
c000ff8b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff8d:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ff92:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff94:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ff99:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff9c:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ffa1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffa7:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ffac:	5b                   	pop    ebx
c000ffad:	5e                   	pop    esi
c000ffae:	5f                   	pop    edi
c000ffaf:	5d                   	pop    ebp
c000ffb0:	c3                   	ret    
c000ffb1:	90                   	nop

c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>:
c000ffb2:	83 ec 10             	sub    esp,0x10
c000ffb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb9:	50                   	push   eax
c000ffba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffbe:	50                   	push   eax
c000ffbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc3:	50                   	push   eax
c000ffc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffc8:	50                   	push   eax
c000ffc9:	6a 01                	push   0x1
c000ffcb:	e8 5e ff ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffd0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffd4:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ffd8:	0f 95 c0             	setne  al
c000ffdb:	83 c4 24             	add    esp,0x24
c000ffde:	c3                   	ret    
c000ffdf:	90                   	nop

c000ffe0 <CPU::cpuidCheckECX(unsigned int)>:
c000ffe0:	83 ec 10             	sub    esp,0x10
c000ffe3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe7:	50                   	push   eax
c000ffe8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffec:	50                   	push   eax
c000ffed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff1:	50                   	push   eax
c000fff2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff6:	50                   	push   eax
c000fff7:	6a 01                	push   0x1
c000fff9:	e8 30 ff ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fffe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010002:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010006:	0f 95 c0             	setne  al
c0010009:	83 c4 24             	add    esp,0x24
c001000c:	c3                   	ret    
c001000d:	90                   	nop

c001000e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010015:	50                   	push   eax
c0010016:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001a:	50                   	push   eax
c001001b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001f:	50                   	push   eax
c0010020:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010024:	50                   	push   eax
c0010025:	6a 07                	push   0x7
c0010027:	e8 02 ff ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001002c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010030:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0010034:	0f 95 c0             	setne  al
c0010037:	83 c4 24             	add    esp,0x24
c001003a:	c3                   	ret    
c001003b:	90                   	nop

c001003c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001003c:	83 ec 10             	sub    esp,0x10
c001003f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010043:	50                   	push   eax
c0010044:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010048:	50                   	push   eax
c0010049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004d:	50                   	push   eax
c001004e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010052:	50                   	push   eax
c0010053:	6a 07                	push   0x7
c0010055:	e8 d4 fe ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001005a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001005e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010062:	0f 95 c0             	setne  al
c0010065:	83 c4 24             	add    esp,0x24
c0010068:	c3                   	ret    
c0010069:	90                   	nop

c001006a <CPU::CPU()>:
c001006a:	83 ec 0c             	sub    esp,0xc
c001006d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010071:	83 ec 08             	sub    esp,0x8
c0010074:	68 39 1c 02 c0       	push   0xc0021c39
c0010079:	50                   	push   eax
c001007a:	e8 c9 c7 ff ff       	call   c000c848 <Device::Device(char const*)>
c001007f:	83 c4 10             	add    esp,0x10
c0010082:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c0010087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008b:	89 10                	mov    DWORD PTR [eax],edx
c001008d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010091:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001009b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009f:	05 78 01 00 00       	add    eax,0x178
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	50                   	push   eax
c00100a8:	e8 cf 72 ff ff       	call   c000737c <GDT::GDT()>
c00100ad:	83 c4 10             	add    esp,0x10
c00100b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b4:	05 7c 09 00 00       	add    eax,0x97c
c00100b9:	83 ec 0c             	sub    esp,0xc
c00100bc:	50                   	push   eax
c00100bd:	e8 0a 75 ff ff       	call   c00075cc <IDT::IDT()>
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c9:	05 7c 11 00 00       	add    eax,0x117c
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	50                   	push   eax
c00100d2:	e8 55 8e ff ff       	call   c0008f2c <TSS::TSS()>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100de:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00100e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e9:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00100f3:	90                   	nop
c00100f4:	83 c4 0c             	add    esp,0xc
c00100f7:	c3                   	ret    

c00100f8 <CPU::displayFeatures()>:
c00100f8:	c3                   	ret    
c00100f9:	90                   	nop

c00100fa <CPU::detectFeatures()>:
c00100fa:	55                   	push   ebp
c00100fb:	57                   	push   edi
c00100fc:	56                   	push   esi
c00100fd:	53                   	push   ebx
c00100fe:	83 ec 30             	sub    esp,0x30
c0010101:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010105:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001010f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010115:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001011c:	6a 0d                	push   0xd
c001011e:	6a 00                	push   0x0
c0010120:	55                   	push   ebp
c0010121:	e8 ca 03 ff ff       	call   c00004f0 <memset>
c0010126:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001012b:	83 c4 10             	add    esp,0x10
c001012e:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c0010135:	0f 84 db 05 00 00    	je     c0010716 <CPU::detectFeatures()+0x61c>
c001013b:	83 ec 0c             	sub    esp,0xc
c001013e:	89 ef                	mov    edi,ebp
c0010140:	6a 10                	push   0x10
c0010142:	e8 6b fe ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0010147:	83 e0 01             	and    eax,0x1
c001014a:	8d 14 00             	lea    edx,[eax+eax*1]
c001014d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010153:	83 e0 fd             	and    eax,0xfffffffd
c0010156:	09 d0                	or     eax,edx
c0010158:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001015e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010165:	e8 48 fe ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c001016a:	83 e0 01             	and    eax,0x1
c001016d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010174:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001017a:	83 e0 fb             	and    eax,0xfffffffb
c001017d:	09 d0                	or     eax,edx
c001017f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010185:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001018c:	e8 21 fe ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0010191:	83 e0 01             	and    eax,0x1
c0010194:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001019b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101a1:	83 e0 f7             	and    eax,0xfffffff7
c00101a4:	09 d0                	or     eax,edx
c00101a6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101ac:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00101b3:	e8 fa fd ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c00101b8:	83 e0 01             	and    eax,0x1
c00101bb:	c1 e0 04             	shl    eax,0x4
c00101be:	89 c2                	mov    edx,eax
c00101c0:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101c6:	83 e0 ef             	and    eax,0xffffffef
c00101c9:	09 d0                	or     eax,edx
c00101cb:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101d1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00101d8:	e8 d5 fd ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c00101dd:	83 e0 01             	and    eax,0x1
c00101e0:	c1 e0 05             	shl    eax,0x5
c00101e3:	89 c2                	mov    edx,eax
c00101e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101eb:	83 e0 df             	and    eax,0xffffffdf
c00101ee:	09 d0                	or     eax,edx
c00101f0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00101fd:	e8 b0 fd ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0010202:	83 e0 01             	and    eax,0x1
c0010205:	8d 14 00             	lea    edx,[eax+eax*1]
c0010208:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001020e:	83 e0 fd             	and    eax,0xfffffffd
c0010211:	09 d0                	or     eax,edx
c0010213:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010219:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0010220:	e8 8d fd ff ff       	call   c000ffb2 <CPU::cpuidCheckEDX(unsigned int)>
c0010225:	83 e0 01             	and    eax,0x1
c0010228:	c1 e0 06             	shl    eax,0x6
c001022b:	89 c2                	mov    edx,eax
c001022d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010233:	83 e0 bf             	and    eax,0xffffffbf
c0010236:	09 d0                	or     eax,edx
c0010238:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001023e:	58                   	pop    eax
c001023f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010243:	50                   	push   eax
c0010244:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010248:	50                   	push   eax
c0010249:	8d 74 24 28          	lea    esi,[esp+0x28]
c001024d:	56                   	push   esi
c001024e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010252:	50                   	push   eax
c0010253:	6a 00                	push   0x0
c0010255:	e8 d4 fc ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001025a:	b8 04 00 00 00       	mov    eax,0x4
c001025f:	89 c1                	mov    ecx,eax
c0010261:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010263:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010269:	89 c1                	mov    ecx,eax
c001026b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001026f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010271:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010277:	89 c1                	mov    ecx,eax
c0010279:	8d 74 24 38          	lea    esi,[esp+0x38]
c001027d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001027f:	83 c4 18             	add    esp,0x18
c0010282:	68 48 1b 02 c0       	push   0xc0021b48
c0010287:	55                   	push   ebp
c0010288:	e8 f3 04 ff ff       	call   c0000780 <strcmp>
c001028d:	83 c4 10             	add    esp,0x10
c0010290:	85 c0                	test   eax,eax
c0010292:	75 0f                	jne    c00102a3 <CPU::detectFeatures()+0x1a9>
c0010294:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001029e:	e9 22 02 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c00102a3:	50                   	push   eax
c00102a4:	50                   	push   eax
c00102a5:	68 55 1b 02 c0       	push   0xc0021b55
c00102aa:	55                   	push   ebp
c00102ab:	e8 d0 04 ff ff       	call   c0000780 <strcmp>
c00102b0:	83 c4 10             	add    esp,0x10
c00102b3:	85 c0                	test   eax,eax
c00102b5:	74 dd                	je     c0010294 <CPU::detectFeatures()+0x19a>
c00102b7:	50                   	push   eax
c00102b8:	50                   	push   eax
c00102b9:	68 62 1b 02 c0       	push   0xc0021b62
c00102be:	55                   	push   ebp
c00102bf:	e8 bc 04 ff ff       	call   c0000780 <strcmp>
c00102c4:	83 c4 10             	add    esp,0x10
c00102c7:	85 c0                	test   eax,eax
c00102c9:	74 2a                	je     c00102f5 <CPU::detectFeatures()+0x1fb>
c00102cb:	50                   	push   eax
c00102cc:	50                   	push   eax
c00102cd:	68 6f 1b 02 c0       	push   0xc0021b6f
c00102d2:	55                   	push   ebp
c00102d3:	e8 a8 04 ff ff       	call   c0000780 <strcmp>
c00102d8:	83 c4 10             	add    esp,0x10
c00102db:	85 c0                	test   eax,eax
c00102dd:	74 16                	je     c00102f5 <CPU::detectFeatures()+0x1fb>
c00102df:	50                   	push   eax
c00102e0:	50                   	push   eax
c00102e1:	68 7c 1b 02 c0       	push   0xc0021b7c
c00102e6:	55                   	push   ebp
c00102e7:	e8 94 04 ff ff       	call   c0000780 <strcmp>
c00102ec:	83 c4 10             	add    esp,0x10
c00102ef:	85 c0                	test   eax,eax
c00102f1:	74 48                	je     c001033b <CPU::detectFeatures()+0x241>
c00102f3:	eb 0f                	jmp    c0010304 <CPU::detectFeatures()+0x20a>
c00102f5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00102ff:	e9 c1 01 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c0010304:	50                   	push   eax
c0010305:	50                   	push   eax
c0010306:	68 89 1b 02 c0       	push   0xc0021b89
c001030b:	55                   	push   ebp
c001030c:	e8 6f 04 ff ff       	call   c0000780 <strcmp>
c0010311:	83 c4 10             	add    esp,0x10
c0010314:	85 c0                	test   eax,eax
c0010316:	74 23                	je     c001033b <CPU::detectFeatures()+0x241>
c0010318:	57                   	push   edi
c0010319:	57                   	push   edi
c001031a:	68 96 1b 02 c0       	push   0xc0021b96
c001031f:	55                   	push   ebp
c0010320:	e8 5b 04 ff ff       	call   c0000780 <strcmp>
c0010325:	83 c4 10             	add    esp,0x10
c0010328:	85 c0                	test   eax,eax
c001032a:	75 1e                	jne    c001034a <CPU::detectFeatures()+0x250>
c001032c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010336:	e9 8a 01 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001033b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010345:	e9 7b 01 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001034a:	56                   	push   esi
c001034b:	56                   	push   esi
c001034c:	68 a3 1b 02 c0       	push   0xc0021ba3
c0010351:	55                   	push   ebp
c0010352:	e8 29 04 ff ff       	call   c0000780 <strcmp>
c0010357:	83 c4 10             	add    esp,0x10
c001035a:	85 c0                	test   eax,eax
c001035c:	75 0f                	jne    c001036d <CPU::detectFeatures()+0x273>
c001035e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010368:	e9 58 01 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001036d:	51                   	push   ecx
c001036e:	51                   	push   ecx
c001036f:	68 62 1b 02 c0       	push   0xc0021b62
c0010374:	55                   	push   ebp
c0010375:	e8 06 04 ff ff       	call   c0000780 <strcmp>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	85 c0                	test   eax,eax
c001037f:	75 0f                	jne    c0010390 <CPU::detectFeatures()+0x296>
c0010381:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001038b:	e9 35 01 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c0010390:	52                   	push   edx
c0010391:	52                   	push   edx
c0010392:	68 b0 1b 02 c0       	push   0xc0021bb0
c0010397:	55                   	push   ebp
c0010398:	e8 e3 03 ff ff       	call   c0000780 <strcmp>
c001039d:	83 c4 10             	add    esp,0x10
c00103a0:	85 c0                	test   eax,eax
c00103a2:	75 0f                	jne    c00103b3 <CPU::detectFeatures()+0x2b9>
c00103a4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00103ae:	e9 12 01 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c00103b3:	50                   	push   eax
c00103b4:	50                   	push   eax
c00103b5:	68 bd 1b 02 c0       	push   0xc0021bbd
c00103ba:	55                   	push   ebp
c00103bb:	e8 c0 03 ff ff       	call   c0000780 <strcmp>
c00103c0:	83 c4 10             	add    esp,0x10
c00103c3:	85 c0                	test   eax,eax
c00103c5:	75 0f                	jne    c00103d6 <CPU::detectFeatures()+0x2dc>
c00103c7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00103d1:	e9 ef 00 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c00103d6:	50                   	push   eax
c00103d7:	50                   	push   eax
c00103d8:	68 ca 1b 02 c0       	push   0xc0021bca
c00103dd:	55                   	push   ebp
c00103de:	e8 9d 03 ff ff       	call   c0000780 <strcmp>
c00103e3:	83 c4 10             	add    esp,0x10
c00103e6:	85 c0                	test   eax,eax
c00103e8:	75 0f                	jne    c00103f9 <CPU::detectFeatures()+0x2ff>
c00103ea:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00103f4:	e9 cc 00 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c00103f9:	50                   	push   eax
c00103fa:	50                   	push   eax
c00103fb:	68 d7 1b 02 c0       	push   0xc0021bd7
c0010400:	55                   	push   ebp
c0010401:	e8 7a 03 ff ff       	call   c0000780 <strcmp>
c0010406:	83 c4 10             	add    esp,0x10
c0010409:	85 c0                	test   eax,eax
c001040b:	75 0f                	jne    c001041c <CPU::detectFeatures()+0x322>
c001040d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010417:	e9 a9 00 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001041c:	50                   	push   eax
c001041d:	50                   	push   eax
c001041e:	68 e4 1b 02 c0       	push   0xc0021be4
c0010423:	55                   	push   ebp
c0010424:	e8 57 03 ff ff       	call   c0000780 <strcmp>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	85 c0                	test   eax,eax
c001042e:	75 0f                	jne    c001043f <CPU::detectFeatures()+0x345>
c0010430:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001043a:	e9 86 00 00 00       	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001043f:	50                   	push   eax
c0010440:	50                   	push   eax
c0010441:	68 f1 1b 02 c0       	push   0xc0021bf1
c0010446:	55                   	push   ebp
c0010447:	e8 34 03 ff ff       	call   c0000780 <strcmp>
c001044c:	83 c4 10             	add    esp,0x10
c001044f:	85 c0                	test   eax,eax
c0010451:	75 0c                	jne    c001045f <CPU::detectFeatures()+0x365>
c0010453:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001045d:	eb 66                	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001045f:	50                   	push   eax
c0010460:	50                   	push   eax
c0010461:	68 fe 1b 02 c0       	push   0xc0021bfe
c0010466:	55                   	push   ebp
c0010467:	e8 14 03 ff ff       	call   c0000780 <strcmp>
c001046c:	83 c4 10             	add    esp,0x10
c001046f:	85 c0                	test   eax,eax
c0010471:	75 0c                	jne    c001047f <CPU::detectFeatures()+0x385>
c0010473:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001047d:	eb 46                	jmp    c00104c5 <CPU::detectFeatures()+0x3cb>
c001047f:	57                   	push   edi
c0010480:	57                   	push   edi
c0010481:	68 0b 1c 02 c0       	push   0xc0021c0b
c0010486:	55                   	push   ebp
c0010487:	e8 f4 02 ff ff       	call   c0000780 <strcmp>
c001048c:	83 c4 10             	add    esp,0x10
c001048f:	85 c0                	test   eax,eax
c0010491:	74 e0                	je     c0010473 <CPU::detectFeatures()+0x379>
c0010493:	56                   	push   esi
c0010494:	56                   	push   esi
c0010495:	68 18 1c 02 c0       	push   0xc0021c18
c001049a:	55                   	push   ebp
c001049b:	e8 e0 02 ff ff       	call   c0000780 <strcmp>
c00104a0:	83 c4 10             	add    esp,0x10
c00104a3:	85 c0                	test   eax,eax
c00104a5:	74 cc                	je     c0010473 <CPU::detectFeatures()+0x379>
c00104a7:	51                   	push   ecx
c00104a8:	51                   	push   ecx
c00104a9:	68 25 1c 02 c0       	push   0xc0021c25
c00104ae:	55                   	push   ebp
c00104af:	e8 cc 02 ff ff       	call   c0000780 <strcmp>
c00104b4:	83 c4 10             	add    esp,0x10
c00104b7:	85 c0                	test   eax,eax
c00104b9:	74 b8                	je     c0010473 <CPU::detectFeatures()+0x379>
c00104bb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00104c5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00104ca:	0f 86 be 00 00 00    	jbe    c001058e <CPU::detectFeatures()+0x494>
c00104d0:	83 ec 0c             	sub    esp,0xc
c00104d3:	68 80 00 00 00       	push   0x80
c00104d8:	e8 31 fb ff ff       	call   c001000e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104dd:	83 e0 01             	and    eax,0x1
c00104e0:	c1 e0 06             	shl    eax,0x6
c00104e3:	89 c2                	mov    edx,eax
c00104e5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104eb:	83 e0 bf             	and    eax,0xffffffbf
c00104ee:	09 d0                	or     eax,edx
c00104f0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104f6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00104fd:	e8 0c fb ff ff       	call   c001000e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010502:	83 e0 01             	and    eax,0x1
c0010505:	c1 e0 04             	shl    eax,0x4
c0010508:	89 c2                	mov    edx,eax
c001050a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010510:	83 e0 ef             	and    eax,0xffffffef
c0010513:	09 d0                	or     eax,edx
c0010515:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001051b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0010522:	e8 e7 fa ff ff       	call   c001000e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010527:	89 c2                	mov    edx,eax
c0010529:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052f:	c1 e2 07             	shl    edx,0x7
c0010532:	83 e0 7f             	and    eax,0x7f
c0010535:	09 d0                	or     eax,edx
c0010537:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001053d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010544:	e8 f3 fa ff ff       	call   c001003c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010549:	83 e0 01             	and    eax,0x1
c001054c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010553:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010559:	83 e0 f7             	and    eax,0xfffffff7
c001055c:	09 d0                	or     eax,edx
c001055e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010564:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001056b:	e8 cc fa ff ff       	call   c001003c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010570:	83 c4 10             	add    esp,0x10
c0010573:	83 e0 01             	and    eax,0x1
c0010576:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001057d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010583:	83 e0 fb             	and    eax,0xfffffffb
c0010586:	09 d0                	or     eax,edx
c0010588:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001058e:	83 ec 0c             	sub    esp,0xc
c0010591:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010595:	50                   	push   eax
c0010596:	8d 44 24 28          	lea    eax,[esp+0x28]
c001059a:	50                   	push   eax
c001059b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001059f:	57                   	push   edi
c00105a0:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105a4:	56                   	push   esi
c00105a5:	6a 01                	push   0x1
c00105a7:	e8 82 f9 ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105b0:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00105b6:	89 c1                	mov    ecx,eax
c00105b8:	83 e1 0f             	and    ecx,0xf
c00105bb:	83 e2 f0             	and    edx,0xfffffff0
c00105be:	09 ca                	or     edx,ecx
c00105c0:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00105c6:	89 c2                	mov    edx,eax
c00105c8:	c1 ea 04             	shr    edx,0x4
c00105cb:	83 e2 0f             	and    edx,0xf
c00105ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105d2:	89 d1                	mov    ecx,edx
c00105d4:	83 c4 20             	add    esp,0x20
c00105d7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00105dd:	c1 e1 06             	shl    ecx,0x6
c00105e0:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00105e6:	09 ca                	or     edx,ecx
c00105e8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00105ef:	89 c2                	mov    edx,eax
c00105f1:	c1 ea 08             	shr    edx,0x8
c00105f4:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00105fa:	83 e2 0f             	and    edx,0xf
c00105fd:	89 d5                	mov    ebp,edx
c00105ff:	83 e5 03             	and    ebp,0x3
c0010602:	c1 e5 06             	shl    ebp,0x6
c0010605:	83 e1 3f             	and    ecx,0x3f
c0010608:	09 e9                	or     ecx,ebp
c001060a:	89 d5                	mov    ebp,edx
c001060c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0010612:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010618:	c1 ed 02             	shr    ebp,0x2
c001061b:	83 e1 c0             	and    ecx,0xffffffc0
c001061e:	09 e9                	or     ecx,ebp
c0010620:	89 c5                	mov    ebp,eax
c0010622:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010628:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001062e:	c1 ed 08             	shr    ebp,0x8
c0010631:	83 e5 30             	and    ebp,0x30
c0010634:	83 e1 cf             	and    ecx,0xffffffcf
c0010637:	09 e9                	or     ecx,ebp
c0010639:	83 fa 06             	cmp    edx,0x6
c001063c:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010642:	74 05                	je     c0010649 <CPU::detectFeatures()+0x54f>
c0010644:	83 fa 0f             	cmp    edx,0xf
c0010647:	75 64                	jne    c00106ad <CPU::detectFeatures()+0x5b3>
c0010649:	89 c1                	mov    ecx,eax
c001064b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010651:	c1 e9 10             	shr    ecx,0x10
c0010654:	c1 e1 04             	shl    ecx,0x4
c0010657:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001065b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010661:	0f b6 c9             	movzx  ecx,cl
c0010664:	c1 e1 06             	shl    ecx,0x6
c0010667:	09 e9                	or     ecx,ebp
c0010669:	83 fa 0f             	cmp    edx,0xf
c001066c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010673:	75 38                	jne    c00106ad <CPU::detectFeatures()+0x5b3>
c0010675:	c1 e8 14             	shr    eax,0x14
c0010678:	83 c0 0f             	add    eax,0xf
c001067b:	0f b6 c0             	movzx  eax,al
c001067e:	89 c2                	mov    edx,eax
c0010680:	c1 e8 02             	shr    eax,0x2
c0010683:	83 e2 03             	and    edx,0x3
c0010686:	89 d1                	mov    ecx,edx
c0010688:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001068e:	c1 e1 06             	shl    ecx,0x6
c0010691:	83 e2 3f             	and    edx,0x3f
c0010694:	09 ca                	or     edx,ecx
c0010696:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001069c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00106a2:	83 e2 c0             	and    edx,0xffffffc0
c00106a5:	09 d0                	or     eax,edx
c00106a7:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00106ad:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106b3:	83 ec 0c             	sub    esp,0xc
c00106b6:	83 c8 07             	or     eax,0x7
c00106b9:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106c3:	50                   	push   eax
c00106c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00106c8:	55                   	push   ebp
c00106c9:	57                   	push   edi
c00106ca:	56                   	push   esi
c00106cb:	68 00 00 00 80       	push   0x80000000
c00106d0:	e8 59 f8 ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106d5:	83 c4 20             	add    esp,0x20
c00106d8:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00106e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00106e4:	76 1e                	jbe    c0010704 <CPU::detectFeatures()+0x60a>
c00106e6:	83 ec 0c             	sub    esp,0xc
c00106e9:	50                   	push   eax
c00106ea:	55                   	push   ebp
c00106eb:	57                   	push   edi
c00106ec:	56                   	push   esi
c00106ed:	68 01 00 00 80       	push   0x80000001
c00106f2:	e8 37 f8 ff ff       	call   c000ff2e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106f7:	83 c4 20             	add    esp,0x20
c00106fa:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010704:	52                   	push   edx
c0010705:	52                   	push   edx
c0010706:	68 31 1c 02 c0       	push   0xc0021c31
c001070b:	53                   	push   ebx
c001070c:	e8 29 c1 ff ff       	call   c000c83a <Device::setName(char const*)>
c0010711:	83 c4 10             	add    esp,0x10
c0010714:	eb 69                	jmp    c001077f <CPU::detectFeatures()+0x685>
c0010716:	50                   	push   eax
c0010717:	50                   	push   eax
c0010718:	68 96 1b 02 c0       	push   0xc0021b96
c001071d:	55                   	push   ebp
c001071e:	e8 2d ff fe ff       	call   c0000650 <strcpy>
c0010723:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001072d:	e8 91 fa fe ff       	call   c00001c3 <is486>
c0010732:	83 c4 10             	add    esp,0x10
c0010735:	85 c0                	test   eax,eax
c0010737:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001073d:	74 1f                	je     c001075e <CPU::detectFeatures()+0x664>
c001073f:	83 c8 07             	or     eax,0x7
c0010742:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010748:	0f 20 c0             	mov    eax,cr0
c001074b:	83 e0 14             	and    eax,0x14
c001074e:	83 f8 04             	cmp    eax,0x4
c0010751:	75 10                	jne    c0010763 <CPU::detectFeatures()+0x669>
c0010753:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010759:	83 e0 fd             	and    eax,0xfffffffd
c001075c:	eb 1b                	jmp    c0010779 <CPU::detectFeatures()+0x67f>
c001075e:	83 e0 f8             	and    eax,0xfffffff8
c0010761:	eb df                	jmp    c0010742 <CPU::detectFeatures()+0x648>
c0010763:	e8 36 fa fe ff       	call   c000019e <hasLegacyFPU>
c0010768:	83 e0 01             	and    eax,0x1
c001076b:	8d 14 00             	lea    edx,[eax+eax*1]
c001076e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010774:	83 e0 fd             	and    eax,0xfffffffd
c0010777:	09 d0                	or     eax,edx
c0010779:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001077f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010786:	74 17                	je     c001079f <CPU::detectFeatures()+0x6a5>
c0010788:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001078e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010794:	83 c8 10             	or     eax,0x10
c0010797:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001079d:	eb 20                	jmp    c00107bf <CPU::detectFeatures()+0x6c5>
c001079f:	e8 fa f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107a4:	83 e0 01             	and    eax,0x1
c00107a7:	8d 14 00             	lea    edx,[eax+eax*1]
c00107aa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107b0:	83 e0 fd             	and    eax,0xfffffffd
c00107b3:	09 d0                	or     eax,edx
c00107b5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107bb:	a8 02                	test   al,0x2
c00107bd:	75 c9                	jne    c0010788 <CPU::detectFeatures()+0x68e>
c00107bf:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00107c6:	83 c4 2c             	add    esp,0x2c
c00107c9:	5b                   	pop    ebx
c00107ca:	5e                   	pop    esi
c00107cb:	5f                   	pop    edi
c00107cc:	5d                   	pop    ebp
c00107cd:	c3                   	ret    

c00107ce <CPU::setupSMEP()>:
c00107ce:	0f 20 e0             	mov    eax,cr4
c00107d1:	0d 00 00 10 00       	or     eax,0x100000
c00107d6:	0f 22 e0             	mov    cr4,eax
c00107d9:	c3                   	ret    

c00107da <CPU::setupUMIP()>:
c00107da:	0f 20 e0             	mov    eax,cr4
c00107dd:	80 cc 08             	or     ah,0x8
c00107e0:	0f 22 e0             	mov    cr4,eax
c00107e3:	c3                   	ret    

c00107e4 <CPU::setupTSC()>:
c00107e4:	0f 20 e0             	mov    eax,cr4
c00107e7:	83 c8 04             	or     eax,0x4
c00107ea:	0f 22 e0             	mov    cr4,eax
c00107ed:	c3                   	ret    

c00107ee <CPU::setupLargePages()>:
c00107ee:	0f 20 e0             	mov    eax,cr4
c00107f1:	83 c8 10             	or     eax,0x10
c00107f4:	0f 22 e0             	mov    cr4,eax
c00107f7:	c3                   	ret    

c00107f8 <CPU::setupPAT()>:
c00107f8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00107fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010804:	74 2c                	je     c0010832 <CPU::setupPAT()+0x3a>
c0010806:	53                   	push   ebx
c0010807:	83 ec 10             	sub    esp,0x10
c001080a:	68 77 02 00 00       	push   0x277
c001080f:	50                   	push   eax
c0010810:	e8 cd 68 ff ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0010815:	83 e2 f8             	and    edx,0xfffffff8
c0010818:	83 ca 01             	or     edx,0x1
c001081b:	52                   	push   edx
c001081c:	50                   	push   eax
c001081d:	68 77 02 00 00       	push   0x277
c0010822:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010828:	e8 e1 68 ff ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c001082d:	83 c4 28             	add    esp,0x28
c0010830:	5b                   	pop    ebx
c0010831:	c3                   	ret    
c0010832:	c3                   	ret    
c0010833:	90                   	nop

c0010834 <CPU::setupMTRR()>:
c0010834:	c3                   	ret    
c0010835:	90                   	nop

c0010836 <CPU::setupGlobalPages()>:
c0010836:	0f 20 e0             	mov    eax,cr4
c0010839:	0c 80                	or     al,0x80
c001083b:	0f 22 e0             	mov    cr4,eax
c001083e:	c3                   	ret    
c001083f:	90                   	nop

c0010840 <CPU::allowUsermodeDataAccess()>:
c0010840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010844:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001084b:	74 03                	je     c0010850 <CPU::allowUsermodeDataAccess()+0x10>
c001084d:	0f 01 cb             	stac   
c0010850:	c3                   	ret    
c0010851:	90                   	nop

c0010852 <CPU::prohibitUsermodeDataAccess()>:
c0010852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010856:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001085d:	74 03                	je     c0010862 <CPU::prohibitUsermodeDataAccess()+0x10>
c001085f:	0f 01 ca             	clac   
c0010862:	c3                   	ret    
c0010863:	90                   	nop

c0010864 <CPU::setupSMAP()>:
c0010864:	0f 20 e0             	mov    eax,cr4
c0010867:	0d 00 00 20 00       	or     eax,0x200000
c001086c:	0f 22 e0             	mov    cr4,eax
c001086f:	eb e1                	jmp    c0010852 <CPU::prohibitUsermodeDataAccess()>
c0010871:	90                   	nop

c0010872 <CPU::setupFeatures()>:
c0010872:	53                   	push   ebx
c0010873:	83 ec 08             	sub    esp,0x8
c0010876:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001087a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010881:	74 18                	je     c001089b <CPU::setupFeatures()+0x29>
c0010883:	83 ec 0c             	sub    esp,0xc
c0010886:	68 3d 1c 02 c0       	push   0xc0021c3d
c001088b:	e8 7a a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010890:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010893:	e8 42 ff ff ff       	call   c00107da <CPU::setupUMIP()>
c0010898:	83 c4 10             	add    esp,0x10
c001089b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00108a2:	74 18                	je     c00108bc <CPU::setupFeatures()+0x4a>
c00108a4:	83 ec 0c             	sub    esp,0xc
c00108a7:	68 47 1c 02 c0       	push   0xc0021c47
c00108ac:	e8 59 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108b4:	e8 2b ff ff ff       	call   c00107e4 <CPU::setupTSC()>
c00108b9:	83 c4 10             	add    esp,0x10
c00108bc:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00108c3:	74 18                	je     c00108dd <CPU::setupFeatures()+0x6b>
c00108c5:	83 ec 0c             	sub    esp,0xc
c00108c8:	68 50 1c 02 c0       	push   0xc0021c50
c00108cd:	e8 38 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d5:	e8 14 ff ff ff       	call   c00107ee <CPU::setupLargePages()>
c00108da:	83 c4 10             	add    esp,0x10
c00108dd:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00108e4:	74 18                	je     c00108fe <CPU::setupFeatures()+0x8c>
c00108e6:	83 ec 0c             	sub    esp,0xc
c00108e9:	68 59 1c 02 c0       	push   0xc0021c59
c00108ee:	e8 17 a0 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00108f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108f6:	e8 3b ff ff ff       	call   c0010836 <CPU::setupGlobalPages()>
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010905:	74 18                	je     c001091f <CPU::setupFeatures()+0xad>
c0010907:	83 ec 0c             	sub    esp,0xc
c001090a:	68 6b 1c 02 c0       	push   0xc0021c6b
c001090f:	e8 f6 9f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010914:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010917:	e8 dc fe ff ff       	call   c00107f8 <CPU::setupPAT()>
c001091c:	83 c4 10             	add    esp,0x10
c001091f:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010926:	74 11                	je     c0010939 <CPU::setupFeatures()+0xc7>
c0010928:	c7 44 24 10 74 1c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021c74
c0010930:	83 c4 08             	add    esp,0x8
c0010933:	5b                   	pop    ebx
c0010934:	e9 d1 9f ff ff       	jmp    c000a90a <Dbg::kprintf(char const*, ...)>
c0010939:	83 c4 08             	add    esp,0x8
c001093c:	5b                   	pop    ebx
c001093d:	c3                   	ret    

c001093e <CPU::open(int, int, void*)>:
c001093e:	55                   	push   ebp
c001093f:	57                   	push   edi
c0010940:	56                   	push   esi
c0010941:	53                   	push   ebx
c0010942:	83 ec 18             	sub    esp,0x18
c0010945:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010949:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001094d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010951:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010957:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001095d:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010963:	50                   	push   eax
c0010964:	e8 75 6a ff ff       	call   c00073de <GDT::setup()>
c0010969:	83 c4 0c             	add    esp,0xc
c001096c:	6a 00                	push   0x0
c001096e:	68 ef be ad de       	push   0xdeadbeef
c0010973:	55                   	push   ebp
c0010974:	e8 f7 85 ff ff       	call   c0008f70 <TSS::setup(unsigned long, unsigned long)>
c0010979:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001097c:	e8 cf 85 ff ff       	call   c0008f50 <TSS::flush()>
c0010981:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010987:	89 04 24             	mov    DWORD PTR [esp],eax
c001098a:	e8 b3 6c ff ff       	call   c0007642 <IDT::setup()>
c001098f:	b8 00 04 00 00       	mov    eax,0x400
c0010994:	0f 23 f8             	mov    db7,eax
c0010997:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00109a1:	e8 3c 74 ff ff       	call   c0007de2 <Phys::allocatePage()>
c00109a6:	83 c4 10             	add    esp,0x10
c00109a9:	85 f6                	test   esi,esi
c00109ab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00109b1:	89 38                	mov    DWORD PTR [eax],edi
c00109b3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00109b9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00109bc:	74 10                	je     c00109ce <CPU::open(int, int, void*)+0x90>
c00109be:	50                   	push   eax
c00109bf:	50                   	push   eax
c00109c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00109c6:	56                   	push   esi
c00109c7:	e8 c0 8e ff ff       	call   c000988c <VAS::setCPUSpecific(unsigned long)>
c00109cc:	eb 0d                	jmp    c00109db <CPU::open(int, int, void*)+0x9d>
c00109ce:	83 ec 0c             	sub    esp,0xc
c00109d1:	68 7e 1c 02 c0       	push   0xc0021c7e
c00109d6:	e8 72 08 00 00       	call   c001124d <KePanic(char const*)>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	83 ec 0c             	sub    esp,0xc
c00109e1:	68 8c 1c 02 c0       	push   0xc0021c8c
c00109e6:	e8 8e 01 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c00109eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109ee:	e8 07 f7 ff ff       	call   c00100fa <CPU::detectFeatures()>
c00109f3:	c7 04 24 af 1c 02 c0 	mov    DWORD PTR [esp],0xc0021caf
c00109fa:	e8 7a 01 00 00       	call   c0010b79 <KeSetBootMessage(char const*)>
c00109ff:	e8 0b 72 00 00       	call   c0017c0f <HalInitialise()>
c0010a04:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a09:	83 e0 10             	and    eax,0x10
c0010a0c:	83 f8 01             	cmp    eax,0x1
c0010a0f:	19 c0                	sbb    eax,eax
c0010a11:	83 e0 46             	and    eax,0x46
c0010a14:	83 c0 1e             	add    eax,0x1e
c0010a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a1a:	e8 c2 d6 ff ff       	call   c000e0e1 <setupTimer(int)>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a29:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a2f:	74 0c                	je     c0010a3d <CPU::open(int, int, void*)+0xff>
c0010a31:	83 ec 0c             	sub    esp,0xc
c0010a34:	53                   	push   ebx
c0010a35:	e8 38 fe ff ff       	call   c0010872 <CPU::setupFeatures()>
c0010a3a:	83 c4 10             	add    esp,0x10
c0010a3d:	83 c4 0c             	add    esp,0xc
c0010a40:	31 c0                	xor    eax,eax
c0010a42:	5b                   	pop    ebx
c0010a43:	5e                   	pop    esi
c0010a44:	5f                   	pop    edi
c0010a45:	5d                   	pop    ebp
c0010a46:	c3                   	ret    

c0010a47 <KeInitialiseAtexit()>:
c0010a47:	83 ec 10             	sub    esp,0x10
c0010a4a:	6a 60                	push   0x60
c0010a4c:	6a 00                	push   0x0
c0010a4e:	68 20 8e 02 c0       	push   0xc0028e20
c0010a53:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010a5d:	e8 8e fa fe ff       	call   c00004f0 <memset>
c0010a62:	83 c4 1c             	add    esp,0x1c
c0010a65:	c3                   	ret    

c0010a66 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a66:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010a6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a6f:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010a76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a7a:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010a81:	40                   	inc    eax
c0010a82:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010a87:	83 f8 17             	cmp    eax,0x17
c0010a8a:	7e 0d                	jle    c0010a99 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a8c:	c7 44 24 04 f0 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021cf0
c0010a94:	e9 b4 07 00 00       	jmp    c001124d <KePanic(char const*)>
c0010a99:	c3                   	ret    

c0010a9a <KeExecuteAtexit()>:
c0010a9a:	53                   	push   ebx
c0010a9b:	31 db                	xor    ebx,ebx
c0010a9d:	83 ec 08             	sub    esp,0x8
c0010aa0:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010aa6:	7e 50                	jle    c0010af8 <KeExecuteAtexit()+0x5e>
c0010aa8:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010aaf:	85 c0                	test   eax,eax
c0010ab1:	74 42                	je     c0010af5 <KeExecuteAtexit()+0x5b>
c0010ab3:	51                   	push   ecx
c0010ab4:	50                   	push   eax
c0010ab5:	53                   	push   ebx
c0010ab6:	68 09 1d 02 c0       	push   0xc0021d09
c0010abb:	e8 4a 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010ac0:	58                   	pop    eax
c0010ac1:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010ac8:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010acf:	c7 04 24 2b 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d2b
c0010ad6:	e8 2f 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010adb:	c7 04 24 8b 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e8b
c0010ae2:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010aed:	e8 18 9e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0010af2:	83 c4 10             	add    esp,0x10
c0010af5:	43                   	inc    ebx
c0010af6:	eb a8                	jmp    c0010aa0 <KeExecuteAtexit()+0x6>
c0010af8:	83 c4 08             	add    esp,0x8
c0010afb:	5b                   	pop    ebx
c0010afc:	c3                   	ret    

c0010afd <KeDisplaySplashScreen()>:
c0010afd:	55                   	push   ebp
c0010afe:	bd 05 00 00 00       	mov    ebp,0x5
c0010b03:	57                   	push   edi
c0010b04:	bf 0a 00 00 00       	mov    edi,0xa
c0010b09:	56                   	push   esi
c0010b0a:	31 f6                	xor    esi,esi
c0010b0c:	53                   	push   ebx
c0010b0d:	31 db                	xor    ebx,ebx
c0010b0f:	83 ec 0c             	sub    esp,0xc
c0010b12:	0f b6 96 e0 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcf20]
c0010b19:	85 d2                	test   edx,edx
c0010b1b:	89 d0                	mov    eax,edx
c0010b1d:	74 52                	je     c0010b71 <KeDisplaySplashScreen()+0x74>
c0010b1f:	80 bb 16 31 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdceea],0xdb
c0010b26:	75 13                	jne    c0010b3b <KeDisplaySplashScreen()+0x3e>
c0010b28:	0f b6 8b 15 31 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdceeb]
c0010b2f:	83 e1 fe             	and    ecx,0xfffffffe
c0010b32:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010b38:	75 01                	jne    c0010b3b <KeDisplaySplashScreen()+0x3e>
c0010b3a:	47                   	inc    edi
c0010b3b:	83 fa 0d             	cmp    edx,0xd
c0010b3e:	74 28                	je     c0010b68 <KeDisplaySplashScreen()+0x6b>
c0010b40:	83 fa 0a             	cmp    edx,0xa
c0010b43:	75 0a                	jne    c0010b4f <KeDisplaySplashScreen()+0x52>
c0010b45:	45                   	inc    ebp
c0010b46:	bf 0a 00 00 00       	mov    edi,0xa
c0010b4b:	31 db                	xor    ebx,ebx
c0010b4d:	eb 19                	jmp    c0010b68 <KeDisplaySplashScreen()+0x6b>
c0010b4f:	83 ec 0c             	sub    esp,0xc
c0010b52:	0f be c0             	movsx  eax,al
c0010b55:	55                   	push   ebp
c0010b56:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b59:	43                   	inc    ebx
c0010b5a:	52                   	push   edx
c0010b5b:	6a 00                	push   0x0
c0010b5d:	6a 0e                	push   0xe
c0010b5f:	50                   	push   eax
c0010b60:	e8 27 7d 00 00       	call   c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b65:	83 c4 20             	add    esp,0x20
c0010b68:	46                   	inc    esi
c0010b69:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b6f:	75 a1                	jne    c0010b12 <KeDisplaySplashScreen()+0x15>
c0010b71:	83 c4 0c             	add    esp,0xc
c0010b74:	5b                   	pop    ebx
c0010b75:	5e                   	pop    esi
c0010b76:	5f                   	pop    edi
c0010b77:	5d                   	pop    ebp
c0010b78:	c3                   	ret    

c0010b79 <KeSetBootMessage(char const*)>:
c0010b79:	57                   	push   edi
c0010b7a:	56                   	push   esi
c0010b7b:	53                   	push   ebx
c0010b7c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b82:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b89:	68 9e 00 00 00       	push   0x9e
c0010b8e:	6a 00                	push   0x0
c0010b90:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b94:	56                   	push   esi
c0010b95:	e8 56 f9 fe ff       	call   c00004f0 <memset>
c0010b9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b9d:	e8 de f9 fe ff       	call   c0000580 <strlen>
c0010ba2:	ba 50 00 00 00       	mov    edx,0x50
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	31 c9                	xor    ecx,ecx
c0010bac:	29 c2                	sub    edx,eax
c0010bae:	83 e2 fe             	and    edx,0xfffffffe
c0010bb1:	01 f2                	add    edx,esi
c0010bb3:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010bb8:	84 c0                	test   al,al
c0010bba:	74 0a                	je     c0010bc6 <KeSetBootMessage(char const*)+0x4d>
c0010bbc:	80 cc 0f             	or     ah,0xf
c0010bbf:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010bc3:	41                   	inc    ecx
c0010bc4:	eb ed                	jmp    c0010bb3 <KeSetBootMessage(char const*)+0x3a>
c0010bc6:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010bcb:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010bd0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bd2:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010bd8:	5b                   	pop    ebx
c0010bd9:	5e                   	pop    esi
c0010bda:	5f                   	pop    edi
c0010bdb:	c3                   	ret    

c0010bdc <Krnl::handlePowerButton()>:
c0010bdc:	83 ec 0c             	sub    esp,0xc
c0010bdf:	e8 c4 06 00 00       	call   c00112a8 <KeHandlePowerButton()>
c0010be4:	90                   	nop
c0010be5:	83 c4 0c             	add    esp,0xc
c0010be8:	c3                   	ret    
c0010be9:	8d 76 00             	lea    esi,[esi+0x0]

c0010bec <Krnl::handleSleepButton()>:
c0010bec:	83 ec 0c             	sub    esp,0xc
c0010bef:	e8 e9 06 00 00       	call   c00112dd <KeHandleSleepButton()>
c0010bf4:	90                   	nop
c0010bf5:	83 c4 0c             	add    esp,0xc
c0010bf8:	c3                   	ret    
c0010bf9:	90                   	nop

c0010bfa <EnvVarContainer::getEnv(char const*)>:
c0010bfa:	57                   	push   edi
c0010bfb:	56                   	push   esi
c0010bfc:	53                   	push   ebx
c0010bfd:	31 db                	xor    ebx,ebx
c0010bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c03:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c05:	7e 2b                	jle    c0010c32 <EnvVarContainer::getEnv(char const*)+0x38>
c0010c07:	50                   	push   eax
c0010c08:	50                   	push   eax
c0010c09:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c0c:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c13:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c16:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c1a:	e8 61 fb fe ff       	call   c0000780 <strcmp>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	85 c0                	test   eax,eax
c0010c24:	75 09                	jne    c0010c2f <EnvVarContainer::getEnv(char const*)+0x35>
c0010c26:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c29:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010c2d:	eb 05                	jmp    c0010c34 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010c2f:	43                   	inc    ebx
c0010c30:	eb d1                	jmp    c0010c03 <EnvVarContainer::getEnv(char const*)+0x9>
c0010c32:	31 c0                	xor    eax,eax
c0010c34:	5b                   	pop    ebx
c0010c35:	5e                   	pop    esi
c0010c36:	5f                   	pop    edi
c0010c37:	c3                   	ret    

c0010c38 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010c38:	55                   	push   ebp
c0010c39:	57                   	push   edi
c0010c3a:	56                   	push   esi
c0010c3b:	53                   	push   ebx
c0010c3c:	83 ec 28             	sub    esp,0x28
c0010c3f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c43:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c47:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c4b:	56                   	push   esi
c0010c4c:	e8 2f f9 fe ff       	call   c0000580 <strlen>
c0010c51:	40                   	inc    eax
c0010c52:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c55:	e8 79 6e ff ff       	call   c0007ad3 <malloc>
c0010c5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c61:	e8 1a f9 fe ff       	call   c0000580 <strlen>
c0010c66:	40                   	inc    eax
c0010c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c6a:	e8 64 6e ff ff       	call   c0007ad3 <malloc>
c0010c6f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c76:	e8 05 f9 fe ff       	call   c0000580 <strlen>
c0010c7b:	83 c4 0c             	add    esp,0xc
c0010c7e:	40                   	inc    eax
c0010c7f:	50                   	push   eax
c0010c80:	6a 00                	push   0x0
c0010c82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010c86:	e8 65 f8 fe ff       	call   c00004f0 <memset>
c0010c8b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c8e:	e8 ed f8 fe ff       	call   c0000580 <strlen>
c0010c93:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c97:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c9f:	89 de                	mov    esi,ebx
c0010ca1:	e8 da f8 fe ff       	call   c0000580 <strlen>
c0010ca6:	83 c4 0c             	add    esp,0xc
c0010ca9:	40                   	inc    eax
c0010caa:	50                   	push   eax
c0010cab:	6a 00                	push   0x0
c0010cad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cb1:	e8 3a f8 fe ff       	call   c00004f0 <memset>
c0010cb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cb9:	e8 c2 f8 fe ff       	call   c0000580 <strlen>
c0010cbe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010cc2:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010cca:	40                   	inc    eax
c0010ccb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010cce:	c1 e0 03             	shl    eax,0x3
c0010cd1:	5a                   	pop    edx
c0010cd2:	59                   	pop    ecx
c0010cd3:	50                   	push   eax
c0010cd4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010cd7:	e8 e3 6d ff ff       	call   c0007abf <realloc>
c0010cdc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010cdf:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ce3:	b9 08 00 00 00       	mov    ecx,0x8
c0010ce8:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010ceb:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010cef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cf1:	83 c4 2c             	add    esp,0x2c
c0010cf4:	5b                   	pop    ebx
c0010cf5:	5e                   	pop    esi
c0010cf6:	5f                   	pop    edi
c0010cf7:	5d                   	pop    ebp
c0010cf8:	c3                   	ret    
c0010cf9:	90                   	nop

c0010cfa <EnvVarContainer::deleteEnv(char const*)>:
c0010cfa:	c3                   	ret    
c0010cfb:	90                   	nop

c0010cfc <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010cfc:	55                   	push   ebp
c0010cfd:	57                   	push   edi
c0010cfe:	56                   	push   esi
c0010cff:	53                   	push   ebx
c0010d00:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d06:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d0d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d14:	68 14 01 00 00       	push   0x114
c0010d19:	e8 b5 6d ff ff       	call   c0007ad3 <malloc>
c0010d1e:	83 c4 0c             	add    esp,0xc
c0010d21:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d24:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010d2b:	89 c3                	mov    ebx,eax
c0010d2d:	50                   	push   eax
c0010d2e:	e8 6d aa ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0010d33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d36:	e8 e5 ad ff ff       	call   c000bb20 <File::exists()>
c0010d3b:	83 c4 10             	add    esp,0x10
c0010d3e:	84 c0                	test   al,al
c0010d40:	75 31                	jne    c0010d73 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d42:	50                   	push   eax
c0010d43:	50                   	push   eax
c0010d44:	6a 12                	push   0x12
c0010d46:	53                   	push   ebx
c0010d47:	e8 10 ab ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0010d4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d4e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d51:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d54:	e8 27 f8 fe ff       	call   c0000580 <strlen>
c0010d59:	5a                   	pop    edx
c0010d5a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010d5e:	52                   	push   edx
c0010d5f:	31 d2                	xor    edx,edx
c0010d61:	56                   	push   esi
c0010d62:	52                   	push   edx
c0010d63:	50                   	push   eax
c0010d64:	53                   	push   ebx
c0010d65:	ff d7                	call   edi
c0010d67:	83 c4 14             	add    esp,0x14
c0010d6a:	53                   	push   ebx
c0010d6b:	e8 4a ab ff ff       	call   c000b8ba <File::close()>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	56                   	push   esi
c0010d74:	31 f6                	xor    esi,esi
c0010d76:	68 00 01 00 00       	push   0x100
c0010d7b:	6a 00                	push   0x0
c0010d7d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d81:	50                   	push   eax
c0010d82:	e8 69 f7 fe ff       	call   c00004f0 <memset>
c0010d87:	5f                   	pop    edi
c0010d88:	58                   	pop    eax
c0010d89:	6a 01                	push   0x1
c0010d8b:	53                   	push   ebx
c0010d8c:	e8 cb aa ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0010d91:	83 c4 10             	add    esp,0x10
c0010d94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d9c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010da4:	83 ec 0c             	sub    esp,0xc
c0010da7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0010dab:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dad:	52                   	push   edx
c0010dae:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c0010db2:	51                   	push   ecx
c0010db3:	6a 00                	push   0x0
c0010db5:	6a 01                	push   0x1
c0010db7:	53                   	push   ebx
c0010db8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010dbb:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010dc0:	83 c4 20             	add    esp,0x20
c0010dc3:	85 c0                	test   eax,eax
c0010dc5:	89 c1                	mov    ecx,eax
c0010dc7:	0f 84 36 01 00 00    	je     c0010f03 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010dcd:	83 f8 0d             	cmp    eax,0xd
c0010dd0:	0f 84 22 01 00 00    	je     c0010ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010dd6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ddb:	0f 84 f0 00 00 00    	je     c0010ed1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010de1:	83 f8 0a             	cmp    eax,0xa
c0010de4:	74 13                	je     c0010df9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010de6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010deb:	74 0c                	je     c0010df9 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010ded:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010df3:	0f 8e f6 00 00 00    	jle    c0010eef <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dfd:	83 ec 0c             	sub    esp,0xc
c0010e00:	8d 78 01             	lea    edi,[eax+0x1]
c0010e03:	57                   	push   edi
c0010e04:	e8 ca 6c ff ff       	call   c0007ad3 <malloc>
c0010e09:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e0d:	8d 56 04             	lea    edx,[esi+0x4]
c0010e10:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e13:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e1b:	e8 b3 6c ff ff       	call   c0007ad3 <malloc>
c0010e20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e24:	83 c4 0c             	add    esp,0xc
c0010e27:	57                   	push   edi
c0010e28:	6a 00                	push   0x0
c0010e2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e2e:	e8 bd f6 fe ff       	call   c00004f0 <memset>
c0010e33:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e37:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e3b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010e3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e41:	83 c4 0c             	add    esp,0xc
c0010e44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e48:	52                   	push   edx
c0010e49:	6a 00                	push   0x0
c0010e4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e4f:	e8 9c f6 fe ff       	call   c00004f0 <memset>
c0010e54:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e58:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010e5c:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e5f:	e8 1c f7 fe ff       	call   c0000580 <strlen>
c0010e64:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e68:	89 c1                	mov    ecx,eax
c0010e6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e6f:	83 c4 10             	add    esp,0x10
c0010e72:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e75:	40                   	inc    eax
c0010e76:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e79:	85 d2                	test   edx,edx
c0010e7b:	75 0c                	jne    c0010e89 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e7d:	83 ec 0c             	sub    esp,0xc
c0010e80:	6a 08                	push   0x8
c0010e82:	e8 4c 6c ff ff       	call   c0007ad3 <malloc>
c0010e87:	eb 0c                	jmp    c0010e95 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e89:	51                   	push   ecx
c0010e8a:	51                   	push   ecx
c0010e8b:	c1 e0 03             	shl    eax,0x3
c0010e8e:	50                   	push   eax
c0010e8f:	52                   	push   edx
c0010e90:	e8 2a 6c ff ff       	call   c0007abf <realloc>
c0010e95:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e98:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e9b:	83 c4 10             	add    esp,0x10
c0010e9e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ea1:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ea5:	b9 08 00 00 00       	mov    ecx,0x8
c0010eaa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010eae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010eb0:	50                   	push   eax
c0010eb1:	31 f6                	xor    esi,esi
c0010eb3:	68 00 01 00 00       	push   0x100
c0010eb8:	6a 00                	push   0x0
c0010eba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010ebe:	50                   	push   eax
c0010ebf:	e8 2c f6 fe ff       	call   c00004f0 <memset>
c0010ec4:	83 c4 10             	add    esp,0x10
c0010ec7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ecf:	eb 27                	jmp    c0010ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ed1:	83 f8 3d             	cmp    eax,0x3d
c0010ed4:	74 1e                	je     c0010ef4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010ed6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010edc:	7f 07                	jg     c0010ee5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010ede:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c0010ee2:	46                   	inc    esi
c0010ee3:	eb 13                	jmp    c0010ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010ee5:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010eed:	eb 09                	jmp    c0010ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010eef:	83 f8 3d             	cmp    eax,0x3d
c0010ef2:	75 ea                	jne    c0010ede <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010ef4:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010ef8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010efd:	0f 85 99 fe ff ff    	jne    c0010d9c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f03:	83 ec 0c             	sub    esp,0xc
c0010f06:	53                   	push   ebx
c0010f07:	e8 ae a9 ff ff       	call   c000b8ba <File::close()>
c0010f0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f11:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f14:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f1a:	5b                   	pop    ebx
c0010f1b:	5e                   	pop    esi
c0010f1c:	5f                   	pop    edi
c0010f1d:	5d                   	pop    ebp
c0010f1e:	c3                   	ret    
c0010f1f:	90                   	nop

c0010f20 <EnvVarContainer::__loadSystem()>:
c0010f20:	83 ec 10             	sub    esp,0x10
c0010f23:	68 40 32 02 c0       	push   0xc0023240
c0010f28:	68 30 1d 02 c0       	push   0xc0021d30
c0010f2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f31:	e8 c6 fd ff ff       	call   c0010cfc <EnvVarContainer::loadFrom(char const*, char const*)>
c0010f36:	83 c4 1c             	add    esp,0x1c
c0010f39:	c3                   	ret    

c0010f3a <EnvVarContainer::__loadUser()>:
c0010f3a:	c3                   	ret    
c0010f3b:	90                   	nop

c0010f3c <EnvVarContainer::EnvVarContainer(Process*)>:
c0010f3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f5c:	90                   	nop
c0010f5d:	c3                   	ret    

c0010f5e <EnvVarContainer::~EnvVarContainer()>:
c0010f5e:	83 ec 0c             	sub    esp,0xc
c0010f61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f68:	85 c0                	test   eax,eax
c0010f6a:	74 1d                	je     c0010f89 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f72:	85 c0                	test   eax,eax
c0010f74:	74 13                	je     c0010f89 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f7d:	83 ec 0c             	sub    esp,0xc
c0010f80:	50                   	push   eax
c0010f81:	e8 5d 6b ff ff       	call   c0007ae3 <free>
c0010f86:	83 c4 10             	add    esp,0x10
c0010f89:	90                   	nop
c0010f8a:	83 c4 0c             	add    esp,0xc
c0010f8d:	c3                   	ret    

c0010f8e <KeGetEnv(Process*, char const*)>:
c0010f8e:	53                   	push   ebx
c0010f8f:	83 ec 08             	sub    esp,0x8
c0010f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f96:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010f9c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fa0:	74 04                	je     c0010fa6 <KeGetEnv(Process*, char const*)+0x18>
c0010fa2:	85 c0                	test   eax,eax
c0010fa4:	75 0b                	jne    c0010fb1 <KeGetEnv(Process*, char const*)+0x23>
c0010fa6:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010fab:	85 c0                	test   eax,eax
c0010fad:	75 19                	jne    c0010fc8 <KeGetEnv(Process*, char const*)+0x3a>
c0010faf:	eb 27                	jmp    c0010fd8 <KeGetEnv(Process*, char const*)+0x4a>
c0010fb1:	52                   	push   edx
c0010fb2:	52                   	push   edx
c0010fb3:	53                   	push   ebx
c0010fb4:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010fba:	e8 3b fc ff ff       	call   c0010bfa <EnvVarContainer::getEnv(char const*)>
c0010fbf:	83 c4 10             	add    esp,0x10
c0010fc2:	85 c0                	test   eax,eax
c0010fc4:	75 28                	jne    c0010fee <KeGetEnv(Process*, char const*)+0x60>
c0010fc6:	eb de                	jmp    c0010fa6 <KeGetEnv(Process*, char const*)+0x18>
c0010fc8:	52                   	push   edx
c0010fc9:	52                   	push   edx
c0010fca:	53                   	push   ebx
c0010fcb:	50                   	push   eax
c0010fcc:	e8 29 fc ff ff       	call   c0010bfa <EnvVarContainer::getEnv(char const*)>
c0010fd1:	83 c4 10             	add    esp,0x10
c0010fd4:	85 c0                	test   eax,eax
c0010fd6:	75 16                	jne    c0010fee <KeGetEnv(Process*, char const*)+0x60>
c0010fd8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010fdc:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0010fe1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010fe5:	83 c4 08             	add    esp,0x8
c0010fe8:	5b                   	pop    ebx
c0010fe9:	e9 0c fc ff ff       	jmp    c0010bfa <EnvVarContainer::getEnv(char const*)>
c0010fee:	83 c4 08             	add    esp,0x8
c0010ff1:	5b                   	pop    ebx
c0010ff2:	c3                   	ret    

c0010ff3 <KeSetEnvSystem(char const*, char const*)>:
c0010ff3:	83 ec 10             	sub    esp,0x10
c0010ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ffa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ffe:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011004:	e8 2f fc ff ff       	call   c0010c38 <EnvVarContainer::setEnv(char const*, char const*)>
c0011009:	83 c4 1c             	add    esp,0x1c
c001100c:	c3                   	ret    

c001100d <KeSetEnvUser(char const*, char const*)>:
c001100d:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0011012:	85 c0                	test   eax,eax
c0011014:	74 15                	je     c001102b <KeSetEnvUser(char const*, char const*)+0x1e>
c0011016:	83 ec 10             	sub    esp,0x10
c0011019:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001101d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011021:	50                   	push   eax
c0011022:	e8 11 fc ff ff       	call   c0010c38 <EnvVarContainer::setEnv(char const*, char const*)>
c0011027:	83 c4 1c             	add    esp,0x1c
c001102a:	c3                   	ret    
c001102b:	c3                   	ret    

c001102c <KeSetEnvProcess(Process*, char const*, char const*)>:
c001102c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011030:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011036:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001103a:	e9 f9 fb ff ff       	jmp    c0010c38 <EnvVarContainer::setEnv(char const*, char const*)>

c001103f <KeDeleteEnvSystem(char const*)>:
c001103f:	c3                   	ret    

c0011040 <KeDeleteEnvUser(char const*)>:
c0011040:	c3                   	ret    

c0011041 <KeDeleteEnvProcess(Process*, char const*)>:
c0011041:	c3                   	ret    

c0011042 <KeNewProcessEnv(Process*)>:
c0011042:	83 ec 28             	sub    esp,0x28
c0011045:	6a 0c                	push   0xc
c0011047:	e8 87 6a ff ff       	call   c0007ad3 <malloc>
c001104c:	5a                   	pop    edx
c001104d:	59                   	pop    ecx
c001104e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011052:	50                   	push   eax
c0011053:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011057:	e8 e0 fe ff ff       	call   c0010f3c <EnvVarContainer::EnvVarContainer(Process*)>
c001105c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011060:	83 c4 2c             	add    esp,0x2c
c0011063:	c3                   	ret    

c0011064 <KeCopyProcessEnv(Process*, Process*)>:
c0011064:	57                   	push   edi
c0011065:	56                   	push   esi
c0011066:	53                   	push   ebx
c0011067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001106b:	83 ec 0c             	sub    esp,0xc
c001106e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011074:	6a 0c                	push   0xc
c0011076:	e8 58 6a ff ff       	call   c0007ad3 <malloc>
c001107b:	89 c3                	mov    ebx,eax
c001107d:	58                   	pop    eax
c001107e:	5a                   	pop    edx
c001107f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011083:	53                   	push   ebx
c0011084:	e8 b3 fe ff ff       	call   c0010f3c <EnvVarContainer::EnvVarContainer(Process*)>
c0011089:	8b 07                	mov    eax,DWORD PTR [edi]
c001108b:	89 03                	mov    DWORD PTR [ebx],eax
c001108d:	c1 e0 03             	shl    eax,0x3
c0011090:	89 04 24             	mov    DWORD PTR [esp],eax
c0011093:	e8 3b 6a ff ff       	call   c0007ad3 <malloc>
c0011098:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001109b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001109d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00110a0:	89 c7                	mov    edi,eax
c00110a2:	c1 e1 03             	shl    ecx,0x3
c00110a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110a7:	83 c4 10             	add    esp,0x10
c00110aa:	89 d8                	mov    eax,ebx
c00110ac:	5b                   	pop    ebx
c00110ad:	5e                   	pop    esi
c00110ae:	5f                   	pop    edi
c00110af:	c3                   	ret    

c00110b0 <KeLoadSystemEnv()>:
c00110b0:	53                   	push   ebx
c00110b1:	83 ec 14             	sub    esp,0x14
c00110b4:	6a 0c                	push   0xc
c00110b6:	e8 18 6a ff ff       	call   c0007ad3 <malloc>
c00110bb:	89 c3                	mov    ebx,eax
c00110bd:	58                   	pop    eax
c00110be:	5a                   	pop    edx
c00110bf:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00110c5:	53                   	push   ebx
c00110c6:	e8 71 fe ff ff       	call   c0010f3c <EnvVarContainer::EnvVarContainer(Process*)>
c00110cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110ce:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c00110d4:	e8 47 fe ff ff       	call   c0010f20 <EnvVarContainer::__loadSystem()>
c00110d9:	83 c4 18             	add    esp,0x18
c00110dc:	5b                   	pop    ebx
c00110dd:	c3                   	ret    

c00110de <KeLoadUserEnv()>:
c00110de:	53                   	push   ebx
c00110df:	83 ec 14             	sub    esp,0x14
c00110e2:	6a 0c                	push   0xc
c00110e4:	e8 ea 69 ff ff       	call   c0007ad3 <malloc>
c00110e9:	89 c3                	mov    ebx,eax
c00110eb:	58                   	pop    eax
c00110ec:	5a                   	pop    edx
c00110ed:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00110f3:	53                   	push   ebx
c00110f4:	e8 43 fe ff ff       	call   c0010f3c <EnvVarContainer::EnvVarContainer(Process*)>
c00110f9:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c00110ff:	83 c4 18             	add    esp,0x18
c0011102:	5b                   	pop    ebx
c0011103:	c3                   	ret    

c0011104 <KeFlushEnv()>:
c0011104:	c3                   	ret    

c0011105 <KeGetProcessTotalEnvCount(Process*)>:
c0011105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011109:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001110f:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011115:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001111a:	8b 00                	mov    eax,DWORD PTR [eax]
c001111c:	03 01                	add    eax,DWORD PTR [ecx]
c001111e:	85 d2                	test   edx,edx
c0011120:	74 02                	je     c0011124 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011122:	03 02                	add    eax,DWORD PTR [edx]
c0011124:	c3                   	ret    

c0011125 <KeGetProcessEnvPair(Process*, int)>:
c0011125:	57                   	push   edi
c0011126:	56                   	push   esi
c0011127:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c001112d:	53                   	push   ebx
c001112e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011132:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011136:	85 f6                	test   esi,esi
c0011138:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001113c:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011142:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011144:	75 16                	jne    c001115c <KeGetProcessEnvPair(Process*, int)+0x37>
c0011146:	39 c2                	cmp    edx,eax
c0011148:	7c 16                	jl     c0011160 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001114a:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c0011150:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011152:	01 c6                	add    esi,eax
c0011154:	39 d6                	cmp    esi,edx
c0011156:	7e 3c                	jle    c0011194 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011158:	29 c2                	sub    edx,eax
c001115a:	eb 04                	jmp    c0011160 <KeGetProcessEnvPair(Process*, int)+0x3b>
c001115c:	39 c2                	cmp    edx,eax
c001115e:	7d 05                	jge    c0011165 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011160:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011163:	eb 20                	jmp    c0011185 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011165:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011167:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001116a:	39 d1                	cmp    ecx,edx
c001116c:	7e 04                	jle    c0011172 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001116e:	29 c2                	sub    edx,eax
c0011170:	eb 10                	jmp    c0011182 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011172:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c0011178:	03 0e                	add    ecx,DWORD PTR [esi]
c001117a:	39 d1                	cmp    ecx,edx
c001117c:	7e 16                	jle    c0011194 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001117e:	29 c2                	sub    edx,eax
c0011180:	29 fa                	sub    edx,edi
c0011182:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011185:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011188:	8b 02                	mov    eax,DWORD PTR [edx]
c001118a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001118d:	89 03                	mov    DWORD PTR [ebx],eax
c001118f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011192:	eb 1d                	jmp    c00111b1 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011194:	83 ec 0c             	sub    esp,0xc
c0011197:	68 52 1d 02 c0       	push   0xc0021d52
c001119c:	e8 ac 00 00 00       	call   c001124d <KePanic(char const*)>
c00111a1:	83 c4 10             	add    esp,0x10
c00111a4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111aa:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111b1:	89 d8                	mov    eax,ebx
c00111b3:	5b                   	pop    ebx
c00111b4:	5e                   	pop    esi
c00111b5:	5f                   	pop    edi
c00111b6:	c2 04 00             	ret    0x4

c00111b9 <CPU::current()>:
c00111b9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00111be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111c4:	c3                   	ret    

c00111c5 <operator new(unsigned long)>:
c00111c5:	e9 09 69 ff ff       	jmp    c0007ad3 <malloc>

c00111ca <operator delete(void*)>:
c00111ca:	e9 24 69 ff ff       	jmp    c0007af3 <rfree>

c00111cf <disableIRQs()>:
c00111cf:	fa                   	cli    
c00111d0:	c3                   	ret    

c00111d1 <enableIRQs()>:
c00111d1:	fb                   	sti    
c00111d2:	c3                   	ret    

c00111d3 <lockScheduler()>:
c00111d3:	fa                   	cli    
c00111d4:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00111da:	c3                   	ret    

c00111db <unlockScheduler()>:
c00111db:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00111e0:	48                   	dec    eax
c00111e1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00111e6:	75 01                	jne    c00111e9 <unlockScheduler()+0xe>
c00111e8:	fb                   	sti    
c00111e9:	c3                   	ret    

c00111ea <lockStuff()>:
c00111ea:	fa                   	cli    
c00111eb:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00111f1:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c00111f7:	c3                   	ret    

c00111f8 <unlockStuff()>:
c00111f8:	83 ec 0c             	sub    esp,0xc
c00111fb:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0011200:	48                   	dec    eax
c0011201:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011206:	75 18                	jne    c0011220 <unlockStuff()+0x28>
c0011208:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001120f:	74 0f                	je     c0011220 <unlockStuff()+0x28>
c0011211:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001121b:	e8 30 49 00 00       	call   c0015b50 <schedule()>
c0011220:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011225:	48                   	dec    eax
c0011226:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001122b:	75 01                	jne    c001122e <unlockStuff()+0x36>
c001122d:	fb                   	sti    
c001122e:	83 c4 0c             	add    esp,0xc
c0011231:	c3                   	ret    

c0011232 <Virt::getAKernelVAS()>:
c0011232:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011237:	c3                   	ret    

c0011238 <__not_memcpy>:
c0011238:	57                   	push   edi
c0011239:	56                   	push   esi
c001123a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001123e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011242:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011246:	89 c7                	mov    edi,eax
c0011248:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001124a:	5e                   	pop    esi
c001124b:	5f                   	pop    edi
c001124c:	c3                   	ret    

c001124d <KePanic(char const*)>:
c001124d:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011254:	e9 87 68 00 00       	jmp    c0017ae0 <HalPanic(char const*)>

c0011259 <KePowerThread(void*)>:
c0011259:	83 ec 0c             	sub    esp,0xc
c001125c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011261:	48                   	dec    eax
c0011262:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011267:	75 01                	jne    c001126a <KePowerThread(void*)+0x11>
c0011269:	fb                   	sti    
c001126a:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011271:	83 ec 0c             	sub    esp,0xc
c0011274:	6a 0a                	push   0xa
c0011276:	e8 05 4c 00 00       	call   c0015e80 <sleep(unsigned int)>
c001127b:	83 c4 10             	add    esp,0x10
c001127e:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011285:	eb e3                	jmp    c001126a <KePowerThread(void*)+0x11>

c0011287 <KeChangePowerSettings(PowerSettings)>:
c0011287:	57                   	push   edi
c0011288:	b9 09 00 00 00       	mov    ecx,0x9
c001128d:	56                   	push   esi
c001128e:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011293:	fc                   	cld    
c0011294:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011298:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001129a:	5e                   	pop    esi
c001129b:	5f                   	pop    edi
c001129c:	c3                   	ret    

c001129d <KeUserIOReceived()>:
c001129d:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112a7:	c3                   	ret    

c00112a8 <KeHandlePowerButton()>:
c00112a8:	83 ec 0c             	sub    esp,0xc
c00112ab:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00112b0:	83 f8 02             	cmp    eax,0x2
c00112b3:	75 10                	jne    c00112c5 <KeHandlePowerButton()+0x1d>
c00112b5:	83 ec 0c             	sub    esp,0xc
c00112b8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112be:	e8 87 5e ff ff       	call   c000714a <Computer::shutdown()>
c00112c3:	eb 11                	jmp    c00112d6 <KeHandlePowerButton()+0x2e>
c00112c5:	48                   	dec    eax
c00112c6:	75 11                	jne    c00112d9 <KeHandlePowerButton()+0x31>
c00112c8:	83 ec 0c             	sub    esp,0xc
c00112cb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112d1:	e8 a4 5e ff ff       	call   c000717a <Computer::sleep()>
c00112d6:	83 c4 10             	add    esp,0x10
c00112d9:	83 c4 0c             	add    esp,0xc
c00112dc:	c3                   	ret    

c00112dd <KeHandleSleepButton()>:
c00112dd:	83 ec 0c             	sub    esp,0xc
c00112e0:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c00112e5:	83 f8 02             	cmp    eax,0x2
c00112e8:	75 10                	jne    c00112fa <KeHandleSleepButton()+0x1d>
c00112ea:	83 ec 0c             	sub    esp,0xc
c00112ed:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112f3:	e8 52 5e ff ff       	call   c000714a <Computer::shutdown()>
c00112f8:	eb 11                	jmp    c001130b <KeHandleSleepButton()+0x2e>
c00112fa:	48                   	dec    eax
c00112fb:	75 11                	jne    c001130e <KeHandleSleepButton()+0x31>
c00112fd:	83 ec 0c             	sub    esp,0xc
c0011300:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011306:	e8 6f 5e ff ff       	call   c000717a <Computer::sleep()>
c001130b:	83 c4 10             	add    esp,0x10
c001130e:	83 c4 0c             	add    esp,0xc
c0011311:	c3                   	ret    

c0011312 <KeSetupPowerManager()>:
c0011312:	83 ec 0c             	sub    esp,0xc
c0011315:	68 f0 00 00 00       	push   0xf0
c001131a:	6a 00                	push   0x0
c001131c:	68 59 12 01 c0       	push   0xc0011259
c0011321:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011327:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c0011331:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011338:	e8 c7 45 00 00       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c001133d:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011347:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c0011351:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c001135b:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011365:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001136f:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c0011379:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c0011383:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c001138d:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c0011397:	83 c4 1c             	add    esp,0x1c
c001139a:	c3                   	ret    

c001139b <KeRand()>:
c001139b:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00113a5:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00113af:	53                   	push   ebx
c00113b0:	01 c1                	add    ecx,eax
c00113b2:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00113b7:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00113bd:	01 ca                	add    edx,ecx
c00113bf:	05 ef 04 b5 00       	add    eax,0xb504ef
c00113c4:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00113c9:	83 d2 00             	adc    edx,0x0
c00113cc:	0f b7 da             	movzx  ebx,dx
c00113cf:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c00113d5:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00113d9:	5b                   	pop    ebx
c00113da:	c3                   	ret    

c00113db <KeSeedRand(unsigned int)>:
c00113db:	53                   	push   ebx
c00113dc:	83 ec 08             	sub    esp,0x8
c00113df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00113e3:	e8 17 6a 00 00       	call   c0017dff <HalGetRand()>
c00113e8:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c00113f2:	31 d8                	xor    eax,ebx
c00113f4:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00113f9:	e8 9d ff ff ff       	call   c001139b <KeRand()>
c00113fe:	83 c4 08             	add    esp,0x8
c0011401:	5b                   	pop    ebx
c0011402:	eb 97                	jmp    c001139b <KeRand()>

c0011404 <KeInitRand()>:
c0011404:	83 ec 0c             	sub    esp,0xc
c0011407:	e8 e8 67 00 00       	call   c0017bf4 <HalQueryPerformanceCounter()>
c001140c:	0f 20 da             	mov    edx,cr3
c001140f:	0f 22 da             	mov    cr3,edx
c0011412:	0f 20 da             	mov    edx,cr3
c0011415:	0f 22 da             	mov    cr3,edx
c0011418:	0f 20 da             	mov    edx,cr3
c001141b:	0f 22 da             	mov    cr3,edx
c001141e:	0f 20 da             	mov    edx,cr3
c0011421:	0f 22 da             	mov    cr3,edx
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	35 03 8a 95 38       	xor    eax,0x38958a03
c001142c:	50                   	push   eax
c001142d:	e8 a9 ff ff ff       	call   c00113db <KeSeedRand(unsigned int)>
c0011432:	83 c4 1c             	add    esp,0x1c
c0011435:	c3                   	ret    
c0011436:	66 90                	xchg   ax,ax

c0011438 <KeResolveCompatibilitySymbol(char*)>:
c0011438:	83 ec 0c             	sub    esp,0xc
c001143b:	83 ec 08             	sub    esp,0x8
c001143e:	68 6c 1d 02 c0       	push   0xc0021d6c
c0011443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011447:	e8 34 f3 fe ff       	call   c0000780 <strcmp>
c001144c:	83 c4 10             	add    esp,0x10
c001144f:	85 c0                	test   eax,eax
c0011451:	0f 94 c0             	sete   al
c0011454:	0f b6 c0             	movzx  eax,al
c0011457:	85 c0                	test   eax,eax
c0011459:	74 0d                	je     c0011468 <KeResolveCompatibilitySymbol(char*)+0x30>
c001145b:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011460:	e9 8b 01 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011465:	8d 76 00             	lea    esi,[esi+0x0]
c0011468:	83 ec 08             	sub    esp,0x8
c001146b:	68 75 1d 02 c0       	push   0xc0021d75
c0011470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011474:	e8 07 f3 fe ff       	call   c0000780 <strcmp>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	85 c0                	test   eax,eax
c001147e:	0f 94 c0             	sete   al
c0011481:	0f b6 c0             	movzx  eax,al
c0011484:	85 c0                	test   eax,eax
c0011486:	74 0c                	je     c0011494 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011488:	b8 10 f2 01 c0       	mov    eax,0xc001f210
c001148d:	e9 5e 01 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011492:	66 90                	xchg   ax,ax
c0011494:	83 ec 08             	sub    esp,0x8
c0011497:	68 7f 1d 02 c0       	push   0xc0021d7f
c001149c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a0:	e8 db f2 fe ff       	call   c0000780 <strcmp>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	85 c0                	test   eax,eax
c00114aa:	0f 94 c0             	sete   al
c00114ad:	0f b6 c0             	movzx  eax,al
c00114b0:	85 c0                	test   eax,eax
c00114b2:	74 0c                	je     c00114c0 <KeResolveCompatibilitySymbol(char*)+0x88>
c00114b4:	b8 44 ef 01 c0       	mov    eax,0xc001ef44
c00114b9:	e9 32 01 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114be:	66 90                	xchg   ax,ax
c00114c0:	83 ec 08             	sub    esp,0x8
c00114c3:	68 88 1d 02 c0       	push   0xc0021d88
c00114c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cc:	e8 af f2 fe ff       	call   c0000780 <strcmp>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	85 c0                	test   eax,eax
c00114d6:	0f 94 c0             	sete   al
c00114d9:	0f b6 c0             	movzx  eax,al
c00114dc:	85 c0                	test   eax,eax
c00114de:	74 0c                	je     c00114ec <KeResolveCompatibilitySymbol(char*)+0xb4>
c00114e0:	b8 4d 12 01 c0       	mov    eax,0xc001124d
c00114e5:	e9 06 01 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	83 ec 08             	sub    esp,0x8
c00114ef:	68 9b 1d 02 c0       	push   0xc0021d9b
c00114f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f8:	e8 83 f2 fe ff       	call   c0000780 <strcmp>
c00114fd:	83 c4 10             	add    esp,0x10
c0011500:	85 c0                	test   eax,eax
c0011502:	0f 94 c0             	sete   al
c0011505:	0f b6 c0             	movzx  eax,al
c0011508:	85 c0                	test   eax,eax
c001150a:	74 0c                	je     c0011518 <KeResolveCompatibilitySymbol(char*)+0xe0>
c001150c:	b8 79 0b 01 c0       	mov    eax,0xc0010b79
c0011511:	e9 da 00 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011516:	66 90                	xchg   ax,ax
c0011518:	83 ec 08             	sub    esp,0x8
c001151b:	68 b8 1d 02 c0       	push   0xc0021db8
c0011520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011524:	e8 57 f2 fe ff       	call   c0000780 <strcmp>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	85 c0                	test   eax,eax
c001152e:	0f 94 c0             	sete   al
c0011531:	0f b6 c0             	movzx  eax,al
c0011534:	85 c0                	test   eax,eax
c0011536:	74 0c                	je     c0011544 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011538:	b8 10 f3 01 c0       	mov    eax,0xc001f310
c001153d:	e9 ae 00 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011542:	66 90                	xchg   ax,ax
c0011544:	83 ec 08             	sub    esp,0x8
c0011547:	68 c2 1d 02 c0       	push   0xc0021dc2
c001154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011550:	e8 2b f2 fe ff       	call   c0000780 <strcmp>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	85 c0                	test   eax,eax
c001155a:	0f 94 c0             	sete   al
c001155d:	0f b6 c0             	movzx  eax,al
c0011560:	85 c0                	test   eax,eax
c0011562:	74 0c                	je     c0011570 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011564:	b8 90 f0 01 c0       	mov    eax,0xc001f090
c0011569:	e9 82 00 00 00       	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001156e:	66 90                	xchg   ax,ax
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	68 cb 1d 02 c0       	push   0xc0021dcb
c0011578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001157c:	e8 ff f1 fe ff       	call   c0000780 <strcmp>
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	85 c0                	test   eax,eax
c0011586:	0f 94 c0             	sete   al
c0011589:	0f b6 c0             	movzx  eax,al
c001158c:	85 c0                	test   eax,eax
c001158e:	74 08                	je     c0011598 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011590:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011595:	eb 59                	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011597:	90                   	nop
c0011598:	83 ec 08             	sub    esp,0x8
c001159b:	68 e3 1d 02 c0       	push   0xc0021de3
c00115a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a4:	e8 d7 f1 fe ff       	call   c0000780 <strcmp>
c00115a9:	83 c4 10             	add    esp,0x10
c00115ac:	85 c0                	test   eax,eax
c00115ae:	0f 94 c0             	sete   al
c00115b1:	0f b6 c0             	movzx  eax,al
c00115b4:	85 c0                	test   eax,eax
c00115b6:	74 08                	je     c00115c0 <KeResolveCompatibilitySymbol(char*)+0x188>
c00115b8:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115bd:	eb 31                	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115bf:	90                   	nop
c00115c0:	83 ec 08             	sub    esp,0x8
c00115c3:	68 f0 1d 02 c0       	push   0xc0021df0
c00115c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115cc:	e8 af f1 fe ff       	call   c0000780 <strcmp>
c00115d1:	83 c4 10             	add    esp,0x10
c00115d4:	85 c0                	test   eax,eax
c00115d6:	0f 94 c0             	sete   al
c00115d9:	0f b6 c0             	movzx  eax,al
c00115dc:	85 c0                	test   eax,eax
c00115de:	74 08                	je     c00115e8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00115e0:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c00115e5:	eb 09                	jmp    c00115f0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115e7:	90                   	nop
c00115e8:	b8 00 00 00 00       	mov    eax,0x0
c00115ed:	8d 76 00             	lea    esi,[esi+0x0]
c00115f0:	83 c4 0c             	add    esp,0xc
c00115f3:	c3                   	ret    

c00115f4 <KiSigKill(int)>:
c00115f4:	83 ec 0c             	sub    esp,0xc
c00115f7:	6a 00                	push   0x0
c00115f9:	6a 00                	push   0x0
c00115fb:	6a ff                	push   0xffffffff
c00115fd:	6a 01                	push   0x1
c00115ff:	e8 4e 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011604:	83 c4 1c             	add    esp,0x1c
c0011607:	c3                   	ret    

c0011608 <KiDefaultSignalHandlerIgnore(int)>:
c0011608:	c3                   	ret    

c0011609 <KiDefaultSignalHandlerPause(int)>:
c0011609:	57                   	push   edi
c001160a:	b9 07 00 00 00       	mov    ecx,0x7
c001160f:	56                   	push   esi
c0011610:	be 39 1e 02 c0       	mov    esi,0xc0021e39
c0011615:	83 ec 24             	sub    esp,0x24
c0011618:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001161c:	fc                   	cld    
c001161d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001161f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011623:	50                   	push   eax
c0011624:	6a 00                	push   0x0
c0011626:	6a 00                	push   0x0
c0011628:	6a 27                	push   0x27
c001162a:	e8 23 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001162f:	83 c4 34             	add    esp,0x34
c0011632:	5e                   	pop    esi
c0011633:	5f                   	pop    edi
c0011634:	c3                   	ret    

c0011635 <KiDefaultSignalHandlerResume(int)>:
c0011635:	57                   	push   edi
c0011636:	b9 1d 00 00 00       	mov    ecx,0x1d
c001163b:	56                   	push   esi
c001163c:	be 55 1e 02 c0       	mov    esi,0xc0021e55
c0011641:	83 ec 24             	sub    esp,0x24
c0011644:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011648:	fc                   	cld    
c0011649:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001164b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001164f:	50                   	push   eax
c0011650:	6a 00                	push   0x0
c0011652:	6a 00                	push   0x0
c0011654:	6a 27                	push   0x27
c0011656:	e8 f7 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001165b:	83 c4 34             	add    esp,0x34
c001165e:	5e                   	pop    esi
c001165f:	5f                   	pop    edi
c0011660:	c3                   	ret    

c0011661 <KeDeinitSignals(SigHandlerBlock*)>:
c0011661:	e9 7d 64 ff ff       	jmp    c0007ae3 <free>

c0011666 <KeInitSignals()>:
c0011666:	53                   	push   ebx
c0011667:	83 ec 14             	sub    esp,0x14
c001166a:	68 c8 00 00 00       	push   0xc8
c001166f:	e8 5f 64 ff ff       	call   c0007ad3 <malloc>
c0011674:	83 c4 0c             	add    esp,0xc
c0011677:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011681:	89 c3                	mov    ebx,eax
c0011683:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001168d:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011693:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0011697:	6a 20                	push   0x20
c0011699:	6a 00                	push   0x0
c001169b:	50                   	push   eax
c001169c:	e8 4f ee fe ff       	call   c00004f0 <memset>
c00116a1:	83 c4 0c             	add    esp,0xc
c00116a4:	6a 44                	push   0x44
c00116a6:	6a 00                	push   0x0
c00116a8:	53                   	push   ebx
c00116a9:	e8 42 ee fe ff       	call   c00004f0 <memset>
c00116ae:	83 c4 18             	add    esp,0x18
c00116b1:	89 d8                	mov    eax,ebx
c00116b3:	5b                   	pop    ebx
c00116b4:	c3                   	ret    

c00116b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00116b5:	53                   	push   ebx
c00116b6:	b8 01 00 00 00       	mov    eax,0x1
c00116bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116c3:	83 f9 10             	cmp    ecx,0x10
c00116c6:	7f 21                	jg     c00116e9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00116c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116cc:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00116cf:	89 03                	mov    DWORD PTR [ebx],eax
c00116d1:	b8 01 00 00 00       	mov    eax,0x1
c00116d6:	d3 e0                	shl    eax,cl
c00116d8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00116dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00116df:	31 c0                	xor    eax,eax
c00116e1:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00116e9:	5b                   	pop    ebx
c00116ea:	c3                   	ret    

c00116eb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00116eb:	55                   	push   ebp
c00116ec:	57                   	push   edi
c00116ed:	bf 08 00 00 00       	mov    edi,0x8
c00116f2:	56                   	push   esi
c00116f3:	53                   	push   ebx
c00116f4:	83 ec 18             	sub    esp,0x18
c00116f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00116fb:	68 72 1e 02 c0       	push   0xc0021e72
c0011700:	e8 05 92 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	31 c9                	xor    ecx,ecx
c001170a:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011711:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011717:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001171b:	99                   	cdq    
c001171c:	f7 ff                	idiv   edi
c001171e:	8d 42 24             	lea    eax,[edx+0x24]
c0011721:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011725:	85 f6                	test   esi,esi
c0011727:	75 1a                	jne    c0011743 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011729:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001172d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011731:	50                   	push   eax
c0011732:	50                   	push   eax
c0011733:	52                   	push   edx
c0011734:	68 83 1e 02 c0       	push   0xc0021e83
c0011739:	e8 cc 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	eb 1b                	jmp    c001175e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011743:	41                   	inc    ecx
c0011744:	83 f9 08             	cmp    ecx,0x8
c0011747:	75 ce                	jne    c0011717 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011749:	83 ec 0c             	sub    esp,0xc
c001174c:	be 01 00 00 00       	mov    esi,0x1
c0011751:	68 a4 1e 02 c0       	push   0xc0021ea4
c0011756:	e8 af 91 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001175b:	83 c4 10             	add    esp,0x10
c001175e:	83 c4 0c             	add    esp,0xc
c0011761:	89 f0                	mov    eax,esi
c0011763:	5b                   	pop    ebx
c0011764:	5e                   	pop    esi
c0011765:	5f                   	pop    edi
c0011766:	5d                   	pop    ebp
c0011767:	c3                   	ret    

c0011768 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011768:	55                   	push   ebp
c0011769:	57                   	push   edi
c001176a:	56                   	push   esi
c001176b:	53                   	push   ebx
c001176c:	51                   	push   ecx
c001176d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011771:	85 db                	test   ebx,ebx
c0011773:	0f 84 bc 00 00 00    	je     c0011835 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011779:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011780:	0f 84 af 00 00 00    	je     c0011835 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011786:	31 c9                	xor    ecx,ecx
c0011788:	bf 08 00 00 00       	mov    edi,0x8
c001178d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011793:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011796:	99                   	cdq    
c0011797:	f7 ff                	idiv   edi
c0011799:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117a0:	85 ed                	test   ebp,ebp
c00117a2:	0f 84 9e 00 00 00    	je     c0011846 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00117a8:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117ae:	89 e9                	mov    ecx,ebp
c00117b0:	bf 01 00 00 00       	mov    edi,0x1
c00117b5:	d3 e7                	shl    edi,cl
c00117b7:	31 c9                	xor    ecx,ecx
c00117b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00117bc:	b8 01 00 00 00       	mov    eax,0x1
c00117c1:	d3 e0                	shl    eax,cl
c00117c3:	85 04 24             	test   DWORD PTR [esp],eax
c00117c6:	74 06                	je     c00117ce <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00117c8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00117cc:	75 67                	jne    c0011835 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117ce:	41                   	inc    ecx
c00117cf:	83 f9 11             	cmp    ecx,0x11
c00117d2:	75 e8                	jne    c00117bc <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00117d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00117d7:	46                   	inc    esi
c00117d8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117de:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00117e9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00117f0:	09 f8                	or     eax,edi
c00117f2:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00117f8:	31 c0                	xor    eax,eax
c00117fa:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011802:	74 09                	je     c001180d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011804:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001180b:	eb 06                	jmp    c0011813 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001180d:	40                   	inc    eax
c001180e:	83 f8 08             	cmp    eax,0x8
c0011811:	75 e7                	jne    c00117fa <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011813:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011817:	83 fd 09             	cmp    ebp,0x9
c001181a:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001181d:	89 2a                	mov    DWORD PTR [edx],ebp
c001181f:	75 07                	jne    c0011828 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011821:	b8 f4 15 01 c0       	mov    eax,0xc00115f4
c0011826:	eb 31                	jmp    c0011859 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011828:	83 f8 01             	cmp    eax,0x1
c001182b:	75 0c                	jne    c0011839 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001182d:	f7 d7                	not    edi
c001182f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011835:	31 c0                	xor    eax,eax
c0011837:	eb 20                	jmp    c0011859 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011839:	85 c0                	test   eax,eax
c001183b:	75 1c                	jne    c0011859 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001183d:	8b 04 ad a0 32 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcd60]
c0011844:	eb 13                	jmp    c0011859 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011846:	41                   	inc    ecx
c0011847:	46                   	inc    esi
c0011848:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001184e:	83 f9 08             	cmp    ecx,0x8
c0011851:	0f 85 36 ff ff ff    	jne    c001178d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011857:	eb dc                	jmp    c0011835 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011859:	5a                   	pop    edx
c001185a:	5b                   	pop    ebx
c001185b:	5e                   	pop    esi
c001185c:	5f                   	pop    edi
c001185d:	5d                   	pop    ebp
c001185e:	c3                   	ret    

c001185f <KiCheckSignalZ>:
c001185f:	83 ec 10             	sub    esp,0x10
c0011862:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011866:	50                   	push   eax
c0011867:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001186c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001186f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011875:	e8 ee fe ff ff       	call   c0011768 <KeCheckSignal(SigHandlerBlock*, int*)>
c001187a:	5a                   	pop    edx
c001187b:	31 d2                	xor    edx,edx
c001187d:	59                   	pop    ecx
c001187e:	85 c0                	test   eax,eax
c0011880:	74 19                	je     c001189b <KiCheckSignalZ+0x3c>
c0011882:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011888:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001188b:	89 02                	mov    DWORD PTR [edx],eax
c001188d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011894:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011898:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001189b:	89 d0                	mov    eax,edx
c001189d:	83 c4 10             	add    esp,0x10
c00118a0:	c3                   	ret    

c00118a1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00118a1:	56                   	push   esi
c00118a2:	53                   	push   ebx
c00118a3:	bb 01 00 00 00       	mov    ebx,0x1
c00118a8:	52                   	push   edx
c00118a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118b1:	d3 e3                	shl    ebx,cl
c00118b3:	83 f9 10             	cmp    ecx,0x10
c00118b6:	7f 08                	jg     c00118c0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00118b8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00118be:	75 10                	jne    c00118d0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	68 b5 1e 02 c0       	push   0xc0021eb5
c00118c8:	e8 80 f9 ff ff       	call   c001124d <KePanic(char const*)>
c00118cd:	83 c4 10             	add    esp,0x10
c00118d0:	f7 d3                	not    ebx
c00118d2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00118d8:	58                   	pop    eax
c00118d9:	5b                   	pop    ebx
c00118da:	5e                   	pop    esi
c00118db:	c3                   	ret    

c00118dc <KiFinishSignalZ>:
c00118dc:	53                   	push   ebx
c00118dd:	83 ec 10             	sub    esp,0x10
c00118e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00118e4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00118e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118ef:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118f5:	e8 a7 ff ff ff       	call   c00118a1 <KeCompleteSignal(SigHandlerBlock*, int)>
c00118fa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011900:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011907:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001190e:	83 c4 18             	add    esp,0x18
c0011911:	5b                   	pop    ebx
c0011912:	c3                   	ret    

c0011913 <SysSeekDir(regs*)>:
c0011913:	31 c0                	xor    eax,eax
c0011915:	31 d2                	xor    edx,edx
c0011917:	c3                   	ret    

c0011918 <SysTellDir(regs*)>:
c0011918:	31 c0                	xor    eax,eax
c001191a:	31 d2                	xor    edx,edx
c001191c:	c3                   	ret    

c001191d <SysVerify(regs*)>:
c001191d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011921:	31 d2                	xor    edx,edx
c0011923:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011926:	c3                   	ret    

c0011927 <SysGetArgc(regs*)>:
c0011927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001192c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001192f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011935:	89 c2                	mov    edx,eax
c0011937:	c1 fa 1f             	sar    edx,0x1f
c001193a:	c3                   	ret    

c001193b <SysTTYName(regs*)>:
c001193b:	b8 01 00 00 00       	mov    eax,0x1
c0011940:	31 d2                	xor    edx,edx
c0011942:	c3                   	ret    

c0011943 <SysFormatDisk(regs*)>:
c0011943:	56                   	push   esi
c0011944:	53                   	push   ebx
c0011945:	83 ec 04             	sub    esp,0x4
c0011948:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001194c:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011952:	eb 2a                	jmp    c001197e <SysFormatDisk(regs*)+0x3b>
c0011954:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001195d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001195f:	51                   	push   ecx
c0011960:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011963:	51                   	push   ecx
c0011964:	50                   	push   eax
c0011965:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001196c:	50                   	push   eax
c001196d:	53                   	push   ebx
c001196e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011971:	83 c4 20             	add    esp,0x20
c0011974:	83 f8 08             	cmp    eax,0x8
c0011977:	89 c1                	mov    ecx,eax
c0011979:	75 14                	jne    c001198f <SysFormatDisk(regs*)+0x4c>
c001197b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001197e:	85 db                	test   ebx,ebx
c0011980:	75 d2                	jne    c0011954 <SysFormatDisk(regs*)+0x11>
c0011982:	b8 03 00 00 00       	mov    eax,0x3
c0011987:	31 d2                	xor    edx,edx
c0011989:	83 c4 04             	add    esp,0x4
c001198c:	5b                   	pop    ebx
c001198d:	5e                   	pop    esi
c001198e:	c3                   	ret    
c001198f:	85 c0                	test   eax,eax
c0011991:	74 13                	je     c00119a6 <SysFormatDisk(regs*)+0x63>
c0011993:	31 d2                	xor    edx,edx
c0011995:	83 f9 09             	cmp    ecx,0x9
c0011998:	b8 01 00 00 00       	mov    eax,0x1
c001199d:	74 ea                	je     c0011989 <SysFormatDisk(regs*)+0x46>
c001199f:	b8 02 00 00 00       	mov    eax,0x2
c00119a4:	eb e1                	jmp    c0011987 <SysFormatDisk(regs*)+0x44>
c00119a6:	31 c0                	xor    eax,eax
c00119a8:	eb dd                	jmp    c0011987 <SysFormatDisk(regs*)+0x44>

c00119aa <SysSetDiskVolumeLabel(regs*)>:
c00119aa:	56                   	push   esi
c00119ab:	53                   	push   ebx
c00119ac:	83 ec 04             	sub    esp,0x4
c00119af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119b3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119b6:	83 f8 19             	cmp    eax,0x19
c00119b9:	77 33                	ja     c00119ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00119bb:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00119c2:	85 c9                	test   ecx,ecx
c00119c4:	74 28                	je     c00119ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00119c6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00119c9:	85 db                	test   ebx,ebx
c00119cb:	74 21                	je     c00119ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00119cd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00119d3:	85 d2                	test   edx,edx
c00119d5:	74 17                	je     c00119ee <SysSetDiskVolumeLabel(regs*)+0x44>
c00119d7:	8b 32                	mov    esi,DWORD PTR [edx]
c00119d9:	53                   	push   ebx
c00119da:	50                   	push   eax
c00119db:	51                   	push   ecx
c00119dc:	52                   	push   edx
c00119dd:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	83 c4 04             	add    esp,0x4
c00119e6:	5b                   	pop    ebx
c00119e7:	5e                   	pop    esi
c00119e8:	89 c2                	mov    edx,eax
c00119ea:	c1 fa 1f             	sar    edx,0x1f
c00119ed:	c3                   	ret    
c00119ee:	83 c4 04             	add    esp,0x4
c00119f1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119f6:	5b                   	pop    ebx
c00119f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119fc:	5e                   	pop    esi
c00119fd:	c3                   	ret    

c00119fe <SysGetDiskVolumeLabel(regs*)>:
c00119fe:	57                   	push   edi
c00119ff:	56                   	push   esi
c0011a00:	53                   	push   ebx
c0011a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a05:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a08:	83 fa 19             	cmp    edx,0x19
c0011a0b:	77 3c                	ja     c0011a49 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a0d:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a14:	85 c9                	test   ecx,ecx
c0011a16:	74 31                	je     c0011a49 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a18:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a1b:	85 db                	test   ebx,ebx
c0011a1d:	74 2a                	je     c0011a49 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a1f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a22:	85 f6                	test   esi,esi
c0011a24:	74 23                	je     c0011a49 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a26:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011a2c:	85 c0                	test   eax,eax
c0011a2e:	74 19                	je     c0011a49 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a30:	83 ec 0c             	sub    esp,0xc
c0011a33:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a35:	56                   	push   esi
c0011a36:	53                   	push   ebx
c0011a37:	52                   	push   edx
c0011a38:	51                   	push   ecx
c0011a39:	50                   	push   eax
c0011a3a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a3d:	83 c4 20             	add    esp,0x20
c0011a40:	5b                   	pop    ebx
c0011a41:	5e                   	pop    esi
c0011a42:	89 c2                	mov    edx,eax
c0011a44:	c1 fa 1f             	sar    edx,0x1f
c0011a47:	5f                   	pop    edi
c0011a48:	c3                   	ret    
c0011a49:	5b                   	pop    ebx
c0011a4a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a54:	5e                   	pop    esi
c0011a55:	5f                   	pop    edi
c0011a56:	c3                   	ret    

c0011a57 <SysShutdown(regs*)>:
c0011a57:	57                   	push   edi
c0011a58:	56                   	push   esi
c0011a59:	83 ec 04             	sub    esp,0x4
c0011a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a63:	85 c0                	test   eax,eax
c0011a65:	74 1e                	je     c0011a85 <SysShutdown(regs*)+0x2e>
c0011a67:	83 f8 01             	cmp    eax,0x1
c0011a6a:	74 5f                	je     c0011acb <SysShutdown(regs*)+0x74>
c0011a6c:	83 f8 02             	cmp    eax,0x2
c0011a6f:	be ff ff ff ff       	mov    esi,0xffffffff
c0011a74:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011a79:	74 32                	je     c0011aad <SysShutdown(regs*)+0x56>
c0011a7b:	83 c4 04             	add    esp,0x4
c0011a7e:	89 f0                	mov    eax,esi
c0011a80:	5e                   	pop    esi
c0011a81:	89 fa                	mov    edx,edi
c0011a83:	5f                   	pop    edi
c0011a84:	c3                   	ret    
c0011a85:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a8a:	be ff ff ff ff       	mov    esi,0xffffffff
c0011a8f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0011a94:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a96:	6a 00                	push   0x0
c0011a98:	6a 00                	push   0x0
c0011a9a:	6a 00                	push   0x0
c0011a9c:	50                   	push   eax
c0011a9d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011aa0:	83 c4 10             	add    esp,0x10
c0011aa3:	89 f0                	mov    eax,esi
c0011aa5:	83 c4 04             	add    esp,0x4
c0011aa8:	89 fa                	mov    edx,edi
c0011aaa:	5e                   	pop    esi
c0011aab:	5f                   	pop    edi
c0011aac:	c3                   	ret    
c0011aad:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ab2:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ab4:	6a 00                	push   0x0
c0011ab6:	6a 00                	push   0x0
c0011ab8:	6a 01                	push   0x1
c0011aba:	50                   	push   eax
c0011abb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011abe:	83 c4 10             	add    esp,0x10
c0011ac1:	89 f0                	mov    eax,esi
c0011ac3:	83 c4 04             	add    esp,0x4
c0011ac6:	89 fa                	mov    edx,edi
c0011ac8:	5e                   	pop    esi
c0011ac9:	5f                   	pop    edi
c0011aca:	c3                   	ret    
c0011acb:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011ad0:	85 c0                	test   eax,eax
c0011ad2:	74 02                	je     c0011ad6 <SysShutdown(regs*)+0x7f>
c0011ad4:	ff d0                	call   eax
c0011ad6:	31 f6                	xor    esi,esi
c0011ad8:	83 c4 04             	add    esp,0x4
c0011adb:	89 f0                	mov    eax,esi
c0011add:	31 ff                	xor    edi,edi
c0011adf:	5e                   	pop    esi
c0011ae0:	89 fa                	mov    edx,edi
c0011ae2:	5f                   	pop    edi
c0011ae3:	c3                   	ret    

c0011ae4 <SysRealpath(regs*)>:
c0011ae4:	53                   	push   ebx
c0011ae5:	83 ec 08             	sub    esp,0x8
c0011ae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011aec:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0011aef:	85 c9                	test   ecx,ecx
c0011af1:	74 37                	je     c0011b2a <SysRealpath(regs*)+0x46>
c0011af3:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011af6:	31 d2                	xor    edx,edx
c0011af8:	b8 01 00 00 00       	mov    eax,0x1
c0011afd:	85 db                	test   ebx,ebx
c0011aff:	75 05                	jne    c0011b06 <SysRealpath(regs*)+0x22>
c0011b01:	83 c4 08             	add    esp,0x8
c0011b04:	5b                   	pop    ebx
c0011b05:	c3                   	ret    
c0011b06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b0b:	83 ec 04             	sub    esp,0x4
c0011b0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b11:	05 0c 01 00 00       	add    eax,0x10c
c0011b16:	50                   	push   eax
c0011b17:	51                   	push   ecx
c0011b18:	53                   	push   ebx
c0011b19:	e8 8e 9a ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*)>
c0011b1e:	83 c4 10             	add    esp,0x10
c0011b21:	31 c0                	xor    eax,eax
c0011b23:	31 d2                	xor    edx,edx
c0011b25:	83 c4 08             	add    esp,0x8
c0011b28:	5b                   	pop    ebx
c0011b29:	c3                   	ret    
c0011b2a:	b8 01 00 00 00       	mov    eax,0x1
c0011b2f:	31 d2                	xor    edx,edx
c0011b31:	eb f2                	jmp    c0011b25 <SysRealpath(regs*)+0x41>

c0011b33 <SysReadDir(regs*)>:
c0011b33:	53                   	push   ebx
c0011b34:	83 ec 18             	sub    esp,0x18
c0011b37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b3b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b3e:	83 f8 02             	cmp    eax,0x2
c0011b41:	76 4f                	jbe    c0011b92 <SysReadDir(regs*)+0x5f>
c0011b43:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b4a:	77 52                	ja     c0011b9e <SysReadDir(regs*)+0x6b>
c0011b4c:	83 ec 0c             	sub    esp,0xc
c0011b4f:	50                   	push   eax
c0011b50:	e8 46 79 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011b55:	83 c4 10             	add    esp,0x10
c0011b58:	85 c0                	test   eax,eax
c0011b5a:	74 42                	je     c0011b9e <SysReadDir(regs*)+0x6b>
c0011b5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b64:	83 ec 0c             	sub    esp,0xc
c0011b67:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b6d:	51                   	push   ecx
c0011b6e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b71:	51                   	push   ecx
c0011b72:	6a 00                	push   0x0
c0011b74:	68 10 01 00 00       	push   0x110
c0011b79:	50                   	push   eax
c0011b7a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b7d:	83 c4 20             	add    esp,0x20
c0011b80:	85 c0                	test   eax,eax
c0011b82:	89 c1                	mov    ecx,eax
c0011b84:	74 27                	je     c0011bad <SysReadDir(regs*)+0x7a>
c0011b86:	31 d2                	xor    edx,edx
c0011b88:	83 f9 07             	cmp    ecx,0x7
c0011b8b:	b8 02 00 00 00       	mov    eax,0x2
c0011b90:	75 16                	jne    c0011ba8 <SysReadDir(regs*)+0x75>
c0011b92:	b8 01 00 00 00       	mov    eax,0x1
c0011b97:	31 d2                	xor    edx,edx
c0011b99:	83 c4 18             	add    esp,0x18
c0011b9c:	5b                   	pop    ebx
c0011b9d:	c3                   	ret    
c0011b9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ba3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ba8:	83 c4 18             	add    esp,0x18
c0011bab:	5b                   	pop    ebx
c0011bac:	c3                   	ret    
c0011bad:	31 c0                	xor    eax,eax
c0011baf:	31 d2                	xor    edx,edx
c0011bb1:	eb e6                	jmp    c0011b99 <SysReadDir(regs*)+0x66>

c0011bb3 <SysIsATTY(regs*)>:
c0011bb3:	83 ec 0c             	sub    esp,0xc
c0011bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bba:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bbd:	83 f8 02             	cmp    eax,0x2
c0011bc0:	76 07                	jbe    c0011bc9 <SysIsATTY(regs*)+0x16>
c0011bc2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011bc7:	75 26                	jne    c0011bef <SysIsATTY(regs*)+0x3c>
c0011bc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bd1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bd7:	85 c0                	test   eax,eax
c0011bd9:	74 24                	je     c0011bff <SysIsATTY(regs*)+0x4c>
c0011bdb:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bdd:	83 ec 0c             	sub    esp,0xc
c0011be0:	50                   	push   eax
c0011be1:	ff 12                	call   DWORD PTR [edx]
c0011be3:	83 c4 10             	add    esp,0x10
c0011be6:	31 d2                	xor    edx,edx
c0011be8:	83 c4 0c             	add    esp,0xc
c0011beb:	0f b6 c0             	movzx  eax,al
c0011bee:	c3                   	ret    
c0011bef:	83 ec 0c             	sub    esp,0xc
c0011bf2:	50                   	push   eax
c0011bf3:	e8 a3 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011bf8:	83 c4 10             	add    esp,0x10
c0011bfb:	85 c0                	test   eax,eax
c0011bfd:	75 dc                	jne    c0011bdb <SysIsATTY(regs*)+0x28>
c0011bff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c09:	83 c4 0c             	add    esp,0xc
c0011c0c:	c3                   	ret    

c0011c0d <SysSeek(regs*)>:
c0011c0d:	56                   	push   esi
c0011c0e:	53                   	push   ebx
c0011c0f:	83 ec 04             	sub    esp,0x4
c0011c12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c16:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c19:	8d 71 fd             	lea    esi,[ecx-0x3]
c0011c1c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0011c22:	77 33                	ja     c0011c57 <SysSeek(regs*)+0x4a>
c0011c24:	83 ec 0c             	sub    esp,0xc
c0011c27:	51                   	push   ecx
c0011c28:	e8 6e 78 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011c2d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c30:	83 c4 0c             	add    esp,0xc
c0011c33:	31 db                	xor    ebx,ebx
c0011c35:	53                   	push   ebx
c0011c36:	51                   	push   ecx
c0011c37:	50                   	push   eax
c0011c38:	e8 dd 9c ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0011c3d:	83 c4 10             	add    esp,0x10
c0011c40:	85 c0                	test   eax,eax
c0011c42:	0f 95 c0             	setne  al
c0011c45:	31 d2                	xor    edx,edx
c0011c47:	0f b6 c0             	movzx  eax,al
c0011c4a:	f7 d8                	neg    eax
c0011c4c:	83 d2 00             	adc    edx,0x0
c0011c4f:	83 c4 04             	add    esp,0x4
c0011c52:	5b                   	pop    ebx
c0011c53:	f7 da                	neg    edx
c0011c55:	5e                   	pop    esi
c0011c56:	c3                   	ret    
c0011c57:	83 c4 04             	add    esp,0x4
c0011c5a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c5f:	5b                   	pop    ebx
c0011c60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c65:	5e                   	pop    esi
c0011c66:	c3                   	ret    

c0011c67 <SysTell(regs*)>:
c0011c67:	53                   	push   ebx
c0011c68:	83 ec 08             	sub    esp,0x8
c0011c6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c6f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c72:	83 f8 02             	cmp    eax,0x2
c0011c75:	76 4e                	jbe    c0011cc5 <SysTell(regs*)+0x5e>
c0011c77:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c7c:	76 19                	jbe    c0011c97 <SysTell(regs*)+0x30>
c0011c7e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c81:	31 d2                	xor    edx,edx
c0011c83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c89:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c90:	83 c4 08             	add    esp,0x8
c0011c93:	31 c0                	xor    eax,eax
c0011c95:	5b                   	pop    ebx
c0011c96:	c3                   	ret    
c0011c97:	83 ec 0c             	sub    esp,0xc
c0011c9a:	50                   	push   eax
c0011c9b:	e8 fb 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011ca0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011ca3:	5a                   	pop    edx
c0011ca4:	59                   	pop    ecx
c0011ca5:	53                   	push   ebx
c0011ca6:	50                   	push   eax
c0011ca7:	e8 1a 9d ff ff       	call   c000b9c6 <File::tell(unsigned long long*)>
c0011cac:	83 c4 10             	add    esp,0x10
c0011caf:	85 c0                	test   eax,eax
c0011cb1:	0f 95 c0             	setne  al
c0011cb4:	31 d2                	xor    edx,edx
c0011cb6:	0f b6 c0             	movzx  eax,al
c0011cb9:	f7 d8                	neg    eax
c0011cbb:	83 d2 00             	adc    edx,0x0
c0011cbe:	83 c4 08             	add    esp,0x8
c0011cc1:	5b                   	pop    ebx
c0011cc2:	f7 da                	neg    edx
c0011cc4:	c3                   	ret    
c0011cc5:	83 c4 08             	add    esp,0x8
c0011cc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ccd:	5b                   	pop    ebx
c0011cce:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cd3:	c3                   	ret    

c0011cd4 <SysSize(regs*)>:
c0011cd4:	53                   	push   ebx
c0011cd5:	83 ec 18             	sub    esp,0x18
c0011cd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cdc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011cdf:	83 f8 02             	cmp    eax,0x2
c0011ce2:	76 54                	jbe    c0011d38 <SysSize(regs*)+0x64>
c0011ce4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011ce9:	76 19                	jbe    c0011d04 <SysSize(regs*)+0x30>
c0011ceb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cee:	31 d2                	xor    edx,edx
c0011cf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cfd:	83 c4 18             	add    esp,0x18
c0011d00:	31 c0                	xor    eax,eax
c0011d02:	5b                   	pop    ebx
c0011d03:	c3                   	ret    
c0011d04:	83 ec 0c             	sub    esp,0xc
c0011d07:	50                   	push   eax
c0011d08:	e8 8e 77 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011d0d:	83 c4 0c             	add    esp,0xc
c0011d10:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d14:	52                   	push   edx
c0011d15:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d18:	52                   	push   edx
c0011d19:	50                   	push   eax
c0011d1a:	e8 3f 9e ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	85 c0                	test   eax,eax
c0011d24:	0f 95 c0             	setne  al
c0011d27:	31 d2                	xor    edx,edx
c0011d29:	0f b6 c0             	movzx  eax,al
c0011d2c:	f7 d8                	neg    eax
c0011d2e:	83 d2 00             	adc    edx,0x0
c0011d31:	83 c4 18             	add    esp,0x18
c0011d34:	5b                   	pop    ebx
c0011d35:	f7 da                	neg    edx
c0011d37:	c3                   	ret    
c0011d38:	83 c4 18             	add    esp,0x18
c0011d3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d40:	5b                   	pop    ebx
c0011d41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d46:	c3                   	ret    

c0011d47 <SysSizeFromFilename(regs*)>:
c0011d47:	57                   	push   edi
c0011d48:	56                   	push   esi
c0011d49:	53                   	push   ebx
c0011d4a:	83 ec 10             	sub    esp,0x10
c0011d4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011d51:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011d54:	83 fb 02             	cmp    ebx,0x2
c0011d57:	0f 86 83 00 00 00    	jbe    c0011de0 <SysSizeFromFilename(regs*)+0x99>
c0011d5d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011d63:	76 1b                	jbe    c0011d80 <SysSizeFromFilename(regs*)+0x39>
c0011d65:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d68:	31 d2                	xor    edx,edx
c0011d6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d70:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d77:	83 c4 10             	add    esp,0x10
c0011d7a:	31 c0                	xor    eax,eax
c0011d7c:	5b                   	pop    ebx
c0011d7d:	5e                   	pop    esi
c0011d7e:	5f                   	pop    edi
c0011d7f:	c3                   	ret    
c0011d80:	83 ec 0c             	sub    esp,0xc
c0011d83:	68 14 01 00 00       	push   0x114
c0011d88:	e8 46 5d ff ff       	call   c0007ad3 <malloc>
c0011d8d:	83 c4 0c             	add    esp,0xc
c0011d90:	89 c7                	mov    edi,eax
c0011d92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d9a:	50                   	push   eax
c0011d9b:	53                   	push   ebx
c0011d9c:	57                   	push   edi
c0011d9d:	e8 fe 99 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0011da2:	83 c4 0c             	add    esp,0xc
c0011da5:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011da9:	50                   	push   eax
c0011daa:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011dad:	52                   	push   edx
c0011dae:	57                   	push   edi
c0011daf:	e8 aa 9d ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	85 ff                	test   edi,edi
c0011db9:	89 c3                	mov    ebx,eax
c0011dbb:	74 0c                	je     c0011dc9 <SysSizeFromFilename(regs*)+0x82>
c0011dbd:	8b 07                	mov    eax,DWORD PTR [edi]
c0011dbf:	83 ec 0c             	sub    esp,0xc
c0011dc2:	57                   	push   edi
c0011dc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011dc6:	83 c4 10             	add    esp,0x10
c0011dc9:	31 c0                	xor    eax,eax
c0011dcb:	85 db                	test   ebx,ebx
c0011dcd:	0f 95 c0             	setne  al
c0011dd0:	31 d2                	xor    edx,edx
c0011dd2:	f7 d8                	neg    eax
c0011dd4:	83 d2 00             	adc    edx,0x0
c0011dd7:	83 c4 10             	add    esp,0x10
c0011dda:	5b                   	pop    ebx
c0011ddb:	f7 da                	neg    edx
c0011ddd:	5e                   	pop    esi
c0011dde:	5f                   	pop    edi
c0011ddf:	c3                   	ret    
c0011de0:	83 c4 10             	add    esp,0x10
c0011de3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011de8:	5b                   	pop    ebx
c0011de9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dee:	5e                   	pop    esi
c0011def:	5f                   	pop    edi
c0011df0:	c3                   	ret    

c0011df1 <SysClose(regs*)>:
c0011df1:	53                   	push   ebx
c0011df2:	83 ec 08             	sub    esp,0x8
c0011df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011dfc:	83 f8 02             	cmp    eax,0x2
c0011dff:	76 41                	jbe    c0011e42 <SysClose(regs*)+0x51>
c0011e01:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011e07:	83 fa 01             	cmp    edx,0x1
c0011e0a:	76 2d                	jbe    c0011e39 <SysClose(regs*)+0x48>
c0011e0c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e11:	77 2f                	ja     c0011e42 <SysClose(regs*)+0x51>
c0011e13:	83 ec 0c             	sub    esp,0xc
c0011e16:	50                   	push   eax
c0011e17:	e8 7f 76 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011e1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e1f:	89 c3                	mov    ebx,eax
c0011e21:	e8 94 9a ff ff       	call   c000b8ba <File::close()>
c0011e26:	83 c4 10             	add    esp,0x10
c0011e29:	85 db                	test   ebx,ebx
c0011e2b:	74 0c                	je     c0011e39 <SysClose(regs*)+0x48>
c0011e2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e2f:	83 ec 0c             	sub    esp,0xc
c0011e32:	53                   	push   ebx
c0011e33:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e36:	83 c4 10             	add    esp,0x10
c0011e39:	83 c4 08             	add    esp,0x8
c0011e3c:	31 c0                	xor    eax,eax
c0011e3e:	5b                   	pop    ebx
c0011e3f:	31 d2                	xor    edx,edx
c0011e41:	c3                   	ret    
c0011e42:	83 c4 08             	add    esp,0x8
c0011e45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e4a:	5b                   	pop    ebx
c0011e4b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e50:	c3                   	ret    

c0011e51 <SysOpenDir(regs*)>:
c0011e51:	56                   	push   esi
c0011e52:	53                   	push   ebx
c0011e53:	83 ec 04             	sub    esp,0x4
c0011e56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e5a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011e5d:	85 c9                	test   ecx,ecx
c0011e5f:	74 5d                	je     c0011ebe <SysOpenDir(regs*)+0x6d>
c0011e61:	83 ec 0c             	sub    esp,0xc
c0011e64:	68 14 01 00 00       	push   0x114
c0011e69:	e8 65 5c ff ff       	call   c0007ad3 <malloc>
c0011e6e:	83 c4 0c             	add    esp,0xc
c0011e71:	89 c6                	mov    esi,eax
c0011e73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e78:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e7b:	50                   	push   eax
c0011e7c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e7f:	52                   	push   edx
c0011e80:	56                   	push   esi
c0011e81:	e8 96 9e ff ff       	call   c000bd1c <Directory::Directory(char const*, Process*)>
c0011e86:	83 c4 10             	add    esp,0x10
c0011e89:	85 f6                	test   esi,esi
c0011e8b:	74 31                	je     c0011ebe <SysOpenDir(regs*)+0x6d>
c0011e8d:	83 ec 0c             	sub    esp,0xc
c0011e90:	56                   	push   esi
c0011e91:	e8 42 9f ff ff       	call   c000bdd8 <Directory::open()>
c0011e96:	83 c4 10             	add    esp,0x10
c0011e99:	85 c0                	test   eax,eax
c0011e9b:	75 21                	jne    c0011ebe <SysOpenDir(regs*)+0x6d>
c0011e9d:	83 ec 0c             	sub    esp,0xc
c0011ea0:	56                   	push   esi
c0011ea1:	e8 f8 72 ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0011ea6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	89 02                	mov    DWORD PTR [edx],eax
c0011eae:	c1 f8 1f             	sar    eax,0x1f
c0011eb1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011eb4:	83 c4 04             	add    esp,0x4
c0011eb7:	31 c0                	xor    eax,eax
c0011eb9:	5b                   	pop    ebx
c0011eba:	31 d2                	xor    edx,edx
c0011ebc:	5e                   	pop    esi
c0011ebd:	c3                   	ret    
c0011ebe:	83 c4 04             	add    esp,0x4
c0011ec1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec6:	5b                   	pop    ebx
c0011ec7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ecc:	5e                   	pop    esi
c0011ecd:	c3                   	ret    

c0011ece <SysMakeDir(regs*)>:
c0011ece:	56                   	push   esi
c0011ecf:	53                   	push   ebx
c0011ed0:	83 ec 10             	sub    esp,0x10
c0011ed3:	68 14 01 00 00       	push   0x114
c0011ed8:	e8 f6 5b ff ff       	call   c0007ad3 <malloc>
c0011edd:	83 c4 0c             	add    esp,0xc
c0011ee0:	89 c3                	mov    ebx,eax
c0011ee2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ee7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011eea:	50                   	push   eax
c0011eeb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eef:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011ef2:	52                   	push   edx
c0011ef3:	53                   	push   ebx
c0011ef4:	e8 23 9e ff ff       	call   c000bd1c <Directory::Directory(char const*, Process*)>
c0011ef9:	83 c4 10             	add    esp,0x10
c0011efc:	85 db                	test   ebx,ebx
c0011efe:	74 2c                	je     c0011f2c <SysMakeDir(regs*)+0x5e>
c0011f00:	83 ec 0c             	sub    esp,0xc
c0011f03:	53                   	push   ebx
c0011f04:	e8 af a0 ff ff       	call   c000bfb8 <Directory::create()>
c0011f09:	89 c6                	mov    esi,eax
c0011f0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	31 c0                	xor    eax,eax
c0011f18:	85 f6                	test   esi,esi
c0011f1a:	0f 95 c0             	setne  al
c0011f1d:	31 d2                	xor    edx,edx
c0011f1f:	f7 d8                	neg    eax
c0011f21:	83 d2 00             	adc    edx,0x0
c0011f24:	83 c4 04             	add    esp,0x4
c0011f27:	5b                   	pop    ebx
c0011f28:	f7 da                	neg    edx
c0011f2a:	5e                   	pop    esi
c0011f2b:	c3                   	ret    
c0011f2c:	83 c4 04             	add    esp,0x4
c0011f2f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f34:	5b                   	pop    ebx
c0011f35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f3a:	5e                   	pop    esi
c0011f3b:	c3                   	ret    

c0011f3c <SysCloseDir(regs*)>:
c0011f3c:	53                   	push   ebx
c0011f3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f42:	83 ec 08             	sub    esp,0x8
c0011f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f49:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f51:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0011f54:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011f5a:	77 2a                	ja     c0011f86 <SysCloseDir(regs*)+0x4a>
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	51                   	push   ecx
c0011f60:	e8 36 75 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0011f65:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f68:	89 c3                	mov    ebx,eax
c0011f6a:	e8 c5 9e ff ff       	call   c000be34 <Directory::close()>
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	85 db                	test   ebx,ebx
c0011f74:	74 0c                	je     c0011f82 <SysCloseDir(regs*)+0x46>
c0011f76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f78:	83 ec 0c             	sub    esp,0xc
c0011f7b:	53                   	push   ebx
c0011f7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f7f:	83 c4 10             	add    esp,0x10
c0011f82:	31 c0                	xor    eax,eax
c0011f84:	31 d2                	xor    edx,edx
c0011f86:	83 c4 08             	add    esp,0x8
c0011f89:	5b                   	pop    ebx
c0011f8a:	c3                   	ret    

c0011f8b <SysWait(regs*)>:
c0011f8b:	83 ec 10             	sub    esp,0x10
c0011f8e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f92:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f95:	52                   	push   edx
c0011f96:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f99:	51                   	push   ecx
c0011f9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f9d:	50                   	push   eax
c0011f9e:	e8 e5 3d 00 00       	call   c0015d88 <waitTask(int, int*, int)>
c0011fa3:	83 c4 1c             	add    esp,0x1c
c0011fa6:	89 c2                	mov    edx,eax
c0011fa8:	c1 fa 1f             	sar    edx,0x1f
c0011fab:	c3                   	ret    

c0011fac <SysNotImpl(regs*)>:
c0011fac:	83 ec 18             	sub    esp,0x18
c0011faf:	68 c6 1e 02 c0       	push   0xc0021ec6
c0011fb4:	e8 94 f2 ff ff       	call   c001124d <KePanic(char const*)>
c0011fb9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc3:	83 c4 1c             	add    esp,0x1c
c0011fc6:	c3                   	ret    

c0011fc7 <SysPanic(regs*)>:
c0011fc7:	83 ec 18             	sub    esp,0x18
c0011fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fce:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011fd1:	50                   	push   eax
c0011fd2:	e8 76 f2 ff ff       	call   c001124d <KePanic(char const*)>
c0011fd7:	b8 01 00 00 00       	mov    eax,0x1
c0011fdc:	31 d2                	xor    edx,edx
c0011fde:	83 c4 1c             	add    esp,0x1c
c0011fe1:	c3                   	ret    

c0011fe2 <SysRmdir(regs*)>:
c0011fe2:	56                   	push   esi
c0011fe3:	53                   	push   ebx
c0011fe4:	83 ec 10             	sub    esp,0x10
c0011fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011feb:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fee:	68 14 01 00 00       	push   0x114
c0011ff3:	e8 db 5a ff ff       	call   c0007ad3 <malloc>
c0011ff8:	83 c4 0c             	add    esp,0xc
c0011ffb:	89 c3                	mov    ebx,eax
c0011ffd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012002:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012005:	50                   	push   eax
c0012006:	56                   	push   esi
c0012007:	53                   	push   ebx
c0012008:	e8 93 97 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c001200d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012010:	e8 15 9a ff ff       	call   c000ba2a <File::unlink()>
c0012015:	83 c4 10             	add    esp,0x10
c0012018:	85 db                	test   ebx,ebx
c001201a:	89 c6                	mov    esi,eax
c001201c:	74 0c                	je     c001202a <SysRmdir(regs*)+0x48>
c001201e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012020:	83 ec 0c             	sub    esp,0xc
c0012023:	53                   	push   ebx
c0012024:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012027:	83 c4 10             	add    esp,0x10
c001202a:	31 c0                	xor    eax,eax
c001202c:	85 f6                	test   esi,esi
c001202e:	0f 95 c0             	setne  al
c0012031:	31 d2                	xor    edx,edx
c0012033:	f7 d8                	neg    eax
c0012035:	83 d2 00             	adc    edx,0x0
c0012038:	83 c4 04             	add    esp,0x4
c001203b:	5b                   	pop    ebx
c001203c:	f7 da                	neg    edx
c001203e:	5e                   	pop    esi
c001203f:	c3                   	ret    

c0012040 <SysUnlink(regs*)>:
c0012040:	56                   	push   esi
c0012041:	53                   	push   ebx
c0012042:	83 ec 10             	sub    esp,0x10
c0012045:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012049:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001204c:	68 14 01 00 00       	push   0x114
c0012051:	e8 7d 5a ff ff       	call   c0007ad3 <malloc>
c0012056:	83 c4 0c             	add    esp,0xc
c0012059:	89 c3                	mov    ebx,eax
c001205b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012063:	50                   	push   eax
c0012064:	56                   	push   esi
c0012065:	53                   	push   ebx
c0012066:	e8 35 97 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c001206b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001206e:	e8 b7 99 ff ff       	call   c000ba2a <File::unlink()>
c0012073:	83 c4 10             	add    esp,0x10
c0012076:	85 db                	test   ebx,ebx
c0012078:	89 c6                	mov    esi,eax
c001207a:	74 0c                	je     c0012088 <SysUnlink(regs*)+0x48>
c001207c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001207e:	83 ec 0c             	sub    esp,0xc
c0012081:	53                   	push   ebx
c0012082:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012085:	83 c4 10             	add    esp,0x10
c0012088:	31 c0                	xor    eax,eax
c001208a:	85 f6                	test   esi,esi
c001208c:	0f 95 c0             	setne  al
c001208f:	31 d2                	xor    edx,edx
c0012091:	f7 d8                	neg    eax
c0012093:	83 d2 00             	adc    edx,0x0
c0012096:	83 c4 04             	add    esp,0x4
c0012099:	5b                   	pop    ebx
c001209a:	f7 da                	neg    edx
c001209c:	5e                   	pop    esi
c001209d:	c3                   	ret    

c001209e <SysGetArgv(regs*)>:
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00120a5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00120a8:	85 c0                	test   eax,eax
c00120aa:	78 2c                	js     c00120d8 <SysGetArgv(regs*)+0x3a>
c00120ac:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120b2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00120b5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00120bb:	7d 1b                	jge    c00120d8 <SysGetArgv(regs*)+0x3a>
c00120bd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00120c4:	85 c0                	test   eax,eax
c00120c6:	74 18                	je     c00120e0 <SysGetArgv(regs*)+0x42>
c00120c8:	83 ec 08             	sub    esp,0x8
c00120cb:	50                   	push   eax
c00120cc:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00120cf:	50                   	push   eax
c00120d0:	e8 7b e5 fe ff       	call   c0000650 <strcpy>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	31 c0                	xor    eax,eax
c00120da:	31 d2                	xor    edx,edx
c00120dc:	83 c4 0c             	add    esp,0xc
c00120df:	c3                   	ret    
c00120e0:	b8 01 00 00 00       	mov    eax,0x1
c00120e5:	31 d2                	xor    edx,edx
c00120e7:	83 c4 0c             	add    esp,0xc
c00120ea:	c3                   	ret    

c00120eb <SysUSleep(regs*)>:
c00120eb:	83 ec 1c             	sub    esp,0x1c
c00120ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120f2:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00120f5:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00120f8:	6a 00                	push   0x0
c00120fa:	6a 64                	push   0x64
c00120fc:	52                   	push   edx
c00120fd:	50                   	push   eax
c00120fe:	e8 0d d1 00 00       	call   c001f210 <__udivdi3>
c0012103:	83 c4 14             	add    esp,0x14
c0012106:	50                   	push   eax
c0012107:	e8 60 3d 00 00       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001210c:	31 c0                	xor    eax,eax
c001210e:	31 d2                	xor    edx,edx
c0012110:	83 c4 1c             	add    esp,0x1c
c0012113:	c3                   	ret    

c0012114 <SysSpawn(regs*)>:
c0012114:	56                   	push   esi
c0012115:	53                   	push   ebx
c0012116:	83 ec 04             	sub    esp,0x4
c0012119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001211d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012120:	85 f6                	test   esi,esi
c0012122:	75 0a                	jne    c001212e <SysSpawn(regs*)+0x1a>
c0012124:	83 c4 04             	add    esp,0x4
c0012127:	31 c0                	xor    eax,eax
c0012129:	5b                   	pop    ebx
c001212a:	31 d2                	xor    edx,edx
c001212c:	5e                   	pop    esi
c001212d:	c3                   	ret    
c001212e:	83 ec 0c             	sub    esp,0xc
c0012131:	68 24 07 00 00       	push   0x724
c0012136:	e8 98 59 ff ff       	call   c0007ad3 <malloc>
c001213b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001213e:	83 c4 10             	add    esp,0x10
c0012141:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012144:	89 c6                	mov    esi,eax
c0012146:	31 c0                	xor    eax,eax
c0012148:	85 c9                	test   ecx,ecx
c001214a:	75 08                	jne    c0012154 <SysSpawn(regs*)+0x40>
c001214c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012151:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012154:	52                   	push   edx
c0012155:	50                   	push   eax
c0012156:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012159:	50                   	push   eax
c001215a:	56                   	push   esi
c001215b:	e8 74 33 00 00       	call   c00154d4 <Process::Process(char const*, Process*, char**)>
c0012160:	83 c4 10             	add    esp,0x10
c0012163:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001216a:	75 b8                	jne    c0012124 <SysSpawn(regs*)+0x10>
c001216c:	83 ec 0c             	sub    esp,0xc
c001216f:	56                   	push   esi
c0012170:	e8 97 38 00 00       	call   c0015a0c <Process::createUserThread()>
c0012175:	8b 06                	mov    eax,DWORD PTR [esi]
c0012177:	83 c4 10             	add    esp,0x10
c001217a:	83 c4 04             	add    esp,0x4
c001217d:	5b                   	pop    ebx
c001217e:	89 c2                	mov    edx,eax
c0012180:	c1 fa 1f             	sar    edx,0x1f
c0012183:	5e                   	pop    esi
c0012184:	c3                   	ret    

c0012185 <SysGetEnv(regs*)>:
c0012185:	57                   	push   edi
c0012186:	56                   	push   esi
c0012187:	53                   	push   ebx
c0012188:	83 ec 1c             	sub    esp,0x1c
c001218b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012190:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012194:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012197:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001219a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001219d:	51                   	push   ecx
c001219e:	e8 62 ef ff ff       	call   c0011105 <KeGetProcessTotalEnvCount(Process*)>
c00121a3:	83 c4 10             	add    esp,0x10
c00121a6:	39 c7                	cmp    edi,eax
c00121a8:	7c 12                	jl     c00121bc <SysGetEnv(regs*)+0x37>
c00121aa:	31 c0                	xor    eax,eax
c00121ac:	31 d2                	xor    edx,edx
c00121ae:	85 f6                	test   esi,esi
c00121b0:	74 03                	je     c00121b5 <SysGetEnv(regs*)+0x30>
c00121b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	5b                   	pop    ebx
c00121b9:	5e                   	pop    esi
c00121ba:	5f                   	pop    edi
c00121bb:	c3                   	ret    
c00121bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00121c0:	83 ec 04             	sub    esp,0x4
c00121c3:	57                   	push   edi
c00121c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121ca:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00121cd:	57                   	push   edi
c00121ce:	50                   	push   eax
c00121cf:	e8 51 ef ff ff       	call   c0011125 <KeGetProcessEnvPair(Process*, int)>
c00121d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00121df:	83 c4 0c             	add    esp,0xc
c00121e2:	85 d2                	test   edx,edx
c00121e4:	75 23                	jne    c0012209 <SysGetEnv(regs*)+0x84>
c00121e6:	83 ec 0c             	sub    esp,0xc
c00121e9:	50                   	push   eax
c00121ea:	e8 91 e3 fe ff       	call   c0000580 <strlen>
c00121ef:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121f2:	89 c3                	mov    ebx,eax
c00121f4:	e8 87 e3 fe ff       	call   c0000580 <strlen>
c00121f9:	83 c4 10             	add    esp,0x10
c00121fc:	31 d2                	xor    edx,edx
c00121fe:	83 c4 10             	add    esp,0x10
c0012201:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012205:	5b                   	pop    ebx
c0012206:	5e                   	pop    esi
c0012207:	5f                   	pop    edi
c0012208:	c3                   	ret    
c0012209:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001220c:	83 ec 08             	sub    esp,0x8
c001220f:	50                   	push   eax
c0012210:	56                   	push   esi
c0012211:	e8 3a e4 fe ff       	call   c0000650 <strcpy>
c0012216:	58                   	pop    eax
c0012217:	5a                   	pop    edx
c0012218:	68 e0 1e 02 c0       	push   0xc0021ee0
c001221d:	56                   	push   esi
c001221e:	e8 4d e6 fe ff       	call   c0000870 <strcat>
c0012223:	59                   	pop    ecx
c0012224:	5b                   	pop    ebx
c0012225:	57                   	push   edi
c0012226:	56                   	push   esi
c0012227:	e8 44 e6 fe ff       	call   c0000870 <strcat>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	31 c0                	xor    eax,eax
c0012231:	83 c4 10             	add    esp,0x10
c0012234:	31 d2                	xor    edx,edx
c0012236:	5b                   	pop    ebx
c0012237:	5e                   	pop    esi
c0012238:	5f                   	pop    edi
c0012239:	c3                   	ret    

c001223a <SysSetFatAttrib(regs*)>:
c001223a:	57                   	push   edi
c001223b:	56                   	push   esi
c001223c:	53                   	push   ebx
c001223d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012247:	68 14 01 00 00       	push   0x114
c001224c:	e8 82 58 ff ff       	call   c0007ad3 <malloc>
c0012251:	83 c4 0c             	add    esp,0xc
c0012254:	89 c3                	mov    ebx,eax
c0012256:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001225b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001225e:	50                   	push   eax
c001225f:	57                   	push   edi
c0012260:	53                   	push   ebx
c0012261:	e8 3a 95 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0012266:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012269:	83 c4 0c             	add    esp,0xc
c001226c:	0f b6 d4             	movzx  edx,ah
c001226f:	0f b6 c0             	movzx  eax,al
c0012272:	52                   	push   edx
c0012273:	50                   	push   eax
c0012274:	53                   	push   ebx
c0012275:	e8 4a 98 ff ff       	call   c000bac4 <File::chfatattr(unsigned char, unsigned char)>
c001227a:	83 c4 10             	add    esp,0x10
c001227d:	85 db                	test   ebx,ebx
c001227f:	89 c6                	mov    esi,eax
c0012281:	74 0c                	je     c001228f <SysSetFatAttrib(regs*)+0x55>
c0012283:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012285:	83 ec 0c             	sub    esp,0xc
c0012288:	53                   	push   ebx
c0012289:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	5b                   	pop    ebx
c0012290:	31 c0                	xor    eax,eax
c0012292:	85 f6                	test   esi,esi
c0012294:	0f 95 c0             	setne  al
c0012297:	31 d2                	xor    edx,edx
c0012299:	5e                   	pop    esi
c001229a:	f7 d8                	neg    eax
c001229c:	83 d2 00             	adc    edx,0x0
c001229f:	f7 da                	neg    edx
c00122a1:	5f                   	pop    edi
c00122a2:	c3                   	ret    

c00122a3 <SysPipe(regs*)>:
c00122a3:	57                   	push   edi
c00122a4:	56                   	push   esi
c00122a5:	53                   	push   ebx
c00122a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122aa:	83 ec 0c             	sub    esp,0xc
c00122ad:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00122b0:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00122b3:	6a 20                	push   0x20
c00122b5:	e8 19 58 ff ff       	call   c0007ad3 <malloc>
c00122ba:	89 c3                	mov    ebx,eax
c00122bc:	58                   	pop    eax
c00122bd:	5a                   	pop    edx
c00122be:	68 00 50 00 00       	push   0x5000
c00122c3:	53                   	push   ebx
c00122c4:	e8 75 61 ff ff       	call   c000843e <Pipe::Pipe(int)>
c00122c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122cc:	e8 cd 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00122d1:	89 07                	mov    DWORD PTR [edi],eax
c00122d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122d6:	e8 c3 6e ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c00122db:	83 c4 10             	add    esp,0x10
c00122de:	31 d2                	xor    edx,edx
c00122e0:	89 06                	mov    DWORD PTR [esi],eax
c00122e2:	31 c0                	xor    eax,eax
c00122e4:	5b                   	pop    ebx
c00122e5:	5e                   	pop    esi
c00122e6:	5f                   	pop    edi
c00122e7:	c3                   	ret    

c00122e8 <SysGetUnixTime(regs*)>:
c00122e8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00122ed:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00122f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122f7:	e9 02 9f ff ff       	jmp    c000c1fe <Clock::timeInSecondsLocal()>

c00122fc <string_ends_with(char const*, char const*)>:
c00122fc:	57                   	push   edi
c00122fd:	56                   	push   esi
c00122fe:	53                   	push   ebx
c00122ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012303:	83 ec 0c             	sub    esp,0xc
c0012306:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001230a:	53                   	push   ebx
c001230b:	e8 70 e2 fe ff       	call   c0000580 <strlen>
c0012310:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012313:	89 c6                	mov    esi,eax
c0012315:	e8 66 e2 fe ff       	call   c0000580 <strlen>
c001231a:	83 c4 10             	add    esp,0x10
c001231d:	31 d2                	xor    edx,edx
c001231f:	39 c6                	cmp    esi,eax
c0012321:	7d 06                	jge    c0012329 <string_ends_with(char const*, char const*)+0x2d>
c0012323:	5b                   	pop    ebx
c0012324:	89 d0                	mov    eax,edx
c0012326:	5e                   	pop    esi
c0012327:	5f                   	pop    edi
c0012328:	c3                   	ret    
c0012329:	83 ec 08             	sub    esp,0x8
c001232c:	29 c6                	sub    esi,eax
c001232e:	57                   	push   edi
c001232f:	01 f3                	add    ebx,esi
c0012331:	53                   	push   ebx
c0012332:	e8 49 e4 fe ff       	call   c0000780 <strcmp>
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	31 d2                	xor    edx,edx
c001233c:	5b                   	pop    ebx
c001233d:	5e                   	pop    esi
c001233e:	85 c0                	test   eax,eax
c0012340:	5f                   	pop    edi
c0012341:	0f 94 c2             	sete   dl
c0012344:	89 d0                	mov    eax,edx
c0012346:	c3                   	ret    

c0012347 <SysOpen(regs*)>:
c0012347:	56                   	push   esi
c0012348:	53                   	push   ebx
c0012349:	81 ec 04 01 00 00    	sub    esp,0x104
c001234f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012356:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012359:	85 c0                	test   eax,eax
c001235b:	0f 84 c5 01 00 00    	je     c0012526 <SysOpen(regs*)+0x1df>
c0012361:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012364:	85 c0                	test   eax,eax
c0012366:	0f 84 ba 01 00 00    	je     c0012526 <SysOpen(regs*)+0x1df>
c001236c:	83 ec 04             	sub    esp,0x4
c001236f:	68 e2 1e 02 c0       	push   0xc0021ee2
c0012374:	50                   	push   eax
c0012375:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012379:	56                   	push   esi
c001237a:	e8 2d 92 ff ff       	call   c000b5ac <Fs::standardiseFiles(char*, char const*, char const*)>
c001237f:	89 34 24             	mov    DWORD PTR [esp],esi
c0012382:	e8 f9 e1 fe ff       	call   c0000580 <strlen>
c0012387:	83 c4 10             	add    esp,0x10
c001238a:	83 e8 01             	sub    eax,0x1
c001238d:	74 29                	je     c00123b8 <SysOpen(regs*)+0x71>
c001238f:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012393:	83 fa 2e             	cmp    edx,0x2e
c0012396:	74 1c                	je     c00123b4 <SysOpen(regs*)+0x6d>
c0012398:	83 fa 3a             	cmp    edx,0x3a
c001239b:	74 17                	je     c00123b4 <SysOpen(regs*)+0x6d>
c001239d:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00123a1:	83 e8 01             	sub    eax,0x1
c00123a4:	74 12                	je     c00123b8 <SysOpen(regs*)+0x71>
c00123a6:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00123aa:	83 fa 3a             	cmp    edx,0x3a
c00123ad:	74 05                	je     c00123b4 <SysOpen(regs*)+0x6d>
c00123af:	83 fa 2e             	cmp    edx,0x2e
c00123b2:	75 e9                	jne    c001239d <SysOpen(regs*)+0x56>
c00123b4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00123b8:	83 ec 08             	sub    esp,0x8
c00123bb:	68 e6 1e 02 c0       	push   0xc0021ee6
c00123c0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123c3:	50                   	push   eax
c00123c4:	e8 33 ff ff ff       	call   c00122fc <string_ends_with(char const*, char const*)>
c00123c9:	83 c4 10             	add    esp,0x10
c00123cc:	85 c0                	test   eax,eax
c00123ce:	74 1d                	je     c00123ed <SysOpen(regs*)+0xa6>
c00123d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123d3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00123d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123e0:	81 c4 04 01 00 00    	add    esp,0x104
c00123e6:	31 c0                	xor    eax,eax
c00123e8:	5b                   	pop    ebx
c00123e9:	31 d2                	xor    edx,edx
c00123eb:	5e                   	pop    esi
c00123ec:	c3                   	ret    
c00123ed:	83 ec 08             	sub    esp,0x8
c00123f0:	68 eb 1e 02 c0       	push   0xc0021eeb
c00123f5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123f8:	50                   	push   eax
c00123f9:	e8 fe fe ff ff       	call   c00122fc <string_ends_with(char const*, char const*)>
c00123fe:	83 c4 10             	add    esp,0x10
c0012401:	85 c0                	test   eax,eax
c0012403:	75 cb                	jne    c00123d0 <SysOpen(regs*)+0x89>
c0012405:	83 ec 08             	sub    esp,0x8
c0012408:	68 e7 1e 02 c0       	push   0xc0021ee7
c001240d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012410:	50                   	push   eax
c0012411:	e8 6a e3 fe ff       	call   c0000780 <strcmp>
c0012416:	83 c4 10             	add    esp,0x10
c0012419:	85 c0                	test   eax,eax
c001241b:	74 b3                	je     c00123d0 <SysOpen(regs*)+0x89>
c001241d:	83 ec 08             	sub    esp,0x8
c0012420:	68 e6 1e 02 c0       	push   0xc0021ee6
c0012425:	56                   	push   esi
c0012426:	e8 d1 fe ff ff       	call   c00122fc <string_ends_with(char const*, char const*)>
c001242b:	83 c4 10             	add    esp,0x10
c001242e:	85 c0                	test   eax,eax
c0012430:	75 9e                	jne    c00123d0 <SysOpen(regs*)+0x89>
c0012432:	83 ec 08             	sub    esp,0x8
c0012435:	68 f0 1e 02 c0       	push   0xc0021ef0
c001243a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001243d:	50                   	push   eax
c001243e:	e8 b9 fe ff ff       	call   c00122fc <string_ends_with(char const*, char const*)>
c0012443:	83 c4 10             	add    esp,0x10
c0012446:	85 c0                	test   eax,eax
c0012448:	0f 85 eb 00 00 00    	jne    c0012539 <SysOpen(regs*)+0x1f2>
c001244e:	83 ec 08             	sub    esp,0x8
c0012451:	68 f5 1e 02 c0       	push   0xc0021ef5
c0012456:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012459:	50                   	push   eax
c001245a:	e8 9d fe ff ff       	call   c00122fc <string_ends_with(char const*, char const*)>
c001245f:	83 c4 10             	add    esp,0x10
c0012462:	85 c0                	test   eax,eax
c0012464:	0f 85 cf 00 00 00    	jne    c0012539 <SysOpen(regs*)+0x1f2>
c001246a:	83 ec 08             	sub    esp,0x8
c001246d:	68 f1 1e 02 c0       	push   0xc0021ef1
c0012472:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012475:	51                   	push   ecx
c0012476:	e8 05 e3 fe ff       	call   c0000780 <strcmp>
c001247b:	83 c4 10             	add    esp,0x10
c001247e:	85 c0                	test   eax,eax
c0012480:	0f 84 b3 00 00 00    	je     c0012539 <SysOpen(regs*)+0x1f2>
c0012486:	83 ec 08             	sub    esp,0x8
c0012489:	68 f0 1e 02 c0       	push   0xc0021ef0
c001248e:	56                   	push   esi
c001248f:	e8 68 fe ff ff       	call   c00122fc <string_ends_with(char const*, char const*)>
c0012494:	83 c4 10             	add    esp,0x10
c0012497:	85 c0                	test   eax,eax
c0012499:	0f 85 9a 00 00 00    	jne    c0012539 <SysOpen(regs*)+0x1f2>
c001249f:	83 ec 0c             	sub    esp,0xc
c00124a2:	68 14 01 00 00       	push   0x114
c00124a7:	e8 27 56 ff ff       	call   c0007ad3 <malloc>
c00124ac:	83 c4 0c             	add    esp,0xc
c00124af:	89 c6                	mov    esi,eax
c00124b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124b6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124b9:	50                   	push   eax
c00124ba:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124bd:	52                   	push   edx
c00124be:	56                   	push   esi
c00124bf:	e8 dc 92 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c00124c4:	83 c4 10             	add    esp,0x10
c00124c7:	85 f6                	test   esi,esi
c00124c9:	74 5b                	je     c0012526 <SysOpen(regs*)+0x1df>
c00124cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00124ce:	0f b6 c2             	movzx  eax,dl
c00124d1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00124d4:	89 d0                	mov    eax,edx
c00124d6:	83 e0 01             	and    eax,0x1
c00124d9:	f6 c2 02             	test   dl,0x2
c00124dc:	74 03                	je     c00124e1 <SysOpen(regs*)+0x19a>
c00124de:	83 c8 02             	or     eax,0x2
c00124e1:	f6 c2 04             	test   dl,0x4
c00124e4:	74 03                	je     c00124e9 <SysOpen(regs*)+0x1a2>
c00124e6:	83 c8 04             	or     eax,0x4
c00124e9:	f6 c2 08             	test   dl,0x8
c00124ec:	74 03                	je     c00124f1 <SysOpen(regs*)+0x1aa>
c00124ee:	83 c8 0a             	or     eax,0xa
c00124f1:	80 e2 10             	and    dl,0x10
c00124f4:	74 03                	je     c00124f9 <SysOpen(regs*)+0x1b2>
c00124f6:	83 c8 12             	or     eax,0x12
c00124f9:	83 ec 08             	sub    esp,0x8
c00124fc:	50                   	push   eax
c00124fd:	56                   	push   esi
c00124fe:	e8 59 93 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0012503:	83 c4 10             	add    esp,0x10
c0012506:	85 c0                	test   eax,eax
c0012508:	75 1c                	jne    c0012526 <SysOpen(regs*)+0x1df>
c001250a:	83 ec 0c             	sub    esp,0xc
c001250d:	56                   	push   esi
c001250e:	e8 8b 6c ff ff       	call   c000919e <UnixFile::getFileDescriptor()>
c0012513:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012516:	83 c4 10             	add    esp,0x10
c0012519:	89 02                	mov    DWORD PTR [edx],eax
c001251b:	c1 f8 1f             	sar    eax,0x1f
c001251e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012521:	e9 ba fe ff ff       	jmp    c00123e0 <SysOpen(regs*)+0x99>
c0012526:	81 c4 04 01 00 00    	add    esp,0x104
c001252c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012531:	5b                   	pop    ebx
c0012532:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012537:	5e                   	pop    esi
c0012538:	c3                   	ret    
c0012539:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001253c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012542:	e9 92 fe ff ff       	jmp    c00123d9 <SysOpen(regs*)+0x92>

c0012547 <KeSystemCall(regs*, void*)>:
c0012547:	53                   	push   ebx
c0012548:	83 ec 08             	sub    esp,0x8
c001254b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001254f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012552:	83 f8 3b             	cmp    eax,0x3b
c0012555:	77 16                	ja     c001256d <KeSystemCall(regs*, void*)+0x26>
c0012557:	8b 14 85 00 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd00]
c001255e:	85 d2                	test   edx,edx
c0012560:	74 0b                	je     c001256d <KeSystemCall(regs*, void*)+0x26>
c0012562:	83 ec 0c             	sub    esp,0xc
c0012565:	53                   	push   ebx
c0012566:	ff d2                	call   edx
c0012568:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001256b:	eb 0d                	jmp    c001257a <KeSystemCall(regs*, void*)+0x33>
c001256d:	52                   	push   edx
c001256e:	52                   	push   edx
c001256f:	50                   	push   eax
c0012570:	68 fa 1e 02 c0       	push   0xc0021efa
c0012575:	e8 90 83 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012582:	83 c4 08             	add    esp,0x8
c0012585:	31 d2                	xor    edx,edx
c0012587:	5b                   	pop    ebx
c0012588:	c3                   	ret    
c0012589:	66 90                	xchg   ax,ax
c001258b:	90                   	nop

c001258c <KeSwitchEndian16(unsigned short)>:
c001258c:	83 ec 04             	sub    esp,0x4
c001258f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012593:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012597:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001259b:	c1 f8 08             	sar    eax,0x8
c001259e:	89 c2                	mov    edx,eax
c00125a0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125a4:	c1 e0 08             	shl    eax,0x8
c00125a7:	09 d0                	or     eax,edx
c00125a9:	83 c4 04             	add    esp,0x4
c00125ac:	c3                   	ret    
c00125ad:	8d 76 00             	lea    esi,[esi+0x0]

c00125b0 <KeSwitchEndian32(unsigned int)>:
c00125b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125b4:	c1 e8 18             	shr    eax,0x18
c00125b7:	89 c2                	mov    edx,eax
c00125b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125bd:	c1 e0 08             	shl    eax,0x8
c00125c0:	25 00 00 ff 00       	and    eax,0xff0000
c00125c5:	09 c2                	or     edx,eax
c00125c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125cb:	c1 e8 08             	shr    eax,0x8
c00125ce:	25 00 ff 00 00       	and    eax,0xff00
c00125d3:	09 c2                	or     edx,eax
c00125d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d9:	c1 e0 18             	shl    eax,0x18
c00125dc:	09 d0                	or     eax,edx
c00125de:	c3                   	ret    
c00125df:	90                   	nop

c00125e0 <EthernetCRC32(unsigned char*, int)>:
c00125e0:	83 ec 10             	sub    esp,0x10
c00125e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00125e8:	75 0a                	jne    c00125f4 <EthernetCRC32(unsigned char*, int)+0x14>
c00125ea:	b8 00 00 00 00       	mov    eax,0x0
c00125ef:	e9 8c 00 00 00       	jmp    c0012680 <EthernetCRC32(unsigned char*, int)+0xa0>
c00125f4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125f9:	7f 09                	jg     c0012604 <EthernetCRC32(unsigned char*, int)+0x24>
c00125fb:	b8 00 00 00 00       	mov    eax,0x0
c0012600:	eb 7e                	jmp    c0012680 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012602:	66 90                	xchg   ax,ax
c0012604:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001260c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012614:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012618:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001261c:	7d 5a                	jge    c0012678 <EthernetCRC32(unsigned char*, int)+0x98>
c001261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012622:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012626:	01 d0                	add    eax,edx
c0012628:	8a 00                	mov    al,BYTE PTR [eax]
c001262a:	0f b6 c0             	movzx  eax,al
c001262d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012631:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012639:	8d 76 00             	lea    esi,[esi+0x0]
c001263c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012641:	7f 2d                	jg     c0012670 <EthernetCRC32(unsigned char*, int)+0x90>
c0012643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012647:	83 e0 01             	and    eax,0x1
c001264a:	74 10                	je     c001265c <EthernetCRC32(unsigned char*, int)+0x7c>
c001264c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012650:	d1 e8                	shr    eax,1
c0012652:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012657:	eb 0b                	jmp    c0012664 <EthernetCRC32(unsigned char*, int)+0x84>
c0012659:	8d 76 00             	lea    esi,[esi+0x0]
c001265c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012660:	d1 e8                	shr    eax,1
c0012662:	66 90                	xchg   ax,ax
c0012664:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012668:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001266d:	eb cd                	jmp    c001263c <EthernetCRC32(unsigned char*, int)+0x5c>
c001266f:	90                   	nop
c0012670:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012675:	eb 9d                	jmp    c0012614 <EthernetCRC32(unsigned char*, int)+0x34>
c0012677:	90                   	nop
c0012678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001267c:	f7 d0                	not    eax
c001267e:	66 90                	xchg   ax,ax
c0012680:	83 c4 10             	add    esp,0x10
c0012683:	c3                   	ret    

c0012684 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012684:	83 ec 2c             	sub    esp,0x2c
c0012687:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001268b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012690:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012694:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012698:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001269c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001269f:	0f b7 c0             	movzx  eax,ax
c00126a2:	3d 06 08 00 00       	cmp    eax,0x806
c00126a7:	75 13                	jne    c00126bc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00126a9:	83 ec 0c             	sub    esp,0xc
c00126ac:	68 0e 1f 02 c0       	push   0xc0021f0e
c00126b1:	e8 54 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00126b6:	83 c4 10             	add    esp,0x10
c00126b9:	eb 25                	jmp    c00126e0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126bb:	90                   	nop
c00126bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126c3:	0f b7 c0             	movzx  eax,ax
c00126c6:	3d 00 08 00 00       	cmp    eax,0x800
c00126cb:	75 13                	jne    c00126e0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126cd:	83 ec 0c             	sub    esp,0xc
c00126d0:	68 24 1f 02 c0       	push   0xc0021f24
c00126d5:	e8 30 82 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00126da:	83 c4 10             	add    esp,0x10
c00126dd:	8d 76 00             	lea    esi,[esi+0x0]
c00126e0:	90                   	nop
c00126e1:	83 c4 2c             	add    esp,0x2c
c00126e4:	c3                   	ret    

c00126e5 <CmOpen(char const*)>:
c00126e5:	57                   	push   edi
c00126e6:	56                   	push   esi
c00126e7:	53                   	push   ebx
c00126e8:	83 ec 1c             	sub    esp,0x1c
c00126eb:	6a 30                	push   0x30
c00126ed:	e8 e1 53 ff ff       	call   c0007ad3 <malloc>
c00126f2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00126f9:	89 c3                	mov    ebx,eax
c00126fb:	e8 d3 53 ff ff       	call   c0007ad3 <malloc>
c0012700:	83 c4 0c             	add    esp,0xc
c0012703:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012709:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001270d:	89 c6                	mov    esi,eax
c001270f:	50                   	push   eax
c0012710:	e8 8b 90 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0012715:	83 c4 0c             	add    esp,0xc
c0012718:	89 33                	mov    DWORD PTR [ebx],esi
c001271a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001271e:	50                   	push   eax
c001271f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012723:	50                   	push   eax
c0012724:	56                   	push   esi
c0012725:	e8 34 94 ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c001272a:	5a                   	pop    edx
c001272b:	59                   	pop    ecx
c001272c:	6a 01                	push   0x1
c001272e:	ff 33                	push   DWORD PTR [ebx]
c0012730:	e8 27 91 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0012735:	5e                   	pop    esi
c0012736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001273a:	e8 94 53 ff ff       	call   c0007ad3 <malloc>
c001273f:	5a                   	pop    edx
c0012740:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012744:	89 c7                	mov    edi,eax
c0012746:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012748:	8b 10                	mov    edx,DWORD PTR [eax]
c001274a:	56                   	push   esi
c001274b:	57                   	push   edi
c001274c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012750:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012754:	50                   	push   eax
c0012755:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012758:	83 c4 14             	add    esp,0x14
c001275b:	ff 33                	push   DWORD PTR [ebx]
c001275d:	e8 58 91 ff ff       	call   c000b8ba <File::close()>
c0012762:	59                   	pop    ecx
c0012763:	58                   	pop    eax
c0012764:	6a 13                	push   0x13
c0012766:	ff 33                	push   DWORD PTR [ebx]
c0012768:	e8 ef 90 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c001276d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001276f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012771:	89 34 24             	mov    DWORD PTR [esp],esi
c0012774:	57                   	push   edi
c0012775:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012779:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001277d:	50                   	push   eax
c001277e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012781:	83 c4 14             	add    esp,0x14
c0012784:	57                   	push   edi
c0012785:	e8 59 53 ff ff       	call   c0007ae3 <free>
c001278a:	83 c4 10             	add    esp,0x10
c001278d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012790:	75 10                	jne    c00127a2 <CmOpen(char const*)+0xbd>
c0012792:	83 ec 0c             	sub    esp,0xc
c0012795:	68 39 1f 02 c0       	push   0xc0021f39
c001279a:	e8 ae ea ff ff       	call   c001124d <KePanic(char const*)>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	50                   	push   eax
c00127a3:	6a 00                	push   0x0
c00127a5:	6a 00                	push   0x0
c00127a7:	ff 33                	push   DWORD PTR [ebx]
c00127a9:	8d 7b 05             	lea    edi,[ebx+0x5]
c00127ac:	e8 69 91 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c00127b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00127b5:	89 34 24             	mov    DWORD PTR [esp],esi
c00127b8:	57                   	push   edi
c00127b9:	6a 00                	push   0x0
c00127bb:	6a 2b                	push   0x2b
c00127bd:	50                   	push   eax
c00127be:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127c1:	83 c4 1c             	add    esp,0x1c
c00127c4:	6a 00                	push   0x0
c00127c6:	6a 00                	push   0x0
c00127c8:	ff 33                	push   DWORD PTR [ebx]
c00127ca:	e8 4b 91 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c00127cf:	83 c4 0c             	add    esp,0xc
c00127d2:	6a 08                	push   0x8
c00127d4:	68 4a 1f 02 c0       	push   0xc0021f4a
c00127d9:	57                   	push   edi
c00127da:	e8 a1 db fe ff       	call   c0000380 <memcmp>
c00127df:	83 c4 10             	add    esp,0x10
c00127e2:	85 c0                	test   eax,eax
c00127e4:	74 10                	je     c00127f6 <CmOpen(char const*)+0x111>
c00127e6:	83 ec 0c             	sub    esp,0xc
c00127e9:	68 53 1f 02 c0       	push   0xc0021f53
c00127ee:	e8 5a ea ff ff       	call   c001124d <KePanic(char const*)>
c00127f3:	83 c4 10             	add    esp,0x10
c00127f6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	89 d8                	mov    eax,ebx
c00127ff:	5b                   	pop    ebx
c0012800:	5e                   	pop    esi
c0012801:	5f                   	pop    edi
c0012802:	c3                   	ret    

c0012803 <CmClose(Reghive_Tag*)>:
c0012803:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012807:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001280b:	74 0b                	je     c0012818 <CmClose(Reghive_Tag*)+0x15>
c001280d:	8b 00                	mov    eax,DWORD PTR [eax]
c001280f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012813:	e9 a2 90 ff ff       	jmp    c000b8ba <File::close()>
c0012818:	c3                   	ret    

c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012819:	53                   	push   ebx
c001281a:	83 ec 18             	sub    esp,0x18
c001281d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012821:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012825:	74 29                	je     c0012850 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012827:	50                   	push   eax
c0012828:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c001282d:	99                   	cdq    
c001282e:	52                   	push   edx
c001282f:	50                   	push   eax
c0012830:	ff 33                	push   DWORD PTR [ebx]
c0012832:	e8 e3 90 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0012837:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012839:	5a                   	pop    edx
c001283a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001283e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012840:	51                   	push   ecx
c0012841:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012845:	6a 00                	push   0x0
c0012847:	6a 2b                	push   0x2b
c0012849:	50                   	push   eax
c001284a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001284d:	83 c4 20             	add    esp,0x20
c0012850:	83 c4 18             	add    esp,0x18
c0012853:	5b                   	pop    ebx
c0012854:	c3                   	ret    

c0012855 <CmGetString(Reghive_Tag*, int, char*)>:
c0012855:	55                   	push   ebp
c0012856:	57                   	push   edi
c0012857:	56                   	push   esi
c0012858:	53                   	push   ebx
c0012859:	31 db                	xor    ebx,ebx
c001285b:	83 ec 70             	sub    esp,0x70
c001285e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012862:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012869:	50                   	push   eax
c001286a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012871:	55                   	push   ebp
c0012872:	e8 a2 ff ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012877:	83 c4 10             	add    esp,0x10
c001287a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001287f:	c1 e0 08             	shl    eax,0x8
c0012882:	89 c2                	mov    edx,eax
c0012884:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012889:	09 d0                	or     eax,edx
c001288b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012890:	c1 e0 08             	shl    eax,0x8
c0012893:	09 d0                	or     eax,edx
c0012895:	74 25                	je     c00128bc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012897:	52                   	push   edx
c0012898:	8d 54 24 39          	lea    edx,[esp+0x39]
c001289c:	52                   	push   edx
c001289d:	6b fb 0d             	imul   edi,ebx,0xd
c00128a0:	50                   	push   eax
c00128a1:	55                   	push   ebp
c00128a2:	e8 72 ff ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128a7:	8d 74 24 49          	lea    esi,[esp+0x49]
c00128ab:	b9 27 00 00 00       	mov    ecx,0x27
c00128b0:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00128b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	83 c3 03             	add    ebx,0x3
c00128bf:	83 fb 15             	cmp    ebx,0x15
c00128c2:	75 b6                	jne    c001287a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00128c4:	83 c4 6c             	add    esp,0x6c
c00128c7:	5b                   	pop    ebx
c00128c8:	5e                   	pop    esi
c00128c9:	5f                   	pop    edi
c00128ca:	5d                   	pop    ebp
c00128cb:	c3                   	ret    

c00128cc <CmEnterDirectory(Reghive_Tag*, int)>:
c00128cc:	83 ec 40             	sub    esp,0x40
c00128cf:	8d 44 24 09          	lea    eax,[esp+0x9]
c00128d3:	50                   	push   eax
c00128d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128dc:	e8 38 ff ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128e1:	83 c4 10             	add    esp,0x10
c00128e4:	83 c8 ff             	or     eax,0xffffffff
c00128e7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c00128ec:	75 19                	jne    c0012907 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c00128ee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00128f3:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c00128f8:	c1 e0 08             	shl    eax,0x8
c00128fb:	09 c2                	or     edx,eax
c00128fd:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012902:	c1 e0 10             	shl    eax,0x10
c0012905:	09 d0                	or     eax,edx
c0012907:	83 c4 3c             	add    esp,0x3c
c001290a:	c3                   	ret    

c001290b <CmGetNext(Reghive_Tag*, int)>:
c001290b:	83 ec 40             	sub    esp,0x40
c001290e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012912:	50                   	push   eax
c0012913:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012917:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001291b:	e8 f9 fe ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012920:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012925:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001292a:	c1 e0 08             	shl    eax,0x8
c001292d:	09 c2                	or     edx,eax
c001292f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012934:	83 c4 4c             	add    esp,0x4c
c0012937:	c1 e0 10             	shl    eax,0x10
c001293a:	09 d0                	or     eax,edx
c001293c:	c3                   	ret    

c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001293d:	53                   	push   ebx
c001293e:	83 ec 18             	sub    esp,0x18
c0012941:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012945:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012949:	74 29                	je     c0012974 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001294b:	50                   	push   eax
c001294c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012951:	99                   	cdq    
c0012952:	52                   	push   edx
c0012953:	50                   	push   eax
c0012954:	ff 33                	push   DWORD PTR [ebx]
c0012956:	e8 bf 8f ff ff       	call   c000b91a <File::seek(unsigned long long)>
c001295b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001295d:	5a                   	pop    edx
c001295e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012962:	8b 10                	mov    edx,DWORD PTR [eax]
c0012964:	51                   	push   ecx
c0012965:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012969:	6a 00                	push   0x0
c001296b:	6a 2b                	push   0x2b
c001296d:	50                   	push   eax
c001296e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012971:	83 c4 20             	add    esp,0x20
c0012974:	83 c4 18             	add    esp,0x18
c0012977:	5b                   	pop    ebx
c0012978:	c3                   	ret    

c0012979 <CmFreeExtent(Reghive_Tag*, int)>:
c0012979:	53                   	push   ebx
c001297a:	83 ec 3c             	sub    esp,0x3c
c001297d:	6a 2b                	push   0x2b
c001297f:	6a 00                	push   0x0
c0012981:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012985:	53                   	push   ebx
c0012986:	e8 65 db fe ff       	call   c00004f0 <memset>
c001298b:	83 c4 0c             	add    esp,0xc
c001298e:	53                   	push   ebx
c001298f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012993:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012997:	e8 a1 ff ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001299c:	83 c4 48             	add    esp,0x48
c001299f:	5b                   	pop    ebx
c00129a0:	c3                   	ret    

c00129a1 <CmUpdateHeader(Reghive_Tag*)>:
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129a8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00129ac:	74 10                	je     c00129be <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00129ae:	52                   	push   edx
c00129af:	8d 50 05             	lea    edx,[eax+0x5]
c00129b2:	52                   	push   edx
c00129b3:	6a 00                	push   0x0
c00129b5:	50                   	push   eax
c00129b6:	e8 82 ff ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	83 c4 0c             	add    esp,0xc
c00129c1:	c3                   	ret    

c00129c2 <CmExpand(Reghive_Tag*, int)>:
c00129c2:	55                   	push   ebp
c00129c3:	57                   	push   edi
c00129c4:	83 cf ff             	or     edi,0xffffffff
c00129c7:	56                   	push   esi
c00129c8:	53                   	push   ebx
c00129c9:	83 ec 3c             	sub    esp,0x3c
c00129cc:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00129d0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00129d4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129d8:	74 59                	je     c0012a33 <CmExpand(Reghive_Tag*, int)+0x71>
c00129da:	50                   	push   eax
c00129db:	31 d2                	xor    edx,edx
c00129dd:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00129e1:	31 ff                	xor    edi,edi
c00129e3:	52                   	push   edx
c00129e4:	50                   	push   eax
c00129e5:	ff 33                	push   DWORD PTR [ebx]
c00129e7:	e8 2e 8f ff ff       	call   c000b91a <File::seek(unsigned long long)>
c00129ec:	83 c4 0c             	add    esp,0xc
c00129ef:	6a 2b                	push   0x2b
c00129f1:	6a 00                	push   0x0
c00129f3:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00129f7:	55                   	push   ebp
c00129f8:	e8 f3 da fe ff       	call   c00004f0 <memset>
c00129fd:	83 c4 10             	add    esp,0x10
c0012a00:	39 f7                	cmp    edi,esi
c0012a02:	7d 1b                	jge    c0012a1f <CmExpand(Reghive_Tag*, int)+0x5d>
c0012a04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a06:	83 ec 0c             	sub    esp,0xc
c0012a09:	47                   	inc    edi
c0012a0a:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012a0e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a10:	51                   	push   ecx
c0012a11:	55                   	push   ebp
c0012a12:	6a 00                	push   0x0
c0012a14:	6a 2b                	push   0x2b
c0012a16:	50                   	push   eax
c0012a17:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a1a:	83 c4 20             	add    esp,0x20
c0012a1d:	eb e1                	jmp    c0012a00 <CmExpand(Reghive_Tag*, int)+0x3e>
c0012a1f:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0012a22:	83 ec 0c             	sub    esp,0xc
c0012a25:	01 fe                	add    esi,edi
c0012a27:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0012a2a:	53                   	push   ebx
c0012a2b:	e8 71 ff ff ff       	call   c00129a1 <CmUpdateHeader(Reghive_Tag*)>
c0012a30:	83 c4 10             	add    esp,0x10
c0012a33:	83 c4 3c             	add    esp,0x3c
c0012a36:	89 f8                	mov    eax,edi
c0012a38:	5b                   	pop    ebx
c0012a39:	5e                   	pop    esi
c0012a3a:	5f                   	pop    edi
c0012a3b:	5d                   	pop    ebp
c0012a3c:	c3                   	ret    

c0012a3d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012a3d:	55                   	push   ebp
c0012a3e:	57                   	push   edi
c0012a3f:	56                   	push   esi
c0012a40:	53                   	push   ebx
c0012a41:	83 cb ff             	or     ebx,0xffffffff
c0012a44:	83 ec 1c             	sub    esp,0x1c
c0012a47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a4b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012a4f:	74 68                	je     c0012ab9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a51:	51                   	push   ecx
c0012a52:	be 2b 00 00 00       	mov    esi,0x2b
c0012a57:	6a 00                	push   0x0
c0012a59:	31 ff                	xor    edi,edi
c0012a5b:	6a 00                	push   0x0
c0012a5d:	31 db                	xor    ebx,ebx
c0012a5f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a62:	e8 b3 8e ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0012a67:	83 c4 10             	add    esp,0x10
c0012a6a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012a6d:	76 3b                	jbe    c0012aaa <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012a6f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a72:	83 ec 0c             	sub    esp,0xc
c0012a75:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a79:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a7b:	51                   	push   ecx
c0012a7c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a80:	51                   	push   ecx
c0012a81:	6a 00                	push   0x0
c0012a83:	6a 01                	push   0x1
c0012a85:	50                   	push   eax
c0012a86:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a89:	83 c4 20             	add    esp,0x20
c0012a8c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a91:	74 26                	je     c0012ab9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a93:	52                   	push   edx
c0012a94:	43                   	inc    ebx
c0012a95:	57                   	push   edi
c0012a96:	56                   	push   esi
c0012a97:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a9a:	e8 7b 8e ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0012a9f:	83 c6 2b             	add    esi,0x2b
c0012aa2:	83 d7 00             	adc    edi,0x0
c0012aa5:	83 c4 10             	add    esp,0x10
c0012aa8:	eb c0                	jmp    c0012a6a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012aaa:	50                   	push   eax
c0012aab:	50                   	push   eax
c0012aac:	6a 40                	push   0x40
c0012aae:	55                   	push   ebp
c0012aaf:	e8 0e ff ff ff       	call   c00129c2 <CmExpand(Reghive_Tag*, int)>
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	89 c3                	mov    ebx,eax
c0012ab9:	83 c4 1c             	add    esp,0x1c
c0012abc:	89 d8                	mov    eax,ebx
c0012abe:	5b                   	pop    ebx
c0012abf:	5e                   	pop    esi
c0012ac0:	5f                   	pop    edi
c0012ac1:	5d                   	pop    ebp
c0012ac2:	c3                   	ret    

c0012ac3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012ac3:	55                   	push   ebp
c0012ac4:	57                   	push   edi
c0012ac5:	56                   	push   esi
c0012ac6:	53                   	push   ebx
c0012ac7:	81 ec 88 00 00 00    	sub    esp,0x88
c0012acd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012ad4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012adb:	e8 5d ff ff ff       	call   c0012a3d <CmFindUnusedExtent(Reghive_Tag*)>
c0012ae0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ae4:	83 c4 0c             	add    esp,0xc
c0012ae7:	6a 2b                	push   0x2b
c0012ae9:	6a 00                	push   0x0
c0012aeb:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012aef:	55                   	push   ebp
c0012af0:	e8 fb d9 fe ff       	call   c00004f0 <memset>
c0012af5:	83 c4 10             	add    esp,0x10
c0012af8:	85 db                	test   ebx,ebx
c0012afa:	74 12                	je     c0012b0e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012afc:	51                   	push   ecx
c0012afd:	55                   	push   ebp
c0012afe:	53                   	push   ebx
c0012aff:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b06:	e8 0e fd ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b0b:	83 c4 10             	add    esp,0x10
c0012b0e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012b12:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b19:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012b1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b20:	85 db                	test   ebx,ebx
c0012b22:	74 49                	je     c0012b6d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012b24:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012b29:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012b2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b32:	c1 e0 08             	shl    eax,0x8
c0012b35:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012b3b:	09 c8                	or     eax,ecx
c0012b3d:	74 11                	je     c0012b50 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012b3f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b43:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012b47:	c1 e8 10             	shr    eax,0x10
c0012b4a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012b4e:	eb 0f                	jmp    c0012b5f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012b50:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b55:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b5a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b5f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012b63:	c1 ea 08             	shr    edx,0x8
c0012b66:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012b6b:	eb 0f                	jmp    c0012b7c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012b6d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b72:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b77:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b7c:	52                   	push   edx
c0012b7d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b81:	50                   	push   eax
c0012b82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b86:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b8d:	e8 ab fd ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b92:	83 c4 10             	add    esp,0x10
c0012b95:	85 db                	test   ebx,ebx
c0012b97:	74 12                	je     c0012bab <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b99:	50                   	push   eax
c0012b9a:	55                   	push   ebp
c0012b9b:	53                   	push   ebx
c0012b9c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ba3:	e8 95 fd ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba8:	83 c4 10             	add    esp,0x10
c0012bab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012baf:	83 c4 7c             	add    esp,0x7c
c0012bb2:	5b                   	pop    ebx
c0012bb3:	5e                   	pop    esi
c0012bb4:	5f                   	pop    edi
c0012bb5:	5d                   	pop    ebp
c0012bb6:	c3                   	ret    

c0012bb7 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012bb7:	55                   	push   ebp
c0012bb8:	57                   	push   edi
c0012bb9:	56                   	push   esi
c0012bba:	53                   	push   ebx
c0012bbb:	bb 27 00 00 00       	mov    ebx,0x27
c0012bc0:	81 ec 88 00 00 00    	sub    esp,0x88
c0012bc6:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0012bcd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012bd4:	e8 a7 d9 fe ff       	call   c0000580 <strlen>
c0012bd9:	8d 48 26             	lea    ecx,[eax+0x26]
c0012bdc:	89 c8                	mov    eax,ecx
c0012bde:	99                   	cdq    
c0012bdf:	f7 fb                	idiv   ebx
c0012be1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012be5:	83 c4 10             	add    esp,0x10
c0012be8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012bee:	7e 10                	jle    c0012c00 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	68 64 1f 02 c0       	push   0xc0021f64
c0012bf8:	e8 50 e6 ff ff       	call   c001124d <KePanic(char const*)>
c0012bfd:	83 c4 10             	add    esp,0x10
c0012c00:	53                   	push   ebx
c0012c01:	31 ed                	xor    ebp,ebp
c0012c03:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c07:	53                   	push   ebx
c0012c08:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c0f:	57                   	push   edi
c0012c10:	e8 04 fc ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c15:	83 c4 10             	add    esp,0x10
c0012c18:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c0012c1c:	89 f0                	mov    eax,esi
c0012c1e:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0012c22:	c1 e0 08             	shl    eax,0x8
c0012c25:	09 c6                	or     esi,eax
c0012c27:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012c2b:	c1 e6 08             	shl    esi,0x8
c0012c2e:	09 c6                	or     esi,eax
c0012c30:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0012c34:	7e 72                	jle    c0012ca8 <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0012c36:	85 f6                	test   esi,esi
c0012c38:	75 25                	jne    c0012c5f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012c3a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012c3f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012c43:	50                   	push   eax
c0012c44:	6a 00                	push   0x0
c0012c46:	6a 00                	push   0x0
c0012c48:	57                   	push   edi
c0012c49:	e8 75 fe ff ff       	call   c0012ac3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012c4e:	83 c4 10             	add    esp,0x10
c0012c51:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012c54:	89 c6                	mov    esi,eax
c0012c56:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012c59:	c1 f8 10             	sar    eax,0x10
c0012c5c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012c5f:	51                   	push   ecx
c0012c60:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012c64:	52                   	push   edx
c0012c65:	56                   	push   esi
c0012c66:	57                   	push   edi
c0012c67:	e8 ad fb ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c6c:	83 c4 0c             	add    esp,0xc
c0012c6f:	6a 27                	push   0x27
c0012c71:	6a 00                	push   0x0
c0012c73:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c77:	51                   	push   ecx
c0012c78:	e8 73 d8 fe ff       	call   c00004f0 <memset>
c0012c7d:	6b c5 27             	imul   eax,ebp,0x27
c0012c80:	83 c4 0c             	add    esp,0xc
c0012c83:	6a 27                	push   0x27
c0012c85:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c8c:	50                   	push   eax
c0012c8d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c91:	51                   	push   ecx
c0012c92:	e8 f9 d9 fe ff       	call   c0000690 <strncpy>
c0012c97:	83 c4 0c             	add    esp,0xc
c0012c9a:	8d 54 24 49          	lea    edx,[esp+0x49]
c0012c9e:	52                   	push   edx
c0012c9f:	56                   	push   esi
c0012ca0:	57                   	push   edi
c0012ca1:	e8 97 fc ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ca6:	eb 19                	jmp    c0012cc1 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c0012ca8:	85 f6                	test   esi,esi
c0012caa:	74 18                	je     c0012cc4 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0012cac:	52                   	push   edx
c0012cad:	52                   	push   edx
c0012cae:	56                   	push   esi
c0012caf:	57                   	push   edi
c0012cb0:	e8 c4 fc ff ff       	call   c0012979 <CmFreeExtent(Reghive_Tag*, int)>
c0012cb5:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012cb9:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012cbd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	45                   	inc    ebp
c0012cc5:	83 c3 03             	add    ebx,0x3
c0012cc8:	83 fd 07             	cmp    ebp,0x7
c0012ccb:	0f 85 47 ff ff ff    	jne    c0012c18 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012cd1:	50                   	push   eax
c0012cd2:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012cd6:	50                   	push   eax
c0012cd7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cde:	57                   	push   edi
c0012cdf:	e8 59 fc ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ce4:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012cea:	5b                   	pop    ebx
c0012ceb:	5e                   	pop    esi
c0012cec:	5f                   	pop    edi
c0012ced:	5d                   	pop    ebp
c0012cee:	c3                   	ret    

c0012cef <CmGetMatch(char*, char*, bool, bool*)>:
c0012cef:	56                   	push   esi
c0012cf0:	53                   	push   ebx
c0012cf1:	50                   	push   eax
c0012cf2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012cf7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012cfb:	74 25                	je     c0012d22 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012cfd:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d00:	31 db                	xor    ebx,ebx
c0012d02:	50                   	push   eax
c0012d03:	50                   	push   eax
c0012d04:	8d 04 9d 00 34 02 c0 	lea    eax,[ebx*4-0x3ffdcc00]
c0012d0b:	50                   	push   eax
c0012d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d10:	e8 6b da fe ff       	call   c0000780 <strcmp>
c0012d15:	83 c4 10             	add    esp,0x10
c0012d18:	85 c0                	test   eax,eax
c0012d1a:	74 2e                	je     c0012d4a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d1c:	43                   	inc    ebx
c0012d1d:	83 fb 3f             	cmp    ebx,0x3f
c0012d20:	75 e0                	jne    c0012d02 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012d22:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d25:	31 db                	xor    ebx,ebx
c0012d27:	51                   	push   ecx
c0012d28:	51                   	push   ecx
c0012d29:	8d 04 9d 00 34 02 c0 	lea    eax,[ebx*4-0x3ffdcc00]
c0012d30:	50                   	push   eax
c0012d31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d35:	e8 46 da fe ff       	call   c0000780 <strcmp>
c0012d3a:	83 c4 10             	add    esp,0x10
c0012d3d:	85 c0                	test   eax,eax
c0012d3f:	74 09                	je     c0012d4a <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d41:	43                   	inc    ebx
c0012d42:	83 fb 3f             	cmp    ebx,0x3f
c0012d45:	75 e0                	jne    c0012d27 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012d47:	83 cb ff             	or     ebx,0xffffffff
c0012d4a:	5a                   	pop    edx
c0012d4b:	89 d8                	mov    eax,ebx
c0012d4d:	5b                   	pop    ebx
c0012d4e:	5e                   	pop    esi
c0012d4f:	c3                   	ret    

c0012d50 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012d50:	55                   	push   ebp
c0012d51:	31 c0                	xor    eax,eax
c0012d53:	57                   	push   edi
c0012d54:	56                   	push   esi
c0012d55:	53                   	push   ebx
c0012d56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d5a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d5e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d66:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012d68:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012d6b:	83 fd 1f             	cmp    ebp,0x1f
c0012d6e:	7f 0b                	jg     c0012d7b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d70:	0f b6 c2             	movzx  eax,dl
c0012d73:	d3 e0                	shl    eax,cl
c0012d75:	09 07                	or     DWORD PTR [edi],eax
c0012d77:	b0 01                	mov    al,0x1
c0012d79:	01 33                	add    DWORD PTR [ebx],esi
c0012d7b:	5b                   	pop    ebx
c0012d7c:	5e                   	pop    esi
c0012d7d:	5f                   	pop    edi
c0012d7e:	5d                   	pop    ebp
c0012d7f:	c3                   	ret    

c0012d80 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d80:	57                   	push   edi
c0012d81:	56                   	push   esi
c0012d82:	53                   	push   ebx
c0012d83:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d8b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d8f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d93:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d95:	7c 17                	jl     c0012dae <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d97:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d99:	b8 01 00 00 00       	mov    eax,0x1
c0012d9e:	d3 e0                	shl    eax,cl
c0012da0:	48                   	dec    eax
c0012da1:	21 d0                	and    eax,edx
c0012da3:	d3 ea                	shr    edx,cl
c0012da5:	89 17                	mov    DWORD PTR [edi],edx
c0012da7:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012da9:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012dac:	eb 05                	jmp    c0012db3 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012dae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db1:	31 c0                	xor    eax,eax
c0012db3:	5b                   	pop    ebx
c0012db4:	5e                   	pop    esi
c0012db5:	5f                   	pop    edi
c0012db6:	c3                   	ret    

c0012db7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012db7:	83 ec 40             	sub    esp,0x40
c0012dba:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dbe:	50                   	push   eax
c0012dbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dc3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dc7:	e8 4d fa ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012dcc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012dd0:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012dd4:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012dd8:	89 10                	mov    DWORD PTR [eax],edx
c0012dda:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012ddd:	83 c4 4c             	add    esp,0x4c
c0012de0:	c3                   	ret    

c0012de1 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012de1:	55                   	push   ebp
c0012de2:	57                   	push   edi
c0012de3:	56                   	push   esi
c0012de4:	53                   	push   ebx
c0012de5:	83 ec 40             	sub    esp,0x40
c0012de8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012dec:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012df0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012df4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012df8:	53                   	push   ebx
c0012df9:	56                   	push   esi
c0012dfa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012dfe:	e8 16 fa ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e03:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e07:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012e0b:	83 c4 0c             	add    esp,0xc
c0012e0e:	53                   	push   ebx
c0012e0f:	56                   	push   esi
c0012e10:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e14:	e8 24 fb ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e19:	83 c4 4c             	add    esp,0x4c
c0012e1c:	5b                   	pop    ebx
c0012e1d:	5e                   	pop    esi
c0012e1e:	5f                   	pop    edi
c0012e1f:	5d                   	pop    ebp
c0012e20:	c3                   	ret    

c0012e21 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012e21:	55                   	push   ebp
c0012e22:	57                   	push   edi
c0012e23:	56                   	push   esi
c0012e24:	31 f6                	xor    esi,esi
c0012e26:	53                   	push   ebx
c0012e27:	31 db                	xor    ebx,ebx
c0012e29:	83 ec 40             	sub    esp,0x40
c0012e2c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012e34:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012e3c:	6a 12                	push   0x12
c0012e3e:	68 ee 00 00 00       	push   0xee
c0012e43:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e47:	e8 a4 d6 fe ff       	call   c00004f0 <memset>
c0012e4c:	83 c4 10             	add    esp,0x10
c0012e4f:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e53:	6a 08                	push   0x8
c0012e55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e59:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012e5d:	50                   	push   eax
c0012e5e:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012e62:	55                   	push   ebp
c0012e63:	57                   	push   edi
c0012e64:	e8 e7 fe ff ff       	call   c0012d50 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012e69:	83 c4 10             	add    esp,0x10
c0012e6c:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e70:	50                   	push   eax
c0012e71:	6a 06                	push   0x6
c0012e73:	55                   	push   ebp
c0012e74:	57                   	push   edi
c0012e75:	e8 06 ff ff ff       	call   c0012d80 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e7a:	83 c4 10             	add    esp,0x10
c0012e7d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e82:	74 07                	je     c0012e8b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e84:	46                   	inc    esi
c0012e85:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e89:	eb e1                	jmp    c0012e6c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e8b:	43                   	inc    ebx
c0012e8c:	83 fb 12             	cmp    ebx,0x12
c0012e8f:	75 c2                	jne    c0012e53 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e95:	31 f6                	xor    esi,esi
c0012e97:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e9a:	50                   	push   eax
c0012e9b:	50                   	push   eax
c0012e9c:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0012ea1:	46                   	inc    esi
c0012ea2:	8d 04 85 00 34 02 c0 	lea    eax,[eax*4-0x3ffdcc00]
c0012ea9:	50                   	push   eax
c0012eaa:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012eae:	e8 bd d9 fe ff       	call   c0000870 <strcat>
c0012eb3:	83 c4 10             	add    esp,0x10
c0012eb6:	83 fe 18             	cmp    esi,0x18
c0012eb9:	75 df                	jne    c0012e9a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012ebb:	83 c4 3c             	add    esp,0x3c
c0012ebe:	31 c0                	xor    eax,eax
c0012ec0:	5b                   	pop    ebx
c0012ec1:	5e                   	pop    esi
c0012ec2:	5f                   	pop    edi
c0012ec3:	5d                   	pop    ebp
c0012ec4:	c3                   	ret    

c0012ec5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012ec5:	83 ec 40             	sub    esp,0x40
c0012ec8:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ecc:	50                   	push   eax
c0012ecd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ed1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ed5:	e8 3f f9 ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012eda:	58                   	pop    eax
c0012edb:	5a                   	pop    edx
c0012edc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012ee0:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012ee4:	50                   	push   eax
c0012ee5:	e8 37 ff ff ff       	call   c0012e21 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012eea:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012eef:	83 c4 4c             	add    esp,0x4c
c0012ef2:	c3                   	ret    

c0012ef3 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012ef3:	55                   	push   ebp
c0012ef4:	57                   	push   edi
c0012ef5:	56                   	push   esi
c0012ef6:	53                   	push   ebx
c0012ef7:	31 db                	xor    ebx,ebx
c0012ef9:	83 ec 70             	sub    esp,0x70
c0012efc:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f03:	6a 30                	push   0x30
c0012f05:	6a 00                	push   0x0
c0012f07:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f0b:	56                   	push   esi
c0012f0c:	e8 df d5 fe ff       	call   c00004f0 <memset>
c0012f11:	83 c4 10             	add    esp,0x10
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	57                   	push   edi
c0012f18:	e8 63 d6 fe ff       	call   c0000580 <strlen>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	39 d8                	cmp    eax,ebx
c0012f22:	76 16                	jbe    c0012f3a <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012f24:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012f28:	83 ec 0c             	sub    esp,0xc
c0012f2b:	50                   	push   eax
c0012f2c:	e8 2f da fe ff       	call   c0000960 <toupper>
c0012f31:	83 c4 10             	add    esp,0x10
c0012f34:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012f37:	43                   	inc    ebx
c0012f38:	eb da                	jmp    c0012f14 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012f3a:	52                   	push   edx
c0012f3b:	31 db                	xor    ebx,ebx
c0012f3d:	6a 18                	push   0x18
c0012f3f:	31 ff                	xor    edi,edi
c0012f41:	6a 3f                	push   0x3f
c0012f43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f47:	50                   	push   eax
c0012f48:	e8 a3 d5 fe ff       	call   c00004f0 <memset>
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0012f54:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012f58:	84 c0                	test   al,al
c0012f5a:	0f 84 af 00 00 00    	je     c001300f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0012f60:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012f64:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f67:	83 ec 0c             	sub    esp,0xc
c0012f6a:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0012f6f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f73:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0012f77:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0012f7c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f80:	56                   	push   esi
c0012f81:	e8 fa d5 fe ff       	call   c0000580 <strlen>
c0012f86:	83 c4 10             	add    esp,0x10
c0012f89:	85 c0                	test   eax,eax
c0012f8b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f8f:	74 0b                	je     c0012f9c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f91:	50                   	push   eax
c0012f92:	6a 01                	push   0x1
c0012f94:	56                   	push   esi
c0012f95:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f99:	50                   	push   eax
c0012f9a:	eb 0a                	jmp    c0012fa6 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f9c:	50                   	push   eax
c0012f9d:	6a 00                	push   0x0
c0012f9f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012fa3:	50                   	push   eax
c0012fa4:	6a 00                	push   0x0
c0012fa6:	e8 44 fd ff ff       	call   c0012cef <CmGetMatch(char*, char*, bool, bool*)>
c0012fab:	83 c4 10             	add    esp,0x10
c0012fae:	83 f8 ff             	cmp    eax,0xffffffff
c0012fb1:	75 1a                	jne    c0012fcd <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012fb3:	83 ec 0c             	sub    esp,0xc
c0012fb6:	68 79 1f 02 c0       	push   0xc0021f79
c0012fbb:	e8 8d e2 ff ff       	call   c001124d <KePanic(char const*)>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	b8 02 00 00 00       	mov    eax,0x2
c0012fc8:	e9 bb 00 00 00       	jmp    c0013088 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012fcd:	83 ff 18             	cmp    edi,0x18
c0012fd0:	75 1a                	jne    c0012fec <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012fd2:	83 ec 0c             	sub    esp,0xc
c0012fd5:	68 8e 1f 02 c0       	push   0xc0021f8e
c0012fda:	e8 6e e2 ff ff       	call   c001124d <KePanic(char const*)>
c0012fdf:	83 c4 10             	add    esp,0x10
c0012fe2:	b8 01 00 00 00       	mov    eax,0x1
c0012fe7:	e9 9c 00 00 00       	jmp    c0013088 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0012fec:	47                   	inc    edi
c0012fed:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ff2:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012ff6:	0f 45 dd             	cmovne ebx,ebp
c0012ff9:	83 ec 0c             	sub    esp,0xc
c0012ffc:	56                   	push   esi
c0012ffd:	e8 7e d5 fe ff       	call   c0000580 <strlen>
c0013002:	83 c4 10             	add    esp,0x10
c0013005:	85 c0                	test   eax,eax
c0013007:	74 06                	je     c001300f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0013009:	43                   	inc    ebx
c001300a:	e9 41 ff ff ff       	jmp    c0012f50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001300f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013017:	31 db                	xor    ebx,ebx
c0013019:	31 ff                	xor    edi,edi
c001301b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013023:	50                   	push   eax
c0013024:	6a 12                	push   0x12
c0013026:	68 ee 00 00 00       	push   0xee
c001302b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013032:	e8 b9 d4 fe ff       	call   c00004f0 <memset>
c0013037:	83 c4 10             	add    esp,0x10
c001303a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001303e:	83 fb 17             	cmp    ebx,0x17
c0013041:	7e 26                	jle    c0013069 <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0013043:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013047:	50                   	push   eax
c0013048:	6a 08                	push   0x8
c001304a:	55                   	push   ebp
c001304b:	56                   	push   esi
c001304c:	e8 2f fd ff ff       	call   c0012d80 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013051:	83 c4 10             	add    esp,0x10
c0013054:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013059:	74 26                	je     c0013081 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c001305b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0013062:	4b                   	dec    ebx
c0013063:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013066:	47                   	inc    edi
c0013067:	eb 1c                	jmp    c0013085 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0013069:	6a 06                	push   0x6
c001306b:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0013070:	50                   	push   eax
c0013071:	55                   	push   ebp
c0013072:	56                   	push   esi
c0013073:	e8 d8 fc ff ff       	call   c0012d50 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013078:	83 c4 10             	add    esp,0x10
c001307b:	84 c0                	test   al,al
c001307d:	75 06                	jne    c0013085 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c001307f:	eb c2                	jmp    c0013043 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0013081:	31 c0                	xor    eax,eax
c0013083:	eb 03                	jmp    c0013088 <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0013085:	43                   	inc    ebx
c0013086:	eb b2                	jmp    c001303a <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c0013088:	83 c4 6c             	add    esp,0x6c
c001308b:	5b                   	pop    ebx
c001308c:	5e                   	pop    esi
c001308d:	5f                   	pop    edi
c001308e:	5d                   	pop    ebp
c001308f:	c3                   	ret    

c0013090 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013090:	53                   	push   ebx
c0013091:	83 ec 3c             	sub    esp,0x3c
c0013094:	6a 2b                	push   0x2b
c0013096:	6a 00                	push   0x0
c0013098:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001309c:	53                   	push   ebx
c001309d:	e8 4e d4 fe ff       	call   c00004f0 <memset>
c00130a2:	58                   	pop    eax
c00130a3:	5a                   	pop    edx
c00130a4:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130a8:	50                   	push   eax
c00130a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130ad:	e8 41 fe ff ff       	call   c0012ef3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130b2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00130b7:	83 c4 0c             	add    esp,0xc
c00130ba:	6a 15                	push   0x15
c00130bc:	6a 00                	push   0x0
c00130be:	8d 44 24 27          	lea    eax,[esp+0x27]
c00130c2:	50                   	push   eax
c00130c3:	e8 28 d4 fe ff       	call   c00004f0 <memset>
c00130c8:	53                   	push   ebx
c00130c9:	6a 00                	push   0x0
c00130cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130d3:	e8 eb f9 ff ff       	call   c0012ac3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130d8:	83 c4 58             	add    esp,0x58
c00130db:	5b                   	pop    ebx
c00130dc:	c3                   	ret    

c00130dd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00130dd:	56                   	push   esi
c00130de:	53                   	push   ebx
c00130df:	83 ec 48             	sub    esp,0x48
c00130e2:	6a 12                	push   0x12
c00130e4:	68 ff 00 00 00       	push   0xff
c00130e9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00130ed:	56                   	push   esi
c00130ee:	e8 fd d3 fe ff       	call   c00004f0 <memset>
c00130f3:	5a                   	pop    edx
c00130f4:	59                   	pop    ecx
c00130f5:	56                   	push   esi
c00130f6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00130fa:	e8 f4 fd ff ff       	call   c0012ef3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130ff:	83 c4 10             	add    esp,0x10
c0013102:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013106:	85 db                	test   ebx,ebx
c0013108:	74 42                	je     c001314c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001310a:	50                   	push   eax
c001310b:	8d 44 24 19          	lea    eax,[esp+0x19]
c001310f:	50                   	push   eax
c0013110:	53                   	push   ebx
c0013111:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013115:	e8 ff f6 ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001311a:	83 c4 0c             	add    esp,0xc
c001311d:	6a 12                	push   0x12
c001311f:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013123:	50                   	push   eax
c0013124:	56                   	push   esi
c0013125:	e8 56 d2 fe ff       	call   c0000380 <memcmp>
c001312a:	83 c4 10             	add    esp,0x10
c001312d:	85 c0                	test   eax,eax
c001312f:	74 1e                	je     c001314f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013131:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013136:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001313b:	c1 e3 08             	shl    ebx,0x8
c001313e:	09 d8                	or     eax,ebx
c0013140:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013145:	c1 e3 10             	shl    ebx,0x10
c0013148:	09 c3                	or     ebx,eax
c001314a:	eb ba                	jmp    c0013106 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c001314c:	83 cb ff             	or     ebx,0xffffffff
c001314f:	83 c4 44             	add    esp,0x44
c0013152:	89 d8                	mov    eax,ebx
c0013154:	5b                   	pop    ebx
c0013155:	5e                   	pop    esi
c0013156:	c3                   	ret    

c0013157 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013157:	57                   	push   edi
c0013158:	56                   	push   esi
c0013159:	53                   	push   ebx
c001315a:	83 ec 34             	sub    esp,0x34
c001315d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0013161:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013165:	6a 2b                	push   0x2b
c0013167:	6a 00                	push   0x0
c0013169:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001316d:	53                   	push   ebx
c001316e:	e8 7d d3 fe ff       	call   c00004f0 <memset>
c0013173:	58                   	pop    eax
c0013174:	5a                   	pop    edx
c0013175:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013179:	50                   	push   eax
c001317a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001317e:	e8 70 fd ff ff       	call   c0012ef3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013183:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c0013187:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001318b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001318f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013193:	53                   	push   ebx
c0013194:	6a 00                	push   0x0
c0013196:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001319a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001319e:	e8 20 f9 ff ff       	call   c0012ac3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131a3:	83 c4 50             	add    esp,0x50
c00131a6:	5b                   	pop    ebx
c00131a7:	5e                   	pop    esi
c00131a8:	5f                   	pop    edi
c00131a9:	c3                   	ret    

c00131aa <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00131aa:	55                   	push   ebp
c00131ab:	57                   	push   edi
c00131ac:	56                   	push   esi
c00131ad:	53                   	push   ebx
c00131ae:	83 ec 40             	sub    esp,0x40
c00131b1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00131b5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131b9:	6a 2b                	push   0x2b
c00131bb:	6a 00                	push   0x0
c00131bd:	8d 74 24 11          	lea    esi,[esp+0x11]
c00131c1:	56                   	push   esi
c00131c2:	e8 29 d3 fe ff       	call   c00004f0 <memset>
c00131c7:	5f                   	pop    edi
c00131c8:	89 ef                	mov    edi,ebp
c00131ca:	58                   	pop    eax
c00131cb:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131cf:	50                   	push   eax
c00131d0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00131d4:	e8 1a fd ff ff       	call   c0012ef3 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131d9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00131de:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00131e3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00131e8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00131ed:	83 c4 10             	add    esp,0x10
c00131f0:	85 ed                	test   ebp,ebp
c00131f2:	74 14                	je     c0013208 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00131f4:	51                   	push   ecx
c00131f5:	51                   	push   ecx
c00131f6:	57                   	push   edi
c00131f7:	53                   	push   ebx
c00131f8:	e8 0e f7 ff ff       	call   c001290b <CmGetNext(Reghive_Tag*, int)>
c00131fd:	83 c4 10             	add    esp,0x10
c0013200:	85 c0                	test   eax,eax
c0013202:	74 04                	je     c0013208 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013204:	89 c7                	mov    edi,eax
c0013206:	eb e8                	jmp    c00131f0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013208:	56                   	push   esi
c0013209:	6a 00                	push   0x0
c001320b:	57                   	push   edi
c001320c:	53                   	push   ebx
c001320d:	e8 b1 f8 ff ff       	call   c0012ac3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013212:	83 c4 0c             	add    esp,0xc
c0013215:	56                   	push   esi
c0013216:	50                   	push   eax
c0013217:	89 c7                	mov    edi,eax
c0013219:	53                   	push   ebx
c001321a:	e8 fa f5 ff ff       	call   c0012819 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001321f:	58                   	pop    eax
c0013220:	5a                   	pop    edx
c0013221:	6a 6c                	push   0x6c
c0013223:	6a 00                	push   0x0
c0013225:	6a 00                	push   0x0
c0013227:	68 9f 1f 02 c0       	push   0xc0021f9f
c001322c:	57                   	push   edi
c001322d:	53                   	push   ebx
c001322e:	e8 24 ff ff ff       	call   c0013157 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013233:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013237:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c001323b:	c1 e8 10             	shr    eax,0x10
c001323e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013242:	83 c4 1c             	add    esp,0x1c
c0013245:	56                   	push   esi
c0013246:	57                   	push   edi
c0013247:	53                   	push   ebx
c0013248:	e8 f0 f6 ff ff       	call   c001293d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001324d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013252:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013257:	c1 e0 08             	shl    eax,0x8
c001325a:	09 c2                	or     edx,eax
c001325c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0013261:	83 c4 4c             	add    esp,0x4c
c0013264:	5b                   	pop    ebx
c0013265:	5e                   	pop    esi
c0013266:	c1 e0 10             	shl    eax,0x10
c0013269:	09 d0                	or     eax,edx
c001326b:	5f                   	pop    edi
c001326c:	5d                   	pop    ebp
c001326d:	c3                   	ret    

c001326e <zStrtok(char*, char const*)>:
c001326e:	55                   	push   ebp
c001326f:	57                   	push   edi
c0013270:	56                   	push   esi
c0013271:	53                   	push   ebx
c0013272:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001327a:	85 db                	test   ebx,ebx
c001327c:	74 2f                	je     c00132ad <zStrtok(char*, char const*)+0x3f>
c001327e:	85 c0                	test   eax,eax
c0013280:	75 09                	jne    c001328b <zStrtok(char*, char const*)+0x1d>
c0013282:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c0013287:	85 c0                	test   eax,eax
c0013289:	74 50                	je     c00132db <zStrtok(char*, char const*)+0x6d>
c001328b:	31 c9                	xor    ecx,ecx
c001328d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013291:	74 03                	je     c0013296 <zStrtok(char*, char const*)+0x28>
c0013293:	41                   	inc    ecx
c0013294:	eb f7                	jmp    c001328d <zStrtok(char*, char const*)+0x1f>
c0013296:	31 d2                	xor    edx,edx
c0013298:	39 ca                	cmp    edx,ecx
c001329a:	74 15                	je     c00132b1 <zStrtok(char*, char const*)+0x43>
c001329c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00132a0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00132a3:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00132a6:	39 ee                	cmp    esi,ebp
c00132a8:	74 13                	je     c00132bd <zStrtok(char*, char const*)+0x4f>
c00132aa:	42                   	inc    edx
c00132ab:	eb eb                	jmp    c0013298 <zStrtok(char*, char const*)+0x2a>
c00132ad:	31 c0                	xor    eax,eax
c00132af:	eb 2a                	jmp    c00132db <zStrtok(char*, char const*)+0x6d>
c00132b1:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00132bb:	eb 1e                	jmp    c00132db <zStrtok(char*, char const*)+0x6d>
c00132bd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00132c0:	39 ce                	cmp    esi,ecx
c00132c2:	75 0a                	jne    c00132ce <zStrtok(char*, char const*)+0x60>
c00132c4:	40                   	inc    eax
c00132c5:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00132ca:	89 d8                	mov    eax,ebx
c00132cc:	eb 0d                	jmp    c00132db <zStrtok(char*, char const*)+0x6d>
c00132ce:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00132d1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00132d5:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00132db:	5b                   	pop    ebx
c00132dc:	5e                   	pop    esi
c00132dd:	5f                   	pop    edi
c00132de:	5d                   	pop    ebp
c00132df:	c3                   	ret    

c00132e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00132e0:	57                   	push   edi
c00132e1:	56                   	push   esi
c00132e2:	53                   	push   ebx
c00132e3:	81 ec 08 01 00 00    	sub    esp,0x108
c00132e9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00132f0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00132f7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00132fb:	53                   	push   ebx
c00132fc:	e8 4f d3 fe ff       	call   c0000650 <strcpy>
c0013301:	59                   	pop    ecx
c0013302:	5e                   	pop    esi
c0013303:	68 03 23 02 c0       	push   0xc0022303
c0013308:	53                   	push   ebx
c0013309:	bb 01 00 00 00       	mov    ebx,0x1
c001330e:	e8 5b ff ff ff       	call   c001326e <zStrtok(char*, char const*)>
c0013313:	83 c4 10             	add    esp,0x10
c0013316:	85 c0                	test   eax,eax
c0013318:	74 3b                	je     c0013355 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001331a:	52                   	push   edx
c001331b:	50                   	push   eax
c001331c:	6a 01                	push   0x1
c001331e:	57                   	push   edi
c001331f:	e8 b9 fd ff ff       	call   c00130dd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013324:	59                   	pop    ecx
c0013325:	5e                   	pop    esi
c0013326:	89 c3                	mov    ebx,eax
c0013328:	68 03 23 02 c0       	push   0xc0022303
c001332d:	6a 00                	push   0x0
c001332f:	e8 3a ff ff ff       	call   c001326e <zStrtok(char*, char const*)>
c0013334:	83 c4 10             	add    esp,0x10
c0013337:	85 c0                	test   eax,eax
c0013339:	89 c6                	mov    esi,eax
c001333b:	74 18                	je     c0013355 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001333d:	52                   	push   edx
c001333e:	52                   	push   edx
c001333f:	53                   	push   ebx
c0013340:	57                   	push   edi
c0013341:	e8 86 f5 ff ff       	call   c00128cc <CmEnterDirectory(Reghive_Tag*, int)>
c0013346:	83 c4 10             	add    esp,0x10
c0013349:	83 f8 ff             	cmp    eax,0xffffffff
c001334c:	89 c3                	mov    ebx,eax
c001334e:	74 05                	je     c0013355 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013350:	50                   	push   eax
c0013351:	56                   	push   esi
c0013352:	53                   	push   ebx
c0013353:	eb c9                	jmp    c001331e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013355:	81 c4 00 01 00 00    	add    esp,0x100
c001335b:	89 d8                	mov    eax,ebx
c001335d:	5b                   	pop    ebx
c001335e:	5e                   	pop    esi
c001335f:	5f                   	pop    edi
c0013360:	c3                   	ret    

c0013361 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0013361:	55                   	push   ebp
c0013362:	57                   	push   edi
c0013363:	56                   	push   esi
c0013364:	53                   	push   ebx
c0013365:	83 ec 5c             	sub    esp,0x5c
c0013368:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001336c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013370:	85 db                	test   ebx,ebx
c0013372:	0f 8e 84 00 00 00    	jle    c00133fc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013378:	57                   	push   edi
c0013379:	31 ed                	xor    ebp,ebp
c001337b:	6a 32                	push   0x32
c001337d:	6a 00                	push   0x0
c001337f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013383:	57                   	push   edi
c0013384:	e8 67 d1 fe ff       	call   c00004f0 <memset>
c0013389:	83 c4 0c             	add    esp,0xc
c001338c:	57                   	push   edi
c001338d:	53                   	push   ebx
c001338e:	56                   	push   esi
c001338f:	e8 31 fb ff ff       	call   c0012ec5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013394:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013398:	83 c4 10             	add    esp,0x10
c001339b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c001339f:	7d 13                	jge    c00133b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00133a1:	83 ec 0c             	sub    esp,0xc
c00133a4:	45                   	inc    ebp
c00133a5:	68 a7 26 02 c0       	push   0xc00226a7
c00133aa:	e8 5b 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	eb e7                	jmp    c001339b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00133b4:	51                   	push   ecx
c00133b5:	57                   	push   edi
c00133b6:	53                   	push   ebx
c00133b7:	68 a5 1f 02 c0       	push   0xc0021fa5
c00133bc:	e8 49 75 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00133c9:	75 1e                	jne    c00133e9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00133cb:	52                   	push   edx
c00133cc:	52                   	push   edx
c00133cd:	53                   	push   ebx
c00133ce:	56                   	push   esi
c00133cf:	e8 f8 f4 ff ff       	call   c00128cc <CmEnterDirectory(Reghive_Tag*, int)>
c00133d4:	83 c4 0c             	add    esp,0xc
c00133d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00133db:	8d 51 04             	lea    edx,[ecx+0x4]
c00133de:	52                   	push   edx
c00133df:	50                   	push   eax
c00133e0:	56                   	push   esi
c00133e1:	e8 7b ff ff ff       	call   c0013361 <CmDisplayTree(Reghive_Tag*, int, int)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	50                   	push   eax
c00133ea:	50                   	push   eax
c00133eb:	53                   	push   ebx
c00133ec:	56                   	push   esi
c00133ed:	e8 19 f5 ff ff       	call   c001290b <CmGetNext(Reghive_Tag*, int)>
c00133f2:	83 c4 10             	add    esp,0x10
c00133f5:	89 c3                	mov    ebx,eax
c00133f7:	e9 74 ff ff ff       	jmp    c0013370 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00133fc:	83 c4 5c             	add    esp,0x5c
c00133ff:	5b                   	pop    ebx
c0013400:	5e                   	pop    esi
c0013401:	5f                   	pop    edi
c0013402:	5d                   	pop    ebp
c0013403:	c3                   	ret    

c0013404 <CmSplitFinalSlashInPlace(char*)>:
c0013404:	53                   	push   ebx
c0013405:	83 ec 14             	sub    esp,0x14
c0013408:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001340c:	53                   	push   ebx
c001340d:	e8 6e d1 fe ff       	call   c0000580 <strlen>
c0013412:	83 c4 10             	add    esp,0x10
c0013415:	48                   	dec    eax
c0013416:	85 c0                	test   eax,eax
c0013418:	74 15                	je     c001342f <CmSplitFinalSlashInPlace(char*)+0x2b>
c001341a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001341e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013421:	75 09                	jne    c001342c <CmSplitFinalSlashInPlace(char*)+0x28>
c0013423:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013426:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001342a:	eb 05                	jmp    c0013431 <CmSplitFinalSlashInPlace(char*)+0x2d>
c001342c:	48                   	dec    eax
c001342d:	eb e7                	jmp    c0013416 <CmSplitFinalSlashInPlace(char*)+0x12>
c001342f:	31 c0                	xor    eax,eax
c0013431:	83 c4 08             	add    esp,0x8
c0013434:	5b                   	pop    ebx
c0013435:	c3                   	ret    

c0013436 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013436:	55                   	push   ebp
c0013437:	57                   	push   edi
c0013438:	56                   	push   esi
c0013439:	53                   	push   ebx
c001343a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013440:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013447:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c001344a:	8d 43 01             	lea    eax,[ebx+0x1]
c001344d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013451:	89 f0                	mov    eax,esi
c0013453:	3c 40                	cmp    al,0x40
c0013455:	75 1b                	jne    c0013472 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0013457:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001345a:	85 c0                	test   eax,eax
c001345c:	74 08                	je     c0013466 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c001345e:	83 f8 3a             	cmp    eax,0x3a
c0013461:	74 03                	je     c0013466 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0013463:	43                   	inc    ebx
c0013464:	eb f1                	jmp    c0013457 <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0013466:	85 c0                	test   eax,eax
c0013468:	0f 84 45 01 00 00    	je     c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001346e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013471:	43                   	inc    ebx
c0013472:	50                   	push   eax
c0013473:	6a 40                	push   0x40
c0013475:	6a 00                	push   0x0
c0013477:	8d 44 24 24          	lea    eax,[esp+0x24]
c001347b:	50                   	push   eax
c001347c:	e8 6f d0 fe ff       	call   c00004f0 <memset>
c0013481:	89 f1                	mov    ecx,esi
c0013483:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001348a:	31 c0                	xor    eax,eax
c001348c:	83 c4 10             	add    esp,0x10
c001348f:	0f be f1             	movsx  esi,cl
c0013492:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013495:	85 d2                	test   edx,edx
c0013497:	89 d1                	mov    ecx,edx
c0013499:	0f 84 14 01 00 00    	je     c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c001349f:	3d c7 00 00 00       	cmp    eax,0xc7
c00134a4:	0f 8f 09 01 00 00    	jg     c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c00134aa:	83 fa 0a             	cmp    edx,0xa
c00134ad:	0f 85 f1 00 00 00    	jne    c00135a4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c00134b3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00134b8:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00134bd:	89 c8                	mov    eax,ecx
c00134bf:	a8 df                	test   al,0xdf
c00134c1:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134c6:	83 f9 23             	cmp    ecx,0x23
c00134c9:	0f 94 c2             	sete   dl
c00134cc:	89 d5                	mov    ebp,edx
c00134ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00134d2:	09 ea                	or     edx,ebp
c00134d4:	80 e2 01             	and    dl,0x1
c00134d7:	75 47                	jne    c0013520 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134d9:	83 e8 09             	sub    eax,0x9
c00134dc:	3c 01                	cmp    al,0x1
c00134de:	76 40                	jbe    c0013520 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134e0:	83 f9 5b             	cmp    ecx,0x5b
c00134e3:	75 42                	jne    c0013527 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00134e5:	83 fe 40             	cmp    esi,0x40
c00134e8:	75 36                	jne    c0013520 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00134f1:	55                   	push   ebp
c00134f2:	e8 89 d0 fe ff       	call   c0000580 <strlen>
c00134f7:	83 c4 10             	add    esp,0x10
c00134fa:	83 f8 3f             	cmp    eax,0x3f
c00134fd:	0f 87 b0 00 00 00    	ja     c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013503:	50                   	push   eax
c0013504:	50                   	push   eax
c0013505:	55                   	push   ebp
c0013506:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c001350a:	55                   	push   ebp
c001350b:	e8 40 d1 fe ff       	call   c0000650 <strcpy>
c0013510:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013513:	e8 68 d0 fe ff       	call   c0000580 <strlen>
c0013518:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001351d:	83 c4 10             	add    esp,0x10
c0013520:	31 d2                	xor    edx,edx
c0013522:	e9 84 00 00 00       	jmp    c00135ab <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0013527:	83 fe 40             	cmp    esi,0x40
c001352a:	74 06                	je     c0013532 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c001352c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013530:	eb 19                	jmp    c001354b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0013532:	51                   	push   ecx
c0013533:	51                   	push   ecx
c0013534:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013538:	8d 44 24 24          	lea    eax,[esp+0x24]
c001353c:	50                   	push   eax
c001353d:	e8 3e d2 fe ff       	call   c0000780 <strcmp>
c0013542:	83 c4 10             	add    esp,0x10
c0013545:	85 c0                	test   eax,eax
c0013547:	75 d7                	jne    c0013520 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0013549:	eb e1                	jmp    c001352c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c001354b:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c001354e:	85 c9                	test   ecx,ecx
c0013550:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013555:	83 f9 3d             	cmp    ecx,0x3d
c0013558:	0f 94 c0             	sete   al
c001355b:	89 c5                	mov    ebp,eax
c001355d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013561:	09 e8                	or     eax,ebp
c0013563:	a8 01                	test   al,0x1
c0013565:	89 c5                	mov    ebp,eax
c0013567:	75 03                	jne    c001356c <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0013569:	42                   	inc    edx
c001356a:	eb df                	jmp    c001354b <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c001356c:	85 c9                	test   ecx,ecx
c001356e:	74 43                	je     c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0013570:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013574:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013577:	52                   	push   edx
c0013578:	52                   	push   edx
c0013579:	8d 44 24 60          	lea    eax,[esp+0x60]
c001357d:	50                   	push   eax
c001357e:	53                   	push   ebx
c001357f:	e8 fc d1 fe ff       	call   c0000780 <strcmp>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001358b:	85 c0                	test   eax,eax
c001358d:	75 91                	jne    c0013520 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c001358f:	50                   	push   eax
c0013590:	42                   	inc    edx
c0013591:	50                   	push   eax
c0013592:	52                   	push   edx
c0013593:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001359a:	e8 b1 d0 fe ff       	call   c0000650 <strcpy>
c001359f:	83 c4 10             	add    esp,0x10
c00135a2:	eb 11                	jmp    c00135b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c00135a4:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00135a8:	8d 50 01             	lea    edx,[eax+0x1]
c00135ab:	47                   	inc    edi
c00135ac:	89 d0                	mov    eax,edx
c00135ae:	e9 df fe ff ff       	jmp    c0013492 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c00135b3:	31 ed                	xor    ebp,ebp
c00135b5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00135bb:	89 e8                	mov    eax,ebp
c00135bd:	5b                   	pop    ebx
c00135be:	5e                   	pop    esi
c00135bf:	5f                   	pop    edi
c00135c0:	5d                   	pop    ebp
c00135c1:	c3                   	ret    

c00135c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00135c2:	57                   	push   edi
c00135c3:	56                   	push   esi
c00135c4:	53                   	push   ebx
c00135c5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00135cb:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00135d2:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00135d9:	53                   	push   ebx
c00135da:	e8 a1 cf fe ff       	call   c0000580 <strlen>
c00135df:	89 34 24             	mov    DWORD PTR [esp],esi
c00135e2:	89 c7                	mov    edi,eax
c00135e4:	e8 97 cf fe ff       	call   c0000580 <strlen>
c00135e9:	83 c4 10             	add    esp,0x10
c00135ec:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00135f0:	3d ff 00 00 00       	cmp    eax,0xff
c00135f5:	0f 87 d3 00 00 00    	ja     c00136ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135fb:	57                   	push   edi
c00135fc:	57                   	push   edi
c00135fd:	56                   	push   esi
c00135fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013602:	56                   	push   esi
c0013603:	e8 48 d0 fe ff       	call   c0000650 <strcpy>
c0013608:	58                   	pop    eax
c0013609:	5a                   	pop    edx
c001360a:	68 03 23 02 c0       	push   0xc0022303
c001360f:	56                   	push   esi
c0013610:	e8 5b d2 fe ff       	call   c0000870 <strcat>
c0013615:	59                   	pop    ecx
c0013616:	5f                   	pop    edi
c0013617:	53                   	push   ebx
c0013618:	56                   	push   esi
c0013619:	e8 52 d2 fe ff       	call   c0000870 <strcat>
c001361e:	58                   	pop    eax
c001361f:	5a                   	pop    edx
c0013620:	68 af 1f 02 c0       	push   0xc0021faf
c0013625:	56                   	push   esi
c0013626:	e8 45 d2 fe ff       	call   c0000870 <strcat>
c001362b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013632:	e8 9c 44 ff ff       	call   c0007ad3 <malloc>
c0013637:	83 c4 0c             	add    esp,0xc
c001363a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013640:	56                   	push   esi
c0013641:	50                   	push   eax
c0013642:	89 c3                	mov    ebx,eax
c0013644:	e8 57 81 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0013649:	83 c4 10             	add    esp,0x10
c001364c:	85 db                	test   ebx,ebx
c001364e:	74 7e                	je     c00136ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013650:	51                   	push   ecx
c0013651:	51                   	push   ecx
c0013652:	6a 01                	push   0x1
c0013654:	53                   	push   ebx
c0013655:	e8 02 82 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c001365a:	83 c4 10             	add    esp,0x10
c001365d:	85 c0                	test   eax,eax
c001365f:	74 08                	je     c0013669 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013661:	83 ec 0c             	sub    esp,0xc
c0013664:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013666:	53                   	push   ebx
c0013667:	eb 5f                	jmp    c00136c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013669:	52                   	push   edx
c001366a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001366e:	50                   	push   eax
c001366f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013673:	50                   	push   eax
c0013674:	53                   	push   ebx
c0013675:	e8 e4 84 ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c001367a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001367e:	83 c4 10             	add    esp,0x10
c0013681:	89 c1                	mov    ecx,eax
c0013683:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013687:	74 31                	je     c00136ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013689:	83 ec 0c             	sub    esp,0xc
c001368c:	50                   	push   eax
c001368d:	e8 41 44 ff ff       	call   c0007ad3 <malloc>
c0013692:	89 c6                	mov    esi,eax
c0013694:	58                   	pop    eax
c0013695:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013697:	8d 54 24 20          	lea    edx,[esp+0x20]
c001369b:	52                   	push   edx
c001369c:	56                   	push   esi
c001369d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136a5:	53                   	push   ebx
c00136a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136a9:	83 c4 20             	add    esp,0x20
c00136ac:	85 c0                	test   eax,eax
c00136ae:	75 0a                	jne    c00136ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00136b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136b4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00136b8:	74 18                	je     c00136d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00136ba:	83 ec 0c             	sub    esp,0xc
c00136bd:	53                   	push   ebx
c00136be:	e8 f7 81 ff ff       	call   c000b8ba <File::close()>
c00136c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	31 c0                	xor    eax,eax
c00136d0:	eb 3b                	jmp    c001370d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00136d2:	83 ec 0c             	sub    esp,0xc
c00136d5:	53                   	push   ebx
c00136d6:	e8 df 81 ff ff       	call   c000b8ba <File::close()>
c00136db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136e3:	83 c4 0c             	add    esp,0xc
c00136e6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136ed:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136f4:	56                   	push   esi
c00136f5:	e8 3c fd ff ff       	call   c0013436 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00136fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00136fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013701:	e8 dd 43 ff ff       	call   c0007ae3 <free>
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001370d:	81 c4 20 01 00 00    	add    esp,0x120
c0013713:	5b                   	pop    ebx
c0013714:	5e                   	pop    esi
c0013715:	5f                   	pop    edi
c0013716:	c3                   	ret    

c0013717 <Reg::getLine(char*, char*, char*)>:
c0013717:	57                   	push   edi
c0013718:	56                   	push   esi
c0013719:	53                   	push   ebx
c001371a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001371e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013726:	57                   	push   edi
c0013727:	56                   	push   esi
c0013728:	53                   	push   ebx
c0013729:	68 b4 1f 02 c0       	push   0xc0021fb4
c001372e:	e8 8f fe ff ff       	call   c00135c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013733:	83 c4 10             	add    esp,0x10
c0013736:	84 c0                	test   al,al
c0013738:	75 10                	jne    c001374a <Reg::getLine(char*, char*, char*)+0x33>
c001373a:	57                   	push   edi
c001373b:	56                   	push   esi
c001373c:	53                   	push   ebx
c001373d:	68 d9 1f 02 c0       	push   0xc0021fd9
c0013742:	e8 7b fe ff ff       	call   c00135c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013747:	83 c4 10             	add    esp,0x10
c001374a:	5b                   	pop    ebx
c001374b:	5e                   	pop    esi
c001374c:	5f                   	pop    edi
c001374d:	c3                   	ret    

c001374e <Reg::readInt(char*, char*, int*)>:
c001374e:	55                   	push   ebp
c001374f:	57                   	push   edi
c0013750:	56                   	push   esi
c0013751:	53                   	push   ebx
c0013752:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013758:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001375c:	55                   	push   ebp
c001375d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013764:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001376b:	e8 a7 ff ff ff       	call   c0013717 <Reg::getLine(char*, char*, char*)>
c0013770:	83 c4 10             	add    esp,0x10
c0013773:	84 c0                	test   al,al
c0013775:	0f 84 b6 00 00 00    	je     c0013831 <Reg::readInt(char*, char*, int*)+0xe3>
c001377b:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013780:	83 fa 2b             	cmp    edx,0x2b
c0013783:	74 0c                	je     c0013791 <Reg::readInt(char*, char*, int*)+0x43>
c0013785:	83 fa 2d             	cmp    edx,0x2d
c0013788:	75 0e                	jne    c0013798 <Reg::readInt(char*, char*, int*)+0x4a>
c001378a:	ba 01 00 00 00       	mov    edx,0x1
c001378f:	eb 0b                	jmp    c001379c <Reg::readInt(char*, char*, int*)+0x4e>
c0013791:	ba 01 00 00 00       	mov    edx,0x1
c0013796:	eb 02                	jmp    c001379a <Reg::readInt(char*, char*, int*)+0x4c>
c0013798:	31 d2                	xor    edx,edx
c001379a:	31 c0                	xor    eax,eax
c001379c:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00137a1:	be 0a 00 00 00       	mov    esi,0xa
c00137a6:	75 21                	jne    c00137c9 <Reg::readInt(char*, char*, int*)+0x7b>
c00137a8:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00137ad:	83 f9 78             	cmp    ecx,0x78
c00137b0:	75 0a                	jne    c00137bc <Reg::readInt(char*, char*, int*)+0x6e>
c00137b2:	83 c2 02             	add    edx,0x2
c00137b5:	be 10 00 00 00       	mov    esi,0x10
c00137ba:	eb 0d                	jmp    c00137c9 <Reg::readInt(char*, char*, int*)+0x7b>
c00137bc:	83 f9 62             	cmp    ecx,0x62
c00137bf:	75 08                	jne    c00137c9 <Reg::readInt(char*, char*, int*)+0x7b>
c00137c1:	83 c2 02             	add    edx,0x2
c00137c4:	be 02 00 00 00       	mov    esi,0x2
c00137c9:	01 d5                	add    ebp,edx
c00137cb:	31 d2                	xor    edx,edx
c00137cd:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00137d1:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00137d5:	85 c9                	test   ecx,ecx
c00137d7:	0f 94 c3             	sete   bl
c00137da:	83 f9 0d             	cmp    ecx,0xd
c00137dd:	89 df                	mov    edi,ebx
c00137df:	0f 94 c3             	sete   bl
c00137e2:	09 df                	or     edi,ebx
c00137e4:	89 fb                	mov    ebx,edi
c00137e6:	83 e7 01             	and    edi,0x1
c00137e9:	75 35                	jne    c0013820 <Reg::readInt(char*, char*, int*)+0xd2>
c00137eb:	0f af d6             	imul   edx,esi
c00137ee:	83 fe 10             	cmp    esi,0x10
c00137f1:	75 26                	jne    c0013819 <Reg::readInt(char*, char*, int*)+0xcb>
c00137f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00137f7:	83 ef 41             	sub    edi,0x41
c00137fa:	89 fb                	mov    ebx,edi
c00137fc:	80 fb 05             	cmp    bl,0x5
c00137ff:	77 06                	ja     c0013807 <Reg::readInt(char*, char*, int*)+0xb9>
c0013801:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013805:	eb 16                	jmp    c001381d <Reg::readInt(char*, char*, int*)+0xcf>
c0013807:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001380b:	83 eb 61             	sub    ebx,0x61
c001380e:	80 fb 05             	cmp    bl,0x5
c0013811:	77 06                	ja     c0013819 <Reg::readInt(char*, char*, int*)+0xcb>
c0013813:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013817:	eb 04                	jmp    c001381d <Reg::readInt(char*, char*, int*)+0xcf>
c0013819:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001381d:	45                   	inc    ebp
c001381e:	eb ad                	jmp    c00137cd <Reg::readInt(char*, char*, int*)+0x7f>
c0013820:	84 c0                	test   al,al
c0013822:	74 02                	je     c0013826 <Reg::readInt(char*, char*, int*)+0xd8>
c0013824:	f7 da                	neg    edx
c0013826:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001382d:	89 10                	mov    DWORD PTR [eax],edx
c001382f:	88 d8                	mov    al,bl
c0013831:	81 c4 ec 00 00 00    	add    esp,0xec
c0013837:	5b                   	pop    ebx
c0013838:	5e                   	pop    esi
c0013839:	5f                   	pop    edi
c001383a:	5d                   	pop    ebp
c001383b:	c3                   	ret    

c001383c <Reg::readString(char*, char*, char*, int)>:
c001383c:	57                   	push   edi
c001383d:	56                   	push   esi
c001383e:	53                   	push   ebx
c001383f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013845:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013849:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013850:	57                   	push   edi
c0013851:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013858:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001385f:	e8 b3 fe ff ff       	call   c0013717 <Reg::getLine(char*, char*, char*)>
c0013864:	83 c4 10             	add    esp,0x10
c0013867:	84 c0                	test   al,al
c0013869:	89 c6                	mov    esi,eax
c001386b:	74 44                	je     c00138b1 <Reg::readString(char*, char*, char*, int)+0x75>
c001386d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013874:	31 c0                	xor    eax,eax
c0013876:	4a                   	dec    edx
c0013877:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001387a:	84 c9                	test   cl,cl
c001387c:	74 0f                	je     c001388d <Reg::readString(char*, char*, char*, int)+0x51>
c001387e:	39 c2                	cmp    edx,eax
c0013880:	7e 0b                	jle    c001388d <Reg::readString(char*, char*, char*, int)+0x51>
c0013882:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013885:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001388a:	40                   	inc    eax
c001388b:	eb ea                	jmp    c0013877 <Reg::readString(char*, char*, char*, int)+0x3b>
c001388d:	83 ec 0c             	sub    esp,0xc
c0013890:	53                   	push   ebx
c0013891:	e8 ea cc fe ff       	call   c0000580 <strlen>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001389e:	75 11                	jne    c00138b1 <Reg::readString(char*, char*, char*, int)+0x75>
c00138a0:	83 ec 0c             	sub    esp,0xc
c00138a3:	53                   	push   ebx
c00138a4:	e8 d7 cc fe ff       	call   c0000580 <strlen>
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00138b1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00138b7:	89 f0                	mov    eax,esi
c00138b9:	5b                   	pop    ebx
c00138ba:	5e                   	pop    esi
c00138bb:	5f                   	pop    edi
c00138bc:	c3                   	ret    

c00138bd <Reg::readBool(char*, char*, bool*)>:
c00138bd:	83 ec 20             	sub    esp,0x20
c00138c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138c4:	50                   	push   eax
c00138c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138cd:	e8 7c fe ff ff       	call   c001374e <Reg::readInt(char*, char*, int*)>
c00138d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00138d6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00138db:	0f 95 02             	setne  BYTE PTR [edx]
c00138de:	83 c4 2c             	add    esp,0x2c
c00138e1:	c3                   	ret    

c00138e2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00138e2:	53                   	push   ebx
c00138e3:	83 ec 1c             	sub    esp,0x1c
c00138e6:	8d 44 24 13          	lea    eax,[esp+0x13]
c00138ea:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00138ee:	50                   	push   eax
c00138ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f7:	e8 c1 ff ff ff       	call   c00138bd <Reg::readBool(char*, char*, bool*)>
c00138fc:	83 c4 10             	add    esp,0x10
c00138ff:	84 c0                	test   al,al
c0013901:	74 04                	je     c0013907 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013903:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013907:	83 c4 18             	add    esp,0x18
c001390a:	88 d8                	mov    al,bl
c001390c:	5b                   	pop    ebx
c001390d:	c3                   	ret    

c001390e <Reg::readIntWithDefault(char*, char*, int)>:
c001390e:	53                   	push   ebx
c001390f:	83 ec 1c             	sub    esp,0x1c
c0013912:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013916:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001391a:	50                   	push   eax
c001391b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001391f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013923:	e8 26 fe ff ff       	call   c001374e <Reg::readInt(char*, char*, int*)>
c0013928:	83 c4 10             	add    esp,0x10
c001392b:	84 c0                	test   al,al
c001392d:	74 04                	je     c0013933 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001392f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013933:	83 c4 18             	add    esp,0x18
c0013936:	89 d8                	mov    eax,ebx
c0013938:	5b                   	pop    ebx
c0013939:	c3                   	ret    

c001393a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001393a:	57                   	push   edi
c001393b:	56                   	push   esi
c001393c:	53                   	push   ebx
c001393d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013941:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013945:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013949:	56                   	push   esi
c001394a:	57                   	push   edi
c001394b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013953:	e8 e4 fe ff ff       	call   c001383c <Reg::readString(char*, char*, char*, int)>
c0013958:	83 c4 10             	add    esp,0x10
c001395b:	84 c0                	test   al,al
c001395d:	75 16                	jne    c0013975 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001395f:	50                   	push   eax
c0013960:	56                   	push   esi
c0013961:	6a 00                	push   0x0
c0013963:	57                   	push   edi
c0013964:	e8 87 cb fe ff       	call   c00004f0 <memset>
c0013969:	8d 4e ff             	lea    ecx,[esi-0x1]
c001396c:	89 de                	mov    esi,ebx
c001396e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	89 df                	mov    edi,ebx
c0013975:	5b                   	pop    ebx
c0013976:	89 f8                	mov    eax,edi
c0013978:	5e                   	pop    esi
c0013979:	5f                   	pop    edi
c001397a:	c3                   	ret    

c001397b <SysEject(regs*)>:
c001397b:	83 ec 0c             	sub    esp,0xc
c001397e:	83 ca ff             	or     edx,0xffffffff
c0013981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013985:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013988:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001398d:	83 e9 41             	sub    ecx,0x41
c0013990:	83 f9 19             	cmp    ecx,0x19
c0013993:	77 18                	ja     c00139ad <SysEject(regs*)+0x32>
c0013995:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001399c:	85 c9                	test   ecx,ecx
c001399e:	74 0d                	je     c00139ad <SysEject(regs*)+0x32>
c00139a0:	83 ec 0c             	sub    esp,0xc
c00139a3:	51                   	push   ecx
c00139a4:	e8 87 a0 ff ff       	call   c000da30 <LogicalDisk::eject()>
c00139a9:	83 c4 10             	add    esp,0x10
c00139ac:	99                   	cdq    
c00139ad:	83 c4 0c             	add    esp,0xc
c00139b0:	c3                   	ret    

c00139b1 <SysExit(regs*)>:
c00139b1:	83 ec 18             	sub    esp,0x18
c00139b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139b8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139bb:	e8 10 2b 00 00       	call   c00164d0 <terminateTask(int)>
c00139c0:	83 c8 ff             	or     eax,0xffffffff
c00139c3:	83 c4 1c             	add    esp,0x1c
c00139c6:	89 c2                	mov    edx,eax
c00139c8:	c3                   	ret    

c00139c9 <SysGetCwd(regs*)>:
c00139c9:	83 ec 10             	sub    esp,0x10
c00139cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139d0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00139d3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139db:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00139de:	e8 75 7b ff ff       	call   c000b558 <Fs::getcwd(Process*, char*, int)>
c00139e3:	83 c4 1c             	add    esp,0x1c
c00139e6:	99                   	cdq    
c00139e7:	c3                   	ret    

c00139e8 <SysGetPID(regs*)>:
c00139e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00139f2:	99                   	cdq    
c00139f3:	c3                   	ret    

c00139f4 <SysGetRAMData(regs*)>:
c00139f4:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c00139fe:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013a04:	99                   	cdq    
c0013a05:	f7 f9                	idiv   ecx
c0013a07:	c1 e0 18             	shl    eax,0x18
c0013a0a:	09 c8                	or     eax,ecx
c0013a0c:	99                   	cdq    
c0013a0d:	c3                   	ret    

c0013a0e <SysGetVGAPtr(regs*)>:
c0013a0e:	55                   	push   ebp
c0013a0f:	57                   	push   edi
c0013a10:	56                   	push   esi
c0013a11:	53                   	push   ebx
c0013a12:	83 ec 18             	sub    esp,0x18
c0013a15:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a19:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a1c:	e8 7b 25 00 00       	call   c0015f9c <Thr::processFromPID(int)>
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	89 c1                	mov    ecx,eax
c0013a26:	b8 01 00 00 00       	mov    eax,0x1
c0013a2b:	85 c9                	test   ecx,ecx
c0013a2d:	74 57                	je     c0013a86 <SysGetVGAPtr(regs*)+0x78>
c0013a2f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013a33:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013a39:	74 0c                	je     c0013a47 <SysGetVGAPtr(regs*)+0x39>
c0013a3b:	83 ec 0c             	sub    esp,0xc
c0013a3e:	55                   	push   ebp
c0013a3f:	e8 2b 4d ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0013a44:	83 c4 10             	add    esp,0x10
c0013a47:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013a4a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013a4f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013a52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a54:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013a57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a5a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013a60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a63:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013a66:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013a6c:	50                   	push   eax
c0013a6d:	50                   	push   eax
c0013a6e:	68 f4 1f 02 c0       	push   0xc0021ff4
c0013a73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a76:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a7b:	50                   	push   eax
c0013a7c:	e8 cf cb fe ff       	call   c0000650 <strcpy>
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	31 c0                	xor    eax,eax
c0013a86:	83 c4 0c             	add    esp,0xc
c0013a89:	31 d2                	xor    edx,edx
c0013a8b:	5b                   	pop    ebx
c0013a8c:	5e                   	pop    esi
c0013a8d:	5f                   	pop    edi
c0013a8e:	5d                   	pop    ebp
c0013a8f:	c3                   	ret    

c0013a90 <SysKill(regs*)>:
c0013a90:	53                   	push   ebx
c0013a91:	83 ec 08             	sub    esp,0x8
c0013a94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a98:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a9c:	75 16                	jne    c0013ab4 <SysKill(regs*)+0x24>
c0013a9e:	83 ec 0c             	sub    esp,0xc
c0013aa1:	68 fe 1f 02 c0       	push   0xc0021ffe
c0013aa6:	e8 a2 d7 ff ff       	call   c001124d <KePanic(char const*)>
c0013aab:	83 c4 10             	add    esp,0x10
c0013aae:	e9 89 00 00 00       	jmp    c0013b3c <SysKill(regs*)+0xac>
c0013ab3:	90                   	nop
c0013ab4:	83 ec 0c             	sub    esp,0xc
c0013ab7:	68 e4 96 02 c0       	push   0xc00296e4
c0013abc:	e8 3b bd 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ac4:	83 c4 10             	add    esp,0x10
c0013ac7:	85 c0                	test   eax,eax
c0013ac9:	74 19                	je     c0013ae4 <SysKill(regs*)+0x54>
c0013acb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ace:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ad1:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ad3:	74 33                	je     c0013b08 <SysKill(regs*)+0x78>
c0013ad5:	52                   	push   edx
c0013ad6:	52                   	push   edx
c0013ad7:	50                   	push   eax
c0013ad8:	68 e4 96 02 c0       	push   0xc00296e4
c0013add:	e8 3a c0 00 00       	call   c001fb1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ae2:	eb e0                	jmp    c0013ac4 <SysKill(regs*)+0x34>
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	68 d8 96 02 c0       	push   0xc00296d8
c0013aec:	e8 0b bd 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013af1:	8d 76 00             	lea    esi,[esi+0x0]
c0013af4:	83 c4 10             	add    esp,0x10
c0013af7:	85 c0                	test   eax,eax
c0013af9:	74 41                	je     c0013b3c <SysKill(regs*)+0xac>
c0013afb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013afe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b01:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b03:	75 27                	jne    c0013b2c <SysKill(regs*)+0x9c>
c0013b05:	8d 76 00             	lea    esi,[esi+0x0]
c0013b08:	51                   	push   ecx
c0013b09:	51                   	push   ecx
c0013b0a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013b0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b15:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b1b:	e8 cb db ff ff       	call   c00116eb <KeRaiseSignal(SigHandlerBlock*, int)>
c0013b20:	83 c4 10             	add    esp,0x10
c0013b23:	31 c0                	xor    eax,eax
c0013b25:	31 d2                	xor    edx,edx
c0013b27:	eb 1b                	jmp    c0013b44 <SysKill(regs*)+0xb4>
c0013b29:	8d 76 00             	lea    esi,[esi+0x0]
c0013b2c:	52                   	push   edx
c0013b2d:	52                   	push   edx
c0013b2e:	50                   	push   eax
c0013b2f:	68 d8 96 02 c0       	push   0xc00296d8
c0013b34:	e8 e3 bf 00 00       	call   c001fb1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b39:	eb b9                	jmp    c0013af4 <SysKill(regs*)+0x64>
c0013b3b:	90                   	nop
c0013b3c:	83 c8 ff             	or     eax,0xffffffff
c0013b3f:	89 c2                	mov    edx,eax
c0013b41:	8d 76 00             	lea    esi,[esi+0x0]
c0013b44:	83 c4 08             	add    esp,0x8
c0013b47:	5b                   	pop    ebx
c0013b48:	c3                   	ret    

c0013b49 <SysLoadDLL(regs*)>:
c0013b49:	56                   	push   esi
c0013b4a:	31 d2                	xor    edx,edx
c0013b4c:	53                   	push   ebx
c0013b4d:	b8 01 00 00 00       	mov    eax,0x1
c0013b52:	51                   	push   ecx
c0013b53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b57:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013b5b:	0f 84 8c 00 00 00    	je     c0013bed <SysLoadDLL(regs*)+0xa4>
c0013b61:	83 ec 0c             	sub    esp,0xc
c0013b64:	68 14 01 00 00       	push   0x114
c0013b69:	e8 65 3f ff ff       	call   c0007ad3 <malloc>
c0013b6e:	83 c4 0c             	add    esp,0xc
c0013b71:	89 c3                	mov    ebx,eax
c0013b73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b78:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b7b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b7e:	53                   	push   ebx
c0013b7f:	e8 1c 7c ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	31 d2                	xor    edx,edx
c0013b89:	85 db                	test   ebx,ebx
c0013b8b:	b8 02 00 00 00       	mov    eax,0x2
c0013b90:	74 5b                	je     c0013bed <SysLoadDLL(regs*)+0xa4>
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	53                   	push   ebx
c0013b96:	e8 85 7f ff ff       	call   c000bb20 <File::exists()>
c0013b9b:	83 c4 10             	add    esp,0x10
c0013b9e:	84 c0                	test   al,al
c0013ba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba2:	75 11                	jne    c0013bb5 <SysLoadDLL(regs*)+0x6c>
c0013ba4:	83 ec 0c             	sub    esp,0xc
c0013ba7:	53                   	push   ebx
c0013ba8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bab:	83 c4 10             	add    esp,0x10
c0013bae:	b8 03 00 00 00       	mov    eax,0x3
c0013bb3:	eb 36                	jmp    c0013beb <SysLoadDLL(regs*)+0xa2>
c0013bb5:	83 ec 0c             	sub    esp,0xc
c0013bb8:	53                   	push   ebx
c0013bb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bbc:	58                   	pop    eax
c0013bbd:	5a                   	pop    edx
c0013bbe:	6a 00                	push   0x0
c0013bc0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013bc3:	e8 1c 15 00 00       	call   c00150e4 <Thr::loadDLL(char const*, bool)>
c0013bc8:	83 c4 10             	add    esp,0x10
c0013bcb:	31 d2                	xor    edx,edx
c0013bcd:	89 c1                	mov    ecx,eax
c0013bcf:	b8 04 00 00 00       	mov    eax,0x4
c0013bd4:	85 c9                	test   ecx,ecx
c0013bd6:	74 15                	je     c0013bed <SysLoadDLL(regs*)+0xa4>
c0013bd8:	53                   	push   ebx
c0013bd9:	53                   	push   ebx
c0013bda:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013be0:	51                   	push   ecx
c0013be1:	e8 3e 17 00 00       	call   c0015324 <Thr::executeDLL(unsigned long, void*)>
c0013be6:	83 c4 10             	add    esp,0x10
c0013be9:	31 c0                	xor    eax,eax
c0013beb:	31 d2                	xor    edx,edx
c0013bed:	59                   	pop    ecx
c0013bee:	5b                   	pop    ebx
c0013bef:	5e                   	pop    esi
c0013bf0:	c3                   	ret    

c0013bf1 <SysRead(regs*)>:
c0013bf1:	57                   	push   edi
c0013bf2:	56                   	push   esi
c0013bf3:	53                   	push   ebx
c0013bf4:	83 ec 10             	sub    esp,0x10
c0013bf7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013bfb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013bfe:	83 f8 02             	cmp    eax,0x2
c0013c01:	77 10                	ja     c0013c13 <SysRead(regs*)+0x22>
c0013c03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c08:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c0b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c11:	eb 0e                	jmp    c0013c21 <SysRead(regs*)+0x30>
c0013c13:	83 ec 0c             	sub    esp,0xc
c0013c16:	50                   	push   eax
c0013c17:	e8 7f 58 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0013c1c:	83 c4 10             	add    esp,0x10
c0013c1f:	89 c1                	mov    ecx,eax
c0013c21:	83 c8 ff             	or     eax,0xffffffff
c0013c24:	85 c9                	test   ecx,ecx
c0013c26:	89 c2                	mov    edx,eax
c0013c28:	74 28                	je     c0013c52 <SysRead(regs*)+0x61>
c0013c2a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	31 ff                	xor    edi,edi
c0013c37:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c3d:	52                   	push   edx
c0013c3e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c41:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013c44:	57                   	push   edi
c0013c45:	56                   	push   esi
c0013c46:	51                   	push   ecx
c0013c47:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c4a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013c4e:	83 c4 20             	add    esp,0x20
c0013c51:	99                   	cdq    
c0013c52:	83 c4 10             	add    esp,0x10
c0013c55:	5b                   	pop    ebx
c0013c56:	5e                   	pop    esi
c0013c57:	5f                   	pop    edi
c0013c58:	c3                   	ret    

c0013c59 <SysRegisterSignal(regs*)>:
c0013c59:	83 ec 18             	sub    esp,0x18
c0013c5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c60:	6a 00                	push   0x0
c0013c62:	6a 00                	push   0x0
c0013c64:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013c67:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c72:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c78:	e8 38 da ff ff       	call   c00116b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c7d:	83 c4 2c             	add    esp,0x2c
c0013c80:	99                   	cdq    
c0013c81:	c3                   	ret    

c0013c82 <SysRegistryGetTypeFromPath(regs*)>:
c0013c82:	57                   	push   edi
c0013c83:	56                   	push   esi
c0013c84:	53                   	push   ebx
c0013c85:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c8b:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c92:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c95:	68 1f 20 02 c0       	push   0xc002201f
c0013c9a:	e8 6b 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013c9f:	5a                   	pop    edx
c0013ca0:	59                   	pop    ecx
c0013ca1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ca4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ca7:	e8 34 f6 ff ff       	call   c00132e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cac:	5f                   	pop    edi
c0013cad:	5a                   	pop    edx
c0013cae:	89 c6                	mov    esi,eax
c0013cb0:	50                   	push   eax
c0013cb1:	68 3f 20 02 c0       	push   0xc002203f
c0013cb6:	e8 4f 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013cbb:	83 c4 10             	add    esp,0x10
c0013cbe:	85 f6                	test   esi,esi
c0013cc0:	74 28                	je     c0013cea <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013cc2:	50                   	push   eax
c0013cc3:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013cc7:	57                   	push   edi
c0013cc8:	56                   	push   esi
c0013cc9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ccc:	e8 f4 f1 ff ff       	call   c0012ec5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013cd1:	83 c4 0c             	add    esp,0xc
c0013cd4:	57                   	push   edi
c0013cd5:	50                   	push   eax
c0013cd6:	89 c3                	mov    ebx,eax
c0013cd8:	68 47 20 02 c0       	push   0xc0022047
c0013cdd:	e8 28 6c ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013ce2:	89 d8                	mov    eax,ebx
c0013ce4:	83 c4 10             	add    esp,0x10
c0013ce7:	99                   	cdq    
c0013ce8:	eb 05                	jmp    c0013cef <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013cea:	83 c8 ff             	or     eax,0xffffffff
c0013ced:	89 c2                	mov    edx,eax
c0013cef:	81 c4 30 01 00 00    	add    esp,0x130
c0013cf5:	5b                   	pop    ebx
c0013cf6:	5e                   	pop    esi
c0013cf7:	5f                   	pop    edi
c0013cf8:	c3                   	ret    

c0013cf9 <SysRegistryReadExtent(regs*)>:
c0013cf9:	83 ec 1c             	sub    esp,0x1c
c0013cfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d00:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013d03:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013d06:	85 c0                	test   eax,eax
c0013d08:	79 1f                	jns    c0013d29 <SysRegistryReadExtent(regs*)+0x30>
c0013d0a:	52                   	push   edx
c0013d0b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d14:	52                   	push   edx
c0013d15:	50                   	push   eax
c0013d16:	51                   	push   ecx
c0013d17:	e8 9b f0 ff ff       	call   c0012db7 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013d1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d24:	83 c4 10             	add    esp,0x10
c0013d27:	eb 14                	jmp    c0013d3d <SysRegistryReadExtent(regs*)+0x44>
c0013d29:	83 ec 04             	sub    esp,0x4
c0013d2c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013d2f:	50                   	push   eax
c0013d30:	51                   	push   ecx
c0013d31:	e8 1f eb ff ff       	call   c0012855 <CmGetString(Reghive_Tag*, int, char*)>
c0013d36:	83 c4 10             	add    esp,0x10
c0013d39:	31 c0                	xor    eax,eax
c0013d3b:	31 d2                	xor    edx,edx
c0013d3d:	83 c4 1c             	add    esp,0x1c
c0013d40:	c3                   	ret    

c0013d41 <SysRegistryPathToExtentLookup(regs*)>:
c0013d41:	53                   	push   ebx
c0013d42:	83 ec 10             	sub    esp,0x10
c0013d45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d49:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d4c:	68 5d 20 02 c0       	push   0xc002205d
c0013d51:	e8 b4 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d56:	58                   	pop    eax
c0013d57:	5a                   	pop    edx
c0013d58:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d5b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d5e:	e8 7d f5 ff ff       	call   c00132e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d63:	83 c4 18             	add    esp,0x18
c0013d66:	5b                   	pop    ebx
c0013d67:	99                   	cdq    
c0013d68:	c3                   	ret    

c0013d69 <SysRegistryEnterDirectory(regs*)>:
c0013d69:	53                   	push   ebx
c0013d6a:	83 ec 10             	sub    esp,0x10
c0013d6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d74:	68 80 20 02 c0       	push   0xc0022080
c0013d79:	e8 8c 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013d7e:	58                   	pop    eax
c0013d7f:	5a                   	pop    edx
c0013d80:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d83:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d86:	e8 41 eb ff ff       	call   c00128cc <CmEnterDirectory(Reghive_Tag*, int)>
c0013d8b:	83 c4 18             	add    esp,0x18
c0013d8e:	5b                   	pop    ebx
c0013d8f:	99                   	cdq    
c0013d90:	c3                   	ret    

c0013d91 <SysRegistryGetNext(regs*)>:
c0013d91:	53                   	push   ebx
c0013d92:	83 ec 10             	sub    esp,0x10
c0013d95:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d99:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d9c:	68 9e 20 02 c0       	push   0xc002209e
c0013da1:	e8 64 6b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013da6:	58                   	pop    eax
c0013da7:	5a                   	pop    edx
c0013da8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013dab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dae:	e8 58 eb ff ff       	call   c001290b <CmGetNext(Reghive_Tag*, int)>
c0013db3:	83 c4 18             	add    esp,0x18
c0013db6:	5b                   	pop    ebx
c0013db7:	99                   	cdq    
c0013db8:	c3                   	ret    

c0013db9 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013db9:	57                   	push   edi
c0013dba:	56                   	push   esi
c0013dbb:	53                   	push   ebx
c0013dbc:	81 ec 34 01 00 00    	sub    esp,0x134
c0013dc2:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013dc9:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013dcd:	57                   	push   edi
c0013dce:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013dd1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013dd4:	e8 ec f0 ff ff       	call   c0012ec5 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013dd9:	89 c3                	mov    ebx,eax
c0013ddb:	58                   	pop    eax
c0013ddc:	5a                   	pop    edx
c0013ddd:	57                   	push   edi
c0013dde:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013de1:	e8 6a c8 fe ff       	call   c0000650 <strcpy>
c0013de6:	81 c4 40 01 00 00    	add    esp,0x140
c0013dec:	89 d8                	mov    eax,ebx
c0013dee:	5b                   	pop    ebx
c0013def:	99                   	cdq    
c0013df0:	5e                   	pop    esi
c0013df1:	5f                   	pop    edi
c0013df2:	c3                   	ret    

c0013df3 <SysRegistryOpen(regs*)>:
c0013df3:	83 ec 18             	sub    esp,0x18
c0013df6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dfa:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013dfd:	e8 e3 e8 ff ff       	call   c00126e5 <CmOpen(char const*)>
c0013e02:	83 c4 1c             	add    esp,0x1c
c0013e05:	99                   	cdq    
c0013e06:	c3                   	ret    

c0013e07 <SysRegistryClose(regs*)>:
c0013e07:	83 ec 18             	sub    esp,0x18
c0013e0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e0e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e11:	e8 ed e9 ff ff       	call   c0012803 <CmClose(Reghive_Tag*)>
c0013e16:	31 c0                	xor    eax,eax
c0013e18:	31 d2                	xor    edx,edx
c0013e1a:	83 c4 1c             	add    esp,0x1c
c0013e1d:	c3                   	ret    

c0013e1e <SysSbrk(regs*)>:
c0013e1e:	56                   	push   esi
c0013e1f:	53                   	push   ebx
c0013e20:	50                   	push   eax
c0013e21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e2a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e2d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013e30:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013e36:	85 db                	test   ebx,ebx
c0013e38:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013e3b:	74 02                	je     c0013e3f <SysSbrk(regs*)+0x21>
c0013e3d:	79 06                	jns    c0013e45 <SysSbrk(regs*)+0x27>
c0013e3f:	89 f0                	mov    eax,esi
c0013e41:	31 d2                	xor    edx,edx
c0013e43:	eb 2a                	jmp    c0013e6f <SysSbrk(regs*)+0x51>
c0013e45:	83 c8 ff             	or     eax,0xffffffff
c0013e48:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013e4e:	89 c2                	mov    edx,eax
c0013e50:	77 1d                	ja     c0013e6f <SysSbrk(regs*)+0x51>
c0013e52:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013e58:	50                   	push   eax
c0013e59:	68 07 0c 00 00       	push   0xc07
c0013e5e:	c1 ea 0c             	shr    edx,0xc
c0013e61:	52                   	push   edx
c0013e62:	51                   	push   ecx
c0013e63:	e8 9e 5f ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c0013e68:	89 f0                	mov    eax,esi
c0013e6a:	31 d2                	xor    edx,edx
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	59                   	pop    ecx
c0013e70:	5b                   	pop    ebx
c0013e71:	5e                   	pop    esi
c0013e72:	c3                   	ret    

c0013e73 <SysSetCwd(regs*)>:
c0013e73:	83 ec 14             	sub    esp,0x14
c0013e76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e7a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e82:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e85:	e8 35 7d ff ff       	call   c000bbbf <Fs::setcwd(Process*, char*)>
c0013e8a:	83 c4 1c             	add    esp,0x1c
c0013e8d:	99                   	cdq    
c0013e8e:	c3                   	ret    

c0013e8f <SysSetTime(regs*)>:
c0013e8f:	55                   	push   ebp
c0013e90:	31 c9                	xor    ecx,ecx
c0013e92:	57                   	push   edi
c0013e93:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e98:	56                   	push   esi
c0013e99:	53                   	push   ebx
c0013e9a:	31 db                	xor    ebx,ebx
c0013e9c:	83 ec 10             	sub    esp,0x10
c0013e9f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ea3:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013ea6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013ea9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013eac:	89 c2                	mov    edx,eax
c0013eae:	c1 e8 05             	shr    eax,0x5
c0013eb1:	83 e2 1f             	and    edx,0x1f
c0013eb4:	42                   	inc    edx
c0013eb5:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013ebb:	c1 e7 10             	shl    edi,0x10
c0013ebe:	88 d1                	mov    cl,dl
c0013ec0:	31 d2                	xor    edx,edx
c0013ec2:	f7 f5                	div    ebp
c0013ec4:	89 dd                	mov    ebp,ebx
c0013ec6:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013ecc:	88 d5                	mov    ch,dl
c0013ece:	31 d2                	xor    edx,edx
c0013ed0:	0f b7 c1             	movzx  eax,cx
c0013ed3:	09 f8                	or     eax,edi
c0013ed5:	bf 3c 00 00 00       	mov    edi,0x3c
c0013eda:	89 c1                	mov    ecx,eax
c0013edc:	89 f0                	mov    eax,esi
c0013ede:	f7 f7                	div    edi
c0013ee0:	c1 e2 10             	shl    edx,0x10
c0013ee3:	09 d5                	or     ebp,edx
c0013ee5:	31 d2                	xor    edx,edx
c0013ee7:	f7 f7                	div    edi
c0013ee9:	89 eb                	mov    ebx,ebp
c0013eeb:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ef0:	89 f0                	mov    eax,esi
c0013ef2:	88 d7                	mov    bh,dl
c0013ef4:	31 d2                	xor    edx,edx
c0013ef6:	f7 f7                	div    edi
c0013ef8:	bf 18 00 00 00       	mov    edi,0x18
c0013efd:	31 d2                	xor    edx,edx
c0013eff:	f7 f7                	div    edi
c0013f01:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013f06:	88 d3                	mov    bl,dl
c0013f08:	53                   	push   ebx
c0013f09:	51                   	push   ecx
c0013f0a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013f10:	e8 af 84 ff ff       	call   c000c3c4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013f15:	83 c4 1c             	add    esp,0x1c
c0013f18:	31 d2                	xor    edx,edx
c0013f1a:	5b                   	pop    ebx
c0013f1b:	5e                   	pop    esi
c0013f1c:	83 f0 01             	xor    eax,0x1
c0013f1f:	5f                   	pop    edi
c0013f20:	0f b6 c0             	movzx  eax,al
c0013f23:	5d                   	pop    ebp
c0013f24:	c3                   	ret    

c0013f25 <SysTimezone(regs*)>:
c0013f25:	53                   	push   ebx
c0013f26:	83 ec 08             	sub    esp,0x8
c0013f29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f2d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013f31:	75 17                	jne    c0013f4a <SysTimezone(regs*)+0x25>
c0013f33:	83 ec 0c             	sub    esp,0xc
c0013f36:	68 b5 20 02 c0       	push   0xc00220b5
c0013f3b:	e8 ca 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013f40:	83 c8 ff             	or     eax,0xffffffff
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	89 c2                	mov    edx,eax
c0013f48:	eb 20                	jmp    c0013f6a <SysTimezone(regs*)+0x45>
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	68 ca 20 02 c0       	push   0xc00220ca
c0013f52:	e8 b3 69 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0013f57:	58                   	pop    eax
c0013f58:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f5b:	e8 c8 81 ff ff       	call   c000c128 <User::loadClockSettings(int)>
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	b8 01 00 00 00       	mov    eax,0x1
c0013f68:	31 d2                	xor    edx,edx
c0013f6a:	83 c4 08             	add    esp,0x8
c0013f6d:	5b                   	pop    ebx
c0013f6e:	c3                   	ret    

c0013f6f <SysTruncate(regs*)>:
c0013f6f:	55                   	push   ebp
c0013f70:	57                   	push   edi
c0013f71:	31 ff                	xor    edi,edi
c0013f73:	56                   	push   esi
c0013f74:	53                   	push   ebx
c0013f75:	83 ec 0c             	sub    esp,0xc
c0013f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f7f:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f83:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f86:	89 ce                	mov    esi,ecx
c0013f88:	0f 84 9a 00 00 00    	je     c0014028 <SysTruncate(regs*)+0xb9>
c0013f8e:	83 ec 0c             	sub    esp,0xc
c0013f91:	68 14 01 00 00       	push   0x114
c0013f96:	e8 38 3b ff ff       	call   c0007ad3 <malloc>
c0013f9b:	83 c4 0c             	add    esp,0xc
c0013f9e:	89 c3                	mov    ebx,eax
c0013fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fa5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fa8:	55                   	push   ebp
c0013fa9:	53                   	push   ebx
c0013faa:	e8 f1 77 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0013faf:	83 c4 10             	add    esp,0x10
c0013fb2:	31 d2                	xor    edx,edx
c0013fb4:	85 db                	test   ebx,ebx
c0013fb6:	b8 03 00 00 00       	mov    eax,0x3
c0013fbb:	0f 84 a2 00 00 00    	je     c0014063 <SysTruncate(regs*)+0xf4>
c0013fc1:	51                   	push   ecx
c0013fc2:	51                   	push   ecx
c0013fc3:	6a 02                	push   0x2
c0013fc5:	53                   	push   ebx
c0013fc6:	e8 91 78 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0013fcb:	83 c4 10             	add    esp,0x10
c0013fce:	85 c0                	test   eax,eax
c0013fd0:	74 13                	je     c0013fe5 <SysTruncate(regs*)+0x76>
c0013fd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fd4:	83 ec 0c             	sub    esp,0xc
c0013fd7:	53                   	push   ebx
c0013fd8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fdb:	83 c4 10             	add    esp,0x10
c0013fde:	b8 04 00 00 00       	mov    eax,0x4
c0013fe3:	eb 7c                	jmp    c0014061 <SysTruncate(regs*)+0xf2>
c0013fe5:	52                   	push   edx
c0013fe6:	57                   	push   edi
c0013fe7:	56                   	push   esi
c0013fe8:	53                   	push   ebx
c0013fe9:	e8 82 79 ff ff       	call   c000b970 <File::truncate(unsigned long long)>
c0013fee:	83 c4 10             	add    esp,0x10
c0013ff1:	85 c0                	test   eax,eax
c0013ff3:	74 1b                	je     c0014010 <SysTruncate(regs*)+0xa1>
c0013ff5:	83 ec 0c             	sub    esp,0xc
c0013ff8:	53                   	push   ebx
c0013ff9:	e8 bc 78 ff ff       	call   c000b8ba <File::close()>
c0013ffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014000:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014003:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014006:	83 c4 10             	add    esp,0x10
c0014009:	b8 05 00 00 00       	mov    eax,0x5
c001400e:	eb 51                	jmp    c0014061 <SysTruncate(regs*)+0xf2>
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	53                   	push   ebx
c0014014:	e8 a1 78 ff ff       	call   c000b8ba <File::close()>
c0014019:	8b 03                	mov    eax,DWORD PTR [ebx]
c001401b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001401e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014021:	83 c4 10             	add    esp,0x10
c0014024:	31 c0                	xor    eax,eax
c0014026:	eb 39                	jmp    c0014061 <SysTruncate(regs*)+0xf2>
c0014028:	31 d2                	xor    edx,edx
c001402a:	83 fd 02             	cmp    ebp,0x2
c001402d:	b8 01 00 00 00       	mov    eax,0x1
c0014032:	7e 2f                	jle    c0014063 <SysTruncate(regs*)+0xf4>
c0014034:	83 ec 0c             	sub    esp,0xc
c0014037:	51                   	push   ecx
c0014038:	e8 5e 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c001403d:	83 c4 10             	add    esp,0x10
c0014040:	31 d2                	xor    edx,edx
c0014042:	89 c1                	mov    ecx,eax
c0014044:	b8 02 00 00 00       	mov    eax,0x2
c0014049:	85 c9                	test   ecx,ecx
c001404b:	74 16                	je     c0014063 <SysTruncate(regs*)+0xf4>
c001404d:	50                   	push   eax
c001404e:	57                   	push   edi
c001404f:	56                   	push   esi
c0014050:	51                   	push   ecx
c0014051:	e8 1a 79 ff ff       	call   c000b970 <File::truncate(unsigned long long)>
c0014056:	83 c4 10             	add    esp,0x10
c0014059:	85 c0                	test   eax,eax
c001405b:	0f 95 c0             	setne  al
c001405e:	0f b6 c0             	movzx  eax,al
c0014061:	31 d2                	xor    edx,edx
c0014063:	83 c4 0c             	add    esp,0xc
c0014066:	5b                   	pop    ebx
c0014067:	5e                   	pop    esi
c0014068:	5f                   	pop    edi
c0014069:	5d                   	pop    ebp
c001406a:	c3                   	ret    

c001406b <SysWrite(regs*)>:
c001406b:	57                   	push   edi
c001406c:	56                   	push   esi
c001406d:	53                   	push   ebx
c001406e:	83 ec 10             	sub    esp,0x10
c0014071:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014075:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014078:	83 f8 02             	cmp    eax,0x2
c001407b:	77 10                	ja     c001408d <SysWrite(regs*)+0x22>
c001407d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014082:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014085:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001408b:	eb 0e                	jmp    c001409b <SysWrite(regs*)+0x30>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	50                   	push   eax
c0014091:	e8 05 54 ff ff       	call   c000949b <KeGetFileFromDescriptor(int)>
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	89 c1                	mov    ecx,eax
c001409b:	83 c8 ff             	or     eax,0xffffffff
c001409e:	85 c9                	test   ecx,ecx
c00140a0:	89 c2                	mov    edx,eax
c00140a2:	74 28                	je     c00140cc <SysWrite(regs*)+0x61>
c00140a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140ac:	83 ec 0c             	sub    esp,0xc
c00140af:	31 ff                	xor    edi,edi
c00140b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140b7:	52                   	push   edx
c00140b8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140bb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140be:	57                   	push   edi
c00140bf:	56                   	push   esi
c00140c0:	51                   	push   ecx
c00140c1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00140c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140c8:	83 c4 20             	add    esp,0x20
c00140cb:	99                   	cdq    
c00140cc:	83 c4 10             	add    esp,0x10
c00140cf:	5b                   	pop    ebx
c00140d0:	5e                   	pop    esi
c00140d1:	5f                   	pop    edi
c00140d2:	c3                   	ret    

c00140d3 <SysWsbe(regs*)>:
c00140d3:	57                   	push   edi
c00140d4:	b9 0b 00 00 00       	mov    ecx,0xb
c00140d9:	56                   	push   esi
c00140da:	be 09 21 02 c0       	mov    esi,0xc0022109
c00140df:	53                   	push   ebx
c00140e0:	83 ec 30             	sub    esp,0x30
c00140e3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00140e7:	fc                   	cld    
c00140e8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140ea:	83 ec 0c             	sub    esp,0xc
c00140ed:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00140f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140f9:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00140ff:	8b 06                	mov    eax,DWORD PTR [esi]
c0014101:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014104:	57                   	push   edi
c0014105:	e8 76 c4 fe ff       	call   c0000580 <strlen>
c001410a:	5a                   	pop    edx
c001410b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001410f:	52                   	push   edx
c0014110:	31 d2                	xor    edx,edx
c0014112:	57                   	push   edi
c0014113:	52                   	push   edx
c0014114:	50                   	push   eax
c0014115:	56                   	push   esi
c0014116:	ff d3                	call   ebx
c0014118:	83 c4 14             	add    esp,0x14
c001411b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001411f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014122:	e8 a9 23 00 00       	call   c00164d0 <terminateTask(int)>
c0014127:	83 c4 40             	add    esp,0x40
c001412a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001412f:	5b                   	pop    ebx
c0014130:	31 d2                	xor    edx,edx
c0014132:	5e                   	pop    esi
c0014133:	5f                   	pop    edi
c0014134:	c3                   	ret    

c0014135 <SysYield(regs*)>:
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	fa                   	cli    
c0014139:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001413f:	e8 0c 1a 00 00       	call   c0015b50 <schedule()>
c0014144:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014149:	48                   	dec    eax
c001414a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001414f:	75 01                	jne    c0014152 <SysYield(regs*)+0x1d>
c0014151:	fb                   	sti    
c0014152:	31 c0                	xor    eax,eax
c0014154:	31 d2                	xor    edx,edx
c0014156:	83 c4 0c             	add    esp,0xc
c0014159:	c3                   	ret    

c001415a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001415a:	55                   	push   ebp
c001415b:	57                   	push   edi
c001415c:	56                   	push   esi
c001415d:	53                   	push   ebx
c001415e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014164:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001416f:	74 3b                	je     c00141ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014171:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014179:	74 31                	je     c00141ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001417b:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014183:	75 27                	jne    c00141ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0014185:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001418c:	05 00 10 00 00       	add    eax,0x1000
c0014191:	89 c2                	mov    edx,eax
c0014193:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014198:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001419f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00141a5:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00141ac:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00141b3:	83 ec 0c             	sub    esp,0xc
c00141b6:	6a 01                	push   0x1
c00141b8:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00141be:	e8 32 54 ff ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c00141c3:	83 c4 10             	add    esp,0x10
c00141c6:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00141cc:	89 c3                	mov    ebx,eax
c00141ce:	0f 86 26 01 00 00    	jbe    c00142fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00141d4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00141dc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00141e3:	c1 ee 0c             	shr    esi,0xc
c00141e6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00141ea:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00141f1:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00141f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141fc:	29 ef                	sub    edi,ebp
c00141fe:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0014202:	0f 83 f9 00 00 00    	jae    c0014301 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014208:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001420e:	b8 00 10 00 00       	mov    eax,0x1000
c0014213:	0f 47 f8             	cmova  edi,eax
c0014216:	83 ec 0c             	sub    esp,0xc
c0014219:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014220:	31 d2                	xor    edx,edx
c0014222:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014224:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014228:	50                   	push   eax
c0014229:	8d 74 24 30          	lea    esi,[esp+0x30]
c001422d:	56                   	push   esi
c001422e:	52                   	push   edx
c001422f:	57                   	push   edi
c0014230:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014237:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001423a:	83 c4 20             	add    esp,0x20
c001423d:	85 c0                	test   eax,eax
c001423f:	75 06                	jne    c0014247 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0014241:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014245:	74 13                	je     c001425a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	53                   	push   ebx
c001424b:	e8 b9 56 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c0014250:	83 c4 10             	add    esp,0x10
c0014253:	31 c0                	xor    eax,eax
c0014255:	e9 7c 01 00 00       	jmp    c00143d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c001425a:	fa                   	cli    
c001425b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014261:	e8 7c 3b ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014266:	6a 07                	push   0x7
c0014268:	53                   	push   ebx
c0014269:	50                   	push   eax
c001426a:	89 c7                	mov    edi,eax
c001426c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014271:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014274:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001427a:	e8 7f 5a ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001427f:	83 c4 0c             	add    esp,0xc
c0014282:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014289:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001428f:	6a 00                	push   0x0
c0014291:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014296:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014299:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001429f:	e8 c0 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c00142a4:	58                   	pop    eax
c00142a5:	5a                   	pop    edx
c00142a6:	68 07 0c 00 00       	push   0xc07
c00142ab:	55                   	push   ebp
c00142ac:	57                   	push   edi
c00142ad:	89 df                	mov    edi,ebx
c00142af:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00142b6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142bc:	6a 00                	push   0x0
c00142be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142c6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142cc:	e8 91 5c ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142d1:	b9 00 10 00 00       	mov    ecx,0x1000
c00142d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142d8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00142dd:	83 c4 20             	add    esp,0x20
c00142e0:	48                   	dec    eax
c00142e1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00142e6:	85 c0                	test   eax,eax
c00142e8:	75 01                	jne    c00142eb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c00142ea:	fb                   	sti    
c00142eb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00142ef:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142f5:	e9 f0 fe ff ff       	jmp    c00141ea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c00142fa:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014301:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014308:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001430e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014314:	0f 86 ae 00 00 00    	jbe    c00143c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c001431a:	fa                   	cli    
c001431b:	51                   	push   ecx
c001431c:	31 ff                	xor    edi,edi
c001431e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014325:	c1 ee 0c             	shr    esi,0xc
c0014328:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001432e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014334:	6a 00                	push   0x0
c0014336:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001433b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001433e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014344:	e8 1b 58 ff ff       	call   c0009b64 <VAS::mapOtherVASIn(bool, VAS*)>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	e8 91 3a ff ff       	call   c0007de2 <Phys::allocatePage()>
c0014351:	47                   	inc    edi
c0014352:	6a 07                	push   0x7
c0014354:	53                   	push   ebx
c0014355:	50                   	push   eax
c0014356:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001435a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014360:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014363:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014369:	e8 90 59 ff ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001436e:	58                   	pop    eax
c001436f:	5a                   	pop    edx
c0014370:	68 07 0c 00 00       	push   0xc07
c0014375:	55                   	push   ebp
c0014376:	81 c5 00 10 00 00    	add    ebp,0x1000
c001437c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014380:	50                   	push   eax
c0014381:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014388:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001438e:	6a 00                	push   0x0
c0014390:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014395:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014398:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001439e:	e8 bf 5b ff ff       	call   c0009f62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00143a3:	83 c4 1c             	add    esp,0x1c
c00143a6:	68 00 10 00 00       	push   0x1000
c00143ab:	6a 00                	push   0x0
c00143ad:	53                   	push   ebx
c00143ae:	e8 3d c1 fe ff       	call   c00004f0 <memset>
c00143b3:	83 c4 10             	add    esp,0x10
c00143b6:	39 fe                	cmp    esi,edi
c00143b8:	77 92                	ja     c001434c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00143ba:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143bf:	48                   	dec    eax
c00143c0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00143c5:	75 01                	jne    c00143c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00143c7:	fb                   	sti    
c00143c8:	83 ec 0c             	sub    esp,0xc
c00143cb:	53                   	push   ebx
c00143cc:	e8 38 55 ff ff       	call   c0009909 <Virt::freeKernelVirtualPages(unsigned long)>
c00143d1:	83 c4 10             	add    esp,0x10
c00143d4:	b0 01                	mov    al,0x1
c00143d6:	81 c4 2c 10 00 00    	add    esp,0x102c
c00143dc:	5b                   	pop    ebx
c00143dd:	5e                   	pop    esi
c00143de:	5f                   	pop    edi
c00143df:	5d                   	pop    ebp
c00143e0:	c3                   	ret    

c00143e1 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00143e1:	55                   	push   ebp
c00143e2:	57                   	push   edi
c00143e3:	56                   	push   esi
c00143e4:	53                   	push   ebx
c00143e5:	83 ec 48             	sub    esp,0x48
c00143e8:	68 14 01 00 00       	push   0x114
c00143ed:	e8 e1 36 ff ff       	call   c0007ad3 <malloc>
c00143f2:	83 c4 0c             	add    esp,0xc
c00143f5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00143f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00143fd:	89 c7                	mov    edi,eax
c00143ff:	50                   	push   eax
c0014400:	e8 9b 73 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0014405:	58                   	pop    eax
c0014406:	5a                   	pop    edx
c0014407:	6a 01                	push   0x1
c0014409:	57                   	push   edi
c001440a:	e8 4d 74 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c001440f:	83 c4 10             	add    esp,0x10
c0014412:	85 c0                	test   eax,eax
c0014414:	0f 85 4c 01 00 00    	jne    c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001441a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014422:	83 ec 0c             	sub    esp,0xc
c0014425:	6a 34                	push   0x34
c0014427:	e8 a7 36 ff ff       	call   c0007ad3 <malloc>
c001442c:	89 c3                	mov    ebx,eax
c001442e:	58                   	pop    eax
c001442f:	8b 07                	mov    eax,DWORD PTR [edi]
c0014431:	8d 74 24 38          	lea    esi,[esp+0x38]
c0014435:	56                   	push   esi
c0014436:	53                   	push   ebx
c0014437:	6a 00                	push   0x0
c0014439:	6a 34                	push   0x34
c001443b:	57                   	push   edi
c001443c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001443f:	83 c4 20             	add    esp,0x20
c0014442:	85 c0                	test   eax,eax
c0014444:	0f 85 1c 01 00 00    	jne    c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c001444a:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014450:	0f 85 10 01 00 00    	jne    c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014456:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014459:	85 c0                	test   eax,eax
c001445b:	0f 84 05 01 00 00    	je     c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014461:	31 d2                	xor    edx,edx
c0014463:	55                   	push   ebp
c0014464:	52                   	push   edx
c0014465:	50                   	push   eax
c0014466:	57                   	push   edi
c0014467:	e8 ae 74 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c001446c:	83 c4 10             	add    esp,0x10
c001446f:	85 c0                	test   eax,eax
c0014471:	0f 85 ef 00 00 00    	jne    c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0014477:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001447a:	83 ec 0c             	sub    esp,0xc
c001447d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014481:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014485:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014489:	0f af c2             	imul   eax,edx
c001448c:	50                   	push   eax
c001448d:	e8 41 36 ff ff       	call   c0007ad3 <malloc>
c0014492:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014494:	89 34 24             	mov    DWORD PTR [esp],esi
c0014497:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001449b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001449f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00144a3:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00144a7:	0f af c2             	imul   eax,edx
c00144aa:	99                   	cdq    
c00144ab:	52                   	push   edx
c00144ac:	50                   	push   eax
c00144ad:	57                   	push   edi
c00144ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144b1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00144b4:	83 c4 20             	add    esp,0x20
c00144b7:	85 c0                	test   eax,eax
c00144b9:	0f 84 a7 00 00 00    	je     c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144bf:	31 d2                	xor    edx,edx
c00144c1:	51                   	push   ecx
c00144c2:	52                   	push   edx
c00144c3:	50                   	push   eax
c00144c4:	57                   	push   edi
c00144c5:	e8 50 74 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c00144ca:	83 c4 10             	add    esp,0x10
c00144cd:	85 c0                	test   eax,eax
c00144cf:	0f 85 91 00 00 00    	jne    c0014566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c00144d5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144d9:	83 ec 0c             	sub    esp,0xc
c00144dc:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144e0:	0f af c2             	imul   eax,edx
c00144e3:	50                   	push   eax
c00144e4:	e8 ea 35 ff ff       	call   c0007ad3 <malloc>
c00144e9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00144eb:	89 34 24             	mov    DWORD PTR [esp],esi
c00144ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144f6:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144fa:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144fe:	0f af c2             	imul   eax,edx
c0014501:	99                   	cdq    
c0014502:	52                   	push   edx
c0014503:	50                   	push   eax
c0014504:	57                   	push   edi
c0014505:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014508:	83 c4 20             	add    esp,0x20
c001450b:	31 c9                	xor    ecx,ecx
c001450d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014515:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0014519:	0f b7 e9             	movzx  ebp,cx
c001451c:	0f 83 86 00 00 00    	jae    c00145a8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0014522:	c1 e5 05             	shl    ebp,0x5
c0014525:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0014529:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c001452d:	75 73                	jne    c00145a2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c001452f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014536:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0014539:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001453d:	52                   	push   edx
c001453e:	31 d2                	xor    edx,edx
c0014540:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014543:	52                   	push   edx
c0014544:	50                   	push   eax
c0014545:	57                   	push   edi
c0014546:	e8 cf 73 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c001454b:	83 c4 10             	add    esp,0x10
c001454e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014552:	85 c0                	test   eax,eax
c0014554:	74 17                	je     c001456d <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0014556:	83 ec 0c             	sub    esp,0xc
c0014559:	68 35 21 02 c0       	push   0xc0022135
c001455e:	e8 a7 63 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	31 c0                	xor    eax,eax
c0014568:	e9 8b 00 00 00       	jmp    c00145f8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c001456d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014571:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0014574:	83 ec 0c             	sub    esp,0xc
c0014577:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c001457a:	50                   	push   eax
c001457b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001457f:	56                   	push   esi
c0014580:	57                   	push   edi
c0014581:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014585:	e8 d0 fb ff ff       	call   c001415a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001458a:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001458e:	83 c4 20             	add    esp,0x20
c0014591:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0014595:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014599:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c001459e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00145a2:	41                   	inc    ecx
c00145a3:	e9 6d ff ff ff       	jmp    c0014515 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00145a8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00145ac:	83 ec 0c             	sub    esp,0xc
c00145af:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00145b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b7:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c00145bd:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c00145c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145c8:	05 00 10 00 00       	add    eax,0x1000
c00145cd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00145d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d4:	e8 0a 35 ff ff       	call   c0007ae3 <free>
c00145d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145dc:	e8 02 35 ff ff       	call   c0007ae3 <free>
c00145e1:	58                   	pop    eax
c00145e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145e6:	e8 f8 34 ff ff       	call   c0007ae3 <free>
c00145eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00145ee:	e8 c7 72 ff ff       	call   c000b8ba <File::close()>
c00145f3:	83 c4 10             	add    esp,0x10
c00145f6:	b0 01                	mov    al,0x1
c00145f8:	83 c4 3c             	add    esp,0x3c
c00145fb:	5b                   	pop    ebx
c00145fc:	5e                   	pop    esi
c00145fd:	5f                   	pop    edi
c00145fe:	5d                   	pop    ebp
c00145ff:	c3                   	ret    

c0014600 <Thr::runtimeReferenceHelper()>:
c0014600:	83 ec 18             	sub    esp,0x18
c0014603:	68 3d 21 02 c0       	push   0xc002213d
c0014608:	e8 fd 62 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001460d:	fa                   	cli    
c001460e:	83 c4 10             	add    esp,0x10
c0014611:	eb fe                	jmp    c0014611 <Thr::runtimeReferenceHelper()+0x11>

c0014613 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014613:	57                   	push   edi
c0014614:	56                   	push   esi
c0014615:	53                   	push   ebx
c0014616:	31 db                	xor    ebx,ebx
c0014618:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001461e:	7e 3c                	jle    c001465c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014620:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014627:	31 ff                	xor    edi,edi
c0014629:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c0014630:	7e 27                	jle    c0014659 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014632:	50                   	push   eax
c0014633:	50                   	push   eax
c0014634:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014638:	8b 06                	mov    eax,DWORD PTR [esi]
c001463a:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c0014641:	50                   	push   eax
c0014642:	e8 39 c1 fe ff       	call   c0000780 <strcmp>
c0014647:	83 c4 10             	add    esp,0x10
c001464a:	85 c0                	test   eax,eax
c001464c:	75 05                	jne    c0014653 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001464e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014651:	eb 0b                	jmp    c001465e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014653:	83 c6 10             	add    esi,0x10
c0014656:	47                   	inc    edi
c0014657:	eb d0                	jmp    c0014629 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014659:	43                   	inc    ebx
c001465a:	eb bc                	jmp    c0014618 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001465c:	31 c0                	xor    eax,eax
c001465e:	5b                   	pop    ebx
c001465f:	5e                   	pop    esi
c0014660:	5f                   	pop    edi
c0014661:	c3                   	ret    

c0014662 <Thr::loadKernelSymbolTable(char const*)>:
c0014662:	55                   	push   ebp
c0014663:	57                   	push   edi
c0014664:	56                   	push   esi
c0014665:	53                   	push   ebx
c0014666:	83 ec 68             	sub    esp,0x68
c0014669:	68 14 01 00 00       	push   0x114
c001466e:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014674:	e8 5a 34 ff ff       	call   c0007ad3 <malloc>
c0014679:	83 c4 0c             	add    esp,0xc
c001467c:	56                   	push   esi
c001467d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014681:	89 c3                	mov    ebx,eax
c0014683:	50                   	push   eax
c0014684:	e8 17 71 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0014689:	5e                   	pop    esi
c001468a:	5f                   	pop    edi
c001468b:	6a 01                	push   0x1
c001468d:	53                   	push   ebx
c001468e:	e8 c9 71 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0014693:	83 c4 10             	add    esp,0x10
c0014696:	85 c0                	test   eax,eax
c0014698:	74 0a                	je     c00146a4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001469a:	83 ec 0c             	sub    esp,0xc
c001469d:	68 5f 21 02 c0       	push   0xc002215f
c00146a2:	eb 34                	jmp    c00146d8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00146a4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00146ac:	83 ec 0c             	sub    esp,0xc
c00146af:	6a 34                	push   0x34
c00146b1:	e8 1d 34 ff ff       	call   c0007ad3 <malloc>
c00146b6:	59                   	pop    ecx
c00146b7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00146bb:	89 c7                	mov    edi,eax
c00146bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146bf:	56                   	push   esi
c00146c0:	57                   	push   edi
c00146c1:	6a 00                	push   0x0
c00146c3:	6a 34                	push   0x34
c00146c5:	53                   	push   ebx
c00146c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146c9:	83 c4 20             	add    esp,0x20
c00146cc:	85 c0                	test   eax,eax
c00146ce:	74 17                	je     c00146e7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00146d0:	83 ec 0c             	sub    esp,0xc
c00146d3:	68 76 21 02 c0       	push   0xc0022176
c00146d8:	e8 70 cb ff ff       	call   c001124d <KePanic(char const*)>
c00146dd:	83 c4 10             	add    esp,0x10
c00146e0:	31 c0                	xor    eax,eax
c00146e2:	e9 31 02 00 00       	jmp    c0014918 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00146e7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00146ed:	75 e1                	jne    c00146d0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146ef:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00146f2:	85 c0                	test   eax,eax
c00146f4:	74 da                	je     c00146d0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146f6:	52                   	push   edx
c00146f7:	31 d2                	xor    edx,edx
c00146f9:	52                   	push   edx
c00146fa:	50                   	push   eax
c00146fb:	53                   	push   ebx
c00146fc:	e8 19 72 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	85 c0                	test   eax,eax
c0014706:	75 c8                	jne    c00146d0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014708:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	31 ed                	xor    ebp,ebp
c0014711:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014715:	0f af c2             	imul   eax,edx
c0014718:	50                   	push   eax
c0014719:	e8 b5 33 ff ff       	call   c0007ad3 <malloc>
c001471e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014720:	89 34 24             	mov    DWORD PTR [esp],esi
c0014723:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014727:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001472b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001472f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014733:	0f af c2             	imul   eax,edx
c0014736:	99                   	cdq    
c0014737:	52                   	push   edx
c0014738:	50                   	push   eax
c0014739:	53                   	push   ebx
c001473a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001473d:	83 c4 20             	add    esp,0x20
c0014740:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014748:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014750:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014758:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014760:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014764:	0f b7 f5             	movzx  esi,bp
c0014767:	0f 83 a7 00 00 00    	jae    c0014814 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001476d:	6b f6 28             	imul   esi,esi,0x28
c0014770:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014774:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001477b:	50                   	push   eax
c001477c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014780:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014784:	8b 16                	mov    edx,DWORD PTR [esi]
c0014786:	6b c0 28             	imul   eax,eax,0x28
c0014789:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001478d:	89 d0                	mov    eax,edx
c001478f:	31 d2                	xor    edx,edx
c0014791:	52                   	push   edx
c0014792:	50                   	push   eax
c0014793:	53                   	push   ebx
c0014794:	e8 81 71 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014799:	83 c4 0c             	add    esp,0xc
c001479c:	6a 20                	push   0x20
c001479e:	6a 00                	push   0x0
c00147a0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147a4:	52                   	push   edx
c00147a5:	e8 46 bd fe ff       	call   c00004f0 <memset>
c00147aa:	58                   	pop    eax
c00147ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ad:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00147b1:	51                   	push   ecx
c00147b2:	8d 54 24 40          	lea    edx,[esp+0x40]
c00147b6:	52                   	push   edx
c00147b7:	6a 00                	push   0x0
c00147b9:	6a 1f                	push   0x1f
c00147bb:	53                   	push   ebx
c00147bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147bf:	83 c4 18             	add    esp,0x18
c00147c2:	68 8d 21 02 c0       	push   0xc002218d
c00147c7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147cb:	52                   	push   edx
c00147cc:	e8 af bf fe ff       	call   c0000780 <strcmp>
c00147d1:	83 c4 10             	add    esp,0x10
c00147d4:	85 c0                	test   eax,eax
c00147d6:	75 0f                	jne    c00147e7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00147d8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147e7:	50                   	push   eax
c00147e8:	50                   	push   eax
c00147e9:	68 95 21 02 c0       	push   0xc0022195
c00147ee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00147f2:	50                   	push   eax
c00147f3:	e8 88 bf fe ff       	call   c0000780 <strcmp>
c00147f8:	83 c4 10             	add    esp,0x10
c00147fb:	85 c0                	test   eax,eax
c00147fd:	75 0f                	jne    c001480e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00147ff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014802:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014806:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001480a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001480e:	45                   	inc    ebp
c001480f:	e9 4c ff ff ff       	jmp    c0014760 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014814:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014819:	75 10                	jne    c001482b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001481b:	83 ec 0c             	sub    esp,0xc
c001481e:	68 9d 21 02 c0       	push   0xc002219d
c0014823:	e8 25 ca ff ff       	call   c001124d <KePanic(char const*)>
c0014828:	83 c4 10             	add    esp,0x10
c001482b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014830:	75 10                	jne    c0014842 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014832:	83 ec 0c             	sub    esp,0xc
c0014835:	68 9d 21 02 c0       	push   0xc002219d
c001483a:	e8 0e ca ff ff       	call   c001124d <KePanic(char const*)>
c001483f:	83 c4 10             	add    esp,0x10
c0014842:	50                   	push   eax
c0014843:	31 d2                	xor    edx,edx
c0014845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014849:	52                   	push   edx
c001484a:	50                   	push   eax
c001484b:	53                   	push   ebx
c001484c:	e8 c9 70 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014851:	5a                   	pop    edx
c0014852:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014856:	e8 78 32 ff ff       	call   c0007ad3 <malloc>
c001485b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001485f:	31 c9                	xor    ecx,ecx
c0014861:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014865:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014867:	5e                   	pop    esi
c0014868:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001486c:	55                   	push   ebp
c001486d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014871:	51                   	push   ecx
c0014872:	52                   	push   edx
c0014873:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014877:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001487b:	53                   	push   ebx
c001487c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001487f:	83 c4 14             	add    esp,0x14
c0014882:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014886:	e8 48 32 ff ff       	call   c0007ad3 <malloc>
c001488b:	89 c6                	mov    esi,eax
c001488d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001488f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014892:	56                   	push   esi
c0014893:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014897:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001489b:	51                   	push   ecx
c001489c:	52                   	push   edx
c001489d:	53                   	push   ebx
c001489e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00148a5:	83 c4 1c             	add    esp,0x1c
c00148a8:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00148ae:	c1 e8 04             	shr    eax,0x4
c00148b1:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00148b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148bc:	31 d2                	xor    edx,edx
c00148be:	52                   	push   edx
c00148bf:	50                   	push   eax
c00148c0:	53                   	push   ebx
c00148c1:	e8 54 70 ff ff       	call   c000b91a <File::seek(unsigned long long)>
c00148c6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00148c8:	31 d2                	xor    edx,edx
c00148ca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148cd:	56                   	push   esi
c00148ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148d2:	52                   	push   edx
c00148d3:	50                   	push   eax
c00148d4:	53                   	push   ebx
c00148d5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148d8:	83 c4 14             	add    esp,0x14
c00148db:	53                   	push   ebx
c00148dc:	e8 d9 6f ff ff       	call   c000b8ba <File::close()>
c00148e1:	5d                   	pop    ebp
c00148e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148e6:	e8 f8 31 ff ff       	call   c0007ae3 <free>
c00148eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148ee:	e8 f0 31 ff ff       	call   c0007ae3 <free>
c00148f3:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c00148f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014906:	8d 50 01             	lea    edx,[eax+0x1]
c0014909:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014910:	b0 01                	mov    al,0x1
c0014912:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014918:	83 c4 5c             	add    esp,0x5c
c001491b:	5b                   	pop    ebx
c001491c:	5e                   	pop    esi
c001491d:	5f                   	pop    edi
c001491e:	5d                   	pop    ebp
c001491f:	c3                   	ret    

c0014920 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014920:	55                   	push   ebp
c0014921:	57                   	push   edi
c0014922:	56                   	push   esi
c0014923:	53                   	push   ebx
c0014924:	81 ec 68 03 00 00    	sub    esp,0x368
c001492a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014931:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c0014937:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001493b:	68 14 01 00 00       	push   0x114
c0014940:	e8 8e 31 ff ff       	call   c0007ad3 <malloc>
c0014945:	83 c4 0c             	add    esp,0xc
c0014948:	56                   	push   esi
c0014949:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014950:	50                   	push   eax
c0014951:	89 c3                	mov    ebx,eax
c0014953:	e8 48 6e ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0014958:	5f                   	pop    edi
c0014959:	5d                   	pop    ebp
c001495a:	6a 01                	push   0x1
c001495c:	53                   	push   ebx
c001495d:	e8 fa 6e ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0014962:	83 c4 10             	add    esp,0x10
c0014965:	85 c0                	test   eax,eax
c0014967:	0f 85 b3 06 00 00    	jne    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001496d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014975:	83 ec 0c             	sub    esp,0xc
c0014978:	6a 34                	push   0x34
c001497a:	e8 54 31 ff ff       	call   c0007ad3 <malloc>
c001497f:	5e                   	pop    esi
c0014980:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014984:	89 c5                	mov    ebp,eax
c0014986:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014988:	56                   	push   esi
c0014989:	55                   	push   ebp
c001498a:	6a 00                	push   0x0
c001498c:	6a 34                	push   0x34
c001498e:	53                   	push   ebx
c001498f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014992:	83 c4 20             	add    esp,0x20
c0014995:	85 c0                	test   eax,eax
c0014997:	0f 85 83 06 00 00    	jne    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001499d:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00149a4:	0f 85 76 06 00 00    	jne    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149aa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00149ad:	85 c0                	test   eax,eax
c00149af:	0f 84 6b 06 00 00    	je     c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149b5:	31 d2                	xor    edx,edx
c00149b7:	51                   	push   ecx
c00149b8:	52                   	push   edx
c00149b9:	50                   	push   eax
c00149ba:	53                   	push   ebx
c00149bb:	e8 5a 6f ff ff       	call   c000b91a <File::seek(unsigned long long)>
c00149c0:	83 c4 10             	add    esp,0x10
c00149c3:	85 c0                	test   eax,eax
c00149c5:	0f 85 55 06 00 00    	jne    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00149cb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00149ce:	83 ec 0c             	sub    esp,0xc
c00149d1:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00149d5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00149d9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00149dd:	0f af c2             	imul   eax,edx
c00149e0:	50                   	push   eax
c00149e1:	e8 ed 30 ff ff       	call   c0007ad3 <malloc>
c00149e6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00149e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00149eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00149f3:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00149f7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00149fb:	0f af c2             	imul   eax,edx
c00149fe:	99                   	cdq    
c00149ff:	52                   	push   edx
c0014a00:	50                   	push   eax
c0014a01:	53                   	push   ebx
c0014a02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a05:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0014a08:	83 c4 20             	add    esp,0x20
c0014a0b:	85 c0                	test   eax,eax
c0014a0d:	0f 84 0d 06 00 00    	je     c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a13:	52                   	push   edx
c0014a14:	31 d2                	xor    edx,edx
c0014a16:	52                   	push   edx
c0014a17:	50                   	push   eax
c0014a18:	53                   	push   ebx
c0014a19:	e8 fc 6e ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014a1e:	83 c4 10             	add    esp,0x10
c0014a21:	85 c0                	test   eax,eax
c0014a23:	0f 85 f7 05 00 00    	jne    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014a29:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014a2d:	83 ec 0c             	sub    esp,0xc
c0014a30:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014a34:	0f af c2             	imul   eax,edx
c0014a37:	50                   	push   eax
c0014a38:	e8 96 30 ff ff       	call   c0007ad3 <malloc>
c0014a3d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014a3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014a42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a4a:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0014a4e:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0014a52:	0f af c2             	imul   eax,edx
c0014a55:	99                   	cdq    
c0014a56:	52                   	push   edx
c0014a57:	50                   	push   eax
c0014a58:	53                   	push   ebx
c0014a59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a5c:	83 c4 20             	add    esp,0x20
c0014a5f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0014a65:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014a68:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0014a6c:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0014a70:	73 78                	jae    c0014aea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0014a72:	c1 e7 05             	shl    edi,0x5
c0014a75:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0014a79:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a7c:	75 63                	jne    c0014ae1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c0014a7e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a81:	31 d2                	xor    edx,edx
c0014a83:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c0014a86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a8a:	50                   	push   eax
c0014a8b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a8e:	52                   	push   edx
c0014a8f:	50                   	push   eax
c0014a90:	53                   	push   ebx
c0014a91:	e8 84 6e ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	85 c0                	test   eax,eax
c0014a9b:	0f 85 7f 05 00 00    	jne    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0014aa1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014aa8:	83 ec 0c             	sub    esp,0xc
c0014aab:	31 d2                	xor    edx,edx
c0014aad:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0014ab1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014ab3:	01 c6                	add    esi,eax
c0014ab5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014abc:	50                   	push   eax
c0014abd:	56                   	push   esi
c0014abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac2:	52                   	push   edx
c0014ac3:	50                   	push   eax
c0014ac4:	53                   	push   ebx
c0014ac5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ac8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014acb:	83 c4 1c             	add    esp,0x1c
c0014ace:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014ad1:	50                   	push   eax
c0014ad2:	6a 00                	push   0x0
c0014ad4:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014ad8:	56                   	push   esi
c0014ad9:	e8 12 ba fe ff       	call   c00004f0 <memset>
c0014ade:	83 c4 10             	add    esp,0x10
c0014ae1:	66 ff 04 24          	inc    WORD PTR [esp]
c0014ae5:	e9 7b ff ff ff       	jmp    c0014a65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0014aea:	50                   	push   eax
c0014aeb:	68 00 01 00 00       	push   0x100
c0014af0:	6a 00                	push   0x0
c0014af2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014af6:	50                   	push   eax
c0014af7:	e8 f4 b9 fe ff       	call   c00004f0 <memset>
c0014afc:	83 c4 0c             	add    esp,0xc
c0014aff:	68 00 01 00 00       	push   0x100
c0014b04:	6a 00                	push   0x0
c0014b06:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b0d:	50                   	push   eax
c0014b0e:	e8 dd b9 fe ff       	call   c00004f0 <memset>
c0014b13:	83 c4 10             	add    esp,0x10
c0014b16:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0014b1d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014b24:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b2c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014b34:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014b3c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b48:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0014b4c:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0014b51:	0f 83 16 01 00 00    	jae    c0014c6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c0014b57:	6b ff 28             	imul   edi,edi,0x28
c0014b5a:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0014b5e:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0014b61:	51                   	push   ecx
c0014b62:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0014b66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014b6a:	8b 07                	mov    eax,DWORD PTR [edi]
c0014b6c:	6b d2 28             	imul   edx,edx,0x28
c0014b6f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014b73:	31 d2                	xor    edx,edx
c0014b75:	52                   	push   edx
c0014b76:	50                   	push   eax
c0014b77:	53                   	push   ebx
c0014b78:	e8 9d 6d ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014b7d:	83 c4 0c             	add    esp,0xc
c0014b80:	6a 20                	push   0x20
c0014b82:	6a 00                	push   0x0
c0014b84:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b8b:	51                   	push   ecx
c0014b8c:	e8 5f b9 fe ff       	call   c00004f0 <memset>
c0014b91:	58                   	pop    eax
c0014b92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014b94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b98:	52                   	push   edx
c0014b99:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014ba0:	51                   	push   ecx
c0014ba1:	6a 00                	push   0x0
c0014ba3:	6a 1f                	push   0x1f
c0014ba5:	53                   	push   ebx
c0014ba6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ba9:	83 c4 1c             	add    esp,0x1c
c0014bac:	6a 09                	push   0x9
c0014bae:	68 b7 21 02 c0       	push   0xc00221b7
c0014bb3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014bba:	51                   	push   ecx
c0014bbb:	e8 c0 b7 fe ff       	call   c0000380 <memcmp>
c0014bc0:	83 c4 10             	add    esp,0x10
c0014bc3:	85 c0                	test   eax,eax
c0014bc5:	75 1a                	jne    c0014be1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c0014bc7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014bca:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0014bcd:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014bd1:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014bd4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014bdb:	89 d0                	mov    eax,edx
c0014bdd:	40                   	inc    eax
c0014bde:	89 04 24             	mov    DWORD PTR [esp],eax
c0014be1:	52                   	push   edx
c0014be2:	6a 09                	push   0x9
c0014be4:	68 c1 21 02 c0       	push   0xc00221c1
c0014be9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bf0:	50                   	push   eax
c0014bf1:	e8 8a b7 fe ff       	call   c0000380 <memcmp>
c0014bf6:	83 c4 10             	add    esp,0x10
c0014bf9:	85 c0                	test   eax,eax
c0014bfb:	75 1a                	jne    c0014c17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0014bfd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0014c00:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0014c03:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0014c07:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c0a:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0014c11:	89 c8                	mov    eax,ecx
c0014c13:	40                   	inc    eax
c0014c14:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c17:	50                   	push   eax
c0014c18:	50                   	push   eax
c0014c19:	68 8d 21 02 c0       	push   0xc002218d
c0014c1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c25:	50                   	push   eax
c0014c26:	e8 55 bb fe ff       	call   c0000780 <strcmp>
c0014c2b:	83 c4 10             	add    esp,0x10
c0014c2e:	85 c0                	test   eax,eax
c0014c30:	75 0b                	jne    c0014c3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0014c32:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0014c36:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c3d:	50                   	push   eax
c0014c3e:	50                   	push   eax
c0014c3f:	68 95 21 02 c0       	push   0xc0022195
c0014c44:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c4b:	50                   	push   eax
c0014c4c:	e8 2f bb fe ff       	call   c0000780 <strcmp>
c0014c51:	83 c4 10             	add    esp,0x10
c0014c54:	85 c0                	test   eax,eax
c0014c56:	75 0b                	jne    c0014c63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c0014c58:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0014c5c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c63:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c0014c68:	e9 d7 fe ff ff       	jmp    c0014b44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0014c6d:	50                   	push   eax
c0014c6e:	31 d2                	xor    edx,edx
c0014c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c74:	52                   	push   edx
c0014c75:	50                   	push   eax
c0014c76:	53                   	push   ebx
c0014c77:	e8 9e 6c ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014c7c:	58                   	pop    eax
c0014c7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c81:	e8 4d 2e ff ff       	call   c0007ad3 <malloc>
c0014c86:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c88:	31 d2                	xor    edx,edx
c0014c8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0014c8e:	58                   	pop    eax
c0014c8f:	8d 74 24 54          	lea    esi,[esp+0x54]
c0014c93:	56                   	push   esi
c0014c94:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014c98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c9c:	52                   	push   edx
c0014c9d:	50                   	push   eax
c0014c9e:	53                   	push   ebx
c0014c9f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ca2:	83 c4 14             	add    esp,0x14
c0014ca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ca9:	e8 25 2e ff ff       	call   c0007ad3 <malloc>
c0014cae:	31 d2                	xor    edx,edx
c0014cb0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014cb4:	83 c4 0c             	add    esp,0xc
c0014cb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cbb:	52                   	push   edx
c0014cbc:	50                   	push   eax
c0014cbd:	53                   	push   ebx
c0014cbe:	e8 57 6c ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014cc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014cc5:	31 d2                	xor    edx,edx
c0014cc7:	89 34 24             	mov    DWORD PTR [esp],esi
c0014cca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014cd2:	52                   	push   edx
c0014cd3:	50                   	push   eax
c0014cd4:	53                   	push   ebx
c0014cd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cd8:	83 c4 20             	add    esp,0x20
c0014cdb:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0014ce0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ce8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014cec:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014cf0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0014cf3:	0f 84 2b 03 00 00    	je     c0015024 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0014cf9:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0014d00:	31 d2                	xor    edx,edx
c0014d02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d06:	c1 e8 03             	shr    eax,0x3
c0014d09:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014d0d:	51                   	push   ecx
c0014d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d12:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014d16:	52                   	push   edx
c0014d17:	50                   	push   eax
c0014d18:	53                   	push   ebx
c0014d19:	e8 fc 6b ff ff       	call   c000b91a <File::seek(unsigned long long)>
c0014d1e:	5e                   	pop    esi
c0014d1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d23:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014d2a:	e8 a4 2d ff ff       	call   c0007ad3 <malloc>
c0014d2f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014d31:	31 d2                	xor    edx,edx
c0014d33:	89 c7                	mov    edi,eax
c0014d35:	58                   	pop    eax
c0014d36:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d3a:	50                   	push   eax
c0014d3b:	57                   	push   edi
c0014d3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d40:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014d47:	52                   	push   edx
c0014d48:	50                   	push   eax
c0014d49:	53                   	push   ebx
c0014d4a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d4d:	83 c4 20             	add    esp,0x20
c0014d50:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014d58:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0014d5c:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0014d60:	0f 8d a5 02 00 00    	jge    c001500b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c0014d66:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0014d6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d6f:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0014d72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014d76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d7a:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c0014d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d82:	c1 e8 08             	shr    eax,0x8
c0014d85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d89:	89 c2                	mov    edx,eax
c0014d8b:	c1 e2 04             	shl    edx,0x4
c0014d8e:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c0014d92:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0014d95:	85 f6                	test   esi,esi
c0014d97:	0f 85 cf 00 00 00    	jne    c0014e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014d9d:	83 ec 0c             	sub    esp,0xc
c0014da0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014da4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014da8:	03 02                	add    eax,DWORD PTR [edx]
c0014daa:	50                   	push   eax
c0014dab:	e8 63 f8 ff ff       	call   c0014613 <Thr::getAddressOfKernelSymbol(char const*)>
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014db7:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0014dbc:	85 c0                	test   eax,eax
c0014dbe:	89 c6                	mov    esi,eax
c0014dc0:	0f 85 a6 00 00 00    	jne    c0014e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014dc6:	83 ec 0c             	sub    esp,0xc
c0014dc9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0014dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dd1:	03 02                	add    eax,DWORD PTR [edx]
c0014dd3:	50                   	push   eax
c0014dd4:	e8 5f c6 ff ff       	call   c0011438 <KeResolveCompatibilitySymbol(char*)>
c0014dd9:	83 c4 10             	add    esp,0x10
c0014ddc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014de0:	85 c0                	test   eax,eax
c0014de2:	89 c6                	mov    esi,eax
c0014de4:	0f 85 82 00 00 00    	jne    c0014e6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0014dea:	50                   	push   eax
c0014deb:	50                   	push   eax
c0014dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014df0:	03 02                	add    eax,DWORD PTR [edx]
c0014df2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0014df6:	50                   	push   eax
c0014df7:	68 cb 21 02 c0       	push   0xc00221cb
c0014dfc:	e8 09 5b ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014e01:	58                   	pop    eax
c0014e02:	5a                   	pop    edx
c0014e03:	68 e5 21 02 c0       	push   0xc00221e5
c0014e08:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e0f:	51                   	push   ecx
c0014e10:	e8 3b b8 fe ff       	call   c0000650 <strcpy>
c0014e15:	59                   	pop    ecx
c0014e16:	58                   	pop    eax
c0014e17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e1f:	03 02                	add    eax,DWORD PTR [edx]
c0014e21:	50                   	push   eax
c0014e22:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e29:	51                   	push   ecx
c0014e2a:	e8 41 ba fe ff       	call   c0000870 <strcat>
c0014e2f:	58                   	pop    eax
c0014e30:	5a                   	pop    edx
c0014e31:	68 7b 22 02 c0       	push   0xc002227b
c0014e36:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e3d:	51                   	push   ecx
c0014e3e:	e8 2d ba fe ff       	call   c0000870 <strcat>
c0014e43:	83 c4 10             	add    esp,0x10
c0014e46:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014e4b:	0f 84 77 01 00 00    	je     c0014fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014e51:	83 ec 0c             	sub    esp,0xc
c0014e54:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014e5b:	51                   	push   ecx
c0014e5c:	e8 ec c3 ff ff       	call   c001124d <KePanic(char const*)>
c0014e61:	83 c4 10             	add    esp,0x10
c0014e64:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0014e68:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0014e6c:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0014e71:	83 f8 01             	cmp    eax,0x1
c0014e74:	0f 85 9b 00 00 00    	jne    c0014f15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c0014e7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e7e:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c0014e85:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0014e89:	01 d0                	add    eax,edx
c0014e8b:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014e93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0014e97:	0f 94 c0             	sete   al
c0014e9a:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014ea2:	0f 94 c1             	sete   cl
c0014ea5:	09 c1                	or     ecx,eax
c0014ea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014eab:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014eb0:	0f b6 c9             	movzx  ecx,cl
c0014eb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb5:	74 41                	je     c0014ef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c0014eb7:	8d 14 06             	lea    edx,[esi+eax*1]
c0014eba:	85 c9                	test   ecx,ecx
c0014ebc:	75 15                	jne    c0014ed3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0014ebe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014ec2:	66 83 f8 0c          	cmp    ax,0xc
c0014ec6:	76 05                	jbe    c0014ecd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0014ec8:	b8 0c 00 00 00       	mov    eax,0xc
c0014ecd:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014ed1:	76 37                	jbe    c0014f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014ed3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014ed8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014edc:	0f 84 e6 00 00 00    	je     c0014fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014ee2:	83 ec 0c             	sub    esp,0xc
c0014ee5:	68 fc 21 02 c0       	push   0xc00221fc
c0014eea:	e8 5e c3 ff ff       	call   c001124d <KePanic(char const*)>
c0014eef:	83 c4 10             	add    esp,0x10
c0014ef2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ef6:	eb 12                	jmp    c0014f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014ef8:	01 c2                	add    edx,eax
c0014efa:	85 c9                	test   ecx,ecx
c0014efc:	75 0c                	jne    c0014f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014efe:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0014f02:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0014f06:	77 02                	ja     c0014f0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0014f08:	01 f2                	add    edx,esi
c0014f0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f0e:	89 10                	mov    DWORD PTR [eax],edx
c0014f10:	e9 ed 00 00 00       	jmp    c0015002 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f15:	83 f8 02             	cmp    eax,0x2
c0014f18:	0f 85 81 00 00 00    	jne    c0014f9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0014f1e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014f25:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0014f29:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0014f2d:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c0014f35:	74 21                	je     c0014f58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014f37:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0014f3f:	74 17                	je     c0014f58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0014f41:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c0014f45:	ba 0a 00 00 00       	mov    edx,0xa
c0014f4a:	83 f9 0e             	cmp    ecx,0xe
c0014f4d:	77 03                	ja     c0014f52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0014f4f:	8d 51 fc             	lea    edx,[ecx-0x4]
c0014f52:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c0014f56:	76 1f                	jbe    c0014f77 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c0014f58:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014f5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f61:	74 65                	je     c0014fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014f63:	83 ec 0c             	sub    esp,0xc
c0014f66:	68 18 22 02 c0       	push   0xc0022218
c0014f6b:	e8 dd c2 ff ff       	call   c001124d <KePanic(char const*)>
c0014f70:	83 c4 10             	add    esp,0x10
c0014f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f77:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014f7c:	8b 10                	mov    edx,DWORD PTR [eax]
c0014f7e:	74 15                	je     c0014f95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c0014f80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014f84:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0014f8b:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014f8f:	01 d1                	add    ecx,edx
c0014f91:	01 ce                	add    esi,ecx
c0014f93:	eb 06                	jmp    c0014f9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c0014f95:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c0014f99:	01 d6                	add    esi,edx
c0014f9b:	89 30                	mov    DWORD PTR [eax],esi
c0014f9d:	eb 63                	jmp    c0015002 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014f9f:	56                   	push   esi
c0014fa0:	56                   	push   esi
c0014fa1:	50                   	push   eax
c0014fa2:	68 34 22 02 c0       	push   0xc0022234
c0014fa7:	e8 5e 59 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0014fb4:	74 12                	je     c0014fc8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0014fb6:	83 ec 0c             	sub    esp,0xc
c0014fb9:	68 3f 22 02 c0       	push   0xc002223f
c0014fbe:	e8 8a c2 ff ff       	call   c001124d <KePanic(char const*)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	eb 3a                	jmp    c0015002 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	53                   	push   ebx
c0014fcc:	e8 e9 68 ff ff       	call   c000b8ba <File::close()>
c0014fd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fd6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fd9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fdc:	e8 02 2b ff ff       	call   c0007ae3 <free>
c0014fe1:	59                   	pop    ecx
c0014fe2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fe6:	e8 f8 2a ff ff       	call   c0007ae3 <free>
c0014feb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fee:	e8 f0 2a ff ff       	call   c0007ae3 <free>
c0014ff3:	5b                   	pop    ebx
c0014ff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ff8:	e8 e6 2a ff ff       	call   c0007ae3 <free>
c0014ffd:	83 c4 10             	add    esp,0x10
c0015000:	eb 1e                	jmp    c0015020 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0015002:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0015006:	e9 4d fd ff ff       	jmp    c0014d58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c001500b:	83 ec 0c             	sub    esp,0xc
c001500e:	57                   	push   edi
c001500f:	e8 cf 2a ff ff       	call   c0007ae3 <free>
c0015014:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0015018:	83 c4 10             	add    esp,0x10
c001501b:	e9 cc fc ff ff       	jmp    c0014cec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0015020:	31 c0                	xor    eax,eax
c0015022:	eb 32                	jmp    c0015056 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c0015024:	83 ec 0c             	sub    esp,0xc
c0015027:	53                   	push   ebx
c0015028:	e8 8d 68 ff ff       	call   c000b8ba <File::close()>
c001502d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001502f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015032:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015035:	58                   	pop    eax
c0015036:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001503a:	e8 a4 2a ff ff       	call   c0007ae3 <free>
c001503f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015042:	e8 9c 2a ff ff       	call   c0007ae3 <free>
c0015047:	5a                   	pop    edx
c0015048:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001504c:	e8 92 2a ff ff       	call   c0007ae3 <free>
c0015051:	83 c4 10             	add    esp,0x10
c0015054:	b0 01                	mov    al,0x1
c0015056:	81 c4 5c 03 00 00    	add    esp,0x35c
c001505c:	5b                   	pop    ebx
c001505d:	5e                   	pop    esi
c001505e:	5f                   	pop    edi
c001505f:	5d                   	pop    ebp
c0015060:	c3                   	ret    

c0015061 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015061:	56                   	push   esi
c0015062:	31 d2                	xor    edx,edx
c0015064:	53                   	push   ebx
c0015065:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001506b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001506f:	39 d3                	cmp    ebx,edx
c0015071:	7e 1b                	jle    c001508e <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015073:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c001507a:	39 c8                	cmp    eax,ecx
c001507c:	77 0d                	ja     c001508b <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001507e:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c0015085:	01 c6                	add    esi,eax
c0015087:	39 ce                	cmp    esi,ecx
c0015089:	77 05                	ja     c0015090 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001508b:	42                   	inc    edx
c001508c:	eb e1                	jmp    c001506f <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001508e:	31 c0                	xor    eax,eax
c0015090:	5b                   	pop    ebx
c0015091:	5e                   	pop    esi
c0015092:	c3                   	ret    

c0015093 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015093:	53                   	push   ebx
c0015094:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001509a:	31 c0                	xor    eax,eax
c001509c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00150a0:	39 c3                	cmp    ebx,eax
c00150a2:	7e 22                	jle    c00150c6 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00150a4:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00150ab:	39 ca                	cmp    edx,ecx
c00150ad:	77 14                	ja     c00150c3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150af:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00150b6:	39 ca                	cmp    edx,ecx
c00150b8:	76 09                	jbe    c00150c3 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150ba:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00150c1:	eb 05                	jmp    c00150c8 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00150c3:	40                   	inc    eax
c00150c4:	eb da                	jmp    c00150a0 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00150c6:	31 c0                	xor    eax,eax
c00150c8:	5b                   	pop    ebx
c00150c9:	c3                   	ret    

c00150ca <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00150ca:	53                   	push   ebx
c00150cb:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00150cf:	53                   	push   ebx
c00150d0:	e8 8c ff ff ff       	call   c0015061 <Thr::getDriverBaseFromAddress(unsigned long)>
c00150d5:	5a                   	pop    edx
c00150d6:	31 d2                	xor    edx,edx
c00150d8:	85 c0                	test   eax,eax
c00150da:	74 04                	je     c00150e0 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00150dc:	89 da                	mov    edx,ebx
c00150de:	29 c2                	sub    edx,eax
c00150e0:	5b                   	pop    ebx
c00150e1:	89 d0                	mov    eax,edx
c00150e3:	c3                   	ret    

c00150e4 <Thr::loadDLL(char const*, bool)>:
c00150e4:	55                   	push   ebp
c00150e5:	57                   	push   edi
c00150e6:	56                   	push   esi
c00150e7:	53                   	push   ebx
c00150e8:	81 ec 34 01 00 00    	sub    esp,0x134
c00150ee:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00150f5:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00150fc:	56                   	push   esi
c00150fd:	68 57 22 02 c0       	push   0xc0022257
c0015102:	e8 03 58 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015107:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001510e:	e8 c0 29 ff ff       	call   c0007ad3 <malloc>
c0015113:	83 c4 0c             	add    esp,0xc
c0015116:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001511c:	56                   	push   esi
c001511d:	50                   	push   eax
c001511e:	89 c3                	mov    ebx,eax
c0015120:	e8 7b 66 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	85 db                	test   ebx,ebx
c001512a:	75 3c                	jne    c0015168 <Thr::loadDLL(char const*, bool)+0x84>
c001512c:	89 e8                	mov    eax,ebp
c001512e:	84 c0                	test   al,al
c0015130:	0f 84 e1 01 00 00    	je     c0015317 <Thr::loadDLL(char const*, bool)+0x233>
c0015136:	50                   	push   eax
c0015137:	50                   	push   eax
c0015138:	68 68 22 02 c0       	push   0xc0022268
c001513d:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0015141:	57                   	push   edi
c0015142:	e8 09 b5 fe ff       	call   c0000650 <strcpy>
c0015147:	58                   	pop    eax
c0015148:	5a                   	pop    edx
c0015149:	56                   	push   esi
c001514a:	57                   	push   edi
c001514b:	e8 20 b7 fe ff       	call   c0000870 <strcat>
c0015150:	59                   	pop    ecx
c0015151:	58                   	pop    eax
c0015152:	68 7b 22 02 c0       	push   0xc002227b
c0015157:	57                   	push   edi
c0015158:	e8 13 b7 fe ff       	call   c0000870 <strcat>
c001515d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015160:	e8 e8 c0 ff ff       	call   c001124d <KePanic(char const*)>
c0015165:	83 c4 10             	add    esp,0x10
c0015168:	50                   	push   eax
c0015169:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001516d:	50                   	push   eax
c001516e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015172:	50                   	push   eax
c0015173:	53                   	push   ebx
c0015174:	e8 e5 69 ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c0015179:	83 c4 10             	add    esp,0x10
c001517c:	85 db                	test   ebx,ebx
c001517e:	74 0c                	je     c001518c <Thr::loadDLL(char const*, bool)+0xa8>
c0015180:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015182:	83 ec 0c             	sub    esp,0xc
c0015185:	53                   	push   ebx
c0015186:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015191:	75 0a                	jne    c001519d <Thr::loadDLL(char const*, bool)+0xb9>
c0015193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015197:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001519b:	75 3e                	jne    c00151db <Thr::loadDLL(char const*, bool)+0xf7>
c001519d:	89 e8                	mov    eax,ebp
c001519f:	31 db                	xor    ebx,ebx
c00151a1:	84 c0                	test   al,al
c00151a3:	0f 84 6e 01 00 00    	je     c0015317 <Thr::loadDLL(char const*, bool)+0x233>
c00151a9:	50                   	push   eax
c00151aa:	50                   	push   eax
c00151ab:	68 68 22 02 c0       	push   0xc0022268
c00151b0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00151b4:	53                   	push   ebx
c00151b5:	e8 96 b4 fe ff       	call   c0000650 <strcpy>
c00151ba:	58                   	pop    eax
c00151bb:	5a                   	pop    edx
c00151bc:	56                   	push   esi
c00151bd:	53                   	push   ebx
c00151be:	e8 ad b6 fe ff       	call   c0000870 <strcat>
c00151c3:	59                   	pop    ecx
c00151c4:	5f                   	pop    edi
c00151c5:	68 7b 22 02 c0       	push   0xc002227b
c00151ca:	53                   	push   ebx
c00151cb:	e8 a0 b6 fe ff       	call   c0000870 <strcat>
c00151d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d3:	e8 75 c0 ff ff       	call   c001124d <KePanic(char const*)>
c00151d8:	83 c4 10             	add    esp,0x10
c00151db:	53                   	push   ebx
c00151dc:	6a 03                	push   0x3
c00151de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151e2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151e6:	05 ff 0f 00 00       	add    eax,0xfff
c00151eb:	83 d2 00             	adc    edx,0x0
c00151ee:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151f2:	50                   	push   eax
c00151f3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00151f9:	e8 08 4c ff ff       	call   c0009e06 <VAS::allocatePages(int, int)>
c00151fe:	89 c3                	mov    ebx,eax
c0015200:	58                   	pop    eax
c0015201:	5a                   	pop    edx
c0015202:	53                   	push   ebx
c0015203:	68 92 08 02 c0       	push   0xc0020892
c0015208:	e8 fd 56 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001520d:	89 34 24             	mov    DWORD PTR [esp],esi
c0015210:	e8 6b b3 fe ff       	call   c0000580 <strlen>
c0015215:	8b 3d 00 8f 02 c0    	mov    edi,DWORD PTR ds:0xc0028f00
c001521b:	40                   	inc    eax
c001521c:	89 04 24             	mov    DWORD PTR [esp],eax
c001521f:	e8 af 28 ff ff       	call   c0007ad3 <malloc>
c0015224:	59                   	pop    ecx
c0015225:	89 04 bd 20 93 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6ce0],eax
c001522c:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015231:	5f                   	pop    edi
c0015232:	56                   	push   esi
c0015233:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001523a:	e8 11 b4 fe ff       	call   c0000650 <strcpy>
c001523f:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015244:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c001524b:	8d 50 01             	lea    edx,[eax+0x1]
c001524e:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015254:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015258:	83 c4 0c             	add    esp,0xc
c001525b:	6a 01                	push   0x1
c001525d:	53                   	push   ebx
c001525e:	56                   	push   esi
c001525f:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015266:	e8 b5 f6 ff ff       	call   c0014920 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001526b:	83 c4 10             	add    esp,0x10
c001526e:	89 c7                	mov    edi,eax
c0015270:	89 f8                	mov    eax,edi
c0015272:	83 f0 01             	xor    eax,0x1
c0015275:	84 c0                	test   al,al
c0015277:	74 18                	je     c0015291 <Thr::loadDLL(char const*, bool)+0x1ad>
c0015279:	89 e8                	mov    eax,ebp
c001527b:	84 c0                	test   al,al
c001527d:	74 12                	je     c0015291 <Thr::loadDLL(char const*, bool)+0x1ad>
c001527f:	83 ec 0c             	sub    esp,0xc
c0015282:	68 7d 22 02 c0       	push   0xc002227d
c0015287:	e8 c1 bf ff ff       	call   c001124d <KePanic(char const*)>
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	eb 06                	jmp    c0015297 <Thr::loadDLL(char const*, bool)+0x1b3>
c0015291:	89 f8                	mov    eax,edi
c0015293:	84 c0                	test   al,al
c0015295:	75 10                	jne    c00152a7 <Thr::loadDLL(char const*, bool)+0x1c3>
c0015297:	83 ec 0c             	sub    esp,0xc
c001529a:	68 9c 22 02 c0       	push   0xc002229c
c001529f:	e8 a9 bf ff ff       	call   c001124d <KePanic(char const*)>
c00152a4:	83 c4 10             	add    esp,0x10
c00152a7:	31 f6                	xor    esi,esi
c00152a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152b1:	05 ff 0f 00 00       	add    eax,0xfff
c00152b6:	83 d2 00             	adc    edx,0x0
c00152b9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152c1:	c1 ea 0c             	shr    edx,0xc
c00152c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152c8:	ba 00 00 00 00       	mov    edx,0x0
c00152cd:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00152d1:	89 d0                	mov    eax,edx
c00152d3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00152d7:	73 32                	jae    c001530b <Thr::loadDLL(char const*, bool)+0x227>
c00152d9:	50                   	push   eax
c00152da:	50                   	push   eax
c00152db:	89 f0                	mov    eax,esi
c00152dd:	c1 e0 0c             	shl    eax,0xc
c00152e0:	01 d8                	add    eax,ebx
c00152e2:	50                   	push   eax
c00152e3:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00152e9:	e8 fc 45 ff ff       	call   c00098ea <VAS::getPageTableEntry(unsigned long)>
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f3:	a8 60                	test   al,0x60
c00152f5:	75 11                	jne    c0015308 <Thr::loadDLL(char const*, bool)+0x224>
c00152f7:	83 ec 0c             	sub    esp,0xc
c00152fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00152ff:	50                   	push   eax
c0015300:	e8 74 2a ff ff       	call   c0007d79 <Phys::freePage(unsigned long)>
c0015305:	83 c4 10             	add    esp,0x10
c0015308:	46                   	inc    esi
c0015309:	eb 9e                	jmp    c00152a9 <Thr::loadDLL(char const*, bool)+0x1c5>
c001530b:	89 f8                	mov    eax,edi
c001530d:	84 c0                	test   al,al
c001530f:	b8 00 00 00 00       	mov    eax,0x0
c0015314:	0f 44 d8             	cmove  ebx,eax
c0015317:	81 c4 2c 01 00 00    	add    esp,0x12c
c001531d:	89 d8                	mov    eax,ebx
c001531f:	5b                   	pop    ebx
c0015320:	5e                   	pop    esi
c0015321:	5f                   	pop    edi
c0015322:	5d                   	pop    ebp
c0015323:	c3                   	ret    

c0015324 <Thr::executeDLL(unsigned long, void*)>:
c0015324:	56                   	push   esi
c0015325:	53                   	push   ebx
c0015326:	52                   	push   edx
c0015327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001532b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001532f:	85 db                	test   ebx,ebx
c0015331:	75 10                	jne    c0015343 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015333:	83 ec 0c             	sub    esp,0xc
c0015336:	68 b8 22 02 c0       	push   0xc00222b8
c001533b:	e8 0d bf ff ff       	call   c001124d <KePanic(char const*)>
c0015340:	83 c4 10             	add    esp,0x10
c0015343:	50                   	push   eax
c0015344:	50                   	push   eax
c0015345:	53                   	push   ebx
c0015346:	68 e2 22 02 c0       	push   0xc00222e2
c001534b:	e8 ba 55 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015350:	89 d8                	mov    eax,ebx
c0015352:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015356:	83 c4 14             	add    esp,0x14
c0015359:	5b                   	pop    ebx
c001535a:	5e                   	pop    esi
c001535b:	ff e0                	jmp    eax
c001535d:	66 90                	xchg   ax,ax
c001535f:	90                   	nop

c0015360 <userModeEntryPoint(void*)>:
c0015360:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015365:	83 e8 01             	sub    eax,0x1
c0015368:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001536d:	75 01                	jne    c0015370 <userModeEntryPoint(void*)+0x10>
c001536f:	fb                   	sti    
c0015370:	fb                   	sti    
c0015371:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015376:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015379:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001537f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015383:	e9 b7 ae fe ff       	jmp    c000023f <goToUsermode>

c0015388 <changeTSS>:
c0015388:	83 ec 14             	sub    esp,0x14
c001538b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015390:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015393:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015398:	c1 e2 15             	shl    edx,0x15
c001539b:	29 d0                	sub    eax,edx
c001539d:	50                   	push   eax
c001539e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00153a3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153a9:	05 7c 11 00 00       	add    eax,0x117c
c00153ae:	50                   	push   eax
c00153af:	e8 88 3b ff ff       	call   c0008f3c <TSS::setESP(unsigned long)>
c00153b4:	83 c4 1c             	add    esp,0x1c
c00153b7:	c3                   	ret    

c00153b8 <switchToThread(ThreadControlBlock*)>:
c00153b8:	57                   	push   edi
c00153b9:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00153bf:	56                   	push   esi
c00153c0:	53                   	push   ebx
c00153c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153c5:	85 c9                	test   ecx,ecx
c00153c7:	0f 85 8b 00 00 00    	jne    c0015458 <switchToThread(ThreadControlBlock*)+0xa0>
c00153cd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00153d1:	81 fa ff 00 00 00    	cmp    edx,0xff
c00153d7:	74 7b                	je     c0015454 <switchToThread(ThreadControlBlock*)+0x9c>
c00153d9:	b8 00 04 00 00       	mov    eax,0x400
c00153de:	29 d0                	sub    eax,edx
c00153e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00153e3:	d1 f8                	sar    eax,1
c00153e5:	01 d0                	add    eax,edx
c00153e7:	90                   	nop
c00153e8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00153eb:	e8 04 28 00 00       	call   c0017bf4 <HalQueryPerformanceCounter()>
c00153f0:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00153f5:	89 c6                	mov    esi,eax
c00153f7:	89 d7                	mov    edi,edx
c00153f9:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00153ff:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015404:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001540a:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015410:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015416:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001541c:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015422:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015428:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001542b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001542e:	01 c6                	add    esi,eax
c0015430:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015433:	11 d7                	adc    edi,edx
c0015435:	83 ec 0c             	sub    esp,0xc
c0015438:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001543b:	53                   	push   ebx
c001543c:	e8 36 ae fe ff       	call   c0000277 <switchToThreadASM>
c0015441:	0f 20 c0             	mov    eax,cr0
c0015444:	83 c8 08             	or     eax,0x8
c0015447:	0f 22 c0             	mov    cr0,eax
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	5b                   	pop    ebx
c001544e:	5e                   	pop    esi
c001544f:	5f                   	pop    edi
c0015450:	c3                   	ret    
c0015451:	8d 76 00             	lea    esi,[esi+0x0]
c0015454:	31 c0                	xor    eax,eax
c0015456:	eb 90                	jmp    c00153e8 <switchToThread(ThreadControlBlock*)+0x30>
c0015458:	5b                   	pop    ebx
c0015459:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015463:	5e                   	pop    esi
c0015464:	5f                   	pop    edi
c0015465:	c3                   	ret    
c0015466:	66 90                	xchg   ax,ax

c0015468 <Process::addArgs(char**)>:
c0015468:	57                   	push   edi
c0015469:	56                   	push   esi
c001546a:	53                   	push   ebx
c001546b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001546f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0015473:	85 f6                	test   esi,esi
c0015475:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c001547f:	74 4f                	je     c00154d0 <Process::addArgs(char**)+0x68>
c0015481:	8b 06                	mov    eax,DWORD PTR [esi]
c0015483:	85 c0                	test   eax,eax
c0015485:	74 49                	je     c00154d0 <Process::addArgs(char**)+0x68>
c0015487:	31 db                	xor    ebx,ebx
c0015489:	8d 76 00             	lea    esi,[esi+0x0]
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	50                   	push   eax
c0015490:	e8 eb b0 fe ff       	call   c0000580 <strlen>
c0015495:	83 c0 01             	add    eax,0x1
c0015498:	89 04 24             	mov    DWORD PTR [esp],eax
c001549b:	e8 33 26 ff ff       	call   c0007ad3 <malloc>
c00154a0:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c00154a7:	5a                   	pop    edx
c00154a8:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c00154ab:	83 c3 01             	add    ebx,0x1
c00154ae:	59                   	pop    ecx
c00154af:	52                   	push   edx
c00154b0:	50                   	push   eax
c00154b1:	e8 9a b1 fe ff       	call   c0000650 <strcpy>
c00154b6:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c00154bc:	83 c4 10             	add    esp,0x10
c00154bf:	83 c1 01             	add    ecx,0x1
c00154c2:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c00154c8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00154cb:	85 c0                	test   eax,eax
c00154cd:	75 bd                	jne    c001548c <Process::addArgs(char**)+0x24>
c00154cf:	90                   	nop
c00154d0:	5b                   	pop    ebx
c00154d1:	5e                   	pop    esi
c00154d2:	5f                   	pop    edi
c00154d3:	c3                   	ret    

c00154d4 <Process::Process(char const*, Process*, char**)>:
c00154d4:	56                   	push   esi
c00154d5:	53                   	push   ebx
c00154d6:	83 ec 14             	sub    esp,0x14
c00154d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154dd:	05 0c 02 00 00       	add    eax,0x20c
c00154e2:	bb 07 00 00 00       	mov    ebx,0x7
c00154e7:	89 c6                	mov    esi,eax
c00154e9:	8d 76 00             	lea    esi,[esi+0x0]
c00154ec:	85 db                	test   ebx,ebx
c00154ee:	78 14                	js     c0015504 <Process::Process(char const*, Process*, char**)+0x30>
c00154f0:	83 ec 0c             	sub    esp,0xc
c00154f3:	56                   	push   esi
c00154f4:	e8 2f a6 00 00       	call   c001fb28 <ThreadControlBlock::ThreadControlBlock()>
c00154f9:	83 c4 10             	add    esp,0x10
c00154fc:	83 c6 5f             	add    esi,0x5f
c00154ff:	83 eb 01             	sub    ebx,0x1
c0015502:	eb e8                	jmp    c00154ec <Process::Process(char const*, Process*, char**)+0x18>
c0015504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015508:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001550f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015513:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001551a:	83 ec 0c             	sub    esp,0xc
c001551d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015521:	e8 1c bb ff ff       	call   c0011042 <KeNewProcessEnv(Process*)>
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	89 c2                	mov    edx,eax
c001552b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001552f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015539:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015542:	a1 00 35 02 c0       	mov    eax,ds:0xc0023500
c0015547:	8d 50 01             	lea    edx,[eax+0x1]
c001554a:	89 15 00 35 02 c0    	mov    DWORD PTR ds:0xc0023500,edx
c0015550:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015554:	89 02                	mov    DWORD PTR [edx],eax
c0015556:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001555e:	83 ec 0c             	sub    esp,0xc
c0015561:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015565:	e8 69 25 ff ff       	call   c0007ad3 <malloc>
c001556a:	83 c4 10             	add    esp,0x10
c001556d:	89 c3                	mov    ebx,eax
c001556f:	83 ec 08             	sub    esp,0x8
c0015572:	6a 00                	push   0x0
c0015574:	53                   	push   ebx
c0015575:	e8 d8 4a ff ff       	call   c000a052 <VAS::VAS(bool)>
c001557a:	83 c4 10             	add    esp,0x10
c001557d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015581:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001558b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015595:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015599:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001559d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00155a3:	e8 be c0 ff ff       	call   c0011666 <KeInitSignals()>
c00155a8:	89 c2                	mov    edx,eax
c00155aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ae:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00155b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155be:	85 c0                	test   eax,eax
c00155c0:	74 42                	je     c0015604 <Process::Process(char const*, Process*, char**)+0x130>
c00155c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155cc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00155d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00155dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155e6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00155ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f0:	05 0c 01 00 00       	add    eax,0x10c
c00155f5:	83 ec 08             	sub    esp,0x8
c00155f8:	52                   	push   edx
c00155f9:	50                   	push   eax
c00155fa:	e8 51 b0 fe ff       	call   c0000650 <strcpy>
c00155ff:	83 c4 10             	add    esp,0x10
c0015602:	eb 64                	jmp    c0015668 <Process::Process(char const*, Process*, char**)+0x194>
c0015604:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c001560c:	83 ec 0c             	sub    esp,0xc
c001560f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015613:	e8 bb 24 ff ff       	call   c0007ad3 <malloc>
c0015618:	83 c4 10             	add    esp,0x10
c001561b:	89 c3                	mov    ebx,eax
c001561d:	83 ec 08             	sub    esp,0x8
c0015620:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015624:	53                   	push   ebx
c0015625:	e8 42 36 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015631:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015641:	83 ec 0c             	sub    esp,0xc
c0015644:	50                   	push   eax
c0015645:	e8 d0 2e ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c001564a:	83 c4 10             	add    esp,0x10
c001564d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015651:	05 0c 01 00 00       	add    eax,0x10c
c0015656:	83 ec 08             	sub    esp,0x8
c0015659:	68 01 23 02 c0       	push   0xc0022301
c001565e:	50                   	push   eax
c001565f:	e8 ec af fe ff       	call   c0000650 <strcpy>
c0015664:	83 c4 10             	add    esp,0x10
c0015667:	90                   	nop
c0015668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001566c:	83 c0 0c             	add    eax,0xc
c001566f:	83 ec 08             	sub    esp,0x8
c0015672:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015676:	50                   	push   eax
c0015677:	e8 d4 af fe ff       	call   c0000650 <strcpy>
c001567c:	83 c4 10             	add    esp,0x10
c001567f:	83 ec 08             	sub    esp,0x8
c0015682:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015686:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001568a:	e8 d9 fd ff ff       	call   c0015468 <Process::addArgs(char**)>
c001568f:	83 c4 10             	add    esp,0x10
c0015692:	83 ec 08             	sub    esp,0x8
c0015695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015699:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001569d:	e8 3f ed ff ff       	call   c00143e1 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00156a2:	83 c4 10             	add    esp,0x10
c00156a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00156a9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00156ad:	83 f0 01             	xor    eax,0x1
c00156b0:	88 c2                	mov    dl,al
c00156b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00156bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00156c1:	83 ec 04             	sub    esp,0x4
c00156c4:	50                   	push   eax
c00156c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156c9:	68 58 23 02 c0       	push   0xc0022358
c00156ce:	e8 37 52 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00156d3:	83 c4 10             	add    esp,0x10
c00156d6:	90                   	nop
c00156d7:	83 c4 14             	add    esp,0x14
c00156da:	5b                   	pop    ebx
c00156db:	5e                   	pop    esi
c00156dc:	c3                   	ret    
c00156dd:	90                   	nop
c00156de:	66 90                	xchg   ax,ax

c00156e0 <Process::Process(bool, char const*, Process*, char**)>:
c00156e0:	56                   	push   esi
c00156e1:	53                   	push   ebx
c00156e2:	83 ec 24             	sub    esp,0x24
c00156e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00156e9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00156ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f1:	05 0c 02 00 00       	add    eax,0x20c
c00156f6:	bb 07 00 00 00       	mov    ebx,0x7
c00156fb:	89 c6                	mov    esi,eax
c00156fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015700:	85 db                	test   ebx,ebx
c0015702:	78 14                	js     c0015718 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015704:	83 ec 0c             	sub    esp,0xc
c0015707:	56                   	push   esi
c0015708:	e8 1b a4 00 00       	call   c001fb28 <ThreadControlBlock::ThreadControlBlock()>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	83 c6 5f             	add    esi,0x5f
c0015713:	83 eb 01             	sub    ebx,0x1
c0015716:	eb e8                	jmp    c0015700 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001571c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015727:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001572e:	83 ec 0c             	sub    esp,0xc
c0015731:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015735:	e8 08 b9 ff ff       	call   c0011042 <KeNewProcessEnv(Process*)>
c001573a:	83 c4 10             	add    esp,0x10
c001573d:	89 c2                	mov    edx,eax
c001573f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015743:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001574d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015756:	a1 00 35 02 c0       	mov    eax,ds:0xc0023500
c001575b:	8d 50 01             	lea    edx,[eax+0x1]
c001575e:	89 15 00 35 02 c0    	mov    DWORD PTR ds:0xc0023500,edx
c0015764:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015768:	89 02                	mov    DWORD PTR [edx],eax
c001576a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015772:	83 ec 0c             	sub    esp,0xc
c0015775:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015779:	e8 55 23 ff ff       	call   c0007ad3 <malloc>
c001577e:	83 c4 10             	add    esp,0x10
c0015781:	89 c3                	mov    ebx,eax
c0015783:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015788:	83 ec 08             	sub    esp,0x8
c001578b:	50                   	push   eax
c001578c:	53                   	push   ebx
c001578d:	e8 c0 48 ff ff       	call   c000a052 <VAS::VAS(bool)>
c0015792:	83 c4 10             	add    esp,0x10
c0015795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015799:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001579f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00157ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00157b5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00157bb:	e8 a6 be ff ff       	call   c0011666 <KeInitSignals()>
c00157c0:	89 c2                	mov    edx,eax
c00157c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00157cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157d6:	85 c0                	test   eax,eax
c00157d8:	74 42                	je     c001581c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00157da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157de:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157e4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157ee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00157f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015808:	05 0c 01 00 00       	add    eax,0x10c
c001580d:	83 ec 08             	sub    esp,0x8
c0015810:	52                   	push   edx
c0015811:	50                   	push   eax
c0015812:	e8 39 ae fe ff       	call   c0000650 <strcpy>
c0015817:	83 c4 10             	add    esp,0x10
c001581a:	eb 64                	jmp    c0015880 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001581c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001582b:	e8 a3 22 ff ff       	call   c0007ad3 <malloc>
c0015830:	83 c4 10             	add    esp,0x10
c0015833:	89 c3                	mov    ebx,eax
c0015835:	83 ec 08             	sub    esp,0x8
c0015838:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001583c:	53                   	push   ebx
c001583d:	e8 2a 34 ff ff       	call   c0008c6c <VgaText::VgaText(char const*)>
c0015842:	83 c4 10             	add    esp,0x10
c0015845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015849:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001584f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015853:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015859:	83 ec 0c             	sub    esp,0xc
c001585c:	50                   	push   eax
c001585d:	e8 b8 2c ff ff       	call   c000851a <addToTerminalCycle(VgaText*)>
c0015862:	83 c4 10             	add    esp,0x10
c0015865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015869:	05 0c 01 00 00       	add    eax,0x10c
c001586e:	83 ec 08             	sub    esp,0x8
c0015871:	68 01 23 02 c0       	push   0xc0022301
c0015876:	50                   	push   eax
c0015877:	e8 d4 ad fe ff       	call   c0000650 <strcpy>
c001587c:	83 c4 10             	add    esp,0x10
c001587f:	90                   	nop
c0015880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015884:	83 c0 0c             	add    eax,0xc
c0015887:	83 ec 08             	sub    esp,0x8
c001588a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001588e:	50                   	push   eax
c001588f:	e8 bc ad fe ff       	call   c0000650 <strcpy>
c0015894:	83 c4 10             	add    esp,0x10
c0015897:	83 ec 08             	sub    esp,0x8
c001589a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001589e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00158a2:	e8 c1 fb ff ff       	call   c0015468 <Process::addArgs(char**)>
c00158a7:	83 c4 10             	add    esp,0x10
c00158aa:	90                   	nop
c00158ab:	83 c4 24             	add    esp,0x24
c00158ae:	5b                   	pop    ebx
c00158af:	5e                   	pop    esi
c00158b0:	c3                   	ret    
c00158b1:	8d 76 00             	lea    esi,[esi+0x0]

c00158b4 <taskStartupFunction>:
c00158b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00158bc:	c3                   	ret    
c00158bd:	90                   	nop
c00158be:	66 90                	xchg   ax,ax

c00158c0 <Semaphore::Semaphore(int)>:
c00158c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00158c8:	89 10                	mov    DWORD PTR [eax],edx
c00158ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158ce:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00158d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00158eb:	90                   	nop
c00158ec:	c3                   	ret    
c00158ed:	90                   	nop
c00158ee:	66 90                	xchg   ax,ax

c00158f0 <Mutex::Mutex()>:
c00158f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158f4:	6a 01                	push   0x1
c00158f6:	50                   	push   eax
c00158f7:	e8 c4 ff ff ff       	call   c00158c0 <Semaphore::Semaphore(int)>
c00158fc:	83 c4 08             	add    esp,0x8
c00158ff:	90                   	nop
c0015900:	c3                   	ret    
c0015901:	90                   	nop
c0015902:	66 90                	xchg   ax,ax

c0015904 <Process::createThread(void (*)(void*), void*, int)>:
c0015904:	57                   	push   edi
c0015905:	31 c9                	xor    ecx,ecx
c0015907:	56                   	push   esi
c0015908:	53                   	push   ebx
c0015909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001590d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015914:	89 f2                	mov    edx,esi
c0015916:	66 90                	xchg   ax,ax
c0015918:	0f b7 c2             	movzx  eax,dx
c001591b:	80 e2 01             	and    dl,0x1
c001591e:	74 14                	je     c0015934 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015920:	d1 f8                	sar    eax,1
c0015922:	83 c1 01             	add    ecx,0x1
c0015925:	83 f9 10             	cmp    ecx,0x10
c0015928:	89 c2                	mov    edx,eax
c001592a:	75 ec                	jne    c0015918 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001592c:	31 db                	xor    ebx,ebx
c001592e:	89 d8                	mov    eax,ebx
c0015930:	5b                   	pop    ebx
c0015931:	5e                   	pop    esi
c0015932:	5f                   	pop    edi
c0015933:	c3                   	ret    
c0015934:	b8 01 00 00 00       	mov    eax,0x1
c0015939:	d3 e0                	shl    eax,cl
c001593b:	09 c6                	or     esi,eax
c001593d:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015944:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0015947:	c1 e0 05             	shl    eax,0x5
c001594a:	29 c8                	sub    eax,ecx
c001594c:	01 d8                	add    eax,ebx
c001594e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015955:	75 0d                	jne    c0015964 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015957:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015961:	8d 76 00             	lea    esi,[esi+0x0]
c0015964:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001596a:	8d 34 49             	lea    esi,[ecx+ecx*2]
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	c1 e6 05             	shl    esi,0x5
c0015973:	29 ce                	sub    esi,ecx
c0015975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015978:	8d 04 33             	lea    eax,[ebx+esi*1]
c001597b:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015981:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0015987:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c001598d:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0015994:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001599a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001599e:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00159a4:	89 ca                	mov    edx,ecx
c00159a6:	f7 da                	neg    edx
c00159a8:	c1 e2 15             	shl    edx,0x15
c00159ab:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00159b1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00159b7:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00159bb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00159c5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00159cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159cf:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00159d5:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00159df:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00159e9:	68 00 01 00 00       	push   0x100
c00159ee:	e8 e0 20 ff ff       	call   c0007ad3 <malloc>
c00159f3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00159f6:	58                   	pop    eax
c00159f7:	5a                   	pop    edx
c00159f8:	53                   	push   ebx
c00159f9:	68 e4 96 02 c0       	push   0xc00296e4
c00159fe:	e8 bd 9e 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a03:	83 c4 10             	add    esp,0x10
c0015a06:	89 d8                	mov    eax,ebx
c0015a08:	5b                   	pop    ebx
c0015a09:	5e                   	pop    esi
c0015a0a:	5f                   	pop    edi
c0015a0b:	c3                   	ret    

c0015a0c <Process::createUserThread()>:
c0015a0c:	83 ec 0c             	sub    esp,0xc
c0015a0f:	68 80 00 00 00       	push   0x80
c0015a14:	6a 00                	push   0x0
c0015a16:	68 60 53 01 c0       	push   0xc0015360
c0015a1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a1f:	50                   	push   eax
c0015a20:	e8 df fe ff ff       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c0015a25:	83 c4 1c             	add    esp,0x1c
c0015a28:	c3                   	ret    
c0015a29:	8d 76 00             	lea    esi,[esi+0x0]

c0015a2c <setupMultitasking(void (*)())>:
c0015a2c:	56                   	push   esi
c0015a2d:	53                   	push   ebx
c0015a2e:	83 ec 04             	sub    esp,0x4
c0015a31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a35:	eb 11                	jmp    c0015a48 <setupMultitasking(void (*)())+0x1c>
c0015a37:	90                   	nop
c0015a38:	83 ec 0c             	sub    esp,0xc
c0015a3b:	68 e4 96 02 c0       	push   0xc00296e4
c0015a40:	e8 bf 9d 00 00       	call   c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a45:	83 c4 10             	add    esp,0x10
c0015a48:	83 ec 0c             	sub    esp,0xc
c0015a4b:	68 e4 96 02 c0       	push   0xc00296e4
c0015a50:	e8 8b 9d 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a55:	83 c4 10             	add    esp,0x10
c0015a58:	84 c0                	test   al,al
c0015a5a:	74 dc                	je     c0015a38 <setupMultitasking(void (*)())+0xc>
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	68 24 07 00 00       	push   0x724
c0015a64:	e8 6a 20 ff ff       	call   c0007ad3 <malloc>
c0015a69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015a70:	6a 00                	push   0x0
c0015a72:	68 05 23 02 c0       	push   0xc0022305
c0015a77:	6a 01                	push   0x1
c0015a79:	50                   	push   eax
c0015a7a:	89 c3                	mov    ebx,eax
c0015a7c:	e8 5f fc ff ff       	call   c00156e0 <Process::Process(bool, char const*, Process*, char**)>
c0015a81:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015a87:	83 c4 14             	add    esp,0x14
c0015a8a:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015a90:	50                   	push   eax
c0015a91:	e8 d9 2c ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0015a96:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a9d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015aa7:	83 c8 01             	or     eax,0x1
c0015aaa:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015ab1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ab7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015aba:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015ac4:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015aca:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015ad4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015ada:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015ae4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015aee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015af4:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015afa:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015b04:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015b0e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015b15:	e8 b9 1f ff ff       	call   c0007ad3 <malloc>
c0015b1a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015b20:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015b26:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015b2c:	5a                   	pop    edx
c0015b2d:	59                   	pop    ecx
c0015b2e:	68 01 23 02 c0       	push   0xc0022301
c0015b33:	50                   	push   eax
c0015b34:	e8 17 ab fe ff       	call   c0000650 <strcpy>
c0015b39:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015b40:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015b44:	83 c4 14             	add    esp,0x14
c0015b47:	5b                   	pop    ebx
c0015b48:	5e                   	pop    esi
c0015b49:	e9 1b a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015b4e:	66 90                	xchg   ax,ax

c0015b50 <schedule()>:
c0015b50:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015b56:	85 d2                	test   edx,edx
c0015b58:	74 0e                	je     c0015b68 <schedule()+0x18>
c0015b5a:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015b64:	c3                   	ret    
c0015b65:	8d 76 00             	lea    esi,[esi+0x0]
c0015b68:	53                   	push   ebx
c0015b69:	83 ec 14             	sub    esp,0x14
c0015b6c:	68 e4 96 02 c0       	push   0xc00296e4
c0015b71:	e8 6a 9c 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b76:	83 c4 10             	add    esp,0x10
c0015b79:	84 c0                	test   al,al
c0015b7b:	75 3f                	jne    c0015bbc <schedule()+0x6c>
c0015b7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b85:	83 fa 01             	cmp    edx,0x1
c0015b88:	74 3a                	je     c0015bc4 <schedule()+0x74>
c0015b8a:	66 90                	xchg   ax,ax
c0015b8c:	83 ec 0c             	sub    esp,0xc
c0015b8f:	68 e4 96 02 c0       	push   0xc00296e4
c0015b94:	e8 63 9c 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b99:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015ba0:	89 c3                	mov    ebx,eax
c0015ba2:	e8 5d 9c 00 00       	call   c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ba7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015bae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015bb1:	e8 02 f8 ff ff       	call   c00153b8 <switchToThread(ThreadControlBlock*)>
c0015bb6:	83 c4 10             	add    esp,0x10
c0015bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bbc:	83 c4 08             	add    esp,0x8
c0015bbf:	5b                   	pop    ebx
c0015bc0:	c3                   	ret    
c0015bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015bcb:	83 ec 08             	sub    esp,0x8
c0015bce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bd3:	50                   	push   eax
c0015bd4:	68 e4 96 02 c0       	push   0xc00296e4
c0015bd9:	e8 e2 9c 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bde:	83 c4 10             	add    esp,0x10
c0015be1:	eb a9                	jmp    c0015b8c <schedule()+0x3c>
c0015be3:	90                   	nop

c0015be4 <Semaphore::tryAcquire()>:
c0015be4:	53                   	push   ebx
c0015be5:	83 ec 08             	sub    esp,0x8
c0015be8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bec:	fa                   	cli    
c0015bed:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015bf3:	8d 42 01             	lea    eax,[edx+0x1]
c0015bf6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015bfb:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015c00:	8d 58 01             	lea    ebx,[eax+0x1]
c0015c03:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015c09:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015c0c:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015c0e:	7c 2c                	jl     c0015c3c <Semaphore::tryAcquire()+0x58>
c0015c10:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c15:	85 c0                	test   eax,eax
c0015c17:	75 0b                	jne    c0015c24 <Semaphore::tryAcquire()+0x40>
c0015c19:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015c1e:	85 c0                	test   eax,eax
c0015c20:	75 5a                	jne    c0015c7c <Semaphore::tryAcquire()+0x98>
c0015c22:	66 90                	xchg   ax,ax
c0015c24:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c2a:	31 c0                	xor    eax,eax
c0015c2c:	85 d2                	test   edx,edx
c0015c2e:	75 04                	jne    c0015c34 <Semaphore::tryAcquire()+0x50>
c0015c30:	fb                   	sti    
c0015c31:	8d 76 00             	lea    esi,[esi+0x0]
c0015c34:	83 c4 08             	add    esp,0x8
c0015c37:	5b                   	pop    ebx
c0015c38:	c3                   	ret    
c0015c39:	8d 76 00             	lea    esi,[esi+0x0]
c0015c3c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015c41:	83 c3 01             	add    ebx,0x1
c0015c44:	85 c0                	test   eax,eax
c0015c46:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015c49:	75 21                	jne    c0015c6c <Semaphore::tryAcquire()+0x88>
c0015c4b:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015c51:	85 c9                	test   ecx,ecx
c0015c53:	74 17                	je     c0015c6c <Semaphore::tryAcquire()+0x88>
c0015c55:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c5f:	e8 ec fe ff ff       	call   c0015b50 <schedule()>
c0015c64:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c69:	8d 50 ff             	lea    edx,[eax-0x1]
c0015c6c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c72:	85 d2                	test   edx,edx
c0015c74:	b0 01                	mov    al,0x1
c0015c76:	75 bc                	jne    c0015c34 <Semaphore::tryAcquire()+0x50>
c0015c78:	eb b6                	jmp    c0015c30 <Semaphore::tryAcquire()+0x4c>
c0015c7a:	66 90                	xchg   ax,ax
c0015c7c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c86:	e8 c5 fe ff ff       	call   c0015b50 <schedule()>
c0015c8b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c90:	8d 50 ff             	lea    edx,[eax-0x1]
c0015c93:	31 c0                	xor    eax,eax
c0015c95:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c9b:	85 d2                	test   edx,edx
c0015c9d:	75 95                	jne    c0015c34 <Semaphore::tryAcquire()+0x50>
c0015c9f:	eb 8f                	jmp    c0015c30 <Semaphore::tryAcquire()+0x4c>
c0015ca1:	90                   	nop
c0015ca2:	66 90                	xchg   ax,ax

c0015ca4 <Semaphore::assertLocked(char const*)>:
c0015ca4:	83 ec 0c             	sub    esp,0xc
c0015ca7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015cab:	fa                   	cli    
c0015cac:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015cb2:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015cb7:	83 c1 01             	add    ecx,0x1
c0015cba:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015cc0:	8d 48 01             	lea    ecx,[eax+0x1]
c0015cc3:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015cc9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015ccb:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015cce:	7c 28                	jl     c0015cf8 <Semaphore::assertLocked(char const*)+0x54>
c0015cd0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cd5:	85 c0                	test   eax,eax
c0015cd7:	75 0b                	jne    c0015ce4 <Semaphore::assertLocked(char const*)+0x40>
c0015cd9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cde:	85 c0                	test   eax,eax
c0015ce0:	75 32                	jne    c0015d14 <Semaphore::assertLocked(char const*)+0x70>
c0015ce2:	66 90                	xchg   ax,ax
c0015ce4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ce9:	83 e8 01             	sub    eax,0x1
c0015cec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cf1:	75 01                	jne    c0015cf4 <Semaphore::assertLocked(char const*)+0x50>
c0015cf3:	fb                   	sti    
c0015cf4:	83 c4 0c             	add    esp,0xc
c0015cf7:	c3                   	ret    
c0015cf8:	83 ec 0c             	sub    esp,0xc
c0015cfb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cff:	52                   	push   edx
c0015d00:	e8 48 b5 ff ff       	call   c001124d <KePanic(char const*)>
c0015d05:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d0a:	83 c4 10             	add    esp,0x10
c0015d0d:	83 e8 01             	sub    eax,0x1
c0015d10:	eb be                	jmp    c0015cd0 <Semaphore::assertLocked(char const*)+0x2c>
c0015d12:	66 90                	xchg   ax,ax
c0015d14:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d1e:	e8 2d fe ff ff       	call   c0015b50 <schedule()>
c0015d23:	eb bf                	jmp    c0015ce4 <Semaphore::assertLocked(char const*)+0x40>
c0015d25:	8d 76 00             	lea    esi,[esi+0x0]

c0015d28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d37:	e8 14 fe ff ff       	call   c0015b50 <schedule()>
c0015d3c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d41:	83 e8 01             	sub    eax,0x1
c0015d44:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d49:	75 01                	jne    c0015d4c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015d4b:	fb                   	sti    
c0015d4c:	83 c4 0c             	add    esp,0xc
c0015d4f:	c3                   	ret    

c0015d50 <blockTask(TaskState)>:
c0015d50:	83 ec 0c             	sub    esp,0xc
c0015d53:	fa                   	cli    
c0015d54:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d5d:	83 c0 01             	add    eax,0x1
c0015d60:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d6d:	e8 de fd ff ff       	call   c0015b50 <schedule()>
c0015d72:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d77:	83 e8 01             	sub    eax,0x1
c0015d7a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d7f:	75 03                	jne    c0015d84 <blockTask(TaskState)+0x34>
c0015d81:	fb                   	sti    
c0015d82:	66 90                	xchg   ax,ax
c0015d84:	83 c4 0c             	add    esp,0xc
c0015d87:	c3                   	ret    

c0015d88 <waitTask(int, int*, int)>:
c0015d88:	83 ec 18             	sub    esp,0x18
c0015d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d94:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015da3:	6a 07                	push   0x7
c0015da5:	e8 a6 ff ff ff       	call   c0015d50 <blockTask(TaskState)>
c0015daa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015db5:	85 d2                	test   edx,edx
c0015db7:	74 0b                	je     c0015dc4 <waitTask(int, int*, int)+0x3c>
c0015db9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015dbc:	89 02                	mov    DWORD PTR [edx],eax
c0015dbe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dc3:	90                   	nop
c0015dc4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015dc7:	83 c4 0c             	add    esp,0xc
c0015dca:	c3                   	ret    
c0015dcb:	90                   	nop

c0015dcc <milliTenthSleepUntil(unsigned int)>:
c0015dcc:	83 ec 0c             	sub    esp,0xc
c0015dcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd3:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015dd9:	76 05                	jbe    c0015de0 <milliTenthSleepUntil(unsigned int)+0x14>
c0015ddb:	90                   	nop
c0015ddc:	83 c4 0c             	add    esp,0xc
c0015ddf:	c3                   	ret    
c0015de0:	fa                   	cli    
c0015de1:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015de7:	83 ec 08             	sub    esp,0x8
c0015dea:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015df0:	83 c2 01             	add    edx,0x1
c0015df3:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015df9:	83 c1 01             	add    ecx,0x1
c0015dfc:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e02:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e08:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015e0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e10:	50                   	push   eax
c0015e11:	68 d8 96 02 c0       	push   0xc00296d8
c0015e16:	e8 a5 9a 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e1b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015e22:	e8 29 ff ff ff       	call   c0015d50 <blockTask(TaskState)>
c0015e27:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e2c:	83 c4 10             	add    esp,0x10
c0015e2f:	83 e8 01             	sub    eax,0x1
c0015e32:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e37:	85 c0                	test   eax,eax
c0015e39:	75 09                	jne    c0015e44 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e3b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e40:	85 c0                	test   eax,eax
c0015e42:	75 14                	jne    c0015e58 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015e44:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e49:	83 e8 01             	sub    eax,0x1
c0015e4c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e51:	75 89                	jne    c0015ddc <milliTenthSleepUntil(unsigned int)+0x10>
c0015e53:	fb                   	sti    
c0015e54:	83 c4 0c             	add    esp,0xc
c0015e57:	c3                   	ret    
c0015e58:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e62:	e8 e9 fc ff ff       	call   c0015b50 <schedule()>
c0015e67:	eb db                	jmp    c0015e44 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e69:	8d 76 00             	lea    esi,[esi+0x0]

c0015e6c <milliTenthSleep(unsigned int)>:
c0015e6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e70:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015e75:	01 c2                	add    edx,eax
c0015e77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015e7b:	e9 4c ff ff ff       	jmp    c0015dcc <milliTenthSleepUntil(unsigned int)>

c0015e80 <sleep(unsigned int)>:
c0015e80:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0015e88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e8c:	eb de                	jmp    c0015e6c <milliTenthSleep(unsigned int)>
c0015e8e:	66 90                	xchg   ax,ax

c0015e90 <Semaphore::acquire()>:
c0015e90:	83 ec 0c             	sub    esp,0xc
c0015e93:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e97:	fa                   	cli    
c0015e98:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e9d:	83 c0 01             	add    eax,0x1
c0015ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ea5:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015eaa:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ead:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015eb3:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015eb6:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015eb8:	7d 2e                	jge    c0015ee8 <Semaphore::acquire()+0x58>
c0015eba:	83 c1 01             	add    ecx,0x1
c0015ebd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015ec0:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ec5:	85 c0                	test   eax,eax
c0015ec7:	75 0b                	jne    c0015ed4 <Semaphore::acquire()+0x44>
c0015ec9:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ece:	85 c0                	test   eax,eax
c0015ed0:	75 66                	jne    c0015f38 <Semaphore::acquire()+0xa8>
c0015ed2:	66 90                	xchg   ax,ax
c0015ed4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ed9:	83 e8 01             	sub    eax,0x1
c0015edc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ee1:	75 01                	jne    c0015ee4 <Semaphore::acquire()+0x54>
c0015ee3:	fb                   	sti    
c0015ee4:	83 c4 0c             	add    esp,0xc
c0015ee7:	c3                   	ret    
c0015ee8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015ef4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015ef7:	85 c9                	test   ecx,ecx
c0015ef9:	74 51                	je     c0015f4c <Semaphore::acquire()+0xbc>
c0015efb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015efe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f04:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015f07:	90                   	nop
c0015f08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0d:	83 ec 0c             	sub    esp,0xc
c0015f10:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015f13:	68 84 23 02 c0       	push   0xc0022384
c0015f18:	e8 ed 49 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0015f1d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015f24:	e8 27 fe ff ff       	call   c0015d50 <blockTask(TaskState)>
c0015f29:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	83 e8 01             	sub    eax,0x1
c0015f34:	eb 8a                	jmp    c0015ec0 <Semaphore::acquire()+0x30>
c0015f36:	66 90                	xchg   ax,ax
c0015f38:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f42:	e8 09 fc ff ff       	call   c0015b50 <schedule()>
c0015f47:	eb 8b                	jmp    c0015ed4 <Semaphore::acquire()+0x44>
c0015f49:	8d 76 00             	lea    esi,[esi+0x0]
c0015f4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f51:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f54:	eb b2                	jmp    c0015f08 <Semaphore::acquire()+0x78>
c0015f56:	66 90                	xchg   ax,ax

c0015f58 <taskReturned>:
c0015f58:	83 ec 18             	sub    esp,0x18
c0015f5b:	68 a4 23 02 c0       	push   0xc00223a4
c0015f60:	e8 e8 b2 ff ff       	call   c001124d <KePanic(char const*)>
c0015f65:	83 c4 10             	add    esp,0x10
c0015f68:	83 ec 0c             	sub    esp,0xc
c0015f6b:	6a 02                	push   0x2
c0015f6d:	e8 de fd ff ff       	call   c0015d50 <blockTask(TaskState)>
c0015f72:	fa                   	cli    
c0015f73:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f78:	83 c0 01             	add    eax,0x1
c0015f7b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f80:	e8 cb fb ff ff       	call   c0015b50 <schedule()>
c0015f85:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f8a:	83 c4 10             	add    esp,0x10
c0015f8d:	83 e8 01             	sub    eax,0x1
c0015f90:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f95:	85 c0                	test   eax,eax
c0015f97:	75 cf                	jne    c0015f68 <taskReturned+0x10>
c0015f99:	fb                   	sti    
c0015f9a:	eb cc                	jmp    c0015f68 <taskReturned+0x10>

c0015f9c <Thr::processFromPID(int)>:
c0015f9c:	57                   	push   edi
c0015f9d:	56                   	push   esi
c0015f9e:	53                   	push   ebx
c0015f9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fa3:	fa                   	cli    
c0015fa4:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015faa:	83 ec 0c             	sub    esp,0xc
c0015fad:	68 e4 96 02 c0       	push   0xc00296e4
c0015fb2:	83 c1 01             	add    ecx,0x1
c0015fb5:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015fbb:	e8 3c 98 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fc0:	83 c4 10             	add    esp,0x10
c0015fc3:	89 c7                	mov    edi,eax
c0015fc5:	eb 15                	jmp    c0015fdc <Thr::processFromPID(int)+0x40>
c0015fc7:	90                   	nop
c0015fc8:	83 ec 0c             	sub    esp,0xc
c0015fcb:	68 e4 96 02 c0       	push   0xc00296e4
c0015fd0:	e8 27 98 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fd5:	83 c4 10             	add    esp,0x10
c0015fd8:	39 f8                	cmp    eax,edi
c0015fda:	74 50                	je     c001602c <Thr::processFromPID(int)+0x90>
c0015fdc:	83 ec 0c             	sub    esp,0xc
c0015fdf:	68 e4 96 02 c0       	push   0xc00296e4
c0015fe4:	e8 13 98 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fe9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015ff0:	89 c3                	mov    ebx,eax
c0015ff2:	e8 0d 98 00 00       	call   c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ff7:	58                   	pop    eax
c0015ff8:	5a                   	pop    edx
c0015ff9:	53                   	push   ebx
c0015ffa:	68 e4 96 02 c0       	push   0xc00296e4
c0015fff:	e8 bc 98 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016004:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016007:	83 c4 10             	add    esp,0x10
c001600a:	39 30                	cmp    DWORD PTR [eax],esi
c001600c:	75 ba                	jne    c0015fc8 <Thr::processFromPID(int)+0x2c>
c001600e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016013:	83 e8 01             	sub    eax,0x1
c0016016:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001601b:	74 0b                	je     c0016028 <Thr::processFromPID(int)+0x8c>
c001601d:	8d 76 00             	lea    esi,[esi+0x0]
c0016020:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016023:	90                   	nop
c0016024:	5b                   	pop    ebx
c0016025:	5e                   	pop    esi
c0016026:	5f                   	pop    edi
c0016027:	c3                   	ret    
c0016028:	fb                   	sti    
c0016029:	eb f5                	jmp    c0016020 <Thr::processFromPID(int)+0x84>
c001602b:	90                   	nop
c001602c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016031:	8d 50 ff             	lea    edx,[eax-0x1]
c0016034:	31 c0                	xor    eax,eax
c0016036:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001603c:	85 d2                	test   edx,edx
c001603e:	75 e4                	jne    c0016024 <Thr::processFromPID(int)+0x88>
c0016040:	fb                   	sti    
c0016041:	5b                   	pop    ebx
c0016042:	5e                   	pop    esi
c0016043:	5f                   	pop    edi
c0016044:	c3                   	ret    
c0016045:	8d 76 00             	lea    esi,[esi+0x0]

c0016048 <unblockTask(ThreadControlBlock*)>:
c0016048:	53                   	push   ebx
c0016049:	83 ec 08             	sub    esp,0x8
c001604c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016050:	fa                   	cli    
c0016051:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016056:	83 c0 01             	add    eax,0x1
c0016059:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001605e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016061:	85 c0                	test   eax,eax
c0016063:	74 67                	je     c00160cc <unblockTask(ThreadControlBlock*)+0x84>
c0016065:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016068:	83 f8 01             	cmp    eax,0x1
c001606b:	74 37                	je     c00160a4 <unblockTask(ThreadControlBlock*)+0x5c>
c001606d:	83 ec 0c             	sub    esp,0xc
c0016070:	68 e4 96 02 c0       	push   0xc00296e4
c0016075:	e8 82 97 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001607a:	83 c4 10             	add    esp,0x10
c001607d:	85 c0                	test   eax,eax
c001607f:	75 1b                	jne    c001609c <unblockTask(ThreadControlBlock*)+0x54>
c0016081:	eb 5d                	jmp    c00160e0 <unblockTask(ThreadControlBlock*)+0x98>
c0016083:	90                   	nop
c0016084:	83 ec 08             	sub    esp,0x8
c0016087:	50                   	push   eax
c0016088:	68 e4 96 02 c0       	push   0xc00296e4
c001608d:	e8 8a 9a 00 00       	call   c001fb1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016092:	83 c4 10             	add    esp,0x10
c0016095:	85 c0                	test   eax,eax
c0016097:	74 47                	je     c00160e0 <unblockTask(ThreadControlBlock*)+0x98>
c0016099:	8d 76 00             	lea    esi,[esi+0x0]
c001609c:	39 c3                	cmp    ebx,eax
c001609e:	75 e4                	jne    c0016084 <unblockTask(ThreadControlBlock*)+0x3c>
c00160a0:	eb 12                	jmp    c00160b4 <unblockTask(ThreadControlBlock*)+0x6c>
c00160a2:	66 90                	xchg   ax,ax
c00160a4:	83 ec 0c             	sub    esp,0xc
c00160a7:	68 23 23 02 c0       	push   0xc0022323
c00160ac:	e8 59 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00160b1:	83 c4 10             	add    esp,0x10
c00160b4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160b9:	83 e8 01             	sub    eax,0x1
c00160bc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160c1:	75 01                	jne    c00160c4 <unblockTask(ThreadControlBlock*)+0x7c>
c00160c3:	fb                   	sti    
c00160c4:	83 c4 08             	add    esp,0x8
c00160c7:	5b                   	pop    ebx
c00160c8:	c3                   	ret    
c00160c9:	8d 76 00             	lea    esi,[esi+0x0]
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	68 0c 23 02 c0       	push   0xc002230c
c00160d4:	e8 31 48 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00160d9:	83 c4 10             	add    esp,0x10
c00160dc:	eb d6                	jmp    c00160b4 <unblockTask(ThreadControlBlock*)+0x6c>
c00160de:	66 90                	xchg   ax,ax
c00160e0:	83 ec 08             	sub    esp,0x8
c00160e3:	53                   	push   ebx
c00160e4:	68 e4 96 02 c0       	push   0xc00296e4
c00160e9:	e8 d2 97 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160ee:	83 c4 10             	add    esp,0x10
c00160f1:	eb c1                	jmp    c00160b4 <unblockTask(ThreadControlBlock*)+0x6c>
c00160f3:	90                   	nop

c00160f4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00160f4:	55                   	push   ebp
c00160f5:	57                   	push   edi
c00160f6:	56                   	push   esi
c00160f7:	53                   	push   ebx
c00160f8:	83 ec 1c             	sub    esp,0x1c
c00160fb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00160ff:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016102:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016108:	85 ed                	test   ebp,ebp
c001610a:	7e 28                	jle    c0016134 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001610c:	31 f6                	xor    esi,esi
c001610e:	66 90                	xchg   ax,ax
c0016110:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016117:	83 ec 0c             	sub    esp,0xc
c001611a:	83 c6 01             	add    esi,0x1
c001611d:	57                   	push   edi
c001611e:	e8 c0 19 ff ff       	call   c0007ae3 <free>
c0016123:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016126:	83 c4 10             	add    esp,0x10
c0016129:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001612f:	7f df                	jg     c0016110 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016131:	8d 76 00             	lea    esi,[esi+0x0]
c0016134:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001613e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016143:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016146:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016149:	d3 c0                	rol    eax,cl
c001614b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016152:	21 c8                	and    eax,ecx
c0016154:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001615b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001615e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016166:	89 f7                	mov    edi,esi
c0016168:	0f 85 72 01 00 00    	jne    c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001616e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0016174:	85 ed                	test   ebp,ebp
c0016176:	74 1c                	je     c0016194 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016178:	83 ec 0c             	sub    esp,0xc
c001617b:	55                   	push   ebp
c001617c:	e8 dd ad ff ff       	call   c0010f5e <EnvVarContainer::~EnvVarContainer()>
c0016181:	59                   	pop    ecx
c0016182:	5e                   	pop    esi
c0016183:	6a 0c                	push   0xc
c0016185:	55                   	push   ebp
c0016186:	e8 81 46 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001618b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001618e:	83 c4 10             	add    esp,0x10
c0016191:	89 f7                	mov    edi,esi
c0016193:	90                   	nop
c0016194:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001619a:	85 c0                	test   eax,eax
c001619c:	0f 84 b2 00 00 00    	je     c0016254 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161a2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00161a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00161a9:	31 c9                	xor    ecx,ecx
c00161ab:	eb 17                	jmp    c00161c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00161ad:	8d 76 00             	lea    esi,[esi+0x0]
c00161b0:	83 c1 01             	add    ecx,0x1
c00161b3:	83 f9 10             	cmp    ecx,0x10
c00161b6:	0f 84 98 00 00 00    	je     c0016254 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161c2:	66 90                	xchg   ax,ax
c00161c4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00161cb:	d3 fa                	sar    edx,cl
c00161cd:	80 e2 01             	and    dl,0x1
c00161d0:	74 de                	je     c00161b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161d2:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00161d5:	c1 e2 05             	shl    edx,0x5
c00161d8:	29 ca                	sub    edx,ecx
c00161da:	01 d0                	add    eax,edx
c00161dc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00161e2:	83 fd 07             	cmp    ebp,0x7
c00161e5:	75 c9                	jne    c00161b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161e7:	05 40 02 00 00       	add    eax,0x240
c00161ec:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00161ef:	83 fd ff             	cmp    ebp,0xffffffff
c00161f2:	0f 8c f0 00 00 00    	jl     c00162e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00161f8:	0f 84 ae 01 00 00    	je     c00163ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00161fe:	85 ed                	test   ebp,ebp
c0016200:	0f 84 92 01 00 00    	je     c0016398 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016206:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016208:	75 a6                	jne    c00161b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001620a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001620e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016214:	01 d0                	add    eax,edx
c0016216:	66 90                	xchg   ax,ax
c0016218:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001621c:	83 ec 0c             	sub    esp,0xc
c001621f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016225:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016228:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001622e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016235:	50                   	push   eax
c0016236:	e8 0d fe ff ff       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c001623b:	83 c4 10             	add    esp,0x10
c001623e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016241:	89 f7                	mov    edi,esi
c0016243:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016247:	83 c1 01             	add    ecx,0x1
c001624a:	83 f9 10             	cmp    ecx,0x10
c001624d:	0f 85 69 ff ff ff    	jne    c00161bc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0016253:	90                   	nop
c0016254:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001625a:	85 c0                	test   eax,eax
c001625c:	74 62                	je     c00162c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001625e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0016264:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001626a:	74 54                	je     c00162c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001626c:	83 ec 0c             	sub    esp,0xc
c001626f:	68 e4 96 02 c0       	push   0xc00296e4
c0016274:	e8 83 95 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016279:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016280:	89 c7                	mov    edi,eax
c0016282:	e8 59 95 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016287:	83 c4 10             	add    esp,0x10
c001628a:	84 c0                	test   al,al
c001628c:	0f 84 ce 00 00 00    	je     c0016360 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016292:	66 90                	xchg   ax,ax
c0016294:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016297:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001629d:	85 d2                	test   edx,edx
c001629f:	74 0f                	je     c00162b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00162a1:	8b 02                	mov    eax,DWORD PTR [edx]
c00162a3:	83 ec 0c             	sub    esp,0xc
c00162a6:	52                   	push   edx
c00162a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162aa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162ad:	83 c4 10             	add    esp,0x10
c00162b0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00162ba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00162bd:	8d 76 00             	lea    esi,[esi+0x0]
c00162c0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00162c6:	85 db                	test   ebx,ebx
c00162c8:	74 16                	je     c00162e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162ca:	83 ec 0c             	sub    esp,0xc
c00162cd:	53                   	push   ebx
c00162ce:	e8 bd 38 ff ff       	call   c0009b90 <VAS::~VAS()>
c00162d3:	58                   	pop    eax
c00162d4:	5a                   	pop    edx
c00162d5:	6a 14                	push   0x14
c00162d7:	53                   	push   ebx
c00162d8:	e8 2f 45 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	83 c4 1c             	add    esp,0x1c
c00162e3:	5b                   	pop    ebx
c00162e4:	5e                   	pop    esi
c00162e5:	5f                   	pop    edi
c00162e6:	5d                   	pop    ebp
c00162e7:	c3                   	ret    
c00162e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	68 d8 23 02 c0       	push   0xc00223d8
c00162f4:	e8 54 af ff ff       	call   c001124d <KePanic(char const*)>
c00162f9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	89 f7                	mov    edi,esi
c0016301:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016305:	e9 a6 fe ff ff       	jmp    c00161b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001630a:	66 90                	xchg   ax,ax
c001630c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016312:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016318:	75 1e                	jne    c0016338 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001631a:	83 ec 0c             	sub    esp,0xc
c001631d:	68 40 24 02 c0       	push   0xc0022440
c0016322:	e8 e3 45 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016327:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001632e:	e8 1d fa ff ff       	call   c0015d50 <blockTask(TaskState)>
c0016333:	83 c4 10             	add    esp,0x10
c0016336:	66 90                	xchg   ax,ax
c0016338:	83 ec 08             	sub    esp,0x8
c001633b:	56                   	push   esi
c001633c:	68 e4 96 02 c0       	push   0xc00296e4
c0016341:	e8 7a 95 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016346:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001634d:	e8 aa 94 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016352:	83 c4 10             	add    esp,0x10
c0016355:	39 f8                	cmp    eax,edi
c0016357:	0f 84 37 ff ff ff    	je     c0016294 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001635d:	8d 76 00             	lea    esi,[esi+0x0]
c0016360:	83 ec 0c             	sub    esp,0xc
c0016363:	68 e4 96 02 c0       	push   0xc00296e4
c0016368:	e8 8f 94 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001636d:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016374:	89 c6                	mov    esi,eax
c0016376:	e8 89 94 00 00       	call   c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001637b:	83 c4 10             	add    esp,0x10
c001637e:	39 f3                	cmp    ebx,esi
c0016380:	74 b6                	je     c0016338 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016382:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016385:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016388:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001638e:	75 a8                	jne    c0016338 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016390:	e9 77 ff ff ff       	jmp    c001630c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016395:	8d 76 00             	lea    esi,[esi+0x0]
c0016398:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001639c:	83 ec 0c             	sub    esp,0xc
c001639f:	68 0c 24 02 c0       	push   0xc002240c
c00163a4:	e9 4b ff ff ff       	jmp    c00162f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00163a9:	8d 76 00             	lea    esi,[esi+0x0]
c00163ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00163b2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00163b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163b8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00163be:	01 d7                	add    edi,edx
c00163c0:	89 f8                	mov    eax,edi
c00163c2:	e9 51 fe ff ff       	jmp    c0016218 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00163c7:	90                   	nop

c00163c8 <cleanerTaskFunction(void*)>:
c00163c8:	53                   	push   ebx
c00163c9:	83 ec 08             	sub    esp,0x8
c00163cc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163d1:	83 e8 01             	sub    eax,0x1
c00163d4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163d9:	75 01                	jne    c00163dc <cleanerTaskFunction(void*)+0x14>
c00163db:	fb                   	sti    
c00163dc:	fa                   	cli    
c00163dd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163e2:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00163e9:	8d 50 01             	lea    edx,[eax+0x1]
c00163ec:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00163f2:	0f 84 c4 00 00 00    	je     c00164bc <cleanerTaskFunction(void*)+0xf4>
c00163f8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163fd:	85 c0                	test   eax,eax
c00163ff:	75 03                	jne    c0016404 <cleanerTaskFunction(void*)+0x3c>
c0016401:	fb                   	sti    
c0016402:	66 90                	xchg   ax,ax
c0016404:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001640b:	fa                   	cli    
c001640c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016412:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016418:	83 c2 01             	add    edx,0x1
c001641b:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016421:	83 c1 01             	add    ecx,0x1
c0016424:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001642a:	fa                   	cli    
c001642b:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016431:	83 c3 01             	add    ebx,0x1
c0016434:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c001643a:	eb 28                	jmp    c0016464 <cleanerTaskFunction(void*)+0x9c>
c001643c:	83 ec 0c             	sub    esp,0xc
c001643f:	68 cc 96 02 c0       	push   0xc00296cc
c0016444:	e8 b3 93 00 00       	call   c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016449:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016450:	89 c3                	mov    ebx,eax
c0016452:	e8 ad 93 00 00       	call   c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016457:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001645a:	e8 95 fc ff ff       	call   c00160f4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001645f:	83 c4 10             	add    esp,0x10
c0016462:	66 90                	xchg   ax,ax
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	68 cc 96 02 c0       	push   0xc00296cc
c001646c:	e8 6f 93 00 00       	call   c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016471:	83 c4 10             	add    esp,0x10
c0016474:	84 c0                	test   al,al
c0016476:	74 c4                	je     c001643c <cleanerTaskFunction(void*)+0x74>
c0016478:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001647d:	83 e8 01             	sub    eax,0x1
c0016480:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016485:	75 01                	jne    c0016488 <cleanerTaskFunction(void*)+0xc0>
c0016487:	fb                   	sti    
c0016488:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001648d:	83 e8 01             	sub    eax,0x1
c0016490:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016495:	0f 85 31 ff ff ff    	jne    c00163cc <cleanerTaskFunction(void*)+0x4>
c001649b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00164a0:	85 c0                	test   eax,eax
c00164a2:	0f 84 24 ff ff ff    	je     c00163cc <cleanerTaskFunction(void*)+0x4>
c00164a8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00164b2:	e8 99 f6 ff ff       	call   c0015b50 <schedule()>
c00164b7:	e9 10 ff ff ff       	jmp    c00163cc <cleanerTaskFunction(void*)+0x4>
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	6a 02                	push   0x2
c00164c1:	e8 62 f8 ff ff       	call   c0015d28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00164c6:	83 c4 10             	add    esp,0x10
c00164c9:	e9 36 ff ff ff       	jmp    c0016404 <cleanerTaskFunction(void*)+0x3c>
c00164ce:	66 90                	xchg   ax,ax

c00164d0 <terminateTask(int)>:
c00164d0:	83 ec 14             	sub    esp,0x14
c00164d3:	fa                   	cli    
c00164d4:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164da:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164e0:	83 c2 01             	add    edx,0x1
c00164e3:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164e9:	83 c1 01             	add    ecx,0x1
c00164ec:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164f2:	fa                   	cli    
c00164f3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164fc:	83 c0 01             	add    eax,0x1
c00164ff:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016509:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001650c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016511:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016514:	50                   	push   eax
c0016515:	68 cc 96 02 c0       	push   0xc00296cc
c001651a:	e8 a1 93 00 00       	call   c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001651f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016524:	83 c4 10             	add    esp,0x10
c0016527:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001652e:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c0016533:	85 c0                	test   eax,eax
c0016535:	74 65                	je     c001659c <terminateTask(int)+0xcc>
c0016537:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c001653e:	83 ec 0c             	sub    esp,0xc
c0016541:	50                   	push   eax
c0016542:	e8 01 fb ff ff       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c0016547:	83 c4 10             	add    esp,0x10
c001654a:	66 90                	xchg   ax,ax
c001654c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016551:	83 e8 01             	sub    eax,0x1
c0016554:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016559:	75 01                	jne    c001655c <terminateTask(int)+0x8c>
c001655b:	fb                   	sti    
c001655c:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016561:	83 e8 01             	sub    eax,0x1
c0016564:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016569:	75 09                	jne    c0016574 <terminateTask(int)+0xa4>
c001656b:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c0016572:	75 3c                	jne    c00165b0 <terminateTask(int)+0xe0>
c0016574:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016579:	83 e8 01             	sub    eax,0x1
c001657c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016581:	75 01                	jne    c0016584 <terminateTask(int)+0xb4>
c0016583:	fb                   	sti    
c0016584:	fa                   	cli    
c0016585:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001658a:	83 c0 01             	add    eax,0x1
c001658d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016592:	66 90                	xchg   ax,ax
c0016594:	e8 b7 f5 ff ff       	call   c0015b50 <schedule()>
c0016599:	eb d9                	jmp    c0016574 <terminateTask(int)+0xa4>
c001659b:	90                   	nop
c001659c:	83 ec 0c             	sub    esp,0xc
c001659f:	68 3a 23 02 c0       	push   0xc002233a
c00165a4:	e8 61 43 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00165a9:	83 c4 10             	add    esp,0x10
c00165ac:	eb 9e                	jmp    c001654c <terminateTask(int)+0x7c>
c00165ae:	66 90                	xchg   ax,ax
c00165b0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165ba:	eb d8                	jmp    c0016594 <terminateTask(int)+0xc4>

c00165bc <Thr::terminateFromIRQ(int)>:
c00165bc:	83 ec 18             	sub    esp,0x18
c00165bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165c3:	50                   	push   eax
c00165c4:	e8 07 ff ff ff       	call   c00164d0 <terminateTask(int)>
c00165c9:	90                   	nop
c00165ca:	66 90                	xchg   ax,ax

c00165cc <Semaphore::release()>:
c00165cc:	83 ec 0c             	sub    esp,0xc
c00165cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00165d3:	fa                   	cli    
c00165d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165d9:	83 c0 01             	add    eax,0x1
c00165dc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165e1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165e6:	8d 48 01             	lea    ecx,[eax+0x1]
c00165e9:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00165ef:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00165f2:	85 c9                	test   ecx,ecx
c00165f4:	74 42                	je     c0016638 <Semaphore::release()+0x6c>
c00165f6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00165f9:	83 ec 0c             	sub    esp,0xc
c00165fc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00165ff:	51                   	push   ecx
c0016600:	e8 43 fa ff ff       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c0016605:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001660a:	83 c4 10             	add    esp,0x10
c001660d:	83 e8 01             	sub    eax,0x1
c0016610:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016615:	85 c0                	test   eax,eax
c0016617:	75 0b                	jne    c0016624 <Semaphore::release()+0x58>
c0016619:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001661e:	85 c0                	test   eax,eax
c0016620:	75 22                	jne    c0016644 <Semaphore::release()+0x78>
c0016622:	66 90                	xchg   ax,ax
c0016624:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016629:	83 e8 01             	sub    eax,0x1
c001662c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016631:	75 01                	jne    c0016634 <Semaphore::release()+0x68>
c0016633:	fb                   	sti    
c0016634:	83 c4 0c             	add    esp,0xc
c0016637:	c3                   	ret    
c0016638:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001663b:	83 e9 01             	sub    ecx,0x1
c001663e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016641:	eb cd                	jmp    c0016610 <Semaphore::release()+0x44>
c0016643:	90                   	nop
c0016644:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001664e:	e8 fd f4 ff ff       	call   c0015b50 <schedule()>
c0016653:	eb cf                	jmp    c0016624 <Semaphore::release()+0x58>
c0016655:	8d 76 00             	lea    esi,[esi+0x0]

c0016658 <__static_initialization_and_destruction_0(int, int)>:
c0016658:	83 ec 0c             	sub    esp,0xc
c001665b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016660:	0f 85 8e 00 00 00    	jne    c00166f4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016666:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001666e:	0f 85 80 00 00 00    	jne    c00166f4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	68 e4 96 02 c0       	push   0xc00296e4
c001667c:	e8 f3 94 00 00       	call   c001fb74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	83 ec 04             	sub    esp,0x4
c0016687:	68 10 30 02 c0       	push   0xc0023010
c001668c:	68 e4 96 02 c0       	push   0xc00296e4
c0016691:	68 24 fb 01 c0       	push   0xc001fb24
c0016696:	e8 21 41 ff ff       	call   c000a7bc <__cxa_atexit>
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	83 ec 0c             	sub    esp,0xc
c00166a1:	68 d8 96 02 c0       	push   0xc00296d8
c00166a6:	e8 c9 94 00 00       	call   c001fb74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166ab:	83 c4 10             	add    esp,0x10
c00166ae:	83 ec 04             	sub    esp,0x4
c00166b1:	68 10 30 02 c0       	push   0xc0023010
c00166b6:	68 d8 96 02 c0       	push   0xc00296d8
c00166bb:	68 24 fb 01 c0       	push   0xc001fb24
c00166c0:	e8 f7 40 ff ff       	call   c000a7bc <__cxa_atexit>
c00166c5:	83 c4 10             	add    esp,0x10
c00166c8:	83 ec 0c             	sub    esp,0xc
c00166cb:	68 cc 96 02 c0       	push   0xc00296cc
c00166d0:	e8 9f 94 00 00       	call   c001fb74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	83 ec 04             	sub    esp,0x4
c00166db:	68 10 30 02 c0       	push   0xc0023010
c00166e0:	68 cc 96 02 c0       	push   0xc00296cc
c00166e5:	68 24 fb 01 c0       	push   0xc001fb24
c00166ea:	e8 cd 40 ff ff       	call   c000a7bc <__cxa_atexit>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	66 90                	xchg   ax,ax
c00166f4:	90                   	nop
c00166f5:	83 c4 0c             	add    esp,0xc
c00166f8:	c3                   	ret    
c00166f9:	8d 76 00             	lea    esi,[esi+0x0]

c00166fc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00166fc:	83 ec 0c             	sub    esp,0xc
c00166ff:	83 ec 08             	sub    esp,0x8
c0016702:	68 ff ff 00 00       	push   0xffff
c0016707:	6a 01                	push   0x1
c0016709:	e8 4a ff ff ff       	call   c0016658 <__static_initialization_and_destruction_0(int, int)>
c001670e:	83 c4 10             	add    esp,0x10
c0016711:	83 c4 0c             	add    esp,0xc
c0016714:	c3                   	ret    

c0016715 <Vm::inbv(unsigned short)>:
c0016715:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016719:	66 81 fa fe fe       	cmp    dx,0xfefe
c001671e:	75 06                	jne    c0016726 <Vm::inbv(unsigned short)+0x11>
c0016720:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c0016725:	c3                   	ret    
c0016726:	ec                   	in     al,dx
c0016727:	c3                   	ret    

c0016728 <Vm::outbv(unsigned short, unsigned char)>:
c0016728:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001672c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016730:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016735:	75 25                	jne    c001675c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016737:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001673d:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c0016743:	8d 51 01             	lea    edx,[ecx+0x1]
c0016746:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c001674c:	83 fa 20             	cmp    edx,0x20
c001674f:	75 0c                	jne    c001675d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016751:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c001675b:	c3                   	ret    
c001675c:	ee                   	out    dx,al
c001675d:	c3                   	ret    

c001675e <Vm::realToLinear(unsigned short, unsigned short)>:
c001675e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016763:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016768:	c1 e0 04             	shl    eax,0x4
c001676b:	01 d0                	add    eax,edx
c001676d:	c3                   	ret    

c001676e <Vm::getSegment(unsigned int)>:
c001676e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016772:	c1 e8 10             	shr    eax,0x10
c0016775:	c3                   	ret    

c0016776 <Vm::getOffset(unsigned int)>:
c0016776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001677a:	c3                   	ret    

c001677b <Vm::mainloop2()>:
c001677b:	83 ec 18             	sub    esp,0x18
c001677e:	fa                   	cli    
c001677f:	6a 02                	push   0x2
c0016781:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016787:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001678e:	e8 95 f5 ff ff       	call   c0015d28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016793:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016798:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001679c:	52                   	push   edx
c001679d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00167a1:	52                   	push   edx
c00167a2:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00167a6:	52                   	push   edx
c00167a7:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00167ab:	50                   	push   eax
c00167ac:	e8 5e 9a fe ff       	call   c000020f <goToVM86>
c00167b1:	83 c4 2c             	add    esp,0x2c
c00167b4:	c3                   	ret    

c00167b5 <Vm::mainVm8086Loop(void*)>:
c00167b5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167ba:	48                   	dec    eax
c00167bb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167c0:	75 01                	jne    c00167c3 <Vm::mainVm8086Loop(void*)+0xe>
c00167c2:	fb                   	sti    
c00167c3:	eb b6                	jmp    c001677b <Vm::mainloop2()>

c00167c5 <Vm::mainloop3(unsigned long)>:
c00167c5:	83 ec 18             	sub    esp,0x18
c00167c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167cc:	fa                   	cli    
c00167cd:	6a 02                	push   0x2
c00167cf:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167d5:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00167dc:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00167e1:	e8 42 f5 ff ff       	call   c0015d28 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00167e6:	83 c4 1c             	add    esp,0x1c
c00167e9:	eb 90                	jmp    c001677b <Vm::mainloop2()>

c00167eb <Vm::initialise8086()>:
c00167eb:	83 ec 0c             	sub    esp,0xc
c00167ee:	68 80 00 00 00       	push   0x80
c00167f3:	6a 00                	push   0x0
c00167f5:	68 b5 67 01 c0       	push   0xc00167b5
c00167fa:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016800:	e8 ff f0 ff ff       	call   c0015904 <Process::createThread(void (*)(void*), void*, int)>
c0016805:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001680c:	68 00 01 00 00       	push   0x100
c0016811:	6a 00                	push   0x0
c0016813:	6a 00                	push   0x0
c0016815:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c001681a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001681f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016825:	e8 de 36 ff ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001682a:	83 c4 2c             	add    esp,0x2c
c001682d:	c3                   	ret    

c001682e <Vm::finish8086()>:
c001682e:	53                   	push   ebx
c001682f:	83 ec 08             	sub    esp,0x8
c0016832:	fa                   	cli    
c0016833:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016839:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016840:	75 15                	jne    c0016857 <Vm::finish8086()+0x29>
c0016842:	e8 09 f3 ff ff       	call   c0015b50 <schedule()>
c0016847:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001684c:	48                   	dec    eax
c001684d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016852:	75 de                	jne    c0016832 <Vm::finish8086()+0x4>
c0016854:	fb                   	sti    
c0016855:	eb db                	jmp    c0016832 <Vm::finish8086()+0x4>
c0016857:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c001685e:	83 ec 0c             	sub    esp,0xc
c0016861:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016867:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001686d:	e8 d6 f7 ff ff       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c0016872:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016877:	83 c4 10             	add    esp,0x10
c001687a:	8d 50 ff             	lea    edx,[eax-0x1]
c001687d:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016883:	85 d2                	test   edx,edx
c0016885:	75 01                	jne    c0016888 <Vm::finish8086()+0x5a>
c0016887:	fb                   	sti    
c0016888:	83 c4 08             	add    esp,0x8
c001688b:	89 d8                	mov    eax,ebx
c001688d:	5b                   	pop    ebx
c001688e:	c3                   	ret    

c001688f <Vm::getOutput8086(unsigned char*)>:
c001688f:	57                   	push   edi
c0016890:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016896:	56                   	push   esi
c0016897:	be 40 97 02 c0       	mov    esi,0xc0029740
c001689c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00168a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168a2:	5e                   	pop    esi
c00168a3:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00168a8:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168b2:	5f                   	pop    edi
c00168b3:	c3                   	ret    

c00168b4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168b4:	55                   	push   ebp
c00168b5:	57                   	push   edi
c00168b6:	56                   	push   esi
c00168b7:	53                   	push   ebx
c00168b8:	83 ec 0c             	sub    esp,0xc
c00168bb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00168bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00168c3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00168c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00168cb:	fa                   	cli    
c00168cc:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168d2:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c00168d9:	75 15                	jne    c00168f0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00168db:	e8 70 f2 ff ff       	call   c0015b50 <schedule()>
c00168e0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168e5:	48                   	dec    eax
c00168e6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168eb:	75 de                	jne    c00168cb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168ed:	fb                   	sti    
c00168ee:	eb db                	jmp    c00168cb <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168f0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168fa:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00168ff:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016903:	0f b7 ff             	movzx  edi,di
c0016906:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001690a:	0f b7 f6             	movzx  esi,si
c001690d:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016911:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016915:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016919:	50                   	push   eax
c001691a:	6a 20                	push   0x20
c001691c:	6a 00                	push   0x0
c001691e:	68 40 97 02 c0       	push   0xc0029740
c0016923:	e8 c8 9b fe ff       	call   c00004f0 <memset>
c0016928:	5a                   	pop    edx
c0016929:	59                   	pop    ecx
c001692a:	57                   	push   edi
c001692b:	56                   	push   esi
c001692c:	e8 2d fe ff ff       	call   c001675e <Vm::realToLinear(unsigned short, unsigned short)>
c0016931:	83 c4 10             	add    esp,0x10
c0016934:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016938:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001693c:	89 c7                	mov    edi,eax
c001693e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016940:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016947:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001694c:	48                   	dec    eax
c001694d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016952:	75 01                	jne    c0016955 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016954:	fb                   	sti    
c0016955:	83 ec 0c             	sub    esp,0xc
c0016958:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001695e:	e8 e5 f6 ff ff       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c0016963:	83 c4 1c             	add    esp,0x1c
c0016966:	b0 01                	mov    al,0x1
c0016968:	5b                   	pop    ebx
c0016969:	5e                   	pop    esi
c001696a:	5f                   	pop    edi
c001696b:	5d                   	pop    ebp
c001696c:	c3                   	ret    

c001696d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001696d:	55                   	push   ebp
c001696e:	57                   	push   edi
c001696f:	56                   	push   esi
c0016970:	53                   	push   ebx
c0016971:	83 ec 34             	sub    esp,0x34
c0016974:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016978:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001697c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016980:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016988:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001698c:	68 68 24 02 c0       	push   0xc0022468
c0016991:	e8 74 3f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	fa                   	cli    
c001699a:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c00169a0:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169a6:	84 db                	test   bl,bl
c00169a8:	75 15                	jne    c00169bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00169aa:	e8 a1 f1 ff ff       	call   c0015b50 <schedule()>
c00169af:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169b4:	48                   	dec    eax
c00169b5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169ba:	75 dd                	jne    c0016999 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169bc:	fb                   	sti    
c00169bd:	eb da                	jmp    c0016999 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169bf:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00169cd:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00169d2:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00169d6:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169da:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00169de:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169e2:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169e6:	50                   	push   eax
c00169e7:	6a 20                	push   0x20
c00169e9:	6a 00                	push   0x0
c00169eb:	68 40 97 02 c0       	push   0xc0029740
c00169f0:	e8 fb 9a fe ff       	call   c00004f0 <memset>
c00169f5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00169fc:	e8 d2 10 ff ff       	call   c0007ad3 <malloc>
c0016a01:	83 c4 0c             	add    esp,0xc
c0016a04:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a0a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a0e:	89 c5                	mov    ebp,eax
c0016a10:	50                   	push   eax
c0016a11:	e8 8a 4d ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	85 ed                	test   ebp,ebp
c0016a1b:	75 0a                	jne    c0016a27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016a1d:	83 ec 0c             	sub    esp,0xc
c0016a20:	68 8a 24 02 c0       	push   0xc002248a
c0016a25:	eb 2b                	jmp    c0016a52 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016a27:	50                   	push   eax
c0016a28:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016a2c:	50                   	push   eax
c0016a2d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016a31:	50                   	push   eax
c0016a32:	55                   	push   ebp
c0016a33:	e8 26 51 ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c0016a38:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a3c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016a40:	83 c4 10             	add    esp,0x10
c0016a43:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016a48:	74 27                	je     c0016a71 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016a4a:	83 ec 0c             	sub    esp,0xc
c0016a4d:	68 9e 24 02 c0       	push   0xc002249e
c0016a52:	e8 f6 a7 ff ff       	call   c001124d <KePanic(char const*)>
c0016a57:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a5c:	83 c4 10             	add    esp,0x10
c0016a5f:	48                   	dec    eax
c0016a60:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a65:	85 c0                	test   eax,eax
c0016a67:	75 01                	jne    c0016a6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a69:	fb                   	sti    
c0016a6a:	31 db                	xor    ebx,ebx
c0016a6c:	e9 90 00 00 00       	jmp    c0016b01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a71:	51                   	push   ecx
c0016a72:	51                   	push   ecx
c0016a73:	6a 01                	push   0x1
c0016a75:	55                   	push   ebp
c0016a76:	e8 e1 4d ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0016a7b:	83 c4 10             	add    esp,0x10
c0016a7e:	85 c0                	test   eax,eax
c0016a80:	74 26                	je     c0016aa8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a82:	83 ec 0c             	sub    esp,0xc
c0016a85:	68 b7 24 02 c0       	push   0xc00224b7
c0016a8a:	e8 be a7 ff ff       	call   c001124d <KePanic(char const*)>
c0016a8f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a94:	83 c4 10             	add    esp,0x10
c0016a97:	48                   	dec    eax
c0016a98:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a9d:	85 c0                	test   eax,eax
c0016a9f:	75 c9                	jne    c0016a6a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016aa1:	fb                   	sti    
c0016aa2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016aa6:	eb 59                	jmp    c0016b01 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016aa8:	50                   	push   eax
c0016aa9:	0f b7 ff             	movzx  edi,di
c0016aac:	50                   	push   eax
c0016aad:	0f b7 f6             	movzx  esi,si
c0016ab0:	57                   	push   edi
c0016ab1:	56                   	push   esi
c0016ab2:	e8 a7 fc ff ff       	call   c001675e <Vm::realToLinear(unsigned short, unsigned short)>
c0016ab7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016aba:	5a                   	pop    edx
c0016abb:	8d 74 24 20          	lea    esi,[esp+0x20]
c0016abf:	56                   	push   esi
c0016ac0:	50                   	push   eax
c0016ac1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ac5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ac9:	55                   	push   ebp
c0016aca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016acd:	83 c4 14             	add    esp,0x14
c0016ad0:	55                   	push   ebp
c0016ad1:	e8 e4 4d ff ff       	call   c000b8ba <File::close()>
c0016ad6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016adb:	83 c4 10             	add    esp,0x10
c0016ade:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016ae5:	48                   	dec    eax
c0016ae6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016aeb:	85 c0                	test   eax,eax
c0016aed:	75 01                	jne    c0016af0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016aef:	fb                   	sti    
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016af9:	e8 4a f5 ff ff       	call   c0016048 <unblockTask(ThreadControlBlock*)>
c0016afe:	83 c4 10             	add    esp,0x10
c0016b01:	83 c4 2c             	add    esp,0x2c
c0016b04:	88 d8                	mov    al,bl
c0016b06:	5b                   	pop    ebx
c0016b07:	5e                   	pop    esi
c0016b08:	5f                   	pop    edi
c0016b09:	5d                   	pop    ebp
c0016b0a:	c3                   	ret    

c0016b0b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016b0b:	57                   	push   edi
c0016b0c:	56                   	push   esi
c0016b0d:	53                   	push   ebx
c0016b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b12:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b1a:	83 e8 06             	sub    eax,0x6
c0016b1d:	0f b7 c0             	movzx  eax,ax
c0016b20:	50                   	push   eax
c0016b21:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016b26:	50                   	push   eax
c0016b27:	e8 32 fc ff ff       	call   c001675e <Vm::realToLinear(unsigned short, unsigned short)>
c0016b2c:	5a                   	pop    edx
c0016b2d:	59                   	pop    ecx
c0016b2e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016b31:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016b34:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016b37:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b3d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016b40:	8d 51 02             	lea    edx,[ecx+0x2]
c0016b43:	66 89 10             	mov    WORD PTR [eax],dx
c0016b46:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016b4a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016b4e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016b52:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0016b55:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b59:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b5f:	89 f1                	mov    ecx,esi
c0016b61:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016b65:	89 f2                	mov    edx,esi
c0016b67:	0f b6 d6             	movzx  edx,dh
c0016b6a:	0f b6 f1             	movzx  esi,cl
c0016b6d:	74 0a                	je     c0016b79 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0016b6f:	c1 e2 08             	shl    edx,0x8
c0016b72:	09 f2                	or     edx,esi
c0016b74:	80 ce 02             	or     dh,0x2
c0016b77:	eb 08                	jmp    c0016b81 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0016b79:	c1 e2 08             	shl    edx,0x8
c0016b7c:	09 f2                	or     edx,esi
c0016b7e:	80 e6 fd             	and    dh,0xfd
c0016b81:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b8a:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b8e:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b96:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b99:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ba1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ba4:	5b                   	pop    ebx
c0016ba5:	5e                   	pop    esi
c0016ba6:	5f                   	pop    edi
c0016ba7:	c3                   	ret    

c0016ba8 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016ba8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bad:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bb2:	c1 e0 04             	shl    eax,0x4
c0016bb5:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016bb8:	c3                   	ret    

c0016bb9 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016bb9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bbe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bc3:	c1 e0 04             	shl    eax,0x4
c0016bc6:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016bca:	c3                   	ret    

c0016bcb <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016bcb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bd0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bd5:	c1 e0 04             	shl    eax,0x4
c0016bd8:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016bdb:	c3                   	ret    

c0016bdc <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016bdc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016be1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016be6:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016bea:	c1 e0 04             	shl    eax,0x4
c0016bed:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016bf0:	c3                   	ret    

c0016bf1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016bf1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bf6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bfb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bff:	c1 e0 04             	shl    eax,0x4
c0016c02:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016c06:	c3                   	ret    

c0016c07 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016c07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c15:	c1 e0 04             	shl    eax,0x4
c0016c18:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016c1b:	c3                   	ret    

c0016c1c <Vm::faultHandler(regs*)>:
c0016c1c:	55                   	push   ebp
c0016c1d:	57                   	push   edi
c0016c1e:	56                   	push   esi
c0016c1f:	53                   	push   ebx
c0016c20:	83 ec 2c             	sub    esp,0x2c
c0016c23:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016c27:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016c2a:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016c2e:	0f b7 f8             	movzx  edi,ax
c0016c31:	0f b7 c0             	movzx  eax,ax
c0016c34:	52                   	push   edx
c0016c35:	50                   	push   eax
c0016c36:	e8 23 fb ff ff       	call   c001675e <Vm::realToLinear(unsigned short, unsigned short)>
c0016c3b:	5a                   	pop    edx
c0016c3c:	59                   	pop    ecx
c0016c3d:	89 c1                	mov    ecx,eax
c0016c3f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c46:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016c4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016c52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c56:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016c5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c67:	e8 f2 fa ff ff       	call   c001675e <Vm::realToLinear(unsigned short, unsigned short)>
c0016c6c:	5e                   	pop    esi
c0016c6d:	be 06 00 00 00       	mov    esi,0x6
c0016c72:	5d                   	pop    ebp
c0016c73:	31 ed                	xor    ebp,ebp
c0016c75:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c7a:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c7d:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c83:	0f 84 74 02 00 00    	je     c0016efd <Vm::faultHandler(regs*)+0x2e1>
c0016c89:	0f 87 94 00 00 00    	ja     c0016d23 <Vm::faultHandler(regs*)+0x107>
c0016c8f:	83 fa 66             	cmp    edx,0x66
c0016c92:	0f 84 e2 01 00 00    	je     c0016e7a <Vm::faultHandler(regs*)+0x25e>
c0016c98:	77 47                	ja     c0016ce1 <Vm::faultHandler(regs*)+0xc5>
c0016c9a:	83 fa 36             	cmp    edx,0x36
c0016c9d:	0f 84 ca 01 00 00    	je     c0016e6d <Vm::faultHandler(regs*)+0x251>
c0016ca3:	77 1a                	ja     c0016cbf <Vm::faultHandler(regs*)+0xa3>
c0016ca5:	83 fa 26             	cmp    edx,0x26
c0016ca8:	0f 84 98 01 00 00    	je     c0016e46 <Vm::faultHandler(regs*)+0x22a>
c0016cae:	83 fa 2e             	cmp    edx,0x2e
c0016cb1:	0f 85 27 06 00 00    	jne    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016cb7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cba:	31 f6                	xor    esi,esi
c0016cbc:	41                   	inc    ecx
c0016cbd:	eb bb                	jmp    c0016c7a <Vm::faultHandler(regs*)+0x5e>
c0016cbf:	83 fa 64             	cmp    edx,0x64
c0016cc2:	0f 84 8b 01 00 00    	je     c0016e53 <Vm::faultHandler(regs*)+0x237>
c0016cc8:	0f 87 92 01 00 00    	ja     c0016e60 <Vm::faultHandler(regs*)+0x244>
c0016cce:	83 fa 3e             	cmp    edx,0x3e
c0016cd1:	0f 85 07 06 00 00    	jne    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016cd7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cda:	be 01 00 00 00       	mov    esi,0x1
c0016cdf:	eb db                	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016ce1:	83 fa 6d             	cmp    edx,0x6d
c0016ce4:	0f 84 34 03 00 00    	je     c001701e <Vm::faultHandler(regs*)+0x402>
c0016cea:	77 17                	ja     c0016d03 <Vm::faultHandler(regs*)+0xe7>
c0016cec:	83 fa 67             	cmp    edx,0x67
c0016cef:	0f 84 92 01 00 00    	je     c0016e87 <Vm::faultHandler(regs*)+0x26b>
c0016cf5:	83 fa 6c             	cmp    edx,0x6c
c0016cf8:	0f 84 b1 02 00 00    	je     c0016faf <Vm::faultHandler(regs*)+0x393>
c0016cfe:	e9 db 05 00 00       	jmp    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016d03:	83 fa 6f             	cmp    edx,0x6f
c0016d06:	0f 84 40 04 00 00    	je     c001714c <Vm::faultHandler(regs*)+0x530>
c0016d0c:	0f 82 a2 03 00 00    	jb     c00170b4 <Vm::faultHandler(regs*)+0x498>
c0016d12:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016d18:	0f 84 76 01 00 00    	je     c0016e94 <Vm::faultHandler(regs*)+0x278>
c0016d1e:	e9 bb 05 00 00       	jmp    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016d23:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016d29:	0f 84 57 05 00 00    	je     c0017286 <Vm::faultHandler(regs*)+0x66a>
c0016d2f:	0f 87 a9 00 00 00    	ja     c0016dde <Vm::faultHandler(regs*)+0x1c2>
c0016d35:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016d3b:	0f 84 d6 04 00 00    	je     c0017217 <Vm::faultHandler(regs*)+0x5fb>
c0016d41:	77 78                	ja     c0016dbb <Vm::faultHandler(regs*)+0x19f>
c0016d43:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016d49:	0f 84 0e 02 00 00    	je     c0016f5d <Vm::faultHandler(regs*)+0x341>
c0016d4f:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016d55:	0f 85 83 05 00 00    	jne    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016d5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016d5f:	89 d1                	mov    ecx,edx
c0016d61:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016d64:	c1 e1 08             	shl    ecx,0x8
c0016d67:	09 ca                	or     edx,ecx
c0016d69:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016d6c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016d70:	89 d1                	mov    ecx,edx
c0016d72:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016d76:	c1 e1 08             	shl    ecx,0x8
c0016d79:	09 ca                	or     edx,ecx
c0016d7b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d7e:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d82:	89 d1                	mov    ecx,edx
c0016d84:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d88:	c1 e1 08             	shl    ecx,0x8
c0016d8b:	09 ca                	or     edx,ecx
c0016d8d:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d93:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d96:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d9a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016da0:	d1 e8                	shr    eax,1
c0016da2:	83 e0 01             	and    eax,0x1
c0016da5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016da8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016dab:	83 c0 06             	add    eax,0x6
c0016dae:	25 ff ff 00 00       	and    eax,0xffff
c0016db3:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016db6:	e9 1f 05 00 00       	jmp    c00172da <Vm::faultHandler(regs*)+0x6be>
c0016dbb:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016dc1:	0f 84 95 04 00 00    	je     c001725c <Vm::faultHandler(regs*)+0x640>
c0016dc7:	0f 82 66 04 00 00    	jb     c0017233 <Vm::faultHandler(regs*)+0x617>
c0016dcd:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016dd3:	0f 84 9a 04 00 00    	je     c0017273 <Vm::faultHandler(regs*)+0x657>
c0016dd9:	e9 00 05 00 00       	jmp    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016dde:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016de4:	0f 84 dd 04 00 00    	je     c00172c7 <Vm::faultHandler(regs*)+0x6ab>
c0016dea:	77 2e                	ja     c0016e1a <Vm::faultHandler(regs*)+0x1fe>
c0016dec:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016df2:	0f 84 aa 04 00 00    	je     c00172a2 <Vm::faultHandler(regs*)+0x686>
c0016df8:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016dfe:	0f 85 da 04 00 00    	jne    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016e04:	50                   	push   eax
c0016e05:	50                   	push   eax
c0016e06:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016e0a:	50                   	push   eax
c0016e0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e0f:	50                   	push   eax
c0016e10:	e8 13 f9 ff ff       	call   c0016728 <Vm::outbv(unsigned short, unsigned char)>
c0016e15:	e9 a5 04 00 00       	jmp    c00172bf <Vm::faultHandler(regs*)+0x6a3>
c0016e1a:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016e20:	0f 84 6d 01 00 00    	je     c0016f93 <Vm::faultHandler(regs*)+0x377>
c0016e26:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016e2c:	0f 84 6f 01 00 00    	je     c0016fa1 <Vm::faultHandler(regs*)+0x385>
c0016e32:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016e38:	0f 85 a0 04 00 00    	jne    c00172de <Vm::faultHandler(regs*)+0x6c2>
c0016e3e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e41:	e9 76 fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e46:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e49:	be 02 00 00 00       	mov    esi,0x2
c0016e4e:	e9 69 fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e53:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e56:	be 03 00 00 00       	mov    esi,0x3
c0016e5b:	e9 5c fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e60:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e63:	be 04 00 00 00       	mov    esi,0x4
c0016e68:	e9 4f fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e6d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e70:	be 05 00 00 00       	mov    esi,0x5
c0016e75:	e9 42 fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e7a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e7d:	bd 01 00 00 00       	mov    ebp,0x1
c0016e82:	e9 35 fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e87:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e8a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e8f:	e9 28 fe ff ff       	jmp    c0016cbc <Vm::faultHandler(regs*)+0xa0>
c0016e94:	83 e5 01             	and    ebp,0x1
c0016e97:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e9e:	74 30                	je     c0016ed0 <Vm::faultHandler(regs*)+0x2b4>
c0016ea0:	83 e9 04             	sub    ecx,0x4
c0016ea3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ea9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016eaf:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016eb2:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016eb5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ebb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016ebf:	0f 84 12 04 00 00    	je     c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0016ec5:	80 ce 02             	or     dh,0x2
c0016ec8:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ecb:	e9 07 04 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0016ed0:	83 e9 02             	sub    ecx,0x2
c0016ed3:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016ed9:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016edc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ee0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ee6:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016eea:	74 05                	je     c0016ef1 <Vm::faultHandler(regs*)+0x2d5>
c0016eec:	80 ce 02             	or     dh,0x2
c0016eef:	eb 03                	jmp    c0016ef4 <Vm::faultHandler(regs*)+0x2d8>
c0016ef1:	80 e6 fd             	and    dh,0xfd
c0016ef4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ef8:	e9 da 03 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0016efd:	83 e5 01             	and    ebp,0x1
c0016f00:	74 2a                	je     c0016f2c <Vm::faultHandler(regs*)+0x310>
c0016f02:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f04:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f0a:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f10:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f13:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f1b:	c1 e8 09             	shr    eax,0x9
c0016f1e:	83 e0 01             	and    eax,0x1
c0016f21:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f24:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f27:	83 c0 04             	add    eax,0x4
c0016f2a:	eb 24                	jmp    c0016f50 <Vm::faultHandler(regs*)+0x334>
c0016f2c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016f2f:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f35:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f38:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016f3b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f41:	c1 e8 09             	shr    eax,0x9
c0016f44:	83 e0 01             	and    eax,0x1
c0016f47:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f4a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f4d:	83 c0 02             	add    eax,0x2
c0016f50:	25 ff ff 00 00       	and    eax,0xffff
c0016f55:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f58:	e9 7a 03 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0016f5d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f61:	3d ee 00 00 00       	cmp    eax,0xee
c0016f66:	75 10                	jne    c0016f78 <Vm::faultHandler(regs*)+0x35c>
c0016f68:	83 ec 0c             	sub    esp,0xc
c0016f6b:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016f6e:	e8 52 f8 ff ff       	call   c00167c5 <Vm::mainloop3(unsigned long)>
c0016f73:	e9 4a 03 00 00       	jmp    c00172c2 <Vm::faultHandler(regs*)+0x6a6>
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f83:	51                   	push   ecx
c0016f84:	50                   	push   eax
c0016f85:	53                   	push   ebx
c0016f86:	e8 80 fb ff ff       	call   c0016b0b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f8b:	83 c4 20             	add    esp,0x20
c0016f8e:	e9 47 03 00 00       	jmp    c00172da <Vm::faultHandler(regs*)+0x6be>
c0016f93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f98:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f9c:	e9 36 03 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0016fa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fa6:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016faa:	e9 28 03 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0016faf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fb4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016fb7:	74 2b                	je     c0016fe4 <Vm::faultHandler(regs*)+0x3c8>
c0016fb9:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016fc0:	76 22                	jbe    c0016fe4 <Vm::faultHandler(regs*)+0x3c8>
c0016fc2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fc6:	50                   	push   eax
c0016fc7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fcb:	50                   	push   eax
c0016fcc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fd0:	50                   	push   eax
c0016fd1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fd5:	50                   	push   eax
c0016fd6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fda:	50                   	push   eax
c0016fdb:	6a 6c                	push   0x6c
c0016fdd:	6a 6c                	push   0x6c
c0016fdf:	e9 c0 01 00 00       	jmp    c00171a4 <Vm::faultHandler(regs*)+0x588>
c0016fe4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fe8:	83 ec 0c             	sub    esp,0xc
c0016feb:	0f b7 f6             	movzx  esi,si
c0016fee:	50                   	push   eax
c0016fef:	e8 21 f7 ff ff       	call   c0016715 <Vm::inbv(unsigned short)>
c0016ff4:	83 c4 0c             	add    esp,0xc
c0016ff7:	0f b6 c0             	movzx  eax,al
c0016ffa:	50                   	push   eax
c0016ffb:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016fff:	50                   	push   eax
c0017000:	56                   	push   esi
c0017001:	e8 d6 fb ff ff       	call   c0016bdc <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017006:	83 c4 10             	add    esp,0x10
c0017009:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001700c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017010:	74 03                	je     c0017015 <Vm::faultHandler(regs*)+0x3f9>
c0017012:	48                   	dec    eax
c0017013:	eb 01                	jmp    c0017016 <Vm::faultHandler(regs*)+0x3fa>
c0017015:	40                   	inc    eax
c0017016:	0f b7 c0             	movzx  eax,ax
c0017019:	e9 8e 00 00 00       	jmp    c00170ac <Vm::faultHandler(regs*)+0x490>
c001701e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017023:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017026:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017029:	74 29                	je     c0017054 <Vm::faultHandler(regs*)+0x438>
c001702b:	3d ff ff 00 00       	cmp    eax,0xffff
c0017030:	76 22                	jbe    c0017054 <Vm::faultHandler(regs*)+0x438>
c0017032:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017036:	50                   	push   eax
c0017037:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001703b:	50                   	push   eax
c001703c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017040:	50                   	push   eax
c0017041:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017045:	50                   	push   eax
c0017046:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001704a:	50                   	push   eax
c001704b:	6a 6d                	push   0x6d
c001704d:	6a 6d                	push   0x6d
c001704f:	e9 50 01 00 00       	jmp    c00171a4 <Vm::faultHandler(regs*)+0x588>
c0017054:	83 e5 01             	and    ebp,0x1
c0017057:	0f b7 c8             	movzx  ecx,ax
c001705a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001705d:	0f b7 f6             	movzx  esi,si
c0017060:	74 1e                	je     c0017080 <Vm::faultHandler(regs*)+0x464>
c0017062:	ed                   	in     eax,dx
c0017063:	55                   	push   ebp
c0017064:	50                   	push   eax
c0017065:	51                   	push   ecx
c0017066:	56                   	push   esi
c0017067:	e8 9b fb ff ff       	call   c0016c07 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001706c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001706f:	83 c4 10             	add    esp,0x10
c0017072:	8d 50 04             	lea    edx,[eax+0x4]
c0017075:	83 e8 04             	sub    eax,0x4
c0017078:	81 e2 ff ff 00 00    	and    edx,0xffff
c001707e:	eb 20                	jmp    c00170a0 <Vm::faultHandler(regs*)+0x484>
c0017080:	66 ed                	in     ax,dx
c0017082:	57                   	push   edi
c0017083:	0f b7 c0             	movzx  eax,ax
c0017086:	50                   	push   eax
c0017087:	51                   	push   ecx
c0017088:	56                   	push   esi
c0017089:	e8 63 fb ff ff       	call   c0016bf1 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001708e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017091:	83 c4 10             	add    esp,0x10
c0017094:	8d 50 02             	lea    edx,[eax+0x2]
c0017097:	83 e8 02             	sub    eax,0x2
c001709a:	81 e2 ff ff 00 00    	and    edx,0xffff
c00170a0:	25 ff ff 00 00       	and    eax,0xffff
c00170a5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170a9:	0f 44 c2             	cmove  eax,edx
c00170ac:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00170af:	e9 23 02 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c00170b4:	8d 46 ff             	lea    eax,[esi-0x1]
c00170b7:	0f b6 f0             	movzx  esi,al
c00170ba:	83 fe 05             	cmp    esi,0x5
c00170bd:	77 23                	ja     c00170e2 <Vm::faultHandler(regs*)+0x4c6>
c00170bf:	ff 24 b5 2c 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddad4]
c00170c6:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00170cb:	eb 15                	jmp    c00170e2 <Vm::faultHandler(regs*)+0x4c6>
c00170cd:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00170d1:	eb 0f                	jmp    c00170e2 <Vm::faultHandler(regs*)+0x4c6>
c00170d3:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00170d7:	eb 09                	jmp    c00170e2 <Vm::faultHandler(regs*)+0x4c6>
c00170d9:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00170dd:	eb 03                	jmp    c00170e2 <Vm::faultHandler(regs*)+0x4c6>
c00170df:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00170e2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170ea:	74 29                	je     c0017115 <Vm::faultHandler(regs*)+0x4f9>
c00170ec:	3d ff ff 00 00       	cmp    eax,0xffff
c00170f1:	76 22                	jbe    c0017115 <Vm::faultHandler(regs*)+0x4f9>
c00170f3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170f7:	50                   	push   eax
c00170f8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170fc:	50                   	push   eax
c00170fd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017101:	50                   	push   eax
c0017102:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017106:	50                   	push   eax
c0017107:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001710b:	50                   	push   eax
c001710c:	6a 6e                	push   0x6e
c001710e:	6a 6e                	push   0x6e
c0017110:	e9 8f 00 00 00       	jmp    c00171a4 <Vm::faultHandler(regs*)+0x588>
c0017115:	52                   	push   edx
c0017116:	0f b7 c0             	movzx  eax,ax
c0017119:	52                   	push   edx
c001711a:	50                   	push   eax
c001711b:	57                   	push   edi
c001711c:	e8 87 fa ff ff       	call   c0016ba8 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017121:	59                   	pop    ecx
c0017122:	5e                   	pop    esi
c0017123:	0f b6 c0             	movzx  eax,al
c0017126:	50                   	push   eax
c0017127:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001712b:	50                   	push   eax
c001712c:	e8 f7 f5 ff ff       	call   c0016728 <Vm::outbv(unsigned short, unsigned char)>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017137:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001713b:	74 03                	je     c0017140 <Vm::faultHandler(regs*)+0x524>
c001713d:	48                   	dec    eax
c001713e:	eb 01                	jmp    c0017141 <Vm::faultHandler(regs*)+0x525>
c0017140:	40                   	inc    eax
c0017141:	0f b7 c0             	movzx  eax,ax
c0017144:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017147:	e9 8b 01 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c001714c:	8d 46 ff             	lea    eax,[esi-0x1]
c001714f:	0f b6 f0             	movzx  esi,al
c0017152:	83 fe 05             	cmp    esi,0x5
c0017155:	77 1e                	ja     c0017175 <Vm::faultHandler(regs*)+0x559>
c0017157:	ff 24 b5 44 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddabc]
c001715e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017162:	eb 11                	jmp    c0017175 <Vm::faultHandler(regs*)+0x559>
c0017164:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017167:	eb 0c                	jmp    c0017175 <Vm::faultHandler(regs*)+0x559>
c0017169:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001716c:	eb 07                	jmp    c0017175 <Vm::faultHandler(regs*)+0x559>
c001716e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017171:	eb 02                	jmp    c0017175 <Vm::faultHandler(regs*)+0x559>
c0017173:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017175:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001717a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001717d:	74 37                	je     c00171b6 <Vm::faultHandler(regs*)+0x59a>
c001717f:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017185:	76 2f                	jbe    c00171b6 <Vm::faultHandler(regs*)+0x59a>
c0017187:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001718b:	50                   	push   eax
c001718c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017190:	50                   	push   eax
c0017191:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017195:	50                   	push   eax
c0017196:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001719a:	50                   	push   eax
c001719b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001719f:	50                   	push   eax
c00171a0:	6a 6f                	push   0x6f
c00171a2:	6a 6f                	push   0x6f
c00171a4:	68 d0 24 02 c0       	push   0xc00224d0
c00171a9:	e8 5c 37 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00171ae:	83 c4 20             	add    esp,0x20
c00171b1:	e9 86 01 00 00       	jmp    c001733c <Vm::faultHandler(regs*)+0x720>
c00171b6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171b9:	0f b7 d7             	movzx  edx,di
c00171bc:	0f b7 c6             	movzx  eax,si
c00171bf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00171c2:	81 e1 00 04 00 00    	and    ecx,0x400
c00171c8:	83 e5 01             	and    ebp,0x1
c00171cb:	74 1c                	je     c00171e9 <Vm::faultHandler(regs*)+0x5cd>
c00171cd:	55                   	push   ebp
c00171ce:	55                   	push   ebp
c00171cf:	50                   	push   eax
c00171d0:	52                   	push   edx
c00171d1:	e8 f5 f9 ff ff       	call   c0016bcb <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00171d6:	83 c4 10             	add    esp,0x10
c00171d9:	89 fa                	mov    edx,edi
c00171db:	ef                   	out    dx,eax
c00171dc:	8d 46 04             	lea    eax,[esi+0x4]
c00171df:	83 ee 04             	sub    esi,0x4
c00171e2:	25 ff ff 00 00       	and    eax,0xffff
c00171e7:	eb 1b                	jmp    c0017204 <Vm::faultHandler(regs*)+0x5e8>
c00171e9:	55                   	push   ebp
c00171ea:	55                   	push   ebp
c00171eb:	50                   	push   eax
c00171ec:	52                   	push   edx
c00171ed:	e8 c7 f9 ff ff       	call   c0016bb9 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00171f2:	83 c4 10             	add    esp,0x10
c00171f5:	89 fa                	mov    edx,edi
c00171f7:	66 ef                	out    dx,ax
c00171f9:	8d 46 02             	lea    eax,[esi+0x2]
c00171fc:	83 ee 02             	sub    esi,0x2
c00171ff:	25 ff ff 00 00       	and    eax,0xffff
c0017204:	81 e6 ff ff 00 00    	and    esi,0xffff
c001720a:	85 c9                	test   ecx,ecx
c001720c:	0f 44 f0             	cmove  esi,eax
c001720f:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017212:	e9 c0 00 00 00       	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c0017217:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001721e:	83 ec 0c             	sub    esp,0xc
c0017221:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017225:	50                   	push   eax
c0017226:	e8 ea f4 ff ff       	call   c0016715 <Vm::inbv(unsigned short)>
c001722b:	0f b6 c0             	movzx  eax,al
c001722e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017231:	eb 3a                	jmp    c001726d <Vm::faultHandler(regs*)+0x651>
c0017233:	83 e5 01             	and    ebp,0x1
c0017236:	74 07                	je     c001723f <Vm::faultHandler(regs*)+0x623>
c0017238:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001723c:	ed                   	in     eax,dx
c001723d:	eb 14                	jmp    c0017253 <Vm::faultHandler(regs*)+0x637>
c001723f:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017242:	66 31 f6             	xor    si,si
c0017245:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017248:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001724c:	66 ed                	in     ax,dx
c001724e:	0f b7 c0             	movzx  eax,ax
c0017251:	09 f0                	or     eax,esi
c0017253:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017256:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001725a:	eb 7e                	jmp    c00172da <Vm::faultHandler(regs*)+0x6be>
c001725c:	52                   	push   edx
c001725d:	52                   	push   edx
c001725e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017262:	50                   	push   eax
c0017263:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017267:	50                   	push   eax
c0017268:	e8 bb f4 ff ff       	call   c0016728 <Vm::outbv(unsigned short, unsigned char)>
c001726d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017271:	eb 4f                	jmp    c00172c2 <Vm::faultHandler(regs*)+0x6a6>
c0017273:	83 e5 01             	and    ebp,0x1
c0017276:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017279:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001727d:	74 03                	je     c0017282 <Vm::faultHandler(regs*)+0x666>
c001727f:	ef                   	out    dx,eax
c0017280:	eb d4                	jmp    c0017256 <Vm::faultHandler(regs*)+0x63a>
c0017282:	66 ef                	out    dx,ax
c0017284:	eb d0                	jmp    c0017256 <Vm::faultHandler(regs*)+0x63a>
c0017286:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001728a:	83 ec 0c             	sub    esp,0xc
c001728d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017294:	50                   	push   eax
c0017295:	e8 7b f4 ff ff       	call   c0016715 <Vm::inbv(unsigned short)>
c001729a:	0f b6 c0             	movzx  eax,al
c001729d:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172a0:	eb 1d                	jmp    c00172bf <Vm::faultHandler(regs*)+0x6a3>
c00172a2:	83 e5 01             	and    ebp,0x1
c00172a5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172a8:	74 03                	je     c00172ad <Vm::faultHandler(regs*)+0x691>
c00172aa:	ed                   	in     eax,dx
c00172ab:	eb 0d                	jmp    c00172ba <Vm::faultHandler(regs*)+0x69e>
c00172ad:	66 ed                	in     ax,dx
c00172af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00172b2:	0f b7 c0             	movzx  eax,ax
c00172b5:	66 31 d2             	xor    dx,dx
c00172b8:	09 d0                	or     eax,edx
c00172ba:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172bd:	eb 18                	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c00172bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c2:	83 c4 10             	add    esp,0x10
c00172c5:	eb 13                	jmp    c00172da <Vm::faultHandler(regs*)+0x6be>
c00172c7:	83 e5 01             	and    ebp,0x1
c00172ca:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00172cd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172d0:	74 03                	je     c00172d5 <Vm::faultHandler(regs*)+0x6b9>
c00172d2:	ef                   	out    dx,eax
c00172d3:	eb 02                	jmp    c00172d7 <Vm::faultHandler(regs*)+0x6bb>
c00172d5:	66 ef                	out    dx,ax
c00172d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172da:	b0 01                	mov    al,0x1
c00172dc:	eb 60                	jmp    c001733e <Vm::faultHandler(regs*)+0x722>
c00172de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172e2:	50                   	push   eax
c00172e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172e7:	50                   	push   eax
c00172e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172ec:	50                   	push   eax
c00172ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172f1:	50                   	push   eax
c00172f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172f6:	50                   	push   eax
c00172f7:	52                   	push   edx
c00172f8:	52                   	push   edx
c00172f9:	68 fd 24 02 c0       	push   0xc00224fd
c00172fe:	e8 07 36 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017303:	83 c4 20             	add    esp,0x20
c0017306:	83 ec 0c             	sub    esp,0xc
c0017309:	6a 60                	push   0x60
c001730b:	e8 05 f4 ff ff       	call   c0016715 <Vm::inbv(unsigned short)>
c0017310:	83 c4 10             	add    esp,0x10
c0017313:	0f b6 d0             	movzx  edx,al
c0017316:	83 fa 1c             	cmp    edx,0x1c
c0017319:	74 05                	je     c0017320 <Vm::faultHandler(regs*)+0x704>
c001731b:	83 fa 5a             	cmp    edx,0x5a
c001731e:	75 e6                	jne    c0017306 <Vm::faultHandler(regs*)+0x6ea>
c0017320:	0f b6 c0             	movzx  eax,al
c0017323:	83 f8 1c             	cmp    eax,0x1c
c0017326:	74 05                	je     c001732d <Vm::faultHandler(regs*)+0x711>
c0017328:	83 f8 5a             	cmp    eax,0x5a
c001732b:	75 0f                	jne    c001733c <Vm::faultHandler(regs*)+0x720>
c001732d:	83 ec 0c             	sub    esp,0xc
c0017330:	6a 60                	push   0x60
c0017332:	e8 de f3 ff ff       	call   c0016715 <Vm::inbv(unsigned short)>
c0017337:	83 c4 10             	add    esp,0x10
c001733a:	eb e4                	jmp    c0017320 <Vm::faultHandler(regs*)+0x704>
c001733c:	31 c0                	xor    eax,eax
c001733e:	83 c4 2c             	add    esp,0x2c
c0017341:	5b                   	pop    ebx
c0017342:	5e                   	pop    esi
c0017343:	5f                   	pop    edi
c0017344:	5d                   	pop    ebp
c0017345:	c3                   	ret    

c0017346 <noCopro(unsigned long)>:
c0017346:	c3                   	ret    

c0017347 <nmiHandler(regs*, void*)>:
c0017347:	83 ec 0c             	sub    esp,0xc
c001734a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001734f:	83 ec 0c             	sub    esp,0xc
c0017352:	50                   	push   eax
c0017353:	e8 7e ff fe ff       	call   c00072d6 <Computer::handleNMI()>
c0017358:	83 c4 10             	add    esp,0x10
c001735b:	90                   	nop
c001735c:	83 c4 0c             	add    esp,0xc
c001735f:	c3                   	ret    

c0017360 <doubleFault(regs*, void*)>:
c0017360:	55                   	push   ebp
c0017361:	89 e5                	mov    ebp,esp
c0017363:	83 ec 08             	sub    esp,0x8
c0017366:	83 ec 0c             	sub    esp,0xc
c0017369:	68 5c 25 02 c0       	push   0xc002255c
c001736e:	e8 da 9e ff ff       	call   c001124d <KePanic(char const*)>
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	90                   	nop
c0017377:	c9                   	leave  
c0017378:	c3                   	ret    

c0017379 <displayDebugInfo(regs*)>:
c0017379:	83 ec 1c             	sub    esp,0x1c
c001737c:	0f 20 c0             	mov    eax,cr0
c001737f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017383:	0f 20 d0             	mov    eax,cr2
c0017386:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001738a:	0f 20 d8             	mov    eax,cr3
c001738d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017391:	0f 20 e0             	mov    eax,cr4
c0017394:	89 04 24             	mov    DWORD PTR [esp],eax
c0017397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001739b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001739e:	83 ec 08             	sub    esp,0x8
c00173a1:	50                   	push   eax
c00173a2:	68 78 25 02 c0       	push   0xc0022578
c00173a7:	e8 5e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173ac:	83 c4 10             	add    esp,0x10
c00173af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b3:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00173b6:	83 ec 08             	sub    esp,0x8
c00173b9:	50                   	push   eax
c00173ba:	68 69 25 02 c0       	push   0xc0022569
c00173bf:	e8 46 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173c4:	83 c4 10             	add    esp,0x10
c00173c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173cb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00173ce:	83 ec 08             	sub    esp,0x8
c00173d1:	50                   	push   eax
c00173d2:	68 74 25 02 c0       	push   0xc0022574
c00173d7:	e8 2e 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173dc:	83 c4 10             	add    esp,0x10
c00173df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00173e6:	83 ec 08             	sub    esp,0x8
c00173e9:	50                   	push   eax
c00173ea:	68 83 25 02 c0       	push   0xc0022583
c00173ef:	e8 16 35 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c00173f4:	83 c4 10             	add    esp,0x10
c00173f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173fb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00173fe:	83 ec 08             	sub    esp,0x8
c0017401:	50                   	push   eax
c0017402:	68 8e 25 02 c0       	push   0xc002258e
c0017407:	e8 fe 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001740c:	83 c4 10             	add    esp,0x10
c001740f:	83 ec 08             	sub    esp,0x8
c0017412:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017416:	68 99 25 02 c0       	push   0xc0022599
c001741b:	e8 ea 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017420:	83 c4 10             	add    esp,0x10
c0017423:	83 ec 08             	sub    esp,0x8
c0017426:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001742a:	68 a4 25 02 c0       	push   0xc00225a4
c001742f:	e8 d6 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017434:	83 c4 10             	add    esp,0x10
c0017437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001743b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001743e:	c1 e0 05             	shl    eax,0x5
c0017441:	8d 90 20 35 02 c0    	lea    edx,[eax-0x3ffdcae0]
c0017447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001744b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001744e:	83 ec 04             	sub    esp,0x4
c0017451:	52                   	push   edx
c0017452:	50                   	push   eax
c0017453:	68 af 25 02 c0       	push   0xc00225af
c0017458:	e8 ad 34 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001745d:	83 c4 10             	add    esp,0x10
c0017460:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017465:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001746b:	83 ec 0c             	sub    esp,0xc
c001746e:	50                   	push   eax
c001746f:	e8 fb 12 ff ff       	call   c000876f <setActiveTerminal(VgaText*)>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001747c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017482:	83 ec 08             	sub    esp,0x8
c0017485:	68 be 25 02 c0       	push   0xc00225be
c001748a:	50                   	push   eax
c001748b:	e8 1c 16 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017490:	83 c4 10             	add    esp,0x10
c0017493:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017498:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001749e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174a2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00174a5:	83 ec 08             	sub    esp,0x8
c00174a8:	52                   	push   edx
c00174a9:	50                   	push   eax
c00174aa:	e8 b7 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00174af:	83 c4 10             	add    esp,0x10
c00174b2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174bd:	83 ec 08             	sub    esp,0x8
c00174c0:	68 cc 25 02 c0       	push   0xc00225cc
c00174c5:	50                   	push   eax
c00174c6:	e8 e1 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174cb:	83 c4 10             	add    esp,0x10
c00174ce:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174d9:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00174de:	8b 12                	mov    edx,DWORD PTR [edx]
c00174e0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174e3:	83 c2 0c             	add    edx,0xc
c00174e6:	83 ec 08             	sub    esp,0x8
c00174e9:	52                   	push   edx
c00174ea:	50                   	push   eax
c00174eb:	e8 bc 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00174f0:	83 c4 10             	add    esp,0x10
c00174f3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174fe:	83 ec 08             	sub    esp,0x8
c0017501:	68 d5 25 02 c0       	push   0xc00225d5
c0017506:	50                   	push   eax
c0017507:	e8 a0 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017514:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001751a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001751e:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017521:	83 ec 08             	sub    esp,0x8
c0017524:	52                   	push   edx
c0017525:	50                   	push   eax
c0017526:	e8 3b 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c001752b:	83 c4 10             	add    esp,0x10
c001752e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017533:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017539:	83 ec 08             	sub    esp,0x8
c001753c:	68 dd 25 02 c0       	push   0xc00225dd
c0017541:	50                   	push   eax
c0017542:	e8 65 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001754f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017555:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017559:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001755c:	83 ec 08             	sub    esp,0x8
c001755f:	52                   	push   edx
c0017560:	50                   	push   eax
c0017561:	e8 00 15 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017566:	83 c4 10             	add    esp,0x10
c0017569:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001756e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017574:	83 ec 08             	sub    esp,0x8
c0017577:	68 e5 25 02 c0       	push   0xc00225e5
c001757c:	50                   	push   eax
c001757d:	e8 2a 15 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001758a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017590:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017594:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017597:	83 ec 08             	sub    esp,0x8
c001759a:	52                   	push   edx
c001759b:	50                   	push   eax
c001759c:	e8 c5 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175a1:	83 c4 10             	add    esp,0x10
c00175a4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175af:	83 ec 08             	sub    esp,0x8
c00175b2:	68 ed 25 02 c0       	push   0xc00225ed
c00175b7:	50                   	push   eax
c00175b8:	e8 ef 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175cf:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00175d2:	83 ec 08             	sub    esp,0x8
c00175d5:	52                   	push   edx
c00175d6:	50                   	push   eax
c00175d7:	e8 8a 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ea:	83 ec 08             	sub    esp,0x8
c00175ed:	68 f5 25 02 c0       	push   0xc00225f5
c00175f2:	50                   	push   eax
c00175f3:	e8 b4 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00175f8:	83 c4 10             	add    esp,0x10
c00175fb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017600:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017606:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001760a:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001760d:	83 ec 08             	sub    esp,0x8
c0017610:	52                   	push   edx
c0017611:	50                   	push   eax
c0017612:	e8 4f 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017625:	83 ec 08             	sub    esp,0x8
c0017628:	68 fd 25 02 c0       	push   0xc00225fd
c001762d:	50                   	push   eax
c001762e:	e8 79 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017633:	83 c4 10             	add    esp,0x10
c0017636:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001763b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017641:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017645:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017648:	83 ec 08             	sub    esp,0x8
c001764b:	52                   	push   edx
c001764c:	50                   	push   eax
c001764d:	e8 14 14 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	68 05 26 02 c0       	push   0xc0022605
c0017668:	50                   	push   eax
c0017669:	e8 3e 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017676:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767c:	83 ec 08             	sub    esp,0x8
c001767f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017683:	50                   	push   eax
c0017684:	e8 dd 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c0017689:	83 c4 10             	add    esp,0x10
c001768c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017691:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017697:	83 ec 08             	sub    esp,0x8
c001769a:	68 0e 26 02 c0       	push   0xc002260e
c001769f:	50                   	push   eax
c00176a0:	e8 07 14 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b3:	83 ec 08             	sub    esp,0x8
c00176b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176ba:	50                   	push   eax
c00176bb:	e8 a6 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176c0:	83 c4 10             	add    esp,0x10
c00176c3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176ce:	83 ec 08             	sub    esp,0x8
c00176d1:	68 16 26 02 c0       	push   0xc0022616
c00176d6:	50                   	push   eax
c00176d7:	e8 d0 13 ff ff       	call   c0008aac <VgaText::puts(char const*)>
c00176dc:	83 c4 10             	add    esp,0x10
c00176df:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176ea:	83 ec 08             	sub    esp,0x8
c00176ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176f1:	50                   	push   eax
c00176f2:	e8 6f 13 ff ff       	call   c0008a66 <VgaText::putx(unsigned int)>
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	fa                   	cli    
c00176fb:	f4                   	hlt    
c00176fc:	eb fe                	jmp    c00176fc <displayDebugInfo(regs*)+0x383>

c00176fe <HalSystemIdle()>:
c00176fe:	56                   	push   esi
c00176ff:	53                   	push   ebx
c0017700:	83 ec 14             	sub    esp,0x14
c0017703:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017708:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001770e:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017714:	83 e0 04             	and    eax,0x4
c0017717:	0f b6 c0             	movzx  eax,al
c001771a:	85 c0                	test   eax,eax
c001771c:	0f 95 c0             	setne  al
c001771f:	0f b6 c0             	movzx  eax,al
c0017722:	85 c0                	test   eax,eax
c0017724:	74 4c                	je     c0017772 <HalSystemIdle()+0x74>
c0017726:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001772b:	83 ec 08             	sub    esp,0x8
c001772e:	68 e1 00 00 00       	push   0xe1
c0017733:	50                   	push   eax
c0017734:	e8 a9 f9 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017740:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017744:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017749:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001774d:	83 e2 02             	and    edx,0x2
c0017750:	89 d3                	mov    ebx,edx
c0017752:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017756:	83 e2 00             	and    edx,0x0
c0017759:	89 d6                	mov    esi,edx
c001775b:	56                   	push   esi
c001775c:	53                   	push   ebx
c001775d:	68 e1 00 00 00       	push   0xe1
c0017762:	50                   	push   eax
c0017763:	e8 a6 f9 fe ff       	call   c000710e <Computer::wrmsr(unsigned int, unsigned long long)>
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	e8 24 8a fe ff       	call   c0000194 <doTPAUSE>
c0017770:	eb 01                	jmp    c0017773 <HalSystemIdle()+0x75>
c0017772:	f4                   	hlt    
c0017773:	90                   	nop
c0017774:	83 c4 14             	add    esp,0x14
c0017777:	5b                   	pop    ebx
c0017778:	5e                   	pop    esi
c0017779:	c3                   	ret    

c001777a <displayProgramFault(char const*)>:
c001777a:	83 ec 0c             	sub    esp,0xc
c001777d:	83 ec 0c             	sub    esp,0xc
c0017780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017784:	e8 81 31 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017791:	8b 00                	mov    eax,DWORD PTR [eax]
c0017793:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017796:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001779c:	85 c0                	test   eax,eax
c001779e:	74 21                	je     c00177c1 <displayProgramFault(char const*)+0x47>
c00177a0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00177a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177b0:	6a 04                	push   0x4
c00177b2:	6a 0f                	push   0xf
c00177b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177b8:	50                   	push   eax
c00177b9:	e8 60 13 ff ff       	call   c0008b1e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177be:	83 c4 10             	add    esp,0x10
c00177c1:	90                   	nop
c00177c2:	83 c4 0c             	add    esp,0xc
c00177c5:	c3                   	ret    

c00177c6 <gpFault(regs*, void*)>:
c00177c6:	83 ec 1c             	sub    esp,0x1c
c00177c9:	c7 05 74 97 02 c0 1c 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c1c
c00177d3:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177d8:	85 c0                	test   eax,eax
c00177da:	74 1e                	je     c00177fa <gpFault(regs*, void*)+0x34>
c00177dc:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177e1:	83 ec 0c             	sub    esp,0xc
c00177e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177e8:	ff d0                	call   eax
c00177ea:	83 c4 10             	add    esp,0x10
c00177ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177f1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00177f6:	85 c0                	test   eax,eax
c00177f8:	75 2e                	jne    c0017828 <gpFault(regs*, void*)+0x62>
c00177fa:	83 ec 0c             	sub    esp,0xc
c00177fd:	68 1e 26 02 c0       	push   0xc002261e
c0017802:	e8 73 ff ff ff       	call   c001777a <displayProgramFault(char const*)>
c0017807:	83 c4 10             	add    esp,0x10
c001780a:	83 ec 0c             	sub    esp,0xc
c001780d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017811:	e8 63 fb ff ff       	call   c0017379 <displayDebugInfo(regs*)>
c0017816:	83 c4 10             	add    esp,0x10
c0017819:	83 ec 0c             	sub    esp,0xc
c001781c:	6a 00                	push   0x0
c001781e:	e8 99 ed ff ff       	call   c00165bc <Thr::terminateFromIRQ(int)>
c0017823:	83 c4 10             	add    esp,0x10
c0017826:	eb 01                	jmp    c0017829 <gpFault(regs*, void*)+0x63>
c0017828:	90                   	nop
c0017829:	83 c4 1c             	add    esp,0x1c
c001782c:	c3                   	ret    

c001782d <pgFault(regs*, void*)>:
c001782d:	83 ec 1c             	sub    esp,0x1c
c0017830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017834:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017837:	0f 20 d0             	mov    eax,cr2
c001783a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001783e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017842:	83 ec 04             	sub    esp,0x4
c0017845:	52                   	push   edx
c0017846:	50                   	push   eax
c0017847:	68 fc 26 02 c0       	push   0xc00226fc
c001784c:	e8 b9 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017851:	83 c4 10             	add    esp,0x10
c0017854:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017859:	8b 00                	mov    eax,DWORD PTR [eax]
c001785b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001785e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017864:	0f 20 d2             	mov    edx,cr2
c0017867:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001786b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001786f:	83 ec 08             	sub    esp,0x8
c0017872:	52                   	push   edx
c0017873:	50                   	push   eax
c0017874:	e8 01 2b ff ff       	call   c000a37a <VAS::tryLoadBackOffDisk(unsigned long)>
c0017879:	83 c4 10             	add    esp,0x10
c001787c:	0f b6 c0             	movzx  eax,al
c001787f:	85 c0                	test   eax,eax
c0017881:	75 2e                	jne    c00178b1 <pgFault(regs*, void*)+0x84>
c0017883:	83 ec 0c             	sub    esp,0xc
c0017886:	68 37 26 02 c0       	push   0xc0022637
c001788b:	e8 ea fe ff ff       	call   c001777a <displayProgramFault(char const*)>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	83 ec 0c             	sub    esp,0xc
c0017896:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001789a:	e8 da fa ff ff       	call   c0017379 <displayDebugInfo(regs*)>
c001789f:	83 c4 10             	add    esp,0x10
c00178a2:	83 ec 0c             	sub    esp,0xc
c00178a5:	6a 00                	push   0x0
c00178a7:	e8 10 ed ff ff       	call   c00165bc <Thr::terminateFromIRQ(int)>
c00178ac:	83 c4 10             	add    esp,0x10
c00178af:	eb 01                	jmp    c00178b2 <pgFault(regs*, void*)+0x85>
c00178b1:	90                   	nop
c00178b2:	83 c4 1c             	add    esp,0x1c
c00178b5:	c3                   	ret    

c00178b6 <otherISRHandler(regs*, void*)>:
c00178b6:	83 ec 0c             	sub    esp,0xc
c00178b9:	83 ec 0c             	sub    esp,0xc
c00178bc:	68 24 27 02 c0       	push   0xc0022724
c00178c1:	e8 b4 fe ff ff       	call   c001777a <displayProgramFault(char const*)>
c00178c6:	83 c4 10             	add    esp,0x10
c00178c9:	83 ec 0c             	sub    esp,0xc
c00178cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178d0:	e8 a4 fa ff ff       	call   c0017379 <displayDebugInfo(regs*)>
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	83 ec 0c             	sub    esp,0xc
c00178db:	6a 00                	push   0x0
c00178dd:	e8 da ec ff ff       	call   c00165bc <Thr::terminateFromIRQ(int)>
c00178e2:	83 c4 10             	add    esp,0x10
c00178e5:	90                   	nop
c00178e6:	83 c4 0c             	add    esp,0xc
c00178e9:	c3                   	ret    

c00178ea <opcodeFault(regs*, void*)>:
c00178ea:	55                   	push   ebp
c00178eb:	89 e5                	mov    ebp,esp
c00178ed:	83 ec 08             	sub    esp,0x8
c00178f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178f6:	83 ec 08             	sub    esp,0x8
c00178f9:	50                   	push   eax
c00178fa:	68 42 26 02 c0       	push   0xc0022642
c00178ff:	e8 06 30 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001790c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017912:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017918:	0f b6 c0             	movzx  eax,al
c001791b:	85 c0                	test   eax,eax
c001791d:	74 21                	je     c0017940 <opcodeFault(regs*, void*)+0x56>
c001791f:	83 ec 0c             	sub    esp,0xc
c0017922:	68 4c 27 02 c0       	push   0xc002274c
c0017927:	e8 de 2f ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017932:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017935:	8d 50 19             	lea    edx,[eax+0x19]
c0017938:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001793b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001793e:	eb 2b                	jmp    c001796b <opcodeFault(regs*, void*)+0x81>
c0017940:	83 ec 0c             	sub    esp,0xc
c0017943:	68 50 26 02 c0       	push   0xc0022650
c0017948:	e8 2d fe ff ff       	call   c001777a <displayProgramFault(char const*)>
c001794d:	83 c4 10             	add    esp,0x10
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017956:	e8 1e fa ff ff       	call   c0017379 <displayDebugInfo(regs*)>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	83 ec 0c             	sub    esp,0xc
c0017961:	6a 00                	push   0x0
c0017963:	e8 54 ec ff ff       	call   c00165bc <Thr::terminateFromIRQ(int)>
c0017968:	83 c4 10             	add    esp,0x10
c001796b:	c9                   	leave  
c001796c:	c3                   	ret    

c001796d <i386SaveCoprocessor(void*)>:
c001796d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017971:	83 c0 3f             	add    eax,0x3f
c0017974:	83 e0 c0             	and    eax,0xffffffc0
c0017977:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001797b:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c0017981 <i386LoadCoprocessor(void*)>:
c0017981:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017985:	83 c0 3f             	add    eax,0x3f
c0017988:	83 e0 c0             	and    eax,0xffffffc0
c001798b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001798f:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017995 <x87EmulHandler(regs*, void*)>:
c0017995:	53                   	push   ebx
c0017996:	83 ec 08             	sub    esp,0x8
c0017999:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001799e:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00179a2:	74 10                	je     c00179b4 <x87EmulHandler(regs*, void*)+0x1f>
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	68 5d 26 02 c0       	push   0xc002265d
c00179ac:	e8 9c 98 ff ff       	call   c001124d <KePanic(char const*)>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	0f 20 c0             	mov    eax,cr0
c00179b7:	a8 08                	test   al,0x8
c00179b9:	74 59                	je     c0017a14 <x87EmulHandler(regs*, void*)+0x7f>
c00179bb:	0f 06                	clts   
c00179bd:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179c2:	85 c0                	test   eax,eax
c00179c4:	74 0e                	je     c00179d4 <x87EmulHandler(regs*, void*)+0x3f>
c00179c6:	83 ec 0c             	sub    esp,0xc
c00179c9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179cc:	e8 9c ff ff ff       	call   c001796d <i386SaveCoprocessor(void*)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00179da:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00179de:	75 12                	jne    c00179f2 <x87EmulHandler(regs*, void*)+0x5d>
c00179e0:	83 ec 0c             	sub    esp,0xc
c00179e3:	68 40 02 00 00       	push   0x240
c00179e8:	e8 e6 00 ff ff       	call   c0007ad3 <malloc>
c00179ed:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00179f0:	eb 10                	jmp    c0017a02 <x87EmulHandler(regs*, void*)+0x6d>
c00179f2:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179f7:	83 ec 0c             	sub    esp,0xc
c00179fa:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179fd:	e8 7f ff ff ff       	call   c0017981 <i386LoadCoprocessor(void*)>
c0017a02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a07:	83 c4 10             	add    esp,0x10
c0017a0a:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017a0f:	83 c4 08             	add    esp,0x8
c0017a12:	5b                   	pop    ebx
c0017a13:	c3                   	ret    
c0017a14:	83 ec 0c             	sub    esp,0xc
c0017a17:	68 71 26 02 c0       	push   0xc0022671
c0017a1c:	e8 e9 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017a21:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017a29:	83 c4 18             	add    esp,0x18
c0017a2c:	5b                   	pop    ebx
c0017a2d:	e9 8a eb ff ff       	jmp    c00165bc <Thr::terminateFromIRQ(int)>

c0017a32 <HalInitialiseCoprocessor()>:
c0017a32:	83 ec 10             	sub    esp,0x10
c0017a35:	6a 00                	push   0x0
c0017a37:	68 95 79 01 c0       	push   0xc0017995
c0017a3c:	6a 07                	push   0x7
c0017a3e:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017a48:	e8 99 51 ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017a4d:	e8 ae 70 00 00       	call   c001eb00 <avxDetect>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	85 c0                	test   eax,eax
c0017a57:	74 1c                	je     c0017a75 <HalInitialiseCoprocessor()+0x43>
c0017a59:	c7 05 70 97 02 c0 2a eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eb2a
c0017a63:	c7 05 6c 97 02 c0 3b eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eb3b
c0017a6d:	83 c4 0c             	add    esp,0xc
c0017a70:	e9 d7 70 00 00       	jmp    c001eb4c <avxInit>
c0017a75:	e8 16 74 00 00       	call   c001ee90 <absolutelyNoChanceInHell>
c0017a7a:	85 c0                	test   eax,eax
c0017a7c:	74 1c                	je     c0017a9a <HalInitialiseCoprocessor()+0x68>
c0017a7e:	c7 05 70 97 02 c0 a8 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eea8
c0017a88:	c7 05 6c 97 02 c0 b0 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eeb0
c0017a92:	83 c4 0c             	add    esp,0xc
c0017a95:	e9 1e 74 00 00       	jmp    c001eeb8 <sseInit>
c0017a9a:	e8 37 74 00 00       	call   c001eed6 <x87Detect>
c0017a9f:	85 c0                	test   eax,eax
c0017aa1:	74 1c                	je     c0017abf <HalInitialiseCoprocessor()+0x8d>
c0017aa3:	c7 05 70 97 02 c0 f1 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eef1
c0017aad:	c7 05 6c 97 02 c0 f8 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eef8
c0017ab7:	83 c4 0c             	add    esp,0xc
c0017aba:	e9 40 74 00 00       	jmp    c001eeff <x87Init>
c0017abf:	c7 05 70 97 02 c0 46 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017346
c0017ac9:	c7 05 6c 97 02 c0 46 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017346
c0017ad3:	0f 20 c0             	mov    eax,cr0
c0017ad6:	83 c8 04             	or     eax,0x4
c0017ad9:	0f 22 c0             	mov    cr0,eax
c0017adc:	83 c4 0c             	add    esp,0xc
c0017adf:	c3                   	ret    

c0017ae0 <HalPanic(char const*)>:
c0017ae0:	53                   	push   ebx
c0017ae1:	83 ec 10             	sub    esp,0x10
c0017ae4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ae8:	fa                   	cli    
c0017ae9:	53                   	push   ebx
c0017aea:	68 87 26 02 c0       	push   0xc0022687
c0017aef:	e8 16 2e ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0017af4:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	85 c0                	test   eax,eax
c0017afe:	74 09                	je     c0017b09 <HalPanic(char const*)+0x29>
c0017b00:	83 ec 0c             	sub    esp,0xc
c0017b03:	53                   	push   ebx
c0017b04:	ff d0                	call   eax
c0017b06:	83 c4 10             	add    esp,0x10
c0017b09:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017b0e:	85 c0                	test   eax,eax
c0017b10:	0f 84 dc 00 00 00    	je     c0017bf2 <HalPanic(char const*)+0x112>
c0017b16:	52                   	push   edx
c0017b17:	6a 01                	push   0x1
c0017b19:	6a 0f                	push   0xf
c0017b1b:	50                   	push   eax
c0017b1c:	e8 a9 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b21:	59                   	pop    ecx
c0017b22:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b28:	e8 8d 0c ff ff       	call   c00087ba <VgaText::clearScreen()>
c0017b2d:	58                   	pop    eax
c0017b2e:	5a                   	pop    edx
c0017b2f:	68 44 09 02 c0       	push   0xc0020944
c0017b34:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b3a:	e8 c3 0a ff ff       	call   c0008602 <VgaText::setTitle(char*)>
c0017b3f:	83 c4 0c             	add    esp,0xc
c0017b42:	6a 01                	push   0x1
c0017b44:	6a 0f                	push   0xf
c0017b46:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4c:	e8 79 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b51:	59                   	pop    ecx
c0017b52:	58                   	pop    eax
c0017b53:	68 a0 26 02 c0       	push   0xc00226a0
c0017b58:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b5e:	e8 49 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b63:	83 c4 0c             	add    esp,0xc
c0017b66:	6a 0f                	push   0xf
c0017b68:	6a 01                	push   0x1
c0017b6a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b70:	e8 55 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b75:	58                   	pop    eax
c0017b76:	5a                   	pop    edx
c0017b77:	68 a9 26 02 c0       	push   0xc00226a9
c0017b7c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b82:	e8 25 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017b87:	83 c4 0c             	add    esp,0xc
c0017b8a:	6a 01                	push   0x1
c0017b8c:	6a 0f                	push   0xf
c0017b8e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b94:	e8 31 0a ff ff       	call   c00085ca <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b99:	59                   	pop    ecx
c0017b9a:	58                   	pop    eax
c0017b9b:	68 ed 26 02 c0       	push   0xc00226ed
c0017ba0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ba6:	e8 01 0f ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bab:	58                   	pop    eax
c0017bac:	5a                   	pop    edx
c0017bad:	68 b6 26 02 c0       	push   0xc00226b6
c0017bb2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bb8:	e8 ef 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bbd:	59                   	pop    ecx
c0017bbe:	58                   	pop    eax
c0017bbf:	68 f0 26 02 c0       	push   0xc00226f0
c0017bc4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bca:	e8 dd 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bcf:	58                   	pop    eax
c0017bd0:	5a                   	pop    edx
c0017bd1:	53                   	push   ebx
c0017bd2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bd8:	e8 cf 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bdd:	59                   	pop    ecx
c0017bde:	5b                   	pop    ebx
c0017bdf:	68 ed 26 02 c0       	push   0xc00226ed
c0017be4:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bea:	e8 bd 0e ff ff       	call   c0008aac <VgaText::puts(char const*)>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	eb fe                	jmp    c0017bf2 <HalPanic(char const*)+0x112>

c0017bf4 <HalQueryPerformanceCounter()>:
c0017bf4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017bf9:	31 d2                	xor    edx,edx
c0017bfb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017c01:	31 c0                	xor    eax,eax
c0017c03:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017c0a:	74 02                	je     c0017c0e <HalQueryPerformanceCounter()+0x1a>
c0017c0c:	0f 31                	rdtsc  
c0017c0e:	c3                   	ret    

c0017c0f <HalInitialise()>:
c0017c0f:	53                   	push   ebx
c0017c10:	83 ec 08             	sub    esp,0x8
c0017c13:	e8 05 52 ff ff       	call   c000ce1d <setupINTS()>
c0017c18:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c1d:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017c24:	75 0f                	jne    c0017c35 <HalInitialise()+0x26>
c0017c26:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c2c:	83 e2 fe             	and    edx,0xfffffffe
c0017c2f:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c35:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017c3c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c42:	83 e2 fe             	and    edx,0xfffffffe
c0017c45:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c4b:	e8 a0 02 00 00       	call   c0017ef0 <picOpen()>
c0017c50:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017c57:	74 0a                	je     c0017c63 <HalInitialise()+0x54>
c0017c59:	e8 e2 01 00 00       	call   c0017e40 <picDisable()>
c0017c5e:	e8 0d 68 00 00       	call   c001e470 <apicOpen()>
c0017c63:	50                   	push   eax
c0017c64:	bb 0f 00 00 00       	mov    ebx,0xf
c0017c69:	6a 00                	push   0x0
c0017c6b:	68 b6 78 01 c0       	push   0xc00178b6
c0017c70:	6a 00                	push   0x0
c0017c72:	e8 6f 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c77:	83 c4 0c             	add    esp,0xc
c0017c7a:	6a 00                	push   0x0
c0017c7c:	68 b6 78 01 c0       	push   0xc00178b6
c0017c81:	6a 01                	push   0x1
c0017c83:	e8 5e 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c88:	83 c4 0c             	add    esp,0xc
c0017c8b:	6a 00                	push   0x0
c0017c8d:	68 47 73 01 c0       	push   0xc0017347
c0017c92:	6a 02                	push   0x2
c0017c94:	e8 4d 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c99:	83 c4 0c             	add    esp,0xc
c0017c9c:	6a 00                	push   0x0
c0017c9e:	68 b6 78 01 c0       	push   0xc00178b6
c0017ca3:	6a 03                	push   0x3
c0017ca5:	e8 3c 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017caa:	83 c4 0c             	add    esp,0xc
c0017cad:	6a 00                	push   0x0
c0017caf:	68 b6 78 01 c0       	push   0xc00178b6
c0017cb4:	6a 04                	push   0x4
c0017cb6:	e8 2b 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cbb:	83 c4 0c             	add    esp,0xc
c0017cbe:	6a 00                	push   0x0
c0017cc0:	68 b6 78 01 c0       	push   0xc00178b6
c0017cc5:	6a 05                	push   0x5
c0017cc7:	e8 1a 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ccc:	83 c4 0c             	add    esp,0xc
c0017ccf:	6a 00                	push   0x0
c0017cd1:	68 ea 78 01 c0       	push   0xc00178ea
c0017cd6:	6a 06                	push   0x6
c0017cd8:	e8 09 4f ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cdd:	83 c4 0c             	add    esp,0xc
c0017ce0:	6a 00                	push   0x0
c0017ce2:	68 60 73 01 c0       	push   0xc0017360
c0017ce7:	6a 08                	push   0x8
c0017ce9:	e8 f8 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cee:	83 c4 0c             	add    esp,0xc
c0017cf1:	6a 00                	push   0x0
c0017cf3:	68 b6 78 01 c0       	push   0xc00178b6
c0017cf8:	6a 09                	push   0x9
c0017cfa:	e8 e7 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cff:	83 c4 0c             	add    esp,0xc
c0017d02:	6a 00                	push   0x0
c0017d04:	68 b6 78 01 c0       	push   0xc00178b6
c0017d09:	6a 0a                	push   0xa
c0017d0b:	e8 d6 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d10:	83 c4 0c             	add    esp,0xc
c0017d13:	6a 00                	push   0x0
c0017d15:	68 b6 78 01 c0       	push   0xc00178b6
c0017d1a:	6a 0b                	push   0xb
c0017d1c:	e8 c5 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d21:	83 c4 0c             	add    esp,0xc
c0017d24:	6a 00                	push   0x0
c0017d26:	68 c6 77 01 c0       	push   0xc00177c6
c0017d2b:	6a 0d                	push   0xd
c0017d2d:	e8 b4 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d32:	83 c4 0c             	add    esp,0xc
c0017d35:	6a 00                	push   0x0
c0017d37:	68 2d 78 01 c0       	push   0xc001782d
c0017d3c:	6a 0e                	push   0xe
c0017d3e:	e8 a3 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d43:	83 c4 10             	add    esp,0x10
c0017d46:	50                   	push   eax
c0017d47:	6a 00                	push   0x0
c0017d49:	68 b6 78 01 c0       	push   0xc00178b6
c0017d4e:	53                   	push   ebx
c0017d4f:	43                   	inc    ebx
c0017d50:	e8 91 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d55:	83 c4 10             	add    esp,0x10
c0017d58:	83 fb 1e             	cmp    ebx,0x1e
c0017d5b:	75 e9                	jne    c0017d46 <HalInitialise()+0x137>
c0017d5d:	50                   	push   eax
c0017d5e:	6a 00                	push   0x0
c0017d60:	68 47 25 01 c0       	push   0xc0012547
c0017d65:	6a 60                	push   0x60
c0017d67:	e8 7a 4e ff ff       	call   c000cbe6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d6c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d71:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017d7b:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d82:	e8 4c fd fe ff       	call   c0007ad3 <malloc>
c0017d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d8a:	89 c3                	mov    ebx,eax
c0017d8c:	e8 37 09 00 00       	call   c00186c8 <RTC::RTC()>
c0017d91:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d9b:	5a                   	pop    edx
c0017d9c:	59                   	pop    ecx
c0017d9d:	53                   	push   ebx
c0017d9e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017da4:	e8 07 49 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c0017da9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017dab:	6a 00                	push   0x0
c0017dad:	6a 00                	push   0x0
c0017daf:	6a 00                	push   0x0
c0017db1:	53                   	push   ebx
c0017db2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017db5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017dba:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017dc0:	83 c4 28             	add    esp,0x28
c0017dc3:	5b                   	pop    ebx
c0017dc4:	c3                   	ret    

c0017dc5 <HalMakeBeep(int)>:
c0017dc5:	53                   	push   ebx
c0017dc6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017dca:	85 db                	test   ebx,ebx
c0017dcc:	75 07                	jne    c0017dd5 <HalMakeBeep(int)+0x10>
c0017dce:	e4 61                	in     al,0x61
c0017dd0:	83 e0 fc             	and    eax,0xfffffffc
c0017dd3:	eb 26                	jmp    c0017dfb <HalMakeBeep(int)+0x36>
c0017dd5:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017dda:	99                   	cdq    
c0017ddb:	f7 fb                	idiv   ebx
c0017ddd:	89 c1                	mov    ecx,eax
c0017ddf:	b0 b6                	mov    al,0xb6
c0017de1:	e6 43                	out    0x43,al
c0017de3:	88 c8                	mov    al,cl
c0017de5:	e6 42                	out    0x42,al
c0017de7:	89 c8                	mov    eax,ecx
c0017de9:	c1 e8 08             	shr    eax,0x8
c0017dec:	e6 42                	out    0x42,al
c0017dee:	e4 61                	in     al,0x61
c0017df0:	89 c2                	mov    edx,eax
c0017df2:	83 ca 03             	or     edx,0x3
c0017df5:	38 d0                	cmp    al,dl
c0017df7:	74 04                	je     c0017dfd <HalMakeBeep(int)+0x38>
c0017df9:	88 d0                	mov    al,dl
c0017dfb:	e6 61                	out    0x61,al
c0017dfd:	5b                   	pop    ebx
c0017dfe:	c3                   	ret    

c0017dff <HalGetRand()>:
c0017dff:	31 c0                	xor    eax,eax
c0017e01:	c3                   	ret    

c0017e02 <HalEndOfInterrupt(int)>:
c0017e02:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e09:	74 23                	je     c0017e2e <HalEndOfInterrupt(int)+0x2c>
c0017e0b:	83 ec 14             	sub    esp,0x14
c0017e0e:	6a 1b                	push   0x1b
c0017e10:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e16:	e8 c7 f2 fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c0017e1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017e20:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017e2a:	83 c4 1c             	add    esp,0x1c
c0017e2d:	c3                   	ret    
c0017e2e:	e9 41 02 00 00       	jmp    c0018074 <picEOI(int)>

c0017e33 <HalRestart()>:
c0017e33:	c3                   	ret    

c0017e34 <HalShutdown()>:
c0017e34:	c3                   	ret    

c0017e35 <HalSleep()>:
c0017e35:	c3                   	ret    
c0017e36:	66 90                	xchg   ax,ax

c0017e38 <picIoWait()>:
c0017e38:	eb 00                	jmp    c0017e3a <picIoWait()+0x2>
c0017e3a:	eb 00                	jmp    c0017e3c <picIoWait()+0x4>
c0017e3c:	90                   	nop
c0017e3d:	c3                   	ret    
c0017e3e:	66 90                	xchg   ax,ax

c0017e40 <picDisable()>:
c0017e40:	83 ec 10             	sub    esp,0x10
c0017e43:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017e4a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017e4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017e58:	ee                   	out    dx,al
c0017e59:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017e60:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017e65:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e69:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017e6e:	ee                   	out    dx,al
c0017e6f:	90                   	nop
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	c3                   	ret    

c0017e74 <picGetIRQReg(int)>:
c0017e74:	83 ec 10             	sub    esp,0x10
c0017e77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e7b:	0f b6 c0             	movzx  eax,al
c0017e7e:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e85:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e89:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e8d:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e92:	ee                   	out    dx,al
c0017e93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e97:	0f b6 c0             	movzx  eax,al
c0017e9a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017ea1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017ea5:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017ea9:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017eae:	ee                   	out    dx,al
c0017eaf:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017eb6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017ebb:	89 c2                	mov    edx,eax
c0017ebd:	ec                   	in     al,dx
c0017ebe:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ec2:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ec6:	0f b6 c0             	movzx  eax,al
c0017ec9:	c1 e0 08             	shl    eax,0x8
c0017ecc:	89 c1                	mov    ecx,eax
c0017ece:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ed5:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017eda:	89 c2                	mov    edx,eax
c0017edc:	ec                   	in     al,dx
c0017edd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017ee1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017ee5:	0f b6 c0             	movzx  eax,al
c0017ee8:	09 c8                	or     eax,ecx
c0017eea:	83 c4 10             	add    esp,0x10
c0017eed:	c3                   	ret    
c0017eee:	66 90                	xchg   ax,ax

c0017ef0 <picOpen()>:
c0017ef0:	83 ec 50             	sub    esp,0x50
c0017ef3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017efa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017eff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f07:	ee                   	out    dx,al
c0017f08:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017f0f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017f14:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017f18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f1c:	ee                   	out    dx,al
c0017f1d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017f25:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017f2d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f38:	89 c2                	mov    edx,eax
c0017f3a:	ec                   	in     al,dx
c0017f3b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017f3f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017f43:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017f47:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f52:	89 c2                	mov    edx,eax
c0017f54:	ec                   	in     al,dx
c0017f55:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017f59:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017f5d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017f61:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017f68:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017f6d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017f71:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f75:	ee                   	out    dx,al
c0017f76:	e8 bd fe ff ff       	call   c0017e38 <picIoWait()>
c0017f7b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f82:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f87:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f8b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f8f:	ee                   	out    dx,al
c0017f90:	e8 a3 fe ff ff       	call   c0017e38 <picIoWait()>
c0017f95:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f99:	0f b6 c0             	movzx  eax,al
c0017f9c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017fa3:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017fa7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017fab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017faf:	ee                   	out    dx,al
c0017fb0:	e8 83 fe ff ff       	call   c0017e38 <picIoWait()>
c0017fb5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fb9:	0f b6 c0             	movzx  eax,al
c0017fbc:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017fc3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017fc7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017fcb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017fcf:	ee                   	out    dx,al
c0017fd0:	e8 63 fe ff ff       	call   c0017e38 <picIoWait()>
c0017fd5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017fdc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017fe1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017fe5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fe9:	ee                   	out    dx,al
c0017fea:	e8 49 fe ff ff       	call   c0017e38 <picIoWait()>
c0017fef:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017ff6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017ffb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017fff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018003:	ee                   	out    dx,al
c0018004:	e8 2f fe ff ff       	call   c0017e38 <picIoWait()>
c0018009:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018010:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018015:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018019:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001801d:	ee                   	out    dx,al
c001801e:	e8 15 fe ff ff       	call   c0017e38 <picIoWait()>
c0018023:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001802a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001802f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018033:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018037:	ee                   	out    dx,al
c0018038:	e8 fb fd ff ff       	call   c0017e38 <picIoWait()>
c001803d:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018042:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018049:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001804d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018051:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018055:	ee                   	out    dx,al
c0018056:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001805b:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018062:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018066:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001806a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001806e:	ee                   	out    dx,al
c001806f:	90                   	nop
c0018070:	83 c4 50             	add    esp,0x50
c0018073:	c3                   	ret    

c0018074 <picEOI(int)>:
c0018074:	83 ec 10             	sub    esp,0x10
c0018077:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001807c:	75 1e                	jne    c001809c <picEOI(int)+0x28>
c001807e:	6a 0b                	push   0xb
c0018080:	e8 ef fd ff ff       	call   c0017e74 <picGetIRQReg(int)>
c0018085:	83 c4 04             	add    esp,0x4
c0018088:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001808d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018092:	25 80 00 00 00       	and    eax,0x80
c0018097:	74 73                	je     c001810c <picEOI(int)+0x98>
c0018099:	8d 76 00             	lea    esi,[esi+0x0]
c001809c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00180a1:	75 31                	jne    c00180d4 <picEOI(int)+0x60>
c00180a3:	6a 0b                	push   0xb
c00180a5:	e8 ca fd ff ff       	call   c0017e74 <picGetIRQReg(int)>
c00180aa:	83 c4 04             	add    esp,0x4
c00180ad:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b6:	98                   	cwde   
c00180b7:	85 c0                	test   eax,eax
c00180b9:	78 19                	js     c00180d4 <picEOI(int)+0x60>
c00180bb:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00180c2:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00180c7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00180cb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00180d0:	ee                   	out    dx,al
c00180d1:	eb 3d                	jmp    c0018110 <picEOI(int)+0x9c>
c00180d3:	90                   	nop
c00180d4:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00180d9:	7e 19                	jle    c00180f4 <picEOI(int)+0x80>
c00180db:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00180e2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00180e7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00180eb:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00180f0:	ee                   	out    dx,al
c00180f1:	8d 76 00             	lea    esi,[esi+0x0]
c00180f4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00180fb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018100:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018104:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018109:	ee                   	out    dx,al
c001810a:	eb 04                	jmp    c0018110 <picEOI(int)+0x9c>
c001810c:	90                   	nop
c001810d:	8d 76 00             	lea    esi,[esi+0x0]
c0018110:	83 c4 10             	add    esp,0x10
c0018113:	c3                   	ret    

c0018114 <RTC::open(int, int, void*)>:
c0018114:	31 c0                	xor    eax,eax
c0018116:	c3                   	ret    
c0018117:	90                   	nop

c0018118 <RTC::close(int, int, void*)>:
c0018118:	31 c0                	xor    eax,eax
c001811a:	c3                   	ret    
c001811b:	90                   	nop

c001811c <RTC::timeInSecondsUTC()>:
c001811c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018120:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018126:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001812c:	c3                   	ret    
c001812d:	90                   	nop

c001812e <RTC::timeInDatetimeUTC()>:
c001812e:	53                   	push   ebx
c001812f:	83 ec 14             	sub    esp,0x14
c0018132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018136:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001813a:	8b 10                	mov    edx,DWORD PTR [eax]
c001813c:	50                   	push   eax
c001813d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018140:	83 c4 0c             	add    esp,0xc
c0018143:	52                   	push   edx
c0018144:	50                   	push   eax
c0018145:	53                   	push   ebx
c0018146:	e8 d9 42 ff ff       	call   c000c424 <secondsToDatetime(unsigned long long)>
c001814b:	89 d8                	mov    eax,ebx
c001814d:	83 c4 14             	add    esp,0x14
c0018150:	5b                   	pop    ebx
c0018151:	c2 04 00             	ret    0x4

c0018154 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018154:	56                   	push   esi
c0018155:	53                   	push   ebx
c0018156:	83 ec 14             	sub    esp,0x14
c0018159:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001815d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001815f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018162:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018166:	52                   	push   edx
c0018167:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001816b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001816f:	50                   	push   eax
c0018170:	e8 af 42 ff ff       	call   c000c424 <secondsToDatetime(unsigned long long)>
c0018175:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018179:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001817d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018181:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018185:	89 f0                	mov    eax,esi
c0018187:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001818b:	83 c4 20             	add    esp,0x20
c001818e:	5b                   	pop    ebx
c001818f:	5e                   	pop    esi
c0018190:	ff e0                	jmp    eax

c0018192 <RTC::~RTC()>:
c0018192:	83 ec 0c             	sub    esp,0xc
c0018195:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c001819a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819e:	89 10                	mov    DWORD PTR [eax],edx
c00181a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a4:	83 ec 0c             	sub    esp,0xc
c00181a7:	50                   	push   eax
c00181a8:	e8 03 40 ff ff       	call   c000c1b0 <Clock::~Clock()>
c00181ad:	83 c4 10             	add    esp,0x10
c00181b0:	90                   	nop
c00181b1:	83 c4 0c             	add    esp,0xc
c00181b4:	c3                   	ret    
c00181b5:	90                   	nop

c00181b6 <RTC::~RTC()>:
c00181b6:	83 ec 0c             	sub    esp,0xc
c00181b9:	83 ec 0c             	sub    esp,0xc
c00181bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181c0:	e8 cd ff ff ff       	call   c0018192 <RTC::~RTC()>
c00181c5:	83 c4 10             	add    esp,0x10
c00181c8:	83 ec 08             	sub    esp,0x8
c00181cb:	68 60 01 00 00       	push   0x160
c00181d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181d4:	e8 33 26 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c00181d9:	83 c4 10             	add    esp,0x10
c00181dc:	83 c4 0c             	add    esp,0xc
c00181df:	c3                   	ret    

c00181e0 <RTC::get_update_in_progress_flag()>:
c00181e0:	83 ec 14             	sub    esp,0x14
c00181e3:	6a 0a                	push   0xa
c00181e5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181eb:	e8 aa ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00181f0:	83 c4 1c             	add    esp,0x1c
c00181f3:	0f b6 c0             	movzx  eax,al
c00181f6:	c1 e8 07             	shr    eax,0x7
c00181f9:	c3                   	ret    

c00181fa <RTC::completeRTCRefresh()>:
c00181fa:	55                   	push   ebp
c00181fb:	57                   	push   edi
c00181fc:	56                   	push   esi
c00181fd:	53                   	push   ebx
c00181fe:	83 ec 3c             	sub    esp,0x3c
c0018201:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018207:	83 ec 0c             	sub    esp,0xc
c001820a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001820e:	e8 cd ff ff ff       	call   c00181e0 <RTC::get_update_in_progress_flag()>
c0018213:	83 c4 10             	add    esp,0x10
c0018216:	84 c0                	test   al,al
c0018218:	74 0e                	je     c0018228 <RTC::completeRTCRefresh()+0x2e>
c001821a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018220:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018226:	73 df                	jae    c0018207 <RTC::completeRTCRefresh()+0xd>
c0018228:	50                   	push   eax
c0018229:	50                   	push   eax
c001822a:	6a 00                	push   0x0
c001822c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018232:	e8 63 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018237:	89 c7                	mov    edi,eax
c0018239:	58                   	pop    eax
c001823a:	5a                   	pop    edx
c001823b:	6a 02                	push   0x2
c001823d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018243:	e8 52 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018248:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001824c:	59                   	pop    ecx
c001824d:	5b                   	pop    ebx
c001824e:	6a 04                	push   0x4
c0018250:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018256:	e8 3f ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001825b:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001825f:	5e                   	pop    esi
c0018260:	5d                   	pop    ebp
c0018261:	6a 07                	push   0x7
c0018263:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018269:	e8 2c ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001826e:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018272:	58                   	pop    eax
c0018273:	5a                   	pop    edx
c0018274:	6a 08                	push   0x8
c0018276:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001827c:	e8 19 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018281:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018285:	59                   	pop    ecx
c0018286:	5b                   	pop    ebx
c0018287:	6a 09                	push   0x9
c0018289:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001828f:	e8 06 ef fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018294:	0f b6 c0             	movzx  eax,al
c0018297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001829b:	83 c4 10             	add    esp,0x10
c001829e:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00182a4:	83 ec 0c             	sub    esp,0xc
c00182a7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00182ab:	e8 30 ff ff ff       	call   c00181e0 <RTC::get_update_in_progress_flag()>
c00182b0:	83 c4 10             	add    esp,0x10
c00182b3:	84 c0                	test   al,al
c00182b5:	74 0e                	je     c00182c5 <RTC::completeRTCRefresh()+0xcb>
c00182b7:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182bd:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182c3:	73 df                	jae    c00182a4 <RTC::completeRTCRefresh()+0xaa>
c00182c5:	51                   	push   ecx
c00182c6:	51                   	push   ecx
c00182c7:	6a 00                	push   0x0
c00182c9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182cf:	e8 c6 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182d4:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182d8:	5b                   	pop    ebx
c00182d9:	5e                   	pop    esi
c00182da:	6a 02                	push   0x2
c00182dc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182e2:	e8 b3 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182e7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00182eb:	5d                   	pop    ebp
c00182ec:	58                   	pop    eax
c00182ed:	6a 04                	push   0x4
c00182ef:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182f5:	e8 a0 ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00182fa:	88 c3                	mov    bl,al
c00182fc:	58                   	pop    eax
c00182fd:	5a                   	pop    edx
c00182fe:	6a 07                	push   0x7
c0018300:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018306:	e8 8f ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001830b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001830f:	59                   	pop    ecx
c0018310:	5e                   	pop    esi
c0018311:	6a 08                	push   0x8
c0018313:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018319:	e8 7c ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001831e:	5d                   	pop    ebp
c001831f:	89 c6                	mov    esi,eax
c0018321:	58                   	pop    eax
c0018322:	6a 09                	push   0x9
c0018324:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001832a:	e8 6b ee fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c001832f:	89 f9                	mov    ecx,edi
c0018331:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018335:	83 c4 10             	add    esp,0x10
c0018338:	0f b6 e8             	movzx  ebp,al
c001833b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018340:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018344:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018348:	74 27                	je     c0018371 <RTC::completeRTCRefresh()+0x177>
c001834a:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001834e:	89 f0                	mov    eax,esi
c0018350:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018354:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018358:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001835c:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0018360:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018364:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018368:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001836c:	e9 2d ff ff ff       	jmp    c001829e <RTC::completeRTCRefresh()+0xa4>
c0018371:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018376:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001837a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001837e:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0018382:	75 c6                	jne    c001834a <RTC::completeRTCRefresh()+0x150>
c0018384:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0018389:	89 f1                	mov    ecx,esi
c001838b:	0f b6 fb             	movzx  edi,bl
c001838e:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018392:	0f b6 c9             	movzx  ecx,cl
c0018395:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0018399:	89 f1                	mov    ecx,esi
c001839b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001839f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00183a3:	0f 94 c2             	sete   dl
c00183a6:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00183aa:	0f 94 c0             	sete   al
c00183ad:	21 d0                	and    eax,edx
c00183af:	31 d2                	xor    edx,edx
c00183b1:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00183b5:	0f 94 c2             	sete   dl
c00183b8:	85 c2                	test   edx,eax
c00183ba:	74 8e                	je     c001834a <RTC::completeRTCRefresh()+0x150>
c00183bc:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00183c0:	75 88                	jne    c001834a <RTC::completeRTCRefresh()+0x150>
c00183c2:	52                   	push   edx
c00183c3:	52                   	push   edx
c00183c4:	6a 0b                	push   0xb
c00183c6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183cc:	e8 c9 ed fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c00183d1:	83 c4 10             	add    esp,0x10
c00183d4:	a8 04                	test   al,0x4
c00183d6:	75 7a                	jne    c0018452 <RTC::completeRTCRefresh()+0x258>
c00183d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183dc:	c1 ef 04             	shr    edi,0x4
c00183df:	83 e6 0f             	and    esi,0xf
c00183e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00183e6:	c1 ed 04             	shr    ebp,0x4
c00183e9:	6b ed 0a             	imul   ebp,ebp,0xa
c00183ec:	c1 ea 04             	shr    edx,0x4
c00183ef:	6b d2 0a             	imul   edx,edx,0xa
c00183f2:	83 e1 0f             	and    ecx,0xf
c00183f5:	01 d1                	add    ecx,edx
c00183f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00183fb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00183ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018403:	c1 ea 04             	shr    edx,0x4
c0018406:	6b d2 0a             	imul   edx,edx,0xa
c0018409:	83 e1 0f             	and    ecx,0xf
c001840c:	01 d1                	add    ecx,edx
c001840e:	89 fa                	mov    edx,edi
c0018410:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018414:	83 e2 07             	and    edx,0x7
c0018417:	89 d9                	mov    ecx,ebx
c0018419:	6b d2 0a             	imul   edx,edx,0xa
c001841c:	83 e1 0f             	and    ecx,0xf
c001841f:	83 e3 80             	and    ebx,0xffffff80
c0018422:	01 d1                	add    ecx,edx
c0018424:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018428:	09 cb                	or     ebx,ecx
c001842a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001842e:	c1 ea 04             	shr    edx,0x4
c0018431:	6b d2 0a             	imul   edx,edx,0xa
c0018434:	83 e1 0f             	and    ecx,0xf
c0018437:	01 d1                	add    ecx,edx
c0018439:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001843d:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0018441:	c1 ea 04             	shr    edx,0x4
c0018444:	6b d2 0a             	imul   edx,edx,0xa
c0018447:	01 d6                	add    esi,edx
c0018449:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001844d:	83 e2 0f             	and    edx,0xf
c0018450:	01 d5                	add    ebp,edx
c0018452:	a8 02                	test   al,0x2
c0018454:	75 15                	jne    c001846b <RTC::completeRTCRefresh()+0x271>
c0018456:	f6 c3 80             	test   bl,0x80
c0018459:	74 10                	je     c001846b <RTC::completeRTCRefresh()+0x271>
c001845b:	83 e3 7f             	and    ebx,0x7f
c001845e:	b9 18 00 00 00       	mov    ecx,0x18
c0018463:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018466:	99                   	cdq    
c0018467:	f7 f9                	idiv   ecx
c0018469:	88 d3                	mov    bl,dl
c001846b:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018471:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018477:	77 06                	ja     c001847f <RTC::completeRTCRefresh()+0x285>
c0018479:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c001847f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018484:	31 c9                	xor    ecx,ecx
c0018486:	31 d2                	xor    edx,edx
c0018488:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001848c:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0018490:	89 cd                	mov    ebp,ecx
c0018492:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c0018496:	c1 e7 10             	shl    edi,0x10
c0018499:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001849f:	c1 e0 10             	shl    eax,0x10
c00184a2:	09 c5                	or     ebp,eax
c00184a4:	89 e9                	mov    ecx,ebp
c00184a6:	0f b7 c2             	movzx  eax,dx
c00184a9:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00184ad:	09 f8                	or     eax,edi
c00184af:	89 c2                	mov    edx,eax
c00184b1:	50                   	push   eax
c00184b2:	50                   	push   eax
c00184b3:	88 d9                	mov    cl,bl
c00184b5:	51                   	push   ecx
c00184b6:	52                   	push   edx
c00184b7:	e8 e3 3d ff ff       	call   c000c29f <datetimeToSeconds(datetime_t)>
c00184bc:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00184c0:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00184c6:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00184cc:	83 c4 4c             	add    esp,0x4c
c00184cf:	5b                   	pop    ebx
c00184d0:	5e                   	pop    esi
c00184d1:	5f                   	pop    edi
c00184d2:	5d                   	pop    ebp
c00184d3:	c3                   	ret    

c00184d4 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00184d4:	55                   	push   ebp
c00184d5:	57                   	push   edi
c00184d6:	56                   	push   esi
c00184d7:	53                   	push   ebx
c00184d8:	83 ec 30             	sub    esp,0x30
c00184db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00184df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00184e3:	6a 00                	push   0x0
c00184e5:	6a 00                	push   0x0
c00184e7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184ed:	e8 c0 ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184f2:	83 c4 0c             	add    esp,0xc
c00184f5:	6a 00                	push   0x0
c00184f7:	6a 02                	push   0x2
c00184f9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184ff:	e8 ae ed fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018504:	89 f8                	mov    eax,edi
c0018506:	89 f9                	mov    ecx,edi
c0018508:	0f b6 c4             	movzx  eax,ah
c001850b:	31 d2                	xor    edx,edx
c001850d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018511:	c1 e9 10             	shr    ecx,0x10
c0018514:	89 f0                	mov    eax,esi
c0018516:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001851a:	89 f0                	mov    eax,esi
c001851c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018520:	0f b6 c4             	movzx  eax,ah
c0018523:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018527:	89 f0                	mov    eax,esi
c0018529:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001852d:	c1 e8 10             	shr    eax,0x10
c0018530:	b9 64 00 00 00       	mov    ecx,0x64
c0018535:	f7 f1                	div    ecx
c0018537:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001853b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001853f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018543:	59                   	pop    ecx
c0018544:	5b                   	pop    ebx
c0018545:	89 fb                	mov    ebx,edi
c0018547:	6a 0b                	push   0xb
c0018549:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001854f:	e8 46 ec fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018554:	83 c4 10             	add    esp,0x10
c0018557:	a8 04                	test   al,0x4
c0018559:	89 c5                	mov    ebp,eax
c001855b:	75 6e                	jne    c00185cb <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001855d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018561:	31 d2                	xor    edx,edx
c0018563:	0f b6 c1             	movzx  eax,cl
c0018566:	b9 0a 00 00 00       	mov    ecx,0xa
c001856b:	f7 f1                	div    ecx
c001856d:	c1 e0 04             	shl    eax,0x4
c0018570:	09 d0                	or     eax,edx
c0018572:	31 d2                	xor    edx,edx
c0018574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018578:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001857d:	f7 f1                	div    ecx
c001857f:	c1 e0 04             	shl    eax,0x4
c0018582:	09 d0                	or     eax,edx
c0018584:	31 d2                	xor    edx,edx
c0018586:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001858a:	0f b6 c3             	movzx  eax,bl
c001858d:	f7 f1                	div    ecx
c001858f:	c1 e0 04             	shl    eax,0x4
c0018592:	09 d0                	or     eax,edx
c0018594:	31 d2                	xor    edx,edx
c0018596:	89 c3                	mov    ebx,eax
c0018598:	89 f0                	mov    eax,esi
c001859a:	0f b6 c0             	movzx  eax,al
c001859d:	f7 f1                	div    ecx
c001859f:	c1 e0 04             	shl    eax,0x4
c00185a2:	09 d0                	or     eax,edx
c00185a4:	31 d2                	xor    edx,edx
c00185a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185af:	f7 f1                	div    ecx
c00185b1:	c1 e0 04             	shl    eax,0x4
c00185b4:	09 d0                	or     eax,edx
c00185b6:	31 d2                	xor    edx,edx
c00185b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185c0:	f7 f1                	div    ecx
c00185c2:	c1 e0 04             	shl    eax,0x4
c00185c5:	09 d0                	or     eax,edx
c00185c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185cb:	83 e5 02             	and    ebp,0x2
c00185ce:	75 1e                	jne    c00185ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185d0:	0f b6 c3             	movzx  eax,bl
c00185d3:	83 f8 0b             	cmp    eax,0xb
c00185d6:	76 10                	jbe    c00185e8 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00185d8:	8d 53 f4             	lea    edx,[ebx-0xc]
c00185db:	84 d2                	test   dl,dl
c00185dd:	88 d3                	mov    bl,dl
c00185df:	75 02                	jne    c00185e3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00185e1:	b3 0c                	mov    bl,0xc
c00185e3:	83 cb 80             	or     ebx,0xffffff80
c00185e6:	eb 06                	jmp    c00185ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185e8:	85 c0                	test   eax,eax
c00185ea:	75 02                	jne    c00185ee <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185ec:	b3 0c                	mov    bl,0xc
c00185ee:	50                   	push   eax
c00185ef:	0f b6 db             	movzx  ebx,bl
c00185f2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00185f7:	52                   	push   edx
c00185f8:	6a 00                	push   0x0
c00185fa:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018600:	e8 ad ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018605:	83 c4 0c             	add    esp,0xc
c0018608:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001860d:	50                   	push   eax
c001860e:	6a 02                	push   0x2
c0018610:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018616:	e8 97 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001861b:	83 c4 0c             	add    esp,0xc
c001861e:	53                   	push   ebx
c001861f:	6a 04                	push   0x4
c0018621:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018627:	e8 86 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001862c:	83 c4 0c             	add    esp,0xc
c001862f:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018634:	52                   	push   edx
c0018635:	6a 07                	push   0x7
c0018637:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001863d:	e8 70 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018642:	83 c4 0c             	add    esp,0xc
c0018645:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001864a:	50                   	push   eax
c001864b:	6a 08                	push   0x8
c001864d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018653:	e8 5a ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018658:	83 c4 0c             	add    esp,0xc
c001865b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018660:	55                   	push   ebp
c0018661:	6a 09                	push   0x9
c0018663:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018669:	e8 44 ec fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c001866e:	5a                   	pop    edx
c001866f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018673:	e8 82 fb ff ff       	call   c00181fa <RTC::completeRTCRefresh()>
c0018678:	83 c4 3c             	add    esp,0x3c
c001867b:	b0 01                	mov    al,0x1
c001867d:	5b                   	pop    ebx
c001867e:	5e                   	pop    esi
c001867f:	5f                   	pop    edi
c0018680:	5d                   	pop    ebp
c0018681:	c3                   	ret    

c0018682 <rtcIRQHandler(regs*, void*)>:
c0018682:	53                   	push   ebx
c0018683:	83 ec 10             	sub    esp,0x10
c0018686:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001868a:	6a 0c                	push   0xc
c001868c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018692:	e8 03 eb fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018697:	83 c4 10             	add    esp,0x10
c001869a:	a8 80                	test   al,0x80
c001869c:	74 24                	je     c00186c2 <rtcIRQHandler(regs*, void*)+0x40>
c001869e:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00186a5:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00186ac:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00186b3:	75 0d                	jne    c00186c2 <rtcIRQHandler(regs*, void*)+0x40>
c00186b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186b9:	83 c4 08             	add    esp,0x8
c00186bc:	5b                   	pop    ebx
c00186bd:	e9 38 fb ff ff       	jmp    c00181fa <RTC::completeRTCRefresh()>
c00186c2:	83 c4 08             	add    esp,0x8
c00186c5:	5b                   	pop    ebx
c00186c6:	c3                   	ret    
c00186c7:	90                   	nop

c00186c8 <RTC::RTC()>:
c00186c8:	83 ec 1c             	sub    esp,0x1c
c00186cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186cf:	83 ec 08             	sub    esp,0x8
c00186d2:	68 6f 27 02 c0       	push   0xc002276f
c00186d7:	50                   	push   eax
c00186d8:	e8 9d 3a ff ff       	call   c000c17a <Clock::Clock(char const*)>
c00186dd:	83 c4 10             	add    esp,0x10
c00186e0:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c00186e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186e9:	89 10                	mov    DWORD PTR [eax],edx
c00186eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ef:	83 ec 0c             	sub    esp,0xc
c00186f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f6:	6a 01                	push   0x1
c00186f8:	68 82 86 01 c0       	push   0xc0018682
c00186fd:	6a 08                	push   0x8
c00186ff:	50                   	push   eax
c0018700:	e8 57 3f ff ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018705:	83 c4 20             	add    esp,0x20
c0018708:	89 c2                	mov    edx,eax
c001870a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001870e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018714:	fa                   	cli    
c0018715:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001871a:	83 c0 01             	add    eax,0x1
c001871d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018722:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018727:	83 ec 08             	sub    esp,0x8
c001872a:	6a 0b                	push   0xb
c001872c:	50                   	push   eax
c001872d:	e8 68 ea fe ff       	call   c000719a <Computer::readCMOS(unsigned char)>
c0018732:	83 c4 10             	add    esp,0x10
c0018735:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018739:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001873e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018742:	83 ca 10             	or     edx,0x10
c0018745:	0f b6 d2             	movzx  edx,dl
c0018748:	83 ec 04             	sub    esp,0x4
c001874b:	52                   	push   edx
c001874c:	6a 0b                	push   0xb
c001874e:	50                   	push   eax
c001874f:	e8 5e eb fe ff       	call   c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018754:	83 c4 10             	add    esp,0x10
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001875e:	e8 97 fa ff ff       	call   c00181fa <RTC::completeRTCRefresh()>
c0018763:	83 c4 10             	add    esp,0x10
c0018766:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001876b:	83 e8 01             	sub    eax,0x1
c001876e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018773:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018778:	85 c0                	test   eax,eax
c001877a:	75 01                	jne    c001877d <RTC::RTC()+0xb5>
c001877c:	fb                   	sti    
c001877d:	90                   	nop
c001877e:	83 c4 1c             	add    esp,0x1c
c0018781:	c3                   	ret    
c0018782:	66 90                	xchg   ax,ax

c0018784 <HalConsoleScroll(int, int)>:
c0018784:	83 ec 10             	sub    esp,0x10
c0018787:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001878f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018797:	90                   	nop
c0018798:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001879d:	0f 8f e1 00 00 00    	jg     c0018884 <HalConsoleScroll(int, int)+0x100>
c00187a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00187ab:	90                   	nop
c00187ac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00187b4:	0f 8f be 00 00 00    	jg     c0018878 <HalConsoleScroll(int, int)+0xf4>
c00187ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187be:	89 d0                	mov    eax,edx
c00187c0:	c1 e0 02             	shl    eax,0x2
c00187c3:	01 d0                	add    eax,edx
c00187c5:	c1 e0 05             	shl    eax,0x5
c00187c8:	89 c2                	mov    edx,eax
c00187ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187ce:	01 d0                	add    eax,edx
c00187d0:	89 c2                	mov    edx,eax
c00187d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00187d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187dd:	89 d0                	mov    eax,edx
c00187df:	c1 e0 02             	shl    eax,0x2
c00187e2:	01 d0                	add    eax,edx
c00187e4:	c1 e0 05             	shl    eax,0x5
c00187e7:	89 c2                	mov    edx,eax
c00187e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187ed:	01 d0                	add    eax,edx
c00187ef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00187f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187f9:	01 d0                	add    eax,edx
c00187fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00187fd:	88 10                	mov    BYTE PTR [eax],dl
c00187ff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018804:	75 66                	jne    c001886c <HalConsoleScroll(int, int)+0xe8>
c0018806:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001880a:	83 e0 01             	and    eax,0x1
c001880d:	74 39                	je     c0018848 <HalConsoleScroll(int, int)+0xc4>
c001880f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018813:	83 e0 0f             	and    eax,0xf
c0018816:	88 c2                	mov    dl,al
c0018818:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001881c:	c1 e0 04             	shl    eax,0x4
c001881f:	09 d0                	or     eax,edx
c0018821:	88 c1                	mov    cl,al
c0018823:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018827:	89 d0                	mov    eax,edx
c0018829:	c1 e0 02             	shl    eax,0x2
c001882c:	01 d0                	add    eax,edx
c001882e:	c1 e0 05             	shl    eax,0x5
c0018831:	89 c2                	mov    edx,eax
c0018833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018837:	01 d0                	add    eax,edx
c0018839:	89 c2                	mov    edx,eax
c001883b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001883f:	01 d0                	add    eax,edx
c0018841:	88 ca                	mov    dl,cl
c0018843:	88 10                	mov    BYTE PTR [eax],dl
c0018845:	eb 25                	jmp    c001886c <HalConsoleScroll(int, int)+0xe8>
c0018847:	90                   	nop
c0018848:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001884c:	89 d0                	mov    eax,edx
c001884e:	c1 e0 02             	shl    eax,0x2
c0018851:	01 d0                	add    eax,edx
c0018853:	c1 e0 05             	shl    eax,0x5
c0018856:	89 c2                	mov    edx,eax
c0018858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001885c:	01 d0                	add    eax,edx
c001885e:	89 c2                	mov    edx,eax
c0018860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018864:	01 d0                	add    eax,edx
c0018866:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018871:	e9 36 ff ff ff       	jmp    c00187ac <HalConsoleScroll(int, int)+0x28>
c0018876:	66 90                	xchg   ax,ax
c0018878:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001887d:	e9 16 ff ff ff       	jmp    c0018798 <HalConsoleScroll(int, int)+0x14>
c0018882:	66 90                	xchg   ax,ax
c0018884:	90                   	nop
c0018885:	83 c4 10             	add    esp,0x10
c0018888:	c3                   	ret    
c0018889:	8d 76 00             	lea    esi,[esi+0x0]

c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001888c:	83 ec 14             	sub    esp,0x14
c001888f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018893:	88 04 24             	mov    BYTE PTR [esp],al
c0018896:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018899:	0f b6 c0             	movzx  eax,al
c001889c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188a0:	89 d1                	mov    ecx,edx
c00188a2:	83 e1 0f             	and    ecx,0xf
c00188a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188a9:	c1 e2 04             	shl    edx,0x4
c00188ac:	0f b6 d2             	movzx  edx,dl
c00188af:	09 ca                	or     edx,ecx
c00188b1:	c1 e2 08             	shl    edx,0x8
c00188b4:	09 d0                	or     eax,edx
c00188b6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00188bb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00188c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188c7:	89 d0                	mov    eax,edx
c00188c9:	c1 e0 02             	shl    eax,0x2
c00188cc:	01 d0                	add    eax,edx
c00188ce:	c1 e0 04             	shl    eax,0x4
c00188d1:	89 c2                	mov    edx,eax
c00188d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188d7:	01 d0                	add    eax,edx
c00188d9:	d1 e0                	shl    eax,1
c00188db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00188df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00188e3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00188e8:	66 89 10             	mov    WORD PTR [eax],dx
c00188eb:	90                   	nop
c00188ec:	83 c4 14             	add    esp,0x14
c00188ef:	c3                   	ret    

c00188f0 <HalConsoleCursorUpdate(int, int)>:
c00188f0:	83 ec 20             	sub    esp,0x20
c00188f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188f7:	89 c2                	mov    edx,eax
c00188f9:	c1 e2 02             	shl    edx,0x2
c00188fc:	01 d0                	add    eax,edx
c00188fe:	c1 e0 04             	shl    eax,0x4
c0018901:	89 c2                	mov    edx,eax
c0018903:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018907:	01 d0                	add    eax,edx
c0018909:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001890e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018915:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001891a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001891e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018922:	ee                   	out    dx,al
c0018923:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018928:	0f b6 c0             	movzx  eax,al
c001892b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018932:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018936:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001893a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001893e:	ee                   	out    dx,al
c001893f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018946:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001894b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001894f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018953:	ee                   	out    dx,al
c0018954:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018959:	c1 e8 08             	shr    eax,0x8
c001895c:	0f b6 c0             	movzx  eax,al
c001895f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018966:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001896a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001896e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018972:	ee                   	out    dx,al
c0018973:	90                   	nop
c0018974:	83 c4 20             	add    esp,0x20
c0018977:	c3                   	ret    

c0018978 <FAT::getName()>:
c0018978:	b8 c0 27 02 c0       	mov    eax,0xc00227c0
c001897d:	c3                   	ret    
c001897e:	66 90                	xchg   ax,ax

c0018980 <FAT::tell(void*, unsigned long long*)>:
c0018980:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018985:	75 09                	jne    c0018990 <FAT::tell(void*, unsigned long long*)+0x10>
c0018987:	b8 04 00 00 00       	mov    eax,0x4
c001898c:	c3                   	ret    
c001898d:	8d 76 00             	lea    esi,[esi+0x0]
c0018990:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018995:	75 09                	jne    c00189a0 <FAT::tell(void*, unsigned long long*)+0x20>
c0018997:	b8 04 00 00 00       	mov    eax,0x4
c001899c:	c3                   	ret    
c001899d:	8d 76 00             	lea    esi,[esi+0x0]
c00189a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00189a7:	ba 00 00 00 00       	mov    edx,0x0
c00189ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189b0:	89 01                	mov    DWORD PTR [ecx],eax
c00189b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189b5:	b8 00 00 00 00       	mov    eax,0x0
c00189ba:	c3                   	ret    
c00189bb:	90                   	nop

c00189bc <FAT::stat(void*, unsigned long long*)>:
c00189bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189c1:	75 09                	jne    c00189cc <FAT::stat(void*, unsigned long long*)+0x10>
c00189c3:	b8 04 00 00 00       	mov    eax,0x4
c00189c8:	c3                   	ret    
c00189c9:	8d 76 00             	lea    esi,[esi+0x0]
c00189cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189d1:	75 09                	jne    c00189dc <FAT::stat(void*, unsigned long long*)+0x20>
c00189d3:	b8 04 00 00 00       	mov    eax,0x4
c00189d8:	c3                   	ret    
c00189d9:	8d 76 00             	lea    esi,[esi+0x0]
c00189dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189e3:	ba 00 00 00 00       	mov    edx,0x0
c00189e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189ec:	89 01                	mov    DWORD PTR [ecx],eax
c00189ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189f1:	b8 00 00 00 00       	mov    eax,0x0
c00189f6:	c3                   	ret    
c00189f7:	90                   	nop

c00189f8 <FAT::~FAT()>:
c00189f8:	83 ec 0c             	sub    esp,0xc
c00189fb:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c0018a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a04:	89 10                	mov    DWORD PTR [eax],edx
c0018a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a0a:	83 ec 0c             	sub    esp,0xc
c0018a0d:	50                   	push   eax
c0018a0e:	e8 13 2b ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0018a13:	83 c4 10             	add    esp,0x10
c0018a16:	90                   	nop
c0018a17:	83 c4 0c             	add    esp,0xc
c0018a1a:	c3                   	ret    
c0018a1b:	90                   	nop

c0018a1c <FAT::~FAT()>:
c0018a1c:	83 ec 0c             	sub    esp,0xc
c0018a1f:	83 ec 0c             	sub    esp,0xc
c0018a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a26:	e8 cd ff ff ff       	call   c00189f8 <FAT::~FAT()>
c0018a2b:	83 c4 10             	add    esp,0x10
c0018a2e:	83 ec 08             	sub    esp,0x8
c0018a31:	6a 08                	push   0x8
c0018a33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a37:	e8 d0 1d ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0018a3c:	83 c4 10             	add    esp,0x10
c0018a3f:	83 c4 0c             	add    esp,0xc
c0018a42:	c3                   	ret    
c0018a43:	90                   	nop

c0018a44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018a44:	83 ec 1c             	sub    esp,0x1c
c0018a47:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018a4e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018a53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a57:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a5e:	83 f8 ff             	cmp    eax,0xffffffff
c0018a61:	75 35                	jne    c0018a98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018a63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a67:	88 c2                	mov    dl,al
c0018a69:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a6e:	01 d0                	add    eax,edx
c0018a70:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a74:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018a7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a7e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018a85:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a8e:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018a95:	eb 19                	jmp    c0018ab0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a97:	90                   	nop
c0018a98:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a9c:	88 c2                	mov    dl,al
c0018a9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aa2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018aa9:	01 d0                	add    eax,edx
c0018aab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018aaf:	90                   	nop
c0018ab0:	83 ec 04             	sub    esp,0x4
c0018ab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ab7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018abb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018abf:	50                   	push   eax
c0018ac0:	e8 2e c5 fe ff       	call   c0004ff3 <f_getlabel>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018acc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ad1:	75 09                	jne    c0018adc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018ad3:	b8 00 00 00 00       	mov    eax,0x0
c0018ad8:	eb 0a                	jmp    c0018ae4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018ada:	66 90                	xchg   ax,ax
c0018adc:	b8 01 00 00 00       	mov    eax,0x1
c0018ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae4:	83 c4 1c             	add    esp,0x1c
c0018ae7:	c3                   	ret    

c0018ae8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ae8:	53                   	push   ebx
c0018ae9:	83 ec 58             	sub    esp,0x58
c0018aec:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018af4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018af8:	b9 00 00 00 00       	mov    ecx,0x0
c0018afd:	b8 3c 00 00 00       	mov    eax,0x3c
c0018b02:	83 e0 f8             	and    eax,0xfffffff8
c0018b05:	89 c3                	mov    ebx,eax
c0018b07:	b8 00 00 00 00       	mov    eax,0x0
c0018b0c:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0018b10:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0018b14:	83 c0 08             	add    eax,0x8
c0018b17:	39 d8                	cmp    eax,ebx
c0018b19:	72 f1                	jb     c0018b0c <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0018b1b:	01 c2                	add    edx,eax
c0018b1d:	89 0a                	mov    DWORD PTR [edx],ecx
c0018b1f:	83 c2 04             	add    edx,0x4
c0018b22:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b26:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b2d:	83 f8 ff             	cmp    eax,0xffffffff
c0018b30:	75 36                	jne    c0018b68 <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0018b32:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b36:	88 c2                	mov    dl,al
c0018b38:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b3d:	01 d0                	add    eax,edx
c0018b3f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b43:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b49:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b4d:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b54:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b59:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018b5d:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b64:	eb 1a                	jmp    c0018b80 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0018b66:	66 90                	xchg   ax,ax
c0018b68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b6c:	88 c2                	mov    dl,al
c0018b6e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b72:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b79:	01 d0                	add    eax,edx
c0018b7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b7f:	90                   	nop
c0018b80:	83 ec 08             	sub    esp,0x8
c0018b83:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018b87:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b8b:	50                   	push   eax
c0018b8c:	e8 df 7c fe ff       	call   c0000870 <strcat>
c0018b91:	83 c4 10             	add    esp,0x10
c0018b94:	83 ec 0c             	sub    esp,0xc
c0018b97:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b9b:	50                   	push   eax
c0018b9c:	e8 a6 c5 fe ff       	call   c0005147 <f_setlabel>
c0018ba1:	83 c4 10             	add    esp,0x10
c0018ba4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018ba8:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018bad:	75 09                	jne    c0018bb8 <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0018baf:	b8 00 00 00 00       	mov    eax,0x0
c0018bb4:	eb 0a                	jmp    c0018bc0 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0018bb6:	66 90                	xchg   ax,ax
c0018bb8:	b8 01 00 00 00       	mov    eax,0x1
c0018bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc0:	83 c4 58             	add    esp,0x58
c0018bc3:	5b                   	pop    ebx
c0018bc4:	c3                   	ret    
c0018bc5:	90                   	nop
c0018bc6:	66 90                	xchg   ax,ax

c0018bc8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018bc8:	83 ec 2c             	sub    esp,0x2c
c0018bcb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018bd3:	83 ec 08             	sub    esp,0x8
c0018bd6:	68 e4 27 02 c0       	push   0xc00227e4
c0018bdb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bdf:	e8 9c 7b fe ff       	call   c0000780 <strcmp>
c0018be4:	83 c4 10             	add    esp,0x10
c0018be7:	85 c0                	test   eax,eax
c0018be9:	0f 94 c0             	sete   al
c0018bec:	0f b6 c0             	movzx  eax,al
c0018bef:	85 c0                	test   eax,eax
c0018bf1:	74 0d                	je     c0018c00 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018bf3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bfb:	e9 c0 00 00 00       	jmp    c0018cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c00:	83 ec 08             	sub    esp,0x8
c0018c03:	68 d6 27 02 c0       	push   0xc00227d6
c0018c08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c0c:	e8 6f 7b fe ff       	call   c0000780 <strcmp>
c0018c11:	83 c4 10             	add    esp,0x10
c0018c14:	85 c0                	test   eax,eax
c0018c16:	0f 94 c0             	sete   al
c0018c19:	0f b6 c0             	movzx  eax,al
c0018c1c:	85 c0                	test   eax,eax
c0018c1e:	74 10                	je     c0018c30 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018c20:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c28:	e9 93 00 00 00       	jmp    c0018cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	83 ec 08             	sub    esp,0x8
c0018c33:	68 dc 27 02 c0       	push   0xc00227dc
c0018c38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c3c:	e8 3f 7b fe ff       	call   c0000780 <strcmp>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	85 c0                	test   eax,eax
c0018c46:	0f 94 c0             	sete   al
c0018c49:	0f b6 c0             	movzx  eax,al
c0018c4c:	85 c0                	test   eax,eax
c0018c4e:	74 0c                	je     c0018c5c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018c50:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c58:	eb 66                	jmp    c0018cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c5a:	66 90                	xchg   ax,ax
c0018c5c:	83 ec 08             	sub    esp,0x8
c0018c5f:	68 fc ff 01 c0       	push   0xc001fffc
c0018c64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c68:	e8 13 7b fe ff       	call   c0000780 <strcmp>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	85 c0                	test   eax,eax
c0018c72:	0f 94 c0             	sete   al
c0018c75:	0f b6 c0             	movzx  eax,al
c0018c78:	85 c0                	test   eax,eax
c0018c7a:	74 0c                	je     c0018c88 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018c7c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018c84:	eb 3a                	jmp    c0018cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c86:	66 90                	xchg   ax,ax
c0018c88:	83 ec 08             	sub    esp,0x8
c0018c8b:	68 e2 27 02 c0       	push   0xc00227e2
c0018c90:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c94:	e8 e7 7a fe ff       	call   c0000780 <strcmp>
c0018c99:	83 c4 10             	add    esp,0x10
c0018c9c:	85 c0                	test   eax,eax
c0018c9e:	0f 94 c0             	sete   al
c0018ca1:	0f b6 c0             	movzx  eax,al
c0018ca4:	85 c0                	test   eax,eax
c0018ca6:	74 0c                	je     c0018cb4 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018ca8:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018cb0:	eb 0e                	jmp    c0018cc0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cb2:	66 90                	xchg   ax,ax
c0018cb4:	b8 08 00 00 00       	mov    eax,0x8
c0018cb9:	e9 ea 00 00 00       	jmp    c0018da8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cbe:	66 90                	xchg   ax,ax
c0018cc0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018cc7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018ccc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cd0:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cd7:	83 f8 ff             	cmp    eax,0xffffffff
c0018cda:	75 34                	jne    c0018d10 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018cdc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018ce0:	88 c2                	mov    dl,al
c0018ce2:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ce7:	01 d0                	add    eax,edx
c0018ce9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018ced:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018cf3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cf7:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018cfe:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d03:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d07:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d0e:	eb 18                	jmp    c0018d28 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018d10:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d14:	88 c2                	mov    dl,al
c0018d16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d1a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d21:	01 d0                	add    eax,edx
c0018d23:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d27:	90                   	nop
c0018d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d2c:	88 04 24             	mov    BYTE PTR [esp],al
c0018d2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018d3f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018d44:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d4c:	83 ec 0c             	sub    esp,0xc
c0018d4f:	68 00 20 00 00       	push   0x2000
c0018d54:	e8 7a ed fe ff       	call   c0007ad3 <malloc>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d60:	68 00 20 00 00       	push   0x2000
c0018d65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d69:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d6d:	50                   	push   eax
c0018d6e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018d72:	50                   	push   eax
c0018d73:	e8 cc c6 fe ff       	call   c0005444 <f_mkfs>
c0018d78:	83 c4 10             	add    esp,0x10
c0018d7b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018d7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d84:	75 0a                	jne    c0018d90 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018d86:	b8 00 00 00 00       	mov    eax,0x0
c0018d8b:	eb 1b                	jmp    c0018da8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d90:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d95:	75 09                	jne    c0018da0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d97:	b8 09 00 00 00       	mov    eax,0x9
c0018d9c:	eb 0a                	jmp    c0018da8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d9e:	66 90                	xchg   ax,ax
c0018da0:	b8 01 00 00 00       	mov    eax,0x1
c0018da5:	8d 76 00             	lea    esi,[esi+0x0]
c0018da8:	83 c4 2c             	add    esp,0x2c
c0018dab:	c3                   	ret    

c0018dac <FAT::tryMount(LogicalDisk*, int)>:
c0018dac:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018db2:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018db7:	83 f8 14             	cmp    eax,0x14
c0018dba:	75 18                	jne    c0018dd4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018dbc:	83 ec 0c             	sub    esp,0xc
c0018dbf:	68 e8 27 02 c0       	push   0xc00227e8
c0018dc4:	e8 84 84 ff ff       	call   c001124d <KePanic(char const*)>
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	b0 00                	mov    al,0x0
c0018dce:	e9 ed 01 00 00       	jmp    c0018fc0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dd3:	90                   	nop
c0018dd4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018ddb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018de1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018de7:	3d 00 02 00 00       	cmp    eax,0x200
c0018dec:	74 0a                	je     c0018df8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018dee:	b0 00                	mov    al,0x0
c0018df0:	e9 cb 01 00 00       	jmp    c0018fc0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018df5:	8d 76 00             	lea    esi,[esi+0x0]
c0018df8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018e00:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e07:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e0e:	83 f8 ff             	cmp    eax,0xffffffff
c0018e11:	74 09                	je     c0018e1c <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018e13:	b0 01                	mov    al,0x1
c0018e15:	e9 a6 01 00 00       	jmp    c0018fc0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e1a:	66 90                	xchg   ax,ax
c0018e1c:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018e26:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018e2e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018e35:	88 c2                	mov    dl,al
c0018e37:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e3c:	01 d0                	add    eax,edx
c0018e3e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018e45:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e4b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e52:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e59:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e5e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018e65:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e6c:	83 ec 0c             	sub    esp,0xc
c0018e6f:	68 34 02 00 00       	push   0x234
c0018e74:	e8 5a ec fe ff       	call   c0007ad3 <malloc>
c0018e79:	83 c4 10             	add    esp,0x10
c0018e7c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018e83:	83 ec 04             	sub    esp,0x4
c0018e86:	6a 00                	push   0x0
c0018e88:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e8f:	50                   	push   eax
c0018e90:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e97:	e8 a2 ad fe ff       	call   c0003c3e <f_mount>
c0018e9c:	83 c4 10             	add    esp,0x10
c0018e9f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018ea6:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018eae:	74 1c                	je     c0018ecc <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018eb0:	83 ec 0c             	sub    esp,0xc
c0018eb3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018eba:	e8 34 ec fe ff       	call   c0007af3 <rfree>
c0018ebf:	83 c4 10             	add    esp,0x10
c0018ec2:	b0 00                	mov    al,0x0
c0018ec4:	e9 f7 00 00 00       	jmp    c0018fc0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ecc:	83 ec 04             	sub    esp,0x4
c0018ecf:	68 00 01 00 00       	push   0x100
c0018ed4:	6a 00                	push   0x0
c0018ed6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018edd:	50                   	push   eax
c0018ede:	e8 0d 76 fe ff       	call   c00004f0 <memset>
c0018ee3:	83 c4 10             	add    esp,0x10
c0018ee6:	83 ec 08             	sub    esp,0x8
c0018ee9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ef0:	50                   	push   eax
c0018ef1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ef8:	50                   	push   eax
c0018ef9:	e8 72 79 fe ff       	call   c0000870 <strcat>
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	83 ec 08             	sub    esp,0x8
c0018f04:	68 f6 27 02 c0       	push   0xc00227f6
c0018f09:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f10:	50                   	push   eax
c0018f11:	e8 5a 79 fe ff       	call   c0000870 <strcat>
c0018f16:	83 c4 10             	add    esp,0x10
c0018f19:	83 ec 04             	sub    esp,0x4
c0018f1c:	6a 01                	push   0x1
c0018f1e:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018f25:	50                   	push   eax
c0018f26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f2a:	50                   	push   eax
c0018f2b:	e8 70 ad fe ff       	call   c0003ca0 <f_open>
c0018f30:	83 c4 10             	add    esp,0x10
c0018f33:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f3a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018f41:	85 c0                	test   eax,eax
c0018f43:	74 0b                	je     c0018f50 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018f45:	78 31                	js     c0018f78 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f47:	83 e8 04             	sub    eax,0x4
c0018f4a:	83 f8 01             	cmp    eax,0x1
c0018f4d:	77 29                	ja     c0018f78 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f4f:	90                   	nop
c0018f50:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018f58:	83 ec 0c             	sub    esp,0xc
c0018f5b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f5f:	50                   	push   eax
c0018f60:	e8 eb b4 fe ff       	call   c0004450 <f_close>
c0018f65:	83 c4 10             	add    esp,0x10
c0018f68:	90                   	nop
c0018f69:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018f71:	85 c0                	test   eax,eax
c0018f73:	74 43                	je     c0018fb8 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018f75:	eb 31                	jmp    c0018fa8 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018f77:	90                   	nop
c0018f78:	83 ec 0c             	sub    esp,0xc
c0018f7b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f82:	e8 6c eb fe ff       	call   c0007af3 <rfree>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	83 ec 04             	sub    esp,0x4
c0018f8d:	6a 00                	push   0x0
c0018f8f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f96:	50                   	push   eax
c0018f97:	6a 00                	push   0x0
c0018f99:	e8 a0 ac fe ff       	call   c0003c3e <f_mount>
c0018f9e:	83 c4 10             	add    esp,0x10
c0018fa1:	b0 00                	mov    al,0x0
c0018fa3:	eb 1b                	jmp    c0018fc0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fa8:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018fad:	83 c0 01             	add    eax,0x1
c0018fb0:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0018fb8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018fbf:	90                   	nop
c0018fc0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018fc6:	c3                   	ret    
c0018fc7:	90                   	nop

c0018fc8 <FAT::allocateSwapfile(char const*, int)>:
c0018fc8:	55                   	push   ebp
c0018fc9:	57                   	push   edi
c0018fca:	56                   	push   esi
c0018fcb:	53                   	push   ebx
c0018fcc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018fd2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018fdd:	83 ec 0c             	sub    esp,0xc
c0018fe0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018fe7:	e8 e7 ea fe ff       	call   c0007ad3 <malloc>
c0018fec:	83 c4 10             	add    esp,0x10
c0018fef:	89 c7                	mov    edi,eax
c0018ff1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018ff6:	83 ec 04             	sub    esp,0x4
c0018ff9:	50                   	push   eax
c0018ffa:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019001:	57                   	push   edi
c0019002:	e8 99 27 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c0019007:	83 c4 10             	add    esp,0x10
c001900a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019011:	83 ec 04             	sub    esp,0x4
c0019014:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019018:	50                   	push   eax
c0019019:	8d 44 24 18          	lea    eax,[esp+0x18]
c001901d:	50                   	push   eax
c001901e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019025:	e8 34 2b ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019034:	c1 e0 14             	shl    eax,0x14
c0019037:	89 c7                	mov    edi,eax
c0019039:	89 c5                	mov    ebp,eax
c001903b:	c1 fd 1f             	sar    ebp,0x1f
c001903e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019042:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019046:	89 f9                	mov    ecx,edi
c0019048:	31 c1                	xor    ecx,eax
c001904a:	89 cb                	mov    ebx,ecx
c001904c:	89 e9                	mov    ecx,ebp
c001904e:	31 d1                	xor    ecx,edx
c0019050:	89 ce                	mov    esi,ecx
c0019052:	89 f0                	mov    eax,esi
c0019054:	09 d8                	or     eax,ebx
c0019056:	0f 84 9c 00 00 00    	je     c00190f8 <FAT::allocateSwapfile(char const*, int)+0x130>
c001905c:	83 ec 0c             	sub    esp,0xc
c001905f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019066:	e8 bf 29 ff ff       	call   c000ba2a <File::unlink()>
c001906b:	83 c4 10             	add    esp,0x10
c001906e:	83 ec 08             	sub    esp,0x8
c0019071:	6a 12                	push   0x12
c0019073:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001907a:	e8 dd 27 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019089:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001908f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019096:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001909d:	c1 e0 14             	shl    eax,0x14
c00190a0:	83 ec 04             	sub    esp,0x4
c00190a3:	6a 01                	push   0x1
c00190a5:	50                   	push   eax
c00190a6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00190ad:	e8 25 c2 fe ff       	call   c00052d7 <f_expand>
c00190b2:	83 c4 10             	add    esp,0x10
c00190b5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00190be:	83 c0 10             	add    eax,0x10
c00190c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00190c3:	83 ec 0c             	sub    esp,0xc
c00190c6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00190ca:	52                   	push   edx
c00190cb:	8d 54 24 30          	lea    edx,[esp+0x30]
c00190cf:	52                   	push   edx
c00190d0:	6a 00                	push   0x0
c00190d2:	68 00 04 00 00       	push   0x400
c00190d7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190de:	ff d0                	call   eax
c00190e0:	83 c4 20             	add    esp,0x20
c00190e3:	83 ec 0c             	sub    esp,0xc
c00190e6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190ed:	e8 c8 27 ff ff       	call   c000b8ba <File::close()>
c00190f2:	83 c4 10             	add    esp,0x10
c00190f5:	8d 76 00             	lea    esi,[esi+0x0]
c00190f8:	83 ec 08             	sub    esp,0x8
c00190fb:	6a 01                	push   0x1
c00190fd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019104:	e8 53 27 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019113:	8b 00                	mov    eax,DWORD PTR [eax]
c0019115:	83 c0 0c             	add    eax,0xc
c0019118:	8b 00                	mov    eax,DWORD PTR [eax]
c001911a:	83 ec 0c             	sub    esp,0xc
c001911d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019121:	52                   	push   edx
c0019122:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019126:	52                   	push   edx
c0019127:	6a 00                	push   0x0
c0019129:	6a 04                	push   0x4
c001912b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019132:	ff d0                	call   eax
c0019134:	83 c4 20             	add    esp,0x20
c0019137:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001913e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019144:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001914b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019152:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019155:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001915c:	83 ec 0c             	sub    esp,0xc
c001915f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019166:	e8 4f 27 ff ff       	call   c000b8ba <File::close()>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019175:	ba 00 00 00 00       	mov    edx,0x0
c001917a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019180:	5b                   	pop    ebx
c0019181:	5e                   	pop    esi
c0019182:	5f                   	pop    edi
c0019183:	5d                   	pop    ebp
c0019184:	c3                   	ret    
c0019185:	90                   	nop
c0019186:	66 90                	xchg   ax,ax

c0019188 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019188:	57                   	push   edi
c0019189:	56                   	push   esi
c001918a:	53                   	push   ebx
c001918b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019191:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019199:	74 0d                	je     c00191a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001919b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00191a3:	75 0f                	jne    c00191b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00191a5:	8d 76 00             	lea    esi,[esi+0x0]
c00191a8:	b8 04 00 00 00       	mov    eax,0x4
c00191ad:	e9 3a 01 00 00       	jmp    c00192ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00191b2:	66 90                	xchg   ax,ax
c00191b4:	83 ec 08             	sub    esp,0x8
c00191b7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191be:	50                   	push   eax
c00191bf:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00191c6:	e8 51 b5 fe ff       	call   c000471c <f_readdir>
c00191cb:	83 c4 10             	add    esp,0x10
c00191ce:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00191d5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00191dc:	83 ec 0c             	sub    esp,0xc
c00191df:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00191e6:	83 c0 16             	add    eax,0x16
c00191e9:	50                   	push   eax
c00191ea:	e8 91 73 fe ff       	call   c0000580 <strlen>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	ba 00 00 00 00       	mov    edx,0x0
c00191f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00191ff:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019206:	0f b6 c0             	movzx  eax,al
c0019209:	83 e0 10             	and    eax,0x10
c001920c:	74 0a                	je     c0019218 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001920e:	b8 02 00 00 00       	mov    eax,0x2
c0019213:	eb 0b                	jmp    c0019220 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019215:	8d 76 00             	lea    esi,[esi+0x0]
c0019218:	b8 01 00 00 00       	mov    eax,0x1
c001921d:	8d 76 00             	lea    esi,[esi+0x0]
c0019220:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019224:	83 ec 08             	sub    esp,0x8
c0019227:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001922e:	83 c0 16             	add    eax,0x16
c0019231:	50                   	push   eax
c0019232:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019236:	83 c0 10             	add    eax,0x10
c0019239:	50                   	push   eax
c001923a:	e8 11 74 fe ff       	call   c0000650 <strcpy>
c001923f:	83 c4 10             	add    esp,0x10
c0019242:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019249:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019250:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019254:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001925b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019262:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019269:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019270:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019277:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001927e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019285:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001928c:	89 c6                	mov    esi,eax
c001928e:	89 d7                	mov    edi,edx
c0019290:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019292:	89 c8                	mov    eax,ecx
c0019294:	89 fa                	mov    edx,edi
c0019296:	89 f3                	mov    ebx,esi
c0019298:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001929f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00192a6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00192ad:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00192b4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00192ba:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00192c1:	0f be c0             	movsx  eax,al
c00192c4:	85 c0                	test   eax,eax
c00192c6:	75 08                	jne    c00192d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00192c8:	b8 07 00 00 00       	mov    eax,0x7
c00192cd:	eb 1d                	jmp    c00192ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192cf:	90                   	nop
c00192d0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00192d7:	85 c0                	test   eax,eax
c00192d9:	75 09                	jne    c00192e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00192db:	b8 00 00 00 00       	mov    eax,0x0
c00192e0:	eb 0a                	jmp    c00192ec <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192e2:	66 90                	xchg   ax,ax
c00192e4:	b8 01 00 00 00       	mov    eax,0x1
c00192e9:	8d 76 00             	lea    esi,[esi+0x0]
c00192ec:	81 c4 50 02 00 00    	add    esp,0x250
c00192f2:	5b                   	pop    ebx
c00192f3:	5e                   	pop    esi
c00192f4:	5f                   	pop    edi
c00192f5:	c3                   	ret    
c00192f6:	66 90                	xchg   ax,ax

c00192f8 <FAT::read(void*, unsigned long, void*, int*)>:
c00192f8:	83 ec 1c             	sub    esp,0x1c
c00192fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019300:	74 0a                	je     c001930c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019302:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019307:	75 0b                	jne    c0019314 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019309:	8d 76 00             	lea    esi,[esi+0x0]
c001930c:	b8 04 00 00 00       	mov    eax,0x4
c0019311:	eb 41                	jmp    c0019354 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019313:	90                   	nop
c0019314:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019318:	50                   	push   eax
c0019319:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001931d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019321:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019325:	e8 39 ac fe ff       	call   c0003f63 <f_read>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019331:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019335:	89 c2                	mov    edx,eax
c0019337:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001933b:	89 10                	mov    DWORD PTR [eax],edx
c001933d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019341:	85 c0                	test   eax,eax
c0019343:	75 07                	jne    c001934c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019345:	b8 00 00 00 00       	mov    eax,0x0
c001934a:	eb 08                	jmp    c0019354 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001934c:	b8 01 00 00 00       	mov    eax,0x1
c0019351:	8d 76 00             	lea    esi,[esi+0x0]
c0019354:	83 c4 1c             	add    esp,0x1c
c0019357:	c3                   	ret    

c0019358 <FAT::write(void*, unsigned long, void*, int*)>:
c0019358:	83 ec 1c             	sub    esp,0x1c
c001935b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019360:	74 0a                	je     c001936c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019362:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019367:	75 0b                	jne    c0019374 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0019369:	8d 76 00             	lea    esi,[esi+0x0]
c001936c:	b8 04 00 00 00       	mov    eax,0x4
c0019371:	eb 41                	jmp    c00193b4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019373:	90                   	nop
c0019374:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019378:	50                   	push   eax
c0019379:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001937d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019385:	e8 ba ad fe ff       	call   c0004144 <f_write>
c001938a:	83 c4 10             	add    esp,0x10
c001938d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019391:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019395:	89 c2                	mov    edx,eax
c0019397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001939b:	89 10                	mov    DWORD PTR [eax],edx
c001939d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193a1:	85 c0                	test   eax,eax
c00193a3:	75 07                	jne    c00193ac <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00193a5:	b8 00 00 00 00       	mov    eax,0x0
c00193aa:	eb 08                	jmp    c00193b4 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00193ac:	b8 01 00 00 00       	mov    eax,0x1
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	83 c4 1c             	add    esp,0x1c
c00193b7:	c3                   	ret    

c00193b8 <FAT::close(void*)>:
c00193b8:	83 ec 1c             	sub    esp,0x1c
c00193bb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193c0:	75 0a                	jne    c00193cc <FAT::close(void*)+0x14>
c00193c2:	b8 04 00 00 00       	mov    eax,0x4
c00193c7:	eb 3f                	jmp    c0019408 <FAT::close(void*)+0x50>
c00193c9:	8d 76 00             	lea    esi,[esi+0x0]
c00193cc:	83 ec 0c             	sub    esp,0xc
c00193cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193d3:	e8 78 b0 fe ff       	call   c0004450 <f_close>
c00193d8:	83 c4 10             	add    esp,0x10
c00193db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193df:	83 ec 0c             	sub    esp,0xc
c00193e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193e6:	e8 f8 e6 fe ff       	call   c0007ae3 <free>
c00193eb:	83 c4 10             	add    esp,0x10
c00193ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193f2:	85 c0                	test   eax,eax
c00193f4:	75 0a                	jne    c0019400 <FAT::close(void*)+0x48>
c00193f6:	b8 00 00 00 00       	mov    eax,0x0
c00193fb:	eb 0b                	jmp    c0019408 <FAT::close(void*)+0x50>
c00193fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019400:	b8 01 00 00 00       	mov    eax,0x1
c0019405:	8d 76 00             	lea    esi,[esi+0x0]
c0019408:	83 c4 1c             	add    esp,0x1c
c001940b:	c3                   	ret    

c001940c <FAT::closeDir(void*)>:
c001940c:	83 ec 1c             	sub    esp,0x1c
c001940f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019414:	75 0a                	jne    c0019420 <FAT::closeDir(void*)+0x14>
c0019416:	b8 04 00 00 00       	mov    eax,0x4
c001941b:	eb 3f                	jmp    c001945c <FAT::closeDir(void*)+0x50>
c001941d:	8d 76 00             	lea    esi,[esi+0x0]
c0019420:	83 ec 0c             	sub    esp,0xc
c0019423:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019427:	e8 ce b2 fe ff       	call   c00046fa <f_closedir>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019433:	83 ec 0c             	sub    esp,0xc
c0019436:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001943a:	e8 a4 e6 fe ff       	call   c0007ae3 <free>
c001943f:	83 c4 10             	add    esp,0x10
c0019442:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019446:	85 c0                	test   eax,eax
c0019448:	75 0a                	jne    c0019454 <FAT::closeDir(void*)+0x48>
c001944a:	b8 00 00 00 00       	mov    eax,0x0
c001944f:	eb 0b                	jmp    c001945c <FAT::closeDir(void*)+0x50>
c0019451:	8d 76 00             	lea    esi,[esi+0x0]
c0019454:	b8 01 00 00 00       	mov    eax,0x1
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	83 c4 1c             	add    esp,0x1c
c001945f:	c3                   	ret    

c0019460 <FAT::truncate(void*, unsigned long long)>:
c0019460:	83 ec 2c             	sub    esp,0x2c
c0019463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001946b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001946f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019473:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019478:	75 0a                	jne    c0019484 <FAT::truncate(void*, unsigned long long)+0x24>
c001947a:	b8 04 00 00 00       	mov    eax,0x4
c001947f:	eb 47                	jmp    c00194c8 <FAT::truncate(void*, unsigned long long)+0x68>
c0019481:	8d 76 00             	lea    esi,[esi+0x0]
c0019484:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019488:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001948b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001948f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019497:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001949b:	83 ec 08             	sub    esp,0x8
c001949e:	50                   	push   eax
c001949f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194a3:	e8 d7 af fe ff       	call   c000447f <f_lseek>
c00194a8:	83 c4 10             	add    esp,0x10
c00194ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00194af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194b3:	85 c0                	test   eax,eax
c00194b5:	75 09                	jne    c00194c0 <FAT::truncate(void*, unsigned long long)+0x60>
c00194b7:	b8 00 00 00 00       	mov    eax,0x0
c00194bc:	eb 0a                	jmp    c00194c8 <FAT::truncate(void*, unsigned long long)+0x68>
c00194be:	66 90                	xchg   ax,ax
c00194c0:	b8 01 00 00 00       	mov    eax,0x1
c00194c5:	8d 76 00             	lea    esi,[esi+0x0]
c00194c8:	83 c4 2c             	add    esp,0x2c
c00194cb:	c3                   	ret    

c00194cc <FAT::seek(void*, unsigned long long)>:
c00194cc:	83 ec 2c             	sub    esp,0x2c
c00194cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194e4:	75 0a                	jne    c00194f0 <FAT::seek(void*, unsigned long long)+0x24>
c00194e6:	b8 04 00 00 00       	mov    eax,0x4
c00194eb:	eb 33                	jmp    c0019520 <FAT::seek(void*, unsigned long long)+0x54>
c00194ed:	8d 76 00             	lea    esi,[esi+0x0]
c00194f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194f4:	83 ec 08             	sub    esp,0x8
c00194f7:	50                   	push   eax
c00194f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194fc:	e8 7e af fe ff       	call   c000447f <f_lseek>
c0019501:	83 c4 10             	add    esp,0x10
c0019504:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001950c:	85 c0                	test   eax,eax
c001950e:	75 08                	jne    c0019518 <FAT::seek(void*, unsigned long long)+0x4c>
c0019510:	b8 00 00 00 00       	mov    eax,0x0
c0019515:	eb 09                	jmp    c0019520 <FAT::seek(void*, unsigned long long)+0x54>
c0019517:	90                   	nop
c0019518:	b8 01 00 00 00       	mov    eax,0x1
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	83 c4 2c             	add    esp,0x2c
c0019523:	c3                   	ret    

c0019524 <fatWrapperReadDisk>:
c0019524:	53                   	push   ebx
c0019525:	83 ec 18             	sub    esp,0x18
c0019528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001952c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019530:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019535:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001953c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019540:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019544:	ba 00 00 00 00       	mov    edx,0x0
c0019549:	83 ec 0c             	sub    esp,0xc
c001954c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019550:	53                   	push   ebx
c0019551:	52                   	push   edx
c0019552:	50                   	push   eax
c0019553:	51                   	push   ecx
c0019554:	e8 41 45 ff ff       	call   c000da9a <LogicalDisk::read(unsigned long long, int, void*)>
c0019559:	83 c4 20             	add    esp,0x20
c001955c:	83 c4 18             	add    esp,0x18
c001955f:	5b                   	pop    ebx
c0019560:	c3                   	ret    
c0019561:	8d 76 00             	lea    esi,[esi+0x0]

c0019564 <fatWrapperWriteDisk>:
c0019564:	53                   	push   ebx
c0019565:	83 ec 18             	sub    esp,0x18
c0019568:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001956c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019570:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019575:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c001957c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019584:	ba 00 00 00 00       	mov    edx,0x0
c0019589:	83 ec 0c             	sub    esp,0xc
c001958c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019590:	53                   	push   ebx
c0019591:	52                   	push   edx
c0019592:	50                   	push   eax
c0019593:	51                   	push   ecx
c0019594:	e8 6d 45 ff ff       	call   c000db06 <LogicalDisk::write(unsigned long long, int, void*)>
c0019599:	83 c4 20             	add    esp,0x20
c001959c:	83 c4 18             	add    esp,0x18
c001959f:	5b                   	pop    ebx
c00195a0:	c3                   	ret    
c00195a1:	8d 76 00             	lea    esi,[esi+0x0]

c00195a4 <fatWrapperIoctl>:
c00195a4:	53                   	push   ebx
c00195a5:	83 ec 28             	sub    esp,0x28
c00195a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00195ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00195b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195b4:	88 d0                	mov    al,dl
c00195b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00195ba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195bf:	83 f8 02             	cmp    eax,0x2
c00195c2:	75 34                	jne    c00195f8 <fatWrapperIoctl+0x54>
c00195c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195d1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00195e4:	89 c2                	mov    edx,eax
c00195e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ea:	66 89 10             	mov    WORD PTR [eax],dx
c00195ed:	b8 00 00 00 00       	mov    eax,0x0
c00195f2:	e9 c5 00 00 00       	jmp    c00196bc <fatWrapperIoctl+0x118>
c00195f7:	90                   	nop
c00195f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195fd:	83 f8 01             	cmp    eax,0x1
c0019600:	75 6a                	jne    c001966c <fatWrapperIoctl+0xc8>
c0019602:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019606:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001960a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001960f:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019616:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001961c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019622:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019628:	89 c8                	mov    eax,ecx
c001962a:	89 da                	mov    edx,ebx
c001962c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019630:	c1 e0 0a             	shl    eax,0xa
c0019633:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019638:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001963f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019645:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001964b:	89 cb                	mov    ebx,ecx
c001964d:	c1 fb 1f             	sar    ebx,0x1f
c0019650:	53                   	push   ebx
c0019651:	51                   	push   ecx
c0019652:	52                   	push   edx
c0019653:	50                   	push   eax
c0019654:	e8 b7 5b 00 00       	call   c001f210 <__udivdi3>
c0019659:	83 c4 10             	add    esp,0x10
c001965c:	89 c2                	mov    edx,eax
c001965e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019662:	89 10                	mov    DWORD PTR [eax],edx
c0019664:	b8 00 00 00 00       	mov    eax,0x0
c0019669:	eb 51                	jmp    c00196bc <fatWrapperIoctl+0x118>
c001966b:	90                   	nop
c001966c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019671:	85 c0                	test   eax,eax
c0019673:	75 07                	jne    c001967c <fatWrapperIoctl+0xd8>
c0019675:	b8 00 00 00 00       	mov    eax,0x0
c001967a:	eb 40                	jmp    c00196bc <fatWrapperIoctl+0x118>
c001967c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019681:	83 f8 03             	cmp    eax,0x3
c0019684:	75 1a                	jne    c00196a0 <fatWrapperIoctl+0xfc>
c0019686:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001968a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001968e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019692:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019698:	b8 00 00 00 00       	mov    eax,0x0
c001969d:	eb 1d                	jmp    c00196bc <fatWrapperIoctl+0x118>
c001969f:	90                   	nop
c00196a0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196a5:	83 f8 04             	cmp    eax,0x4
c00196a8:	75 0a                	jne    c00196b4 <fatWrapperIoctl+0x110>
c00196aa:	b8 00 00 00 00       	mov    eax,0x0
c00196af:	eb 0b                	jmp    c00196bc <fatWrapperIoctl+0x118>
c00196b1:	8d 76 00             	lea    esi,[esi+0x0]
c00196b4:	b8 04 00 00 00       	mov    eax,0x4
c00196b9:	8d 76 00             	lea    esi,[esi+0x0]
c00196bc:	83 c4 28             	add    esp,0x28
c00196bf:	5b                   	pop    ebx
c00196c0:	c3                   	ret    
c00196c1:	90                   	nop
c00196c2:	66 90                	xchg   ax,ax

c00196c4 <FAT::FAT()>:
c00196c4:	83 ec 1c             	sub    esp,0x1c
c00196c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196cb:	83 ec 0c             	sub    esp,0xc
c00196ce:	50                   	push   eax
c00196cf:	e8 2e 1e ff ff       	call   c000b502 <Filesystem::Filesystem()>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	ba 0c 28 02 c0       	mov    edx,0xc002280c
c00196dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196e0:	89 10                	mov    DWORD PTR [eax],edx
c00196e2:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00196ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196f4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196f9:	7f 19                	jg     c0019714 <FAT::FAT()+0x50>
c00196fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196ff:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c001970a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001970f:	eb e3                	jmp    c00196f4 <FAT::FAT()+0x30>
c0019711:	8d 76 00             	lea    esi,[esi+0x0]
c0019714:	90                   	nop
c0019715:	83 c4 1c             	add    esp,0x1c
c0019718:	c3                   	ret    
c0019719:	90                   	nop
c001971a:	66 90                	xchg   ax,ax

c001971c <FAT::fixFilepath(char*)>:
c001971c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019720:	8a 00                	mov    al,BYTE PTR [eax]
c0019722:	0f be c0             	movsx  eax,al
c0019725:	83 f8 40             	cmp    eax,0x40
c0019728:	7e 2e                	jle    c0019758 <FAT::fixFilepath(char*)+0x3c>
c001972a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001972e:	8a 00                	mov    al,BYTE PTR [eax]
c0019730:	83 e8 41             	sub    eax,0x41
c0019733:	88 c2                	mov    dl,al
c0019735:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019739:	88 10                	mov    BYTE PTR [eax],dl
c001973b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001973f:	8a 00                	mov    al,BYTE PTR [eax]
c0019741:	0f be c0             	movsx  eax,al
c0019744:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001974b:	83 c0 30             	add    eax,0x30
c001974e:	88 c2                	mov    dl,al
c0019750:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019754:	88 10                	mov    BYTE PTR [eax],dl
c0019756:	66 90                	xchg   ax,ax
c0019758:	90                   	nop
c0019759:	c3                   	ret    
c001975a:	66 90                	xchg   ax,ax

c001975c <FAT::open(char const*, void**, FileOpenMode)>:
c001975c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019762:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001976a:	74 0c                	je     c0019778 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001976c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019774:	75 0e                	jne    c0019784 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019776:	66 90                	xchg   ax,ax
c0019778:	b8 04 00 00 00       	mov    eax,0x4
c001977d:	e9 46 01 00 00       	jmp    c00198c8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019782:	66 90                	xchg   ax,ax
c0019784:	83 ec 08             	sub    esp,0x8
c0019787:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001978e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019792:	50                   	push   eax
c0019793:	e8 b8 6e fe ff       	call   c0000650 <strcpy>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	83 ec 08             	sub    esp,0x8
c001979e:	8d 44 24 10          	lea    eax,[esp+0x10]
c00197a2:	50                   	push   eax
c00197a3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00197aa:	e8 6d ff ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c00197af:	83 c4 10             	add    esp,0x10
c00197b2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00197ba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197c1:	83 e0 01             	and    eax,0x1
c00197c4:	74 12                	je     c00197d8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00197c6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197cd:	83 c8 01             	or     eax,0x1
c00197d0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197d7:	90                   	nop
c00197d8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197df:	83 e0 04             	and    eax,0x4
c00197e2:	74 24                	je     c0019808 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00197e4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197eb:	83 c8 30             	or     eax,0x30
c00197ee:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197f5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197fc:	83 c8 02             	or     eax,0x2
c00197ff:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019806:	66 90                	xchg   ax,ax
c0019808:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001980f:	83 e0 02             	and    eax,0x2
c0019812:	74 14                	je     c0019828 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019814:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001981b:	83 c8 02             	or     eax,0x2
c001981e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019825:	8d 76 00             	lea    esi,[esi+0x0]
c0019828:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001982f:	83 e0 08             	and    eax,0x8
c0019832:	74 14                	je     c0019848 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019834:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001983b:	83 c8 04             	or     eax,0x4
c001983e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019845:	8d 76 00             	lea    esi,[esi+0x0]
c0019848:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001984f:	83 e0 10             	and    eax,0x10
c0019852:	74 14                	je     c0019868 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019854:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001985b:	83 c8 08             	or     eax,0x8
c001985e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019865:	8d 76 00             	lea    esi,[esi+0x0]
c0019868:	83 ec 0c             	sub    esp,0xc
c001986b:	68 28 02 00 00       	push   0x228
c0019870:	e8 5e e2 fe ff       	call   c0007ad3 <malloc>
c0019875:	83 c4 10             	add    esp,0x10
c0019878:	89 c2                	mov    edx,eax
c001987a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019881:	89 10                	mov    DWORD PTR [eax],edx
c0019883:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001988b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019892:	8b 00                	mov    eax,DWORD PTR [eax]
c0019894:	83 ec 04             	sub    esp,0x4
c0019897:	52                   	push   edx
c0019898:	8d 54 24 10          	lea    edx,[esp+0x10]
c001989c:	52                   	push   edx
c001989d:	50                   	push   eax
c001989e:	e8 fd a3 fe ff       	call   c0003ca0 <f_open>
c00198a3:	83 c4 10             	add    esp,0x10
c00198a6:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00198ad:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00198b5:	74 09                	je     c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c00198b7:	b8 01 00 00 00       	mov    eax,0x1
c00198bc:	eb 0a                	jmp    c00198c8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00198be:	66 90                	xchg   ax,ax
c00198c0:	b8 00 00 00 00       	mov    eax,0x0
c00198c5:	8d 76 00             	lea    esi,[esi+0x0]
c00198c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198ce:	c3                   	ret    
c00198cf:	90                   	nop

c00198d0 <FAT::openDir(char const*, void**)>:
c00198d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198de:	74 0c                	je     c00198ec <FAT::openDir(char const*, void**)+0x1c>
c00198e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198e8:	75 0e                	jne    c00198f8 <FAT::openDir(char const*, void**)+0x28>
c00198ea:	66 90                	xchg   ax,ax
c00198ec:	b8 04 00 00 00       	mov    eax,0x4
c00198f1:	e9 82 00 00 00       	jmp    c0019978 <FAT::openDir(char const*, void**)+0xa8>
c00198f6:	66 90                	xchg   ax,ax
c00198f8:	83 ec 08             	sub    esp,0x8
c00198fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019902:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019906:	50                   	push   eax
c0019907:	e8 44 6d fe ff       	call   c0000650 <strcpy>
c001990c:	83 c4 10             	add    esp,0x10
c001990f:	83 ec 08             	sub    esp,0x8
c0019912:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019916:	50                   	push   eax
c0019917:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001991e:	e8 f9 fd ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019923:	83 c4 10             	add    esp,0x10
c0019926:	83 ec 0c             	sub    esp,0xc
c0019929:	6a 30                	push   0x30
c001992b:	e8 a3 e1 fe ff       	call   c0007ad3 <malloc>
c0019930:	83 c4 10             	add    esp,0x10
c0019933:	89 c2                	mov    edx,eax
c0019935:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001993c:	89 10                	mov    DWORD PTR [eax],edx
c001993e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019945:	8b 00                	mov    eax,DWORD PTR [eax]
c0019947:	83 ec 08             	sub    esp,0x8
c001994a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001994e:	52                   	push   edx
c001994f:	50                   	push   eax
c0019950:	e8 da ac fe ff       	call   c000462f <f_opendir>
c0019955:	83 c4 10             	add    esp,0x10
c0019958:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001995f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019967:	74 07                	je     c0019970 <FAT::openDir(char const*, void**)+0xa0>
c0019969:	b8 01 00 00 00       	mov    eax,0x1
c001996e:	eb 08                	jmp    c0019978 <FAT::openDir(char const*, void**)+0xa8>
c0019970:	b8 00 00 00 00       	mov    eax,0x0
c0019975:	8d 76 00             	lea    esi,[esi+0x0]
c0019978:	81 c4 1c 01 00 00    	add    esp,0x11c
c001997e:	c3                   	ret    
c001997f:	90                   	nop

c0019980 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019980:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019986:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001998e:	75 0c                	jne    c001999c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019990:	b8 04 00 00 00       	mov    eax,0x4
c0019995:	e9 d6 00 00 00       	jmp    c0019a70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001999a:	66 90                	xchg   ax,ax
c001999c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00199a4:	75 0a                	jne    c00199b0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00199a6:	b8 04 00 00 00       	mov    eax,0x4
c00199ab:	e9 c0 00 00 00       	jmp    c0019a70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199b0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00199b8:	75 0a                	jne    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00199ba:	b8 04 00 00 00       	mov    eax,0x4
c00199bf:	e9 ac 00 00 00       	jmp    c0019a70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199c4:	83 ec 08             	sub    esp,0x8
c00199c7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199ce:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199d5:	50                   	push   eax
c00199d6:	e8 75 6c fe ff       	call   c0000650 <strcpy>
c00199db:	83 c4 10             	add    esp,0x10
c00199de:	83 ec 08             	sub    esp,0x8
c00199e1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00199e8:	50                   	push   eax
c00199e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199f0:	e8 27 fd ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c00199f5:	83 c4 10             	add    esp,0x10
c00199f8:	83 ec 08             	sub    esp,0x8
c00199fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00199ff:	50                   	push   eax
c0019a00:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a07:	50                   	push   eax
c0019a08:	e8 a1 ad fe ff       	call   c00047ae <f_stat>
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a17:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a1e:	85 c0                	test   eax,eax
c0019a20:	74 0a                	je     c0019a2c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019a22:	83 f8 04             	cmp    eax,0x4
c0019a25:	74 39                	je     c0019a60 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019a27:	eb 3f                	jmp    c0019a68 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a30:	0f b6 c0             	movzx  eax,al
c0019a33:	83 e0 10             	and    eax,0x10
c0019a36:	0f 95 c2             	setne  dl
c0019a39:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a40:	88 10                	mov    BYTE PTR [eax],dl
c0019a42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a46:	ba 00 00 00 00       	mov    edx,0x0
c0019a4b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a52:	89 01                	mov    DWORD PTR [ecx],eax
c0019a54:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a57:	b8 00 00 00 00       	mov    eax,0x0
c0019a5c:	eb 12                	jmp    c0019a70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a5e:	66 90                	xchg   ax,ax
c0019a60:	b8 02 00 00 00       	mov    eax,0x2
c0019a65:	eb 09                	jmp    c0019a70 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a67:	90                   	nop
c0019a68:	b8 01 00 00 00       	mov    eax,0x1
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a76:	c3                   	ret    
c0019a77:	90                   	nop

c0019a78 <FAT::unlink(char const*)>:
c0019a78:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a7e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a86:	75 08                	jne    c0019a90 <FAT::unlink(char const*)+0x18>
c0019a88:	b8 04 00 00 00       	mov    eax,0x4
c0019a8d:	eb 61                	jmp    c0019af0 <FAT::unlink(char const*)+0x78>
c0019a8f:	90                   	nop
c0019a90:	83 ec 08             	sub    esp,0x8
c0019a93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a9e:	50                   	push   eax
c0019a9f:	e8 ac 6b fe ff       	call   c0000650 <strcpy>
c0019aa4:	83 c4 10             	add    esp,0x10
c0019aa7:	83 ec 08             	sub    esp,0x8
c0019aaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019aae:	50                   	push   eax
c0019aaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ab6:	e8 61 fc ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019abb:	83 c4 10             	add    esp,0x10
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ac5:	50                   	push   eax
c0019ac6:	e8 55 af fe ff       	call   c0004a20 <f_unlink>
c0019acb:	83 c4 10             	add    esp,0x10
c0019ace:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ad5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019adc:	85 c0                	test   eax,eax
c0019ade:	75 08                	jne    c0019ae8 <FAT::unlink(char const*)+0x70>
c0019ae0:	b8 00 00 00 00       	mov    eax,0x0
c0019ae5:	eb 09                	jmp    c0019af0 <FAT::unlink(char const*)+0x78>
c0019ae7:	90                   	nop
c0019ae8:	b8 01 00 00 00       	mov    eax,0x1
c0019aed:	8d 76 00             	lea    esi,[esi+0x0]
c0019af0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019af6:	c3                   	ret    
c0019af7:	90                   	nop

c0019af8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019af8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019afe:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0019b05:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0019b0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019b10:	88 d0                	mov    al,dl
c0019b12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b16:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b1e:	75 0c                	jne    c0019b2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0019b20:	b8 04 00 00 00       	mov    eax,0x4
c0019b25:	e9 7e 01 00 00       	jmp    c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019b2a:	66 90                	xchg   ax,ax
c0019b2c:	83 ec 08             	sub    esp,0x8
c0019b2f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b3a:	50                   	push   eax
c0019b3b:	e8 10 6b fe ff       	call   c0000650 <strcpy>
c0019b40:	83 c4 10             	add    esp,0x10
c0019b43:	83 ec 08             	sub    esp,0x8
c0019b46:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b4a:	50                   	push   eax
c0019b4b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b52:	e8 c5 fb ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019b57:	83 c4 10             	add    esp,0x10
c0019b5a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b62:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b6f:	83 e0 01             	and    eax,0x1
c0019b72:	74 14                	je     c0019b88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0019b74:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b7b:	83 c8 01             	or     eax,0x1
c0019b7e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b85:	8d 76 00             	lea    esi,[esi+0x0]
c0019b88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b8d:	83 e0 02             	and    eax,0x2
c0019b90:	74 12                	je     c0019ba4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0019b92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b99:	83 c8 20             	or     eax,0x20
c0019b9c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ba3:	90                   	nop
c0019ba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba9:	83 e0 04             	and    eax,0x4
c0019bac:	74 12                	je     c0019bc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019bae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bb5:	83 c8 04             	or     eax,0x4
c0019bb8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bbf:	90                   	nop
c0019bc0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bc5:	83 e0 08             	and    eax,0x8
c0019bc8:	74 12                	je     c0019bdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0019bca:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bd1:	83 c8 02             	or     eax,0x2
c0019bd4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bdb:	90                   	nop
c0019bdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019be1:	83 e0 01             	and    eax,0x1
c0019be4:	74 12                	je     c0019bf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0019be6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bed:	83 c8 01             	or     eax,0x1
c0019bf0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bf7:	90                   	nop
c0019bf8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bfd:	83 e0 02             	and    eax,0x2
c0019c00:	74 12                	je     c0019c14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0019c02:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c09:	83 c8 20             	or     eax,0x20
c0019c0c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c13:	90                   	nop
c0019c14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c19:	83 e0 04             	and    eax,0x4
c0019c1c:	74 12                	je     c0019c30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0019c1e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c25:	83 c8 04             	or     eax,0x4
c0019c28:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c2f:	90                   	nop
c0019c30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c35:	83 e0 08             	and    eax,0x8
c0019c38:	74 12                	je     c0019c4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0019c3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c41:	83 c8 02             	or     eax,0x2
c0019c44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c4b:	90                   	nop
c0019c4c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019c53:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c5a:	09 d0                	or     eax,edx
c0019c5c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c63:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c6b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c73:	83 ec 04             	sub    esp,0x4
c0019c76:	52                   	push   edx
c0019c77:	50                   	push   eax
c0019c78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c7c:	50                   	push   eax
c0019c7d:	e8 11 b2 fe ff       	call   c0004e93 <f_chmod>
c0019c82:	83 c4 10             	add    esp,0x10
c0019c85:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c8c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c93:	85 c0                	test   eax,eax
c0019c95:	75 09                	jne    c0019ca0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c0019c97:	b8 00 00 00 00       	mov    eax,0x0
c0019c9c:	eb 0a                	jmp    c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0019c9e:	66 90                	xchg   ax,ax
c0019ca0:	b8 01 00 00 00       	mov    eax,0x1
c0019ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ca8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019cae:	c3                   	ret    
c0019caf:	90                   	nop

c0019cb0 <FAT::rename(char const*, char const*)>:
c0019cb0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019cb6:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019cbe:	74 0c                	je     c0019ccc <FAT::rename(char const*, char const*)+0x1c>
c0019cc0:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019cc8:	75 0e                	jne    c0019cd8 <FAT::rename(char const*, char const*)+0x28>
c0019cca:	66 90                	xchg   ax,ax
c0019ccc:	b8 04 00 00 00       	mov    eax,0x4
c0019cd1:	e9 9e 00 00 00       	jmp    c0019d74 <FAT::rename(char const*, char const*)+0xc4>
c0019cd6:	66 90                	xchg   ax,ax
c0019cd8:	83 ec 08             	sub    esp,0x8
c0019cdb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ce2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019ce9:	50                   	push   eax
c0019cea:	e8 61 69 fe ff       	call   c0000650 <strcpy>
c0019cef:	83 c4 10             	add    esp,0x10
c0019cf2:	83 ec 08             	sub    esp,0x8
c0019cf5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019cfc:	50                   	push   eax
c0019cfd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d04:	e8 13 fa ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019d09:	83 c4 10             	add    esp,0x10
c0019d0c:	83 ec 08             	sub    esp,0x8
c0019d0f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d16:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d1a:	50                   	push   eax
c0019d1b:	e8 30 69 fe ff       	call   c0000650 <strcpy>
c0019d20:	83 c4 10             	add    esp,0x10
c0019d23:	83 ec 08             	sub    esp,0x8
c0019d26:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d2a:	50                   	push   eax
c0019d2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d32:	e8 e5 f9 ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	83 ec 08             	sub    esp,0x8
c0019d3d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d41:	50                   	push   eax
c0019d42:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d49:	50                   	push   eax
c0019d4a:	e8 8c af fe ff       	call   c0004cdb <f_rename>
c0019d4f:	83 c4 10             	add    esp,0x10
c0019d52:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d59:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d60:	85 c0                	test   eax,eax
c0019d62:	75 08                	jne    c0019d6c <FAT::rename(char const*, char const*)+0xbc>
c0019d64:	b8 00 00 00 00       	mov    eax,0x0
c0019d69:	eb 09                	jmp    c0019d74 <FAT::rename(char const*, char const*)+0xc4>
c0019d6b:	90                   	nop
c0019d6c:	b8 01 00 00 00       	mov    eax,0x1
c0019d71:	8d 76 00             	lea    esi,[esi+0x0]
c0019d74:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d7a:	c3                   	ret    
c0019d7b:	90                   	nop

c0019d7c <FAT::mkdir(char const*)>:
c0019d7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d8a:	75 08                	jne    c0019d94 <FAT::mkdir(char const*)+0x18>
c0019d8c:	b8 04 00 00 00       	mov    eax,0x4
c0019d91:	eb 61                	jmp    c0019df4 <FAT::mkdir(char const*)+0x78>
c0019d93:	90                   	nop
c0019d94:	83 ec 08             	sub    esp,0x8
c0019d97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d9e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019da2:	50                   	push   eax
c0019da3:	e8 a8 68 fe ff       	call   c0000650 <strcpy>
c0019da8:	83 c4 10             	add    esp,0x10
c0019dab:	83 ec 08             	sub    esp,0x8
c0019dae:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019db2:	50                   	push   eax
c0019db3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019dba:	e8 5d f9 ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019dbf:	83 c4 10             	add    esp,0x10
c0019dc2:	83 ec 0c             	sub    esp,0xc
c0019dc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019dc9:	50                   	push   eax
c0019dca:	e8 71 ad fe ff       	call   c0004b40 <f_mkdir>
c0019dcf:	83 c4 10             	add    esp,0x10
c0019dd2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019dd9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019de0:	85 c0                	test   eax,eax
c0019de2:	75 08                	jne    c0019dec <FAT::mkdir(char const*)+0x70>
c0019de4:	b8 00 00 00 00       	mov    eax,0x0
c0019de9:	eb 09                	jmp    c0019df4 <FAT::mkdir(char const*)+0x78>
c0019deb:	90                   	nop
c0019dec:	b8 01 00 00 00       	mov    eax,0x1
c0019df1:	8d 76 00             	lea    esi,[esi+0x0]
c0019df4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dfa:	c3                   	ret    
c0019dfb:	90                   	nop

c0019dfc <FAT::exists(char const*)>:
c0019dfc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e02:	83 ec 08             	sub    esp,0x8
c0019e05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e0c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e10:	50                   	push   eax
c0019e11:	e8 3a 68 fe ff       	call   c0000650 <strcpy>
c0019e16:	83 c4 10             	add    esp,0x10
c0019e19:	83 ec 08             	sub    esp,0x8
c0019e1c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e20:	50                   	push   eax
c0019e21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e28:	e8 ef f8 ff ff       	call   c001971c <FAT::fixFilepath(char*)>
c0019e2d:	83 c4 10             	add    esp,0x10
c0019e30:	83 ec 08             	sub    esp,0x8
c0019e33:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019e3a:	50                   	push   eax
c0019e3b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e3f:	50                   	push   eax
c0019e40:	e8 69 a9 fe ff       	call   c00047ae <f_stat>
c0019e45:	83 c4 10             	add    esp,0x10
c0019e48:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019e4f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019e56:	85 c0                	test   eax,eax
c0019e58:	75 06                	jne    c0019e60 <FAT::exists(char const*)+0x64>
c0019e5a:	b0 01                	mov    al,0x1
c0019e5c:	eb 06                	jmp    c0019e64 <FAT::exists(char const*)+0x68>
c0019e5e:	66 90                	xchg   ax,ax
c0019e60:	b0 00                	mov    al,0x0
c0019e62:	66 90                	xchg   ax,ax
c0019e64:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019e6a:	c3                   	ret    
c0019e6b:	90                   	nop

c0019e6c <isoReadDiscSectorHelper>:
c0019e6c:	83 ec 2c             	sub    esp,0x2c
c0019e6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e73:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e77:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019e7c:	83 e8 41             	sub    eax,0x41
c0019e7f:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019e86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e8a:	ba 00 00 00 00       	mov    edx,0x0
c0019e8f:	83 ec 0c             	sub    esp,0xc
c0019e92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e96:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e9a:	52                   	push   edx
c0019e9b:	50                   	push   eax
c0019e9c:	51                   	push   ecx
c0019e9d:	e8 f8 3b ff ff       	call   c000da9a <LogicalDisk::read(unsigned long long, int, void*)>
c0019ea2:	83 c4 20             	add    esp,0x20
c0019ea5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019ea9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019eae:	74 0c                	je     c0019ebc <isoReadDiscSectorHelper+0x50>
c0019eb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019eb4:	c1 e0 0b             	shl    eax,0xb
c0019eb7:	eb 0b                	jmp    c0019ec4 <isoReadDiscSectorHelper+0x58>
c0019eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ebc:	b8 00 00 00 00       	mov    eax,0x0
c0019ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ec4:	83 c4 2c             	add    esp,0x2c
c0019ec7:	c3                   	ret    

c0019ec8 <iso_kprintf>:
c0019ec8:	83 ec 0c             	sub    esp,0xc
c0019ecb:	83 ec 08             	sub    esp,0x8
c0019ece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ed2:	68 ba 25 02 c0       	push   0xc00225ba
c0019ed7:	e8 2e 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019edc:	83 c4 10             	add    esp,0x10
c0019edf:	90                   	nop
c0019ee0:	83 c4 0c             	add    esp,0xc
c0019ee3:	c3                   	ret    

c0019ee4 <iso_kprintfd>:
c0019ee4:	83 ec 0c             	sub    esp,0xc
c0019ee7:	83 ec 08             	sub    esp,0x8
c0019eea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eee:	68 da 0d 02 c0       	push   0xc0020dda
c0019ef3:	e8 12 0a ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c0019ef8:	83 c4 10             	add    esp,0x10
c0019efb:	90                   	nop
c0019efc:	83 c4 0c             	add    esp,0xc
c0019eff:	c3                   	ret    

c0019f00 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019f00:	b8 08 00 00 00       	mov    eax,0x8
c0019f05:	c3                   	ret    

c0019f06 <ISO9660::truncate(void*, unsigned long long)>:
c0019f06:	b8 01 00 00 00       	mov    eax,0x1
c0019f0b:	c3                   	ret    

c0019f0c <ISO9660::getName()>:
c0019f0c:	b8 70 28 02 c0       	mov    eax,0xc0022870
c0019f11:	c3                   	ret    

c0019f12 <ISO9660::closeDir(void*)>:
c0019f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f16:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f18:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019f1b:	90                   	nop

c0019f1c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019f1c:	b8 01 00 00 00       	mov    eax,0x1
c0019f21:	c3                   	ret    

c0019f22 <ISO9660::unlink(char const*)>:
c0019f22:	b8 01 00 00 00       	mov    eax,0x1
c0019f27:	c3                   	ret    

c0019f28 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019f28:	b8 03 00 00 00       	mov    eax,0x3
c0019f2d:	c3                   	ret    

c0019f2e <ISO9660::rename(char const*, char const*)>:
c0019f2e:	b8 01 00 00 00       	mov    eax,0x1
c0019f33:	c3                   	ret    

c0019f34 <ISO9660::mkdir(char const*)>:
c0019f34:	b8 01 00 00 00       	mov    eax,0x1
c0019f39:	c3                   	ret    

c0019f3a <ISO9660::~ISO9660()>:
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	ba b0 29 02 c0       	mov    edx,0xc00229b0
c0019f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f46:	89 10                	mov    DWORD PTR [eax],edx
c0019f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f4c:	83 ec 0c             	sub    esp,0xc
c0019f4f:	50                   	push   eax
c0019f50:	e8 d1 15 ff ff       	call   c000b526 <Filesystem::~Filesystem()>
c0019f55:	83 c4 10             	add    esp,0x10
c0019f58:	90                   	nop
c0019f59:	83 c4 0c             	add    esp,0xc
c0019f5c:	c3                   	ret    
c0019f5d:	90                   	nop

c0019f5e <ISO9660::~ISO9660()>:
c0019f5e:	83 ec 0c             	sub    esp,0xc
c0019f61:	83 ec 0c             	sub    esp,0xc
c0019f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f68:	e8 cd ff ff ff       	call   c0019f3a <ISO9660::~ISO9660()>
c0019f6d:	83 c4 10             	add    esp,0x10
c0019f70:	83 ec 08             	sub    esp,0x8
c0019f73:	6a 08                	push   0x8
c0019f75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f79:	e8 8e 08 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c0019f7e:	83 c4 10             	add    esp,0x10
c0019f81:	83 c4 0c             	add    esp,0xc
c0019f84:	c3                   	ret    
c0019f85:	90                   	nop

c0019f86 <ISO9660::exists(char const*)>:
c0019f86:	83 ec 18             	sub    esp,0x18
c0019f89:	68 8b 28 02 c0       	push   0xc002288b
c0019f8e:	e8 ba 72 ff ff       	call   c001124d <KePanic(char const*)>
c0019f93:	31 c0                	xor    eax,eax
c0019f95:	83 c4 1c             	add    esp,0x1c
c0019f98:	c3                   	ret    
c0019f99:	90                   	nop

c0019f9a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f9a:	56                   	push   esi
c0019f9b:	53                   	push   ebx
c0019f9c:	53                   	push   ebx
c0019f9d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019fa1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019fa5:	85 db                	test   ebx,ebx
c0019fa7:	0f 84 ca 00 00 00    	je     c001a077 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019fad:	85 f6                	test   esi,esi
c0019faf:	0f 84 c2 00 00 00    	je     c001a077 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019fb5:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019fba:	b8 03 00 00 00       	mov    eax,0x3
c0019fbf:	0f 85 b7 00 00 00    	jne    c001a07c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fc5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019fc7:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019fcd:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019fd4:	74 1b                	je     c0019ff1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019fd6:	85 c0                	test   eax,eax
c0019fd8:	74 10                	je     c0019fea <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019fda:	83 ec 0c             	sub    esp,0xc
c0019fdd:	68 a9 28 02 c0       	push   0xc00228a9
c0019fe2:	e8 66 72 ff ff       	call   c001124d <KePanic(char const*)>
c0019fe7:	83 c4 10             	add    esp,0x10
c0019fea:	8a 03                	mov    al,BYTE PTR [ebx]
c0019fec:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019ff1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019ff4:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019ffb:	85 c0                	test   eax,eax
c0019ffd:	74 09                	je     c001a008 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019fff:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a006:	74 48                	je     c001a050 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a008:	83 ec 0c             	sub    esp,0xc
c001a00b:	68 b9 28 02 c0       	push   0xc00228b9
c001a010:	e8 f5 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a015:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a018:	83 c4 10             	add    esp,0x10
c001a01b:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a022:	85 c0                	test   eax,eax
c001a024:	74 17                	je     c001a03d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a026:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a02d:	83 ec 0c             	sub    esp,0xc
c001a030:	68 d9 28 02 c0       	push   0xc00228d9
c001a035:	e8 d0 08 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a03a:	83 c4 10             	add    esp,0x10
c001a03d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a044:	83 ec 0c             	sub    esp,0xc
c001a047:	50                   	push   eax
c001a048:	e8 1a ca fe ff       	call   c0006a67 <init_percd>
c001a04d:	83 c4 10             	add    esp,0x10
c001a050:	51                   	push   ecx
c001a051:	83 c3 03             	add    ebx,0x3
c001a054:	51                   	push   ecx
c001a055:	6a 00                	push   0x0
c001a057:	53                   	push   ebx
c001a058:	e8 cd c4 fe ff       	call   c000652a <iso_open>
c001a05d:	83 c4 10             	add    esp,0x10
c001a060:	89 c2                	mov    edx,eax
c001a062:	b8 01 00 00 00       	mov    eax,0x1
c001a067:	83 fa ff             	cmp    edx,0xffffffff
c001a06a:	74 10                	je     c001a07c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a06c:	83 c2 32             	add    edx,0x32
c001a06f:	31 c0                	xor    eax,eax
c001a071:	01 d2                	add    edx,edx
c001a073:	89 16                	mov    DWORD PTR [esi],edx
c001a075:	eb 05                	jmp    c001a07c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a077:	b8 04 00 00 00       	mov    eax,0x4
c001a07c:	5a                   	pop    edx
c001a07d:	5b                   	pop    ebx
c001a07e:	5e                   	pop    esi
c001a07f:	c3                   	ret    

c001a080 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a080:	53                   	push   ebx
c001a081:	83 ec 08             	sub    esp,0x8
c001a084:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a088:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a08c:	85 c0                	test   eax,eax
c001a08e:	74 2d                	je     c001a0bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a090:	85 db                	test   ebx,ebx
c001a092:	74 29                	je     c001a0bd <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a094:	52                   	push   edx
c001a095:	b9 02 00 00 00       	mov    ecx,0x2
c001a09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a09e:	99                   	cdq    
c001a09f:	f7 f9                	idiv   ecx
c001a0a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0a5:	83 e8 32             	sub    eax,0x32
c001a0a8:	50                   	push   eax
c001a0a9:	e8 24 c5 fe ff       	call   c00065d2 <iso_read>
c001a0ae:	83 c4 10             	add    esp,0x10
c001a0b1:	89 03                	mov    DWORD PTR [ebx],eax
c001a0b3:	09 d0                	or     eax,edx
c001a0b5:	0f 94 c0             	sete   al
c001a0b8:	0f b6 c0             	movzx  eax,al
c001a0bb:	eb 05                	jmp    c001a0c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a0bd:	b8 04 00 00 00       	mov    eax,0x4
c001a0c2:	83 c4 08             	add    esp,0x8
c001a0c5:	5b                   	pop    ebx
c001a0c6:	c3                   	ret    
c001a0c7:	90                   	nop

c001a0c8 <ISO9660::seek(void*, unsigned long long)>:
c001a0c8:	57                   	push   edi
c001a0c9:	b8 04 00 00 00       	mov    eax,0x4
c001a0ce:	56                   	push   esi
c001a0cf:	51                   	push   ecx
c001a0d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a0dc:	85 d2                	test   edx,edx
c001a0de:	74 26                	je     c001a106 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a0e0:	89 d0                	mov    eax,edx
c001a0e2:	b9 02 00 00 00       	mov    ecx,0x2
c001a0e7:	6a 00                	push   0x0
c001a0e9:	99                   	cdq    
c001a0ea:	f7 f9                	idiv   ecx
c001a0ec:	57                   	push   edi
c001a0ed:	56                   	push   esi
c001a0ee:	83 e8 32             	sub    eax,0x32
c001a0f1:	50                   	push   eax
c001a0f2:	e8 f1 c5 fe ff       	call   c00066e8 <iso_seek>
c001a0f7:	83 c4 10             	add    esp,0x10
c001a0fa:	31 f0                	xor    eax,esi
c001a0fc:	31 fa                	xor    edx,edi
c001a0fe:	09 d0                	or     eax,edx
c001a100:	0f 95 c0             	setne  al
c001a103:	0f b6 c0             	movzx  eax,al
c001a106:	5a                   	pop    edx
c001a107:	5e                   	pop    esi
c001a108:	5f                   	pop    edi
c001a109:	c3                   	ret    

c001a10a <ISO9660::tell(void*, unsigned long long*)>:
c001a10a:	53                   	push   ebx
c001a10b:	83 ec 08             	sub    esp,0x8
c001a10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a112:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a116:	85 c0                	test   eax,eax
c001a118:	74 24                	je     c001a13e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a11a:	85 db                	test   ebx,ebx
c001a11c:	74 20                	je     c001a13e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a11e:	b9 02 00 00 00       	mov    ecx,0x2
c001a123:	99                   	cdq    
c001a124:	f7 f9                	idiv   ecx
c001a126:	83 ec 0c             	sub    esp,0xc
c001a129:	83 e8 32             	sub    eax,0x32
c001a12c:	50                   	push   eax
c001a12d:	e8 3a c6 fe ff       	call   c000676c <iso_tell>
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	89 03                	mov    DWORD PTR [ebx],eax
c001a137:	31 c0                	xor    eax,eax
c001a139:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a13c:	eb 05                	jmp    c001a143 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a13e:	b8 04 00 00 00       	mov    eax,0x4
c001a143:	83 c4 08             	add    esp,0x8
c001a146:	5b                   	pop    ebx
c001a147:	c3                   	ret    

c001a148 <ISO9660::stat(void*, unsigned long long*)>:
c001a148:	56                   	push   esi
c001a149:	53                   	push   ebx
c001a14a:	83 ec 10             	sub    esp,0x10
c001a14d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a151:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a155:	68 fd 28 02 c0       	push   0xc00228fd
c001a15a:	e8 ab 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a15f:	83 c4 10             	add    esp,0x10
c001a162:	85 db                	test   ebx,ebx
c001a164:	74 2a                	je     c001a190 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a166:	85 f6                	test   esi,esi
c001a168:	74 26                	je     c001a190 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a16a:	89 d8                	mov    eax,ebx
c001a16c:	b9 02 00 00 00       	mov    ecx,0x2
c001a171:	99                   	cdq    
c001a172:	83 ec 0c             	sub    esp,0xc
c001a175:	f7 f9                	idiv   ecx
c001a177:	83 e8 32             	sub    eax,0x32
c001a17a:	50                   	push   eax
c001a17b:	e8 1d c6 fe ff       	call   c000679d <iso_total>
c001a180:	83 c4 10             	add    esp,0x10
c001a183:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a18a:	89 06                	mov    DWORD PTR [esi],eax
c001a18c:	31 c0                	xor    eax,eax
c001a18e:	eb 05                	jmp    c001a195 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a190:	b8 04 00 00 00       	mov    eax,0x4
c001a195:	5a                   	pop    edx
c001a196:	5b                   	pop    ebx
c001a197:	5e                   	pop    esi
c001a198:	c3                   	ret    
c001a199:	90                   	nop

c001a19a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a19a:	55                   	push   ebp
c001a19b:	57                   	push   edi
c001a19c:	56                   	push   esi
c001a19d:	53                   	push   ebx
c001a19e:	83 ec 18             	sub    esp,0x18
c001a1a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a1a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a1a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a1ad:	68 05 29 02 c0       	push   0xc0022905
c001a1b2:	e8 53 07 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a1b7:	83 c4 10             	add    esp,0x10
c001a1ba:	85 ff                	test   edi,edi
c001a1bc:	0f 94 c0             	sete   al
c001a1bf:	85 f6                	test   esi,esi
c001a1c1:	0f 94 c2             	sete   dl
c001a1c4:	09 d0                	or     eax,edx
c001a1c6:	a8 01                	test   al,0x1
c001a1c8:	0f 85 dd 00 00 00    	jne    c001a2ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a1ce:	85 db                	test   ebx,ebx
c001a1d0:	0f 84 d5 00 00 00    	je     c001a2ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a1d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a1d9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a1df:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a1e6:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1ed:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a1ef:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a1f5:	74 1b                	je     c001a212 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a1f7:	85 c0                	test   eax,eax
c001a1f9:	74 10                	je     c001a20b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a1fb:	83 ec 0c             	sub    esp,0xc
c001a1fe:	68 a9 28 02 c0       	push   0xc00228a9
c001a203:	e8 45 70 ff ff       	call   c001124d <KePanic(char const*)>
c001a208:	83 c4 10             	add    esp,0x10
c001a20b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a20d:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a212:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a215:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a21c:	85 c0                	test   eax,eax
c001a21e:	74 09                	je     c001a229 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a220:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a227:	74 51                	je     c001a27a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a229:	83 ec 0c             	sub    esp,0xc
c001a22c:	68 0d 29 02 c0       	push   0xc002290d
c001a231:	e8 d4 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a236:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a239:	83 c4 10             	add    esp,0x10
c001a23c:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a244:	74 21                	je     c001a267 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a246:	83 ec 0c             	sub    esp,0xc
c001a249:	68 2d 29 02 c0       	push   0xc002292d
c001a24e:	e8 b7 06 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a253:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a256:	83 c4 10             	add    esp,0x10
c001a259:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a260:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a267:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a26e:	83 ec 0c             	sub    esp,0xc
c001a271:	50                   	push   eax
c001a272:	e8 f0 c7 fe ff       	call   c0006a67 <init_percd>
c001a277:	83 c4 10             	add    esp,0x10
c001a27a:	52                   	push   edx
c001a27b:	83 c3 03             	add    ebx,0x3
c001a27e:	52                   	push   edx
c001a27f:	6a 00                	push   0x0
c001a281:	53                   	push   ebx
c001a282:	e8 a3 c2 fe ff       	call   c000652a <iso_open>
c001a287:	83 c4 10             	add    esp,0x10
c001a28a:	83 f8 ff             	cmp    eax,0xffffffff
c001a28d:	89 c5                	mov    ebp,eax
c001a28f:	75 21                	jne    c001a2b2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a291:	50                   	push   eax
c001a292:	50                   	push   eax
c001a293:	6a 01                	push   0x1
c001a295:	53                   	push   ebx
c001a296:	e8 8f c2 fe ff       	call   c000652a <iso_open>
c001a29b:	83 c4 10             	add    esp,0x10
c001a29e:	ba 02 00 00 00       	mov    edx,0x2
c001a2a3:	40                   	inc    eax
c001a2a4:	74 2b                	je     c001a2d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a2a6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a2a9:	eb 24                	jmp    c001a2cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a2ab:	ba 04 00 00 00       	mov    edx,0x4
c001a2b0:	eb 1f                	jmp    c001a2d1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a2b2:	83 ec 0c             	sub    esp,0xc
c001a2b5:	50                   	push   eax
c001a2b6:	e8 e2 c4 fe ff       	call   c000679d <iso_total>
c001a2bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a2c2:	89 07                	mov    DWORD PTR [edi],eax
c001a2c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2c7:	e8 e8 c2 fe ff       	call   c00065b4 <iso_close>
c001a2cc:	83 c4 10             	add    esp,0x10
c001a2cf:	31 d2                	xor    edx,edx
c001a2d1:	83 c4 0c             	add    esp,0xc
c001a2d4:	89 d0                	mov    eax,edx
c001a2d6:	5b                   	pop    ebx
c001a2d7:	5e                   	pop    esi
c001a2d8:	5f                   	pop    edi
c001a2d9:	5d                   	pop    ebp
c001a2da:	c3                   	ret    
c001a2db:	90                   	nop

c001a2dc <ISO9660::close(void*)>:
c001a2dc:	83 ec 0c             	sub    esp,0xc
c001a2df:	b8 04 00 00 00       	mov    eax,0x4
c001a2e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2e8:	85 d2                	test   edx,edx
c001a2ea:	74 1b                	je     c001a307 <ISO9660::close(void*)+0x2b>
c001a2ec:	89 d0                	mov    eax,edx
c001a2ee:	b9 02 00 00 00       	mov    ecx,0x2
c001a2f3:	99                   	cdq    
c001a2f4:	83 ec 0c             	sub    esp,0xc
c001a2f7:	f7 f9                	idiv   ecx
c001a2f9:	83 e8 32             	sub    eax,0x32
c001a2fc:	50                   	push   eax
c001a2fd:	e8 b2 c2 fe ff       	call   c00065b4 <iso_close>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	31 c0                	xor    eax,eax
c001a307:	83 c4 0c             	add    esp,0xc
c001a30a:	c3                   	ret    
c001a30b:	90                   	nop

c001a30c <ISO9660::openDir(char const*, void**)>:
c001a30c:	56                   	push   esi
c001a30d:	53                   	push   ebx
c001a30e:	50                   	push   eax
c001a30f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a313:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a317:	85 db                	test   ebx,ebx
c001a319:	0f 84 bd 00 00 00    	je     c001a3dc <ISO9660::openDir(char const*, void**)+0xd0>
c001a31f:	85 f6                	test   esi,esi
c001a321:	0f 84 b5 00 00 00    	je     c001a3dc <ISO9660::openDir(char const*, void**)+0xd0>
c001a327:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a329:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a32f:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a336:	74 1b                	je     c001a353 <ISO9660::openDir(char const*, void**)+0x47>
c001a338:	85 c0                	test   eax,eax
c001a33a:	74 10                	je     c001a34c <ISO9660::openDir(char const*, void**)+0x40>
c001a33c:	83 ec 0c             	sub    esp,0xc
c001a33f:	68 a9 28 02 c0       	push   0xc00228a9
c001a344:	e8 04 6f ff ff       	call   c001124d <KePanic(char const*)>
c001a349:	83 c4 10             	add    esp,0x10
c001a34c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a34e:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a353:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a356:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a35d:	85 c0                	test   eax,eax
c001a35f:	74 10                	je     c001a371 <ISO9660::openDir(char const*, void**)+0x65>
c001a361:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a368:	74 1a                	je     c001a384 <ISO9660::openDir(char const*, void**)+0x78>
c001a36a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a371:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a378:	83 ec 0c             	sub    esp,0xc
c001a37b:	50                   	push   eax
c001a37c:	e8 e6 c6 fe ff       	call   c0006a67 <init_percd>
c001a381:	83 c4 10             	add    esp,0x10
c001a384:	50                   	push   eax
c001a385:	83 c3 03             	add    ebx,0x3
c001a388:	50                   	push   eax
c001a389:	6a 01                	push   0x1
c001a38b:	53                   	push   ebx
c001a38c:	e8 99 c1 fe ff       	call   c000652a <iso_open>
c001a391:	83 c4 10             	add    esp,0x10
c001a394:	83 f8 ff             	cmp    eax,0xffffffff
c001a397:	89 c3                	mov    ebx,eax
c001a399:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a39e:	75 1c                	jne    c001a3bc <ISO9660::openDir(char const*, void**)+0xb0>
c001a3a0:	53                   	push   ebx
c001a3a1:	53                   	push   ebx
c001a3a2:	68 51 29 02 c0       	push   0xc0022951
c001a3a7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3ad:	e8 fa e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3b2:	83 c4 10             	add    esp,0x10
c001a3b5:	b8 01 00 00 00       	mov    eax,0x1
c001a3ba:	eb 25                	jmp    c001a3e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a3bc:	51                   	push   ecx
c001a3bd:	01 db                	add    ebx,ebx
c001a3bf:	51                   	push   ecx
c001a3c0:	83 c3 65             	add    ebx,0x65
c001a3c3:	68 64 29 02 c0       	push   0xc0022964
c001a3c8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3ce:	e8 d9 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	31 c0                	xor    eax,eax
c001a3d8:	89 1e                	mov    DWORD PTR [esi],ebx
c001a3da:	eb 05                	jmp    c001a3e1 <ISO9660::openDir(char const*, void**)+0xd5>
c001a3dc:	b8 04 00 00 00       	mov    eax,0x4
c001a3e1:	5a                   	pop    edx
c001a3e2:	5b                   	pop    ebx
c001a3e3:	5e                   	pop    esi
c001a3e4:	c3                   	ret    
c001a3e5:	90                   	nop

c001a3e6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a3e6:	55                   	push   ebp
c001a3e7:	57                   	push   edi
c001a3e8:	56                   	push   esi
c001a3e9:	53                   	push   ebx
c001a3ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3f0:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c001a3f7:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a3fe:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c001a405:	85 db                	test   ebx,ebx
c001a407:	0f 84 e4 00 00 00    	je     c001a4f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a40d:	85 ed                	test   ebp,ebp
c001a40f:	0f 84 dc 00 00 00    	je     c001a4f1 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c001a415:	83 ec 0c             	sub    esp,0xc
c001a418:	68 77 29 02 c0       	push   0xc0022977
c001a41d:	e8 e8 04 ff ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001a422:	89 d8                	mov    eax,ebx
c001a424:	b9 02 00 00 00       	mov    ecx,0x2
c001a429:	99                   	cdq    
c001a42a:	f7 f9                	idiv   ecx
c001a42c:	83 e8 32             	sub    eax,0x32
c001a42f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a432:	e8 b8 c3 fe ff       	call   c00067ef <iso_readdir>
c001a437:	83 c4 10             	add    esp,0x10
c001a43a:	85 c0                	test   eax,eax
c001a43c:	89 c3                	mov    ebx,eax
c001a43e:	75 38                	jne    c001a478 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c001a440:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a445:	53                   	push   ebx
c001a446:	53                   	push   ebx
c001a447:	68 82 29 02 c0       	push   0xc0022982
c001a44c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a452:	e8 55 e6 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a457:	83 c4 0c             	add    esp,0xc
c001a45a:	68 10 01 00 00       	push   0x110
c001a45f:	6a 00                	push   0x0
c001a461:	57                   	push   edi
c001a462:	e8 89 60 fe ff       	call   c00004f0 <memset>
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	b8 01 00 00 00       	mov    eax,0x1
c001a46f:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c001a476:	eb 7e                	jmp    c001a4f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a478:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a47e:	8d 70 08             	lea    esi,[eax+0x8]
c001a481:	83 ec 0c             	sub    esp,0xc
c001a484:	56                   	push   esi
c001a485:	e8 f6 60 fe ff       	call   c0000580 <strlen>
c001a48a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a492:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c001a49d:	75 0a                	jne    c001a4a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c001a49f:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c001a4a2:	b8 02 00 00 00       	mov    eax,0x2
c001a4a7:	74 05                	je     c001a4ae <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c001a4a9:	b8 01 00 00 00       	mov    eax,0x1
c001a4ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4b2:	50                   	push   eax
c001a4b3:	50                   	push   eax
c001a4b4:	56                   	push   esi
c001a4b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a4b9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a4bd:	50                   	push   eax
c001a4be:	e8 8d 61 fe ff       	call   c0000650 <strcpy>
c001a4c3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a4ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4cc:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c001a4d3:	5a                   	pop    edx
c001a4d4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4d9:	59                   	pop    ecx
c001a4da:	68 95 29 02 c0       	push   0xc0022995
c001a4df:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4e5:	e8 c2 e5 fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001a4ea:	83 c4 10             	add    esp,0x10
c001a4ed:	31 c0                	xor    eax,eax
c001a4ef:	eb 05                	jmp    c001a4f6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c001a4f1:	b8 04 00 00 00       	mov    eax,0x4
c001a4f6:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a4fc:	5b                   	pop    ebx
c001a4fd:	5e                   	pop    esi
c001a4fe:	5f                   	pop    edi
c001a4ff:	5d                   	pop    ebp
c001a500:	c3                   	ret    

c001a501 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a501:	57                   	push   edi
c001a502:	56                   	push   esi
c001a503:	53                   	push   ebx
c001a504:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a508:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a50c:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a512:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a516:	0f be cb             	movsx  ecx,bl
c001a519:	75 0b                	jne    c001a526 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a51b:	0f be 05 c0 37 02 c0 	movsx  eax,BYTE PTR ds:0xc00237c0
c001a522:	39 c8                	cmp    eax,ecx
c001a524:	74 47                	je     c001a56d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a526:	83 ec 0c             	sub    esp,0xc
c001a529:	31 d2                	xor    edx,edx
c001a52b:	68 a0 98 02 c0       	push   0xc00298a0
c001a530:	6a 01                	push   0x1
c001a532:	52                   	push   edx
c001a533:	56                   	push   esi
c001a534:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a53b:	e8 5a 35 ff ff       	call   c000da9a <LogicalDisk::read(unsigned long long, int, void*)>
c001a540:	83 c4 20             	add    esp,0x20
c001a543:	85 c0                	test   eax,eax
c001a545:	75 0e                	jne    c001a555 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a547:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a54d:	88 1d c0 37 02 c0    	mov    BYTE PTR ds:0xc00237c0,bl
c001a553:	eb 18                	jmp    c001a56d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a555:	50                   	push   eax
c001a556:	68 00 08 00 00       	push   0x800
c001a55b:	6a 00                	push   0x0
c001a55d:	57                   	push   edi
c001a55e:	e8 8d 5f fe ff       	call   c00004f0 <memset>
c001a563:	83 c4 10             	add    esp,0x10
c001a566:	b8 01 00 00 00       	mov    eax,0x1
c001a56b:	eb 0e                	jmp    c001a57b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a56d:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a572:	b9 00 08 00 00       	mov    ecx,0x800
c001a577:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a579:	31 c0                	xor    eax,eax
c001a57b:	5b                   	pop    ebx
c001a57c:	5e                   	pop    esi
c001a57d:	5f                   	pop    edi
c001a57e:	c3                   	ret    
c001a57f:	90                   	nop

c001a580 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a580:	53                   	push   ebx
c001a581:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a587:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a591:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a598:	8d 58 41             	lea    ebx,[eax+0x41]
c001a59b:	0f be db             	movsx  ebx,bl
c001a59e:	53                   	push   ebx
c001a59f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5a3:	50                   	push   eax
c001a5a4:	6a 10                	push   0x10
c001a5a6:	e8 56 ff ff ff       	call   c001a501 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a5ab:	83 c4 10             	add    esp,0x10
c001a5ae:	31 d2                	xor    edx,edx
c001a5b0:	85 c0                	test   eax,eax
c001a5b2:	75 33                	jne    c001a5e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5b4:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a5b9:	75 2c                	jne    c001a5e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5bb:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a5c0:	75 25                	jne    c001a5e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5c2:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a5c7:	75 1e                	jne    c001a5e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5c9:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a5ce:	75 17                	jne    c001a5e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5d0:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a5d5:	75 10                	jne    c001a5e7 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5d7:	83 ec 0c             	sub    esp,0xc
c001a5da:	53                   	push   ebx
c001a5db:	e8 87 c4 fe ff       	call   c0006a67 <init_percd>
c001a5e0:	83 c4 10             	add    esp,0x10
c001a5e3:	40                   	inc    eax
c001a5e4:	0f 95 c2             	setne  dl
c001a5e7:	81 c4 08 08 00 00    	add    esp,0x808
c001a5ed:	88 d0                	mov    al,dl
c001a5ef:	5b                   	pop    ebx
c001a5f0:	c3                   	ret    
c001a5f1:	90                   	nop

c001a5f2 <ISO9660::ISO9660()>:
c001a5f2:	83 ec 0c             	sub    esp,0xc
c001a5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5f9:	83 ec 0c             	sub    esp,0xc
c001a5fc:	50                   	push   eax
c001a5fd:	e8 00 0f ff ff       	call   c000b502 <Filesystem::Filesystem()>
c001a602:	83 c4 10             	add    esp,0x10
c001a605:	ba b0 29 02 c0       	mov    edx,0xc00229b0
c001a60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a60e:	89 10                	mov    DWORD PTR [eax],edx
c001a610:	e8 64 c5 fe ff       	call   c0006b79 <fs_iso9660_init>
c001a615:	90                   	nop
c001a616:	83 c4 0c             	add    esp,0xc
c001a619:	c3                   	ret    

c001a61a <SoundCard::beginPlayback()>:
c001a61a:	c7 44 24 04 14 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a14
c001a622:	e9 26 6c ff ff       	jmp    c001124d <KePanic(char const*)>
c001a627:	90                   	nop

c001a628 <SoundCard::stopPlayback()>:
c001a628:	c7 44 24 04 14 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a14
c001a630:	e9 18 6c ff ff       	jmp    c001124d <KePanic(char const*)>
c001a635:	90                   	nop

c001a636 <SoundCard::SoundCard(char const*)>:
c001a636:	83 ec 1c             	sub    esp,0x1c
c001a639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a63d:	83 ec 08             	sub    esp,0x8
c001a640:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a644:	50                   	push   eax
c001a645:	e8 fe 21 ff ff       	call   c000c848 <Device::Device(char const*)>
c001a64a:	83 c4 10             	add    esp,0x10
c001a64d:	ba 60 2a 02 c0       	mov    edx,0xc0022a60
c001a652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a656:	89 10                	mov    DWORD PTR [eax],edx
c001a658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a65c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a667:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a675:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a67f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a683:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a691:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a69b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6a3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a6a8:	7f 1a                	jg     c001a6c4 <SoundCard::SoundCard(char const*)+0x8e>
c001a6aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6b2:	83 c2 54             	add    edx,0x54
c001a6b5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a6bd:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a6c2:	eb df                	jmp    c001a6a3 <SoundCard::SoundCard(char const*)+0x6d>
c001a6c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6c8:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a6cf:	90                   	nop
c001a6d0:	83 c4 1c             	add    esp,0x1c
c001a6d3:	c3                   	ret    

c001a6d4 <SoundCard::~SoundCard()>:
c001a6d4:	83 ec 0c             	sub    esp,0xc
c001a6d7:	ba 60 2a 02 c0       	mov    edx,0xc0022a60
c001a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6e0:	89 10                	mov    DWORD PTR [eax],edx
c001a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6e6:	83 ec 0c             	sub    esp,0xc
c001a6e9:	50                   	push   eax
c001a6ea:	e8 c3 1e ff ff       	call   c000c5b2 <Device::~Device()>
c001a6ef:	83 c4 10             	add    esp,0x10
c001a6f2:	90                   	nop
c001a6f3:	83 c4 0c             	add    esp,0xc
c001a6f6:	c3                   	ret    
c001a6f7:	90                   	nop

c001a6f8 <SoundCard::~SoundCard()>:
c001a6f8:	83 ec 0c             	sub    esp,0xc
c001a6fb:	83 ec 0c             	sub    esp,0xc
c001a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a702:	e8 cd ff ff ff       	call   c001a6d4 <SoundCard::~SoundCard()>
c001a707:	83 c4 10             	add    esp,0x10
c001a70a:	83 ec 08             	sub    esp,0x8
c001a70d:	68 e8 01 00 00       	push   0x1e8
c001a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a716:	e8 f1 00 ff ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001a71b:	83 c4 10             	add    esp,0x10
c001a71e:	83 c4 0c             	add    esp,0xc
c001a721:	c3                   	ret    

c001a722 <SoundCard::configureRates(int, int, int)>:
c001a722:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a726:	31 c0                	xor    eax,eax
c001a728:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a72f:	75 20                	jne    c001a751 <SoundCard::configureRates(int, int, int)+0x2f>
c001a731:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a735:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a73b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a73f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a749:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a74f:	b0 01                	mov    al,0x1
c001a751:	c3                   	ret    

c001a752 <SoundCard::getSamples16(int, short*)>:
c001a752:	55                   	push   ebp
c001a753:	57                   	push   edi
c001a754:	31 ff                	xor    edi,edi
c001a756:	56                   	push   esi
c001a757:	53                   	push   ebx
c001a758:	31 db                	xor    ebx,ebx
c001a75a:	83 ec 10             	sub    esp,0x10
c001a75d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a761:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a765:	8d 04 36             	lea    eax,[esi+esi*1]
c001a768:	50                   	push   eax
c001a769:	6a 00                	push   0x0
c001a76b:	55                   	push   ebp
c001a76c:	e8 7f 5d fe ff       	call   c00004f0 <memset>
c001a771:	83 c4 10             	add    esp,0x10
c001a774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a778:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c001a77f:	85 c0                	test   eax,eax
c001a781:	74 1a                	je     c001a79d <SoundCard::getSamples16(int, short*)+0x4b>
c001a783:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a787:	75 14                	jne    c001a79d <SoundCard::getSamples16(int, short*)+0x4b>
c001a789:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a78d:	55                   	push   ebp
c001a78e:	56                   	push   esi
c001a78f:	50                   	push   eax
c001a790:	e8 f3 02 00 00       	call   c001aa88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a795:	83 c4 10             	add    esp,0x10
c001a798:	39 c3                	cmp    ebx,eax
c001a79a:	0f 4c d8             	cmovl  ebx,eax
c001a79d:	47                   	inc    edi
c001a79e:	83 ff 20             	cmp    edi,0x20
c001a7a1:	75 d1                	jne    c001a774 <SoundCard::getSamples16(int, short*)+0x22>
c001a7a3:	83 c4 0c             	add    esp,0xc
c001a7a6:	89 d8                	mov    eax,ebx
c001a7a8:	5b                   	pop    ebx
c001a7a9:	5e                   	pop    esi
c001a7aa:	5f                   	pop    edi
c001a7ab:	5d                   	pop    ebp
c001a7ac:	c3                   	ret    
c001a7ad:	90                   	nop

c001a7ae <SoundCard::getSamples32(int, int*)>:
c001a7ae:	55                   	push   ebp
c001a7af:	57                   	push   edi
c001a7b0:	31 ff                	xor    edi,edi
c001a7b2:	56                   	push   esi
c001a7b3:	31 f6                	xor    esi,esi
c001a7b5:	53                   	push   ebx
c001a7b6:	83 ec 10             	sub    esp,0x10
c001a7b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7bd:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a7c1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a7c5:	c1 e0 02             	shl    eax,0x2
c001a7c8:	50                   	push   eax
c001a7c9:	6a 00                	push   0x0
c001a7cb:	55                   	push   ebp
c001a7cc:	e8 1f 5d fe ff       	call   c00004f0 <memset>
c001a7d1:	83 c4 10             	add    esp,0x10
c001a7d4:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a7db:	85 c0                	test   eax,eax
c001a7dd:	74 1a                	je     c001a7f9 <SoundCard::getSamples32(int, int*)+0x4b>
c001a7df:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a7e3:	75 14                	jne    c001a7f9 <SoundCard::getSamples32(int, int*)+0x4b>
c001a7e5:	53                   	push   ebx
c001a7e6:	55                   	push   ebp
c001a7e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7eb:	50                   	push   eax
c001a7ec:	e8 67 03 00 00       	call   c001ab58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a7f1:	83 c4 10             	add    esp,0x10
c001a7f4:	39 c6                	cmp    esi,eax
c001a7f6:	0f 4c f0             	cmovl  esi,eax
c001a7f9:	47                   	inc    edi
c001a7fa:	83 ff 20             	cmp    edi,0x20
c001a7fd:	75 d5                	jne    c001a7d4 <SoundCard::getSamples32(int, int*)+0x26>
c001a7ff:	85 f6                	test   esi,esi
c001a801:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a808:	75 0f                	jne    c001a819 <SoundCard::getSamples32(int, int*)+0x6b>
c001a80a:	85 c0                	test   eax,eax
c001a80c:	74 1b                	je     c001a829 <SoundCard::getSamples32(int, int*)+0x7b>
c001a80e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	53                   	push   ebx
c001a814:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a817:	eb 0d                	jmp    c001a826 <SoundCard::getSamples32(int, int*)+0x78>
c001a819:	85 c0                	test   eax,eax
c001a81b:	75 0c                	jne    c001a829 <SoundCard::getSamples32(int, int*)+0x7b>
c001a81d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a81f:	83 ec 0c             	sub    esp,0xc
c001a822:	53                   	push   ebx
c001a823:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	83 c4 0c             	add    esp,0xc
c001a82c:	89 f0                	mov    eax,esi
c001a82e:	5b                   	pop    ebx
c001a82f:	5e                   	pop    esi
c001a830:	5f                   	pop    edi
c001a831:	5d                   	pop    ebp
c001a832:	c3                   	ret    
c001a833:	90                   	nop

c001a834 <SoundCard::addChannel(SoundPort*)>:
c001a834:	83 ec 0c             	sub    esp,0xc
c001a837:	31 c0                	xor    eax,eax
c001a839:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a83d:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a845:	74 1b                	je     c001a862 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a847:	40                   	inc    eax
c001a848:	83 f8 20             	cmp    eax,0x20
c001a84b:	75 f0                	jne    c001a83d <SoundCard::addChannel(SoundPort*)+0x9>
c001a84d:	83 ec 0c             	sub    esp,0xc
c001a850:	68 39 2a 02 c0       	push   0xc0022a39
c001a855:	e8 f3 69 ff ff       	call   c001124d <KePanic(char const*)>
c001a85a:	83 c4 10             	add    esp,0x10
c001a85d:	83 c8 ff             	or     eax,0xffffffff
c001a860:	eb 0b                	jmp    c001a86d <SoundCard::addChannel(SoundPort*)+0x39>
c001a862:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a866:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a86d:	83 c4 0c             	add    esp,0xc
c001a870:	c3                   	ret    
c001a871:	90                   	nop

c001a872 <SoundCard::removeChannel(int)>:
c001a872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a876:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a87a:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a885:	c3                   	ret    
c001a886:	66 90                	xchg   ax,ax

c001a888 <SoundPort::SoundPort(int, int, int, int)>:
c001a888:	83 ec 0c             	sub    esp,0xc
c001a88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a88f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a89a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8a6:	89 10                	mov    DWORD PTR [eax],edx
c001a8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a8b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8bb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a8be:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a8c3:	75 13                	jne    c001a8d8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8cb:	05 a0 0f 00 00       	add    eax,0xfa0
c001a8d0:	d1 e0                	shl    eax,1
c001a8d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8d6:	66 90                	xchg   ax,ax
c001a8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8e0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8f5:	c1 e0 02             	shl    eax,0x2
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	50                   	push   eax
c001a8fc:	e8 d2 d1 fe ff       	call   c0007ad3 <malloc>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	89 c2                	mov    edx,eax
c001a906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a90a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a90d:	90                   	nop
c001a90e:	83 c4 0c             	add    esp,0xc
c001a911:	c3                   	ret    
c001a912:	66 90                	xchg   ax,ax

c001a914 <SoundPort::~SoundPort()>:
c001a914:	83 ec 0c             	sub    esp,0xc
c001a917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a91e:	85 c0                	test   eax,eax
c001a920:	74 1e                	je     c001a940 <SoundPort::~SoundPort()+0x2c>
c001a922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a926:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a929:	83 ec 0c             	sub    esp,0xc
c001a92c:	50                   	push   eax
c001a92d:	e8 b1 d1 fe ff       	call   c0007ae3 <free>
c001a932:	83 c4 10             	add    esp,0x10
c001a935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a939:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a940:	90                   	nop
c001a941:	83 c4 0c             	add    esp,0xc
c001a944:	c3                   	ret    
c001a945:	90                   	nop
c001a946:	66 90                	xchg   ax,ax

c001a948 <SoundPort::unpause()>:
c001a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a94c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a950:	c3                   	ret    
c001a951:	90                   	nop
c001a952:	66 90                	xchg   ax,ax

c001a954 <SoundPort::pause()>:
c001a954:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a958:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a95c:	c3                   	ret    
c001a95d:	90                   	nop
c001a95e:	66 90                	xchg   ax,ax

c001a960 <SoundPort::getBufferUsed()>:
c001a960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a964:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a967:	c3                   	ret    

c001a968 <SoundPort::getBufferSize()>:
c001a968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a96c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a96f:	c3                   	ret    

c001a970 <SoundPort::buffer16(short*, int)>:
c001a970:	55                   	push   ebp
c001a971:	57                   	push   edi
c001a972:	56                   	push   esi
c001a973:	53                   	push   ebx
c001a974:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a978:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a97c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a97f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a982:	74 68                	je     c001a9ec <SoundPort::buffer16(short*, int)+0x7c>
c001a984:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a988:	85 c9                	test   ecx,ecx
c001a98a:	7e 60                	jle    c001a9ec <SoundPort::buffer16(short*, int)+0x7c>
c001a98c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a990:	8d 70 01             	lea    esi,[eax+0x1]
c001a993:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a996:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a999:	c1 e1 0f             	shl    ecx,0xf
c001a99c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a99f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9a2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9a5:	74 4d                	je     c001a9f4 <SoundPort::buffer16(short*, int)+0x84>
c001a9a7:	31 f6                	xor    esi,esi
c001a9a9:	eb 21                	jmp    c001a9cc <SoundPort::buffer16(short*, int)+0x5c>
c001a9ab:	90                   	nop
c001a9ac:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a9b1:	8d 79 01             	lea    edi,[ecx+0x1]
c001a9b4:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a9b7:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a9ba:	c1 e3 0f             	shl    ebx,0xf
c001a9bd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a9c0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9c3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9c6:	74 1c                	je     c001a9e4 <SoundPort::buffer16(short*, int)+0x74>
c001a9c8:	89 c6                	mov    esi,eax
c001a9ca:	66 90                	xchg   ax,ax
c001a9cc:	8d 46 01             	lea    eax,[esi+0x1]
c001a9cf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a9d3:	75 d7                	jne    c001a9ac <SoundPort::buffer16(short*, int)+0x3c>
c001a9d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9dc:	5b                   	pop    ebx
c001a9dd:	5e                   	pop    esi
c001a9de:	5f                   	pop    edi
c001a9df:	5d                   	pop    ebp
c001a9e0:	c3                   	ret    
c001a9e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a9e4:	5b                   	pop    ebx
c001a9e5:	8d 46 02             	lea    eax,[esi+0x2]
c001a9e8:	5e                   	pop    esi
c001a9e9:	5f                   	pop    edi
c001a9ea:	5d                   	pop    ebp
c001a9eb:	c3                   	ret    
c001a9ec:	5b                   	pop    ebx
c001a9ed:	31 c0                	xor    eax,eax
c001a9ef:	5e                   	pop    esi
c001a9f0:	5f                   	pop    edi
c001a9f1:	5d                   	pop    ebp
c001a9f2:	c3                   	ret    
c001a9f3:	90                   	nop
c001a9f4:	b8 01 00 00 00       	mov    eax,0x1
c001a9f9:	eb e1                	jmp    c001a9dc <SoundPort::buffer16(short*, int)+0x6c>
c001a9fb:	90                   	nop

c001a9fc <SoundPort::buffer32(int*, int)>:
c001a9fc:	55                   	push   ebp
c001a9fd:	57                   	push   edi
c001a9fe:	56                   	push   esi
c001a9ff:	53                   	push   ebx
c001aa00:	83 ec 04             	sub    esp,0x4
c001aa03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aa0f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa12:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa15:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa18:	74 5a                	je     c001aa74 <SoundPort::buffer32(int*, int)+0x78>
c001aa1a:	85 c0                	test   eax,eax
c001aa1c:	7e 56                	jle    c001aa74 <SoundPort::buffer32(int*, int)+0x78>
c001aa1e:	8d 71 01             	lea    esi,[ecx+0x1]
c001aa21:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa24:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa27:	8b 37                	mov    esi,DWORD PTR [edi]
c001aa29:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aa2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa32:	74 4c                	je     c001aa80 <SoundPort::buffer32(int*, int)+0x84>
c001aa34:	31 f6                	xor    esi,esi
c001aa36:	eb 1c                	jmp    c001aa54 <SoundPort::buffer32(int*, int)+0x58>
c001aa38:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aa3b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aa3e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aa41:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aa44:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aa48:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa4b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa4e:	74 18                	je     c001aa68 <SoundPort::buffer32(int*, int)+0x6c>
c001aa50:	89 de                	mov    esi,ebx
c001aa52:	66 90                	xchg   ax,ax
c001aa54:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aa57:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aa5a:	75 dc                	jne    c001aa38 <SoundPort::buffer32(int*, int)+0x3c>
c001aa5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa5f:	90                   	nop
c001aa60:	83 c4 04             	add    esp,0x4
c001aa63:	5b                   	pop    ebx
c001aa64:	5e                   	pop    esi
c001aa65:	5f                   	pop    edi
c001aa66:	5d                   	pop    ebp
c001aa67:	c3                   	ret    
c001aa68:	8d 46 02             	lea    eax,[esi+0x2]
c001aa6b:	83 c4 04             	add    esp,0x4
c001aa6e:	5b                   	pop    ebx
c001aa6f:	5e                   	pop    esi
c001aa70:	5f                   	pop    edi
c001aa71:	5d                   	pop    ebp
c001aa72:	c3                   	ret    
c001aa73:	90                   	nop
c001aa74:	83 c4 04             	add    esp,0x4
c001aa77:	31 c0                	xor    eax,eax
c001aa79:	5b                   	pop    ebx
c001aa7a:	5e                   	pop    esi
c001aa7b:	5f                   	pop    edi
c001aa7c:	5d                   	pop    ebp
c001aa7d:	c3                   	ret    
c001aa7e:	66 90                	xchg   ax,ax
c001aa80:	b8 01 00 00 00       	mov    eax,0x1
c001aa85:	eb d9                	jmp    c001aa60 <SoundPort::buffer32(int*, int)+0x64>
c001aa87:	90                   	nop

c001aa88 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aa88:	55                   	push   ebp
c001aa89:	57                   	push   edi
c001aa8a:	56                   	push   esi
c001aa8b:	53                   	push   ebx
c001aa8c:	83 ec 0c             	sub    esp,0xc
c001aa8f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001aa93:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aa97:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aa9b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001aa9f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001aaa5:	39 03                	cmp    DWORD PTR [ebx],eax
c001aaa7:	74 13                	je     c001aabc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c001aaa9:	83 ec 0c             	sub    esp,0xc
c001aaac:	68 8c 2a 02 c0       	push   0xc0022a8c
c001aab1:	e8 97 67 ff ff       	call   c001124d <KePanic(char const*)>
c001aab6:	83 c4 10             	add    esp,0x10
c001aab9:	8d 76 00             	lea    esi,[esi+0x0]
c001aabc:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001aac2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aac5:	74 11                	je     c001aad8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c001aac7:	83 ec 0c             	sub    esp,0xc
c001aaca:	68 cb 2a 02 c0       	push   0xc0022acb
c001aacf:	e8 79 67 ff ff       	call   c001124d <KePanic(char const*)>
c001aad4:	83 c4 10             	add    esp,0x10
c001aad7:	90                   	nop
c001aad8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001aade:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aae1:	74 11                	je     c001aaf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c001aae3:	83 ec 0c             	sub    esp,0xc
c001aae6:	68 cb 2a 02 c0       	push   0xc0022acb
c001aaeb:	e8 5d 67 ff ff       	call   c001124d <KePanic(char const*)>
c001aaf0:	83 c4 10             	add    esp,0x10
c001aaf3:	90                   	nop
c001aaf4:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c001aaf7:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c001aafb:	85 f6                	test   esi,esi
c001aafd:	7e 2d                	jle    c001ab2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001aaff:	31 c0                	xor    eax,eax
c001ab01:	8d 76 00             	lea    esi,[esi+0x0]
c001ab04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab07:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c001ab0a:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c001ab10:	85 c9                	test   ecx,ecx
c001ab12:	0f 49 d1             	cmovns edx,ecx
c001ab15:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c001ab19:	c1 fa 0f             	sar    edx,0xf
c001ab1c:	01 d1                	add    ecx,edx
c001ab1e:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c001ab22:	83 c0 01             	add    eax,0x1
c001ab25:	39 f0                	cmp    eax,esi
c001ab27:	75 db                	jne    c001ab04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c001ab29:	8d 76 00             	lea    esi,[esi+0x0]
c001ab2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab2f:	83 ec 04             	sub    esp,0x4
c001ab32:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab35:	29 f0                	sub    eax,esi
c001ab37:	c1 e0 02             	shl    eax,0x2
c001ab3a:	50                   	push   eax
c001ab3b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ab3e:	50                   	push   eax
c001ab3f:	52                   	push   edx
c001ab40:	e8 8b 58 fe ff       	call   c00003d0 <memmove>
c001ab45:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab48:	29 f0                	sub    eax,esi
c001ab4a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab4d:	83 c4 1c             	add    esp,0x1c
c001ab50:	89 f0                	mov    eax,esi
c001ab52:	5b                   	pop    ebx
c001ab53:	5e                   	pop    esi
c001ab54:	5f                   	pop    edi
c001ab55:	5d                   	pop    ebp
c001ab56:	c3                   	ret    
c001ab57:	90                   	nop

c001ab58 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ab58:	55                   	push   ebp
c001ab59:	57                   	push   edi
c001ab5a:	56                   	push   esi
c001ab5b:	53                   	push   ebx
c001ab5c:	83 ec 0c             	sub    esp,0xc
c001ab5f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab67:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001ab6b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ab6f:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c001ab75:	39 03                	cmp    DWORD PTR [ebx],eax
c001ab77:	74 13                	je     c001ab8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c001ab79:	83 ec 0c             	sub    esp,0xc
c001ab7c:	68 ac 2a 02 c0       	push   0xc0022aac
c001ab81:	e8 c7 66 ff ff       	call   c001124d <KePanic(char const*)>
c001ab86:	83 c4 10             	add    esp,0x10
c001ab89:	8d 76 00             	lea    esi,[esi+0x0]
c001ab8c:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c001ab92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab95:	74 11                	je     c001aba8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c001ab97:	83 ec 0c             	sub    esp,0xc
c001ab9a:	68 e7 2a 02 c0       	push   0xc0022ae7
c001ab9f:	e8 a9 66 ff ff       	call   c001124d <KePanic(char const*)>
c001aba4:	83 c4 10             	add    esp,0x10
c001aba7:	90                   	nop
c001aba8:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c001abae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001abb1:	74 11                	je     c001abc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c001abb3:	83 ec 0c             	sub    esp,0xc
c001abb6:	68 e7 2a 02 c0       	push   0xc0022ae7
c001abbb:	e8 8d 66 ff ff       	call   c001124d <KePanic(char const*)>
c001abc0:	83 c4 10             	add    esp,0x10
c001abc3:	90                   	nop
c001abc4:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c001abc7:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c001abcb:	85 ff                	test   edi,edi
c001abcd:	7e 21                	jle    c001abf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c001abcf:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001abd6:	31 c0                	xor    eax,eax
c001abd8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abdb:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c001abde:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001abe1:	01 d5                	add    ebp,edx
c001abe3:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c001abe6:	83 c0 04             	add    eax,0x4
c001abe9:	39 c1                	cmp    ecx,eax
c001abeb:	75 eb                	jne    c001abd8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c001abed:	8d 76 00             	lea    esi,[esi+0x0]
c001abf0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abf3:	83 ec 04             	sub    esp,0x4
c001abf6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001abf9:	29 f8                	sub    eax,edi
c001abfb:	c1 e0 02             	shl    eax,0x2
c001abfe:	50                   	push   eax
c001abff:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac02:	50                   	push   eax
c001ac03:	52                   	push   edx
c001ac04:	e8 c7 57 fe ff       	call   c00003d0 <memmove>
c001ac09:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac0c:	29 f8                	sub    eax,edi
c001ac0e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ac11:	83 c4 1c             	add    esp,0x1c
c001ac14:	89 f8                	mov    eax,edi
c001ac16:	5b                   	pop    ebx
c001ac17:	5e                   	pop    esi
c001ac18:	5f                   	pop    edi
c001ac19:	5d                   	pop    ebp
c001ac1a:	c3                   	ret    
c001ac1b:	90                   	nop

c001ac1c <PCI::open(int, int, void*)>:
c001ac1c:	83 ec 18             	sub    esp,0x18
c001ac1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac27:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ac2d:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac2f:	50                   	push   eax
c001ac30:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ac33:	31 c0                	xor    eax,eax
c001ac35:	83 c4 1c             	add    esp,0x1c
c001ac38:	c3                   	ret    
c001ac39:	90                   	nop

c001ac3a <PCI::close(int, int, void*)>:
c001ac3a:	31 c0                	xor    eax,eax
c001ac3c:	c3                   	ret    
c001ac3d:	90                   	nop

c001ac3e <PCI::PCI()>:
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac45:	83 ec 08             	sub    esp,0x8
c001ac48:	68 03 2b 02 c0       	push   0xc0022b03
c001ac4d:	50                   	push   eax
c001ac4e:	e8 b9 13 ff ff       	call   c000c00c <Bus::Bus(char const*)>
c001ac53:	83 c4 10             	add    esp,0x10
c001ac56:	ba ac 2b 02 c0       	mov    edx,0xc0022bac
c001ac5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5f:	89 10                	mov    DWORD PTR [eax],edx
c001ac61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac65:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ac6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac73:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ac78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac82:	0f b6 d0             	movzx  edx,al
c001ac85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac89:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ac90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac94:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac9a:	0f b6 d0             	movzx  edx,al
c001ac9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca1:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001aca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acaa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acb0:	8d 50 01             	lea    edx,[eax+0x1]
c001acb3:	88 d1                	mov    cl,dl
c001acb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acb9:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001acbf:	0f b6 d0             	movzx  edx,al
c001acc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001acca:	83 c9 c0             	or     ecx,0xffffffc0
c001accd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001acd1:	90                   	nop
c001acd2:	83 c4 0c             	add    esp,0xc
c001acd5:	c3                   	ret    

c001acd6 <PCI::readBAR8(unsigned int, int)>:
c001acd6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acde:	f6 c2 01             	test   dl,0x1
c001ace1:	74 07                	je     c001acea <PCI::readBAR8(unsigned int, int)+0x14>
c001ace3:	83 e2 fc             	and    edx,0xfffffffc
c001ace6:	01 c2                	add    edx,eax
c001ace8:	ec                   	in     al,dx
c001ace9:	c3                   	ret    
c001acea:	83 e2 f0             	and    edx,0xfffffff0
c001aced:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001acf0:	c3                   	ret    
c001acf1:	90                   	nop

c001acf2 <PCI::readBAR16(unsigned int, int)>:
c001acf2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acfa:	f6 c2 01             	test   dl,0x1
c001acfd:	74 08                	je     c001ad07 <PCI::readBAR16(unsigned int, int)+0x15>
c001acff:	83 e2 fc             	and    edx,0xfffffffc
c001ad02:	01 c2                	add    edx,eax
c001ad04:	66 ed                	in     ax,dx
c001ad06:	c3                   	ret    
c001ad07:	83 e2 f0             	and    edx,0xfffffff0
c001ad0a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ad0e:	c3                   	ret    
c001ad0f:	90                   	nop

c001ad10 <PCI::readBAR32(unsigned int, int)>:
c001ad10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad18:	f6 c2 01             	test   dl,0x1
c001ad1b:	74 07                	je     c001ad24 <PCI::readBAR32(unsigned int, int)+0x14>
c001ad1d:	83 e2 fc             	and    edx,0xfffffffc
c001ad20:	01 c2                	add    edx,eax
c001ad22:	ed                   	in     eax,dx
c001ad23:	c3                   	ret    
c001ad24:	83 e2 f0             	and    edx,0xfffffff0
c001ad27:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ad2a:	c3                   	ret    
c001ad2b:	90                   	nop

c001ad2c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ad2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad34:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad38:	f6 c2 01             	test   dl,0x1
c001ad3b:	74 07                	je     c001ad44 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ad3d:	83 e2 fc             	and    edx,0xfffffffc
c001ad40:	01 ca                	add    edx,ecx
c001ad42:	ee                   	out    dx,al
c001ad43:	c3                   	ret    
c001ad44:	83 e2 f0             	and    edx,0xfffffff0
c001ad47:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ad4a:	c3                   	ret    
c001ad4b:	90                   	nop

c001ad4c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ad4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad58:	f6 c2 01             	test   dl,0x1
c001ad5b:	74 08                	je     c001ad65 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ad5d:	83 e2 fc             	and    edx,0xfffffffc
c001ad60:	01 ca                	add    edx,ecx
c001ad62:	66 ef                	out    dx,ax
c001ad64:	c3                   	ret    
c001ad65:	83 e2 f0             	and    edx,0xfffffff0
c001ad68:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ad6c:	c3                   	ret    
c001ad6d:	90                   	nop

c001ad6e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ad6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad7a:	f6 c2 01             	test   dl,0x1
c001ad7d:	74 07                	je     c001ad86 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ad7f:	83 e2 fc             	and    edx,0xfffffffc
c001ad82:	01 ca                	add    edx,ecx
c001ad84:	ef                   	out    dx,eax
c001ad85:	c3                   	ret    
c001ad86:	83 e2 f0             	and    edx,0xfffffff0
c001ad89:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ad8c:	c3                   	ret    
c001ad8d:	90                   	nop

c001ad8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad8e:	55                   	push   ebp
c001ad8f:	57                   	push   edi
c001ad90:	56                   	push   esi
c001ad91:	53                   	push   ebx
c001ad92:	83 ec 0c             	sub    esp,0xc
c001ad95:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad9a:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad9e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ada2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ada6:	83 fe 07             	cmp    esi,0x7
c001ada9:	76 10                	jbe    c001adbb <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001adab:	83 ec 0c             	sub    esp,0xc
c001adae:	68 0b 2b 02 c0       	push   0xc0022b0b
c001adb3:	e8 95 64 ff ff       	call   c001124d <KePanic(char const*)>
c001adb8:	83 c4 10             	add    esp,0x10
c001adbb:	0f b6 db             	movzx  ebx,bl
c001adbe:	83 fb 0f             	cmp    ebx,0xf
c001adc1:	76 10                	jbe    c001add3 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001adc3:	83 ec 0c             	sub    esp,0xc
c001adc6:	68 3b 2b 02 c0       	push   0xc0022b3b
c001adcb:	e8 7d 64 ff ff       	call   c001124d <KePanic(char const*)>
c001add0:	83 c4 10             	add    esp,0x10
c001add3:	8d 04 36             	lea    eax,[esi+esi*1]
c001add6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001addb:	83 c8 f0             	or     eax,0xfffffff0
c001adde:	ee                   	out    dx,al
c001addf:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ade4:	89 e8                	mov    eax,ebp
c001ade6:	ee                   	out    dx,al
c001ade7:	89 f9                	mov    ecx,edi
c001ade9:	89 d8                	mov    eax,ebx
c001adeb:	0f b6 d9             	movzx  ebx,cl
c001adee:	83 c4 0c             	add    esp,0xc
c001adf1:	c1 e0 08             	shl    eax,0x8
c001adf4:	83 e3 fc             	and    ebx,0xfffffffc
c001adf7:	09 d8                	or     eax,ebx
c001adf9:	5b                   	pop    ebx
c001adfa:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001adff:	5e                   	pop    esi
c001ae00:	5f                   	pop    edi
c001ae01:	5d                   	pop    ebp
c001ae02:	c3                   	ret    
c001ae03:	90                   	nop

c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae04:	57                   	push   edi
c001ae05:	56                   	push   esi
c001ae06:	53                   	push   ebx
c001ae07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae0f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae17:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ae1d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae21:	83 ff 01             	cmp    edi,0x1
c001ae24:	75 3f                	jne    c001ae65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ae26:	89 de                	mov    esi,ebx
c001ae28:	0f b6 c0             	movzx  eax,al
c001ae2b:	c1 e0 10             	shl    eax,0x10
c001ae2e:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ae34:	0f b6 c9             	movzx  ecx,cl
c001ae37:	09 f0                	or     eax,esi
c001ae39:	c1 e1 08             	shl    ecx,0x8
c001ae3c:	0f b6 d2             	movzx  edx,dl
c001ae3f:	c1 e2 0b             	shl    edx,0xb
c001ae42:	09 c8                	or     eax,ecx
c001ae44:	09 d0                	or     eax,edx
c001ae46:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae4b:	0d 00 00 00 80       	or     eax,0x80000000
c001ae50:	ef                   	out    dx,eax
c001ae51:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae56:	ed                   	in     eax,dx
c001ae57:	83 e3 02             	and    ebx,0x2
c001ae5a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae61:	d3 e8                	shr    eax,cl
c001ae63:	eb 44                	jmp    c001aea9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae65:	83 ff 02             	cmp    edi,0x2
c001ae68:	75 2d                	jne    c001ae97 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ae6a:	83 ec 0c             	sub    esp,0xc
c001ae6d:	0f b6 fb             	movzx  edi,bl
c001ae70:	57                   	push   edi
c001ae71:	0f b6 c9             	movzx  ecx,cl
c001ae74:	51                   	push   ecx
c001ae75:	0f b6 d2             	movzx  edx,dl
c001ae78:	52                   	push   edx
c001ae79:	0f b6 c0             	movzx  eax,al
c001ae7c:	50                   	push   eax
c001ae7d:	56                   	push   esi
c001ae7e:	e8 0b ff ff ff       	call   c001ad8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae83:	89 c2                	mov    edx,eax
c001ae85:	ed                   	in     eax,dx
c001ae86:	83 e3 02             	and    ebx,0x2
c001ae89:	83 c4 20             	add    esp,0x20
c001ae8c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae93:	d3 e8                	shr    eax,cl
c001ae95:	eb 12                	jmp    c001aea9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae97:	83 ec 0c             	sub    esp,0xc
c001ae9a:	68 6b 2b 02 c0       	push   0xc0022b6b
c001ae9f:	e8 a9 63 ff ff       	call   c001124d <KePanic(char const*)>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	31 c0                	xor    eax,eax
c001aea9:	5b                   	pop    ebx
c001aeaa:	5e                   	pop    esi
c001aeab:	5f                   	pop    edi
c001aeac:	c3                   	ret    
c001aead:	90                   	nop

c001aeae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aeae:	83 ec 18             	sub    esp,0x18
c001aeb1:	6a 00                	push   0x0
c001aeb3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb8:	50                   	push   eax
c001aeb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aebe:	50                   	push   eax
c001aebf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec4:	50                   	push   eax
c001aec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aec9:	e8 36 ff ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aece:	83 c4 2c             	add    esp,0x2c
c001aed1:	c3                   	ret    

c001aed2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001aed2:	83 ec 18             	sub    esp,0x18
c001aed5:	6a 0e                	push   0xe
c001aed7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aedc:	50                   	push   eax
c001aedd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee2:	50                   	push   eax
c001aee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee8:	50                   	push   eax
c001aee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeed:	e8 12 ff ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef2:	83 c4 2c             	add    esp,0x2c
c001aef5:	0f b6 c0             	movzx  eax,al
c001aef8:	c3                   	ret    
c001aef9:	90                   	nop

c001aefa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001aefa:	55                   	push   ebp
c001aefb:	57                   	push   edi
c001aefc:	56                   	push   esi
c001aefd:	53                   	push   ebx
c001aefe:	83 ec 18             	sub    esp,0x18
c001af01:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001af06:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001af0b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001af10:	6a 0a                	push   0xa
c001af12:	56                   	push   esi
c001af13:	55                   	push   ebp
c001af14:	57                   	push   edi
c001af15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af19:	e8 e6 fe ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1e:	83 c4 14             	add    esp,0x14
c001af21:	6a 0a                	push   0xa
c001af23:	56                   	push   esi
c001af24:	55                   	push   ebp
c001af25:	57                   	push   edi
c001af26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af2a:	89 c3                	mov    ebx,eax
c001af2c:	0f b6 db             	movzx  ebx,bl
c001af2f:	e8 d0 fe ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af34:	83 c4 2c             	add    esp,0x2c
c001af37:	25 00 ff 00 00       	and    eax,0xff00
c001af3c:	09 d8                	or     eax,ebx
c001af3e:	5b                   	pop    ebx
c001af3f:	5e                   	pop    esi
c001af40:	5f                   	pop    edi
c001af41:	5d                   	pop    ebp
c001af42:	c3                   	ret    
c001af43:	90                   	nop

c001af44 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af44:	83 ec 18             	sub    esp,0x18
c001af47:	6a 08                	push   0x8
c001af49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af4e:	50                   	push   eax
c001af4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af54:	50                   	push   eax
c001af55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af5a:	50                   	push   eax
c001af5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af5f:	e8 a0 fe ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af64:	83 c4 2c             	add    esp,0x2c
c001af67:	0f b6 c4             	movzx  eax,ah
c001af6a:	c3                   	ret    
c001af6b:	90                   	nop

c001af6c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af6c:	83 ec 18             	sub    esp,0x18
c001af6f:	6a 08                	push   0x8
c001af71:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af76:	50                   	push   eax
c001af77:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af7c:	50                   	push   eax
c001af7d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af82:	50                   	push   eax
c001af83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af87:	e8 78 fe ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af8c:	83 c4 2c             	add    esp,0x2c
c001af8f:	c3                   	ret    

c001af90 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001af90:	83 ec 18             	sub    esp,0x18
c001af93:	6a 3c                	push   0x3c
c001af95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af9a:	50                   	push   eax
c001af9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afa0:	50                   	push   eax
c001afa1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afa6:	50                   	push   eax
c001afa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afab:	e8 54 fe ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afb0:	83 c4 2c             	add    esp,0x2c
c001afb3:	c3                   	ret    

c001afb4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001afb4:	83 ec 18             	sub    esp,0x18
c001afb7:	6a 18                	push   0x18
c001afb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afbe:	50                   	push   eax
c001afbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afc4:	50                   	push   eax
c001afc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afca:	50                   	push   eax
c001afcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afcf:	e8 30 fe ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd4:	83 c4 2c             	add    esp,0x2c
c001afd7:	0f b6 c4             	movzx  eax,ah
c001afda:	c3                   	ret    
c001afdb:	90                   	nop

c001afdc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afdc:	55                   	push   ebp
c001afdd:	57                   	push   edi
c001afde:	56                   	push   esi
c001afdf:	53                   	push   ebx
c001afe0:	83 ec 28             	sub    esp,0x28
c001afe3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001afe7:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001afec:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001aff1:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001aff6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001affd:	8d 43 12             	lea    eax,[ebx+0x12]
c001b000:	83 c3 10             	add    ebx,0x10
c001b003:	0f b6 c0             	movzx  eax,al
c001b006:	0f b6 db             	movzx  ebx,bl
c001b009:	50                   	push   eax
c001b00a:	51                   	push   ecx
c001b00b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b00f:	57                   	push   edi
c001b010:	55                   	push   ebp
c001b011:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b015:	e8 ea fd ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b01a:	83 c4 14             	add    esp,0x14
c001b01d:	53                   	push   ebx
c001b01e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b022:	51                   	push   ecx
c001b023:	89 c6                	mov    esi,eax
c001b025:	57                   	push   edi
c001b026:	55                   	push   ebp
c001b027:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b02b:	c1 e6 10             	shl    esi,0x10
c001b02e:	e8 d1 fd ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b033:	83 c4 3c             	add    esp,0x3c
c001b036:	5b                   	pop    ebx
c001b037:	0f b7 c0             	movzx  eax,ax
c001b03a:	09 f0                	or     eax,esi
c001b03c:	5e                   	pop    esi
c001b03d:	5f                   	pop    edi
c001b03e:	5d                   	pop    ebp
c001b03f:	c3                   	ret    

c001b040 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b040:	55                   	push   ebp
c001b041:	57                   	push   edi
c001b042:	56                   	push   esi
c001b043:	53                   	push   ebx
c001b044:	83 ec 0c             	sub    esp,0xc
c001b047:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b04b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b04f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b053:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001b057:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c001b05d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b061:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b065:	83 f9 01             	cmp    ecx,0x1
c001b068:	75 5d                	jne    c001b0c7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c001b06a:	0f b6 c8             	movzx  ecx,al
c001b06d:	89 f0                	mov    eax,esi
c001b06f:	25 fc 00 00 00       	and    eax,0xfc
c001b074:	0f b6 d2             	movzx  edx,dl
c001b077:	c1 e1 10             	shl    ecx,0x10
c001b07a:	c1 e2 0b             	shl    edx,0xb
c001b07d:	09 c1                	or     ecx,eax
c001b07f:	89 f8                	mov    eax,edi
c001b081:	0f b6 f8             	movzx  edi,al
c001b084:	c1 e7 08             	shl    edi,0x8
c001b087:	09 f9                	or     ecx,edi
c001b089:	09 d1                	or     ecx,edx
c001b08b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b090:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b096:	89 c8                	mov    eax,ecx
c001b098:	ef                   	out    dx,eax
c001b099:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b09e:	ed                   	in     eax,dx
c001b09f:	83 e6 02             	and    esi,0x2
c001b0a2:	0f b7 db             	movzx  ebx,bx
c001b0a5:	74 0a                	je     c001b0b1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c001b0a7:	c1 e3 10             	shl    ebx,0x10
c001b0aa:	0f b7 d0             	movzx  edx,ax
c001b0ad:	09 d3                	or     ebx,edx
c001b0af:	eb 05                	jmp    c001b0b6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c001b0b1:	66 31 c0             	xor    ax,ax
c001b0b4:	09 c3                	or     ebx,eax
c001b0b6:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0bb:	89 c8                	mov    eax,ecx
c001b0bd:	ef                   	out    dx,eax
c001b0be:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0c3:	89 d8                	mov    eax,ebx
c001b0c5:	eb 41                	jmp    c001b108 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b0c7:	83 f9 02             	cmp    ecx,0x2
c001b0ca:	75 45                	jne    c001b111 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c001b0cc:	89 f1                	mov    ecx,esi
c001b0ce:	83 ec 0c             	sub    esp,0xc
c001b0d1:	0f b6 f1             	movzx  esi,cl
c001b0d4:	89 f9                	mov    ecx,edi
c001b0d6:	56                   	push   esi
c001b0d7:	0f b6 f9             	movzx  edi,cl
c001b0da:	57                   	push   edi
c001b0db:	0f b6 d2             	movzx  edx,dl
c001b0de:	52                   	push   edx
c001b0df:	0f b6 c0             	movzx  eax,al
c001b0e2:	50                   	push   eax
c001b0e3:	55                   	push   ebp
c001b0e4:	e8 a5 fc ff ff       	call   c001ad8e <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0e9:	89 c2                	mov    edx,eax
c001b0eb:	ed                   	in     eax,dx
c001b0ec:	83 c4 20             	add    esp,0x20
c001b0ef:	f6 c2 02             	test   dl,0x2
c001b0f2:	0f b7 db             	movzx  ebx,bx
c001b0f5:	74 0c                	je     c001b103 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c001b0f7:	0f b7 c8             	movzx  ecx,ax
c001b0fa:	89 d8                	mov    eax,ebx
c001b0fc:	c1 e0 10             	shl    eax,0x10
c001b0ff:	09 c8                	or     eax,ecx
c001b101:	eb 05                	jmp    c001b108 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c001b103:	66 31 c0             	xor    ax,ax
c001b106:	09 d8                	or     eax,ebx
c001b108:	ef                   	out    dx,eax
c001b109:	83 c4 0c             	add    esp,0xc
c001b10c:	5b                   	pop    ebx
c001b10d:	5e                   	pop    esi
c001b10e:	5f                   	pop    edi
c001b10f:	5d                   	pop    ebp
c001b110:	c3                   	ret    
c001b111:	c7 44 24 20 6b 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022b6b
c001b119:	83 c4 0c             	add    esp,0xc
c001b11c:	5b                   	pop    ebx
c001b11d:	5e                   	pop    esi
c001b11e:	5f                   	pop    edi
c001b11f:	5d                   	pop    ebp
c001b120:	e9 28 61 ff ff       	jmp    c001124d <KePanic(char const*)>
c001b125:	90                   	nop

c001b126 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b126:	55                   	push   ebp
c001b127:	57                   	push   edi
c001b128:	56                   	push   esi
c001b129:	53                   	push   ebx
c001b12a:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b130:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b137:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c001b13e:	0f 85 bd 00 00 00    	jne    c001b201 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b144:	83 ec 0c             	sub    esp,0xc
c001b147:	68 14 01 00 00       	push   0x114
c001b14c:	e8 82 c9 fe ff       	call   c0007ad3 <malloc>
c001b151:	83 c4 0c             	add    esp,0xc
c001b154:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b15a:	68 71 2b 02 c0       	push   0xc0022b71
c001b15f:	50                   	push   eax
c001b160:	89 c3                	mov    ebx,eax
c001b162:	e8 39 06 ff ff       	call   c000b7a0 <File::File(char const*, Process*)>
c001b167:	83 c4 10             	add    esp,0x10
c001b16a:	85 db                	test   ebx,ebx
c001b16c:	0f 84 6b 02 00 00    	je     c001b3dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b172:	57                   	push   edi
c001b173:	57                   	push   edi
c001b174:	6a 01                	push   0x1
c001b176:	53                   	push   ebx
c001b177:	e8 e0 06 ff ff       	call   c000b85c <File::open(FileOpenMode)>
c001b17c:	83 c4 10             	add    esp,0x10
c001b17f:	85 c0                	test   eax,eax
c001b181:	0f 85 56 02 00 00    	jne    c001b3dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b187:	52                   	push   edx
c001b188:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b18c:	50                   	push   eax
c001b18d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b191:	50                   	push   eax
c001b192:	53                   	push   ebx
c001b193:	e8 c6 09 ff ff       	call   c000bb5e <File::stat(unsigned long long*, bool*)>
c001b198:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b19c:	40                   	inc    eax
c001b19d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1a0:	e8 2e c9 fe ff       	call   c0007ad3 <malloc>
c001b1a5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b1a9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b1ad:	59                   	pop    ecx
c001b1ae:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b1b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b1b5:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b1b9:	51                   	push   ecx
c001b1ba:	50                   	push   eax
c001b1bb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b1bf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b1c3:	53                   	push   ebx
c001b1c4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b1c7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b1cb:	83 c4 20             	add    esp,0x20
c001b1ce:	89 c8                	mov    eax,ecx
c001b1d0:	99                   	cdq    
c001b1d1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b1d5:	0f 85 02 02 00 00    	jne    c001b3dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1db:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b1df:	0f 85 f8 01 00 00    	jne    c001b3dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b1e5:	83 ec 0c             	sub    esp,0xc
c001b1e8:	53                   	push   ebx
c001b1e9:	e8 cc 06 ff ff       	call   c000b8ba <File::close()>
c001b1ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1f2:	83 c4 10             	add    esp,0x10
c001b1f5:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b1fc:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b201:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b209:	31 c9                	xor    ecx,ecx
c001b20b:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c001b212:	8b 2d a4 a0 02 c0    	mov    ebp,DWORD PTR ds:0xc002a0a4
c001b218:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b21f:	8b 15 a8 a0 02 c0    	mov    edx,DWORD PTR ds:0xc002a0a8
c001b225:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b22a:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b232:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b237:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b23f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b243:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b24b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b24f:	39 cd                	cmp    ebp,ecx
c001b251:	0f 8e 86 01 00 00    	jle    c001b3dd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c001b257:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c001b25a:	d4 40                	aam    0x40
c001b25c:	d5 39                	aad    0x39
c001b25e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b262:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c001b266:	d4 40                	aam    0x40
c001b268:	d5 39                	aad    0x39
c001b26a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b26e:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c001b272:	d4 40                	aam    0x40
c001b274:	d5 39                	aad    0x39
c001b276:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b27a:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c001b27e:	d4 40                	aam    0x40
c001b280:	d5 39                	aad    0x39
c001b282:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b286:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c001b28a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b28e:	3c 56                	cmp    al,0x56
c001b290:	74 47                	je     c001b2d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c001b292:	d4 40                	aam    0x40
c001b294:	d5 39                	aad    0x39
c001b296:	8d 58 d0             	lea    ebx,[eax-0x30]
c001b299:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c001b29d:	0f b6 db             	movzx  ebx,bl
c001b2a0:	c1 e3 04             	shl    ebx,0x4
c001b2a3:	d4 40                	aam    0x40
c001b2a5:	d5 39                	aad    0x39
c001b2a7:	83 e8 30             	sub    eax,0x30
c001b2aa:	0f b6 c0             	movzx  eax,al
c001b2ad:	09 c3                	or     ebx,eax
c001b2af:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c001b2b3:	c1 e3 04             	shl    ebx,0x4
c001b2b6:	d4 40                	aam    0x40
c001b2b8:	d5 39                	aad    0x39
c001b2ba:	83 e8 30             	sub    eax,0x30
c001b2bd:	0f b6 c0             	movzx  eax,al
c001b2c0:	09 c3                	or     ebx,eax
c001b2c2:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c001b2c6:	c1 e3 04             	shl    ebx,0x4
c001b2c9:	d4 40                	aam    0x40
c001b2cb:	d5 39                	aad    0x39
c001b2cd:	83 e8 30             	sub    eax,0x30
c001b2d0:	0f b6 c0             	movzx  eax,al
c001b2d3:	09 c3                	or     ebx,eax
c001b2d5:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2d9:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c001b2dd:	80 fb 58             	cmp    bl,0x58
c001b2e0:	74 49                	je     c001b32b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c001b2e2:	88 d8                	mov    al,bl
c001b2e4:	d4 40                	aam    0x40
c001b2e6:	d5 39                	aad    0x39
c001b2e8:	83 e8 30             	sub    eax,0x30
c001b2eb:	0f b6 f8             	movzx  edi,al
c001b2ee:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c001b2f2:	c1 e7 04             	shl    edi,0x4
c001b2f5:	d4 40                	aam    0x40
c001b2f7:	d5 39                	aad    0x39
c001b2f9:	83 e8 30             	sub    eax,0x30
c001b2fc:	0f b6 c0             	movzx  eax,al
c001b2ff:	09 c7                	or     edi,eax
c001b301:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c001b305:	c1 e7 04             	shl    edi,0x4
c001b308:	d4 40                	aam    0x40
c001b30a:	d5 39                	aad    0x39
c001b30c:	83 e8 30             	sub    eax,0x30
c001b30f:	0f b6 c0             	movzx  eax,al
c001b312:	09 c7                	or     edi,eax
c001b314:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c001b318:	c1 e7 04             	shl    edi,0x4
c001b31b:	d4 40                	aam    0x40
c001b31d:	d5 39                	aad    0x39
c001b31f:	83 e8 30             	sub    eax,0x30
c001b322:	0f b6 c0             	movzx  eax,al
c001b325:	09 c7                	or     edi,eax
c001b327:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001b32b:	8d 41 10             	lea    eax,[ecx+0x10]
c001b32e:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b332:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c001b336:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b33a:	83 f9 0a             	cmp    ecx,0xa
c001b33d:	74 07                	je     c001b346 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c001b33f:	47                   	inc    edi
c001b340:	39 c5                	cmp    ebp,eax
c001b342:	75 16                	jne    c001b35a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c001b344:	89 e8                	mov    eax,ebp
c001b346:	83 f9 0a             	cmp    ecx,0xa
c001b349:	0f 94 c1             	sete   cl
c001b34c:	0f b6 c9             	movzx  ecx,cl
c001b34f:	01 c1                	add    ecx,eax
c001b351:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b356:	75 0f                	jne    c001b367 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c001b358:	eb 1c                	jmp    c001b376 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c001b35a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b35d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c001b361:	40                   	inc    eax
c001b362:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c001b365:	eb cb                	jmp    c001b332 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c001b367:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b36b:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b370:	0f 85 d9 fe ff ff    	jne    c001b24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b376:	80 fb 58             	cmp    bl,0x58
c001b379:	74 10                	je     c001b38b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c001b37b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b380:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c001b385:	0f 85 c4 fe ff ff    	jne    c001b24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b38b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b38f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b393:	83 e8 30             	sub    eax,0x30
c001b396:	c1 e0 04             	shl    eax,0x4
c001b399:	83 eb 30             	sub    ebx,0x30
c001b39c:	09 d8                	or     eax,ebx
c001b39e:	0f b6 c0             	movzx  eax,al
c001b3a1:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b3a5:	0f 85 a4 fe ff ff    	jne    c001b24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b3ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3af:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b3b3:	83 e8 30             	sub    eax,0x30
c001b3b6:	c1 e0 04             	shl    eax,0x4
c001b3b9:	83 eb 30             	sub    ebx,0x30
c001b3bc:	09 d8                	or     eax,ebx
c001b3be:	0f b6 c0             	movzx  eax,al
c001b3c1:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b3c5:	0f 85 84 fe ff ff    	jne    c001b24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c001b3cb:	50                   	push   eax
c001b3cc:	50                   	push   eax
c001b3cd:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b3d1:	50                   	push   eax
c001b3d2:	56                   	push   esi
c001b3d3:	e8 78 52 fe ff       	call   c0000650 <strcpy>
c001b3d8:	83 c4 10             	add    esp,0x10
c001b3db:	eb 05                	jmp    c001b3e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c001b3dd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b3e0:	31 f6                	xor    esi,esi
c001b3e2:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b3e8:	89 f0                	mov    eax,esi
c001b3ea:	5b                   	pop    ebx
c001b3eb:	5e                   	pop    esi
c001b3ec:	5f                   	pop    edi
c001b3ed:	5d                   	pop    ebp
c001b3ee:	c3                   	ret    
c001b3ef:	90                   	nop

c001b3f0 <PCI::checkBus(unsigned char)>:
c001b3f0:	56                   	push   esi
c001b3f1:	53                   	push   ebx
c001b3f2:	31 db                	xor    ebx,ebx
c001b3f4:	51                   	push   ecx
c001b3f5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b3fa:	52                   	push   edx
c001b3fb:	53                   	push   ebx
c001b3fc:	43                   	inc    ebx
c001b3fd:	56                   	push   esi
c001b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b402:	e8 0f 03 00 00       	call   c001b716 <PCI::checkDevice(unsigned char, unsigned char)>
c001b407:	83 c4 10             	add    esp,0x10
c001b40a:	83 fb 20             	cmp    ebx,0x20
c001b40d:	75 eb                	jne    c001b3fa <PCI::checkBus(unsigned char)+0xa>
c001b40f:	58                   	pop    eax
c001b410:	5b                   	pop    ebx
c001b411:	5e                   	pop    esi
c001b412:	c3                   	ret    
c001b413:	90                   	nop

c001b414 <PCI::foundDevice(PCIDeviceInfo)>:
c001b414:	55                   	push   ebp
c001b415:	57                   	push   edi
c001b416:	56                   	push   esi
c001b417:	53                   	push   ebx
c001b418:	83 ec 1c             	sub    esp,0x1c
c001b41b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b420:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b424:	3d ff ff 00 00       	cmp    eax,0xffff
c001b429:	0f 84 63 01 00 00    	je     c001b592 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b42f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b434:	66 3d 06 04          	cmp    ax,0x406
c001b438:	75 2c                	jne    c001b466 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b43a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b43f:	50                   	push   eax
c001b440:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b445:	50                   	push   eax
c001b446:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b44b:	50                   	push   eax
c001b44c:	53                   	push   ebx
c001b44d:	e8 62 fb ff ff       	call   c001afb4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b452:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b456:	0f b6 c0             	movzx  eax,al
c001b459:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b45d:	83 c4 2c             	add    esp,0x2c
c001b460:	5b                   	pop    ebx
c001b461:	5e                   	pop    esi
c001b462:	5f                   	pop    edi
c001b463:	5d                   	pop    ebp
c001b464:	eb 8a                	jmp    c001b3f0 <PCI::checkBus(unsigned char)>
c001b466:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c001b46b:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b471:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001b475:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b479:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b47d:	85 d2                	test   edx,edx
c001b47f:	74 34                	je     c001b4b5 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c001b481:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b484:	85 c9                	test   ecx,ecx
c001b486:	74 29                	je     c001b4b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b488:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c001b48e:	31 f5                	xor    ebp,esi
c001b490:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c001b496:	75 19                	jne    c001b4b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b498:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c001b49e:	75 11                	jne    c001b4b1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b4a0:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b4a7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001b4ab:	0f 84 e1 00 00 00    	je     c001b592 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c001b4b1:	8b 12                	mov    edx,DWORD PTR [edx]
c001b4b3:	eb c8                	jmp    c001b47d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b4b5:	3d 01 06 00 00       	cmp    eax,0x601
c001b4ba:	75 19                	jne    c001b4d5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001b4bc:	83 ec 0c             	sub    esp,0xc
c001b4bf:	68 64 01 00 00       	push   0x164
c001b4c4:	e8 0a c6 fe ff       	call   c0007ad3 <malloc>
c001b4c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4cc:	89 c5                	mov    ebp,eax
c001b4ce:	e8 ab 0e 00 00       	call   c001c37e <SATABus::SATABus()>
c001b4d3:	eb 1e                	jmp    c001b4f3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001b4d5:	3d 01 01 00 00       	cmp    eax,0x101
c001b4da:	75 62                	jne    c001b53e <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c001b4dc:	83 ec 0c             	sub    esp,0xc
c001b4df:	68 70 02 00 00       	push   0x270
c001b4e4:	e8 ea c5 fe ff       	call   c0007ad3 <malloc>
c001b4e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4ec:	89 c5                	mov    ebp,eax
c001b4ee:	e8 f3 02 00 00       	call   c001b7e6 <IDE::IDE()>
c001b4f3:	58                   	pop    eax
c001b4f4:	5a                   	pop    edx
c001b4f5:	55                   	push   ebp
c001b4f6:	53                   	push   ebx
c001b4f7:	e8 b4 11 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c001b4fc:	83 ec 1c             	sub    esp,0x1c
c001b4ff:	b9 09 00 00 00       	mov    ecx,0x9
c001b504:	fc                   	cld    
c001b505:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b509:	89 e7                	mov    edi,esp
c001b50b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b50d:	55                   	push   ebp
c001b50e:	e8 e3 10 ff ff       	call   c000c5f6 <Device::preOpenPCI(PCIDeviceInfo)>
c001b513:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b516:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b51a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b522:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b52a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b532:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b535:	83 c4 4c             	add    esp,0x4c
c001b538:	5b                   	pop    ebx
c001b539:	5e                   	pop    esi
c001b53a:	5f                   	pop    edi
c001b53b:	5d                   	pop    ebp
c001b53c:	ff e0                	jmp    eax
c001b53e:	83 ec 0c             	sub    esp,0xc
c001b541:	68 58 01 00 00       	push   0x158
c001b546:	e8 88 c5 fe ff       	call   c0007ad3 <malloc>
c001b54b:	5a                   	pop    edx
c001b54c:	59                   	pop    ecx
c001b54d:	68 8a 2b 02 c0       	push   0xc0022b8a
c001b552:	50                   	push   eax
c001b553:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b557:	e8 f2 13 ff ff       	call   c000c94e <DriverlessDevice::DriverlessDevice(char const*)>
c001b55c:	5e                   	pop    esi
c001b55d:	5f                   	pop    edi
c001b55e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b562:	50                   	push   eax
c001b563:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b567:	53                   	push   ebx
c001b568:	e8 43 11 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c001b56d:	83 c4 10             	add    esp,0x10
c001b570:	b9 09 00 00 00       	mov    ecx,0x9
c001b575:	fc                   	cld    
c001b576:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b57a:	89 fe                	mov    esi,edi
c001b57c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b582:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b586:	83 c4 1c             	add    esp,0x1c
c001b589:	5b                   	pop    ebx
c001b58a:	5e                   	pop    esi
c001b58b:	5f                   	pop    edi
c001b58c:	5d                   	pop    ebp
c001b58d:	e9 64 10 ff ff       	jmp    c000c5f6 <Device::preOpenPCI(PCIDeviceInfo)>
c001b592:	83 c4 1c             	add    esp,0x1c
c001b595:	5b                   	pop    ebx
c001b596:	5e                   	pop    esi
c001b597:	5f                   	pop    edi
c001b598:	5d                   	pop    ebp
c001b599:	c3                   	ret    

c001b59a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b59a:	55                   	push   ebp
c001b59b:	57                   	push   edi
c001b59c:	56                   	push   esi
c001b59d:	53                   	push   ebx
c001b59e:	83 ec 68             	sub    esp,0x68
c001b5a1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b5a8:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b5ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5b0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b5b7:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b5bc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5c0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b5c7:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b5cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b5d0:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b5d5:	6a 0c                	push   0xc
c001b5d7:	57                   	push   edi
c001b5d8:	53                   	push   ebx
c001b5d9:	56                   	push   esi
c001b5da:	55                   	push   ebp
c001b5db:	e8 24 f8 ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5e0:	83 c4 20             	add    esp,0x20
c001b5e3:	57                   	push   edi
c001b5e4:	53                   	push   ebx
c001b5e5:	56                   	push   esi
c001b5e6:	55                   	push   ebp
c001b5e7:	e8 0e f9 ff ff       	call   c001aefa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b5ec:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b5f1:	57                   	push   edi
c001b5f2:	53                   	push   ebx
c001b5f3:	56                   	push   esi
c001b5f4:	55                   	push   ebp
c001b5f5:	e8 96 f9 ff ff       	call   c001af90 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b5fa:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b5fe:	83 c4 14             	add    esp,0x14
c001b601:	6a 3c                	push   0x3c
c001b603:	57                   	push   edi
c001b604:	53                   	push   ebx
c001b605:	56                   	push   esi
c001b606:	55                   	push   ebp
c001b607:	e8 f8 f7 ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b60c:	0f b6 c4             	movzx  eax,ah
c001b60f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b613:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b617:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b61b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b620:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b626:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b62c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b630:	83 c4 20             	add    esp,0x20
c001b633:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b638:	74 30                	je     c001b66a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b63a:	31 c0                	xor    eax,eax
c001b63c:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b640:	7e 28                	jle    c001b66a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b642:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b64a:	39 cb                	cmp    ebx,ecx
c001b64c:	75 19                	jne    c001b667 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b64e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b656:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b65a:	75 0b                	jne    c001b667 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b65c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b663:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b667:	40                   	inc    eax
c001b668:	eb d2                	jmp    c001b63c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b66a:	31 d2                	xor    edx,edx
c001b66c:	83 ec 0c             	sub    esp,0xc
c001b66f:	57                   	push   edi
c001b670:	53                   	push   ebx
c001b671:	56                   	push   esi
c001b672:	52                   	push   edx
c001b673:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b677:	55                   	push   ebp
c001b678:	e8 5f f9 ff ff       	call   c001afdc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b67d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b681:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b685:	42                   	inc    edx
c001b686:	83 c4 20             	add    esp,0x20
c001b689:	83 fa 06             	cmp    edx,0x6
c001b68c:	75 de                	jne    c001b66c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b68e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b699:	c1 e2 08             	shl    edx,0x8
c001b69c:	0f b6 c4             	movzx  eax,ah
c001b69f:	09 d0                	or     eax,edx
c001b6a1:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b6a6:	6a 02                	push   0x2
c001b6a8:	57                   	push   edi
c001b6a9:	53                   	push   ebx
c001b6aa:	56                   	push   esi
c001b6ab:	55                   	push   ebp
c001b6ac:	e8 53 f7 ff ff       	call   c001ae04 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6b1:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b6b6:	83 c4 20             	add    esp,0x20
c001b6b9:	57                   	push   edi
c001b6ba:	53                   	push   ebx
c001b6bb:	56                   	push   esi
c001b6bc:	55                   	push   ebp
c001b6bd:	e8 82 f8 ff ff       	call   c001af44 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b6c2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b6c6:	57                   	push   edi
c001b6c7:	53                   	push   ebx
c001b6c8:	56                   	push   esi
c001b6c9:	55                   	push   ebp
c001b6ca:	e8 df f7 ff ff       	call   c001aeae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6cf:	b9 09 00 00 00       	mov    ecx,0x9
c001b6d4:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b6d9:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b6dd:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b6e1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b6e5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b6e9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b6ed:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b6f1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b6f5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b6f9:	83 ec 0c             	sub    esp,0xc
c001b6fc:	fc                   	cld    
c001b6fd:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b701:	89 e7                	mov    edi,esp
c001b703:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b705:	55                   	push   ebp
c001b706:	e8 09 fd ff ff       	call   c001b414 <PCI::foundDevice(PCIDeviceInfo)>
c001b70b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b711:	5b                   	pop    ebx
c001b712:	5e                   	pop    esi
c001b713:	5f                   	pop    edi
c001b714:	5d                   	pop    ebp
c001b715:	c3                   	ret    

c001b716 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b716:	55                   	push   ebp
c001b717:	57                   	push   edi
c001b718:	56                   	push   esi
c001b719:	53                   	push   ebx
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b722:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b727:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b72b:	6a 00                	push   0x0
c001b72d:	56                   	push   esi
c001b72e:	57                   	push   edi
c001b72f:	55                   	push   ebp
c001b730:	e8 79 f7 ff ff       	call   c001aeae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b735:	6a 00                	push   0x0
c001b737:	56                   	push   esi
c001b738:	57                   	push   edi
c001b739:	55                   	push   ebp
c001b73a:	e8 5b fe ff ff       	call   c001b59a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b73f:	83 c4 20             	add    esp,0x20
c001b742:	6a 00                	push   0x0
c001b744:	56                   	push   esi
c001b745:	57                   	push   edi
c001b746:	55                   	push   ebp
c001b747:	e8 86 f7 ff ff       	call   c001aed2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b74c:	83 c4 10             	add    esp,0x10
c001b74f:	a8 80                	test   al,0x80
c001b751:	74 2d                	je     c001b780 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b753:	bb 01 00 00 00       	mov    ebx,0x1
c001b758:	53                   	push   ebx
c001b759:	56                   	push   esi
c001b75a:	57                   	push   edi
c001b75b:	55                   	push   ebp
c001b75c:	e8 4d f7 ff ff       	call   c001aeae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	0f b7 c0             	movzx  eax,ax
c001b767:	3d ff ff 00 00       	cmp    eax,0xffff
c001b76c:	74 0c                	je     c001b77a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b76e:	53                   	push   ebx
c001b76f:	56                   	push   esi
c001b770:	57                   	push   edi
c001b771:	55                   	push   ebp
c001b772:	e8 23 fe ff ff       	call   c001b59a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b777:	83 c4 10             	add    esp,0x10
c001b77a:	43                   	inc    ebx
c001b77b:	83 fb 08             	cmp    ebx,0x8
c001b77e:	75 d8                	jne    c001b758 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b780:	83 c4 0c             	add    esp,0xc
c001b783:	5b                   	pop    ebx
c001b784:	5e                   	pop    esi
c001b785:	5f                   	pop    edi
c001b786:	5d                   	pop    ebp
c001b787:	c3                   	ret    

c001b788 <PCI::detect()>:
c001b788:	56                   	push   esi
c001b789:	53                   	push   ebx
c001b78a:	53                   	push   ebx
c001b78b:	31 db                	xor    ebx,ebx
c001b78d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b791:	6a 00                	push   0x0
c001b793:	6a 00                	push   0x0
c001b795:	6a 00                	push   0x0
c001b797:	56                   	push   esi
c001b798:	e8 35 f7 ff ff       	call   c001aed2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	a8 80                	test   al,0x80
c001b7a2:	75 21                	jne    c001b7c5 <PCI::detect()+0x3d>
c001b7a4:	51                   	push   ecx
c001b7a5:	51                   	push   ecx
c001b7a6:	6a 00                	push   0x0
c001b7a8:	56                   	push   esi
c001b7a9:	e8 42 fc ff ff       	call   c001b3f0 <PCI::checkBus(unsigned char)>
c001b7ae:	83 c4 10             	add    esp,0x10
c001b7b1:	eb 2a                	jmp    c001b7dd <PCI::detect()+0x55>
c001b7b3:	52                   	push   edx
c001b7b4:	52                   	push   edx
c001b7b5:	53                   	push   ebx
c001b7b6:	43                   	inc    ebx
c001b7b7:	56                   	push   esi
c001b7b8:	e8 33 fc ff ff       	call   c001b3f0 <PCI::checkBus(unsigned char)>
c001b7bd:	83 c4 10             	add    esp,0x10
c001b7c0:	83 fb 08             	cmp    ebx,0x8
c001b7c3:	74 18                	je     c001b7dd <PCI::detect()+0x55>
c001b7c5:	53                   	push   ebx
c001b7c6:	6a 00                	push   0x0
c001b7c8:	6a 00                	push   0x0
c001b7ca:	56                   	push   esi
c001b7cb:	e8 de f6 ff ff       	call   c001aeae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b7d0:	83 c4 10             	add    esp,0x10
c001b7d3:	0f b7 c0             	movzx  eax,ax
c001b7d6:	3d ff ff 00 00       	cmp    eax,0xffff
c001b7db:	74 d6                	je     c001b7b3 <PCI::detect()+0x2b>
c001b7dd:	58                   	pop    eax
c001b7de:	5b                   	pop    ebx
c001b7df:	5e                   	pop    esi
c001b7e0:	c3                   	ret    
c001b7e1:	90                   	nop

c001b7e2 <IDE::close(int, int, void*)>:
c001b7e2:	83 c8 ff             	or     eax,0xffffffff
c001b7e5:	c3                   	ret    

c001b7e6 <IDE::IDE()>:
c001b7e6:	83 ec 0c             	sub    esp,0xc
c001b7e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7ed:	83 ec 08             	sub    esp,0x8
c001b7f0:	68 d0 2b 02 c0       	push   0xc0022bd0
c001b7f5:	50                   	push   eax
c001b7f6:	e8 f9 11 ff ff       	call   c000c9f4 <HardDiskController::HardDiskController(char const*)>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	ba 60 2c 02 c0       	mov    edx,0xc0022c60
c001b803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b807:	89 10                	mov    DWORD PTR [eax],edx
c001b809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b80d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b814:	90                   	nop
c001b815:	83 c4 0c             	add    esp,0xc
c001b818:	c3                   	ret    
c001b819:	90                   	nop

c001b81a <IDE::prepareInterrupt(unsigned char)>:
c001b81a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b81f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b823:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b82b:	c3                   	ret    

c001b82c <selectDrive(unsigned char, unsigned char)>:
c001b82c:	c3                   	ret    
c001b82d:	90                   	nop

c001b82e <IDE::getBase(unsigned char)>:
c001b82e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b837:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b83f:	c3                   	ret    

c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b840:	55                   	push   ebp
c001b841:	57                   	push   edi
c001b842:	56                   	push   esi
c001b843:	53                   	push   ebx
c001b844:	83 ec 1c             	sub    esp,0x1c
c001b847:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b84b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b84f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b853:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b857:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b85a:	80 f9 03             	cmp    cl,0x3
c001b85d:	77 4f                	ja     c001b8ae <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b85f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b863:	0f b6 f2             	movzx  esi,dl
c001b866:	0f b6 db             	movzx  ebx,bl
c001b869:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b86c:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b871:	80 ca 80             	or     dl,0x80
c001b874:	52                   	push   edx
c001b875:	6a 0c                	push   0xc
c001b877:	56                   	push   esi
c001b878:	57                   	push   edi
c001b879:	e8 c2 ff ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b87e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b883:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b887:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b88b:	ee                   	out    dx,al
c001b88c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b891:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b895:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b899:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b8a1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b8a5:	83 c4 2c             	add    esp,0x2c
c001b8a8:	5b                   	pop    ebx
c001b8a9:	5e                   	pop    esi
c001b8aa:	5f                   	pop    edi
c001b8ab:	5d                   	pop    ebp
c001b8ac:	eb 92                	jmp    c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8ae:	0f b6 cb             	movzx  ecx,bl
c001b8b1:	83 f9 07             	cmp    ecx,0x7
c001b8b4:	77 12                	ja     c001b8c8 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b8b6:	0f b6 d2             	movzx  edx,dl
c001b8b9:	0f b6 db             	movzx  ebx,bl
c001b8bc:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c001b8c4:	01 da                	add    edx,ebx
c001b8c6:	eb 2f                	jmp    c001b8f7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b8c8:	83 f9 0d             	cmp    ecx,0xd
c001b8cb:	77 13                	ja     c001b8e0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b8cd:	0f b6 d2             	movzx  edx,dl
c001b8d0:	0f b6 db             	movzx  ebx,bl
c001b8d3:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b8da:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b8de:	eb 17                	jmp    c001b8f7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b8e0:	83 f9 15             	cmp    ecx,0x15
c001b8e3:	77 13                	ja     c001b8f8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b8e5:	0f b6 d2             	movzx  edx,dl
c001b8e8:	0f b6 db             	movzx  ebx,bl
c001b8eb:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b8f3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b8f7:	ee                   	out    dx,al
c001b8f8:	83 c4 1c             	add    esp,0x1c
c001b8fb:	5b                   	pop    ebx
c001b8fc:	5e                   	pop    esi
c001b8fd:	5f                   	pop    edi
c001b8fe:	5d                   	pop    ebp
c001b8ff:	c3                   	ret    

c001b900 <IDE::read(unsigned char, unsigned char)>:
c001b900:	57                   	push   edi
c001b901:	56                   	push   esi
c001b902:	53                   	push   ebx
c001b903:	83 ec 10             	sub    esp,0x10
c001b906:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b90a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b90e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b912:	8d 42 f8             	lea    eax,[edx-0x8]
c001b915:	3c 03                	cmp    al,0x3
c001b917:	77 48                	ja     c001b961 <IDE::read(unsigned char, unsigned char)+0x61>
c001b919:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b91d:	0f b6 f1             	movzx  esi,cl
c001b920:	8d 7e 2a             	lea    edi,[esi+0x2a]
c001b923:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c001b928:	0c 80                	or     al,0x80
c001b92a:	50                   	push   eax
c001b92b:	6a 0c                	push   0xc
c001b92d:	56                   	push   esi
c001b92e:	53                   	push   ebx
c001b92f:	e8 0c ff ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b934:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b938:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c001b93d:	0f b6 d2             	movzx  edx,dl
c001b940:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b944:	ec                   	in     al,dx
c001b945:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b949:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c001b94e:	52                   	push   edx
c001b94f:	6a 0c                	push   0xc
c001b951:	56                   	push   esi
c001b952:	53                   	push   ebx
c001b953:	e8 e8 fe ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b958:	83 c4 20             	add    esp,0x20
c001b95b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b95f:	eb 4c                	jmp    c001b9ad <IDE::read(unsigned char, unsigned char)+0xad>
c001b961:	0f b6 f2             	movzx  esi,dl
c001b964:	83 fe 07             	cmp    esi,0x7
c001b967:	77 12                	ja     c001b97b <IDE::read(unsigned char, unsigned char)+0x7b>
c001b969:	0f b6 c9             	movzx  ecx,cl
c001b96c:	0f b6 d2             	movzx  edx,dl
c001b96f:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c001b977:	01 c2                	add    edx,eax
c001b979:	eb 31                	jmp    c001b9ac <IDE::read(unsigned char, unsigned char)+0xac>
c001b97b:	83 fe 0d             	cmp    esi,0xd
c001b97e:	77 13                	ja     c001b993 <IDE::read(unsigned char, unsigned char)+0x93>
c001b980:	0f b6 c9             	movzx  ecx,cl
c001b983:	0f b6 d2             	movzx  edx,dl
c001b986:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c001b98d:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b991:	eb 19                	jmp    c001b9ac <IDE::read(unsigned char, unsigned char)+0xac>
c001b993:	31 c0                	xor    eax,eax
c001b995:	83 fe 15             	cmp    esi,0x15
c001b998:	77 13                	ja     c001b9ad <IDE::read(unsigned char, unsigned char)+0xad>
c001b99a:	0f b6 c9             	movzx  ecx,cl
c001b99d:	0f b6 d2             	movzx  edx,dl
c001b9a0:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c001b9a8:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b9ac:	ec                   	in     al,dx
c001b9ad:	83 c4 10             	add    esp,0x10
c001b9b0:	5b                   	pop    ebx
c001b9b1:	5e                   	pop    esi
c001b9b2:	5f                   	pop    edi
c001b9b3:	c3                   	ret    

c001b9b4 <IDE::waitInterrupt(unsigned char)>:
c001b9b4:	55                   	push   ebp
c001b9b5:	57                   	push   edi
c001b9b6:	56                   	push   esi
c001b9b7:	53                   	push   ebx
c001b9b8:	31 db                	xor    ebx,ebx
c001b9ba:	83 ec 0c             	sub    esp,0xc
c001b9bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b9c1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b9c6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b9ce:	89 e8                	mov    eax,ebp
c001b9d0:	84 c0                	test   al,al
c001b9d2:	75 30                	jne    c001ba04 <IDE::waitInterrupt(unsigned char)+0x50>
c001b9d4:	50                   	push   eax
c001b9d5:	6a 0c                	push   0xc
c001b9d7:	56                   	push   esi
c001b9d8:	57                   	push   edi
c001b9d9:	e8 22 ff ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001b9de:	83 c4 10             	add    esp,0x10
c001b9e1:	a8 01                	test   al,0x1
c001b9e3:	75 27                	jne    c001ba0c <IDE::waitInterrupt(unsigned char)+0x58>
c001b9e5:	f6 c3 04             	test   bl,0x4
c001b9e8:	75 12                	jne    c001b9fc <IDE::waitInterrupt(unsigned char)+0x48>
c001b9ea:	83 fb 32             	cmp    ebx,0x32
c001b9ed:	7e 0d                	jle    c001b9fc <IDE::waitInterrupt(unsigned char)+0x48>
c001b9ef:	83 ec 0c             	sub    esp,0xc
c001b9f2:	6a 64                	push   0x64
c001b9f4:	e8 73 a4 ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001b9f9:	83 c4 10             	add    esp,0x10
c001b9fc:	83 fb 3c             	cmp    ebx,0x3c
c001b9ff:	74 0b                	je     c001ba0c <IDE::waitInterrupt(unsigned char)+0x58>
c001ba01:	43                   	inc    ebx
c001ba02:	eb c2                	jmp    c001b9c6 <IDE::waitInterrupt(unsigned char)+0x12>
c001ba04:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ba0c:	83 c4 0c             	add    esp,0xc
c001ba0f:	89 e8                	mov    eax,ebp
c001ba11:	5b                   	pop    ebx
c001ba12:	5e                   	pop    esi
c001ba13:	5f                   	pop    edi
c001ba14:	5d                   	pop    ebp
c001ba15:	c3                   	ret    

c001ba16 <ideChannel0IRQHandler(regs*, void*)>:
c001ba16:	83 ec 10             	sub    esp,0x10
c001ba19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba1d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ba24:	6a 07                	push   0x7
c001ba26:	6a 00                	push   0x0
c001ba28:	50                   	push   eax
c001ba29:	e8 d2 fe ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001ba2e:	83 c4 1c             	add    esp,0x1c
c001ba31:	c3                   	ret    

c001ba32 <ideChannel1IRQHandler(regs*, void*)>:
c001ba32:	83 ec 10             	sub    esp,0x10
c001ba35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba39:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ba40:	6a 07                	push   0x7
c001ba42:	6a 01                	push   0x1
c001ba44:	50                   	push   eax
c001ba45:	e8 b6 fe ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001ba4a:	83 c4 1c             	add    esp,0x1c
c001ba4d:	c3                   	ret    

c001ba4e <IDE::enableIRQs(unsigned char, bool)>:
c001ba4e:	57                   	push   edi
c001ba4f:	b8 02 00 00 00       	mov    eax,0x2
c001ba54:	56                   	push   esi
c001ba55:	53                   	push   ebx
c001ba56:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ba63:	74 02                	je     c001ba67 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ba65:	31 c0                	xor    eax,eax
c001ba67:	0f b6 db             	movzx  ebx,bl
c001ba6a:	bf 04 00 00 00       	mov    edi,0x4
c001ba6f:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ba76:	50                   	push   eax
c001ba77:	6a 0c                	push   0xc
c001ba79:	53                   	push   ebx
c001ba7a:	56                   	push   esi
c001ba7b:	e8 c0 fd ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba80:	83 c4 10             	add    esp,0x10
c001ba83:	50                   	push   eax
c001ba84:	6a 0c                	push   0xc
c001ba86:	53                   	push   ebx
c001ba87:	56                   	push   esi
c001ba88:	e8 73 fe ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001ba8d:	83 c4 10             	add    esp,0x10
c001ba90:	4f                   	dec    edi
c001ba91:	75 f0                	jne    c001ba83 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ba93:	5b                   	pop    ebx
c001ba94:	5e                   	pop    esi
c001ba95:	5f                   	pop    edi
c001ba96:	c3                   	ret    
c001ba97:	90                   	nop

c001ba98 <IDE::open(int, int, void*)>:
c001ba98:	55                   	push   ebp
c001ba99:	57                   	push   edi
c001ba9a:	56                   	push   esi
c001ba9b:	53                   	push   ebx
c001ba9c:	83 ec 1c             	sub    esp,0x1c
c001ba9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001baa3:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001baaa:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bab3:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001babc:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bac3:	0f 85 da 02 00 00    	jne    c001bda3 <IDE::open(int, int, void*)+0x30b>
c001bac9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bacf:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001bad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bad7:	83 e0 7f             	and    eax,0x7f
c001bada:	83 f8 05             	cmp    eax,0x5
c001badd:	74 05                	je     c001bae4 <IDE::open(int, int, void*)+0x4c>
c001badf:	83 f8 0f             	cmp    eax,0xf
c001bae2:	75 32                	jne    c001bb16 <IDE::open(int, int, void*)+0x7e>
c001bae4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001baea:	83 e0 fc             	and    eax,0xfffffffc
c001baed:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001baf4:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bafa:	83 e0 fc             	and    eax,0xfffffffc
c001bafd:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb04:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bb0a:	83 e0 fc             	and    eax,0xfffffffc
c001bb0d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bb14:	eb 14                	jmp    c001bb2a <IDE::open(int, int, void*)+0x92>
c001bb16:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bb20:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bb2a:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c001bb31:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb36:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bb3d:	89 fa                	mov    edx,edi
c001bb3f:	89 f1                	mov    ecx,esi
c001bb41:	c1 e1 10             	shl    ecx,0x10
c001bb44:	89 e8                	mov    eax,ebp
c001bb46:	c1 e0 0b             	shl    eax,0xb
c001bb49:	09 c1                	or     ecx,eax
c001bb4b:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb52:	c1 e0 08             	shl    eax,0x8
c001bb55:	09 c1                	or     ecx,eax
c001bb57:	89 c8                	mov    eax,ecx
c001bb59:	0d 08 00 00 80       	or     eax,0x80000008
c001bb5e:	ef                   	out    dx,eax
c001bb5f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb64:	ed                   	in     eax,dx
c001bb65:	c1 e8 10             	shr    eax,0x10
c001bb68:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb6d:	0f 84 f9 00 00 00    	je     c001bc6c <IDE::open(int, int, void*)+0x1d4>
c001bb73:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb79:	89 fa                	mov    edx,edi
c001bb7b:	89 c8                	mov    eax,ecx
c001bb7d:	ef                   	out    dx,eax
c001bb7e:	b0 fe                	mov    al,0xfe
c001bb80:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb85:	ee                   	out    dx,al
c001bb86:	89 c8                	mov    eax,ecx
c001bb88:	89 fa                	mov    edx,edi
c001bb8a:	ef                   	out    dx,eax
c001bb8b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb90:	ed                   	in     eax,dx
c001bb91:	3c fe                	cmp    al,0xfe
c001bb93:	0f 85 a4 00 00 00    	jne    c001bc3d <IDE::open(int, int, void*)+0x1a5>
c001bb99:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bb9f:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bba6:	74 30                	je     c001bbd8 <IDE::open(int, int, void*)+0x140>
c001bba8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bbae:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bbb2:	83 ec 0c             	sub    esp,0xc
c001bbb5:	40                   	inc    eax
c001bbb6:	0f b6 c0             	movzx  eax,al
c001bbb9:	50                   	push   eax
c001bbba:	55                   	push   ebp
c001bbbb:	56                   	push   esi
c001bbbc:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bbc2:	51                   	push   ecx
c001bbc3:	e8 84 3a ff ff       	call   c000f64c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bbc8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bbcd:	83 c4 1c             	add    esp,0x1c
c001bbd0:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bbd6:	eb 0a                	jmp    c001bbe2 <IDE::open(int, int, void*)+0x14a>
c001bbd8:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bbe2:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bbe9:	bd f8 0c 00 00       	mov    ebp,0xcf8
c001bbee:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bbf5:	89 ea                	mov    edx,ebp
c001bbf7:	c1 e1 10             	shl    ecx,0x10
c001bbfa:	c1 e0 08             	shl    eax,0x8
c001bbfd:	09 c1                	or     ecx,eax
c001bbff:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc06:	c1 e0 0b             	shl    eax,0xb
c001bc09:	09 c1                	or     ecx,eax
c001bc0b:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc11:	89 c8                	mov    eax,ecx
c001bc13:	ef                   	out    dx,eax
c001bc14:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c001bc1a:	be fc 0c 00 00       	mov    esi,0xcfc
c001bc1f:	89 f2                	mov    edx,esi
c001bc21:	89 f8                	mov    eax,edi
c001bc23:	ee                   	out    dx,al
c001bc24:	89 c8                	mov    eax,ecx
c001bc26:	89 ea                	mov    edx,ebp
c001bc28:	ef                   	out    dx,eax
c001bc29:	89 f2                	mov    edx,esi
c001bc2b:	ed                   	in     eax,dx
c001bc2c:	0f b6 c0             	movzx  eax,al
c001bc2f:	39 f8                	cmp    eax,edi
c001bc31:	74 49                	je     c001bc7c <IDE::open(int, int, void*)+0x1e4>
c001bc33:	83 ec 0c             	sub    esp,0xc
c001bc36:	68 e8 2b 02 c0       	push   0xc0022be8
c001bc3b:	eb 37                	jmp    c001bc74 <IDE::open(int, int, void*)+0x1dc>
c001bc3d:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bc46:	75 1a                	jne    c001bc62 <IDE::open(int, int, void*)+0x1ca>
c001bc48:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001bc4d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bc52:	74 05                	je     c001bc59 <IDE::open(int, int, void*)+0x1c1>
c001bc54:	83 c0 80             	add    eax,0xffffff80
c001bc57:	75 09                	jne    c001bc62 <IDE::open(int, int, void*)+0x1ca>
c001bc59:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc60:	eb 1a                	jmp    c001bc7c <IDE::open(int, int, void*)+0x1e4>
c001bc62:	83 ec 0c             	sub    esp,0xc
c001bc65:	68 f0 2b 02 c0       	push   0xc0022bf0
c001bc6a:	eb 08                	jmp    c001bc74 <IDE::open(int, int, void*)+0x1dc>
c001bc6c:	83 ec 0c             	sub    esp,0xc
c001bc6f:	68 21 2c 02 c0       	push   0xc0022c21
c001bc74:	e8 d4 55 ff ff       	call   c001124d <KePanic(char const*)>
c001bc79:	83 c4 10             	add    esp,0x10
c001bc7c:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bc83:	74 1a                	je     c001bc9f <IDE::open(int, int, void*)+0x207>
c001bc85:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc8b:	83 e0 fc             	and    eax,0xfffffffc
c001bc8e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc95:	83 c0 08             	add    eax,0x8
c001bc98:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc9f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bca5:	89 c2                	mov    edx,eax
c001bca7:	83 e2 0f             	and    edx,0xf
c001bcaa:	83 fa 08             	cmp    edx,0x8
c001bcad:	75 0a                	jne    c001bcb9 <IDE::open(int, int, void*)+0x221>
c001bcaf:	83 e8 02             	sub    eax,0x2
c001bcb2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcb9:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bcbf:	89 c2                	mov    edx,eax
c001bcc1:	83 e2 0f             	and    edx,0xf
c001bcc4:	83 fa 08             	cmp    edx,0x8
c001bcc7:	75 0a                	jne    c001bcd3 <IDE::open(int, int, void*)+0x23b>
c001bcc9:	83 e8 02             	sub    eax,0x2
c001bccc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bcd3:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bcda:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bce1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bce4:	89 d0                	mov    eax,edx
c001bce6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcea:	8d 7a 01             	lea    edi,[edx+0x1]
c001bced:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bcf1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bcf5:	83 e1 3f             	and    ecx,0x3f
c001bcf8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcfc:	89 f9                	mov    ecx,edi
c001bcfe:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd05:	8d 78 02             	lea    edi,[eax+0x2]
c001bd08:	0f b6 c9             	movzx  ecx,cl
c001bd0b:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd0e:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bd12:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd16:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd1a:	83 e2 3f             	and    edx,0x3f
c001bd1d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd21:	89 f9                	mov    ecx,edi
c001bd23:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bd29:	8d 78 03             	lea    edi,[eax+0x3]
c001bd2c:	0f b6 d1             	movzx  edx,cl
c001bd2f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd32:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bd36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd3a:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd3e:	83 e1 3f             	and    ecx,0x3f
c001bd41:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd45:	89 f9                	mov    ecx,edi
c001bd47:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bd4d:	8d 78 04             	lea    edi,[eax+0x4]
c001bd50:	0f b6 c9             	movzx  ecx,cl
c001bd53:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd56:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd5a:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd5e:	89 fa                	mov    edx,edi
c001bd60:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bd66:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd6a:	83 e2 3f             	and    edx,0x3f
c001bd6d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd71:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd78:	66 85 f6             	test   si,si
c001bd7b:	74 65                	je     c001bde2 <IDE::open(int, int, void*)+0x34a>
c001bd7d:	89 f9                	mov    ecx,edi
c001bd7f:	83 c0 05             	add    eax,0x5
c001bd82:	0f b6 d1             	movzx  edx,cl
c001bd85:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd88:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd8c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd90:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd96:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bd9a:	83 e0 3f             	and    eax,0x3f
c001bd9d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bda1:	eb 3f                	jmp    c001bde2 <IDE::open(int, int, void*)+0x34a>
c001bda3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bdaa:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bdb0:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bdb7:	05 06 02 00 00       	add    eax,0x206
c001bdbc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdc3:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bdca:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bdd1:	05 06 02 00 00       	add    eax,0x206
c001bdd6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bddd:	e9 bd fe ff ff       	jmp    c001bc9f <IDE::open(int, int, void*)+0x207>
c001bde2:	50                   	push   eax
c001bde3:	50                   	push   eax
c001bde4:	6a 00                	push   0x0
c001bde6:	53                   	push   ebx
c001bde7:	e8 2e fa ff ff       	call   c001b81a <IDE::prepareInterrupt(unsigned char)>
c001bdec:	5a                   	pop    edx
c001bded:	59                   	pop    ecx
c001bdee:	6a 01                	push   0x1
c001bdf0:	53                   	push   ebx
c001bdf1:	e8 24 fa ff ff       	call   c001b81a <IDE::prepareInterrupt(unsigned char)>
c001bdf6:	83 c4 0c             	add    esp,0xc
c001bdf9:	6a 00                	push   0x0
c001bdfb:	6a 00                	push   0x0
c001bdfd:	53                   	push   ebx
c001bdfe:	e8 4b fc ff ff       	call   c001ba4e <IDE::enableIRQs(unsigned char, bool)>
c001be03:	83 c4 0c             	add    esp,0xc
c001be06:	6a 00                	push   0x0
c001be08:	6a 01                	push   0x1
c001be0a:	53                   	push   ebx
c001be0b:	e8 3e fc ff ff       	call   c001ba4e <IDE::enableIRQs(unsigned char, bool)>
c001be10:	83 c4 10             	add    esp,0x10
c001be13:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001be1a:	74 34                	je     c001be50 <IDE::open(int, int, void*)+0x3b8>
c001be1c:	83 ec 0c             	sub    esp,0xc
c001be1f:	53                   	push   ebx
c001be20:	6a 01                	push   0x1
c001be22:	68 16 ba 01 c0       	push   0xc001ba16
c001be27:	6a 0e                	push   0xe
c001be29:	53                   	push   ebx
c001be2a:	e8 2d 08 ff ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be2f:	83 c4 14             	add    esp,0x14
c001be32:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be38:	53                   	push   ebx
c001be39:	6a 01                	push   0x1
c001be3b:	68 32 ba 01 c0       	push   0xc001ba32
c001be40:	6a 0f                	push   0xf
c001be42:	53                   	push   ebx
c001be43:	e8 14 08 ff ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be48:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001be4e:	eb 38                	jmp    c001be88 <IDE::open(int, int, void*)+0x3f0>
c001be50:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be5a:	83 ec 0c             	sub    esp,0xc
c001be5d:	53                   	push   ebx
c001be5e:	6a 00                	push   0x0
c001be60:	68 16 ba 01 c0       	push   0xc001ba16
c001be65:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be6b:	53                   	push   ebx
c001be6c:	e8 eb 07 ff ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be71:	83 c4 14             	add    esp,0x14
c001be74:	53                   	push   ebx
c001be75:	6a 00                	push   0x0
c001be77:	68 32 ba 01 c0       	push   0xc001ba32
c001be7c:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be82:	53                   	push   ebx
c001be83:	e8 d4 07 ff ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be88:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be8a:	83 c4 20             	add    esp,0x20
c001be8d:	83 ec 0c             	sub    esp,0xc
c001be90:	53                   	push   ebx
c001be91:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be94:	83 c4 0c             	add    esp,0xc
c001be97:	6a 07                	push   0x7
c001be99:	6a 00                	push   0x0
c001be9b:	53                   	push   ebx
c001be9c:	e8 5f fa ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001bea1:	83 c4 0c             	add    esp,0xc
c001bea4:	6a 07                	push   0x7
c001bea6:	6a 01                	push   0x1
c001bea8:	53                   	push   ebx
c001bea9:	e8 52 fa ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001beae:	83 c4 0c             	add    esp,0xc
c001beb1:	6a 01                	push   0x1
c001beb3:	6a 00                	push   0x0
c001beb5:	53                   	push   ebx
c001beb6:	e8 93 fb ff ff       	call   c001ba4e <IDE::enableIRQs(unsigned char, bool)>
c001bebb:	83 c4 0c             	add    esp,0xc
c001bebe:	6a 01                	push   0x1
c001bec0:	6a 01                	push   0x1
c001bec2:	53                   	push   ebx
c001bec3:	e8 86 fb ff ff       	call   c001ba4e <IDE::enableIRQs(unsigned char, bool)>
c001bec8:	83 c4 2c             	add    esp,0x2c
c001becb:	31 c0                	xor    eax,eax
c001becd:	5b                   	pop    ebx
c001bece:	5e                   	pop    esi
c001becf:	5f                   	pop    edi
c001bed0:	5d                   	pop    ebp
c001bed1:	c3                   	ret    

c001bed2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bed2:	55                   	push   ebp
c001bed3:	57                   	push   edi
c001bed4:	56                   	push   esi
c001bed5:	53                   	push   ebx
c001bed6:	83 ec 1c             	sub    esp,0x1c
c001bed9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bedd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bee1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bee5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bee9:	8d 42 f8             	lea    eax,[edx-0x8]
c001beec:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bef0:	3c 03                	cmp    al,0x3
c001bef2:	77 5a                	ja     c001bf4e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bef4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bef8:	0f b6 db             	movzx  ebx,bl
c001befb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beff:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf02:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf07:	0c 80                	or     al,0x80
c001bf09:	50                   	push   eax
c001bf0a:	6a 0c                	push   0xc
c001bf0c:	53                   	push   ebx
c001bf0d:	56                   	push   esi
c001bf0e:	e8 2d f9 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf17:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf1c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf20:	0f b6 d2             	movzx  edx,dl
c001bf23:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf27:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf29:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf2e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bf32:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bf36:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf3e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf42:	83 c4 2c             	add    esp,0x2c
c001bf45:	5b                   	pop    ebx
c001bf46:	5e                   	pop    esi
c001bf47:	5f                   	pop    edi
c001bf48:	5d                   	pop    ebp
c001bf49:	e9 f2 f8 ff ff       	jmp    c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf4e:	0f b6 c2             	movzx  eax,dl
c001bf51:	83 f8 07             	cmp    eax,0x7
c001bf54:	77 12                	ja     c001bf68 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bf56:	0f b6 db             	movzx  ebx,bl
c001bf59:	0f b6 c2             	movzx  eax,dl
c001bf5c:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bf64:	01 c2                	add    edx,eax
c001bf66:	eb 2f                	jmp    c001bf97 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf68:	83 f8 0d             	cmp    eax,0xd
c001bf6b:	77 13                	ja     c001bf80 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bf6d:	0f b6 db             	movzx  ebx,bl
c001bf70:	0f b6 d2             	movzx  edx,dl
c001bf73:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bf7a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf7e:	eb 17                	jmp    c001bf97 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf80:	83 f8 15             	cmp    eax,0x15
c001bf83:	77 14                	ja     c001bf99 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bf85:	0f b6 db             	movzx  ebx,bl
c001bf88:	0f b6 d2             	movzx  edx,dl
c001bf8b:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bf93:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf97:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf99:	83 c4 1c             	add    esp,0x1c
c001bf9c:	5b                   	pop    ebx
c001bf9d:	5e                   	pop    esi
c001bf9e:	5f                   	pop    edi
c001bf9f:	5d                   	pop    ebp
c001bfa0:	c3                   	ret    
c001bfa1:	90                   	nop

c001bfa2 <IDE::detect()>:
c001bfa2:	55                   	push   ebp
c001bfa3:	57                   	push   edi
c001bfa4:	56                   	push   esi
c001bfa5:	53                   	push   ebx
c001bfa6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bfac:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bfb3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bfba:	0f 85 9e 02 00 00    	jne    c001c25e <IDE::detect()+0x2bc>
c001bfc0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bfc7:	31 f6                	xor    esi,esi
c001bfc9:	31 ff                	xor    edi,edi
c001bfcb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bfd3:	89 f8                	mov    eax,edi
c001bfd5:	c1 e0 06             	shl    eax,0x6
c001bfd8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bfe0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfe4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bfe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfec:	c1 e0 04             	shl    eax,0x4
c001bfef:	83 c8 a0             	or     eax,0xffffffa0
c001bff2:	0f b6 c0             	movzx  eax,al
c001bff5:	50                   	push   eax
c001bff6:	6a 06                	push   0x6
c001bff8:	56                   	push   esi
c001bff9:	53                   	push   ebx
c001bffa:	e8 41 f8 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfff:	83 c4 0c             	add    esp,0xc
c001c002:	6a 0c                	push   0xc
c001c004:	56                   	push   esi
c001c005:	53                   	push   ebx
c001c006:	e8 f5 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c00b:	83 c4 0c             	add    esp,0xc
c001c00e:	6a 0c                	push   0xc
c001c010:	56                   	push   esi
c001c011:	53                   	push   ebx
c001c012:	e8 e9 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c017:	83 c4 0c             	add    esp,0xc
c001c01a:	6a 0c                	push   0xc
c001c01c:	56                   	push   esi
c001c01d:	53                   	push   ebx
c001c01e:	e8 dd f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c023:	83 c4 0c             	add    esp,0xc
c001c026:	6a 0c                	push   0xc
c001c028:	56                   	push   esi
c001c029:	53                   	push   ebx
c001c02a:	e8 d1 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c02f:	68 ec 00 00 00       	push   0xec
c001c034:	6a 07                	push   0x7
c001c036:	56                   	push   esi
c001c037:	53                   	push   ebx
c001c038:	e8 03 f8 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c03d:	83 c4 1c             	add    esp,0x1c
c001c040:	6a 0c                	push   0xc
c001c042:	56                   	push   esi
c001c043:	53                   	push   ebx
c001c044:	e8 b7 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c049:	83 c4 0c             	add    esp,0xc
c001c04c:	6a 0c                	push   0xc
c001c04e:	56                   	push   esi
c001c04f:	53                   	push   ebx
c001c050:	e8 ab f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c055:	83 c4 0c             	add    esp,0xc
c001c058:	6a 0c                	push   0xc
c001c05a:	56                   	push   esi
c001c05b:	53                   	push   ebx
c001c05c:	e8 9f f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c061:	83 c4 0c             	add    esp,0xc
c001c064:	6a 0c                	push   0xc
c001c066:	56                   	push   esi
c001c067:	53                   	push   ebx
c001c068:	e8 93 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c06d:	83 c4 0c             	add    esp,0xc
c001c070:	6a 0c                	push   0xc
c001c072:	56                   	push   esi
c001c073:	53                   	push   ebx
c001c074:	e8 87 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	84 c0                	test   al,al
c001c07e:	0f 84 61 01 00 00    	je     c001c1e5 <IDE::detect()+0x243>
c001c084:	31 ed                	xor    ebp,ebp
c001c086:	50                   	push   eax
c001c087:	6a 0c                	push   0xc
c001c089:	56                   	push   esi
c001c08a:	53                   	push   ebx
c001c08b:	e8 70 f8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c090:	83 c4 10             	add    esp,0x10
c001c093:	a8 01                	test   al,0x1
c001c095:	0f 85 6b 01 00 00    	jne    c001c206 <IDE::detect()+0x264>
c001c09b:	a8 80                	test   al,0x80
c001c09d:	75 04                	jne    c001c0a3 <IDE::detect()+0x101>
c001c09f:	a8 08                	test   al,0x8
c001c0a1:	75 23                	jne    c001c0c6 <IDE::detect()+0x124>
c001c0a3:	45                   	inc    ebp
c001c0a4:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001c0aa:	7e da                	jle    c001c086 <IDE::detect()+0xe4>
c001c0ac:	83 ec 0c             	sub    esp,0xc
c001c0af:	6a 32                	push   0x32
c001c0b1:	e8 b6 9d ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001c0b6:	83 c4 10             	add    esp,0x10
c001c0b9:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001c0bf:	75 c5                	jne    c001c086 <IDE::detect()+0xe4>
c001c0c1:	e9 40 01 00 00       	jmp    c001c206 <IDE::detect()+0x264>
c001c0c6:	31 c9                	xor    ecx,ecx
c001c0c8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c0cc:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c001c0d0:	83 ec 0c             	sub    esp,0xc
c001c0d3:	68 80 00 00 00       	push   0x80
c001c0d8:	55                   	push   ebp
c001c0d9:	6a 00                	push   0x0
c001c0db:	56                   	push   esi
c001c0dc:	53                   	push   ebx
c001c0dd:	e8 f0 fd ff ff       	call   c001bed2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c0e2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c0e7:	89 f8                	mov    eax,edi
c001c0e9:	c1 e0 06             	shl    eax,0x6
c001c0ec:	01 d8                	add    eax,ebx
c001c0ee:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c0f5:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c0fc:	89 d1                	mov    ecx,edx
c001c0fe:	89 f2                	mov    edx,esi
c001c100:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c106:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c10a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c110:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c114:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c11b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c123:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c12a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c132:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c138:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c13f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c145:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c149:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c14d:	83 c4 20             	add    esp,0x20
c001c150:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c001c153:	83 c5 02             	add    ebp,0x2
c001c156:	83 c0 02             	add    eax,0x2
c001c159:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c15f:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c001c162:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c168:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c001c16c:	75 e2                	jne    c001c150 <IDE::detect()+0x1ae>
c001c16e:	89 f8                	mov    eax,edi
c001c170:	c1 e0 06             	shl    eax,0x6
c001c173:	01 d8                	add    eax,ebx
c001c175:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c17c:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c183:	c1 ea 09             	shr    edx,0x9
c001c186:	83 e2 01             	and    edx,0x1
c001c189:	80 e1 01             	and    cl,0x1
c001c18c:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c192:	75 22                	jne    c001c1b6 <IDE::detect()+0x214>
c001c194:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c19b:	74 47                	je     c001c1e4 <IDE::detect()+0x242>
c001c19d:	83 ec 0c             	sub    esp,0xc
c001c1a0:	68 7c 01 00 00       	push   0x17c
c001c1a5:	e8 29 b9 fe ff       	call   c0007ad3 <malloc>
c001c1aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1ad:	89 c5                	mov    ebp,eax
c001c1af:	e8 16 05 00 00       	call   c001c6ca <ATA::ATA()>
c001c1b4:	eb 17                	jmp    c001c1cd <IDE::detect()+0x22b>
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	68 84 01 00 00       	push   0x184
c001c1be:	e8 10 b9 fe ff       	call   c0007ad3 <malloc>
c001c1c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1c6:	89 c5                	mov    ebp,eax
c001c1c8:	e8 6f 0e 00 00       	call   c001d03c <ATAPI::ATAPI()>
c001c1cd:	5a                   	pop    edx
c001c1ce:	59                   	pop    ecx
c001c1cf:	55                   	push   ebp
c001c1d0:	53                   	push   ebx
c001c1d1:	e8 da 04 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c001c1d6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c1d9:	53                   	push   ebx
c001c1da:	57                   	push   edi
c001c1db:	6a 00                	push   0x0
c001c1dd:	55                   	push   ebp
c001c1de:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1e1:	83 c4 20             	add    esp,0x20
c001c1e4:	47                   	inc    edi
c001c1e5:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c1ea:	74 0d                	je     c001c1f9 <IDE::detect()+0x257>
c001c1ec:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c1f4:	e9 da fd ff ff       	jmp    c001bfd3 <IDE::detect()+0x31>
c001c1f9:	4e                   	dec    esi
c001c1fa:	74 62                	je     c001c25e <IDE::detect()+0x2bc>
c001c1fc:	be 01 00 00 00       	mov    esi,0x1
c001c201:	e9 c5 fd ff ff       	jmp    c001bfcb <IDE::detect()+0x29>
c001c206:	50                   	push   eax
c001c207:	6a 04                	push   0x4
c001c209:	56                   	push   esi
c001c20a:	53                   	push   ebx
c001c20b:	e8 f0 f6 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c210:	83 c4 0c             	add    esp,0xc
c001c213:	6a 05                	push   0x5
c001c215:	56                   	push   esi
c001c216:	53                   	push   ebx
c001c217:	89 c5                	mov    ebp,eax
c001c219:	e8 e2 f6 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c21e:	89 e9                	mov    ecx,ebp
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	0f b6 e9             	movzx  ebp,cl
c001c226:	83 fd 14             	cmp    ebp,0x14
c001c229:	74 2d                	je     c001c258 <IDE::detect()+0x2b6>
c001c22b:	83 fd 69             	cmp    ebp,0x69
c001c22e:	75 b5                	jne    c001c1e5 <IDE::detect()+0x243>
c001c230:	3c 96                	cmp    al,0x96
c001c232:	75 b1                	jne    c001c1e5 <IDE::detect()+0x243>
c001c234:	68 a1 00 00 00       	push   0xa1
c001c239:	6a 07                	push   0x7
c001c23b:	56                   	push   esi
c001c23c:	53                   	push   ebx
c001c23d:	e8 fe f5 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c242:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c249:	e8 1e 9c ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001c24e:	83 c4 10             	add    esp,0x10
c001c251:	b1 01                	mov    cl,0x1
c001c253:	e9 70 fe ff ff       	jmp    c001c0c8 <IDE::detect()+0x126>
c001c258:	3c eb                	cmp    al,0xeb
c001c25a:	75 cf                	jne    c001c22b <IDE::detect()+0x289>
c001c25c:	eb d6                	jmp    c001c234 <IDE::detect()+0x292>
c001c25e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c264:	5b                   	pop    ebx
c001c265:	5e                   	pop    esi
c001c266:	5f                   	pop    edi
c001c267:	5d                   	pop    ebp
c001c268:	c3                   	ret    
c001c269:	90                   	nop

c001c26a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c26a:	55                   	push   ebp
c001c26b:	57                   	push   edi
c001c26c:	56                   	push   esi
c001c26d:	53                   	push   ebx
c001c26e:	83 ec 1c             	sub    esp,0x1c
c001c271:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c275:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c279:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c27d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c281:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c285:	88 c3                	mov    bl,al
c001c287:	25 ff 00 00 00       	and    eax,0xff
c001c28c:	0f 84 88 00 00 00    	je     c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	89 c7                	mov    edi,eax
c001c297:	68 4b 2c 02 c0       	push   0xc0022c4b
c001c29c:	e8 69 e6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	83 ff 01             	cmp    edi,0x1
c001c2a7:	74 6b                	je     c001c314 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c2a9:	83 ff 02             	cmp    edi,0x2
c001c2ac:	75 58                	jne    c001c306 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c2ae:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c2b3:	50                   	push   eax
c001c2b4:	6a 01                	push   0x1
c001c2b6:	01 ff                	add    edi,edi
c001c2b8:	09 fe                	or     esi,edi
c001c2ba:	89 f0                	mov    eax,esi
c001c2bc:	0f b6 f0             	movzx  esi,al
c001c2bf:	c1 e6 06             	shl    esi,0x6
c001c2c2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c2ca:	50                   	push   eax
c001c2cb:	55                   	push   ebp
c001c2cc:	e8 2f f6 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c2d1:	83 c4 10             	add    esp,0x10
c001c2d4:	a8 01                	test   al,0x1
c001c2d6:	74 02                	je     c001c2da <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c2d8:	b3 07                	mov    bl,0x7
c001c2da:	a8 02                	test   al,0x2
c001c2dc:	74 02                	je     c001c2e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c2de:	b3 03                	mov    bl,0x3
c001c2e0:	a8 04                	test   al,0x4
c001c2e2:	74 02                	je     c001c2e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c2e4:	b3 14                	mov    bl,0x14
c001c2e6:	a8 08                	test   al,0x8
c001c2e8:	74 02                	je     c001c2ec <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c2ea:	b3 03                	mov    bl,0x3
c001c2ec:	a8 10                	test   al,0x10
c001c2ee:	74 02                	je     c001c2f2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c2f0:	b3 15                	mov    bl,0x15
c001c2f2:	a8 20                	test   al,0x20
c001c2f4:	74 02                	je     c001c2f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c2f6:	b3 03                	mov    bl,0x3
c001c2f8:	a8 40                	test   al,0x40
c001c2fa:	74 02                	je     c001c2fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c2fc:	b3 16                	mov    bl,0x16
c001c2fe:	a8 80                	test   al,0x80
c001c300:	74 18                	je     c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c302:	b3 0d                	mov    bl,0xd
c001c304:	eb 14                	jmp    c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c306:	83 ff 03             	cmp    edi,0x3
c001c309:	74 0d                	je     c001c318 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c30b:	83 ff 04             	cmp    edi,0x4
c001c30e:	75 0a                	jne    c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c310:	b3 08                	mov    bl,0x8
c001c312:	eb 06                	jmp    c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c314:	b3 13                	mov    bl,0x13
c001c316:	eb 02                	jmp    c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c318:	b3 17                	mov    bl,0x17
c001c31a:	83 c4 1c             	add    esp,0x1c
c001c31d:	88 d8                	mov    al,bl
c001c31f:	5b                   	pop    ebx
c001c320:	5e                   	pop    esi
c001c321:	5f                   	pop    edi
c001c322:	5d                   	pop    ebp
c001c323:	c3                   	ret    

c001c324 <IDE::polling(unsigned char, unsigned int)>:
c001c324:	57                   	push   edi
c001c325:	56                   	push   esi
c001c326:	53                   	push   ebx
c001c327:	bb 04 00 00 00       	mov    ebx,0x4
c001c32c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c330:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c335:	52                   	push   edx
c001c336:	6a 0c                	push   0xc
c001c338:	56                   	push   esi
c001c339:	57                   	push   edi
c001c33a:	e8 c1 f5 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c33f:	83 c4 10             	add    esp,0x10
c001c342:	4b                   	dec    ebx
c001c343:	75 f0                	jne    c001c335 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c345:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c34a:	50                   	push   eax
c001c34b:	6a 0c                	push   0xc
c001c34d:	56                   	push   esi
c001c34e:	57                   	push   edi
c001c34f:	e8 ac f5 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c354:	83 c4 10             	add    esp,0x10
c001c357:	a8 01                	test   al,0x1
c001c359:	75 17                	jne    c001c372 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c35b:	a8 20                	test   al,0x20
c001c35d:	75 0f                	jne    c001c36e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c35f:	4b                   	dec    ebx
c001c360:	74 10                	je     c001c372 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c362:	a8 80                	test   al,0x80
c001c364:	75 e4                	jne    c001c34a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c366:	a8 08                	test   al,0x8
c001c368:	74 e0                	je     c001c34a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c36a:	31 c0                	xor    eax,eax
c001c36c:	eb 06                	jmp    c001c374 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c36e:	b0 01                	mov    al,0x1
c001c370:	eb 02                	jmp    c001c374 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c372:	b0 02                	mov    al,0x2
c001c374:	5b                   	pop    ebx
c001c375:	5e                   	pop    esi
c001c376:	5f                   	pop    edi
c001c377:	c3                   	ret    

c001c378 <SATABus::close(int, int, void*)>:
c001c378:	31 c0                	xor    eax,eax
c001c37a:	c3                   	ret    
c001c37b:	90                   	nop

c001c37c <SATABus::detect()>:
c001c37c:	c3                   	ret    
c001c37d:	90                   	nop

c001c37e <SATABus::SATABus()>:
c001c37e:	83 ec 0c             	sub    esp,0xc
c001c381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c385:	83 ec 08             	sub    esp,0x8
c001c388:	68 84 2c 02 c0       	push   0xc0022c84
c001c38d:	50                   	push   eax
c001c38e:	e8 61 06 ff ff       	call   c000c9f4 <HardDiskController::HardDiskController(char const*)>
c001c393:	83 c4 10             	add    esp,0x10
c001c396:	ba b0 2c 02 c0       	mov    edx,0xc0022cb0
c001c39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39f:	89 10                	mov    DWORD PTR [eax],edx
c001c3a1:	83 ec 0c             	sub    esp,0xc
c001c3a4:	6a 50                	push   0x50
c001c3a6:	e8 06 bb fe ff       	call   c0007eb1 <Phys::allocateContiguousPages(int)>
c001c3ab:	83 c4 10             	add    esp,0x10
c001c3ae:	89 c2                	mov    edx,eax
c001c3b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c3ba:	83 ec 0c             	sub    esp,0xc
c001c3bd:	6a 50                	push   0x50
c001c3bf:	e8 31 d2 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	89 c2                	mov    edx,eax
c001c3c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3cd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c3d3:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c3d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3dc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c3e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3e6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c3ec:	83 ec 0c             	sub    esp,0xc
c001c3ef:	6a 03                	push   0x3
c001c3f1:	6a 50                	push   0x50
c001c3f3:	51                   	push   ecx
c001c3f4:	52                   	push   edx
c001c3f5:	50                   	push   eax
c001c3f6:	e8 0d db fe ff       	call   c0009f08 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c3fb:	83 c4 20             	add    esp,0x20
c001c3fe:	90                   	nop
c001c3ff:	83 c4 0c             	add    esp,0xc
c001c402:	c3                   	ret    
c001c403:	90                   	nop

c001c404 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c408:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c40b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c40e:	09 c2                	or     edx,eax
c001c410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c414:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c41a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c41c:	31 c0                	xor    eax,eax
c001c41e:	c1 e9 08             	shr    ecx,0x8
c001c421:	83 e1 0f             	and    ecx,0xf
c001c424:	39 c8                	cmp    eax,ecx
c001c426:	74 0a                	je     c001c432 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c428:	f6 c2 01             	test   dl,0x1
c001c42b:	74 08                	je     c001c435 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c42d:	d1 ea                	shr    edx,1
c001c42f:	40                   	inc    eax
c001c430:	eb f2                	jmp    c001c424 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c432:	83 c8 ff             	or     eax,0xffffffff
c001c435:	c3                   	ret    

c001c436 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c436:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c43a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c43d:	89 c2                	mov    edx,eax
c001c43f:	c1 ea 08             	shr    edx,0x8
c001c442:	83 e2 0f             	and    edx,0xf
c001c445:	4a                   	dec    edx
c001c446:	75 32                	jne    c001c47a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c448:	83 e0 0f             	and    eax,0xf
c001c44b:	83 f8 03             	cmp    eax,0x3
c001c44e:	75 2a                	jne    c001c47a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c450:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c453:	b8 02 00 00 00       	mov    eax,0x2
c001c458:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c45e:	74 1c                	je     c001c47c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c460:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c466:	b8 04 00 00 00       	mov    eax,0x4
c001c46b:	74 0f                	je     c001c47c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c46d:	31 c0                	xor    eax,eax
c001c46f:	83 fa 03             	cmp    edx,0x3
c001c472:	0f 94 c0             	sete   al
c001c475:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c479:	c3                   	ret    
c001c47a:	31 c0                	xor    eax,eax
c001c47c:	c3                   	ret    
c001c47d:	90                   	nop

c001c47e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c47e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c482:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c485:	0f ba e2 0f          	bt     edx,0xf
c001c489:	72 f7                	jb     c001c482 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c48b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c48e:	83 ca 10             	or     edx,0x10
c001c491:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c494:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c497:	83 ca 01             	or     edx,0x1
c001c49a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c49d:	c3                   	ret    

c001c49e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c49e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4a5:	83 e2 fe             	and    edx,0xfffffffe
c001c4a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4ab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4ae:	83 e2 ef             	and    edx,0xffffffef
c001c4b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4b7:	0f ba e2 0e          	bt     edx,0xe
c001c4bb:	72 f7                	jb     c001c4b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c4bd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4c0:	0f ba e2 0f          	bt     edx,0xf
c001c4c4:	72 ee                	jb     c001c4b4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c4c6:	c3                   	ret    
c001c4c7:	90                   	nop

c001c4c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c4c8:	55                   	push   ebp
c001c4c9:	57                   	push   edi
c001c4ca:	56                   	push   esi
c001c4cb:	53                   	push   ebx
c001c4cc:	83 ec 1c             	sub    esp,0x1c
c001c4cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c4d3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c4d7:	53                   	push   ebx
c001c4d8:	57                   	push   edi
c001c4d9:	e8 c0 ff ff ff       	call   c001c49e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c4de:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c4e2:	83 ec 0c             	sub    esp,0xc
c001c4e5:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c4eb:	c1 e5 0a             	shl    ebp,0xa
c001c4ee:	01 e8                	add    eax,ebp
c001c4f0:	89 03                	mov    DWORD PTR [ebx],eax
c001c4f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4f4:	68 00 04 00 00       	push   0x400
c001c4f9:	6a 00                	push   0x0
c001c4fb:	50                   	push   eax
c001c4fc:	e8 ef 3f fe ff       	call   c00004f0 <memset>
c001c501:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c507:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001c50b:	83 c4 1c             	add    esp,0x1c
c001c50e:	01 e8                	add    eax,ebp
c001c510:	89 03                	mov    DWORD PTR [ebx],eax
c001c512:	c1 e6 08             	shl    esi,0x8
c001c515:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c51c:	81 c6 00 80 00 00    	add    esi,0x8000
c001c522:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c528:	01 f0                	add    eax,esi
c001c52a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c52d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c530:	68 00 01 00 00       	push   0x100
c001c535:	6a 00                	push   0x0
c001c537:	50                   	push   eax
c001c538:	e8 b3 3f fe ff       	call   c00004f0 <memset>
c001c53d:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c543:	31 d2                	xor    edx,edx
c001c545:	01 f0                	add    eax,esi
c001c547:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c54a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c551:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c001c557:	01 ee                	add    esi,ebp
c001c559:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c55d:	83 c4 10             	add    esp,0x10
c001c560:	c1 e5 0d             	shl    ebp,0xd
c001c563:	81 c5 00 a0 00 00    	add    ebp,0xa000
c001c569:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c001c56f:	83 c6 20             	add    esi,0x20
c001c572:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c576:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c001c57c:	01 e8                	add    eax,ebp
c001c57e:	01 d0                	add    eax,edx
c001c580:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c583:	52                   	push   edx
c001c584:	68 00 01 00 00       	push   0x100
c001c589:	6a 00                	push   0x0
c001c58b:	50                   	push   eax
c001c58c:	e8 5f 3f fe ff       	call   c00004f0 <memset>
c001c591:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c001c597:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c001c59e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5a2:	83 c4 10             	add    esp,0x10
c001c5a5:	01 e8                	add    eax,ebp
c001c5a7:	01 d0                	add    eax,edx
c001c5a9:	81 c2 00 01 00 00    	add    edx,0x100
c001c5af:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c001c5b2:	81 fa 00 20 00 00    	cmp    edx,0x2000
c001c5b8:	75 af                	jne    c001c569 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c001c5ba:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c5c1:	50                   	push   eax
c001c5c2:	50                   	push   eax
c001c5c3:	53                   	push   ebx
c001c5c4:	57                   	push   edi
c001c5c5:	e8 b4 fe ff ff       	call   c001c47e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c5ca:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c5d1:	83 c4 2c             	add    esp,0x2c
c001c5d4:	5b                   	pop    ebx
c001c5d5:	5e                   	pop    esi
c001c5d6:	5f                   	pop    edi
c001c5d7:	5d                   	pop    ebp
c001c5d8:	c3                   	ret    
c001c5d9:	90                   	nop

c001c5da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c5da:	55                   	push   ebp
c001c5db:	57                   	push   edi
c001c5dc:	56                   	push   esi
c001c5dd:	53                   	push   ebx
c001c5de:	31 db                	xor    ebx,ebx
c001c5e0:	83 ec 0c             	sub    esp,0xc
c001c5e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5e7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c5eb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c5ee:	f7 c7 01 00 00 00    	test   edi,0x1
c001c5f4:	74 7a                	je     c001c670 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c5fa:	89 d8                	mov    eax,ebx
c001c5fc:	c1 e0 07             	shl    eax,0x7
c001c5ff:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c606:	55                   	push   ebp
c001c607:	56                   	push   esi
c001c608:	e8 29 fe ff ff       	call   c001c436 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c60d:	5a                   	pop    edx
c001c60e:	59                   	pop    ecx
c001c60f:	83 f8 01             	cmp    eax,0x1
c001c612:	75 21                	jne    c001c635 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c614:	50                   	push   eax
c001c615:	53                   	push   ebx
c001c616:	55                   	push   ebp
c001c617:	56                   	push   esi
c001c618:	e8 ab fe ff ff       	call   c001c4c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c61d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c624:	e8 aa b4 fe ff       	call   c0007ad3 <malloc>
c001c629:	89 04 24             	mov    DWORD PTR [esp],eax
c001c62c:	89 c5                	mov    ebp,eax
c001c62e:	e8 c1 10 00 00       	call   c001d6f4 <SATA::SATA()>
c001c633:	eb 24                	jmp    c001c659 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c635:	83 f8 04             	cmp    eax,0x4
c001c638:	75 36                	jne    c001c670 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c63a:	51                   	push   ecx
c001c63b:	53                   	push   ebx
c001c63c:	55                   	push   ebp
c001c63d:	56                   	push   esi
c001c63e:	e8 85 fe ff ff       	call   c001c4c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c643:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c64a:	e8 84 b4 fe ff       	call   c0007ad3 <malloc>
c001c64f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c652:	89 c5                	mov    ebp,eax
c001c654:	e8 f5 17 00 00       	call   c001de4e <SATAPI::SATAPI()>
c001c659:	58                   	pop    eax
c001c65a:	5a                   	pop    edx
c001c65b:	55                   	push   ebp
c001c65c:	56                   	push   esi
c001c65d:	e8 4e 00 ff ff       	call   c000c6b0 <Device::addChild(Device*)>
c001c662:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c665:	56                   	push   esi
c001c666:	6a 00                	push   0x0
c001c668:	53                   	push   ebx
c001c669:	55                   	push   ebp
c001c66a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c66d:	83 c4 20             	add    esp,0x20
c001c670:	d1 ef                	shr    edi,1
c001c672:	43                   	inc    ebx
c001c673:	83 fb 20             	cmp    ebx,0x20
c001c676:	0f 85 72 ff ff ff    	jne    c001c5ee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c67c:	83 c4 0c             	add    esp,0xc
c001c67f:	5b                   	pop    ebx
c001c680:	5e                   	pop    esi
c001c681:	5f                   	pop    edi
c001c682:	5d                   	pop    ebp
c001c683:	c3                   	ret    

c001c684 <SATABus::open(int, int, void*)>:
c001c684:	83 ec 14             	sub    esp,0x14
c001c687:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c68b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c691:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c697:	52                   	push   edx
c001c698:	50                   	push   eax
c001c699:	e8 3c ff ff ff       	call   c001c5da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c69e:	31 c0                	xor    eax,eax
c001c6a0:	83 c4 1c             	add    esp,0x1c
c001c6a3:	c3                   	ret    

c001c6a4 <ATA::close(int, int, void*)>:
c001c6a4:	83 ec 0c             	sub    esp,0xc
c001c6a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ab:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6b1:	85 c0                	test   eax,eax
c001c6b3:	74 0c                	je     c001c6c1 <ATA::close(int, int, void*)+0x1d>
c001c6b5:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6b7:	83 ec 0c             	sub    esp,0xc
c001c6ba:	50                   	push   eax
c001c6bb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	31 c0                	xor    eax,eax
c001c6c3:	83 c4 0c             	add    esp,0xc
c001c6c6:	c3                   	ret    
c001c6c7:	90                   	nop

c001c6c8 <ATA::powerSaving(PowerSavingLevel)>:
c001c6c8:	c3                   	ret    
c001c6c9:	90                   	nop

c001c6ca <ATA::ATA()>:
c001c6ca:	83 ec 0c             	sub    esp,0xc
c001c6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d1:	83 ec 04             	sub    esp,0x4
c001c6d4:	68 00 02 00 00       	push   0x200
c001c6d9:	68 7d 2d 02 c0       	push   0xc0022d7d
c001c6de:	50                   	push   eax
c001c6df:	e8 9a 03 ff ff       	call   c000ca7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c6e4:	83 c4 10             	add    esp,0x10
c001c6e7:	ba f0 2c 02 c0       	mov    edx,0xc0022cf0
c001c6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f0:	89 10                	mov    DWORD PTR [eax],edx
c001c6f2:	90                   	nop
c001c6f3:	83 c4 0c             	add    esp,0xc
c001c6f6:	c3                   	ret    
c001c6f7:	90                   	nop

c001c6f8 <ATA::flush(bool)>:
c001c6f8:	53                   	push   ebx
c001c6f9:	83 ec 08             	sub    esp,0x8
c001c6fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c701:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c705:	83 f8 01             	cmp    eax,0x1
c001c708:	19 c0                	sbb    eax,eax
c001c70a:	83 e0 fd             	and    eax,0xfffffffd
c001c70d:	05 ea 00 00 00       	add    eax,0xea
c001c712:	50                   	push   eax
c001c713:	6a 07                	push   0x7
c001c715:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c71c:	50                   	push   eax
c001c71d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c723:	e8 18 f1 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c728:	83 c4 0c             	add    esp,0xc
c001c72b:	6a 00                	push   0x0
c001c72d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c734:	50                   	push   eax
c001c735:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c73b:	e8 e4 fb ff ff       	call   c001c324 <IDE::polling(unsigned char, unsigned int)>
c001c740:	83 c4 18             	add    esp,0x18
c001c743:	5b                   	pop    ebx
c001c744:	c3                   	ret    
c001c745:	90                   	nop

c001c746 <ATA::readyForCommand()>:
c001c746:	56                   	push   esi
c001c747:	53                   	push   ebx
c001c748:	53                   	push   ebx
c001c749:	31 db                	xor    ebx,ebx
c001c74b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c74f:	51                   	push   ecx
c001c750:	6a 0c                	push   0xc
c001c752:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c759:	50                   	push   eax
c001c75a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c760:	e8 9b f1 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001c765:	83 c4 10             	add    esp,0x10
c001c768:	a8 88                	test   al,0x88
c001c76a:	74 1f                	je     c001c78b <ATA::readyForCommand()+0x45>
c001c76c:	43                   	inc    ebx
c001c76d:	83 fb 63             	cmp    ebx,0x63
c001c770:	7e dd                	jle    c001c74f <ATA::readyForCommand()+0x9>
c001c772:	83 ec 0c             	sub    esp,0xc
c001c775:	6a 0a                	push   0xa
c001c777:	e8 f0 96 ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c785:	75 c8                	jne    c001c74f <ATA::readyForCommand()+0x9>
c001c787:	31 c0                	xor    eax,eax
c001c789:	eb 02                	jmp    c001c78d <ATA::readyForCommand()+0x47>
c001c78b:	b0 01                	mov    al,0x1
c001c78d:	5a                   	pop    edx
c001c78e:	5b                   	pop    ebx
c001c78f:	5e                   	pop    esi
c001c790:	c3                   	ret    
c001c791:	90                   	nop

c001c792 <ATA::access(unsigned long long, int, void*, bool)>:
c001c792:	55                   	push   ebp
c001c793:	57                   	push   edi
c001c794:	56                   	push   esi
c001c795:	53                   	push   ebx
c001c796:	83 ec 2c             	sub    esp,0x2c
c001c799:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c79d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c7a1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c7a5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c7a9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7ad:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7b1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001c7b5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c7bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7bf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c7c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c7c9:	c1 e0 06             	shl    eax,0x6
c001c7cc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c7d4:	74 5b                	je     c001c831 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001c7d6:	89 fa                	mov    edx,edi
c001c7d8:	89 f0                	mov    eax,esi
c001c7da:	c1 ea 1c             	shr    edx,0x1c
c001c7dd:	0f ac f8 1c          	shrd   eax,edi,0x1c
c001c7e1:	89 d1                	mov    ecx,edx
c001c7e3:	09 c1                	or     ecx,eax
c001c7e5:	74 25                	je     c001c80c <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c7e7:	31 ed                	xor    ebp,ebp
c001c7e9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c7f0:	89 fa                	mov    edx,edi
c001c7f2:	89 f0                	mov    eax,esi
c001c7f4:	0f ad d0             	shrd   eax,edx,cl
c001c7f7:	d3 ea                	shr    edx,cl
c001c7f9:	f6 c1 20             	test   cl,0x20
c001c7fc:	74 02                	je     c001c800 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c7fe:	89 d0                	mov    eax,edx
c001c800:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c804:	45                   	inc    ebp
c001c805:	83 fd 06             	cmp    ebp,0x6
c001c808:	75 df                	jne    c001c7e9 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c80a:	eb 71                	jmp    c001c87d <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001c80c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c811:	89 f0                	mov    eax,esi
c001c813:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c81a:	0f ac f8 10          	shrd   eax,edi,0x10
c001c81e:	bf 01 00 00 00       	mov    edi,0x1
c001c823:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c827:	c1 ee 18             	shr    esi,0x18
c001c82a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c82f:	eb 53                	jmp    c001c884 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c831:	6a 00                	push   0x0
c001c833:	6a 3f                	push   0x3f
c001c835:	57                   	push   edi
c001c836:	56                   	push   esi
c001c837:	e8 d4 2a 00 00       	call   c001f310 <__umoddi3>
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	40                   	inc    eax
c001c840:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c844:	6a 00                	push   0x0
c001c846:	68 f0 03 00 00       	push   0x3f0
c001c84b:	57                   	push   edi
c001c84c:	56                   	push   esi
c001c84d:	e8 be 29 00 00       	call   c001f210 <__udivdi3>
c001c852:	83 c4 10             	add    esp,0x10
c001c855:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c85a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c861:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c866:	6a 00                	push   0x0
c001c868:	6a 3f                	push   0x3f
c001c86a:	57                   	push   edi
c001c86b:	31 ff                	xor    edi,edi
c001c86d:	56                   	push   esi
c001c86e:	e8 9d 29 00 00       	call   c001f210 <__udivdi3>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	83 e0 0f             	and    eax,0xf
c001c879:	89 c6                	mov    esi,eax
c001c87b:	eb 07                	jmp    c001c884 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001c87d:	31 f6                	xor    esi,esi
c001c87f:	bf 02 00 00 00       	mov    edi,0x2
c001c884:	50                   	push   eax
c001c885:	6a 00                	push   0x0
c001c887:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c88e:	50                   	push   eax
c001c88f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c893:	e8 b6 f1 ff ff       	call   c001ba4e <IDE::enableIRQs(unsigned char, bool)>
c001c898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c89b:	e8 a6 fe ff ff       	call   c001c746 <ATA::readyForCommand()>
c001c8a0:	83 c4 10             	add    esp,0x10
c001c8a3:	84 c0                	test   al,al
c001c8a5:	75 0a                	jne    c001c8b1 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001c8a7:	be 01 00 00 00       	mov    esi,0x1
c001c8ac:	e9 9b 02 00 00       	jmp    c001cb4c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001c8b1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c8b7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c8bd:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c8c4:	c1 e0 04             	shl    eax,0x4
c001c8c7:	09 c6                	or     esi,eax
c001c8c9:	f7 c7 03 00 00 00    	test   edi,0x3
c001c8cf:	75 05                	jne    c001c8d6 <ATA::access(unsigned long long, int, void*, bool)+0x144>
c001c8d1:	83 ce a0             	or     esi,0xffffffa0
c001c8d4:	eb 03                	jmp    c001c8d9 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c8d6:	83 ce e0             	or     esi,0xffffffe0
c001c8d9:	89 f0                	mov    eax,esi
c001c8db:	0f b6 f0             	movzx  esi,al
c001c8de:	56                   	push   esi
c001c8df:	6a 06                	push   0x6
c001c8e1:	51                   	push   ecx
c001c8e2:	52                   	push   edx
c001c8e3:	e8 58 ef ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	6a 00                	push   0x0
c001c8ed:	6a 01                	push   0x1
c001c8ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8f6:	50                   	push   eax
c001c8f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8fd:	e8 3e ef ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c902:	89 f8                	mov    eax,edi
c001c904:	83 c4 10             	add    esp,0x10
c001c907:	0f b6 f0             	movzx  esi,al
c001c90a:	83 fe 02             	cmp    esi,0x2
c001c90d:	75 6e                	jne    c001c97d <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c90f:	6a 00                	push   0x0
c001c911:	6a 08                	push   0x8
c001c913:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c91a:	50                   	push   eax
c001c91b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c921:	e8 1a ef ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c926:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c92b:	50                   	push   eax
c001c92c:	6a 09                	push   0x9
c001c92e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c935:	50                   	push   eax
c001c936:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c93c:	e8 ff ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c941:	83 c4 20             	add    esp,0x20
c001c944:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c949:	50                   	push   eax
c001c94a:	6a 0a                	push   0xa
c001c94c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c953:	50                   	push   eax
c001c954:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c95a:	e8 e1 ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c95f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c964:	50                   	push   eax
c001c965:	6a 0b                	push   0xb
c001c967:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c96e:	50                   	push   eax
c001c96f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c975:	e8 c6 ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97a:	83 c4 20             	add    esp,0x20
c001c97d:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c982:	50                   	push   eax
c001c983:	6a 02                	push   0x2
c001c985:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98c:	50                   	push   eax
c001c98d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c993:	e8 a8 ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c998:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c99d:	50                   	push   eax
c001c99e:	6a 03                	push   0x3
c001c9a0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9a7:	50                   	push   eax
c001c9a8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ae:	e8 8d ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b3:	83 c4 20             	add    esp,0x20
c001c9b6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c9bb:	50                   	push   eax
c001c9bc:	6a 04                	push   0x4
c001c9be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9c5:	50                   	push   eax
c001c9c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9cc:	e8 6f ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c9d6:	50                   	push   eax
c001c9d7:	6a 05                	push   0x5
c001c9d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e0:	50                   	push   eax
c001c9e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9e7:	e8 54 ee ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ec:	83 c4 20             	add    esp,0x20
c001c9ef:	83 fe 02             	cmp    esi,0x2
c001c9f2:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c001c9f7:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001c9fc:	85 c9                	test   ecx,ecx
c001c9fe:	74 07                	je     c001ca07 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001ca00:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca05:	75 47                	jne    c001ca4e <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c001ca07:	89 f8                	mov    eax,edi
c001ca09:	0f b6 f8             	movzx  edi,al
c001ca0c:	31 c0                	xor    eax,eax
c001ca0e:	83 ff 02             	cmp    edi,0x2
c001ca11:	0f 95 c0             	setne  al
c001ca14:	89 c6                	mov    esi,eax
c001ca16:	74 0c                	je     c001ca24 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001ca18:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca1d:	b8 30 00 00 00       	mov    eax,0x30
c001ca22:	75 2f                	jne    c001ca53 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ca24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca28:	83 f2 01             	xor    edx,0x1
c001ca2b:	85 c9                	test   ecx,ecx
c001ca2d:	74 09                	je     c001ca38 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001ca2f:	84 d2                	test   dl,dl
c001ca31:	b8 24 00 00 00       	mov    eax,0x24
c001ca36:	75 1b                	jne    c001ca53 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ca38:	85 f6                	test   esi,esi
c001ca3a:	0f 84 67 fe ff ff    	je     c001c8a7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ca40:	84 d2                	test   dl,dl
c001ca42:	b8 20 00 00 00       	mov    eax,0x20
c001ca47:	75 0a                	jne    c001ca53 <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c001ca49:	e9 59 fe ff ff       	jmp    c001c8a7 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001ca4e:	b8 34 00 00 00       	mov    eax,0x34
c001ca53:	50                   	push   eax
c001ca54:	6a 07                	push   0x7
c001ca56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5d:	50                   	push   eax
c001ca5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca64:	e8 d7 ed ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca69:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ca6d:	83 c4 10             	add    esp,0x10
c001ca70:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c001ca75:	85 f6                	test   esi,esi
c001ca77:	0f 84 b5 00 00 00    	je     c001cb32 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001ca7d:	50                   	push   eax
c001ca7e:	6a 01                	push   0x1
c001ca80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca87:	50                   	push   eax
c001ca88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca8e:	e8 91 f8 ff ff       	call   c001c324 <IDE::polling(unsigned char, unsigned int)>
c001ca93:	83 c4 10             	add    esp,0x10
c001ca96:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca9c:	0f b6 c0             	movzx  eax,al
c001ca9f:	85 c0                	test   eax,eax
c001caa1:	74 1f                	je     c001cac2 <ATA::access(unsigned long long, int, void*, bool)+0x330>
c001caa3:	50                   	push   eax
c001caa4:	89 c6                	mov    esi,eax
c001caa6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001caad:	0f b6 d2             	movzx  edx,dl
c001cab0:	50                   	push   eax
c001cab1:	52                   	push   edx
c001cab2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab8:	e8 ad f7 ff ff       	call   c001c26a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cabd:	e9 87 00 00 00       	jmp    c001cb49 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c001cac2:	85 ed                	test   ebp,ebp
c001cac4:	74 3b                	je     c001cb01 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001cac6:	31 ff                	xor    edi,edi
c001cac8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cacc:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c001cad0:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001cad5:	50                   	push   eax
c001cad6:	50                   	push   eax
c001cad7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cade:	50                   	push   eax
c001cadf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cae5:	e8 44 ed ff ff       	call   c001b82e <IDE::getBase(unsigned char)>
c001caea:	89 c2                	mov    edx,eax
c001caec:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001caf1:	66 ef                	out    dx,ax
c001caf3:	47                   	inc    edi
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	81 ff 00 01 00 00    	cmp    edi,0x100
c001cafd:	75 c9                	jne    c001cac8 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001caff:	eb 23                	jmp    c001cb24 <ATA::access(unsigned long long, int, void*, bool)+0x392>
c001cb01:	51                   	push   ecx
c001cb02:	0f b6 d2             	movzx  edx,dl
c001cb05:	51                   	push   ecx
c001cb06:	52                   	push   edx
c001cb07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb0d:	e8 1c ed ff ff       	call   c001b82e <IDE::getBase(unsigned char)>
c001cb12:	b9 00 01 00 00       	mov    ecx,0x100
c001cb17:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb1b:	89 c2                	mov    edx,eax
c001cb1d:	fc                   	cld    
c001cb1e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb21:	83 c4 10             	add    esp,0x10
c001cb24:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cb2c:	4e                   	dec    esi
c001cb2d:	e9 43 ff ff ff       	jmp    c001ca75 <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c001cb32:	31 f6                	xor    esi,esi
c001cb34:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb39:	74 11                	je     c001cb4c <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c001cb3b:	50                   	push   eax
c001cb3c:	50                   	push   eax
c001cb3d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001cb42:	50                   	push   eax
c001cb43:	53                   	push   ebx
c001cb44:	e8 af fb ff ff       	call   c001c6f8 <ATA::flush(bool)>
c001cb49:	83 c4 10             	add    esp,0x10
c001cb4c:	83 c4 2c             	add    esp,0x2c
c001cb4f:	89 f0                	mov    eax,esi
c001cb51:	5b                   	pop    ebx
c001cb52:	5e                   	pop    esi
c001cb53:	5f                   	pop    edi
c001cb54:	5d                   	pop    ebp
c001cb55:	c3                   	ret    

c001cb56 <ATA::detectCHS()>:
c001cb56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb5a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cb60:	c1 e0 06             	shl    eax,0x6
c001cb63:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cb69:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cb73:	c7 44 24 04 d4 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022cd4
c001cb7b:	e9 cd 46 ff ff       	jmp    c001124d <KePanic(char const*)>

c001cb80 <ATA::open(int, int, void*)>:
c001cb80:	53                   	push   ebx
c001cb81:	83 ec 08             	sub    esp,0x8
c001cb84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb96:	c1 e0 06             	shl    eax,0x6
c001cb99:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cb9f:	01 d0                	add    eax,edx
c001cba1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cba8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cbae:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cbb5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cbbf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cbc6:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cbcc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cbd3:	75 0c                	jne    c001cbe1 <ATA::open(int, int, void*)+0x61>
c001cbd5:	83 ec 0c             	sub    esp,0xc
c001cbd8:	53                   	push   ebx
c001cbd9:	e8 78 ff ff ff       	call   c001cb56 <ATA::detectCHS()>
c001cbde:	83 c4 10             	add    esp,0x10
c001cbe1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cbe7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cbed:	c1 e0 06             	shl    eax,0x6
c001cbf0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cbf7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc01:	d1 e8                	shr    eax,1
c001cc03:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cc09:	6a 04                	push   0x4
c001cc0b:	6a 0c                	push   0xc
c001cc0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc14:	50                   	push   eax
c001cc15:	52                   	push   edx
c001cc16:	e8 25 ec ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc1b:	90                   	nop
c001cc1c:	90                   	nop
c001cc1d:	6a 00                	push   0x0
c001cc1f:	6a 0c                	push   0xc
c001cc21:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc28:	50                   	push   eax
c001cc29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc2f:	e8 0c ec ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc34:	83 c4 14             	add    esp,0x14
c001cc37:	53                   	push   ebx
c001cc38:	e8 a9 fe fe ff       	call   c000cae6 <PhysicalDisk::startCache()>
c001cc3d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc40:	e8 ed 10 ff ff       	call   c000dd32 <createPartitionsForDisk(PhysicalDisk*)>
c001cc45:	83 c4 18             	add    esp,0x18
c001cc48:	31 c0                	xor    eax,eax
c001cc4a:	5b                   	pop    ebx
c001cc4b:	c3                   	ret    

c001cc4c <combineCharAndColour(char, unsigned char)>:
c001cc4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc51:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cc57:	c1 e0 08             	shl    eax,0x8
c001cc5a:	09 d0                	or     eax,edx
c001cc5c:	c3                   	ret    

c001cc5d <combineColours(unsigned char, unsigned char)>:
c001cc5d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc62:	c1 e0 04             	shl    eax,0x4
c001cc65:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cc69:	c3                   	ret    

c001cc6a <ATA::read(unsigned long long, int, void*)>:
c001cc6a:	55                   	push   ebp
c001cc6b:	57                   	push   edi
c001cc6c:	56                   	push   esi
c001cc6d:	be 04 00 00 00       	mov    esi,0x4
c001cc72:	53                   	push   ebx
c001cc73:	83 ec 0c             	sub    esp,0xc
c001cc76:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc82:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cc86:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cc89:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cc8f:	0f 87 a1 01 00 00    	ja     c001ce36 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc95:	85 c9                	test   ecx,ecx
c001cc97:	be 06 00 00 00       	mov    esi,0x6
c001cc9c:	0f 84 94 01 00 00    	je     c001ce36 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cca2:	55                   	push   ebp
c001cca3:	55                   	push   ebp
c001cca4:	6a 00                	push   0x0
c001cca6:	51                   	push   ecx
c001cca7:	53                   	push   ebx
c001cca8:	52                   	push   edx
c001cca9:	50                   	push   eax
c001ccaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccae:	e8 df fa ff ff       	call   c001c792 <ATA::access(unsigned long long, int, void*, bool)>
c001ccb3:	83 c4 20             	add    esp,0x20
c001ccb6:	85 c0                	test   eax,eax
c001ccb8:	89 c6                	mov    esi,eax
c001ccba:	0f 85 71 01 00 00    	jne    c001ce31 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ccc0:	50                   	push   eax
c001ccc1:	bd 10 27 00 00       	mov    ebp,0x2710
c001ccc6:	50                   	push   eax
c001ccc7:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cccd:	6a 0f                	push   0xf
c001cccf:	6a 00                	push   0x0
c001ccd1:	89 da                	mov    edx,ebx
c001ccd3:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001ccd9:	e8 7f ff ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001ccde:	59                   	pop    ecx
c001ccdf:	b9 0a 00 00 00       	mov    ecx,0xa
c001cce4:	5b                   	pop    ebx
c001cce5:	0f b6 d8             	movzx  ebx,al
c001cce8:	89 d0                	mov    eax,edx
c001ccea:	53                   	push   ebx
c001cceb:	99                   	cdq    
c001ccec:	f7 fd                	idiv   ebp
c001ccee:	99                   	cdq    
c001ccef:	f7 f9                	idiv   ecx
c001ccf1:	83 c2 30             	add    edx,0x30
c001ccf4:	0f b6 d2             	movzx  edx,dl
c001ccf7:	52                   	push   edx
c001ccf8:	e8 4f ff ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001ccfd:	5f                   	pop    edi
c001ccfe:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd03:	5a                   	pop    edx
c001cd04:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd0a:	53                   	push   ebx
c001cd0b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd10:	99                   	cdq    
c001cd11:	f7 ff                	idiv   edi
c001cd13:	99                   	cdq    
c001cd14:	f7 f9                	idiv   ecx
c001cd16:	8d 42 30             	lea    eax,[edx+0x30]
c001cd19:	0f b6 c0             	movzx  eax,al
c001cd1c:	50                   	push   eax
c001cd1d:	e8 2a ff ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cd22:	5f                   	pop    edi
c001cd23:	bf 64 00 00 00       	mov    edi,0x64
c001cd28:	5a                   	pop    edx
c001cd29:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd2f:	53                   	push   ebx
c001cd30:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd35:	99                   	cdq    
c001cd36:	f7 ff                	idiv   edi
c001cd38:	99                   	cdq    
c001cd39:	f7 f9                	idiv   ecx
c001cd3b:	8d 42 30             	lea    eax,[edx+0x30]
c001cd3e:	0f b6 c0             	movzx  eax,al
c001cd41:	50                   	push   eax
c001cd42:	e8 05 ff ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cd47:	5a                   	pop    edx
c001cd48:	5a                   	pop    edx
c001cd49:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cd4f:	53                   	push   ebx
c001cd50:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd55:	99                   	cdq    
c001cd56:	f7 f9                	idiv   ecx
c001cd58:	99                   	cdq    
c001cd59:	f7 f9                	idiv   ecx
c001cd5b:	8d 42 30             	lea    eax,[edx+0x30]
c001cd5e:	0f b6 c0             	movzx  eax,al
c001cd61:	50                   	push   eax
c001cd62:	e8 e5 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cd67:	5a                   	pop    edx
c001cd68:	5a                   	pop    edx
c001cd69:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cd6f:	53                   	push   ebx
c001cd70:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd75:	99                   	cdq    
c001cd76:	f7 f9                	idiv   ecx
c001cd78:	83 c2 30             	add    edx,0x30
c001cd7b:	0f b6 d2             	movzx  edx,dl
c001cd7e:	52                   	push   edx
c001cd7f:	e8 c8 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cd84:	5a                   	pop    edx
c001cd85:	5a                   	pop    edx
c001cd86:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cd8c:	53                   	push   ebx
c001cd8d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd92:	99                   	cdq    
c001cd93:	f7 fd                	idiv   ebp
c001cd95:	99                   	cdq    
c001cd96:	f7 f9                	idiv   ecx
c001cd98:	8d 42 30             	lea    eax,[edx+0x30]
c001cd9b:	0f b6 c0             	movzx  eax,al
c001cd9e:	50                   	push   eax
c001cd9f:	e8 a8 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cda4:	5d                   	pop    ebp
c001cda5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdaa:	5a                   	pop    edx
c001cdab:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cdb1:	53                   	push   ebx
c001cdb2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdb7:	99                   	cdq    
c001cdb8:	f7 fd                	idiv   ebp
c001cdba:	99                   	cdq    
c001cdbb:	f7 f9                	idiv   ecx
c001cdbd:	8d 42 30             	lea    eax,[edx+0x30]
c001cdc0:	0f b6 c0             	movzx  eax,al
c001cdc3:	50                   	push   eax
c001cdc4:	e8 83 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cdc9:	5d                   	pop    ebp
c001cdca:	5a                   	pop    edx
c001cdcb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cdd1:	53                   	push   ebx
c001cdd2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdd7:	99                   	cdq    
c001cdd8:	f7 ff                	idiv   edi
c001cdda:	99                   	cdq    
c001cddb:	f7 f9                	idiv   ecx
c001cddd:	8d 42 30             	lea    eax,[edx+0x30]
c001cde0:	0f b6 c0             	movzx  eax,al
c001cde3:	50                   	push   eax
c001cde4:	e8 63 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cde9:	5f                   	pop    edi
c001cdea:	5d                   	pop    ebp
c001cdeb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cdf1:	53                   	push   ebx
c001cdf2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdf7:	99                   	cdq    
c001cdf8:	f7 f9                	idiv   ecx
c001cdfa:	99                   	cdq    
c001cdfb:	f7 f9                	idiv   ecx
c001cdfd:	8d 42 30             	lea    eax,[edx+0x30]
c001ce00:	0f b6 c0             	movzx  eax,al
c001ce03:	50                   	push   eax
c001ce04:	e8 43 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001ce09:	5a                   	pop    edx
c001ce0a:	5f                   	pop    edi
c001ce0b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ce11:	53                   	push   ebx
c001ce12:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce17:	99                   	cdq    
c001ce18:	f7 f9                	idiv   ecx
c001ce1a:	83 c2 30             	add    edx,0x30
c001ce1d:	0f b6 d2             	movzx  edx,dl
c001ce20:	52                   	push   edx
c001ce21:	e8 26 fe ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001ce26:	83 c4 10             	add    esp,0x10
c001ce29:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ce2f:	eb 05                	jmp    c001ce36 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce31:	be 01 00 00 00       	mov    esi,0x1
c001ce36:	83 c4 0c             	add    esp,0xc
c001ce39:	89 f0                	mov    eax,esi
c001ce3b:	5b                   	pop    ebx
c001ce3c:	5e                   	pop    esi
c001ce3d:	5f                   	pop    edi
c001ce3e:	5d                   	pop    ebp
c001ce3f:	c3                   	ret    

c001ce40 <ATA::write(unsigned long long, int, void*)>:
c001ce40:	55                   	push   ebp
c001ce41:	57                   	push   edi
c001ce42:	56                   	push   esi
c001ce43:	be 04 00 00 00       	mov    esi,0x4
c001ce48:	53                   	push   ebx
c001ce49:	83 ec 0c             	sub    esp,0xc
c001ce4c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ce50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce54:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce58:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce5c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ce5f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ce65:	0f 87 9c 01 00 00    	ja     c001d007 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce6b:	85 c9                	test   ecx,ecx
c001ce6d:	be 06 00 00 00       	mov    esi,0x6
c001ce72:	0f 84 8f 01 00 00    	je     c001d007 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce78:	55                   	push   ebp
c001ce79:	55                   	push   ebp
c001ce7a:	6a 01                	push   0x1
c001ce7c:	51                   	push   ecx
c001ce7d:	53                   	push   ebx
c001ce7e:	52                   	push   edx
c001ce7f:	50                   	push   eax
c001ce80:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce84:	e8 09 f9 ff ff       	call   c001c792 <ATA::access(unsigned long long, int, void*, bool)>
c001ce89:	83 c4 20             	add    esp,0x20
c001ce8c:	85 c0                	test   eax,eax
c001ce8e:	89 c6                	mov    esi,eax
c001ce90:	0f 85 6c 01 00 00    	jne    c001d002 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ce96:	50                   	push   eax
c001ce97:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce9c:	50                   	push   eax
c001ce9d:	6a 0f                	push   0xf
c001ce9f:	6a 00                	push   0x0
c001cea1:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001cea7:	e8 b1 fd ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001ceac:	5a                   	pop    edx
c001cead:	59                   	pop    ecx
c001ceae:	b9 0a 00 00 00       	mov    ecx,0xa
c001ceb3:	0f b6 d8             	movzx  ebx,al
c001ceb6:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cebb:	53                   	push   ebx
c001cebc:	99                   	cdq    
c001cebd:	f7 fd                	idiv   ebp
c001cebf:	99                   	cdq    
c001cec0:	f7 f9                	idiv   ecx
c001cec2:	8d 42 30             	lea    eax,[edx+0x30]
c001cec5:	0f b6 c0             	movzx  eax,al
c001cec8:	50                   	push   eax
c001cec9:	e8 7e fd ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cece:	5f                   	pop    edi
c001cecf:	bf e8 03 00 00       	mov    edi,0x3e8
c001ced4:	5a                   	pop    edx
c001ced5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cedb:	53                   	push   ebx
c001cedc:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cee1:	99                   	cdq    
c001cee2:	f7 ff                	idiv   edi
c001cee4:	99                   	cdq    
c001cee5:	f7 f9                	idiv   ecx
c001cee7:	8d 42 30             	lea    eax,[edx+0x30]
c001ceea:	0f b6 c0             	movzx  eax,al
c001ceed:	50                   	push   eax
c001ceee:	e8 59 fd ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cef3:	5f                   	pop    edi
c001cef4:	bf 64 00 00 00       	mov    edi,0x64
c001cef9:	5a                   	pop    edx
c001cefa:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf00:	53                   	push   ebx
c001cf01:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf06:	99                   	cdq    
c001cf07:	f7 ff                	idiv   edi
c001cf09:	99                   	cdq    
c001cf0a:	f7 f9                	idiv   ecx
c001cf0c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf0f:	0f b6 c0             	movzx  eax,al
c001cf12:	50                   	push   eax
c001cf13:	e8 34 fd ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cf18:	5a                   	pop    edx
c001cf19:	5a                   	pop    edx
c001cf1a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cf20:	53                   	push   ebx
c001cf21:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf26:	99                   	cdq    
c001cf27:	f7 f9                	idiv   ecx
c001cf29:	99                   	cdq    
c001cf2a:	f7 f9                	idiv   ecx
c001cf2c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf2f:	0f b6 c0             	movzx  eax,al
c001cf32:	50                   	push   eax
c001cf33:	e8 14 fd ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cf38:	5a                   	pop    edx
c001cf39:	5a                   	pop    edx
c001cf3a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf40:	53                   	push   ebx
c001cf41:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf46:	99                   	cdq    
c001cf47:	f7 f9                	idiv   ecx
c001cf49:	83 c2 30             	add    edx,0x30
c001cf4c:	0f b6 d2             	movzx  edx,dl
c001cf4f:	52                   	push   edx
c001cf50:	e8 f7 fc ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cf55:	5a                   	pop    edx
c001cf56:	5a                   	pop    edx
c001cf57:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf5d:	53                   	push   ebx
c001cf5e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf63:	99                   	cdq    
c001cf64:	f7 fd                	idiv   ebp
c001cf66:	99                   	cdq    
c001cf67:	f7 f9                	idiv   ecx
c001cf69:	8d 42 30             	lea    eax,[edx+0x30]
c001cf6c:	0f b6 c0             	movzx  eax,al
c001cf6f:	50                   	push   eax
c001cf70:	e8 d7 fc ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cf75:	5d                   	pop    ebp
c001cf76:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf7b:	5a                   	pop    edx
c001cf7c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf82:	53                   	push   ebx
c001cf83:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf88:	99                   	cdq    
c001cf89:	f7 fd                	idiv   ebp
c001cf8b:	99                   	cdq    
c001cf8c:	f7 f9                	idiv   ecx
c001cf8e:	8d 42 30             	lea    eax,[edx+0x30]
c001cf91:	0f b6 c0             	movzx  eax,al
c001cf94:	50                   	push   eax
c001cf95:	e8 b2 fc ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cf9a:	5d                   	pop    ebp
c001cf9b:	5a                   	pop    edx
c001cf9c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cfa2:	53                   	push   ebx
c001cfa3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfa8:	99                   	cdq    
c001cfa9:	f7 ff                	idiv   edi
c001cfab:	99                   	cdq    
c001cfac:	f7 f9                	idiv   ecx
c001cfae:	8d 42 30             	lea    eax,[edx+0x30]
c001cfb1:	0f b6 c0             	movzx  eax,al
c001cfb4:	50                   	push   eax
c001cfb5:	e8 92 fc ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cfba:	5f                   	pop    edi
c001cfbb:	5d                   	pop    ebp
c001cfbc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfc2:	53                   	push   ebx
c001cfc3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfc8:	99                   	cdq    
c001cfc9:	f7 f9                	idiv   ecx
c001cfcb:	99                   	cdq    
c001cfcc:	f7 f9                	idiv   ecx
c001cfce:	8d 42 30             	lea    eax,[edx+0x30]
c001cfd1:	0f b6 c0             	movzx  eax,al
c001cfd4:	50                   	push   eax
c001cfd5:	e8 72 fc ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cfda:	5a                   	pop    edx
c001cfdb:	5f                   	pop    edi
c001cfdc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cfe2:	53                   	push   ebx
c001cfe3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfe8:	99                   	cdq    
c001cfe9:	f7 f9                	idiv   ecx
c001cfeb:	83 c2 30             	add    edx,0x30
c001cfee:	0f b6 d2             	movzx  edx,dl
c001cff1:	52                   	push   edx
c001cff2:	e8 55 fc ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001cff7:	83 c4 10             	add    esp,0x10
c001cffa:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d000:	eb 05                	jmp    c001d007 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d002:	be 01 00 00 00       	mov    esi,0x1
c001d007:	83 c4 0c             	add    esp,0xc
c001d00a:	89 f0                	mov    eax,esi
c001d00c:	5b                   	pop    ebx
c001d00d:	5e                   	pop    esi
c001d00e:	5f                   	pop    edi
c001d00f:	5d                   	pop    ebp
c001d010:	c3                   	ret    
c001d011:	90                   	nop

c001d012 <ATAPI::write(unsigned long long, int, void*)>:
c001d012:	b8 03 00 00 00       	mov    eax,0x3
c001d017:	c3                   	ret    

c001d018 <ATAPI::close(int, int, void*)>:
c001d018:	83 ec 0c             	sub    esp,0xc
c001d01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d025:	85 c0                	test   eax,eax
c001d027:	74 0c                	je     c001d035 <ATAPI::close(int, int, void*)+0x1d>
c001d029:	8b 10                	mov    edx,DWORD PTR [eax]
c001d02b:	83 ec 0c             	sub    esp,0xc
c001d02e:	50                   	push   eax
c001d02f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d032:	83 c4 10             	add    esp,0x10
c001d035:	31 c0                	xor    eax,eax
c001d037:	83 c4 0c             	add    esp,0xc
c001d03a:	c3                   	ret    
c001d03b:	90                   	nop

c001d03c <ATAPI::ATAPI()>:
c001d03c:	83 ec 0c             	sub    esp,0xc
c001d03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d043:	83 ec 04             	sub    esp,0x4
c001d046:	68 00 08 00 00       	push   0x800
c001d04b:	68 1d 2e 02 c0       	push   0xc0022e1d
c001d050:	50                   	push   eax
c001d051:	e8 28 fa fe ff       	call   c000ca7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d056:	83 c4 10             	add    esp,0x10
c001d059:	ba 38 2d 02 c0       	mov    edx,0xc0022d38
c001d05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d062:	89 10                	mov    DWORD PTR [eax],edx
c001d064:	90                   	nop
c001d065:	83 c4 0c             	add    esp,0xc
c001d068:	c3                   	ret    
c001d069:	90                   	nop

c001d06a <ATAPI::readyForCommand()>:
c001d06a:	56                   	push   esi
c001d06b:	53                   	push   ebx
c001d06c:	53                   	push   ebx
c001d06d:	31 db                	xor    ebx,ebx
c001d06f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d073:	51                   	push   ecx
c001d074:	6a 0c                	push   0xc
c001d076:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d07d:	50                   	push   eax
c001d07e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d084:	e8 77 e8 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001d089:	83 c4 10             	add    esp,0x10
c001d08c:	a8 88                	test   al,0x88
c001d08e:	74 25                	je     c001d0b5 <ATAPI::readyForCommand()+0x4b>
c001d090:	43                   	inc    ebx
c001d091:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d097:	7e da                	jle    c001d073 <ATAPI::readyForCommand()+0x9>
c001d099:	83 ec 0c             	sub    esp,0xc
c001d09c:	68 5e 01 00 00       	push   0x15e
c001d0a1:	e8 c6 8d ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001d0a6:	83 c4 10             	add    esp,0x10
c001d0a9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d0af:	75 c2                	jne    c001d073 <ATAPI::readyForCommand()+0x9>
c001d0b1:	31 c0                	xor    eax,eax
c001d0b3:	eb 02                	jmp    c001d0b7 <ATAPI::readyForCommand()+0x4d>
c001d0b5:	b0 01                	mov    al,0x1
c001d0b7:	5a                   	pop    edx
c001d0b8:	5b                   	pop    ebx
c001d0b9:	5e                   	pop    esi
c001d0ba:	c3                   	ret    
c001d0bb:	90                   	nop

c001d0bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d0bc:	55                   	push   ebp
c001d0bd:	57                   	push   edi
c001d0be:	56                   	push   esi
c001d0bf:	53                   	push   ebx
c001d0c0:	83 ec 20             	sub    esp,0x20
c001d0c3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d0c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d0cb:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d0cf:	6a 01                	push   0x1
c001d0d1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0d8:	50                   	push   eax
c001d0d9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0df:	e8 6a e9 ff ff       	call   c001ba4e <IDE::enableIRQs(unsigned char, bool)>
c001d0e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0eb:	59                   	pop    ecx
c001d0ec:	5e                   	pop    esi
c001d0ed:	50                   	push   eax
c001d0ee:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f4:	e8 21 e7 ff ff       	call   c001b81a <IDE::prepareInterrupt(unsigned char)>
c001d0f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0fc:	e8 69 ff ff ff       	call   c001d06a <ATAPI::readyForCommand()>
c001d101:	83 c4 10             	add    esp,0x10
c001d104:	84 c0                	test   al,al
c001d106:	75 0a                	jne    c001d112 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c001d108:	bb 01 00 00 00       	mov    ebx,0x1
c001d10d:	e9 5f 02 00 00       	jmp    c001d371 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d112:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d118:	c1 e0 04             	shl    eax,0x4
c001d11b:	0f b6 c0             	movzx  eax,al
c001d11e:	50                   	push   eax
c001d11f:	6a 06                	push   0x6
c001d121:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d128:	50                   	push   eax
c001d129:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d12f:	e8 0c e7 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d134:	6a 00                	push   0x0
c001d136:	6a 01                	push   0x1
c001d138:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d13f:	50                   	push   eax
c001d140:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d146:	e8 f5 e6 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d14b:	83 c4 20             	add    esp,0x20
c001d14e:	0f b6 c3             	movzx  eax,bl
c001d151:	50                   	push   eax
c001d152:	0f b6 df             	movzx  ebx,bh
c001d155:	6a 04                	push   0x4
c001d157:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d15e:	50                   	push   eax
c001d15f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d165:	e8 d6 e6 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d16a:	53                   	push   ebx
c001d16b:	6a 05                	push   0x5
c001d16d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d174:	50                   	push   eax
c001d175:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d17b:	e8 c0 e6 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d180:	83 c4 20             	add    esp,0x20
c001d183:	68 a0 00 00 00       	push   0xa0
c001d188:	6a 07                	push   0x7
c001d18a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d191:	50                   	push   eax
c001d192:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d198:	e8 a3 e6 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d19d:	83 c4 0c             	add    esp,0xc
c001d1a0:	6a 01                	push   0x1
c001d1a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1a9:	50                   	push   eax
c001d1aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1b0:	e8 6f f1 ff ff       	call   c001c324 <IDE::polling(unsigned char, unsigned int)>
c001d1b5:	83 c4 10             	add    esp,0x10
c001d1b8:	0f b6 d8             	movzx  ebx,al
c001d1bb:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d1c1:	85 db                	test   ebx,ebx
c001d1c3:	74 20                	je     c001d1e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c001d1c5:	53                   	push   ebx
c001d1c6:	0f b6 c0             	movzx  eax,al
c001d1c9:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d1d0:	52                   	push   edx
c001d1d1:	50                   	push   eax
c001d1d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1d8:	e8 8d f0 ff ff       	call   c001c26a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	e9 8c 01 00 00       	jmp    c001d371 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d1e5:	52                   	push   edx
c001d1e6:	0f b6 c0             	movzx  eax,al
c001d1e9:	52                   	push   edx
c001d1ea:	50                   	push   eax
c001d1eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f1:	e8 38 e6 ff ff       	call   c001b82e <IDE::getBase(unsigned char)>
c001d1f6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d1fa:	b9 06 00 00 00       	mov    ecx,0x6
c001d1ff:	89 c2                	mov    edx,eax
c001d201:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d204:	89 e8                	mov    eax,ebp
c001d206:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d20a:	83 c4 10             	add    esp,0x10
c001d20d:	0f b6 c0             	movzx  eax,al
c001d210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d214:	85 db                	test   ebx,ebx
c001d216:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d21c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d223:	0f 84 eb 00 00 00    	je     c001d314 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d229:	55                   	push   ebp
c001d22a:	55                   	push   ebp
c001d22b:	52                   	push   edx
c001d22c:	50                   	push   eax
c001d22d:	e8 82 e7 ff ff       	call   c001b9b4 <IDE::waitInterrupt(unsigned char)>
c001d232:	83 c4 10             	add    esp,0x10
c001d235:	84 c0                	test   al,al
c001d237:	0f 84 cb fe ff ff    	je     c001d108 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d23d:	56                   	push   esi
c001d23e:	56                   	push   esi
c001d23f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d246:	50                   	push   eax
c001d247:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d24d:	e8 c8 e5 ff ff       	call   c001b81a <IDE::prepareInterrupt(unsigned char)>
c001d252:	83 c4 0c             	add    esp,0xc
c001d255:	6a 04                	push   0x4
c001d257:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25e:	50                   	push   eax
c001d25f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d265:	e8 96 e6 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001d26a:	83 c4 0c             	add    esp,0xc
c001d26d:	6a 05                	push   0x5
c001d26f:	89 c6                	mov    esi,eax
c001d271:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d278:	50                   	push   eax
c001d279:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d27f:	e8 7c e6 ff ff       	call   c001b900 <IDE::read(unsigned char, unsigned char)>
c001d284:	83 c4 10             	add    esp,0x10
c001d287:	0f b6 e8             	movzx  ebp,al
c001d28a:	89 f0                	mov    eax,esi
c001d28c:	c1 e5 08             	shl    ebp,0x8
c001d28f:	0f b6 f0             	movzx  esi,al
c001d292:	09 f5                	or     ebp,esi
c001d294:	31 f6                	xor    esi,esi
c001d296:	d1 fd                	sar    ebp,1
c001d298:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d29d:	74 5c                	je     c001d2fb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c001d29f:	39 ee                	cmp    esi,ebp
c001d2a1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2a7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2ae:	75 0d                	jne    c001d2bd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c001d2b0:	8d 0c 36             	lea    ecx,[esi+esi*1]
c001d2b3:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c001d2b7:	4b                   	dec    ebx
c001d2b8:	e9 57 ff ff ff       	jmp    c001d214 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c001d2bd:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d2c1:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c001d2c5:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c001d2ca:	51                   	push   ecx
c001d2cb:	51                   	push   ecx
c001d2cc:	52                   	push   edx
c001d2cd:	50                   	push   eax
c001d2ce:	e8 5b e5 ff ff       	call   c001b82e <IDE::getBase(unsigned char)>
c001d2d3:	89 c2                	mov    edx,eax
c001d2d5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d2da:	66 ef                	out    dx,ax
c001d2dc:	46                   	inc    esi
c001d2dd:	83 c4 10             	add    esp,0x10
c001d2e0:	eb bd                	jmp    c001d29f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c001d2e2:	51                   	push   ecx
c001d2e3:	51                   	push   ecx
c001d2e4:	52                   	push   edx
c001d2e5:	50                   	push   eax
c001d2e6:	e8 43 e5 ff ff       	call   c001b82e <IDE::getBase(unsigned char)>
c001d2eb:	89 c2                	mov    edx,eax
c001d2ed:	66 ed                	in     ax,dx
c001d2ef:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d2f3:	83 c4 10             	add    esp,0x10
c001d2f6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c001d2fa:	46                   	inc    esi
c001d2fb:	39 ee                	cmp    esi,ebp
c001d2fd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d303:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d30a:	75 d6                	jne    c001d2e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c001d30c:	01 f6                	add    esi,esi
c001d30e:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c001d312:	eb a3                	jmp    c001d2b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c001d314:	51                   	push   ecx
c001d315:	51                   	push   ecx
c001d316:	52                   	push   edx
c001d317:	50                   	push   eax
c001d318:	e8 97 e6 ff ff       	call   c001b9b4 <IDE::waitInterrupt(unsigned char)>
c001d31d:	83 c4 10             	add    esp,0x10
c001d320:	84 c0                	test   al,al
c001d322:	0f 84 e0 fd ff ff    	je     c001d108 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c001d328:	52                   	push   edx
c001d329:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d32e:	52                   	push   edx
c001d32f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d336:	50                   	push   eax
c001d337:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d33d:	e8 d8 e4 ff ff       	call   c001b81a <IDE::prepareInterrupt(unsigned char)>
c001d342:	83 c4 10             	add    esp,0x10
c001d345:	50                   	push   eax
c001d346:	50                   	push   eax
c001d347:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d34e:	50                   	push   eax
c001d34f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d355:	e8 d4 e4 ff ff       	call   c001b82e <IDE::getBase(unsigned char)>
c001d35a:	8d 50 07             	lea    edx,[eax+0x7]
c001d35d:	ec                   	in     al,dx
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	a8 88                	test   al,0x88
c001d363:	74 0a                	je     c001d36f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d365:	4b                   	dec    ebx
c001d366:	75 dd                	jne    c001d345 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d368:	bb 02 00 00 00       	mov    ebx,0x2
c001d36d:	eb 02                	jmp    c001d371 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d36f:	31 db                	xor    ebx,ebx
c001d371:	83 c4 1c             	add    esp,0x1c
c001d374:	89 d8                	mov    eax,ebx
c001d376:	5b                   	pop    ebx
c001d377:	5e                   	pop    esi
c001d378:	5f                   	pop    edi
c001d379:	5d                   	pop    ebp
c001d37a:	c3                   	ret    
c001d37b:	90                   	nop

c001d37c <ATAPI::diskRemoved()>:
c001d37c:	53                   	push   ebx
c001d37d:	83 ec 14             	sub    esp,0x14
c001d380:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d384:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d38b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d391:	e8 8a 06 ff ff       	call   c000da20 <LogicalDisk::unmount()>
c001d396:	58                   	pop    eax
c001d397:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d39d:	e8 62 10 ff ff       	call   c000e404 <VCache::writeWriteBuffer()>
c001d3a2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d3a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3ac:	83 c4 18             	add    esp,0x18
c001d3af:	5b                   	pop    ebx
c001d3b0:	e9 3f 10 ff ff       	jmp    c000e3f4 <VCache::invalidateReadBuffer()>
c001d3b5:	90                   	nop

c001d3b6 <ATAPI::eject()>:
c001d3b6:	57                   	push   edi
c001d3b7:	b9 03 00 00 00       	mov    ecx,0x3
c001d3bc:	53                   	push   ebx
c001d3bd:	83 ec 14             	sub    esp,0x14
c001d3c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3c4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d3c8:	fc                   	cld    
c001d3c9:	31 c0                	xor    eax,eax
c001d3cb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d3cd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d3d2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d3d7:	50                   	push   eax
c001d3d8:	50                   	push   eax
c001d3d9:	6a 00                	push   0x0
c001d3db:	6a 00                	push   0x0
c001d3dd:	6a 00                	push   0x0
c001d3df:	6a 02                	push   0x2
c001d3e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3e5:	50                   	push   eax
c001d3e6:	53                   	push   ebx
c001d3e7:	e8 d0 fc ff ff       	call   c001d0bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3ec:	83 c4 14             	add    esp,0x14
c001d3ef:	53                   	push   ebx
c001d3f0:	e8 87 ff ff ff       	call   c001d37c <ATAPI::diskRemoved()>
c001d3f5:	83 c4 24             	add    esp,0x24
c001d3f8:	31 c0                	xor    eax,eax
c001d3fa:	5b                   	pop    ebx
c001d3fb:	5f                   	pop    edi
c001d3fc:	c3                   	ret    
c001d3fd:	90                   	nop

c001d3fe <ATAPI::diskInserted()>:
c001d3fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d402:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d409:	c3                   	ret    

c001d40a <ATAPI::detectMedia()>:
c001d40a:	56                   	push   esi
c001d40b:	53                   	push   ebx
c001d40c:	83 ec 28             	sub    esp,0x28
c001d40f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d413:	6a 0c                	push   0xc
c001d415:	6a 00                	push   0x0
c001d417:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d41b:	56                   	push   esi
c001d41c:	e8 cf 30 fe ff       	call   c00004f0 <memset>
c001d421:	58                   	pop    eax
c001d422:	5a                   	pop    edx
c001d423:	6a 00                	push   0x0
c001d425:	6a 00                	push   0x0
c001d427:	6a 00                	push   0x0
c001d429:	6a 00                	push   0x0
c001d42b:	56                   	push   esi
c001d42c:	53                   	push   ebx
c001d42d:	e8 8a fc ff ff       	call   c001d0bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d432:	83 c4 1c             	add    esp,0x1c
c001d435:	6a 0c                	push   0xc
c001d437:	6a 00                	push   0x0
c001d439:	56                   	push   esi
c001d43a:	e8 b1 30 fe ff       	call   c00004f0 <memset>
c001d43f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d444:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d449:	59                   	pop    ecx
c001d44a:	58                   	pop    eax
c001d44b:	6a 01                	push   0x1
c001d44d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d451:	50                   	push   eax
c001d452:	6a 00                	push   0x0
c001d454:	6a 12                	push   0x12
c001d456:	56                   	push   esi
c001d457:	53                   	push   ebx
c001d458:	e8 5f fc ff ff       	call   c001d0bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d45d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d461:	83 c4 20             	add    esp,0x20
c001d464:	83 e0 7f             	and    eax,0x7f
c001d467:	83 f8 70             	cmp    eax,0x70
c001d46a:	74 15                	je     c001d481 <ATAPI::detectMedia()+0x77>
c001d46c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d473:	75 0c                	jne    c001d481 <ATAPI::detectMedia()+0x77>
c001d475:	83 ec 0c             	sub    esp,0xc
c001d478:	53                   	push   ebx
c001d479:	e8 80 ff ff ff       	call   c001d3fe <ATAPI::diskInserted()>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d485:	83 e0 0f             	and    eax,0xf
c001d488:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d48d:	0f b6 c0             	movzx  eax,al
c001d490:	75 19                	jne    c001d4ab <ATAPI::detectMedia()+0xa1>
c001d492:	83 f8 02             	cmp    eax,0x2
c001d495:	75 14                	jne    c001d4ab <ATAPI::detectMedia()+0xa1>
c001d497:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d49e:	74 24                	je     c001d4c4 <ATAPI::detectMedia()+0xba>
c001d4a0:	83 ec 0c             	sub    esp,0xc
c001d4a3:	53                   	push   ebx
c001d4a4:	e8 d3 fe ff ff       	call   c001d37c <ATAPI::diskRemoved()>
c001d4a9:	eb 16                	jmp    c001d4c1 <ATAPI::detectMedia()+0xb7>
c001d4ab:	85 c0                	test   eax,eax
c001d4ad:	75 15                	jne    c001d4c4 <ATAPI::detectMedia()+0xba>
c001d4af:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4b6:	75 0c                	jne    c001d4c4 <ATAPI::detectMedia()+0xba>
c001d4b8:	83 ec 0c             	sub    esp,0xc
c001d4bb:	53                   	push   ebx
c001d4bc:	e8 3d ff ff ff       	call   c001d3fe <ATAPI::diskInserted()>
c001d4c1:	83 c4 10             	add    esp,0x10
c001d4c4:	83 c4 24             	add    esp,0x24
c001d4c7:	5b                   	pop    ebx
c001d4c8:	5e                   	pop    esi
c001d4c9:	c3                   	ret    

c001d4ca <ATAPI::open(int, int, void*)>:
c001d4ca:	56                   	push   esi
c001d4cb:	53                   	push   ebx
c001d4cc:	50                   	push   eax
c001d4cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d4d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4d9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d4df:	c1 e0 06             	shl    eax,0x6
c001d4e2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d4e8:	01 d0                	add    eax,edx
c001d4ea:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d4f1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d4f7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d4fe:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d508:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d50f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d515:	6a 04                	push   0x4
c001d517:	6a 0c                	push   0xc
c001d519:	51                   	push   ecx
c001d51a:	52                   	push   edx
c001d51b:	e8 20 e3 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d520:	90                   	nop
c001d521:	90                   	nop
c001d522:	6a 00                	push   0x0
c001d524:	6a 0c                	push   0xc
c001d526:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d52d:	50                   	push   eax
c001d52e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d534:	e8 07 e3 ff ff       	call   c001b840 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d539:	83 c4 14             	add    esp,0x14
c001d53c:	68 78 01 00 00       	push   0x178
c001d541:	e8 8d a5 fe ff       	call   c0007ad3 <malloc>
c001d546:	83 c4 0c             	add    esp,0xc
c001d549:	6a 00                	push   0x0
c001d54b:	68 ff ff ff 7f       	push   0x7fffffff
c001d550:	6a 00                	push   0x0
c001d552:	6a 00                	push   0x0
c001d554:	53                   	push   ebx
c001d555:	68 cf 2e 02 c0       	push   0xc0022ecf
c001d55a:	89 c6                	mov    esi,eax
c001d55c:	50                   	push   eax
c001d55d:	e8 fc 02 ff ff       	call   c000d85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d562:	83 c4 14             	add    esp,0x14
c001d565:	56                   	push   esi
c001d566:	e8 b3 03 ff ff       	call   c000d91e <LogicalDisk::assignDriveLetter()>
c001d56b:	5a                   	pop    edx
c001d56c:	59                   	pop    ecx
c001d56d:	0f be c0             	movsx  eax,al
c001d570:	50                   	push   eax
c001d571:	68 20 2d 02 c0       	push   0xc0022d20
c001d576:	e8 8f d3 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d57b:	58                   	pop    eax
c001d57c:	5a                   	pop    edx
c001d57d:	56                   	push   esi
c001d57e:	53                   	push   ebx
c001d57f:	e8 2c f1 fe ff       	call   c000c6b0 <Device::addChild(Device*)>
c001d584:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d58a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d58d:	e8 54 f5 fe ff       	call   c000cae6 <PhysicalDisk::startCache()>
c001d592:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d599:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d59c:	e8 69 fe ff ff       	call   c001d40a <ATAPI::detectMedia()>
c001d5a1:	83 c4 14             	add    esp,0x14
c001d5a4:	31 c0                	xor    eax,eax
c001d5a6:	5b                   	pop    ebx
c001d5a7:	5e                   	pop    esi
c001d5a8:	c3                   	ret    
c001d5a9:	90                   	nop

c001d5aa <ATAPI::read(unsigned long long, int, void*)>:
c001d5aa:	55                   	push   ebp
c001d5ab:	57                   	push   edi
c001d5ac:	56                   	push   esi
c001d5ad:	53                   	push   ebx
c001d5ae:	83 ec 1c             	sub    esp,0x1c
c001d5b1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5b5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d5b9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d5bd:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5c4:	74 3c                	je     c001d602 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d5c6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5ca:	b9 03 00 00 00       	mov    ecx,0x3
c001d5cf:	fc                   	cld    
c001d5d0:	31 c0                	xor    eax,eax
c001d5d2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5d4:	89 e8                	mov    eax,ebp
c001d5d6:	0f ce                	bswap  esi
c001d5d8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d5dc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d5e1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d5e5:	50                   	push   eax
c001d5e6:	50                   	push   eax
c001d5e7:	55                   	push   ebp
c001d5e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d5ec:	c1 e5 0b             	shl    ebp,0xb
c001d5ef:	6a 00                	push   0x0
c001d5f1:	55                   	push   ebp
c001d5f2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d5f6:	50                   	push   eax
c001d5f7:	53                   	push   ebx
c001d5f8:	e8 bf fa ff ff       	call   c001d0bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d5fd:	83 c4 20             	add    esp,0x20
c001d600:	eb 1a                	jmp    c001d61c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d602:	83 ec 0c             	sub    esp,0xc
c001d605:	53                   	push   ebx
c001d606:	e8 ff fd ff ff       	call   c001d40a <ATAPI::detectMedia()>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d615:	75 af                	jne    c001d5c6 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d617:	b8 02 00 00 00       	mov    eax,0x2
c001d61c:	83 c4 1c             	add    esp,0x1c
c001d61f:	5b                   	pop    ebx
c001d620:	5e                   	pop    esi
c001d621:	5f                   	pop    edi
c001d622:	5d                   	pop    ebp
c001d623:	c3                   	ret    

c001d624 <SATA::close(int, int, void*)>:
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d631:	85 c0                	test   eax,eax
c001d633:	74 0c                	je     c001d641 <SATA::close(int, int, void*)+0x1d>
c001d635:	8b 10                	mov    edx,DWORD PTR [eax]
c001d637:	83 ec 0c             	sub    esp,0xc
c001d63a:	50                   	push   eax
c001d63b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d63e:	83 c4 10             	add    esp,0x10
c001d641:	31 c0                	xor    eax,eax
c001d643:	83 c4 0c             	add    esp,0xc
c001d646:	c3                   	ret    
c001d647:	90                   	nop

c001d648 <SATA::powerSaving(PowerSavingLevel)>:
c001d648:	c3                   	ret    
c001d649:	90                   	nop

c001d64a <SATA::open(int, int, void*)>:
c001d64a:	56                   	push   esi
c001d64b:	53                   	push   ebx
c001d64c:	50                   	push   eax
c001d64d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d651:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d655:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d65f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d665:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d669:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d673:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d67d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d684:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d68a:	e8 53 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d68f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d695:	89 c6                	mov    esi,eax
c001d697:	e8 46 a7 fe ff       	call   c0007de2 <Phys::allocatePage()>
c001d69c:	81 c6 00 10 00 00    	add    esi,0x1000
c001d6a2:	39 c6                	cmp    esi,eax
c001d6a4:	74 10                	je     c001d6b6 <SATA::open(int, int, void*)+0x6c>
c001d6a6:	83 ec 0c             	sub    esp,0xc
c001d6a9:	68 68 2d 02 c0       	push   0xc0022d68
c001d6ae:	e8 9a 3b ff ff       	call   c001124d <KePanic(char const*)>
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	83 ec 0c             	sub    esp,0xc
c001d6b9:	6a 02                	push   0x2
c001d6bb:	e8 35 bf fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001d6c0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d6c6:	6a 03                	push   0x3
c001d6c8:	50                   	push   eax
c001d6c9:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d6cf:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d6d5:	e8 24 c6 fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6da:	83 c4 14             	add    esp,0x14
c001d6dd:	53                   	push   ebx
c001d6de:	e8 03 f4 fe ff       	call   c000cae6 <PhysicalDisk::startCache()>
c001d6e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6e6:	e8 47 06 ff ff       	call   c000dd32 <createPartitionsForDisk(PhysicalDisk*)>
c001d6eb:	83 c4 14             	add    esp,0x14
c001d6ee:	31 c0                	xor    eax,eax
c001d6f0:	5b                   	pop    ebx
c001d6f1:	5e                   	pop    esi
c001d6f2:	c3                   	ret    
c001d6f3:	90                   	nop

c001d6f4 <SATA::SATA()>:
c001d6f4:	83 ec 0c             	sub    esp,0xc
c001d6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fb:	83 ec 04             	sub    esp,0x4
c001d6fe:	68 00 02 00 00       	push   0x200
c001d703:	68 7c 2d 02 c0       	push   0xc0022d7c
c001d708:	50                   	push   eax
c001d709:	e8 70 f3 fe ff       	call   c000ca7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d70e:	83 c4 10             	add    esp,0x10
c001d711:	ba ec 2d 02 c0       	mov    edx,0xc0022dec
c001d716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d71a:	89 10                	mov    DWORD PTR [eax],edx
c001d71c:	90                   	nop
c001d71d:	83 c4 0c             	add    esp,0xc
c001d720:	c3                   	ret    
c001d721:	90                   	nop

c001d722 <SATA::access(unsigned long long, int, void*, bool)>:
c001d722:	55                   	push   ebp
c001d723:	57                   	push   edi
c001d724:	56                   	push   esi
c001d725:	53                   	push   ebx
c001d726:	83 ec 2c             	sub    esp,0x2c
c001d729:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d72d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d732:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d736:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d73a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d73e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d742:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d746:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d74a:	7e 10                	jle    c001d75c <SATA::access(unsigned long long, int, void*, bool)+0x3a>
c001d74c:	83 ec 0c             	sub    esp,0xc
c001d74f:	68 8c 2d 02 c0       	push   0xc0022d8c
c001d754:	e8 f4 3a ff ff       	call   c001124d <KePanic(char const*)>
c001d759:	83 c4 10             	add    esp,0x10
c001d75c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d762:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c001d768:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d76e:	89 e8                	mov    eax,ebp
c001d770:	c1 e0 07             	shl    eax,0x7
c001d773:	01 d0                	add    eax,edx
c001d775:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d77f:	8d 45 02             	lea    eax,[ebp+0x2]
c001d782:	51                   	push   ecx
c001d783:	c1 e0 07             	shl    eax,0x7
c001d786:	51                   	push   ecx
c001d787:	01 d0                	add    eax,edx
c001d789:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d78d:	50                   	push   eax
c001d78e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d794:	e8 6b ec ff ff       	call   c001c404 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d799:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d79d:	83 c4 10             	add    esp,0x10
c001d7a0:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c001d7a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d7a9:	0f 84 5b 01 00 00    	je     c001d90a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d7af:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7b3:	c1 e0 09             	shl    eax,0x9
c001d7b6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d7bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d7bf:	74 0e                	je     c001d7cf <SATA::access(unsigned long long, int, void*, bool)+0xad>
c001d7c1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d7c7:	89 c1                	mov    ecx,eax
c001d7c9:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d7cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d7cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d7d3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d7d9:	8d 45 02             	lea    eax,[ebp+0x2]
c001d7dc:	c1 e0 07             	shl    eax,0x7
c001d7df:	01 d0                	add    eax,edx
c001d7e1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7e3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d7e9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d7ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7f3:	c1 e1 05             	shl    ecx,0x5
c001d7f6:	01 c8                	add    eax,ecx
c001d7f8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d7fc:	83 e1 01             	and    ecx,0x1
c001d7ff:	89 ce                	mov    esi,ecx
c001d801:	8a 08                	mov    cl,BYTE PTR [eax]
c001d803:	c1 e6 06             	shl    esi,0x6
c001d806:	83 e1 bf             	and    ecx,0xffffffbf
c001d809:	09 f1                	or     ecx,esi
c001d80b:	88 08                	mov    BYTE PTR [eax],cl
c001d80d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d80f:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d815:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d81b:	89 08                	mov    DWORD PTR [eax],ecx
c001d81d:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d823:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d829:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d82f:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d832:	50                   	push   eax
c001d833:	68 90 00 00 00       	push   0x90
c001d838:	6a 00                	push   0x0
c001d83a:	56                   	push   esi
c001d83b:	e8 b0 2c fe ff       	call   c00004f0 <memset>
c001d840:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d846:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d84c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d850:	83 c4 10             	add    esp,0x10
c001d853:	48                   	dec    eax
c001d854:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d859:	89 c1                	mov    ecx,eax
c001d85b:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d861:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d866:	09 c8                	or     eax,ecx
c001d868:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d86e:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d874:	83 c8 80             	or     eax,0xffffff80
c001d877:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d87d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d880:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d884:	25 00 7f 00 00       	and    eax,0x7f00
c001d889:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d88e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d893:	66 89 06             	mov    WORD PTR [esi],ax
c001d896:	b0 35                	mov    al,0x35
c001d898:	75 02                	jne    c001d89c <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c001d89a:	b0 25                	mov    al,0x25
c001d89c:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d89f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8a3:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d8a7:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c001d8ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8af:	c1 e8 10             	shr    eax,0x10
c001d8b2:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d8b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d8b9:	c1 e8 18             	shr    eax,0x18
c001d8bc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d8bf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d8c3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d8c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ca:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d8cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8d1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d8d5:	89 ee                	mov    esi,ebp
c001d8d7:	31 c0                	xor    eax,eax
c001d8d9:	c1 e6 07             	shl    esi,0x7
c001d8dc:	01 d6                	add    esi,edx
c001d8de:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d8e4:	80 e1 88             	and    cl,0x88
c001d8e7:	74 0a                	je     c001d8f3 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d8e9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d8ee:	74 0a                	je     c001d8fa <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d8f0:	40                   	inc    eax
c001d8f1:	eb eb                	jmp    c001d8de <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d8f3:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d8f8:	75 17                	jne    c001d911 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d8fa:	83 ec 0c             	sub    esp,0xc
c001d8fd:	68 c5 2d 02 c0       	push   0xc0022dc5
c001d902:	e8 03 d0 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001d907:	83 c4 10             	add    esp,0x10
c001d90a:	b8 01 00 00 00       	mov    eax,0x1
c001d90f:	eb 5b                	jmp    c001d96c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d911:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d915:	c1 e5 07             	shl    ebp,0x7
c001d918:	b8 01 00 00 00       	mov    eax,0x1
c001d91d:	01 ea                	add    edx,ebp
c001d91f:	d3 e0                	shl    eax,cl
c001d921:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d927:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d92d:	85 c8                	test   eax,ecx
c001d92f:	74 16                	je     c001d947 <SATA::access(unsigned long long, int, void*, bool)+0x225>
c001d931:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d937:	0f ba e1 1e          	bt     ecx,0x1e
c001d93b:	73 ea                	jae    c001d927 <SATA::access(unsigned long long, int, void*, bool)+0x205>
c001d93d:	83 ec 0c             	sub    esp,0xc
c001d940:	68 d3 2d 02 c0       	push   0xc0022dd3
c001d945:	eb bb                	jmp    c001d902 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d947:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d94d:	0f ba e0 1e          	bt     eax,0x1e
c001d951:	72 b7                	jb     c001d90a <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d953:	31 c0                	xor    eax,eax
c001d955:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001d95a:	75 10                	jne    c001d96c <SATA::access(unsigned long long, int, void*, bool)+0x24a>
c001d95c:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d962:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d966:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d96a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d96c:	83 c4 2c             	add    esp,0x2c
c001d96f:	5b                   	pop    ebx
c001d970:	5e                   	pop    esi
c001d971:	5f                   	pop    edi
c001d972:	5d                   	pop    ebp
c001d973:	c3                   	ret    

c001d974 <SATA::read(unsigned long long, int, void*)>:
c001d974:	55                   	push   ebp
c001d975:	57                   	push   edi
c001d976:	56                   	push   esi
c001d977:	be 04 00 00 00       	mov    esi,0x4
c001d97c:	53                   	push   ebx
c001d97d:	83 ec 0c             	sub    esp,0xc
c001d980:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d984:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d988:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d98c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d990:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d993:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d999:	0f 87 1a 02 00 00    	ja     c001dbb9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d99f:	85 c9                	test   ecx,ecx
c001d9a1:	be 06 00 00 00       	mov    esi,0x6
c001d9a6:	0f 84 0d 02 00 00    	je     c001dbb9 <SATA::read(unsigned long long, int, void*)+0x245>
c001d9ac:	56                   	push   esi
c001d9ad:	56                   	push   esi
c001d9ae:	6a 00                	push   0x0
c001d9b0:	51                   	push   ecx
c001d9b1:	53                   	push   ebx
c001d9b2:	52                   	push   edx
c001d9b3:	50                   	push   eax
c001d9b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9b8:	e8 65 fd ff ff       	call   c001d722 <SATA::access(unsigned long long, int, void*, bool)>
c001d9bd:	83 c4 20             	add    esp,0x20
c001d9c0:	85 c0                	test   eax,eax
c001d9c2:	89 c6                	mov    esi,eax
c001d9c4:	0f 85 ea 01 00 00    	jne    c001dbb4 <SATA::read(unsigned long long, int, void*)+0x240>
c001d9ca:	50                   	push   eax
c001d9cb:	50                   	push   eax
c001d9cc:	6a 0f                	push   0xf
c001d9ce:	6a 00                	push   0x0
c001d9d0:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d9d6:	bb 0a 00 00 00       	mov    ebx,0xa
c001d9db:	e8 7d f2 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001d9e0:	5a                   	pop    edx
c001d9e1:	59                   	pop    ecx
c001d9e2:	b9 10 27 00 00       	mov    ecx,0x2710
c001d9e7:	0f b6 c0             	movzx  eax,al
c001d9ea:	50                   	push   eax
c001d9eb:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9f0:	99                   	cdq    
c001d9f1:	f7 f9                	idiv   ecx
c001d9f3:	99                   	cdq    
c001d9f4:	f7 fb                	idiv   ebx
c001d9f6:	8d 42 30             	lea    eax,[edx+0x30]
c001d9f9:	0f b6 c0             	movzx  eax,al
c001d9fc:	50                   	push   eax
c001d9fd:	e8 4a f2 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001da02:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001da08:	5f                   	pop    edi
c001da09:	5d                   	pop    ebp
c001da0a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001da0f:	6a 0f                	push   0xf
c001da11:	6a 00                	push   0x0
c001da13:	e8 45 f2 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001da18:	5a                   	pop    edx
c001da19:	59                   	pop    ecx
c001da1a:	0f b6 c0             	movzx  eax,al
c001da1d:	50                   	push   eax
c001da1e:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da23:	99                   	cdq    
c001da24:	f7 fd                	idiv   ebp
c001da26:	99                   	cdq    
c001da27:	f7 fb                	idiv   ebx
c001da29:	8d 42 30             	lea    eax,[edx+0x30]
c001da2c:	0f b6 c0             	movzx  eax,al
c001da2f:	50                   	push   eax
c001da30:	e8 17 f2 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001da35:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001da3b:	5f                   	pop    edi
c001da3c:	bf 64 00 00 00       	mov    edi,0x64
c001da41:	58                   	pop    eax
c001da42:	6a 0f                	push   0xf
c001da44:	6a 00                	push   0x0
c001da46:	e8 12 f2 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001da4b:	5a                   	pop    edx
c001da4c:	59                   	pop    ecx
c001da4d:	0f b6 c0             	movzx  eax,al
c001da50:	50                   	push   eax
c001da51:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da56:	99                   	cdq    
c001da57:	f7 ff                	idiv   edi
c001da59:	99                   	cdq    
c001da5a:	f7 fb                	idiv   ebx
c001da5c:	8d 42 30             	lea    eax,[edx+0x30]
c001da5f:	0f b6 c0             	movzx  eax,al
c001da62:	50                   	push   eax
c001da63:	e8 e4 f1 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001da68:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001da6e:	58                   	pop    eax
c001da6f:	5a                   	pop    edx
c001da70:	6a 0f                	push   0xf
c001da72:	6a 00                	push   0x0
c001da74:	e8 e4 f1 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001da79:	59                   	pop    ecx
c001da7a:	5a                   	pop    edx
c001da7b:	0f b6 c0             	movzx  eax,al
c001da7e:	50                   	push   eax
c001da7f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da84:	99                   	cdq    
c001da85:	f7 fb                	idiv   ebx
c001da87:	99                   	cdq    
c001da88:	f7 fb                	idiv   ebx
c001da8a:	8d 42 30             	lea    eax,[edx+0x30]
c001da8d:	0f b6 c0             	movzx  eax,al
c001da90:	50                   	push   eax
c001da91:	e8 b6 f1 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001da96:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001da9c:	59                   	pop    ecx
c001da9d:	58                   	pop    eax
c001da9e:	6a 0f                	push   0xf
c001daa0:	6a 00                	push   0x0
c001daa2:	e8 b6 f1 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001daa7:	5a                   	pop    edx
c001daa8:	59                   	pop    ecx
c001daa9:	0f b6 c0             	movzx  eax,al
c001daac:	50                   	push   eax
c001daad:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dab2:	99                   	cdq    
c001dab3:	f7 fb                	idiv   ebx
c001dab5:	83 c2 30             	add    edx,0x30
c001dab8:	0f b6 d2             	movzx  edx,dl
c001dabb:	52                   	push   edx
c001dabc:	e8 8b f1 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dac1:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dac7:	58                   	pop    eax
c001dac8:	5a                   	pop    edx
c001dac9:	6a 0f                	push   0xf
c001dacb:	6a 00                	push   0x0
c001dacd:	e8 8b f1 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dad2:	59                   	pop    ecx
c001dad3:	b9 10 27 00 00       	mov    ecx,0x2710
c001dad8:	5a                   	pop    edx
c001dad9:	0f b6 c0             	movzx  eax,al
c001dadc:	50                   	push   eax
c001dadd:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dae2:	99                   	cdq    
c001dae3:	f7 f9                	idiv   ecx
c001dae5:	99                   	cdq    
c001dae6:	f7 fb                	idiv   ebx
c001dae8:	8d 42 30             	lea    eax,[edx+0x30]
c001daeb:	0f b6 c0             	movzx  eax,al
c001daee:	50                   	push   eax
c001daef:	e8 58 f1 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001daf4:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dafa:	59                   	pop    ecx
c001dafb:	58                   	pop    eax
c001dafc:	6a 0f                	push   0xf
c001dafe:	6a 00                	push   0x0
c001db00:	e8 58 f1 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001db05:	5a                   	pop    edx
c001db06:	59                   	pop    ecx
c001db07:	0f b6 c0             	movzx  eax,al
c001db0a:	50                   	push   eax
c001db0b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db10:	99                   	cdq    
c001db11:	f7 fd                	idiv   ebp
c001db13:	99                   	cdq    
c001db14:	f7 fb                	idiv   ebx
c001db16:	8d 42 30             	lea    eax,[edx+0x30]
c001db19:	0f b6 c0             	movzx  eax,al
c001db1c:	50                   	push   eax
c001db1d:	e8 2a f1 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001db22:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001db28:	5d                   	pop    ebp
c001db29:	58                   	pop    eax
c001db2a:	6a 0f                	push   0xf
c001db2c:	6a 00                	push   0x0
c001db2e:	e8 2a f1 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001db33:	5a                   	pop    edx
c001db34:	59                   	pop    ecx
c001db35:	0f b6 c0             	movzx  eax,al
c001db38:	50                   	push   eax
c001db39:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db3e:	99                   	cdq    
c001db3f:	f7 ff                	idiv   edi
c001db41:	99                   	cdq    
c001db42:	f7 fb                	idiv   ebx
c001db44:	8d 42 30             	lea    eax,[edx+0x30]
c001db47:	0f b6 c0             	movzx  eax,al
c001db4a:	50                   	push   eax
c001db4b:	e8 fc f0 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001db50:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001db56:	5f                   	pop    edi
c001db57:	5d                   	pop    ebp
c001db58:	6a 0f                	push   0xf
c001db5a:	6a 00                	push   0x0
c001db5c:	e8 fc f0 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001db61:	5a                   	pop    edx
c001db62:	59                   	pop    ecx
c001db63:	0f b6 c0             	movzx  eax,al
c001db66:	50                   	push   eax
c001db67:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db6c:	99                   	cdq    
c001db6d:	f7 fb                	idiv   ebx
c001db6f:	99                   	cdq    
c001db70:	f7 fb                	idiv   ebx
c001db72:	8d 42 30             	lea    eax,[edx+0x30]
c001db75:	0f b6 c0             	movzx  eax,al
c001db78:	50                   	push   eax
c001db79:	e8 ce f0 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001db7e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001db84:	5f                   	pop    edi
c001db85:	5d                   	pop    ebp
c001db86:	6a 0f                	push   0xf
c001db88:	6a 00                	push   0x0
c001db8a:	e8 ce f0 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001db8f:	5a                   	pop    edx
c001db90:	59                   	pop    ecx
c001db91:	0f b6 c0             	movzx  eax,al
c001db94:	50                   	push   eax
c001db95:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db9a:	99                   	cdq    
c001db9b:	f7 fb                	idiv   ebx
c001db9d:	83 c2 30             	add    edx,0x30
c001dba0:	0f b6 d2             	movzx  edx,dl
c001dba3:	52                   	push   edx
c001dba4:	e8 a3 f0 ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dba9:	83 c4 10             	add    esp,0x10
c001dbac:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dbb2:	eb 05                	jmp    c001dbb9 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbb4:	be 01 00 00 00       	mov    esi,0x1
c001dbb9:	83 c4 0c             	add    esp,0xc
c001dbbc:	89 f0                	mov    eax,esi
c001dbbe:	5b                   	pop    ebx
c001dbbf:	5e                   	pop    esi
c001dbc0:	5f                   	pop    edi
c001dbc1:	5d                   	pop    ebp
c001dbc2:	c3                   	ret    
c001dbc3:	90                   	nop

c001dbc4 <SATA::write(unsigned long long, int, void*)>:
c001dbc4:	55                   	push   ebp
c001dbc5:	57                   	push   edi
c001dbc6:	56                   	push   esi
c001dbc7:	53                   	push   ebx
c001dbc8:	83 ec 0c             	sub    esp,0xc
c001dbcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dbcf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dbd3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dbd7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dbdb:	8d 70 ff             	lea    esi,[eax-0x1]
c001dbde:	b8 04 00 00 00       	mov    eax,0x4
c001dbe3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dbe9:	0f 87 2c 02 00 00    	ja     c001de1b <SATA::write(unsigned long long, int, void*)+0x257>
c001dbef:	85 db                	test   ebx,ebx
c001dbf1:	b8 06 00 00 00       	mov    eax,0x6
c001dbf6:	0f 84 1f 02 00 00    	je     c001de1b <SATA::write(unsigned long long, int, void*)+0x257>
c001dbfc:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dc00:	c1 e6 09             	shl    esi,0x9
c001dc03:	01 de                	add    esi,ebx
c001dc05:	50                   	push   eax
c001dc06:	89 d7                	mov    edi,edx
c001dc08:	50                   	push   eax
c001dc09:	83 c7 01             	add    edi,0x1
c001dc0c:	6a 01                	push   0x1
c001dc0e:	89 cd                	mov    ebp,ecx
c001dc10:	53                   	push   ebx
c001dc11:	83 d5 00             	adc    ebp,0x0
c001dc14:	6a 01                	push   0x1
c001dc16:	81 c3 00 02 00 00    	add    ebx,0x200
c001dc1c:	51                   	push   ecx
c001dc1d:	52                   	push   edx
c001dc1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc22:	e8 fb fa ff ff       	call   c001d722 <SATA::access(unsigned long long, int, void*, bool)>
c001dc27:	83 c4 20             	add    esp,0x20
c001dc2a:	39 f3                	cmp    ebx,esi
c001dc2c:	89 fa                	mov    edx,edi
c001dc2e:	89 e9                	mov    ecx,ebp
c001dc30:	75 d3                	jne    c001dc05 <SATA::write(unsigned long long, int, void*)+0x41>
c001dc32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001dc36:	bd 10 27 00 00       	mov    ebp,0x2710
c001dc3b:	bb 0a 00 00 00       	mov    ebx,0xa
c001dc40:	01 05 b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,eax
c001dc46:	50                   	push   eax
c001dc47:	50                   	push   eax
c001dc48:	6a 0f                	push   0xf
c001dc4a:	6a 00                	push   0x0
c001dc4c:	e8 0c f0 ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dc51:	5a                   	pop    edx
c001dc52:	59                   	pop    ecx
c001dc53:	0f b6 c0             	movzx  eax,al
c001dc56:	50                   	push   eax
c001dc57:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc5c:	99                   	cdq    
c001dc5d:	f7 fd                	idiv   ebp
c001dc5f:	99                   	cdq    
c001dc60:	f7 fb                	idiv   ebx
c001dc62:	8d 42 30             	lea    eax,[edx+0x30]
c001dc65:	0f b6 c0             	movzx  eax,al
c001dc68:	50                   	push   eax
c001dc69:	e8 de ef ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dc6e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc74:	5e                   	pop    esi
c001dc75:	5f                   	pop    edi
c001dc76:	bf e8 03 00 00       	mov    edi,0x3e8
c001dc7b:	6a 0f                	push   0xf
c001dc7d:	6a 00                	push   0x0
c001dc7f:	e8 d9 ef ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dc84:	5a                   	pop    edx
c001dc85:	59                   	pop    ecx
c001dc86:	0f b6 c0             	movzx  eax,al
c001dc89:	50                   	push   eax
c001dc8a:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc8f:	99                   	cdq    
c001dc90:	f7 ff                	idiv   edi
c001dc92:	99                   	cdq    
c001dc93:	f7 fb                	idiv   ebx
c001dc95:	8d 42 30             	lea    eax,[edx+0x30]
c001dc98:	0f b6 c0             	movzx  eax,al
c001dc9b:	50                   	push   eax
c001dc9c:	e8 ab ef ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dca1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dca7:	5e                   	pop    esi
c001dca8:	be 64 00 00 00       	mov    esi,0x64
c001dcad:	58                   	pop    eax
c001dcae:	6a 0f                	push   0xf
c001dcb0:	6a 00                	push   0x0
c001dcb2:	e8 a6 ef ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dcb7:	5a                   	pop    edx
c001dcb8:	59                   	pop    ecx
c001dcb9:	0f b6 c0             	movzx  eax,al
c001dcbc:	50                   	push   eax
c001dcbd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcc2:	99                   	cdq    
c001dcc3:	f7 fe                	idiv   esi
c001dcc5:	99                   	cdq    
c001dcc6:	f7 fb                	idiv   ebx
c001dcc8:	8d 42 30             	lea    eax,[edx+0x30]
c001dccb:	0f b6 c0             	movzx  eax,al
c001dcce:	50                   	push   eax
c001dccf:	e8 78 ef ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dcd4:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dcda:	58                   	pop    eax
c001dcdb:	5a                   	pop    edx
c001dcdc:	6a 0f                	push   0xf
c001dcde:	6a 00                	push   0x0
c001dce0:	e8 78 ef ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dce5:	59                   	pop    ecx
c001dce6:	5a                   	pop    edx
c001dce7:	0f b6 c0             	movzx  eax,al
c001dcea:	50                   	push   eax
c001dceb:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcf0:	99                   	cdq    
c001dcf1:	f7 fb                	idiv   ebx
c001dcf3:	99                   	cdq    
c001dcf4:	f7 fb                	idiv   ebx
c001dcf6:	8d 42 30             	lea    eax,[edx+0x30]
c001dcf9:	0f b6 c0             	movzx  eax,al
c001dcfc:	50                   	push   eax
c001dcfd:	e8 4a ef ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dd02:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dd08:	59                   	pop    ecx
c001dd09:	58                   	pop    eax
c001dd0a:	6a 0f                	push   0xf
c001dd0c:	6a 00                	push   0x0
c001dd0e:	e8 4a ef ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dd13:	5a                   	pop    edx
c001dd14:	59                   	pop    ecx
c001dd15:	0f b6 c0             	movzx  eax,al
c001dd18:	50                   	push   eax
c001dd19:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd1e:	99                   	cdq    
c001dd1f:	f7 fb                	idiv   ebx
c001dd21:	83 c2 30             	add    edx,0x30
c001dd24:	0f b6 d2             	movzx  edx,dl
c001dd27:	52                   	push   edx
c001dd28:	e8 1f ef ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dd2d:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dd33:	58                   	pop    eax
c001dd34:	5a                   	pop    edx
c001dd35:	6a 0f                	push   0xf
c001dd37:	6a 00                	push   0x0
c001dd39:	e8 1f ef ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dd3e:	59                   	pop    ecx
c001dd3f:	5a                   	pop    edx
c001dd40:	0f b6 c0             	movzx  eax,al
c001dd43:	50                   	push   eax
c001dd44:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd49:	99                   	cdq    
c001dd4a:	f7 fd                	idiv   ebp
c001dd4c:	99                   	cdq    
c001dd4d:	f7 fb                	idiv   ebx
c001dd4f:	8d 42 30             	lea    eax,[edx+0x30]
c001dd52:	0f b6 c0             	movzx  eax,al
c001dd55:	50                   	push   eax
c001dd56:	e8 f1 ee ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dd5b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dd61:	59                   	pop    ecx
c001dd62:	5d                   	pop    ebp
c001dd63:	6a 0f                	push   0xf
c001dd65:	6a 00                	push   0x0
c001dd67:	e8 f1 ee ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dd6c:	5a                   	pop    edx
c001dd6d:	59                   	pop    ecx
c001dd6e:	0f b6 c0             	movzx  eax,al
c001dd71:	50                   	push   eax
c001dd72:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd77:	99                   	cdq    
c001dd78:	f7 ff                	idiv   edi
c001dd7a:	99                   	cdq    
c001dd7b:	f7 fb                	idiv   ebx
c001dd7d:	8d 42 30             	lea    eax,[edx+0x30]
c001dd80:	0f b6 c0             	movzx  eax,al
c001dd83:	50                   	push   eax
c001dd84:	e8 c3 ee ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dd89:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd8f:	5f                   	pop    edi
c001dd90:	5d                   	pop    ebp
c001dd91:	6a 0f                	push   0xf
c001dd93:	6a 00                	push   0x0
c001dd95:	e8 c3 ee ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001dd9a:	5a                   	pop    edx
c001dd9b:	59                   	pop    ecx
c001dd9c:	0f b6 c0             	movzx  eax,al
c001dd9f:	50                   	push   eax
c001dda0:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dda5:	99                   	cdq    
c001dda6:	f7 fe                	idiv   esi
c001dda8:	99                   	cdq    
c001dda9:	f7 fb                	idiv   ebx
c001ddab:	8d 42 30             	lea    eax,[edx+0x30]
c001ddae:	0f b6 c0             	movzx  eax,al
c001ddb1:	50                   	push   eax
c001ddb2:	e8 95 ee ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001ddb7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ddbd:	5e                   	pop    esi
c001ddbe:	5f                   	pop    edi
c001ddbf:	6a 0f                	push   0xf
c001ddc1:	6a 00                	push   0x0
c001ddc3:	e8 95 ee ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001ddc8:	5d                   	pop    ebp
c001ddc9:	5a                   	pop    edx
c001ddca:	0f b6 c0             	movzx  eax,al
c001ddcd:	50                   	push   eax
c001ddce:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddd3:	99                   	cdq    
c001ddd4:	f7 fb                	idiv   ebx
c001ddd6:	99                   	cdq    
c001ddd7:	f7 fb                	idiv   ebx
c001ddd9:	8d 42 30             	lea    eax,[edx+0x30]
c001dddc:	0f b6 c0             	movzx  eax,al
c001dddf:	50                   	push   eax
c001dde0:	e8 67 ee ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001dde5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ddeb:	59                   	pop    ecx
c001ddec:	5e                   	pop    esi
c001dded:	6a 0f                	push   0xf
c001ddef:	6a 00                	push   0x0
c001ddf1:	e8 67 ee ff ff       	call   c001cc5d <combineColours(unsigned char, unsigned char)>
c001ddf6:	5f                   	pop    edi
c001ddf7:	5d                   	pop    ebp
c001ddf8:	0f b6 c0             	movzx  eax,al
c001ddfb:	50                   	push   eax
c001ddfc:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de01:	99                   	cdq    
c001de02:	f7 fb                	idiv   ebx
c001de04:	83 c2 30             	add    edx,0x30
c001de07:	0f b6 d2             	movzx  edx,dl
c001de0a:	52                   	push   edx
c001de0b:	e8 3c ee ff ff       	call   c001cc4c <combineCharAndColour(char, unsigned char)>
c001de10:	83 c4 10             	add    esp,0x10
c001de13:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001de19:	31 c0                	xor    eax,eax
c001de1b:	83 c4 0c             	add    esp,0xc
c001de1e:	5b                   	pop    ebx
c001de1f:	5e                   	pop    esi
c001de20:	5f                   	pop    edi
c001de21:	5d                   	pop    ebp
c001de22:	c3                   	ret    
c001de23:	90                   	nop

c001de24 <SATAPI::write(unsigned long long, int, void*)>:
c001de24:	b8 03 00 00 00       	mov    eax,0x3
c001de29:	c3                   	ret    

c001de2a <SATAPI::close(int, int, void*)>:
c001de2a:	83 ec 0c             	sub    esp,0xc
c001de2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de31:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de37:	85 c0                	test   eax,eax
c001de39:	74 0c                	je     c001de47 <SATAPI::close(int, int, void*)+0x1d>
c001de3b:	8b 10                	mov    edx,DWORD PTR [eax]
c001de3d:	83 ec 0c             	sub    esp,0xc
c001de40:	50                   	push   eax
c001de41:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001de44:	83 c4 10             	add    esp,0x10
c001de47:	31 c0                	xor    eax,eax
c001de49:	83 c4 0c             	add    esp,0xc
c001de4c:	c3                   	ret    
c001de4d:	90                   	nop

c001de4e <SATAPI::SATAPI()>:
c001de4e:	83 ec 0c             	sub    esp,0xc
c001de51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de55:	83 ec 04             	sub    esp,0x4
c001de58:	68 00 08 00 00       	push   0x800
c001de5d:	68 1c 2e 02 c0       	push   0xc0022e1c
c001de62:	50                   	push   eax
c001de63:	e8 16 ec fe ff       	call   c000ca7e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001de68:	83 c4 10             	add    esp,0x10
c001de6b:	ba 10 2f 02 c0       	mov    edx,0xc0022f10
c001de70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de74:	89 10                	mov    DWORD PTR [eax],edx
c001de76:	90                   	nop
c001de77:	83 c4 0c             	add    esp,0xc
c001de7a:	c3                   	ret    
c001de7b:	90                   	nop

c001de7c <SATAPI::diskRemoved()>:
c001de7c:	c3                   	ret    
c001de7d:	90                   	nop

c001de7e <SATAPI::diskInserted()>:
c001de7e:	83 ec 18             	sub    esp,0x18
c001de81:	68 28 2e 02 c0       	push   0xc0022e28
c001de86:	e8 7f ca fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001de8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de8f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001de96:	83 c4 1c             	add    esp,0x1c
c001de99:	c3                   	ret    

c001de9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001de9a:	55                   	push   ebp
c001de9b:	57                   	push   edi
c001de9c:	56                   	push   esi
c001de9d:	53                   	push   ebx
c001de9e:	83 ec 34             	sub    esp,0x34
c001dea1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dea5:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dea9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dead:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001deb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001deb5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001debb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dec1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dec5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001decb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001decf:	83 c0 02             	add    eax,0x2
c001ded2:	c1 e0 07             	shl    eax,0x7
c001ded5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ded9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dedd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dee1:	c1 e0 07             	shl    eax,0x7
c001dee4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dee8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001deec:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001def6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001defa:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df00:	e8 ff e4 ff ff       	call   c001c404 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001df05:	83 c4 10             	add    esp,0x10
c001df08:	89 c2                	mov    edx,eax
c001df0a:	b8 01 00 00 00       	mov    eax,0x1
c001df0f:	83 fa ff             	cmp    edx,0xffffffff
c001df12:	0f 84 5f 02 00 00    	je     c001e177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001df18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001df1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df20:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df26:	8b 00                	mov    eax,DWORD PTR [eax]
c001df28:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001df2e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001df34:	89 d1                	mov    ecx,edx
c001df36:	c1 e1 05             	shl    ecx,0x5
c001df39:	01 c8                	add    eax,ecx
c001df3b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001df3d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001df43:	81 c9 25 00 01 00    	or     ecx,0x10025
c001df49:	89 08                	mov    DWORD PTR [eax],ecx
c001df4b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df51:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001df57:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001df5d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001df60:	50                   	push   eax
c001df61:	68 90 00 00 00       	push   0x90
c001df66:	6a 00                	push   0x0
c001df68:	53                   	push   ebx
c001df69:	e8 82 25 fe ff       	call   c00004f0 <memset>
c001df6e:	8d 7b 40             	lea    edi,[ebx+0x40]
c001df71:	b9 0c 00 00 00       	mov    ecx,0xc
c001df76:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001df7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df7c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001df82:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001df86:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001df8a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001df90:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df94:	48                   	dec    eax
c001df95:	25 ff ff 3f 00       	and    eax,0x3fffff
c001df9a:	89 c1                	mov    ecx,eax
c001df9c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dfa2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dfa7:	09 c8                	or     eax,ecx
c001dfa9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001dfaf:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001dfb5:	83 c8 80             	or     eax,0xffffff80
c001dfb8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001dfbe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001dfc1:	25 00 7f 00 00       	and    eax,0x7f00
c001dfc6:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dfcb:	66 89 03             	mov    WORD PTR [ebx],ax
c001dfce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c001dfd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfda:	c1 e8 10             	shr    eax,0x10
c001dfdd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001dfe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfe4:	c1 e8 18             	shr    eax,0x18
c001dfe7:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c001dfea:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001dfee:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001dff1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dff5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001dff8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001dffc:	83 c4 10             	add    esp,0x10
c001dfff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e003:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e007:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e00b:	31 c0                	xor    eax,eax
c001e00d:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c001e013:	80 e1 88             	and    cl,0x88
c001e016:	74 0a                	je     c001e022 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c001e018:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e01d:	74 0a                	je     c001e029 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c001e01f:	40                   	inc    eax
c001e020:	eb eb                	jmp    c001e00d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c001e022:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e027:	75 43                	jne    c001e06c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c001e029:	83 ec 0c             	sub    esp,0xc
c001e02c:	68 40 2e 02 c0       	push   0xc0022e40
c001e031:	e8 d4 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e036:	58                   	pop    eax
c001e037:	5a                   	pop    edx
c001e038:	68 55 2e 02 c0       	push   0xc0022e55
c001e03d:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e043:	e8 64 aa fe ff       	call   c0008aac <VgaText::puts(char const*)>
c001e048:	59                   	pop    ecx
c001e049:	5b                   	pop    ebx
c001e04a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e04e:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e054:	e8 45 e4 ff ff       	call   c001c49e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e059:	5e                   	pop    esi
c001e05a:	5f                   	pop    edi
c001e05b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e05f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e065:	e8 14 e4 ff ff       	call   c001c47e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e06a:	eb 48                	jmp    c001e0b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c001e06c:	b8 01 00 00 00       	mov    eax,0x1
c001e071:	88 d1                	mov    cl,dl
c001e073:	d3 e0                	shl    eax,cl
c001e075:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c001e07a:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c001e080:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e084:	89 c7                	mov    edi,eax
c001e086:	c1 e3 07             	shl    ebx,0x7
c001e089:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001e08d:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c001e093:	85 c7                	test   edi,eax
c001e095:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c001e09b:	0f 84 a3 00 00 00    	je     c001e144 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c001e0a1:	0f ba e0 1e          	bt     eax,0x1e
c001e0a5:	73 1a                	jae    c001e0c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c001e0a7:	83 ec 0c             	sub    esp,0xc
c001e0aa:	68 67 2e 02 c0       	push   0xc0022e67
c001e0af:	e8 56 c8 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e0b4:	83 c4 10             	add    esp,0x10
c001e0b7:	b8 01 00 00 00       	mov    eax,0x1
c001e0bc:	e9 b6 00 00 00       	jmp    c001e177 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c001e0c1:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c001e0c7:	83 f8 0d             	cmp    eax,0xd
c001e0ca:	77 0a                	ja     c001e0d6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c001e0cc:	83 ec 0c             	sub    esp,0xc
c001e0cf:	68 c8 00 00 00       	push   0xc8
c001e0d4:	eb 28                	jmp    c001e0fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e0d6:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c001e0dc:	83 f8 0d             	cmp    eax,0xd
c001e0df:	77 0a                	ja     c001e0eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c001e0e1:	83 ec 0c             	sub    esp,0xc
c001e0e4:	68 58 02 00 00       	push   0x258
c001e0e9:	eb 13                	jmp    c001e0fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e0eb:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c001e0f1:	83 f8 06             	cmp    eax,0x6
c001e0f4:	77 10                	ja     c001e106 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c001e0f6:	83 ec 0c             	sub    esp,0xc
c001e0f9:	68 dc 05 00 00       	push   0x5dc
c001e0fe:	e8 69 7d ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001e103:	83 c4 10             	add    esp,0x10
c001e106:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e10a:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e10d:	75 06                	jne    c001e115 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c001e10f:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e113:	74 15                	je     c001e12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e115:	83 fe 06             	cmp    esi,0x6
c001e118:	77 10                	ja     c001e12a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c001e11a:	83 ec 0c             	sub    esp,0xc
c001e11d:	68 c4 09 00 00       	push   0x9c4
c001e122:	e8 45 7d ff ff       	call   c0015e6c <milliTenthSleep(unsigned int)>
c001e127:	83 c4 10             	add    esp,0x10
c001e12a:	46                   	inc    esi
c001e12b:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c001e131:	0f 85 56 ff ff ff    	jne    c001e08d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c001e137:	83 ec 0c             	sub    esp,0xc
c001e13a:	68 7a 2e 02 c0       	push   0xc0022e7a
c001e13f:	e9 6b ff ff ff       	jmp    c001e0af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e144:	0f ba e0 1e          	bt     eax,0x1e
c001e148:	73 0d                	jae    c001e157 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c001e14a:	83 ec 0c             	sub    esp,0xc
c001e14d:	68 8e 2e 02 c0       	push   0xc0022e8e
c001e152:	e9 58 ff ff ff       	jmp    c001e0af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001e157:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e15c:	74 17                	je     c001e175 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e15e:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e163:	74 10                	je     c001e175 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c001e165:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e16b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e16f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e173:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e175:	31 c0                	xor    eax,eax
c001e177:	83 c4 2c             	add    esp,0x2c
c001e17a:	5b                   	pop    ebx
c001e17b:	5e                   	pop    esi
c001e17c:	5f                   	pop    edi
c001e17d:	5d                   	pop    ebp
c001e17e:	c3                   	ret    
c001e17f:	90                   	nop

c001e180 <SATAPI::eject()>:
c001e180:	57                   	push   edi
c001e181:	b9 03 00 00 00       	mov    ecx,0x3
c001e186:	83 ec 18             	sub    esp,0x18
c001e189:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e18d:	fc                   	cld    
c001e18e:	31 c0                	xor    eax,eax
c001e190:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e192:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e197:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e19c:	50                   	push   eax
c001e19d:	6a 00                	push   0x0
c001e19f:	6a 00                	push   0x0
c001e1a1:	6a 00                	push   0x0
c001e1a3:	6a 00                	push   0x0
c001e1a5:	6a 02                	push   0x2
c001e1a7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e1ab:	50                   	push   eax
c001e1ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1b0:	e8 e5 fc ff ff       	call   c001de9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e1b5:	83 c4 38             	add    esp,0x38
c001e1b8:	31 c0                	xor    eax,eax
c001e1ba:	5f                   	pop    edi
c001e1bb:	c3                   	ret    

c001e1bc <SATAPI::detectMedia()>:
c001e1bc:	53                   	push   ebx
c001e1bd:	83 ec 14             	sub    esp,0x14
c001e1c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e1c4:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e1ca:	e8 35 02 ff ff       	call   c000e404 <VCache::writeWriteBuffer()>
c001e1cf:	59                   	pop    ecx
c001e1d0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e1d6:	e8 19 02 ff ff       	call   c000e3f4 <VCache::invalidateReadBuffer()>
c001e1db:	c7 04 24 a3 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ea3
c001e1e2:	e8 23 c7 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e1e7:	83 c4 10             	add    esp,0x10
c001e1ea:	31 c0                	xor    eax,eax
c001e1ec:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e1f3:	85 d2                	test   edx,edx
c001e1f5:	74 0f                	je     c001e206 <SATAPI::detectMedia()+0x4a>
c001e1f7:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e1fd:	75 07                	jne    c001e206 <SATAPI::detectMedia()+0x4a>
c001e1ff:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e206:	40                   	inc    eax
c001e207:	83 f8 1a             	cmp    eax,0x1a
c001e20a:	75 e0                	jne    c001e1ec <SATAPI::detectMedia()+0x30>
c001e20c:	83 c4 08             	add    esp,0x8
c001e20f:	5b                   	pop    ebx
c001e210:	c3                   	ret    
c001e211:	90                   	nop

c001e212 <SATAPI::open(int, int, void*)>:
c001e212:	56                   	push   esi
c001e213:	53                   	push   ebx
c001e214:	51                   	push   ecx
c001e215:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e219:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e21d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e227:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e22d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e231:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e23b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e245:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e24c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e252:	e8 8b 9b fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e257:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e25d:	89 c6                	mov    esi,eax
c001e25f:	e8 7e 9b fe ff       	call   c0007de2 <Phys::allocatePage()>
c001e264:	81 c6 00 10 00 00    	add    esi,0x1000
c001e26a:	39 c6                	cmp    esi,eax
c001e26c:	74 10                	je     c001e27e <SATAPI::open(int, int, void*)+0x6c>
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	68 b8 2e 02 c0       	push   0xc0022eb8
c001e276:	e8 d2 2f ff ff       	call   c001124d <KePanic(char const*)>
c001e27b:	83 c4 10             	add    esp,0x10
c001e27e:	83 ec 0c             	sub    esp,0xc
c001e281:	6a 02                	push   0x2
c001e283:	e8 6d b3 fe ff       	call   c00095f5 <Virt::allocateKernelVirtualPages(int)>
c001e288:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e28e:	6a 03                	push   0x3
c001e290:	50                   	push   eax
c001e291:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e297:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e29d:	e8 5c ba fe ff       	call   c0009cfe <VAS::mapPage(unsigned long, unsigned long, int)>
c001e2a2:	83 c4 14             	add    esp,0x14
c001e2a5:	68 78 01 00 00       	push   0x178
c001e2aa:	e8 24 98 fe ff       	call   c0007ad3 <malloc>
c001e2af:	83 c4 0c             	add    esp,0xc
c001e2b2:	6a 00                	push   0x0
c001e2b4:	68 ff ff ff 7f       	push   0x7fffffff
c001e2b9:	6a 00                	push   0x0
c001e2bb:	6a 00                	push   0x0
c001e2bd:	53                   	push   ebx
c001e2be:	68 ce 2e 02 c0       	push   0xc0022ece
c001e2c3:	89 c6                	mov    esi,eax
c001e2c5:	50                   	push   eax
c001e2c6:	e8 93 f5 fe ff       	call   c000d85e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e2cb:	83 c4 14             	add    esp,0x14
c001e2ce:	56                   	push   esi
c001e2cf:	e8 4a f6 fe ff       	call   c000d91e <LogicalDisk::assignDriveLetter()>
c001e2d4:	5a                   	pop    edx
c001e2d5:	59                   	pop    ecx
c001e2d6:	0f be c0             	movsx  eax,al
c001e2d9:	50                   	push   eax
c001e2da:	68 20 2d 02 c0       	push   0xc0022d20
c001e2df:	e8 26 c6 fe ff       	call   c000a90a <Dbg::kprintf(char const*, ...)>
c001e2e4:	58                   	pop    eax
c001e2e5:	5a                   	pop    edx
c001e2e6:	56                   	push   esi
c001e2e7:	53                   	push   ebx
c001e2e8:	e8 c3 e3 fe ff       	call   c000c6b0 <Device::addChild(Device*)>
c001e2ed:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e2f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2f6:	e8 eb e7 fe ff       	call   c000cae6 <PhysicalDisk::startCache()>
c001e2fb:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e302:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e305:	e8 b2 fe ff ff       	call   c001e1bc <SATAPI::detectMedia()>
c001e30a:	83 c4 14             	add    esp,0x14
c001e30d:	31 c0                	xor    eax,eax
c001e30f:	5b                   	pop    ebx
c001e310:	5e                   	pop    esi
c001e311:	c3                   	ret    

c001e312 <SATAPI::read(unsigned long long, int, void*)>:
c001e312:	55                   	push   ebp
c001e313:	57                   	push   edi
c001e314:	56                   	push   esi
c001e315:	53                   	push   ebx
c001e316:	83 ec 3c             	sub    esp,0x3c
c001e319:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001e31d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e321:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e325:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e329:	83 fd 04             	cmp    ebp,0x4
c001e32c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e330:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e334:	7e 10                	jle    c001e346 <SATAPI::read(unsigned long long, int, void*)+0x34>
c001e336:	83 ec 0c             	sub    esp,0xc
c001e339:	68 dc 2e 02 c0       	push   0xc0022edc
c001e33e:	e8 0a 2f ff ff       	call   c001124d <KePanic(char const*)>
c001e343:	83 c4 10             	add    esp,0x10
c001e346:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e34c:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e352:	51                   	push   ecx
c001e353:	50                   	push   eax
c001e354:	83 c0 02             	add    eax,0x2
c001e357:	c1 e0 07             	shl    eax,0x7
c001e35a:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e360:	50                   	push   eax
c001e361:	52                   	push   edx
c001e362:	e8 61 e1 ff ff       	call   c001c4c8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e367:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e36b:	b9 03 00 00 00       	mov    ecx,0x3
c001e370:	fc                   	cld    
c001e371:	31 c0                	xor    eax,eax
c001e373:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e375:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e37a:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e37f:	83 c4 0c             	add    esp,0xc
c001e382:	6a 00                	push   0x0
c001e384:	6a 00                	push   0x0
c001e386:	6a 00                	push   0x0
c001e388:	6a 00                	push   0x0
c001e38a:	6a 02                	push   0x2
c001e38c:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e390:	50                   	push   eax
c001e391:	53                   	push   ebx
c001e392:	e8 03 fb ff ff       	call   c001de9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e397:	83 c4 20             	add    esp,0x20
c001e39a:	85 c0                	test   eax,eax
c001e39c:	89 c6                	mov    esi,eax
c001e39e:	75 46                	jne    c001e3e6 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c001e3a0:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e3a4:	b9 03 00 00 00       	mov    ecx,0x3
c001e3a9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3af:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e3b4:	0f c8                	bswap  eax
c001e3b6:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e3ba:	89 e8                	mov    eax,ebp
c001e3bc:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e3c0:	50                   	push   eax
c001e3c1:	55                   	push   ebp
c001e3c2:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c001e3c6:	c1 e5 0b             	shl    ebp,0xb
c001e3c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3d1:	55                   	push   ebp
c001e3d2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e3d6:	50                   	push   eax
c001e3d7:	53                   	push   ebx
c001e3d8:	e8 bd fa ff ff       	call   c001de9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e3dd:	83 c4 20             	add    esp,0x20
c001e3e0:	85 c0                	test   eax,eax
c001e3e2:	89 c6                	mov    esi,eax
c001e3e4:	74 0c                	je     c001e3f2 <SATAPI::read(unsigned long long, int, void*)+0xe0>
c001e3e6:	83 ec 0c             	sub    esp,0xc
c001e3e9:	53                   	push   ebx
c001e3ea:	e8 cd fd ff ff       	call   c001e1bc <SATAPI::detectMedia()>
c001e3ef:	83 c4 10             	add    esp,0x10
c001e3f2:	83 c4 3c             	add    esp,0x3c
c001e3f5:	89 f0                	mov    eax,esi
c001e3f7:	5b                   	pop    ebx
c001e3f8:	5e                   	pop    esi
c001e3f9:	5f                   	pop    edi
c001e3fa:	5d                   	pop    ebp
c001e3fb:	c3                   	ret    

c001e3fc <IOAPIC::close(int, int, void*)>:
c001e3fc:	b8 00 00 00 00       	mov    eax,0x0
c001e401:	c3                   	ret    

c001e402 <apicGetBase()>:
c001e402:	55                   	push   ebp
c001e403:	89 e5                	mov    ebp,esp
c001e405:	83 ec 18             	sub    esp,0x18
c001e408:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e40d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e413:	83 e0 08             	and    eax,0x8
c001e416:	0f b6 c0             	movzx  eax,al
c001e419:	85 c0                	test   eax,eax
c001e41b:	75 07                	jne    c001e424 <apicGetBase()+0x22>
c001e41d:	b8 00 00 00 00       	mov    eax,0x0
c001e422:	eb 21                	jmp    c001e445 <apicGetBase()+0x43>
c001e424:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e429:	83 ec 08             	sub    esp,0x8
c001e42c:	6a 1b                	push   0x1b
c001e42e:	50                   	push   eax
c001e42f:	e8 ae 8c fe ff       	call   c00070e2 <Computer::rdmsr(unsigned int)>
c001e434:	83 c4 10             	add    esp,0x10
c001e437:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e43a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e43d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e440:	25 00 00 ff ff       	and    eax,0xffff0000
c001e445:	c9                   	leave  
c001e446:	c3                   	ret    
c001e447:	90                   	nop

c001e448 <IOAPIC::IOAPIC()>:
c001e448:	83 ec 0c             	sub    esp,0xc
c001e44b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44f:	83 ec 08             	sub    esp,0x8
c001e452:	68 40 2f 02 c0       	push   0xc0022f40
c001e457:	50                   	push   eax
c001e458:	e8 eb e3 fe ff       	call   c000c848 <Device::Device(char const*)>
c001e45d:	83 c4 10             	add    esp,0x10
c001e460:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001e465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e469:	89 10                	mov    DWORD PTR [eax],edx
c001e46b:	90                   	nop
c001e46c:	83 c4 0c             	add    esp,0xc
c001e46f:	c3                   	ret    

c001e470 <apicOpen()>:
c001e470:	55                   	push   ebp
c001e471:	89 e5                	mov    ebp,esp
c001e473:	53                   	push   ebx
c001e474:	83 ec 34             	sub    esp,0x34
c001e477:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e47c:	83 f0 01             	xor    eax,0x1
c001e47f:	0f b6 c0             	movzx  eax,al
c001e482:	85 c0                	test   eax,eax
c001e484:	0f 84 a3 00 00 00    	je     c001e52d <apicOpen()+0xbd>
c001e48a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e48e:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e493:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e497:	0f b6 c0             	movzx  eax,al
c001e49a:	39 c2                	cmp    edx,eax
c001e49c:	0f 83 84 00 00 00    	jae    c001e526 <apicOpen()+0xb6>
c001e4a2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e4a9:	83 ec 0c             	sub    esp,0xc
c001e4ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e4af:	e8 1f 96 fe ff       	call   c0007ad3 <malloc>
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	89 c3                	mov    ebx,eax
c001e4b9:	83 ec 0c             	sub    esp,0xc
c001e4bc:	53                   	push   ebx
c001e4bd:	e8 86 ff ff ff       	call   c001e448 <IOAPIC::IOAPIC()>
c001e4c2:	83 c4 10             	add    esp,0x10
c001e4c5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e4c8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e4cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e4cf:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e4d6:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e4db:	83 c0 01             	add    eax,0x1
c001e4de:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e4e3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4e8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e4ee:	83 ec 08             	sub    esp,0x8
c001e4f1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e4f4:	50                   	push   eax
c001e4f5:	e8 b6 e1 fe ff       	call   c000c6b0 <Device::addChild(Device*)>
c001e4fa:	83 c4 10             	add    esp,0x10
c001e4fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e500:	8b 00                	mov    eax,DWORD PTR [eax]
c001e502:	83 c0 08             	add    eax,0x8
c001e505:	8b 00                	mov    eax,DWORD PTR [eax]
c001e507:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e50b:	6a 00                	push   0x0
c001e50d:	6a 00                	push   0x0
c001e50f:	52                   	push   edx
c001e510:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e513:	ff d0                	call   eax
c001e515:	83 c4 10             	add    esp,0x10
c001e518:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e51b:	83 c0 01             	add    eax,0x1
c001e51e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e521:	e9 68 ff ff ff       	jmp    c001e48e <apicOpen()+0x1e>
c001e526:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e52d:	e8 d0 fe ff ff       	call   c001e402 <apicGetBase()>
c001e532:	05 f0 00 00 00       	add    eax,0xf0
c001e537:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e53a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e53d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e53f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e542:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e549:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e550:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e553:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e556:	89 10                	mov    DWORD PTR [eax],edx
c001e558:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e55f:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e564:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e567:	7d 7c                	jge    c001e5e5 <apicOpen()+0x175>
c001e569:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e56c:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e573:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e576:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e579:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e580:	c1 e8 08             	shr    eax,0x8
c001e583:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e587:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e58a:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e591:	c1 e8 18             	shr    eax,0x18
c001e594:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e597:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e59b:	3d ff 00 00 00       	cmp    eax,0xff
c001e5a0:	75 3a                	jne    c001e5dc <apicOpen()+0x16c>
c001e5a2:	e8 5b fe ff ff       	call   c001e402 <apicGetBase()>
c001e5a7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e5ab:	83 fa 01             	cmp    edx,0x1
c001e5ae:	75 07                	jne    c001e5b7 <apicOpen()+0x147>
c001e5b0:	ba 60 03 00 00       	mov    edx,0x360
c001e5b5:	eb 05                	jmp    c001e5bc <apicOpen()+0x14c>
c001e5b7:	ba 50 03 00 00       	mov    edx,0x350
c001e5bc:	01 d0                	add    eax,edx
c001e5be:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e5c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e5c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5c6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e5c9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e5d0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e5d4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e5d7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e5da:	89 10                	mov    DWORD PTR [eax],edx
c001e5dc:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e5e0:	e9 7a ff ff ff       	jmp    c001e55f <apicOpen()+0xef>
c001e5e5:	90                   	nop
c001e5e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e5e9:	c9                   	leave  
c001e5ea:	c3                   	ret    
c001e5eb:	90                   	nop

c001e5ec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e5ec:	55                   	push   ebp
c001e5ed:	89 e5                	mov    ebp,esp
c001e5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5f8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5fb:	72 1d                	jb     c001e61a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e600:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e609:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e60f:	01 d0                	add    eax,edx
c001e611:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e614:	73 04                	jae    c001e61a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e616:	b0 01                	mov    al,0x1
c001e618:	eb 02                	jmp    c001e61c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e61a:	b0 00                	mov    al,0x0
c001e61c:	5d                   	pop    ebp
c001e61d:	c3                   	ret    

c001e61e <IOAPIC::read(int)>:
c001e61e:	55                   	push   ebp
c001e61f:	89 e5                	mov    ebp,esp
c001e621:	83 ec 10             	sub    esp,0x10
c001e624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e627:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e62d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e630:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e633:	0f b6 d0             	movzx  edx,al
c001e636:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e639:	89 10                	mov    DWORD PTR [eax],edx
c001e63b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e63e:	83 c0 10             	add    eax,0x10
c001e641:	8b 00                	mov    eax,DWORD PTR [eax]
c001e643:	c9                   	leave  
c001e644:	c3                   	ret    
c001e645:	90                   	nop

c001e646 <IOAPIC::open(int, int, void*)>:
c001e646:	55                   	push   ebp
c001e647:	89 e5                	mov    ebp,esp
c001e649:	57                   	push   edi
c001e64a:	56                   	push   esi
c001e64b:	53                   	push   ebx
c001e64c:	83 ec 04             	sub    esp,0x4
c001e64f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e652:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e655:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e65e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e664:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e66e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e677:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e67d:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e687:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e690:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e699:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e69f:	0f b6 f0             	movzx  esi,al
c001e6a2:	89 d0                	mov    eax,edx
c001e6a4:	ba 00 00 00 00       	mov    edx,0x0
c001e6a9:	89 c7                	mov    edi,eax
c001e6ab:	83 e7 ff             	and    edi,0xffffffff
c001e6ae:	89 f9                	mov    ecx,edi
c001e6b0:	0f b6 da             	movzx  ebx,dl
c001e6b3:	89 c8                	mov    eax,ecx
c001e6b5:	89 da                	mov    edx,ebx
c001e6b7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6ba:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e6bd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e6c1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e6c5:	83 e0 00             	and    eax,0x0
c001e6c8:	09 d0                	or     eax,edx
c001e6ca:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e6ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6d7:	8d 50 01             	lea    edx,[eax+0x1]
c001e6da:	88 d1                	mov    cl,dl
c001e6dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e6df:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e6e5:	0f b6 d0             	movzx  edx,al
c001e6e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6eb:	83 c2 08             	add    edx,0x8
c001e6ee:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6f2:	0f b6 c9             	movzx  ecx,cl
c001e6f5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6fb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6ff:	6a 01                	push   0x1
c001e701:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e704:	e8 15 ff ff ff       	call   c001e61e <IOAPIC::read(int)>
c001e709:	83 c4 08             	add    esp,0x8
c001e70c:	c1 f8 10             	sar    eax,0x10
c001e70f:	0f b6 c0             	movzx  eax,al
c001e712:	8d 50 01             	lea    edx,[eax+0x1]
c001e715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e718:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e71e:	b8 00 00 00 00       	mov    eax,0x0
c001e723:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e726:	5b                   	pop    ebx
c001e727:	5e                   	pop    esi
c001e728:	5f                   	pop    edi
c001e729:	5d                   	pop    ebp
c001e72a:	c3                   	ret    
c001e72b:	90                   	nop

c001e72c <IOAPIC::write(int, int)>:
c001e72c:	55                   	push   ebp
c001e72d:	89 e5                	mov    ebp,esp
c001e72f:	83 ec 10             	sub    esp,0x10
c001e732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e735:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e73b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e73e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e741:	0f b6 d0             	movzx  edx,al
c001e744:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e747:	89 10                	mov    DWORD PTR [eax],edx
c001e749:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e74c:	8d 50 10             	lea    edx,[eax+0x10]
c001e74f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e752:	89 02                	mov    DWORD PTR [edx],eax
c001e754:	90                   	nop
c001e755:	c9                   	leave  
c001e756:	c3                   	ret    
c001e757:	90                   	nop

c001e758 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e758:	55                   	push   ebp
c001e759:	89 e5                	mov    ebp,esp
c001e75b:	53                   	push   ebx
c001e75c:	83 ec 2c             	sub    esp,0x2c
c001e75f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e762:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e765:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e768:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e76b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e76e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e771:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e774:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e777:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e77a:	88 d8                	mov    al,bl
c001e77c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e77f:	88 c8                	mov    al,cl
c001e781:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e784:	88 d0                	mov    al,dl
c001e786:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e789:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e78d:	83 c0 08             	add    eax,0x8
c001e790:	d1 e0                	shl    eax,1
c001e792:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e795:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e799:	83 c0 08             	add    eax,0x8
c001e79c:	d1 e0                	shl    eax,1
c001e79e:	83 c0 01             	add    eax,0x1
c001e7a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e7a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e7a7:	50                   	push   eax
c001e7a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7ab:	e8 6e fe ff ff       	call   c001e61e <IOAPIC::read(int)>
c001e7b0:	83 c4 08             	add    esp,0x8
c001e7b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e7b6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e7bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e7c0:	c1 e0 18             	shl    eax,0x18
c001e7c3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e7c6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e7c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e7cc:	52                   	push   edx
c001e7cd:	50                   	push   eax
c001e7ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7d1:	e8 56 ff ff ff       	call   c001e72c <IOAPIC::write(int, int)>
c001e7d6:	83 c4 0c             	add    esp,0xc
c001e7d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7dc:	50                   	push   eax
c001e7dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7e0:	e8 39 fe ff ff       	call   c001e61e <IOAPIC::read(int)>
c001e7e5:	83 c4 08             	add    esp,0x8
c001e7e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e7eb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e7f2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e7f9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e800:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e804:	85 c0                	test   eax,eax
c001e806:	74 09                	je     c001e811 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e808:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e80f:	eb 07                	jmp    c001e818 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e811:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e818:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e81c:	85 c0                	test   eax,eax
c001e81e:	74 09                	je     c001e829 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e820:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e827:	eb 07                	jmp    c001e830 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e829:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e830:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e837:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e83b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e83e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e841:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e844:	52                   	push   edx
c001e845:	50                   	push   eax
c001e846:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e849:	e8 de fe ff ff       	call   c001e72c <IOAPIC::write(int, int)>
c001e84e:	83 c4 0c             	add    esp,0xc
c001e851:	90                   	nop
c001e852:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e855:	c9                   	leave  
c001e856:	c3                   	ret    
c001e857:	90                   	nop

c001e858 <APICTimer::close(int, int, void*)>:
c001e858:	b8 00 00 00 00       	mov    eax,0x0
c001e85d:	c3                   	ret    
c001e85e:	66 90                	xchg   ax,ax

c001e860 <apicTimerHandler(regs*, void*)>:
c001e860:	83 ec 0c             	sub    esp,0xc
c001e863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e867:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e869:	b8 10 27 00 00       	mov    eax,0x2710
c001e86e:	ba 00 00 00 00       	mov    edx,0x0
c001e873:	f7 f1                	div    ecx
c001e875:	83 ec 0c             	sub    esp,0xc
c001e878:	50                   	push   eax
c001e879:	e8 9e f8 fe ff       	call   c000e11c <timerHandler(unsigned int)>
c001e87e:	83 c4 10             	add    esp,0x10
c001e881:	90                   	nop
c001e882:	83 c4 0c             	add    esp,0xc
c001e885:	c3                   	ret    
c001e886:	66 90                	xchg   ax,ax

c001e888 <APICTimer::open(int, int, void*)>:
c001e888:	83 ec 0c             	sub    esp,0xc
c001e88b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e88f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e891:	83 c0 24             	add    eax,0x24
c001e894:	8b 00                	mov    eax,DWORD PTR [eax]
c001e896:	83 ec 08             	sub    esp,0x8
c001e899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e89d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a1:	ff d0                	call   eax
c001e8a3:	83 c4 10             	add    esp,0x10
c001e8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8bc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e8c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e8cc:	83 ec 0c             	sub    esp,0xc
c001e8cf:	51                   	push   ecx
c001e8d0:	6a 01                	push   0x1
c001e8d2:	68 60 e8 01 c0       	push   0xc001e860
c001e8d7:	52                   	push   edx
c001e8d8:	50                   	push   eax
c001e8d9:	e8 7e dd fe ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8de:	83 c4 20             	add    esp,0x20
c001e8e1:	89 c2                	mov    edx,eax
c001e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e8ed:	b8 00 00 00 00       	mov    eax,0x0
c001e8f2:	83 c4 0c             	add    esp,0xc
c001e8f5:	c3                   	ret    
c001e8f6:	66 90                	xchg   ax,ax

c001e8f8 <APICTimer::write(int)>:
c001e8f8:	83 ec 0c             	sub    esp,0xc
c001e8fb:	83 ec 0c             	sub    esp,0xc
c001e8fe:	68 74 2f 02 c0       	push   0xc0022f74
c001e903:	e8 45 29 ff ff       	call   c001124d <KePanic(char const*)>
c001e908:	83 c4 10             	add    esp,0x10
c001e90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e913:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e919:	90                   	nop
c001e91a:	83 c4 0c             	add    esp,0xc
c001e91d:	c3                   	ret    
c001e91e:	66 90                	xchg   ax,ax

c001e920 <APICTimer::APICTimer()>:
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e927:	83 ec 08             	sub    esp,0x8
c001e92a:	68 84 2f 02 c0       	push   0xc0022f84
c001e92f:	50                   	push   eax
c001e930:	e8 1b f7 fe ff       	call   c000e050 <Timer::Timer(char const*)>
c001e935:	83 c4 10             	add    esp,0x10
c001e938:	ba 98 2f 02 c0       	mov    edx,0xc0022f98
c001e93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e941:	89 10                	mov    DWORD PTR [eax],edx
c001e943:	90                   	nop
c001e944:	83 c4 0c             	add    esp,0xc
c001e947:	c3                   	ret    

c001e948 <PIT::write(int)>:
c001e948:	83 ec 10             	sub    esp,0x10
c001e94b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e94f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e953:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e959:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e95d:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e962:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e967:	89 c2                	mov    edx,eax
c001e969:	c1 fa 1f             	sar    edx,0x1f
c001e96c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e970:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e974:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e97b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e980:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e984:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e989:	ee                   	out    dx,al
c001e98a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e98e:	0f b6 c0             	movzx  eax,al
c001e991:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e998:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e99c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e9a0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e9a5:	ee                   	out    dx,al
c001e9a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9aa:	c1 f8 08             	sar    eax,0x8
c001e9ad:	0f b6 c0             	movzx  eax,al
c001e9b0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e9b7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e9bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e9bf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e9c4:	ee                   	out    dx,al
c001e9c5:	90                   	nop
c001e9c6:	83 c4 10             	add    esp,0x10
c001e9c9:	c3                   	ret    
c001e9ca:	66 90                	xchg   ax,ax

c001e9cc <pitHandler(regs*, void*)>:
c001e9cc:	83 ec 0c             	sub    esp,0xc
c001e9cf:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e9d5:	b8 10 27 00 00       	mov    eax,0x2710
c001e9da:	89 c2                	mov    edx,eax
c001e9dc:	c1 fa 1f             	sar    edx,0x1f
c001e9df:	f7 f9                	idiv   ecx
c001e9e1:	83 ec 0c             	sub    esp,0xc
c001e9e4:	50                   	push   eax
c001e9e5:	e8 32 f7 fe ff       	call   c000e11c <timerHandler(unsigned int)>
c001e9ea:	83 c4 10             	add    esp,0x10
c001e9ed:	90                   	nop
c001e9ee:	83 c4 0c             	add    esp,0xc
c001e9f1:	c3                   	ret    
c001e9f2:	66 90                	xchg   ax,ax

c001e9f4 <PIT::open(int, int, void*)>:
c001e9f4:	83 ec 0c             	sub    esp,0xc
c001e9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fd:	83 c0 24             	add    eax,0x24
c001ea00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea02:	83 ec 08             	sub    esp,0x8
c001ea05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea0d:	ff d0                	call   eax
c001ea0f:	83 c4 10             	add    esp,0x10
c001ea12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea16:	83 ec 0c             	sub    esp,0xc
c001ea19:	6a 00                	push   0x0
c001ea1b:	6a 01                	push   0x1
c001ea1d:	68 cc e9 01 c0       	push   0xc001e9cc
c001ea22:	6a 00                	push   0x0
c001ea24:	50                   	push   eax
c001ea25:	e8 32 dc fe ff       	call   c000c65c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea2a:	83 c4 20             	add    esp,0x20
c001ea2d:	89 c2                	mov    edx,eax
c001ea2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea39:	b8 00 00 00 00       	mov    eax,0x0
c001ea3e:	83 c4 0c             	add    esp,0xc
c001ea41:	c3                   	ret    
c001ea42:	66 90                	xchg   ax,ax

c001ea44 <PIT::close(int, int, void*)>:
c001ea44:	83 ec 0c             	sub    esp,0xc
c001ea47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ea55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea59:	6a 01                	push   0x1
c001ea5b:	68 cc e9 01 c0       	push   0xc001e9cc
c001ea60:	6a 00                	push   0x0
c001ea62:	50                   	push   eax
c001ea63:	e8 2a dc fe ff       	call   c000c692 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ea68:	83 c4 10             	add    esp,0x10
c001ea6b:	b8 00 00 00 00       	mov    eax,0x0
c001ea70:	83 c4 0c             	add    esp,0xc
c001ea73:	c3                   	ret    

c001ea74 <PIT::PIT()>:
c001ea74:	83 ec 0c             	sub    esp,0xc
c001ea77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7b:	83 ec 08             	sub    esp,0x8
c001ea7e:	68 c0 2f 02 c0       	push   0xc0022fc0
c001ea83:	50                   	push   eax
c001ea84:	e8 c7 f5 fe ff       	call   c000e050 <Timer::Timer(char const*)>
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	ba e8 2f 02 c0       	mov    edx,0xc0022fe8
c001ea91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea95:	89 10                	mov    DWORD PTR [eax],edx
c001ea97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eaa1:	0f b6 d0             	movzx  edx,al
c001eaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eab9:	0f b6 d0             	movzx  edx,al
c001eabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eacf:	8d 50 01             	lea    edx,[eax+0x1]
c001ead2:	88 d1                	mov    cl,dl
c001ead4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ead8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eade:	0f b6 d0             	movzx  edx,al
c001eae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eae9:	83 e1 3f             	and    ecx,0x3f
c001eaec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eaf0:	90                   	nop
c001eaf1:	83 c4 0c             	add    esp,0xc
c001eaf4:	c3                   	ret    
c001eaf5:	66 90                	xchg   ax,ax
c001eaf7:	66 90                	xchg   ax,ax
c001eaf9:	66 90                	xchg   ax,ax
c001eafb:	66 90                	xchg   ax,ax
c001eafd:	66 90                	xchg   ax,ax
c001eaff:	90                   	nop

c001eb00 <avxDetect>:
c001eb00:	b8 01 00 00 00       	mov    eax,0x1
c001eb05:	0f a2                	cpuid  
c001eb07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eb0d:	74 15                	je     c001eb24 <avxDetect.noAVX>
c001eb0f:	b8 01 00 00 00       	mov    eax,0x1
c001eb14:	0f a2                	cpuid  
c001eb16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eb1c:	74 06                	je     c001eb24 <avxDetect.noAVX>
c001eb1e:	b8 01 00 00 00       	mov    eax,0x1
c001eb23:	c3                   	ret    

c001eb24 <avxDetect.noAVX>:
c001eb24:	b8 00 00 00 00       	mov    eax,0x0
c001eb29:	c3                   	ret    

c001eb2a <avxSave>:
c001eb2a:	53                   	push   ebx
c001eb2b:	52                   	push   edx
c001eb2c:	31 c0                	xor    eax,eax
c001eb2e:	48                   	dec    eax
c001eb2f:	89 c2                	mov    edx,eax
c001eb31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb35:	0f ae 23             	xsave  [ebx]
c001eb38:	5a                   	pop    edx
c001eb39:	5b                   	pop    ebx
c001eb3a:	c3                   	ret    

c001eb3b <avxLoad>:
c001eb3b:	53                   	push   ebx
c001eb3c:	52                   	push   edx
c001eb3d:	31 c0                	xor    eax,eax
c001eb3f:	48                   	dec    eax
c001eb40:	89 c2                	mov    edx,eax
c001eb42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb46:	0f ae 2b             	xrstor [ebx]
c001eb49:	5a                   	pop    edx
c001eb4a:	5b                   	pop    ebx
c001eb4b:	c3                   	ret    

c001eb4c <avxInit>:
c001eb4c:	e8 67 03 00 00       	call   c001eeb8 <sseInit>
c001eb51:	50                   	push   eax
c001eb52:	51                   	push   ecx
c001eb53:	0f 20 e0             	mov    eax,cr4
c001eb56:	0d 00 00 04 00       	or     eax,0x40000
c001eb5b:	0f 22 e0             	mov    cr4,eax
c001eb5e:	31 c9                	xor    ecx,ecx
c001eb60:	0f 01 d0             	xgetbv 
c001eb63:	0d 07 00 00 00       	or     eax,0x7
c001eb68:	0f 01 d1             	xsetbv 
c001eb6b:	59                   	pop    ecx
c001eb6c:	58                   	pop    eax
c001eb6d:	c3                   	ret    

c001eb6e <avxClose>:
c001eb6e:	c3                   	ret    

c001eb6f <wouldSheSayYes>:
c001eb6f:	c3                   	ret    
c001eb70:	49                   	dec    ecx
c001eb71:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eb75:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eb79:	75 20                	jne    c001eb9b <isr0+0xb>
c001eb7b:	4e                   	dec    esi
c001eb7c:	79 61                	jns    c001ebdf <isr7+0x3>
c001eb7e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eb83:	66 90                	xchg   ax,ax
c001eb85:	66 90                	xchg   ax,ax
c001eb87:	66 90                	xchg   ax,ax
c001eb89:	66 90                	xchg   ax,ax
c001eb8b:	66 90                	xchg   ax,ax
c001eb8d:	66 90                	xchg   ax,ax
c001eb8f:	90                   	nop

c001eb90 <isr0>:
c001eb90:	fa                   	cli    
c001eb91:	68 00 00 00 00       	push   0x0
c001eb96:	68 00 00 00 00       	push   0x0
c001eb9b:	e9 56 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001eba0 <isr1>:
c001eba0:	fa                   	cli    
c001eba1:	6a 00                	push   0x0
c001eba3:	6a 01                	push   0x1
c001eba5:	e9 4c 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebaa <isr2>:
c001ebaa:	fa                   	cli    
c001ebab:	6a 00                	push   0x0
c001ebad:	6a 02                	push   0x2
c001ebaf:	e9 42 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebb4 <isr3>:
c001ebb4:	fa                   	cli    
c001ebb5:	6a 00                	push   0x0
c001ebb7:	6a 03                	push   0x3
c001ebb9:	e9 38 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebbe <isr4>:
c001ebbe:	fa                   	cli    
c001ebbf:	6a 00                	push   0x0
c001ebc1:	6a 04                	push   0x4
c001ebc3:	e9 2e 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebc8 <isr5>:
c001ebc8:	fa                   	cli    
c001ebc9:	6a 00                	push   0x0
c001ebcb:	6a 05                	push   0x5
c001ebcd:	e9 24 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebd2 <isr6>:
c001ebd2:	fa                   	cli    
c001ebd3:	6a 00                	push   0x0
c001ebd5:	6a 06                	push   0x6
c001ebd7:	e9 1a 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebdc <isr7>:
c001ebdc:	fa                   	cli    
c001ebdd:	6a 00                	push   0x0
c001ebdf:	6a 07                	push   0x7
c001ebe1:	e9 10 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebe6 <isr8>:
c001ebe6:	fa                   	cli    
c001ebe7:	6a 08                	push   0x8
c001ebe9:	e9 08 01 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebee <isr9>:
c001ebee:	fa                   	cli    
c001ebef:	6a 00                	push   0x0
c001ebf1:	6a 09                	push   0x9
c001ebf3:	e9 fe 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ebf8 <isr10>:
c001ebf8:	fa                   	cli    
c001ebf9:	6a 0a                	push   0xa
c001ebfb:	e9 f6 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec00 <isr11>:
c001ec00:	fa                   	cli    
c001ec01:	6a 0b                	push   0xb
c001ec03:	e9 ee 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec08 <isr12>:
c001ec08:	fa                   	cli    
c001ec09:	6a 0c                	push   0xc
c001ec0b:	e9 e6 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec10 <isr13>:
c001ec10:	fa                   	cli    
c001ec11:	6a 0d                	push   0xd
c001ec13:	53                   	push   ebx
c001ec14:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec18:	81 fb e6 ed 01 c0    	cmp    ebx,0xc001ede6
c001ec1e:	5b                   	pop    ebx
c001ec1f:	0f 84 c3 01 00 00    	je     c001ede8 <finishSignal2>
c001ec25:	e9 cc 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec2a <isr14>:
c001ec2a:	fa                   	cli    
c001ec2b:	6a 0e                	push   0xe
c001ec2d:	e9 c4 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec32 <isr15>:
c001ec32:	fa                   	cli    
c001ec33:	6a 00                	push   0x0
c001ec35:	6a 0f                	push   0xf
c001ec37:	e9 ba 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec3c <isr16>:
c001ec3c:	fa                   	cli    
c001ec3d:	6a 00                	push   0x0
c001ec3f:	6a 10                	push   0x10
c001ec41:	e9 b0 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec46 <isr17>:
c001ec46:	fa                   	cli    
c001ec47:	6a 00                	push   0x0
c001ec49:	6a 11                	push   0x11
c001ec4b:	e9 a6 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec50 <isr18>:
c001ec50:	fa                   	cli    
c001ec51:	6a 00                	push   0x0
c001ec53:	6a 12                	push   0x12
c001ec55:	e9 9c 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec5a <irq3>:
c001ec5a:	fa                   	cli    
c001ec5b:	6a 00                	push   0x0
c001ec5d:	6a 23                	push   0x23
c001ec5f:	e9 92 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec64 <irq4>:
c001ec64:	fa                   	cli    
c001ec65:	6a 00                	push   0x0
c001ec67:	6a 24                	push   0x24
c001ec69:	e9 88 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec6e <irq5>:
c001ec6e:	fa                   	cli    
c001ec6f:	6a 00                	push   0x0
c001ec71:	6a 25                	push   0x25
c001ec73:	e9 7e 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec78 <irq6>:
c001ec78:	fa                   	cli    
c001ec79:	6a 00                	push   0x0
c001ec7b:	6a 26                	push   0x26
c001ec7d:	e9 74 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec82 <irq7>:
c001ec82:	fa                   	cli    
c001ec83:	6a 00                	push   0x0
c001ec85:	6a 27                	push   0x27
c001ec87:	e9 6a 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec8c <irq8>:
c001ec8c:	fa                   	cli    
c001ec8d:	6a 00                	push   0x0
c001ec8f:	6a 28                	push   0x28
c001ec91:	e9 60 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ec96 <irq9>:
c001ec96:	fa                   	cli    
c001ec97:	6a 00                	push   0x0
c001ec99:	6a 29                	push   0x29
c001ec9b:	e9 56 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001eca0 <irq10>:
c001eca0:	fa                   	cli    
c001eca1:	6a 00                	push   0x0
c001eca3:	6a 2a                	push   0x2a
c001eca5:	e9 4c 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ecaa <irq11>:
c001ecaa:	fa                   	cli    
c001ecab:	6a 00                	push   0x0
c001ecad:	6a 2b                	push   0x2b
c001ecaf:	e9 42 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ecb4 <irq12>:
c001ecb4:	fa                   	cli    
c001ecb5:	6a 00                	push   0x0
c001ecb7:	6a 2c                	push   0x2c
c001ecb9:	e9 38 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ecbe <irq13>:
c001ecbe:	fa                   	cli    
c001ecbf:	6a 00                	push   0x0
c001ecc1:	6a 2d                	push   0x2d
c001ecc3:	e9 2e 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ecc8 <irq14>:
c001ecc8:	fa                   	cli    
c001ecc9:	6a 00                	push   0x0
c001eccb:	6a 2e                	push   0x2e
c001eccd:	e9 24 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ecd2 <irq15>:
c001ecd2:	fa                   	cli    
c001ecd3:	6a 00                	push   0x0
c001ecd5:	6a 2f                	push   0x2f
c001ecd7:	e9 1a 00 00 00       	jmp    c001ecf6 <int_common_stub>

c001ecdc <irq1>:
c001ecdc:	fa                   	cli    
c001ecdd:	6a 00                	push   0x0
c001ecdf:	6a 21                	push   0x21
c001ece1:	eb 13                	jmp    c001ecf6 <int_common_stub>

c001ece3 <irq2>:
c001ece3:	fa                   	cli    
c001ece4:	6a 00                	push   0x0
c001ece6:	6a 22                	push   0x22
c001ece8:	eb 0c                	jmp    c001ecf6 <int_common_stub>

c001ecea <isr96>:
c001ecea:	6a 00                	push   0x0
c001ecec:	6a 60                	push   0x60
c001ecee:	fb                   	sti    
c001ecef:	eb 37                	jmp    c001ed28 <syscall_common_stub>

c001ecf1 <irq0>:
c001ecf1:	fa                   	cli    
c001ecf2:	6a 00                	push   0x0
c001ecf4:	6a 20                	push   0x20

c001ecf6 <int_common_stub>:
c001ecf6:	60                   	pusha  
c001ecf7:	1e                   	push   ds
c001ecf8:	06                   	push   es
c001ecf9:	0f a0                	push   fs
c001ecfb:	0f a8                	push   gs
c001ecfd:	66 b8 10 00          	mov    ax,0x10
c001ed01:	66 8e d8             	mov    ds,ax
c001ed04:	66 8e c0             	mov    es,ax
c001ed07:	66 8e e0             	mov    fs,ax
c001ed0a:	66 8e e8             	mov    gs,ax
c001ed0d:	54                   	push   esp
c001ed0e:	fc                   	cld    
c001ed0f:	e8 48 de fe ff       	call   c000cb5c <int_handler>
c001ed14:	81 c4 04 00 00 00    	add    esp,0x4
c001ed1a:	0f a9                	pop    gs
c001ed1c:	0f a1                	pop    fs
c001ed1e:	07                   	pop    es
c001ed1f:	1f                   	pop    ds
c001ed20:	61                   	popa   
c001ed21:	81 c4 08 00 00 00    	add    esp,0x8
c001ed27:	cf                   	iret   

c001ed28 <syscall_common_stub>:
c001ed28:	60                   	pusha  
c001ed29:	1e                   	push   ds
c001ed2a:	06                   	push   es
c001ed2b:	0f a0                	push   fs
c001ed2d:	0f a8                	push   gs
c001ed2f:	66 b8 10 00          	mov    ax,0x10
c001ed33:	66 8e d8             	mov    ds,ax
c001ed36:	66 8e c0             	mov    es,ax
c001ed39:	66 8e e0             	mov    fs,ax
c001ed3c:	66 8e e8             	mov    gs,ax
c001ed3f:	54                   	push   esp
c001ed40:	fc                   	cld    
c001ed41:	e8 16 de fe ff       	call   c000cb5c <int_handler>
c001ed46:	81 c4 04 00 00 00    	add    esp,0x4
c001ed4c:	0f a9                	pop    gs
c001ed4e:	0f a1                	pop    fs
c001ed50:	07                   	pop    es
c001ed51:	1f                   	pop    ds
c001ed52:	e8 08 2b ff ff       	call   c001185f <KiCheckSignalZ>
c001ed57:	3d 00 00 00 00       	cmp    eax,0x0
c001ed5c:	0f 84 c0 00 00 00    	je     c001ee22 <skipSignals>
c001ed62:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ed67:	61                   	popa   
c001ed68:	53                   	push   ebx
c001ed69:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ed6f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ed72:	5b                   	pop    ebx
c001ed73:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ed78:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ed7b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ed7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed81:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ed84:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ed87:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ed8a:	81 c4 08 00 00 00    	add    esp,0x8
c001ed90:	5e                   	pop    esi
c001ed91:	5b                   	pop    ebx
c001ed92:	59                   	pop    ecx
c001ed93:	5a                   	pop    edx
c001ed94:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ed97:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ed9a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ed9d:	52                   	push   edx
c001ed9e:	51                   	push   ecx
c001ed9f:	53                   	push   ebx
c001eda0:	56                   	push   esi
c001eda1:	81 ec 08 00 00 00    	sub    esp,0x8
c001eda7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001edaa:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001edad:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001edb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001edb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001edb6:	60                   	pusha  
c001edb7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001edbd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001edc0:	89 e3                	mov    ebx,esp
c001edc2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001edc5:	52                   	push   edx
c001edc6:	68 e6 ed 01 c0       	push   0xc001ede6
c001edcb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001edce:	89 dc                	mov    esp,ebx
c001edd0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001edd3:	68 23 00 00 00       	push   0x23
c001edd8:	51                   	push   ecx
c001edd9:	68 02 02 00 00       	push   0x202
c001edde:	68 1b 00 00 00       	push   0x1b
c001ede3:	ff 36                	push   DWORD PTR [esi]
c001ede5:	cf                   	iret   

c001ede6 <finishSignal>:
c001ede6:	cd 0f                	int    0xf

c001ede8 <finishSignal2>:
c001ede8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001edee:	e8 e9 2a ff ff       	call   c00118dc <KiFinishSignalZ>
c001edf3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001edf9:	68 23 00 00 00       	push   0x23
c001edfe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ee01:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ee04:	68 1b 00 00 00       	push   0x1b
c001ee09:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ee0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee0f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ee12:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ee15:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ee18:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ee1b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ee1e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ee21:	cf                   	iret   

c001ee22 <skipSignals>:
c001ee22:	61                   	popa   
c001ee23:	81 c4 08 00 00 00    	add    esp,0x8
c001ee29:	cf                   	iret   
c001ee2a:	90                   	nop
c001ee2b:	90                   	nop

c001ee2c <irq16>:
c001ee2c:	fa                   	cli    
c001ee2d:	6a 00                	push   0x0
c001ee2f:	6a 30                	push   0x30
c001ee31:	e9 c0 fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee36 <irq17>:
c001ee36:	fa                   	cli    
c001ee37:	6a 00                	push   0x0
c001ee39:	6a 31                	push   0x31
c001ee3b:	e9 b6 fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee40 <irq18>:
c001ee40:	fa                   	cli    
c001ee41:	6a 00                	push   0x0
c001ee43:	6a 32                	push   0x32
c001ee45:	e9 ac fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee4a <irq19>:
c001ee4a:	fa                   	cli    
c001ee4b:	6a 00                	push   0x0
c001ee4d:	6a 33                	push   0x33
c001ee4f:	e9 a2 fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee54 <irq20>:
c001ee54:	fa                   	cli    
c001ee55:	6a 00                	push   0x0
c001ee57:	6a 34                	push   0x34
c001ee59:	e9 98 fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee5e <irq21>:
c001ee5e:	fa                   	cli    
c001ee5f:	6a 00                	push   0x0
c001ee61:	6a 35                	push   0x35
c001ee63:	e9 8e fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee68 <irq22>:
c001ee68:	fa                   	cli    
c001ee69:	6a 00                	push   0x0
c001ee6b:	6a 36                	push   0x36
c001ee6d:	e9 84 fe ff ff       	jmp    c001ecf6 <int_common_stub>

c001ee72 <irq23>:
c001ee72:	fa                   	cli    
c001ee73:	6a 00                	push   0x0
c001ee75:	6a 37                	push   0x37
c001ee77:	e9 7a fe ff ff       	jmp    c001ecf6 <int_common_stub>
c001ee7c:	66 90                	xchg   ax,ax
c001ee7e:	66 90                	xchg   ax,ax

c001ee80 <i386GetRDRAND>:
c001ee80:	b9 64 00 00 00       	mov    ecx,0x64

c001ee85 <retry>:
c001ee85:	0f c7 f0             	rdrand eax
c001ee88:	72 05                	jb     c001ee8f <retry.done>
c001ee8a:	e2 f9                	loop   c001ee85 <retry>

c001ee8c <retry.fail>:
c001ee8c:	31 c0                	xor    eax,eax
c001ee8e:	c3                   	ret    

c001ee8f <retry.done>:
c001ee8f:	c3                   	ret    

c001ee90 <absolutelyNoChanceInHell>:
c001ee90:	b8 01 00 00 00       	mov    eax,0x1
c001ee95:	0f a2                	cpuid  
c001ee97:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee9d:	74 06                	je     c001eea5 <sseDetect.noSSE>
c001ee9f:	b8 01 00 00 00       	mov    eax,0x1
c001eea4:	c3                   	ret    

c001eea5 <sseDetect.noSSE>:
c001eea5:	31 c0                	xor    eax,eax
c001eea7:	c3                   	ret    

c001eea8 <sseSave>:
c001eea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeac:	0f ae 00             	fxsave [eax]
c001eeaf:	c3                   	ret    

c001eeb0 <sseLoad>:
c001eeb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeb4:	0f ae 08             	fxrstor [eax]
c001eeb7:	c3                   	ret    

c001eeb8 <sseInit>:
c001eeb8:	e8 42 00 00 00       	call   c001eeff <x87Init>
c001eebd:	0f 20 e0             	mov    eax,cr4
c001eec0:	66 0d 00 06          	or     ax,0x600
c001eec4:	0f 22 e0             	mov    cr4,eax
c001eec7:	c3                   	ret    

c001eec8 <sseClose>:
c001eec8:	c3                   	ret    
c001eec9:	66 90                	xchg   ax,ax
c001eecb:	66 90                	xchg   ax,ax
c001eecd:	66 90                	xchg   ax,ax
c001eecf:	90                   	nop

c001eed0 <value_37F>:
c001eed0:	7f 03                	jg     c001eed5 <value_37A+0x1>

c001eed2 <value_37E>:
c001eed2:	7e 03                	jle    c001eed7 <x87Detect+0x1>

c001eed4 <value_37A>:
c001eed4:	7a 03                	jp     c001eed9 <x87Detect+0x3>

c001eed6 <x87Detect>:
c001eed6:	b8 01 00 00 00       	mov    eax,0x1
c001eedb:	0f a2                	cpuid  
c001eedd:	f7 c2 01 00 00 00    	test   edx,0x1
c001eee3:	74 06                	je     c001eeeb <x87Detect.nox87>
c001eee5:	b8 01 00 00 00       	mov    eax,0x1
c001eeea:	c3                   	ret    

c001eeeb <x87Detect.nox87>:
c001eeeb:	b8 00 00 00 00       	mov    eax,0x0
c001eef0:	c3                   	ret    

c001eef1 <x87Save>:
c001eef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef5:	dd 30                	fnsave [eax]
c001eef7:	c3                   	ret    

c001eef8 <x87Load>:
c001eef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eefc:	dd 20                	frstor [eax]
c001eefe:	c3                   	ret    

c001eeff <x87Init>:
c001eeff:	0f 20 c0             	mov    eax,cr0
c001ef02:	66 25 fb ff          	and    ax,0xfffb
c001ef06:	66 0d 22 00          	or     ax,0x22
c001ef0a:	0f 22 c0             	mov    cr0,eax
c001ef0d:	db e3                	fninit 
c001ef0f:	0f 06                	clts   
c001ef11:	d9 2d d4 ee 01 c0    	fldcw  WORD PTR ds:0xc001eed4
c001ef17:	c3                   	ret    

c001ef18 <x87Close>:
c001ef18:	c3                   	ret    
c001ef19:	66 90                	xchg   ax,ax
c001ef1b:	90                   	nop

c001ef1c <__do_global_ctors_aux>:
c001ef1c:	a1 d0 fe 01 c0       	mov    eax,ds:0xc001fed0
c001ef21:	83 f8 ff             	cmp    eax,0xffffffff
c001ef24:	74 1a                	je     c001ef40 <__do_global_ctors_aux+0x24>
c001ef26:	55                   	push   ebp
c001ef27:	89 e5                	mov    ebp,esp
c001ef29:	53                   	push   ebx
c001ef2a:	52                   	push   edx
c001ef2b:	bb d0 fe 01 c0       	mov    ebx,0xc001fed0
c001ef30:	ff d0                	call   eax
c001ef32:	83 eb 04             	sub    ebx,0x4
c001ef35:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef37:	83 f8 ff             	cmp    eax,0xffffffff
c001ef3a:	75 f4                	jne    c001ef30 <__do_global_ctors_aux+0x14>
c001ef3c:	58                   	pop    eax
c001ef3d:	5b                   	pop    ebx
c001ef3e:	5d                   	pop    ebp
c001ef3f:	c3                   	ret    
c001ef40:	c3                   	ret    
c001ef41:	66 90                	xchg   ax,ax
c001ef43:	90                   	nop

c001ef44 <__divdi3>:
c001ef44:	55                   	push   ebp
c001ef45:	57                   	push   edi
c001ef46:	56                   	push   esi
c001ef47:	53                   	push   ebx
c001ef48:	83 ec 1c             	sub    esp,0x1c
c001ef4b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ef4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef53:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef56:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef5e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ef62:	85 db                	test   ebx,ebx
c001ef64:	0f 88 8e 00 00 00    	js     c001eff8 <__divdi3+0xb4>
c001ef6a:	89 dd                	mov    ebp,ebx
c001ef6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef74:	89 d3                	mov    ebx,edx
c001ef76:	85 d2                	test   edx,edx
c001ef78:	79 0d                	jns    c001ef87 <__divdi3+0x43>
c001ef7a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef7e:	f7 d8                	neg    eax
c001ef80:	83 d2 00             	adc    edx,0x0
c001ef83:	f7 da                	neg    edx
c001ef85:	89 d3                	mov    ebx,edx
c001ef87:	89 c7                	mov    edi,eax
c001ef89:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef8c:	85 db                	test   ebx,ebx
c001ef8e:	75 48                	jne    c001efd8 <__divdi3+0x94>
c001ef90:	39 ef                	cmp    edi,ebp
c001ef92:	76 24                	jbe    c001efb8 <__divdi3+0x74>
c001ef94:	89 ea                	mov    edx,ebp
c001ef96:	f7 f7                	div    edi
c001ef98:	89 c1                	mov    ecx,eax
c001ef9a:	31 f6                	xor    esi,esi
c001ef9c:	89 c8                	mov    eax,ecx
c001ef9e:	89 f2                	mov    edx,esi
c001efa0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001efa4:	85 c9                	test   ecx,ecx
c001efa6:	74 07                	je     c001efaf <__divdi3+0x6b>
c001efa8:	f7 d8                	neg    eax
c001efaa:	83 d2 00             	adc    edx,0x0
c001efad:	f7 da                	neg    edx
c001efaf:	83 c4 1c             	add    esp,0x1c
c001efb2:	5b                   	pop    ebx
c001efb3:	5e                   	pop    esi
c001efb4:	5f                   	pop    edi
c001efb5:	5d                   	pop    ebp
c001efb6:	c3                   	ret    
c001efb7:	90                   	nop
c001efb8:	85 ff                	test   edi,edi
c001efba:	75 0b                	jne    c001efc7 <__divdi3+0x83>
c001efbc:	b8 01 00 00 00       	mov    eax,0x1
c001efc1:	31 d2                	xor    edx,edx
c001efc3:	f7 f3                	div    ebx
c001efc5:	89 c7                	mov    edi,eax
c001efc7:	31 d2                	xor    edx,edx
c001efc9:	89 e8                	mov    eax,ebp
c001efcb:	f7 f7                	div    edi
c001efcd:	89 c6                	mov    esi,eax
c001efcf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001efd2:	f7 f7                	div    edi
c001efd4:	89 c1                	mov    ecx,eax
c001efd6:	eb c4                	jmp    c001ef9c <__divdi3+0x58>
c001efd8:	39 eb                	cmp    ebx,ebp
c001efda:	77 3c                	ja     c001f018 <__divdi3+0xd4>
c001efdc:	0f bd f3             	bsr    esi,ebx
c001efdf:	83 f6 1f             	xor    esi,0x1f
c001efe2:	75 40                	jne    c001f024 <__divdi3+0xe0>
c001efe4:	39 eb                	cmp    ebx,ebp
c001efe6:	72 09                	jb     c001eff1 <__divdi3+0xad>
c001efe8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001efeb:	0f 87 97 00 00 00    	ja     c001f088 <__divdi3+0x144>
c001eff1:	b9 01 00 00 00       	mov    ecx,0x1
c001eff6:	eb a4                	jmp    c001ef9c <__divdi3+0x58>
c001eff8:	f7 d9                	neg    ecx
c001effa:	83 d3 00             	adc    ebx,0x0
c001effd:	f7 db                	neg    ebx
c001efff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f002:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f006:	89 dd                	mov    ebp,ebx
c001f008:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f010:	e9 5f ff ff ff       	jmp    c001ef74 <__divdi3+0x30>
c001f015:	8d 76 00             	lea    esi,[esi+0x0]
c001f018:	31 f6                	xor    esi,esi
c001f01a:	31 c9                	xor    ecx,ecx
c001f01c:	e9 7b ff ff ff       	jmp    c001ef9c <__divdi3+0x58>
c001f021:	8d 76 00             	lea    esi,[esi+0x0]
c001f024:	b8 20 00 00 00       	mov    eax,0x20
c001f029:	29 f0                	sub    eax,esi
c001f02b:	89 f1                	mov    ecx,esi
c001f02d:	d3 e3                	shl    ebx,cl
c001f02f:	89 fa                	mov    edx,edi
c001f031:	88 c1                	mov    cl,al
c001f033:	d3 ea                	shr    edx,cl
c001f035:	09 da                	or     edx,ebx
c001f037:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f03b:	89 f1                	mov    ecx,esi
c001f03d:	d3 e7                	shl    edi,cl
c001f03f:	89 eb                	mov    ebx,ebp
c001f041:	88 c1                	mov    cl,al
c001f043:	d3 eb                	shr    ebx,cl
c001f045:	89 f1                	mov    ecx,esi
c001f047:	d3 e5                	shl    ebp,cl
c001f049:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f04c:	88 c1                	mov    cl,al
c001f04e:	d3 ea                	shr    edx,cl
c001f050:	09 d5                	or     ebp,edx
c001f052:	89 e8                	mov    eax,ebp
c001f054:	89 da                	mov    edx,ebx
c001f056:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f05a:	89 d3                	mov    ebx,edx
c001f05c:	89 c5                	mov    ebp,eax
c001f05e:	f7 e7                	mul    edi
c001f060:	39 d3                	cmp    ebx,edx
c001f062:	72 18                	jb     c001f07c <__divdi3+0x138>
c001f064:	74 0a                	je     c001f070 <__divdi3+0x12c>
c001f066:	89 e9                	mov    ecx,ebp
c001f068:	31 f6                	xor    esi,esi
c001f06a:	e9 2d ff ff ff       	jmp    c001ef9c <__divdi3+0x58>
c001f06f:	90                   	nop
c001f070:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f073:	89 f1                	mov    ecx,esi
c001f075:	d3 e7                	shl    edi,cl
c001f077:	39 c7                	cmp    edi,eax
c001f079:	73 eb                	jae    c001f066 <__divdi3+0x122>
c001f07b:	90                   	nop
c001f07c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f07f:	31 f6                	xor    esi,esi
c001f081:	e9 16 ff ff ff       	jmp    c001ef9c <__divdi3+0x58>
c001f086:	66 90                	xchg   ax,ax
c001f088:	31 c9                	xor    ecx,ecx
c001f08a:	e9 0d ff ff ff       	jmp    c001ef9c <__divdi3+0x58>
c001f08f:	90                   	nop

c001f090 <__moddi3>:
c001f090:	55                   	push   ebp
c001f091:	57                   	push   edi
c001f092:	56                   	push   esi
c001f093:	53                   	push   ebx
c001f094:	83 ec 2c             	sub    esp,0x2c
c001f097:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f09b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f09f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f0a3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f0a7:	85 db                	test   ebx,ebx
c001f0a9:	0f 88 85 00 00 00    	js     c001f134 <__moddi3+0xa4>
c001f0af:	89 de                	mov    esi,ebx
c001f0b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f0b9:	89 d7                	mov    edi,edx
c001f0bb:	85 d2                	test   edx,edx
c001f0bd:	79 09                	jns    c001f0c8 <__moddi3+0x38>
c001f0bf:	f7 d8                	neg    eax
c001f0c1:	83 d2 00             	adc    edx,0x0
c001f0c4:	f7 da                	neg    edx
c001f0c6:	89 d7                	mov    edi,edx
c001f0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0cc:	89 cd                	mov    ebp,ecx
c001f0ce:	85 ff                	test   edi,edi
c001f0d0:	75 52                	jne    c001f124 <__moddi3+0x94>
c001f0d2:	89 c3                	mov    ebx,eax
c001f0d4:	39 f0                	cmp    eax,esi
c001f0d6:	76 24                	jbe    c001f0fc <__moddi3+0x6c>
c001f0d8:	89 c8                	mov    eax,ecx
c001f0da:	89 f2                	mov    edx,esi
c001f0dc:	f7 f3                	div    ebx
c001f0de:	89 d6                	mov    esi,edx
c001f0e0:	89 f0                	mov    eax,esi
c001f0e2:	31 d2                	xor    edx,edx
c001f0e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0e8:	85 c9                	test   ecx,ecx
c001f0ea:	74 07                	je     c001f0f3 <__moddi3+0x63>
c001f0ec:	f7 d8                	neg    eax
c001f0ee:	83 d2 00             	adc    edx,0x0
c001f0f1:	f7 da                	neg    edx
c001f0f3:	83 c4 2c             	add    esp,0x2c
c001f0f6:	5b                   	pop    ebx
c001f0f7:	5e                   	pop    esi
c001f0f8:	5f                   	pop    edi
c001f0f9:	5d                   	pop    ebp
c001f0fa:	c3                   	ret    
c001f0fb:	90                   	nop
c001f0fc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f100:	85 db                	test   ebx,ebx
c001f102:	75 0d                	jne    c001f111 <__moddi3+0x81>
c001f104:	b8 01 00 00 00       	mov    eax,0x1
c001f109:	31 d2                	xor    edx,edx
c001f10b:	f7 f7                	div    edi
c001f10d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f111:	89 f0                	mov    eax,esi
c001f113:	31 d2                	xor    edx,edx
c001f115:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f119:	f7 f7                	div    edi
c001f11b:	89 e8                	mov    eax,ebp
c001f11d:	f7 f7                	div    edi
c001f11f:	89 d6                	mov    esi,edx
c001f121:	eb bd                	jmp    c001f0e0 <__moddi3+0x50>
c001f123:	90                   	nop
c001f124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f128:	39 f7                	cmp    edi,esi
c001f12a:	76 20                	jbe    c001f14c <__moddi3+0xbc>
c001f12c:	89 c8                	mov    eax,ecx
c001f12e:	89 f2                	mov    edx,esi
c001f130:	eb b2                	jmp    c001f0e4 <__moddi3+0x54>
c001f132:	66 90                	xchg   ax,ax
c001f134:	f7 d9                	neg    ecx
c001f136:	83 d3 00             	adc    ebx,0x0
c001f139:	f7 db                	neg    ebx
c001f13b:	89 de                	mov    esi,ebx
c001f13d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f145:	e9 6f ff ff ff       	jmp    c001f0b9 <__moddi3+0x29>
c001f14a:	66 90                	xchg   ax,ax
c001f14c:	0f bd c7             	bsr    eax,edi
c001f14f:	83 f0 1f             	xor    eax,0x1f
c001f152:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f156:	75 24                	jne    c001f17c <__moddi3+0xec>
c001f158:	39 f7                	cmp    edi,esi
c001f15a:	72 06                	jb     c001f162 <__moddi3+0xd2>
c001f15c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f160:	77 0c                	ja     c001f16e <__moddi3+0xde>
c001f162:	89 e9                	mov    ecx,ebp
c001f164:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f168:	19 fe                	sbb    esi,edi
c001f16a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f16e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f172:	89 f2                	mov    edx,esi
c001f174:	e9 6b ff ff ff       	jmp    c001f0e4 <__moddi3+0x54>
c001f179:	8d 76 00             	lea    esi,[esi+0x0]
c001f17c:	b8 20 00 00 00       	mov    eax,0x20
c001f181:	89 c2                	mov    edx,eax
c001f183:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f187:	29 da                	sub    edx,ebx
c001f189:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f18d:	88 d9                	mov    cl,bl
c001f18f:	d3 e7                	shl    edi,cl
c001f191:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f195:	88 d1                	mov    cl,dl
c001f197:	d3 e8                	shr    eax,cl
c001f199:	09 c7                	or     edi,eax
c001f19b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f19f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1a3:	89 d8                	mov    eax,ebx
c001f1a5:	88 d9                	mov    cl,bl
c001f1a7:	d3 e7                	shl    edi,cl
c001f1a9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1ad:	89 f3                	mov    ebx,esi
c001f1af:	88 d1                	mov    cl,dl
c001f1b1:	d3 eb                	shr    ebx,cl
c001f1b3:	89 c7                	mov    edi,eax
c001f1b5:	88 c1                	mov    cl,al
c001f1b7:	d3 e6                	shl    esi,cl
c001f1b9:	89 e8                	mov    eax,ebp
c001f1bb:	88 d1                	mov    cl,dl
c001f1bd:	d3 e8                	shr    eax,cl
c001f1bf:	09 f0                	or     eax,esi
c001f1c1:	89 f9                	mov    ecx,edi
c001f1c3:	d3 e5                	shl    ebp,cl
c001f1c5:	89 da                	mov    edx,ebx
c001f1c7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f1cb:	89 d3                	mov    ebx,edx
c001f1cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1d1:	89 c6                	mov    esi,eax
c001f1d3:	89 d1                	mov    ecx,edx
c001f1d5:	39 d3                	cmp    ebx,edx
c001f1d7:	72 27                	jb     c001f200 <__moddi3+0x170>
c001f1d9:	74 21                	je     c001f1fc <__moddi3+0x16c>
c001f1db:	29 f5                	sub    ebp,esi
c001f1dd:	19 cb                	sbb    ebx,ecx
c001f1df:	89 de                	mov    esi,ebx
c001f1e1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f1e5:	d3 e6                	shl    esi,cl
c001f1e7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1eb:	89 f9                	mov    ecx,edi
c001f1ed:	d3 ed                	shr    ebp,cl
c001f1ef:	09 ee                	or     esi,ebp
c001f1f1:	89 f0                	mov    eax,esi
c001f1f3:	d3 eb                	shr    ebx,cl
c001f1f5:	89 da                	mov    edx,ebx
c001f1f7:	e9 e8 fe ff ff       	jmp    c001f0e4 <__moddi3+0x54>
c001f1fc:	39 c5                	cmp    ebp,eax
c001f1fe:	73 db                	jae    c001f1db <__moddi3+0x14b>
c001f200:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f204:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f208:	89 d1                	mov    ecx,edx
c001f20a:	89 c6                	mov    esi,eax
c001f20c:	eb cd                	jmp    c001f1db <__moddi3+0x14b>
c001f20e:	66 90                	xchg   ax,ax

c001f210 <__udivdi3>:
c001f210:	55                   	push   ebp
c001f211:	57                   	push   edi
c001f212:	56                   	push   esi
c001f213:	53                   	push   ebx
c001f214:	83 ec 1c             	sub    esp,0x1c
c001f217:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f21b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f21f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f223:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f227:	85 d2                	test   edx,edx
c001f229:	75 41                	jne    c001f26c <__udivdi3+0x5c>
c001f22b:	39 f7                	cmp    edi,esi
c001f22d:	76 15                	jbe    c001f244 <__udivdi3+0x34>
c001f22f:	89 e8                	mov    eax,ebp
c001f231:	89 f2                	mov    edx,esi
c001f233:	f7 f7                	div    edi
c001f235:	31 db                	xor    ebx,ebx
c001f237:	89 da                	mov    edx,ebx
c001f239:	83 c4 1c             	add    esp,0x1c
c001f23c:	5b                   	pop    ebx
c001f23d:	5e                   	pop    esi
c001f23e:	5f                   	pop    edi
c001f23f:	5d                   	pop    ebp
c001f240:	c3                   	ret    
c001f241:	8d 76 00             	lea    esi,[esi+0x0]
c001f244:	89 f9                	mov    ecx,edi
c001f246:	85 ff                	test   edi,edi
c001f248:	75 0b                	jne    c001f255 <__udivdi3+0x45>
c001f24a:	b8 01 00 00 00       	mov    eax,0x1
c001f24f:	31 d2                	xor    edx,edx
c001f251:	f7 f7                	div    edi
c001f253:	89 c1                	mov    ecx,eax
c001f255:	31 d2                	xor    edx,edx
c001f257:	89 f0                	mov    eax,esi
c001f259:	f7 f1                	div    ecx
c001f25b:	89 c3                	mov    ebx,eax
c001f25d:	89 e8                	mov    eax,ebp
c001f25f:	f7 f1                	div    ecx
c001f261:	89 da                	mov    edx,ebx
c001f263:	83 c4 1c             	add    esp,0x1c
c001f266:	5b                   	pop    ebx
c001f267:	5e                   	pop    esi
c001f268:	5f                   	pop    edi
c001f269:	5d                   	pop    ebp
c001f26a:	c3                   	ret    
c001f26b:	90                   	nop
c001f26c:	39 f2                	cmp    edx,esi
c001f26e:	77 1c                	ja     c001f28c <__udivdi3+0x7c>
c001f270:	0f bd da             	bsr    ebx,edx
c001f273:	83 f3 1f             	xor    ebx,0x1f
c001f276:	75 24                	jne    c001f29c <__udivdi3+0x8c>
c001f278:	39 f2                	cmp    edx,esi
c001f27a:	72 08                	jb     c001f284 <__udivdi3+0x74>
c001f27c:	39 ef                	cmp    edi,ebp
c001f27e:	0f 87 84 00 00 00    	ja     c001f308 <__udivdi3+0xf8>
c001f284:	b8 01 00 00 00       	mov    eax,0x1
c001f289:	eb ac                	jmp    c001f237 <__udivdi3+0x27>
c001f28b:	90                   	nop
c001f28c:	31 db                	xor    ebx,ebx
c001f28e:	31 c0                	xor    eax,eax
c001f290:	89 da                	mov    edx,ebx
c001f292:	83 c4 1c             	add    esp,0x1c
c001f295:	5b                   	pop    ebx
c001f296:	5e                   	pop    esi
c001f297:	5f                   	pop    edi
c001f298:	5d                   	pop    ebp
c001f299:	c3                   	ret    
c001f29a:	66 90                	xchg   ax,ax
c001f29c:	b8 20 00 00 00       	mov    eax,0x20
c001f2a1:	29 d8                	sub    eax,ebx
c001f2a3:	88 d9                	mov    cl,bl
c001f2a5:	d3 e2                	shl    edx,cl
c001f2a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f2ab:	89 fa                	mov    edx,edi
c001f2ad:	88 c1                	mov    cl,al
c001f2af:	d3 ea                	shr    edx,cl
c001f2b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2b5:	09 d1                	or     ecx,edx
c001f2b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2bb:	88 d9                	mov    cl,bl
c001f2bd:	d3 e7                	shl    edi,cl
c001f2bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2c3:	89 f7                	mov    edi,esi
c001f2c5:	88 c1                	mov    cl,al
c001f2c7:	d3 ef                	shr    edi,cl
c001f2c9:	88 d9                	mov    cl,bl
c001f2cb:	d3 e6                	shl    esi,cl
c001f2cd:	89 ea                	mov    edx,ebp
c001f2cf:	88 c1                	mov    cl,al
c001f2d1:	d3 ea                	shr    edx,cl
c001f2d3:	09 d6                	or     esi,edx
c001f2d5:	89 f0                	mov    eax,esi
c001f2d7:	89 fa                	mov    edx,edi
c001f2d9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f2dd:	89 d7                	mov    edi,edx
c001f2df:	89 c6                	mov    esi,eax
c001f2e1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2e5:	39 d7                	cmp    edi,edx
c001f2e7:	72 13                	jb     c001f2fc <__udivdi3+0xec>
c001f2e9:	74 09                	je     c001f2f4 <__udivdi3+0xe4>
c001f2eb:	89 f0                	mov    eax,esi
c001f2ed:	31 db                	xor    ebx,ebx
c001f2ef:	e9 43 ff ff ff       	jmp    c001f237 <__udivdi3+0x27>
c001f2f4:	88 d9                	mov    cl,bl
c001f2f6:	d3 e5                	shl    ebp,cl
c001f2f8:	39 c5                	cmp    ebp,eax
c001f2fa:	73 ef                	jae    c001f2eb <__udivdi3+0xdb>
c001f2fc:	8d 46 ff             	lea    eax,[esi-0x1]
c001f2ff:	31 db                	xor    ebx,ebx
c001f301:	e9 31 ff ff ff       	jmp    c001f237 <__udivdi3+0x27>
c001f306:	66 90                	xchg   ax,ax
c001f308:	31 c0                	xor    eax,eax
c001f30a:	e9 28 ff ff ff       	jmp    c001f237 <__udivdi3+0x27>
c001f30f:	90                   	nop

c001f310 <__umoddi3>:
c001f310:	55                   	push   ebp
c001f311:	57                   	push   edi
c001f312:	56                   	push   esi
c001f313:	53                   	push   ebx
c001f314:	83 ec 1c             	sub    esp,0x1c
c001f317:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f31b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f31f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f327:	89 da                	mov    edx,ebx
c001f329:	85 c0                	test   eax,eax
c001f32b:	75 37                	jne    c001f364 <__umoddi3+0x54>
c001f32d:	39 df                	cmp    edi,ebx
c001f32f:	76 13                	jbe    c001f344 <__umoddi3+0x34>
c001f331:	89 f0                	mov    eax,esi
c001f333:	f7 f7                	div    edi
c001f335:	89 d0                	mov    eax,edx
c001f337:	31 d2                	xor    edx,edx
c001f339:	83 c4 1c             	add    esp,0x1c
c001f33c:	5b                   	pop    ebx
c001f33d:	5e                   	pop    esi
c001f33e:	5f                   	pop    edi
c001f33f:	5d                   	pop    ebp
c001f340:	c3                   	ret    
c001f341:	8d 76 00             	lea    esi,[esi+0x0]
c001f344:	89 fd                	mov    ebp,edi
c001f346:	85 ff                	test   edi,edi
c001f348:	75 0b                	jne    c001f355 <__umoddi3+0x45>
c001f34a:	b8 01 00 00 00       	mov    eax,0x1
c001f34f:	31 d2                	xor    edx,edx
c001f351:	f7 f7                	div    edi
c001f353:	89 c5                	mov    ebp,eax
c001f355:	89 d8                	mov    eax,ebx
c001f357:	31 d2                	xor    edx,edx
c001f359:	f7 f5                	div    ebp
c001f35b:	89 f0                	mov    eax,esi
c001f35d:	f7 f5                	div    ebp
c001f35f:	89 d0                	mov    eax,edx
c001f361:	eb d4                	jmp    c001f337 <__umoddi3+0x27>
c001f363:	90                   	nop
c001f364:	89 f1                	mov    ecx,esi
c001f366:	39 d8                	cmp    eax,ebx
c001f368:	76 0a                	jbe    c001f374 <__umoddi3+0x64>
c001f36a:	89 f0                	mov    eax,esi
c001f36c:	83 c4 1c             	add    esp,0x1c
c001f36f:	5b                   	pop    ebx
c001f370:	5e                   	pop    esi
c001f371:	5f                   	pop    edi
c001f372:	5d                   	pop    ebp
c001f373:	c3                   	ret    
c001f374:	0f bd e8             	bsr    ebp,eax
c001f377:	83 f5 1f             	xor    ebp,0x1f
c001f37a:	75 1c                	jne    c001f398 <__umoddi3+0x88>
c001f37c:	39 d8                	cmp    eax,ebx
c001f37e:	72 04                	jb     c001f384 <__umoddi3+0x74>
c001f380:	39 f7                	cmp    edi,esi
c001f382:	77 08                	ja     c001f38c <__umoddi3+0x7c>
c001f384:	89 da                	mov    edx,ebx
c001f386:	29 fe                	sub    esi,edi
c001f388:	19 c2                	sbb    edx,eax
c001f38a:	89 f1                	mov    ecx,esi
c001f38c:	89 c8                	mov    eax,ecx
c001f38e:	83 c4 1c             	add    esp,0x1c
c001f391:	5b                   	pop    ebx
c001f392:	5e                   	pop    esi
c001f393:	5f                   	pop    edi
c001f394:	5d                   	pop    ebp
c001f395:	c3                   	ret    
c001f396:	66 90                	xchg   ax,ax
c001f398:	ba 20 00 00 00       	mov    edx,0x20
c001f39d:	29 ea                	sub    edx,ebp
c001f39f:	89 e9                	mov    ecx,ebp
c001f3a1:	d3 e0                	shl    eax,cl
c001f3a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3a7:	89 f8                	mov    eax,edi
c001f3a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f3ad:	88 d1                	mov    cl,dl
c001f3af:	d3 e8                	shr    eax,cl
c001f3b1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3b5:	09 c1                	or     ecx,eax
c001f3b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f3bb:	89 e9                	mov    ecx,ebp
c001f3bd:	d3 e7                	shl    edi,cl
c001f3bf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3c3:	89 d8                	mov    eax,ebx
c001f3c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3c9:	88 d1                	mov    cl,dl
c001f3cb:	d3 e8                	shr    eax,cl
c001f3cd:	89 c7                	mov    edi,eax
c001f3cf:	89 e9                	mov    ecx,ebp
c001f3d1:	d3 e3                	shl    ebx,cl
c001f3d3:	89 f0                	mov    eax,esi
c001f3d5:	88 d1                	mov    cl,dl
c001f3d7:	d3 e8                	shr    eax,cl
c001f3d9:	09 d8                	or     eax,ebx
c001f3db:	89 e9                	mov    ecx,ebp
c001f3dd:	d3 e6                	shl    esi,cl
c001f3df:	89 f3                	mov    ebx,esi
c001f3e1:	89 fa                	mov    edx,edi
c001f3e3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f3e7:	89 d1                	mov    ecx,edx
c001f3e9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3ed:	89 c6                	mov    esi,eax
c001f3ef:	89 d7                	mov    edi,edx
c001f3f1:	39 d1                	cmp    ecx,edx
c001f3f3:	72 27                	jb     c001f41c <__umoddi3+0x10c>
c001f3f5:	74 21                	je     c001f418 <__umoddi3+0x108>
c001f3f7:	89 ca                	mov    edx,ecx
c001f3f9:	29 f3                	sub    ebx,esi
c001f3fb:	19 fa                	sbb    edx,edi
c001f3fd:	89 d0                	mov    eax,edx
c001f3ff:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f403:	d3 e0                	shl    eax,cl
c001f405:	89 e9                	mov    ecx,ebp
c001f407:	d3 eb                	shr    ebx,cl
c001f409:	09 d8                	or     eax,ebx
c001f40b:	d3 ea                	shr    edx,cl
c001f40d:	83 c4 1c             	add    esp,0x1c
c001f410:	5b                   	pop    ebx
c001f411:	5e                   	pop    esi
c001f412:	5f                   	pop    edi
c001f413:	5d                   	pop    ebp
c001f414:	c3                   	ret    
c001f415:	8d 76 00             	lea    esi,[esi+0x0]
c001f418:	39 c3                	cmp    ebx,eax
c001f41a:	73 db                	jae    c001f3f7 <__umoddi3+0xe7>
c001f41c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f420:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f424:	89 d7                	mov    edi,edx
c001f426:	89 c6                	mov    esi,eax
c001f428:	eb cd                	jmp    c001f3f7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f42a <_init>:
c001f42a:	55                   	push   ebp
c001f42b:	89 e5                	mov    ebp,esp
c001f42d:	e8 c2 0c fe ff       	call   c00000f4 <frame_dummy>
c001f432:	e8 e5 fa ff ff       	call   c001ef1c <__do_global_ctors_aux>
c001f437:	5d                   	pop    ebp
c001f438:	c3                   	ret    

Disassembly of section .fini:

c001f439 <_fini>:
c001f439:	55                   	push   ebp
c001f43a:	89 e5                	mov    ebp,esp
c001f43c:	e8 43 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f441:	5d                   	pop    ebp
c001f442:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f444 <Computer::~Computer()>:
c001f444:	83 ec 0c             	sub    esp,0xc
c001f447:	ba 54 07 02 c0       	mov    edx,0xc0020754
c001f44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f450:	89 10                	mov    DWORD PTR [eax],edx
c001f452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	50                   	push   eax
c001f45a:	e8 53 d1 fe ff       	call   c000c5b2 <Device::~Device()>
c001f45f:	83 c4 10             	add    esp,0x10
c001f462:	90                   	nop
c001f463:	83 c4 0c             	add    esp,0xc
c001f466:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f468 <Computer::~Computer()>:
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	83 ec 0c             	sub    esp,0xc
c001f46e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f472:	e8 cd ff ff ff       	call   c001f444 <Computer::~Computer()>
c001f477:	83 c4 10             	add    esp,0x10
c001f47a:	83 ec 08             	sub    esp,0x8
c001f47d:	68 70 01 00 00       	push   0x170
c001f482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f486:	e8 81 b3 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f48b:	83 c4 10             	add    esp,0x10
c001f48e:	83 c4 0c             	add    esp,0xc
c001f491:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f492 <idleCommon()>:
c001f492:	83 ec 0c             	sub    esp,0xc
c001f495:	fa                   	cli    
c001f496:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f49c:	e8 af 66 ff ff       	call   c0015b50 <schedule()>
c001f4a1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f4a6:	48                   	dec    eax
c001f4a7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f4ac:	75 01                	jne    c001f4af <idleCommon()+0x1d>
c001f4ae:	fb                   	sti    
c001f4af:	83 c4 0c             	add    esp,0xc
c001f4b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f4b4 <LinkedList<UnixFile>::~LinkedList()>:
c001f4b4:	90                   	nop
c001f4b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f4b6 <LinkedList<UnixFile>::LinkedList()>:
c001f4b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4c4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4cf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4f6:	90                   	nop
c001f4f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f4f8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f4f8:	83 ec 0c             	sub    esp,0xc
c001f4fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f500:	75 10                	jne    c001f512 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f502:	83 ec 0c             	sub    esp,0xc
c001f505:	68 68 09 02 c0       	push   0xc0020968
c001f50a:	e8 3e 1d ff ff       	call   c001124d <KePanic(char const*)>
c001f50f:	83 c4 10             	add    esp,0x10
c001f512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f516:	8b 00                	mov    eax,DWORD PTR [eax]
c001f518:	85 c0                	test   eax,eax
c001f51a:	74 34                	je     c001f550 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f520:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f523:	85 c0                	test   eax,eax
c001f525:	74 29                	je     c001f550 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f52e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f532:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f539:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f53d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f547:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f54e:	eb 65                	jmp    c001f5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f554:	8b 00                	mov    eax,DWORD PTR [eax]
c001f556:	85 c0                	test   eax,eax
c001f558:	75 4b                	jne    c001f5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f55e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f561:	85 c0                	test   eax,eax
c001f563:	75 40                	jne    c001f5a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f569:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f56d:	89 10                	mov    DWORD PTR [eax],edx
c001f56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f573:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f577:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f581:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58f:	85 c0                	test   eax,eax
c001f591:	74 22                	je     c001f5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f593:	83 ec 0c             	sub    esp,0xc
c001f596:	68 8a 09 02 c0       	push   0xc002098a
c001f59b:	e8 ad 1c ff ff       	call   c001124d <KePanic(char const*)>
c001f5a0:	83 c4 10             	add    esp,0x10
c001f5a3:	eb 10                	jmp    c001f5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5a5:	83 ec 0c             	sub    esp,0xc
c001f5a8:	68 94 09 02 c0       	push   0xc0020994
c001f5ad:	e8 9b 1c ff ff       	call   c001124d <KePanic(char const*)>
c001f5b2:	83 c4 10             	add    esp,0x10
c001f5b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5bc:	8d 50 01             	lea    edx,[eax+0x1]
c001f5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5c6:	90                   	nop
c001f5c7:	83 c4 0c             	add    esp,0xc
c001f5ca:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f5cc <LinkedList<UnixFile>::getFirstElement()>:
c001f5cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f5d4 <LinkedList<UnixFile>::removeFirst()>:
c001f5d4:	83 ec 0c             	sub    esp,0xc
c001f5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5db:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5dd:	85 c0                	test   eax,eax
c001f5df:	75 12                	jne    c001f5f3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f5e1:	83 ec 0c             	sub    esp,0xc
c001f5e4:	68 a0 09 02 c0       	push   0xc00209a0
c001f5e9:	e8 5f 1c ff ff       	call   c001124d <KePanic(char const*)>
c001f5ee:	83 c4 10             	add    esp,0x10
c001f5f1:	eb 7e                	jmp    c001f671 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5fd:	85 c0                	test   eax,eax
c001f5ff:	74 10                	je     c001f611 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f601:	83 ec 0c             	sub    esp,0xc
c001f604:	68 eb 09 02 c0       	push   0xc00209eb
c001f609:	e8 3f 1c ff ff       	call   c001124d <KePanic(char const*)>
c001f60e:	83 c4 10             	add    esp,0x10
c001f611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f615:	8b 00                	mov    eax,DWORD PTR [eax]
c001f617:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f61a:	85 c0                	test   eax,eax
c001f61c:	75 33                	jne    c001f651 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f62c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f637:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f63a:	83 f8 01             	cmp    eax,0x1
c001f63d:	74 21                	je     c001f660 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f63f:	83 ec 0c             	sub    esp,0xc
c001f642:	68 c4 09 02 c0       	push   0xc00209c4
c001f647:	e8 01 1c ff ff       	call   c001124d <KePanic(char const*)>
c001f64c:	83 c4 10             	add    esp,0x10
c001f64f:	eb 0f                	jmp    c001f660 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f655:	8b 00                	mov    eax,DWORD PTR [eax]
c001f657:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65e:	89 10                	mov    DWORD PTR [eax],edx
c001f660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f664:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f667:	8d 50 ff             	lea    edx,[eax-0x1]
c001f66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f671:	83 c4 0c             	add    esp,0xc
c001f674:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f676 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f676:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f67a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f67d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f67e <DriverlessDevice::~DriverlessDevice()>:
c001f67e:	ba 3c 15 02 c0       	mov    edx,0xc002153c
c001f683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f687:	89 10                	mov    DWORD PTR [eax],edx
c001f689:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f68d:	50                   	push   eax
c001f68e:	e8 1f cf fe ff       	call   c000c5b2 <Device::~Device()>
c001f693:	83 c4 04             	add    esp,0x4
c001f696:	90                   	nop
c001f697:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f698 <DriverlessDevice::~DriverlessDevice()>:
c001f698:	83 ec 0c             	sub    esp,0xc
c001f69b:	83 ec 0c             	sub    esp,0xc
c001f69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6a2:	e8 d7 ff ff ff       	call   c001f67e <DriverlessDevice::~DriverlessDevice()>
c001f6a7:	83 c4 10             	add    esp,0x10
c001f6aa:	83 ec 08             	sub    esp,0x8
c001f6ad:	68 58 01 00 00       	push   0x158
c001f6b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b6:	e8 51 b1 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f6bb:	83 c4 10             	add    esp,0x10
c001f6be:	83 c4 0c             	add    esp,0xc
c001f6c1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f6c2 <LinkedList<Device>::addElement(Device*)>:
c001f6c2:	83 ec 0c             	sub    esp,0xc
c001f6c5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f6ca:	75 10                	jne    c001f6dc <LinkedList<Device>::addElement(Device*)+0x1a>
c001f6cc:	83 ec 0c             	sub    esp,0xc
c001f6cf:	68 68 09 02 c0       	push   0xc0020968
c001f6d4:	e8 74 1b ff ff       	call   c001124d <KePanic(char const*)>
c001f6d9:	83 c4 10             	add    esp,0x10
c001f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6e2:	85 c0                	test   eax,eax
c001f6e4:	74 3a                	je     c001f720 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6ed:	85 c0                	test   eax,eax
c001f6ef:	74 2f                	je     c001f720 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6fc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f706:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f70a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f711:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f714:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f71e:	eb 68                	jmp    c001f788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f724:	8b 00                	mov    eax,DWORD PTR [eax]
c001f726:	85 c0                	test   eax,eax
c001f728:	75 4e                	jne    c001f778 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f731:	85 c0                	test   eax,eax
c001f733:	75 43                	jne    c001f778 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f739:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f73d:	89 10                	mov    DWORD PTR [eax],edx
c001f73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f743:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f747:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f74a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f74e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f751:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f75b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f762:	85 c0                	test   eax,eax
c001f764:	74 22                	je     c001f788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f766:	83 ec 0c             	sub    esp,0xc
c001f769:	68 8a 09 02 c0       	push   0xc002098a
c001f76e:	e8 da 1a ff ff       	call   c001124d <KePanic(char const*)>
c001f773:	83 c4 10             	add    esp,0x10
c001f776:	eb 10                	jmp    c001f788 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f778:	83 ec 0c             	sub    esp,0xc
c001f77b:	68 94 09 02 c0       	push   0xc0020994
c001f780:	e8 c8 1a ff ff       	call   c001124d <KePanic(char const*)>
c001f785:	83 c4 10             	add    esp,0x10
c001f788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f78f:	8d 50 01             	lea    edx,[eax+0x1]
c001f792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f796:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f799:	90                   	nop
c001f79a:	83 c4 0c             	add    esp,0xc
c001f79d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f79e <LinkedList<Device>::LinkedList()>:
c001f79e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7de:	90                   	nop
c001f7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f7e0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f7e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7e6:	85 c0                	test   eax,eax
c001f7e8:	75 0e                	jne    c001f7f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f7ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7f1:	85 c0                	test   eax,eax
c001f7f3:	75 03                	jne    c001f7f8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f7f5:	b0 01                	mov    al,0x1
c001f7f7:	c3                   	ret    
c001f7f8:	b0 00                	mov    al,0x0
c001f7fa:	90                   	nop
c001f7fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f7fc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f800:	8b 00                	mov    eax,DWORD PTR [eax]
c001f802:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f804 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f804:	83 ec 0c             	sub    esp,0xc
c001f807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f80b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f80d:	85 c0                	test   eax,eax
c001f80f:	75 17                	jne    c001f828 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f811:	83 ec 0c             	sub    esp,0xc
c001f814:	68 a0 09 02 c0       	push   0xc00209a0
c001f819:	e8 2f 1a ff ff       	call   c001124d <KePanic(char const*)>
c001f81e:	83 c4 10             	add    esp,0x10
c001f821:	e9 96 00 00 00       	jmp    c001f8bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f826:	66 90                	xchg   ax,ax
c001f828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f82c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f82f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f832:	85 c0                	test   eax,eax
c001f834:	0f 95 c0             	setne  al
c001f837:	0f b6 c0             	movzx  eax,al
c001f83a:	85 c0                	test   eax,eax
c001f83c:	74 12                	je     c001f850 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f83e:	83 ec 0c             	sub    esp,0xc
c001f841:	68 eb 09 02 c0       	push   0xc00209eb
c001f846:	e8 02 1a ff ff       	call   c001124d <KePanic(char const*)>
c001f84b:	83 c4 10             	add    esp,0x10
c001f84e:	66 90                	xchg   ax,ax
c001f850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f854:	8b 00                	mov    eax,DWORD PTR [eax]
c001f856:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f859:	85 c0                	test   eax,eax
c001f85b:	0f 94 c0             	sete   al
c001f85e:	0f b6 c0             	movzx  eax,al
c001f861:	85 c0                	test   eax,eax
c001f863:	74 33                	je     c001f898 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f869:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f873:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f87e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f881:	83 f8 01             	cmp    eax,0x1
c001f884:	74 22                	je     c001f8a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f886:	83 ec 0c             	sub    esp,0xc
c001f889:	68 c4 09 02 c0       	push   0xc00209c4
c001f88e:	e8 ba 19 ff ff       	call   c001124d <KePanic(char const*)>
c001f893:	83 c4 10             	add    esp,0x10
c001f896:	eb 10                	jmp    c001f8a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f89e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a5:	89 10                	mov    DWORD PTR [eax],edx
c001f8a7:	90                   	nop
c001f8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8af:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8b9:	8d 76 00             	lea    esi,[esi+0x0]
c001f8bc:	83 c4 0c             	add    esp,0xc
c001f8bf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f8c0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f8c0:	83 ec 0c             	sub    esp,0xc
c001f8c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8c8:	75 12                	jne    c001f8dc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f8ca:	83 ec 0c             	sub    esp,0xc
c001f8cd:	68 68 09 02 c0       	push   0xc0020968
c001f8d2:	e8 76 19 ff ff       	call   c001124d <KePanic(char const*)>
c001f8d7:	83 c4 10             	add    esp,0x10
c001f8da:	66 90                	xchg   ax,ax
c001f8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8e2:	85 c0                	test   eax,eax
c001f8e4:	74 36                	je     c001f91c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8ed:	85 c0                	test   eax,eax
c001f8ef:	74 2b                	je     c001f91c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f8f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f907:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f911:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f918:	eb 6a                	jmp    c001f984 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f91a:	66 90                	xchg   ax,ax
c001f91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f920:	8b 00                	mov    eax,DWORD PTR [eax]
c001f922:	85 c0                	test   eax,eax
c001f924:	75 4e                	jne    c001f974 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	75 43                	jne    c001f974 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f935:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f939:	89 10                	mov    DWORD PTR [eax],edx
c001f93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f943:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f958:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95b:	85 c0                	test   eax,eax
c001f95d:	74 25                	je     c001f984 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f95f:	83 ec 0c             	sub    esp,0xc
c001f962:	68 8a 09 02 c0       	push   0xc002098a
c001f967:	e8 e1 18 ff ff       	call   c001124d <KePanic(char const*)>
c001f96c:	83 c4 10             	add    esp,0x10
c001f96f:	eb 13                	jmp    c001f984 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f971:	8d 76 00             	lea    esi,[esi+0x0]
c001f974:	83 ec 0c             	sub    esp,0xc
c001f977:	68 94 09 02 c0       	push   0xc0020994
c001f97c:	e8 cc 18 ff ff       	call   c001124d <KePanic(char const*)>
c001f981:	83 c4 10             	add    esp,0x10
c001f984:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f988:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f98b:	8d 50 01             	lea    edx,[eax+0x1]
c001f98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f992:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f995:	90                   	nop
c001f996:	83 c4 0c             	add    esp,0xc
c001f999:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f99c <ACPI::~ACPI()>:
c001f99c:	83 ec 0c             	sub    esp,0xc
c001f99f:	ba 24 1b 02 c0       	mov    edx,0xc0021b24
c001f9a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a8:	89 10                	mov    DWORD PTR [eax],edx
c001f9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	50                   	push   eax
c001f9b2:	e8 fb cb fe ff       	call   c000c5b2 <Device::~Device()>
c001f9b7:	83 c4 10             	add    esp,0x10
c001f9ba:	90                   	nop
c001f9bb:	83 c4 0c             	add    esp,0xc
c001f9be:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f9c0 <ACPI::~ACPI()>:
c001f9c0:	83 ec 0c             	sub    esp,0xc
c001f9c3:	83 ec 0c             	sub    esp,0xc
c001f9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ca:	e8 cd ff ff ff       	call   c001f99c <ACPI::~ACPI()>
c001f9cf:	83 c4 10             	add    esp,0x10
c001f9d2:	83 ec 08             	sub    esp,0x8
c001f9d5:	68 64 12 00 00       	push   0x1264
c001f9da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9de:	e8 29 ae fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001f9e3:	83 c4 10             	add    esp,0x10
c001f9e6:	83 c4 0c             	add    esp,0xc
c001f9e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f9ec <LinkedList<Device>::~LinkedList()>:
c001f9ec:	90                   	nop
c001f9ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f9f0 <LinkedList<Device>::isEmpty()>:
c001f9f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9f6:	85 c0                	test   eax,eax
c001f9f8:	75 0e                	jne    c001fa08 <LinkedList<Device>::isEmpty()+0x18>
c001f9fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa01:	85 c0                	test   eax,eax
c001fa03:	75 03                	jne    c001fa08 <LinkedList<Device>::isEmpty()+0x18>
c001fa05:	b0 01                	mov    al,0x1
c001fa07:	c3                   	ret    
c001fa08:	b0 00                	mov    al,0x0
c001fa0a:	90                   	nop
c001fa0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fa0c <LinkedList<Device>::getFirstElement()>:
c001fa0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa12:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fa14 <LinkedList<Device>::removeFirst()>:
c001fa14:	83 ec 0c             	sub    esp,0xc
c001fa17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa1d:	85 c0                	test   eax,eax
c001fa1f:	75 17                	jne    c001fa38 <LinkedList<Device>::removeFirst()+0x24>
c001fa21:	83 ec 0c             	sub    esp,0xc
c001fa24:	68 a0 09 02 c0       	push   0xc00209a0
c001fa29:	e8 1f 18 ff ff       	call   c001124d <KePanic(char const*)>
c001fa2e:	83 c4 10             	add    esp,0x10
c001fa31:	e9 92 00 00 00       	jmp    c001fac8 <LinkedList<Device>::removeFirst()+0xb4>
c001fa36:	66 90                	xchg   ax,ax
c001fa38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa3f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fa45:	85 c0                	test   eax,eax
c001fa47:	74 13                	je     c001fa5c <LinkedList<Device>::removeFirst()+0x48>
c001fa49:	83 ec 0c             	sub    esp,0xc
c001fa4c:	68 eb 09 02 c0       	push   0xc00209eb
c001fa51:	e8 f7 17 ff ff       	call   c001124d <KePanic(char const*)>
c001fa56:	83 c4 10             	add    esp,0x10
c001fa59:	8d 76 00             	lea    esi,[esi+0x0]
c001fa5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa60:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa62:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fa68:	85 c0                	test   eax,eax
c001fa6a:	75 34                	jne    c001faa0 <LinkedList<Device>::removeFirst()+0x8c>
c001fa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa88:	83 f8 01             	cmp    eax,0x1
c001fa8b:	74 27                	je     c001fab4 <LinkedList<Device>::removeFirst()+0xa0>
c001fa8d:	83 ec 0c             	sub    esp,0xc
c001fa90:	68 c4 09 02 c0       	push   0xc00209c4
c001fa95:	e8 b3 17 ff ff       	call   c001124d <KePanic(char const*)>
c001fa9a:	83 c4 10             	add    esp,0x10
c001fa9d:	eb 15                	jmp    c001fab4 <LinkedList<Device>::removeFirst()+0xa0>
c001fa9f:	90                   	nop
c001faa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001faa6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	89 10                	mov    DWORD PTR [eax],edx
c001fab2:	66 90                	xchg   ax,ax
c001fab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fabb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fac5:	8d 76 00             	lea    esi,[esi+0x0]
c001fac8:	83 c4 0c             	add    esp,0xc
c001facb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001facc <CPU::~CPU()>:
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	ba cc 1c 02 c0       	mov    edx,0xc0021ccc
c001fad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad8:	89 10                	mov    DWORD PTR [eax],edx
c001fada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fade:	83 ec 0c             	sub    esp,0xc
c001fae1:	50                   	push   eax
c001fae2:	e8 cb ca fe ff       	call   c000c5b2 <Device::~Device()>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	90                   	nop
c001faeb:	83 c4 0c             	add    esp,0xc
c001faee:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001faf0 <CPU::~CPU()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	83 ec 0c             	sub    esp,0xc
c001faf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fafa:	e8 cd ff ff ff       	call   c001facc <CPU::~CPU()>
c001faff:	83 c4 10             	add    esp,0x10
c001fb02:	83 ec 08             	sub    esp,0x8
c001fb05:	68 94 11 00 00       	push   0x1194
c001fb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb0e:	e8 f9 ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fb13:	83 c4 10             	add    esp,0x10
c001fb16:	83 c4 0c             	add    esp,0xc
c001fb19:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fb1c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fb1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb20:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fb24 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fb24:	90                   	nop
c001fb25:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fb28 <ThreadControlBlock::ThreadControlBlock()>:
c001fb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb37:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb42:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fb49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fb54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb58:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fb5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb63:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fb67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fb6f:	90                   	nop
c001fb70:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb74 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb78:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb98:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbb4:	90                   	nop
c001fbb5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fbb6 <PCI::~PCI()>:
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	ba ac 2b 02 c0       	mov    edx,0xc0022bac
c001fbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc2:	89 10                	mov    DWORD PTR [eax],edx
c001fbc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc8:	83 ec 0c             	sub    esp,0xc
c001fbcb:	50                   	push   eax
c001fbcc:	e8 73 c4 fe ff       	call   c000c044 <Bus::~Bus()>
c001fbd1:	83 c4 10             	add    esp,0x10
c001fbd4:	90                   	nop
c001fbd5:	83 c4 0c             	add    esp,0xc
c001fbd8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fbda <PCI::~PCI()>:
c001fbda:	83 ec 0c             	sub    esp,0xc
c001fbdd:	83 ec 0c             	sub    esp,0xc
c001fbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe4:	e8 cd ff ff ff       	call   c001fbb6 <PCI::~PCI()>
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	83 ec 08             	sub    esp,0x8
c001fbef:	68 5c 01 00 00       	push   0x15c
c001fbf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf8:	e8 0f ac fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fbfd:	83 c4 10             	add    esp,0x10
c001fc00:	83 c4 0c             	add    esp,0xc
c001fc03:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc04 <IDE::~IDE()>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	ba 60 2c 02 c0       	mov    edx,0xc0022c60
c001fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc10:	89 10                	mov    DWORD PTR [eax],edx
c001fc12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc16:	83 ec 0c             	sub    esp,0xc
c001fc19:	50                   	push   eax
c001fc1a:	e8 0d ce fe ff       	call   c000ca2c <HardDiskController::~HardDiskController()>
c001fc1f:	83 c4 10             	add    esp,0x10
c001fc22:	90                   	nop
c001fc23:	83 c4 0c             	add    esp,0xc
c001fc26:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc28 <IDE::~IDE()>:
c001fc28:	83 ec 0c             	sub    esp,0xc
c001fc2b:	83 ec 0c             	sub    esp,0xc
c001fc2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc32:	e8 cd ff ff ff       	call   c001fc04 <IDE::~IDE()>
c001fc37:	83 c4 10             	add    esp,0x10
c001fc3a:	83 ec 08             	sub    esp,0x8
c001fc3d:	68 70 02 00 00       	push   0x270
c001fc42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc46:	e8 c1 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc4b:	83 c4 10             	add    esp,0x10
c001fc4e:	83 c4 0c             	add    esp,0xc
c001fc51:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fc52 <SATABus::~SATABus()>:
c001fc52:	83 ec 0c             	sub    esp,0xc
c001fc55:	ba b0 2c 02 c0       	mov    edx,0xc0022cb0
c001fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5e:	89 10                	mov    DWORD PTR [eax],edx
c001fc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	50                   	push   eax
c001fc68:	e8 bf cd fe ff       	call   c000ca2c <HardDiskController::~HardDiskController()>
c001fc6d:	83 c4 10             	add    esp,0x10
c001fc70:	90                   	nop
c001fc71:	83 c4 0c             	add    esp,0xc
c001fc74:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fc76 <SATABus::~SATABus()>:
c001fc76:	83 ec 0c             	sub    esp,0xc
c001fc79:	83 ec 0c             	sub    esp,0xc
c001fc7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc80:	e8 cd ff ff ff       	call   c001fc52 <SATABus::~SATABus()>
c001fc85:	83 c4 10             	add    esp,0x10
c001fc88:	83 ec 08             	sub    esp,0x8
c001fc8b:	68 64 01 00 00       	push   0x164
c001fc90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc94:	e8 73 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fc99:	83 c4 10             	add    esp,0x10
c001fc9c:	83 c4 0c             	add    esp,0xc
c001fc9f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fca0 <ATA::~ATA()>:
c001fca0:	83 ec 0c             	sub    esp,0xc
c001fca3:	ba f0 2c 02 c0       	mov    edx,0xc0022cf0
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	89 10                	mov    DWORD PTR [eax],edx
c001fcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	50                   	push   eax
c001fcb6:	e8 53 ce fe ff       	call   c000cb0e <PhysicalDisk::~PhysicalDisk()>
c001fcbb:	83 c4 10             	add    esp,0x10
c001fcbe:	90                   	nop
c001fcbf:	83 c4 0c             	add    esp,0xc
c001fcc2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fcc4 <ATA::~ATA()>:
c001fcc4:	83 ec 0c             	sub    esp,0xc
c001fcc7:	83 ec 0c             	sub    esp,0xc
c001fcca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcce:	e8 cd ff ff ff       	call   c001fca0 <ATA::~ATA()>
c001fcd3:	83 c4 10             	add    esp,0x10
c001fcd6:	83 ec 08             	sub    esp,0x8
c001fcd9:	68 7c 01 00 00       	push   0x17c
c001fcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fce2:	e8 25 ab fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fce7:	83 c4 10             	add    esp,0x10
c001fcea:	83 c4 0c             	add    esp,0xc
c001fced:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fcee <ATAPI::~ATAPI()>:
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	ba 38 2d 02 c0       	mov    edx,0xc0022d38
c001fcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfa:	89 10                	mov    DWORD PTR [eax],edx
c001fcfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd00:	83 ec 0c             	sub    esp,0xc
c001fd03:	50                   	push   eax
c001fd04:	e8 05 ce fe ff       	call   c000cb0e <PhysicalDisk::~PhysicalDisk()>
c001fd09:	83 c4 10             	add    esp,0x10
c001fd0c:	90                   	nop
c001fd0d:	83 c4 0c             	add    esp,0xc
c001fd10:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fd12 <ATAPI::~ATAPI()>:
c001fd12:	83 ec 0c             	sub    esp,0xc
c001fd15:	83 ec 0c             	sub    esp,0xc
c001fd18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd1c:	e8 cd ff ff ff       	call   c001fcee <ATAPI::~ATAPI()>
c001fd21:	83 c4 10             	add    esp,0x10
c001fd24:	83 ec 08             	sub    esp,0x8
c001fd27:	68 84 01 00 00       	push   0x184
c001fd2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd30:	e8 d7 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd35:	83 c4 10             	add    esp,0x10
c001fd38:	83 c4 0c             	add    esp,0xc
c001fd3b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fd3c <SATA::~SATA()>:
c001fd3c:	83 ec 0c             	sub    esp,0xc
c001fd3f:	ba ec 2d 02 c0       	mov    edx,0xc0022dec
c001fd44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd48:	89 10                	mov    DWORD PTR [eax],edx
c001fd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	50                   	push   eax
c001fd52:	e8 b7 cd fe ff       	call   c000cb0e <PhysicalDisk::~PhysicalDisk()>
c001fd57:	83 c4 10             	add    esp,0x10
c001fd5a:	90                   	nop
c001fd5b:	83 c4 0c             	add    esp,0xc
c001fd5e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fd60 <SATA::~SATA()>:
c001fd60:	83 ec 0c             	sub    esp,0xc
c001fd63:	83 ec 0c             	sub    esp,0xc
c001fd66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd6a:	e8 cd ff ff ff       	call   c001fd3c <SATA::~SATA()>
c001fd6f:	83 c4 10             	add    esp,0x10
c001fd72:	83 ec 08             	sub    esp,0x8
c001fd75:	68 7c 01 00 00       	push   0x17c
c001fd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd7e:	e8 89 aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	83 c4 0c             	add    esp,0xc
c001fd89:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fd8a <SATAPI::~SATAPI()>:
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	ba 10 2f 02 c0       	mov    edx,0xc0022f10
c001fd92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd96:	89 10                	mov    DWORD PTR [eax],edx
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	50                   	push   eax
c001fda0:	e8 69 cd fe ff       	call   c000cb0e <PhysicalDisk::~PhysicalDisk()>
c001fda5:	83 c4 10             	add    esp,0x10
c001fda8:	90                   	nop
c001fda9:	83 c4 0c             	add    esp,0xc
c001fdac:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fdae <SATAPI::~SATAPI()>:
c001fdae:	83 ec 0c             	sub    esp,0xc
c001fdb1:	83 ec 0c             	sub    esp,0xc
c001fdb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb8:	e8 cd ff ff ff       	call   c001fd8a <SATAPI::~SATAPI()>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	83 ec 08             	sub    esp,0x8
c001fdc3:	68 84 01 00 00       	push   0x184
c001fdc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdcc:	e8 3b aa fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fdd1:	83 c4 10             	add    esp,0x10
c001fdd4:	83 c4 0c             	add    esp,0xc
c001fdd7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fdd8 <IOAPIC::~IOAPIC()>:
c001fdd8:	83 ec 0c             	sub    esp,0xc
c001fddb:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001fde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde4:	89 10                	mov    DWORD PTR [eax],edx
c001fde6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdea:	83 ec 0c             	sub    esp,0xc
c001fded:	50                   	push   eax
c001fdee:	e8 bf c7 fe ff       	call   c000c5b2 <Device::~Device()>
c001fdf3:	83 c4 10             	add    esp,0x10
c001fdf6:	90                   	nop
c001fdf7:	83 c4 0c             	add    esp,0xc
c001fdfa:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fdfc <IOAPIC::~IOAPIC()>:
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	83 ec 0c             	sub    esp,0xc
c001fe02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe06:	e8 cd ff ff ff       	call   c001fdd8 <IOAPIC::~IOAPIC()>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	83 ec 08             	sub    esp,0x8
c001fe11:	68 68 01 00 00       	push   0x168
c001fe16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe1a:	e8 ed a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe1f:	83 c4 10             	add    esp,0x10
c001fe22:	83 c4 0c             	add    esp,0xc
c001fe25:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fe28 <APICTimer::~APICTimer()>:
c001fe28:	83 ec 0c             	sub    esp,0xc
c001fe2b:	ba 98 2f 02 c0       	mov    edx,0xc0022f98
c001fe30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe34:	89 10                	mov    DWORD PTR [eax],edx
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	83 ec 0c             	sub    esp,0xc
c001fe3d:	50                   	push   eax
c001fe3e:	e8 45 e2 fe ff       	call   c000e088 <Timer::~Timer()>
c001fe43:	83 c4 10             	add    esp,0x10
c001fe46:	90                   	nop
c001fe47:	83 c4 0c             	add    esp,0xc
c001fe4a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fe4c <APICTimer::~APICTimer()>:
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe56:	e8 cd ff ff ff       	call   c001fe28 <APICTimer::~APICTimer()>
c001fe5b:	83 c4 10             	add    esp,0x10
c001fe5e:	83 ec 08             	sub    esp,0x8
c001fe61:	68 60 01 00 00       	push   0x160
c001fe66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6a:	e8 9d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	83 c4 0c             	add    esp,0xc
c001fe75:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fe78 <PIT::~PIT()>:
c001fe78:	83 ec 0c             	sub    esp,0xc
c001fe7b:	ba e8 2f 02 c0       	mov    edx,0xc0022fe8
c001fe80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe84:	89 10                	mov    DWORD PTR [eax],edx
c001fe86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8a:	83 ec 0c             	sub    esp,0xc
c001fe8d:	50                   	push   eax
c001fe8e:	e8 f5 e1 fe ff       	call   c000e088 <Timer::~Timer()>
c001fe93:	83 c4 10             	add    esp,0x10
c001fe96:	90                   	nop
c001fe97:	83 c4 0c             	add    esp,0xc
c001fe9a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fe9c <PIT::~PIT()>:
c001fe9c:	83 ec 0c             	sub    esp,0xc
c001fe9f:	83 ec 0c             	sub    esp,0xc
c001fea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fea6:	e8 cd ff ff ff       	call   c001fe78 <PIT::~PIT()>
c001feab:	83 c4 10             	add    esp,0x10
c001feae:	83 ec 08             	sub    esp,0x8
c001feb1:	68 5c 01 00 00       	push   0x15c
c001feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feba:	e8 4d a9 fe ff       	call   c000a80c <operator delete(void*, unsigned long)>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	83 c4 0c             	add    esp,0xc
c001fec5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be fd 1d 02 c0       	mov    esi,0xc0021dfd
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 19 1e 02 c0       	mov    esi,0xc0021e19
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
