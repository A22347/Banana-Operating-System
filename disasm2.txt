
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 e5 64 01 00       	call   c0016505 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 48 03 c0       	mov    eax,0xc0034844
c0000025:	3d 44 48 03 c0       	cmp    eax,0xc0034844
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 48 03 c0       	push   0xc0034844
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 48 03 c0       	mov    eax,0xc0034844
c0000051:	2d 44 48 03 c0       	sub    eax,0xc0034844
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 48 03 c0       	push   0xc0034844
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb fc f3 02 c0       	mov    ebx,0xc002f3fc
c0000097:	81 eb f8 f3 02 c0    	sub    ebx,0xc002f3f8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be f8 f3 02 c0       	mov    esi,0xc002f3f8
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 48 03 c0       	push   0xc0034844
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 44 48 03 c0       	push   0xc0034844
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 53 48 02 00       	call   c0024b00 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 d4 8d 01 00       	call   c0019099 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 31 48 02 00       	call   c0024b00 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 3e 4d 02 00       	call   c002502c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 d1 51 02 00       	call   c00254c8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 bb fe 01 00       	jmp    c002023a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 00 f4 02 c0 02 	test   BYTE PTR [edx-0x3ffd0c00],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 00 f4 02 c0 01 	test   BYTE PTR [edx-0x3ffd0c00],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 00 f4 02 c0 08 	test   BYTE PTR [edx-0x3ffd0c00],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 00 f4 02 c0 08 	test   BYTE PTR [edx-0x3ffd0c00],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 00 f4 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0c00],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 00 f4 02 c0 01 	test   BYTE PTR [edx-0x3ffd0c00],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	83 ec 0c             	sub    esp,0xc
c0000c73:	83 ec 0c             	sub    esp,0xc
c0000c76:	68 04 f5 02 c0       	push   0xc002f504
c0000c7b:	e8 2c 11 02 00       	call   c0021dac <KeCPuts>
c0000c80:	83 c4 10             	add    esp,0x10
c0000c83:	90                   	nop
c0000c84:	83 c4 0c             	add    esp,0xc
c0000c87:	c3                   	ret    

c0000c88 <tcpip_callback_with_block>:
c0000c88:	83 ec 0c             	sub    esp,0xc
c0000c8b:	83 ec 0c             	sub    esp,0xc
c0000c8e:	68 3f f5 02 c0       	push   0xc002f53f
c0000c93:	e8 fc 10 02 00       	call   c0021d94 <KeCPanic>
c0000c98:	83 c4 10             	add    esp,0x10
c0000c9b:	90                   	nop
c0000c9c:	83 c4 0c             	add    esp,0xc
c0000c9f:	c3                   	ret    

c0000ca0 <sys_sem_new>:
c0000ca0:	83 ec 1c             	sub    esp,0x1c
c0000ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000ca7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000cab:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000cb0:	83 ec 08             	sub    esp,0x8
c0000cb3:	50                   	push   eax
c0000cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000cb8:	e8 17 10 02 00       	call   c0021cd4 <KeNetCreateSemaphore>
c0000cbd:	83 c4 10             	add    esp,0x10
c0000cc0:	b0 00                	mov    al,0x0
c0000cc2:	83 c4 1c             	add    esp,0x1c
c0000cc5:	c3                   	ret    
c0000cc6:	66 90                	xchg   ax,ax

c0000cc8 <sys_sem_free>:
c0000cc8:	83 ec 0c             	sub    esp,0xc
c0000ccb:	83 ec 0c             	sub    esp,0xc
c0000cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cd2:	e8 41 10 02 00       	call   c0021d18 <KeNetFreeSemaphore>
c0000cd7:	83 c4 10             	add    esp,0x10
c0000cda:	90                   	nop
c0000cdb:	83 c4 0c             	add    esp,0xc
c0000cde:	c3                   	ret    
c0000cdf:	90                   	nop

c0000ce0 <sys_sem_signal>:
c0000ce0:	83 ec 0c             	sub    esp,0xc
c0000ce3:	83 ec 0c             	sub    esp,0xc
c0000ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cea:	e8 45 10 02 00       	call   c0021d34 <KeNetSignalSemaphore>
c0000cef:	83 c4 10             	add    esp,0x10
c0000cf2:	90                   	nop
c0000cf3:	83 c4 0c             	add    esp,0xc
c0000cf6:	c3                   	ret    
c0000cf7:	90                   	nop

c0000cf8 <sys_arch_sem_wait>:
c0000cf8:	83 ec 0c             	sub    esp,0xc
c0000cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000cff:	83 ec 08             	sub    esp,0x8
c0000d02:	50                   	push   eax
c0000d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000d07:	e8 44 10 02 00       	call   c0021d50 <KeNetWaitSemaphore>
c0000d0c:	83 c4 10             	add    esp,0x10
c0000d0f:	83 c4 0c             	add    esp,0xc
c0000d12:	c3                   	ret    
c0000d13:	90                   	nop

c0000d14 <sys_mbox_new>:
c0000d14:	83 ec 0c             	sub    esp,0xc
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	68 59 f5 02 c0       	push   0xc002f559
c0000d1f:	e8 70 10 02 00       	call   c0021d94 <KeCPanic>
c0000d24:	83 c4 10             	add    esp,0x10
c0000d27:	b0 00                	mov    al,0x0
c0000d29:	83 c4 0c             	add    esp,0xc
c0000d2c:	c3                   	ret    
c0000d2d:	8d 76 00             	lea    esi,[esi+0x0]

c0000d30 <sys_mbox_free>:
c0000d30:	83 ec 0c             	sub    esp,0xc
c0000d33:	83 ec 0c             	sub    esp,0xc
c0000d36:	68 66 f5 02 c0       	push   0xc002f566
c0000d3b:	e8 54 10 02 00       	call   c0021d94 <KeCPanic>
c0000d40:	83 c4 10             	add    esp,0x10
c0000d43:	90                   	nop
c0000d44:	83 c4 0c             	add    esp,0xc
c0000d47:	c3                   	ret    

c0000d48 <sys_mbox_post>:
c0000d48:	83 ec 0c             	sub    esp,0xc
c0000d4b:	83 ec 0c             	sub    esp,0xc
c0000d4e:	68 74 f5 02 c0       	push   0xc002f574
c0000d53:	e8 3c 10 02 00       	call   c0021d94 <KeCPanic>
c0000d58:	83 c4 10             	add    esp,0x10
c0000d5b:	90                   	nop
c0000d5c:	83 c4 0c             	add    esp,0xc
c0000d5f:	c3                   	ret    

c0000d60 <sys_arch_mbox_fetch>:
c0000d60:	83 ec 0c             	sub    esp,0xc
c0000d63:	83 ec 0c             	sub    esp,0xc
c0000d66:	68 82 f5 02 c0       	push   0xc002f582
c0000d6b:	e8 24 10 02 00       	call   c0021d94 <KeCPanic>
c0000d70:	83 c4 10             	add    esp,0x10
c0000d73:	b8 00 00 00 00       	mov    eax,0x0
c0000d78:	83 c4 0c             	add    esp,0xc
c0000d7b:	c3                   	ret    

c0000d7c <sys_arch_mbox_tryfetch>:
c0000d7c:	83 ec 0c             	sub    esp,0xc
c0000d7f:	83 ec 0c             	sub    esp,0xc
c0000d82:	68 96 f5 02 c0       	push   0xc002f596
c0000d87:	e8 08 10 02 00       	call   c0021d94 <KeCPanic>
c0000d8c:	83 c4 10             	add    esp,0x10
c0000d8f:	b8 00 00 00 00       	mov    eax,0x0
c0000d94:	83 c4 0c             	add    esp,0xc
c0000d97:	c3                   	ret    

c0000d98 <sys_mbox_trypost>:
c0000d98:	83 ec 0c             	sub    esp,0xc
c0000d9b:	83 ec 0c             	sub    esp,0xc
c0000d9e:	68 ad f5 02 c0       	push   0xc002f5ad
c0000da3:	e8 ec 0f 02 00       	call   c0021d94 <KeCPanic>
c0000da8:	83 c4 10             	add    esp,0x10
c0000dab:	90                   	nop
c0000dac:	83 c4 0c             	add    esp,0xc
c0000daf:	c3                   	ret    

c0000db0 <sys_thread_new>:
c0000db0:	83 ec 0c             	sub    esp,0xc
c0000db3:	83 ec 08             	sub    esp,0x8
c0000db6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0000dbe:	e8 ad 0f 02 00       	call   c0021d70 <KeNetCreateThread>
c0000dc3:	83 c4 10             	add    esp,0x10
c0000dc6:	b8 00 00 00 00       	mov    eax,0x0
c0000dcb:	83 c4 0c             	add    esp,0xc
c0000dce:	c3                   	ret    
c0000dcf:	90                   	nop

c0000dd0 <sys_init>:
c0000dd0:	90                   	nop
c0000dd1:	c3                   	ret    

c0000dd2 <largebin_index>:
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	c1 ea 08             	shr    edx,0x8
c0000dd7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ddd:	77 10                	ja     c0000def <largebin_index+0x1d>
c0000ddf:	0f bd d2             	bsr    edx,edx
c0000de2:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000de5:	d3 e8                	shr    eax,cl
c0000de7:	83 e0 03             	and    eax,0x3
c0000dea:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000dee:	c3                   	ret    
c0000def:	b8 5f 00 00 00       	mov    eax,0x5f
c0000df4:	c3                   	ret    

c0000df5 <malloc_init_state>:
c0000df5:	8d 50 34             	lea    edx,[eax+0x34]
c0000df8:	53                   	push   ebx
c0000df9:	89 d1                	mov    ecx,edx
c0000dfb:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000e01:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000e04:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000e07:	83 c2 08             	add    edx,0x8
c0000e0a:	39 da                	cmp    edx,ebx
c0000e0c:	75 f3                	jne    c0000e01 <malloc_init_state+0xc>
c0000e0e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000e18:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e1a:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000e24:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000e2e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000e38:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000e3f:	83 e2 03             	and    edx,0x3
c0000e42:	5b                   	pop    ebx
c0000e43:	83 ca 48             	or     edx,0x48
c0000e46:	89 10                	mov    DWORD PTR [eax],edx
c0000e48:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000e4b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000e55:	c3                   	ret    

c0000e56 <malloc_consolidate>:
c0000e56:	8b 10                	mov    edx,DWORD PTR [eax]
c0000e58:	85 d2                	test   edx,edx
c0000e5a:	0f 84 d8 00 00 00    	je     c0000f38 <malloc_consolidate+0xe2>
c0000e60:	55                   	push   ebp
c0000e61:	83 e2 fd             	and    edx,0xfffffffd
c0000e64:	57                   	push   edi
c0000e65:	89 c5                	mov    ebp,eax
c0000e67:	56                   	push   esi
c0000e68:	53                   	push   ebx
c0000e69:	8d 78 34             	lea    edi,[eax+0x34]
c0000e6c:	83 ec 10             	sub    esp,0x10
c0000e6f:	89 10                	mov    DWORD PTR [eax],edx
c0000e71:	c1 ea 03             	shr    edx,0x3
c0000e74:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000e78:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000e7c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000e80:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000e83:	85 d2                	test   edx,edx
c0000e85:	0f 84 98 00 00 00    	je     c0000f23 <malloc_consolidate+0xcd>
c0000e8b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000e92:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000e95:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000e98:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000e9c:	89 f9                	mov    ecx,edi
c0000e9e:	83 e1 fe             	and    ecx,0xfffffffe
c0000ea1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ea4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ea7:	83 e3 fc             	and    ebx,0xfffffffc
c0000eaa:	83 e7 01             	and    edi,0x1
c0000ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000eb0:	75 14                	jne    c0000ec6 <malloc_consolidate+0x70>
c0000eb2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000eb4:	29 fa                	sub    edx,edi
c0000eb6:	01 f9                	add    ecx,edi
c0000eb8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ebb:	89 fb                	mov    ebx,edi
c0000ebd:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000ec0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000ec3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000ec6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000ec9:	74 40                	je     c0000f0b <malloc_consolidate+0xb5>
c0000ecb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ece:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ed1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ed5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000ed8:	83 e7 01             	and    edi,0x1
c0000edb:	75 0e                	jne    c0000eeb <malloc_consolidate+0x95>
c0000edd:	01 d9                	add    ecx,ebx
c0000edf:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000ee2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000ee5:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000ee8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000eeb:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000eee:	89 ce                	mov    esi,ecx
c0000ef0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000ef3:	83 ce 01             	or     esi,0x1
c0000ef6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000ef9:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000efc:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000f00:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000f03:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000f06:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000f09:	eb 0c                	jmp    c0000f17 <malloc_consolidate+0xc1>
c0000f0b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000f0e:	83 c9 01             	or     ecx,0x1
c0000f11:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f14:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000f17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000f1b:	85 d2                	test   edx,edx
c0000f1d:	0f 85 6f ff ff ff    	jne    c0000e92 <malloc_consolidate+0x3c>
c0000f23:	83 c5 04             	add    ebp,0x4
c0000f26:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000f2a:	0f 85 50 ff ff ff    	jne    c0000e80 <malloc_consolidate+0x2a>
c0000f30:	83 c4 10             	add    esp,0x10
c0000f33:	5b                   	pop    ebx
c0000f34:	5e                   	pop    esi
c0000f35:	5f                   	pop    edi
c0000f36:	5d                   	pop    ebp
c0000f37:	c3                   	ret    
c0000f38:	e9 b8 fe ff ff       	jmp    c0000df5 <malloc_init_state>

c0000f3d <dlfree>:
c0000f3d:	57                   	push   edi
c0000f3e:	56                   	push   esi
c0000f3f:	53                   	push   ebx
c0000f40:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000f44:	85 db                	test   ebx,ebx
c0000f46:	0f 84 e2 00 00 00    	je     c000102e <dlfree+0xf1>
c0000f4c:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000f4f:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000f52:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000f58:	89 f0                	mov    eax,esi
c0000f5a:	83 e0 fc             	and    eax,0xfffffffc
c0000f5d:	39 c1                	cmp    ecx,eax
c0000f5f:	72 24                	jb     c0000f85 <dlfree+0x48>
c0000f61:	c1 e8 03             	shr    eax,0x3
c0000f64:	83 c9 03             	or     ecx,0x3
c0000f67:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f6d:	83 e8 02             	sub    eax,0x2
c0000f70:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000f77:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000f79:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000f80:	e9 a9 00 00 00       	jmp    c000102e <dlfree+0xf1>
c0000f85:	83 e6 02             	and    esi,0x2
c0000f88:	0f 85 a0 00 00 00    	jne    c000102e <dlfree+0xf1>
c0000f8e:	8d 34 02             	lea    esi,[edx+eax*1]
c0000f91:	83 c9 01             	or     ecx,0x1
c0000f94:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000f9a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000f9d:	83 e1 fc             	and    ecx,0xfffffffc
c0000fa0:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000fa4:	75 13                	jne    c0000fb9 <dlfree+0x7c>
c0000fa6:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000fa9:	29 da                	sub    edx,ebx
c0000fab:	01 d8                	add    eax,ebx
c0000fad:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000fb0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000fb3:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fb6:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fb9:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000fbf:	74 40                	je     c0001001 <dlfree+0xc4>
c0000fc1:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000fc5:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000fc8:	80 e3 01             	and    bl,0x1
c0000fcb:	75 0e                	jne    c0000fdb <dlfree+0x9e>
c0000fcd:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000fd0:	01 c8                	add    eax,ecx
c0000fd2:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000fd5:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000fd8:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000fdb:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000fe1:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000fe8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000feb:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000ff1:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ff4:	89 c1                	mov    ecx,eax
c0000ff6:	83 c9 01             	or     ecx,0x1
c0000ff9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ffc:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000fff:	eb 10                	jmp    c0001011 <dlfree+0xd4>
c0001001:	01 c8                	add    eax,ecx
c0001003:	89 c1                	mov    ecx,eax
c0001005:	83 c9 01             	or     ecx,0x1
c0001008:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000100b:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0001011:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0001016:	76 16                	jbe    c000102e <dlfree+0xf1>
c0001018:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c000101f:	74 0d                	je     c000102e <dlfree+0xf1>
c0001021:	5b                   	pop    ebx
c0001022:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001027:	5e                   	pop    esi
c0001028:	5f                   	pop    edi
c0001029:	e9 28 fe ff ff       	jmp    c0000e56 <malloc_consolidate>
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	c3                   	ret    

c0001032 <sYSMALLOc>:
c0001032:	55                   	push   ebp
c0001033:	57                   	push   edi
c0001034:	56                   	push   esi
c0001035:	53                   	push   ebx
c0001036:	89 d3                	mov    ebx,edx
c0001038:	83 ec 2c             	sub    esp,0x2c
c000103b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000103f:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0001045:	f6 02 02             	test   BYTE PTR [edx],0x2
c0001048:	8d 41 ff             	lea    eax,[ecx-0x1]
c000104b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000104f:	74 1f                	je     c0001070 <sYSMALLOc+0x3e>
c0001051:	89 d0                	mov    eax,edx
c0001053:	e8 fe fd ff ff       	call   c0000e56 <malloc_consolidate>
c0001058:	83 ec 0c             	sub    esp,0xc
c000105b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000105f:	83 e8 07             	sub    eax,0x7
c0001062:	50                   	push   eax
c0001063:	e8 33 02 00 00       	call   c000129b <dlmalloc>
c0001068:	83 c4 10             	add    esp,0x10
c000106b:	e9 23 02 00 00       	jmp    c0001293 <sYSMALLOc+0x261>
c0001070:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0001073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0001077:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c000107d:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0001080:	83 c0 10             	add    eax,0x10
c0001083:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001087:	01 c2                	add    edx,eax
c0001089:	83 e5 fc             	and    ebp,0xfffffffc
c000108c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0001093:	74 02                	je     c0001097 <sYSMALLOc+0x65>
c0001095:	29 ea                	sub    edx,ebp
c0001097:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000109b:	f7 d9                	neg    ecx
c000109d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00010a1:	21 ca                	and    edx,ecx
c00010a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00010a7:	7f 07                	jg     c00010b0 <sYSMALLOc+0x7e>
c00010a9:	31 c0                	xor    eax,eax
c00010ab:	e9 e3 01 00 00       	jmp    c0001293 <sYSMALLOc+0x261>
c00010b0:	83 ec 0c             	sub    esp,0xc
c00010b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00010b7:	e8 b4 52 01 00       	call   c0016370 <sbrk>
c00010bc:	83 c4 10             	add    esp,0x10
c00010bf:	83 f8 ff             	cmp    eax,0xffffffff
c00010c2:	89 c6                	mov    esi,eax
c00010c4:	74 e3                	je     c00010a9 <sYSMALLOc+0x77>
c00010c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00010ca:	8d 14 2f             	lea    edx,[edi+ebp*1]
c00010cd:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c00010d3:	39 c2                	cmp    edx,eax
c00010d5:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c00010db:	75 11                	jne    c00010ee <sYSMALLOc+0xbc>
c00010dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010e1:	01 e8                	add    eax,ebp
c00010e3:	83 c8 01             	or     eax,0x1
c00010e6:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00010e9:	e9 93 00 00 00       	jmp    c0001181 <sYSMALLOc+0x14f>
c00010ee:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c00010f4:	a8 01                	test   al,0x1
c00010f6:	0f 84 73 01 00 00    	je     c000126f <sYSMALLOc+0x23d>
c00010fc:	85 ed                	test   ebp,ebp
c00010fe:	74 12                	je     c0001112 <sYSMALLOc+0xe0>
c0001100:	39 f2                	cmp    edx,esi
c0001102:	76 0e                	jbe    c0001112 <sYSMALLOc+0xe0>
c0001104:	83 e0 fe             	and    eax,0xfffffffe
c0001107:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c000110d:	e9 5d 01 00 00       	jmp    c000126f <sYSMALLOc+0x23d>
c0001112:	85 ed                	test   ebp,ebp
c0001114:	74 0c                	je     c0001122 <sYSMALLOc+0xf0>
c0001116:	89 f0                	mov    eax,esi
c0001118:	29 d0                	sub    eax,edx
c000111a:	01 c1                	add    ecx,eax
c000111c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001122:	89 f2                	mov    edx,esi
c0001124:	83 e2 07             	and    edx,0x7
c0001127:	0f 84 b1 00 00 00    	je     c00011de <sYSMALLOc+0x1ac>
c000112d:	b8 08 00 00 00       	mov    eax,0x8
c0001132:	29 d0                	sub    eax,edx
c0001134:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001137:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000113b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000113f:	01 e8                	add    eax,ebp
c0001141:	83 ec 0c             	sub    esp,0xc
c0001144:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001147:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000114b:	01 f2                	add    edx,esi
c000114d:	29 d0                	sub    eax,edx
c000114f:	01 d1                	add    ecx,edx
c0001151:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0001155:	01 c1                	add    ecx,eax
c0001157:	51                   	push   ecx
c0001158:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000115c:	e8 0f 52 01 00       	call   c0016370 <sbrk>
c0001161:	83 c4 10             	add    esp,0x10
c0001164:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0001168:	83 f8 ff             	cmp    eax,0xffffffff
c000116b:	75 7c                	jne    c00011e9 <sYSMALLOc+0x1b7>
c000116d:	83 ec 0c             	sub    esp,0xc
c0001170:	6a 00                	push   0x0
c0001172:	e8 f9 51 01 00       	call   c0016370 <sbrk>
c0001177:	83 c4 10             	add    esp,0x10
c000117a:	31 c9                	xor    ecx,ecx
c000117c:	83 f8 ff             	cmp    eax,0xffffffff
c000117f:	75 7e                	jne    c00011ff <sYSMALLOc+0x1cd>
c0001181:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001187:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000118d:	73 06                	jae    c0001195 <sYSMALLOc+0x163>
c000118f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001195:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000119b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00011a1:	73 06                	jae    c00011a9 <sYSMALLOc+0x177>
c00011a3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00011a9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00011ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011af:	83 e2 fc             	and    edx,0xfffffffc
c00011b2:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c00011b6:	0f 87 ed fe ff ff    	ja     c00010a9 <sYSMALLOc+0x77>
c00011bc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00011c0:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00011c3:	29 fa                	sub    edx,edi
c00011c5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00011c8:	89 fb                	mov    ebx,edi
c00011ca:	83 ca 01             	or     edx,0x1
c00011cd:	83 cb 01             	or     ebx,0x1
c00011d0:	83 c0 08             	add    eax,0x8
c00011d3:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00011d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011d9:	e9 b5 00 00 00       	jmp    c0001293 <sYSMALLOc+0x261>
c00011de:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00011e2:	31 c0                	xor    eax,eax
c00011e4:	e9 52 ff ff ff       	jmp    c000113b <sYSMALLOc+0x109>
c00011e9:	39 c6                	cmp    esi,eax
c00011eb:	76 12                	jbe    c00011ff <sYSMALLOc+0x1cd>
c00011ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00011f1:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00011f8:	01 f0                	add    eax,esi
c00011fa:	e9 7b ff ff ff       	jmp    c000117a <sYSMALLOc+0x148>
c00011ff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001203:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001206:	29 f0                	sub    eax,esi
c0001208:	01 c8                	add    eax,ecx
c000120a:	83 c8 01             	or     eax,0x1
c000120d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001210:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001216:	85 ed                	test   ebp,ebp
c0001218:	0f 84 63 ff ff ff    	je     c0001181 <sYSMALLOc+0x14f>
c000121e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0001221:	83 e0 f8             	and    eax,0xfffffff8
c0001224:	89 c2                	mov    edx,eax
c0001226:	83 ca 01             	or     edx,0x1
c0001229:	83 f8 0f             	cmp    eax,0xf
c000122c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000122f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001237:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000123f:	0f 86 3c ff ff ff    	jbe    c0001181 <sYSMALLOc+0x14f>
c0001245:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000124b:	83 ec 0c             	sub    esp,0xc
c000124e:	83 c7 08             	add    edi,0x8
c0001251:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000125b:	57                   	push   edi
c000125c:	e8 dc fc ff ff       	call   c0000f3d <dlfree>
c0001261:	83 c4 10             	add    esp,0x10
c0001264:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000126a:	e9 12 ff ff ff       	jmp    c0001181 <sYSMALLOc+0x14f>
c000126f:	83 ec 0c             	sub    esp,0xc
c0001272:	6a 00                	push   0x0
c0001274:	e8 f7 50 01 00       	call   c0016370 <sbrk>
c0001279:	89 c2                	mov    edx,eax
c000127b:	29 f2                	sub    edx,esi
c000127d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001281:	83 c4 10             	add    esp,0x10
c0001284:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000128a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000128e:	e9 e7 fe ff ff       	jmp    c000117a <sYSMALLOc+0x148>
c0001293:	83 c4 2c             	add    esp,0x2c
c0001296:	5b                   	pop    ebx
c0001297:	5e                   	pop    esi
c0001298:	5f                   	pop    edi
c0001299:	5d                   	pop    ebp
c000129a:	c3                   	ret    

c000129b <dlmalloc>:
c000129b:	55                   	push   ebp
c000129c:	57                   	push   edi
c000129d:	56                   	push   esi
c000129e:	53                   	push   ebx
c000129f:	83 ec 1c             	sub    esp,0x1c
c00012a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00012a6:	83 f8 df             	cmp    eax,0xffffffdf
c00012a9:	0f 87 70 03 00 00    	ja     c000161f <dlmalloc+0x384>
c00012af:	83 c0 0b             	add    eax,0xb
c00012b2:	be 10 00 00 00       	mov    esi,0x10
c00012b7:	83 f8 0f             	cmp    eax,0xf
c00012ba:	76 05                	jbe    c00012c1 <dlmalloc+0x26>
c00012bc:	83 e0 f8             	and    eax,0xfffffff8
c00012bf:	89 c6                	mov    esi,eax
c00012c1:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00012c7:	f7 c7 01 00 00 00    	test   edi,0x1
c00012cd:	75 17                	jne    c00012e6 <dlmalloc+0x4b>
c00012cf:	85 ff                	test   edi,edi
c00012d1:	0f 85 05 03 00 00    	jne    c00015dc <dlmalloc+0x341>
c00012d7:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00012dc:	e8 75 fb ff ff       	call   c0000e56 <malloc_consolidate>
c00012e1:	e9 f6 02 00 00       	jmp    c00015dc <dlmalloc+0x341>
c00012e6:	39 f7                	cmp    edi,esi
c00012e8:	72 1f                	jb     c0001309 <dlmalloc+0x6e>
c00012ea:	89 f2                	mov    edx,esi
c00012ec:	c1 ea 03             	shr    edx,0x3
c00012ef:	83 ea 02             	sub    edx,0x2
c00012f2:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c00012f9:	85 c0                	test   eax,eax
c00012fb:	74 0c                	je     c0001309 <dlmalloc+0x6e>
c00012fd:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001300:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c0001307:	eb 30                	jmp    c0001339 <dlmalloc+0x9e>
c0001309:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130f:	89 f0                	mov    eax,esi
c0001311:	77 2e                	ja     c0001341 <dlmalloc+0xa6>
c0001313:	c1 e8 03             	shr    eax,0x3
c0001316:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000131a:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001321:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001324:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001327:	39 c3                	cmp    ebx,eax
c0001329:	74 2e                	je     c0001359 <dlmalloc+0xbe>
c000132b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000132e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001333:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001336:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001339:	83 c0 08             	add    eax,0x8
c000133c:	e9 e0 02 00 00       	jmp    c0001621 <dlmalloc+0x386>
c0001341:	e8 8c fa ff ff       	call   c0000dd2 <largebin_index>
c0001346:	83 e7 02             	and    edi,0x2
c0001349:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000134d:	74 0a                	je     c0001359 <dlmalloc+0xbe>
c000134f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001354:	e8 fd fa ff ff       	call   c0000e56 <malloc_consolidate>
c0001359:	8d 46 10             	lea    eax,[esi+0x10]
c000135c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001360:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c0001366:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c000136c:	0f 84 13 01 00 00    	je     c0001485 <dlmalloc+0x1ea>
c0001372:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001375:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001378:	83 e7 fc             	and    edi,0xfffffffc
c000137b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001381:	77 4c                	ja     c00013cf <dlmalloc+0x134>
c0001383:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c0001388:	75 45                	jne    c00013cf <dlmalloc+0x134>
c000138a:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c0001390:	75 3d                	jne    c00013cf <dlmalloc+0x134>
c0001392:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001396:	73 37                	jae    c00013cf <dlmalloc+0x134>
c0001398:	8d 04 33             	lea    eax,[ebx+esi*1]
c000139b:	89 fa                	mov    edx,edi
c000139d:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00013a2:	29 f2                	sub    edx,esi
c00013a4:	83 ce 01             	or     esi,0x1
c00013a7:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00013ac:	89 d1                	mov    ecx,edx
c00013ae:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00013b3:	83 c9 01             	or     ecx,0x1
c00013b6:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013bd:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00013c4:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00013c7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00013ca:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00013cd:	eb 15                	jmp    c00013e4 <dlmalloc+0x149>
c00013cf:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00013d4:	39 fe                	cmp    esi,edi
c00013d6:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00013dd:	75 0d                	jne    c00013ec <dlmalloc+0x151>
c00013df:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00013e4:	8d 43 08             	lea    eax,[ebx+0x8]
c00013e7:	e9 35 02 00 00       	jmp    c0001621 <dlmalloc+0x386>
c00013ec:	81 ff ff 00 00 00    	cmp    edi,0xff
c00013f2:	89 f8                	mov    eax,edi
c00013f4:	77 19                	ja     c000140f <dlmalloc+0x174>
c00013f6:	c1 e8 03             	shr    eax,0x3
c00013f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00013fc:	83 c2 0d             	add    edx,0xd
c00013ff:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c0001406:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000140d:	eb 46                	jmp    c0001455 <dlmalloc+0x1ba>
c000140f:	e8 be f9 ff ff       	call   c0000dd2 <largebin_index>
c0001414:	8d 14 00             	lea    edx,[eax+eax*1]
c0001417:	83 c2 0d             	add    edx,0xd
c000141a:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001421:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001428:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000142b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000142f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001433:	89 d5                	mov    ebp,edx
c0001435:	74 1e                	je     c0001455 <dlmalloc+0x1ba>
c0001437:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000143a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000143d:	77 12                	ja     c0001451 <dlmalloc+0x1b6>
c000143f:	83 cf 01             	or     edi,0x1
c0001442:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001445:	76 05                	jbe    c000144c <dlmalloc+0x1b1>
c0001447:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000144a:	eb f6                	jmp    c0001442 <dlmalloc+0x1a7>
c000144c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000144f:	eb 04                	jmp    c0001455 <dlmalloc+0x1ba>
c0001451:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001455:	89 c7                	mov    edi,eax
c0001457:	88 c1                	mov    cl,al
c0001459:	c1 ff 05             	sar    edi,0x5
c000145c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001460:	bf 01 00 00 00       	mov    edi,0x1
c0001465:	d3 e7                	shl    edi,cl
c0001467:	89 f8                	mov    eax,edi
c0001469:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000146d:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c0001474:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001477:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000147a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000147d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001480:	e9 db fe ff ff       	jmp    c0001360 <dlmalloc+0xc5>
c0001485:	81 fe ff 00 00 00    	cmp    esi,0xff
c000148b:	76 78                	jbe    c0001505 <dlmalloc+0x26a>
c000148d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001491:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c0001498:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000149b:	8d 48 f8             	lea    ecx,[eax-0x8]
c000149e:	39 ca                	cmp    edx,ecx
c00014a0:	74 63                	je     c0001505 <dlmalloc+0x26a>
c00014a2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00014a5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014a8:	83 e3 fc             	and    ebx,0xfffffffc
c00014ab:	39 de                	cmp    esi,ebx
c00014ad:	77 52                	ja     c0001501 <dlmalloc+0x266>
c00014af:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00014b2:	89 df                	mov    edi,ebx
c00014b4:	01 d3                	add    ebx,edx
c00014b6:	29 f7                	sub    edi,esi
c00014b8:	83 ff 0f             	cmp    edi,0xf
c00014bb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014be:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00014c1:	8d 42 08             	lea    eax,[edx+0x8]
c00014c4:	77 09                	ja     c00014cf <dlmalloc+0x234>
c00014c6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00014ca:	e9 52 01 00 00       	jmp    c0001621 <dlmalloc+0x386>
c00014cf:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00014d2:	83 ce 01             	or     esi,0x1
c00014d5:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00014db:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00014e1:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00014e8:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00014ef:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00014f2:	89 fa                	mov    edx,edi
c00014f4:	83 ca 01             	or     edx,0x1
c00014f7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014fa:	89 3b                	mov    DWORD PTR [ebx],edi
c00014fc:	e9 20 01 00 00       	jmp    c0001621 <dlmalloc+0x386>
c0001501:	89 c2                	mov    edx,eax
c0001503:	eb 99                	jmp    c000149e <dlmalloc+0x203>
c0001505:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001509:	b8 01 00 00 00       	mov    eax,0x1
c000150e:	41                   	inc    ecx
c000150f:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c0001516:	89 cb                	mov    ebx,ecx
c0001518:	c1 eb 05             	shr    ebx,0x5
c000151b:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001522:	d3 e0                	shl    eax,cl
c0001524:	39 f8                	cmp    eax,edi
c0001526:	77 04                	ja     c000152c <dlmalloc+0x291>
c0001528:	85 c0                	test   eax,eax
c000152a:	75 26                	jne    c0001552 <dlmalloc+0x2b7>
c000152c:	43                   	inc    ebx
c000152d:	83 fb 02             	cmp    ebx,0x2
c0001530:	0f 87 a6 00 00 00    	ja     c00015dc <dlmalloc+0x341>
c0001536:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c000153d:	85 ff                	test   edi,edi
c000153f:	74 eb                	je     c000152c <dlmalloc+0x291>
c0001541:	89 d8                	mov    eax,ebx
c0001543:	c1 e0 06             	shl    eax,0x6
c0001546:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c000154d:	b8 01 00 00 00       	mov    eax,0x1
c0001552:	85 f8                	test   eax,edi
c0001554:	75 07                	jne    c000155d <dlmalloc+0x2c2>
c0001556:	83 c2 08             	add    edx,0x8
c0001559:	01 c0                	add    eax,eax
c000155b:	eb f5                	jmp    c0001552 <dlmalloc+0x2b7>
c000155d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001560:	39 ca                	cmp    edx,ecx
c0001562:	75 14                	jne    c0001578 <dlmalloc+0x2dd>
c0001564:	89 c1                	mov    ecx,eax
c0001566:	83 c2 08             	add    edx,0x8
c0001569:	f7 d1                	not    ecx
c000156b:	01 c0                	add    eax,eax
c000156d:	21 cf                	and    edi,ecx
c000156f:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c0001576:	eb ac                	jmp    c0001524 <dlmalloc+0x289>
c0001578:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000157b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000157e:	83 e0 fc             	and    eax,0xfffffffc
c0001581:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001584:	89 c3                	mov    ebx,eax
c0001586:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001589:	8d 14 01             	lea    edx,[ecx+eax*1]
c000158c:	29 f3                	sub    ebx,esi
c000158e:	8d 41 08             	lea    eax,[ecx+0x8]
c0001591:	83 fb 0f             	cmp    ebx,0xf
c0001594:	77 09                	ja     c000159f <dlmalloc+0x304>
c0001596:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000159a:	e9 82 00 00 00       	jmp    c0001621 <dlmalloc+0x386>
c000159f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00015a2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00015a8:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00015ae:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00015b4:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00015bb:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00015c2:	77 06                	ja     c00015ca <dlmalloc+0x32f>
c00015c4:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00015ca:	83 ce 01             	or     esi,0x1
c00015cd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00015d0:	89 d9                	mov    ecx,ebx
c00015d2:	83 c9 01             	or     ecx,0x1
c00015d5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00015d8:	89 1a                	mov    DWORD PTR [edx],ebx
c00015da:	eb 45                	jmp    c0001621 <dlmalloc+0x386>
c00015dc:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00015e1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00015e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00015e7:	83 e2 fc             	and    edx,0xfffffffc
c00015ea:	39 d1                	cmp    ecx,edx
c00015ec:	77 1e                	ja     c000160c <dlmalloc+0x371>
c00015ee:	89 f3                	mov    ebx,esi
c00015f0:	29 f2                	sub    edx,esi
c00015f2:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00015f5:	83 cb 01             	or     ebx,0x1
c00015f8:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c00015fe:	83 ca 01             	or     edx,0x1
c0001601:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001604:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001607:	e9 2d fd ff ff       	jmp    c0001339 <dlmalloc+0x9e>
c000160c:	83 c4 1c             	add    esp,0x1c
c000160f:	89 f0                	mov    eax,esi
c0001611:	5b                   	pop    ebx
c0001612:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c0001617:	5e                   	pop    esi
c0001618:	5f                   	pop    edi
c0001619:	5d                   	pop    ebp
c000161a:	e9 13 fa ff ff       	jmp    c0001032 <sYSMALLOc>
c000161f:	31 c0                	xor    eax,eax
c0001621:	83 c4 1c             	add    esp,0x1c
c0001624:	5b                   	pop    ebx
c0001625:	5e                   	pop    esi
c0001626:	5f                   	pop    edi
c0001627:	5d                   	pop    ebp
c0001628:	c3                   	ret    

c0001629 <iALLOc>:
c0001629:	55                   	push   ebp
c000162a:	89 c5                	mov    ebp,eax
c000162c:	57                   	push   edi
c000162d:	56                   	push   esi
c000162e:	53                   	push   ebx
c000162f:	83 ec 2c             	sub    esp,0x2c
c0001632:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001636:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000163a:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001645:	75 12                	jne    c0001659 <iALLOc+0x30>
c0001647:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000164b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001650:	e8 01 f8 ff ff       	call   c0000e56 <malloc_consolidate>
c0001655:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001659:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000165e:	74 12                	je     c0001672 <iALLOc+0x49>
c0001660:	85 ed                	test   ebp,ebp
c0001662:	0f 84 64 01 00 00    	je     c00017cc <iALLOc+0x1a3>
c0001668:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001670:	eb 33                	jmp    c00016a5 <iALLOc+0x7c>
c0001672:	85 ed                	test   ebp,ebp
c0001674:	75 14                	jne    c000168a <iALLOc+0x61>
c0001676:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000167e:	83 c4 2c             	add    esp,0x2c
c0001681:	5b                   	pop    ebx
c0001682:	5e                   	pop    esi
c0001683:	5f                   	pop    edi
c0001684:	5d                   	pop    ebp
c0001685:	e9 11 fc ff ff       	jmp    c000129b <dlmalloc>
c000168a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001692:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001699:	83 f8 0f             	cmp    eax,0xf
c000169c:	76 07                	jbe    c00016a5 <iALLOc+0x7c>
c000169e:	83 e0 f8             	and    eax,0xfffffff8
c00016a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00016a5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00016aa:	75 09                	jne    c00016b5 <iALLOc+0x8c>
c00016ac:	89 d0                	mov    eax,edx
c00016ae:	31 f6                	xor    esi,esi
c00016b0:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00016b3:	eb 3b                	jmp    c00016f0 <iALLOc+0xc7>
c00016b5:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00016bd:	8b 02                	mov    eax,DWORD PTR [edx]
c00016bf:	83 c0 0b             	add    eax,0xb
c00016c2:	83 f8 0f             	cmp    eax,0xf
c00016c5:	76 07                	jbe    c00016ce <iALLOc+0xa5>
c00016c7:	83 e0 f8             	and    eax,0xfffffff8
c00016ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00016ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00016d2:	0f af f5             	imul   esi,ebp
c00016d5:	eb 25                	jmp    c00016fc <iALLOc+0xd3>
c00016d7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00016d9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00016dc:	bb 10 00 00 00       	mov    ebx,0x10
c00016e1:	83 f9 0f             	cmp    ecx,0xf
c00016e4:	76 05                	jbe    c00016eb <iALLOc+0xc2>
c00016e6:	83 e1 f8             	and    ecx,0xfffffff8
c00016e9:	89 cb                	mov    ebx,ecx
c00016eb:	01 de                	add    esi,ebx
c00016ed:	83 c0 04             	add    eax,0x4
c00016f0:	39 c7                	cmp    edi,eax
c00016f2:	75 e3                	jne    c00016d7 <iALLOc+0xae>
c00016f4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00016fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001700:	83 ec 0c             	sub    esp,0xc
c0001703:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c0001709:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001717:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000171b:	50                   	push   eax
c000171c:	e8 7a fb ff ff       	call   c000129b <dlmalloc>
c0001721:	83 c4 10             	add    esp,0x10
c0001724:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000172a:	85 c0                	test   eax,eax
c000172c:	0f 84 92 00 00 00    	je     c00017c4 <iALLOc+0x19b>
c0001732:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001735:	8d 78 f8             	lea    edi,[eax-0x8]
c0001738:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000173c:	83 e3 fc             	and    ebx,0xfffffffc
c000173f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001744:	74 1e                	je     c0001764 <iALLOc+0x13b>
c0001746:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000174a:	89 d9                	mov    ecx,ebx
c000174c:	52                   	push   edx
c000174d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001751:	83 e9 04             	sub    ecx,0x4
c0001754:	51                   	push   ecx
c0001755:	6a 00                	push   0x0
c0001757:	50                   	push   eax
c0001758:	e8 93 ed ff ff       	call   c00004f0 <memset>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001764:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001769:	75 14                	jne    c000177f <iALLOc+0x156>
c000176b:	8d 04 37             	lea    eax,[edi+esi*1]
c000176e:	29 f3                	sub    ebx,esi
c0001770:	8d 48 08             	lea    ecx,[eax+0x8]
c0001773:	83 cb 01             	or     ebx,0x1
c0001776:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001779:	89 f3                	mov    ebx,esi
c000177b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000177f:	31 c0                	xor    eax,eax
c0001781:	4d                   	dec    ebp
c0001782:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001786:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001789:	39 c5                	cmp    ebp,eax
c000178b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000178e:	74 2c                	je     c00017bc <iALLOc+0x193>
c0001790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001794:	85 c9                	test   ecx,ecx
c0001796:	75 15                	jne    c00017ad <iALLOc+0x184>
c0001798:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000179b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000179e:	b9 10 00 00 00       	mov    ecx,0x10
c00017a3:	83 fe 0f             	cmp    esi,0xf
c00017a6:	76 05                	jbe    c00017ad <iALLOc+0x184>
c00017a8:	83 e6 f8             	and    esi,0xfffffff8
c00017ab:	89 f1                	mov    ecx,esi
c00017ad:	89 ce                	mov    esi,ecx
c00017af:	29 cb                	sub    ebx,ecx
c00017b1:	83 ce 01             	or     esi,0x1
c00017b4:	40                   	inc    eax
c00017b5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00017b8:	01 cf                	add    edi,ecx
c00017ba:	eb c6                	jmp    c0001782 <iALLOc+0x159>
c00017bc:	83 cb 01             	or     ebx,0x1
c00017bf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00017c2:	eb 08                	jmp    c00017cc <iALLOc+0x1a3>
c00017c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00017cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017d0:	83 c4 2c             	add    esp,0x2c
c00017d3:	5b                   	pop    ebx
c00017d4:	5e                   	pop    esi
c00017d5:	5f                   	pop    edi
c00017d6:	5d                   	pop    ebp
c00017d7:	c3                   	ret    

c00017d8 <dlrealloc>:
c00017d8:	55                   	push   ebp
c00017d9:	57                   	push   edi
c00017da:	56                   	push   esi
c00017db:	53                   	push   ebx
c00017dc:	83 ec 1c             	sub    esp,0x1c
c00017df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00017e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00017e7:	85 db                	test   ebx,ebx
c00017e9:	75 10                	jne    c00017fb <dlrealloc+0x23>
c00017eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00017ef:	83 c4 1c             	add    esp,0x1c
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	e9 a0 fa ff ff       	jmp    c000129b <dlmalloc>
c00017fb:	83 f8 df             	cmp    eax,0xffffffdf
c00017fe:	76 07                	jbe    c0001807 <dlrealloc+0x2f>
c0001800:	31 db                	xor    ebx,ebx
c0001802:	e9 6b 01 00 00       	jmp    c0001972 <dlrealloc+0x19a>
c0001807:	83 c0 0b             	add    eax,0xb
c000180a:	bd 10 00 00 00       	mov    ebp,0x10
c000180f:	83 f8 0f             	cmp    eax,0xf
c0001812:	76 05                	jbe    c0001819 <dlrealloc+0x41>
c0001814:	83 e0 f8             	and    eax,0xfffffff8
c0001817:	89 c5                	mov    ebp,eax
c0001819:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000181c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000181f:	89 ce                	mov    esi,ecx
c0001821:	83 e6 fc             	and    esi,0xfffffffc
c0001824:	f6 c1 02             	test   cl,0x2
c0001827:	75 d7                	jne    c0001800 <dlrealloc+0x28>
c0001829:	39 f5                	cmp    ebp,esi
c000182b:	0f 86 04 01 00 00    	jbe    c0001935 <dlrealloc+0x15d>
c0001831:	8d 14 37             	lea    edx,[edi+esi*1]
c0001834:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c000183a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000183d:	75 33                	jne    c0001872 <dlrealloc+0x9a>
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	01 f0                	add    eax,esi
c0001844:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001848:	8d 45 10             	lea    eax,[ebp+0x10]
c000184b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000184f:	77 49                	ja     c000189a <dlrealloc+0xc2>
c0001851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001855:	83 e1 01             	and    ecx,0x1
c0001858:	01 ef                	add    edi,ebp
c000185a:	09 e9                	or     ecx,ebp
c000185c:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c000185f:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c0001865:	29 e8                	sub    eax,ebp
c0001867:	83 c8 01             	or     eax,0x1
c000186a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000186d:	e9 00 01 00 00       	jmp    c0001972 <dlrealloc+0x19a>
c0001872:	89 c1                	mov    ecx,eax
c0001874:	83 e1 fe             	and    ecx,0xfffffffe
c0001877:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c000187c:	75 1c                	jne    c000189a <dlrealloc+0xc2>
c000187e:	83 e0 fc             	and    eax,0xfffffffc
c0001881:	01 f0                	add    eax,esi
c0001883:	39 c5                	cmp    ebp,eax
c0001885:	77 13                	ja     c000189a <dlrealloc+0xc2>
c0001887:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000188a:	89 c6                	mov    esi,eax
c000188c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000188f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0001892:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0001895:	e9 9b 00 00 00       	jmp    c0001935 <dlrealloc+0x15d>
c000189a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000189e:	8d 45 f9             	lea    eax,[ebp-0x7]
c00018a1:	83 ec 0c             	sub    esp,0xc
c00018a4:	50                   	push   eax
c00018a5:	e8 f1 f9 ff ff       	call   c000129b <dlmalloc>
c00018aa:	83 c4 10             	add    esp,0x10
c00018ad:	85 c0                	test   eax,eax
c00018af:	0f 84 4b ff ff ff    	je     c0001800 <dlrealloc+0x28>
c00018b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018b9:	8d 48 f8             	lea    ecx,[eax-0x8]
c00018bc:	39 ca                	cmp    edx,ecx
c00018be:	75 0a                	jne    c00018ca <dlrealloc+0xf2>
c00018c0:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00018c3:	83 e0 fc             	and    eax,0xfffffffc
c00018c6:	01 c6                	add    esi,eax
c00018c8:	eb 6b                	jmp    c0001935 <dlrealloc+0x15d>
c00018ca:	8d 4e fc             	lea    ecx,[esi-0x4]
c00018cd:	83 f9 27             	cmp    ecx,0x27
c00018d0:	76 08                	jbe    c00018da <dlrealloc+0x102>
c00018d2:	89 de                	mov    esi,ebx
c00018d4:	89 c7                	mov    edi,eax
c00018d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00018d8:	eb 43                	jmp    c000191d <dlrealloc+0x145>
c00018da:	8b 13                	mov    edx,DWORD PTR [ebx]
c00018dc:	83 f9 13             	cmp    ecx,0x13
c00018df:	89 10                	mov    DWORD PTR [eax],edx
c00018e1:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00018e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00018e7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00018ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00018ed:	76 2e                	jbe    c000191d <dlrealloc+0x145>
c00018ef:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00018f2:	83 f9 1b             	cmp    ecx,0x1b
c00018f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00018f8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00018fb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00018fe:	76 1d                	jbe    c000191d <dlrealloc+0x145>
c0001900:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001903:	83 f9 23             	cmp    ecx,0x23
c0001906:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001909:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000190c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000190f:	76 0c                	jbe    c000191d <dlrealloc+0x145>
c0001911:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001914:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001917:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000191a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000191d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001921:	83 ec 0c             	sub    esp,0xc
c0001924:	53                   	push   ebx
c0001925:	e8 13 f6 ff ff       	call   c0000f3d <dlfree>
c000192a:	83 c4 10             	add    esp,0x10
c000192d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001931:	89 c3                	mov    ebx,eax
c0001933:	eb 3d                	jmp    c0001972 <dlrealloc+0x19a>
c0001935:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001938:	8d 04 37             	lea    eax,[edi+esi*1]
c000193b:	89 f2                	mov    edx,esi
c000193d:	29 ea                	sub    edx,ebp
c000193f:	83 e1 01             	and    ecx,0x1
c0001942:	83 fa 0f             	cmp    edx,0xf
c0001945:	77 0b                	ja     c0001952 <dlrealloc+0x17a>
c0001947:	09 ce                	or     esi,ecx
c0001949:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000194c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001950:	eb 20                	jmp    c0001972 <dlrealloc+0x19a>
c0001952:	01 ef                	add    edi,ebp
c0001954:	83 ca 01             	or     edx,0x1
c0001957:	09 cd                	or     ebp,ecx
c0001959:	83 ec 0c             	sub    esp,0xc
c000195c:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000195f:	83 c7 08             	add    edi,0x8
c0001962:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001965:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001969:	57                   	push   edi
c000196a:	e8 ce f5 ff ff       	call   c0000f3d <dlfree>
c000196f:	83 c4 10             	add    esp,0x10
c0001972:	83 c4 1c             	add    esp,0x1c
c0001975:	89 d8                	mov    eax,ebx
c0001977:	5b                   	pop    ebx
c0001978:	5e                   	pop    esi
c0001979:	5f                   	pop    edi
c000197a:	5d                   	pop    ebp
c000197b:	c3                   	ret    

c000197c <dlmemalign>:
c000197c:	55                   	push   ebp
c000197d:	57                   	push   edi
c000197e:	56                   	push   esi
c000197f:	53                   	push   ebx
c0001980:	83 ec 0c             	sub    esp,0xc
c0001983:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001987:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000198b:	83 fa 08             	cmp    edx,0x8
c000198e:	77 10                	ja     c00019a0 <dlmemalign+0x24>
c0001990:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001994:	83 c4 0c             	add    esp,0xc
c0001997:	5b                   	pop    ebx
c0001998:	5e                   	pop    esi
c0001999:	5f                   	pop    edi
c000199a:	5d                   	pop    ebp
c000199b:	e9 fb f8 ff ff       	jmp    c000129b <dlmalloc>
c00019a0:	83 fa 0f             	cmp    edx,0xf
c00019a3:	bf 10 00 00 00       	mov    edi,0x10
c00019a8:	76 13                	jbe    c00019bd <dlmemalign+0x41>
c00019aa:	8d 4a ff             	lea    ecx,[edx-0x1]
c00019ad:	85 d1                	test   ecx,edx
c00019af:	75 04                	jne    c00019b5 <dlmemalign+0x39>
c00019b1:	89 d7                	mov    edi,edx
c00019b3:	eb 08                	jmp    c00019bd <dlmemalign+0x41>
c00019b5:	39 d7                	cmp    edi,edx
c00019b7:	73 04                	jae    c00019bd <dlmemalign+0x41>
c00019b9:	01 ff                	add    edi,edi
c00019bb:	eb f8                	jmp    c00019b5 <dlmemalign+0x39>
c00019bd:	83 f8 df             	cmp    eax,0xffffffdf
c00019c0:	76 07                	jbe    c00019c9 <dlmemalign+0x4d>
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	e9 ce 00 00 00       	jmp    c0001a97 <dlmemalign+0x11b>
c00019c9:	83 c0 0b             	add    eax,0xb
c00019cc:	bd 10 00 00 00       	mov    ebp,0x10
c00019d1:	83 f8 0f             	cmp    eax,0xf
c00019d4:	76 05                	jbe    c00019db <dlmemalign+0x5f>
c00019d6:	83 e0 f8             	and    eax,0xfffffff8
c00019d9:	89 c5                	mov    ebp,eax
c00019db:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00019df:	83 ec 0c             	sub    esp,0xc
c00019e2:	50                   	push   eax
c00019e3:	e8 b3 f8 ff ff       	call   c000129b <dlmalloc>
c00019e8:	83 c4 10             	add    esp,0x10
c00019eb:	85 c0                	test   eax,eax
c00019ed:	89 c1                	mov    ecx,eax
c00019ef:	74 d1                	je     c00019c2 <dlmemalign+0x46>
c00019f1:	8d 70 f8             	lea    esi,[eax-0x8]
c00019f4:	31 d2                	xor    edx,edx
c00019f6:	f7 f7                	div    edi
c00019f8:	85 d2                	test   edx,edx
c00019fa:	74 62                	je     c0001a5e <dlmemalign+0xe2>
c00019fc:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001a00:	89 f8                	mov    eax,edi
c0001a02:	f7 d8                	neg    eax
c0001a04:	21 c3                	and    ebx,eax
c0001a06:	83 eb 08             	sub    ebx,0x8
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	29 f0                	sub    eax,esi
c0001a0d:	83 f8 0f             	cmp    eax,0xf
c0001a10:	77 02                	ja     c0001a14 <dlmemalign+0x98>
c0001a12:	01 fb                	add    ebx,edi
c0001a14:	89 d8                	mov    eax,ebx
c0001a16:	29 f0                	sub    eax,esi
c0001a18:	89 c6                	mov    esi,eax
c0001a1a:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a1d:	89 c2                	mov    edx,eax
c0001a1f:	83 e2 fc             	and    edx,0xfffffffc
c0001a22:	29 f2                	sub    edx,esi
c0001a24:	a8 02                	test   al,0x2
c0001a26:	74 10                	je     c0001a38 <dlmemalign+0xbc>
c0001a28:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001a2b:	83 ca 02             	or     edx,0x2
c0001a2e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001a31:	8d 43 08             	lea    eax,[ebx+0x8]
c0001a34:	89 33                	mov    DWORD PTR [ebx],esi
c0001a36:	eb 5f                	jmp    c0001a97 <dlmemalign+0x11b>
c0001a38:	89 d0                	mov    eax,edx
c0001a3a:	83 ec 0c             	sub    esp,0xc
c0001a3d:	83 c8 01             	or     eax,0x1
c0001a40:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001a43:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a48:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a4b:	83 e0 01             	and    eax,0x1
c0001a4e:	09 f0                	or     eax,esi
c0001a50:	89 de                	mov    esi,ebx
c0001a52:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a55:	51                   	push   ecx
c0001a56:	e8 e2 f4 ff ff       	call   c0000f3d <dlfree>
c0001a5b:	83 c4 10             	add    esp,0x10
c0001a5e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a61:	a8 02                	test   al,0x2
c0001a63:	75 2f                	jne    c0001a94 <dlmemalign+0x118>
c0001a65:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a68:	83 e0 fc             	and    eax,0xfffffffc
c0001a6b:	39 c2                	cmp    edx,eax
c0001a6d:	73 25                	jae    c0001a94 <dlmemalign+0x118>
c0001a6f:	29 e8                	sub    eax,ebp
c0001a71:	83 ec 0c             	sub    esp,0xc
c0001a74:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a77:	83 c8 01             	or     eax,0x1
c0001a7a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0001a7d:	83 c2 08             	add    edx,0x8
c0001a80:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a83:	83 e0 01             	and    eax,0x1
c0001a86:	09 c5                	or     ebp,eax
c0001a88:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a8b:	52                   	push   edx
c0001a8c:	e8 ac f4 ff ff       	call   c0000f3d <dlfree>
c0001a91:	83 c4 10             	add    esp,0x10
c0001a94:	8d 46 08             	lea    eax,[esi+0x8]
c0001a97:	83 c4 0c             	add    esp,0xc
c0001a9a:	5b                   	pop    ebx
c0001a9b:	5e                   	pop    esi
c0001a9c:	5f                   	pop    edi
c0001a9d:	5d                   	pop    ebp
c0001a9e:	c3                   	ret    

c0001a9f <dlcalloc>:
c0001a9f:	53                   	push   ebx
c0001aa0:	83 ec 14             	sub    esp,0x14
c0001aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001aa7:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001aac:	50                   	push   eax
c0001aad:	e8 e9 f7 ff ff       	call   c000129b <dlmalloc>
c0001ab2:	83 c4 10             	add    esp,0x10
c0001ab5:	85 c0                	test   eax,eax
c0001ab7:	89 c3                	mov    ebx,eax
c0001ab9:	74 77                	je     c0001b32 <dlcalloc+0x93>
c0001abb:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001abe:	89 d0                	mov    eax,edx
c0001ac0:	83 e0 fc             	and    eax,0xfffffffc
c0001ac3:	80 e2 02             	and    dl,0x2
c0001ac6:	75 5a                	jne    c0001b22 <dlcalloc+0x83>
c0001ac8:	83 e8 04             	sub    eax,0x4
c0001acb:	83 f8 27             	cmp    eax,0x27
c0001ace:	76 03                	jbe    c0001ad3 <dlcalloc+0x34>
c0001ad0:	51                   	push   ecx
c0001ad1:	eb 53                	jmp    c0001b26 <dlcalloc+0x87>
c0001ad3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001ad9:	83 f8 13             	cmp    eax,0x13
c0001adc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001ae3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aea:	76 46                	jbe    c0001b32 <dlcalloc+0x93>
c0001aec:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001af3:	83 f8 1b             	cmp    eax,0x1b
c0001af6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001afd:	76 33                	jbe    c0001b32 <dlcalloc+0x93>
c0001aff:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001b06:	83 f8 23             	cmp    eax,0x23
c0001b09:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001b10:	76 20                	jbe    c0001b32 <dlcalloc+0x93>
c0001b12:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001b19:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001b20:	eb 10                	jmp    c0001b32 <dlcalloc+0x93>
c0001b22:	52                   	push   edx
c0001b23:	83 e8 08             	sub    eax,0x8
c0001b26:	50                   	push   eax
c0001b27:	6a 00                	push   0x0
c0001b29:	53                   	push   ebx
c0001b2a:	e8 c1 e9 ff ff       	call   c00004f0 <memset>
c0001b2f:	83 c4 10             	add    esp,0x10
c0001b32:	83 c4 08             	add    esp,0x8
c0001b35:	89 d8                	mov    eax,ebx
c0001b37:	5b                   	pop    ebx
c0001b38:	c3                   	ret    

c0001b39 <dlcfree>:
c0001b39:	e9 ff f3 ff ff       	jmp    c0000f3d <dlfree>

c0001b3e <dlindependent_calloc>:
c0001b3e:	83 ec 28             	sub    esp,0x28
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001b4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b56:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b5a:	e8 ca fa ff ff       	call   c0001629 <iALLOc>
c0001b5f:	83 c4 2c             	add    esp,0x2c
c0001b62:	c3                   	ret    

c0001b63 <dlindependent_comalloc>:
c0001b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b67:	31 c9                	xor    ecx,ecx
c0001b69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b75:	e9 af fa ff ff       	jmp    c0001629 <iALLOc>

c0001b7a <dlvalloc>:
c0001b7a:	83 ec 0c             	sub    esp,0xc
c0001b7d:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001b84:	75 0a                	jne    c0001b90 <dlvalloc+0x16>
c0001b86:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b8b:	e8 c6 f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001b90:	50                   	push   eax
c0001b91:	50                   	push   eax
c0001b92:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b96:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001b9c:	e8 db fd ff ff       	call   c000197c <dlmemalign>
c0001ba1:	83 c4 1c             	add    esp,0x1c
c0001ba4:	c3                   	ret    

c0001ba5 <dlpvalloc>:
c0001ba5:	83 ec 0c             	sub    esp,0xc
c0001ba8:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001baf:	75 0a                	jne    c0001bbb <dlpvalloc+0x16>
c0001bb1:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001bb6:	e8 9b f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001bbb:	52                   	push   edx
c0001bbc:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001bc1:	52                   	push   edx
c0001bc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001bc6:	89 c1                	mov    ecx,eax
c0001bc8:	f7 d9                	neg    ecx
c0001bca:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001bce:	21 ca                	and    edx,ecx
c0001bd0:	52                   	push   edx
c0001bd1:	50                   	push   eax
c0001bd2:	e8 a5 fd ff ff       	call   c000197c <dlmemalign>
c0001bd7:	83 c4 1c             	add    esp,0x1c
c0001bda:	c3                   	ret    

c0001bdb <dlmalloc_trim>:
c0001bdb:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001be0:	e8 71 f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001be5:	31 c0                	xor    eax,eax
c0001be7:	c3                   	ret    

c0001be8 <dlmalloc_usable_size>:
c0001be8:	53                   	push   ebx
c0001be9:	31 c0                	xor    eax,eax
c0001beb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001bef:	85 c9                	test   ecx,ecx
c0001bf1:	74 24                	je     c0001c17 <dlmalloc_usable_size+0x2f>
c0001bf3:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001bf6:	f6 c2 02             	test   dl,0x2
c0001bf9:	74 08                	je     c0001c03 <dlmalloc_usable_size+0x1b>
c0001bfb:	83 e2 fc             	and    edx,0xfffffffc
c0001bfe:	8d 42 f8             	lea    eax,[edx-0x8]
c0001c01:	eb 14                	jmp    c0001c17 <dlmalloc_usable_size+0x2f>
c0001c03:	89 d3                	mov    ebx,edx
c0001c05:	31 c0                	xor    eax,eax
c0001c07:	83 e3 fe             	and    ebx,0xfffffffe
c0001c0a:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001c0f:	74 06                	je     c0001c17 <dlmalloc_usable_size+0x2f>
c0001c11:	83 e2 fc             	and    edx,0xfffffffc
c0001c14:	8d 42 fc             	lea    eax,[edx-0x4]
c0001c17:	5b                   	pop    ebx
c0001c18:	c3                   	ret    

c0001c19 <dlmallinfo>:
c0001c19:	55                   	push   ebp
c0001c1a:	57                   	push   edi
c0001c1b:	56                   	push   esi
c0001c1c:	53                   	push   ebx
c0001c1d:	83 ec 08             	sub    esp,0x8
c0001c20:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001c27:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001c2b:	75 0a                	jne    c0001c37 <dlmallinfo+0x1e>
c0001c2d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001c32:	e8 1f f2 ff ff       	call   c0000e56 <malloc_consolidate>
c0001c37:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001c3c:	31 ed                	xor    ebp,ebp
c0001c3e:	31 c9                	xor    ecx,ecx
c0001c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001c43:	83 e0 fc             	and    eax,0xfffffffc
c0001c46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4a:	31 c0                	xor    eax,eax
c0001c4c:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001c53:	85 d2                	test   edx,edx
c0001c55:	74 0e                	je     c0001c65 <dlmallinfo+0x4c>
c0001c57:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c5a:	45                   	inc    ebp
c0001c5b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c5e:	83 e6 fc             	and    esi,0xfffffffc
c0001c61:	01 f1                	add    ecx,esi
c0001c63:	eb ee                	jmp    c0001c53 <dlmallinfo+0x3a>
c0001c65:	40                   	inc    eax
c0001c66:	83 f8 0a             	cmp    eax,0xa
c0001c69:	75 e1                	jne    c0001c4c <dlmallinfo+0x33>
c0001c6b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c76:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c79:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001c7e:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c81:	39 f0                	cmp    eax,esi
c0001c83:	74 10                	je     c0001c95 <dlmallinfo+0x7c>
c0001c85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c88:	ff 04 24             	inc    DWORD PTR [esp]
c0001c8b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c8e:	83 e7 fc             	and    edi,0xfffffffc
c0001c91:	01 fa                	add    edx,edi
c0001c93:	eb ec                	jmp    c0001c81 <dlmallinfo+0x68>
c0001c95:	83 c0 08             	add    eax,0x8
c0001c98:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001c9d:	75 df                	jne    c0001c7e <dlmallinfo+0x65>
c0001c9f:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001ca5:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ca8:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001cad:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001cb0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001cb3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001cb6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001cb9:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001cbf:	89 03                	mov    DWORD PTR [ebx],eax
c0001cc1:	29 d0                	sub    eax,edx
c0001cc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001cca:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ccd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001cd0:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001cd6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001cd9:	89 d8                	mov    eax,ebx
c0001cdb:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001cde:	83 c4 08             	add    esp,0x8
c0001ce1:	5b                   	pop    ebx
c0001ce2:	5e                   	pop    esi
c0001ce3:	5f                   	pop    edi
c0001ce4:	5d                   	pop    ebp
c0001ce5:	c2 04 00             	ret    0x4

c0001ce8 <dlmalloc_stats>:
c0001ce8:	83 ec 30             	sub    esp,0x30
c0001ceb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001cef:	50                   	push   eax
c0001cf0:	e8 24 ff ff ff       	call   c0001c19 <dlmallinfo>
c0001cf5:	83 c4 30             	add    esp,0x30
c0001cf8:	c3                   	ret    

c0001cf9 <dlmallopt>:
c0001cf9:	56                   	push   esi
c0001cfa:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001cff:	53                   	push   ebx
c0001d00:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001d04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001d08:	e8 49 f1 ff ff       	call   c0000e56 <malloc_consolidate>
c0001d0d:	8d 46 04             	lea    eax,[esi+0x4]
c0001d10:	83 f8 05             	cmp    eax,0x5
c0001d13:	77 67                	ja     c0001d7c <dlmallopt+0x83>
c0001d15:	ff 24 85 c0 f5 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0a40]
c0001d1c:	83 fb 50             	cmp    ebx,0x50
c0001d1f:	77 5b                	ja     c0001d7c <dlmallopt+0x83>
c0001d21:	85 db                	test   ebx,ebx
c0001d23:	ba 08 00 00 00       	mov    edx,0x8
c0001d28:	74 12                	je     c0001d3c <dlmallopt+0x43>
c0001d2a:	83 c3 0b             	add    ebx,0xb
c0001d2d:	ba 10 00 00 00       	mov    edx,0x10
c0001d32:	83 fb 0f             	cmp    ebx,0xf
c0001d35:	76 05                	jbe    c0001d3c <dlmallopt+0x43>
c0001d37:	89 da                	mov    edx,ebx
c0001d39:	83 e2 f8             	and    edx,0xfffffff8
c0001d3c:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001d41:	83 e0 03             	and    eax,0x3
c0001d44:	09 d0                	or     eax,edx
c0001d46:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001d4b:	eb 31                	jmp    c0001d7e <dlmallopt+0x85>
c0001d4d:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001d53:	eb 06                	jmp    c0001d5b <dlmallopt+0x62>
c0001d55:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001d5b:	be 01 00 00 00       	mov    esi,0x1
c0001d60:	eb 1c                	jmp    c0001d7e <dlmallopt+0x85>
c0001d62:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001d68:	eb f1                	jmp    c0001d5b <dlmallopt+0x62>
c0001d6a:	31 f6                	xor    esi,esi
c0001d6c:	85 db                	test   ebx,ebx
c0001d6e:	75 0e                	jne    c0001d7e <dlmallopt+0x85>
c0001d70:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001d7a:	eb df                	jmp    c0001d5b <dlmallopt+0x62>
c0001d7c:	31 f6                	xor    esi,esi
c0001d7e:	5b                   	pop    ebx
c0001d7f:	89 f0                	mov    eax,esi
c0001d81:	5e                   	pop    esi
c0001d82:	c3                   	ret    
c0001d83:	90                   	nop

c0001d84 <isblank>:
c0001d84:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d89:	74 09                	je     c0001d94 <isblank+0x10>
c0001d8b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d90:	75 0a                	jne    c0001d9c <isblank+0x18>
c0001d92:	66 90                	xchg   ax,ax
c0001d94:	b8 01 00 00 00       	mov    eax,0x1
c0001d99:	c3                   	ret    
c0001d9a:	66 90                	xchg   ax,ax
c0001d9c:	b8 00 00 00 00       	mov    eax,0x0
c0001da1:	c3                   	ret    
c0001da2:	66 90                	xchg   ax,ax

c0001da4 <iscntrl>:
c0001da4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001da9:	7e 09                	jle    c0001db4 <iscntrl+0x10>
c0001dab:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001db0:	75 0a                	jne    c0001dbc <iscntrl+0x18>
c0001db2:	66 90                	xchg   ax,ax
c0001db4:	b8 01 00 00 00       	mov    eax,0x1
c0001db9:	c3                   	ret    
c0001dba:	66 90                	xchg   ax,ax
c0001dbc:	b8 00 00 00 00       	mov    eax,0x0
c0001dc1:	c3                   	ret    
c0001dc2:	66 90                	xchg   ax,ax

c0001dc4 <isdigit>:
c0001dc4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001dc9:	7e 0d                	jle    c0001dd8 <isdigit+0x14>
c0001dcb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001dd0:	7f 06                	jg     c0001dd8 <isdigit+0x14>
c0001dd2:	b8 01 00 00 00       	mov    eax,0x1
c0001dd7:	c3                   	ret    
c0001dd8:	b8 00 00 00 00       	mov    eax,0x0
c0001ddd:	c3                   	ret    
c0001dde:	66 90                	xchg   ax,ax

c0001de0 <islower>:
c0001de0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001de5:	7e 0d                	jle    c0001df4 <islower+0x14>
c0001de7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001dec:	7f 06                	jg     c0001df4 <islower+0x14>
c0001dee:	b8 01 00 00 00       	mov    eax,0x1
c0001df3:	c3                   	ret    
c0001df4:	b8 00 00 00 00       	mov    eax,0x0
c0001df9:	c3                   	ret    
c0001dfa:	66 90                	xchg   ax,ax

c0001dfc <isspace>:
c0001dfc:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001e01:	7c 19                	jl     c0001e1c <isspace+0x20>
c0001e03:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001e08:	7e 0a                	jle    c0001e14 <isspace+0x18>
c0001e0a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e0f:	75 0b                	jne    c0001e1c <isspace+0x20>
c0001e11:	8d 76 00             	lea    esi,[esi+0x0]
c0001e14:	b8 01 00 00 00       	mov    eax,0x1
c0001e19:	c3                   	ret    
c0001e1a:	66 90                	xchg   ax,ax
c0001e1c:	b8 00 00 00 00       	mov    eax,0x0
c0001e21:	c3                   	ret    
c0001e22:	66 90                	xchg   ax,ax

c0001e24 <isupper>:
c0001e24:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e29:	7e 0d                	jle    c0001e38 <isupper+0x14>
c0001e2b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001e30:	7f 06                	jg     c0001e38 <isupper+0x14>
c0001e32:	b8 01 00 00 00       	mov    eax,0x1
c0001e37:	c3                   	ret    
c0001e38:	b8 00 00 00 00       	mov    eax,0x0
c0001e3d:	c3                   	ret    
c0001e3e:	66 90                	xchg   ax,ax

c0001e40 <isalpha>:
c0001e40:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e44:	e8 db ff ff ff       	call   c0001e24 <isupper>
c0001e49:	83 c4 04             	add    esp,0x4
c0001e4c:	85 c0                	test   eax,eax
c0001e4e:	75 10                	jne    c0001e60 <isalpha+0x20>
c0001e50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e54:	e8 87 ff ff ff       	call   c0001de0 <islower>
c0001e59:	83 c4 04             	add    esp,0x4
c0001e5c:	85 c0                	test   eax,eax
c0001e5e:	74 08                	je     c0001e68 <isalpha+0x28>
c0001e60:	b8 01 00 00 00       	mov    eax,0x1
c0001e65:	c3                   	ret    
c0001e66:	66 90                	xchg   ax,ax
c0001e68:	b8 00 00 00 00       	mov    eax,0x0
c0001e6d:	c3                   	ret    
c0001e6e:	66 90                	xchg   ax,ax

c0001e70 <isalnum>:
c0001e70:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e74:	e8 c7 ff ff ff       	call   c0001e40 <isalpha>
c0001e79:	83 c4 04             	add    esp,0x4
c0001e7c:	85 c0                	test   eax,eax
c0001e7e:	75 10                	jne    c0001e90 <isalnum+0x20>
c0001e80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e84:	e8 3b ff ff ff       	call   c0001dc4 <isdigit>
c0001e89:	83 c4 04             	add    esp,0x4
c0001e8c:	85 c0                	test   eax,eax
c0001e8e:	74 08                	je     c0001e98 <isalnum+0x28>
c0001e90:	b8 01 00 00 00       	mov    eax,0x1
c0001e95:	c3                   	ret    
c0001e96:	66 90                	xchg   ax,ax
c0001e98:	b8 00 00 00 00       	mov    eax,0x0
c0001e9d:	c3                   	ret    
c0001e9e:	66 90                	xchg   ax,ax

c0001ea0 <ispunct>:
c0001ea0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ea4:	e8 c7 ff ff ff       	call   c0001e70 <isalnum>
c0001ea9:	83 c4 04             	add    esp,0x4
c0001eac:	85 c0                	test   eax,eax
c0001eae:	75 28                	jne    c0001ed8 <ispunct+0x38>
c0001eb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb4:	e8 43 ff ff ff       	call   c0001dfc <isspace>
c0001eb9:	83 c4 04             	add    esp,0x4
c0001ebc:	85 c0                	test   eax,eax
c0001ebe:	75 18                	jne    c0001ed8 <ispunct+0x38>
c0001ec0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ec4:	e8 db fe ff ff       	call   c0001da4 <iscntrl>
c0001ec9:	83 c4 04             	add    esp,0x4
c0001ecc:	85 c0                	test   eax,eax
c0001ece:	75 08                	jne    c0001ed8 <ispunct+0x38>
c0001ed0:	b8 01 00 00 00       	mov    eax,0x1
c0001ed5:	c3                   	ret    
c0001ed6:	66 90                	xchg   ax,ax
c0001ed8:	b8 00 00 00 00       	mov    eax,0x0
c0001edd:	c3                   	ret    
c0001ede:	66 90                	xchg   ax,ax

c0001ee0 <isgraph>:
c0001ee0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee4:	e8 87 ff ff ff       	call   c0001e70 <isalnum>
c0001ee9:	83 c4 04             	add    esp,0x4
c0001eec:	85 c0                	test   eax,eax
c0001eee:	75 10                	jne    c0001f00 <isgraph+0x20>
c0001ef0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ef4:	e8 a7 ff ff ff       	call   c0001ea0 <ispunct>
c0001ef9:	83 c4 04             	add    esp,0x4
c0001efc:	85 c0                	test   eax,eax
c0001efe:	74 08                	je     c0001f08 <isgraph+0x28>
c0001f00:	b8 01 00 00 00       	mov    eax,0x1
c0001f05:	c3                   	ret    
c0001f06:	66 90                	xchg   ax,ax
c0001f08:	b8 00 00 00 00       	mov    eax,0x0
c0001f0d:	c3                   	ret    
c0001f0e:	66 90                	xchg   ax,ax

c0001f10 <isprint>:
c0001f10:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f14:	e8 c7 ff ff ff       	call   c0001ee0 <isgraph>
c0001f19:	83 c4 04             	add    esp,0x4
c0001f1c:	85 c0                	test   eax,eax
c0001f1e:	75 08                	jne    c0001f28 <isprint+0x18>
c0001f20:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001f25:	75 09                	jne    c0001f30 <isprint+0x20>
c0001f27:	90                   	nop
c0001f28:	b8 01 00 00 00       	mov    eax,0x1
c0001f2d:	c3                   	ret    
c0001f2e:	66 90                	xchg   ax,ax
c0001f30:	b8 00 00 00 00       	mov    eax,0x0
c0001f35:	c3                   	ret    
c0001f36:	66 90                	xchg   ax,ax

c0001f38 <isxdigit>:
c0001f38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001f3c:	e8 83 fe ff ff       	call   c0001dc4 <isdigit>
c0001f41:	83 c4 04             	add    esp,0x4
c0001f44:	85 c0                	test   eax,eax
c0001f46:	75 20                	jne    c0001f68 <isxdigit+0x30>
c0001f48:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001f4d:	7e 09                	jle    c0001f58 <isxdigit+0x20>
c0001f4f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001f54:	7e 12                	jle    c0001f68 <isxdigit+0x30>
c0001f56:	66 90                	xchg   ax,ax
c0001f58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f5d:	7e 11                	jle    c0001f70 <isxdigit+0x38>
c0001f5f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f64:	7f 0a                	jg     c0001f70 <isxdigit+0x38>
c0001f66:	66 90                	xchg   ax,ax
c0001f68:	b8 01 00 00 00       	mov    eax,0x1
c0001f6d:	c3                   	ret    
c0001f6e:	66 90                	xchg   ax,ax
c0001f70:	b8 00 00 00 00       	mov    eax,0x0
c0001f75:	c3                   	ret    

c0001f76 <disk_status>:
c0001f76:	31 c0                	xor    eax,eax
c0001f78:	c3                   	ret    

c0001f79 <disk_initialize>:
c0001f79:	31 c0                	xor    eax,eax
c0001f7b:	c3                   	ret    

c0001f7c <disk_read>:
c0001f7c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f81:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f89:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f8d:	e9 76 6a 02 00       	jmp    c0028a08 <fatWrapperReadDisk>

c0001f92 <disk_write>:
c0001f92:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f97:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fa3:	e9 a0 6a 02 00       	jmp    c0028a48 <fatWrapperWriteDisk>

c0001fa8 <disk_ioctl>:
c0001fa8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001fb1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001fb6:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001fbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fc2:	e9 c1 6a 02 00       	jmp    c0028a88 <fatWrapperIoctl>

c0001fc7 <ld_word>:
c0001fc7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fcb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fce:	c1 e2 08             	shl    edx,0x8
c0001fd1:	09 d0                	or     eax,edx
c0001fd3:	c3                   	ret    

c0001fd4 <ld_dword>:
c0001fd4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd8:	89 d1                	mov    ecx,edx
c0001fda:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fde:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe1:	c1 e1 08             	shl    ecx,0x8
c0001fe4:	09 ca                	or     edx,ecx
c0001fe6:	c1 e2 08             	shl    edx,0x8
c0001fe9:	09 d0                	or     eax,edx
c0001feb:	c3                   	ret    

c0001fec <st_word>:
c0001fec:	66 89 10             	mov    WORD PTR [eax],dx
c0001fef:	c3                   	ret    

c0001ff0 <st_dword>:
c0001ff0:	89 10                	mov    DWORD PTR [eax],edx
c0001ff2:	c3                   	ret    

c0001ff3 <mem_cpy>:
c0001ff3:	85 c9                	test   ecx,ecx
c0001ff5:	74 10                	je     c0002007 <mem_cpy+0x14>
c0001ff7:	57                   	push   edi
c0001ff8:	01 c1                	add    ecx,eax
c0001ffa:	56                   	push   esi
c0001ffb:	89 c7                	mov    edi,eax
c0001ffd:	89 d6                	mov    esi,edx
c0001fff:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0002000:	39 f9                	cmp    ecx,edi
c0002002:	75 fb                	jne    c0001fff <mem_cpy+0xc>
c0002004:	5e                   	pop    esi
c0002005:	5f                   	pop    edi
c0002006:	c3                   	ret    
c0002007:	c3                   	ret    

c0002008 <mem_set>:
c0002008:	01 c1                	add    ecx,eax
c000200a:	88 10                	mov    BYTE PTR [eax],dl
c000200c:	40                   	inc    eax
c000200d:	39 c8                	cmp    eax,ecx
c000200f:	75 f9                	jne    c000200a <mem_set+0x2>
c0002011:	c3                   	ret    

c0002012 <mem_cmp>:
c0002012:	57                   	push   edi
c0002013:	56                   	push   esi
c0002014:	89 c6                	mov    esi,eax
c0002016:	53                   	push   ebx
c0002017:	46                   	inc    esi
c0002018:	42                   	inc    edx
c0002019:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201d:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002021:	29 fb                	sub    ebx,edi
c0002023:	89 cf                	mov    edi,ecx
c0002025:	29 f7                	sub    edi,esi
c0002027:	01 c7                	add    edi,eax
c0002029:	74 04                	je     c000202f <mem_cmp+0x1d>
c000202b:	85 db                	test   ebx,ebx
c000202d:	74 e8                	je     c0002017 <mem_cmp+0x5>
c000202f:	89 d8                	mov    eax,ebx
c0002031:	5b                   	pop    ebx
c0002032:	5e                   	pop    esi
c0002033:	5f                   	pop    edi
c0002034:	c3                   	ret    

c0002035 <chk_chr>:
c0002035:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002038:	85 c9                	test   ecx,ecx
c000203a:	74 07                	je     c0002043 <chk_chr+0xe>
c000203c:	39 d1                	cmp    ecx,edx
c000203e:	74 03                	je     c0002043 <chk_chr+0xe>
c0002040:	40                   	inc    eax
c0002041:	eb f2                	jmp    c0002035 <chk_chr>
c0002043:	89 c8                	mov    eax,ecx
c0002045:	c3                   	ret    

c0002046 <dbc_1st>:
c0002046:	31 c0                	xor    eax,eax
c0002048:	c3                   	ret    

c0002049 <dbc_2nd>:
c0002049:	31 c0                	xor    eax,eax
c000204b:	c3                   	ret    

c000204c <tchar2uni>:
c000204c:	57                   	push   edi
c000204d:	56                   	push   esi
c000204e:	53                   	push   ebx
c000204f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0002051:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0002053:	8d 73 01             	lea    esi,[ebx+0x1]
c0002056:	f6 c1 80             	test   cl,0x80
c0002059:	75 0a                	jne    c0002065 <tchar2uni+0x19>
c000205b:	0f b6 d1             	movzx  edx,cl
c000205e:	89 f3                	mov    ebx,esi
c0002060:	e9 b2 00 00 00       	jmp    c0002117 <tchar2uni+0xcb>
c0002065:	89 ca                	mov    edx,ecx
c0002067:	81 e2 e0 00 00 00    	and    edx,0xe0
c000206d:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0002073:	89 ca                	mov    edx,ecx
c0002075:	75 0a                	jne    c0002081 <tchar2uni+0x35>
c0002077:	83 e2 1f             	and    edx,0x1f
c000207a:	b9 01 00 00 00       	mov    ecx,0x1
c000207f:	eb 37                	jmp    c00020b8 <tchar2uni+0x6c>
c0002081:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002087:	81 fa e0 00 00 00    	cmp    edx,0xe0
c000208d:	75 0c                	jne    c000209b <tchar2uni+0x4f>
c000208f:	89 ca                	mov    edx,ecx
c0002091:	b9 02 00 00 00       	mov    ecx,0x2
c0002096:	83 e2 0f             	and    edx,0xf
c0002099:	eb 1d                	jmp    c00020b8 <tchar2uni+0x6c>
c000209b:	89 cf                	mov    edi,ecx
c000209d:	83 ca ff             	or     edx,0xffffffff
c00020a0:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a6:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020ac:	75 70                	jne    c000211e <tchar2uni+0xd2>
c00020ae:	89 ca                	mov    edx,ecx
c00020b0:	b9 03 00 00 00       	mov    ecx,0x3
c00020b5:	83 e2 07             	and    edx,0x7
c00020b8:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020bc:	46                   	inc    esi
c00020bd:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020c0:	89 cf                	mov    edi,ecx
c00020c2:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c8:	83 c7 80             	add    edi,0xffffff80
c00020cb:	75 4e                	jne    c000211b <tchar2uni+0xcf>
c00020cd:	c1 e2 06             	shl    edx,0x6
c00020d0:	83 e1 3f             	and    ecx,0x3f
c00020d3:	09 ca                	or     edx,ecx
c00020d5:	39 de                	cmp    esi,ebx
c00020d7:	75 e3                	jne    c00020bc <tchar2uni+0x70>
c00020d9:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020df:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020e5:	76 34                	jbe    c000211b <tchar2uni+0xcf>
c00020e7:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020ea:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020f0:	77 29                	ja     c000211b <tchar2uni+0xcf>
c00020f2:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f8:	76 1d                	jbe    c0002117 <tchar2uni+0xcb>
c00020fa:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002100:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002106:	c1 e1 06             	shl    ecx,0x6
c0002109:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000210f:	09 ca                	or     edx,ecx
c0002111:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002117:	89 18                	mov    DWORD PTR [eax],ebx
c0002119:	eb 03                	jmp    c000211e <tchar2uni+0xd2>
c000211b:	83 ca ff             	or     edx,0xffffffff
c000211e:	5b                   	pop    ebx
c000211f:	89 d0                	mov    eax,edx
c0002121:	5e                   	pop    esi
c0002122:	5f                   	pop    edi
c0002123:	c3                   	ret    

c0002124 <put_utf>:
c0002124:	53                   	push   ebx
c0002125:	83 f8 7f             	cmp    eax,0x7f
c0002128:	89 c3                	mov    ebx,eax
c000212a:	b0 00                	mov    al,0x0
c000212c:	77 11                	ja     c000213f <put_utf+0x1b>
c000212e:	85 c9                	test   ecx,ecx
c0002130:	0f 84 e5 00 00 00    	je     c000221b <put_utf+0xf7>
c0002136:	88 1a                	mov    BYTE PTR [edx],bl
c0002138:	b0 01                	mov    al,0x1
c000213a:	e9 dc 00 00 00       	jmp    c000221b <put_utf+0xf7>
c000213f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0002145:	77 23                	ja     c000216a <put_utf+0x46>
c0002147:	83 f9 01             	cmp    ecx,0x1
c000214a:	0f 86 cb 00 00 00    	jbe    c000221b <put_utf+0xf7>
c0002150:	89 d8                	mov    eax,ebx
c0002152:	83 e3 3f             	and    ebx,0x3f
c0002155:	c1 e8 06             	shr    eax,0x6
c0002158:	83 cb 80             	or     ebx,0xffffff80
c000215b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215e:	83 c8 c0             	or     eax,0xffffffc0
c0002161:	88 02                	mov    BYTE PTR [edx],al
c0002163:	b0 02                	mov    al,0x2
c0002165:	e9 b1 00 00 00       	jmp    c000221b <put_utf+0xf7>
c000216a:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002170:	77 40                	ja     c00021b2 <put_utf+0x8e>
c0002172:	83 f9 02             	cmp    ecx,0x2
c0002175:	0f 86 a0 00 00 00    	jbe    c000221b <put_utf+0xf7>
c000217b:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0002181:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002187:	0f 86 8e 00 00 00    	jbe    c000221b <put_utf+0xf7>
c000218d:	89 d8                	mov    eax,ebx
c000218f:	c1 e8 0c             	shr    eax,0xc
c0002192:	83 c8 e0             	or     eax,0xffffffe0
c0002195:	88 02                	mov    BYTE PTR [edx],al
c0002197:	89 d8                	mov    eax,ebx
c0002199:	83 e3 3f             	and    ebx,0x3f
c000219c:	c1 e8 06             	shr    eax,0x6
c000219f:	83 cb 80             	or     ebx,0xffffff80
c00021a2:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a5:	83 e0 3f             	and    eax,0x3f
c00021a8:	83 c8 80             	or     eax,0xffffff80
c00021ab:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021ae:	b0 03                	mov    al,0x3
c00021b0:	eb 69                	jmp    c000221b <put_utf+0xf7>
c00021b2:	83 f9 03             	cmp    ecx,0x3
c00021b5:	76 64                	jbe    c000221b <put_utf+0xf7>
c00021b7:	89 d9                	mov    ecx,ebx
c00021b9:	0f b7 c3             	movzx  eax,bx
c00021bc:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021c2:	66 31 c9             	xor    cx,cx
c00021c5:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021cb:	c1 e9 06             	shr    ecx,0x6
c00021ce:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d4:	77 43                	ja     c0002219 <put_utf+0xf5>
c00021d6:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021dc:	77 3b                	ja     c0002219 <put_utf+0xf5>
c00021de:	09 cb                	or     ebx,ecx
c00021e0:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e6:	89 d8                	mov    eax,ebx
c00021e8:	c1 e8 12             	shr    eax,0x12
c00021eb:	83 c8 f0             	or     eax,0xfffffff0
c00021ee:	88 02                	mov    BYTE PTR [edx],al
c00021f0:	89 d8                	mov    eax,ebx
c00021f2:	c1 e8 0c             	shr    eax,0xc
c00021f5:	83 e0 3f             	and    eax,0x3f
c00021f8:	83 c8 80             	or     eax,0xffffff80
c00021fb:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021fe:	89 d8                	mov    eax,ebx
c0002200:	83 e3 3f             	and    ebx,0x3f
c0002203:	c1 e8 06             	shr    eax,0x6
c0002206:	83 cb 80             	or     ebx,0xffffff80
c0002209:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000220c:	83 e0 3f             	and    eax,0x3f
c000220f:	83 c8 80             	or     eax,0xffffff80
c0002212:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002215:	b0 04                	mov    al,0x4
c0002217:	eb 02                	jmp    c000221b <put_utf+0xf7>
c0002219:	31 c0                	xor    eax,eax
c000221b:	5b                   	pop    ebx
c000221c:	c3                   	ret    

c000221d <clst2sect>:
c000221d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002220:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002223:	83 ea 02             	sub    edx,0x2
c0002226:	39 ca                	cmp    edx,ecx
c0002228:	76 0d                	jbe    c0002237 <clst2sect+0x1a>
c000222a:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000222e:	0f af d1             	imul   edx,ecx
c0002231:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002234:	89 d0                	mov    eax,edx
c0002236:	c3                   	ret    
c0002237:	31 c0                	xor    eax,eax
c0002239:	c3                   	ret    

c000223a <pick_lfn>:
c000223a:	55                   	push   ebp
c000223b:	57                   	push   edi
c000223c:	89 c7                	mov    edi,eax
c000223e:	56                   	push   esi
c000223f:	53                   	push   ebx
c0002240:	89 d3                	mov    ebx,edx
c0002242:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002245:	e8 7d fd ff ff       	call   c0001fc7 <ld_word>
c000224a:	66 85 c0             	test   ax,ax
c000224d:	74 04                	je     c0002253 <pick_lfn+0x19>
c000224f:	31 c0                	xor    eax,eax
c0002251:	eb 62                	jmp    c00022b5 <pick_lfn+0x7b>
c0002253:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002256:	bd 01 00 00 00       	mov    ebp,0x1
c000225b:	31 f6                	xor    esi,esi
c000225d:	83 e1 bf             	and    ecx,0xffffffbf
c0002260:	49                   	dec    ecx
c0002261:	6b c9 0d             	imul   ecx,ecx,0xd
c0002264:	0f b6 86 20 f7 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd08e0]
c000226b:	01 d8                	add    eax,ebx
c000226d:	e8 55 fd ff ff       	call   c0001fc7 <ld_word>
c0002272:	66 85 ed             	test   bp,bp
c0002275:	74 11                	je     c0002288 <pick_lfn+0x4e>
c0002277:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000227d:	77 d0                	ja     c000224f <pick_lfn+0x15>
c000227f:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002283:	89 c5                	mov    ebp,eax
c0002285:	41                   	inc    ecx
c0002286:	eb 0a                	jmp    c0002292 <pick_lfn+0x58>
c0002288:	0f b7 c0             	movzx  eax,ax
c000228b:	3d ff ff 00 00       	cmp    eax,0xffff
c0002290:	75 bd                	jne    c000224f <pick_lfn+0x15>
c0002292:	46                   	inc    esi
c0002293:	83 fe 0d             	cmp    esi,0xd
c0002296:	75 cc                	jne    c0002264 <pick_lfn+0x2a>
c0002298:	f6 03 40             	test   BYTE PTR [ebx],0x40
c000229b:	74 13                	je     c00022b0 <pick_lfn+0x76>
c000229d:	66 85 ed             	test   bp,bp
c00022a0:	74 0e                	je     c00022b0 <pick_lfn+0x76>
c00022a2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a8:	77 a5                	ja     c000224f <pick_lfn+0x15>
c00022aa:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022b0:	b8 01 00 00 00       	mov    eax,0x1
c00022b5:	5b                   	pop    ebx
c00022b6:	5e                   	pop    esi
c00022b7:	5f                   	pop    edi
c00022b8:	5d                   	pop    ebp
c00022b9:	c3                   	ret    

c00022ba <put_lfn>:
c00022ba:	55                   	push   ebp
c00022bb:	57                   	push   edi
c00022bc:	89 d7                	mov    edi,edx
c00022be:	56                   	push   esi
c00022bf:	31 f6                	xor    esi,esi
c00022c1:	53                   	push   ebx
c00022c2:	83 ec 0c             	sub    esp,0xc
c00022c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c9:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00022cd:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022d7:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022da:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022dd:	31 d2                	xor    edx,edx
c00022df:	e8 08 fd ff ff       	call   c0001fec <st_word>
c00022e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022eb:	0f b6 d9             	movzx  ebx,cl
c00022ee:	4b                   	dec    ebx
c00022ef:	6b db 0d             	imul   ebx,ebx,0xd
c00022f2:	0f b7 c6             	movzx  eax,si
c00022f5:	3d ff ff 00 00       	cmp    eax,0xffff
c00022fa:	74 09                	je     c0002305 <put_lfn+0x4b>
c00022fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002300:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002304:	43                   	inc    ebx
c0002305:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002308:	0f b7 ee             	movzx  ebp,si
c000230b:	89 ea                	mov    edx,ebp
c000230d:	0f b6 80 20 f7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd08e0]
c0002314:	01 f8                	add    eax,edi
c0002316:	e8 d1 fc ff ff       	call   c0001fec <st_word>
c000231b:	85 ed                	test   ebp,ebp
c000231d:	75 05                	jne    c0002324 <put_lfn+0x6a>
c000231f:	be ff ff 00 00       	mov    esi,0xffff
c0002324:	ff 04 24             	inc    DWORD PTR [esp]
c0002327:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000232b:	75 c5                	jne    c00022f2 <put_lfn+0x38>
c000232d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002333:	74 0b                	je     c0002340 <put_lfn+0x86>
c0002335:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002339:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000233e:	75 07                	jne    c0002347 <put_lfn+0x8d>
c0002340:	83 c9 40             	or     ecx,0x40
c0002343:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002347:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000234b:	88 07                	mov    BYTE PTR [edi],al
c000234d:	83 c4 0c             	add    esp,0xc
c0002350:	5b                   	pop    ebx
c0002351:	5e                   	pop    esi
c0002352:	5f                   	pop    edi
c0002353:	5d                   	pop    ebp
c0002354:	c3                   	ret    

c0002355 <gen_numname>:
c0002355:	57                   	push   edi
c0002356:	89 cf                	mov    edi,ecx
c0002358:	56                   	push   esi
c0002359:	b9 0b 00 00 00       	mov    ecx,0xb
c000235e:	53                   	push   ebx
c000235f:	89 c6                	mov    esi,eax
c0002361:	83 ec 10             	sub    esp,0x10
c0002364:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002368:	e8 86 fc ff ff       	call   c0001ff3 <mem_cpy>
c000236d:	83 fb 05             	cmp    ebx,0x5
c0002370:	76 30                	jbe    c00023a2 <gen_numname+0x4d>
c0002372:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002375:	66 85 c0             	test   ax,ax
c0002378:	74 28                	je     c00023a2 <gen_numname+0x4d>
c000237a:	83 c7 02             	add    edi,0x2
c000237d:	ba 10 00 00 00       	mov    edx,0x10
c0002382:	89 c1                	mov    ecx,eax
c0002384:	01 db                	add    ebx,ebx
c0002386:	c1 e0 10             	shl    eax,0x10
c0002389:	83 e1 01             	and    ecx,0x1
c000238c:	c1 e8 11             	shr    eax,0x11
c000238f:	01 cb                	add    ebx,ecx
c0002391:	0f ba e3 10          	bt     ebx,0x10
c0002395:	73 06                	jae    c000239d <gen_numname+0x48>
c0002397:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000239d:	4a                   	dec    edx
c000239e:	75 e2                	jne    c0002382 <gen_numname+0x2d>
c00023a0:	eb d0                	jmp    c0002372 <gen_numname+0x1d>
c00023a2:	b8 07 00 00 00       	mov    eax,0x7
c00023a7:	89 d9                	mov    ecx,ebx
c00023a9:	83 e1 0f             	and    ecx,0xf
c00023ac:	8d 79 30             	lea    edi,[ecx+0x30]
c00023af:	83 ff 39             	cmp    edi,0x39
c00023b2:	89 fa                	mov    edx,edi
c00023b4:	76 03                	jbe    c00023b9 <gen_numname+0x64>
c00023b6:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b9:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023bc:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023c0:	89 da                	mov    edx,ebx
c00023c2:	c1 ea 04             	shr    edx,0x4
c00023c5:	83 fb 0f             	cmp    ebx,0xf
c00023c8:	76 06                	jbe    c00023d0 <gen_numname+0x7b>
c00023ca:	89 c8                	mov    eax,ecx
c00023cc:	89 d3                	mov    ebx,edx
c00023ce:	eb d7                	jmp    c00023a7 <gen_numname+0x52>
c00023d0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023d5:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d8:	31 d2                	xor    edx,edx
c00023da:	8d 04 16             	lea    eax,[esi+edx*1]
c00023dd:	39 ca                	cmp    edx,ecx
c00023df:	73 19                	jae    c00023fa <gen_numname+0xa5>
c00023e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023e4:	83 f8 20             	cmp    eax,0x20
c00023e7:	74 11                	je     c00023fa <gen_numname+0xa5>
c00023e9:	e8 58 fc ff ff       	call   c0002046 <dbc_1st>
c00023ee:	85 c0                	test   eax,eax
c00023f0:	74 05                	je     c00023f7 <gen_numname+0xa2>
c00023f2:	39 d3                	cmp    ebx,edx
c00023f4:	74 04                	je     c00023fa <gen_numname+0xa5>
c00023f6:	42                   	inc    edx
c00023f7:	42                   	inc    edx
c00023f8:	eb e0                	jmp    c00023da <gen_numname+0x85>
c00023fa:	83 f9 07             	cmp    ecx,0x7
c00023fd:	b0 20                	mov    al,0x20
c00023ff:	77 05                	ja     c0002406 <gen_numname+0xb1>
c0002401:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002405:	41                   	inc    ecx
c0002406:	42                   	inc    edx
c0002407:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000240b:	83 fa 07             	cmp    edx,0x7
c000240e:	76 ea                	jbe    c00023fa <gen_numname+0xa5>
c0002410:	83 c4 10             	add    esp,0x10
c0002413:	5b                   	pop    ebx
c0002414:	5e                   	pop    esi
c0002415:	5f                   	pop    edi
c0002416:	c3                   	ret    

c0002417 <sum_sfn>:
c0002417:	53                   	push   ebx
c0002418:	31 c9                	xor    ecx,ecx
c000241a:	31 db                	xor    ebx,ebx
c000241c:	0f b6 d1             	movzx  edx,cl
c000241f:	d1 ea                	shr    edx,1
c0002421:	c1 e1 07             	shl    ecx,0x7
c0002424:	09 ca                	or     edx,ecx
c0002426:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002429:	43                   	inc    ebx
c000242a:	01 ca                	add    edx,ecx
c000242c:	83 fb 0b             	cmp    ebx,0xb
c000242f:	88 d1                	mov    cl,dl
c0002431:	75 e9                	jne    c000241c <sum_sfn+0x5>
c0002433:	5b                   	pop    ebx
c0002434:	88 d0                	mov    al,dl
c0002436:	c3                   	ret    

c0002437 <get_ldnumber>:
c0002437:	55                   	push   ebp
c0002438:	57                   	push   edi
c0002439:	56                   	push   esi
c000243a:	83 ce ff             	or     esi,0xffffffff
c000243d:	53                   	push   ebx
c000243e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002440:	85 d2                	test   edx,edx
c0002442:	74 38                	je     c000247c <get_ldnumber+0x45>
c0002444:	89 c5                	mov    ebp,eax
c0002446:	89 d1                	mov    ecx,edx
c0002448:	41                   	inc    ecx
c0002449:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c000244d:	80 fb 1f             	cmp    bl,0x1f
c0002450:	76 05                	jbe    c0002457 <get_ldnumber+0x20>
c0002452:	83 fb 3a             	cmp    ebx,0x3a
c0002455:	75 f1                	jne    c0002448 <get_ldnumber+0x11>
c0002457:	31 f6                	xor    esi,esi
c0002459:	83 fb 3a             	cmp    ebx,0x3a
c000245c:	75 1e                	jne    c000247c <get_ldnumber+0x45>
c000245e:	8a 1a                	mov    bl,BYTE PTR [edx]
c0002460:	83 ce ff             	or     esi,0xffffffff
c0002463:	8d 7b d0             	lea    edi,[ebx-0x30]
c0002466:	89 f8                	mov    eax,edi
c0002468:	3c 09                	cmp    al,0x9
c000246a:	77 10                	ja     c000247c <get_ldnumber+0x45>
c000246c:	83 c2 02             	add    edx,0x2
c000246f:	39 d1                	cmp    ecx,edx
c0002471:	75 09                	jne    c000247c <get_ldnumber+0x45>
c0002473:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0002476:	0f be f3             	movsx  esi,bl
c0002479:	83 ee 30             	sub    esi,0x30
c000247c:	5b                   	pop    ebx
c000247d:	89 f0                	mov    eax,esi
c000247f:	5e                   	pop    esi
c0002480:	5f                   	pop    edi
c0002481:	5d                   	pop    ebp
c0002482:	c3                   	ret    

c0002483 <validate>:
c0002483:	56                   	push   esi
c0002484:	85 c0                	test   eax,eax
c0002486:	53                   	push   ebx
c0002487:	89 d6                	mov    esi,edx
c0002489:	51                   	push   ecx
c000248a:	75 09                	jne    c0002495 <validate+0x12>
c000248c:	b8 09 00 00 00       	mov    eax,0x9
c0002491:	31 c9                	xor    ecx,ecx
c0002493:	eb 2e                	jmp    c00024c3 <validate+0x40>
c0002495:	89 c3                	mov    ebx,eax
c0002497:	8b 00                	mov    eax,DWORD PTR [eax]
c0002499:	85 c0                	test   eax,eax
c000249b:	74 ef                	je     c000248c <validate+0x9>
c000249d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00024a0:	74 ea                	je     c000248c <validate+0x9>
c00024a2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a5:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a9:	75 e1                	jne    c000248c <validate+0x9>
c00024ab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024af:	83 ec 0c             	sub    esp,0xc
c00024b2:	50                   	push   eax
c00024b3:	e8 be fa ff ff       	call   c0001f76 <disk_status>
c00024b8:	83 c4 10             	add    esp,0x10
c00024bb:	a8 01                	test   al,0x1
c00024bd:	75 cd                	jne    c000248c <validate+0x9>
c00024bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024c1:	31 c0                	xor    eax,eax
c00024c3:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c5:	5a                   	pop    edx
c00024c6:	5b                   	pop    ebx
c00024c7:	5e                   	pop    esi
c00024c8:	c3                   	ret    

c00024c9 <sync_window>:
c00024c9:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024cd:	74 58                	je     c0002527 <sync_window+0x5e>
c00024cf:	56                   	push   esi
c00024d0:	53                   	push   ebx
c00024d1:	89 c3                	mov    ebx,eax
c00024d3:	51                   	push   ecx
c00024d4:	6a 01                	push   0x1
c00024d6:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d9:	8d 70 34             	lea    esi,[eax+0x34]
c00024dc:	56                   	push   esi
c00024dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024e1:	50                   	push   eax
c00024e2:	e8 ab fa ff ff       	call   c0001f92 <disk_write>
c00024e7:	83 c4 10             	add    esp,0x10
c00024ea:	ba 01 00 00 00       	mov    edx,0x1
c00024ef:	85 c0                	test   eax,eax
c00024f1:	75 2e                	jne    c0002521 <sync_window+0x58>
c00024f3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024f7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024fd:	89 c1                	mov    ecx,eax
c00024ff:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002502:	39 d1                	cmp    ecx,edx
c0002504:	73 19                	jae    c000251f <sync_window+0x56>
c0002506:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000250a:	75 13                	jne    c000251f <sync_window+0x56>
c000250c:	6a 01                	push   0x1
c000250e:	01 d0                	add    eax,edx
c0002510:	50                   	push   eax
c0002511:	56                   	push   esi
c0002512:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002516:	50                   	push   eax
c0002517:	e8 76 fa ff ff       	call   c0001f92 <disk_write>
c000251c:	83 c4 10             	add    esp,0x10
c000251f:	31 d2                	xor    edx,edx
c0002521:	89 d0                	mov    eax,edx
c0002523:	5a                   	pop    edx
c0002524:	5b                   	pop    ebx
c0002525:	5e                   	pop    esi
c0002526:	c3                   	ret    
c0002527:	31 d2                	xor    edx,edx
c0002529:	89 d0                	mov    eax,edx
c000252b:	c3                   	ret    

c000252c <move_window>:
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 3a                	je     c000256b <move_window+0x3f>
c0002531:	56                   	push   esi
c0002532:	89 d6                	mov    esi,edx
c0002534:	53                   	push   ebx
c0002535:	89 c3                	mov    ebx,eax
c0002537:	51                   	push   ecx
c0002538:	e8 8c ff ff ff       	call   c00024c9 <sync_window>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 2d                	jne    c000256e <move_window+0x42>
c0002541:	6a 01                	push   0x1
c0002543:	56                   	push   esi
c0002544:	8d 43 34             	lea    eax,[ebx+0x34]
c0002547:	50                   	push   eax
c0002548:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254c:	50                   	push   eax
c000254d:	e8 2a fa ff ff       	call   c0001f7c <disk_read>
c0002552:	83 c4 10             	add    esp,0x10
c0002555:	89 c2                	mov    edx,eax
c0002557:	31 c0                	xor    eax,eax
c0002559:	85 d2                	test   edx,edx
c000255b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0002560:	0f 45 f2             	cmovne esi,edx
c0002563:	0f 95 c0             	setne  al
c0002566:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0002569:	eb 03                	jmp    c000256e <move_window+0x42>
c000256b:	31 c0                	xor    eax,eax
c000256d:	c3                   	ret    
c000256e:	5a                   	pop    edx
c000256f:	5b                   	pop    ebx
c0002570:	5e                   	pop    esi
c0002571:	c3                   	ret    

c0002572 <check_fs>:
c0002572:	53                   	push   ebx
c0002573:	89 c3                	mov    ebx,eax
c0002575:	83 ec 08             	sub    esp,0x8
c0002578:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000257c:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002583:	e8 a4 ff ff ff       	call   c000252c <move_window>
c0002588:	ba 04 00 00 00       	mov    edx,0x4
c000258d:	85 c0                	test   eax,eax
c000258f:	75 68                	jne    c00025f9 <check_fs+0x87>
c0002591:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002597:	e8 2b fa ff ff       	call   c0001fc7 <ld_word>
c000259c:	ba 03 00 00 00       	mov    edx,0x3
c00025a1:	66 3d 55 aa          	cmp    ax,0xaa55
c00025a5:	75 52                	jne    c00025f9 <check_fs+0x87>
c00025a7:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025aa:	8d 50 18             	lea    edx,[eax+0x18]
c00025ad:	80 fa 01             	cmp    dl,0x1
c00025b0:	76 09                	jbe    c00025bb <check_fs+0x49>
c00025b2:	3c eb                	cmp    al,0xeb
c00025b4:	ba 02 00 00 00       	mov    edx,0x2
c00025b9:	75 3e                	jne    c00025f9 <check_fs+0x87>
c00025bb:	ba 40 34 03 c0       	mov    edx,0xc0033440
c00025c0:	b9 03 00 00 00       	mov    ecx,0x3
c00025c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025c8:	e8 45 fa ff ff       	call   c0002012 <mem_cmp>
c00025cd:	31 d2                	xor    edx,edx
c00025cf:	85 c0                	test   eax,eax
c00025d1:	74 26                	je     c00025f9 <check_fs+0x87>
c00025d3:	ba d8 f5 02 c0       	mov    edx,0xc002f5d8
c00025d8:	b9 05 00 00 00       	mov    ecx,0x5
c00025dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025e3:	e8 2a fa ff ff       	call   c0002012 <mem_cmp>
c00025e8:	31 d2                	xor    edx,edx
c00025ea:	85 c0                	test   eax,eax
c00025ec:	74 0b                	je     c00025f9 <check_fs+0x87>
c00025ee:	31 d2                	xor    edx,edx
c00025f0:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025f4:	0f 95 c2             	setne  dl
c00025f7:	01 d2                	add    edx,edx
c00025f9:	83 c4 08             	add    esp,0x8
c00025fc:	89 d0                	mov    eax,edx
c00025fe:	5b                   	pop    ebx
c00025ff:	c3                   	ret    

c0002600 <find_volume>:
c0002600:	55                   	push   ebp
c0002601:	57                   	push   edi
c0002602:	56                   	push   esi
c0002603:	89 c6                	mov    esi,eax
c0002605:	53                   	push   ebx
c0002606:	89 d3                	mov    ebx,edx
c0002608:	83 ec 2c             	sub    esp,0x2c
c000260b:	31 d2                	xor    edx,edx
c000260d:	e8 60 ff ff ff       	call   c0002572 <check_fs>
c0002612:	85 db                	test   ebx,ebx
c0002614:	0f 94 c2             	sete   dl
c0002617:	83 f8 02             	cmp    eax,0x2
c000261a:	74 07                	je     c0002623 <find_volume+0x23>
c000261c:	77 63                	ja     c0002681 <find_volume+0x81>
c000261e:	f6 c2 01             	test   dl,0x1
c0002621:	75 5e                	jne    c0002681 <find_volume+0x81>
c0002623:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000262d:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c0002633:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002637:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000263b:	89 f8                	mov    eax,edi
c000263d:	83 c7 10             	add    edi,0x10
c0002640:	e8 8f f9 ff ff       	call   c0001fd4 <ld_dword>
c0002645:	83 c5 04             	add    ebp,0x4
c0002648:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000264c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000264f:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0002653:	75 e2                	jne    c0002637 <find_volume+0x37>
c0002655:	83 fb 01             	cmp    ebx,0x1
c0002658:	0f b6 fa             	movzx  edi,dl
c000265b:	83 d3 ff             	adc    ebx,0xffffffff
c000265e:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c0002662:	b8 03 00 00 00       	mov    eax,0x3
c0002667:	85 d2                	test   edx,edx
c0002669:	74 07                	je     c0002672 <find_volume+0x72>
c000266b:	89 f0                	mov    eax,esi
c000266d:	e8 00 ff ff ff       	call   c0002572 <check_fs>
c0002672:	83 f8 01             	cmp    eax,0x1
c0002675:	76 0a                	jbe    c0002681 <find_volume+0x81>
c0002677:	85 ff                	test   edi,edi
c0002679:	74 06                	je     c0002681 <find_volume+0x81>
c000267b:	43                   	inc    ebx
c000267c:	83 fb 03             	cmp    ebx,0x3
c000267f:	76 dd                	jbe    c000265e <find_volume+0x5e>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	5b                   	pop    ebx
c0002685:	5e                   	pop    esi
c0002686:	5f                   	pop    edi
c0002687:	5d                   	pop    ebp
c0002688:	c3                   	ret    

c0002689 <mount_volume>:
c0002689:	55                   	push   ebp
c000268a:	89 d5                	mov    ebp,edx
c000268c:	57                   	push   edi
c000268d:	89 cf                	mov    edi,ecx
c000268f:	56                   	push   esi
c0002690:	53                   	push   ebx
c0002691:	bb 0b 00 00 00       	mov    ebx,0xb
c0002696:	83 ec 2c             	sub    esp,0x2c
c0002699:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000269f:	e8 93 fd ff ff       	call   c0002437 <get_ldnumber>
c00026a4:	85 c0                	test   eax,eax
c00026a6:	0f 88 d0 02 00 00    	js     c000297c <mount_volume+0x2f3>
c00026ac:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c00026b3:	89 c2                	mov    edx,eax
c00026b5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ba:	85 f6                	test   esi,esi
c00026bc:	0f 84 ba 02 00 00    	je     c000297c <mount_volume+0x2f3>
c00026c2:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026c5:	83 e7 fe             	and    edi,0xfffffffe
c00026c8:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026cb:	74 3c                	je     c0002709 <mount_volume+0x80>
c00026cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026d1:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026d5:	83 ec 0c             	sub    esp,0xc
c00026d8:	50                   	push   eax
c00026d9:	e8 98 f8 ff ff       	call   c0001f76 <disk_status>
c00026de:	83 c4 10             	add    esp,0x10
c00026e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026e5:	a8 01                	test   al,0x1
c00026e7:	75 20                	jne    c0002709 <mount_volume+0x80>
c00026e9:	31 db                	xor    ebx,ebx
c00026eb:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026f1:	0f 84 85 02 00 00    	je     c000297c <mount_volume+0x2f3>
c00026f7:	a8 04                	test   al,0x4
c00026f9:	0f 84 7d 02 00 00    	je     c000297c <mount_volume+0x2f3>
c00026ff:	bb 0a 00 00 00       	mov    ebx,0xa
c0002704:	e9 73 02 00 00       	jmp    c000297c <mount_volume+0x2f3>
c0002709:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000270c:	83 ec 0c             	sub    esp,0xc
c000270f:	0f b6 c2             	movzx  eax,dl
c0002712:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002715:	bb 03 00 00 00       	mov    ebx,0x3
c000271a:	50                   	push   eax
c000271b:	e8 59 f8 ff ff       	call   c0001f79 <disk_initialize>
c0002720:	83 c4 10             	add    esp,0x10
c0002723:	a8 01                	test   al,0x1
c0002725:	0f 85 51 02 00 00    	jne    c000297c <mount_volume+0x2f3>
c000272b:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002731:	74 04                	je     c0002737 <mount_volume+0xae>
c0002733:	a8 04                	test   al,0x4
c0002735:	75 c8                	jne    c00026ff <mount_volume+0x76>
c0002737:	31 d2                	xor    edx,edx
c0002739:	89 f0                	mov    eax,esi
c000273b:	e8 c0 fe ff ff       	call   c0002600 <find_volume>
c0002740:	bb 01 00 00 00       	mov    ebx,0x1
c0002745:	83 f8 04             	cmp    eax,0x4
c0002748:	0f 84 2e 02 00 00    	je     c000297c <mount_volume+0x2f3>
c000274e:	83 f8 01             	cmp    eax,0x1
c0002751:	76 0a                	jbe    c000275d <mount_volume+0xd4>
c0002753:	bb 0d 00 00 00       	mov    ebx,0xd
c0002758:	e9 1f 02 00 00       	jmp    c000297c <mount_volume+0x2f3>
c000275d:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002760:	e8 62 f8 ff ff       	call   c0001fc7 <ld_word>
c0002765:	66 3d 00 02          	cmp    ax,0x200
c0002769:	75 e8                	jne    c0002753 <mount_volume+0xca>
c000276b:	8d 46 4a             	lea    eax,[esi+0x4a]
c000276e:	e8 54 f8 ff ff       	call   c0001fc7 <ld_word>
c0002773:	0f b7 c0             	movzx  eax,ax
c0002776:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000277a:	85 c0                	test   eax,eax
c000277c:	75 0c                	jne    c000278a <mount_volume+0x101>
c000277e:	8d 46 58             	lea    eax,[esi+0x58]
c0002781:	e8 4e f8 ff ff       	call   c0001fd4 <ld_dword>
c0002786:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000278a:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000278d:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c0002790:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002798:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000279b:	89 e8                	mov    eax,ebp
c000279d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00027a0:	8d 45 ff             	lea    eax,[ebp-0x1]
c00027a3:	3c 01                	cmp    al,0x1
c00027a5:	77 ac                	ja     c0002753 <mount_volume+0xca>
c00027a7:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00027ab:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027af:	66 85 c0             	test   ax,ax
c00027b2:	89 c3                	mov    ebx,eax
c00027b4:	74 9d                	je     c0002753 <mount_volume+0xca>
c00027b6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027b9:	85 d8                	test   eax,ebx
c00027bb:	75 96                	jne    c0002753 <mount_volume+0xca>
c00027bd:	8d 46 45             	lea    eax,[esi+0x45]
c00027c0:	e8 02 f8 ff ff       	call   c0001fc7 <ld_word>
c00027c5:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027c9:	a8 0f                	test   al,0xf
c00027cb:	89 c7                	mov    edi,eax
c00027cd:	75 84                	jne    c0002753 <mount_volume+0xca>
c00027cf:	8d 46 47             	lea    eax,[esi+0x47]
c00027d2:	e8 f0 f7 ff ff       	call   c0001fc7 <ld_word>
c00027d7:	0f b7 d0             	movzx  edx,ax
c00027da:	85 d2                	test   edx,edx
c00027dc:	75 0a                	jne    c00027e8 <mount_volume+0x15f>
c00027de:	8d 46 54             	lea    eax,[esi+0x54]
c00027e1:	e8 ee f7 ff ff       	call   c0001fd4 <ld_dword>
c00027e6:	89 c2                	mov    edx,eax
c00027e8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027ec:	8d 46 42             	lea    eax,[esi+0x42]
c00027ef:	e8 d3 f7 ff ff       	call   c0001fc7 <ld_word>
c00027f4:	0f b7 c8             	movzx  ecx,ax
c00027f7:	85 c9                	test   ecx,ecx
c00027f9:	0f 84 54 ff ff ff    	je     c0002753 <mount_volume+0xca>
c00027ff:	89 e8                	mov    eax,ebp
c0002801:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002805:	0f b6 e8             	movzx  ebp,al
c0002808:	0f b7 c7             	movzx  eax,di
c000280b:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002810:	c1 e8 04             	shr    eax,0x4
c0002813:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002817:	01 e8                	add    eax,ebp
c0002819:	01 c8                	add    eax,ecx
c000281b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000281f:	39 c2                	cmp    edx,eax
c0002821:	0f 82 2c ff ff ff    	jb     c0002753 <mount_volume+0xca>
c0002827:	29 c2                	sub    edx,eax
c0002829:	89 d5                	mov    ebp,edx
c000282b:	89 d0                	mov    eax,edx
c000282d:	31 d2                	xor    edx,edx
c000282f:	f7 f3                	div    ebx
c0002831:	39 dd                	cmp    ebp,ebx
c0002833:	0f 82 1a ff ff ff    	jb     c0002753 <mount_volume+0xca>
c0002839:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000283e:	0f 87 0f ff ff ff    	ja     c0002753 <mount_volume+0xca>
c0002844:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002849:	0f 86 1e 01 00 00    	jbe    c000296d <mount_volume+0x2e4>
c000284f:	bb 03 00 00 00       	mov    ebx,0x3
c0002854:	8d 68 02             	lea    ebp,[eax+0x2]
c0002857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000285b:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000285e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002862:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002866:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002869:	01 c8                	add    eax,ecx
c000286b:	83 fb 03             	cmp    ebx,0x3
c000286e:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002871:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002874:	75 23                	jne    c0002899 <mount_volume+0x210>
c0002876:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002879:	e8 49 f7 ff ff       	call   c0001fc7 <ld_word>
c000287e:	09 c7                	or     edi,eax
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 85 ca fe ff ff    	jne    c0002753 <mount_volume+0xca>
c0002889:	8d 46 60             	lea    eax,[esi+0x60]
c000288c:	e8 43 f7 ff ff       	call   c0001fd4 <ld_dword>
c0002891:	c1 e5 02             	shl    ebp,0x2
c0002894:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002897:	eb 25                	jmp    c00028be <mount_volume+0x235>
c0002899:	66 85 ff             	test   di,di
c000289c:	0f 84 b1 fe ff ff    	je     c0002753 <mount_volume+0xca>
c00028a2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00028a6:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00028aa:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00028ae:	83 e5 01             	and    ebp,0x1
c00028b1:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00028b4:	d1 ea                	shr    edx,1
c00028b6:	01 d5                	add    ebp,edx
c00028b8:	83 fb 02             	cmp    ebx,0x2
c00028bb:	0f 44 ef             	cmove  ebp,edi
c00028be:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028c4:	c1 ed 09             	shr    ebp,0x9
c00028c7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00028cb:	0f 87 82 fe ff ff    	ja     c0002753 <mount_volume+0xca>
c00028d1:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028d8:	83 fb 03             	cmp    ebx,0x3
c00028db:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028e2:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028e6:	75 6e                	jne    c0002956 <mount_volume+0x2cd>
c00028e8:	8d 46 64             	lea    eax,[esi+0x64]
c00028eb:	e8 d7 f6 ff ff       	call   c0001fc7 <ld_word>
c00028f0:	66 48                	dec    ax
c00028f2:	75 62                	jne    c0002956 <mount_volume+0x2cd>
c00028f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00028f8:	89 f0                	mov    eax,esi
c00028fa:	42                   	inc    edx
c00028fb:	e8 2c fc ff ff       	call   c000252c <move_window>
c0002900:	85 c0                	test   eax,eax
c0002902:	75 52                	jne    c0002956 <mount_volume+0x2cd>
c0002904:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002908:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000290e:	e8 b4 f6 ff ff       	call   c0001fc7 <ld_word>
c0002913:	66 3d 55 aa          	cmp    ax,0xaa55
c0002917:	75 3d                	jne    c0002956 <mount_volume+0x2cd>
c0002919:	8d 46 34             	lea    eax,[esi+0x34]
c000291c:	e8 b3 f6 ff ff       	call   c0001fd4 <ld_dword>
c0002921:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002926:	75 2e                	jne    c0002956 <mount_volume+0x2cd>
c0002928:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000292e:	e8 a1 f6 ff ff       	call   c0001fd4 <ld_dword>
c0002933:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002938:	75 1c                	jne    c0002956 <mount_volume+0x2cd>
c000293a:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002940:	e8 8f f6 ff ff       	call   c0001fd4 <ld_dword>
c0002945:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002948:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000294e:	e8 81 f6 ff ff       	call   c0001fd4 <ld_dword>
c0002953:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002956:	88 1e                	mov    BYTE PTR [esi],bl
c0002958:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c000295e:	31 db                	xor    ebx,ebx
c0002960:	40                   	inc    eax
c0002961:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c0002967:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000296b:	eb 0f                	jmp    c000297c <mount_volume+0x2f3>
c000296d:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002972:	19 db                	sbb    ebx,ebx
c0002974:	83 c3 02             	add    ebx,0x2
c0002977:	e9 d8 fe ff ff       	jmp    c0002854 <mount_volume+0x1cb>
c000297c:	83 c4 2c             	add    esp,0x2c
c000297f:	89 d8                	mov    eax,ebx
c0002981:	5b                   	pop    ebx
c0002982:	5e                   	pop    esi
c0002983:	5f                   	pop    edi
c0002984:	5d                   	pop    ebp
c0002985:	c3                   	ret    

c0002986 <put_fat>:
c0002986:	55                   	push   ebp
c0002987:	bd 02 00 00 00       	mov    ebp,0x2
c000298c:	57                   	push   edi
c000298d:	56                   	push   esi
c000298e:	53                   	push   ebx
c000298f:	83 ec 1c             	sub    esp,0x1c
c0002992:	83 fa 01             	cmp    edx,0x1
c0002995:	0f 86 38 01 00 00    	jbe    c0002ad3 <put_fat+0x14d>
c000299b:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000299e:	0f 86 2f 01 00 00    	jbe    c0002ad3 <put_fat+0x14d>
c00029a4:	89 c6                	mov    esi,eax
c00029a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00029a9:	89 cf                	mov    edi,ecx
c00029ab:	89 d3                	mov    ebx,edx
c00029ad:	83 f8 02             	cmp    eax,0x2
c00029b0:	0f 84 b1 00 00 00    	je     c0002a67 <put_fat+0xe1>
c00029b6:	83 f8 03             	cmp    eax,0x3
c00029b9:	0f 84 d5 00 00 00    	je     c0002a94 <put_fat+0x10e>
c00029bf:	48                   	dec    eax
c00029c0:	0f 85 0d 01 00 00    	jne    c0002ad3 <put_fat+0x14d>
c00029c6:	89 d1                	mov    ecx,edx
c00029c8:	89 f0                	mov    eax,esi
c00029ca:	d1 e9                	shr    ecx,1
c00029cc:	01 d1                	add    ecx,edx
c00029ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029d2:	89 ca                	mov    edx,ecx
c00029d4:	c1 ea 09             	shr    edx,0x9
c00029d7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029da:	e8 4d fb ff ff       	call   c000252c <move_window>
c00029df:	85 c0                	test   eax,eax
c00029e1:	89 c5                	mov    ebp,eax
c00029e3:	0f 85 ea 00 00 00    	jne    c0002ad3 <put_fat+0x14d>
c00029e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ed:	8d 46 34             	lea    eax,[esi+0x34]
c00029f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029f4:	8d 41 01             	lea    eax,[ecx+0x1]
c00029f7:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a01:	83 e3 01             	and    ebx,0x1
c0002a04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a08:	89 f8                	mov    eax,edi
c0002a0a:	74 11                	je     c0002a1d <put_fat+0x97>
c0002a0c:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002a0e:	89 f8                	mov    eax,edi
c0002a10:	c1 e0 04             	shl    eax,0x4
c0002a13:	25 f0 0f 00 00       	and    eax,0xff0
c0002a18:	83 e2 0f             	and    edx,0xf
c0002a1b:	09 d0                	or     eax,edx
c0002a1d:	88 01                	mov    BYTE PTR [ecx],al
c0002a1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a23:	89 f0                	mov    eax,esi
c0002a25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a29:	c1 ea 09             	shr    edx,0x9
c0002a2c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a2f:	e8 f8 fa ff ff       	call   c000252c <move_window>
c0002a34:	85 c0                	test   eax,eax
c0002a36:	89 c5                	mov    ebp,eax
c0002a38:	0f 85 95 00 00 00    	jne    c0002ad3 <put_fat+0x14d>
c0002a3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a42:	25 ff 01 00 00       	and    eax,0x1ff
c0002a47:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a4b:	85 db                	test   ebx,ebx
c0002a4d:	74 07                	je     c0002a56 <put_fat+0xd0>
c0002a4f:	c1 ef 04             	shr    edi,0x4
c0002a52:	89 f9                	mov    ecx,edi
c0002a54:	eb 0d                	jmp    c0002a63 <put_fat+0xdd>
c0002a56:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a58:	c1 ef 08             	shr    edi,0x8
c0002a5b:	83 e7 0f             	and    edi,0xf
c0002a5e:	83 e1 f0             	and    ecx,0xfffffff0
c0002a61:	09 f9                	or     ecx,edi
c0002a63:	88 08                	mov    BYTE PTR [eax],cl
c0002a65:	eb 27                	jmp    c0002a8e <put_fat+0x108>
c0002a67:	c1 ea 08             	shr    edx,0x8
c0002a6a:	89 f0                	mov    eax,esi
c0002a6c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a6f:	e8 b8 fa ff ff       	call   c000252c <move_window>
c0002a74:	85 c0                	test   eax,eax
c0002a76:	89 c5                	mov    ebp,eax
c0002a78:	75 59                	jne    c0002ad3 <put_fat+0x14d>
c0002a7a:	01 db                	add    ebx,ebx
c0002a7c:	0f b7 d7             	movzx  edx,di
c0002a7f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a85:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a89:	e8 5e f5 ff ff       	call   c0001fec <st_word>
c0002a8e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a92:	eb 3f                	jmp    c0002ad3 <put_fat+0x14d>
c0002a94:	c1 ea 07             	shr    edx,0x7
c0002a97:	89 f0                	mov    eax,esi
c0002a99:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a9c:	e8 8b fa ff ff       	call   c000252c <move_window>
c0002aa1:	85 c0                	test   eax,eax
c0002aa3:	89 c5                	mov    ebp,eax
c0002aa5:	75 2c                	jne    c0002ad3 <put_fat+0x14d>
c0002aa7:	c1 e3 02             	shl    ebx,0x2
c0002aaa:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ab0:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ab6:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002aba:	89 d8                	mov    eax,ebx
c0002abc:	e8 13 f5 ff ff       	call   c0001fd4 <ld_dword>
c0002ac1:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ac6:	09 f8                	or     eax,edi
c0002ac8:	89 c2                	mov    edx,eax
c0002aca:	89 d8                	mov    eax,ebx
c0002acc:	e8 1f f5 ff ff       	call   c0001ff0 <st_dword>
c0002ad1:	eb bb                	jmp    c0002a8e <put_fat+0x108>
c0002ad3:	83 c4 1c             	add    esp,0x1c
c0002ad6:	89 e8                	mov    eax,ebp
c0002ad8:	5b                   	pop    ebx
c0002ad9:	5e                   	pop    esi
c0002ada:	5f                   	pop    edi
c0002adb:	5d                   	pop    ebp
c0002adc:	c3                   	ret    

c0002add <dir_clear>:
c0002add:	55                   	push   ebp
c0002ade:	57                   	push   edi
c0002adf:	56                   	push   esi
c0002ae0:	89 c6                	mov    esi,eax
c0002ae2:	53                   	push   ebx
c0002ae3:	83 ec 1c             	sub    esp,0x1c
c0002ae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002aea:	e8 da f9 ff ff       	call   c00024c9 <sync_window>
c0002aef:	85 c0                	test   eax,eax
c0002af1:	0f 85 c1 00 00 00    	jne    c0002bb8 <dir_clear+0xdb>
c0002af7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002afb:	89 f0                	mov    eax,esi
c0002afd:	e8 1b f7 ff ff       	call   c000221d <clst2sect>
c0002b02:	31 d2                	xor    edx,edx
c0002b04:	b9 00 02 00 00       	mov    ecx,0x200
c0002b09:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002b0c:	89 c5                	mov    ebp,eax
c0002b0e:	8d 46 34             	lea    eax,[esi+0x34]
c0002b11:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b15:	e8 ee f4 ff ff       	call   c0002008 <mem_set>
c0002b1a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b1e:	b8 00 80 00 00       	mov    eax,0x8000
c0002b23:	c1 e3 09             	shl    ebx,0x9
c0002b26:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b2c:	0f 47 d8             	cmova  ebx,eax
c0002b2f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b35:	76 16                	jbe    c0002b4d <dir_clear+0x70>
c0002b37:	83 ec 0c             	sub    esp,0xc
c0002b3a:	53                   	push   ebx
c0002b3b:	e8 cc 32 00 00       	call   c0005e0c <ff_memalloc>
c0002b40:	83 c4 10             	add    esp,0x10
c0002b43:	85 c0                	test   eax,eax
c0002b45:	89 c7                	mov    edi,eax
c0002b47:	75 76                	jne    c0002bbf <dir_clear+0xe2>
c0002b49:	d1 eb                	shr    ebx,1
c0002b4b:	eb e2                	jmp    c0002b2f <dir_clear+0x52>
c0002b4d:	31 db                	xor    ebx,ebx
c0002b4f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b53:	39 d8                	cmp    eax,ebx
c0002b55:	76 53                	jbe    c0002baa <dir_clear+0xcd>
c0002b57:	6a 01                	push   0x1
c0002b59:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5c:	50                   	push   eax
c0002b5d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b65:	50                   	push   eax
c0002b66:	e8 27 f4 ff ff       	call   c0001f92 <disk_write>
c0002b6b:	83 c4 10             	add    esp,0x10
c0002b6e:	85 c0                	test   eax,eax
c0002b70:	75 38                	jne    c0002baa <dir_clear+0xcd>
c0002b72:	43                   	inc    ebx
c0002b73:	eb da                	jmp    c0002b4f <dir_clear+0x72>
c0002b75:	52                   	push   edx
c0002b76:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b79:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b7d:	50                   	push   eax
c0002b7e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b82:	57                   	push   edi
c0002b83:	50                   	push   eax
c0002b84:	e8 09 f4 ff ff       	call   c0001f92 <disk_write>
c0002b89:	83 c4 10             	add    esp,0x10
c0002b8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b90:	85 c0                	test   eax,eax
c0002b92:	75 0a                	jne    c0002b9e <dir_clear+0xc1>
c0002b94:	01 d3                	add    ebx,edx
c0002b96:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b9a:	39 d8                	cmp    eax,ebx
c0002b9c:	77 d7                	ja     c0002b75 <dir_clear+0x98>
c0002b9e:	83 ec 0c             	sub    esp,0xc
c0002ba1:	57                   	push   edi
c0002ba2:	e8 7d 32 00 00       	call   c0005e24 <ff_memfree>
c0002ba7:	83 c4 10             	add    esp,0x10
c0002baa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002bae:	39 d8                	cmp    eax,ebx
c0002bb0:	0f 95 c0             	setne  al
c0002bb3:	0f b6 c0             	movzx  eax,al
c0002bb6:	eb 19                	jmp    c0002bd1 <dir_clear+0xf4>
c0002bb8:	b8 01 00 00 00       	mov    eax,0x1
c0002bbd:	eb 12                	jmp    c0002bd1 <dir_clear+0xf4>
c0002bbf:	89 d9                	mov    ecx,ebx
c0002bc1:	31 d2                	xor    edx,edx
c0002bc3:	e8 40 f4 ff ff       	call   c0002008 <mem_set>
c0002bc8:	89 da                	mov    edx,ebx
c0002bca:	31 db                	xor    ebx,ebx
c0002bcc:	c1 ea 09             	shr    edx,0x9
c0002bcf:	eb c5                	jmp    c0002b96 <dir_clear+0xb9>
c0002bd1:	83 c4 1c             	add    esp,0x1c
c0002bd4:	5b                   	pop    ebx
c0002bd5:	5e                   	pop    esi
c0002bd6:	5f                   	pop    edi
c0002bd7:	5d                   	pop    ebp
c0002bd8:	c3                   	ret    

c0002bd9 <create_name>:
c0002bd9:	55                   	push   ebp
c0002bda:	89 c5                	mov    ebp,eax
c0002bdc:	57                   	push   edi
c0002bdd:	89 d7                	mov    edi,edx
c0002bdf:	56                   	push   esi
c0002be0:	31 f6                	xor    esi,esi
c0002be2:	53                   	push   ebx
c0002be3:	83 ec 3c             	sub    esp,0x3c
c0002be6:	8b 02                	mov    eax,DWORD PTR [edx]
c0002be8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002bef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002bfa:	e8 4d f4 ff ff       	call   c000204c <tchar2uni>
c0002bff:	83 f8 ff             	cmp    eax,0xffffffff
c0002c02:	89 c3                	mov    ebx,eax
c0002c04:	75 0a                	jne    c0002c10 <create_name+0x37>
c0002c06:	b8 06 00 00 00       	mov    eax,0x6
c0002c0b:	e9 7c 02 00 00       	jmp    c0002e8c <create_name+0x2b3>
c0002c10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002c15:	76 0c                	jbe    c0002c23 <create_name+0x4a>
c0002c17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002c1b:	c1 e8 10             	shr    eax,0x10
c0002c1e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002c22:	46                   	inc    esi
c0002c23:	0f b7 d3             	movzx  edx,bx
c0002c26:	89 d8                	mov    eax,ebx
c0002c28:	83 fa 1f             	cmp    edx,0x1f
c0002c2b:	76 30                	jbe    c0002c5d <create_name+0x84>
c0002c2d:	83 fa 2f             	cmp    edx,0x2f
c0002c30:	74 2b                	je     c0002c5d <create_name+0x84>
c0002c32:	83 fa 5c             	cmp    edx,0x5c
c0002c35:	74 35                	je     c0002c6c <create_name+0x93>
c0002c37:	83 fa 7f             	cmp    edx,0x7f
c0002c3a:	77 0e                	ja     c0002c4a <create_name+0x71>
c0002c3c:	b8 de f5 02 c0       	mov    eax,0xc002f5de
c0002c41:	e8 ef f3 ff ff       	call   c0002035 <chk_chr>
c0002c46:	85 c0                	test   eax,eax
c0002c48:	75 bc                	jne    c0002c06 <create_name+0x2d>
c0002c4a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c50:	77 b4                	ja     c0002c06 <create_name+0x2d>
c0002c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c56:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c5a:	46                   	inc    esi
c0002c5b:	eb 99                	jmp    c0002bf6 <create_name+0x1d>
c0002c5d:	66 83 f8 1f          	cmp    ax,0x1f
c0002c61:	b3 04                	mov    bl,0x4
c0002c63:	76 1a                	jbe    c0002c7f <create_name+0xa6>
c0002c65:	eb 05                	jmp    c0002c6c <create_name+0x93>
c0002c67:	40                   	inc    eax
c0002c68:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c6c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c70:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c73:	83 fa 2f             	cmp    edx,0x2f
c0002c76:	74 ef                	je     c0002c67 <create_name+0x8e>
c0002c78:	83 fa 5c             	cmp    edx,0x5c
c0002c7b:	74 ea                	je     c0002c67 <create_name+0x8e>
c0002c7d:	31 db                	xor    ebx,ebx
c0002c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c83:	89 07                	mov    DWORD PTR [edi],eax
c0002c85:	85 f6                	test   esi,esi
c0002c87:	74 16                	je     c0002c9f <create_name+0xc6>
c0002c89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c8d:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c92:	83 f8 20             	cmp    eax,0x20
c0002c95:	74 05                	je     c0002c9c <create_name+0xc3>
c0002c97:	83 f8 2e             	cmp    eax,0x2e
c0002c9a:	75 03                	jne    c0002c9f <create_name+0xc6>
c0002c9c:	4e                   	dec    esi
c0002c9d:	eb e6                	jmp    c0002c85 <create_name+0xac>
c0002c9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ca3:	31 ff                	xor    edi,edi
c0002ca5:	85 f6                	test   esi,esi
c0002ca7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002cad:	0f 84 53 ff ff ff    	je     c0002c06 <create_name+0x2d>
c0002cb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cb7:	8d 57 01             	lea    edx,[edi+0x1]
c0002cba:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cbe:	83 f8 20             	cmp    eax,0x20
c0002cc1:	75 04                	jne    c0002cc7 <create_name+0xee>
c0002cc3:	89 d7                	mov    edi,edx
c0002cc5:	eb ec                	jmp    c0002cb3 <create_name+0xda>
c0002cc7:	85 ff                	test   edi,edi
c0002cc9:	75 05                	jne    c0002cd0 <create_name+0xf7>
c0002ccb:	83 f8 2e             	cmp    eax,0x2e
c0002cce:	75 08                	jne    c0002cd8 <create_name+0xff>
c0002cd0:	83 cb 03             	or     ebx,0x3
c0002cd3:	eb 03                	jmp    c0002cd8 <create_name+0xff>
c0002cd5:	4e                   	dec    esi
c0002cd6:	74 0c                	je     c0002ce4 <create_name+0x10b>
c0002cd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cdc:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ce2:	75 f1                	jne    c0002cd5 <create_name+0xfc>
c0002ce4:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ce9:	ba 20 00 00 00       	mov    edx,0x20
c0002cee:	8d 45 20             	lea    eax,[ebp+0x20]
c0002cf1:	e8 12 f3 ff ff       	call   c0002008 <mem_set>
c0002cf6:	31 c9                	xor    ecx,ecx
c0002cf8:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002d00:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002d05:	8d 47 01             	lea    eax,[edi+0x1]
c0002d08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002d10:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	89 c7                	mov    edi,eax
c0002d18:	0f 84 1d 01 00 00    	je     c0002e3b <create_name+0x262>
c0002d1e:	83 f8 20             	cmp    eax,0x20
c0002d21:	74 0b                	je     c0002d2e <create_name+0x155>
c0002d23:	83 f8 2e             	cmp    eax,0x2e
c0002d26:	75 0f                	jne    c0002d37 <create_name+0x15e>
c0002d28:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d2c:	74 09                	je     c0002d37 <create_name+0x15e>
c0002d2e:	83 cb 03             	or     ebx,0x3
c0002d31:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002d35:	eb ce                	jmp    c0002d05 <create_name+0x12c>
c0002d37:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002d3b:	73 06                	jae    c0002d43 <create_name+0x16a>
c0002d3d:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d41:	75 3a                	jne    c0002d7d <create_name+0x1a4>
c0002d43:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002d48:	75 08                	jne    c0002d52 <create_name+0x179>
c0002d4a:	83 cb 03             	or     ebx,0x3
c0002d4d:	e9 e9 00 00 00       	jmp    c0002e3b <create_name+0x262>
c0002d52:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d56:	74 0d                	je     c0002d65 <create_name+0x18c>
c0002d58:	83 cb 03             	or     ebx,0x3
c0002d5b:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002d5f:	0f 87 d6 00 00 00    	ja     c0002e3b <create_name+0x262>
c0002d65:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d6a:	b9 08 00 00 00       	mov    ecx,0x8
c0002d6f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002d73:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002d7b:	eb b4                	jmp    c0002d31 <create_name+0x158>
c0002d7d:	0f b7 c7             	movzx  eax,di
c0002d80:	83 f8 7f             	cmp    eax,0x7f
c0002d83:	76 66                	jbe    c0002deb <create_name+0x212>
c0002d85:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d89:	89 d9                	mov    ecx,ebx
c0002d8b:	83 c9 02             	or     ecx,0x2
c0002d8e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d92:	52                   	push   edx
c0002d93:	52                   	push   edx
c0002d94:	68 b5 01 00 00       	push   0x1b5
c0002d99:	50                   	push   eax
c0002d9a:	e8 9d 30 00 00       	call   c0005e3c <ff_uni2oem>
c0002d9f:	83 c4 10             	add    esp,0x10
c0002da2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002da6:	a8 80                	test   al,0x80
c0002da8:	89 c7                	mov    edi,eax
c0002daa:	74 0c                	je     c0002db8 <create_name+0x1df>
c0002dac:	83 e7 7f             	and    edi,0x7f
c0002daf:	0f b6 bf a0 f6 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0960]
c0002db6:	eb 2a                	jmp    c0002de2 <create_name+0x209>
c0002db8:	0f b7 c0             	movzx  eax,ax
c0002dbb:	3d ff 00 00 00       	cmp    eax,0xff
c0002dc0:	76 20                	jbe    c0002de2 <create_name+0x209>
c0002dc2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002dc6:	4a                   	dec    edx
c0002dc7:	39 ca                	cmp    edx,ecx
c0002dc9:	77 0c                	ja     c0002dd7 <create_name+0x1fe>
c0002dcb:	83 cb 03             	or     ebx,0x3
c0002dce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002dd2:	e9 5a ff ff ff       	jmp    c0002d31 <create_name+0x158>
c0002dd7:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002ddb:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002ddf:	41                   	inc    ecx
c0002de0:	eb 4d                	jmp    c0002e2f <create_name+0x256>
c0002de2:	66 85 ff             	test   di,di
c0002de5:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002de9:	74 19                	je     c0002e04 <create_name+0x22b>
c0002deb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002def:	0f b7 d7             	movzx  edx,di
c0002df2:	b8 e7 f5 02 c0       	mov    eax,0xc002f5e7
c0002df7:	e8 39 f2 ff ff       	call   c0002035 <chk_chr>
c0002dfc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002e00:	85 c0                	test   eax,eax
c0002e02:	74 0a                	je     c0002e0e <create_name+0x235>
c0002e04:	83 cb 03             	or     ebx,0x3
c0002e07:	bf 5f 00 00 00       	mov    edi,0x5f
c0002e0c:	eb 21                	jmp    c0002e2f <create_name+0x256>
c0002e0e:	8d 47 bf             	lea    eax,[edi-0x41]
c0002e11:	66 83 f8 19          	cmp    ax,0x19
c0002e15:	77 07                	ja     c0002e1e <create_name+0x245>
c0002e17:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e1c:	eb 11                	jmp    c0002e2f <create_name+0x256>
c0002e1e:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e21:	66 83 f8 19          	cmp    ax,0x19
c0002e25:	77 08                	ja     c0002e2f <create_name+0x256>
c0002e27:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e2c:	83 ef 20             	sub    edi,0x20
c0002e2f:	89 f8                	mov    eax,edi
c0002e31:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002e35:	41                   	inc    ecx
c0002e36:	e9 f6 fe ff ff       	jmp    c0002d31 <create_name+0x158>
c0002e3b:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002e3f:	75 04                	jne    c0002e45 <create_name+0x26c>
c0002e41:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002e45:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002e4a:	75 05                	jne    c0002e51 <create_name+0x278>
c0002e4c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e55:	83 e0 0c             	and    eax,0xc
c0002e58:	83 f8 0c             	cmp    eax,0xc
c0002e5b:	74 0c                	je     c0002e69 <create_name+0x290>
c0002e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e61:	83 e0 03             	and    eax,0x3
c0002e64:	83 f8 03             	cmp    eax,0x3
c0002e67:	75 05                	jne    c0002e6e <create_name+0x295>
c0002e69:	83 cb 02             	or     ebx,0x2
c0002e6c:	eb 19                	jmp    c0002e87 <create_name+0x2ae>
c0002e6e:	f6 c3 02             	test   bl,0x2
c0002e71:	75 14                	jne    c0002e87 <create_name+0x2ae>
c0002e73:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e78:	74 03                	je     c0002e7d <create_name+0x2a4>
c0002e7a:	83 cb 10             	or     ebx,0x10
c0002e7d:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e82:	74 03                	je     c0002e87 <create_name+0x2ae>
c0002e84:	83 cb 08             	or     ebx,0x8
c0002e87:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002e8a:	31 c0                	xor    eax,eax
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 1e f1 ff ff       	call   c0001fc7 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a4 00 00 00       	jmp    c0002f59 <cmp_lfn+0xc5>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	31 c9                	xor    ecx,ecx
c0002ebe:	83 e3 3f             	and    ebx,0x3f
c0002ec1:	4b                   	dec    ebx
c0002ec2:	6b db 0d             	imul   ebx,ebx,0xd
c0002ec5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ec9:	0f b6 81 20 f7 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd08e0]
c0002ed0:	01 f8                	add    eax,edi
c0002ed2:	e8 f0 f0 ff ff       	call   c0001fc7 <ld_word>
c0002ed7:	66 85 ed             	test   bp,bp
c0002eda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ede:	0f b7 f0             	movzx  esi,ax
c0002ee1:	74 44                	je     c0002f27 <cmp_lfn+0x93>
c0002ee3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002ee7:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eed:	77 bf                	ja     c0002eae <cmp_lfn+0x1a>
c0002eef:	83 ec 0c             	sub    esp,0xc
c0002ef2:	0f b7 c6             	movzx  eax,si
c0002ef5:	50                   	push   eax
c0002ef6:	e8 55 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002efb:	89 c5                	mov    ebp,eax
c0002efd:	8d 43 01             	lea    eax,[ebx+0x1]
c0002f00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002f04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f08:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0f:	e8 3c 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f14:	83 c4 10             	add    esp,0x10
c0002f17:	39 c5                	cmp    ebp,eax
c0002f19:	75 93                	jne    c0002eae <cmp_lfn+0x1a>
c0002f1b:	89 f5                	mov    ebp,esi
c0002f1d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002f21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002f25:	eb 0c                	jmp    c0002f33 <cmp_lfn+0x9f>
c0002f27:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002f2d:	0f 85 7b ff ff ff    	jne    c0002eae <cmp_lfn+0x1a>
c0002f33:	41                   	inc    ecx
c0002f34:	83 f9 0d             	cmp    ecx,0xd
c0002f37:	75 8c                	jne    c0002ec5 <cmp_lfn+0x31>
c0002f39:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f3c:	74 16                	je     c0002f54 <cmp_lfn+0xc0>
c0002f3e:	66 85 ed             	test   bp,bp
c0002f41:	74 11                	je     c0002f54 <cmp_lfn+0xc0>
c0002f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f47:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f4c:	0f 94 c0             	sete   al
c0002f4f:	0f b6 c0             	movzx  eax,al
c0002f52:	eb 05                	jmp    c0002f59 <cmp_lfn+0xc5>
c0002f54:	b8 01 00 00 00       	mov    eax,0x1
c0002f59:	83 c4 1c             	add    esp,0x1c
c0002f5c:	5b                   	pop    ebx
c0002f5d:	5e                   	pop    esi
c0002f5e:	5f                   	pop    edi
c0002f5f:	5d                   	pop    ebp
c0002f60:	c3                   	ret    

c0002f61 <sync_fs>:
c0002f61:	56                   	push   esi
c0002f62:	53                   	push   ebx
c0002f63:	53                   	push   ebx
c0002f64:	89 c3                	mov    ebx,eax
c0002f66:	e8 5e f5 ff ff       	call   c00024c9 <sync_window>
c0002f6b:	85 c0                	test   eax,eax
c0002f6d:	0f 85 9a 00 00 00    	jne    c000300d <sync_fs+0xac>
c0002f73:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f76:	75 7b                	jne    c0002ff3 <sync_fs+0x92>
c0002f78:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f7c:	75 75                	jne    c0002ff3 <sync_fs+0x92>
c0002f7e:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f81:	b9 00 02 00 00       	mov    ecx,0x200
c0002f86:	31 d2                	xor    edx,edx
c0002f88:	89 f0                	mov    eax,esi
c0002f8a:	e8 79 f0 ff ff       	call   c0002008 <mem_set>
c0002f8f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f9a:	e8 4d f0 ff ff       	call   c0001fec <st_word>
c0002f9f:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa4:	89 f0                	mov    eax,esi
c0002fa6:	e8 45 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fab:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fb1:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb6:	e8 35 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fbb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbe:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc4:	e8 27 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fc9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fcc:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fd2:	e8 19 f0 ff ff       	call   c0001ff0 <st_dword>
c0002fd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fda:	6a 01                	push   0x1
c0002fdc:	40                   	inc    eax
c0002fdd:	50                   	push   eax
c0002fde:	56                   	push   esi
c0002fdf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fe2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe6:	50                   	push   eax
c0002fe7:	e8 a6 ef ff ff       	call   c0001f92 <disk_write>
c0002fec:	83 c4 10             	add    esp,0x10
c0002fef:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002ff3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff7:	51                   	push   ecx
c0002ff8:	6a 00                	push   0x0
c0002ffa:	6a 00                	push   0x0
c0002ffc:	50                   	push   eax
c0002ffd:	e8 a6 ef ff ff       	call   c0001fa8 <disk_ioctl>
c0003002:	83 c4 10             	add    esp,0x10
c0003005:	85 c0                	test   eax,eax
c0003007:	0f 95 c0             	setne  al
c000300a:	0f b6 c0             	movzx  eax,al
c000300d:	5a                   	pop    edx
c000300e:	5b                   	pop    ebx
c000300f:	5e                   	pop    esi
c0003010:	c3                   	ret    

c0003011 <create_partition>:
c0003011:	55                   	push   ebp
c0003012:	0f b6 c0             	movzx  eax,al
c0003015:	57                   	push   edi
c0003016:	56                   	push   esi
c0003017:	53                   	push   ebx
c0003018:	83 ec 40             	sub    esp,0x40
c000301b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003023:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003027:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000302b:	50                   	push   eax
c000302c:	6a 01                	push   0x1
c000302e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003032:	e8 71 ef ff ff       	call   c0001fa8 <disk_ioctl>
c0003037:	83 c4 10             	add    esp,0x10
c000303a:	85 c0                	test   eax,eax
c000303c:	0f 85 68 01 00 00    	jne    c00031aa <create_partition+0x199>
c0003042:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0003046:	b9 05 00 00 00       	mov    ecx,0x5
c000304b:	be 08 00 00 00       	mov    esi,0x8
c0003050:	89 f0                	mov    eax,esi
c0003052:	31 d2                	xor    edx,edx
c0003054:	0f b6 d8             	movzx  ebx,al
c0003057:	89 e8                	mov    eax,ebp
c0003059:	f7 f3                	div    ebx
c000305b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003060:	76 0a                	jbe    c000306c <create_partition+0x5b>
c0003062:	d1 e6                	shl    esi,1
c0003064:	49                   	dec    ecx
c0003065:	75 e9                	jne    c0003050 <create_partition+0x3f>
c0003067:	be ff ff ff ff       	mov    esi,0xffffffff
c000306c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0003070:	b9 00 02 00 00       	mov    ecx,0x200
c0003075:	31 d2                	xor    edx,edx
c0003077:	e8 8c ef ff ff       	call   c0002008 <mem_set>
c000307c:	b9 64 00 00 00       	mov    ecx,0x64
c0003081:	89 e8                	mov    eax,ebp
c0003083:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000308b:	31 d2                	xor    edx,edx
c000308d:	f7 f1                	div    ecx
c000308f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003094:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003098:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000309c:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a2:	89 f0                	mov    eax,esi
c00030a4:	0f b6 c0             	movzx  eax,al
c00030a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030ab:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00030b0:	0f 96 c0             	setbe  al
c00030b3:	31 d2                	xor    edx,edx
c00030b5:	85 c9                	test   ecx,ecx
c00030b7:	0f 95 c2             	setne  dl
c00030ba:	85 c2                	test   edx,eax
c00030bc:	0f 84 b7 00 00 00    	je     c0003179 <create_partition+0x168>
c00030c2:	39 e9                	cmp    ecx,ebp
c00030c4:	0f 83 af 00 00 00    	jae    c0003179 <create_partition+0x168>
c00030ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030d2:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030d5:	83 fe 64             	cmp    esi,0x64
c00030d8:	77 0b                	ja     c00030e5 <create_partition+0xd4>
c00030da:	74 07                	je     c00030e3 <create_partition+0xd2>
c00030dc:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c00030e1:	eb 02                	jmp    c00030e5 <create_partition+0xd4>
c00030e3:	89 ee                	mov    esi,ebp
c00030e5:	89 ca                	mov    edx,ecx
c00030e7:	31 c0                	xor    eax,eax
c00030e9:	01 f2                	add    edx,esi
c00030eb:	0f 92 c0             	setb   al
c00030ee:	39 ea                	cmp    edx,ebp
c00030f0:	77 04                	ja     c00030f6 <create_partition+0xe5>
c00030f2:	85 c0                	test   eax,eax
c00030f4:	74 06                	je     c00030fc <create_partition+0xeb>
c00030f6:	89 ee                	mov    esi,ebp
c00030f8:	29 ce                	sub    esi,ecx
c00030fa:	eb 04                	jmp    c0003100 <create_partition+0xef>
c00030fc:	85 f6                	test   esi,esi
c00030fe:	74 79                	je     c0003179 <create_partition+0x168>
c0003100:	89 ca                	mov    edx,ecx
c0003102:	89 d8                	mov    eax,ebx
c0003104:	e8 e7 ee ff ff       	call   c0001ff0 <st_dword>
c0003109:	8d 43 04             	lea    eax,[ebx+0x4]
c000310c:	89 f2                	mov    edx,esi
c000310e:	e8 dd ee ff ff       	call   c0001ff0 <st_dword>
c0003113:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003117:	bf 3f 00 00 00       	mov    edi,0x3f
c000311c:	31 d2                	xor    edx,edx
c000311e:	83 c3 10             	add    ebx,0x10
c0003121:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003125:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003128:	89 c8                	mov    eax,ecx
c000312a:	01 f1                	add    ecx,esi
c000312c:	f7 f7                	div    edi
c000312e:	89 d7                	mov    edi,edx
c0003130:	31 d2                	xor    edx,edx
c0003132:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003136:	47                   	inc    edi
c0003137:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000313a:	89 c2                	mov    edx,eax
c000313c:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c000313f:	c1 ea 02             	shr    edx,0x2
c0003142:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003145:	83 e2 c0             	and    edx,0xffffffc0
c0003148:	09 fa                	or     edx,edi
c000314a:	bf 3f 00 00 00       	mov    edi,0x3f
c000314f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003152:	31 d2                	xor    edx,edx
c0003154:	f7 f7                	div    edi
c0003156:	89 d6                	mov    esi,edx
c0003158:	31 d2                	xor    edx,edx
c000315a:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c000315e:	46                   	inc    esi
c000315f:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003162:	89 c7                	mov    edi,eax
c0003164:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003167:	c1 ef 02             	shr    edi,0x2
c000316a:	83 e7 c0             	and    edi,0xffffffc0
c000316d:	09 fe                	or     esi,edi
c000316f:	89 f2                	mov    edx,esi
c0003171:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003174:	e9 32 ff ff ff       	jmp    c00030ab <create_partition+0x9a>
c0003179:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000317d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0003182:	05 fe 01 00 00       	add    eax,0x1fe
c0003187:	e8 60 ee ff ff       	call   c0001fec <st_word>
c000318c:	6a 01                	push   0x1
c000318e:	6a 00                	push   0x0
c0003190:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0003194:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003198:	e8 f5 ed ff ff       	call   c0001f92 <disk_write>
c000319d:	83 c4 10             	add    esp,0x10
c00031a0:	85 c0                	test   eax,eax
c00031a2:	0f 95 c0             	setne  al
c00031a5:	0f b6 c0             	movzx  eax,al
c00031a8:	eb 05                	jmp    c00031af <create_partition+0x19e>
c00031aa:	b8 01 00 00 00       	mov    eax,0x1
c00031af:	83 c4 3c             	add    esp,0x3c
c00031b2:	5b                   	pop    ebx
c00031b3:	5e                   	pop    esi
c00031b4:	5f                   	pop    edi
c00031b5:	5d                   	pop    ebp
c00031b6:	c3                   	ret    

c00031b7 <get_fileinfo>:
c00031b7:	55                   	push   ebp
c00031b8:	57                   	push   edi
c00031b9:	56                   	push   esi
c00031ba:	53                   	push   ebx
c00031bb:	83 ec 1c             	sub    esp,0x1c
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c4:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031c8:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031cc:	0f 84 de 01 00 00    	je     c00033b0 <get_fileinfo+0x1f9>
c00031d2:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d6:	89 d3                	mov    ebx,edx
c00031d8:	89 c6                	mov    esi,eax
c00031da:	74 7d                	je     c0003259 <get_fileinfo+0xa2>
c00031dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00031e4:	31 ff                	xor    edi,edi
c00031e6:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c00031ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00031f5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f8:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031fc:	85 c0                	test   eax,eax
c00031fe:	89 c2                	mov    edx,eax
c0003200:	74 44                	je     c0003246 <get_fileinfo+0x8f>
c0003202:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003207:	85 ed                	test   ebp,ebp
c0003209:	75 0d                	jne    c0003218 <get_fileinfo+0x61>
c000320b:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003211:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003216:	76 20                	jbe    c0003238 <get_fileinfo+0x81>
c0003218:	c1 e5 10             	shl    ebp,0x10
c000321b:	b9 ff 00 00 00       	mov    ecx,0xff
c0003220:	29 f9                	sub    ecx,edi
c0003222:	09 e8                	or     eax,ebp
c0003224:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003228:	e8 f7 ee ff ff       	call   c0002124 <put_utf>
c000322d:	0f b6 c0             	movzx  eax,al
c0003230:	85 c0                	test   eax,eax
c0003232:	74 10                	je     c0003244 <get_fileinfo+0x8d>
c0003234:	01 c7                	add    edi,eax
c0003236:	31 d2                	xor    edx,edx
c0003238:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c000323d:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c0003242:	eb a9                	jmp    c00031ed <get_fileinfo+0x36>
c0003244:	31 ff                	xor    edi,edi
c0003246:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c000324c:	b8 00 00 00 00       	mov    eax,0x0
c0003251:	0f 45 f8             	cmovne edi,eax
c0003254:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003259:	31 ff                	xor    edi,edi
c000325b:	31 c9                	xor    ecx,ecx
c000325d:	83 f9 0a             	cmp    ecx,0xa
c0003260:	0f 87 ac 00 00 00    	ja     c0003312 <get_fileinfo+0x15b>
c0003266:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003269:	8d 69 01             	lea    ebp,[ecx+0x1]
c000326c:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003270:	83 f8 20             	cmp    eax,0x20
c0003273:	89 c2                	mov    edx,eax
c0003275:	0f 84 90 00 00 00    	je     c000330b <get_fileinfo+0x154>
c000327b:	83 f8 05             	cmp    eax,0x5
c000327e:	75 05                	jne    c0003285 <get_fileinfo+0xce>
c0003280:	ba e5 00 00 00       	mov    edx,0xe5
c0003285:	83 fd 09             	cmp    ebp,0x9
c0003288:	75 0b                	jne    c0003295 <get_fileinfo+0xde>
c000328a:	83 ff 0b             	cmp    edi,0xb
c000328d:	77 06                	ja     c0003295 <get_fileinfo+0xde>
c000328f:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003294:	47                   	inc    edi
c0003295:	0f b7 c2             	movzx  eax,dx
c0003298:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000329c:	e8 a5 ed ff ff       	call   c0002046 <dbc_1st>
c00032a1:	85 c0                	test   eax,eax
c00032a3:	74 2f                	je     c00032d4 <get_fileinfo+0x11d>
c00032a5:	83 fd 08             	cmp    ebp,0x8
c00032a8:	74 2a                	je     c00032d4 <get_fileinfo+0x11d>
c00032aa:	83 fd 0b             	cmp    ebp,0xb
c00032ad:	74 25                	je     c00032d4 <get_fileinfo+0x11d>
c00032af:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032b2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032b6:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c00032ba:	e8 8a ed ff ff       	call   c0002049 <dbc_2nd>
c00032bf:	85 c0                	test   eax,eax
c00032c1:	74 11                	je     c00032d4 <get_fileinfo+0x11d>
c00032c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032c7:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032ca:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c00032cf:	c1 e0 08             	shl    eax,0x8
c00032d2:	09 c2                	or     edx,eax
c00032d4:	50                   	push   eax
c00032d5:	0f b7 d2             	movzx  edx,dx
c00032d8:	50                   	push   eax
c00032d9:	68 b5 01 00 00       	push   0x1b5
c00032de:	52                   	push   edx
c00032df:	e8 f4 2b 00 00       	call   c0005ed8 <ff_oem2uni>
c00032e4:	83 c4 10             	add    esp,0x10
c00032e7:	0f b7 c0             	movzx  eax,ax
c00032ea:	85 c0                	test   eax,eax
c00032ec:	75 04                	jne    c00032f2 <get_fileinfo+0x13b>
c00032ee:	31 ff                	xor    edi,edi
c00032f0:	eb 20                	jmp    c0003312 <get_fileinfo+0x15b>
c00032f2:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032f6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032fb:	29 f9                	sub    ecx,edi
c00032fd:	e8 22 ee ff ff       	call   c0002124 <put_utf>
c0003302:	0f b6 c0             	movzx  eax,al
c0003305:	85 c0                	test   eax,eax
c0003307:	74 e5                	je     c00032ee <get_fileinfo+0x137>
c0003309:	01 c7                	add    edi,eax
c000330b:	89 e9                	mov    ecx,ebp
c000330d:	e9 4b ff ff ff       	jmp    c000325d <get_fileinfo+0xa6>
c0003312:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003317:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000331b:	75 5f                	jne    c000337c <get_fileinfo+0x1c5>
c000331d:	85 ff                	test   edi,edi
c000331f:	75 0b                	jne    c000332c <get_fileinfo+0x175>
c0003321:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003325:	ba 01 00 00 00       	mov    edx,0x1
c000332a:	eb 3e                	jmp    c000336a <get_fileinfo+0x1b3>
c000332c:	bf 08 00 00 00       	mov    edi,0x8
c0003331:	31 d2                	xor    edx,edx
c0003333:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003339:	84 c0                	test   al,al
c000333b:	74 2d                	je     c000336a <get_fileinfo+0x1b3>
c000333d:	66 83 f8 2e          	cmp    ax,0x2e
c0003341:	74 1b                	je     c000335e <get_fileinfo+0x1a7>
c0003343:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003346:	66 83 f9 19          	cmp    cx,0x19
c000334a:	77 17                	ja     c0003363 <get_fileinfo+0x1ac>
c000334c:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334f:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003352:	21 f9                	and    ecx,edi
c0003354:	80 e1 18             	and    cl,0x18
c0003357:	74 0a                	je     c0003363 <get_fileinfo+0x1ac>
c0003359:	83 c0 20             	add    eax,0x20
c000335c:	eb 05                	jmp    c0003363 <get_fileinfo+0x1ac>
c000335e:	bf 10 00 00 00       	mov    edi,0x10
c0003363:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003367:	42                   	inc    edx
c0003368:	eb c9                	jmp    c0003333 <get_fileinfo+0x17c>
c000336a:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000336f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003372:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003376:	75 04                	jne    c000337c <get_fileinfo+0x1c5>
c0003378:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000337c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003382:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003385:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003388:	83 c0 1c             	add    eax,0x1c
c000338b:	e8 44 ec ff ff       	call   c0001fd4 <ld_dword>
c0003390:	89 03                	mov    DWORD PTR [ebx],eax
c0003392:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003395:	83 c0 16             	add    eax,0x16
c0003398:	e8 2a ec ff ff       	call   c0001fc7 <ld_word>
c000339d:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00033a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00033a4:	83 c0 18             	add    eax,0x18
c00033a7:	e8 1b ec ff ff       	call   c0001fc7 <ld_word>
c00033ac:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033b0:	83 c4 1c             	add    esp,0x1c
c00033b3:	5b                   	pop    ebx
c00033b4:	5e                   	pop    esi
c00033b5:	5f                   	pop    edi
c00033b6:	5d                   	pop    ebp
c00033b7:	c3                   	ret    

c00033b8 <ld_clust.isra.0>:
c00033b8:	56                   	push   esi
c00033b9:	89 c6                	mov    esi,eax
c00033bb:	53                   	push   ebx
c00033bc:	89 d3                	mov    ebx,edx
c00033be:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033c1:	e8 01 ec ff ff       	call   c0001fc7 <ld_word>
c00033c6:	0f b7 c8             	movzx  ecx,ax
c00033c9:	89 f0                	mov    eax,esi
c00033cb:	3c 03                	cmp    al,0x3
c00033cd:	75 0d                	jne    c00033dc <ld_clust.isra.0+0x24>
c00033cf:	8d 43 14             	lea    eax,[ebx+0x14]
c00033d2:	e8 f0 eb ff ff       	call   c0001fc7 <ld_word>
c00033d7:	c1 e0 10             	shl    eax,0x10
c00033da:	09 c1                	or     ecx,eax
c00033dc:	5b                   	pop    ebx
c00033dd:	89 c8                	mov    eax,ecx
c00033df:	5e                   	pop    esi
c00033e0:	c3                   	ret    

c00033e1 <st_clust.isra.1>:
c00033e1:	56                   	push   esi
c00033e2:	89 c6                	mov    esi,eax
c00033e4:	53                   	push   ebx
c00033e5:	89 d3                	mov    ebx,edx
c00033e7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033ea:	0f b7 d1             	movzx  edx,cx
c00033ed:	e8 fa eb ff ff       	call   c0001fec <st_word>
c00033f2:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033f5:	75 0f                	jne    c0003406 <st_clust.isra.1+0x25>
c00033f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00033fa:	5b                   	pop    ebx
c00033fb:	c1 e9 10             	shr    ecx,0x10
c00033fe:	89 ca                	mov    edx,ecx
c0003400:	5e                   	pop    esi
c0003401:	e9 e6 eb ff ff       	jmp    c0001fec <st_word>
c0003406:	5b                   	pop    ebx
c0003407:	5e                   	pop    esi
c0003408:	c3                   	ret    

c0003409 <get_fat.isra.2>:
c0003409:	83 fa 01             	cmp    edx,0x1
c000340c:	b9 01 00 00 00       	mov    ecx,0x1
c0003411:	0f 86 f4 00 00 00    	jbe    c000350b <get_fat.isra.2+0x102>
c0003417:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000341a:	0f 83 eb 00 00 00    	jae    c000350b <get_fat.isra.2+0x102>
c0003420:	55                   	push   ebp
c0003421:	57                   	push   edi
c0003422:	56                   	push   esi
c0003423:	89 c6                	mov    esi,eax
c0003425:	53                   	push   ebx
c0003426:	89 d3                	mov    ebx,edx
c0003428:	83 ec 0c             	sub    esp,0xc
c000342b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000342e:	83 f8 02             	cmp    eax,0x2
c0003431:	74 79                	je     c00034ac <get_fat.isra.2+0xa3>
c0003433:	83 f8 03             	cmp    eax,0x3
c0003436:	0f 84 97 00 00 00    	je     c00034d3 <get_fat.isra.2+0xca>
c000343c:	48                   	dec    eax
c000343d:	0f 85 be 00 00 00    	jne    c0003501 <get_fat.isra.2+0xf8>
c0003443:	89 d7                	mov    edi,edx
c0003445:	89 f0                	mov    eax,esi
c0003447:	d1 ef                	shr    edi,1
c0003449:	01 d7                	add    edi,edx
c000344b:	89 fa                	mov    edx,edi
c000344d:	c1 ea 09             	shr    edx,0x9
c0003450:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003453:	e8 d4 f0 ff ff       	call   c000252c <move_window>
c0003458:	85 c0                	test   eax,eax
c000345a:	74 08                	je     c0003464 <get_fat.isra.2+0x5b>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	e9 9d 00 00 00       	jmp    c0003501 <get_fat.isra.2+0xf8>
c0003464:	8d 6f 01             	lea    ebp,[edi+0x1]
c0003467:	89 f0                	mov    eax,esi
c0003469:	89 ea                	mov    edx,ebp
c000346b:	81 e7 ff 01 00 00    	and    edi,0x1ff
c0003471:	c1 ea 09             	shr    edx,0x9
c0003474:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c0003479:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000347c:	e8 ab f0 ff ff       	call   c000252c <move_window>
c0003481:	85 c0                	test   eax,eax
c0003483:	75 d7                	jne    c000345c <get_fat.isra.2+0x53>
c0003485:	89 f8                	mov    eax,edi
c0003487:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000348d:	0f b6 f8             	movzx  edi,al
c0003490:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c0003495:	c1 e0 08             	shl    eax,0x8
c0003498:	09 f8                	or     eax,edi
c000349a:	89 c1                	mov    ecx,eax
c000349c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00034a2:	80 e3 01             	and    bl,0x1
c00034a5:	74 5a                	je     c0003501 <get_fat.isra.2+0xf8>
c00034a7:	c1 e8 04             	shr    eax,0x4
c00034aa:	eb 53                	jmp    c00034ff <get_fat.isra.2+0xf6>
c00034ac:	c1 ea 08             	shr    edx,0x8
c00034af:	89 f0                	mov    eax,esi
c00034b1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034b4:	e8 73 f0 ff ff       	call   c000252c <move_window>
c00034b9:	85 c0                	test   eax,eax
c00034bb:	75 9f                	jne    c000345c <get_fat.isra.2+0x53>
c00034bd:	01 db                	add    ebx,ebx
c00034bf:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00034c5:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034c9:	e8 f9 ea ff ff       	call   c0001fc7 <ld_word>
c00034ce:	0f b7 c8             	movzx  ecx,ax
c00034d1:	eb 2e                	jmp    c0003501 <get_fat.isra.2+0xf8>
c00034d3:	c1 ea 07             	shr    edx,0x7
c00034d6:	89 f0                	mov    eax,esi
c00034d8:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00034db:	e8 4c f0 ff ff       	call   c000252c <move_window>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	0f 85 74 ff ff ff    	jne    c000345c <get_fat.isra.2+0x53>
c00034e8:	c1 e3 02             	shl    ebx,0x2
c00034eb:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00034f1:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00034f5:	e8 da ea ff ff       	call   c0001fd4 <ld_dword>
c00034fa:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034ff:	89 c1                	mov    ecx,eax
c0003501:	83 c4 0c             	add    esp,0xc
c0003504:	89 c8                	mov    eax,ecx
c0003506:	5b                   	pop    ebx
c0003507:	5e                   	pop    esi
c0003508:	5f                   	pop    edi
c0003509:	5d                   	pop    ebp
c000350a:	c3                   	ret    
c000350b:	89 c8                	mov    eax,ecx
c000350d:	c3                   	ret    

c000350e <dir_sdi>:
c000350e:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003514:	0f 87 b6 00 00 00    	ja     c00035d0 <dir_sdi+0xc2>
c000351a:	55                   	push   ebp
c000351b:	57                   	push   edi
c000351c:	56                   	push   esi
c000351d:	53                   	push   ebx
c000351e:	89 d3                	mov    ebx,edx
c0003520:	83 ec 1c             	sub    esp,0x1c
c0003523:	f6 c2 1f             	test   dl,0x1f
c0003526:	74 0a                	je     c0003532 <dir_sdi+0x24>
c0003528:	b8 02 00 00 00       	mov    eax,0x2
c000352d:	e9 96 00 00 00       	jmp    c00035c8 <dir_sdi+0xba>
c0003532:	89 c6                	mov    esi,eax
c0003534:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003536:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003539:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c000353c:	85 ff                	test   edi,edi
c000353e:	75 21                	jne    c0003561 <dir_sdi+0x53>
c0003540:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003544:	76 07                	jbe    c000354d <dir_sdi+0x3f>
c0003546:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003549:	85 c0                	test   eax,eax
c000354b:	75 12                	jne    c000355f <dir_sdi+0x51>
c000354d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003551:	89 da                	mov    edx,ebx
c0003553:	c1 ea 05             	shr    edx,0x5
c0003556:	39 c2                	cmp    edx,eax
c0003558:	73 ce                	jae    c0003528 <dir_sdi+0x1a>
c000355a:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c000355d:	eb 3c                	jmp    c000359b <dir_sdi+0x8d>
c000355f:	89 c7                	mov    edi,eax
c0003561:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0003565:	c1 e1 09             	shl    ecx,0x9
c0003568:	39 cb                	cmp    ebx,ecx
c000356a:	72 26                	jb     c0003592 <dir_sdi+0x84>
c000356c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003570:	8b 06                	mov    eax,DWORD PTR [esi]
c0003572:	89 fa                	mov    edx,edi
c0003574:	e8 90 fe ff ff       	call   c0003409 <get_fat.isra.2>
c0003579:	83 f8 ff             	cmp    eax,0xffffffff
c000357c:	89 c7                	mov    edi,eax
c000357e:	74 43                	je     c00035c3 <dir_sdi+0xb5>
c0003580:	83 f8 01             	cmp    eax,0x1
c0003583:	76 a3                	jbe    c0003528 <dir_sdi+0x1a>
c0003585:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003588:	76 9e                	jbe    c0003528 <dir_sdi+0x1a>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	29 cb                	sub    ebx,ecx
c0003590:	eb d6                	jmp    c0003568 <dir_sdi+0x5a>
c0003592:	89 fa                	mov    edx,edi
c0003594:	89 e8                	mov    eax,ebp
c0003596:	e8 82 ec ff ff       	call   c000221d <clst2sect>
c000359b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000359e:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00035a1:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00035a4:	85 d2                	test   edx,edx
c00035a6:	74 80                	je     c0003528 <dir_sdi+0x1a>
c00035a8:	89 d8                	mov    eax,ebx
c00035aa:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035b0:	c1 e8 09             	shr    eax,0x9
c00035b3:	01 d0                	add    eax,edx
c00035b5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035b8:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c00035bc:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035bf:	31 c0                	xor    eax,eax
c00035c1:	eb 05                	jmp    c00035c8 <dir_sdi+0xba>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	83 c4 1c             	add    esp,0x1c
c00035cb:	5b                   	pop    ebx
c00035cc:	5e                   	pop    esi
c00035cd:	5f                   	pop    edi
c00035ce:	5d                   	pop    ebp
c00035cf:	c3                   	ret    
c00035d0:	b8 02 00 00 00       	mov    eax,0x2
c00035d5:	c3                   	ret    

c00035d6 <create_chain>:
c00035d6:	55                   	push   ebp
c00035d7:	89 c5                	mov    ebp,eax
c00035d9:	57                   	push   edi
c00035da:	89 d7                	mov    edi,edx
c00035dc:	56                   	push   esi
c00035dd:	53                   	push   ebx
c00035de:	83 ec 1c             	sub    esp,0x1c
c00035e1:	85 d2                	test   edx,edx
c00035e3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00035e5:	75 0e                	jne    c00035f5 <create_chain+0x1f>
c00035e7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00035ea:	85 c9                	test   ecx,ecx
c00035ec:	74 32                	je     c0003620 <create_chain+0x4a>
c00035ee:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00035f1:	77 32                	ja     c0003625 <create_chain+0x4f>
c00035f3:	eb 2b                	jmp    c0003620 <create_chain+0x4a>
c00035f5:	89 d8                	mov    eax,ebx
c00035f7:	e8 0d fe ff ff       	call   c0003409 <get_fat.isra.2>
c00035fc:	83 f8 01             	cmp    eax,0x1
c00035ff:	77 0a                	ja     c000360b <create_chain+0x35>
c0003601:	b8 01 00 00 00       	mov    eax,0x1
c0003606:	e9 fd 00 00 00       	jmp    c0003708 <create_chain+0x132>
c000360b:	83 f8 ff             	cmp    eax,0xffffffff
c000360e:	0f 84 f1 00 00 00    	je     c0003705 <create_chain+0x12f>
c0003614:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003617:	89 f9                	mov    ecx,edi
c0003619:	76 0a                	jbe    c0003625 <create_chain+0x4f>
c000361b:	e9 e8 00 00 00       	jmp    c0003708 <create_chain+0x132>
c0003620:	b9 01 00 00 00       	mov    ecx,0x1
c0003625:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003629:	75 07                	jne    c0003632 <create_chain+0x5c>
c000362b:	31 c0                	xor    eax,eax
c000362d:	e9 d6 00 00 00       	jmp    c0003708 <create_chain+0x132>
c0003632:	39 f9                	cmp    ecx,edi
c0003634:	75 49                	jne    c000367f <create_chain+0xa9>
c0003636:	8d 71 01             	lea    esi,[ecx+0x1]
c0003639:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000363c:	77 05                	ja     c0003643 <create_chain+0x6d>
c000363e:	be 02 00 00 00       	mov    esi,0x2
c0003643:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003647:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000364a:	89 f2                	mov    edx,esi
c000364c:	e8 b8 fd ff ff       	call   c0003409 <get_fat.isra.2>
c0003651:	83 f8 01             	cmp    eax,0x1
c0003654:	0f 84 ae 00 00 00    	je     c0003708 <create_chain+0x132>
c000365a:	83 f8 ff             	cmp    eax,0xffffffff
c000365d:	0f 84 a5 00 00 00    	je     c0003708 <create_chain+0x132>
c0003663:	85 c0                	test   eax,eax
c0003665:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003669:	74 10                	je     c000367b <create_chain+0xa5>
c000366b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000366e:	83 f8 01             	cmp    eax,0x1
c0003671:	76 0c                	jbe    c000367f <create_chain+0xa9>
c0003673:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003676:	0f 47 c8             	cmova  ecx,eax
c0003679:	eb 04                	jmp    c000367f <create_chain+0xa9>
c000367b:	85 f6                	test   esi,esi
c000367d:	75 3b                	jne    c00036ba <create_chain+0xe4>
c000367f:	89 ce                	mov    esi,ecx
c0003681:	46                   	inc    esi
c0003682:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003685:	77 0a                	ja     c0003691 <create_chain+0xbb>
c0003687:	83 f9 01             	cmp    ecx,0x1
c000368a:	76 9f                	jbe    c000362b <create_chain+0x55>
c000368c:	be 02 00 00 00       	mov    esi,0x2
c0003691:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003695:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003698:	89 f2                	mov    edx,esi
c000369a:	e8 6a fd ff ff       	call   c0003409 <get_fat.isra.2>
c000369f:	85 c0                	test   eax,eax
c00036a1:	74 17                	je     c00036ba <create_chain+0xe4>
c00036a3:	83 f8 01             	cmp    eax,0x1
c00036a6:	74 60                	je     c0003708 <create_chain+0x132>
c00036a8:	83 f8 ff             	cmp    eax,0xffffffff
c00036ab:	74 5b                	je     c0003708 <create_chain+0x132>
c00036ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036b1:	39 ce                	cmp    esi,ecx
c00036b3:	75 cc                	jne    c0003681 <create_chain+0xab>
c00036b5:	e9 71 ff ff ff       	jmp    c000362b <create_chain+0x55>
c00036ba:	83 c9 ff             	or     ecx,0xffffffff
c00036bd:	89 f2                	mov    edx,esi
c00036bf:	89 d8                	mov    eax,ebx
c00036c1:	e8 c0 f2 ff ff       	call   c0002986 <put_fat>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 0f                	jne    c00036d9 <create_chain+0x103>
c00036ca:	85 ff                	test   edi,edi
c00036cc:	74 0b                	je     c00036d9 <create_chain+0x103>
c00036ce:	89 f1                	mov    ecx,esi
c00036d0:	89 fa                	mov    edx,edi
c00036d2:	89 d8                	mov    eax,ebx
c00036d4:	e8 ad f2 ff ff       	call   c0002986 <put_fat>
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 21                	jne    c00036fe <create_chain+0x128>
c00036dd:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00036e0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00036e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00036e6:	8d 57 fe             	lea    edx,[edi-0x2]
c00036e9:	39 d0                	cmp    eax,edx
c00036eb:	77 04                	ja     c00036f1 <create_chain+0x11b>
c00036ed:	48                   	dec    eax
c00036ee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00036f1:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00036f4:	83 c8 01             	or     eax,0x1
c00036f7:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00036fa:	89 f0                	mov    eax,esi
c00036fc:	eb 0a                	jmp    c0003708 <create_chain+0x132>
c00036fe:	48                   	dec    eax
c00036ff:	0f 85 fc fe ff ff    	jne    c0003601 <create_chain+0x2b>
c0003705:	83 c8 ff             	or     eax,0xffffffff
c0003708:	83 c4 1c             	add    esp,0x1c
c000370b:	5b                   	pop    ebx
c000370c:	5e                   	pop    esi
c000370d:	5f                   	pop    edi
c000370e:	5d                   	pop    ebp
c000370f:	c3                   	ret    

c0003710 <remove_chain>:
c0003710:	55                   	push   ebp
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	89 d6                	mov    esi,edx
c0003715:	53                   	push   ebx
c0003716:	83 ec 0c             	sub    esp,0xc
c0003719:	83 fa 01             	cmp    edx,0x1
c000371c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000371e:	76 6a                	jbe    c000378a <remove_chain+0x7a>
c0003720:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003723:	76 65                	jbe    c000378a <remove_chain+0x7a>
c0003725:	85 c9                	test   ecx,ecx
c0003727:	89 c5                	mov    ebp,eax
c0003729:	89 ca                	mov    edx,ecx
c000372b:	74 0e                	je     c000373b <remove_chain+0x2b>
c000372d:	83 c9 ff             	or     ecx,0xffffffff
c0003730:	89 d8                	mov    eax,ebx
c0003732:	e8 4f f2 ff ff       	call   c0002986 <put_fat>
c0003737:	85 c0                	test   eax,eax
c0003739:	75 5b                	jne    c0003796 <remove_chain+0x86>
c000373b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000373e:	89 f2                	mov    edx,esi
c0003740:	e8 c4 fc ff ff       	call   c0003409 <get_fat.isra.2>
c0003745:	85 c0                	test   eax,eax
c0003747:	89 c7                	mov    edi,eax
c0003749:	75 04                	jne    c000374f <remove_chain+0x3f>
c000374b:	31 c0                	xor    eax,eax
c000374d:	eb 47                	jmp    c0003796 <remove_chain+0x86>
c000374f:	83 f8 01             	cmp    eax,0x1
c0003752:	74 36                	je     c000378a <remove_chain+0x7a>
c0003754:	83 f8 ff             	cmp    eax,0xffffffff
c0003757:	74 38                	je     c0003791 <remove_chain+0x81>
c0003759:	31 c9                	xor    ecx,ecx
c000375b:	89 f2                	mov    edx,esi
c000375d:	89 d8                	mov    eax,ebx
c000375f:	e8 22 f2 ff ff       	call   c0002986 <put_fat>
c0003764:	85 c0                	test   eax,eax
c0003766:	75 2e                	jne    c0003796 <remove_chain+0x86>
c0003768:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000376b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000376e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003771:	39 c8                	cmp    eax,ecx
c0003773:	73 0d                	jae    c0003782 <remove_chain+0x72>
c0003775:	40                   	inc    eax
c0003776:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003779:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000377c:	83 c8 01             	or     eax,0x1
c000377f:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003782:	39 fa                	cmp    edx,edi
c0003784:	89 fe                	mov    esi,edi
c0003786:	77 b3                	ja     c000373b <remove_chain+0x2b>
c0003788:	eb c1                	jmp    c000374b <remove_chain+0x3b>
c000378a:	b8 02 00 00 00       	mov    eax,0x2
c000378f:	eb 05                	jmp    c0003796 <remove_chain+0x86>
c0003791:	b8 01 00 00 00       	mov    eax,0x1
c0003796:	83 c4 0c             	add    esp,0xc
c0003799:	5b                   	pop    ebx
c000379a:	5e                   	pop    esi
c000379b:	5f                   	pop    edi
c000379c:	5d                   	pop    ebp
c000379d:	c3                   	ret    

c000379e <dir_next>:
c000379e:	55                   	push   ebp
c000379f:	57                   	push   edi
c00037a0:	56                   	push   esi
c00037a1:	53                   	push   ebx
c00037a2:	83 ec 1c             	sub    esp,0x1c
c00037a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037aa:	83 c7 20             	add    edi,0x20
c00037ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037b3:	76 07                	jbe    c00037bc <dir_next+0x1e>
c00037b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037bf:	b9 04 00 00 00       	mov    ecx,0x4
c00037c4:	85 f6                	test   esi,esi
c00037c6:	0f 84 cd 00 00 00    	je     c0003899 <dir_next+0xfb>
c00037cc:	89 c3                	mov    ebx,eax
c00037ce:	89 f8                	mov    eax,edi
c00037d0:	25 ff 01 00 00       	and    eax,0x1ff
c00037d5:	89 d1                	mov    ecx,edx
c00037d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037db:	0f 85 a8 00 00 00    	jne    c0003889 <dir_next+0xeb>
c00037e1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037e4:	46                   	inc    esi
c00037e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e8:	85 d2                	test   edx,edx
c00037ea:	75 22                	jne    c000380e <dir_next+0x70>
c00037ec:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037f0:	89 fa                	mov    edx,edi
c00037f2:	c1 ea 05             	shr    edx,0x5
c00037f5:	39 c2                	cmp    edx,eax
c00037f7:	0f 82 8c 00 00 00    	jb     c0003889 <dir_next+0xeb>
c00037fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003804:	b9 04 00 00 00       	mov    ecx,0x4
c0003809:	e9 8b 00 00 00       	jmp    c0003899 <dir_next+0xfb>
c000380e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003812:	89 fe                	mov    esi,edi
c0003814:	c1 ee 09             	shr    esi,0x9
c0003817:	48                   	dec    eax
c0003818:	85 f0                	test   eax,esi
c000381a:	75 6d                	jne    c0003889 <dir_next+0xeb>
c000381c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003820:	89 e8                	mov    eax,ebp
c0003822:	e8 e2 fb ff ff       	call   c0003409 <get_fat.isra.2>
c0003827:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000382b:	83 f8 01             	cmp    eax,0x1
c000382e:	89 c6                	mov    esi,eax
c0003830:	77 07                	ja     c0003839 <dir_next+0x9b>
c0003832:	b9 02 00 00 00       	mov    ecx,0x2
c0003837:	eb 60                	jmp    c0003899 <dir_next+0xfb>
c0003839:	83 f8 ff             	cmp    eax,0xffffffff
c000383c:	75 07                	jne    c0003845 <dir_next+0xa7>
c000383e:	b9 01 00 00 00       	mov    ecx,0x1
c0003843:	eb 54                	jmp    c0003899 <dir_next+0xfb>
c0003845:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003848:	77 30                	ja     c000387a <dir_next+0xdc>
c000384a:	85 c9                	test   ecx,ecx
c000384c:	74 af                	je     c00037fd <dir_next+0x5f>
c000384e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003851:	89 d8                	mov    eax,ebx
c0003853:	e8 7e fd ff ff       	call   c00035d6 <create_chain>
c0003858:	b9 07 00 00 00       	mov    ecx,0x7
c000385d:	85 c0                	test   eax,eax
c000385f:	89 c6                	mov    esi,eax
c0003861:	74 36                	je     c0003899 <dir_next+0xfb>
c0003863:	83 f8 01             	cmp    eax,0x1
c0003866:	74 ca                	je     c0003832 <dir_next+0x94>
c0003868:	83 f8 ff             	cmp    eax,0xffffffff
c000386b:	74 d1                	je     c000383e <dir_next+0xa0>
c000386d:	89 c2                	mov    edx,eax
c000386f:	89 e8                	mov    eax,ebp
c0003871:	e8 67 f2 ff ff       	call   c0002add <dir_clear>
c0003876:	85 c0                	test   eax,eax
c0003878:	75 c4                	jne    c000383e <dir_next+0xa0>
c000387a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000387d:	89 f2                	mov    edx,esi
c000387f:	89 e8                	mov    eax,ebp
c0003881:	e8 97 e9 ff ff       	call   c000221d <clst2sect>
c0003886:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003889:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000388c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003890:	31 c9                	xor    ecx,ecx
c0003892:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003896:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003899:	83 c4 1c             	add    esp,0x1c
c000389c:	89 c8                	mov    eax,ecx
c000389e:	5b                   	pop    ebx
c000389f:	5e                   	pop    esi
c00038a0:	5f                   	pop    edi
c00038a1:	5d                   	pop    ebp
c00038a2:	c3                   	ret    

c00038a3 <dir_alloc>:
c00038a3:	55                   	push   ebp
c00038a4:	89 c5                	mov    ebp,eax
c00038a6:	57                   	push   edi
c00038a7:	89 d7                	mov    edi,edx
c00038a9:	56                   	push   esi
c00038aa:	31 d2                	xor    edx,edx
c00038ac:	53                   	push   ebx
c00038ad:	83 ec 0c             	sub    esp,0xc
c00038b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00038b2:	e8 57 fc ff ff       	call   c000350e <dir_sdi>
c00038b7:	85 c0                	test   eax,eax
c00038b9:	75 3b                	jne    c00038f6 <dir_alloc+0x53>
c00038bb:	31 db                	xor    ebx,ebx
c00038bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038c0:	89 f0                	mov    eax,esi
c00038c2:	e8 65 ec ff ff       	call   c000252c <move_window>
c00038c7:	85 c0                	test   eax,eax
c00038c9:	75 2b                	jne    c00038f6 <dir_alloc+0x53>
c00038cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038ce:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038d1:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d7:	74 04                	je     c00038dd <dir_alloc+0x3a>
c00038d9:	85 d2                	test   edx,edx
c00038db:	75 07                	jne    c00038e4 <dir_alloc+0x41>
c00038dd:	43                   	inc    ebx
c00038de:	39 fb                	cmp    ebx,edi
c00038e0:	75 04                	jne    c00038e6 <dir_alloc+0x43>
c00038e2:	eb 1c                	jmp    c0003900 <dir_alloc+0x5d>
c00038e4:	31 db                	xor    ebx,ebx
c00038e6:	ba 01 00 00 00       	mov    edx,0x1
c00038eb:	89 e8                	mov    eax,ebp
c00038ed:	e8 ac fe ff ff       	call   c000379e <dir_next>
c00038f2:	85 c0                	test   eax,eax
c00038f4:	74 c7                	je     c00038bd <dir_alloc+0x1a>
c00038f6:	83 f8 04             	cmp    eax,0x4
c00038f9:	75 05                	jne    c0003900 <dir_alloc+0x5d>
c00038fb:	b8 07 00 00 00       	mov    eax,0x7
c0003900:	83 c4 0c             	add    esp,0xc
c0003903:	5b                   	pop    ebx
c0003904:	5e                   	pop    esi
c0003905:	5f                   	pop    edi
c0003906:	5d                   	pop    ebp
c0003907:	c3                   	ret    

c0003908 <dir_read>:
c0003908:	55                   	push   ebp
c0003909:	57                   	push   edi
c000390a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000390f:	56                   	push   esi
c0003910:	be 04 00 00 00       	mov    esi,0x4
c0003915:	53                   	push   ebx
c0003916:	89 c3                	mov    ebx,eax
c0003918:	83 ec 1c             	sub    esp,0x1c
c000391b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000391f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003921:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003926:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003929:	85 d2                	test   edx,edx
c000392b:	0f 84 e3 00 00 00    	je     c0003a14 <dir_read+0x10c>
c0003931:	89 e8                	mov    eax,ebp
c0003933:	e8 f4 eb ff ff       	call   c000252c <move_window>
c0003938:	85 c0                	test   eax,eax
c000393a:	89 c6                	mov    esi,eax
c000393c:	0f 85 dd 00 00 00    	jne    c0003a1f <dir_read+0x117>
c0003942:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003945:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003948:	88 04 24             	mov    BYTE PTR [esp],al
c000394b:	85 c0                	test   eax,eax
c000394d:	0f 84 c7 00 00 00    	je     c0003a1a <dir_read+0x112>
c0003953:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003956:	83 e1 3f             	and    ecx,0x3f
c0003959:	3d e5 00 00 00       	cmp    eax,0xe5
c000395e:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003961:	0f 84 93 00 00 00    	je     c00039fa <dir_read+0xf2>
c0003967:	83 f8 2e             	cmp    eax,0x2e
c000396a:	0f 84 8a 00 00 00    	je     c00039fa <dir_read+0xf2>
c0003970:	0f b6 c9             	movzx  ecx,cl
c0003973:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003977:	83 e1 df             	and    ecx,0xffffffdf
c000397a:	83 f9 08             	cmp    ecx,0x8
c000397d:	0f 94 c1             	sete   cl
c0003980:	0f b6 c9             	movzx  ecx,cl
c0003983:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003987:	75 71                	jne    c00039fa <dir_read+0xf2>
c0003989:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000398e:	75 4a                	jne    c00039da <dir_read+0xd2>
c0003990:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c0003994:	74 16                	je     c00039ac <dir_read+0xa4>
c0003996:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003999:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00039a0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00039a7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039aa:	eb 0e                	jmp    c00039ba <dir_read+0xb2>
c00039ac:	89 f9                	mov    ecx,edi
c00039ae:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b3:	0f b6 c9             	movzx  ecx,cl
c00039b6:	39 c1                	cmp    ecx,eax
c00039b8:	75 45                	jne    c00039ff <dir_read+0xf7>
c00039ba:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039be:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039c3:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039c6:	75 37                	jne    c00039ff <dir_read+0xf7>
c00039c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039cb:	e8 6a e8 ff ff       	call   c000223a <pick_lfn>
c00039d0:	85 c0                	test   eax,eax
c00039d2:	74 2b                	je     c00039ff <dir_read+0xf7>
c00039d4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039d7:	4f                   	dec    edi
c00039d8:	eb 25                	jmp    c00039ff <dir_read+0xf7>
c00039da:	89 f8                	mov    eax,edi
c00039dc:	84 c0                	test   al,al
c00039de:	75 11                	jne    c00039f1 <dir_read+0xe9>
c00039e0:	89 d0                	mov    eax,edx
c00039e2:	e8 30 ea ff ff       	call   c0002417 <sum_sfn>
c00039e7:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039eb:	75 04                	jne    c00039f1 <dir_read+0xe9>
c00039ed:	31 f6                	xor    esi,esi
c00039ef:	eb 35                	jmp    c0003a26 <dir_read+0x11e>
c00039f1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f8:	eb 2c                	jmp    c0003a26 <dir_read+0x11e>
c00039fa:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ff:	31 d2                	xor    edx,edx
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 96 fd ff ff       	call   c000379e <dir_next>
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	89 c6                	mov    esi,eax
c0003a0c:	0f 84 14 ff ff ff    	je     c0003926 <dir_read+0x1e>
c0003a12:	eb 0b                	jmp    c0003a1f <dir_read+0x117>
c0003a14:	85 f6                	test   esi,esi
c0003a16:	74 d5                	je     c00039ed <dir_read+0xe5>
c0003a18:	eb 05                	jmp    c0003a1f <dir_read+0x117>
c0003a1a:	be 04 00 00 00       	mov    esi,0x4
c0003a1f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a26:	83 c4 1c             	add    esp,0x1c
c0003a29:	89 f0                	mov    eax,esi
c0003a2b:	5b                   	pop    ebx
c0003a2c:	5e                   	pop    esi
c0003a2d:	5f                   	pop    edi
c0003a2e:	5d                   	pop    ebp
c0003a2f:	c3                   	ret    

c0003a30 <dir_remove>:
c0003a30:	57                   	push   edi
c0003a31:	56                   	push   esi
c0003a32:	53                   	push   ebx
c0003a33:	89 c3                	mov    ebx,eax
c0003a35:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a38:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a3d:	83 fa ff             	cmp    edx,0xffffffff
c0003a40:	74 09                	je     c0003a4b <dir_remove+0x1b>
c0003a42:	e8 c7 fa ff ff       	call   c000350e <dir_sdi>
c0003a47:	85 c0                	test   eax,eax
c0003a49:	75 34                	jne    c0003a7f <dir_remove+0x4f>
c0003a4b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d7 ea ff ff       	call   c000252c <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 1c                	jne    c0003a75 <dir_remove+0x45>
c0003a59:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a5c:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a5f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a63:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a66:	73 17                	jae    c0003a7f <dir_remove+0x4f>
c0003a68:	31 d2                	xor    edx,edx
c0003a6a:	89 d8                	mov    eax,ebx
c0003a6c:	e8 2d fd ff ff       	call   c000379e <dir_next>
c0003a71:	85 c0                	test   eax,eax
c0003a73:	74 d6                	je     c0003a4b <dir_remove+0x1b>
c0003a75:	83 f8 04             	cmp    eax,0x4
c0003a78:	75 05                	jne    c0003a7f <dir_remove+0x4f>
c0003a7a:	b8 02 00 00 00       	mov    eax,0x2
c0003a7f:	5b                   	pop    ebx
c0003a80:	5e                   	pop    esi
c0003a81:	5f                   	pop    edi
c0003a82:	c3                   	ret    

c0003a83 <dir_find>:
c0003a83:	55                   	push   ebp
c0003a84:	31 d2                	xor    edx,edx
c0003a86:	57                   	push   edi
c0003a87:	56                   	push   esi
c0003a88:	53                   	push   ebx
c0003a89:	89 c3                	mov    ebx,eax
c0003a8b:	83 ec 1c             	sub    esp,0x1c
c0003a8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 73 fa ff ff       	call   c000350e <dir_sdi>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	89 c6                	mov    esi,eax
c0003a9f:	0f 85 22 01 00 00    	jne    c0003bc7 <dir_find+0x144>
c0003aa5:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aac:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003ab1:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003ab6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003abd:	e8 6a ea ff ff       	call   c000252c <move_window>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	89 c6                	mov    esi,eax
c0003ac6:	0f 85 fb 00 00 00    	jne    c0003bc7 <dir_find+0x144>
c0003acc:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003acf:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003ad2:	85 d2                	test   edx,edx
c0003ad4:	89 d1                	mov    ecx,edx
c0003ad6:	0f 84 e6 00 00 00    	je     c0003bc2 <dir_find+0x13f>
c0003adc:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003adf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003ae3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ae7:	83 e0 3f             	and    eax,0x3f
c0003aea:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003af0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003af3:	0f 84 a8 00 00 00    	je     c0003ba1 <dir_find+0x11e>
c0003af9:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003afe:	0f b6 c0             	movzx  eax,al
c0003b01:	74 0b                	je     c0003b0e <dir_find+0x8b>
c0003b03:	83 f8 0f             	cmp    eax,0xf
c0003b06:	0f 85 95 00 00 00    	jne    c0003ba1 <dir_find+0x11e>
c0003b0c:	eb 05                	jmp    c0003b13 <dir_find+0x90>
c0003b0e:	83 f8 0f             	cmp    eax,0xf
c0003b11:	75 62                	jne    c0003b75 <dir_find+0xf2>
c0003b13:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b17:	0f 85 90 00 00 00    	jne    c0003bad <dir_find+0x12a>
c0003b1d:	f6 c1 40             	test   cl,0x40
c0003b20:	74 15                	je     c0003b37 <dir_find+0xb4>
c0003b22:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003b25:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003b2b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003b2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b32:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b35:	eb 11                	jmp    c0003b48 <dir_find+0xc5>
c0003b37:	89 e8                	mov    eax,ebp
c0003b39:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b3e:	0f b6 d0             	movzx  edx,al
c0003b41:	0f b6 c1             	movzx  eax,cl
c0003b44:	39 c2                	cmp    edx,eax
c0003b46:	75 65                	jne    c0003bad <dir_find+0x12a>
c0003b48:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b4c:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003b51:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003b54:	75 57                	jne    c0003bad <dir_find+0x12a>
c0003b56:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b5e:	89 fa                	mov    edx,edi
c0003b60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b63:	e8 2c f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b68:	85 c0                	test   eax,eax
c0003b6a:	74 41                	je     c0003bad <dir_find+0x12a>
c0003b6c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b70:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003b73:	eb 38                	jmp    c0003bad <dir_find+0x12a>
c0003b75:	89 e8                	mov    eax,ebp
c0003b77:	84 c0                	test   al,al
c0003b79:	75 0d                	jne    c0003b88 <dir_find+0x105>
c0003b7b:	89 f8                	mov    eax,edi
c0003b7d:	e8 95 e8 ff ff       	call   c0002417 <sum_sfn>
c0003b82:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003b86:	74 3f                	je     c0003bc7 <dir_find+0x144>
c0003b88:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b8c:	75 13                	jne    c0003ba1 <dir_find+0x11e>
c0003b8e:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b91:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b96:	89 f8                	mov    eax,edi
c0003b98:	e8 75 e4 ff ff       	call   c0002012 <mem_cmp>
c0003b9d:	85 c0                	test   eax,eax
c0003b9f:	74 26                	je     c0003bc7 <dir_find+0x144>
c0003ba1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003ba8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003bad:	31 d2                	xor    edx,edx
c0003baf:	89 d8                	mov    eax,ebx
c0003bb1:	e8 e8 fb ff ff       	call   c000379e <dir_next>
c0003bb6:	85 c0                	test   eax,eax
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	0f 84 f6 fe ff ff    	je     c0003ab6 <dir_find+0x33>
c0003bc0:	eb 05                	jmp    c0003bc7 <dir_find+0x144>
c0003bc2:	be 04 00 00 00       	mov    esi,0x4
c0003bc7:	83 c4 1c             	add    esp,0x1c
c0003bca:	89 f0                	mov    eax,esi
c0003bcc:	5b                   	pop    ebx
c0003bcd:	5e                   	pop    esi
c0003bce:	5f                   	pop    edi
c0003bcf:	5d                   	pop    ebp
c0003bd0:	c3                   	ret    

c0003bd1 <follow_path>:
c0003bd1:	56                   	push   esi
c0003bd2:	53                   	push   ebx
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 ec 14             	sub    esp,0x14
c0003bd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bdc:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003be2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003be5:	83 fa 2f             	cmp    edx,0x2f
c0003be8:	75 07                	jne    c0003bf1 <follow_path+0x20>
c0003bea:	40                   	inc    eax
c0003beb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003bef:	eb ed                	jmp    c0003bde <follow_path+0xd>
c0003bf1:	83 fa 5c             	cmp    edx,0x5c
c0003bf4:	74 f4                	je     c0003bea <follow_path+0x19>
c0003bf6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bfd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003c00:	77 3e                	ja     c0003c40 <follow_path+0x6f>
c0003c02:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003c06:	31 d2                	xor    edx,edx
c0003c08:	89 d8                	mov    eax,ebx
c0003c0a:	e8 ff f8 ff ff       	call   c000350e <dir_sdi>
c0003c0f:	eb 57                	jmp    c0003c68 <follow_path+0x97>
c0003c11:	89 d8                	mov    eax,ebx
c0003c13:	e8 6b fe ff ff       	call   c0003a83 <dir_find>
c0003c18:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c1b:	85 c0                	test   eax,eax
c0003c1d:	75 32                	jne    c0003c51 <follow_path+0x80>
c0003c1f:	80 e2 04             	and    dl,0x4
c0003c22:	75 44                	jne    c0003c68 <follow_path+0x97>
c0003c24:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c28:	74 39                	je     c0003c63 <follow_path+0x92>
c0003c2a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c2d:	25 ff 01 00 00       	and    eax,0x1ff
c0003c32:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c36:	8a 06                	mov    al,BYTE PTR [esi]
c0003c38:	e8 7b f7 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0003c3d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c40:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c44:	89 d8                	mov    eax,ebx
c0003c46:	e8 8e ef ff ff       	call   c0002bd9 <create_name>
c0003c4b:	85 c0                	test   eax,eax
c0003c4d:	74 c2                	je     c0003c11 <follow_path+0x40>
c0003c4f:	eb 17                	jmp    c0003c68 <follow_path+0x97>
c0003c51:	83 f8 04             	cmp    eax,0x4
c0003c54:	75 12                	jne    c0003c68 <follow_path+0x97>
c0003c56:	80 e2 04             	and    dl,0x4
c0003c59:	ba 05 00 00 00       	mov    edx,0x5
c0003c5e:	0f 44 c2             	cmove  eax,edx
c0003c61:	eb 05                	jmp    c0003c68 <follow_path+0x97>
c0003c63:	b8 05 00 00 00       	mov    eax,0x5
c0003c68:	83 c4 14             	add    esp,0x14
c0003c6b:	5b                   	pop    ebx
c0003c6c:	5e                   	pop    esi
c0003c6d:	c3                   	ret    

c0003c6e <dir_register>:
c0003c6e:	55                   	push   ebp
c0003c6f:	57                   	push   edi
c0003c70:	56                   	push   esi
c0003c71:	be 06 00 00 00       	mov    esi,0x6
c0003c76:	53                   	push   ebx
c0003c77:	83 ec 2c             	sub    esp,0x2c
c0003c7a:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c7d:	80 e2 a0             	and    dl,0xa0
c0003c80:	0f 85 66 01 00 00    	jne    c0003dec <dir_register+0x17e>
c0003c86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c8e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c90:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c97:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c9c:	74 06                	je     c0003ca4 <dir_register+0x36>
c0003c9e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003ca2:	eb ef                	jmp    c0003c93 <dir_register+0x25>
c0003ca4:	89 c3                	mov    ebx,eax
c0003ca6:	b9 0c 00 00 00       	mov    ecx,0xc
c0003cab:	8d 40 20             	lea    eax,[eax+0x20]
c0003cae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003cb2:	89 c2                	mov    edx,eax
c0003cb4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003cb8:	e8 36 e3 ff ff       	call   c0001ff3 <mem_cpy>
c0003cbd:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cc2:	74 48                	je     c0003d0c <dir_register+0x9e>
c0003cc4:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cc8:	bd 01 00 00 00       	mov    ebp,0x1
c0003ccd:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cd0:	55                   	push   ebp
c0003cd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cd5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cd9:	e8 77 e6 ff ff       	call   c0002355 <gen_numname>
c0003cde:	58                   	pop    eax
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	e8 9d fd ff ff       	call   c0003a83 <dir_find>
c0003ce6:	85 c0                	test   eax,eax
c0003ce8:	89 c6                	mov    esi,eax
c0003cea:	75 10                	jne    c0003cfc <dir_register+0x8e>
c0003cec:	45                   	inc    ebp
c0003ced:	83 fd 64             	cmp    ebp,0x64
c0003cf0:	75 db                	jne    c0003ccd <dir_register+0x5f>
c0003cf2:	be 07 00 00 00       	mov    esi,0x7
c0003cf7:	e9 f0 00 00 00       	jmp    c0003dec <dir_register+0x17e>
c0003cfc:	83 f8 04             	cmp    eax,0x4
c0003cff:	0f 85 e7 00 00 00    	jne    c0003dec <dir_register+0x17e>
c0003d05:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003d09:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003d0c:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d11:	bd 01 00 00 00       	mov    ebp,0x1
c0003d16:	74 13                	je     c0003d2b <dir_register+0xbd>
c0003d18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d1c:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d21:	31 d2                	xor    edx,edx
c0003d23:	83 c0 0c             	add    eax,0xc
c0003d26:	f7 f1                	div    ecx
c0003d28:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d2b:	89 ea                	mov    edx,ebp
c0003d2d:	89 d8                	mov    eax,ebx
c0003d2f:	e8 6f fb ff ff       	call   c00038a3 <dir_alloc>
c0003d34:	85 c0                	test   eax,eax
c0003d36:	89 c6                	mov    esi,eax
c0003d38:	0f 85 ae 00 00 00    	jne    c0003dec <dir_register+0x17e>
c0003d3e:	4d                   	dec    ebp
c0003d3f:	74 6b                	je     c0003dac <dir_register+0x13e>
c0003d41:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d44:	89 e8                	mov    eax,ebp
c0003d46:	c1 e0 05             	shl    eax,0x5
c0003d49:	29 c2                	sub    edx,eax
c0003d4b:	89 d8                	mov    eax,ebx
c0003d4d:	e8 bc f7 ff ff       	call   c000350e <dir_sdi>
c0003d52:	85 c0                	test   eax,eax
c0003d54:	89 c6                	mov    esi,eax
c0003d56:	0f 85 90 00 00 00    	jne    c0003dec <dir_register+0x17e>
c0003d5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d60:	e8 b2 e6 ff ff       	call   c0002417 <sum_sfn>
c0003d65:	0f b6 c0             	movzx  eax,al
c0003d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d6c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d6f:	89 f8                	mov    eax,edi
c0003d71:	e8 b6 e7 ff ff       	call   c000252c <move_window>
c0003d76:	85 c0                	test   eax,eax
c0003d78:	89 c6                	mov    esi,eax
c0003d7a:	75 70                	jne    c0003dec <dir_register+0x17e>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	89 e8                	mov    eax,ebp
c0003d81:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d84:	0f b6 c8             	movzx  ecx,al
c0003d87:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003d8e:	e8 27 e5 ff ff       	call   c00022ba <put_lfn>
c0003d93:	31 d2                	xor    edx,edx
c0003d95:	89 d8                	mov    eax,ebx
c0003d97:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d9b:	e8 fe f9 ff ff       	call   c000379e <dir_next>
c0003da0:	83 c4 10             	add    esp,0x10
c0003da3:	85 c0                	test   eax,eax
c0003da5:	89 c6                	mov    esi,eax
c0003da7:	75 43                	jne    c0003dec <dir_register+0x17e>
c0003da9:	4d                   	dec    ebp
c0003daa:	75 c0                	jne    c0003d6c <dir_register+0xfe>
c0003dac:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003daf:	89 f8                	mov    eax,edi
c0003db1:	e8 76 e7 ff ff       	call   c000252c <move_window>
c0003db6:	85 c0                	test   eax,eax
c0003db8:	89 c6                	mov    esi,eax
c0003dba:	75 30                	jne    c0003dec <dir_register+0x17e>
c0003dbc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003dbf:	b9 20 00 00 00       	mov    ecx,0x20
c0003dc4:	31 d2                	xor    edx,edx
c0003dc6:	e8 3d e2 ff ff       	call   c0002008 <mem_set>
c0003dcb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dd3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd7:	e8 17 e2 ff ff       	call   c0001ff3 <mem_cpy>
c0003ddc:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ddf:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003de2:	83 e0 18             	and    eax,0x18
c0003de5:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003de8:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dec:	83 c4 2c             	add    esp,0x2c
c0003def:	89 f0                	mov    eax,esi
c0003df1:	5b                   	pop    ebx
c0003df2:	5e                   	pop    esi
c0003df3:	5f                   	pop    edi
c0003df4:	5d                   	pop    ebp
c0003df5:	c3                   	ret    

c0003df6 <f_mount>:
c0003df6:	53                   	push   ebx
c0003df7:	83 ec 18             	sub    esp,0x18
c0003dfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003dfe:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003e02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003e06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003e0a:	e8 28 e6 ff ff       	call   c0002437 <get_ldnumber>
c0003e0f:	89 c2                	mov    edx,eax
c0003e11:	b8 0b 00 00 00       	mov    eax,0xb
c0003e16:	85 d2                	test   edx,edx
c0003e18:	78 39                	js     c0003e53 <f_mount+0x5d>
c0003e1a:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003e21:	85 c0                	test   eax,eax
c0003e23:	74 03                	je     c0003e28 <f_mount+0x32>
c0003e25:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e2c:	85 c0                	test   eax,eax
c0003e2e:	74 03                	je     c0003e33 <f_mount+0x3d>
c0003e30:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e37:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003e3e:	31 c0                	xor    eax,eax
c0003e40:	84 db                	test   bl,bl
c0003e42:	74 0f                	je     c0003e53 <f_mount+0x5d>
c0003e44:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e48:	31 c9                	xor    ecx,ecx
c0003e4a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e4e:	e8 36 e8 ff ff       	call   c0002689 <mount_volume>
c0003e53:	83 c4 18             	add    esp,0x18
c0003e56:	5b                   	pop    ebx
c0003e57:	c3                   	ret    

c0003e58 <f_open>:
c0003e58:	55                   	push   ebp
c0003e59:	b8 09 00 00 00       	mov    eax,0x9
c0003e5e:	57                   	push   edi
c0003e5f:	56                   	push   esi
c0003e60:	53                   	push   ebx
c0003e61:	83 ec 5c             	sub    esp,0x5c
c0003e64:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e68:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e6c:	85 db                	test   ebx,ebx
c0003e6e:	0f 84 9f 02 00 00    	je     c0004113 <f_open+0x2bb>
c0003e74:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e78:	89 fd                	mov    ebp,edi
c0003e7a:	83 e5 3f             	and    ebp,0x3f
c0003e7d:	89 e8                	mov    eax,ebp
c0003e7f:	89 ee                	mov    esi,ebp
c0003e81:	0f b6 c8             	movzx  ecx,al
c0003e84:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e88:	e8 fc e7 ff ff       	call   c0002689 <mount_volume>
c0003e8d:	85 c0                	test   eax,eax
c0003e8f:	0f 85 78 02 00 00    	jne    c000410d <f_open+0x2b5>
c0003e95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e99:	83 ec 0c             	sub    esp,0xc
c0003e9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ea0:	68 00 02 00 00       	push   0x200
c0003ea5:	e8 62 1f 00 00       	call   c0005e0c <ff_memalloc>
c0003eaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003eae:	83 c4 10             	add    esp,0x10
c0003eb1:	b8 11 00 00 00       	mov    eax,0x11
c0003eb6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ebb:	0f 84 52 02 00 00    	je     c0004113 <f_open+0x2bb>
c0003ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ec9:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ecd:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ed0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ed4:	e8 f8 fc ff ff       	call   c0003bd1 <follow_path>
c0003ed9:	85 c0                	test   eax,eax
c0003edb:	75 0d                	jne    c0003eea <f_open+0x92>
c0003edd:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ee2:	ba 06 00 00 00       	mov    edx,0x6
c0003ee7:	0f 45 c2             	cmovne eax,edx
c0003eea:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ef0:	0f 84 d5 00 00 00    	je     c0003fcb <f_open+0x173>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	74 21                	je     c0003f1b <f_open+0xc3>
c0003efa:	83 f8 04             	cmp    eax,0x4
c0003efd:	0f 85 ef 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f03:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f07:	e8 62 fd ff ff       	call   c0003c6e <dir_register>
c0003f0c:	85 c0                	test   eax,eax
c0003f0e:	0f 85 de 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f14:	83 cd 08             	or     ebp,0x8
c0003f17:	89 ee                	mov    esi,ebp
c0003f19:	eb 2c                	jmp    c0003f47 <f_open+0xef>
c0003f1b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f1f:	b8 07 00 00 00       	mov    eax,0x7
c0003f24:	80 e2 11             	and    dl,0x11
c0003f27:	0f 85 c5 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f2d:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f33:	b8 08 00 00 00       	mov    eax,0x8
c0003f38:	0f 85 b4 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003f3e:	83 e7 08             	and    edi,0x8
c0003f41:	0f 84 b1 00 00 00    	je     c0003ff8 <f_open+0x1a0>
c0003f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f4b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f4f:	8a 00                	mov    al,BYTE PTR [eax]
c0003f51:	89 ea                	mov    edx,ebp
c0003f53:	e8 60 f4 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0003f58:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f5d:	89 c7                	mov    edi,eax
c0003f5f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f62:	e8 89 e0 ff ff       	call   c0001ff0 <st_dword>
c0003f67:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6b:	31 c9                	xor    ecx,ecx
c0003f6d:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f75:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f79:	e8 63 f4 ff ff       	call   c00033e1 <st_clust.isra.1>
c0003f7e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f82:	31 d2                	xor    edx,edx
c0003f84:	83 c0 1c             	add    eax,0x1c
c0003f87:	e8 64 e0 ff ff       	call   c0001ff0 <st_dword>
c0003f8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f90:	85 ff                	test   edi,edi
c0003f92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f96:	74 60                	je     c0003ff8 <f_open+0x1a0>
c0003f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f9c:	31 c9                	xor    ecx,ecx
c0003f9e:	89 fa                	mov    edx,edi
c0003fa0:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003fa3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003fa7:	e8 64 f7 ff ff       	call   c0003710 <remove_chain>
c0003fac:	85 c0                	test   eax,eax
c0003fae:	0f 85 3e 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003fb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fb8:	89 ea                	mov    edx,ebp
c0003fba:	4f                   	dec    edi
c0003fbb:	e8 6c e5 ff ff       	call   c000252c <move_window>
c0003fc0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fc4:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fc7:	85 c0                	test   eax,eax
c0003fc9:	eb 27                	jmp    c0003ff2 <f_open+0x19a>
c0003fcb:	85 c0                	test   eax,eax
c0003fcd:	0f 85 1f 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003fd3:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fd7:	b8 04 00 00 00       	mov    eax,0x4
c0003fdc:	f6 c2 10             	test   dl,0x10
c0003fdf:	0f 85 0d 01 00 00    	jne    c00040f2 <f_open+0x29a>
c0003fe5:	83 e7 02             	and    edi,0x2
c0003fe8:	74 0e                	je     c0003ff8 <f_open+0x1a0>
c0003fea:	b8 07 00 00 00       	mov    eax,0x7
c0003fef:	80 e2 01             	and    dl,0x1
c0003ff2:	0f 85 fa 00 00 00    	jne    c00040f2 <f_open+0x29a>
c0003ff8:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ffe:	74 03                	je     c0004003 <f_open+0x1ab>
c0004000:	83 ce 40             	or     esi,0x40
c0004003:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0004007:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000400b:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c000400e:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0004011:	89 fa                	mov    edx,edi
c0004013:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004016:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004019:	e8 9a f3 ff ff       	call   c00033b8 <ld_clust.isra.0>
c000401e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004021:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004024:	e8 ab df ff ff       	call   c0001fd4 <ld_dword>
c0004029:	8d 7b 28             	lea    edi,[ebx+0x28]
c000402c:	31 d2                	xor    edx,edx
c000402e:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004030:	b9 00 02 00 00       	mov    ecx,0x200
c0004035:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004038:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c000403c:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0004040:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004047:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000404e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004052:	89 f0                	mov    eax,esi
c0004054:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004057:	89 f8                	mov    eax,edi
c0004059:	e8 aa df ff ff       	call   c0002008 <mem_set>
c000405e:	83 e6 20             	and    esi,0x20
c0004061:	75 07                	jne    c000406a <f_open+0x212>
c0004063:	31 c0                	xor    eax,eax
c0004065:	e9 88 00 00 00       	jmp    c00040f2 <f_open+0x29a>
c000406a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000406d:	85 f6                	test   esi,esi
c000406f:	74 f2                	je     c0004063 <f_open+0x20b>
c0004071:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004078:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000407b:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000407f:	31 c0                	xor    eax,eax
c0004081:	c1 e5 09             	shl    ebp,0x9
c0004084:	85 c0                	test   eax,eax
c0004086:	75 23                	jne    c00040ab <f_open+0x253>
c0004088:	39 ee                	cmp    esi,ebp
c000408a:	76 1f                	jbe    c00040ab <f_open+0x253>
c000408c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000408e:	e8 76 f3 ff ff       	call   c0003409 <get_fat.isra.2>
c0004093:	89 c2                	mov    edx,eax
c0004095:	b8 02 00 00 00       	mov    eax,0x2
c000409a:	83 fa 01             	cmp    edx,0x1
c000409d:	76 08                	jbe    c00040a7 <f_open+0x24f>
c000409f:	31 c0                	xor    eax,eax
c00040a1:	83 fa ff             	cmp    edx,0xffffffff
c00040a4:	0f 94 c0             	sete   al
c00040a7:	29 ee                	sub    esi,ebp
c00040a9:	eb d9                	jmp    c0004084 <f_open+0x22c>
c00040ab:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00040ae:	85 c0                	test   eax,eax
c00040b0:	75 40                	jne    c00040f2 <f_open+0x29a>
c00040b2:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c00040b8:	74 a9                	je     c0004063 <f_open+0x20b>
c00040ba:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00040be:	89 e8                	mov    eax,ebp
c00040c0:	e8 58 e1 ff ff       	call   c000221d <clst2sect>
c00040c5:	89 c2                	mov    edx,eax
c00040c7:	b8 02 00 00 00       	mov    eax,0x2
c00040cc:	85 d2                	test   edx,edx
c00040ce:	74 22                	je     c00040f2 <f_open+0x29a>
c00040d0:	c1 ee 09             	shr    esi,0x9
c00040d3:	8d 04 16             	lea    eax,[esi+edx*1]
c00040d6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040d9:	6a 01                	push   0x1
c00040db:	50                   	push   eax
c00040dc:	57                   	push   edi
c00040dd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00040e1:	50                   	push   eax
c00040e2:	e8 95 de ff ff       	call   c0001f7c <disk_read>
c00040e7:	83 c4 10             	add    esp,0x10
c00040ea:	85 c0                	test   eax,eax
c00040ec:	0f 95 c0             	setne  al
c00040ef:	0f b6 c0             	movzx  eax,al
c00040f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040f6:	83 ec 0c             	sub    esp,0xc
c00040f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040fd:	e8 22 1d 00 00       	call   c0005e24 <ff_memfree>
c0004102:	83 c4 10             	add    esp,0x10
c0004105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004109:	85 c0                	test   eax,eax
c000410b:	74 06                	je     c0004113 <f_open+0x2bb>
c000410d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004113:	83 c4 5c             	add    esp,0x5c
c0004116:	5b                   	pop    ebx
c0004117:	5e                   	pop    esi
c0004118:	5f                   	pop    edi
c0004119:	5d                   	pop    ebp
c000411a:	c3                   	ret    

c000411b <f_read>:
c000411b:	55                   	push   ebp
c000411c:	57                   	push   edi
c000411d:	56                   	push   esi
c000411e:	53                   	push   ebx
c000411f:	83 ec 2c             	sub    esp,0x2c
c0004122:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004126:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000412a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004138:	89 d8                	mov    eax,ebx
c000413a:	e8 44 e3 ff ff       	call   c0002483 <validate>
c000413f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004143:	85 c0                	test   eax,eax
c0004145:	0f 85 a5 01 00 00    	jne    c00042f0 <f_read+0x1d5>
c000414b:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c000414f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004153:	85 c0                	test   eax,eax
c0004155:	0f 85 95 01 00 00    	jne    c00042f0 <f_read+0x1d5>
c000415b:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c000415f:	0f 84 83 01 00 00    	je     c00042e8 <f_read+0x1cd>
c0004165:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004168:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000416b:	39 f8                	cmp    eax,edi
c000416d:	0f 46 f8             	cmovbe edi,eax
c0004170:	85 ff                	test   edi,edi
c0004172:	0f 84 78 01 00 00    	je     c00042f0 <f_read+0x1d5>
c0004178:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000417b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004180:	0f 85 2b 01 00 00    	jne    c00042b1 <f_read+0x196>
c0004186:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000418a:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000418e:	89 c2                	mov    edx,eax
c0004190:	c1 ea 09             	shr    edx,0x9
c0004193:	4d                   	dec    ebp
c0004194:	21 d5                	and    ebp,edx
c0004196:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000419a:	75 42                	jne    c00041de <f_read+0xc3>
c000419c:	85 c0                	test   eax,eax
c000419e:	75 05                	jne    c00041a5 <f_read+0x8a>
c00041a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00041a3:	eb 0a                	jmp    c00041af <f_read+0x94>
c00041a5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00041aa:	e8 5a f2 ff ff       	call   c0003409 <get_fat.isra.2>
c00041af:	83 f8 01             	cmp    eax,0x1
c00041b2:	77 11                	ja     c00041c5 <f_read+0xaa>
c00041b4:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00041b8:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c00041c0:	e9 2b 01 00 00       	jmp    c00042f0 <f_read+0x1d5>
c00041c5:	83 f8 ff             	cmp    eax,0xffffffff
c00041c8:	75 11                	jne    c00041db <f_read+0xc0>
c00041ca:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00041ce:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00041d6:	e9 15 01 00 00       	jmp    c00042f0 <f_read+0x1d5>
c00041db:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00041de:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041e2:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041e9:	89 c8                	mov    eax,ecx
c00041eb:	e8 2d e0 ff ff       	call   c000221d <clst2sect>
c00041f0:	85 c0                	test   eax,eax
c00041f2:	74 c0                	je     c00041b4 <f_read+0x99>
c00041f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041f8:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c00041fe:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004205:	76 58                	jbe    c000425f <f_read+0x144>
c0004207:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000420b:	89 fe                	mov    esi,edi
c000420d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004211:	c1 ee 09             	shr    esi,0x9
c0004214:	01 f2                	add    edx,esi
c0004216:	39 c2                	cmp    edx,eax
c0004218:	76 06                	jbe    c0004220 <f_read+0x105>
c000421a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000421e:	89 c6                	mov    esi,eax
c0004220:	56                   	push   esi
c0004221:	55                   	push   ebp
c0004222:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004226:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000422a:	50                   	push   eax
c000422b:	e8 4c dd ff ff       	call   c0001f7c <disk_read>
c0004230:	83 c4 10             	add    esp,0x10
c0004233:	85 c0                	test   eax,eax
c0004235:	75 93                	jne    c00041ca <f_read+0xaf>
c0004237:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000423b:	74 1d                	je     c000425a <f_read+0x13f>
c000423d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004240:	29 e8                	sub    eax,ebp
c0004242:	39 f0                	cmp    eax,esi
c0004244:	73 14                	jae    c000425a <f_read+0x13f>
c0004246:	c1 e0 09             	shl    eax,0x9
c0004249:	b9 00 02 00 00       	mov    ecx,0x200
c000424e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004252:	8d 53 28             	lea    edx,[ebx+0x28]
c0004255:	e8 99 dd ff ff       	call   c0001ff3 <mem_cpy>
c000425a:	c1 e6 09             	shl    esi,0x9
c000425d:	eb 75                	jmp    c00042d4 <f_read+0x1b9>
c000425f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004262:	39 e8                	cmp    eax,ebp
c0004264:	74 48                	je     c00042ae <f_read+0x193>
c0004266:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000426a:	8d 73 28             	lea    esi,[ebx+0x28]
c000426d:	74 22                	je     c0004291 <f_read+0x176>
c000426f:	6a 01                	push   0x1
c0004271:	50                   	push   eax
c0004272:	56                   	push   esi
c0004273:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004277:	50                   	push   eax
c0004278:	e8 15 dd ff ff       	call   c0001f92 <disk_write>
c000427d:	83 c4 10             	add    esp,0x10
c0004280:	85 c0                	test   eax,eax
c0004282:	0f 85 42 ff ff ff    	jne    c00041ca <f_read+0xaf>
c0004288:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000428b:	83 e0 7f             	and    eax,0x7f
c000428e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004291:	6a 01                	push   0x1
c0004293:	55                   	push   ebp
c0004294:	56                   	push   esi
c0004295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004299:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000429d:	50                   	push   eax
c000429e:	e8 d9 dc ff ff       	call   c0001f7c <disk_read>
c00042a3:	83 c4 10             	add    esp,0x10
c00042a6:	85 c0                	test   eax,eax
c00042a8:	0f 85 1c ff ff ff    	jne    c00041ca <f_read+0xaf>
c00042ae:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00042b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042b4:	be 00 02 00 00       	mov    esi,0x200
c00042b9:	25 ff 01 00 00       	and    eax,0x1ff
c00042be:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042c2:	29 c6                	sub    esi,eax
c00042c4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042c8:	39 f7                	cmp    edi,esi
c00042ca:	0f 46 f7             	cmovbe esi,edi
c00042cd:	89 f1                	mov    ecx,esi
c00042cf:	e8 1f dd ff ff       	call   c0001ff3 <mem_cpy>
c00042d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00042d8:	29 f7                	sub    edi,esi
c00042da:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00042de:	01 30                	add    DWORD PTR [eax],esi
c00042e0:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c00042e3:	e9 88 fe ff ff       	jmp    c0004170 <f_read+0x55>
c00042e8:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c00042f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00042f4:	83 c4 2c             	add    esp,0x2c
c00042f7:	5b                   	pop    ebx
c00042f8:	5e                   	pop    esi
c00042f9:	5f                   	pop    edi
c00042fa:	5d                   	pop    ebp
c00042fb:	c3                   	ret    

c00042fc <f_write>:
c00042fc:	55                   	push   ebp
c00042fd:	57                   	push   edi
c00042fe:	56                   	push   esi
c00042ff:	53                   	push   ebx
c0004300:	83 ec 2c             	sub    esp,0x2c
c0004303:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004307:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000430b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004315:	89 d8                	mov    eax,ebx
c0004317:	e8 67 e1 ff ff       	call   c0002483 <validate>
c000431c:	85 c0                	test   eax,eax
c000431e:	89 c7                	mov    edi,eax
c0004320:	0f 85 13 02 00 00    	jne    c0004539 <f_write+0x23d>
c0004326:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c000432a:	85 ff                	test   edi,edi
c000432c:	0f 85 07 02 00 00    	jne    c0004539 <f_write+0x23d>
c0004332:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004336:	0f 84 f8 01 00 00    	je     c0004534 <f_write+0x238>
c000433c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000433f:	89 c1                	mov    ecx,eax
c0004341:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0004345:	0f 83 ed 00 00 00    	jae    c0004438 <f_write+0x13c>
c000434b:	f7 d0                	not    eax
c000434d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004351:	e9 e2 00 00 00       	jmp    c0004438 <f_write+0x13c>
c0004356:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004359:	a9 ff 01 00 00       	test   eax,0x1ff
c000435e:	0f 85 9b 01 00 00    	jne    c00044ff <f_write+0x203>
c0004364:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004368:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c000436c:	89 c2                	mov    edx,eax
c000436e:	c1 ea 09             	shr    edx,0x9
c0004371:	4d                   	dec    ebp
c0004372:	21 d5                	and    ebp,edx
c0004374:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0004378:	0f 84 c7 00 00 00    	je     c0004445 <f_write+0x149>
c000437e:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004382:	0f 85 23 01 00 00    	jne    c00044ab <f_write+0x1af>
c0004388:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000438c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000438f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004393:	89 c8                	mov    eax,ecx
c0004395:	e8 83 de ff ff       	call   c000221d <clst2sect>
c000439a:	85 c0                	test   eax,eax
c000439c:	0f 84 d3 00 00 00    	je     c0004475 <f_write+0x179>
c00043a2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00043a6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043ae:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c00043b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b5:	0f 86 1c 01 00 00    	jbe    c00044d7 <f_write+0x1db>
c00043bb:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043c3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043c7:	c1 ee 09             	shr    esi,0x9
c00043ca:	01 f2                	add    edx,esi
c00043cc:	39 c2                	cmp    edx,eax
c00043ce:	76 06                	jbe    c00043d6 <f_write+0xda>
c00043d0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043d4:	89 c6                	mov    esi,eax
c00043d6:	56                   	push   esi
c00043d7:	55                   	push   ebp
c00043d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043dc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e0:	50                   	push   eax
c00043e1:	e8 ac db ff ff       	call   c0001f92 <disk_write>
c00043e6:	83 c4 10             	add    esp,0x10
c00043e9:	85 c0                	test   eax,eax
c00043eb:	0f 85 97 00 00 00    	jne    c0004488 <f_write+0x18c>
c00043f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043f4:	29 ea                	sub    edx,ebp
c00043f6:	39 f2                	cmp    edx,esi
c00043f8:	73 1d                	jae    c0004417 <f_write+0x11b>
c00043fa:	c1 e2 09             	shl    edx,0x9
c00043fd:	b9 00 02 00 00       	mov    ecx,0x200
c0004402:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004406:	8d 43 28             	lea    eax,[ebx+0x28]
c0004409:	e8 e5 db ff ff       	call   c0001ff3 <mem_cpy>
c000440e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004411:	83 e0 7f             	and    eax,0x7f
c0004414:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004417:	c1 e6 09             	shl    esi,0x9
c000441a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000441e:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004422:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004426:	01 30                	add    DWORD PTR [eax],esi
c0004428:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000442b:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c000442e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004431:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004435:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004438:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000443d:	0f 85 13 ff ff ff    	jne    c0004356 <f_write+0x5a>
c0004443:	eb 1d                	jmp    c0004462 <f_write+0x166>
c0004445:	85 c0                	test   eax,eax
c0004447:	75 0b                	jne    c0004454 <f_write+0x158>
c0004449:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000444c:	31 d2                	xor    edx,edx
c000444e:	85 c0                	test   eax,eax
c0004450:	75 1e                	jne    c0004470 <f_write+0x174>
c0004452:	eb 03                	jmp    c0004457 <f_write+0x15b>
c0004454:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004457:	89 d8                	mov    eax,ebx
c0004459:	e8 78 f1 ff ff       	call   c00035d6 <create_chain>
c000445e:	85 c0                	test   eax,eax
c0004460:	75 0e                	jne    c0004470 <f_write+0x174>
c0004462:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004465:	83 c8 40             	or     eax,0x40
c0004468:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000446b:	e9 c9 00 00 00       	jmp    c0004539 <f_write+0x23d>
c0004470:	83 f8 01             	cmp    eax,0x1
c0004473:	75 0e                	jne    c0004483 <f_write+0x187>
c0004475:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004479:	bf 02 00 00 00       	mov    edi,0x2
c000447e:	e9 b6 00 00 00       	jmp    c0004539 <f_write+0x23d>
c0004483:	83 f8 ff             	cmp    eax,0xffffffff
c0004486:	75 0e                	jne    c0004496 <f_write+0x19a>
c0004488:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000448c:	bf 01 00 00 00       	mov    edi,0x1
c0004491:	e9 a3 00 00 00       	jmp    c0004539 <f_write+0x23d>
c0004496:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000449a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000449d:	0f 85 db fe ff ff    	jne    c000437e <f_write+0x82>
c00044a3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044a6:	e9 d3 fe ff ff       	jmp    c000437e <f_write+0x82>
c00044ab:	6a 01                	push   0x1
c00044ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044b0:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b3:	50                   	push   eax
c00044b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044bc:	50                   	push   eax
c00044bd:	e8 d0 da ff ff       	call   c0001f92 <disk_write>
c00044c2:	83 c4 10             	add    esp,0x10
c00044c5:	85 c0                	test   eax,eax
c00044c7:	75 bf                	jne    c0004488 <f_write+0x18c>
c00044c9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044cc:	83 e0 7f             	and    eax,0x7f
c00044cf:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044d2:	e9 b1 fe ff ff       	jmp    c0004388 <f_write+0x8c>
c00044d7:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00044da:	74 20                	je     c00044fc <f_write+0x200>
c00044dc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044df:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044e2:	76 18                	jbe    c00044fc <f_write+0x200>
c00044e4:	6a 01                	push   0x1
c00044e6:	55                   	push   ebp
c00044e7:	8d 43 28             	lea    eax,[ebx+0x28]
c00044ea:	50                   	push   eax
c00044eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044ef:	50                   	push   eax
c00044f0:	e8 87 da ff ff       	call   c0001f7c <disk_read>
c00044f5:	83 c4 10             	add    esp,0x10
c00044f8:	85 c0                	test   eax,eax
c00044fa:	75 8c                	jne    c0004488 <f_write+0x18c>
c00044fc:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c00044ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004502:	be 00 02 00 00       	mov    esi,0x200
c0004507:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000450b:	25 ff 01 00 00       	and    eax,0x1ff
c0004510:	29 c6                	sub    esi,eax
c0004512:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c0004516:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000451a:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c000451f:	89 f1                	mov    ecx,esi
c0004521:	e8 cd da ff ff       	call   c0001ff3 <mem_cpy>
c0004526:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004529:	83 c8 80             	or     eax,0xffffff80
c000452c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000452f:	e9 e6 fe ff ff       	jmp    c000441a <f_write+0x11e>
c0004534:	bf 07 00 00 00       	mov    edi,0x7
c0004539:	83 c4 2c             	add    esp,0x2c
c000453c:	89 f8                	mov    eax,edi
c000453e:	5b                   	pop    ebx
c000453f:	5e                   	pop    esi
c0004540:	5f                   	pop    edi
c0004541:	5d                   	pop    ebp
c0004542:	c3                   	ret    

c0004543 <f_sync>:
c0004543:	56                   	push   esi
c0004544:	53                   	push   ebx
c0004545:	83 ec 14             	sub    esp,0x14
c0004548:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000454c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004550:	89 d8                	mov    eax,ebx
c0004552:	e8 2c df ff ff       	call   c0002483 <validate>
c0004557:	85 c0                	test   eax,eax
c0004559:	0f 85 a3 00 00 00    	jne    c0004602 <f_sync+0xbf>
c000455f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004562:	f6 c2 40             	test   dl,0x40
c0004565:	0f 84 97 00 00 00    	je     c0004602 <f_sync+0xbf>
c000456b:	80 e2 80             	and    dl,0x80
c000456e:	74 2e                	je     c000459e <f_sync+0x5b>
c0004570:	6a 01                	push   0x1
c0004572:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004575:	8d 43 28             	lea    eax,[ebx+0x28]
c0004578:	50                   	push   eax
c0004579:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000457d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004581:	50                   	push   eax
c0004582:	e8 0b da ff ff       	call   c0001f92 <disk_write>
c0004587:	83 c4 10             	add    esp,0x10
c000458a:	89 c2                	mov    edx,eax
c000458c:	b8 01 00 00 00       	mov    eax,0x1
c0004591:	85 d2                	test   edx,edx
c0004593:	75 6d                	jne    c0004602 <f_sync+0xbf>
c0004595:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004598:	83 e0 7f             	and    eax,0x7f
c000459b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000459e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045a5:	e8 82 df ff ff       	call   c000252c <move_window>
c00045aa:	85 c0                	test   eax,eax
c00045ac:	75 54                	jne    c0004602 <f_sync+0xbf>
c00045ae:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045b1:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045b4:	89 f2                	mov    edx,esi
c00045b6:	83 c8 20             	or     eax,0x20
c00045b9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045bc:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045c1:	e8 1b ee ff ff       	call   c00033e1 <st_clust.isra.1>
c00045c6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045c9:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045cc:	e8 1f da ff ff       	call   c0001ff0 <st_dword>
c00045d1:	8d 46 16             	lea    eax,[esi+0x16]
c00045d4:	ba 00 00 21 50       	mov    edx,0x50210000
c00045d9:	e8 12 da ff ff       	call   c0001ff0 <st_dword>
c00045de:	8d 46 12             	lea    eax,[esi+0x12]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	e8 04 da ff ff       	call   c0001fec <st_word>
c00045e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045ec:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f4:	e8 68 e9 ff ff       	call   c0002f61 <sync_fs>
c00045f9:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00045fc:	83 e2 bf             	and    edx,0xffffffbf
c00045ff:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004602:	83 c4 14             	add    esp,0x14
c0004605:	5b                   	pop    ebx
c0004606:	5e                   	pop    esi
c0004607:	c3                   	ret    

c0004608 <f_close>:
c0004608:	53                   	push   ebx
c0004609:	83 ec 24             	sub    esp,0x24
c000460c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004610:	53                   	push   ebx
c0004611:	e8 2d ff ff ff       	call   c0004543 <f_sync>
c0004616:	83 c4 10             	add    esp,0x10
c0004619:	85 c0                	test   eax,eax
c000461b:	75 15                	jne    c0004632 <f_close+0x2a>
c000461d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004621:	89 d8                	mov    eax,ebx
c0004623:	e8 5b de ff ff       	call   c0002483 <validate>
c0004628:	85 c0                	test   eax,eax
c000462a:	75 06                	jne    c0004632 <f_close+0x2a>
c000462c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004632:	83 c4 18             	add    esp,0x18
c0004635:	5b                   	pop    ebx
c0004636:	c3                   	ret    

c0004637 <f_lseek>:
c0004637:	55                   	push   ebp
c0004638:	57                   	push   edi
c0004639:	56                   	push   esi
c000463a:	53                   	push   ebx
c000463b:	83 ec 2c             	sub    esp,0x2c
c000463e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004642:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004646:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000464a:	89 d8                	mov    eax,ebx
c000464c:	e8 32 de ff ff       	call   c0002483 <validate>
c0004651:	85 c0                	test   eax,eax
c0004653:	89 c5                	mov    ebp,eax
c0004655:	0f 85 82 01 00 00    	jne    c00047dd <f_lseek+0x1a6>
c000465b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000465f:	85 ed                	test   ebp,ebp
c0004661:	0f 85 76 01 00 00    	jne    c00047dd <f_lseek+0x1a6>
c0004667:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000466a:	39 f0                	cmp    eax,esi
c000466c:	73 07                	jae    c0004675 <f_lseek+0x3e>
c000466e:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004672:	0f 44 f0             	cmove  esi,eax
c0004675:	85 f6                	test   esi,esi
c0004677:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000467a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004681:	75 07                	jne    c000468a <f_lseek+0x53>
c0004683:	31 f6                	xor    esi,esi
c0004685:	e9 e2 00 00 00       	jmp    c000476c <f_lseek+0x135>
c000468a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000468e:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c0004692:	c1 e7 09             	shl    edi,0x9
c0004695:	85 c9                	test   ecx,ecx
c0004697:	74 28                	je     c00046c1 <f_lseek+0x8a>
c0004699:	31 d2                	xor    edx,edx
c000469b:	49                   	dec    ecx
c000469c:	8d 46 ff             	lea    eax,[esi-0x1]
c000469f:	f7 f7                	div    edi
c00046a1:	31 d2                	xor    edx,edx
c00046a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a7:	89 c8                	mov    eax,ecx
c00046a9:	f7 f7                	div    edi
c00046ab:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046af:	72 10                	jb     c00046c1 <f_lseek+0x8a>
c00046b1:	89 f8                	mov    eax,edi
c00046b3:	f7 d8                	neg    eax
c00046b5:	21 c1                	and    ecx,eax
c00046b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046ba:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046bd:	29 ce                	sub    esi,ecx
c00046bf:	eb 3c                	jmp    c00046fd <f_lseek+0xc6>
c00046c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046c4:	85 c0                	test   eax,eax
c00046c6:	75 32                	jne    c00046fa <f_lseek+0xc3>
c00046c8:	31 d2                	xor    edx,edx
c00046ca:	89 d8                	mov    eax,ebx
c00046cc:	e8 05 ef ff ff       	call   c00035d6 <create_chain>
c00046d1:	83 f8 01             	cmp    eax,0x1
c00046d4:	75 0e                	jne    c00046e4 <f_lseek+0xad>
c00046d6:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046da:	bd 02 00 00 00       	mov    ebp,0x2
c00046df:	e9 f9 00 00 00       	jmp    c00047dd <f_lseek+0x1a6>
c00046e4:	83 f8 ff             	cmp    eax,0xffffffff
c00046e7:	75 0e                	jne    c00046f7 <f_lseek+0xc0>
c00046e9:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046ed:	bd 01 00 00 00       	mov    ebp,0x1
c00046f2:	e9 e6 00 00 00       	jmp    c00047dd <f_lseek+0x1a6>
c00046f7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00046fa:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00046fd:	85 c0                	test   eax,eax
c00046ff:	74 82                	je     c0004683 <f_lseek+0x4c>
c0004701:	39 fe                	cmp    esi,edi
c0004703:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004706:	76 3d                	jbe    c0004745 <f_lseek+0x10e>
c0004708:	01 fa                	add    edx,edi
c000470a:	29 fe                	sub    esi,edi
c000470c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004710:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004713:	89 c2                	mov    edx,eax
c0004715:	74 0d                	je     c0004724 <f_lseek+0xed>
c0004717:	89 d8                	mov    eax,ebx
c0004719:	e8 b8 ee ff ff       	call   c00035d6 <create_chain>
c000471e:	85 c0                	test   eax,eax
c0004720:	75 09                	jne    c000472b <f_lseek+0xf4>
c0004722:	eb 1f                	jmp    c0004743 <f_lseek+0x10c>
c0004724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004726:	e8 de ec ff ff       	call   c0003409 <get_fat.isra.2>
c000472b:	83 f8 ff             	cmp    eax,0xffffffff
c000472e:	74 b9                	je     c00046e9 <f_lseek+0xb2>
c0004730:	83 f8 01             	cmp    eax,0x1
c0004733:	76 a1                	jbe    c00046d6 <f_lseek+0x9f>
c0004735:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004739:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000473c:	76 98                	jbe    c00046d6 <f_lseek+0x9f>
c000473e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004741:	eb be                	jmp    c0004701 <f_lseek+0xca>
c0004743:	31 f6                	xor    esi,esi
c0004745:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004748:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000474e:	0f 84 2f ff ff ff    	je     c0004683 <f_lseek+0x4c>
c0004754:	89 c2                	mov    edx,eax
c0004756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000475a:	e8 be da ff ff       	call   c000221d <clst2sect>
c000475f:	85 c0                	test   eax,eax
c0004761:	0f 84 6f ff ff ff    	je     c00046d6 <f_lseek+0x9f>
c0004767:	c1 ee 09             	shr    esi,0x9
c000476a:	01 c6                	add    esi,eax
c000476c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000476f:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004772:	76 0c                	jbe    c0004780 <f_lseek+0x149>
c0004774:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004777:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000477a:	83 ca 40             	or     edx,0x40
c000477d:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004780:	a9 ff 01 00 00       	test   eax,0x1ff
c0004785:	74 56                	je     c00047dd <f_lseek+0x1a6>
c0004787:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000478a:	39 f0                	cmp    eax,esi
c000478c:	74 4f                	je     c00047dd <f_lseek+0x1a6>
c000478e:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004792:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004795:	74 26                	je     c00047bd <f_lseek+0x186>
c0004797:	6a 01                	push   0x1
c0004799:	50                   	push   eax
c000479a:	57                   	push   edi
c000479b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000479f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047a3:	50                   	push   eax
c00047a4:	e8 e9 d7 ff ff       	call   c0001f92 <disk_write>
c00047a9:	83 c4 10             	add    esp,0x10
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 35 ff ff ff    	jne    c00046e9 <f_lseek+0xb2>
c00047b4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047b7:	83 e0 7f             	and    eax,0x7f
c00047ba:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047bd:	6a 01                	push   0x1
c00047bf:	56                   	push   esi
c00047c0:	57                   	push   edi
c00047c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047c5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047c9:	50                   	push   eax
c00047ca:	e8 ad d7 ff ff       	call   c0001f7c <disk_read>
c00047cf:	83 c4 10             	add    esp,0x10
c00047d2:	85 c0                	test   eax,eax
c00047d4:	0f 85 0f ff ff ff    	jne    c00046e9 <f_lseek+0xb2>
c00047da:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047dd:	83 c4 2c             	add    esp,0x2c
c00047e0:	89 e8                	mov    eax,ebp
c00047e2:	5b                   	pop    ebx
c00047e3:	5e                   	pop    esi
c00047e4:	5f                   	pop    edi
c00047e5:	5d                   	pop    ebp
c00047e6:	c3                   	ret    

c00047e7 <f_opendir>:
c00047e7:	56                   	push   esi
c00047e8:	b8 09 00 00 00       	mov    eax,0x9
c00047ed:	53                   	push   ebx
c00047ee:	83 ec 24             	sub    esp,0x24
c00047f1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047f5:	85 db                	test   ebx,ebx
c00047f7:	0f 84 af 00 00 00    	je     c00048ac <f_opendir+0xc5>
c00047fd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004801:	31 c9                	xor    ecx,ecx
c0004803:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004807:	e8 7d de ff ff       	call   c0002689 <mount_volume>
c000480c:	85 c0                	test   eax,eax
c000480e:	0f 85 92 00 00 00    	jne    c00048a6 <f_opendir+0xbf>
c0004814:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004818:	83 ec 0c             	sub    esp,0xc
c000481b:	89 03                	mov    DWORD PTR [ebx],eax
c000481d:	68 00 02 00 00       	push   0x200
c0004822:	e8 e5 15 00 00       	call   c0005e0c <ff_memalloc>
c0004827:	83 c4 10             	add    esp,0x10
c000482a:	89 c6                	mov    esi,eax
c000482c:	b8 11 00 00 00       	mov    eax,0x11
c0004831:	85 f6                	test   esi,esi
c0004833:	74 77                	je     c00048ac <f_opendir+0xc5>
c0004835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004839:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000483d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004840:	89 d8                	mov    eax,ebx
c0004842:	e8 8a f3 ff ff       	call   c0003bd1 <follow_path>
c0004847:	85 c0                	test   eax,eax
c0004849:	75 37                	jne    c0004882 <f_opendir+0x9b>
c000484b:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000484f:	75 1c                	jne    c000486d <f_opendir+0x86>
c0004851:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004855:	b8 05 00 00 00       	mov    eax,0x5
c000485a:	74 26                	je     c0004882 <f_opendir+0x9b>
c000485c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004860:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004863:	8a 00                	mov    al,BYTE PTR [eax]
c0004865:	e8 4e eb ff ff       	call   c00033b8 <ld_clust.isra.0>
c000486a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000486d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004871:	31 d2                	xor    edx,edx
c0004873:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004877:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000487b:	89 d8                	mov    eax,ebx
c000487d:	e8 8c ec ff ff       	call   c000350e <dir_sdi>
c0004882:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004886:	83 ec 0c             	sub    esp,0xc
c0004889:	56                   	push   esi
c000488a:	e8 95 15 00 00       	call   c0005e24 <ff_memfree>
c000488f:	83 c4 10             	add    esp,0x10
c0004892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004896:	83 f8 04             	cmp    eax,0x4
c0004899:	74 06                	je     c00048a1 <f_opendir+0xba>
c000489b:	85 c0                	test   eax,eax
c000489d:	74 0d                	je     c00048ac <f_opendir+0xc5>
c000489f:	eb 05                	jmp    c00048a6 <f_opendir+0xbf>
c00048a1:	b8 05 00 00 00       	mov    eax,0x5
c00048a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048ac:	83 c4 24             	add    esp,0x24
c00048af:	5b                   	pop    ebx
c00048b0:	5e                   	pop    esi
c00048b1:	c3                   	ret    

c00048b2 <f_closedir>:
c00048b2:	53                   	push   ebx
c00048b3:	83 ec 18             	sub    esp,0x18
c00048b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048ba:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048be:	89 d8                	mov    eax,ebx
c00048c0:	e8 be db ff ff       	call   c0002483 <validate>
c00048c5:	85 c0                	test   eax,eax
c00048c7:	75 06                	jne    c00048cf <f_closedir+0x1d>
c00048c9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048cf:	83 c4 18             	add    esp,0x18
c00048d2:	5b                   	pop    ebx
c00048d3:	c3                   	ret    

c00048d4 <f_readdir>:
c00048d4:	57                   	push   edi
c00048d5:	56                   	push   esi
c00048d6:	53                   	push   ebx
c00048d7:	83 ec 20             	sub    esp,0x20
c00048da:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048e2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048e6:	89 d8                	mov    eax,ebx
c00048e8:	e8 96 db ff ff       	call   c0002483 <validate>
c00048ed:	85 c0                	test   eax,eax
c00048ef:	75 6e                	jne    c000495f <f_readdir+0x8b>
c00048f1:	85 ff                	test   edi,edi
c00048f3:	75 0b                	jne    c0004900 <f_readdir+0x2c>
c00048f5:	31 d2                	xor    edx,edx
c00048f7:	89 d8                	mov    eax,ebx
c00048f9:	e8 10 ec ff ff       	call   c000350e <dir_sdi>
c00048fe:	eb 5f                	jmp    c000495f <f_readdir+0x8b>
c0004900:	83 ec 0c             	sub    esp,0xc
c0004903:	68 00 02 00 00       	push   0x200
c0004908:	e8 ff 14 00 00       	call   c0005e0c <ff_memalloc>
c000490d:	83 c4 10             	add    esp,0x10
c0004910:	89 c6                	mov    esi,eax
c0004912:	b8 11 00 00 00       	mov    eax,0x11
c0004917:	85 f6                	test   esi,esi
c0004919:	74 44                	je     c000495f <f_readdir+0x8b>
c000491b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000491f:	31 d2                	xor    edx,edx
c0004921:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004924:	89 d8                	mov    eax,ebx
c0004926:	e8 dd ef ff ff       	call   c0003908 <dir_read>
c000492b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004930:	75 19                	jne    c000494b <f_readdir+0x77>
c0004932:	89 fa                	mov    edx,edi
c0004934:	89 d8                	mov    eax,ebx
c0004936:	e8 7c e8 ff ff       	call   c00031b7 <get_fileinfo>
c000493b:	31 d2                	xor    edx,edx
c000493d:	89 d8                	mov    eax,ebx
c000493f:	e8 5a ee ff ff       	call   c000379e <dir_next>
c0004944:	83 f8 04             	cmp    eax,0x4
c0004947:	75 02                	jne    c000494b <f_readdir+0x77>
c0004949:	31 c0                	xor    eax,eax
c000494b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000494f:	83 ec 0c             	sub    esp,0xc
c0004952:	56                   	push   esi
c0004953:	e8 cc 14 00 00       	call   c0005e24 <ff_memfree>
c0004958:	83 c4 10             	add    esp,0x10
c000495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000495f:	83 c4 20             	add    esp,0x20
c0004962:	5b                   	pop    ebx
c0004963:	5e                   	pop    esi
c0004964:	5f                   	pop    edi
c0004965:	c3                   	ret    

c0004966 <f_stat>:
c0004966:	57                   	push   edi
c0004967:	31 c9                	xor    ecx,ecx
c0004969:	56                   	push   esi
c000496a:	53                   	push   ebx
c000496b:	83 ec 30             	sub    esp,0x30
c000496e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004972:	89 e2                	mov    edx,esp
c0004974:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004978:	e8 0c dd ff ff       	call   c0002689 <mount_volume>
c000497d:	85 c0                	test   eax,eax
c000497f:	89 c3                	mov    ebx,eax
c0004981:	75 59                	jne    c00049dc <f_stat+0x76>
c0004983:	83 ec 0c             	sub    esp,0xc
c0004986:	bb 11 00 00 00       	mov    ebx,0x11
c000498b:	68 00 02 00 00       	push   0x200
c0004990:	e8 77 14 00 00       	call   c0005e0c <ff_memalloc>
c0004995:	83 c4 10             	add    esp,0x10
c0004998:	85 c0                	test   eax,eax
c000499a:	89 c6                	mov    esi,eax
c000499c:	74 3e                	je     c00049dc <f_stat+0x76>
c000499e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049a1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049a5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049a8:	89 e0                	mov    eax,esp
c00049aa:	e8 22 f2 ff ff       	call   c0003bd1 <follow_path>
c00049af:	85 c0                	test   eax,eax
c00049b1:	89 c3                	mov    ebx,eax
c00049b3:	75 1b                	jne    c00049d0 <f_stat+0x6a>
c00049b5:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049ba:	75 0f                	jne    c00049cb <f_stat+0x65>
c00049bc:	85 ff                	test   edi,edi
c00049be:	74 10                	je     c00049d0 <f_stat+0x6a>
c00049c0:	89 fa                	mov    edx,edi
c00049c2:	89 e0                	mov    eax,esp
c00049c4:	e8 ee e7 ff ff       	call   c00031b7 <get_fileinfo>
c00049c9:	eb 05                	jmp    c00049d0 <f_stat+0x6a>
c00049cb:	bb 06 00 00 00       	mov    ebx,0x6
c00049d0:	83 ec 0c             	sub    esp,0xc
c00049d3:	56                   	push   esi
c00049d4:	e8 4b 14 00 00       	call   c0005e24 <ff_memfree>
c00049d9:	83 c4 10             	add    esp,0x10
c00049dc:	83 c4 30             	add    esp,0x30
c00049df:	89 d8                	mov    eax,ebx
c00049e1:	5b                   	pop    ebx
c00049e2:	5e                   	pop    esi
c00049e3:	5f                   	pop    edi
c00049e4:	c3                   	ret    

c00049e5 <f_getfree>:
c00049e5:	55                   	push   ebp
c00049e6:	31 c9                	xor    ecx,ecx
c00049e8:	57                   	push   edi
c00049e9:	56                   	push   esi
c00049ea:	53                   	push   ebx
c00049eb:	83 ec 2c             	sub    esp,0x2c
c00049ee:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049f2:	8d 44 24 40          	lea    eax,[esp+0x40]
c00049f6:	e8 8e dc ff ff       	call   c0002689 <mount_volume>
c00049fb:	85 c0                	test   eax,eax
c00049fd:	89 c6                	mov    esi,eax
c00049ff:	0f 85 df 00 00 00    	jne    c0004ae4 <f_getfree+0xff>
c0004a05:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004a09:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a0d:	89 18                	mov    DWORD PTR [eax],ebx
c0004a0f:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004a12:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a15:	8d 57 fe             	lea    edx,[edi-0x2]
c0004a18:	39 d0                	cmp    eax,edx
c0004a1a:	77 0b                	ja     c0004a27 <f_getfree+0x42>
c0004a1c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a20:	89 01                	mov    DWORD PTR [ecx],eax
c0004a22:	e9 bd 00 00 00       	jmp    c0004ae4 <f_getfree+0xff>
c0004a27:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c0004a2a:	75 29                	jne    c0004a55 <f_getfree+0x70>
c0004a2c:	bf 02 00 00 00       	mov    edi,0x2
c0004a31:	31 ed                	xor    ebp,ebp
c0004a33:	89 fa                	mov    edx,edi
c0004a35:	89 d8                	mov    eax,ebx
c0004a37:	e8 cd e9 ff ff       	call   c0003409 <get_fat.isra.2>
c0004a3c:	83 f8 ff             	cmp    eax,0xffffffff
c0004a3f:	74 7d                	je     c0004abe <f_getfree+0xd9>
c0004a41:	83 f8 01             	cmp    eax,0x1
c0004a44:	74 7f                	je     c0004ac5 <f_getfree+0xe0>
c0004a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4a:	83 d5 00             	adc    ebp,0x0
c0004a4d:	47                   	inc    edi
c0004a4e:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c0004a51:	77 e0                	ja     c0004a33 <f_getfree+0x4e>
c0004a53:	eb 79                	jmp    c0004ace <f_getfree+0xe9>
c0004a55:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0004a58:	31 ed                	xor    ebp,ebp
c0004a5a:	31 db                	xor    ebx,ebx
c0004a5c:	85 db                	test   ebx,ebx
c0004a5e:	75 18                	jne    c0004a78 <f_getfree+0x93>
c0004a60:	8d 42 01             	lea    eax,[edx+0x1]
c0004a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a6b:	e8 bc da ff ff       	call   c000252c <move_window>
c0004a70:	85 c0                	test   eax,eax
c0004a72:	75 58                	jne    c0004acc <f_getfree+0xe7>
c0004a74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a80:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a83:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c0004a87:	75 13                	jne    c0004a9c <f_getfree+0xb7>
c0004a89:	e8 39 d5 ff ff       	call   c0001fc7 <ld_word>
c0004a8e:	0f b7 c0             	movzx  eax,ax
c0004a91:	83 f8 01             	cmp    eax,0x1
c0004a94:	83 d5 00             	adc    ebp,0x0
c0004a97:	83 c3 02             	add    ebx,0x2
c0004a9a:	eb 13                	jmp    c0004aaf <f_getfree+0xca>
c0004a9c:	e8 33 d5 ff ff       	call   c0001fd4 <ld_dword>
c0004aa1:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004aa6:	83 f8 01             	cmp    eax,0x1
c0004aa9:	83 d5 00             	adc    ebp,0x0
c0004aac:	83 c3 04             	add    ebx,0x4
c0004aaf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004ab5:	4f                   	dec    edi
c0004ab6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004aba:	75 a0                	jne    c0004a5c <f_getfree+0x77>
c0004abc:	eb 10                	jmp    c0004ace <f_getfree+0xe9>
c0004abe:	be 01 00 00 00       	mov    esi,0x1
c0004ac3:	eb 09                	jmp    c0004ace <f_getfree+0xe9>
c0004ac5:	be 02 00 00 00       	mov    esi,0x2
c0004aca:	eb 02                	jmp    c0004ace <f_getfree+0xe9>
c0004acc:	89 c6                	mov    esi,eax
c0004ace:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004ad2:	89 28                	mov    DWORD PTR [eax],ebp
c0004ad4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ad8:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004adb:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ade:	83 ca 01             	or     edx,0x1
c0004ae1:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004ae4:	83 c4 2c             	add    esp,0x2c
c0004ae7:	89 f0                	mov    eax,esi
c0004ae9:	5b                   	pop    ebx
c0004aea:	5e                   	pop    esi
c0004aeb:	5f                   	pop    edi
c0004aec:	5d                   	pop    ebp
c0004aed:	c3                   	ret    

c0004aee <f_truncate>:
c0004aee:	56                   	push   esi
c0004aef:	53                   	push   ebx
c0004af0:	83 ec 14             	sub    esp,0x14
c0004af3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004af7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004afb:	89 d8                	mov    eax,ebx
c0004afd:	e8 81 d9 ff ff       	call   c0002483 <validate>
c0004b02:	85 c0                	test   eax,eax
c0004b04:	89 c6                	mov    esi,eax
c0004b06:	0f 85 c4 00 00 00    	jne    c0004bd0 <f_truncate+0xe2>
c0004b0c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b10:	85 f6                	test   esi,esi
c0004b12:	0f 85 b8 00 00 00    	jne    c0004bd0 <f_truncate+0xe2>
c0004b18:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b1c:	0f 84 a9 00 00 00    	je     c0004bcb <f_truncate+0xdd>
c0004b22:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b25:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b28:	0f 83 a2 00 00 00    	jae    c0004bd0 <f_truncate+0xe2>
c0004b2e:	85 c0                	test   eax,eax
c0004b30:	75 15                	jne    c0004b47 <f_truncate+0x59>
c0004b32:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b35:	31 c9                	xor    ecx,ecx
c0004b37:	89 d8                	mov    eax,ebx
c0004b39:	e8 d2 eb ff ff       	call   c0003710 <remove_chain>
c0004b3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b45:	eb 35                	jmp    c0004b7c <f_truncate+0x8e>
c0004b47:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b4c:	e8 b8 e8 ff ff       	call   c0003409 <get_fat.isra.2>
c0004b51:	89 c2                	mov    edx,eax
c0004b53:	b8 01 00 00 00       	mov    eax,0x1
c0004b58:	83 fa ff             	cmp    edx,0xffffffff
c0004b5b:	74 1f                	je     c0004b7c <f_truncate+0x8e>
c0004b5d:	83 fa 01             	cmp    edx,0x1
c0004b60:	b8 02 00 00 00       	mov    eax,0x2
c0004b65:	74 15                	je     c0004b7c <f_truncate+0x8e>
c0004b67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b6b:	31 c0                	xor    eax,eax
c0004b6d:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b70:	76 0a                	jbe    c0004b7c <f_truncate+0x8e>
c0004b72:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b75:	89 d8                	mov    eax,ebx
c0004b77:	e8 94 eb ff ff       	call   c0003710 <remove_chain>
c0004b7c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b7f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b82:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b85:	83 ca 40             	or     edx,0x40
c0004b88:	85 c0                	test   eax,eax
c0004b8a:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b8d:	75 35                	jne    c0004bc4 <f_truncate+0xd6>
c0004b8f:	80 e2 80             	and    dl,0x80
c0004b92:	74 3c                	je     c0004bd0 <f_truncate+0xe2>
c0004b94:	6a 01                	push   0x1
c0004b96:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004b99:	8d 43 28             	lea    eax,[ebx+0x28]
c0004b9c:	50                   	push   eax
c0004b9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ba1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004ba5:	50                   	push   eax
c0004ba6:	e8 e7 d3 ff ff       	call   c0001f92 <disk_write>
c0004bab:	83 c4 10             	add    esp,0x10
c0004bae:	85 c0                	test   eax,eax
c0004bb0:	75 0d                	jne    c0004bbf <f_truncate+0xd1>
c0004bb2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bb5:	31 f6                	xor    esi,esi
c0004bb7:	83 e0 7f             	and    eax,0x7f
c0004bba:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bbd:	eb 11                	jmp    c0004bd0 <f_truncate+0xe2>
c0004bbf:	b8 01 00 00 00       	mov    eax,0x1
c0004bc4:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bc7:	89 c6                	mov    esi,eax
c0004bc9:	eb 05                	jmp    c0004bd0 <f_truncate+0xe2>
c0004bcb:	be 07 00 00 00       	mov    esi,0x7
c0004bd0:	83 c4 14             	add    esp,0x14
c0004bd3:	89 f0                	mov    eax,esi
c0004bd5:	5b                   	pop    ebx
c0004bd6:	5e                   	pop    esi
c0004bd7:	c3                   	ret    

c0004bd8 <f_unlink>:
c0004bd8:	55                   	push   ebp
c0004bd9:	b9 02 00 00 00       	mov    ecx,0x2
c0004bde:	57                   	push   edi
c0004bdf:	56                   	push   esi
c0004be0:	53                   	push   ebx
c0004be1:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004be7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004beb:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bf2:	e8 92 da ff ff       	call   c0002689 <mount_volume>
c0004bf7:	85 c0                	test   eax,eax
c0004bf9:	0f 85 ee 00 00 00    	jne    c0004ced <f_unlink+0x115>
c0004bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c03:	83 ec 0c             	sub    esp,0xc
c0004c06:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c0a:	68 00 02 00 00       	push   0x200
c0004c0f:	e8 f8 11 00 00       	call   c0005e0c <ff_memalloc>
c0004c14:	83 c4 10             	add    esp,0x10
c0004c17:	89 c3                	mov    ebx,eax
c0004c19:	b8 11 00 00 00       	mov    eax,0x11
c0004c1e:	85 db                	test   ebx,ebx
c0004c20:	0f 84 c7 00 00 00    	je     c0004ced <f_unlink+0x115>
c0004c26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c2a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c31:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c34:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c38:	e8 94 ef ff ff       	call   c0003bd1 <follow_path>
c0004c3d:	85 c0                	test   eax,eax
c0004c3f:	0f 85 94 00 00 00    	jne    c0004cd9 <f_unlink+0x101>
c0004c45:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c4a:	b8 06 00 00 00       	mov    eax,0x6
c0004c4f:	0f 85 84 00 00 00    	jne    c0004cd9 <f_unlink+0x101>
c0004c55:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c5a:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c60:	74 07                	je     c0004c69 <f_unlink+0x91>
c0004c62:	b8 07 00 00 00       	mov    eax,0x7
c0004c67:	eb 70                	jmp    c0004cd9 <f_unlink+0x101>
c0004c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c6d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c71:	8a 07                	mov    al,BYTE PTR [edi]
c0004c73:	e8 40 e7 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0004c78:	83 e5 10             	and    ebp,0x10
c0004c7b:	89 c6                	mov    esi,eax
c0004c7d:	75 20                	jne    c0004c9f <f_unlink+0xc7>
c0004c7f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c83:	e8 a8 ed ff ff       	call   c0003a30 <dir_remove>
c0004c88:	85 c0                	test   eax,eax
c0004c8a:	75 40                	jne    c0004ccc <f_unlink+0xf4>
c0004c8c:	85 f6                	test   esi,esi
c0004c8e:	74 3c                	je     c0004ccc <f_unlink+0xf4>
c0004c90:	31 c9                	xor    ecx,ecx
c0004c92:	89 f2                	mov    edx,esi
c0004c94:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c98:	e8 73 ea ff ff       	call   c0003710 <remove_chain>
c0004c9d:	eb 2d                	jmp    c0004ccc <f_unlink+0xf4>
c0004c9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	31 d2                	xor    edx,edx
c0004ca9:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004cad:	e8 5c e8 ff ff       	call   c000350e <dir_sdi>
c0004cb2:	85 c0                	test   eax,eax
c0004cb4:	75 23                	jne    c0004cd9 <f_unlink+0x101>
c0004cb6:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cba:	31 d2                	xor    edx,edx
c0004cbc:	e8 47 ec ff ff       	call   c0003908 <dir_read>
c0004cc1:	85 c0                	test   eax,eax
c0004cc3:	74 9d                	je     c0004c62 <f_unlink+0x8a>
c0004cc5:	83 f8 04             	cmp    eax,0x4
c0004cc8:	75 0f                	jne    c0004cd9 <f_unlink+0x101>
c0004cca:	eb b3                	jmp    c0004c7f <f_unlink+0xa7>
c0004ccc:	85 c0                	test   eax,eax
c0004cce:	75 09                	jne    c0004cd9 <f_unlink+0x101>
c0004cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cd4:	e8 88 e2 ff ff       	call   c0002f61 <sync_fs>
c0004cd9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cdd:	83 ec 0c             	sub    esp,0xc
c0004ce0:	53                   	push   ebx
c0004ce1:	e8 3e 11 00 00       	call   c0005e24 <ff_memfree>
c0004ce6:	83 c4 10             	add    esp,0x10
c0004ce9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ced:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004cf3:	5b                   	pop    ebx
c0004cf4:	5e                   	pop    esi
c0004cf5:	5f                   	pop    edi
c0004cf6:	5d                   	pop    ebp
c0004cf7:	c3                   	ret    

c0004cf8 <f_mkdir>:
c0004cf8:	57                   	push   edi
c0004cf9:	b9 02 00 00 00       	mov    ecx,0x2
c0004cfe:	56                   	push   esi
c0004cff:	53                   	push   ebx
c0004d00:	83 ec 50             	sub    esp,0x50
c0004d03:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d07:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d0b:	e8 79 d9 ff ff       	call   c0002689 <mount_volume>
c0004d10:	85 c0                	test   eax,eax
c0004d12:	89 c3                	mov    ebx,eax
c0004d14:	0f 85 70 01 00 00    	jne    c0004e8a <f_mkdir+0x192>
c0004d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1e:	83 ec 0c             	sub    esp,0xc
c0004d21:	bb 11 00 00 00       	mov    ebx,0x11
c0004d26:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2a:	68 00 02 00 00       	push   0x200
c0004d2f:	e8 d8 10 00 00       	call   c0005e0c <ff_memalloc>
c0004d34:	83 c4 10             	add    esp,0x10
c0004d37:	85 c0                	test   eax,eax
c0004d39:	89 c7                	mov    edi,eax
c0004d3b:	0f 84 49 01 00 00    	je     c0004e8a <f_mkdir+0x192>
c0004d41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d45:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d49:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d4c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d50:	e8 7c ee ff ff       	call   c0003bd1 <follow_path>
c0004d55:	85 c0                	test   eax,eax
c0004d57:	89 c3                	mov    ebx,eax
c0004d59:	74 3e                	je     c0004d99 <f_mkdir+0xa1>
c0004d5b:	83 f8 04             	cmp    eax,0x4
c0004d5e:	75 3e                	jne    c0004d9e <f_mkdir+0xa6>
c0004d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d64:	31 d2                	xor    edx,edx
c0004d66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d6e:	e8 63 e8 ff ff       	call   c00035d6 <create_chain>
c0004d73:	85 c0                	test   eax,eax
c0004d75:	89 c6                	mov    esi,eax
c0004d77:	74 0c                	je     c0004d85 <f_mkdir+0x8d>
c0004d79:	83 f8 01             	cmp    eax,0x1
c0004d7c:	bb 02 00 00 00       	mov    ebx,0x2
c0004d81:	74 07                	je     c0004d8a <f_mkdir+0x92>
c0004d83:	eb 2a                	jmp    c0004daf <f_mkdir+0xb7>
c0004d85:	bb 07 00 00 00       	mov    ebx,0x7
c0004d8a:	31 c9                	xor    ecx,ecx
c0004d8c:	89 f2                	mov    edx,esi
c0004d8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d92:	e8 79 e9 ff ff       	call   c0003710 <remove_chain>
c0004d97:	eb 05                	jmp    c0004d9e <f_mkdir+0xa6>
c0004d99:	bb 08 00 00 00       	mov    ebx,0x8
c0004d9e:	83 ec 0c             	sub    esp,0xc
c0004da1:	57                   	push   edi
c0004da2:	e8 7d 10 00 00       	call   c0005e24 <ff_memfree>
c0004da7:	83 c4 10             	add    esp,0x10
c0004daa:	e9 db 00 00 00       	jmp    c0004e8a <f_mkdir+0x192>
c0004daf:	83 f8 ff             	cmp    eax,0xffffffff
c0004db2:	bb 01 00 00 00       	mov    ebx,0x1
c0004db7:	74 d1                	je     c0004d8a <f_mkdir+0x92>
c0004db9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbd:	89 f2                	mov    edx,esi
c0004dbf:	e8 19 dd ff ff       	call   c0002add <dir_clear>
c0004dc4:	85 c0                	test   eax,eax
c0004dc6:	89 c3                	mov    ebx,eax
c0004dc8:	75 c0                	jne    c0004d8a <f_mkdir+0x92>
c0004dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0004dd3:	ba 20 00 00 00       	mov    edx,0x20
c0004dd8:	83 c0 34             	add    eax,0x34
c0004ddb:	e8 28 d2 ff ff       	call   c0002008 <mem_set>
c0004de0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de4:	ba 00 00 21 50       	mov    edx,0x50210000
c0004de9:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ded:	83 c0 4a             	add    eax,0x4a
c0004df0:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004df4:	e8 f7 d1 ff ff       	call   c0001ff0 <st_dword>
c0004df9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dfd:	89 f1                	mov    ecx,esi
c0004dff:	8d 50 34             	lea    edx,[eax+0x34]
c0004e02:	e8 da e5 ff ff       	call   c00033e1 <st_clust.isra.1>
c0004e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0b:	b9 20 00 00 00       	mov    ecx,0x20
c0004e10:	8d 50 34             	lea    edx,[eax+0x34]
c0004e13:	83 c0 54             	add    eax,0x54
c0004e16:	e8 d8 d1 ff ff       	call   c0001ff3 <mem_cpy>
c0004e1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e1f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e23:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	e8 b2 e5 ff ff       	call   c00033e1 <st_clust.isra.1>
c0004e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e33:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e37:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e3b:	e8 2e ee ff ff       	call   c0003c6e <dir_register>
c0004e40:	85 c0                	test   eax,eax
c0004e42:	89 c3                	mov    ebx,eax
c0004e44:	0f 85 40 ff ff ff    	jne    c0004d8a <f_mkdir+0x92>
c0004e4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e4e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e53:	83 c0 16             	add    eax,0x16
c0004e56:	e8 95 d1 ff ff       	call   c0001ff0 <st_dword>
c0004e5b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e5f:	89 f1                	mov    ecx,esi
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	e8 77 e5 ff ff       	call   c00033e1 <st_clust.isra.1>
c0004e6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e6e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e76:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e7e:	e8 de e0 ff ff       	call   c0002f61 <sync_fs>
c0004e83:	89 c3                	mov    ebx,eax
c0004e85:	e9 14 ff ff ff       	jmp    c0004d9e <f_mkdir+0xa6>
c0004e8a:	83 c4 50             	add    esp,0x50
c0004e8d:	89 d8                	mov    eax,ebx
c0004e8f:	5b                   	pop    ebx
c0004e90:	5e                   	pop    esi
c0004e91:	5f                   	pop    edi
c0004e92:	c3                   	ret    

c0004e93 <f_rename>:
c0004e93:	57                   	push   edi
c0004e94:	56                   	push   esi
c0004e95:	53                   	push   ebx
c0004e96:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004e9c:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004ea3:	e8 8f d5 ff ff       	call   c0002437 <get_ldnumber>
c0004ea8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004eac:	b9 02 00 00 00       	mov    ecx,0x2
c0004eb1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004eb8:	e8 cc d7 ff ff       	call   c0002689 <mount_volume>
c0004ebd:	85 c0                	test   eax,eax
c0004ebf:	0f 85 7c 01 00 00    	jne    c0005041 <f_rename+0x1ae>
c0004ec5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ec9:	83 ec 0c             	sub    esp,0xc
c0004ecc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ed0:	68 00 02 00 00       	push   0x200
c0004ed5:	e8 32 0f 00 00       	call   c0005e0c <ff_memalloc>
c0004eda:	83 c4 10             	add    esp,0x10
c0004edd:	89 c6                	mov    esi,eax
c0004edf:	b8 11 00 00 00       	mov    eax,0x11
c0004ee4:	85 f6                	test   esi,esi
c0004ee6:	0f 84 55 01 00 00    	je     c0005041 <f_rename+0x1ae>
c0004eec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef0:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004ef7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004efa:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004efe:	e8 ce ec ff ff       	call   c0003bd1 <follow_path>
c0004f03:	85 c0                	test   eax,eax
c0004f05:	0f 85 22 01 00 00    	jne    c000502d <f_rename+0x19a>
c0004f0b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f0f:	b8 06 00 00 00       	mov    eax,0x6
c0004f14:	80 e2 a0             	and    dl,0xa0
c0004f17:	0f 85 10 01 00 00    	jne    c000502d <f_rename+0x19a>
c0004f1d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f21:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f25:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2a:	e8 c4 d0 ff ff       	call   c0001ff3 <mem_cpy>
c0004f2f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f33:	b9 30 00 00 00       	mov    ecx,0x30
c0004f38:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f3c:	e8 b2 d0 ff ff       	call   c0001ff3 <mem_cpy>
c0004f41:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f48:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f4c:	e8 80 ec ff ff       	call   c0003bd1 <follow_path>
c0004f51:	85 c0                	test   eax,eax
c0004f53:	75 20                	jne    c0004f75 <f_rename+0xe2>
c0004f55:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f59:	b8 08 00 00 00       	mov    eax,0x8
c0004f5e:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f62:	0f 85 c5 00 00 00    	jne    c000502d <f_rename+0x19a>
c0004f68:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f6c:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f73:	eb 03                	jmp    c0004f78 <f_rename+0xe5>
c0004f75:	83 f8 04             	cmp    eax,0x4
c0004f78:	0f 85 af 00 00 00    	jne    c000502d <f_rename+0x19a>
c0004f7e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f82:	e8 e7 ec ff ff       	call   c0003c6e <dir_register>
c0004f87:	85 c0                	test   eax,eax
c0004f89:	0f 85 9e 00 00 00    	jne    c000502d <f_rename+0x19a>
c0004f8f:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004f96:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004f9a:	b9 13 00 00 00       	mov    ecx,0x13
c0004f9f:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fa2:	e8 4c d0 ff ff       	call   c0001ff3 <mem_cpy>
c0004fa7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fab:	a8 10                	test   al,0x10
c0004fad:	75 03                	jne    c0004fb2 <f_rename+0x11f>
c0004faf:	83 c8 20             	or     eax,0x20
c0004fb2:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fbd:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fc1:	74 54                	je     c0005017 <f_rename+0x184>
c0004fc3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fc7:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fcb:	74 4a                	je     c0005017 <f_rename+0x184>
c0004fcd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fd1:	89 da                	mov    edx,ebx
c0004fd3:	8a 07                	mov    al,BYTE PTR [edi]
c0004fd5:	e8 de e3 ff ff       	call   c00033b8 <ld_clust.isra.0>
c0004fda:	89 c2                	mov    edx,eax
c0004fdc:	89 f8                	mov    eax,edi
c0004fde:	e8 3a d2 ff ff       	call   c000221d <clst2sect>
c0004fe3:	89 c2                	mov    edx,eax
c0004fe5:	b8 02 00 00 00       	mov    eax,0x2
c0004fea:	85 d2                	test   edx,edx
c0004fec:	74 3f                	je     c000502d <f_rename+0x19a>
c0004fee:	89 f8                	mov    eax,edi
c0004ff0:	e8 37 d5 ff ff       	call   c000252c <move_window>
c0004ff5:	85 c0                	test   eax,eax
c0004ff7:	75 34                	jne    c000502d <f_rename+0x19a>
c0004ff9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffd:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0005001:	75 14                	jne    c0005017 <f_rename+0x184>
c0005003:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005007:	8d 50 54             	lea    edx,[eax+0x54]
c000500a:	e8 d2 e3 ff ff       	call   c00033e1 <st_clust.isra.1>
c000500f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005013:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005017:	8d 44 24 40          	lea    eax,[esp+0x40]
c000501b:	e8 10 ea ff ff       	call   c0003a30 <dir_remove>
c0005020:	85 c0                	test   eax,eax
c0005022:	75 09                	jne    c000502d <f_rename+0x19a>
c0005024:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005028:	e8 34 df ff ff       	call   c0002f61 <sync_fs>
c000502d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005031:	83 ec 0c             	sub    esp,0xc
c0005034:	56                   	push   esi
c0005035:	e8 ea 0d 00 00       	call   c0005e24 <ff_memfree>
c000503a:	83 c4 10             	add    esp,0x10
c000503d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005041:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005047:	5b                   	pop    ebx
c0005048:	5e                   	pop    esi
c0005049:	5f                   	pop    edi
c000504a:	c3                   	ret    

c000504b <f_chmod>:
c000504b:	57                   	push   edi
c000504c:	b9 02 00 00 00       	mov    ecx,0x2
c0005051:	56                   	push   esi
c0005052:	53                   	push   ebx
c0005053:	83 ec 50             	sub    esp,0x50
c0005056:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000505a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000505e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005062:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0005066:	e8 1e d6 ff ff       	call   c0002689 <mount_volume>
c000506b:	85 c0                	test   eax,eax
c000506d:	0f 85 81 00 00 00    	jne    c00050f4 <f_chmod+0xa9>
c0005073:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005077:	83 ec 0c             	sub    esp,0xc
c000507a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000507e:	68 00 02 00 00       	push   0x200
c0005083:	e8 84 0d 00 00       	call   c0005e0c <ff_memalloc>
c0005088:	83 c4 10             	add    esp,0x10
c000508b:	89 c6                	mov    esi,eax
c000508d:	b8 11 00 00 00       	mov    eax,0x11
c0005092:	85 f6                	test   esi,esi
c0005094:	74 5e                	je     c00050f4 <f_chmod+0xa9>
c0005096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000509a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000509e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a5:	e8 27 eb ff ff       	call   c0003bd1 <follow_path>
c00050aa:	85 c0                	test   eax,eax
c00050ac:	75 32                	jne    c00050e0 <f_chmod+0x95>
c00050ae:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050b2:	b8 06 00 00 00       	mov    eax,0x6
c00050b7:	80 e2 a0             	and    dl,0xa0
c00050ba:	75 24                	jne    c00050e0 <f_chmod+0x95>
c00050bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c0:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050c3:	31 d7                	xor    edi,edx
c00050c5:	21 fb                	and    ebx,edi
c00050c7:	83 e3 27             	and    ebx,0x27
c00050ca:	31 d3                	xor    ebx,edx
c00050cc:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050db:	e8 81 de ff ff       	call   c0002f61 <sync_fs>
c00050e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050e4:	83 ec 0c             	sub    esp,0xc
c00050e7:	56                   	push   esi
c00050e8:	e8 37 0d 00 00       	call   c0005e24 <ff_memfree>
c00050ed:	83 c4 10             	add    esp,0x10
c00050f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050f4:	83 c4 50             	add    esp,0x50
c00050f7:	5b                   	pop    ebx
c00050f8:	5e                   	pop    esi
c00050f9:	5f                   	pop    edi
c00050fa:	c3                   	ret    

c00050fb <f_utime>:
c00050fb:	56                   	push   esi
c00050fc:	b9 02 00 00 00       	mov    ecx,0x2
c0005101:	53                   	push   ebx
c0005102:	83 ec 54             	sub    esp,0x54
c0005105:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005109:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000510d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005111:	e8 73 d5 ff ff       	call   c0002689 <mount_volume>
c0005116:	85 c0                	test   eax,eax
c0005118:	0f 85 87 00 00 00    	jne    c00051a5 <f_utime+0xaa>
c000511e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005122:	83 ec 0c             	sub    esp,0xc
c0005125:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005129:	68 00 02 00 00       	push   0x200
c000512e:	e8 d9 0c 00 00       	call   c0005e0c <ff_memalloc>
c0005133:	83 c4 10             	add    esp,0x10
c0005136:	89 c3                	mov    ebx,eax
c0005138:	b8 11 00 00 00       	mov    eax,0x11
c000513d:	85 db                	test   ebx,ebx
c000513f:	74 64                	je     c00051a5 <f_utime+0xaa>
c0005141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005145:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005149:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000514c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005150:	e8 7c ea ff ff       	call   c0003bd1 <follow_path>
c0005155:	85 c0                	test   eax,eax
c0005157:	75 38                	jne    c0005191 <f_utime+0x96>
c0005159:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000515d:	b8 06 00 00 00       	mov    eax,0x6
c0005162:	80 e2 a0             	and    dl,0xa0
c0005165:	75 2a                	jne    c0005191 <f_utime+0x96>
c0005167:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000516b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c000516f:	c1 e2 10             	shl    edx,0x10
c0005172:	09 c2                	or     edx,eax
c0005174:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005178:	83 c0 16             	add    eax,0x16
c000517b:	e8 70 ce ff ff       	call   c0001ff0 <st_dword>
c0005180:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005184:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000518c:	e8 d0 dd ff ff       	call   c0002f61 <sync_fs>
c0005191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005195:	83 ec 0c             	sub    esp,0xc
c0005198:	53                   	push   ebx
c0005199:	e8 86 0c 00 00       	call   c0005e24 <ff_memfree>
c000519e:	83 c4 10             	add    esp,0x10
c00051a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051a5:	83 c4 54             	add    esp,0x54
c00051a8:	5b                   	pop    ebx
c00051a9:	5e                   	pop    esi
c00051aa:	c3                   	ret    

c00051ab <f_getlabel>:
c00051ab:	55                   	push   ebp
c00051ac:	31 c9                	xor    ecx,ecx
c00051ae:	57                   	push   edi
c00051af:	56                   	push   esi
c00051b0:	53                   	push   ebx
c00051b1:	83 ec 5c             	sub    esp,0x5c
c00051b4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051b8:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c00051bc:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c0:	e8 c4 d4 ff ff       	call   c0002689 <mount_volume>
c00051c5:	85 c0                	test   eax,eax
c00051c7:	89 c3                	mov    ebx,eax
c00051c9:	0f 85 d9 00 00 00    	jne    c00052a8 <f_getlabel+0xfd>
c00051cf:	85 ff                	test   edi,edi
c00051d1:	0f 84 d1 00 00 00    	je     c00052a8 <f_getlabel+0xfd>
c00051d7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e3:	31 d2                	xor    edx,edx
c00051e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ed:	e8 1c e3 ff ff       	call   c000350e <dir_sdi>
c00051f2:	85 c0                	test   eax,eax
c00051f4:	89 c3                	mov    ebx,eax
c00051f6:	0f 85 a2 00 00 00    	jne    c000529e <f_getlabel+0xf3>
c00051fc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005200:	ba 01 00 00 00       	mov    edx,0x1
c0005205:	e8 fe e6 ff ff       	call   c0003908 <dir_read>
c000520a:	85 c0                	test   eax,eax
c000520c:	89 c3                	mov    ebx,eax
c000520e:	0f 85 8a 00 00 00    	jne    c000529e <f_getlabel+0xf3>
c0005214:	31 f6                	xor    esi,esi
c0005216:	31 d2                	xor    edx,edx
c0005218:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000521c:	8d 6a 01             	lea    ebp,[edx+0x1]
c000521f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005223:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005227:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c000522c:	89 c8                	mov    eax,ecx
c000522e:	e8 13 ce ff ff       	call   c0002046 <dbc_1st>
c0005233:	85 c0                	test   eax,eax
c0005235:	74 19                	je     c0005250 <f_getlabel+0xa5>
c0005237:	83 fd 0b             	cmp    ebp,0xb
c000523a:	74 14                	je     c0005250 <f_getlabel+0xa5>
c000523c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005240:	c1 e1 08             	shl    ecx,0x8
c0005243:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005247:	8d 6a 02             	lea    ebp,[edx+0x2]
c000524a:	09 c1                	or     ecx,eax
c000524c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005250:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0005255:	52                   	push   edx
c0005256:	52                   	push   edx
c0005257:	68 b5 01 00 00       	push   0x1b5
c000525c:	50                   	push   eax
c000525d:	e8 76 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005262:	83 c4 10             	add    esp,0x10
c0005265:	0f b7 c0             	movzx  eax,ax
c0005268:	85 c0                	test   eax,eax
c000526a:	74 1f                	je     c000528b <f_getlabel+0xe0>
c000526c:	8d 14 37             	lea    edx,[edi+esi*1]
c000526f:	b9 04 00 00 00       	mov    ecx,0x4
c0005274:	e8 ab ce ff ff       	call   c0002124 <put_utf>
c0005279:	0f b6 c0             	movzx  eax,al
c000527c:	85 c0                	test   eax,eax
c000527e:	74 0b                	je     c000528b <f_getlabel+0xe0>
c0005280:	01 c6                	add    esi,eax
c0005282:	83 fd 0b             	cmp    ebp,0xb
c0005285:	74 06                	je     c000528d <f_getlabel+0xe2>
c0005287:	89 ea                	mov    edx,ebp
c0005289:	eb 8d                	jmp    c0005218 <f_getlabel+0x6d>
c000528b:	31 f6                	xor    esi,esi
c000528d:	01 fe                	add    esi,edi
c000528f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0005292:	39 f7                	cmp    edi,esi
c0005294:	74 12                	je     c00052a8 <f_getlabel+0xfd>
c0005296:	4e                   	dec    esi
c0005297:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c000529a:	74 f3                	je     c000528f <f_getlabel+0xe4>
c000529c:	eb 0a                	jmp    c00052a8 <f_getlabel+0xfd>
c000529e:	83 fb 04             	cmp    ebx,0x4
c00052a1:	75 05                	jne    c00052a8 <f_getlabel+0xfd>
c00052a3:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00052a6:	31 db                	xor    ebx,ebx
c00052a8:	85 db                	test   ebx,ebx
c00052aa:	75 49                	jne    c00052f5 <f_getlabel+0x14a>
c00052ac:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b1:	74 42                	je     c00052f5 <f_getlabel+0x14a>
c00052b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052ba:	e8 6d d2 ff ff       	call   c000252c <move_window>
c00052bf:	85 c0                	test   eax,eax
c00052c1:	89 c3                	mov    ebx,eax
c00052c3:	75 30                	jne    c00052f5 <f_getlabel+0x14a>
c00052c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052c9:	b8 43 00 00 00       	mov    eax,0x43
c00052ce:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d1:	83 f9 03             	cmp    ecx,0x3
c00052d4:	74 10                	je     c00052e6 <f_getlabel+0x13b>
c00052d6:	83 f9 04             	cmp    ecx,0x4
c00052d9:	b8 64 00 00 00       	mov    eax,0x64
c00052de:	b9 27 00 00 00       	mov    ecx,0x27
c00052e3:	0f 45 c1             	cmovne eax,ecx
c00052e6:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052ea:	e8 e5 cc ff ff       	call   c0001fd4 <ld_dword>
c00052ef:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f3:	89 07                	mov    DWORD PTR [edi],eax
c00052f5:	83 c4 5c             	add    esp,0x5c
c00052f8:	89 d8                	mov    eax,ebx
c00052fa:	5b                   	pop    ebx
c00052fb:	5e                   	pop    esi
c00052fc:	5f                   	pop    edi
c00052fd:	5d                   	pop    ebp
c00052fe:	c3                   	ret    

c00052ff <f_setlabel>:
c00052ff:	57                   	push   edi
c0005300:	b9 02 00 00 00       	mov    ecx,0x2
c0005305:	56                   	push   esi
c0005306:	53                   	push   ebx
c0005307:	83 ec 50             	sub    esp,0x50
c000530a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000530e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005312:	e8 72 d3 ff ff       	call   c0002689 <mount_volume>
c0005317:	85 c0                	test   eax,eax
c0005319:	89 c6                	mov    esi,eax
c000531b:	0f 85 65 01 00 00    	jne    c0005486 <f_setlabel+0x187>
c0005321:	b9 0b 00 00 00       	mov    ecx,0xb
c0005326:	ba 20 00 00 00       	mov    edx,0x20
c000532b:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000532f:	31 db                	xor    ebx,ebx
c0005331:	e8 d2 cc ff ff       	call   c0002008 <mem_set>
c0005336:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000533a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000533d:	76 5d                	jbe    c000539c <f_setlabel+0x9d>
c000533f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005343:	e8 04 cd ff ff       	call   c000204c <tchar2uni>
c0005348:	3d ff ff 00 00       	cmp    eax,0xffff
c000534d:	76 0a                	jbe    c0005359 <f_setlabel+0x5a>
c000534f:	be 06 00 00 00       	mov    esi,0x6
c0005354:	e9 2d 01 00 00       	jmp    c0005486 <f_setlabel+0x187>
c0005359:	83 ec 0c             	sub    esp,0xc
c000535c:	50                   	push   eax
c000535d:	e8 ee 0b 00 00       	call   c0005f50 <ff_wtoupper>
c0005362:	5a                   	pop    edx
c0005363:	59                   	pop    ecx
c0005364:	68 b5 01 00 00       	push   0x1b5
c0005369:	50                   	push   eax
c000536a:	e8 cd 0a 00 00       	call   c0005e3c <ff_uni2oem>
c000536f:	83 c4 10             	add    esp,0x10
c0005372:	0f b7 f0             	movzx  esi,ax
c0005375:	85 f6                	test   esi,esi
c0005377:	89 f7                	mov    edi,esi
c0005379:	74 d4                	je     c000534f <f_setlabel+0x50>
c000537b:	89 f2                	mov    edx,esi
c000537d:	b8 70 f6 02 c0       	mov    eax,0xc002f670
c0005382:	e8 ae cc ff ff       	call   c0002035 <chk_chr>
c0005387:	85 c0                	test   eax,eax
c0005389:	75 c4                	jne    c000534f <f_setlabel+0x50>
c000538b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0005391:	0f 87 c9 00 00 00    	ja     c0005460 <f_setlabel+0x161>
c0005397:	e9 e0 00 00 00       	jmp    c000547c <f_setlabel+0x17d>
c000539c:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053a1:	74 ac                	je     c000534f <f_setlabel+0x50>
c00053a3:	85 db                	test   ebx,ebx
c00053a5:	74 0e                	je     c00053b5 <f_setlabel+0xb6>
c00053a7:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053ac:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053af:	75 04                	jne    c00053b5 <f_setlabel+0xb6>
c00053b1:	89 c3                	mov    ebx,eax
c00053b3:	eb ee                	jmp    c00053a3 <f_setlabel+0xa4>
c00053b5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c1:	31 d2                	xor    edx,edx
c00053c3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053cb:	e8 3e e1 ff ff       	call   c000350e <dir_sdi>
c00053d0:	85 c0                	test   eax,eax
c00053d2:	89 c6                	mov    esi,eax
c00053d4:	0f 85 ac 00 00 00    	jne    c0005486 <f_setlabel+0x187>
c00053da:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053de:	ba 01 00 00 00       	mov    edx,0x1
c00053e3:	e8 20 e5 ff ff       	call   c0003908 <dir_read>
c00053e8:	85 c0                	test   eax,eax
c00053ea:	75 18                	jne    c0005404 <f_setlabel+0x105>
c00053ec:	85 db                	test   ebx,ebx
c00053ee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053f2:	74 0b                	je     c00053ff <f_setlabel+0x100>
c00053f4:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00053f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00053fd:	eb 47                	jmp    c0005446 <f_setlabel+0x147>
c00053ff:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005402:	eb 47                	jmp    c000544b <f_setlabel+0x14c>
c0005404:	83 f8 04             	cmp    eax,0x4
c0005407:	75 53                	jne    c000545c <f_setlabel+0x15d>
c0005409:	85 db                	test   ebx,ebx
c000540b:	74 79                	je     c0005486 <f_setlabel+0x187>
c000540d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005411:	ba 01 00 00 00       	mov    edx,0x1
c0005416:	e8 88 e4 ff ff       	call   c00038a3 <dir_alloc>
c000541b:	85 c0                	test   eax,eax
c000541d:	89 c6                	mov    esi,eax
c000541f:	75 65                	jne    c0005486 <f_setlabel+0x187>
c0005421:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005425:	b9 20 00 00 00       	mov    ecx,0x20
c000542a:	31 d2                	xor    edx,edx
c000542c:	e8 d7 cb ff ff       	call   c0002008 <mem_set>
c0005431:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005435:	b9 0b 00 00 00       	mov    ecx,0xb
c000543a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000543e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005442:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005446:	e8 a8 cb ff ff       	call   c0001ff3 <mem_cpy>
c000544b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000544f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005457:	e8 05 db ff ff       	call   c0002f61 <sync_fs>
c000545c:	89 c6                	mov    esi,eax
c000545e:	eb 26                	jmp    c0005486 <f_setlabel+0x187>
c0005460:	83 fb 09             	cmp    ebx,0x9
c0005463:	0f 87 e6 fe ff ff    	ja     c000534f <f_setlabel+0x50>
c0005469:	89 f0                	mov    eax,esi
c000546b:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c000546f:	43                   	inc    ebx
c0005470:	89 f8                	mov    eax,edi
c0005472:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005476:	43                   	inc    ebx
c0005477:	e9 ba fe ff ff       	jmp    c0005336 <f_setlabel+0x37>
c000547c:	83 fb 0a             	cmp    ebx,0xa
c000547f:	76 ef                	jbe    c0005470 <f_setlabel+0x171>
c0005481:	e9 c9 fe ff ff       	jmp    c000534f <f_setlabel+0x50>
c0005486:	83 c4 50             	add    esp,0x50
c0005489:	89 f0                	mov    eax,esi
c000548b:	5b                   	pop    ebx
c000548c:	5e                   	pop    esi
c000548d:	5f                   	pop    edi
c000548e:	c3                   	ret    

c000548f <f_expand>:
c000548f:	55                   	push   ebp
c0005490:	57                   	push   edi
c0005491:	56                   	push   esi
c0005492:	53                   	push   ebx
c0005493:	83 ec 2c             	sub    esp,0x2c
c0005496:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000549e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054a6:	89 d8                	mov    eax,ebx
c00054a8:	e8 d6 cf ff ff       	call   c0002483 <validate>
c00054ad:	85 c0                	test   eax,eax
c00054af:	89 c6                	mov    esi,eax
c00054b1:	0f 85 3b 01 00 00    	jne    c00055f2 <f_expand+0x163>
c00054b7:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054bb:	85 f6                	test   esi,esi
c00054bd:	0f 85 2f 01 00 00    	jne    c00055f2 <f_expand+0x163>
c00054c3:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054c8:	75 0a                	jne    c00054d4 <f_expand+0x45>
c00054ca:	be 07 00 00 00       	mov    esi,0x7
c00054cf:	e9 1e 01 00 00       	jmp    c00055f2 <f_expand+0x163>
c00054d4:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054d8:	75 f0                	jne    c00054ca <f_expand+0x3b>
c00054da:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054de:	74 ea                	je     c00054ca <f_expand+0x3b>
c00054e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054e4:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c00054e8:	c1 e7 09             	shl    edi,0x9
c00054eb:	8d 47 ff             	lea    eax,[edi-0x1]
c00054ee:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054f2:	0f 95 c0             	setne  al
c00054f5:	31 d2                	xor    edx,edx
c00054f7:	0f b6 c0             	movzx  eax,al
c00054fa:	89 c5                	mov    ebp,eax
c00054fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005500:	f7 f7                	div    edi
c0005502:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005505:	01 e8                	add    eax,ebp
c0005507:	83 ff 01             	cmp    edi,0x1
c000550a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000550e:	76 05                	jbe    c0005515 <f_expand+0x86>
c0005510:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c0005513:	77 05                	ja     c000551a <f_expand+0x8b>
c0005515:	bf 02 00 00 00       	mov    edi,0x2
c000551a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000551d:	89 fd                	mov    ebp,edi
c000551f:	31 c9                	xor    ecx,ecx
c0005521:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005525:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005527:	89 ea                	mov    edx,ebp
c0005529:	45                   	inc    ebp
c000552a:	e8 da de ff ff       	call   c0003409 <get_fat.isra.2>
c000552f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005533:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005537:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000553a:	77 05                	ja     c0005541 <f_expand+0xb2>
c000553c:	bd 02 00 00 00       	mov    ebp,0x2
c0005541:	83 f8 01             	cmp    eax,0x1
c0005544:	74 20                	je     c0005566 <f_expand+0xd7>
c0005546:	83 f8 ff             	cmp    eax,0xffffffff
c0005549:	74 25                	je     c0005570 <f_expand+0xe1>
c000554b:	85 c0                	test   eax,eax
c000554d:	75 09                	jne    c0005558 <f_expand+0xc9>
c000554f:	41                   	inc    ecx
c0005550:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005554:	75 07                	jne    c000555d <f_expand+0xce>
c0005556:	eb 1f                	jmp    c0005577 <f_expand+0xe8>
c0005558:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000555b:	31 c9                	xor    ecx,ecx
c000555d:	39 fd                	cmp    ebp,edi
c000555f:	75 c0                	jne    c0005521 <f_expand+0x92>
c0005561:	e9 64 ff ff ff       	jmp    c00054ca <f_expand+0x3b>
c0005566:	be 02 00 00 00       	mov    esi,0x2
c000556b:	e9 82 00 00 00       	jmp    c00055f2 <f_expand+0x163>
c0005570:	be 01 00 00 00       	mov    esi,0x1
c0005575:	eb 7b                	jmp    c00055f2 <f_expand+0x163>
c0005577:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000557c:	74 2b                	je     c00055a9 <f_expand+0x11a>
c000557e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005581:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	74 24                	je     c00055ad <f_expand+0x11e>
c0005589:	83 c9 ff             	or     ecx,0xffffffff
c000558c:	83 fd 01             	cmp    ebp,0x1
c000558f:	74 03                	je     c0005594 <f_expand+0x105>
c0005591:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005594:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005598:	89 fa                	mov    edx,edi
c000559a:	e8 e7 d3 ff ff       	call   c0002986 <put_fat>
c000559f:	85 c0                	test   eax,eax
c00055a1:	75 4d                	jne    c00055f0 <f_expand+0x161>
c00055a3:	89 f8                	mov    eax,edi
c00055a5:	4d                   	dec    ebp
c00055a6:	47                   	inc    edi
c00055a7:	eb dc                	jmp    c0005585 <f_expand+0xf6>
c00055a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055ac:	48                   	dec    eax
c00055ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055b1:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055b6:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055b9:	74 37                	je     c00055f2 <f_expand+0x163>
c00055bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055be:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055c1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055c5:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055c8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055cb:	83 c8 40             	or     eax,0x40
c00055ce:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055d1:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055d4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055d7:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055da:	39 c8                	cmp    eax,ecx
c00055dc:	77 14                	ja     c00055f2 <f_expand+0x163>
c00055de:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055e2:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055e5:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055e8:	83 c8 01             	or     eax,0x1
c00055eb:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055ee:	eb 02                	jmp    c00055f2 <f_expand+0x163>
c00055f0:	89 c6                	mov    esi,eax
c00055f2:	83 c4 2c             	add    esp,0x2c
c00055f5:	89 f0                	mov    eax,esi
c00055f7:	5b                   	pop    ebx
c00055f8:	5e                   	pop    esi
c00055f9:	5f                   	pop    edi
c00055fa:	5d                   	pop    ebp
c00055fb:	c3                   	ret    

c00055fc <f_mkfs>:
c00055fc:	55                   	push   ebp
c00055fd:	57                   	push   edi
c00055fe:	56                   	push   esi
c00055ff:	be 0b 00 00 00       	mov    esi,0xb
c0005604:	53                   	push   ebx
c0005605:	83 ec 5c             	sub    esp,0x5c
c0005608:	8d 44 24 70          	lea    eax,[esp+0x70]
c000560c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005610:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005614:	e8 1e ce ff ff       	call   c0002437 <get_ldnumber>
c0005619:	85 c0                	test   eax,eax
c000561b:	0f 88 e0 07 00 00    	js     c0005e01 <f_mkfs+0x805>
c0005621:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005628:	85 d2                	test   edx,edx
c000562a:	74 03                	je     c000562f <f_mkfs+0x33>
c000562c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000562f:	85 db                	test   ebx,ebx
c0005631:	75 05                	jne    c0005638 <f_mkfs+0x3c>
c0005633:	bb 60 f6 02 c0       	mov    ebx,0xc002f660
c0005638:	0f b6 c0             	movzx  eax,al
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005642:	be 03 00 00 00       	mov    esi,0x3
c0005647:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000564b:	e8 29 c9 ff ff       	call   c0001f79 <disk_initialize>
c0005650:	83 c4 10             	add    esp,0x10
c0005653:	a8 01                	test   al,0x1
c0005655:	0f 85 a6 07 00 00    	jne    c0005e01 <f_mkfs+0x805>
c000565b:	a8 04                	test   al,0x4
c000565d:	be 0a 00 00 00       	mov    esi,0xa
c0005662:	0f 85 99 07 00 00    	jne    c0005e01 <f_mkfs+0x805>
c0005668:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000566b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000566f:	85 c0                	test   eax,eax
c0005671:	75 20                	jne    c0005693 <f_mkfs+0x97>
c0005673:	51                   	push   ecx
c0005674:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005678:	50                   	push   eax
c0005679:	6a 03                	push   0x3
c000567b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000567f:	e8 24 c9 ff ff       	call   c0001fa8 <disk_ioctl>
c0005684:	83 c4 10             	add    esp,0x10
c0005687:	85 c0                	test   eax,eax
c0005689:	74 08                	je     c0005693 <f_mkfs+0x97>
c000568b:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c0005693:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0005697:	8d 42 ff             	lea    eax,[edx-0x1]
c000569a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000569f:	77 04                	ja     c00056a5 <f_mkfs+0xa9>
c00056a1:	85 c2                	test   edx,eax
c00056a3:	74 08                	je     c00056ad <f_mkfs+0xb1>
c00056a5:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056ad:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056b0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056b8:	48                   	dec    eax
c00056b9:	3c 01                	cmp    al,0x1
c00056bb:	76 05                	jbe    c00056c2 <f_mkfs+0xc6>
c00056bd:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056c9:	48                   	dec    eax
c00056ca:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056cf:	77 15                	ja     c00056e6 <f_mkfs+0xea>
c00056d1:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c00056d6:	b8 00 02 00 00       	mov    eax,0x200
c00056db:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c00056e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0xf2>
c00056e6:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c00056ee:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056f1:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f7:	77 0f                	ja     c0005708 <f_mkfs+0x10c>
c00056f9:	8d 47 ff             	lea    eax,[edi-0x1]
c00056fc:	85 f8                	test   eax,edi
c00056fe:	b8 00 00 00 00       	mov    eax,0x0
c0005703:	0f 45 f8             	cmovne edi,eax
c0005706:	eb 02                	jmp    c000570a <f_mkfs+0x10e>
c0005708:	31 ff                	xor    edi,edi
c000570a:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005712:	77 0a                	ja     c000571e <f_mkfs+0x122>
c0005714:	be 11 00 00 00       	mov    esi,0x11
c0005719:	e9 e3 06 00 00       	jmp    c0005e01 <f_mkfs+0x805>
c000571e:	85 ed                	test   ebp,ebp
c0005720:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005722:	89 eb                	mov    ebx,ebp
c0005724:	75 1e                	jne    c0005744 <f_mkfs+0x148>
c0005726:	83 ec 0c             	sub    esp,0xc
c0005729:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005730:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005735:	50                   	push   eax
c0005736:	e8 d1 06 00 00       	call   c0005e0c <ff_memalloc>
c000573b:	83 c4 10             	add    esp,0x10
c000573e:	85 c0                	test   eax,eax
c0005740:	89 c3                	mov    ebx,eax
c0005742:	74 d0                	je     c0005714 <f_mkfs+0x118>
c0005744:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000574c:	52                   	push   edx
c000574d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005751:	50                   	push   eax
c0005752:	6a 01                	push   0x1
c0005754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005758:	e8 4b c8 ff ff       	call   c0001fa8 <disk_ioctl>
c000575d:	83 c4 10             	add    esp,0x10
c0005760:	85 c0                	test   eax,eax
c0005762:	0f 85 42 06 00 00    	jne    c0005daa <f_mkfs+0x7ae>
c0005768:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005770:	89 f0                	mov    eax,esi
c0005772:	83 e0 08             	and    eax,0x8
c0005775:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005779:	75 18                	jne    c0005793 <f_mkfs+0x197>
c000577b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000577f:	83 f8 3f             	cmp    eax,0x3f
c0005782:	76 0f                	jbe    c0005793 <f_mkfs+0x197>
c0005784:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c000578c:	83 e8 3f             	sub    eax,0x3f
c000578f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005793:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005797:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000579b:	83 f8 7f             	cmp    eax,0x7f
c000579e:	0f 86 5f 02 00 00    	jbe    c0005a03 <f_mkfs+0x407>
c00057a4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057aa:	b9 80 00 00 00       	mov    ecx,0x80
c00057af:	77 05                	ja     c00057b6 <f_mkfs+0x1ba>
c00057b1:	c1 ef 09             	shr    edi,0x9
c00057b4:	89 f9                	mov    ecx,edi
c00057b6:	89 f0                	mov    eax,esi
c00057b8:	89 f7                	mov    edi,esi
c00057ba:	83 e0 01             	and    eax,0x1
c00057bd:	83 e7 02             	and    edi,0x2
c00057c0:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057c4:	0f b6 c0             	movzx  eax,al
c00057c7:	74 0a                	je     c00057d3 <f_mkfs+0x1d7>
c00057c9:	85 c0                	test   eax,eax
c00057cb:	0f 84 53 01 00 00    	je     c0005924 <f_mkfs+0x328>
c00057d1:	eb 37                	jmp    c000580a <f_mkfs+0x20e>
c00057d3:	85 c0                	test   eax,eax
c00057d5:	be 13 00 00 00       	mov    esi,0x13
c00057da:	75 2e                	jne    c000580a <f_mkfs+0x20e>
c00057dc:	e9 e0 05 00 00       	jmp    c0005dc1 <f_mkfs+0x7c5>
c00057e1:	83 f8 02             	cmp    eax,0x2
c00057e4:	0f 85 11 02 00 00    	jne    c00059fb <f_mkfs+0x3ff>
c00057ea:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057f0:	0f 86 e8 01 00 00    	jbe    c00059de <f_mkfs+0x3e2>
c00057f6:	85 c9                	test   ecx,ecx
c00057f8:	0f 85 d5 05 00 00    	jne    c0005dd3 <f_mkfs+0x7d7>
c00057fe:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005801:	83 f9 40             	cmp    ecx,0x40
c0005804:	0f 87 d9 05 00 00    	ja     c0005de3 <f_mkfs+0x7e7>
c000580a:	85 c9                	test   ecx,ecx
c000580c:	89 cf                	mov    edi,ecx
c000580e:	75 1c                	jne    c000582c <f_mkfs+0x230>
c0005810:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005814:	b8 40 f6 02 c0       	mov    eax,0xc002f640
c0005819:	bf 01 00 00 00       	mov    edi,0x1
c000581e:	c1 ee 0c             	shr    esi,0xc
c0005821:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005824:	85 d2                	test   edx,edx
c0005826:	0f 85 67 01 00 00    	jne    c0005993 <f_mkfs+0x397>
c000582c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005830:	31 d2                	xor    edx,edx
c0005832:	f7 f7                	div    edi
c0005834:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005839:	0f 86 66 01 00 00    	jbe    c00059a5 <f_mkfs+0x3a9>
c000583f:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005844:	83 c0 02             	add    eax,0x2
c0005847:	01 c0                	add    eax,eax
c0005849:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005851:	05 ff 01 00 00       	add    eax,0x1ff
c0005856:	c1 e8 09             	shr    eax,0x9
c0005859:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000585d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005861:	c1 e0 05             	shl    eax,0x5
c0005864:	c1 e8 09             	shr    eax,0x9
c0005867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000586b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005870:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005874:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005878:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000587c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005880:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005884:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005889:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000588d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005891:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005895:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0005899:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000589d:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00058a1:	f7 d8                	neg    eax
c00058a3:	21 c6                	and    esi,eax
c00058a5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058aa:	29 d6                	sub    esi,edx
c00058ac:	83 f8 03             	cmp    eax,0x3
c00058af:	0f 85 03 01 00 00    	jne    c00059b8 <f_mkfs+0x3bc>
c00058b5:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058b9:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058bd:	89 f8                	mov    eax,edi
c00058bf:	c1 e0 04             	shl    eax,0x4
c00058c2:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00058c6:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058ca:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058ce:	0f 82 2f 01 00 00    	jb     c0005a03 <f_mkfs+0x407>
c00058d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058d8:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058dc:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058e0:	89 c2                	mov    edx,eax
c00058e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00058e6:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00058eb:	29 c2                	sub    edx,eax
c00058ed:	89 d0                	mov    eax,edx
c00058ef:	31 d2                	xor    edx,edx
c00058f1:	f7 f7                	div    edi
c00058f3:	89 c6                	mov    esi,eax
c00058f5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058fa:	83 f8 03             	cmp    eax,0x3
c00058fd:	0f 85 de fe ff ff    	jne    c00057e1 <f_mkfs+0x1e5>
c0005903:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005909:	0f 87 03 01 00 00    	ja     c0005a12 <f_mkfs+0x416>
c000590f:	85 c9                	test   ecx,ecx
c0005911:	0f 85 ec 00 00 00    	jne    c0005a03 <f_mkfs+0x407>
c0005917:	83 ff 01             	cmp    edi,0x1
c000591a:	0f 86 e3 00 00 00    	jbe    c0005a03 <f_mkfs+0x407>
c0005920:	d1 ef                	shr    edi,1
c0005922:	89 f9                	mov    ecx,edi
c0005924:	85 c9                	test   ecx,ecx
c0005926:	89 ce                	mov    esi,ecx
c0005928:	75 25                	jne    c000594f <f_mkfs+0x353>
c000592a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000592e:	b8 50 f6 02 c0       	mov    eax,0xc002f650
c0005933:	b9 01 00 00 00       	mov    ecx,0x1
c0005938:	c1 ee 11             	shr    esi,0x11
c000593b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000593e:	85 d2                	test   edx,edx
c0005940:	74 0b                	je     c000594d <f_mkfs+0x351>
c0005942:	83 c0 02             	add    eax,0x2
c0005945:	39 f2                	cmp    edx,esi
c0005947:	77 04                	ja     c000594d <f_mkfs+0x351>
c0005949:	01 c9                	add    ecx,ecx
c000594b:	eb ee                	jmp    c000593b <f_mkfs+0x33f>
c000594d:	31 f6                	xor    esi,esi
c000594f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005953:	31 d2                	xor    edx,edx
c0005955:	f7 f1                	div    ecx
c0005957:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000595e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005963:	c1 ea 09             	shr    edx,0x9
c0005966:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000596b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000596f:	0f 87 8e 00 00 00    	ja     c0005a03 <f_mkfs+0x407>
c0005975:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000597d:	89 cf                	mov    edi,ecx
c000597f:	89 f1                	mov    ecx,esi
c0005981:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005989:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000598e:	e9 d8 fe ff ff       	jmp    c000586b <f_mkfs+0x26f>
c0005993:	83 c0 02             	add    eax,0x2
c0005996:	39 f2                	cmp    edx,esi
c0005998:	0f 87 8e fe ff ff    	ja     c000582c <f_mkfs+0x230>
c000599e:	01 ff                	add    edi,edi
c00059a0:	e9 7c fe ff ff       	jmp    c0005821 <f_mkfs+0x225>
c00059a5:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00059aa:	8d 04 40             	lea    eax,[eax+eax*2]
c00059ad:	40                   	inc    eax
c00059ae:	d1 e8                	shr    eax,1
c00059b0:	83 c0 03             	add    eax,0x3
c00059b3:	e9 91 fe ff ff       	jmp    c0005849 <f_mkfs+0x24d>
c00059b8:	31 d2                	xor    edx,edx
c00059ba:	89 f0                	mov    eax,esi
c00059bc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c0:	85 d2                	test   edx,edx
c00059c2:	74 09                	je     c00059cd <f_mkfs+0x3d1>
c00059c4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059c8:	4e                   	dec    esi
c00059c9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059cd:	89 f0                	mov    eax,esi
c00059cf:	31 d2                	xor    edx,edx
c00059d1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059d5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059d9:	e9 df fe ff ff       	jmp    c00058bd <f_mkfs+0x2c1>
c00059de:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059e4:	77 2c                	ja     c0005a12 <f_mkfs+0x416>
c00059e6:	85 c9                	test   ecx,ecx
c00059e8:	75 19                	jne    c0005a03 <f_mkfs+0x407>
c00059ea:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059ed:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059f3:	0f 86 11 fe ff ff    	jbe    c000580a <f_mkfs+0x20e>
c00059f9:	eb 08                	jmp    c0005a03 <f_mkfs+0x407>
c00059fb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005a01:	76 0a                	jbe    c0005a0d <f_mkfs+0x411>
c0005a03:	be 0e 00 00 00       	mov    esi,0xe
c0005a08:	e9 b4 03 00 00       	jmp    c0005dc1 <f_mkfs+0x7c5>
c0005a0d:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a12:	31 d2                	xor    edx,edx
c0005a14:	b9 00 02 00 00       	mov    ecx,0x200
c0005a19:	89 d8                	mov    eax,ebx
c0005a1b:	e8 e8 c5 ff ff       	call   c0002008 <mem_set>
c0005a20:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a25:	ba ee f5 02 c0       	mov    edx,0xc002f5ee
c0005a2a:	89 d8                	mov    eax,ebx
c0005a2c:	e8 c2 c5 ff ff       	call   c0001ff3 <mem_cpy>
c0005a31:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a34:	ba 00 02 00 00       	mov    edx,0x200
c0005a39:	e8 ae c5 ff ff       	call   c0001fec <st_word>
c0005a3e:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a43:	89 f8                	mov    eax,edi
c0005a45:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a48:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a4b:	e8 9c c5 ff ff       	call   c0001fec <st_word>
c0005a50:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a54:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a57:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a5c:	83 f8 03             	cmp    eax,0x3
c0005a5f:	b8 00 00 00 00       	mov    eax,0x0
c0005a64:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c0005a69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a6d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005a74:	e8 73 c5 ff ff       	call   c0001fec <st_word>
c0005a79:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a7d:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a83:	77 0a                	ja     c0005a8f <f_mkfs+0x493>
c0005a85:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a88:	e8 5f c5 ff ff       	call   c0001fec <st_word>
c0005a8d:	eb 08                	jmp    c0005a97 <f_mkfs+0x49b>
c0005a8f:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a92:	e8 59 c5 ff ff       	call   c0001ff0 <st_dword>
c0005a97:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a9b:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a9e:	ba 3f 00 00 00       	mov    edx,0x3f
c0005aa3:	e8 44 c5 ff ff       	call   c0001fec <st_word>
c0005aa8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005aab:	ba ff 00 00 00       	mov    edx,0xff
c0005ab0:	e8 37 c5 ff ff       	call   c0001fec <st_word>
c0005ab5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ab9:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005abc:	e8 2f c5 ff ff       	call   c0001ff0 <st_dword>
c0005ac1:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ac6:	83 f8 03             	cmp    eax,0x3
c0005ac9:	75 57                	jne    c0005b22 <f_mkfs+0x526>
c0005acb:	8d 43 43             	lea    eax,[ebx+0x43]
c0005ace:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ad3:	e8 18 c5 ff ff       	call   c0001ff0 <st_dword>
c0005ad8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005adc:	8d 43 24             	lea    eax,[ebx+0x24]
c0005adf:	e8 0c c5 ff ff       	call   c0001ff0 <st_dword>
c0005ae4:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ae7:	ba 02 00 00 00       	mov    edx,0x2
c0005aec:	e8 ff c4 ff ff       	call   c0001ff0 <st_dword>
c0005af1:	8d 43 30             	lea    eax,[ebx+0x30]
c0005af4:	ba 01 00 00 00       	mov    edx,0x1
c0005af9:	e8 ee c4 ff ff       	call   c0001fec <st_word>
c0005afe:	8d 43 32             	lea    eax,[ebx+0x32]
c0005b01:	ba 06 00 00 00       	mov    edx,0x6
c0005b06:	e8 e1 c4 ff ff       	call   c0001fec <st_word>
c0005b0b:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b0e:	b9 13 00 00 00       	mov    ecx,0x13
c0005b13:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005b17:	ba fa f5 02 c0       	mov    edx,0xc002f5fa
c0005b1c:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005b20:	eb 2f                	jmp    c0005b51 <f_mkfs+0x555>
c0005b22:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b25:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b2a:	e8 c1 c4 ff ff       	call   c0001ff0 <st_dword>
c0005b2f:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b34:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b37:	e8 b0 c4 ff ff       	call   c0001fec <st_word>
c0005b3c:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b3f:	b9 13 00 00 00       	mov    ecx,0x13
c0005b44:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b48:	ba 0e f6 02 c0       	mov    edx,0xc002f60e
c0005b4d:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b51:	e8 9d c4 ff ff       	call   c0001ff3 <mem_cpy>
c0005b56:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b5c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b65:	e8 82 c4 ff ff       	call   c0001fec <st_word>
c0005b6a:	6a 01                	push   0x1
c0005b6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b70:	53                   	push   ebx
c0005b71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b75:	e8 18 c4 ff ff       	call   c0001f92 <disk_write>
c0005b7a:	83 c4 10             	add    esp,0x10
c0005b7d:	85 c0                	test   eax,eax
c0005b7f:	0f 85 25 02 00 00    	jne    c0005daa <f_mkfs+0x7ae>
c0005b85:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b8a:	83 f8 03             	cmp    eax,0x3
c0005b8d:	0f 85 98 00 00 00    	jne    c0005c2b <f_mkfs+0x62f>
c0005b93:	6a 01                	push   0x1
c0005b95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b99:	83 c0 06             	add    eax,0x6
c0005b9c:	50                   	push   eax
c0005b9d:	53                   	push   ebx
c0005b9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ba2:	e8 eb c3 ff ff       	call   c0001f92 <disk_write>
c0005ba7:	b9 00 02 00 00       	mov    ecx,0x200
c0005bac:	31 d2                	xor    edx,edx
c0005bae:	89 d8                	mov    eax,ebx
c0005bb0:	e8 53 c4 ff ff       	call   c0002008 <mem_set>
c0005bb5:	ba 52 52 61 41       	mov    edx,0x41615252
c0005bba:	89 d8                	mov    eax,ebx
c0005bbc:	e8 2f c4 ff ff       	call   c0001ff0 <st_dword>
c0005bc1:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bc7:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bcc:	e8 1f c4 ff ff       	call   c0001ff0 <st_dword>
c0005bd1:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bd4:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bda:	e8 11 c4 ff ff       	call   c0001ff0 <st_dword>
c0005bdf:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005be5:	ba 02 00 00 00       	mov    edx,0x2
c0005bea:	e8 01 c4 ff ff       	call   c0001ff0 <st_dword>
c0005bef:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005bf5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005bfa:	e8 ed c3 ff ff       	call   c0001fec <st_word>
c0005bff:	6a 01                	push   0x1
c0005c01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005c05:	83 c0 07             	add    eax,0x7
c0005c08:	50                   	push   eax
c0005c09:	53                   	push   ebx
c0005c0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005c0e:	e8 7f c3 ff ff       	call   c0001f92 <disk_write>
c0005c13:	83 c4 20             	add    esp,0x20
c0005c16:	6a 01                	push   0x1
c0005c18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c1c:	40                   	inc    eax
c0005c1d:	50                   	push   eax
c0005c1e:	53                   	push   ebx
c0005c1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c23:	e8 6a c3 ff ff       	call   c0001f92 <disk_write>
c0005c28:	83 c4 10             	add    esp,0x10
c0005c2b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c2f:	31 d2                	xor    edx,edx
c0005c31:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c35:	c1 e8 09             	shr    eax,0x9
c0005c38:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c3c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c42:	89 d8                	mov    eax,ebx
c0005c44:	e8 bf c3 ff ff       	call   c0002008 <mem_set>
c0005c49:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c4e:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005c53:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005c5b:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c60:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c64:	83 f8 01             	cmp    eax,0x1
c0005c67:	0f 44 d1             	cmove  edx,ecx
c0005c6a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005c6e:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c73:	75 21                	jne    c0005c96 <f_mkfs+0x69a>
c0005c75:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c7a:	89 d8                	mov    eax,ebx
c0005c7c:	e8 6f c3 ff ff       	call   c0001ff0 <st_dword>
c0005c81:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c84:	83 ca ff             	or     edx,0xffffffff
c0005c87:	e8 64 c3 ff ff       	call   c0001ff0 <st_dword>
c0005c8c:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c8f:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c94:	eb 06                	jmp    c0005c9c <f_mkfs+0x6a0>
c0005c96:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005c9a:	89 d8                	mov    eax,ebx
c0005c9c:	e8 4f c3 ff ff       	call   c0001ff0 <st_dword>
c0005ca1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ca9:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005cad:	0f 46 c6             	cmovbe eax,esi
c0005cb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005cb4:	50                   	push   eax
c0005cb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb9:	53                   	push   ebx
c0005cba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cbe:	e8 cf c2 ff ff       	call   c0001f92 <disk_write>
c0005cc3:	83 c4 10             	add    esp,0x10
c0005cc6:	85 c0                	test   eax,eax
c0005cc8:	0f 85 dc 00 00 00    	jne    c0005daa <f_mkfs+0x7ae>
c0005cce:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd3:	31 d2                	xor    edx,edx
c0005cd5:	89 d8                	mov    eax,ebx
c0005cd7:	e8 2c c3 ff ff       	call   c0002008 <mem_set>
c0005cdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ce0:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005ce4:	29 ce                	sub    esi,ecx
c0005ce6:	75 bd                	jne    c0005ca5 <f_mkfs+0x6a9>
c0005ce8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005cf4:	40                   	inc    eax
c0005cf5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf9:	0f 87 6f ff ff ff    	ja     c0005c6e <f_mkfs+0x672>
c0005cff:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d04:	83 f8 03             	cmp    eax,0x3
c0005d07:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005d0c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d10:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d14:	0f 46 f7             	cmovbe esi,edi
c0005d17:	56                   	push   esi
c0005d18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d1c:	53                   	push   ebx
c0005d1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d21:	e8 6c c2 ff ff       	call   c0001f92 <disk_write>
c0005d26:	83 c4 10             	add    esp,0x10
c0005d29:	85 c0                	test   eax,eax
c0005d2b:	75 7d                	jne    c0005daa <f_mkfs+0x7ae>
c0005d2d:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d31:	29 f7                	sub    edi,esi
c0005d33:	75 d7                	jne    c0005d0c <f_mkfs+0x710>
c0005d35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d3a:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3f:	83 f8 03             	cmp    eax,0x3
c0005d42:	74 1e                	je     c0005d62 <f_mkfs+0x766>
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	b9 06 00 00 00       	mov    ecx,0x6
c0005d51:	77 0f                	ja     c0005d62 <f_mkfs+0x766>
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	b9 04 00 00 00       	mov    ecx,0x4
c0005d5b:	74 05                	je     c0005d62 <f_mkfs+0x766>
c0005d5d:	b9 01 00 00 00       	mov    ecx,0x1
c0005d62:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d67:	75 2a                	jne    c0005d93 <f_mkfs+0x797>
c0005d69:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d71:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005d7c:	53                   	push   ebx
c0005d7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d81:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d85:	e8 87 d2 ff ff       	call   c0003011 <create_partition>
c0005d8a:	83 c4 10             	add    esp,0x10
c0005d8d:	85 c0                	test   eax,eax
c0005d8f:	89 c6                	mov    esi,eax
c0005d91:	75 2e                	jne    c0005dc1 <f_mkfs+0x7c5>
c0005d93:	50                   	push   eax
c0005d94:	31 f6                	xor    esi,esi
c0005d96:	6a 00                	push   0x0
c0005d98:	6a 00                	push   0x0
c0005d9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d9e:	e8 05 c2 ff ff       	call   c0001fa8 <disk_ioctl>
c0005da3:	83 c4 10             	add    esp,0x10
c0005da6:	85 c0                	test   eax,eax
c0005da8:	74 17                	je     c0005dc1 <f_mkfs+0x7c5>
c0005daa:	85 ed                	test   ebp,ebp
c0005dac:	75 0c                	jne    c0005dba <f_mkfs+0x7be>
c0005dae:	83 ec 0c             	sub    esp,0xc
c0005db1:	53                   	push   ebx
c0005db2:	e8 6d 00 00 00       	call   c0005e24 <ff_memfree>
c0005db7:	83 c4 10             	add    esp,0x10
c0005dba:	be 01 00 00 00       	mov    esi,0x1
c0005dbf:	eb 40                	jmp    c0005e01 <f_mkfs+0x805>
c0005dc1:	85 ed                	test   ebp,ebp
c0005dc3:	75 3c                	jne    c0005e01 <f_mkfs+0x805>
c0005dc5:	83 ec 0c             	sub    esp,0xc
c0005dc8:	53                   	push   ebx
c0005dc9:	e8 56 00 00 00       	call   c0005e24 <ff_memfree>
c0005dce:	83 c4 10             	add    esp,0x10
c0005dd1:	eb 2e                	jmp    c0005e01 <f_mkfs+0x805>
c0005dd3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd8:	0f 85 46 fb ff ff    	jne    c0005924 <f_mkfs+0x328>
c0005dde:	e9 20 fc ff ff       	jmp    c0005a03 <f_mkfs+0x407>
c0005de3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de8:	0f 85 3c fb ff ff    	jne    c000592a <f_mkfs+0x32e>
c0005dee:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df4:	89 cf                	mov    edi,ecx
c0005df6:	0f 86 30 fa ff ff    	jbe    c000582c <f_mkfs+0x230>
c0005dfc:	e9 02 fc ff ff       	jmp    c0005a03 <f_mkfs+0x407>
c0005e01:	83 c4 5c             	add    esp,0x5c
c0005e04:	89 f0                	mov    eax,esi
c0005e06:	5b                   	pop    ebx
c0005e07:	5e                   	pop    esi
c0005e08:	5f                   	pop    edi
c0005e09:	5d                   	pop    ebp
c0005e0a:	c3                   	ret    
c0005e0b:	90                   	nop

c0005e0c <ff_memalloc>:
c0005e0c:	83 ec 0c             	sub    esp,0xc
c0005e0f:	83 ec 0c             	sub    esp,0xc
c0005e12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e16:	e8 80 06 01 00       	call   c001649b <malloc>
c0005e1b:	83 c4 10             	add    esp,0x10
c0005e1e:	83 c4 0c             	add    esp,0xc
c0005e21:	c3                   	ret    
c0005e22:	66 90                	xchg   ax,ax

c0005e24 <ff_memfree>:
c0005e24:	83 ec 0c             	sub    esp,0xc
c0005e27:	83 ec 0c             	sub    esp,0xc
c0005e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2e:	e8 88 06 01 00       	call   c00164bb <free>
c0005e33:	83 c4 10             	add    esp,0x10
c0005e36:	90                   	nop
c0005e37:	83 c4 0c             	add    esp,0xc
c0005e3a:	c3                   	ret    
c0005e3b:	90                   	nop

c0005e3c <ff_uni2oem>:
c0005e3c:	83 ec 14             	sub    esp,0x14
c0005e3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e43:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e47:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4e:	c7 44 24 0c 40 fa 02 c0 	mov    DWORD PTR [esp+0xc],0xc002fa40
c0005e56:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e5b:	77 0b                	ja     c0005e68 <ff_uni2oem+0x2c>
c0005e5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e61:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e66:	eb 64                	jmp    c0005ecc <ff_uni2oem+0x90>
c0005e68:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e70:	77 5a                	ja     c0005ecc <ff_uni2oem+0x90>
c0005e72:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e76:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e7b:	75 4f                	jne    c0005ecc <ff_uni2oem+0x90>
c0005e7d:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e84:	eb 12                	jmp    c0005e98 <ff_uni2oem+0x5c>
c0005e86:	66 90                	xchg   ax,ax
c0005e88:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e8d:	83 c0 01             	add    eax,0x1
c0005e90:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e95:	8d 76 00             	lea    esi,[esi+0x0]
c0005e98:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e9d:	83 f8 7f             	cmp    eax,0x7f
c0005ea0:	77 1a                	ja     c0005ebc <ff_uni2oem+0x80>
c0005ea2:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea7:	8d 14 00             	lea    edx,[eax+eax*1]
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	01 d0                	add    eax,edx
c0005eb0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb3:	0f b7 c0             	movzx  eax,ax
c0005eb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eba:	75 cc                	jne    c0005e88 <ff_uni2oem+0x4c>
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 40 fa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002fa40
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f38:	01 d0                	add    eax,edx
c0005f3a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f42:	66 90                	xchg   ax,ax
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 a7 01 00 00    	ja     c0006108 <ff_wtoupper+0x1b8>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 40 f8 02 c0       	mov    eax,0xc002f840
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 80 f7 02 c0       	mov    eax,0xc002f780
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 50 01 00 00    	je     c00060fc <ff_wtoupper+0x1ac>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 3e 01 00 00    	jb     c00060fc <ff_wtoupper+0x1ac>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d4 00 00 00    	jge    c00060d8 <ff_wtoupper+0x188>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 e6 00 00 00    	ja     c00060f8 <ff_wtoupper+0x1a8>
c0006012:	8b 04 85 40 f7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd08c0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	8d 14 00             	lea    edx,[eax+eax*1]
c000602d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006031:	01 d0                	add    eax,edx
c0006033:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006036:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603b:	e9 94 00 00 00       	jmp    c00060d4 <ff_wtoupper+0x184>
c0006040:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006049:	89 d1                	mov    ecx,edx
c000604b:	29 c1                	sub    ecx,eax
c000604d:	89 c8                	mov    eax,ecx
c000604f:	83 e0 01             	and    eax,0x1
c0006052:	89 c2                	mov    edx,eax
c0006054:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006059:	29 d0                	sub    eax,edx
c000605b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006060:	eb 72                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006062:	66 90                	xchg   ax,ax
c0006064:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006069:	83 e8 10             	sub    eax,0x10
c000606c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006071:	eb 61                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006073:	90                   	nop
c0006074:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006079:	83 e8 20             	sub    eax,0x20
c000607c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006081:	eb 51                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006083:	90                   	nop
c0006084:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006089:	83 e8 30             	sub    eax,0x30
c000608c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006091:	eb 41                	jmp    c00060d4 <ff_wtoupper+0x184>
c0006093:	90                   	nop
c0006094:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006099:	83 e8 1a             	sub    eax,0x1a
c000609c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a1:	eb 31                	jmp    c00060d4 <ff_wtoupper+0x184>
c00060a3:	90                   	nop
c00060a4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060a9:	83 c0 08             	add    eax,0x8
c00060ac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b1:	eb 21                	jmp    c00060d4 <ff_wtoupper+0x184>
c00060b3:	90                   	nop
c00060b4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060b9:	83 e8 50             	sub    eax,0x50
c00060bc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c1:	eb 11                	jmp    c00060d4 <ff_wtoupper+0x184>
c00060c3:	90                   	nop
c00060c4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060c9:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060ce:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d3:	90                   	nop
c00060d4:	eb 22                	jmp    c00060f8 <ff_wtoupper+0x1a8>
c00060d6:	66 90                	xchg   ax,ax
c00060d8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060dd:	85 c0                	test   eax,eax
c00060df:	0f 85 a7 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ea:	d1 e0                	shl    eax,1
c00060ec:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f0:	e9 97 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f5:	8d 76 00             	lea    esi,[esi+0x0]
c00060f8:	90                   	nop
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006101:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006105:	8d 76 00             	lea    esi,[esi+0x0]
c0006108:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000610c:	83 c4 10             	add    esp,0x10
c000610f:	c3                   	ret    

c0006110 <utf2ucs>:
c0006110:	57                   	push   edi
c0006111:	31 c9                	xor    ecx,ecx
c0006113:	56                   	push   esi
c0006114:	89 d7                	mov    edi,edx
c0006116:	53                   	push   ebx
c0006117:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611b:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c000611f:	89 de                	mov    esi,ebx
c0006121:	c1 fe 08             	sar    esi,0x8
c0006124:	89 f2                	mov    edx,esi
c0006126:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006129:	41                   	inc    ecx
c000612a:	85 db                	test   ebx,ebx
c000612c:	75 e9                	jne    c0006117 <utf2ucs+0x7>
c000612e:	5b                   	pop    ebx
c000612f:	5e                   	pop    esi
c0006130:	5f                   	pop    edi
c0006131:	c3                   	ret    

c0006132 <ucs2utfn>:
c0006132:	83 e1 fe             	and    ecx,0xfffffffe
c0006135:	01 d1                	add    ecx,edx
c0006137:	39 d1                	cmp    ecx,edx
c0006139:	75 04                	jne    c000613f <ucs2utfn+0xd>
c000613b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000613e:	c3                   	ret    
c000613f:	57                   	push   edi
c0006140:	56                   	push   esi
c0006141:	53                   	push   ebx
c0006142:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006145:	83 c2 02             	add    edx,0x2
c0006148:	89 de                	mov    esi,ebx
c000614a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000614e:	c1 e6 08             	shl    esi,0x8
c0006151:	09 f3                	or     ebx,esi
c0006153:	83 fb 3b             	cmp    ebx,0x3b
c0006156:	74 50                	je     c00061a8 <ucs2utfn+0x76>
c0006158:	83 fb 7f             	cmp    ebx,0x7f
c000615b:	7f 05                	jg     c0006162 <ucs2utfn+0x30>
c000615d:	88 18                	mov    BYTE PTR [eax],bl
c000615f:	40                   	inc    eax
c0006160:	eb 42                	jmp    c00061a4 <ucs2utfn+0x72>
c0006162:	89 df                	mov    edi,ebx
c0006164:	89 de                	mov    esi,ebx
c0006166:	c1 fe 06             	sar    esi,0x6
c0006169:	83 e7 3f             	and    edi,0x3f
c000616c:	83 cf 80             	or     edi,0xffffff80
c000616f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006175:	7f 12                	jg     c0006189 <ucs2utfn+0x57>
c0006177:	83 ce c0             	or     esi,0xffffffc0
c000617a:	83 c0 02             	add    eax,0x2
c000617d:	89 f3                	mov    ebx,esi
c000617f:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006182:	89 fb                	mov    ebx,edi
c0006184:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0006187:	eb 1b                	jmp    c00061a4 <ucs2utfn+0x72>
c0006189:	c1 fb 0c             	sar    ebx,0xc
c000618c:	83 e6 3f             	and    esi,0x3f
c000618f:	83 cb e0             	or     ebx,0xffffffe0
c0006192:	83 ce 80             	or     esi,0xffffff80
c0006195:	88 18                	mov    BYTE PTR [eax],bl
c0006197:	89 f3                	mov    ebx,esi
c0006199:	83 c0 03             	add    eax,0x3
c000619c:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c000619f:	89 fb                	mov    ebx,edi
c00061a1:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a4:	39 d1                	cmp    ecx,edx
c00061a6:	75 9a                	jne    c0006142 <ucs2utfn+0x10>
c00061a8:	5b                   	pop    ebx
c00061a9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061ac:	5e                   	pop    esi
c00061ad:	5f                   	pop    edi
c00061ae:	c3                   	ret    

c00061af <isjoliet>:
c00061af:	31 d2                	xor    edx,edx
c00061b1:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b4:	75 26                	jne    c00061dc <isjoliet+0x2d>
c00061b6:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061ba:	75 20                	jne    c00061dc <isjoliet+0x2d>
c00061bc:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c0:	ba 02 00 00 00       	mov    edx,0x2
c00061c5:	83 f8 43             	cmp    eax,0x43
c00061c8:	74 12                	je     c00061dc <isjoliet+0x2d>
c00061ca:	83 f8 45             	cmp    eax,0x45
c00061cd:	ba 03 00 00 00       	mov    edx,0x3
c00061d2:	74 08                	je     c00061dc <isjoliet+0x2d>
c00061d4:	31 d2                	xor    edx,edx
c00061d6:	83 f8 40             	cmp    eax,0x40
c00061d9:	0f 94 c2             	sete   dl
c00061dc:	89 d0                	mov    eax,edx
c00061de:	c3                   	ret    

c00061df <htohl_32>:
c00061df:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e1:	c3                   	ret    

c00061e2 <iso_733>:
c00061e2:	eb fb                	jmp    c00061df <htohl_32>

c00061e4 <bgrad_cache>:
c00061e4:	83 fa 0e             	cmp    edx,0xe
c00061e7:	77 16                	ja     c00061ff <bgrad_cache+0x1b>
c00061e9:	53                   	push   ebx
c00061ea:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061ed:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f1:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f4:	42                   	inc    edx
c00061f5:	83 fa 0f             	cmp    edx,0xf
c00061f8:	75 f3                	jne    c00061ed <bgrad_cache+0x9>
c00061fa:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c00061fd:	5b                   	pop    ebx
c00061fe:	c3                   	ret    
c00061ff:	c3                   	ret    

c0006200 <ucscompare>:
c0006200:	55                   	push   ebp
c0006201:	57                   	push   edi
c0006202:	89 c7                	mov    edi,eax
c0006204:	56                   	push   esi
c0006205:	89 d6                	mov    esi,edx
c0006207:	53                   	push   ebx
c0006208:	31 d2                	xor    edx,edx
c000620a:	83 ec 1c             	sub    esp,0x1c
c000620d:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006211:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006216:	c1 e3 08             	shl    ebx,0x8
c0006219:	09 c3                	or     ebx,eax
c000621b:	39 ca                	cmp    edx,ecx
c000621d:	7d 42                	jge    c0006261 <ucscompare+0x61>
c000621f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000622b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006230:	c1 e0 08             	shl    eax,0x8
c0006233:	09 e8                	or     eax,ebp
c0006235:	83 f8 3b             	cmp    eax,0x3b
c0006238:	74 27                	je     c0006261 <ucscompare+0x61>
c000623a:	83 ec 0c             	sub    esp,0xc
c000623d:	50                   	push   eax
c000623e:	e8 3d a7 ff ff       	call   c0000980 <tolower>
c0006243:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006246:	89 c5                	mov    ebp,eax
c0006248:	e8 33 a7 ff ff       	call   c0000980 <tolower>
c000624d:	83 c4 10             	add    esp,0x10
c0006250:	39 c5                	cmp    ebp,eax
c0006252:	75 20                	jne    c0006274 <ucscompare+0x74>
c0006254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006258:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000625c:	83 c2 02             	add    edx,0x2
c000625f:	eb ac                	jmp    c000620d <ucscompare+0xd>
c0006261:	83 fb 2f             	cmp    ebx,0x2f
c0006264:	0f 95 c2             	setne  dl
c0006267:	31 c0                	xor    eax,eax
c0006269:	85 db                	test   ebx,ebx
c000626b:	0f 95 c0             	setne  al
c000626e:	21 d0                	and    eax,edx
c0006270:	f7 d8                	neg    eax
c0006272:	eb 03                	jmp    c0006277 <ucscompare+0x77>
c0006274:	83 c8 ff             	or     eax,0xffffffff
c0006277:	83 c4 1c             	add    esp,0x1c
c000627a:	5b                   	pop    ebx
c000627b:	5e                   	pop    esi
c000627c:	5f                   	pop    edi
c000627d:	5d                   	pop    ebp
c000627e:	c3                   	ret    

c000627f <fncompare>:
c000627f:	55                   	push   ebp
c0006280:	57                   	push   edi
c0006281:	89 c7                	mov    edi,eax
c0006283:	56                   	push   esi
c0006284:	89 ce                	mov    esi,ecx
c0006286:	53                   	push   ebx
c0006287:	31 db                	xor    ebx,ebx
c0006289:	83 ec 1c             	sub    esp,0x1c
c000628c:	39 d3                	cmp    ebx,edx
c000628e:	7d 45                	jge    c00062d5 <fncompare+0x56>
c0006290:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006294:	83 f8 3b             	cmp    eax,0x3b
c0006297:	74 3c                	je     c00062d5 <fncompare+0x56>
c0006299:	83 f8 2e             	cmp    eax,0x2e
c000629c:	75 0e                	jne    c00062ac <fncompare+0x2d>
c000629e:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a1:	39 d9                	cmp    ecx,ebx
c00062a3:	74 30                	je     c00062d5 <fncompare+0x56>
c00062a5:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062aa:	74 29                	je     c00062d5 <fncompare+0x56>
c00062ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b0:	83 ec 0c             	sub    esp,0xc
c00062b3:	50                   	push   eax
c00062b4:	e8 c7 a6 ff ff       	call   c0000980 <tolower>
c00062b9:	89 c5                	mov    ebp,eax
c00062bb:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c2:	e8 b9 a6 ff ff       	call   c0000980 <tolower>
c00062c7:	83 c4 10             	add    esp,0x10
c00062ca:	39 c5                	cmp    ebp,eax
c00062cc:	75 1e                	jne    c00062ec <fncompare+0x6d>
c00062ce:	43                   	inc    ebx
c00062cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d3:	eb b7                	jmp    c000628c <fncompare+0xd>
c00062d5:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062d9:	83 fa 2f             	cmp    edx,0x2f
c00062dc:	0f 95 c1             	setne  cl
c00062df:	31 c0                	xor    eax,eax
c00062e1:	85 d2                	test   edx,edx
c00062e3:	0f 95 c0             	setne  al
c00062e6:	21 c8                	and    eax,ecx
c00062e8:	f7 d8                	neg    eax
c00062ea:	eb 03                	jmp    c00062ef <fncompare+0x70>
c00062ec:	83 c8 ff             	or     eax,0xffffffff
c00062ef:	83 c4 1c             	add    esp,0x1c
c00062f2:	5b                   	pop    ebx
c00062f3:	5e                   	pop    esi
c00062f4:	5f                   	pop    edi
c00062f5:	5d                   	pop    ebp
c00062f6:	c3                   	ret    

c00062f7 <bclear_cache>:
c00062f7:	83 ec 18             	sub    esp,0x18
c00062fa:	68 40 fb 02 c0       	push   0xc002fb40
c00062ff:	e8 a8 30 02 00       	call   c00293ac <iso_kprintf>
c0006304:	83 c4 10             	add    esp,0x10
c0006307:	31 c0                	xor    eax,eax
c0006309:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006310:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006316:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c000631d:	40                   	inc    eax
c000631e:	83 f8 10             	cmp    eax,0x10
c0006321:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006327:	75 e0                	jne    c0006309 <bclear_cache+0x12>
c0006329:	83 c4 0c             	add    esp,0xc
c000632c:	c3                   	ret    

c000632d <bclear>:
c000632d:	eb c8                	jmp    c00062f7 <bclear_cache>

c000632f <iso_break_all>:
c000632f:	83 ec 18             	sub    esp,0x18
c0006332:	68 4e fb 02 c0       	push   0xc002fb4e
c0006337:	e8 70 30 02 00       	call   c00293ac <iso_kprintf>
c000633c:	83 c4 10             	add    esp,0x10
c000633f:	31 c0                	xor    eax,eax
c0006341:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000634b:	05 94 00 00 00       	add    eax,0x94
c0006350:	3d 40 09 00 00       	cmp    eax,0x940
c0006355:	75 ea                	jne    c0006341 <iso_break_all+0x12>
c0006357:	83 c4 0c             	add    esp,0xc
c000635a:	c3                   	ret    

c000635b <isoReadDiscSector>:
c000635b:	83 ec 0c             	sub    esp,0xc
c000635e:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006365:	50                   	push   eax
c0006366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	e8 d9 2f 02 00       	call   c0029350 <isoReadDiscSectorHelper>
c0006377:	83 c4 1c             	add    esp,0x1c
c000637a:	c3                   	ret    

c000637b <bread_cache>:
c000637b:	55                   	push   ebp
c000637c:	57                   	push   edi
c000637d:	89 d7                	mov    edi,edx
c000637f:	56                   	push   esi
c0006380:	ba 0f 00 00 00       	mov    edx,0xf
c0006385:	53                   	push   ebx
c0006386:	89 c6                	mov    esi,eax
c0006388:	83 ec 0c             	sub    esp,0xc
c000638b:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c000638e:	39 38                	cmp    DWORD PTR [eax],edi
c0006390:	74 3c                	je     c00063ce <bread_cache+0x53>
c0006392:	4a                   	dec    edx
c0006393:	83 fa ff             	cmp    edx,0xffffffff
c0006396:	75 f3                	jne    c000638b <bread_cache+0x10>
c0006398:	31 db                	xor    ebx,ebx
c000639a:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c000639d:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a0:	74 08                	je     c00063aa <bread_cache+0x2f>
c00063a2:	43                   	inc    ebx
c00063a3:	83 fb 10             	cmp    ebx,0x10
c00063a6:	75 f2                	jne    c000639a <bread_cache+0x1f>
c00063a8:	31 db                	xor    ebx,ebx
c00063aa:	50                   	push   eax
c00063ab:	6a 01                	push   0x1
c00063ad:	57                   	push   edi
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b4:	83 c0 04             	add    eax,0x4
c00063b7:	50                   	push   eax
c00063b8:	e8 9e ff ff ff       	call   c000635b <isoReadDiscSector>
c00063bd:	83 c4 10             	add    esp,0x10
c00063c0:	83 c9 ff             	or     ecx,0xffffffff
c00063c3:	85 c0                	test   eax,eax
c00063c5:	78 13                	js     c00063da <bread_cache+0x5f>
c00063c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ca:	89 da                	mov    edx,ebx
c00063cc:	89 38                	mov    DWORD PTR [eax],edi
c00063ce:	89 f0                	mov    eax,esi
c00063d0:	e8 0f fe ff ff       	call   c00061e4 <bgrad_cache>
c00063d5:	b9 0f 00 00 00       	mov    ecx,0xf
c00063da:	83 c4 0c             	add    esp,0xc
c00063dd:	89 c8                	mov    eax,ecx
c00063df:	5b                   	pop    ebx
c00063e0:	5e                   	pop    esi
c00063e1:	5f                   	pop    edi
c00063e2:	5d                   	pop    ebp
c00063e3:	c3                   	ret    

c00063e4 <biread>:
c00063e4:	89 c2                	mov    edx,eax
c00063e6:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00063eb:	eb 8e                	jmp    c000637b <bread_cache>

c00063ed <bdread>:
c00063ed:	89 c2                	mov    edx,eax
c00063ef:	b8 20 60 03 c0       	mov    eax,0xc0036020
c00063f4:	eb 85                	jmp    c000637b <bread_cache>

c00063f6 <strnicmp>:
c00063f6:	55                   	push   ebp
c00063f7:	57                   	push   edi
c00063f8:	31 ff                	xor    edi,edi
c00063fa:	56                   	push   esi
c00063fb:	53                   	push   ebx
c00063fc:	83 ec 0c             	sub    esp,0xc
c00063ff:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006403:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006407:	74 43                	je     c000644c <strnicmp+0x56>
c0006409:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000640d:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006411:	85 c0                	test   eax,eax
c0006413:	74 37                	je     c000644c <strnicmp+0x56>
c0006415:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006419:	85 d2                	test   edx,edx
c000641b:	74 2f                	je     c000644c <strnicmp+0x56>
c000641d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006420:	39 d0                	cmp    eax,edx
c0006422:	75 04                	jne    c0006428 <strnicmp+0x32>
c0006424:	89 ef                	mov    edi,ebp
c0006426:	eb db                	jmp    c0006403 <strnicmp+0xd>
c0006428:	83 ec 0c             	sub    esp,0xc
c000642b:	50                   	push   eax
c000642c:	e8 4f a5 ff ff       	call   c0000980 <tolower>
c0006431:	89 c3                	mov    ebx,eax
c0006433:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006437:	89 ef                	mov    edi,ebp
c0006439:	89 04 24             	mov    DWORD PTR [esp],eax
c000643c:	e8 3f a5 ff ff       	call   c0000980 <tolower>
c0006441:	83 c4 10             	add    esp,0x10
c0006444:	29 c3                	sub    ebx,eax
c0006446:	89 d8                	mov    eax,ebx
c0006448:	74 b9                	je     c0006403 <strnicmp+0xd>
c000644a:	eb 02                	jmp    c000644e <strnicmp+0x58>
c000644c:	31 c0                	xor    eax,eax
c000644e:	83 c4 0c             	add    esp,0xc
c0006451:	5b                   	pop    ebx
c0006452:	5e                   	pop    esi
c0006453:	5f                   	pop    edi
c0006454:	5d                   	pop    ebp
c0006455:	c3                   	ret    

c0006456 <find_object>:
c0006456:	55                   	push   ebp
c0006457:	57                   	push   edi
c0006458:	89 c7                	mov    edi,eax
c000645a:	56                   	push   esi
c000645b:	53                   	push   ebx
c000645c:	89 d3                	mov    ebx,edx
c000645e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006464:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006476:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000647a:	74 0b                	je     c0006487 <find_object+0x31>
c000647c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006480:	89 fa                	mov    edx,edi
c0006482:	e8 89 fc ff ff       	call   c0006110 <utf2ucs>
c0006487:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006493:	7e 11                	jle    c00064a6 <find_object+0x50>
c0006495:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006499:	e8 46 ff ff ff       	call   c00063e4 <biread>
c000649e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00064a2:	85 c0                	test   eax,eax
c00064a4:	79 07                	jns    c00064ad <find_object+0x57>
c00064a6:	31 db                	xor    ebx,ebx
c00064a8:	e9 47 01 00 00       	jmp    c00065f4 <find_object+0x19e>
c00064ad:	31 ed                	xor    ebp,ebp
c00064af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00064b3:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c00064ba:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c00064be:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064c1:	85 f6                	test   esi,esi
c00064c3:	75 0e                	jne    c00064d3 <find_object+0x7d>
c00064c5:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00064c9:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c00064d1:	eb bb                	jmp    c000648e <find_object+0x38>
c00064d3:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c00064d9:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00064dd:	85 c9                	test   ecx,ecx
c00064df:	89 d0                	mov    eax,edx
c00064e1:	74 2b                	je     c000650e <find_object+0xb8>
c00064e3:	8d 43 21             	lea    eax,[ebx+0x21]
c00064e6:	89 d1                	mov    ecx,edx
c00064e8:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064ec:	e8 0f fd ff ff       	call   c0006200 <ucscompare>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	0f 84 cd 00 00 00    	je     c00065c6 <find_object+0x170>
c00064f9:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00064fc:	01 c5                	add    ebp,eax
c00064fe:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006504:	7f bf                	jg     c00064c5 <find_object+0x6f>
c0006506:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c000650a:	7f a3                	jg     c00064af <find_object+0x59>
c000650c:	eb b7                	jmp    c00064c5 <find_object+0x6f>
c000650e:	29 d6                	sub    esi,edx
c0006510:	a8 01                	test   al,0x1
c0006512:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c0006516:	74 05                	je     c000651d <find_object+0xc7>
c0006518:	83 ee 21             	sub    esi,0x21
c000651b:	eb 6a                	jmp    c0006587 <find_object+0x131>
c000651d:	42                   	inc    edx
c000651e:	83 ee 22             	sub    esi,0x22
c0006521:	eb 64                	jmp    c0006587 <find_object+0x131>
c0006523:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006526:	48                   	dec    eax
c0006527:	3c 01                	cmp    al,0x1
c0006529:	77 61                	ja     c000658c <find_object+0x136>
c000652b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000652f:	50                   	push   eax
c0006530:	6a 02                	push   0x2
c0006532:	68 5d fb 02 c0       	push   0xc002fb5d
c0006537:	52                   	push   edx
c0006538:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000653c:	e8 cf a2 ff ff       	call   c0000810 <strncmp>
c0006541:	83 c4 10             	add    esp,0x10
c0006544:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006548:	85 c0                	test   eax,eax
c000654a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000654e:	75 2f                	jne    c000657f <find_object+0x129>
c0006550:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c0006554:	50                   	push   eax
c0006555:	8d 42 05             	lea    eax,[edx+0x5]
c0006558:	83 e9 05             	sub    ecx,0x5
c000655b:	51                   	push   ecx
c000655c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0006560:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006564:	50                   	push   eax
c0006565:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006569:	50                   	push   eax
c000656a:	e8 21 a1 ff ff       	call   c0000690 <strncpy>
c000656f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006573:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c0006578:	83 c4 10             	add    esp,0x10
c000657b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000657f:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006583:	29 c6                	sub    esi,eax
c0006585:	01 c2                	add    edx,eax
c0006587:	83 fe 03             	cmp    esi,0x3
c000658a:	7f 97                	jg     c0006523 <find_object+0xcd>
c000658c:	85 c9                	test   ecx,ecx
c000658e:	7e 40                	jle    c00065d0 <find_object+0x17a>
c0006590:	51                   	push   ecx
c0006591:	51                   	push   ecx
c0006592:	6a 2f                	push   0x2f
c0006594:	57                   	push   edi
c0006595:	e8 36 a2 ff ff       	call   c00007d0 <strchr>
c000659a:	83 c4 10             	add    esp,0x10
c000659d:	85 c0                	test   eax,eax
c000659f:	74 04                	je     c00065a5 <find_object+0x14f>
c00065a1:	29 f8                	sub    eax,edi
c00065a3:	eb 0c                	jmp    c00065b1 <find_object+0x15b>
c00065a5:	83 ec 0c             	sub    esp,0xc
c00065a8:	57                   	push   edi
c00065a9:	e8 d2 9f ff ff       	call   c0000580 <strlen>
c00065ae:	83 c4 10             	add    esp,0x10
c00065b1:	52                   	push   edx
c00065b2:	50                   	push   eax
c00065b3:	57                   	push   edi
c00065b4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b8:	50                   	push   eax
c00065b9:	e8 38 fe ff ff       	call   c00063f6 <strnicmp>
c00065be:	83 c4 10             	add    esp,0x10
c00065c1:	e9 2b ff ff ff       	jmp    c00064f1 <find_object+0x9b>
c00065c6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065ca:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00065ce:	eb 1e                	jmp    c00065ee <find_object+0x198>
c00065d0:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d4:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d7:	89 f9                	mov    ecx,edi
c00065d9:	e8 a1 fc ff ff       	call   c000627f <fncompare>
c00065de:	85 c0                	test   eax,eax
c00065e0:	0f 85 13 ff ff ff    	jne    c00064f9 <find_object+0xa3>
c00065e6:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065ea:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00065ee:	0f 85 05 ff ff ff    	jne    c00064f9 <find_object+0xa3>
c00065f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00065fa:	89 d8                	mov    eax,ebx
c00065fc:	5b                   	pop    ebx
c00065fd:	5e                   	pop    esi
c00065fe:	5f                   	pop    edi
c00065ff:	5d                   	pop    ebp
c0006600:	c3                   	ret    

c0006601 <find_object_path>:
c0006601:	55                   	push   ebp
c0006602:	57                   	push   edi
c0006603:	89 d7                	mov    edi,edx
c0006605:	56                   	push   esi
c0006606:	89 c6                	mov    esi,eax
c0006608:	53                   	push   ebx
c0006609:	89 cb                	mov    ebx,ecx
c000660b:	83 ec 0c             	sub    esp,0xc
c000660e:	50                   	push   eax
c000660f:	50                   	push   eax
c0006610:	6a 2f                	push   0x2f
c0006612:	56                   	push   esi
c0006613:	e8 b8 a1 ff ff       	call   c00007d0 <strchr>
c0006618:	83 c4 10             	add    esp,0x10
c000661b:	85 c0                	test   eax,eax
c000661d:	89 c5                	mov    ebp,eax
c000661f:	74 3a                	je     c000665b <find_object_path+0x5a>
c0006621:	39 ee                	cmp    esi,ebp
c0006623:	74 31                	je     c0006656 <find_object_path+0x55>
c0006625:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006628:	e8 b5 fb ff ff       	call   c00061e2 <iso_733>
c000662d:	89 c2                	mov    edx,eax
c000662f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006632:	e8 ab fb ff ff       	call   c00061e2 <iso_733>
c0006637:	83 ec 0c             	sub    esp,0xc
c000663a:	52                   	push   edx
c000663b:	89 c1                	mov    ecx,eax
c000663d:	ba 01 00 00 00       	mov    edx,0x1
c0006642:	89 f0                	mov    eax,esi
c0006644:	e8 0d fe ff ff       	call   c0006456 <find_object>
c0006649:	83 c4 10             	add    esp,0x10
c000664c:	85 c0                	test   eax,eax
c000664e:	89 c3                	mov    ebx,eax
c0006650:	75 04                	jne    c0006656 <find_object_path+0x55>
c0006652:	31 db                	xor    ebx,ebx
c0006654:	eb 36                	jmp    c000668c <find_object_path+0x8b>
c0006656:	8d 75 01             	lea    esi,[ebp+0x1]
c0006659:	eb b3                	jmp    c000660e <find_object_path+0xd>
c000665b:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000665e:	74 28                	je     c0006688 <find_object_path+0x87>
c0006660:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006663:	e8 7a fb ff ff       	call   c00061e2 <iso_733>
c0006668:	89 c2                	mov    edx,eax
c000666a:	8d 43 02             	lea    eax,[ebx+0x2]
c000666d:	e8 70 fb ff ff       	call   c00061e2 <iso_733>
c0006672:	83 ec 0c             	sub    esp,0xc
c0006675:	52                   	push   edx
c0006676:	89 c1                	mov    ecx,eax
c0006678:	89 fa                	mov    edx,edi
c000667a:	89 f0                	mov    eax,esi
c000667c:	e8 d5 fd ff ff       	call   c0006456 <find_object>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	eb 04                	jmp    c000668c <find_object_path+0x8b>
c0006688:	85 ff                	test   edi,edi
c000668a:	74 c6                	je     c0006652 <find_object_path+0x51>
c000668c:	83 c4 0c             	add    esp,0xc
c000668f:	89 d8                	mov    eax,ebx
c0006691:	5b                   	pop    ebx
c0006692:	5e                   	pop    esi
c0006693:	5f                   	pop    edi
c0006694:	5d                   	pop    ebp
c0006695:	c3                   	ret    

c0006696 <stricmp>:
c0006696:	57                   	push   edi
c0006697:	56                   	push   esi
c0006698:	31 f6                	xor    esi,esi
c000669a:	53                   	push   ebx
c000669b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000669f:	83 ec 0c             	sub    esp,0xc
c00066a2:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066aa:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066ae:	46                   	inc    esi
c00066af:	50                   	push   eax
c00066b0:	e8 ab a2 ff ff       	call   c0000960 <toupper>
c00066b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00066b8:	e8 c3 a2 ff ff       	call   c0000980 <tolower>
c00066bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066c0:	89 c3                	mov    ebx,eax
c00066c2:	e8 99 a2 ff ff       	call   c0000960 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 b1 a2 ff ff       	call   c0000980 <tolower>
c00066cf:	83 c4 10             	add    esp,0x10
c00066d2:	39 c3                	cmp    ebx,eax
c00066d4:	75 04                	jne    c00066da <stricmp+0x44>
c00066d6:	85 db                	test   ebx,ebx
c00066d8:	75 c1                	jne    c000669b <stricmp+0x5>
c00066da:	29 c3                	sub    ebx,eax
c00066dc:	89 d8                	mov    eax,ebx
c00066de:	5b                   	pop    ebx
c00066df:	5e                   	pop    esi
c00066e0:	5f                   	pop    edi
c00066e1:	c3                   	ret    

c00066e2 <iso_open>:
c00066e2:	57                   	push   edi
c00066e3:	31 c0                	xor    eax,eax
c00066e5:	56                   	push   esi
c00066e6:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c00066eb:	53                   	push   ebx
c00066ec:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00066f1:	0f 95 c0             	setne  al
c00066f4:	89 c2                	mov    edx,eax
c00066f6:	89 c6                	mov    esi,eax
c00066f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00066fc:	e8 00 ff ff ff       	call   c0006601 <find_object_path>
c0006701:	83 ca ff             	or     edx,0xffffffff
c0006704:	85 c0                	test   eax,eax
c0006706:	74 5e                	je     c0006766 <iso_open+0x84>
c0006708:	89 c1                	mov    ecx,eax
c000670a:	31 d2                	xor    edx,edx
c000670c:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006712:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006719:	75 42                	jne    c000675d <iso_open+0x7b>
c000671b:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006725:	8d 41 02             	lea    eax,[ecx+0x2]
c0006728:	e8 b5 fa ff ff       	call   c00061e2 <iso_733>
c000672d:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006733:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c000673d:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006743:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006746:	e8 97 fa ff ff       	call   c00061e2 <iso_733>
c000674b:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006755:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000675b:	eb 09                	jmp    c0006766 <iso_open+0x84>
c000675d:	42                   	inc    edx
c000675e:	83 fa 10             	cmp    edx,0x10
c0006761:	75 a9                	jne    c000670c <iso_open+0x2a>
c0006763:	83 ca ff             	or     edx,0xffffffff
c0006766:	5b                   	pop    ebx
c0006767:	89 d0                	mov    eax,edx
c0006769:	5e                   	pop    esi
c000676a:	5f                   	pop    edi
c000676b:	c3                   	ret    

c000676c <iso_close>:
c000676c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006770:	83 f8 0f             	cmp    eax,0xf
c0006773:	7f 10                	jg     c0006785 <iso_close+0x19>
c0006775:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000677b:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c0006785:	e9 6d fb ff ff       	jmp    c00062f7 <bclear_cache>

c000678a <iso_read>:
c000678a:	55                   	push   ebp
c000678b:	57                   	push   edi
c000678c:	56                   	push   esi
c000678d:	53                   	push   ebx
c000678e:	83 ec 1c             	sub    esp,0x1c
c0006791:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0006795:	83 fd 0f             	cmp    ebp,0xf
c0006798:	7e 0a                	jle    c00067a4 <iso_read+0x1a>
c000679a:	83 c8 ff             	or     eax,0xffffffff
c000679d:	89 c2                	mov    edx,eax
c000679f:	e9 f4 00 00 00       	jmp    c0006898 <iso_read+0x10e>
c00067a4:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067aa:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00067b1:	74 e7                	je     c000679a <iso_read+0x10>
c00067b3:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c00067b9:	85 d2                	test   edx,edx
c00067bb:	75 dd                	jne    c000679a <iso_read+0x10>
c00067bd:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067c2:	0f 84 cd 00 00 00    	je     c0006895 <iso_read+0x10b>
c00067c8:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067ce:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c00067d4:	29 c3                	sub    ebx,eax
c00067d6:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00067da:	89 d9                	mov    ecx,ebx
c00067dc:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c00067e1:	85 c9                	test   ecx,ecx
c00067e3:	0f 84 ac 00 00 00    	je     c0006895 <iso_read+0x10b>
c00067e9:	89 c6                	mov    esi,eax
c00067eb:	bb 00 08 00 00       	mov    ebx,0x800
c00067f0:	c1 e8 0b             	shr    eax,0xb
c00067f3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00067f9:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c00067ff:	29 f3                	sub    ebx,esi
c0006801:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006807:	75 3f                	jne    c0006848 <iso_read+0xbe>
c0006809:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000680f:	7e 37                	jle    c0006848 <iso_read+0xbe>
c0006811:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006817:	be 20 00 00 00       	mov    esi,0x20
c000681c:	7f 05                	jg     c0006823 <iso_read+0x99>
c000681e:	89 ce                	mov    esi,ecx
c0006820:	c1 fe 0b             	sar    esi,0xb
c0006823:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006827:	89 f3                	mov    ebx,esi
c0006829:	52                   	push   edx
c000682a:	56                   	push   esi
c000682b:	50                   	push   eax
c000682c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006830:	c1 e3 0b             	shl    ebx,0xb
c0006833:	e8 23 fb ff ff       	call   c000635b <isoReadDiscSector>
c0006838:	83 c4 10             	add    esp,0x10
c000683b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000683f:	85 c0                	test   eax,eax
c0006841:	7f 3d                	jg     c0006880 <iso_read+0xf6>
c0006843:	e9 52 ff ff ff       	jmp    c000679a <iso_read+0x10>
c0006848:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000684c:	39 d9                	cmp    ecx,ebx
c000684e:	0f 4e d9             	cmovle ebx,ecx
c0006851:	e8 97 fb ff ff       	call   c00063ed <bdread>
c0006856:	85 c0                	test   eax,eax
c0006858:	0f 88 3c ff ff ff    	js     c000679a <iso_read+0x10>
c000685e:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006865:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000686b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000686f:	25 ff 07 00 00       	and    eax,0x7ff
c0006874:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006878:	89 d9                	mov    ecx,ebx
c000687a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000687c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006880:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006884:	01 da                	add    edx,ebx
c0006886:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c000688c:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c0006890:	e9 28 ff ff ff       	jmp    c00067bd <iso_read+0x33>
c0006895:	89 d0                	mov    eax,edx
c0006897:	99                   	cdq    
c0006898:	83 c4 1c             	add    esp,0x1c
c000689b:	5b                   	pop    ebx
c000689c:	5e                   	pop    esi
c000689d:	5f                   	pop    edi
c000689e:	5d                   	pop    ebp
c000689f:	c3                   	ret    

c00068a0 <iso_seek>:
c00068a0:	55                   	push   ebp
c00068a1:	83 c8 ff             	or     eax,0xffffffff
c00068a4:	57                   	push   edi
c00068a5:	89 c2                	mov    edx,eax
c00068a7:	56                   	push   esi
c00068a8:	53                   	push   ebx
c00068a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068b5:	83 fe 0f             	cmp    esi,0xf
c00068b8:	7f 65                	jg     c000691f <iso_seek+0x7f>
c00068ba:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068c0:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00068c7:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00068cd:	74 50                	je     c000691f <iso_seek+0x7f>
c00068cf:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068d6:	75 47                	jne    c000691f <iso_seek+0x7f>
c00068d8:	83 fb 01             	cmp    ebx,0x1
c00068db:	74 0e                	je     c00068eb <iso_seek+0x4b>
c00068dd:	83 fb 02             	cmp    ebx,0x2
c00068e0:	74 0e                	je     c00068f0 <iso_seek+0x50>
c00068e2:	85 db                	test   ebx,ebx
c00068e4:	75 39                	jne    c000691f <iso_seek+0x7f>
c00068e6:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068e9:	eb 0d                	jmp    c00068f8 <iso_seek+0x58>
c00068eb:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c00068ee:	eb 08                	jmp    c00068f8 <iso_seek+0x58>
c00068f0:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00068f3:	01 f8                	add    eax,edi
c00068f5:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00068f8:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c00068fe:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006904:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006909:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000690c:	76 03                	jbe    c0006911 <iso_seek+0x71>
c000690e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006911:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006917:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c000691d:	31 d2                	xor    edx,edx
c000691f:	5b                   	pop    ebx
c0006920:	5e                   	pop    esi
c0006921:	5f                   	pop    edi
c0006922:	5d                   	pop    ebp
c0006923:	c3                   	ret    

c0006924 <iso_tell>:
c0006924:	53                   	push   ebx
c0006925:	83 c8 ff             	or     eax,0xffffffff
c0006928:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000692c:	89 c2                	mov    edx,eax
c000692e:	83 f9 0f             	cmp    ecx,0xf
c0006931:	7f 20                	jg     c0006953 <iso_tell+0x2f>
c0006933:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006939:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006940:	74 11                	je     c0006953 <iso_tell+0x2f>
c0006942:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006949:	75 08                	jne    c0006953 <iso_tell+0x2f>
c000694b:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006951:	31 d2                	xor    edx,edx
c0006953:	5b                   	pop    ebx
c0006954:	c3                   	ret    

c0006955 <iso_total>:
c0006955:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006959:	83 c8 ff             	or     eax,0xffffffff
c000695c:	83 fa 0f             	cmp    edx,0xf
c000695f:	7f 1e                	jg     c000697f <iso_total+0x2a>
c0006961:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006967:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c000696e:	74 0f                	je     c000697f <iso_total+0x2a>
c0006970:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c0006977:	75 06                	jne    c000697f <iso_total+0x2a>
c0006979:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c000697f:	c3                   	ret    

c0006980 <fn_postprocess>:
c0006980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006984:	89 d0                	mov    eax,edx
c0006986:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0006989:	85 c9                	test   ecx,ecx
c000698b:	74 08                	je     c0006995 <fn_postprocess+0x15>
c000698d:	83 f9 3b             	cmp    ecx,0x3b
c0006990:	74 03                	je     c0006995 <fn_postprocess+0x15>
c0006992:	40                   	inc    eax
c0006993:	eb f1                	jmp    c0006986 <fn_postprocess+0x6>
c0006995:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006998:	39 d0                	cmp    eax,edx
c000699a:	76 0a                	jbe    c00069a6 <fn_postprocess+0x26>
c000699c:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069a0:	75 04                	jne    c00069a6 <fn_postprocess+0x26>
c00069a2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069a6:	c3                   	ret    

c00069a7 <iso_readdir>:
c00069a7:	55                   	push   ebp
c00069a8:	57                   	push   edi
c00069a9:	56                   	push   esi
c00069aa:	53                   	push   ebx
c00069ab:	83 ec 1c             	sub    esp,0x1c
c00069ae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069b2:	83 fb 0f             	cmp    ebx,0xf
c00069b5:	7f 28                	jg     c00069df <iso_readdir+0x38>
c00069b7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069bd:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00069c4:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00069ca:	74 13                	je     c00069df <iso_readdir+0x38>
c00069cc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069d0:	74 0d                	je     c00069df <iso_readdir+0x38>
c00069d2:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069d9:	0f 84 b1 00 00 00    	je     c0006a90 <iso_readdir+0xe9>
c00069df:	83 ec 0c             	sub    esp,0xc
c00069e2:	68 60 fb 02 c0       	push   0xc002fb60
c00069e7:	e8 c0 29 02 00       	call   c00293ac <iso_kprintf>
c00069ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00069ef:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00069f5:	e8 ce 29 02 00       	call   c00293c8 <iso_kprintfd>
c00069fa:	c7 04 24 65 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb65
c0006a01:	e8 a6 29 02 00       	call   c00293ac <iso_kprintf>
c0006a06:	58                   	pop    eax
c0006a07:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006a0d:	e8 b6 29 02 00       	call   c00293c8 <iso_kprintfd>
c0006a12:	c7 04 24 6b fb 02 c0 	mov    DWORD PTR [esp],0xc002fb6b
c0006a19:	e8 8e 29 02 00       	call   c00293ac <iso_kprintf>
c0006a1e:	58                   	pop    eax
c0006a1f:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006a25:	e8 9e 29 02 00       	call   c00293c8 <iso_kprintfd>
c0006a2a:	c7 04 24 71 fb 02 c0 	mov    DWORD PTR [esp],0xc002fb71
c0006a31:	e8 76 29 02 00       	call   c00293ac <iso_kprintf>
c0006a36:	58                   	pop    eax
c0006a37:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006a3d:	e8 86 29 02 00       	call   c00293c8 <iso_kprintfd>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	eb 42                	jmp    c0006a89 <iso_readdir+0xe2>
c0006a47:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a4a:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a51:	89 d1                	mov    ecx,edx
c0006a53:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a59:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a5d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a60:	75 35                	jne    c0006a97 <iso_readdir+0xf0>
c0006a62:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a68:	81 c2 00 08 00 00    	add    edx,0x800
c0006a6e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a71:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a74:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a77:	73 1e                	jae    c0006a97 <iso_readdir+0xf0>
c0006a79:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a7b:	c1 ea 0b             	shr    edx,0xb
c0006a7e:	01 d0                	add    eax,edx
c0006a80:	e8 5f f9 ff ff       	call   c00063e4 <biread>
c0006a85:	85 c0                	test   eax,eax
c0006a87:	79 be                	jns    c0006a47 <iso_readdir+0xa0>
c0006a89:	31 c0                	xor    eax,eax
c0006a8b:	e9 6a 01 00 00       	jmp    c0006bfa <iso_readdir+0x253>
c0006a90:	31 f6                	xor    esi,esi
c0006a92:	83 c8 ff             	or     eax,0xffffffff
c0006a95:	eb da                	jmp    c0006a71 <iso_readdir+0xca>
c0006a97:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006a9d:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c0006aa3:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c0006aa9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006aac:	73 db                	jae    c0006a89 <iso_readdir+0xe2>
c0006aae:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ab2:	75 34                	jne    c0006ae8 <iso_readdir+0x141>
c0006ab4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006ab8:	75 2e                	jne    c0006ae8 <iso_readdir+0x141>
c0006aba:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006abd:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006ac4:	01 f9                	add    ecx,edi
c0006ac6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006ac9:	89 c8                	mov    eax,ecx
c0006acb:	25 ff 07 00 00       	and    eax,0x7ff
c0006ad0:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ad5:	01 c8                	add    eax,ecx
c0006ad7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006ada:	25 ff 07 00 00       	and    eax,0x7ff
c0006adf:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006ae3:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006ae6:	74 a1                	je     c0006a89 <iso_readdir+0xe2>
c0006ae8:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006aee:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006af2:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006af9:	8d 56 21             	lea    edx,[esi+0x21]
c0006afc:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c0006b02:	74 0c                	je     c0006b10 <iso_readdir+0x169>
c0006b04:	89 e8                	mov    eax,ebp
c0006b06:	e8 27 f6 ff ff       	call   c0006132 <ucs2utfn>
c0006b0b:	e9 b1 00 00 00       	jmp    c0006bc1 <iso_readdir+0x21a>
c0006b10:	50                   	push   eax
c0006b11:	51                   	push   ecx
c0006b12:	52                   	push   edx
c0006b13:	55                   	push   ebp
c0006b14:	e8 77 9b ff ff       	call   c0000690 <strncpy>
c0006b19:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b1d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b20:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006b28:	e8 53 fe ff ff       	call   c0006980 <fn_postprocess>
c0006b2d:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b31:	83 c4 10             	add    esp,0x10
c0006b34:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b37:	89 d1                	mov    ecx,edx
c0006b39:	29 d0                	sub    eax,edx
c0006b3b:	80 e1 01             	and    cl,0x1
c0006b3e:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006b42:	74 05                	je     c0006b49 <iso_readdir+0x1a2>
c0006b44:	83 e8 21             	sub    eax,0x21
c0006b47:	eb 04                	jmp    c0006b4d <iso_readdir+0x1a6>
c0006b49:	42                   	inc    edx
c0006b4a:	83 e8 22             	sub    eax,0x22
c0006b4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b51:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b5b:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b60:	7e 5f                	jle    c0006bc1 <iso_readdir+0x21a>
c0006b62:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006b65:	48                   	dec    eax
c0006b66:	3c 01                	cmp    al,0x1
c0006b68:	77 57                	ja     c0006bc1 <iso_readdir+0x21a>
c0006b6a:	51                   	push   ecx
c0006b6b:	6a 02                	push   0x2
c0006b6d:	68 5d fb 02 c0       	push   0xc002fb5d
c0006b72:	52                   	push   edx
c0006b73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006b77:	e8 94 9c ff ff       	call   c0000810 <strncmp>
c0006b7c:	83 c4 10             	add    esp,0x10
c0006b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006b83:	85 c0                	test   eax,eax
c0006b85:	75 2e                	jne    c0006bb5 <iso_readdir+0x20e>
c0006b87:	50                   	push   eax
c0006b88:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006b8c:	83 e8 05             	sub    eax,0x5
c0006b8f:	50                   	push   eax
c0006b90:	8d 42 05             	lea    eax,[edx+0x5]
c0006b93:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006b97:	50                   	push   eax
c0006b98:	55                   	push   ebp
c0006b99:	e8 f2 9a ff ff       	call   c0000690 <strncpy>
c0006b9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006ba2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006ba6:	83 c4 10             	add    esp,0x10
c0006ba9:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bad:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006bb5:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006bb9:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bbd:	01 c2                	add    edx,eax
c0006bbf:	eb 9a                	jmp    c0006b5b <iso_readdir+0x1b4>
c0006bc1:	83 c8 ff             	or     eax,0xffffffff
c0006bc4:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bc8:	89 c2                	mov    edx,eax
c0006bca:	75 0a                	jne    c0006bd6 <iso_readdir+0x22f>
c0006bcc:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bcf:	e8 0e f6 ff ff       	call   c00061e2 <iso_733>
c0006bd4:	31 d2                	xor    edx,edx
c0006bd6:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006bdc:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006be2:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006be8:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006bee:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bf1:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006bf4:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006bfa:	83 c4 1c             	add    esp,0x1c
c0006bfd:	5b                   	pop    ebx
c0006bfe:	5e                   	pop    esi
c0006bff:	5f                   	pop    edi
c0006c00:	5d                   	pop    ebp
c0006c01:	c3                   	ret    

c0006c02 <iso_reset>:
c0006c02:	83 ec 18             	sub    esp,0x18
c0006c05:	68 7a fb 02 c0       	push   0xc002fb7a
c0006c0a:	e8 9d 27 02 00       	call   c00293ac <iso_kprintf>
c0006c0f:	e8 1b f7 ff ff       	call   c000632f <iso_break_all>
c0006c14:	e8 14 f7 ff ff       	call   c000632d <bclear>
c0006c19:	31 c0                	xor    eax,eax
c0006c1b:	83 c4 1c             	add    esp,0x1c
c0006c1e:	c3                   	ret    

c0006c1f <init_percd>:
c0006c1f:	57                   	push   edi
c0006c20:	56                   	push   esi
c0006c21:	53                   	push   ebx
c0006c22:	bb 01 00 00 00       	mov    ebx,0x1
c0006c27:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006c2b:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006c30:	e8 cd ff ff ff       	call   c0006c02 <iso_reset>
c0006c35:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006c3f:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006c44:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c48:	e8 97 f7 ff ff       	call   c00063e4 <biread>
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	89 c6                	mov    esi,eax
c0006c51:	0f 88 ba 00 00 00    	js     c0006d11 <init_percd+0xf2>
c0006c57:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006c5e:	52                   	push   edx
c0006c5f:	6a 06                	push   0x6
c0006c61:	68 85 fb 02 c0       	push   0xc002fb85
c0006c66:	83 c0 04             	add    eax,0x4
c0006c69:	50                   	push   eax
c0006c6a:	e8 11 97 ff ff       	call   c0000380 <memcmp>
c0006c6f:	83 c4 10             	add    esp,0x10
c0006c72:	85 c0                	test   eax,eax
c0006c74:	74 08                	je     c0006c7e <init_percd+0x5f>
c0006c76:	43                   	inc    ebx
c0006c77:	83 fb 04             	cmp    ebx,0x4
c0006c7a:	75 c3                	jne    c0006c3f <init_percd+0x20>
c0006c7c:	eb 1a                	jmp    c0006c98 <init_percd+0x79>
c0006c7e:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c85:	83 c0 5c             	add    eax,0x5c
c0006c88:	e8 22 f5 ff ff       	call   c00061af <isjoliet>
c0006c8d:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006c92:	85 c0                	test   eax,eax
c0006c94:	74 e0                	je     c0006c76 <init_percd+0x57>
c0006c96:	eb 3e                	jmp    c0006cd6 <init_percd+0xb7>
c0006c98:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006c9f:	75 35                	jne    c0006cd6 <init_percd+0xb7>
c0006ca1:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006ca6:	83 c0 10             	add    eax,0x10
c0006ca9:	e8 36 f7 ff ff       	call   c00063e4 <biread>
c0006cae:	85 c0                	test   eax,eax
c0006cb0:	89 c6                	mov    esi,eax
c0006cb2:	78 5f                	js     c0006d13 <init_percd+0xf4>
c0006cb4:	50                   	push   eax
c0006cb5:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006cbc:	83 cb ff             	or     ebx,0xffffffff
c0006cbf:	6a 06                	push   0x6
c0006cc1:	68 8c fb 02 c0       	push   0xc002fb8c
c0006cc6:	83 c0 04             	add    eax,0x4
c0006cc9:	50                   	push   eax
c0006cca:	e8 b1 96 ff ff       	call   c0000380 <memcmp>
c0006ccf:	83 c4 10             	add    esp,0x10
c0006cd2:	85 c0                	test   eax,eax
c0006cd4:	75 3d                	jne    c0006d13 <init_percd+0xf4>
c0006cd6:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006cdd:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006ce2:	b9 22 00 00 00       	mov    ecx,0x22
c0006ce7:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006ced:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cef:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006cf4:	31 db                	xor    ebx,ebx
c0006cf6:	e8 e7 f4 ff ff       	call   c00061e2 <iso_733>
c0006cfb:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006d00:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006d05:	e8 d8 f4 ff ff       	call   c00061e2 <iso_733>
c0006d0a:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006d0f:	eb 02                	jmp    c0006d13 <init_percd+0xf4>
c0006d11:	89 c3                	mov    ebx,eax
c0006d13:	89 d8                	mov    eax,ebx
c0006d15:	5b                   	pop    ebx
c0006d16:	5e                   	pop    esi
c0006d17:	5f                   	pop    edi
c0006d18:	c3                   	ret    

c0006d19 <iso_ioctl>:
c0006d19:	83 ec 18             	sub    esp,0x18
c0006d1c:	68 93 fb 02 c0       	push   0xc002fb93
c0006d21:	e8 86 26 02 00       	call   c00293ac <iso_kprintf>
c0006d26:	e8 d7 fe ff ff       	call   c0006c02 <iso_reset>
c0006d2b:	31 c0                	xor    eax,eax
c0006d2d:	83 c4 1c             	add    esp,0x1c
c0006d30:	c3                   	ret    

c0006d31 <fs_iso9660_init>:
c0006d31:	53                   	push   ebx
c0006d32:	31 db                	xor    ebx,ebx
c0006d34:	83 ec 14             	sub    esp,0x14
c0006d37:	68 9e fb 02 c0       	push   0xc002fb9e
c0006d3c:	e8 6b 26 02 00       	call   c00293ac <iso_kprintf>
c0006d41:	83 c4 0c             	add    esp,0xc
c0006d44:	68 40 09 00 00       	push   0x940
c0006d49:	6a 00                	push   0x0
c0006d4b:	68 20 6d 03 c0       	push   0xc0036d20
c0006d50:	e8 9b 97 ff ff       	call   c00004f0 <memset>
c0006d55:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006d5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d66:	e8 30 f7 00 00       	call   c001649b <malloc>
c0006d6b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d72:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006d77:	e8 1f f7 00 00       	call   c001649b <malloc>
c0006d7c:	83 c4 10             	add    esp,0x10
c0006d7f:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006d84:	83 ec 0c             	sub    esp,0xc
c0006d87:	68 04 08 00 00       	push   0x804
c0006d8c:	e8 0a f7 00 00       	call   c001649b <malloc>
c0006d91:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006d98:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d9e:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006da5:	e8 f1 f6 00 00       	call   c001649b <malloc>
c0006daa:	83 c4 10             	add    esp,0x10
c0006dad:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006db4:	43                   	inc    ebx
c0006db5:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dbb:	83 fb 10             	cmp    ebx,0x10
c0006dbe:	75 c4                	jne    c0006d84 <fs_iso9660_init+0x53>
c0006dc0:	83 c4 08             	add    esp,0x8
c0006dc3:	31 c0                	xor    eax,eax
c0006dc5:	5b                   	pop    ebx
c0006dc6:	c3                   	ret    

c0006dc7 <fs_iso9660_shutdown>:
c0006dc7:	53                   	push   ebx
c0006dc8:	31 db                	xor    ebx,ebx
c0006dca:	83 ec 08             	sub    esp,0x8
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006dd7:	e8 df f6 00 00       	call   c00164bb <free>
c0006ddc:	58                   	pop    eax
c0006ddd:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006de4:	43                   	inc    ebx
c0006de5:	e8 d1 f6 00 00       	call   c00164bb <free>
c0006dea:	83 c4 10             	add    esp,0x10
c0006ded:	83 fb 10             	cmp    ebx,0x10
c0006df0:	75 db                	jne    c0006dcd <fs_iso9660_shutdown+0x6>
c0006df2:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006df7:	85 c0                	test   eax,eax
c0006df9:	74 0c                	je     c0006e07 <fs_iso9660_shutdown+0x40>
c0006dfb:	83 ec 0c             	sub    esp,0xc
c0006dfe:	50                   	push   eax
c0006dff:	e8 b7 f6 00 00       	call   c00164bb <free>
c0006e04:	83 c4 10             	add    esp,0x10
c0006e07:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006e0c:	85 c0                	test   eax,eax
c0006e0e:	74 0c                	je     c0006e1c <fs_iso9660_shutdown+0x55>
c0006e10:	83 ec 0c             	sub    esp,0xc
c0006e13:	50                   	push   eax
c0006e14:	e8 a2 f6 00 00       	call   c00164bb <free>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006e26:	31 c0                	xor    eax,eax
c0006e28:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006e32:	83 c4 08             	add    esp,0x8
c0006e35:	5b                   	pop    ebx
c0006e36:	c3                   	ret    
c0006e37:	90                   	nop

c0006e38 <lwip_init>:
c0006e38:	83 ec 0c             	sub    esp,0xc
c0006e3b:	e8 5c 2c 00 00       	call   c0009a9c <stats_init>
c0006e40:	e8 8b 9f ff ff       	call   c0000dd0 <sys_init>
c0006e45:	e8 ae 01 00 00       	call   c0006ff8 <mem_init>
c0006e4a:	e8 09 0a 00 00       	call   c0007858 <memp_init>
c0006e4f:	e8 ec 0c 00 00       	call   c0007b40 <netif_init>
c0006e54:	e8 17 9e ff ff       	call   c0000c70 <lwip_socket_init>
c0006e59:	e8 06 9e 00 00       	call   c0010c64 <sys_timeouts_init>
c0006e5e:	90                   	nop
c0006e5f:	83 c4 0c             	add    esp,0xc
c0006e62:	c3                   	ret    
c0006e63:	90                   	nop

c0006e64 <plug_holes>:
c0006e64:	83 ec 1c             	sub    esp,0x1c
c0006e67:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e6c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e70:	73 16                	jae    c0006e88 <plug_holes+0x24>
c0006e72:	83 ec 08             	sub    esp,0x8
c0006e75:	68 af fb 02 c0       	push   0xc002fbaf
c0006e7a:	68 c6 fb 02 c0       	push   0xc002fbc6
c0006e7f:	e8 14 8d 01 00       	call   c001fb98 <CPrintf>
c0006e84:	83 c4 10             	add    esp,0x10
c0006e87:	90                   	nop
c0006e88:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e8d:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006e91:	72 15                	jb     c0006ea8 <plug_holes+0x44>
c0006e93:	83 ec 08             	sub    esp,0x8
c0006e96:	68 d3 fb 02 c0       	push   0xc002fbd3
c0006e9b:	68 c6 fb 02 c0       	push   0xc002fbc6
c0006ea0:	e8 f3 8c 01 00       	call   c001fb98 <CPrintf>
c0006ea5:	83 c4 10             	add    esp,0x10
c0006ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eac:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006eaf:	0f b6 c0             	movzx  eax,al
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 16                	je     c0006ecc <plug_holes+0x68>
c0006eb6:	83 ec 08             	sub    esp,0x8
c0006eb9:	68 ed fb 02 c0       	push   0xc002fbed
c0006ebe:	68 c6 fb 02 c0       	push   0xc002fbc6
c0006ec3:	e8 d0 8c 01 00       	call   c001fb98 <CPrintf>
c0006ec8:	83 c4 10             	add    esp,0x10
c0006ecb:	90                   	nop
c0006ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ed0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006ed3:	0f b7 c0             	movzx  eax,ax
c0006ed6:	3d 40 06 00 00       	cmp    eax,0x640
c0006edb:	76 17                	jbe    c0006ef4 <plug_holes+0x90>
c0006edd:	83 ec 08             	sub    esp,0x8
c0006ee0:	68 80 fc 02 c0       	push   0xc002fc80
c0006ee5:	68 c6 fb 02 c0       	push   0xc002fbc6
c0006eea:	e8 a9 8c 01 00       	call   c001fb98 <CPrintf>
c0006eef:	83 c4 10             	add    esp,0x10
c0006ef2:	66 90                	xchg   ax,ax
c0006ef4:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006efe:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f01:	0f b7 c0             	movzx  eax,ax
c0006f04:	01 d0                	add    eax,edx
c0006f06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f0e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006f12:	74 64                	je     c0006f78 <plug_holes+0x114>
c0006f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f18:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006f1b:	0f b6 c0             	movzx  eax,al
c0006f1e:	85 c0                	test   eax,eax
c0006f20:	75 56                	jne    c0006f78 <plug_holes+0x114>
c0006f22:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f27:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f2b:	74 4b                	je     c0006f78 <plug_holes+0x114>
c0006f2d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006f32:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006f36:	75 0c                	jne    c0006f44 <plug_holes+0xe0>
c0006f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f3c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f41:	8d 76 00             	lea    esi,[esi+0x0]
c0006f44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f48:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f4f:	66 89 10             	mov    WORD PTR [eax],dx
c0006f52:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f57:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006f5b:	89 d1                	mov    ecx,edx
c0006f5d:	29 c1                	sub    ecx,eax
c0006f5f:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f69:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f6c:	0f b7 c0             	movzx  eax,ax
c0006f6f:	01 d0                	add    eax,edx
c0006f71:	89 ca                	mov    edx,ecx
c0006f73:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006f77:	90                   	nop
c0006f78:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f82:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006f86:	0f b7 c0             	movzx  eax,ax
c0006f89:	01 d0                	add    eax,edx
c0006f8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f93:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006f97:	74 57                	je     c0006ff0 <plug_holes+0x18c>
c0006f99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f9d:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006fa0:	0f b6 c0             	movzx  eax,al
c0006fa3:	85 c0                	test   eax,eax
c0006fa5:	75 49                	jne    c0006ff0 <plug_holes+0x18c>
c0006fa7:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006fac:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fb0:	75 0a                	jne    c0006fbc <plug_holes+0x158>
c0006fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb6:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006fbb:	90                   	nop
c0006fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fc0:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006fc3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fc7:	66 89 10             	mov    WORD PTR [eax],dx
c0006fca:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fcf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fd3:	89 d1                	mov    ecx,edx
c0006fd5:	29 c1                	sub    ecx,eax
c0006fd7:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006fdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006fe1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006fe4:	0f b7 c0             	movzx  eax,ax
c0006fe7:	01 d0                	add    eax,edx
c0006fe9:	89 ca                	mov    edx,ecx
c0006feb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006fef:	90                   	nop
c0006ff0:	90                   	nop
c0006ff1:	83 c4 1c             	add    esp,0x1c
c0006ff4:	c3                   	ret    
c0006ff5:	8d 76 00             	lea    esi,[esi+0x0]

c0006ff8 <mem_init>:
c0006ff8:	83 ec 1c             	sub    esp,0x1c
c0006ffb:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0007005:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000700a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000700e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007012:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0007017:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000701b:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0007021:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007025:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007029:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000702e:	05 40 06 00 00       	add    eax,0x640
c0007033:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0007038:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000703d:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007041:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007046:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c000704b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007050:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0007056:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000705b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007060:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0007069:	83 ec 08             	sub    esp,0x8
c000706c:	6a 01                	push   0x1
c000706e:	68 98 76 03 c0       	push   0xc0037698
c0007073:	e8 28 9c ff ff       	call   c0000ca0 <sys_sem_new>
c0007078:	83 c4 10             	add    esp,0x10
c000707b:	0f be c0             	movsx  eax,al
c000707e:	85 c0                	test   eax,eax
c0007080:	74 16                	je     c0007098 <mem_init+0xa0>
c0007082:	83 ec 08             	sub    esp,0x8
c0007085:	68 08 fc 02 c0       	push   0xc002fc08
c000708a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000708f:	e8 04 8b 01 00       	call   c001fb98 <CPrintf>
c0007094:	83 c4 10             	add    esp,0x10
c0007097:	90                   	nop
c0007098:	90                   	nop
c0007099:	83 c4 1c             	add    esp,0x1c
c000709c:	c3                   	ret    
c000709d:	8d 76 00             	lea    esi,[esi+0x0]

c00070a0 <mem_free>:
c00070a0:	83 ec 1c             	sub    esp,0x1c
c00070a3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00070a8:	0f 84 0e 01 00 00    	je     c00071bc <mem_free+0x11c>
c00070ae:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070b3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070b7:	72 0b                	jb     c00070c4 <mem_free+0x24>
c00070b9:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070be:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070c2:	72 18                	jb     c00070dc <mem_free+0x3c>
c00070c4:	83 ec 08             	sub    esp,0x8
c00070c7:	68 23 fc 02 c0       	push   0xc002fc23
c00070cc:	68 c6 fb 02 c0       	push   0xc002fbc6
c00070d1:	e8 c2 8a 01 00       	call   c001fb98 <CPrintf>
c00070d6:	83 c4 10             	add    esp,0x10
c00070d9:	8d 76 00             	lea    esi,[esi+0x0]
c00070dc:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070e1:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070e5:	72 0d                	jb     c00070f4 <mem_free+0x54>
c00070e7:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00070ec:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00070f0:	72 22                	jb     c0007114 <mem_free+0x74>
c00070f2:	66 90                	xchg   ax,ax
c00070f4:	e8 8f 8a 01 00       	call   c001fb88 <CLockScheduler>
c00070f9:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c00070ff:	83 c0 01             	add    eax,0x1
c0007102:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007108:	e8 5f 8a 01 00       	call   c001fb6c <CUnlockScheduler>
c000710d:	e9 ae 00 00 00       	jmp    c00071c0 <mem_free+0x120>
c0007112:	66 90                	xchg   ax,ax
c0007114:	83 ec 08             	sub    esp,0x8
c0007117:	6a 00                	push   0x0
c0007119:	68 98 76 03 c0       	push   0xc0037698
c000711e:	e8 d5 9b ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000712a:	83 e8 06             	sub    eax,0x6
c000712d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007135:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007138:	0f b6 c0             	movzx  eax,al
c000713b:	85 c0                	test   eax,eax
c000713d:	75 15                	jne    c0007154 <mem_free+0xb4>
c000713f:	83 ec 08             	sub    esp,0x8
c0007142:	68 3a fc 02 c0       	push   0xc002fc3a
c0007147:	68 c6 fb 02 c0       	push   0xc002fbc6
c000714c:	e8 47 8a 01 00       	call   c001fb98 <CPrintf>
c0007151:	83 c4 10             	add    esp,0x10
c0007154:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007158:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000715c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007161:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007165:	73 09                	jae    c0007170 <mem_free+0xd0>
c0007167:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000716b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007170:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c0007177:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000717c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007180:	29 c1                	sub    ecx,eax
c0007182:	89 c8                	mov    eax,ecx
c0007184:	89 c1                	mov    ecx,eax
c0007186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000718a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000718d:	29 c1                	sub    ecx,eax
c000718f:	89 c8                	mov    eax,ecx
c0007191:	01 d0                	add    eax,edx
c0007193:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007199:	83 ec 0c             	sub    esp,0xc
c000719c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a0:	e8 bf fc ff ff       	call   c0006e64 <plug_holes>
c00071a5:	83 c4 10             	add    esp,0x10
c00071a8:	83 ec 0c             	sub    esp,0xc
c00071ab:	68 98 76 03 c0       	push   0xc0037698
c00071b0:	e8 2b 9b ff ff       	call   c0000ce0 <sys_sem_signal>
c00071b5:	83 c4 10             	add    esp,0x10
c00071b8:	eb 06                	jmp    c00071c0 <mem_free+0x120>
c00071ba:	66 90                	xchg   ax,ax
c00071bc:	90                   	nop
c00071bd:	8d 76 00             	lea    esi,[esi+0x0]
c00071c0:	83 c4 1c             	add    esp,0x1c
c00071c3:	c3                   	ret    

c00071c4 <mem_trim>:
c00071c4:	83 ec 2c             	sub    esp,0x2c
c00071c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00071cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00071d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071d5:	83 f8 0b             	cmp    eax,0xb
c00071d8:	77 0a                	ja     c00071e4 <mem_trim+0x20>
c00071da:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]
c00071e4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00071e9:	3d 40 06 00 00       	cmp    eax,0x640
c00071ee:	76 0c                	jbe    c00071fc <mem_trim+0x38>
c00071f0:	b8 00 00 00 00       	mov    eax,0x0
c00071f5:	e9 d6 02 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c00071fa:	66 90                	xchg   ax,ax
c00071fc:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007201:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007205:	72 0d                	jb     c0007214 <mem_trim+0x50>
c0007207:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000720c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007210:	72 1a                	jb     c000722c <mem_trim+0x68>
c0007212:	66 90                	xchg   ax,ax
c0007214:	83 ec 08             	sub    esp,0x8
c0007217:	68 4e fc 02 c0       	push   0xc002fc4e
c000721c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0007221:	e8 72 89 01 00       	call   c001fb98 <CPrintf>
c0007226:	83 c4 10             	add    esp,0x10
c0007229:	8d 76 00             	lea    esi,[esi+0x0]
c000722c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007231:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007235:	72 0d                	jb     c0007244 <mem_trim+0x80>
c0007237:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000723c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007240:	72 26                	jb     c0007268 <mem_trim+0xa4>
c0007242:	66 90                	xchg   ax,ax
c0007244:	e8 3f 89 01 00       	call   c001fb88 <CLockScheduler>
c0007249:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000724f:	83 c0 01             	add    eax,0x1
c0007252:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007258:	e8 0f 89 01 00       	call   c001fb6c <CUnlockScheduler>
c000725d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007261:	e9 6a 02 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c0007266:	66 90                	xchg   ax,ax
c0007268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000726c:	83 e8 06             	sub    eax,0x6
c000726f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007273:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007278:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000727c:	29 c2                	sub    edx,eax
c000727e:	89 d0                	mov    eax,edx
c0007280:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0007285:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007289:	66 8b 10             	mov    dx,WORD PTR [eax]
c000728c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007291:	89 d1                	mov    ecx,edx
c0007293:	29 c1                	sub    ecx,eax
c0007295:	89 c8                	mov    eax,ecx
c0007297:	83 e8 06             	sub    eax,0x6
c000729a:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000729f:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072a4:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072a9:	39 c2                	cmp    edx,eax
c00072ab:	76 17                	jbe    c00072c4 <mem_trim+0x100>
c00072ad:	83 ec 08             	sub    esp,0x8
c00072b0:	68 ac fc 02 c0       	push   0xc002fcac
c00072b5:	68 c6 fb 02 c0       	push   0xc002fbc6
c00072ba:	e8 d9 88 01 00       	call   c001fb98 <CPrintf>
c00072bf:	83 c4 10             	add    esp,0x10
c00072c2:	66 90                	xchg   ax,ax
c00072c4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072c9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072ce:	39 c2                	cmp    edx,eax
c00072d0:	76 0a                	jbe    c00072dc <mem_trim+0x118>
c00072d2:	b8 00 00 00 00       	mov    eax,0x0
c00072d7:	e9 f4 01 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c00072dc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00072e1:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00072e6:	39 c2                	cmp    edx,eax
c00072e8:	75 0a                	jne    c00072f4 <mem_trim+0x130>
c00072ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00072ee:	e9 dd 01 00 00       	jmp    c00074d0 <mem_trim+0x30c>
c00072f3:	90                   	nop
c00072f4:	83 ec 08             	sub    esp,0x8
c00072f7:	6a 00                	push   0x0
c00072f9:	68 98 76 03 c0       	push   0xc0037698
c00072fe:	e8 f5 99 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0007303:	83 c4 10             	add    esp,0x10
c0007306:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000730c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007310:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007313:	0f b7 c0             	movzx  eax,ax
c0007316:	01 d0                	add    eax,edx
c0007318:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000731c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007320:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007323:	0f b6 c0             	movzx  eax,al
c0007326:	85 c0                	test   eax,eax
c0007328:	0f 85 c6 00 00 00    	jne    c00073f4 <mem_trim+0x230>
c000732e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007332:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007335:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000733a:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000733f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007343:	01 d0                	add    eax,edx
c0007345:	83 c0 06             	add    eax,0x6
c0007348:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000734d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007352:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007356:	75 14                	jne    c000736c <mem_trim+0x1a8>
c0007358:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000735e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007363:	01 d0                	add    eax,edx
c0007365:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000736a:	66 90                	xchg   ax,ax
c000736c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007372:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007377:	01 d0                	add    eax,edx
c0007379:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000737d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007381:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007389:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000738e:	66 89 10             	mov    WORD PTR [eax],dx
c0007391:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007395:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000739a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000739e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00073a6:	66 89 10             	mov    WORD PTR [eax],dx
c00073a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073ad:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073b0:	0f b7 c0             	movzx  eax,ax
c00073b3:	3d 40 06 00 00       	cmp    eax,0x640
c00073b8:	74 1a                	je     c00073d4 <mem_trim+0x210>
c00073ba:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073c4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073c7:	0f b7 c0             	movzx  eax,ax
c00073ca:	01 c2                	add    edx,eax
c00073cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073d0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073d4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073e2:	29 d1                	sub    ecx,edx
c00073e4:	89 ca                	mov    edx,ecx
c00073e6:	01 d0                	add    eax,edx
c00073e8:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073ee:	e9 c9 00 00 00       	jmp    c00074bc <mem_trim+0x2f8>
c00073f3:	90                   	nop
c00073f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00073f9:	8d 50 12             	lea    edx,[eax+0x12]
c00073fc:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007401:	39 c2                	cmp    edx,eax
c0007403:	0f 87 b3 00 00 00    	ja     c00074bc <mem_trim+0x2f8>
c0007409:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000740e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007412:	01 d0                	add    eax,edx
c0007414:	83 c0 06             	add    eax,0x6
c0007417:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000741c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007422:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007427:	01 d0                	add    eax,edx
c0007429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000742d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007432:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007436:	73 0c                	jae    c0007444 <mem_trim+0x280>
c0007438:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000743c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007441:	8d 76 00             	lea    esi,[esi+0x0]
c0007444:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007448:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000744c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007450:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007453:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007457:	66 89 10             	mov    WORD PTR [eax],dx
c000745a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000745e:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0007463:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0007467:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000746b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000746f:	66 89 10             	mov    WORD PTR [eax],dx
c0007472:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007476:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007479:	0f b7 c0             	movzx  eax,ax
c000747c:	3d 40 06 00 00       	cmp    eax,0x640
c0007481:	74 1d                	je     c00074a0 <mem_trim+0x2dc>
c0007483:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007489:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000748d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007490:	0f b7 c0             	movzx  eax,ax
c0007493:	01 c2                	add    edx,eax
c0007495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007499:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000749d:	8d 76 00             	lea    esi,[esi+0x0]
c00074a0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00074a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00074ae:	29 d1                	sub    ecx,edx
c00074b0:	89 ca                	mov    edx,ecx
c00074b2:	01 d0                	add    eax,edx
c00074b4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00074ba:	66 90                	xchg   ax,ax
c00074bc:	83 ec 0c             	sub    esp,0xc
c00074bf:	68 98 76 03 c0       	push   0xc0037698
c00074c4:	e8 17 98 ff ff       	call   c0000ce0 <sys_sem_signal>
c00074c9:	83 c4 10             	add    esp,0x10
c00074cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074d0:	83 c4 2c             	add    esp,0x2c
c00074d3:	c3                   	ret    

c00074d4 <mem_malloc>:
c00074d4:	53                   	push   ebx
c00074d5:	83 ec 28             	sub    esp,0x28
c00074d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00074dc:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00074e1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074e6:	85 c0                	test   eax,eax
c00074e8:	75 0a                	jne    c00074f4 <mem_malloc+0x20>
c00074ea:	b8 00 00 00 00       	mov    eax,0x0
c00074ef:	e9 f8 02 00 00       	jmp    c00077ec <mem_malloc+0x318>
c00074f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074f9:	83 f8 0b             	cmp    eax,0xb
c00074fc:	77 0a                	ja     c0007508 <mem_malloc+0x34>
c00074fe:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007505:	8d 76 00             	lea    esi,[esi+0x0]
c0007508:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000750d:	3d 40 06 00 00       	cmp    eax,0x640
c0007512:	76 0c                	jbe    c0007520 <mem_malloc+0x4c>
c0007514:	b8 00 00 00 00       	mov    eax,0x0
c0007519:	e9 ce 02 00 00       	jmp    c00077ec <mem_malloc+0x318>
c000751e:	66 90                	xchg   ax,ax
c0007520:	83 ec 08             	sub    esp,0x8
c0007523:	6a 00                	push   0x0
c0007525:	68 98 76 03 c0       	push   0xc0037698
c000752a:	e8 c9 97 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c000752f:	83 c4 10             	add    esp,0x10
c0007532:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007538:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000753d:	29 c2                	sub    edx,eax
c000753f:	89 d0                	mov    eax,edx
c0007541:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007546:	e9 61 02 00 00       	jmp    c00077ac <mem_malloc+0x2d8>
c000754b:	90                   	nop
c000754c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007552:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007557:	01 d0                	add    eax,edx
c0007559:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000755d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007561:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007564:	0f b6 c0             	movzx  eax,al
c0007567:	85 c0                	test   eax,eax
c0007569:	0f 85 25 02 00 00    	jne    c0007794 <mem_malloc+0x2c0>
c000756f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007573:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007576:	0f b7 d0             	movzx  edx,ax
c0007579:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000757e:	29 c2                	sub    edx,eax
c0007580:	89 d0                	mov    eax,edx
c0007582:	8d 50 fa             	lea    edx,[eax-0x6]
c0007585:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000758a:	39 c2                	cmp    edx,eax
c000758c:	0f 82 02 02 00 00    	jb     c0007794 <mem_malloc+0x2c0>
c0007592:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007596:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007599:	0f b7 d0             	movzx  edx,ax
c000759c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00075a1:	29 c2                	sub    edx,eax
c00075a3:	89 d0                	mov    eax,edx
c00075a5:	8d 50 fa             	lea    edx,[eax-0x6]
c00075a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00075ad:	83 c0 12             	add    eax,0x12
c00075b0:	39 c2                	cmp    edx,eax
c00075b2:	0f 82 c4 00 00 00    	jb     c000767c <mem_malloc+0x1a8>
c00075b8:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00075bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00075c1:	01 d0                	add    eax,edx
c00075c3:	83 c0 06             	add    eax,0x6
c00075c6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00075cb:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00075d1:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00075d6:	01 d0                	add    eax,edx
c00075d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075e0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00075e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075e8:	66 8b 10             	mov    dx,WORD PTR [eax]
c00075eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075ef:	66 89 10             	mov    WORD PTR [eax],dx
c00075f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00075f6:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00075fb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00075ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007603:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007608:	66 89 10             	mov    WORD PTR [eax],dx
c000760b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000760f:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007617:	66 8b 00             	mov    ax,WORD PTR [eax]
c000761a:	0f b7 c0             	movzx  eax,ax
c000761d:	3d 40 06 00 00       	cmp    eax,0x640
c0007622:	74 1c                	je     c0007640 <mem_malloc+0x16c>
c0007624:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000762a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000762e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007631:	0f b7 c0             	movzx  eax,ax
c0007634:	01 c2                	add    edx,eax
c0007636:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000763b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000763f:	90                   	nop
c0007640:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007646:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000764a:	01 d0                	add    eax,edx
c000764c:	83 c0 06             	add    eax,0x6
c000764f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007655:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000765c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007662:	0f b7 d2             	movzx  edx,dx
c0007665:	0f b7 c0             	movzx  eax,ax
c0007668:	39 c2                	cmp    edx,eax
c000766a:	73 64                	jae    c00076d0 <mem_malloc+0x1fc>
c000766c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007672:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007678:	eb 56                	jmp    c00076d0 <mem_malloc+0x1fc>
c000767a:	66 90                	xchg   ax,ax
c000767c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007680:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007684:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c000768b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000768f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007692:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0007698:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000769c:	29 cb                	sub    ebx,ecx
c000769e:	89 d9                	mov    ecx,ebx
c00076a0:	29 c8                	sub    eax,ecx
c00076a2:	01 d0                	add    eax,edx
c00076a4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00076aa:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00076b1:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076b7:	0f b7 d2             	movzx  edx,dx
c00076ba:	0f b7 c0             	movzx  eax,ax
c00076bd:	39 c2                	cmp    edx,eax
c00076bf:	73 0f                	jae    c00076d0 <mem_malloc+0x1fc>
c00076c1:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00076c7:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00076cd:	8d 76 00             	lea    esi,[esi+0x0]
c00076d0:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076d5:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00076d9:	75 71                	jne    c000774c <mem_malloc+0x278>
c00076db:	eb 1b                	jmp    c00076f8 <mem_malloc+0x224>
c00076dd:	8d 76 00             	lea    esi,[esi+0x0]
c00076e0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076e6:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076eb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076ee:	0f b7 c0             	movzx  eax,ax
c00076f1:	01 d0                	add    eax,edx
c00076f3:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00076f8:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00076fd:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007700:	0f b6 c0             	movzx  eax,al
c0007703:	85 c0                	test   eax,eax
c0007705:	74 11                	je     c0007718 <mem_malloc+0x244>
c0007707:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000770d:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007712:	39 c2                	cmp    edx,eax
c0007714:	75 ca                	jne    c00076e0 <mem_malloc+0x20c>
c0007716:	66 90                	xchg   ax,ax
c0007718:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000771e:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0007723:	39 c2                	cmp    edx,eax
c0007725:	74 25                	je     c000774c <mem_malloc+0x278>
c0007727:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000772c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000772f:	0f b6 c0             	movzx  eax,al
c0007732:	85 c0                	test   eax,eax
c0007734:	74 16                	je     c000774c <mem_malloc+0x278>
c0007736:	83 ec 08             	sub    esp,0x8
c0007739:	68 65 fc 02 c0       	push   0xc002fc65
c000773e:	68 c6 fb 02 c0       	push   0xc002fbc6
c0007743:	e8 50 84 01 00       	call   c001fb98 <CPrintf>
c0007748:	83 c4 10             	add    esp,0x10
c000774b:	90                   	nop
c000774c:	83 ec 0c             	sub    esp,0xc
c000774f:	68 98 76 03 c0       	push   0xc0037698
c0007754:	e8 87 95 ff ff       	call   c0000ce0 <sys_sem_signal>
c0007759:	83 c4 10             	add    esp,0x10
c000775c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007761:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007765:	01 d0                	add    eax,edx
c0007767:	8d 50 06             	lea    edx,[eax+0x6]
c000776a:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000776f:	39 c2                	cmp    edx,eax
c0007771:	76 15                	jbe    c0007788 <mem_malloc+0x2b4>
c0007773:	83 ec 08             	sub    esp,0x8
c0007776:	68 cc fc 02 c0       	push   0xc002fccc
c000777b:	68 c6 fb 02 c0       	push   0xc002fbc6
c0007780:	e8 13 84 01 00       	call   c001fb98 <CPrintf>
c0007785:	83 c4 10             	add    esp,0x10
c0007788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000778c:	83 c0 06             	add    eax,0x6
c000778f:	eb 5b                	jmp    c00077ec <mem_malloc+0x318>
c0007791:	8d 76 00             	lea    esi,[esi+0x0]
c0007794:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000779a:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000779f:	01 d0                	add    eax,edx
c00077a1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00077a4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00077a9:	8d 76 00             	lea    esi,[esi+0x0]
c00077ac:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00077b1:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00077b6:	b9 40 06 00 00       	mov    ecx,0x640
c00077bb:	29 d1                	sub    ecx,edx
c00077bd:	89 ca                	mov    edx,ecx
c00077bf:	39 d0                	cmp    eax,edx
c00077c1:	0f 8c 85 fd ff ff    	jl     c000754c <mem_malloc+0x78>
c00077c7:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00077cd:	83 c0 01             	add    eax,0x1
c00077d0:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00077d6:	83 ec 0c             	sub    esp,0xc
c00077d9:	68 98 76 03 c0       	push   0xc0037698
c00077de:	e8 fd 94 ff ff       	call   c0000ce0 <sys_sem_signal>
c00077e3:	83 c4 10             	add    esp,0x10
c00077e6:	b8 00 00 00 00       	mov    eax,0x0
c00077eb:	90                   	nop
c00077ec:	83 c4 28             	add    esp,0x28
c00077ef:	5b                   	pop    ebx
c00077f0:	c3                   	ret    
c00077f1:	8d 76 00             	lea    esi,[esi+0x0]

c00077f4 <mem_calloc>:
c00077f4:	83 ec 2c             	sub    esp,0x2c
c00077f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00077ff:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007804:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007809:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000780d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007811:	0f af c2             	imul   eax,edx
c0007814:	0f b7 c0             	movzx  eax,ax
c0007817:	83 ec 0c             	sub    esp,0xc
c000781a:	50                   	push   eax
c000781b:	e8 b4 fc ff ff       	call   c00074d4 <mem_malloc>
c0007820:	83 c4 10             	add    esp,0x10
c0007823:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007827:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000782c:	74 22                	je     c0007850 <mem_calloc+0x5c>
c000782e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007833:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007838:	0f af c2             	imul   eax,edx
c000783b:	83 ec 04             	sub    esp,0x4
c000783e:	50                   	push   eax
c000783f:	6a 00                	push   0x0
c0007841:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007845:	e8 a6 8c ff ff       	call   c00004f0 <memset>
c000784a:	83 c4 10             	add    esp,0x10
c000784d:	8d 76 00             	lea    esi,[esi+0x0]
c0007850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007854:	83 c4 2c             	add    esp,0x2c
c0007857:	c3                   	ret    

c0007858 <memp_init>:
c0007858:	83 ec 10             	sub    esp,0x10
c000785b:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007862:	eb 78                	jmp    c00078dc <memp_init+0x84>
c0007864:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007869:	89 d0                	mov    eax,edx
c000786b:	c1 e0 02             	shl    eax,0x2
c000786e:	01 d0                	add    eax,edx
c0007870:	d1 e0                	shl    eax,1
c0007872:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007877:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c000787c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007881:	89 d0                	mov    eax,edx
c0007883:	c1 e0 02             	shl    eax,0x2
c0007886:	01 d0                	add    eax,edx
c0007888:	d1 e0                	shl    eax,1
c000788a:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000788f:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007894:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007899:	89 d0                	mov    eax,edx
c000789b:	c1 e0 02             	shl    eax,0x2
c000789e:	01 d0                	add    eax,edx
c00078a0:	d1 e0                	shl    eax,1
c00078a2:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00078a7:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00078ac:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00078b6:	66 8b 8c 00 1c fd 02 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffd02e4]
c00078be:	89 d0                	mov    eax,edx
c00078c0:	c1 e0 02             	shl    eax,0x2
c00078c3:	01 d0                	add    eax,edx
c00078c5:	d1 e0                	shl    eax,1
c00078c7:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00078cc:	66 89 08             	mov    WORD PTR [eax],cx
c00078cf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078d4:	83 c0 01             	add    eax,0x1
c00078d7:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078dc:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078e1:	83 f8 0d             	cmp    eax,0xd
c00078e4:	0f 86 7a ff ff ff    	jbe    c0007864 <memp_init+0xc>
c00078ea:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c00078f2:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00078f9:	e9 8a 00 00 00       	jmp    c0007988 <memp_init+0x130>
c00078fe:	66 90                	xchg   ax,ax
c0007900:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007905:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c0007910:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007917:	eb 47                	jmp    c0007960 <memp_init+0x108>
c0007919:	8d 76 00             	lea    esi,[esi+0x0]
c000791c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007921:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007928:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000792c:	89 10                	mov    DWORD PTR [eax],edx
c000792e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007933:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007937:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000793e:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007943:	66 8b 84 00 38 fd 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd02c8]
c000794b:	0f b7 c0             	movzx  eax,ax
c000794e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0007952:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007956:	83 c0 01             	add    eax,0x1
c0007959:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000795e:	66 90                	xchg   ax,ax
c0007960:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007965:	66 8b 84 00 1c fd 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd02e4]
c000796d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0007972:	0f b7 c0             	movzx  eax,ax
c0007975:	39 c2                	cmp    edx,eax
c0007977:	72 a3                	jb     c000791c <memp_init+0xc4>
c0007979:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000797e:	83 c0 01             	add    eax,0x1
c0007981:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007986:	66 90                	xchg   ax,ax
c0007988:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000798d:	83 f8 0d             	cmp    eax,0xd
c0007990:	0f 86 6a ff ff ff    	jbe    c0007900 <memp_init+0xa8>
c0007996:	90                   	nop
c0007997:	83 c4 10             	add    esp,0x10
c000799a:	c3                   	ret    
c000799b:	90                   	nop

c000799c <memp_malloc>:
c000799c:	83 ec 1c             	sub    esp,0x1c
c000799f:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c00079a4:	76 22                	jbe    c00079c8 <memp_malloc+0x2c>
c00079a6:	83 ec 08             	sub    esp,0x8
c00079a9:	68 fc fc 02 c0       	push   0xc002fcfc
c00079ae:	68 c6 fb 02 c0       	push   0xc002fbc6
c00079b3:	e8 e0 81 01 00       	call   c001fb98 <CPrintf>
c00079b8:	83 c4 10             	add    esp,0x10
c00079bb:	b8 00 00 00 00       	mov    eax,0x0
c00079c0:	e9 ff 00 00 00       	jmp    c0007ac4 <memp_malloc+0x128>
c00079c5:	8d 76 00             	lea    esi,[esi+0x0]
c00079c8:	e8 bb 81 01 00       	call   c001fb88 <CLockScheduler>
c00079cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079d1:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00079d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00079e1:	0f 84 a1 00 00 00    	je     c0007a88 <memp_malloc+0xec>
c00079e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00079ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079f1:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c00079f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079fc:	89 d0                	mov    eax,edx
c00079fe:	c1 e0 02             	shl    eax,0x2
c0007a01:	01 d0                	add    eax,edx
c0007a03:	d1 e0                	shl    eax,1
c0007a05:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a0a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a0d:	83 c0 01             	add    eax,0x1
c0007a10:	89 c1                	mov    ecx,eax
c0007a12:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a16:	89 d0                	mov    eax,edx
c0007a18:	c1 e0 02             	shl    eax,0x2
c0007a1b:	01 d0                	add    eax,edx
c0007a1d:	d1 e0                	shl    eax,1
c0007a1f:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a24:	66 89 08             	mov    WORD PTR [eax],cx
c0007a27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a2b:	89 d0                	mov    eax,edx
c0007a2d:	c1 e0 02             	shl    eax,0x2
c0007a30:	01 d0                	add    eax,edx
c0007a32:	d1 e0                	shl    eax,1
c0007a34:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a39:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007a3c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a40:	89 d0                	mov    eax,edx
c0007a42:	c1 e0 02             	shl    eax,0x2
c0007a45:	01 d0                	add    eax,edx
c0007a47:	d1 e0                	shl    eax,1
c0007a49:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a4e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a51:	0f b7 d1             	movzx  edx,cx
c0007a54:	0f b7 c0             	movzx  eax,ax
c0007a57:	39 c2                	cmp    edx,eax
c0007a59:	73 5d                	jae    c0007ab8 <memp_malloc+0x11c>
c0007a5b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a5f:	89 d0                	mov    eax,edx
c0007a61:	c1 e0 02             	shl    eax,0x2
c0007a64:	01 d0                	add    eax,edx
c0007a66:	d1 e0                	shl    eax,1
c0007a68:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a6d:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007a70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a74:	89 d0                	mov    eax,edx
c0007a76:	c1 e0 02             	shl    eax,0x2
c0007a79:	01 d0                	add    eax,edx
c0007a7b:	d1 e0                	shl    eax,1
c0007a7d:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007a82:	66 89 08             	mov    WORD PTR [eax],cx
c0007a85:	eb 31                	jmp    c0007ab8 <memp_malloc+0x11c>
c0007a87:	90                   	nop
c0007a88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a8c:	89 d0                	mov    eax,edx
c0007a8e:	c1 e0 02             	shl    eax,0x2
c0007a91:	01 d0                	add    eax,edx
c0007a93:	d1 e0                	shl    eax,1
c0007a95:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a9a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a9d:	83 c0 01             	add    eax,0x1
c0007aa0:	89 c1                	mov    ecx,eax
c0007aa2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007aa6:	89 d0                	mov    eax,edx
c0007aa8:	c1 e0 02             	shl    eax,0x2
c0007aab:	01 d0                	add    eax,edx
c0007aad:	d1 e0                	shl    eax,1
c0007aaf:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007ab4:	66 89 08             	mov    WORD PTR [eax],cx
c0007ab7:	90                   	nop
c0007ab8:	e8 af 80 01 00       	call   c001fb6c <CUnlockScheduler>
c0007abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0007ac4:	83 c4 1c             	add    esp,0x1c
c0007ac7:	c3                   	ret    

c0007ac8 <memp_free>:
c0007ac8:	83 ec 1c             	sub    esp,0x1c
c0007acb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007ad0:	74 66                	je     c0007b38 <memp_free+0x70>
c0007ad2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ad6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ada:	e8 a9 80 01 00       	call   c001fb88 <CLockScheduler>
c0007adf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ae3:	89 d0                	mov    eax,edx
c0007ae5:	c1 e0 02             	shl    eax,0x2
c0007ae8:	01 d0                	add    eax,edx
c0007aea:	d1 e0                	shl    eax,1
c0007aec:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007af1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007af4:	83 e8 01             	sub    eax,0x1
c0007af7:	89 c1                	mov    ecx,eax
c0007af9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007afd:	89 d0                	mov    eax,edx
c0007aff:	c1 e0 02             	shl    eax,0x2
c0007b02:	01 d0                	add    eax,edx
c0007b04:	d1 e0                	shl    eax,1
c0007b06:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007b0b:	66 89 08             	mov    WORD PTR [eax],cx
c0007b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b12:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b1d:	89 10                	mov    DWORD PTR [eax],edx
c0007b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b23:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007b27:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007b2e:	e8 39 80 01 00       	call   c001fb6c <CUnlockScheduler>
c0007b33:	eb 07                	jmp    c0007b3c <memp_free+0x74>
c0007b35:	8d 76 00             	lea    esi,[esi+0x0]
c0007b38:	90                   	nop
c0007b39:	8d 76 00             	lea    esi,[esi+0x0]
c0007b3c:	83 c4 1c             	add    esp,0x1c
c0007b3f:	c3                   	ret    

c0007b40 <netif_init>:
c0007b40:	90                   	nop
c0007b41:	c3                   	ret    
c0007b42:	66 90                	xchg   ax,ax

c0007b44 <netif_find>:
c0007b44:	83 ec 10             	sub    esp,0x10
c0007b47:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007b4c:	75 0a                	jne    c0007b58 <netif_find+0x14>
c0007b4e:	b8 00 00 00 00       	mov    eax,0x0
c0007b53:	e9 80 00 00 00       	jmp    c0007bd8 <netif_find+0x94>
c0007b58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b5c:	83 c0 02             	add    eax,0x2
c0007b5f:	8a 00                	mov    al,BYTE PTR [eax]
c0007b61:	83 e8 30             	sub    eax,0x30
c0007b64:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007b68:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007b6d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b71:	eb 59                	jmp    c0007bcc <netif_find+0x88>
c0007b73:	90                   	nop
c0007b74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b78:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007b7b:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007b80:	0f b6 c0             	movzx  eax,al
c0007b83:	39 c2                	cmp    edx,eax
c0007b85:	75 39                	jne    c0007bc0 <netif_find+0x7c>
c0007b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007b8b:	8a 10                	mov    dl,BYTE PTR [eax]
c0007b8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b91:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007b94:	0f be d2             	movsx  edx,dl
c0007b97:	0f be c0             	movsx  eax,al
c0007b9a:	39 c2                	cmp    edx,eax
c0007b9c:	75 22                	jne    c0007bc0 <netif_find+0x7c>
c0007b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ba2:	83 c0 01             	add    eax,0x1
c0007ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0007ba7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bab:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007bae:	0f be d2             	movsx  edx,dl
c0007bb1:	0f be c0             	movsx  eax,al
c0007bb4:	39 c2                	cmp    edx,eax
c0007bb6:	75 08                	jne    c0007bc0 <netif_find+0x7c>
c0007bb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bbc:	eb 1a                	jmp    c0007bd8 <netif_find+0x94>
c0007bbe:	66 90                	xchg   ax,ax
c0007bc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bca:	66 90                	xchg   ax,ax
c0007bcc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007bd1:	75 a1                	jne    c0007b74 <netif_find+0x30>
c0007bd3:	b8 00 00 00 00       	mov    eax,0x0
c0007bd8:	83 c4 10             	add    esp,0x10
c0007bdb:	c3                   	ret    

c0007bdc <netif_set_ipaddr>:
c0007bdc:	83 ec 1c             	sub    esp,0x1c
c0007bdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007be3:	8b 10                	mov    edx,DWORD PTR [eax]
c0007be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bec:	39 c2                	cmp    edx,eax
c0007bee:	0f 84 bc 00 00 00    	je     c0007cb0 <netif_set_ipaddr+0xd4>
c0007bf4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007bf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007bfd:	eb 45                	jmp    c0007c44 <netif_set_ipaddr+0x68>
c0007bff:	90                   	nop
c0007c00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c04:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c0d:	39 c2                	cmp    edx,eax
c0007c0f:	75 27                	jne    c0007c38 <netif_set_ipaddr+0x5c>
c0007c11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c18:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007c1c:	83 ec 0c             	sub    esp,0xc
c0007c1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007c23:	e8 8c 36 00 00       	call   c000b2b4 <tcp_abort>
c0007c28:	83 c4 10             	add    esp,0x10
c0007c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c33:	eb 0f                	jmp    c0007c44 <netif_set_ipaddr+0x68>
c0007c35:	8d 76 00             	lea    esi,[esi+0x0]
c0007c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c43:	90                   	nop
c0007c44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007c49:	75 b5                	jne    c0007c00 <netif_set_ipaddr+0x24>
c0007c4b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007c50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c54:	eb 52                	jmp    c0007ca8 <netif_set_ipaddr+0xcc>
c0007c56:	66 90                	xchg   ax,ax
c0007c58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c5c:	85 c0                	test   eax,eax
c0007c5e:	74 3c                	je     c0007c9c <netif_set_ipaddr+0xc0>
c0007c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c64:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c66:	85 c0                	test   eax,eax
c0007c68:	74 32                	je     c0007c9c <netif_set_ipaddr+0xc0>
c0007c6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0007c70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007c77:	39 c2                	cmp    edx,eax
c0007c79:	75 21                	jne    c0007c9c <netif_set_ipaddr+0xc0>
c0007c7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c80:	74 0a                	je     c0007c8c <netif_set_ipaddr+0xb0>
c0007c82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c88:	eb 0a                	jmp    c0007c94 <netif_set_ipaddr+0xb8>
c0007c8a:	66 90                	xchg   ax,ax
c0007c8c:	b8 00 00 00 00       	mov    eax,0x0
c0007c91:	8d 76 00             	lea    esi,[esi+0x0]
c0007c94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c98:	89 02                	mov    DWORD PTR [edx],eax
c0007c9a:	66 90                	xchg   ax,ax
c0007c9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007ca3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ca7:	90                   	nop
c0007ca8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cad:	75 a9                	jne    c0007c58 <netif_set_ipaddr+0x7c>
c0007caf:	90                   	nop
c0007cb0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007cb5:	74 09                	je     c0007cc0 <netif_set_ipaddr+0xe4>
c0007cb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007cbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007cbd:	eb 09                	jmp    c0007cc8 <netif_set_ipaddr+0xec>
c0007cbf:	90                   	nop
c0007cc0:	b8 00 00 00 00       	mov    eax,0x0
c0007cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0007cc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ccc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007ccf:	90                   	nop
c0007cd0:	83 c4 1c             	add    esp,0x1c
c0007cd3:	c3                   	ret    

c0007cd4 <netif_set_gw>:
c0007cd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cd9:	74 09                	je     c0007ce4 <netif_set_gw+0x10>
c0007cdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ce1:	eb 09                	jmp    c0007cec <netif_set_gw+0x18>
c0007ce3:	90                   	nop
c0007ce4:	b8 00 00 00 00       	mov    eax,0x0
c0007ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0007cec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007cf0:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007cf3:	90                   	nop
c0007cf4:	c3                   	ret    
c0007cf5:	8d 76 00             	lea    esi,[esi+0x0]

c0007cf8 <netif_set_netmask>:
c0007cf8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cfd:	74 09                	je     c0007d08 <netif_set_netmask+0x10>
c0007cff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d03:	8b 00                	mov    eax,DWORD PTR [eax]
c0007d05:	eb 09                	jmp    c0007d10 <netif_set_netmask+0x18>
c0007d07:	90                   	nop
c0007d08:	b8 00 00 00 00       	mov    eax,0x0
c0007d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007d10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007d14:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007d17:	90                   	nop
c0007d18:	c3                   	ret    
c0007d19:	8d 76 00             	lea    esi,[esi+0x0]

c0007d1c <netif_set_addr>:
c0007d1c:	83 ec 0c             	sub    esp,0xc
c0007d1f:	83 ec 08             	sub    esp,0x8
c0007d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d2a:	e8 ad fe ff ff       	call   c0007bdc <netif_set_ipaddr>
c0007d2f:	83 c4 10             	add    esp,0x10
c0007d32:	83 ec 08             	sub    esp,0x8
c0007d35:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007d39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d3d:	e8 b6 ff ff ff       	call   c0007cf8 <netif_set_netmask>
c0007d42:	83 c4 10             	add    esp,0x10
c0007d45:	83 ec 08             	sub    esp,0x8
c0007d48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 7f ff ff ff       	call   c0007cd4 <netif_set_gw>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	90                   	nop
c0007d59:	83 c4 0c             	add    esp,0xc
c0007d5c:	c3                   	ret    
c0007d5d:	8d 76 00             	lea    esi,[esi+0x0]

c0007d60 <netif_add>:
c0007d60:	83 ec 0c             	sub    esp,0xc
c0007d63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007d68:	75 16                	jne    c0007d80 <netif_add+0x20>
c0007d6a:	83 ec 08             	sub    esp,0x8
c0007d6d:	68 54 fd 02 c0       	push   0xc002fd54
c0007d72:	68 c6 fb 02 c0       	push   0xc002fbc6
c0007d77:	e8 1c 7e 01 00       	call   c001fb98 <CPrintf>
c0007d7c:	83 c4 10             	add    esp,0x10
c0007d7f:	90                   	nop
c0007d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da5:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007db1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007db4:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007db9:	8d 50 01             	lea    edx,[eax+0x1]
c0007dbc:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007dc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007dc6:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007dc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dd1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007de0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007de4:	e8 33 ff ff ff       	call   c0007d1c <netif_set_addr>
c0007de9:	83 c4 10             	add    esp,0x10
c0007dec:	83 ec 0c             	sub    esp,0xc
c0007def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007df3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007df7:	ff d0                	call   eax
c0007df9:	83 c4 10             	add    esp,0x10
c0007dfc:	0f be c0             	movsx  eax,al
c0007dff:	85 c0                	test   eax,eax
c0007e01:	74 09                	je     c0007e0c <netif_add+0xac>
c0007e03:	b8 00 00 00 00       	mov    eax,0x0
c0007e08:	eb 1e                	jmp    c0007e28 <netif_add+0xc8>
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e16:	89 10                	mov    DWORD PTR [eax],edx
c0007e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e1c:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e25:	8d 76 00             	lea    esi,[esi+0x0]
c0007e28:	83 c4 0c             	add    esp,0xc
c0007e2b:	c3                   	ret    

c0007e2c <netif_set_default>:
c0007e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e30:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007e35:	90                   	nop
c0007e36:	c3                   	ret    
c0007e37:	90                   	nop

c0007e38 <netif_set_up>:
c0007e38:	83 ec 0c             	sub    esp,0xc
c0007e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e3f:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e42:	0f b6 c0             	movzx  eax,al
c0007e45:	83 e0 01             	and    eax,0x1
c0007e48:	75 4a                	jne    c0007e94 <netif_set_up+0x5c>
c0007e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e4e:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e51:	83 c8 01             	or     eax,0x1
c0007e54:	88 c2                	mov    dl,al
c0007e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e5a:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e61:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e64:	0f b6 c0             	movzx  eax,al
c0007e67:	83 e0 10             	and    eax,0x10
c0007e6a:	74 28                	je     c0007e94 <netif_set_up+0x5c>
c0007e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e70:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e73:	0f b6 c0             	movzx  eax,al
c0007e76:	83 e0 20             	and    eax,0x20
c0007e79:	74 19                	je     c0007e94 <netif_set_up+0x5c>
c0007e7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e7f:	83 c0 04             	add    eax,0x4
c0007e82:	83 ec 08             	sub    esp,0x8
c0007e85:	50                   	push   eax
c0007e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007e8a:	e8 55 a6 00 00       	call   c00124e4 <etharp_request>
c0007e8f:	83 c4 10             	add    esp,0x10
c0007e92:	66 90                	xchg   ax,ax
c0007e94:	90                   	nop
c0007e95:	83 c4 0c             	add    esp,0xc
c0007e98:	c3                   	ret    
c0007e99:	8d 76 00             	lea    esi,[esi+0x0]

c0007e9c <netif_set_down>:
c0007e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ea0:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ea3:	0f b6 c0             	movzx  eax,al
c0007ea6:	83 e0 01             	and    eax,0x1
c0007ea9:	74 15                	je     c0007ec0 <netif_set_down+0x24>
c0007eab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007eaf:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eb2:	83 e0 fe             	and    eax,0xfffffffe
c0007eb5:	88 c2                	mov    dl,al
c0007eb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ebb:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ebe:	66 90                	xchg   ax,ax
c0007ec0:	90                   	nop
c0007ec1:	c3                   	ret    
c0007ec2:	66 90                	xchg   ax,ax

c0007ec4 <netif_remove>:
c0007ec4:	83 ec 10             	sub    esp,0x10
c0007ec7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007ecc:	0f 84 92 00 00 00    	je     c0007f64 <netif_remove+0xa0>
c0007ed2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ed6:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ed9:	83 e0 01             	and    eax,0x1
c0007edc:	0f b6 c0             	movzx  eax,al
c0007edf:	85 c0                	test   eax,eax
c0007ee1:	74 0d                	je     c0007ef0 <netif_remove+0x2c>
c0007ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ee7:	e8 b0 ff ff ff       	call   c0007e9c <netif_set_down>
c0007eec:	83 c4 04             	add    esp,0x4
c0007eef:	90                   	nop
c0007ef0:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ef5:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ef9:	75 0d                	jne    c0007f08 <netif_remove+0x44>
c0007efb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007eff:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f01:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007f06:	eb 44                	jmp    c0007f4c <netif_remove+0x88>
c0007f08:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007f0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f11:	eb 29                	jmp    c0007f3c <netif_remove+0x78>
c0007f13:	90                   	nop
c0007f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f18:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f1a:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f1e:	75 10                	jne    c0007f30 <netif_remove+0x6c>
c0007f20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f24:	8b 10                	mov    edx,DWORD PTR [eax]
c0007f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f2a:	89 10                	mov    DWORD PTR [eax],edx
c0007f2c:	eb 16                	jmp    c0007f44 <netif_remove+0x80>
c0007f2e:	66 90                	xchg   ax,ax
c0007f30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007f36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3a:	66 90                	xchg   ax,ax
c0007f3c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f41:	75 d1                	jne    c0007f14 <netif_remove+0x50>
c0007f43:	90                   	nop
c0007f44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f49:	74 1d                	je     c0007f68 <netif_remove+0xa4>
c0007f4b:	90                   	nop
c0007f4c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007f51:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007f55:	75 15                	jne    c0007f6c <netif_remove+0xa8>
c0007f57:	6a 00                	push   0x0
c0007f59:	e8 ce fe ff ff       	call   c0007e2c <netif_set_default>
c0007f5e:	83 c4 04             	add    esp,0x4
c0007f61:	eb 09                	jmp    c0007f6c <netif_remove+0xa8>
c0007f63:	90                   	nop
c0007f64:	90                   	nop
c0007f65:	eb 05                	jmp    c0007f6c <netif_remove+0xa8>
c0007f67:	90                   	nop
c0007f68:	90                   	nop
c0007f69:	8d 76 00             	lea    esi,[esi+0x0]
c0007f6c:	83 c4 10             	add    esp,0x10
c0007f6f:	c3                   	ret    

c0007f70 <netif_set_link_up>:
c0007f70:	83 ec 0c             	sub    esp,0xc
c0007f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f77:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f7a:	0f b6 c0             	movzx  eax,al
c0007f7d:	83 e0 10             	and    eax,0x10
c0007f80:	75 4a                	jne    c0007fcc <netif_set_link_up+0x5c>
c0007f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f86:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f89:	83 c8 10             	or     eax,0x10
c0007f8c:	88 c2                	mov    dl,al
c0007f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f92:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f99:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f9c:	0f b6 c0             	movzx  eax,al
c0007f9f:	83 e0 01             	and    eax,0x1
c0007fa2:	74 28                	je     c0007fcc <netif_set_link_up+0x5c>
c0007fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fa8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fab:	0f b6 c0             	movzx  eax,al
c0007fae:	83 e0 20             	and    eax,0x20
c0007fb1:	74 19                	je     c0007fcc <netif_set_link_up+0x5c>
c0007fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007fb7:	83 c0 04             	add    eax,0x4
c0007fba:	83 ec 08             	sub    esp,0x8
c0007fbd:	50                   	push   eax
c0007fbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fc2:	e8 1d a5 00 00       	call   c00124e4 <etharp_request>
c0007fc7:	83 c4 10             	add    esp,0x10
c0007fca:	66 90                	xchg   ax,ax
c0007fcc:	90                   	nop
c0007fcd:	83 c4 0c             	add    esp,0xc
c0007fd0:	c3                   	ret    
c0007fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0007fd4 <netif_set_link_down>:
c0007fd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fd8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fdb:	0f b6 c0             	movzx  eax,al
c0007fde:	83 e0 10             	and    eax,0x10
c0007fe1:	74 15                	je     c0007ff8 <netif_set_link_down+0x24>
c0007fe3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007fe7:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007fea:	83 e0 ef             	and    eax,0xffffffef
c0007fed:	88 c2                	mov    dl,al
c0007fef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ff3:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ff6:	66 90                	xchg   ax,ax
c0007ff8:	90                   	nop
c0007ff9:	c3                   	ret    
c0007ffa:	66 90                	xchg   ax,ax

c0007ffc <pbuf_free_ooseq>:
c0007ffc:	83 ec 1c             	sub    esp,0x1c
c0007fff:	e8 84 7b 01 00       	call   c001fb88 <CLockScheduler>
c0008004:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c000800b:	e8 5c 7b 01 00       	call   c001fb6c <CUnlockScheduler>
c0008010:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0008015:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008019:	eb 41                	jmp    c000805c <pbuf_free_ooseq+0x60>
c000801b:	90                   	nop
c000801c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008020:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008026:	85 c0                	test   eax,eax
c0008028:	74 26                	je     c0008050 <pbuf_free_ooseq+0x54>
c000802a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000802e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0008034:	83 ec 0c             	sub    esp,0xc
c0008037:	50                   	push   eax
c0008038:	e8 1b 20 00 00       	call   c000a058 <tcp_segs_free>
c000803d:	83 c4 10             	add    esp,0x10
c0008040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008044:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000804e:	eb 14                	jmp    c0008064 <pbuf_free_ooseq+0x68>
c0008050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008054:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008057:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000805b:	90                   	nop
c000805c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008061:	75 b9                	jne    c000801c <pbuf_free_ooseq+0x20>
c0008063:	90                   	nop
c0008064:	83 c4 1c             	add    esp,0x1c
c0008067:	c3                   	ret    

c0008068 <pbuf_pool_is_empty>:
c0008068:	83 ec 1c             	sub    esp,0x1c
c000806b:	e8 18 7b 01 00       	call   c001fb88 <CLockScheduler>
c0008070:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0008075:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008079:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0008080:	e8 e7 7a 01 00       	call   c001fb6c <CUnlockScheduler>
c0008085:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000808a:	85 c0                	test   eax,eax
c000808c:	75 2e                	jne    c00080bc <pbuf_pool_is_empty+0x54>
c000808e:	83 ec 04             	sub    esp,0x4
c0008091:	6a 00                	push   0x0
c0008093:	6a 00                	push   0x0
c0008095:	68 fc 7f 00 c0       	push   0xc0007ffc
c000809a:	e8 e9 8b ff ff       	call   c0000c88 <tcpip_callback_with_block>
c000809f:	83 c4 10             	add    esp,0x10
c00080a2:	0f be c0             	movsx  eax,al
c00080a5:	85 c0                	test   eax,eax
c00080a7:	74 13                	je     c00080bc <pbuf_pool_is_empty+0x54>
c00080a9:	e8 da 7a 01 00       	call   c001fb88 <CLockScheduler>
c00080ae:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c00080b5:	e8 b2 7a 01 00       	call   c001fb6c <CUnlockScheduler>
c00080ba:	66 90                	xchg   ax,ax
c00080bc:	90                   	nop
c00080bd:	83 c4 1c             	add    esp,0x1c
c00080c0:	c3                   	ret    
c00080c1:	8d 76 00             	lea    esi,[esi+0x0]

c00080c4 <pbuf_alloced_custom>:
c00080c4:	83 ec 2c             	sub    esp,0x2c
c00080c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00080cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00080cf:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00080d4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00080d9:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00080e0:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c00080e5:	74 29                	je     c0008110 <pbuf_alloced_custom+0x4c>
c00080e7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00080ec:	74 12                	je     c0008100 <pbuf_alloced_custom+0x3c>
c00080ee:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c00080f3:	74 2b                	je     c0008120 <pbuf_alloced_custom+0x5c>
c00080f5:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c00080fa:	74 54                	je     c0008150 <pbuf_alloced_custom+0x8c>
c00080fc:	eb 32                	jmp    c0008130 <pbuf_alloced_custom+0x6c>
c00080fe:	66 90                	xchg   ax,ax
c0008100:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008105:	83 c0 14             	add    eax,0x14
c0008108:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000810d:	8d 76 00             	lea    esi,[esi+0x0]
c0008110:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008115:	83 c0 14             	add    eax,0x14
c0008118:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000811d:	8d 76 00             	lea    esi,[esi+0x0]
c0008120:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008125:	83 c0 0e             	add    eax,0xe
c0008128:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000812d:	eb 25                	jmp    c0008154 <pbuf_alloced_custom+0x90>
c000812f:	90                   	nop
c0008130:	83 ec 08             	sub    esp,0x8
c0008133:	68 6c fd 02 c0       	push   0xc002fd6c
c0008138:	68 c6 fb 02 c0       	push   0xc002fbc6
c000813d:	e8 56 7a 01 00       	call   c001fb98 <CPrintf>
c0008142:	83 c4 10             	add    esp,0x10
c0008145:	b8 00 00 00 00       	mov    eax,0x0
c000814a:	e9 95 00 00 00       	jmp    c00081e4 <pbuf_alloced_custom+0x120>
c000814f:	90                   	nop
c0008150:	90                   	nop
c0008151:	8d 76 00             	lea    esi,[esi+0x0]
c0008154:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008159:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000815e:	01 c2                	add    edx,eax
c0008160:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008165:	39 c2                	cmp    edx,eax
c0008167:	7d 07                	jge    c0008170 <pbuf_alloced_custom+0xac>
c0008169:	b8 00 00 00 00       	mov    eax,0x0
c000816e:	eb 74                	jmp    c00081e4 <pbuf_alloced_custom+0x120>
c0008170:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008174:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000817a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000817f:	74 17                	je     c0008198 <pbuf_alloced_custom+0xd4>
c0008181:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008186:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000818a:	01 c2                	add    edx,eax
c000818c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008190:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008193:	eb 0f                	jmp    c00081a4 <pbuf_alloced_custom+0xe0>
c0008195:	8d 76 00             	lea    esi,[esi+0x0]
c0008198:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000819c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00081a3:	90                   	nop
c00081a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081a8:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00081ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00081b4:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00081b8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081bc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00081bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081c3:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00081c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00081cb:	88 c2                	mov    dl,al
c00081cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081d1:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00081d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081d8:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00081de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00081e2:	66 90                	xchg   ax,ax
c00081e4:	83 c4 2c             	add    esp,0x2c
c00081e7:	c3                   	ret    

c00081e8 <pbuf_header>:
c00081e8:	83 ec 2c             	sub    esp,0x2c
c00081eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081ef:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00081f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00081f9:	75 15                	jne    c0008210 <pbuf_header+0x28>
c00081fb:	83 ec 08             	sub    esp,0x8
c00081fe:	68 f6 ff 02 c0       	push   0xc002fff6
c0008203:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008208:	e8 8b 79 01 00       	call   c001fb98 <CPrintf>
c000820d:	83 c4 10             	add    esp,0x10
c0008210:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008215:	85 c0                	test   eax,eax
c0008217:	74 07                	je     c0008220 <pbuf_header+0x38>
c0008219:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000821e:	75 08                	jne    c0008228 <pbuf_header+0x40>
c0008220:	b0 00                	mov    al,0x0
c0008222:	e9 5d 01 00 00       	jmp    c0008384 <pbuf_header+0x19c>
c0008227:	90                   	nop
c0008228:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c000822d:	85 c0                	test   eax,eax
c000822f:	79 3b                	jns    c000826c <pbuf_header+0x84>
c0008231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008235:	f7 d8                	neg    eax
c0008237:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000823c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008240:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008244:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008249:	0f b7 c0             	movzx  eax,ax
c000824c:	39 c2                	cmp    edx,eax
c000824e:	76 28                	jbe    c0008278 <pbuf_header+0x90>
c0008250:	83 ec 08             	sub    esp,0x8
c0008253:	68 47 ff 02 c0       	push   0xc002ff47
c0008258:	68 c6 fb 02 c0       	push   0xc002fbc6
c000825d:	e8 36 79 01 00       	call   c001fb98 <CPrintf>
c0008262:	83 c4 10             	add    esp,0x10
c0008265:	b0 01                	mov    al,0x1
c0008267:	e9 18 01 00 00       	jmp    c0008384 <pbuf_header+0x19c>
c000826c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008270:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008275:	8d 76 00             	lea    esi,[esi+0x0]
c0008278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000827c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000827f:	0f b6 c0             	movzx  eax,al
c0008282:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c0008287:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000828b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000828e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008292:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008297:	85 c0                	test   eax,eax
c0008299:	74 0d                	je     c00082a8 <pbuf_header+0xc0>
c000829b:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082a0:	83 f8 03             	cmp    eax,0x3
c00082a3:	75 3f                	jne    c00082e4 <pbuf_header+0xfc>
c00082a5:	8d 76 00             	lea    esi,[esi+0x0]
c00082a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082af:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00082b4:	f7 da                	neg    edx
c00082b6:	01 c2                	add    edx,eax
c00082b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082bc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00082c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00082ca:	83 c2 10             	add    edx,0x10
c00082cd:	39 d0                	cmp    eax,edx
c00082cf:	73 7f                	jae    c0008350 <pbuf_header+0x168>
c00082d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00082d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00082dc:	b0 01                	mov    al,0x1
c00082de:	e9 a1 00 00 00       	jmp    c0008384 <pbuf_header+0x19c>
c00082e3:	90                   	nop
c00082e4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082e9:	83 f8 02             	cmp    eax,0x2
c00082ec:	74 0a                	je     c00082f8 <pbuf_header+0x110>
c00082ee:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00082f3:	83 f8 01             	cmp    eax,0x1
c00082f6:	75 3c                	jne    c0008334 <pbuf_header+0x14c>
c00082f8:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c00082fd:	85 c0                	test   eax,eax
c00082ff:	79 2f                	jns    c0008330 <pbuf_header+0x148>
c0008301:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008305:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008309:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000830e:	0f b7 c0             	movzx  eax,ax
c0008311:	39 c2                	cmp    edx,eax
c0008313:	77 1b                	ja     c0008330 <pbuf_header+0x148>
c0008315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008319:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000831c:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008321:	f7 da                	neg    edx
c0008323:	01 c2                	add    edx,eax
c0008325:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008329:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000832c:	eb 22                	jmp    c0008350 <pbuf_header+0x168>
c000832e:	66 90                	xchg   ax,ax
c0008330:	b0 01                	mov    al,0x1
c0008332:	eb 50                	jmp    c0008384 <pbuf_header+0x19c>
c0008334:	83 ec 08             	sub    esp,0x8
c0008337:	68 65 ff 02 c0       	push   0xc002ff65
c000833c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008341:	e8 52 78 01 00       	call   c001fb98 <CPrintf>
c0008346:	83 c4 10             	add    esp,0x10
c0008349:	b0 01                	mov    al,0x1
c000834b:	eb 37                	jmp    c0008384 <pbuf_header+0x19c>
c000834d:	8d 76 00             	lea    esi,[esi+0x0]
c0008350:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008354:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000835c:	01 d0                	add    eax,edx
c000835e:	89 c2                	mov    edx,eax
c0008360:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008364:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008368:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000836c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000836f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008373:	01 d0                	add    eax,edx
c0008375:	89 c2                	mov    edx,eax
c0008377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000837b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000837f:	b0 00                	mov    al,0x0
c0008381:	8d 76 00             	lea    esi,[esi+0x0]
c0008384:	83 c4 2c             	add    esp,0x2c
c0008387:	c3                   	ret    

c0008388 <pbuf_free>:
c0008388:	83 ec 1c             	sub    esp,0x1c
c000838b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008390:	75 26                	jne    c00083b8 <pbuf_free+0x30>
c0008392:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008397:	75 17                	jne    c00083b0 <pbuf_free+0x28>
c0008399:	83 ec 08             	sub    esp,0x8
c000839c:	68 f6 ff 02 c0       	push   0xc002fff6
c00083a1:	68 c6 fb 02 c0       	push   0xc002fbc6
c00083a6:	e8 ed 77 01 00       	call   c001fb98 <CPrintf>
c00083ab:	83 c4 10             	add    esp,0x10
c00083ae:	66 90                	xchg   ax,ax
c00083b0:	b0 00                	mov    al,0x0
c00083b2:	e9 a9 01 00 00       	jmp    c0008560 <pbuf_free+0x1d8>
c00083b7:	90                   	nop
c00083b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083bc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083bf:	0f b6 c0             	movzx  eax,al
c00083c2:	85 c0                	test   eax,eax
c00083c4:	74 42                	je     c0008408 <pbuf_free+0x80>
c00083c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ca:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083cd:	0f b6 c0             	movzx  eax,al
c00083d0:	83 f8 01             	cmp    eax,0x1
c00083d3:	74 33                	je     c0008408 <pbuf_free+0x80>
c00083d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083d9:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083dc:	0f b6 c0             	movzx  eax,al
c00083df:	83 f8 02             	cmp    eax,0x2
c00083e2:	74 24                	je     c0008408 <pbuf_free+0x80>
c00083e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083e8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083eb:	0f b6 c0             	movzx  eax,al
c00083ee:	83 f8 03             	cmp    eax,0x3
c00083f1:	74 15                	je     c0008408 <pbuf_free+0x80>
c00083f3:	83 ec 08             	sub    esp,0x8
c00083f6:	68 73 ff 02 c0       	push   0xc002ff73
c00083fb:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008400:	e8 93 77 01 00       	call   c001fb98 <CPrintf>
c0008405:	83 c4 10             	add    esp,0x10
c0008408:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000840d:	e9 3e 01 00 00       	jmp    c0008550 <pbuf_free+0x1c8>
c0008412:	66 90                	xchg   ax,ax
c0008414:	e8 6f 77 01 00       	call   c001fb88 <CLockScheduler>
c0008419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000841d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008421:	0f b7 c0             	movzx  eax,ax
c0008424:	85 c0                	test   eax,eax
c0008426:	75 18                	jne    c0008440 <pbuf_free+0xb8>
c0008428:	83 ec 08             	sub    esp,0x8
c000842b:	68 88 ff 02 c0       	push   0xc002ff88
c0008430:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008435:	e8 5e 77 01 00       	call   c001fb98 <CPrintf>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	8d 76 00             	lea    esi,[esi+0x0]
c0008440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008444:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008448:	83 e8 01             	sub    eax,0x1
c000844b:	89 c2                	mov    edx,eax
c000844d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008451:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008459:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000845d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008462:	e8 05 77 01 00       	call   c001fb6c <CUnlockScheduler>
c0008467:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000846c:	85 c0                	test   eax,eax
c000846e:	0f 85 d4 00 00 00    	jne    c0008548 <pbuf_free+0x1c0>
c0008474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008478:	8b 00                	mov    eax,DWORD PTR [eax]
c000847a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000847e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008482:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008485:	0f b6 c0             	movzx  eax,al
c0008488:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000848d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008491:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008494:	0f b6 c0             	movzx  eax,al
c0008497:	83 e0 02             	and    eax,0x2
c000849a:	74 3c                	je     c00084d8 <pbuf_free+0x150>
c000849c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00084a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00084a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00084a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00084a9:	85 c0                	test   eax,eax
c00084ab:	75 17                	jne    c00084c4 <pbuf_free+0x13c>
c00084ad:	83 ec 08             	sub    esp,0x8
c00084b0:	68 90 fd 02 c0       	push   0xc002fd90
c00084b5:	68 c6 fb 02 c0       	push   0xc002fbc6
c00084ba:	e8 d9 76 01 00       	call   c001fb98 <CPrintf>
c00084bf:	83 c4 10             	add    esp,0x10
c00084c2:	66 90                	xchg   ax,ax
c00084c4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00084c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00084d1:	ff d0                	call   eax
c00084d3:	83 c4 10             	add    esp,0x10
c00084d6:	eb 58                	jmp    c0008530 <pbuf_free+0x1a8>
c00084d8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084dd:	83 f8 03             	cmp    eax,0x3
c00084e0:	75 16                	jne    c00084f8 <pbuf_free+0x170>
c00084e2:	83 ec 08             	sub    esp,0x8
c00084e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084e9:	6a 0d                	push   0xd
c00084eb:	e8 d8 f5 ff ff       	call   c0007ac8 <memp_free>
c00084f0:	83 c4 10             	add    esp,0x10
c00084f3:	eb 3b                	jmp    c0008530 <pbuf_free+0x1a8>
c00084f5:	8d 76 00             	lea    esi,[esi+0x0]
c00084f8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084fd:	83 f8 01             	cmp    eax,0x1
c0008500:	74 0a                	je     c000850c <pbuf_free+0x184>
c0008502:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008507:	83 f8 02             	cmp    eax,0x2
c000850a:	75 14                	jne    c0008520 <pbuf_free+0x198>
c000850c:	83 ec 08             	sub    esp,0x8
c000850f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008513:	6a 0c                	push   0xc
c0008515:	e8 ae f5 ff ff       	call   c0007ac8 <memp_free>
c000851a:	83 c4 10             	add    esp,0x10
c000851d:	eb 11                	jmp    c0008530 <pbuf_free+0x1a8>
c000851f:	90                   	nop
c0008520:	83 ec 0c             	sub    esp,0xc
c0008523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008527:	e8 74 eb ff ff       	call   c00070a0 <mem_free>
c000852c:	83 c4 10             	add    esp,0x10
c000852f:	90                   	nop
c0008530:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008534:	83 c0 01             	add    eax,0x1
c0008537:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000853b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000853f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008543:	eb 0b                	jmp    c0008550 <pbuf_free+0x1c8>
c0008545:	8d 76 00             	lea    esi,[esi+0x0]
c0008548:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008550:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008555:	0f 85 b9 fe ff ff    	jne    c0008414 <pbuf_free+0x8c>
c000855b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000855f:	90                   	nop
c0008560:	83 c4 1c             	add    esp,0x1c
c0008563:	c3                   	ret    

c0008564 <pbuf_alloc>:
c0008564:	83 ec 3c             	sub    esp,0x3c
c0008567:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000856b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008570:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0008577:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c000857c:	74 2a                	je     c00085a8 <pbuf_alloc+0x44>
c000857e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008583:	74 13                	je     c0008598 <pbuf_alloc+0x34>
c0008585:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c000858a:	74 2c                	je     c00085b8 <pbuf_alloc+0x54>
c000858c:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c0008591:	74 55                	je     c00085e8 <pbuf_alloc+0x84>
c0008593:	eb 33                	jmp    c00085c8 <pbuf_alloc+0x64>
c0008595:	8d 76 00             	lea    esi,[esi+0x0]
c0008598:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c000859d:	83 c0 14             	add    eax,0x14
c00085a0:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00085a5:	8d 76 00             	lea    esi,[esi+0x0]
c00085a8:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00085ad:	83 c0 14             	add    eax,0x14
c00085b0:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00085b5:	8d 76 00             	lea    esi,[esi+0x0]
c00085b8:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00085bd:	83 c0 0e             	add    eax,0xe
c00085c0:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00085c5:	eb 25                	jmp    c00085ec <pbuf_alloc+0x88>
c00085c7:	90                   	nop
c00085c8:	83 ec 08             	sub    esp,0x8
c00085cb:	68 9e ff 02 c0       	push   0xc002ff9e
c00085d0:	68 c6 fb 02 c0       	push   0xc002fbc6
c00085d5:	e8 be 75 01 00       	call   c001fb98 <CPrintf>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	b8 00 00 00 00       	mov    eax,0x0
c00085e2:	e9 71 03 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c00085e7:	90                   	nop
c00085e8:	90                   	nop
c00085e9:	8d 76 00             	lea    esi,[esi+0x0]
c00085ec:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c00085f1:	77 11                	ja     c0008604 <pbuf_alloc+0xa0>
c00085f3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00085f8:	0f 85 c6 02 00 00    	jne    c00088c4 <pbuf_alloc+0x360>
c00085fe:	e9 41 02 00 00       	jmp    c0008844 <pbuf_alloc+0x2e0>
c0008603:	90                   	nop
c0008604:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008609:	0f 85 15 03 00 00    	jne    c0008924 <pbuf_alloc+0x3c0>
c000860f:	83 ec 0c             	sub    esp,0xc
c0008612:	6a 0d                	push   0xd
c0008614:	e8 83 f3 ff ff       	call   c000799c <memp_malloc>
c0008619:	83 c4 10             	add    esp,0x10
c000861c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008620:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008625:	75 11                	jne    c0008638 <pbuf_alloc+0xd4>
c0008627:	e8 3c fa ff ff       	call   c0008068 <pbuf_pool_is_empty>
c000862c:	b8 00 00 00 00       	mov    eax,0x0
c0008631:	e9 22 03 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008636:	66 90                	xchg   ax,ax
c0008638:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000863c:	88 c2                	mov    dl,al
c000863e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008642:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008645:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008649:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000864f:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008654:	8d 50 10             	lea    edx,[eax+0x10]
c0008657:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000865b:	01 c2                	add    edx,eax
c000865d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008661:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008664:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008670:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008675:	ba 4e 02 00 00       	mov    edx,0x24e
c000867a:	29 c2                	sub    edx,eax
c000867c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008681:	39 c2                	cmp    edx,eax
c0008683:	0f 4e c2             	cmovle eax,edx
c0008686:	89 c2                	mov    edx,eax
c0008688:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000868c:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008690:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008694:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000869b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000869f:	0f b7 c0             	movzx  eax,ax
c00086a2:	01 c2                	add    edx,eax
c00086a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086a8:	05 5e 02 00 00       	add    eax,0x25e
c00086ad:	39 c2                	cmp    edx,eax
c00086af:	76 17                	jbe    c00086c8 <pbuf_alloc+0x164>
c00086b1:	83 ec 08             	sub    esp,0x8
c00086b4:	68 b4 fd 02 c0       	push   0xc002fdb4
c00086b9:	68 c6 fb 02 c0       	push   0xc002fbc6
c00086be:	e8 d5 74 01 00       	call   c001fb98 <CPrintf>
c00086c3:	83 c4 10             	add    esp,0x10
c00086c6:	66 90                	xchg   ax,ax
c00086c8:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00086cd:	ba 4e 02 00 00       	mov    edx,0x24e
c00086d2:	29 c2                	sub    edx,eax
c00086d4:	89 d0                	mov    eax,edx
c00086d6:	85 c0                	test   eax,eax
c00086d8:	7f 16                	jg     c00086f0 <pbuf_alloc+0x18c>
c00086da:	83 ec 08             	sub    esp,0x8
c00086dd:	68 e8 fd 02 c0       	push   0xc002fde8
c00086e2:	68 c6 fb 02 c0       	push   0xc002fbc6
c00086e7:	e8 ac 74 01 00       	call   c001fb98 <CPrintf>
c00086ec:	83 c4 10             	add    esp,0x10
c00086ef:	90                   	nop
c00086f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086f4:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00086fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008702:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008707:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000870b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000870f:	0f b7 c0             	movzx  eax,ax
c0008712:	29 c2                	sub    edx,eax
c0008714:	89 d0                	mov    eax,edx
c0008716:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000871a:	e9 15 01 00 00       	jmp    c0008834 <pbuf_alloc+0x2d0>
c000871f:	90                   	nop
c0008720:	83 ec 0c             	sub    esp,0xc
c0008723:	6a 0d                	push   0xd
c0008725:	e8 72 f2 ff ff       	call   c000799c <memp_malloc>
c000872a:	83 c4 10             	add    esp,0x10
c000872d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008731:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008736:	75 20                	jne    c0008758 <pbuf_alloc+0x1f4>
c0008738:	e8 2b f9 ff ff       	call   c0008068 <pbuf_pool_is_empty>
c000873d:	83 ec 0c             	sub    esp,0xc
c0008740:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008744:	e8 3f fc ff ff       	call   c0008388 <pbuf_free>
c0008749:	83 c4 10             	add    esp,0x10
c000874c:	b8 00 00 00 00       	mov    eax,0x0
c0008751:	e9 02 02 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008756:	66 90                	xchg   ax,ax
c0008758:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000875c:	88 c2                	mov    dl,al
c000875e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008762:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008765:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008769:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000876d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008771:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008777:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000877b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000877f:	89 10                	mov    DWORD PTR [eax],edx
c0008781:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c0008789:	7e 15                	jle    c00087a0 <pbuf_alloc+0x23c>
c000878b:	83 ec 08             	sub    esp,0x8
c000878e:	68 b9 ff 02 c0       	push   0xc002ffb9
c0008793:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008798:	e8 fb 73 01 00       	call   c001fb98 <CPrintf>
c000879d:	83 c4 10             	add    esp,0x10
c00087a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00087a4:	89 c2                	mov    edx,eax
c00087a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087aa:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00087b2:	0f b7 d0             	movzx  edx,ax
c00087b5:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c00087bb:	76 07                	jbe    c00087c4 <pbuf_alloc+0x260>
c00087bd:	b8 4e 02 00 00       	mov    eax,0x24e
c00087c2:	66 90                	xchg   ax,ax
c00087c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00087c8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087d0:	8d 50 10             	lea    edx,[eax+0x10]
c00087d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00087d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087de:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00087e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00087e9:	0f b7 c0             	movzx  eax,ax
c00087ec:	01 c2                	add    edx,eax
c00087ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f2:	05 5e 02 00 00       	add    eax,0x25e
c00087f7:	39 c2                	cmp    edx,eax
c00087f9:	76 15                	jbe    c0008810 <pbuf_alloc+0x2ac>
c00087fb:	83 ec 08             	sub    esp,0x8
c00087fe:	68 b4 fd 02 c0       	push   0xc002fdb4
c0008803:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008808:	e8 8b 73 01 00       	call   c001fb98 <CPrintf>
c000880d:	83 c4 10             	add    esp,0x10
c0008810:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008814:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000881a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000881e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008822:	0f b7 c0             	movzx  eax,ax
c0008825:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008829:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000882d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008831:	8d 76 00             	lea    esi,[esi+0x0]
c0008834:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008839:	0f 8f e1 fe ff ff    	jg     c0008720 <pbuf_alloc+0x1bc>
c000883f:	e9 fc 00 00 00       	jmp    c0008940 <pbuf_alloc+0x3dc>
c0008844:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000884d:	01 d0                	add    eax,edx
c000884f:	83 c0 10             	add    eax,0x10
c0008852:	0f b7 c0             	movzx  eax,ax
c0008855:	83 ec 0c             	sub    esp,0xc
c0008858:	50                   	push   eax
c0008859:	e8 76 ec ff ff       	call   c00074d4 <mem_malloc>
c000885e:	83 c4 10             	add    esp,0x10
c0008861:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008865:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000886a:	75 0c                	jne    c0008878 <pbuf_alloc+0x314>
c000886c:	b8 00 00 00 00       	mov    eax,0x0
c0008871:	e9 e2 00 00 00       	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008876:	66 90                	xchg   ax,ax
c0008878:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c000887d:	8d 50 10             	lea    edx,[eax+0x10]
c0008880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008884:	01 c2                	add    edx,eax
c0008886:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000888a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000888d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008895:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008899:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000889d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00088a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088a4:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00088a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ac:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088b2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00088b6:	88 c2                	mov    dl,al
c00088b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088bc:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00088bf:	eb 7f                	jmp    c0008940 <pbuf_alloc+0x3dc>
c00088c1:	8d 76 00             	lea    esi,[esi+0x0]
c00088c4:	83 ec 0c             	sub    esp,0xc
c00088c7:	6a 0c                	push   0xc
c00088c9:	e8 ce f0 ff ff       	call   c000799c <memp_malloc>
c00088ce:	83 c4 10             	add    esp,0x10
c00088d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00088d5:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00088da:	75 08                	jne    c00088e4 <pbuf_alloc+0x380>
c00088dc:	b8 00 00 00 00       	mov    eax,0x0
c00088e1:	eb 75                	jmp    c0008958 <pbuf_alloc+0x3f4>
c00088e3:	90                   	nop
c00088e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00088ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00088f7:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00088fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088ff:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008902:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008906:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000890a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000890e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008914:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008918:	88 c2                	mov    dl,al
c000891a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000891e:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008921:	eb 1d                	jmp    c0008940 <pbuf_alloc+0x3dc>
c0008923:	90                   	nop
c0008924:	83 ec 08             	sub    esp,0x8
c0008927:	68 cd ff 02 c0       	push   0xc002ffcd
c000892c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008931:	e8 62 72 01 00       	call   c001fb98 <CPrintf>
c0008936:	83 c4 10             	add    esp,0x10
c0008939:	b8 00 00 00 00       	mov    eax,0x0
c000893e:	eb 18                	jmp    c0008958 <pbuf_alloc+0x3f4>
c0008940:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008944:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000894a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000894e:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008956:	66 90                	xchg   ax,ax
c0008958:	83 c4 3c             	add    esp,0x3c
c000895b:	c3                   	ret    

c000895c <pbuf_realloc>:
c000895c:	83 ec 2c             	sub    esp,0x2c
c000895f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008963:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008968:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000896d:	75 15                	jne    c0008984 <pbuf_realloc+0x28>
c000896f:	83 ec 08             	sub    esp,0x8
c0008972:	68 e8 ff 02 c0       	push   0xc002ffe8
c0008977:	68 c6 fb 02 c0       	push   0xc002fbc6
c000897c:	e8 17 72 01 00       	call   c001fb98 <CPrintf>
c0008981:	83 c4 10             	add    esp,0x10
c0008984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008988:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000898b:	0f b6 c0             	movzx  eax,al
c000898e:	83 f8 03             	cmp    eax,0x3
c0008991:	74 41                	je     c00089d4 <pbuf_realloc+0x78>
c0008993:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008997:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000899a:	0f b6 c0             	movzx  eax,al
c000899d:	83 f8 01             	cmp    eax,0x1
c00089a0:	74 32                	je     c00089d4 <pbuf_realloc+0x78>
c00089a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089a6:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089a9:	0f b6 c0             	movzx  eax,al
c00089ac:	85 c0                	test   eax,eax
c00089ae:	74 24                	je     c00089d4 <pbuf_realloc+0x78>
c00089b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089b4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089b7:	0f b6 c0             	movzx  eax,al
c00089ba:	83 f8 02             	cmp    eax,0x2
c00089bd:	74 15                	je     c00089d4 <pbuf_realloc+0x78>
c00089bf:	83 ec 08             	sub    esp,0x8
c00089c2:	68 00 00 03 c0       	push   0xc0030000
c00089c7:	68 c6 fb 02 c0       	push   0xc002fbc6
c00089cc:	e8 c7 71 01 00       	call   c001fb98 <CPrintf>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089db:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089e0:	0f b7 c0             	movzx  eax,ax
c00089e3:	39 c2                	cmp    edx,eax
c00089e5:	0f 83 71 01 00 00    	jae    c0008b5c <pbuf_realloc+0x200>
c00089eb:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00089f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089f7:	0f b7 c0             	movzx  eax,ax
c00089fa:	29 c2                	sub    edx,eax
c00089fc:	89 d0                	mov    eax,edx
c00089fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a06:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a13:	eb 7b                	jmp    c0008a90 <pbuf_realloc+0x134>
c0008a15:	8d 76 00             	lea    esi,[esi+0x0]
c0008a18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a20:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008a25:	89 d1                	mov    ecx,edx
c0008a27:	29 c1                	sub    ecx,eax
c0008a29:	89 c8                	mov    eax,ecx
c0008a2b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008a30:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008a38:	7e 16                	jle    c0008a50 <pbuf_realloc+0xf4>
c0008a3a:	83 ec 08             	sub    esp,0x8
c0008a3d:	68 1b 00 03 c0       	push   0xc003001b
c0008a42:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008a47:	e8 4c 71 01 00       	call   c001fb98 <CPrintf>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	90                   	nop
c0008a50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008a57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008a5b:	01 d0                	add    eax,edx
c0008a5d:	89 c2                	mov    edx,eax
c0008a5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a63:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a71:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a76:	75 18                	jne    c0008a90 <pbuf_realloc+0x134>
c0008a78:	83 ec 08             	sub    esp,0x8
c0008a7b:	68 2c 00 03 c0       	push   0xc003002c
c0008a80:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008a85:	e8 0e 71 01 00       	call   c001fb98 <CPrintf>
c0008a8a:	83 c4 10             	add    esp,0x10
c0008a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a94:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a98:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a9d:	0f b7 c0             	movzx  eax,ax
c0008aa0:	39 c2                	cmp    edx,eax
c0008aa2:	0f 87 70 ff ff ff    	ja     c0008a18 <pbuf_realloc+0xbc>
c0008aa8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aac:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008aaf:	0f b6 c0             	movzx  eax,al
c0008ab2:	85 c0                	test   eax,eax
c0008ab4:	75 5e                	jne    c0008b14 <pbuf_realloc+0x1b8>
c0008ab6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aba:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008abe:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008ac3:	0f b7 c0             	movzx  eax,ax
c0008ac6:	39 c2                	cmp    edx,eax
c0008ac8:	74 4a                	je     c0008b14 <pbuf_realloc+0x1b8>
c0008aca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ad1:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008ad5:	89 c2                	mov    edx,eax
c0008ad7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008adc:	01 d0                	add    eax,edx
c0008ade:	0f b7 c0             	movzx  eax,ax
c0008ae1:	83 ec 08             	sub    esp,0x8
c0008ae4:	50                   	push   eax
c0008ae5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008ae9:	e8 d6 e6 ff ff       	call   c00071c4 <mem_trim>
c0008aee:	83 c4 10             	add    esp,0x10
c0008af1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008af5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008afa:	75 18                	jne    c0008b14 <pbuf_realloc+0x1b8>
c0008afc:	83 ec 08             	sub    esp,0x8
c0008aff:	68 44 00 03 c0       	push   0xc0030044
c0008b04:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008b09:	e8 8a 70 01 00       	call   c001fb98 <CPrintf>
c0008b0e:	83 c4 10             	add    esp,0x10
c0008b11:	8d 76 00             	lea    esi,[esi+0x0]
c0008b14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b18:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008b1d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008b21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b25:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008b29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b2d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008b31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b37:	85 c0                	test   eax,eax
c0008b39:	74 15                	je     c0008b50 <pbuf_realloc+0x1f4>
c0008b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b41:	83 ec 0c             	sub    esp,0xc
c0008b44:	50                   	push   eax
c0008b45:	e8 3e f8 ff ff       	call   c0008388 <pbuf_free>
c0008b4a:	83 c4 10             	add    esp,0x10
c0008b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008b5a:	eb 04                	jmp    c0008b60 <pbuf_realloc+0x204>
c0008b5c:	90                   	nop
c0008b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b60:	83 c4 2c             	add    esp,0x2c
c0008b63:	c3                   	ret    

c0008b64 <pbuf_clen>:
c0008b64:	83 ec 10             	sub    esp,0x10
c0008b67:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b6c:	eb 1a                	jmp    c0008b88 <pbuf_clen+0x24>
c0008b6e:	66 90                	xchg   ax,ax
c0008b70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b74:	83 c0 01             	add    eax,0x1
c0008b77:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008b7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008b85:	8d 76 00             	lea    esi,[esi+0x0]
c0008b88:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008b8d:	75 e1                	jne    c0008b70 <pbuf_clen+0xc>
c0008b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008b93:	83 c4 10             	add    esp,0x10
c0008b96:	c3                   	ret    
c0008b97:	90                   	nop

c0008b98 <pbuf_ref>:
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008ba0:	74 22                	je     c0008bc4 <pbuf_ref+0x2c>
c0008ba2:	e8 e1 6f 01 00       	call   c001fb88 <CLockScheduler>
c0008ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bab:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008baf:	83 c0 01             	add    eax,0x1
c0008bb2:	89 c2                	mov    edx,eax
c0008bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bb8:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008bbc:	e8 ab 6f 01 00       	call   c001fb6c <CUnlockScheduler>
c0008bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008bc4:	90                   	nop
c0008bc5:	83 c4 0c             	add    esp,0xc
c0008bc8:	c3                   	ret    
c0008bc9:	8d 76 00             	lea    esi,[esi+0x0]

c0008bcc <pbuf_cat>:
c0008bcc:	83 ec 1c             	sub    esp,0x1c
c0008bcf:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008bd4:	74 0a                	je     c0008be0 <pbuf_cat+0x14>
c0008bd6:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008bdb:	75 1f                	jne    c0008bfc <pbuf_cat+0x30>
c0008bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0008be0:	83 ec 08             	sub    esp,0x8
c0008be3:	68 1c fe 02 c0       	push   0xc002fe1c
c0008be8:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008bed:	e8 a6 6f 01 00       	call   c001fb98 <CPrintf>
c0008bf2:	83 c4 10             	add    esp,0x10
c0008bf5:	e9 ae 00 00 00       	jmp    c0008ca8 <pbuf_cat+0xdc>
c0008bfa:	66 90                	xchg   ax,ax
c0008bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c00:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c04:	eb 26                	jmp    c0008c2c <pbuf_cat+0x60>
c0008c06:	66 90                	xchg   ax,ax
c0008c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c0c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c13:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c16:	01 d0                	add    eax,edx
c0008c18:	89 c2                	mov    edx,eax
c0008c1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c1e:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c26:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c32:	85 c0                	test   eax,eax
c0008c34:	75 d2                	jne    c0008c08 <pbuf_cat+0x3c>
c0008c36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c3a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c41:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c45:	0f b7 d2             	movzx  edx,dx
c0008c48:	0f b7 c0             	movzx  eax,ax
c0008c4b:	39 c2                	cmp    edx,eax
c0008c4d:	74 15                	je     c0008c64 <pbuf_cat+0x98>
c0008c4f:	83 ec 08             	sub    esp,0x8
c0008c52:	68 54 fe 02 c0       	push   0xc002fe54
c0008c57:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008c5c:	e8 37 6f 01 00       	call   c001fb98 <CPrintf>
c0008c61:	83 c4 10             	add    esp,0x10
c0008c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c6a:	85 c0                	test   eax,eax
c0008c6c:	74 16                	je     c0008c84 <pbuf_cat+0xb8>
c0008c6e:	83 ec 08             	sub    esp,0x8
c0008c71:	68 60 00 03 c0       	push   0xc0030060
c0008c76:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008c7b:	e8 18 6f 01 00       	call   c001fb98 <CPrintf>
c0008c80:	83 c4 10             	add    esp,0x10
c0008c83:	90                   	nop
c0008c84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c88:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008c8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c92:	01 d0                	add    eax,edx
c0008c94:	89 c2                	mov    edx,eax
c0008c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008c9a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008ca2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ca6:	89 10                	mov    DWORD PTR [eax],edx
c0008ca8:	83 c4 1c             	add    esp,0x1c
c0008cab:	c3                   	ret    

c0008cac <pbuf_chain>:
c0008cac:	83 ec 0c             	sub    esp,0xc
c0008caf:	83 ec 08             	sub    esp,0x8
c0008cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cba:	e8 0d ff ff ff       	call   c0008bcc <pbuf_cat>
c0008cbf:	83 c4 10             	add    esp,0x10
c0008cc2:	83 ec 0c             	sub    esp,0xc
c0008cc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008cc9:	e8 ca fe ff ff       	call   c0008b98 <pbuf_ref>
c0008cce:	83 c4 10             	add    esp,0x10
c0008cd1:	90                   	nop
c0008cd2:	83 c4 0c             	add    esp,0xc
c0008cd5:	c3                   	ret    
c0008cd6:	66 90                	xchg   ax,ax

c0008cd8 <pbuf_dechain>:
c0008cd8:	83 ec 1c             	sub    esp,0x1c
c0008cdb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ce4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ce6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008cef:	0f 84 8b 00 00 00    	je     c0008d80 <pbuf_dechain+0xa8>
c0008cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008cfc:	0f b7 d0             	movzx  edx,ax
c0008cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d06:	0f b7 c8             	movzx  ecx,ax
c0008d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d11:	0f b7 c0             	movzx  eax,ax
c0008d14:	29 c1                	sub    ecx,eax
c0008d16:	89 c8                	mov    eax,ecx
c0008d18:	39 c2                	cmp    edx,eax
c0008d1a:	74 18                	je     c0008d34 <pbuf_dechain+0x5c>
c0008d1c:	83 ec 08             	sub    esp,0x8
c0008d1f:	68 84 fe 02 c0       	push   0xc002fe84
c0008d24:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008d29:	e8 6a 6e 01 00       	call   c001fb98 <CPrintf>
c0008d2e:	83 c4 10             	add    esp,0x10
c0008d31:	8d 76 00             	lea    esi,[esi+0x0]
c0008d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d38:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d3f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d43:	89 d1                	mov    ecx,edx
c0008d45:	29 c1                	sub    ecx,eax
c0008d47:	89 c8                	mov    eax,ecx
c0008d49:	89 c2                	mov    edx,eax
c0008d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d4f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d57:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d61:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d69:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008d6d:	83 ec 0c             	sub    esp,0xc
c0008d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d74:	e8 0f f6 ff ff       	call   c0008388 <pbuf_free>
c0008d79:	83 c4 10             	add    esp,0x10
c0008d7c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d84:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d8f:	0f b7 d2             	movzx  edx,dx
c0008d92:	0f b7 c0             	movzx  eax,ax
c0008d95:	39 c2                	cmp    edx,eax
c0008d97:	74 17                	je     c0008db0 <pbuf_dechain+0xd8>
c0008d99:	83 ec 08             	sub    esp,0x8
c0008d9c:	68 70 00 03 c0       	push   0xc0030070
c0008da1:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008da6:	e8 ed 6d 01 00       	call   c001fb98 <CPrintf>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	66 90                	xchg   ax,ax
c0008db0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008db5:	85 c0                	test   eax,eax
c0008db7:	75 07                	jne    c0008dc0 <pbuf_dechain+0xe8>
c0008db9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008dbd:	eb 09                	jmp    c0008dc8 <pbuf_dechain+0xf0>
c0008dbf:	90                   	nop
c0008dc0:	b8 00 00 00 00       	mov    eax,0x0
c0008dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0008dc8:	83 c4 1c             	add    esp,0x1c
c0008dcb:	c3                   	ret    

c0008dcc <pbuf_copy>:
c0008dcc:	53                   	push   ebx
c0008dcd:	83 ec 18             	sub    esp,0x18
c0008dd0:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008dd7:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008dde:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008de3:	74 1f                	je     c0008e04 <pbuf_copy+0x38>
c0008de5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008dea:	74 18                	je     c0008e04 <pbuf_copy+0x38>
c0008dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008df0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008df3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008df7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008dfa:	0f b7 d2             	movzx  edx,dx
c0008dfd:	0f b7 c0             	movzx  eax,ax
c0008e00:	39 c2                	cmp    edx,eax
c0008e02:	73 1c                	jae    c0008e20 <pbuf_copy+0x54>
c0008e04:	83 ec 08             	sub    esp,0x8
c0008e07:	68 a8 fe 02 c0       	push   0xc002fea8
c0008e0c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008e11:	e8 82 6d 01 00       	call   c001fb98 <CPrintf>
c0008e16:	83 c4 10             	add    esp,0x10
c0008e19:	b0 f2                	mov    al,0xf2
c0008e1b:	e9 0c 02 00 00       	jmp    c000902c <pbuf_copy+0x260>
c0008e20:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008e25:	75 15                	jne    c0008e3c <pbuf_copy+0x70>
c0008e27:	83 ec 08             	sub    esp,0x8
c0008e2a:	68 85 00 03 c0       	push   0xc0030085
c0008e2f:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008e34:	e8 5f 6d 01 00       	call   c001fb98 <CPrintf>
c0008e39:	83 c4 10             	add    esp,0x10
c0008e3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e40:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e44:	0f b7 d0             	movzx  edx,ax
c0008e47:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008e4c:	89 d1                	mov    ecx,edx
c0008e4e:	29 c1                	sub    ecx,eax
c0008e50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e54:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e58:	0f b7 d0             	movzx  edx,ax
c0008e5b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008e60:	29 c2                	sub    edx,eax
c0008e62:	89 d0                	mov    eax,edx
c0008e64:	39 c1                	cmp    ecx,eax
c0008e66:	7c 1c                	jl     c0008e84 <pbuf_copy+0xb8>
c0008e68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e6c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008e74:	89 d3                	mov    ebx,edx
c0008e76:	29 c3                	sub    ebx,eax
c0008e78:	89 d8                	mov    eax,ebx
c0008e7a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e7f:	eb 1b                	jmp    c0008e9c <pbuf_copy+0xd0>
c0008e81:	8d 76 00             	lea    esi,[esi+0x0]
c0008e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e88:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008e8c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008e91:	89 d3                	mov    ebx,edx
c0008e93:	29 c3                	sub    ebx,eax
c0008e95:	89 d8                	mov    eax,ebx
c0008e97:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008e9c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008ea1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ea5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008ea8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008ead:	01 d1                	add    ecx,edx
c0008eaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008eb3:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008eb6:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ebb:	01 da                	add    edx,ebx
c0008ebd:	83 ec 04             	sub    esp,0x4
c0008ec0:	50                   	push   eax
c0008ec1:	51                   	push   ecx
c0008ec2:	52                   	push   edx
c0008ec3:	e8 b2 74 ff ff       	call   c000037a <memcpy>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ed5:	01 d0                	add    eax,edx
c0008ed7:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008edc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008ee5:	01 d0                	add    eax,edx
c0008ee7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ef4:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008ef9:	0f b7 c0             	movzx  eax,ax
c0008efc:	39 c2                	cmp    edx,eax
c0008efe:	76 18                	jbe    c0008f18 <pbuf_copy+0x14c>
c0008f00:	83 ec 08             	sub    esp,0x8
c0008f03:	68 92 00 03 c0       	push   0xc0030092
c0008f08:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008f0d:	e8 86 6c 01 00       	call   c001fb98 <CPrintf>
c0008f12:	83 c4 10             	add    esp,0x10
c0008f15:	8d 76 00             	lea    esi,[esi+0x0]
c0008f18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f1c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f20:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008f25:	0f b7 c0             	movzx  eax,ax
c0008f28:	39 c2                	cmp    edx,eax
c0008f2a:	75 14                	jne    c0008f40 <pbuf_copy+0x174>
c0008f2c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f37:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008f40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f44:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f48:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f4d:	0f b7 c0             	movzx  eax,ax
c0008f50:	39 c2                	cmp    edx,eax
c0008f52:	76 18                	jbe    c0008f6c <pbuf_copy+0x1a0>
c0008f54:	83 ec 08             	sub    esp,0x8
c0008f57:	68 a9 00 03 c0       	push   0xc00300a9
c0008f5c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008f61:	e8 32 6c 01 00       	call   c001fb98 <CPrintf>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	8d 76 00             	lea    esi,[esi+0x0]
c0008f6c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f70:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008f74:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008f79:	0f b7 c0             	movzx  eax,ax
c0008f7c:	39 c2                	cmp    edx,eax
c0008f7e:	72 14                	jb     c0008f94 <pbuf_copy+0x1c8>
c0008f80:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008f87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008f91:	8d 76 00             	lea    esi,[esi+0x0]
c0008f94:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f99:	74 3d                	je     c0008fd8 <pbuf_copy+0x20c>
c0008f9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f9f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fa7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008faa:	0f b7 d2             	movzx  edx,dx
c0008fad:	0f b7 c0             	movzx  eax,ax
c0008fb0:	39 c2                	cmp    edx,eax
c0008fb2:	75 24                	jne    c0008fd8 <pbuf_copy+0x20c>
c0008fb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	74 1a                	je     c0008fd8 <pbuf_copy+0x20c>
c0008fbe:	83 ec 08             	sub    esp,0x8
c0008fc1:	68 d8 fe 02 c0       	push   0xc002fed8
c0008fc6:	68 c6 fb 02 c0       	push   0xc002fbc6
c0008fcb:	e8 c8 6b 01 00       	call   c001fb98 <CPrintf>
c0008fd0:	83 c4 10             	add    esp,0x10
c0008fd3:	b0 fa                	mov    al,0xfa
c0008fd5:	eb 55                	jmp    c000902c <pbuf_copy+0x260>
c0008fd7:	90                   	nop
c0008fd8:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008fdd:	74 3d                	je     c000901c <pbuf_copy+0x250>
c0008fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008fe3:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008feb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008fee:	0f b7 d2             	movzx  edx,dx
c0008ff1:	0f b7 c0             	movzx  eax,ax
c0008ff4:	39 c2                	cmp    edx,eax
c0008ff6:	75 24                	jne    c000901c <pbuf_copy+0x250>
c0008ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ffc:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ffe:	85 c0                	test   eax,eax
c0009000:	74 1a                	je     c000901c <pbuf_copy+0x250>
c0009002:	83 ec 08             	sub    esp,0x8
c0009005:	68 d8 fe 02 c0       	push   0xc002fed8
c000900a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000900f:	e8 84 6b 01 00       	call   c001fb98 <CPrintf>
c0009014:	83 c4 10             	add    esp,0x10
c0009017:	b0 fa                	mov    al,0xfa
c0009019:	eb 11                	jmp    c000902c <pbuf_copy+0x260>
c000901b:	90                   	nop
c000901c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009021:	0f 85 f9 fd ff ff    	jne    c0008e20 <pbuf_copy+0x54>
c0009027:	b0 00                	mov    al,0x0
c0009029:	8d 76 00             	lea    esi,[esi+0x0]
c000902c:	83 c4 18             	add    esp,0x18
c000902f:	5b                   	pop    ebx
c0009030:	c3                   	ret    
c0009031:	8d 76 00             	lea    esi,[esi+0x0]

c0009034 <pbuf_copy_partial>:
c0009034:	53                   	push   ebx
c0009035:	83 ec 28             	sub    esp,0x28
c0009038:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000903c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009040:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0009045:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000904a:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009051:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009056:	75 20                	jne    c0009078 <pbuf_copy_partial+0x44>
c0009058:	83 ec 08             	sub    esp,0x8
c000905b:	68 04 ff 02 c0       	push   0xc002ff04
c0009060:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009065:	e8 2e 6b 01 00       	call   c001fb98 <CPrintf>
c000906a:	83 c4 10             	add    esp,0x10
c000906d:	b8 00 00 00 00       	mov    eax,0x0
c0009072:	e9 59 01 00 00       	jmp    c00091d0 <pbuf_copy_partial+0x19c>
c0009077:	90                   	nop
c0009078:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000907d:	75 21                	jne    c00090a0 <pbuf_copy_partial+0x6c>
c000907f:	83 ec 08             	sub    esp,0x8
c0009082:	68 24 ff 02 c0       	push   0xc002ff24
c0009087:	68 c6 fb 02 c0       	push   0xc002fbc6
c000908c:	e8 07 6b 01 00       	call   c001fb98 <CPrintf>
c0009091:	83 c4 10             	add    esp,0x10
c0009094:	b8 00 00 00 00       	mov    eax,0x0
c0009099:	e9 32 01 00 00       	jmp    c00091d0 <pbuf_copy_partial+0x19c>
c000909e:	66 90                	xchg   ax,ax
c00090a0:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c00090a7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00090ac:	74 0a                	je     c00090b8 <pbuf_copy_partial+0x84>
c00090ae:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00090b3:	75 0f                	jne    c00090c4 <pbuf_copy_partial+0x90>
c00090b5:	8d 76 00             	lea    esi,[esi+0x0]
c00090b8:	b8 00 00 00 00       	mov    eax,0x0
c00090bd:	e9 0e 01 00 00       	jmp    c00091d0 <pbuf_copy_partial+0x19c>
c00090c2:	66 90                	xchg   ax,ax
c00090c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00090c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090cc:	e9 e3 00 00 00       	jmp    c00091b4 <pbuf_copy_partial+0x180>
c00090d1:	8d 76 00             	lea    esi,[esi+0x0]
c00090d4:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00090d9:	85 c0                	test   eax,eax
c00090db:	74 33                	je     c0009110 <pbuf_copy_partial+0xdc>
c00090dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090e1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090e5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00090ea:	0f b7 c0             	movzx  eax,ax
c00090ed:	39 c2                	cmp    edx,eax
c00090ef:	72 1f                	jb     c0009110 <pbuf_copy_partial+0xdc>
c00090f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090f5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00090f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090fd:	89 d3                	mov    ebx,edx
c00090ff:	29 c3                	sub    ebx,eax
c0009101:	89 d8                	mov    eax,ebx
c0009103:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009108:	e9 9b 00 00 00       	jmp    c00091a8 <pbuf_copy_partial+0x174>
c000910d:	8d 76 00             	lea    esi,[esi+0x0]
c0009110:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009114:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009118:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000911c:	89 d1                	mov    ecx,edx
c000911e:	29 c1                	sub    ecx,eax
c0009120:	89 c8                	mov    eax,ecx
c0009122:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009127:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c000912c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009131:	39 c2                	cmp    edx,eax
c0009133:	76 0b                	jbe    c0009140 <pbuf_copy_partial+0x10c>
c0009135:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009139:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000913e:	66 90                	xchg   ax,ax
c0009140:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009145:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009149:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000914c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009151:	01 d1                	add    ecx,edx
c0009153:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009158:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000915c:	01 da                	add    edx,ebx
c000915e:	83 ec 04             	sub    esp,0x4
c0009161:	50                   	push   eax
c0009162:	51                   	push   ecx
c0009163:	52                   	push   edx
c0009164:	e8 11 72 ff ff       	call   c000037a <memcpy>
c0009169:	83 c4 10             	add    esp,0x10
c000916c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009171:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009175:	01 d0                	add    eax,edx
c0009177:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000917c:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0009181:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009185:	01 d0                	add    eax,edx
c0009187:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000918c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009190:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009194:	89 d3                	mov    ebx,edx
c0009196:	29 c3                	sub    ebx,eax
c0009198:	89 d8                	mov    eax,ebx
c000919a:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000919f:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00091a6:	66 90                	xchg   ax,ax
c00091a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00091ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091b2:	66 90                	xchg   ax,ax
c00091b4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00091b9:	85 c0                	test   eax,eax
c00091bb:	74 0b                	je     c00091c8 <pbuf_copy_partial+0x194>
c00091bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00091c2:	0f 85 0c ff ff ff    	jne    c00090d4 <pbuf_copy_partial+0xa0>
c00091c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00091cd:	8d 76 00             	lea    esi,[esi+0x0]
c00091d0:	83 c4 28             	add    esp,0x28
c00091d3:	5b                   	pop    ebx
c00091d4:	c3                   	ret    
c00091d5:	8d 76 00             	lea    esi,[esi+0x0]

c00091d8 <pbuf_take>:
c00091d8:	83 ec 2c             	sub    esp,0x2c
c00091db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00091df:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00091e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091e8:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00091ed:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00091f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00091f9:	75 1d                	jne    c0009218 <pbuf_take+0x40>
c00091fb:	83 ec 08             	sub    esp,0x8
c00091fe:	68 c4 00 03 c0       	push   0xc00300c4
c0009203:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009208:	e8 8b 69 01 00       	call   c001fb98 <CPrintf>
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	b0 00                	mov    al,0x0
c0009212:	e9 3d 01 00 00       	jmp    c0009354 <pbuf_take+0x17c>
c0009217:	90                   	nop
c0009218:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000921d:	75 1d                	jne    c000923c <pbuf_take+0x64>
c000921f:	83 ec 08             	sub    esp,0x8
c0009222:	68 db 00 03 c0       	push   0xc00300db
c0009227:	68 c6 fb 02 c0       	push   0xc002fbc6
c000922c:	e8 67 69 01 00       	call   c001fb98 <CPrintf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	b0 00                	mov    al,0x0
c0009236:	e9 19 01 00 00       	jmp    c0009354 <pbuf_take+0x17c>
c000923b:	90                   	nop
c000923c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009241:	74 1d                	je     c0009260 <pbuf_take+0x88>
c0009243:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009248:	74 16                	je     c0009260 <pbuf_take+0x88>
c000924a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000924e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009251:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009256:	0f b7 c0             	movzx  eax,ax
c0009259:	39 c2                	cmp    edx,eax
c000925b:	76 0b                	jbe    c0009268 <pbuf_take+0x90>
c000925d:	8d 76 00             	lea    esi,[esi+0x0]
c0009260:	b0 f2                	mov    al,0xf2
c0009262:	e9 ed 00 00 00       	jmp    c0009354 <pbuf_take+0x17c>
c0009267:	90                   	nop
c0009268:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000926c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009270:	e9 9f 00 00 00       	jmp    c0009314 <pbuf_take+0x13c>
c0009275:	8d 76 00             	lea    esi,[esi+0x0]
c0009278:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000927d:	75 15                	jne    c0009294 <pbuf_take+0xbc>
c000927f:	83 ec 08             	sub    esp,0x8
c0009282:	68 f6 00 03 c0       	push   0xc00300f6
c0009287:	68 c6 fb 02 c0       	push   0xc002fbc6
c000928c:	e8 07 69 01 00       	call   c001fb98 <CPrintf>
c0009291:	83 c4 10             	add    esp,0x10
c0009294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009298:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000929d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092a1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00092a5:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00092aa:	0f b7 c0             	movzx  eax,ax
c00092ad:	39 c2                	cmp    edx,eax
c00092af:	76 0f                	jbe    c00092c0 <pbuf_take+0xe8>
c00092b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092b5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00092b9:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00092be:	66 90                	xchg   ax,ax
c00092c0:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00092c5:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c00092ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00092ce:	01 c1                	add    ecx,eax
c00092d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00092d7:	83 ec 04             	sub    esp,0x4
c00092da:	52                   	push   edx
c00092db:	51                   	push   ecx
c00092dc:	50                   	push   eax
c00092dd:	e8 98 70 ff ff       	call   c000037a <memcpy>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00092e9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00092ee:	89 d1                	mov    ecx,edx
c00092f0:	29 c1                	sub    ecx,eax
c00092f2:	89 c8                	mov    eax,ecx
c00092f4:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00092f9:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00092fe:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0009303:	01 d0                	add    eax,edx
c0009305:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000930a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009314:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 85 57 ff ff ff    	jne    c0009278 <pbuf_take+0xa0>
c0009321:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009326:	85 c0                	test   eax,eax
c0009328:	75 0e                	jne    c0009338 <pbuf_take+0x160>
c000932a:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000932f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009334:	39 c2                	cmp    edx,eax
c0009336:	74 18                	je     c0009350 <pbuf_take+0x178>
c0009338:	83 ec 08             	sub    esp,0x8
c000933b:	68 0e 01 03 c0       	push   0xc003010e
c0009340:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009345:	e8 4e 68 01 00       	call   c001fb98 <CPrintf>
c000934a:	83 c4 10             	add    esp,0x10
c000934d:	8d 76 00             	lea    esi,[esi+0x0]
c0009350:	b0 00                	mov    al,0x0
c0009352:	66 90                	xchg   ax,ax
c0009354:	83 c4 2c             	add    esp,0x2c
c0009357:	c3                   	ret    

c0009358 <pbuf_coalesce>:
c0009358:	83 ec 1c             	sub    esp,0x1c
c000935b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000935f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009361:	85 c0                	test   eax,eax
c0009363:	75 07                	jne    c000936c <pbuf_coalesce+0x14>
c0009365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009369:	eb 7d                	jmp    c00093e8 <pbuf_coalesce+0x90>
c000936b:	90                   	nop
c000936c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009370:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009373:	0f b7 c0             	movzx  eax,ax
c0009376:	83 ec 04             	sub    esp,0x4
c0009379:	6a 00                	push   0x0
c000937b:	50                   	push   eax
c000937c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009380:	e8 df f1 ff ff       	call   c0008564 <pbuf_alloc>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000938c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009391:	75 09                	jne    c000939c <pbuf_coalesce+0x44>
c0009393:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009397:	eb 4f                	jmp    c00093e8 <pbuf_coalesce+0x90>
c0009399:	8d 76 00             	lea    esi,[esi+0x0]
c000939c:	83 ec 08             	sub    esp,0x8
c000939f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093a7:	e8 20 fa ff ff       	call   c0008dcc <pbuf_copy>
c00093ac:	83 c4 10             	add    esp,0x10
c00093af:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00093b3:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c00093b8:	85 c0                	test   eax,eax
c00093ba:	74 18                	je     c00093d4 <pbuf_coalesce+0x7c>
c00093bc:	83 ec 08             	sub    esp,0x8
c00093bf:	68 24 01 03 c0       	push   0xc0030124
c00093c4:	68 c6 fb 02 c0       	push   0xc002fbc6
c00093c9:	e8 ca 67 01 00       	call   c001fb98 <CPrintf>
c00093ce:	83 c4 10             	add    esp,0x10
c00093d1:	8d 76 00             	lea    esi,[esi+0x0]
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093db:	e8 a8 ef ff ff       	call   c0008388 <pbuf_free>
c00093e0:	83 c4 10             	add    esp,0x10
c00093e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093e7:	90                   	nop
c00093e8:	83 c4 1c             	add    esp,0x1c
c00093eb:	c3                   	ret    

c00093ec <pbuf_get_at>:
c00093ec:	83 ec 14             	sub    esp,0x14
c00093ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093f7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00093fa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00093ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009403:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009407:	eb 27                	jmp    c0009430 <pbuf_get_at+0x44>
c0009409:	8d 76 00             	lea    esi,[esi+0x0]
c000940c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009410:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009414:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009419:	89 d1                	mov    ecx,edx
c000941b:	29 c1                	sub    ecx,eax
c000941d:	89 c8                	mov    eax,ecx
c000941f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009428:	8b 00                	mov    eax,DWORD PTR [eax]
c000942a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000942e:	66 90                	xchg   ax,ax
c0009430:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009435:	74 15                	je     c000944c <pbuf_get_at+0x60>
c0009437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000943b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000943f:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009444:	0f b7 c0             	movzx  eax,ax
c0009447:	39 c2                	cmp    edx,eax
c0009449:	73 c1                	jae    c000940c <pbuf_get_at+0x20>
c000944b:	90                   	nop
c000944c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009451:	74 29                	je     c000947c <pbuf_get_at+0x90>
c0009453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009457:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000945b:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009460:	0f b7 c0             	movzx  eax,ax
c0009463:	39 c2                	cmp    edx,eax
c0009465:	73 15                	jae    c000947c <pbuf_get_at+0x90>
c0009467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000946b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000946e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009473:	01 d0                	add    eax,edx
c0009475:	8a 00                	mov    al,BYTE PTR [eax]
c0009477:	eb 07                	jmp    c0009480 <pbuf_get_at+0x94>
c0009479:	8d 76 00             	lea    esi,[esi+0x0]
c000947c:	b0 00                	mov    al,0x0
c000947e:	66 90                	xchg   ax,ax
c0009480:	83 c4 14             	add    esp,0x14
c0009483:	c3                   	ret    

c0009484 <pbuf_memcmp>:
c0009484:	83 ec 18             	sub    esp,0x18
c0009487:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000948b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000948f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0009494:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000949c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094a9:	eb 25                	jmp    c00094d0 <pbuf_memcmp+0x4c>
c00094ab:	90                   	nop
c00094ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094b0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094b4:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00094b9:	89 d1                	mov    ecx,edx
c00094bb:	29 c1                	sub    ecx,eax
c00094bd:	89 c8                	mov    eax,ecx
c00094bf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00094ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ce:	66 90                	xchg   ax,ax
c00094d0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094d5:	74 15                	je     c00094ec <pbuf_memcmp+0x68>
c00094d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094db:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094df:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00094e4:	0f b7 c0             	movzx  eax,ax
c00094e7:	39 c2                	cmp    edx,eax
c00094e9:	73 c1                	jae    c00094ac <pbuf_memcmp+0x28>
c00094eb:	90                   	nop
c00094ec:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00094f1:	0f 84 8d 00 00 00    	je     c0009584 <pbuf_memcmp+0x100>
c00094f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094fb:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00094ff:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009504:	0f b7 c0             	movzx  eax,ax
c0009507:	39 c2                	cmp    edx,eax
c0009509:	73 79                	jae    c0009584 <pbuf_memcmp+0x100>
c000950b:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0009512:	eb 5c                	jmp    c0009570 <pbuf_memcmp+0xec>
c0009514:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009519:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000951e:	01 d0                	add    eax,edx
c0009520:	0f b7 c0             	movzx  eax,ax
c0009523:	50                   	push   eax
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 bf fe ff ff       	call   c00093ec <pbuf_get_at>
c000952d:	83 c4 08             	add    esp,0x8
c0009530:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009534:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009539:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000953d:	01 d0                	add    eax,edx
c000953f:	8a 00                	mov    al,BYTE PTR [eax]
c0009541:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009545:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c000954a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000954f:	39 c2                	cmp    edx,eax
c0009551:	74 0d                	je     c0009560 <pbuf_memcmp+0xdc>
c0009553:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009558:	83 c0 01             	add    eax,0x1
c000955b:	eb 2f                	jmp    c000958c <pbuf_memcmp+0x108>
c000955d:	8d 76 00             	lea    esi,[esi+0x0]
c0009560:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009565:	83 c0 01             	add    eax,0x1
c0009568:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000956d:	8d 76 00             	lea    esi,[esi+0x0]
c0009570:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009575:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009579:	39 c2                	cmp    edx,eax
c000957b:	72 97                	jb     c0009514 <pbuf_memcmp+0x90>
c000957d:	b8 00 00 00 00       	mov    eax,0x0
c0009582:	eb 08                	jmp    c000958c <pbuf_memcmp+0x108>
c0009584:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009589:	8d 76 00             	lea    esi,[esi+0x0]
c000958c:	83 c4 18             	add    esp,0x18
c000958f:	c3                   	ret    

c0009590 <pbuf_memfind>:
c0009590:	83 ec 18             	sub    esp,0x18
c0009593:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000959b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00095a0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00095a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095a8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00095ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095af:	89 d1                	mov    ecx,edx
c00095b1:	29 c1                	sub    ecx,eax
c00095b3:	89 c8                	mov    eax,ecx
c00095b5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00095ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00095be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00095c1:	0f b7 c0             	movzx  eax,ax
c00095c4:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00095c9:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00095cd:	01 ca                	add    edx,ecx
c00095cf:	39 d0                	cmp    eax,edx
c00095d1:	7c 65                	jl     c0009638 <pbuf_memfind+0xa8>
c00095d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00095d6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00095db:	eb 4b                	jmp    c0009628 <pbuf_memfind+0x98>
c00095dd:	8d 76 00             	lea    esi,[esi+0x0]
c00095e0:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00095e5:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00095ea:	52                   	push   edx
c00095eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095ef:	50                   	push   eax
c00095f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00095f4:	e8 8b fe ff ff       	call   c0009484 <pbuf_memcmp>
c00095f9:	83 c4 10             	add    esp,0x10
c00095fc:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009601:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009606:	85 c0                	test   eax,eax
c0009608:	75 0a                	jne    c0009614 <pbuf_memfind+0x84>
c000960a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000960f:	eb 2f                	jmp    c0009640 <pbuf_memfind+0xb0>
c0009611:	8d 76 00             	lea    esi,[esi+0x0]
c0009614:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009619:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000961e:	01 d0                	add    eax,edx
c0009620:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009625:	8d 76 00             	lea    esi,[esi+0x0]
c0009628:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000962d:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0009632:	39 c2                	cmp    edx,eax
c0009634:	76 aa                	jbe    c00095e0 <pbuf_memfind+0x50>
c0009636:	66 90                	xchg   ax,ax
c0009638:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000963d:	8d 76 00             	lea    esi,[esi+0x0]
c0009640:	83 c4 18             	add    esp,0x18
c0009643:	c3                   	ret    

c0009644 <pbuf_strstr>:
c0009644:	83 ec 1c             	sub    esp,0x1c
c0009647:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000964c:	74 1e                	je     c000966c <pbuf_strstr+0x28>
c000964e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009652:	8a 00                	mov    al,BYTE PTR [eax]
c0009654:	0f be c0             	movsx  eax,al
c0009657:	85 c0                	test   eax,eax
c0009659:	74 11                	je     c000966c <pbuf_strstr+0x28>
c000965b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000965f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009662:	0f b7 c0             	movzx  eax,ax
c0009665:	3d ff ff 00 00       	cmp    eax,0xffff
c000966a:	75 08                	jne    c0009674 <pbuf_strstr+0x30>
c000966c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009671:	eb 41                	jmp    c00096b4 <pbuf_strstr+0x70>
c0009673:	90                   	nop
c0009674:	83 ec 0c             	sub    esp,0xc
c0009677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000967b:	e8 00 6f ff ff       	call   c0000580 <strlen>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009687:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000968f:	76 07                	jbe    c0009698 <pbuf_strstr+0x54>
c0009691:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009696:	eb 1c                	jmp    c00096b4 <pbuf_strstr+0x70>
c0009698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000969c:	0f b7 c0             	movzx  eax,ax
c000969f:	6a 00                	push   0x0
c00096a1:	50                   	push   eax
c00096a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00096a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00096aa:	e8 e1 fe ff ff       	call   c0009590 <pbuf_memfind>
c00096af:	83 c4 10             	add    esp,0x10
c00096b2:	66 90                	xchg   ax,ax
c00096b4:	83 c4 1c             	add    esp,0x1c
c00096b7:	c3                   	ret    

c00096b8 <raw_input>:
c00096b8:	83 ec 2c             	sub    esp,0x2c
c00096bb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00096c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00096c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00096c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00096cf:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00096d2:	0f b6 c0             	movzx  eax,al
c00096d5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00096da:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00096e2:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00096e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096eb:	e9 b8 00 00 00       	jmp    c00097a8 <raw_input+0xf0>
c00096f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096f4:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00096f7:	0f b6 d0             	movzx  edx,al
c00096fa:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c00096ff:	39 c2                	cmp    edx,eax
c0009701:	0f 85 8d 00 00 00    	jne    c0009794 <raw_input+0xdc>
c0009707:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000970b:	85 c0                	test   eax,eax
c000970d:	74 19                	je     c0009728 <raw_input+0x70>
c000970f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009713:	8b 00                	mov    eax,DWORD PTR [eax]
c0009715:	85 c0                	test   eax,eax
c0009717:	74 0f                	je     c0009728 <raw_input+0x70>
c0009719:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000971d:	8b 10                	mov    edx,DWORD PTR [eax]
c000971f:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009724:	39 c2                	cmp    edx,eax
c0009726:	75 6c                	jne    c0009794 <raw_input+0xdc>
c0009728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000972c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000972f:	85 c0                	test   eax,eax
c0009731:	74 61                	je     c0009794 <raw_input+0xdc>
c0009733:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009737:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000973a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000973e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c0009741:	68 90 68 03 c0       	push   0xc0036890
c0009746:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000974a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000974e:	52                   	push   edx
c000974f:	ff d0                	call   eax
c0009751:	83 c4 10             	add    esp,0x10
c0009754:	0f b6 c0             	movzx  eax,al
c0009757:	85 c0                	test   eax,eax
c0009759:	74 39                	je     c0009794 <raw_input+0xdc>
c000975b:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0009763:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009768:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000976d:	74 25                	je     c0009794 <raw_input+0xdc>
c000976f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009773:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009776:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000977a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000977d:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009783:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009787:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000978a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000978e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009793:	90                   	nop
c0009794:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009798:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000979c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00097a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00097a7:	90                   	nop
c00097a8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00097ad:	85 c0                	test   eax,eax
c00097af:	75 0b                	jne    c00097bc <raw_input+0x104>
c00097b1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00097b6:	0f 85 34 ff ff ff    	jne    c00096f0 <raw_input+0x38>
c00097bc:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00097c0:	83 c4 2c             	add    esp,0x2c
c00097c3:	c3                   	ret    

c00097c4 <raw_bind>:
c00097c4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097c9:	74 09                	je     c00097d4 <raw_bind+0x10>
c00097cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00097d1:	eb 09                	jmp    c00097dc <raw_bind+0x18>
c00097d3:	90                   	nop
c00097d4:	b8 00 00 00 00       	mov    eax,0x0
c00097d9:	8d 76 00             	lea    esi,[esi+0x0]
c00097dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097e0:	89 02                	mov    DWORD PTR [edx],eax
c00097e2:	b0 00                	mov    al,0x0
c00097e4:	c3                   	ret    
c00097e5:	8d 76 00             	lea    esi,[esi+0x0]

c00097e8 <raw_connect>:
c00097e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097ed:	74 09                	je     c00097f8 <raw_connect+0x10>
c00097ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f5:	eb 09                	jmp    c0009800 <raw_connect+0x18>
c00097f7:	90                   	nop
c00097f8:	b8 00 00 00 00       	mov    eax,0x0
c00097fd:	8d 76 00             	lea    esi,[esi+0x0]
c0009800:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009804:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009807:	b0 00                	mov    al,0x0
c0009809:	c3                   	ret    
c000980a:	66 90                	xchg   ax,ax

c000980c <raw_recv>:
c000980c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009810:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009814:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009817:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000981b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000981f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009822:	90                   	nop
c0009823:	c3                   	ret    

c0009824 <raw_sendto>:
c0009824:	83 ec 1c             	sub    esp,0x1c
c0009827:	83 ec 08             	sub    esp,0x8
c000982a:	6a 14                	push   0x14
c000982c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009830:	e8 b3 e9 ff ff       	call   c00081e8 <pbuf_header>
c0009835:	83 c4 10             	add    esp,0x10
c0009838:	0f b6 c0             	movzx  eax,al
c000983b:	85 c0                	test   eax,eax
c000983d:	74 49                	je     c0009888 <raw_sendto+0x64>
c000983f:	83 ec 04             	sub    esp,0x4
c0009842:	6a 00                	push   0x0
c0009844:	6a 00                	push   0x0
c0009846:	6a 01                	push   0x1
c0009848:	e8 17 ed ff ff       	call   c0008564 <pbuf_alloc>
c000984d:	83 c4 10             	add    esp,0x10
c0009850:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009854:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009859:	75 09                	jne    c0009864 <raw_sendto+0x40>
c000985b:	b0 ff                	mov    al,0xff
c000985d:	e9 2a 01 00 00       	jmp    c000998c <raw_sendto+0x168>
c0009862:	66 90                	xchg   ax,ax
c0009864:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000986b:	0f b7 c0             	movzx  eax,ax
c000986e:	85 c0                	test   eax,eax
c0009870:	74 52                	je     c00098c4 <raw_sendto+0xa0>
c0009872:	83 ec 08             	sub    esp,0x8
c0009875:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000987d:	e8 2a f4 ff ff       	call   c0008cac <pbuf_chain>
c0009882:	83 c4 10             	add    esp,0x10
c0009885:	eb 3d                	jmp    c00098c4 <raw_sendto+0xa0>
c0009887:	90                   	nop
c0009888:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000988c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009890:	83 ec 08             	sub    esp,0x8
c0009893:	6a ec                	push   0xffffffec
c0009895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009899:	e8 4a e9 ff ff       	call   c00081e8 <pbuf_header>
c000989e:	83 c4 10             	add    esp,0x10
c00098a1:	0f b6 c0             	movzx  eax,al
c00098a4:	85 c0                	test   eax,eax
c00098a6:	74 1c                	je     c00098c4 <raw_sendto+0xa0>
c00098a8:	83 ec 08             	sub    esp,0x8
c00098ab:	68 38 01 03 c0       	push   0xc0030138
c00098b0:	68 c6 fb 02 c0       	push   0xc002fbc6
c00098b5:	e8 de 62 01 00       	call   c001fb98 <CPrintf>
c00098ba:	83 c4 10             	add    esp,0x10
c00098bd:	b0 ff                	mov    al,0xff
c00098bf:	e9 c8 00 00 00       	jmp    c000998c <raw_sendto+0x168>
c00098c4:	83 ec 0c             	sub    esp,0xc
c00098c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098cb:	e8 00 9e 00 00       	call   c00136d0 <ip_route>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098d7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00098dc:	75 22                	jne    c0009900 <raw_sendto+0xdc>
c00098de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e2:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098e6:	74 10                	je     c00098f8 <raw_sendto+0xd4>
c00098e8:	83 ec 0c             	sub    esp,0xc
c00098eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098ef:	e8 94 ea ff ff       	call   c0008388 <pbuf_free>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	90                   	nop
c00098f8:	b0 fc                	mov    al,0xfc
c00098fa:	e9 8d 00 00 00       	jmp    c000998c <raw_sendto+0x168>
c00098ff:	90                   	nop
c0009900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009904:	85 c0                	test   eax,eax
c0009906:	74 0c                	je     c0009914 <raw_sendto+0xf0>
c0009908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000990c:	8b 00                	mov    eax,DWORD PTR [eax]
c000990e:	85 c0                	test   eax,eax
c0009910:	75 12                	jne    c0009924 <raw_sendto+0x100>
c0009912:	66 90                	xchg   ax,ax
c0009914:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009918:	83 c0 04             	add    eax,0x4
c000991b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000991f:	eb 0b                	jmp    c000992c <raw_sendto+0x108>
c0009921:	8d 76 00             	lea    esi,[esi+0x0]
c0009924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000992c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009930:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009933:	0f b6 c8             	movzx  ecx,al
c0009936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000993a:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000993d:	0f b6 d0             	movzx  edx,al
c0009940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009944:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009947:	0f b6 c0             	movzx  eax,al
c000994a:	83 ec 04             	sub    esp,0x4
c000994d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009951:	51                   	push   ecx
c0009952:	52                   	push   edx
c0009953:	50                   	push   eax
c0009954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009960:	e8 43 a2 00 00       	call   c0013ba8 <ip_output_if>
c0009965:	83 c4 20             	add    esp,0x20
c0009968:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000996c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009970:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009974:	74 12                	je     c0009988 <raw_sendto+0x164>
c0009976:	83 ec 0c             	sub    esp,0xc
c0009979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000997d:	e8 06 ea ff ff       	call   c0008388 <pbuf_free>
c0009982:	83 c4 10             	add    esp,0x10
c0009985:	8d 76 00             	lea    esi,[esi+0x0]
c0009988:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c000998c:	83 c4 1c             	add    esp,0x1c
c000998f:	c3                   	ret    

c0009990 <raw_send>:
c0009990:	83 ec 0c             	sub    esp,0xc
c0009993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009997:	83 c0 04             	add    eax,0x4
c000999a:	83 ec 04             	sub    esp,0x4
c000999d:	50                   	push   eax
c000999e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099a6:	e8 79 fe ff ff       	call   c0009824 <raw_sendto>
c00099ab:	83 c4 10             	add    esp,0x10
c00099ae:	83 c4 0c             	add    esp,0xc
c00099b1:	c3                   	ret    
c00099b2:	66 90                	xchg   ax,ax

c00099b4 <raw_remove>:
c00099b4:	83 ec 1c             	sub    esp,0x1c
c00099b7:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099bc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099c0:	75 12                	jne    c00099d4 <raw_remove+0x20>
c00099c2:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099ca:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00099cf:	eb 4b                	jmp    c0009a1c <raw_remove+0x68>
c00099d1:	8d 76 00             	lea    esi,[esi+0x0]
c00099d4:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00099d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099dd:	eb 35                	jmp    c0009a14 <raw_remove+0x60>
c00099df:	90                   	nop
c00099e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099e7:	85 c0                	test   eax,eax
c00099e9:	74 1d                	je     c0009a08 <raw_remove+0x54>
c00099eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099f2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00099f6:	75 10                	jne    c0009a08 <raw_remove+0x54>
c00099f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00099fc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00099ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a03:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a06:	66 90                	xchg   ax,ax
c0009a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a13:	90                   	nop
c0009a14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009a19:	75 c5                	jne    c00099e0 <raw_remove+0x2c>
c0009a1b:	90                   	nop
c0009a1c:	83 ec 08             	sub    esp,0x8
c0009a1f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a23:	6a 00                	push   0x0
c0009a25:	e8 9e e0 ff ff       	call   c0007ac8 <memp_free>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	90                   	nop
c0009a2e:	83 c4 1c             	add    esp,0x1c
c0009a31:	c3                   	ret    
c0009a32:	66 90                	xchg   ax,ax

c0009a34 <raw_new>:
c0009a34:	83 ec 2c             	sub    esp,0x2c
c0009a37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a3b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a3f:	83 ec 0c             	sub    esp,0xc
c0009a42:	6a 00                	push   0x0
c0009a44:	e8 53 df ff ff       	call   c000799c <memp_malloc>
c0009a49:	83 c4 10             	add    esp,0x10
c0009a4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a55:	74 3d                	je     c0009a94 <raw_new+0x60>
c0009a57:	83 ec 04             	sub    esp,0x4
c0009a5a:	6a 1c                	push   0x1c
c0009a5c:	6a 00                	push   0x0
c0009a5e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a62:	e8 89 6a ff ff       	call   c00004f0 <memset>
c0009a67:	83 c4 10             	add    esp,0x10
c0009a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a6e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009a72:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a79:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009a7d:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c0009a83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009a8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a8e:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c0009a93:	90                   	nop
c0009a94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a98:	83 c4 2c             	add    esp,0x2c
c0009a9b:	c3                   	ret    

c0009a9c <stats_init>:
c0009a9c:	90                   	nop
c0009a9d:	c3                   	ret    
c0009a9e:	66 90                	xchg   ax,ax

c0009aa0 <sys_msleep>:
c0009aa0:	83 ec 1c             	sub    esp,0x1c
c0009aa3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009aa8:	74 46                	je     c0009af0 <sys_msleep+0x50>
c0009aaa:	83 ec 08             	sub    esp,0x8
c0009aad:	6a 00                	push   0x0
c0009aaf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009ab3:	50                   	push   eax
c0009ab4:	e8 e7 71 ff ff       	call   c0000ca0 <sys_sem_new>
c0009ab9:	83 c4 10             	add    esp,0x10
c0009abc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009ac0:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009ac5:	85 c0                	test   eax,eax
c0009ac7:	75 27                	jne    c0009af0 <sys_msleep+0x50>
c0009ac9:	83 ec 08             	sub    esp,0x8
c0009acc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009ad0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009ad4:	50                   	push   eax
c0009ad5:	e8 1e 72 ff ff       	call   c0000cf8 <sys_arch_sem_wait>
c0009ada:	83 c4 10             	add    esp,0x10
c0009add:	83 ec 0c             	sub    esp,0xc
c0009ae0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009ae4:	50                   	push   eax
c0009ae5:	e8 de 71 ff ff       	call   c0000cc8 <sys_sem_free>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	8d 76 00             	lea    esi,[esi+0x0]
c0009af0:	90                   	nop
c0009af1:	83 c4 1c             	add    esp,0x1c
c0009af4:	c3                   	ret    
c0009af5:	66 90                	xchg   ax,ax
c0009af7:	90                   	nop

c0009af8 <tcp_accept_null>:
c0009af8:	83 ec 04             	sub    esp,0x4
c0009afb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009aff:	88 04 24             	mov    BYTE PTR [esp],al
c0009b02:	b0 f6                	mov    al,0xf6
c0009b04:	83 c4 04             	add    esp,0x4
c0009b07:	c3                   	ret    

c0009b08 <tcp_listen_with_backlog>:
c0009b08:	83 ec 2c             	sub    esp,0x2c
c0009b0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b1a:	85 c0                	test   eax,eax
c0009b1c:	74 22                	je     c0009b40 <tcp_listen_with_backlog+0x38>
c0009b1e:	83 ec 08             	sub    esp,0x8
c0009b21:	68 60 01 03 c0       	push   0xc0030160
c0009b26:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009b2b:	e8 68 60 01 00       	call   c001fb98 <CPrintf>
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	b8 00 00 00 00       	mov    eax,0x0
c0009b38:	e9 77 01 00 00       	jmp    c0009cb4 <tcp_listen_with_backlog+0x1ac>
c0009b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0009b40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b44:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b47:	83 f8 01             	cmp    eax,0x1
c0009b4a:	75 0c                	jne    c0009b58 <tcp_listen_with_backlog+0x50>
c0009b4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b50:	e9 5f 01 00 00       	jmp    c0009cb4 <tcp_listen_with_backlog+0x1ac>
c0009b55:	8d 76 00             	lea    esi,[esi+0x0]
c0009b58:	83 ec 0c             	sub    esp,0xc
c0009b5b:	6a 03                	push   0x3
c0009b5d:	e8 3a de ff ff       	call   c000799c <memp_malloc>
c0009b62:	83 c4 10             	add    esp,0x10
c0009b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b69:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009b6e:	75 0c                	jne    c0009b7c <tcp_listen_with_backlog+0x74>
c0009b70:	b8 00 00 00 00       	mov    eax,0x0
c0009b75:	e9 3a 01 00 00       	jmp    c0009cb4 <tcp_listen_with_backlog+0x1ac>
c0009b7a:	66 90                	xchg   ax,ax
c0009b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b80:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009b83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b87:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009b8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009b91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b95:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b9d:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009ba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ba8:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009bab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009baf:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bb6:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009bb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bbd:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bc4:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009bc7:	83 c8 02             	or     eax,0x2
c0009bca:	88 c2                	mov    dl,al
c0009bcc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd0:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009bd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bd7:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009bda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bde:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009be1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009be5:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009be8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bec:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009bef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0009bf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf9:	89 10                	mov    DWORD PTR [eax],edx
c0009bfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009c02:	0f b7 c0             	movzx  eax,ax
c0009c05:	85 c0                	test   eax,eax
c0009c07:	74 6f                	je     c0009c78 <tcp_listen_with_backlog+0x170>
c0009c09:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009c0e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c12:	75 10                	jne    c0009c24 <tcp_listen_with_backlog+0x11c>
c0009c14:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009c19:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c1c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009c21:	eb 49                	jmp    c0009c6c <tcp_listen_with_backlog+0x164>
c0009c23:	90                   	nop
c0009c24:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009c29:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c2e:	eb 30                	jmp    c0009c60 <tcp_listen_with_backlog+0x158>
c0009c30:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c38:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009c3c:	75 12                	jne    c0009c50 <tcp_listen_with_backlog+0x148>
c0009c3e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c43:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009c47:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009c4a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009c4d:	eb 1d                	jmp    c0009c6c <tcp_listen_with_backlog+0x164>
c0009c4f:	90                   	nop
c0009c50:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c58:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0009c60:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009c65:	85 c0                	test   eax,eax
c0009c67:	75 c7                	jne    c0009c30 <tcp_listen_with_backlog+0x128>
c0009c69:	8d 76 00             	lea    esi,[esi+0x0]
c0009c6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c70:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009c77:	90                   	nop
c0009c78:	83 ec 08             	sub    esp,0x8
c0009c7b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009c7f:	6a 02                	push   0x2
c0009c81:	e8 42 de ff ff       	call   c0007ac8 <memp_free>
c0009c86:	83 c4 10             	add    esp,0x10
c0009c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c8d:	c7 40 1c f8 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009af8
c0009c94:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009c9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c9e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009ca1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ca5:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009caa:	e8 21 6f 00 00       	call   c0010bd0 <tcp_timer_needed>
c0009caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cb3:	90                   	nop
c0009cb4:	83 c4 2c             	add    esp,0x2c
c0009cb7:	c3                   	ret    

c0009cb8 <tcp_update_rcv_ann_wnd>:
c0009cb8:	83 ec 1c             	sub    esp,0x1c
c0009cbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cbf:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cc6:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cc9:	0f b7 c0             	movzx  eax,ax
c0009ccc:	01 d0                	add    eax,edx
c0009cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009cd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cdd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ce0:	0f b7 c8             	movzx  ecx,ax
c0009ce3:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009ce9:	76 05                	jbe    c0009cf0 <tcp_update_rcv_ann_wnd+0x38>
c0009ceb:	b8 30 04 00 00       	mov    eax,0x430
c0009cf0:	0f b7 c0             	movzx  eax,ax
c0009cf3:	01 c2                	add    edx,eax
c0009cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cf9:	29 d0                	sub    eax,edx
c0009cfb:	78 23                	js     c0009d20 <tcp_update_rcv_ann_wnd+0x68>
c0009cfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d01:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d08:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d10:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009d13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d17:	29 c2                	sub    edx,eax
c0009d19:	89 d0                	mov    eax,edx
c0009d1b:	eb 77                	jmp    c0009d94 <tcp_update_rcv_ann_wnd+0xdc>
c0009d1d:	8d 76 00             	lea    esi,[esi+0x0]
c0009d20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d24:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d2b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009d2e:	29 c2                	sub    edx,eax
c0009d30:	89 d0                	mov    eax,edx
c0009d32:	85 c0                	test   eax,eax
c0009d34:	7e 0e                	jle    c0009d44 <tcp_update_rcv_ann_wnd+0x8c>
c0009d36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d3a:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009d40:	eb 4a                	jmp    c0009d8c <tcp_update_rcv_ann_wnd+0xd4>
c0009d42:	66 90                	xchg   ax,ax
c0009d44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d48:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009d4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d4f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009d52:	29 c2                	sub    edx,eax
c0009d54:	89 d0                	mov    eax,edx
c0009d56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d5a:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009d62:	76 18                	jbe    c0009d7c <tcp_update_rcv_ann_wnd+0xc4>
c0009d64:	83 ec 08             	sub    esp,0x8
c0009d67:	68 94 03 03 c0       	push   0xc0030394
c0009d6c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009d71:	e8 22 5e 01 00       	call   c001fb98 <CPrintf>
c0009d76:	83 c4 10             	add    esp,0x10
c0009d79:	8d 76 00             	lea    esi,[esi+0x0]
c0009d7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009d80:	89 c2                	mov    edx,eax
c0009d82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009d86:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009d8a:	66 90                	xchg   ax,ax
c0009d8c:	b8 00 00 00 00       	mov    eax,0x0
c0009d91:	8d 76 00             	lea    esi,[esi+0x0]
c0009d94:	83 c4 1c             	add    esp,0x1c
c0009d97:	c3                   	ret    

c0009d98 <tcp_recved>:
c0009d98:	83 ec 2c             	sub    esp,0x2c
c0009d9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009da4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009da9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dad:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009db0:	0f b7 c0             	movzx  eax,ax
c0009db3:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009db8:	29 c1                	sub    ecx,eax
c0009dba:	89 c8                	mov    eax,ecx
c0009dbc:	39 c2                	cmp    edx,eax
c0009dbe:	7e 18                	jle    c0009dd8 <tcp_recved+0x40>
c0009dc0:	83 ec 08             	sub    esp,0x8
c0009dc3:	68 84 01 03 c0       	push   0xc0030184
c0009dc8:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009dcd:	e8 c6 5d 01 00       	call   c001fb98 <CPrintf>
c0009dd2:	83 c4 10             	add    esp,0x10
c0009dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0009dd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ddc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ddf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009de3:	01 d0                	add    eax,edx
c0009de5:	89 c2                	mov    edx,eax
c0009de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009deb:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009df6:	0f b7 c0             	movzx  eax,ax
c0009df9:	3d 60 08 00 00       	cmp    eax,0x860
c0009dfe:	76 0c                	jbe    c0009e0c <tcp_recved+0x74>
c0009e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e04:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009e0a:	66 90                	xchg   ax,ax
c0009e0c:	83 ec 0c             	sub    esp,0xc
c0009e0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e13:	e8 a0 fe ff ff       	call   c0009cb8 <tcp_update_rcv_ann_wnd>
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009e1f:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009e27:	7e 23                	jle    c0009e4c <tcp_recved+0xb4>
c0009e29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009e30:	83 c8 02             	or     eax,0x2
c0009e33:	88 c2                	mov    dl,al
c0009e35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e39:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009e3c:	83 ec 0c             	sub    esp,0xc
c0009e3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e43:	e8 e0 60 00 00       	call   c000ff28 <tcp_output>
c0009e48:	83 c4 10             	add    esp,0x10
c0009e4b:	90                   	nop
c0009e4c:	90                   	nop
c0009e4d:	83 c4 2c             	add    esp,0x2c
c0009e50:	c3                   	ret    
c0009e51:	8d 76 00             	lea    esi,[esi+0x0]

c0009e54 <tcp_new_port>:
c0009e54:	83 ec 10             	sub    esp,0x10
c0009e57:	90                   	nop
c0009e58:	66 a1 80 3c 03 c0    	mov    ax,ds:0xc0033c80
c0009e5e:	8d 50 01             	lea    edx,[eax+0x1]
c0009e61:	66 89 15 80 3c 03 c0 	mov    WORD PTR ds:0xc0033c80,dx
c0009e68:	0f b7 c0             	movzx  eax,ax
c0009e6b:	3d ff ff 00 00       	cmp    eax,0xffff
c0009e70:	75 0a                	jne    c0009e7c <tcp_new_port+0x28>
c0009e72:	66 c7 05 80 3c 03 c0 00 c0 	mov    WORD PTR ds:0xc0033c80,0xc000
c0009e7b:	90                   	nop
c0009e7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009e84:	eb 4a                	jmp    c0009ed0 <tcp_new_port+0x7c>
c0009e86:	66 90                	xchg   ax,ax
c0009e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e8c:	8b 04 85 a0 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb60]
c0009e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e99:	eb 29                	jmp    c0009ec4 <tcp_new_port+0x70>
c0009e9b:	90                   	nop
c0009e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ea0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009ea3:	66 a1 80 3c 03 c0    	mov    ax,ds:0xc0033c80
c0009ea9:	0f b7 d2             	movzx  edx,dx
c0009eac:	0f b7 c0             	movzx  eax,ax
c0009eaf:	39 c2                	cmp    edx,eax
c0009eb1:	75 05                	jne    c0009eb8 <tcp_new_port+0x64>
c0009eb3:	eb a3                	jmp    c0009e58 <tcp_new_port+0x4>
c0009eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009eb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ebc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ec3:	90                   	nop
c0009ec4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009ec9:	75 d1                	jne    c0009e9c <tcp_new_port+0x48>
c0009ecb:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009ed0:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009ed5:	7e b1                	jle    c0009e88 <tcp_new_port+0x34>
c0009ed7:	66 a1 80 3c 03 c0    	mov    ax,ds:0xc0033c80
c0009edd:	83 c4 10             	add    esp,0x10
c0009ee0:	c3                   	ret    
c0009ee1:	8d 76 00             	lea    esi,[esi+0x0]

c0009ee4 <tcp_bind>:
c0009ee4:	83 ec 2c             	sub    esp,0x2c
c0009ee7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eeb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009ef0:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009ef8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009eff:	85 c0                	test   eax,eax
c0009f01:	74 1d                	je     c0009f20 <tcp_bind+0x3c>
c0009f03:	83 ec 08             	sub    esp,0x8
c0009f06:	68 a8 01 03 c0       	push   0xc00301a8
c0009f0b:	68 c6 fb 02 c0       	push   0xc002fbc6
c0009f10:	e8 83 5c 01 00       	call   c001fb98 <CPrintf>
c0009f15:	83 c4 10             	add    esp,0x10
c0009f18:	b0 fa                	mov    al,0xfa
c0009f1a:	e9 f1 00 00 00       	jmp    c000a010 <tcp_bind+0x12c>
c0009f1f:	90                   	nop
c0009f20:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009f25:	85 c0                	test   eax,eax
c0009f27:	75 0b                	jne    c0009f34 <tcp_bind+0x50>
c0009f29:	e8 26 ff ff ff       	call   c0009e54 <tcp_new_port>
c0009f2e:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009f33:	90                   	nop
c0009f34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f3c:	eb 7a                	jmp    c0009fb8 <tcp_bind+0xd4>
c0009f3e:	66 90                	xchg   ax,ax
c0009f40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f44:	8b 04 85 a0 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb60]
c0009f4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f51:	eb 59                	jmp    c0009fac <tcp_bind+0xc8>
c0009f53:	90                   	nop
c0009f54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009f5b:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009f60:	0f b7 c0             	movzx  eax,ax
c0009f63:	39 c2                	cmp    edx,eax
c0009f65:	75 39                	jne    c0009fa0 <tcp_bind+0xbc>
c0009f67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f6b:	85 c0                	test   eax,eax
c0009f6d:	74 2d                	je     c0009f9c <tcp_bind+0xb8>
c0009f6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f73:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f75:	85 c0                	test   eax,eax
c0009f77:	74 23                	je     c0009f9c <tcp_bind+0xb8>
c0009f79:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f7e:	74 1c                	je     c0009f9c <tcp_bind+0xb8>
c0009f80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f84:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f86:	85 c0                	test   eax,eax
c0009f88:	74 12                	je     c0009f9c <tcp_bind+0xb8>
c0009f8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f8e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009f90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f94:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f96:	39 c2                	cmp    edx,eax
c0009f98:	75 06                	jne    c0009fa0 <tcp_bind+0xbc>
c0009f9a:	66 90                	xchg   ax,ax
c0009f9c:	b0 f8                	mov    al,0xf8
c0009f9e:	eb 70                	jmp    c000a010 <tcp_bind+0x12c>
c0009fa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fa4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fab:	90                   	nop
c0009fac:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009fb1:	75 a1                	jne    c0009f54 <tcp_bind+0x70>
c0009fb3:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009fb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009fbc:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009fc0:	0f 8c 7a ff ff ff    	jl     c0009f40 <tcp_bind+0x5c>
c0009fc6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009fcb:	74 17                	je     c0009fe4 <tcp_bind+0x100>
c0009fcd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009fd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fd3:	85 c0                	test   eax,eax
c0009fd5:	74 0d                	je     c0009fe4 <tcp_bind+0x100>
c0009fd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fdb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009fdf:	8b 12                	mov    edx,DWORD PTR [edx]
c0009fe1:	89 10                	mov    DWORD PTR [eax],edx
c0009fe3:	90                   	nop
c0009fe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fe8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009fec:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009ff0:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009ff6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ffa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009ffd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a001:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000a006:	e8 c5 6b 00 00       	call   c0010bd0 <tcp_timer_needed>
c000a00b:	b0 00                	mov    al,0x0
c000a00d:	8d 76 00             	lea    esi,[esi+0x0]
c000a010:	83 c4 2c             	add    esp,0x2c
c000a013:	c3                   	ret    

c000a014 <tcp_seg_free>:
c000a014:	83 ec 0c             	sub    esp,0xc
c000a017:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000a01c:	74 32                	je     c000a050 <tcp_seg_free+0x3c>
c000a01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a022:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a025:	85 c0                	test   eax,eax
c000a027:	74 13                	je     c000a03c <tcp_seg_free+0x28>
c000a029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a02d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	50                   	push   eax
c000a034:	e8 4f e3 ff ff       	call   c0008388 <pbuf_free>
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	83 ec 08             	sub    esp,0x8
c000a03f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a043:	6a 04                	push   0x4
c000a045:	e8 7e da ff ff       	call   c0007ac8 <memp_free>
c000a04a:	83 c4 10             	add    esp,0x10
c000a04d:	8d 76 00             	lea    esi,[esi+0x0]
c000a050:	90                   	nop
c000a051:	83 c4 0c             	add    esp,0xc
c000a054:	c3                   	ret    
c000a055:	8d 76 00             	lea    esi,[esi+0x0]

c000a058 <tcp_segs_free>:
c000a058:	83 ec 1c             	sub    esp,0x1c
c000a05b:	eb 27                	jmp    c000a084 <tcp_segs_free+0x2c>
c000a05d:	8d 76 00             	lea    esi,[esi+0x0]
c000a060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a064:	8b 00                	mov    eax,DWORD PTR [eax]
c000a066:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a06a:	83 ec 0c             	sub    esp,0xc
c000a06d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a071:	e8 9e ff ff ff       	call   c000a014 <tcp_seg_free>
c000a076:	83 c4 10             	add    esp,0x10
c000a079:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a07d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a081:	8d 76 00             	lea    esi,[esi+0x0]
c000a084:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000a089:	75 d5                	jne    c000a060 <tcp_segs_free+0x8>
c000a08b:	90                   	nop
c000a08c:	83 c4 1c             	add    esp,0x1c
c000a08f:	c3                   	ret    

c000a090 <tcp_setprio>:
c000a090:	83 ec 04             	sub    esp,0x4
c000a093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a097:	88 04 24             	mov    BYTE PTR [esp],al
c000a09a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a09e:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a0a1:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000a0a4:	90                   	nop
c000a0a5:	83 c4 04             	add    esp,0x4
c000a0a8:	c3                   	ret    
c000a0a9:	8d 76 00             	lea    esi,[esi+0x0]

c000a0ac <tcp_seg_copy>:
c000a0ac:	83 ec 1c             	sub    esp,0x1c
c000a0af:	83 ec 0c             	sub    esp,0xc
c000a0b2:	6a 04                	push   0x4
c000a0b4:	e8 e3 d8 ff ff       	call   c000799c <memp_malloc>
c000a0b9:	83 c4 10             	add    esp,0x10
c000a0bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a0c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a0c5:	75 09                	jne    c000a0d0 <tcp_seg_copy+0x24>
c000a0c7:	b8 00 00 00 00       	mov    eax,0x0
c000a0cc:	eb 2e                	jmp    c000a0fc <tcp_seg_copy+0x50>
c000a0ce:	66 90                	xchg   ax,ax
c000a0d0:	83 ec 04             	sub    esp,0x4
c000a0d3:	6a 10                	push   0x10
c000a0d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a0d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a0dd:	e8 98 62 ff ff       	call   c000037a <memcpy>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a0ec:	83 ec 0c             	sub    esp,0xc
c000a0ef:	50                   	push   eax
c000a0f0:	e8 a3 ea ff ff       	call   c0008b98 <pbuf_ref>
c000a0f5:	83 c4 10             	add    esp,0x10
c000a0f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a0fc:	83 c4 1c             	add    esp,0x1c
c000a0ff:	c3                   	ret    

c000a100 <tcp_arg>:
c000a100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a108:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a10b:	90                   	nop
c000a10c:	c3                   	ret    
c000a10d:	8d 76 00             	lea    esi,[esi+0x0]

c000a110 <tcp_recv>:
c000a110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a114:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a118:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a11e:	90                   	nop
c000a11f:	c3                   	ret    

c000a120 <tcp_sent>:
c000a120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a128:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a12e:	90                   	nop
c000a12f:	c3                   	ret    

c000a130 <tcp_err>:
c000a130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a138:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a13e:	90                   	nop
c000a13f:	c3                   	ret    

c000a140 <tcp_accept>:
c000a140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a144:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a148:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a14b:	90                   	nop
c000a14c:	c3                   	ret    
c000a14d:	8d 76 00             	lea    esi,[esi+0x0]

c000a150 <tcp_poll>:
c000a150:	83 ec 04             	sub    esp,0x4
c000a153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a157:	88 04 24             	mov    BYTE PTR [esp],al
c000a15a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a15e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a162:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a16c:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a16f:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a172:	90                   	nop
c000a173:	83 c4 04             	add    esp,0x4
c000a176:	c3                   	ret    
c000a177:	90                   	nop

c000a178 <tcp_pcb_purge>:
c000a178:	83 ec 0c             	sub    esp,0xc
c000a17b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a17f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a182:	85 c0                	test   eax,eax
c000a184:	0f 84 ca 00 00 00    	je     c000a254 <tcp_pcb_purge+0xdc>
c000a18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a18e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a191:	83 f8 0a             	cmp    eax,0xa
c000a194:	0f 84 ba 00 00 00    	je     c000a254 <tcp_pcb_purge+0xdc>
c000a19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a19e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1a1:	83 f8 01             	cmp    eax,0x1
c000a1a4:	0f 84 aa 00 00 00    	je     c000a254 <tcp_pcb_purge+0xdc>
c000a1aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1ae:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a1b4:	85 c0                	test   eax,eax
c000a1b6:	74 24                	je     c000a1dc <tcp_pcb_purge+0x64>
c000a1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bc:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a1c2:	83 ec 0c             	sub    esp,0xc
c000a1c5:	50                   	push   eax
c000a1c6:	e8 bd e1 ff ff       	call   c0008388 <pbuf_free>
c000a1cb:	83 c4 10             	add    esp,0x10
c000a1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d2:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a1e6:	83 ec 0c             	sub    esp,0xc
c000a1e9:	50                   	push   eax
c000a1ea:	e8 69 fe ff ff       	call   c000a058 <tcp_segs_free>
c000a1ef:	83 c4 10             	add    esp,0x10
c000a1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f6:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a204:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20e:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a211:	83 ec 0c             	sub    esp,0xc
c000a214:	50                   	push   eax
c000a215:	e8 3e fe ff ff       	call   c000a058 <tcp_segs_free>
c000a21a:	83 c4 10             	add    esp,0x10
c000a21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a221:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a224:	83 ec 0c             	sub    esp,0xc
c000a227:	50                   	push   eax
c000a228:	e8 2b fe ff ff       	call   c000a058 <tcp_segs_free>
c000a22d:	83 c4 10             	add    esp,0x10
c000a230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a234:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23f:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a246:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24d:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a253:	90                   	nop
c000a254:	90                   	nop
c000a255:	83 c4 0c             	add    esp,0xc
c000a258:	c3                   	ret    
c000a259:	8d 76 00             	lea    esi,[esi+0x0]

c000a25c <tcp_slowtmr>:
c000a25c:	57                   	push   edi
c000a25d:	56                   	push   esi
c000a25e:	53                   	push   ebx
c000a25f:	83 ec 20             	sub    esp,0x20
c000a262:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a267:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a26c:	83 c0 01             	add    eax,0x1
c000a26f:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a274:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a27c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a281:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a285:	e9 0e 06 00 00       	jmp    c000a898 <tcp_slowtmr+0x63c>
c000a28a:	66 90                	xchg   ax,ax
c000a28c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a290:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a293:	85 c0                	test   eax,eax
c000a295:	75 15                	jne    c000a2ac <tcp_slowtmr+0x50>
c000a297:	83 ec 08             	sub    esp,0x8
c000a29a:	68 d0 01 03 c0       	push   0xc00301d0
c000a29f:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a2a4:	e8 ef 58 01 00       	call   c001fb98 <CPrintf>
c000a2a9:	83 c4 10             	add    esp,0x10
c000a2ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2b3:	83 f8 01             	cmp    eax,0x1
c000a2b6:	75 18                	jne    c000a2d0 <tcp_slowtmr+0x74>
c000a2b8:	83 ec 08             	sub    esp,0x8
c000a2bb:	68 fc 01 03 c0       	push   0xc00301fc
c000a2c0:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a2c5:	e8 ce 58 01 00       	call   c001fb98 <CPrintf>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000a2d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a2d7:	83 f8 0a             	cmp    eax,0xa
c000a2da:	75 18                	jne    c000a2f4 <tcp_slowtmr+0x98>
c000a2dc:	83 ec 08             	sub    esp,0x8
c000a2df:	68 28 02 03 c0       	push   0xc0030228
c000a2e4:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a2e9:	e8 aa 58 01 00       	call   c001fb98 <CPrintf>
c000a2ee:	83 c4 10             	add    esp,0x10
c000a2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000a2f4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a2f9:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a2fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a302:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a305:	83 f8 02             	cmp    eax,0x2
c000a308:	75 22                	jne    c000a32c <tcp_slowtmr+0xd0>
c000a30a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a30e:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a311:	0f b6 c0             	movzx  eax,al
c000a314:	83 f8 06             	cmp    eax,0x6
c000a317:	75 13                	jne    c000a32c <tcp_slowtmr+0xd0>
c000a319:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a31d:	83 c0 01             	add    eax,0x1
c000a320:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a324:	e9 eb 01 00 00       	jmp    c000a514 <tcp_slowtmr+0x2b8>
c000a329:	8d 76 00             	lea    esi,[esi+0x0]
c000a32c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a330:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a333:	0f b6 c0             	movzx  eax,al
c000a336:	83 f8 0c             	cmp    eax,0xc
c000a339:	75 11                	jne    c000a34c <tcp_slowtmr+0xf0>
c000a33b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a33f:	83 c0 01             	add    eax,0x1
c000a342:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a346:	e9 c9 01 00 00       	jmp    c000a514 <tcp_slowtmr+0x2b8>
c000a34b:	90                   	nop
c000a34c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a350:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a356:	0f b6 c0             	movzx  eax,al
c000a359:	85 c0                	test   eax,eax
c000a35b:	0f 84 8f 00 00 00    	je     c000a3f0 <tcp_slowtmr+0x194>
c000a361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a365:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a36b:	8d 50 01             	lea    edx,[eax+0x1]
c000a36e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a372:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a378:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a37c:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a382:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a386:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a38c:	0f b6 c0             	movzx  eax,al
c000a38f:	83 e8 01             	sub    eax,0x1
c000a392:	8a 80 b0 04 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfb50]
c000a398:	0f b6 c0             	movzx  eax,al
c000a39b:	39 c2                	cmp    edx,eax
c000a39d:	0f 82 71 01 00 00    	jb     c000a514 <tcp_slowtmr+0x2b8>
c000a3a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3a7:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a3b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b5:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a3bb:	0f b6 c0             	movzx  eax,al
c000a3be:	83 f8 06             	cmp    eax,0x6
c000a3c1:	77 19                	ja     c000a3dc <tcp_slowtmr+0x180>
c000a3c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c7:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a3cd:	83 c0 01             	add    eax,0x1
c000a3d0:	88 c2                	mov    dl,al
c000a3d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d6:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a3dc:	83 ec 0c             	sub    esp,0xc
c000a3df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a3e3:	e8 58 64 00 00       	call   c0010840 <tcp_zero_window_probe>
c000a3e8:	83 c4 10             	add    esp,0x10
c000a3eb:	e9 24 01 00 00       	jmp    c000a514 <tcp_slowtmr+0x2b8>
c000a3f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f4:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a3f8:	98                   	cwde   
c000a3f9:	85 c0                	test   eax,eax
c000a3fb:	78 17                	js     c000a414 <tcp_slowtmr+0x1b8>
c000a3fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a401:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a405:	83 c0 01             	add    eax,0x1
c000a408:	89 c2                	mov    edx,eax
c000a40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40e:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a412:	66 90                	xchg   ax,ax
c000a414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a418:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a41b:	85 c0                	test   eax,eax
c000a41d:	0f 84 f1 00 00 00    	je     c000a514 <tcp_slowtmr+0x2b8>
c000a423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a427:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a42b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a42f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a432:	0f bf d2             	movsx  edx,dx
c000a435:	98                   	cwde   
c000a436:	39 c2                	cmp    edx,eax
c000a438:	0f 8c d6 00 00 00    	jl     c000a514 <tcp_slowtmr+0x2b8>
c000a43e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a442:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a445:	83 f8 02             	cmp    eax,0x2
c000a448:	74 3e                	je     c000a488 <tcp_slowtmr+0x22c>
c000a44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a44e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a451:	98                   	cwde   
c000a452:	c1 f8 03             	sar    eax,0x3
c000a455:	0f bf d0             	movsx  edx,ax
c000a458:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a460:	98                   	cwde   
c000a461:	01 c2                	add    edx,eax
c000a463:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a467:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a46a:	0f b6 c0             	movzx  eax,al
c000a46d:	8a 80 b8 04 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfb48]
c000a473:	0f b6 c0             	movzx  eax,al
c000a476:	88 c1                	mov    cl,al
c000a478:	d3 e2                	shl    edx,cl
c000a47a:	89 d0                	mov    eax,edx
c000a47c:	89 c2                	mov    edx,eax
c000a47e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a482:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a486:	66 90                	xchg   ax,ax
c000a488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a48c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a496:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a499:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a49d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a4a1:	89 c8                	mov    eax,ecx
c000a4a3:	0f b7 d8             	movzx  ebx,ax
c000a4a6:	0f b7 ca             	movzx  ecx,dx
c000a4a9:	39 cb                	cmp    ebx,ecx
c000a4ab:	76 03                	jbe    c000a4b0 <tcp_slowtmr+0x254>
c000a4ad:	89 d0                	mov    eax,edx
c000a4af:	90                   	nop
c000a4b0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a4b5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a4ba:	d1 e8                	shr    eax,1
c000a4bc:	89 c2                	mov    edx,eax
c000a4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c2:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a4cd:	0f b7 d0             	movzx  edx,ax
c000a4d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4d7:	0f b7 c0             	movzx  eax,ax
c000a4da:	d1 e0                	shl    eax,1
c000a4dc:	39 c2                	cmp    edx,eax
c000a4de:	7d 14                	jge    c000a4f4 <tcp_slowtmr+0x298>
c000a4e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a4e7:	d1 e0                	shl    eax,1
c000a4e9:	89 c2                	mov    edx,eax
c000a4eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ef:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a4f3:	90                   	nop
c000a4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4f8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a4fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ff:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a503:	83 ec 0c             	sub    esp,0xc
c000a506:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a50a:	e8 21 60 00 00       	call   c0010530 <tcp_rexmit_rto>
c000a50f:	83 c4 10             	add    esp,0x10
c000a512:	66 90                	xchg   ax,ax
c000a514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a518:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a51b:	83 f8 06             	cmp    eax,0x6
c000a51e:	75 24                	jne    c000a544 <tcp_slowtmr+0x2e8>
c000a520:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a52a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a52d:	29 c2                	sub    edx,eax
c000a52f:	89 d0                	mov    eax,edx
c000a531:	83 f8 28             	cmp    eax,0x28
c000a534:	76 0e                	jbe    c000a544 <tcp_slowtmr+0x2e8>
c000a536:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a53a:	83 c0 01             	add    eax,0x1
c000a53d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a541:	8d 76 00             	lea    esi,[esi+0x0]
c000a544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a548:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a54b:	0f b6 c0             	movzx  eax,al
c000a54e:	83 e0 08             	and    eax,0x8
c000a551:	0f 84 cd 00 00 00    	je     c000a624 <tcp_slowtmr+0x3c8>
c000a557:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a55b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a55e:	83 f8 04             	cmp    eax,0x4
c000a561:	74 11                	je     c000a574 <tcp_slowtmr+0x318>
c000a563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a567:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a56a:	83 f8 07             	cmp    eax,0x7
c000a56d:	0f 85 b1 00 00 00    	jne    c000a624 <tcp_slowtmr+0x3c8>
c000a573:	90                   	nop
c000a574:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a581:	89 d1                	mov    ecx,edx
c000a583:	29 c1                	sub    ecx,eax
c000a585:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a589:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a58f:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a594:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a599:	f7 e2                	mul    edx
c000a59b:	89 d0                	mov    eax,edx
c000a59d:	c1 e8 05             	shr    eax,0x5
c000a5a0:	39 c1                	cmp    ecx,eax
c000a5a2:	76 18                	jbe    c000a5bc <tcp_slowtmr+0x360>
c000a5a4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5a8:	83 c0 01             	add    eax,0x1
c000a5ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5af:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a5b3:	83 c0 01             	add    eax,0x1
c000a5b6:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a5ba:	eb 68                	jmp    c000a624 <tcp_slowtmr+0x3c8>
c000a5bc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5c9:	89 d1                	mov    ecx,edx
c000a5cb:	29 c1                	sub    ecx,eax
c000a5cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d1:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a5d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5db:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a5e1:	0f b6 c0             	movzx  eax,al
c000a5e4:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a5ea:	01 d0                	add    eax,edx
c000a5ec:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a5f1:	f7 e2                	mul    edx
c000a5f3:	89 d0                	mov    eax,edx
c000a5f5:	c1 e8 05             	shr    eax,0x5
c000a5f8:	39 c1                	cmp    ecx,eax
c000a5fa:	76 28                	jbe    c000a624 <tcp_slowtmr+0x3c8>
c000a5fc:	83 ec 0c             	sub    esp,0xc
c000a5ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a603:	e8 6c 61 00 00       	call   c0010774 <tcp_keepalive>
c000a608:	83 c4 10             	add    esp,0x10
c000a60b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a60f:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a615:	83 c0 01             	add    eax,0x1
c000a618:	88 c2                	mov    dl,al
c000a61a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a61e:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a628:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a62e:	85 c0                	test   eax,eax
c000a630:	74 4e                	je     c000a680 <tcp_slowtmr+0x424>
c000a632:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a638:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a63c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a63f:	89 d1                	mov    ecx,edx
c000a641:	29 c1                	sub    ecx,eax
c000a643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a647:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a64a:	0f bf d0             	movsx  edx,ax
c000a64d:	89 d0                	mov    eax,edx
c000a64f:	d1 e0                	shl    eax,1
c000a651:	01 d0                	add    eax,edx
c000a653:	d1 e0                	shl    eax,1
c000a655:	39 c1                	cmp    ecx,eax
c000a657:	72 27                	jb     c000a680 <tcp_slowtmr+0x424>
c000a659:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a65d:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a663:	83 ec 0c             	sub    esp,0xc
c000a666:	50                   	push   eax
c000a667:	e8 ec f9 ff ff       	call   c000a058 <tcp_segs_free>
c000a66c:	83 c4 10             	add    esp,0x10
c000a66f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a673:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a67d:	8d 76 00             	lea    esi,[esi+0x0]
c000a680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a684:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a687:	83 f8 03             	cmp    eax,0x3
c000a68a:	75 24                	jne    c000a6b0 <tcp_slowtmr+0x454>
c000a68c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a692:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a696:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a699:	29 c2                	sub    edx,eax
c000a69b:	89 d0                	mov    eax,edx
c000a69d:	83 f8 28             	cmp    eax,0x28
c000a6a0:	76 0e                	jbe    c000a6b0 <tcp_slowtmr+0x454>
c000a6a2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6a6:	83 c0 01             	add    eax,0x1
c000a6a9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6ad:	8d 76 00             	lea    esi,[esi+0x0]
c000a6b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a6b7:	83 f8 09             	cmp    eax,0x9
c000a6ba:	75 24                	jne    c000a6e0 <tcp_slowtmr+0x484>
c000a6bc:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a6c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6c6:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a6c9:	29 c2                	sub    edx,eax
c000a6cb:	89 d0                	mov    eax,edx
c000a6cd:	3d f0 00 00 00       	cmp    eax,0xf0
c000a6d2:	76 0c                	jbe    c000a6e0 <tcp_slowtmr+0x484>
c000a6d4:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a6d8:	83 c0 01             	add    eax,0x1
c000a6db:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a6df:	90                   	nop
c000a6e0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a6e5:	85 c0                	test   eax,eax
c000a6e7:	0f 84 13 01 00 00    	je     c000a800 <tcp_slowtmr+0x5a4>
c000a6ed:	83 ec 0c             	sub    esp,0xc
c000a6f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a6f4:	e8 7f fa ff ff       	call   c000a178 <tcp_pcb_purge>
c000a6f9:	83 c4 10             	add    esp,0x10
c000a6fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a701:	74 31                	je     c000a734 <tcp_slowtmr+0x4d8>
c000a703:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a708:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a70c:	75 16                	jne    c000a724 <tcp_slowtmr+0x4c8>
c000a70e:	83 ec 08             	sub    esp,0x8
c000a711:	68 58 02 03 c0       	push   0xc0030258
c000a716:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a71b:	e8 78 54 01 00       	call   c001fb98 <CPrintf>
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	90                   	nop
c000a724:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a728:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a72b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a72f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a732:	eb 2c                	jmp    c000a760 <tcp_slowtmr+0x504>
c000a734:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a739:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a73d:	74 15                	je     c000a754 <tcp_slowtmr+0x4f8>
c000a73f:	83 ec 08             	sub    esp,0x8
c000a742:	68 84 02 03 c0       	push   0xc0030284
c000a747:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a74c:	e8 47 54 01 00       	call   c001fb98 <CPrintf>
c000a751:	83 c4 10             	add    esp,0x10
c000a754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a758:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a75b:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a764:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a76a:	85 c0                	test   eax,eax
c000a76c:	74 1e                	je     c000a78c <tcp_slowtmr+0x530>
c000a76e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a772:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a778:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a77c:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a77f:	83 ec 08             	sub    esp,0x8
c000a782:	6a f6                	push   0xfffffff6
c000a784:	52                   	push   edx
c000a785:	ff d0                	call   eax
c000a787:	83 c4 10             	add    esp,0x10
c000a78a:	66 90                	xchg   ax,ax
c000a78c:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a791:	85 c0                	test   eax,eax
c000a793:	74 3f                	je     c000a7d4 <tcp_slowtmr+0x578>
c000a795:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a799:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a79d:	0f b7 f0             	movzx  esi,ax
c000a7a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7a4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a7a7:	0f b7 d8             	movzx  ebx,ax
c000a7aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7ae:	8d 78 04             	lea    edi,[eax+0x4]
c000a7b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a7b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a7bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7c0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a7c3:	83 ec 08             	sub    esp,0x8
c000a7c6:	56                   	push   esi
c000a7c7:	53                   	push   ebx
c000a7c8:	57                   	push   edi
c000a7c9:	51                   	push   ecx
c000a7ca:	52                   	push   edx
c000a7cb:	50                   	push   eax
c000a7cc:	e8 e3 5b 00 00       	call   c00103b4 <tcp_rst>
c000a7d1:	83 c4 20             	add    esp,0x20
c000a7d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a7dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a7e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7e7:	83 ec 08             	sub    esp,0x8
c000a7ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ee:	6a 02                	push   0x2
c000a7f0:	e8 d3 d2 ff ff       	call   c0007ac8 <memp_free>
c000a7f5:	83 c4 10             	add    esp,0x10
c000a7f8:	e9 9b 00 00 00       	jmp    c000a898 <tcp_slowtmr+0x63c>
c000a7fd:	8d 76 00             	lea    esi,[esi+0x0]
c000a800:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a804:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a80c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a80f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a817:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a81a:	83 c0 01             	add    eax,0x1
c000a81d:	88 c2                	mov    dl,al
c000a81f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a823:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a826:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a82a:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a82d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a831:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a834:	0f b6 d2             	movzx  edx,dl
c000a837:	0f b6 c0             	movzx  eax,al
c000a83a:	39 c2                	cmp    edx,eax
c000a83c:	72 5a                	jb     c000a898 <tcp_slowtmr+0x63c>
c000a83e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a842:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a846:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a84a:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a850:	85 c0                	test   eax,eax
c000a852:	74 24                	je     c000a878 <tcp_slowtmr+0x61c>
c000a854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a858:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a85e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a862:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a865:	83 ec 08             	sub    esp,0x8
c000a868:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a86c:	52                   	push   edx
c000a86d:	ff d0                	call   eax
c000a86f:	83 c4 10             	add    esp,0x10
c000a872:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a876:	eb 08                	jmp    c000a880 <tcp_slowtmr+0x624>
c000a878:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a87d:	8d 76 00             	lea    esi,[esi+0x0]
c000a880:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a885:	85 c0                	test   eax,eax
c000a887:	75 0f                	jne    c000a898 <tcp_slowtmr+0x63c>
c000a889:	83 ec 0c             	sub    esp,0xc
c000a88c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a890:	e8 93 56 00 00       	call   c000ff28 <tcp_output>
c000a895:	83 c4 10             	add    esp,0x10
c000a898:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a89d:	0f 85 e9 f9 ff ff    	jne    c000a28c <tcp_slowtmr+0x30>
c000a8a3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a8ab:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8b4:	e9 0b 01 00 00       	jmp    c000a9c4 <tcp_slowtmr+0x768>
c000a8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000a8bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a8c3:	83 f8 0a             	cmp    eax,0xa
c000a8c6:	74 18                	je     c000a8e0 <tcp_slowtmr+0x684>
c000a8c8:	83 ec 08             	sub    esp,0x8
c000a8cb:	68 b0 02 03 c0       	push   0xc00302b0
c000a8d0:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a8d5:	e8 be 52 01 00       	call   c001fb98 <CPrintf>
c000a8da:	83 c4 10             	add    esp,0x10
c000a8dd:	8d 76 00             	lea    esi,[esi+0x0]
c000a8e0:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a8e5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a8eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8ef:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a8f2:	29 c2                	sub    edx,eax
c000a8f4:	89 d0                	mov    eax,edx
c000a8f6:	3d f0 00 00 00       	cmp    eax,0xf0
c000a8fb:	76 0b                	jbe    c000a908 <tcp_slowtmr+0x6ac>
c000a8fd:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a901:	83 c0 01             	add    eax,0x1
c000a904:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a908:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a90d:	85 c0                	test   eax,eax
c000a90f:	0f 84 9b 00 00 00    	je     c000a9b0 <tcp_slowtmr+0x754>
c000a915:	83 ec 0c             	sub    esp,0xc
c000a918:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a91c:	e8 57 f8 ff ff       	call   c000a178 <tcp_pcb_purge>
c000a921:	83 c4 10             	add    esp,0x10
c000a924:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a929:	74 31                	je     c000a95c <tcp_slowtmr+0x700>
c000a92b:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a930:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a934:	75 16                	jne    c000a94c <tcp_slowtmr+0x6f0>
c000a936:	83 ec 08             	sub    esp,0x8
c000a939:	68 e0 02 03 c0       	push   0xc00302e0
c000a93e:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a943:	e8 50 52 01 00       	call   c001fb98 <CPrintf>
c000a948:	83 c4 10             	add    esp,0x10
c000a94b:	90                   	nop
c000a94c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a950:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a953:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a957:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a95a:	eb 2c                	jmp    c000a988 <tcp_slowtmr+0x72c>
c000a95c:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a961:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a965:	74 15                	je     c000a97c <tcp_slowtmr+0x720>
c000a967:	83 ec 08             	sub    esp,0x8
c000a96a:	68 08 03 03 c0       	push   0xc0030308
c000a96f:	68 c6 fb 02 c0       	push   0xc002fbc6
c000a974:	e8 1f 52 01 00       	call   c001fb98 <CPrintf>
c000a979:	83 c4 10             	add    esp,0x10
c000a97c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a980:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a983:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a988:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a994:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a997:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a99b:	83 ec 08             	sub    esp,0x8
c000a99e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a9a2:	6a 02                	push   0x2
c000a9a4:	e8 1f d1 ff ff       	call   c0007ac8 <memp_free>
c000a9a9:	83 c4 10             	add    esp,0x10
c000a9ac:	eb 16                	jmp    c000a9c4 <tcp_slowtmr+0x768>
c000a9ae:	66 90                	xchg   ax,ax
c000a9b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a9b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a9bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a9bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a9c3:	90                   	nop
c000a9c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a9c9:	0f 85 ed fe ff ff    	jne    c000a8bc <tcp_slowtmr+0x660>
c000a9cf:	90                   	nop
c000a9d0:	83 c4 20             	add    esp,0x20
c000a9d3:	5b                   	pop    ebx
c000a9d4:	5e                   	pop    esi
c000a9d5:	5f                   	pop    edi
c000a9d6:	c3                   	ret    
c000a9d7:	90                   	nop

c000a9d8 <tcp_pcb_remove>:
c000a9d8:	83 ec 0c             	sub    esp,0xc
c000a9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9df:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9e1:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a9e5:	75 11                	jne    c000a9f8 <tcp_pcb_remove+0x20>
c000a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9ed:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f4:	89 10                	mov    DWORD PTR [eax],edx
c000a9f6:	eb 4c                	jmp    c000aa44 <tcp_pcb_remove+0x6c>
c000a9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9fe:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aa03:	eb 33                	jmp    c000aa38 <tcp_pcb_remove+0x60>
c000aa05:	8d 76 00             	lea    esi,[esi+0x0]
c000aa08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aa10:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000aa14:	75 12                	jne    c000aa28 <tcp_pcb_remove+0x50>
c000aa16:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aa1f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000aa22:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa25:	eb 1d                	jmp    c000aa44 <tcp_pcb_remove+0x6c>
c000aa27:	90                   	nop
c000aa28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000aa30:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000aa35:	8d 76 00             	lea    esi,[esi+0x0]
c000aa38:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000aa3d:	85 c0                	test   eax,eax
c000aa3f:	75 c7                	jne    c000aa08 <tcp_pcb_remove+0x30>
c000aa41:	8d 76 00             	lea    esi,[esi+0x0]
c000aa44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa48:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa56:	e8 1d f7 ff ff       	call   c000a178 <tcp_pcb_purge>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa62:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa65:	83 f8 0a             	cmp    eax,0xa
c000aa68:	74 3e                	je     c000aaa8 <tcp_pcb_remove+0xd0>
c000aa6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa71:	83 f8 01             	cmp    eax,0x1
c000aa74:	74 32                	je     c000aaa8 <tcp_pcb_remove+0xd0>
c000aa76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa7a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa7d:	0f b6 c0             	movzx  eax,al
c000aa80:	83 e0 01             	and    eax,0x1
c000aa83:	74 23                	je     c000aaa8 <tcp_pcb_remove+0xd0>
c000aa85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa89:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa8c:	83 c8 02             	or     eax,0x2
c000aa8f:	88 c2                	mov    dl,al
c000aa91:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa95:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aa98:	83 ec 0c             	sub    esp,0xc
c000aa9b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000aa9f:	e8 84 54 00 00       	call   c000ff28 <tcp_output>
c000aaa4:	83 c4 10             	add    esp,0x10
c000aaa7:	90                   	nop
c000aaa8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aaaf:	83 f8 01             	cmp    eax,0x1
c000aab2:	74 64                	je     c000ab18 <tcp_pcb_remove+0x140>
c000aab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aab8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000aabb:	85 c0                	test   eax,eax
c000aabd:	74 15                	je     c000aad4 <tcp_pcb_remove+0xfc>
c000aabf:	83 ec 08             	sub    esp,0x8
c000aac2:	68 ae 03 03 c0       	push   0xc00303ae
c000aac7:	68 c6 fb 02 c0       	push   0xc002fbc6
c000aacc:	e8 c7 50 01 00       	call   c001fb98 <CPrintf>
c000aad1:	83 c4 10             	add    esp,0x10
c000aad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aad8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aadb:	85 c0                	test   eax,eax
c000aadd:	74 15                	je     c000aaf4 <tcp_pcb_remove+0x11c>
c000aadf:	83 ec 08             	sub    esp,0x8
c000aae2:	68 c6 03 03 c0       	push   0xc00303c6
c000aae7:	68 c6 fb 02 c0       	push   0xc002fbc6
c000aaec:	e8 a7 50 01 00       	call   c001fb98 <CPrintf>
c000aaf1:	83 c4 10             	add    esp,0x10
c000aaf4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aaf8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aafe:	85 c0                	test   eax,eax
c000ab00:	74 16                	je     c000ab18 <tcp_pcb_remove+0x140>
c000ab02:	83 ec 08             	sub    esp,0x8
c000ab05:	68 df 03 03 c0       	push   0xc00303df
c000ab0a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000ab0f:	e8 84 50 01 00       	call   c001fb98 <CPrintf>
c000ab14:	83 c4 10             	add    esp,0x10
c000ab17:	90                   	nop
c000ab18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab1c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ab23:	90                   	nop
c000ab24:	83 c4 0c             	add    esp,0xc
c000ab27:	c3                   	ret    

c000ab28 <tcp_close_shutdown>:
c000ab28:	57                   	push   edi
c000ab29:	56                   	push   esi
c000ab2a:	53                   	push   ebx
c000ab2b:	83 ec 20             	sub    esp,0x20
c000ab2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ab32:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ab36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ab3b:	85 c0                	test   eax,eax
c000ab3d:	0f 84 41 01 00 00    	je     c000ac84 <tcp_close_shutdown+0x15c>
c000ab43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab4a:	83 f8 01             	cmp    eax,0x1
c000ab4d:	0f 84 31 01 00 00    	je     c000ac84 <tcp_close_shutdown+0x15c>
c000ab53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab57:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ab5d:	85 c0                	test   eax,eax
c000ab5f:	75 17                	jne    c000ab78 <tcp_close_shutdown+0x50>
c000ab61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab65:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ab68:	0f b7 c0             	movzx  eax,ax
c000ab6b:	3d 60 08 00 00       	cmp    eax,0x860
c000ab70:	0f 84 0e 01 00 00    	je     c000ac84 <tcp_close_shutdown+0x15c>
c000ab76:	66 90                	xchg   ax,ax
c000ab78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab7c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ab7f:	0f b6 c0             	movzx  eax,al
c000ab82:	83 e0 10             	and    eax,0x10
c000ab85:	75 15                	jne    c000ab9c <tcp_close_shutdown+0x74>
c000ab87:	83 ec 08             	sub    esp,0x8
c000ab8a:	68 f6 03 03 c0       	push   0xc00303f6
c000ab8f:	68 c6 fb 02 c0       	push   0xc002fbc6
c000ab94:	e8 ff 4f 01 00       	call   c001fb98 <CPrintf>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aba0:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aba4:	0f b7 f0             	movzx  esi,ax
c000aba7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000abae:	0f b7 d8             	movzx  ebx,ax
c000abb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abb5:	8d 78 04             	lea    edi,[eax+0x4]
c000abb8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000abbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abc0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000abc3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abc7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000abca:	83 ec 08             	sub    esp,0x8
c000abcd:	56                   	push   esi
c000abce:	53                   	push   ebx
c000abcf:	57                   	push   edi
c000abd0:	51                   	push   ecx
c000abd1:	52                   	push   edx
c000abd2:	50                   	push   eax
c000abd3:	e8 dc 57 00 00       	call   c00103b4 <tcp_rst>
c000abd8:	83 c4 20             	add    esp,0x20
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abe2:	e8 91 f5 ff ff       	call   c000a178 <tcp_pcb_purge>
c000abe7:	83 c4 10             	add    esp,0x10
c000abea:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abef:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abf3:	75 0f                	jne    c000ac04 <tcp_close_shutdown+0xdc>
c000abf5:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000abfa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abfd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ac02:	eb 48                	jmp    c000ac4c <tcp_close_shutdown+0x124>
c000ac04:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ac09:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac0e:	eb 30                	jmp    c000ac40 <tcp_close_shutdown+0x118>
c000ac10:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac18:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac1c:	75 12                	jne    c000ac30 <tcp_close_shutdown+0x108>
c000ac1e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac23:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ac27:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ac2a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac2d:	eb 1d                	jmp    c000ac4c <tcp_close_shutdown+0x124>
c000ac2f:	90                   	nop
c000ac30:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac38:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac40:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac45:	85 c0                	test   eax,eax
c000ac47:	75 c7                	jne    c000ac10 <tcp_close_shutdown+0xe8>
c000ac49:	8d 76 00             	lea    esi,[esi+0x0]
c000ac4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac50:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac5b:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ac62:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ac68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac6c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac73:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ac78:	e8 53 5f 00 00       	call   c0010bd0 <tcp_timer_needed>
c000ac7d:	b0 00                	mov    al,0x0
c000ac7f:	e9 f4 01 00 00       	jmp    c000ae78 <tcp_close_shutdown+0x350>
c000ac84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ac8b:	83 f8 07             	cmp    eax,0x7
c000ac8e:	0f 87 a4 01 00 00    	ja     c000ae38 <tcp_close_shutdown+0x310>
c000ac94:	8b 04 85 80 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb80]
c000ac9b:	ff e0                	jmp    eax
c000ac9d:	8d 76 00             	lea    esi,[esi+0x0]
c000aca0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000aca5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aca9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000acac:	0f b7 c0             	movzx  eax,ax
c000acaf:	85 c0                	test   eax,eax
c000acb1:	74 71                	je     c000ad24 <tcp_close_shutdown+0x1fc>
c000acb3:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000acb8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000acbc:	75 12                	jne    c000acd0 <tcp_close_shutdown+0x1a8>
c000acbe:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000acc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000acc6:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000accb:	eb 4b                	jmp    c000ad18 <tcp_close_shutdown+0x1f0>
c000accd:	8d 76 00             	lea    esi,[esi+0x0]
c000acd0:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000acd5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000acda:	eb 30                	jmp    c000ad0c <tcp_close_shutdown+0x1e4>
c000acdc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ace1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ace4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ace8:	75 12                	jne    c000acfc <tcp_close_shutdown+0x1d4>
c000acea:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000acef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000acf3:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000acf6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000acf9:	eb 1d                	jmp    c000ad18 <tcp_close_shutdown+0x1f0>
c000acfb:	90                   	nop
c000acfc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ad04:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ad09:	8d 76 00             	lea    esi,[esi+0x0]
c000ad0c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ad11:	85 c0                	test   eax,eax
c000ad13:	75 c7                	jne    c000acdc <tcp_close_shutdown+0x1b4>
c000ad15:	8d 76 00             	lea    esi,[esi+0x0]
c000ad18:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad1c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ad23:	90                   	nop
c000ad24:	83 ec 08             	sub    esp,0x8
c000ad27:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad2b:	6a 02                	push   0x2
c000ad2d:	e8 96 cd ff ff       	call   c0007ac8 <memp_free>
c000ad32:	83 c4 10             	add    esp,0x10
c000ad35:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad3d:	e9 12 01 00 00       	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad49:	83 ec 08             	sub    esp,0x8
c000ad4c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad50:	68 78 68 03 c0       	push   0xc0036878
c000ad55:	e8 7e fc ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000ad5a:	83 c4 10             	add    esp,0x10
c000ad5d:	83 ec 08             	sub    esp,0x8
c000ad60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad64:	6a 03                	push   0x3
c000ad66:	e8 5d cd ff ff       	call   c0007ac8 <memp_free>
c000ad6b:	83 c4 10             	add    esp,0x10
c000ad6e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad76:	e9 d9 00 00 00       	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ad7b:	90                   	nop
c000ad7c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad81:	83 ec 08             	sub    esp,0x8
c000ad84:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad88:	68 70 68 03 c0       	push   0xc0036870
c000ad8d:	e8 46 fc ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000ad92:	83 c4 10             	add    esp,0x10
c000ad95:	83 ec 08             	sub    esp,0x8
c000ad98:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ad9c:	6a 02                	push   0x2
c000ad9e:	e8 25 cd ff ff       	call   c0007ac8 <memp_free>
c000ada3:	83 c4 10             	add    esp,0x10
c000ada6:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000adae:	e9 a1 00 00 00       	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000adb3:	90                   	nop
c000adb4:	83 ec 0c             	sub    esp,0xc
c000adb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adbb:	e8 b8 4d 00 00       	call   c000fb78 <tcp_send_fin>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adc7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adcc:	85 c0                	test   eax,eax
c000adce:	75 78                	jne    c000ae48 <tcp_close_shutdown+0x320>
c000add0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000add4:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000addb:	eb 6b                	jmp    c000ae48 <tcp_close_shutdown+0x320>
c000addd:	8d 76 00             	lea    esi,[esi+0x0]
c000ade0:	83 ec 0c             	sub    esp,0xc
c000ade3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ade7:	e8 8c 4d 00 00       	call   c000fb78 <tcp_send_fin>
c000adec:	83 c4 10             	add    esp,0x10
c000adef:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000adf3:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adf8:	85 c0                	test   eax,eax
c000adfa:	75 50                	jne    c000ae4c <tcp_close_shutdown+0x324>
c000adfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae00:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ae07:	eb 43                	jmp    c000ae4c <tcp_close_shutdown+0x324>
c000ae09:	8d 76 00             	lea    esi,[esi+0x0]
c000ae0c:	83 ec 0c             	sub    esp,0xc
c000ae0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae13:	e8 60 4d 00 00       	call   c000fb78 <tcp_send_fin>
c000ae18:	83 c4 10             	add    esp,0x10
c000ae1b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ae1f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae24:	85 c0                	test   eax,eax
c000ae26:	75 28                	jne    c000ae50 <tcp_close_shutdown+0x328>
c000ae28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae2c:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ae33:	eb 1b                	jmp    c000ae50 <tcp_close_shutdown+0x328>
c000ae35:	8d 76 00             	lea    esi,[esi+0x0]
c000ae38:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ae3d:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ae45:	eb 0d                	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ae47:	90                   	nop
c000ae48:	90                   	nop
c000ae49:	eb 09                	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ae4b:	90                   	nop
c000ae4c:	90                   	nop
c000ae4d:	eb 05                	jmp    c000ae54 <tcp_close_shutdown+0x32c>
c000ae4f:	90                   	nop
c000ae50:	90                   	nop
c000ae51:	8d 76 00             	lea    esi,[esi+0x0]
c000ae54:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ae59:	74 19                	je     c000ae74 <tcp_close_shutdown+0x34c>
c000ae5b:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ae60:	85 c0                	test   eax,eax
c000ae62:	75 10                	jne    c000ae74 <tcp_close_shutdown+0x34c>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ae6b:	e8 b8 50 00 00       	call   c000ff28 <tcp_output>
c000ae70:	83 c4 10             	add    esp,0x10
c000ae73:	90                   	nop
c000ae74:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ae78:	83 c4 20             	add    esp,0x20
c000ae7b:	5b                   	pop    ebx
c000ae7c:	5e                   	pop    esi
c000ae7d:	5f                   	pop    edi
c000ae7e:	c3                   	ret    
c000ae7f:	90                   	nop

c000ae80 <tcp_close>:
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ae8a:	83 f8 01             	cmp    eax,0x1
c000ae8d:	74 15                	je     c000aea4 <tcp_close+0x24>
c000ae8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae93:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ae96:	83 c8 10             	or     eax,0x10
c000ae99:	88 c2                	mov    dl,al
c000ae9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000aea2:	66 90                	xchg   ax,ax
c000aea4:	83 ec 08             	sub    esp,0x8
c000aea7:	6a 01                	push   0x1
c000aea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aead:	e8 76 fc ff ff       	call   c000ab28 <tcp_close_shutdown>
c000aeb2:	83 c4 10             	add    esp,0x10
c000aeb5:	83 c4 0c             	add    esp,0xc
c000aeb8:	c3                   	ret    
c000aeb9:	8d 76 00             	lea    esi,[esi+0x0]

c000aebc <tcp_recv_null>:
c000aebc:	83 ec 1c             	sub    esp,0x1c
c000aebf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000aec3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aec7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000aecc:	74 2e                	je     c000aefc <tcp_recv_null+0x40>
c000aece:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000aed2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aed5:	0f b7 c0             	movzx  eax,ax
c000aed8:	83 ec 08             	sub    esp,0x8
c000aedb:	50                   	push   eax
c000aedc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000aee0:	e8 b3 ee ff ff       	call   c0009d98 <tcp_recved>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	83 ec 0c             	sub    esp,0xc
c000aeeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aeef:	e8 94 d4 ff ff       	call   c0008388 <pbuf_free>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	eb 1f                	jmp    c000af18 <tcp_recv_null+0x5c>
c000aef9:	8d 76 00             	lea    esi,[esi+0x0]
c000aefc:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000af01:	85 c0                	test   eax,eax
c000af03:	75 13                	jne    c000af18 <tcp_recv_null+0x5c>
c000af05:	83 ec 0c             	sub    esp,0xc
c000af08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000af0c:	e8 6f ff ff ff       	call   c000ae80 <tcp_close>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	eb 06                	jmp    c000af1c <tcp_recv_null+0x60>
c000af16:	66 90                	xchg   ax,ax
c000af18:	b0 00                	mov    al,0x0
c000af1a:	66 90                	xchg   ax,ax
c000af1c:	83 c4 1c             	add    esp,0x1c
c000af1f:	c3                   	ret    

c000af20 <tcp_fasttmr>:
c000af20:	83 ec 1c             	sub    esp,0x1c
c000af23:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000af28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af2c:	e9 03 01 00 00       	jmp    c000b034 <tcp_fasttmr+0x114>
c000af31:	8d 76 00             	lea    esi,[esi+0x0]
c000af34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000af3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000af3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af43:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af49:	85 c0                	test   eax,eax
c000af4b:	0f 84 8f 00 00 00    	je     c000afe0 <tcp_fasttmr+0xc0>
c000af51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af55:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af5b:	85 c0                	test   eax,eax
c000af5d:	74 31                	je     c000af90 <tcp_fasttmr+0x70>
c000af5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af63:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000af69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af6d:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000af73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af77:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000af7a:	6a 00                	push   0x0
c000af7c:	51                   	push   ecx
c000af7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af81:	52                   	push   edx
c000af82:	ff d0                	call   eax
c000af84:	83 c4 10             	add    esp,0x10
c000af87:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000af8b:	eb 23                	jmp    c000afb0 <tcp_fasttmr+0x90>
c000af8d:	8d 76 00             	lea    esi,[esi+0x0]
c000af90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af94:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000af9a:	6a 00                	push   0x0
c000af9c:	50                   	push   eax
c000af9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa1:	6a 00                	push   0x0
c000afa3:	e8 14 ff ff ff       	call   c000aebc <tcp_recv_null>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000afaf:	90                   	nop
c000afb0:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000afb5:	85 c0                	test   eax,eax
c000afb7:	75 13                	jne    c000afcc <tcp_fasttmr+0xac>
c000afb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afbd:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000afc7:	eb 17                	jmp    c000afe0 <tcp_fasttmr+0xc0>
c000afc9:	8d 76 00             	lea    esi,[esi+0x0]
c000afcc:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000afd1:	83 f8 f6             	cmp    eax,0xfffffff6
c000afd4:	75 0a                	jne    c000afe0 <tcp_fasttmr+0xc0>
c000afd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000afde:	66 90                	xchg   ax,ax
c000afe0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000afe5:	74 45                	je     c000b02c <tcp_fasttmr+0x10c>
c000afe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afeb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afee:	0f b6 c0             	movzx  eax,al
c000aff1:	83 e0 01             	and    eax,0x1
c000aff4:	74 36                	je     c000b02c <tcp_fasttmr+0x10c>
c000aff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000affa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000affd:	83 c8 02             	or     eax,0x2
c000b000:	88 c2                	mov    dl,al
c000b002:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b006:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b009:	83 ec 0c             	sub    esp,0xc
c000b00c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b010:	e8 13 4f 00 00       	call   c000ff28 <tcp_output>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b01c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b01f:	83 e0 fc             	and    eax,0xfffffffc
c000b022:	88 c2                	mov    dl,al
c000b024:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b028:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b02b:	90                   	nop
c000b02c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b030:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b034:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b039:	0f 85 f5 fe ff ff    	jne    c000af34 <tcp_fasttmr+0x14>
c000b03f:	90                   	nop
c000b040:	83 c4 1c             	add    esp,0x1c
c000b043:	c3                   	ret    

c000b044 <tcp_tmr>:
c000b044:	83 ec 0c             	sub    esp,0xc
c000b047:	e8 d4 fe ff ff       	call   c000af20 <tcp_fasttmr>
c000b04c:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b051:	83 c0 01             	add    eax,0x1
c000b054:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000b059:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000b05e:	0f b6 c0             	movzx  eax,al
c000b061:	83 e0 01             	and    eax,0x1
c000b064:	74 06                	je     c000b06c <tcp_tmr+0x28>
c000b066:	e8 f1 f1 ff ff       	call   c000a25c <tcp_slowtmr>
c000b06b:	90                   	nop
c000b06c:	90                   	nop
c000b06d:	83 c4 0c             	add    esp,0xc
c000b070:	c3                   	ret    
c000b071:	8d 76 00             	lea    esi,[esi+0x0]

c000b074 <tcp_shutdown>:
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b07e:	83 f8 01             	cmp    eax,0x1
c000b081:	75 09                	jne    c000b08c <tcp_shutdown+0x18>
c000b083:	b0 f3                	mov    al,0xf3
c000b085:	e9 92 00 00 00       	jmp    c000b11c <tcp_shutdown+0xa8>
c000b08a:	66 90                	xchg   ax,ax
c000b08c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b091:	74 49                	je     c000b0dc <tcp_shutdown+0x68>
c000b093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b097:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b09d:	85 c0                	test   eax,eax
c000b09f:	74 27                	je     c000b0c8 <tcp_shutdown+0x54>
c000b0a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a5:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	50                   	push   eax
c000b0af:	e8 d4 d2 ff ff       	call   c0008388 <pbuf_free>
c000b0b4:	83 c4 10             	add    esp,0x10
c000b0b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0bb:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b0cf:	83 c8 10             	or     eax,0x10
c000b0d2:	88 c2                	mov    dl,al
c000b0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0d8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b0db:	90                   	nop
c000b0dc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b0e1:	74 2d                	je     c000b110 <tcp_shutdown+0x9c>
c000b0e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b0ea:	83 f8 03             	cmp    eax,0x3
c000b0ed:	72 25                	jb     c000b114 <tcp_shutdown+0xa0>
c000b0ef:	83 f8 04             	cmp    eax,0x4
c000b0f2:	76 08                	jbe    c000b0fc <tcp_shutdown+0x88>
c000b0f4:	83 f8 07             	cmp    eax,0x7
c000b0f7:	75 1b                	jne    c000b114 <tcp_shutdown+0xa0>
c000b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c000b0fc:	83 ec 08             	sub    esp,0x8
c000b0ff:	6a 00                	push   0x0
c000b101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b105:	e8 1e fa ff ff       	call   c000ab28 <tcp_close_shutdown>
c000b10a:	83 c4 10             	add    esp,0x10
c000b10d:	eb 0d                	jmp    c000b11c <tcp_shutdown+0xa8>
c000b10f:	90                   	nop
c000b110:	90                   	nop
c000b111:	eb 05                	jmp    c000b118 <tcp_shutdown+0xa4>
c000b113:	90                   	nop
c000b114:	90                   	nop
c000b115:	8d 76 00             	lea    esi,[esi+0x0]
c000b118:	b0 00                	mov    al,0x0
c000b11a:	66 90                	xchg   ax,ax
c000b11c:	83 c4 0c             	add    esp,0xc
c000b11f:	c3                   	ret    

c000b120 <tcp_abandon>:
c000b120:	83 ec 2c             	sub    esp,0x2c
c000b123:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b127:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b12a:	83 f8 01             	cmp    eax,0x1
c000b12d:	75 15                	jne    c000b144 <tcp_abandon+0x24>
c000b12f:	83 ec 08             	sub    esp,0x8
c000b132:	68 30 03 03 c0       	push   0xc0030330
c000b137:	68 c6 fb 02 c0       	push   0xc002fbc6
c000b13c:	e8 57 4a 01 00       	call   c001fb98 <CPrintf>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b148:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b14b:	83 f8 0a             	cmp    eax,0xa
c000b14e:	75 2c                	jne    c000b17c <tcp_abandon+0x5c>
c000b150:	83 ec 08             	sub    esp,0x8
c000b153:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b157:	68 84 68 03 c0       	push   0xc0036884
c000b15c:	e8 77 f8 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000b161:	83 c4 10             	add    esp,0x10
c000b164:	83 ec 08             	sub    esp,0x8
c000b167:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b16b:	6a 02                	push   0x2
c000b16d:	e8 56 c9 ff ff       	call   c0007ac8 <memp_free>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	e9 32 01 00 00       	jmp    c000b2ac <tcp_abandon+0x18c>
c000b17a:	66 90                	xchg   ax,ax
c000b17c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b180:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b183:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b187:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b18b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b196:	8b 00                	mov    eax,DWORD PTR [eax]
c000b198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b19c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b1ae:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b1b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1b7:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b1bb:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1c4:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b1ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1d2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b1d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b1d9:	83 ec 08             	sub    esp,0x8
c000b1dc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1e0:	68 70 68 03 c0       	push   0xc0036870
c000b1e5:	e8 ee f7 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1f1:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1f4:	85 c0                	test   eax,eax
c000b1f6:	74 14                	je     c000b20c <tcp_abandon+0xec>
c000b1f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1fc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b1ff:	83 ec 0c             	sub    esp,0xc
c000b202:	50                   	push   eax
c000b203:	e8 50 ee ff ff       	call   c000a058 <tcp_segs_free>
c000b208:	83 c4 10             	add    esp,0x10
c000b20b:	90                   	nop
c000b20c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b210:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b213:	85 c0                	test   eax,eax
c000b215:	74 15                	je     c000b22c <tcp_abandon+0x10c>
c000b217:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b21b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b21e:	83 ec 0c             	sub    esp,0xc
c000b221:	50                   	push   eax
c000b222:	e8 31 ee ff ff       	call   c000a058 <tcp_segs_free>
c000b227:	83 c4 10             	add    esp,0x10
c000b22a:	66 90                	xchg   ax,ax
c000b22c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b230:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b236:	85 c0                	test   eax,eax
c000b238:	74 16                	je     c000b250 <tcp_abandon+0x130>
c000b23a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b23e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b244:	83 ec 0c             	sub    esp,0xc
c000b247:	50                   	push   eax
c000b248:	e8 0b ee ff ff       	call   c000a058 <tcp_segs_free>
c000b24d:	83 c4 10             	add    esp,0x10
c000b250:	83 ec 08             	sub    esp,0x8
c000b253:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b257:	6a 02                	push   0x2
c000b259:	e8 6a c8 ff ff       	call   c0007ac8 <memp_free>
c000b25e:	83 c4 10             	add    esp,0x10
c000b261:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b266:	74 14                	je     c000b27c <tcp_abandon+0x15c>
c000b268:	83 ec 08             	sub    esp,0x8
c000b26b:	6a f6                	push   0xfffffff6
c000b26d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b275:	ff d0                	call   eax
c000b277:	83 c4 10             	add    esp,0x10
c000b27a:	66 90                	xchg   ax,ax
c000b27c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b281:	74 29                	je     c000b2ac <tcp_abandon+0x18c>
c000b283:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b288:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b28d:	83 ec 08             	sub    esp,0x8
c000b290:	52                   	push   edx
c000b291:	50                   	push   eax
c000b292:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b296:	50                   	push   eax
c000b297:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b29b:	50                   	push   eax
c000b29c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b2a0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2a4:	e8 0b 51 00 00       	call   c00103b4 <tcp_rst>
c000b2a9:	83 c4 20             	add    esp,0x20
c000b2ac:	90                   	nop
c000b2ad:	83 c4 2c             	add    esp,0x2c
c000b2b0:	c3                   	ret    
c000b2b1:	8d 76 00             	lea    esi,[esi+0x0]

c000b2b4 <tcp_abort>:
c000b2b4:	83 ec 0c             	sub    esp,0xc
c000b2b7:	83 ec 08             	sub    esp,0x8
c000b2ba:	6a 01                	push   0x1
c000b2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2c0:	e8 5b fe ff ff       	call   c000b120 <tcp_abandon>
c000b2c5:	83 c4 10             	add    esp,0x10
c000b2c8:	90                   	nop
c000b2c9:	83 c4 0c             	add    esp,0xc
c000b2cc:	c3                   	ret    
c000b2cd:	8d 76 00             	lea    esi,[esi+0x0]

c000b2d0 <tcp_kill_prio>:
c000b2d0:	83 ec 2c             	sub    esp,0x2c
c000b2d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b2db:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b2e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b2f0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b2f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2f9:	eb 75                	jmp    c000b370 <tcp_kill_prio+0xa0>
c000b2fb:	90                   	nop
c000b2fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b300:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b303:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b308:	0f b6 c0             	movzx  eax,al
c000b30b:	39 c2                	cmp    edx,eax
c000b30d:	72 55                	jb     c000b364 <tcp_kill_prio+0x94>
c000b30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b313:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b316:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b31b:	0f b6 c0             	movzx  eax,al
c000b31e:	39 c2                	cmp    edx,eax
c000b320:	72 42                	jb     c000b364 <tcp_kill_prio+0x94>
c000b322:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b328:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b32c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b32f:	29 c2                	sub    edx,eax
c000b331:	89 d0                	mov    eax,edx
c000b333:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b337:	77 2b                	ja     c000b364 <tcp_kill_prio+0x94>
c000b339:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b33f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b343:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b346:	29 c2                	sub    edx,eax
c000b348:	89 d0                	mov    eax,edx
c000b34a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b34e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b352:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b35a:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b35d:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b361:	8d 76 00             	lea    esi,[esi+0x0]
c000b364:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b368:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b36b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b36f:	90                   	nop
c000b370:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b375:	75 85                	jne    c000b2fc <tcp_kill_prio+0x2c>
c000b377:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b37c:	74 12                	je     c000b390 <tcp_kill_prio+0xc0>
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b385:	e8 2a ff ff ff       	call   c000b2b4 <tcp_abort>
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	8d 76 00             	lea    esi,[esi+0x0]
c000b390:	90                   	nop
c000b391:	83 c4 2c             	add    esp,0x2c
c000b394:	c3                   	ret    
c000b395:	8d 76 00             	lea    esi,[esi+0x0]

c000b398 <tcp_kill_timewait>:
c000b398:	83 ec 1c             	sub    esp,0x1c
c000b39b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b3a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b3ab:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b3b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3b4:	eb 42                	jmp    c000b3f8 <tcp_kill_timewait+0x60>
c000b3b6:	66 90                	xchg   ax,ax
c000b3b8:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b3be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3c2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3c5:	29 c2                	sub    edx,eax
c000b3c7:	89 d0                	mov    eax,edx
c000b3c9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b3cd:	77 1d                	ja     c000b3ec <tcp_kill_timewait+0x54>
c000b3cf:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b3d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3d9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b3dc:	29 c2                	sub    edx,eax
c000b3de:	89 d0                	mov    eax,edx
c000b3e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b3f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b3f7:	90                   	nop
c000b3f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b3fd:	75 b9                	jne    c000b3b8 <tcp_kill_timewait+0x20>
c000b3ff:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b404:	74 12                	je     c000b418 <tcp_kill_timewait+0x80>
c000b406:	83 ec 0c             	sub    esp,0xc
c000b409:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40d:	e8 a2 fe ff ff       	call   c000b2b4 <tcp_abort>
c000b412:	83 c4 10             	add    esp,0x10
c000b415:	8d 76 00             	lea    esi,[esi+0x0]
c000b418:	90                   	nop
c000b419:	83 c4 1c             	add    esp,0x1c
c000b41c:	c3                   	ret    
c000b41d:	8d 76 00             	lea    esi,[esi+0x0]

c000b420 <tcp_next_iss>:
c000b420:	8b 15 7c 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c7c
c000b426:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b42b:	01 d0                	add    eax,edx
c000b42d:	a3 7c 3c 03 c0       	mov    ds:0xc0033c7c,eax
c000b432:	a1 7c 3c 03 c0       	mov    eax,ds:0xc0033c7c
c000b437:	c3                   	ret    

c000b438 <tcp_alloc>:
c000b438:	83 ec 2c             	sub    esp,0x2c
c000b43b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b43f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	6a 02                	push   0x2
c000b448:	e8 4f c5 ff ff       	call   c000799c <memp_malloc>
c000b44d:	83 c4 10             	add    esp,0x10
c000b450:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b454:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b459:	75 6d                	jne    c000b4c8 <tcp_alloc+0x90>
c000b45b:	e8 38 ff ff ff       	call   c000b398 <tcp_kill_timewait>
c000b460:	83 ec 0c             	sub    esp,0xc
c000b463:	6a 02                	push   0x2
c000b465:	e8 32 c5 ff ff       	call   c000799c <memp_malloc>
c000b46a:	83 c4 10             	add    esp,0x10
c000b46d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b471:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b476:	75 38                	jne    c000b4b0 <tcp_alloc+0x78>
c000b478:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b47d:	83 ec 0c             	sub    esp,0xc
c000b480:	50                   	push   eax
c000b481:	e8 4a fe ff ff       	call   c000b2d0 <tcp_kill_prio>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	83 ec 0c             	sub    esp,0xc
c000b48c:	6a 02                	push   0x2
c000b48e:	e8 09 c5 ff ff       	call   c000799c <memp_malloc>
c000b493:	83 c4 10             	add    esp,0x10
c000b496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b49a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b49f:	74 0f                	je     c000b4b0 <tcp_alloc+0x78>
c000b4a1:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b4a7:	83 e8 01             	sub    eax,0x1
c000b4aa:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b4b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4b5:	74 11                	je     c000b4c8 <tcp_alloc+0x90>
c000b4b7:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b4bd:	83 e8 01             	sub    eax,0x1
c000b4c0:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b4c6:	66 90                	xchg   ax,ax
c000b4c8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b4cd:	0f 84 09 01 00 00    	je     c000b5dc <tcp_alloc+0x1a4>
c000b4d3:	83 ec 04             	sub    esp,0x4
c000b4d6:	68 a8 00 00 00       	push   0xa8
c000b4db:	6a 00                	push   0x0
c000b4dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b4e1:	e8 0a 50 ff ff       	call   c00004f0 <memset>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ed:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b4f1:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b4f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f8:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b502:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b50c:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b512:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b516:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b51c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b520:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b524:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b528:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b52c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b530:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b536:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b53a:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b540:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b544:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b54a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b54e:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b554:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b558:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b55e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b562:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b568:	e8 b3 fe ff ff       	call   c000b420 <tcp_next_iss>
c000b56d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b571:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b575:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b579:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b57c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b580:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b584:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b58b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b58f:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b592:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b596:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b59a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b59d:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b5a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b5aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5ae:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b5b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5b6:	c7 80 8c 00 00 00 bc ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000aebc
c000b5c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5c4:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b5ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5d2:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b5dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5e0:	83 c4 2c             	add    esp,0x2c
c000b5e3:	c3                   	ret    

c000b5e4 <tcp_new>:
c000b5e4:	83 ec 0c             	sub    esp,0xc
c000b5e7:	83 ec 0c             	sub    esp,0xc
c000b5ea:	6a 40                	push   0x40
c000b5ec:	e8 47 fe ff ff       	call   c000b438 <tcp_alloc>
c000b5f1:	83 c4 10             	add    esp,0x10
c000b5f4:	83 c4 0c             	add    esp,0xc
c000b5f7:	c3                   	ret    

c000b5f8 <tcp_eff_send_mss>:
c000b5f8:	53                   	push   ebx
c000b5f9:	83 ec 28             	sub    esp,0x28
c000b5fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b600:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b605:	83 ec 0c             	sub    esp,0xc
c000b608:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b60c:	e8 bf 80 00 00       	call   c00136d0 <ip_route>
c000b611:	83 c4 10             	add    esp,0x10
c000b614:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b618:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b61d:	74 3d                	je     c000b65c <tcp_eff_send_mss+0x64>
c000b61f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b623:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b626:	0f b7 c0             	movzx  eax,ax
c000b629:	85 c0                	test   eax,eax
c000b62b:	74 2f                	je     c000b65c <tcp_eff_send_mss+0x64>
c000b62d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b631:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b634:	83 e8 28             	sub    eax,0x28
c000b637:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b63c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b640:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b645:	0f b7 d8             	movzx  ebx,ax
c000b648:	0f b7 ca             	movzx  ecx,dx
c000b64b:	39 cb                	cmp    ebx,ecx
c000b64d:	76 05                	jbe    c000b654 <tcp_eff_send_mss+0x5c>
c000b64f:	89 d0                	mov    eax,edx
c000b651:	8d 76 00             	lea    esi,[esi+0x0]
c000b654:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b659:	8d 76 00             	lea    esi,[esi+0x0]
c000b65c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b660:	83 c4 28             	add    esp,0x28
c000b663:	5b                   	pop    ebx
c000b664:	c3                   	ret    
c000b665:	8d 76 00             	lea    esi,[esi+0x0]

c000b668 <tcp_connect>:
c000b668:	83 ec 2c             	sub    esp,0x2c
c000b66b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b66f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b678:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b67b:	85 c0                	test   eax,eax
c000b67d:	74 1d                	je     c000b69c <tcp_connect+0x34>
c000b67f:	83 ec 08             	sub    esp,0x8
c000b682:	68 64 03 03 c0       	push   0xc0030364
c000b687:	68 c6 fb 02 c0       	push   0xc002fbc6
c000b68c:	e8 07 45 01 00       	call   c001fb98 <CPrintf>
c000b691:	83 c4 10             	add    esp,0x10
c000b694:	b0 f7                	mov    al,0xf7
c000b696:	e9 41 02 00 00       	jmp    c000b8dc <tcp_connect+0x274>
c000b69b:	90                   	nop
c000b69c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b6a1:	74 25                	je     c000b6c8 <tcp_connect+0x60>
c000b6a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b6ab:	8b 12                	mov    edx,DWORD PTR [edx]
c000b6ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b6b8:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b6bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6c0:	85 c0                	test   eax,eax
c000b6c2:	74 18                	je     c000b6dc <tcp_connect+0x74>
c000b6c4:	eb 0a                	jmp    c000b6d0 <tcp_connect+0x68>
c000b6c6:	66 90                	xchg   ax,ax
c000b6c8:	b0 fa                	mov    al,0xfa
c000b6ca:	e9 0d 02 00 00       	jmp    c000b8dc <tcp_connect+0x274>
c000b6cf:	90                   	nop
c000b6d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6d6:	85 c0                	test   eax,eax
c000b6d8:	75 3a                	jne    c000b714 <tcp_connect+0xac>
c000b6da:	66 90                	xchg   ax,ax
c000b6dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e0:	83 c0 04             	add    eax,0x4
c000b6e3:	83 ec 0c             	sub    esp,0xc
c000b6e6:	50                   	push   eax
c000b6e7:	e8 e4 7f 00 00       	call   c00136d0 <ip_route>
c000b6ec:	83 c4 10             	add    esp,0x10
c000b6ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6f3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b6f8:	75 0a                	jne    c000b704 <tcp_connect+0x9c>
c000b6fa:	b0 fc                	mov    al,0xfc
c000b6fc:	e9 db 01 00 00       	jmp    c000b8dc <tcp_connect+0x274>
c000b701:	8d 76 00             	lea    esi,[esi+0x0]
c000b704:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b708:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b70b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b70f:	89 10                	mov    DWORD PTR [eax],edx
c000b711:	8d 76 00             	lea    esi,[esi+0x0]
c000b714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b718:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b71b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b724:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b727:	0f b7 c0             	movzx  eax,ax
c000b72a:	85 c0                	test   eax,eax
c000b72c:	75 12                	jne    c000b740 <tcp_connect+0xd8>
c000b72e:	e8 21 e7 ff ff       	call   c0009e54 <tcp_new_port>
c000b733:	89 c2                	mov    edx,eax
c000b735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b739:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b73d:	8d 76 00             	lea    esi,[esi+0x0]
c000b740:	e8 db fc ff ff       	call   c000b420 <tcp_next_iss>
c000b745:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b74d:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b754:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b758:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b75c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b75f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b763:	8d 50 ff             	lea    edx,[eax-0x1]
c000b766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b76a:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b76d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b771:	8d 50 ff             	lea    edx,[eax-0x1]
c000b774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b778:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b77b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b77f:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b789:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b78f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b793:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b79d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7a1:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b7a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ab:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b7b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7b5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7b8:	0f b7 c0             	movzx  eax,ax
c000b7bb:	83 ec 08             	sub    esp,0x8
c000b7be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7c2:	50                   	push   eax
c000b7c3:	e8 30 fe ff ff       	call   c000b5f8 <tcp_eff_send_mss>
c000b7c8:	83 c4 10             	add    esp,0x10
c000b7cb:	89 c2                	mov    edx,eax
c000b7cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d1:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b7d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7d9:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b7df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7e6:	89 c2                	mov    edx,eax
c000b7e8:	c1 e2 02             	shl    edx,0x2
c000b7eb:	01 d0                	add    eax,edx
c000b7ed:	d1 e0                	shl    eax,1
c000b7ef:	89 c2                	mov    edx,eax
c000b7f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7f5:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7fd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b801:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b807:	83 ec 08             	sub    esp,0x8
c000b80a:	6a 02                	push   0x2
c000b80c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b810:	e8 73 40 00 00       	call   c000f888 <tcp_enqueue_flags>
c000b815:	83 c4 10             	add    esp,0x10
c000b818:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b81c:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 85 af 00 00 00    	jne    c000b8d8 <tcp_connect+0x270>
c000b829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b82d:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b834:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b839:	85 c0                	test   eax,eax
c000b83b:	74 6f                	je     c000b8ac <tcp_connect+0x244>
c000b83d:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b842:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b846:	75 10                	jne    c000b858 <tcp_connect+0x1f0>
c000b848:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b84d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b850:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b855:	eb 49                	jmp    c000b8a0 <tcp_connect+0x238>
c000b857:	90                   	nop
c000b858:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b85d:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b862:	eb 30                	jmp    c000b894 <tcp_connect+0x22c>
c000b864:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b86c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b870:	75 12                	jne    c000b884 <tcp_connect+0x21c>
c000b872:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b877:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b87b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b87e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b881:	eb 1d                	jmp    c000b8a0 <tcp_connect+0x238>
c000b883:	90                   	nop
c000b884:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b889:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b88c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b891:	8d 76 00             	lea    esi,[esi+0x0]
c000b894:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b899:	85 c0                	test   eax,eax
c000b89b:	75 c7                	jne    c000b864 <tcp_connect+0x1fc>
c000b89d:	8d 76 00             	lea    esi,[esi+0x0]
c000b8a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8a4:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b8ab:	90                   	nop
c000b8ac:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b8b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b8b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b8bd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b8c2:	e8 09 53 00 00       	call   c0010bd0 <tcp_timer_needed>
c000b8c7:	83 ec 0c             	sub    esp,0xc
c000b8ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b8ce:	e8 55 46 00 00       	call   c000ff28 <tcp_output>
c000b8d3:	83 c4 10             	add    esp,0x10
c000b8d6:	66 90                	xchg   ax,ax
c000b8d8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b8dc:	83 c4 2c             	add    esp,0x2c
c000b8df:	c3                   	ret    

c000b8e0 <tcp_debug_state_str>:
c000b8e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8e4:	8b 04 85 e0 04 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfb20]
c000b8eb:	c3                   	ret    

c000b8ec <tcp_timewait_input>:
c000b8ec:	53                   	push   ebx
c000b8ed:	83 ec 08             	sub    esp,0x8
c000b8f0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8f5:	0f b6 c0             	movzx  eax,al
c000b8f8:	83 e0 04             	and    eax,0x4
c000b8fb:	74 07                	je     c000b904 <tcp_timewait_input+0x18>
c000b8fd:	b0 00                	mov    al,0x0
c000b8ff:	e9 e8 00 00 00       	jmp    c000b9ec <tcp_timewait_input+0x100>
c000b904:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b909:	0f b6 c0             	movzx  eax,al
c000b90c:	83 e0 02             	and    eax,0x2
c000b90f:	0f 84 83 00 00 00    	je     c000b998 <tcp_timewait_input+0xac>
c000b915:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b91b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b922:	29 c2                	sub    edx,eax
c000b924:	89 d0                	mov    eax,edx
c000b926:	0f 88 88 00 00 00    	js     c000b9b4 <tcp_timewait_input+0xc8>
c000b92c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b936:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b93d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b940:	0f b7 c0             	movzx  eax,ax
c000b943:	01 c8                	add    eax,ecx
c000b945:	29 c2                	sub    edx,eax
c000b947:	89 d0                	mov    eax,edx
c000b949:	85 c0                	test   eax,eax
c000b94b:	7f 67                	jg     c000b9b4 <tcp_timewait_input+0xc8>
c000b94d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b952:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b955:	0f b7 c8             	movzx  ecx,ax
c000b958:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b95d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b961:	0f b7 d0             	movzx  edx,ax
c000b964:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b96a:	0f b7 d8             	movzx  ebx,ax
c000b96d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b972:	01 c3                	add    ebx,eax
c000b974:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b979:	83 ec 08             	sub    esp,0x8
c000b97c:	51                   	push   ecx
c000b97d:	52                   	push   edx
c000b97e:	68 90 68 03 c0       	push   0xc0036890
c000b983:	68 98 68 03 c0       	push   0xc0036898
c000b988:	53                   	push   ebx
c000b989:	50                   	push   eax
c000b98a:	e8 25 4a 00 00       	call   c00103b4 <tcp_rst>
c000b98f:	83 c4 20             	add    esp,0x20
c000b992:	b0 00                	mov    al,0x0
c000b994:	eb 56                	jmp    c000b9ec <tcp_timewait_input+0x100>
c000b996:	66 90                	xchg   ax,ax
c000b998:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b99d:	0f b6 c0             	movzx  eax,al
c000b9a0:	83 e0 01             	and    eax,0x1
c000b9a3:	74 0f                	je     c000b9b4 <tcp_timewait_input+0xc8>
c000b9a5:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b9b2:	66 90                	xchg   ax,ax
c000b9b4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b9ba:	0f b7 c0             	movzx  eax,ax
c000b9bd:	85 c0                	test   eax,eax
c000b9bf:	74 27                	je     c000b9e8 <tcp_timewait_input+0xfc>
c000b9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b9c8:	83 c8 02             	or     eax,0x2
c000b9cb:	88 c2                	mov    dl,al
c000b9cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9d1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b9d4:	83 ec 0c             	sub    esp,0xc
c000b9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9db:	e8 48 45 00 00       	call   c000ff28 <tcp_output>
c000b9e0:	83 c4 10             	add    esp,0x10
c000b9e3:	eb 07                	jmp    c000b9ec <tcp_timewait_input+0x100>
c000b9e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9e8:	b0 00                	mov    al,0x0
c000b9ea:	66 90                	xchg   ax,ax
c000b9ec:	83 c4 08             	add    esp,0x8
c000b9ef:	5b                   	pop    ebx
c000b9f0:	c3                   	ret    
c000b9f1:	8d 76 00             	lea    esi,[esi+0x0]

c000b9f4 <tcp_oos_insert_segment>:
c000b9f4:	53                   	push   ebx
c000b9f5:	83 ec 18             	sub    esp,0x18
c000b9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9ff:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba03:	0f b7 c0             	movzx  eax,ax
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	50                   	push   eax
c000ba0a:	e8 0d 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	0f b7 c0             	movzx  eax,ax
c000ba15:	83 e0 01             	and    eax,0x1
c000ba18:	0f 84 8e 00 00 00    	je     c000baac <tcp_oos_insert_segment+0xb8>
c000ba1e:	83 ec 0c             	sub    esp,0xc
c000ba21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ba25:	e8 2e e6 ff ff       	call   c000a058 <tcp_segs_free>
c000ba2a:	83 c4 10             	add    esp,0x10
c000ba2d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000ba35:	e9 1a 01 00 00       	jmp    c000bb54 <tcp_oos_insert_segment+0x160>
c000ba3a:	66 90                	xchg   ax,ax
c000ba3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba40:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba43:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ba47:	0f b7 c0             	movzx  eax,ax
c000ba4a:	83 ec 0c             	sub    esp,0xc
c000ba4d:	50                   	push   eax
c000ba4e:	e8 c9 51 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	0f b7 c0             	movzx  eax,ax
c000ba59:	83 e0 01             	and    eax,0x1
c000ba5c:	74 2a                	je     c000ba88 <tcp_oos_insert_segment+0x94>
c000ba5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba62:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba65:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ba69:	83 ec 0c             	sub    esp,0xc
c000ba6c:	6a 01                	push   0x1
c000ba6e:	e8 a9 51 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	89 c2                	mov    edx,eax
c000ba78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba7c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba7f:	09 da                	or     edx,ebx
c000ba81:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000ba85:	8d 76 00             	lea    esi,[esi+0x0]
c000ba88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba90:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba94:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba9a:	83 ec 0c             	sub    esp,0xc
c000ba9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000baa1:	e8 6e e5 ff ff       	call   c000a014 <tcp_seg_free>
c000baa6:	83 c4 10             	add    esp,0x10
c000baa9:	8d 76 00             	lea    esi,[esi+0x0]
c000baac:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000bab1:	74 35                	je     c000bae8 <tcp_oos_insert_segment+0xf4>
c000bab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bab7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baba:	0f b7 d0             	movzx  edx,ax
c000babd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bac2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000bac5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bac9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bacc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bacf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bad3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bad6:	0f b7 c0             	movzx  eax,ax
c000bad9:	01 d0                	add    eax,edx
c000badb:	29 c1                	sub    ecx,eax
c000badd:	89 c8                	mov    eax,ecx
c000badf:	0f 89 57 ff ff ff    	jns    c000ba3c <tcp_oos_insert_segment+0x48>
c000bae5:	8d 76 00             	lea    esi,[esi+0x0]
c000bae8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000baed:	74 65                	je     c000bb54 <tcp_oos_insert_segment+0x160>
c000baef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000baf6:	0f b7 d0             	movzx  edx,ax
c000baf9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bafe:	01 c2                	add    edx,eax
c000bb00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb0a:	29 c2                	sub    edx,eax
c000bb0c:	89 d0                	mov    eax,edx
c000bb0e:	85 c0                	test   eax,eax
c000bb10:	7e 42                	jle    c000bb54 <tcp_oos_insert_segment+0x160>
c000bb12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bb16:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bb19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb1c:	89 c2                	mov    edx,eax
c000bb1e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb23:	89 d3                	mov    ebx,edx
c000bb25:	29 c3                	sub    ebx,eax
c000bb27:	89 d8                	mov    eax,ebx
c000bb29:	89 c2                	mov    edx,eax
c000bb2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000bb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bb3a:	0f b7 d0             	movzx  edx,ax
c000bb3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bb44:	83 ec 08             	sub    esp,0x8
c000bb47:	52                   	push   edx
c000bb48:	50                   	push   eax
c000bb49:	e8 0e ce ff ff       	call   c000895c <pbuf_realloc>
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	8d 76 00             	lea    esi,[esi+0x0]
c000bb54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bb5c:	89 10                	mov    DWORD PTR [eax],edx
c000bb5e:	90                   	nop
c000bb5f:	83 c4 18             	add    esp,0x18
c000bb62:	5b                   	pop    ebx
c000bb63:	c3                   	ret    

c000bb64 <tcp_receive>:
c000bb64:	57                   	push   edi
c000bb65:	56                   	push   esi
c000bb66:	53                   	push   ebx
c000bb67:	83 ec 30             	sub    esp,0x30
c000bb6a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb72:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bb77:	0f b6 c0             	movzx  eax,al
c000bb7a:	83 e0 10             	and    eax,0x10
c000bb7d:	0f 84 f5 07 00 00    	je     c000c378 <tcp_receive+0x814>
c000bb83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb87:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb8a:	0f b7 d0             	movzx  edx,ax
c000bb8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb91:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bb94:	01 d0                	add    eax,edx
c000bb96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb9e:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bba1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bba6:	29 c2                	sub    edx,eax
c000bba8:	89 d0                	mov    eax,edx
c000bbaa:	78 50                	js     c000bbfc <tcp_receive+0x98>
c000bbac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbb0:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bbb3:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bbb8:	39 c2                	cmp    edx,eax
c000bbba:	75 14                	jne    c000bbd0 <tcp_receive+0x6c>
c000bbbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbc0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bbc3:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbc8:	29 c2                	sub    edx,eax
c000bbca:	89 d0                	mov    eax,edx
c000bbcc:	78 2e                	js     c000bbfc <tcp_receive+0x98>
c000bbce:	66 90                	xchg   ax,ax
c000bbd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd4:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bbd7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbdc:	39 c2                	cmp    edx,eax
c000bbde:	75 74                	jne    c000bc54 <tcp_receive+0xf0>
c000bbe0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bbe5:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bbe9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbed:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbf0:	0f b7 d2             	movzx  edx,dx
c000bbf3:	0f b7 c0             	movzx  eax,ax
c000bbf6:	39 c2                	cmp    edx,eax
c000bbf8:	76 5a                	jbe    c000bc54 <tcp_receive+0xf0>
c000bbfa:	66 90                	xchg   ax,ax
c000bbfc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bc01:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bc05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc09:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bc0d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bc13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc17:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bc1a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc24:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bc27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2b:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc2e:	0f b7 c0             	movzx  eax,ax
c000bc31:	85 c0                	test   eax,eax
c000bc33:	74 1f                	je     c000bc54 <tcp_receive+0xf0>
c000bc35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc39:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bc3f:	0f b6 c0             	movzx  eax,al
c000bc42:	85 c0                	test   eax,eax
c000bc44:	74 0e                	je     c000bc54 <tcp_receive+0xf0>
c000bc46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4a:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bc51:	8d 76 00             	lea    esi,[esi+0x0]
c000bc54:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc5e:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc61:	29 c2                	sub    edx,eax
c000bc63:	89 d0                	mov    eax,edx
c000bc65:	85 c0                	test   eax,eax
c000bc67:	0f 8f 03 01 00 00    	jg     c000bd70 <tcp_receive+0x20c>
c000bc6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc71:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bc77:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bc7d:	0f b7 c0             	movzx  eax,ax
c000bc80:	85 c0                	test   eax,eax
c000bc82:	0f 85 d0 00 00 00    	jne    c000bd58 <tcp_receive+0x1f4>
c000bc88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc8c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bc8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc93:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bc96:	0f b7 c0             	movzx  eax,ax
c000bc99:	01 d0                	add    eax,edx
c000bc9b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bc9f:	0f 85 b3 00 00 00    	jne    c000bd58 <tcp_receive+0x1f4>
c000bca5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bca9:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bcad:	98                   	cwde   
c000bcae:	85 c0                	test   eax,eax
c000bcb0:	0f 88 a2 00 00 00    	js     c000bd58 <tcp_receive+0x1f4>
c000bcb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcba:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bcbd:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bcc2:	39 c2                	cmp    edx,eax
c000bcc4:	0f 85 8e 00 00 00    	jne    c000bd58 <tcp_receive+0x1f4>
c000bcca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bcd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd6:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcd9:	83 c0 01             	add    eax,0x1
c000bcdc:	88 c2                	mov    dl,al
c000bcde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce2:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bce5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce9:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bcec:	0f b6 c0             	movzx  eax,al
c000bcef:	83 f8 03             	cmp    eax,0x3
c000bcf2:	76 44                	jbe    c000bd38 <tcp_receive+0x1d4>
c000bcf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf8:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bcfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd03:	01 d0                	add    eax,edx
c000bd05:	89 c2                	mov    edx,eax
c000bd07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd0b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd0f:	0f b7 d2             	movzx  edx,dx
c000bd12:	0f b7 c0             	movzx  eax,ax
c000bd15:	39 c2                	cmp    edx,eax
c000bd17:	76 3f                	jbe    c000bd58 <tcp_receive+0x1f4>
c000bd19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd28:	01 d0                	add    eax,edx
c000bd2a:	89 c2                	mov    edx,eax
c000bd2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd30:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bd34:	eb 22                	jmp    c000bd58 <tcp_receive+0x1f4>
c000bd36:	66 90                	xchg   ax,ax
c000bd38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3c:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bd3f:	0f b6 c0             	movzx  eax,al
c000bd42:	83 f8 03             	cmp    eax,0x3
c000bd45:	75 11                	jne    c000bd58 <tcp_receive+0x1f4>
c000bd47:	83 ec 0c             	sub    esp,0xc
c000bd4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bd4e:	e8 35 49 00 00       	call   c0010688 <tcp_rexmit_fast>
c000bd53:	83 c4 10             	add    esp,0x10
c000bd56:	66 90                	xchg   ax,ax
c000bd58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bd5d:	0f 85 a1 04 00 00    	jne    c000c204 <tcp_receive+0x6a0>
c000bd63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd67:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd6b:	e9 94 04 00 00       	jmp    c000c204 <tcp_receive+0x6a0>
c000bd70:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd76:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7a:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd7d:	29 c2                	sub    edx,eax
c000bd7f:	89 d0                	mov    eax,edx
c000bd81:	83 e8 01             	sub    eax,0x1
c000bd84:	0f 88 52 03 00 00    	js     c000c0dc <tcp_receive+0x578>
c000bd8a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd94:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bd97:	29 c2                	sub    edx,eax
c000bd99:	89 d0                	mov    eax,edx
c000bd9b:	85 c0                	test   eax,eax
c000bd9d:	0f 8f 39 03 00 00    	jg     c000c0dc <tcp_receive+0x578>
c000bda3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bda7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bdaa:	0f b6 c0             	movzx  eax,al
c000bdad:	83 e0 04             	and    eax,0x4
c000bdb0:	74 22                	je     c000bdd4 <tcp_receive+0x270>
c000bdb2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bdb9:	83 e0 fb             	and    eax,0xfffffffb
c000bdbc:	88 c2                	mov    dl,al
c000bdbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc2:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bdc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc9:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bdcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd0:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bdd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd8:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bddc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bde0:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bde3:	98                   	cwde   
c000bde4:	c1 f8 03             	sar    eax,0x3
c000bde7:	89 c2                	mov    edx,eax
c000bde9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bded:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bdf1:	01 d0                	add    eax,edx
c000bdf3:	89 c2                	mov    edx,eax
c000bdf5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf9:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bdfd:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000be02:	89 c2                	mov    edx,eax
c000be04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be08:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000be0b:	89 d7                	mov    edi,edx
c000be0d:	29 c7                	sub    edi,eax
c000be0f:	89 f8                	mov    eax,edi
c000be11:	89 c2                	mov    edx,eax
c000be13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be17:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000be1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1f:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000be23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be27:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be2a:	01 d0                	add    eax,edx
c000be2c:	89 c2                	mov    edx,eax
c000be2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be32:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000be36:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be3a:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000be3e:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000be44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be48:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000be4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000be52:	83 f8 03             	cmp    eax,0x3
c000be55:	0f 86 dd 01 00 00    	jbe    c000c038 <tcp_receive+0x4d4>
c000be5b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be5f:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be67:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000be6a:	0f b7 d2             	movzx  edx,dx
c000be6d:	0f b7 c0             	movzx  eax,ax
c000be70:	39 c2                	cmp    edx,eax
c000be72:	73 4c                	jae    c000bec0 <tcp_receive+0x35c>
c000be74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be78:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000be7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be83:	01 d0                	add    eax,edx
c000be85:	89 c2                	mov    edx,eax
c000be87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be8f:	0f b7 d2             	movzx  edx,dx
c000be92:	0f b7 c0             	movzx  eax,ax
c000be95:	39 c2                	cmp    edx,eax
c000be97:	0f 86 9b 01 00 00    	jbe    c000c038 <tcp_receive+0x4d4>
c000be9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea1:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bea5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000beac:	01 d0                	add    eax,edx
c000beae:	89 c2                	mov    edx,eax
c000beb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000beb4:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000beb8:	e9 7b 01 00 00       	jmp    c000c038 <tcp_receive+0x4d4>
c000bebd:	8d 76 00             	lea    esi,[esi+0x0]
c000bec0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bec4:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000bec8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000becc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000becf:	0f b7 d0             	movzx  edx,ax
c000bed2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bed6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bed9:	0f b7 c0             	movzx  eax,ax
c000bedc:	0f af c2             	imul   eax,edx
c000bedf:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bee3:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000bee7:	0f b7 f2             	movzx  esi,dx
c000beea:	89 c2                	mov    edx,eax
c000beec:	c1 fa 1f             	sar    edx,0x1f
c000beef:	f7 fe                	idiv   esi
c000bef1:	01 c8                	add    eax,ecx
c000bef3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000bef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000befc:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bf00:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000bf05:	0f b7 c0             	movzx  eax,ax
c000bf08:	39 c2                	cmp    edx,eax
c000bf0a:	0f 86 28 01 00 00    	jbe    c000c038 <tcp_receive+0x4d4>
c000bf10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf14:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000bf19:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bf1d:	e9 16 01 00 00       	jmp    c000c038 <tcp_receive+0x4d4>
c000bf22:	66 90                	xchg   ax,ax
c000bf24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf28:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf2b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bf2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf33:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf36:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3c:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000bf3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf43:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000bf46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf4d:	83 ec 0c             	sub    esp,0xc
c000bf50:	50                   	push   eax
c000bf51:	e8 0e cc ff ff       	call   c0008b64 <pbuf_clen>
c000bf56:	83 c4 10             	add    esp,0x10
c000bf59:	0f b6 c0             	movzx  eax,al
c000bf5c:	0f b7 d3             	movzx  edx,bx
c000bf5f:	0f b7 c0             	movzx  eax,ax
c000bf62:	39 c2                	cmp    edx,eax
c000bf64:	73 16                	jae    c000bf7c <tcp_receive+0x418>
c000bf66:	83 ec 08             	sub    esp,0x8
c000bf69:	68 0c 05 03 c0       	push   0xc003050c
c000bf6e:	68 c6 fb 02 c0       	push   0xc002fbc6
c000bf73:	e8 20 3c 01 00       	call   c001fb98 <CPrintf>
c000bf78:	83 c4 10             	add    esp,0x10
c000bf7b:	90                   	nop
c000bf7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf80:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bf83:	0f b7 c0             	movzx  eax,ax
c000bf86:	85 c0                	test   eax,eax
c000bf88:	74 36                	je     c000bfc0 <tcp_receive+0x45c>
c000bf8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf91:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf95:	0f b7 c0             	movzx  eax,ax
c000bf98:	83 ec 0c             	sub    esp,0xc
c000bf9b:	50                   	push   eax
c000bf9c:	e8 7b 4c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bfa1:	83 c4 10             	add    esp,0x10
c000bfa4:	0f b7 c0             	movzx  eax,ax
c000bfa7:	83 e0 01             	and    eax,0x1
c000bfaa:	74 14                	je     c000bfc0 <tcp_receive+0x45c>
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bfb3:	83 e8 01             	sub    eax,0x1
c000bfb6:	89 c2                	mov    edx,eax
c000bfb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbc:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bfc0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bfc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfc7:	83 ec 0c             	sub    esp,0xc
c000bfca:	50                   	push   eax
c000bfcb:	e8 94 cb ff ff       	call   c0008b64 <pbuf_clen>
c000bfd0:	83 c4 10             	add    esp,0x10
c000bfd3:	88 c1                	mov    cl,al
c000bfd5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd9:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bfdc:	0f b6 c1             	movzx  eax,cl
c000bfdf:	89 d7                	mov    edi,edx
c000bfe1:	29 c7                	sub    edi,eax
c000bfe3:	89 f8                	mov    eax,edi
c000bfe5:	89 c2                	mov    edx,eax
c000bfe7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfeb:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000bfef:	83 ec 0c             	sub    esp,0xc
c000bff2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bff6:	e8 19 e0 ff ff       	call   c000a014 <tcp_seg_free>
c000bffb:	83 c4 10             	add    esp,0x10
c000bffe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c002:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c005:	0f b7 c0             	movzx  eax,ax
c000c008:	85 c0                	test   eax,eax
c000c00a:	74 2c                	je     c000c038 <tcp_receive+0x4d4>
c000c00c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c010:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c013:	85 c0                	test   eax,eax
c000c015:	75 21                	jne    c000c038 <tcp_receive+0x4d4>
c000c017:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c01b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c01e:	85 c0                	test   eax,eax
c000c020:	75 16                	jne    c000c038 <tcp_receive+0x4d4>
c000c022:	83 ec 08             	sub    esp,0x8
c000c025:	68 34 05 03 c0       	push   0xc0030534
c000c02a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c02f:	e8 64 3b 01 00       	call   c001fb98 <CPrintf>
c000c034:	83 c4 10             	add    esp,0x10
c000c037:	90                   	nop
c000c038:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c03c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c03f:	85 c0                	test   eax,eax
c000c041:	74 69                	je     c000c0ac <tcp_receive+0x548>
c000c043:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c047:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c04a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c04d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c050:	83 ec 0c             	sub    esp,0xc
c000c053:	50                   	push   eax
c000c054:	e8 e7 4b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c059:	83 c4 10             	add    esp,0x10
c000c05c:	89 c3                	mov    ebx,eax
c000c05e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c062:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c065:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c068:	0f b7 f0             	movzx  esi,ax
c000c06b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c06f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c072:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c075:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c079:	0f b7 c0             	movzx  eax,ax
c000c07c:	83 ec 0c             	sub    esp,0xc
c000c07f:	50                   	push   eax
c000c080:	e8 97 4b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	0f b7 c0             	movzx  eax,ax
c000c08b:	83 e0 03             	and    eax,0x3
c000c08e:	0f 95 c0             	setne  al
c000c091:	0f b6 c0             	movzx  eax,al
c000c094:	01 f0                	add    eax,esi
c000c096:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c099:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c09e:	29 c2                	sub    edx,eax
c000c0a0:	89 d0                	mov    eax,edx
c000c0a2:	85 c0                	test   eax,eax
c000c0a4:	0f 8e 7a fe ff ff    	jle    c000bf24 <tcp_receive+0x3c0>
c000c0aa:	66 90                	xchg   ax,ax
c000c0ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0b0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0b3:	85 c0                	test   eax,eax
c000c0b5:	75 0d                	jne    c000c0c4 <tcp_receive+0x560>
c000c0b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0bb:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c0c1:	eb 0d                	jmp    c000c0d0 <tcp_receive+0x56c>
c000c0c3:	90                   	nop
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c0ce:	66 90                	xchg   ax,ax
c000c0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0d4:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c0d8:	eb 0e                	jmp    c000c0e8 <tcp_receive+0x584>
c000c0da:	66 90                	xchg   ax,ax
c000c0dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0e0:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c0e6:	66 90                	xchg   ax,ax
c000c0e8:	e9 17 01 00 00       	jmp    c000c204 <tcp_receive+0x6a0>
c000c0ed:	8d 76 00             	lea    esi,[esi+0x0]
c000c0f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0f7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0fb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0ff:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c102:	8b 10                	mov    edx,DWORD PTR [eax]
c000c104:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c108:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c10b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10f:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	50                   	push   eax
c000c11d:	e8 42 ca ff ff       	call   c0008b64 <pbuf_clen>
c000c122:	83 c4 10             	add    esp,0x10
c000c125:	0f b6 c0             	movzx  eax,al
c000c128:	0f b7 d3             	movzx  edx,bx
c000c12b:	0f b7 c0             	movzx  eax,ax
c000c12e:	39 c2                	cmp    edx,eax
c000c130:	73 16                	jae    c000c148 <tcp_receive+0x5e4>
c000c132:	83 ec 08             	sub    esp,0x8
c000c135:	68 0c 05 03 c0       	push   0xc003050c
c000c13a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c13f:	e8 54 3a 01 00       	call   c001fb98 <CPrintf>
c000c144:	83 c4 10             	add    esp,0x10
c000c147:	90                   	nop
c000c148:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c14c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c14f:	0f b7 c0             	movzx  eax,ax
c000c152:	85 c0                	test   eax,eax
c000c154:	74 36                	je     c000c18c <tcp_receive+0x628>
c000c156:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c15a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c15d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c161:	0f b7 c0             	movzx  eax,ax
c000c164:	83 ec 0c             	sub    esp,0xc
c000c167:	50                   	push   eax
c000c168:	e8 af 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c16d:	83 c4 10             	add    esp,0x10
c000c170:	0f b7 c0             	movzx  eax,ax
c000c173:	83 e0 01             	and    eax,0x1
c000c176:	74 14                	je     c000c18c <tcp_receive+0x628>
c000c178:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c17c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c17f:	83 e8 01             	sub    eax,0x1
c000c182:	89 c2                	mov    edx,eax
c000c184:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c188:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c18c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c190:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c193:	83 ec 0c             	sub    esp,0xc
c000c196:	50                   	push   eax
c000c197:	e8 c8 c9 ff ff       	call   c0008b64 <pbuf_clen>
c000c19c:	83 c4 10             	add    esp,0x10
c000c19f:	88 c1                	mov    cl,al
c000c1a1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1a5:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c1a8:	0f b6 c1             	movzx  eax,cl
c000c1ab:	89 d6                	mov    esi,edx
c000c1ad:	29 c6                	sub    esi,eax
c000c1af:	89 f0                	mov    eax,esi
c000c1b1:	89 c2                	mov    edx,eax
c000c1b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b7:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c1bb:	83 ec 0c             	sub    esp,0xc
c000c1be:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c1c2:	e8 4d de ff ff       	call   c000a014 <tcp_seg_free>
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1ce:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c1d1:	0f b7 c0             	movzx  eax,ax
c000c1d4:	85 c0                	test   eax,eax
c000c1d6:	74 2c                	je     c000c204 <tcp_receive+0x6a0>
c000c1d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1dc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c1df:	85 c0                	test   eax,eax
c000c1e1:	75 21                	jne    c000c204 <tcp_receive+0x6a0>
c000c1e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1e7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c1ea:	85 c0                	test   eax,eax
c000c1ec:	75 16                	jne    c000c204 <tcp_receive+0x6a0>
c000c1ee:	83 ec 08             	sub    esp,0x8
c000c1f1:	68 34 05 03 c0       	push   0xc0030534
c000c1f6:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c1fb:	e8 98 39 01 00       	call   c001fb98 <CPrintf>
c000c200:	83 c4 10             	add    esp,0x10
c000c203:	90                   	nop
c000c204:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c208:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c20b:	85 c0                	test   eax,eax
c000c20d:	74 7d                	je     c000c28c <tcp_receive+0x728>
c000c20f:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c215:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c219:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c21c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c21f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c222:	83 ec 0c             	sub    esp,0xc
c000c225:	50                   	push   eax
c000c226:	e8 15 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c22b:	83 c4 10             	add    esp,0x10
c000c22e:	89 c6                	mov    esi,eax
c000c230:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c234:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c237:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c23a:	0f b7 f8             	movzx  edi,ax
c000c23d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c241:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c244:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c247:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c24b:	0f b7 c0             	movzx  eax,ax
c000c24e:	83 ec 0c             	sub    esp,0xc
c000c251:	50                   	push   eax
c000c252:	e8 c5 49 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c257:	83 c4 10             	add    esp,0x10
c000c25a:	0f b7 c0             	movzx  eax,ax
c000c25d:	83 e0 03             	and    eax,0x3
c000c260:	0f 95 c0             	setne  al
c000c263:	0f b6 c0             	movzx  eax,al
c000c266:	01 f8                	add    eax,edi
c000c268:	01 f0                	add    eax,esi
c000c26a:	29 c3                	sub    ebx,eax
c000c26c:	89 d8                	mov    eax,ebx
c000c26e:	78 1c                	js     c000c28c <tcp_receive+0x728>
c000c270:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c276:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c27a:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c27d:	29 c2                	sub    edx,eax
c000c27f:	89 d0                	mov    eax,edx
c000c281:	85 c0                	test   eax,eax
c000c283:	0f 8e 67 fe ff ff    	jle    c000c0f0 <tcp_receive+0x58c>
c000c289:	8d 76 00             	lea    esi,[esi+0x0]
c000c28c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c290:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c293:	85 c0                	test   eax,eax
c000c295:	0f 84 dd 00 00 00    	je     c000c378 <tcp_receive+0x814>
c000c29b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29f:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c2a2:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c2a7:	29 c2                	sub    edx,eax
c000c2a9:	89 d0                	mov    eax,edx
c000c2ab:	0f 89 c7 00 00 00    	jns    c000c378 <tcp_receive+0x814>
c000c2b1:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c2b6:	89 c2                	mov    edx,eax
c000c2b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c2bf:	89 d7                	mov    edi,edx
c000c2c1:	29 c7                	sub    edi,eax
c000c2c3:	89 f8                	mov    eax,edi
c000c2c5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2ca:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c2cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d3:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c2d6:	98                   	cwde   
c000c2d7:	c1 f8 03             	sar    eax,0x3
c000c2da:	89 d6                	mov    esi,edx
c000c2dc:	29 c6                	sub    esi,eax
c000c2de:	89 f0                	mov    eax,esi
c000c2e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c2e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2e9:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c2ec:	89 c2                	mov    edx,eax
c000c2ee:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c2f3:	01 d0                	add    eax,edx
c000c2f5:	89 c2                	mov    edx,eax
c000c2f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2fb:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c2ff:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c304:	85 c0                	test   eax,eax
c000c306:	79 0c                	jns    c000c314 <tcp_receive+0x7b0>
c000c308:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c30d:	f7 d8                	neg    eax
c000c30f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c314:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c31d:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c321:	98                   	cwde   
c000c322:	c1 f8 02             	sar    eax,0x2
c000c325:	89 d7                	mov    edi,edx
c000c327:	29 c7                	sub    edi,eax
c000c329:	89 f8                	mov    eax,edi
c000c32b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c330:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c334:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c338:	89 c2                	mov    edx,eax
c000c33a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c33f:	01 d0                	add    eax,edx
c000c341:	89 c2                	mov    edx,eax
c000c343:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c347:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c34b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c34f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c352:	98                   	cwde   
c000c353:	c1 f8 03             	sar    eax,0x3
c000c356:	89 c2                	mov    edx,eax
c000c358:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c35c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c360:	01 d0                	add    eax,edx
c000c362:	89 c2                	mov    edx,eax
c000c364:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c368:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c36c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c370:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c377:	90                   	nop
c000c378:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c37e:	0f b7 c0             	movzx  eax,ax
c000c381:	85 c0                	test   eax,eax
c000c383:	0f 84 43 0e 00 00    	je     c000d1cc <tcp_receive+0x1668>
c000c389:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c38d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c390:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c395:	29 c2                	sub    edx,eax
c000c397:	89 d0                	mov    eax,edx
c000c399:	83 e8 01             	sub    eax,0x1
c000c39c:	0f 88 c6 01 00 00    	js     c000c568 <tcp_receive+0xa04>
c000c3a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3a6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c3a9:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c3b0:	0f b7 ca             	movzx  ecx,dx
c000c3b3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c3b9:	01 ca                	add    edx,ecx
c000c3bb:	29 d0                	sub    eax,edx
c000c3bd:	83 c0 01             	add    eax,0x1
c000c3c0:	85 c0                	test   eax,eax
c000c3c2:	0f 8f a0 01 00 00    	jg     c000c568 <tcp_receive+0xa04>
c000c3c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c3cc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c3cf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c3d4:	29 c2                	sub    edx,eax
c000c3d6:	89 d0                	mov    eax,edx
c000c3d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3dc:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3e1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3e5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3ea:	85 c0                	test   eax,eax
c000c3ec:	75 16                	jne    c000c404 <tcp_receive+0x8a0>
c000c3ee:	83 ec 08             	sub    esp,0x8
c000c3f1:	68 31 07 03 c0       	push   0xc0030731
c000c3f6:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c3fb:	e8 98 37 01 00       	call   c001fb98 <CPrintf>
c000c400:	83 c4 10             	add    esp,0x10
c000c403:	90                   	nop
c000c404:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c40c:	7e 16                	jle    c000c424 <tcp_receive+0x8c0>
c000c40e:	83 ec 08             	sub    esp,0x8
c000c411:	68 41 07 03 c0       	push   0xc0030741
c000c416:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c41b:	e8 78 37 01 00       	call   c001fb98 <CPrintf>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	90                   	nop
c000c424:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c429:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c42d:	0f b7 c0             	movzx  eax,ax
c000c430:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c434:	0f 8e b6 00 00 00    	jle    c000c4f0 <tcp_receive+0x98c>
c000c43a:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c43f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c442:	0f b7 c0             	movzx  eax,ax
c000c445:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c449:	7e 15                	jle    c000c460 <tcp_receive+0x8fc>
c000c44b:	83 ec 08             	sub    esp,0x8
c000c44e:	68 50 07 03 c0       	push   0xc0030750
c000c453:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c458:	e8 3b 37 01 00       	call   c001fb98 <CPrintf>
c000c45d:	83 c4 10             	add    esp,0x10
c000c460:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c465:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c468:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c46c:	29 d0                	sub    eax,edx
c000c46e:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c473:	eb 33                	jmp    c000c4a8 <tcp_receive+0x944>
c000c475:	8d 76 00             	lea    esi,[esi+0x0]
c000c478:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c47c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c480:	0f b7 c0             	movzx  eax,ax
c000c483:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c487:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c48b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c48f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c493:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c497:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c49d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c4a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4a3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c4a7:	90                   	nop
c000c4a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c4ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c4b0:	0f b7 c0             	movzx  eax,ax
c000c4b3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c4b7:	7f bf                	jg     c000c478 <tcp_receive+0x914>
c000c4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4bd:	f7 d8                	neg    eax
c000c4bf:	98                   	cwde   
c000c4c0:	83 ec 08             	sub    esp,0x8
c000c4c3:	50                   	push   eax
c000c4c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c4c8:	e8 1b bd ff ff       	call   c00081e8 <pbuf_header>
c000c4cd:	83 c4 10             	add    esp,0x10
c000c4d0:	0f b6 c0             	movzx  eax,al
c000c4d3:	85 c0                	test   eax,eax
c000c4d5:	74 51                	je     c000c528 <tcp_receive+0x9c4>
c000c4d7:	83 ec 08             	sub    esp,0x8
c000c4da:	68 60 07 03 c0       	push   0xc0030760
c000c4df:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c4e4:	e8 af 36 01 00       	call   c001fb98 <CPrintf>
c000c4e9:	83 c4 10             	add    esp,0x10
c000c4ec:	eb 3a                	jmp    c000c528 <tcp_receive+0x9c4>
c000c4ee:	66 90                	xchg   ax,ax
c000c4f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c4f4:	f7 d8                	neg    eax
c000c4f6:	0f bf d0             	movsx  edx,ax
c000c4f9:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c4fe:	83 ec 08             	sub    esp,0x8
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	e8 e0 bc ff ff       	call   c00081e8 <pbuf_header>
c000c508:	83 c4 10             	add    esp,0x10
c000c50b:	0f b6 c0             	movzx  eax,al
c000c50e:	85 c0                	test   eax,eax
c000c510:	74 16                	je     c000c528 <tcp_receive+0x9c4>
c000c512:	83 ec 08             	sub    esp,0x8
c000c515:	68 60 07 03 c0       	push   0xc0030760
c000c51a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c51f:	e8 74 36 01 00       	call   c001fb98 <CPrintf>
c000c524:	83 c4 10             	add    esp,0x10
c000c527:	90                   	nop
c000c528:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c52e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c533:	89 c1                	mov    ecx,eax
c000c535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c539:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c53c:	89 ce                	mov    esi,ecx
c000c53e:	29 c6                	sub    esi,eax
c000c540:	89 f0                	mov    eax,esi
c000c542:	01 d0                	add    eax,edx
c000c544:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c54a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c54e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c551:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c556:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c55b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c561:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c564:	eb 2a                	jmp    c000c590 <tcp_receive+0xa2c>
c000c566:	66 90                	xchg   ax,ax
c000c568:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c56e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c572:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c575:	29 c2                	sub    edx,eax
c000c577:	89 d0                	mov    eax,edx
c000c579:	79 15                	jns    c000c590 <tcp_receive+0xa2c>
c000c57b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c57f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c582:	83 c8 02             	or     eax,0x2
c000c585:	88 c2                	mov    dl,al
c000c587:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c58b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c58e:	66 90                	xchg   ax,ax
c000c590:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c596:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c59a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c59d:	29 c2                	sub    edx,eax
c000c59f:	89 d0                	mov    eax,edx
c000c5a1:	0f 88 11 0c 00 00    	js     c000d1b8 <tcp_receive+0x1654>
c000c5a7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c5ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5b1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c5b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5b8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c5bb:	0f b7 c0             	movzx  eax,ax
c000c5be:	01 c8                	add    eax,ecx
c000c5c0:	29 c2                	sub    edx,eax
c000c5c2:	89 d0                	mov    eax,edx
c000c5c4:	83 c0 01             	add    eax,0x1
c000c5c7:	85 c0                	test   eax,eax
c000c5c9:	0f 8f e9 0b 00 00    	jg     c000d1b8 <tcp_receive+0x1654>
c000c5cf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5d3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c5d6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c5db:	39 c2                	cmp    edx,eax
c000c5dd:	0f 85 25 07 00 00    	jne    c000cd08 <tcp_receive+0x11a4>
c000c5e3:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c5e9:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5ee:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5f2:	0f b7 c0             	movzx  eax,ax
c000c5f5:	83 ec 0c             	sub    esp,0xc
c000c5f8:	50                   	push   eax
c000c5f9:	e8 1e 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5fe:	83 c4 10             	add    esp,0x10
c000c601:	0f b7 c0             	movzx  eax,ax
c000c604:	83 e0 03             	and    eax,0x3
c000c607:	0f 95 c0             	setne  al
c000c60a:	0f b6 c0             	movzx  eax,al
c000c60d:	01 d8                	add    eax,ebx
c000c60f:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c615:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c619:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c61c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c622:	0f b7 d2             	movzx  edx,dx
c000c625:	0f b7 c0             	movzx  eax,ax
c000c628:	39 c2                	cmp    edx,eax
c000c62a:	0f 83 30 01 00 00    	jae    c000c760 <tcp_receive+0xbfc>
c000c630:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c635:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c639:	0f b7 c0             	movzx  eax,ax
c000c63c:	83 ec 0c             	sub    esp,0xc
c000c63f:	50                   	push   eax
c000c640:	e8 d7 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c645:	83 c4 10             	add    esp,0x10
c000c648:	0f b7 c0             	movzx  eax,ax
c000c64b:	83 e0 01             	and    eax,0x1
c000c64e:	74 48                	je     c000c698 <tcp_receive+0xb34>
c000c650:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c655:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c659:	80 e4 c0             	and    ah,0xc0
c000c65c:	89 c3                	mov    ebx,eax
c000c65e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c663:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c667:	0f b7 c0             	movzx  eax,ax
c000c66a:	83 ec 0c             	sub    esp,0xc
c000c66d:	50                   	push   eax
c000c66e:	e8 a9 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c673:	83 c4 10             	add    esp,0x10
c000c676:	0f b7 c0             	movzx  eax,ax
c000c679:	83 e0 3e             	and    eax,0x3e
c000c67c:	83 ec 0c             	sub    esp,0xc
c000c67f:	50                   	push   eax
c000c680:	e8 97 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	09 d8                	or     eax,ebx
c000c68a:	89 c2                	mov    edx,eax
c000c68c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c691:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c695:	8d 76 00             	lea    esi,[esi+0x0]
c000c698:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c69f:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c6a5:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6aa:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6ae:	0f b7 c0             	movzx  eax,ax
c000c6b1:	83 ec 0c             	sub    esp,0xc
c000c6b4:	50                   	push   eax
c000c6b5:	e8 62 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c6ba:	83 c4 10             	add    esp,0x10
c000c6bd:	0f b7 c0             	movzx  eax,ax
c000c6c0:	83 e0 02             	and    eax,0x2
c000c6c3:	74 0f                	je     c000c6d4 <tcp_receive+0xb70>
c000c6c5:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c6ca:	83 e8 01             	sub    eax,0x1
c000c6cd:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c6d3:	90                   	nop
c000c6d4:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c6d9:	0f b7 d0             	movzx  edx,ax
c000c6dc:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c6e1:	83 ec 08             	sub    esp,0x8
c000c6e4:	52                   	push   edx
c000c6e5:	50                   	push   eax
c000c6e6:	e8 71 c2 ff ff       	call   c000895c <pbuf_realloc>
c000c6eb:	83 c4 10             	add    esp,0x10
c000c6ee:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c6f4:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6f9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6fd:	0f b7 c0             	movzx  eax,ax
c000c700:	83 ec 0c             	sub    esp,0xc
c000c703:	50                   	push   eax
c000c704:	e8 13 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	0f b7 c0             	movzx  eax,ax
c000c70f:	83 e0 03             	and    eax,0x3
c000c712:	0f 95 c0             	setne  al
c000c715:	0f b6 c0             	movzx  eax,al
c000c718:	01 d8                	add    eax,ebx
c000c71a:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c720:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c726:	0f b7 d0             	movzx  edx,ax
c000c729:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c72e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c731:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c735:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c738:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c73c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c73f:	0f b7 c0             	movzx  eax,ax
c000c742:	01 d0                	add    eax,edx
c000c744:	39 c1                	cmp    ecx,eax
c000c746:	74 18                	je     c000c760 <tcp_receive+0xbfc>
c000c748:	83 ec 08             	sub    esp,0x8
c000c74b:	68 54 05 03 c0       	push   0xc0030554
c000c750:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c755:	e8 3e 34 01 00       	call   c001fb98 <CPrintf>
c000c75a:	83 c4 10             	add    esp,0x10
c000c75d:	8d 76 00             	lea    esi,[esi+0x0]
c000c760:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c764:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c76a:	85 c0                	test   eax,eax
c000c76c:	0f 84 7e 02 00 00    	je     c000c9f0 <tcp_receive+0xe8c>
c000c772:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c777:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c77b:	0f b7 c0             	movzx  eax,ax
c000c77e:	83 ec 0c             	sub    esp,0xc
c000c781:	50                   	push   eax
c000c782:	e8 95 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c787:	83 c4 10             	add    esp,0x10
c000c78a:	0f b7 c0             	movzx  eax,ax
c000c78d:	83 e0 01             	and    eax,0x1
c000c790:	74 4a                	je     c000c7dc <tcp_receive+0xc78>
c000c792:	eb 34                	jmp    c000c7c8 <tcp_receive+0xc64>
c000c794:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c798:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c79e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a6:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c7ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7b2:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c7b8:	83 ec 0c             	sub    esp,0xc
c000c7bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7bf:	e8 50 d8 ff ff       	call   c000a014 <tcp_seg_free>
c000c7c4:	83 c4 10             	add    esp,0x10
c000c7c7:	90                   	nop
c000c7c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7cc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c7d2:	85 c0                	test   eax,eax
c000c7d4:	75 be                	jne    c000c794 <tcp_receive+0xc30>
c000c7d6:	e9 15 02 00 00       	jmp    c000c9f0 <tcp_receive+0xe8c>
c000c7db:	90                   	nop
c000c7dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7e0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c7e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7ea:	e9 bd 00 00 00       	jmp    c000c8ac <tcp_receive+0xd48>
c000c7ef:	90                   	nop
c000c7f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7f7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7fb:	0f b7 c0             	movzx  eax,ax
c000c7fe:	83 ec 0c             	sub    esp,0xc
c000c801:	50                   	push   eax
c000c802:	e8 15 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c807:	83 c4 10             	add    esp,0x10
c000c80a:	0f b7 c0             	movzx  eax,ax
c000c80d:	83 e0 01             	and    eax,0x1
c000c810:	74 76                	je     c000c888 <tcp_receive+0xd24>
c000c812:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c817:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c81b:	0f b7 c0             	movzx  eax,ax
c000c81e:	83 ec 0c             	sub    esp,0xc
c000c821:	50                   	push   eax
c000c822:	e8 f5 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c827:	83 c4 10             	add    esp,0x10
c000c82a:	0f b7 c0             	movzx  eax,ax
c000c82d:	83 e0 02             	and    eax,0x2
c000c830:	75 56                	jne    c000c888 <tcp_receive+0xd24>
c000c832:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c837:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c83b:	83 ec 0c             	sub    esp,0xc
c000c83e:	6a 01                	push   0x1
c000c840:	e8 d7 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c845:	83 c4 10             	add    esp,0x10
c000c848:	89 c2                	mov    edx,eax
c000c84a:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c84f:	09 da                	or     edx,ebx
c000c851:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c855:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c85b:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c860:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c864:	0f b7 c0             	movzx  eax,ax
c000c867:	83 ec 0c             	sub    esp,0xc
c000c86a:	50                   	push   eax
c000c86b:	e8 ac 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c870:	83 c4 10             	add    esp,0x10
c000c873:	0f b7 c0             	movzx  eax,ax
c000c876:	83 e0 03             	and    eax,0x3
c000c879:	0f 95 c0             	setne  al
c000c87c:	0f b6 c0             	movzx  eax,al
c000c87f:	01 d8                	add    eax,ebx
c000c881:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c887:	90                   	nop
c000c888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c88c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c890:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c894:	8b 00                	mov    eax,DWORD PTR [eax]
c000c896:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c89a:	83 ec 0c             	sub    esp,0xc
c000c89d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c8a1:	e8 6e d7 ff ff       	call   c000a014 <tcp_seg_free>
c000c8a6:	83 c4 10             	add    esp,0x10
c000c8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c8ac:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c8b1:	74 31                	je     c000c8e4 <tcp_receive+0xd80>
c000c8b3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8b9:	0f b7 d0             	movzx  edx,ax
c000c8bc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8c1:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c8c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c8ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c8d5:	0f b7 c0             	movzx  eax,ax
c000c8d8:	01 d0                	add    eax,edx
c000c8da:	29 c1                	sub    ecx,eax
c000c8dc:	89 c8                	mov    eax,ecx
c000c8de:	0f 89 0c ff ff ff    	jns    c000c7f0 <tcp_receive+0xc8c>
c000c8e4:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c8e9:	0f 84 f1 00 00 00    	je     c000c9e0 <tcp_receive+0xe7c>
c000c8ef:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8f5:	0f b7 d0             	movzx  edx,ax
c000c8f8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8fd:	01 c2                	add    edx,eax
c000c8ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c903:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c909:	29 c2                	sub    edx,eax
c000c90b:	89 d0                	mov    eax,edx
c000c90d:	85 c0                	test   eax,eax
c000c90f:	0f 8e cb 00 00 00    	jle    c000c9e0 <tcp_receive+0xe7c>
c000c915:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c919:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c91c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c91f:	89 c2                	mov    edx,eax
c000c921:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c926:	89 d7                	mov    edi,edx
c000c928:	29 c7                	sub    edi,eax
c000c92a:	89 f8                	mov    eax,edi
c000c92c:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c932:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c937:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c93b:	0f b7 c0             	movzx  eax,ax
c000c93e:	83 ec 0c             	sub    esp,0xc
c000c941:	50                   	push   eax
c000c942:	e8 d5 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	0f b7 c0             	movzx  eax,ax
c000c94d:	83 e0 02             	and    eax,0x2
c000c950:	74 0e                	je     c000c960 <tcp_receive+0xdfc>
c000c952:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c957:	83 e8 01             	sub    eax,0x1
c000c95a:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c960:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c965:	0f b7 d0             	movzx  edx,ax
c000c968:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c96d:	83 ec 08             	sub    esp,0x8
c000c970:	52                   	push   edx
c000c971:	50                   	push   eax
c000c972:	e8 e5 bf ff ff       	call   c000895c <pbuf_realloc>
c000c977:	83 c4 10             	add    esp,0x10
c000c97a:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c980:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c985:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c989:	0f b7 c0             	movzx  eax,ax
c000c98c:	83 ec 0c             	sub    esp,0xc
c000c98f:	50                   	push   eax
c000c990:	e8 87 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c995:	83 c4 10             	add    esp,0x10
c000c998:	0f b7 c0             	movzx  eax,ax
c000c99b:	83 e0 03             	and    eax,0x3
c000c99e:	0f 95 c0             	setne  al
c000c9a1:	0f b6 c0             	movzx  eax,al
c000c9a4:	01 d8                	add    eax,ebx
c000c9a6:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c9ac:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9b2:	0f b7 d0             	movzx  edx,ax
c000c9b5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9ba:	01 c2                	add    edx,eax
c000c9bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c9c6:	39 c2                	cmp    edx,eax
c000c9c8:	74 16                	je     c000c9e0 <tcp_receive+0xe7c>
c000c9ca:	83 ec 08             	sub    esp,0x8
c000c9cd:	68 8c 05 03 c0       	push   0xc003058c
c000c9d2:	68 c6 fb 02 c0       	push   0xc002fbc6
c000c9d7:	e8 bc 31 01 00       	call   c001fb98 <CPrintf>
c000c9dc:	83 c4 10             	add    esp,0x10
c000c9df:	90                   	nop
c000c9e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c9e8:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c9ee:	66 90                	xchg   ax,ax
c000c9f0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c9f6:	0f b7 d0             	movzx  edx,ax
c000c9f9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c9fe:	01 c2                	add    edx,eax
c000ca00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca04:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ca0e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca14:	0f b7 d2             	movzx  edx,dx
c000ca17:	0f b7 c0             	movzx  eax,ax
c000ca1a:	39 c2                	cmp    edx,eax
c000ca1c:	73 16                	jae    c000ca34 <tcp_receive+0xed0>
c000ca1e:	83 ec 08             	sub    esp,0x8
c000ca21:	68 c8 05 03 c0       	push   0xc00305c8
c000ca26:	68 c6 fb 02 c0       	push   0xc002fbc6
c000ca2b:	e8 68 31 01 00       	call   c001fb98 <CPrintf>
c000ca30:	83 c4 10             	add    esp,0x10
c000ca33:	90                   	nop
c000ca34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca38:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ca3b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ca41:	89 d6                	mov    esi,edx
c000ca43:	29 c6                	sub    esi,eax
c000ca45:	89 f0                	mov    eax,esi
c000ca47:	89 c2                	mov    edx,eax
c000ca49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca4d:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000ca51:	83 ec 0c             	sub    esp,0xc
c000ca54:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca58:	e8 5b d2 ff ff       	call   c0009cb8 <tcp_update_rcv_ann_wnd>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca65:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca68:	0f b7 c0             	movzx  eax,ax
c000ca6b:	85 c0                	test   eax,eax
c000ca6d:	74 15                	je     c000ca84 <tcp_receive+0xf20>
c000ca6f:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000ca74:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000ca79:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000ca83:	90                   	nop
c000ca84:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000ca89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca8d:	0f b7 c0             	movzx  eax,ax
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	50                   	push   eax
c000ca94:	e8 83 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	83 e0 01             	and    eax,0x1
c000caa2:	0f 84 dc 01 00 00    	je     c000cc84 <tcp_receive+0x1120>
c000caa8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000caad:	83 c8 20             	or     eax,0x20
c000cab0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cab5:	e9 ca 01 00 00       	jmp    c000cc84 <tcp_receive+0x1120>
c000caba:	66 90                	xchg   ax,ax
c000cabc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cac0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cac6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cace:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cad4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cad7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cada:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000cadf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cae3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cae6:	0f b7 d8             	movzx  ebx,ax
c000cae9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000caf0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000caf4:	0f b7 c0             	movzx  eax,ax
c000caf7:	83 ec 0c             	sub    esp,0xc
c000cafa:	50                   	push   eax
c000cafb:	e8 1c 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb00:	83 c4 10             	add    esp,0x10
c000cb03:	0f b7 c0             	movzx  eax,ax
c000cb06:	83 e0 03             	and    eax,0x3
c000cb09:	0f 95 c0             	setne  al
c000cb0c:	0f b6 c0             	movzx  eax,al
c000cb0f:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cb12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb16:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cb19:	01 c2                	add    edx,eax
c000cb1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb1f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000cb22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb26:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cb29:	0f b7 d8             	movzx  ebx,ax
c000cb2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb33:	0f b7 f0             	movzx  esi,ax
c000cb36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb3d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb41:	0f b7 c0             	movzx  eax,ax
c000cb44:	83 ec 0c             	sub    esp,0xc
c000cb47:	50                   	push   eax
c000cb48:	e8 cf 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	0f b7 c0             	movzx  eax,ax
c000cb53:	83 e0 03             	and    eax,0x3
c000cb56:	0f 95 c0             	setne  al
c000cb59:	0f b6 c0             	movzx  eax,al
c000cb5c:	01 f0                	add    eax,esi
c000cb5e:	39 c3                	cmp    ebx,eax
c000cb60:	7d 16                	jge    c000cb78 <tcp_receive+0x1014>
c000cb62:	83 ec 08             	sub    esp,0x8
c000cb65:	68 e8 05 03 c0       	push   0xc00305e8
c000cb6a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000cb6f:	e8 24 30 01 00       	call   c001fb98 <CPrintf>
c000cb74:	83 c4 10             	add    esp,0x10
c000cb77:	90                   	nop
c000cb78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb7f:	0f b7 d8             	movzx  ebx,ax
c000cb82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb8d:	0f b7 c0             	movzx  eax,ax
c000cb90:	83 ec 0c             	sub    esp,0xc
c000cb93:	50                   	push   eax
c000cb94:	e8 83 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	0f b7 c0             	movzx  eax,ax
c000cb9f:	83 e0 03             	and    eax,0x3
c000cba2:	0f 95 c0             	setne  al
c000cba5:	0f b6 c0             	movzx  eax,al
c000cba8:	8d 14 03             	lea    edx,[ebx+eax*1]
c000cbab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbaf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cbb2:	29 d0                	sub    eax,edx
c000cbb4:	89 c2                	mov    edx,eax
c000cbb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbba:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cbbe:	83 ec 0c             	sub    esp,0xc
c000cbc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbc5:	e8 ee d0 ff ff       	call   c0009cb8 <tcp_update_rcv_ann_wnd>
c000cbca:	83 c4 10             	add    esp,0x10
c000cbcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cbd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cbd7:	0f b7 c0             	movzx  eax,ax
c000cbda:	85 c0                	test   eax,eax
c000cbdc:	74 3e                	je     c000cc1c <tcp_receive+0x10b8>
c000cbde:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cbe3:	85 c0                	test   eax,eax
c000cbe5:	74 1d                	je     c000cc04 <tcp_receive+0x10a0>
c000cbe7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbeb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cbee:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cbf3:	83 ec 08             	sub    esp,0x8
c000cbf6:	52                   	push   edx
c000cbf7:	50                   	push   eax
c000cbf8:	e8 cf bf ff ff       	call   c0008bcc <pbuf_cat>
c000cbfd:	83 c4 10             	add    esp,0x10
c000cc00:	eb 0e                	jmp    c000cc10 <tcp_receive+0x10ac>
c000cc02:	66 90                	xchg   ax,ax
c000cc04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cc0b:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cc10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc1b:	90                   	nop
c000cc1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc23:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cc27:	0f b7 c0             	movzx  eax,ax
c000cc2a:	83 ec 0c             	sub    esp,0xc
c000cc2d:	50                   	push   eax
c000cc2e:	e8 e9 3f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cc33:	83 c4 10             	add    esp,0x10
c000cc36:	0f b7 c0             	movzx  eax,ax
c000cc39:	83 e0 01             	and    eax,0x1
c000cc3c:	74 26                	je     c000cc64 <tcp_receive+0x1100>
c000cc3e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cc43:	83 c8 20             	or     eax,0x20
c000cc46:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cc4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cc52:	83 f8 04             	cmp    eax,0x4
c000cc55:	75 0d                	jne    c000cc64 <tcp_receive+0x1100>
c000cc57:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc5b:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cc62:	66 90                	xchg   ax,ax
c000cc64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc68:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc6e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc74:	83 ec 0c             	sub    esp,0xc
c000cc77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7b:	e8 94 d3 ff ff       	call   c000a014 <tcp_seg_free>
c000cc80:	83 c4 10             	add    esp,0x10
c000cc83:	90                   	nop
c000cc84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc88:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc8e:	85 c0                	test   eax,eax
c000cc90:	74 22                	je     c000ccb4 <tcp_receive+0x1150>
c000cc92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc96:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc9f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cca2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cca9:	39 c2                	cmp    edx,eax
c000ccab:	0f 84 0b fe ff ff    	je     c000cabc <tcp_receive+0xf58>
c000ccb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ccb4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccbb:	0f b6 c0             	movzx  eax,al
c000ccbe:	83 e0 01             	and    eax,0x1
c000ccc1:	74 2d                	je     c000ccf0 <tcp_receive+0x118c>
c000ccc3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccc7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccca:	83 e0 fe             	and    eax,0xfffffffe
c000cccd:	88 c2                	mov    dl,al
c000cccf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccd3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ccd6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccda:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccdd:	83 c8 02             	or     eax,0x2
c000cce0:	88 c2                	mov    dl,al
c000cce2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cce6:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cce9:	e9 2e 05 00 00       	jmp    c000d21c <tcp_receive+0x16b8>
c000ccee:	66 90                	xchg   ax,ax
c000ccf0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccf4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ccf7:	83 c8 01             	or     eax,0x1
c000ccfa:	88 c2                	mov    dl,al
c000ccfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd00:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cd03:	e9 14 05 00 00       	jmp    c000d21c <tcp_receive+0x16b8>
c000cd08:	83 ec 0c             	sub    esp,0xc
c000cd0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cd0f:	e8 00 2f 00 00       	call   c000fc14 <tcp_send_empty_ack>
c000cd14:	83 c4 10             	add    esp,0x10
c000cd17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd1b:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cd21:	85 c0                	test   eax,eax
c000cd23:	75 23                	jne    c000cd48 <tcp_receive+0x11e4>
c000cd25:	83 ec 0c             	sub    esp,0xc
c000cd28:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd2d:	e8 7a d3 ff ff       	call   c000a0ac <tcp_seg_copy>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	89 c2                	mov    edx,eax
c000cd37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd3b:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd41:	e9 d6 04 00 00       	jmp    c000d21c <tcp_receive+0x16b8>
c000cd46:	66 90                	xchg   ax,ax
c000cd48:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cd50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd54:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cd5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cd5e:	e9 2d 04 00 00       	jmp    c000d190 <tcp_receive+0x162c>
c000cd63:	90                   	nop
c000cd64:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd6b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cd6e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cd73:	39 c2                	cmp    edx,eax
c000cd75:	75 75                	jne    c000cdec <tcp_receive+0x1288>
c000cd77:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cd7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd81:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cd84:	0f b7 d2             	movzx  edx,dx
c000cd87:	0f b7 c0             	movzx  eax,ax
c000cd8a:	39 c2                	cmp    edx,eax
c000cd8c:	0f 86 0e 04 00 00    	jbe    c000d1a0 <tcp_receive+0x163c>
c000cd92:	83 ec 0c             	sub    esp,0xc
c000cd95:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd9a:	e8 0d d3 ff ff       	call   c000a0ac <tcp_seg_copy>
c000cd9f:	83 c4 10             	add    esp,0x10
c000cda2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cdab:	0f 84 f3 03 00 00    	je     c000d1a4 <tcp_receive+0x1640>
c000cdb1:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cdb6:	74 0c                	je     c000cdc4 <tcp_receive+0x1260>
c000cdb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdc0:	89 10                	mov    DWORD PTR [eax],edx
c000cdc2:	eb 10                	jmp    c000cdd4 <tcp_receive+0x1270>
c000cdc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cdc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdcc:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cdd2:	66 90                	xchg   ax,ax
c000cdd4:	83 ec 08             	sub    esp,0x8
c000cdd7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cddb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cddf:	e8 10 ec ff ff       	call   c000b9f4 <tcp_oos_insert_segment>
c000cde4:	83 c4 10             	add    esp,0x10
c000cde7:	e9 b8 03 00 00       	jmp    c000d1a4 <tcp_receive+0x1640>
c000cdec:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cdf1:	75 61                	jne    c000ce54 <tcp_receive+0x12f0>
c000cdf3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdfd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce03:	29 c2                	sub    edx,eax
c000ce05:	89 d0                	mov    eax,edx
c000ce07:	0f 89 2b 01 00 00    	jns    c000cf38 <tcp_receive+0x13d4>
c000ce0d:	83 ec 0c             	sub    esp,0xc
c000ce10:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce15:	e8 92 d2 ff ff       	call   c000a0ac <tcp_seg_copy>
c000ce1a:	83 c4 10             	add    esp,0x10
c000ce1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce21:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ce26:	0f 84 7c 03 00 00    	je     c000d1a8 <tcp_receive+0x1644>
c000ce2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ce30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce34:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ce3a:	83 ec 08             	sub    esp,0x8
c000ce3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce45:	e8 aa eb ff ff       	call   c000b9f4 <tcp_oos_insert_segment>
c000ce4a:	83 c4 10             	add    esp,0x10
c000ce4d:	e9 56 03 00 00       	jmp    c000d1a8 <tcp_receive+0x1644>
c000ce52:	66 90                	xchg   ax,ax
c000ce54:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce5e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce64:	29 c2                	sub    edx,eax
c000ce66:	89 d0                	mov    eax,edx
c000ce68:	83 e8 01             	sub    eax,0x1
c000ce6b:	0f 88 c7 00 00 00    	js     c000cf38 <tcp_receive+0x13d4>
c000ce71:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce7b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce81:	29 c2                	sub    edx,eax
c000ce83:	89 d0                	mov    eax,edx
c000ce85:	83 c0 01             	add    eax,0x1
c000ce88:	85 c0                	test   eax,eax
c000ce8a:	0f 8f a8 00 00 00    	jg     c000cf38 <tcp_receive+0x13d4>
c000ce90:	83 ec 0c             	sub    esp,0xc
c000ce93:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce98:	e8 0f d2 ff ff       	call   c000a0ac <tcp_seg_copy>
c000ce9d:	83 c4 10             	add    esp,0x10
c000cea0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cea4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cea9:	0f 84 fd 02 00 00    	je     c000d1ac <tcp_receive+0x1648>
c000ceaf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ceb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ceb9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cebd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cec0:	0f b7 c0             	movzx  eax,ax
c000cec3:	01 c2                	add    edx,eax
c000cec5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceca:	29 c2                	sub    edx,eax
c000cecc:	89 d0                	mov    eax,edx
c000cece:	85 c0                	test   eax,eax
c000ced0:	7e 42                	jle    c000cf14 <tcp_receive+0x13b0>
c000ced2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ced7:	89 c2                	mov    edx,eax
c000ced9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cedd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cee0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cee3:	89 d7                	mov    edi,edx
c000cee5:	29 c7                	sub    edi,eax
c000cee7:	89 f8                	mov    eax,edi
c000cee9:	89 c2                	mov    edx,eax
c000ceeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ceef:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cef7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cefa:	0f b7 d0             	movzx  edx,ax
c000cefd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf04:	83 ec 08             	sub    esp,0x8
c000cf07:	52                   	push   edx
c000cf08:	50                   	push   eax
c000cf09:	e8 4e ba ff ff       	call   c000895c <pbuf_realloc>
c000cf0e:	83 c4 10             	add    esp,0x10
c000cf11:	8d 76 00             	lea    esi,[esi+0x0]
c000cf14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cf18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf1c:	89 10                	mov    DWORD PTR [eax],edx
c000cf1e:	83 ec 08             	sub    esp,0x8
c000cf21:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf29:	e8 c6 ea ff ff       	call   c000b9f4 <tcp_oos_insert_segment>
c000cf2e:	83 c4 10             	add    esp,0x10
c000cf31:	e9 76 02 00 00       	jmp    c000d1ac <tcp_receive+0x1648>
c000cf36:	66 90                	xchg   ax,ax
c000cf38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf3e:	85 c0                	test   eax,eax
c000cf40:	0f 85 36 02 00 00    	jne    c000d17c <tcp_receive+0x1618>
c000cf46:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cf4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf56:	29 c2                	sub    edx,eax
c000cf58:	89 d0                	mov    eax,edx
c000cf5a:	85 c0                	test   eax,eax
c000cf5c:	0f 8e 1a 02 00 00    	jle    c000d17c <tcp_receive+0x1618>
c000cf62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf69:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf6d:	0f b7 c0             	movzx  eax,ax
c000cf70:	83 ec 0c             	sub    esp,0xc
c000cf73:	50                   	push   eax
c000cf74:	e8 a3 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cf79:	83 c4 10             	add    esp,0x10
c000cf7c:	0f b7 c0             	movzx  eax,ax
c000cf7f:	83 e0 01             	and    eax,0x1
c000cf82:	0f 85 28 02 00 00    	jne    c000d1b0 <tcp_receive+0x164c>
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cf90:	e8 17 d1 ff ff       	call   c000a0ac <tcp_seg_copy>
c000cf95:	83 c4 10             	add    esp,0x10
c000cf98:	89 c2                	mov    edx,eax
c000cf9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf9e:	89 10                	mov    DWORD PTR [eax],edx
c000cfa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfa4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfa6:	85 c0                	test   eax,eax
c000cfa8:	0f 84 06 02 00 00    	je     c000d1b4 <tcp_receive+0x1650>
c000cfae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfb5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cfb8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfbc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cfbf:	0f b7 c0             	movzx  eax,ax
c000cfc2:	01 c2                	add    edx,eax
c000cfc4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfc9:	29 c2                	sub    edx,eax
c000cfcb:	89 d0                	mov    eax,edx
c000cfcd:	85 c0                	test   eax,eax
c000cfcf:	7e 3f                	jle    c000d010 <tcp_receive+0x14ac>
c000cfd1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfd6:	89 c2                	mov    edx,eax
c000cfd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfe2:	89 d6                	mov    esi,edx
c000cfe4:	29 c6                	sub    esi,eax
c000cfe6:	89 f0                	mov    eax,esi
c000cfe8:	89 c2                	mov    edx,eax
c000cfea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfee:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cff2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cff6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cff9:	0f b7 d0             	movzx  edx,ax
c000cffc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d003:	83 ec 08             	sub    esp,0x8
c000d006:	52                   	push   edx
c000d007:	50                   	push   eax
c000d008:	e8 4f b9 ff ff       	call   c000895c <pbuf_realloc>
c000d00d:	83 c4 10             	add    esp,0x10
c000d010:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d016:	0f b7 d0             	movzx  edx,ax
c000d019:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d01e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d021:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d025:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d028:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d02c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d02f:	0f b7 c0             	movzx  eax,ax
c000d032:	01 d0                	add    eax,edx
c000d034:	39 c1                	cmp    ecx,eax
c000d036:	0f 86 78 01 00 00    	jbe    c000d1b4 <tcp_receive+0x1650>
c000d03c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d040:	8b 00                	mov    eax,DWORD PTR [eax]
c000d042:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d045:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d049:	0f b7 c0             	movzx  eax,ax
c000d04c:	83 ec 0c             	sub    esp,0xc
c000d04f:	50                   	push   eax
c000d050:	e8 c7 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d055:	83 c4 10             	add    esp,0x10
c000d058:	0f b7 c0             	movzx  eax,ax
c000d05b:	83 e0 01             	and    eax,0x1
c000d05e:	74 54                	je     c000d0b4 <tcp_receive+0x1550>
c000d060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d064:	8b 00                	mov    eax,DWORD PTR [eax]
c000d066:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d069:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d06d:	80 e4 c0             	and    ah,0xc0
c000d070:	89 c3                	mov    ebx,eax
c000d072:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d076:	8b 00                	mov    eax,DWORD PTR [eax]
c000d078:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d07b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d07f:	0f b7 c0             	movzx  eax,ax
c000d082:	83 ec 0c             	sub    esp,0xc
c000d085:	50                   	push   eax
c000d086:	e8 91 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d08b:	83 c4 10             	add    esp,0x10
c000d08e:	0f b7 c0             	movzx  eax,ax
c000d091:	83 e0 3e             	and    eax,0x3e
c000d094:	83 ec 0c             	sub    esp,0xc
c000d097:	50                   	push   eax
c000d098:	e8 7f 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d09d:	83 c4 10             	add    esp,0x10
c000d0a0:	09 d8                	or     eax,ebx
c000d0a2:	89 c2                	mov    edx,eax
c000d0a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d0ad:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000d0b1:	8d 76 00             	lea    esi,[esi+0x0]
c000d0b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0b8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d0bb:	89 c2                	mov    edx,eax
c000d0bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0c4:	01 d0                	add    eax,edx
c000d0c6:	89 c1                	mov    ecx,eax
c000d0c8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d0cd:	89 c2                	mov    edx,eax
c000d0cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d5:	89 cf                	mov    edi,ecx
c000d0d7:	29 d7                	sub    edi,edx
c000d0d9:	89 fa                	mov    edx,edi
c000d0db:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d0df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0e5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d0e8:	0f b7 d0             	movzx  edx,ax
c000d0eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0ef:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0f1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d0f4:	83 ec 08             	sub    esp,0x8
c000d0f7:	52                   	push   edx
c000d0f8:	50                   	push   eax
c000d0f9:	e8 5e b8 ff ff       	call   c000895c <pbuf_realloc>
c000d0fe:	83 c4 10             	add    esp,0x10
c000d101:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d105:	8b 00                	mov    eax,DWORD PTR [eax]
c000d107:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d10a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d10e:	8b 00                	mov    eax,DWORD PTR [eax]
c000d110:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d113:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d117:	0f b7 c0             	movzx  eax,ax
c000d11a:	83 ec 0c             	sub    esp,0xc
c000d11d:	50                   	push   eax
c000d11e:	e8 f9 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	0f b7 c0             	movzx  eax,ax
c000d129:	83 e0 03             	and    eax,0x3
c000d12c:	0f 95 c0             	setne  al
c000d12f:	0f b6 c0             	movzx  eax,al
c000d132:	01 d8                	add    eax,ebx
c000d134:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d13a:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d140:	0f b7 d0             	movzx  edx,ax
c000d143:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d148:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d14b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d14f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d152:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d156:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d159:	0f b7 c0             	movzx  eax,ax
c000d15c:	01 d0                	add    eax,edx
c000d15e:	39 c1                	cmp    ecx,eax
c000d160:	74 52                	je     c000d1b4 <tcp_receive+0x1650>
c000d162:	83 ec 08             	sub    esp,0x8
c000d165:	68 54 05 03 c0       	push   0xc0030554
c000d16a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000d16f:	e8 24 2a 01 00       	call   c001fb98 <CPrintf>
c000d174:	83 c4 10             	add    esp,0x10
c000d177:	eb 3b                	jmp    c000d1b4 <tcp_receive+0x1650>
c000d179:	8d 76 00             	lea    esi,[esi+0x0]
c000d17c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d180:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d184:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d188:	8b 00                	mov    eax,DWORD PTR [eax]
c000d18a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d18e:	66 90                	xchg   ax,ax
c000d190:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d195:	0f 85 c9 fb ff ff    	jne    c000cd64 <tcp_receive+0x1200>
c000d19b:	eb 7f                	jmp    c000d21c <tcp_receive+0x16b8>
c000d19d:	8d 76 00             	lea    esi,[esi+0x0]
c000d1a0:	90                   	nop
c000d1a1:	eb 79                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1a3:	90                   	nop
c000d1a4:	90                   	nop
c000d1a5:	eb 75                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1a7:	90                   	nop
c000d1a8:	90                   	nop
c000d1a9:	eb 71                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1ab:	90                   	nop
c000d1ac:	90                   	nop
c000d1ad:	eb 6d                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1af:	90                   	nop
c000d1b0:	90                   	nop
c000d1b1:	eb 69                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1b3:	90                   	nop
c000d1b4:	90                   	nop
c000d1b5:	eb 65                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1b7:	90                   	nop
c000d1b8:	83 ec 0c             	sub    esp,0xc
c000d1bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d1bf:	e8 50 2a 00 00       	call   c000fc14 <tcp_send_empty_ack>
c000d1c4:	83 c4 10             	add    esp,0x10
c000d1c7:	eb 53                	jmp    c000d21c <tcp_receive+0x16b8>
c000d1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d1cc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d1d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1d6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d1d9:	29 c2                	sub    edx,eax
c000d1db:	89 d0                	mov    eax,edx
c000d1dd:	78 25                	js     c000d204 <tcp_receive+0x16a0>
c000d1df:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d1e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1e9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d1ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d1f0:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d1f3:	0f b7 c0             	movzx  eax,ax
c000d1f6:	01 c8                	add    eax,ecx
c000d1f8:	29 c2                	sub    edx,eax
c000d1fa:	89 d0                	mov    eax,edx
c000d1fc:	83 c0 01             	add    eax,0x1
c000d1ff:	85 c0                	test   eax,eax
c000d201:	7e 19                	jle    c000d21c <tcp_receive+0x16b8>
c000d203:	90                   	nop
c000d204:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d208:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d20b:	83 c8 02             	or     eax,0x2
c000d20e:	88 c2                	mov    dl,al
c000d210:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d214:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d217:	eb 03                	jmp    c000d21c <tcp_receive+0x16b8>
c000d219:	8d 76 00             	lea    esi,[esi+0x0]
c000d21c:	90                   	nop
c000d21d:	83 c4 30             	add    esp,0x30
c000d220:	5b                   	pop    ebx
c000d221:	5e                   	pop    esi
c000d222:	5f                   	pop    edi
c000d223:	c3                   	ret    

c000d224 <tcp_parseopt>:
c000d224:	83 ec 1c             	sub    esp,0x1c
c000d227:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d22c:	83 c0 14             	add    eax,0x14
c000d22f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d233:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d238:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d23c:	0f b7 c0             	movzx  eax,ax
c000d23f:	83 ec 0c             	sub    esp,0xc
c000d242:	50                   	push   eax
c000d243:	e8 d4 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d248:	83 c4 10             	add    esp,0x10
c000d24b:	0f b7 c0             	movzx  eax,ax
c000d24e:	c1 e8 0c             	shr    eax,0xc
c000d251:	0f b7 c0             	movzx  eax,ax
c000d254:	83 f8 05             	cmp    eax,0x5
c000d257:	0f 86 6f 01 00 00    	jbe    c000d3cc <tcp_parseopt+0x1a8>
c000d25d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d262:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d266:	0f b7 c0             	movzx  eax,ax
c000d269:	83 ec 0c             	sub    esp,0xc
c000d26c:	50                   	push   eax
c000d26d:	e8 aa 39 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d272:	83 c4 10             	add    esp,0x10
c000d275:	0f b7 c0             	movzx  eax,ax
c000d278:	c1 e8 0c             	shr    eax,0xc
c000d27b:	83 e8 05             	sub    eax,0x5
c000d27e:	c1 e0 02             	shl    eax,0x2
c000d281:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d286:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d28d:	e9 1e 01 00 00       	jmp    c000d3b0 <tcp_parseopt+0x18c>
c000d292:	66 90                	xchg   ax,ax
c000d294:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d299:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d29d:	01 d0                	add    eax,edx
c000d29f:	8a 00                	mov    al,BYTE PTR [eax]
c000d2a1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d2a5:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d2aa:	83 f8 01             	cmp    eax,0x1
c000d2ad:	74 15                	je     c000d2c4 <tcp_parseopt+0xa0>
c000d2af:	83 f8 02             	cmp    eax,0x2
c000d2b2:	74 24                	je     c000d2d8 <tcp_parseopt+0xb4>
c000d2b4:	85 c0                	test   eax,eax
c000d2b6:	0f 85 bc 00 00 00    	jne    c000d378 <tcp_parseopt+0x154>
c000d2bc:	e9 0b 01 00 00       	jmp    c000d3cc <tcp_parseopt+0x1a8>
c000d2c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d2c4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d2c9:	83 c0 01             	add    eax,0x1
c000d2cc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2d1:	e9 da 00 00 00       	jmp    c000d3b0 <tcp_parseopt+0x18c>
c000d2d6:	66 90                	xchg   ax,ax
c000d2d8:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2dd:	8d 50 01             	lea    edx,[eax+0x1]
c000d2e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2e4:	01 d0                	add    eax,edx
c000d2e6:	8a 00                	mov    al,BYTE PTR [eax]
c000d2e8:	0f b6 c0             	movzx  eax,al
c000d2eb:	83 f8 04             	cmp    eax,0x4
c000d2ee:	0f 85 d0 00 00 00    	jne    c000d3c4 <tcp_parseopt+0x1a0>
c000d2f4:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2f9:	8d 50 03             	lea    edx,[eax+0x3]
c000d2fc:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d301:	39 c2                	cmp    edx,eax
c000d303:	0f 8d bb 00 00 00    	jge    c000d3c4 <tcp_parseopt+0x1a0>
c000d309:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d30e:	8d 50 02             	lea    edx,[eax+0x2]
c000d311:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d315:	01 d0                	add    eax,edx
c000d317:	8a 00                	mov    al,BYTE PTR [eax]
c000d319:	0f b6 c0             	movzx  eax,al
c000d31c:	c1 e0 08             	shl    eax,0x8
c000d31f:	89 c2                	mov    edx,eax
c000d321:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d326:	8d 48 03             	lea    ecx,[eax+0x3]
c000d329:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d32d:	01 c8                	add    eax,ecx
c000d32f:	8a 00                	mov    al,BYTE PTR [eax]
c000d331:	0f b6 c0             	movzx  eax,al
c000d334:	09 d0                	or     eax,edx
c000d336:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d33b:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d340:	3d 18 02 00 00       	cmp    eax,0x218
c000d345:	77 11                	ja     c000d358 <tcp_parseopt+0x134>
c000d347:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d34c:	85 c0                	test   eax,eax
c000d34e:	74 08                	je     c000d358 <tcp_parseopt+0x134>
c000d350:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d355:	eb 09                	jmp    c000d360 <tcp_parseopt+0x13c>
c000d357:	90                   	nop
c000d358:	b8 18 02 00 00       	mov    eax,0x218
c000d35d:	8d 76 00             	lea    esi,[esi+0x0]
c000d360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d364:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d368:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d36d:	83 c0 04             	add    eax,0x4
c000d370:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d375:	eb 39                	jmp    c000d3b0 <tcp_parseopt+0x18c>
c000d377:	90                   	nop
c000d378:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d37d:	8d 50 01             	lea    edx,[eax+0x1]
c000d380:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d384:	01 d0                	add    eax,edx
c000d386:	8a 00                	mov    al,BYTE PTR [eax]
c000d388:	0f b6 c0             	movzx  eax,al
c000d38b:	85 c0                	test   eax,eax
c000d38d:	74 39                	je     c000d3c8 <tcp_parseopt+0x1a4>
c000d38f:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d394:	8d 50 01             	lea    edx,[eax+0x1]
c000d397:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d39b:	01 d0                	add    eax,edx
c000d39d:	8a 00                	mov    al,BYTE PTR [eax]
c000d39f:	0f b6 c0             	movzx  eax,al
c000d3a2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d3a7:	01 d0                	add    eax,edx
c000d3a9:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d3ae:	66 90                	xchg   ax,ax
c000d3b0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d3b5:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d3ba:	39 c2                	cmp    edx,eax
c000d3bc:	0f 82 d2 fe ff ff    	jb     c000d294 <tcp_parseopt+0x70>
c000d3c2:	eb 08                	jmp    c000d3cc <tcp_parseopt+0x1a8>
c000d3c4:	90                   	nop
c000d3c5:	eb 05                	jmp    c000d3cc <tcp_parseopt+0x1a8>
c000d3c7:	90                   	nop
c000d3c8:	90                   	nop
c000d3c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d3cc:	83 c4 1c             	add    esp,0x1c
c000d3cf:	c3                   	ret    

c000d3d0 <tcp_listen_input>:
c000d3d0:	53                   	push   ebx
c000d3d1:	83 ec 18             	sub    esp,0x18
c000d3d4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d3d9:	0f b6 c0             	movzx  eax,al
c000d3dc:	83 e0 10             	and    eax,0x10
c000d3df:	74 53                	je     c000d434 <tcp_listen_input+0x64>
c000d3e1:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d3e9:	0f b7 d0             	movzx  edx,ax
c000d3ec:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3f1:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d3f5:	0f b7 c0             	movzx  eax,ax
c000d3f8:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d3ff:	0f b7 d9             	movzx  ebx,cx
c000d402:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d408:	01 cb                	add    ebx,ecx
c000d40a:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d410:	83 c1 01             	add    ecx,0x1
c000d413:	83 ec 08             	sub    esp,0x8
c000d416:	52                   	push   edx
c000d417:	50                   	push   eax
c000d418:	68 90 68 03 c0       	push   0xc0036890
c000d41d:	68 98 68 03 c0       	push   0xc0036898
c000d422:	53                   	push   ebx
c000d423:	51                   	push   ecx
c000d424:	e8 8b 2f 00 00       	call   c00103b4 <tcp_rst>
c000d429:	83 c4 20             	add    esp,0x20
c000d42c:	e9 a7 01 00 00       	jmp    c000d5d8 <tcp_listen_input+0x208>
c000d431:	8d 76 00             	lea    esi,[esi+0x0]
c000d434:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d439:	0f b6 c0             	movzx  eax,al
c000d43c:	83 e0 02             	and    eax,0x2
c000d43f:	0f 84 93 01 00 00    	je     c000d5d8 <tcp_listen_input+0x208>
c000d445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d449:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d44c:	0f b6 c0             	movzx  eax,al
c000d44f:	83 ec 0c             	sub    esp,0xc
c000d452:	50                   	push   eax
c000d453:	e8 e0 df ff ff       	call   c000b438 <tcp_alloc>
c000d458:	83 c4 10             	add    esp,0x10
c000d45b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d45f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d464:	75 16                	jne    c000d47c <tcp_listen_input+0xac>
c000d466:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d46c:	83 c0 01             	add    eax,0x1
c000d46f:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d475:	b0 ff                	mov    al,0xff
c000d477:	e9 60 01 00 00       	jmp    c000d5dc <tcp_listen_input+0x20c>
c000d47c:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d482:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d486:	89 10                	mov    DWORD PTR [eax],edx
c000d488:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d48f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d493:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d497:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d49d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d4a4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d4a9:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d4ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b0:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d4b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b8:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d4bf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d4c4:	8d 50 01             	lea    edx,[eax+0x1]
c000d4c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4cb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d2:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d4d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d4dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d4e1:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d4e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4e9:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d4ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4f1:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d4f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4f8:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d4fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d501:	8d 50 ff             	lea    edx,[eax-0x1]
c000d504:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d508:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d50b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d50f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d516:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d524:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52b:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d52e:	83 e0 8c             	and    eax,0xffffff8c
c000d531:	88 c2                	mov    dl,al
c000d533:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d537:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d53a:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d544:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d54b:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d550:	e8 7b 36 00 00       	call   c0010bd0 <tcp_timer_needed>
c000d555:	83 ec 0c             	sub    esp,0xc
c000d558:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d55c:	e8 c3 fc ff ff       	call   c000d224 <tcp_parseopt>
c000d561:	83 c4 10             	add    esp,0x10
c000d564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d568:	8d 50 04             	lea    edx,[eax+0x4]
c000d56b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d56f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d572:	0f b7 c0             	movzx  eax,ax
c000d575:	83 ec 08             	sub    esp,0x8
c000d578:	52                   	push   edx
c000d579:	50                   	push   eax
c000d57a:	e8 79 e0 ff ff       	call   c000b5f8 <tcp_eff_send_mss>
c000d57f:	83 c4 10             	add    esp,0x10
c000d582:	89 c2                	mov    edx,eax
c000d584:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d588:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d58c:	83 ec 08             	sub    esp,0x8
c000d58f:	6a 12                	push   0x12
c000d591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d595:	e8 ee 22 00 00       	call   c000f888 <tcp_enqueue_flags>
c000d59a:	83 c4 10             	add    esp,0x10
c000d59d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d5a1:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d5a6:	85 c0                	test   eax,eax
c000d5a8:	74 1a                	je     c000d5c4 <tcp_listen_input+0x1f4>
c000d5aa:	83 ec 08             	sub    esp,0x8
c000d5ad:	6a 00                	push   0x0
c000d5af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5b3:	e8 68 db ff ff       	call   c000b120 <tcp_abandon>
c000d5b8:	83 c4 10             	add    esp,0x10
c000d5bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d5bf:	eb 1b                	jmp    c000d5dc <tcp_listen_input+0x20c>
c000d5c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5cb:	e8 58 29 00 00       	call   c000ff28 <tcp_output>
c000d5d0:	83 c4 10             	add    esp,0x10
c000d5d3:	eb 07                	jmp    c000d5dc <tcp_listen_input+0x20c>
c000d5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5d8:	b0 00                	mov    al,0x0
c000d5da:	66 90                	xchg   ax,ax
c000d5dc:	83 c4 18             	add    esp,0x18
c000d5df:	5b                   	pop    ebx
c000d5e0:	c3                   	ret    
c000d5e1:	8d 76 00             	lea    esi,[esi+0x0]

c000d5e4 <tcp_process>:
c000d5e4:	53                   	push   ebx
c000d5e5:	83 ec 18             	sub    esp,0x18
c000d5e8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d5ed:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d5f2:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d5f7:	0f b6 c0             	movzx  eax,al
c000d5fa:	83 e0 04             	and    eax,0x4
c000d5fd:	0f 84 bd 00 00 00    	je     c000d6c0 <tcp_process+0xdc>
c000d603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d607:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d60a:	83 f8 02             	cmp    eax,0x2
c000d60d:	75 19                	jne    c000d628 <tcp_process+0x44>
c000d60f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d613:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d616:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d61b:	39 c2                	cmp    edx,eax
c000d61d:	75 45                	jne    c000d664 <tcp_process+0x80>
c000d61f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d624:	eb 3e                	jmp    c000d664 <tcp_process+0x80>
c000d626:	66 90                	xchg   ax,ax
c000d628:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d62e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d632:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d635:	29 c2                	sub    edx,eax
c000d637:	89 d0                	mov    eax,edx
c000d639:	78 29                	js     c000d664 <tcp_process+0x80>
c000d63b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d645:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d64f:	0f b7 c0             	movzx  eax,ax
c000d652:	01 c8                	add    eax,ecx
c000d654:	29 c2                	sub    edx,eax
c000d656:	89 d0                	mov    eax,edx
c000d658:	85 c0                	test   eax,eax
c000d65a:	7f 08                	jg     c000d664 <tcp_process+0x80>
c000d65c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d661:	8d 76 00             	lea    esi,[esi+0x0]
c000d664:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d669:	85 c0                	test   eax,eax
c000d66b:	74 4b                	je     c000d6b8 <tcp_process+0xd4>
c000d66d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d671:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d674:	85 c0                	test   eax,eax
c000d676:	75 18                	jne    c000d690 <tcp_process+0xac>
c000d678:	83 ec 08             	sub    esp,0x8
c000d67b:	68 10 06 03 c0       	push   0xc0030610
c000d680:	68 c6 fb 02 c0       	push   0xc002fbc6
c000d685:	e8 0e 25 01 00       	call   c001fb98 <CPrintf>
c000d68a:	83 c4 10             	add    esp,0x10
c000d68d:	8d 76 00             	lea    esi,[esi+0x0]
c000d690:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d695:	83 c8 08             	or     eax,0x8
c000d698:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d69d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a1:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d6a4:	83 e0 fe             	and    eax,0xfffffffe
c000d6a7:	88 c2                	mov    dl,al
c000d6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ad:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d6b0:	b0 f5                	mov    al,0xf5
c000d6b2:	e9 c9 08 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d6b7:	90                   	nop
c000d6b8:	b0 00                	mov    al,0x0
c000d6ba:	e9 c1 08 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d6bf:	90                   	nop
c000d6c0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6c5:	0f b6 c0             	movzx  eax,al
c000d6c8:	83 e0 02             	and    eax,0x2
c000d6cb:	74 33                	je     c000d700 <tcp_process+0x11c>
c000d6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6d4:	83 f8 02             	cmp    eax,0x2
c000d6d7:	74 27                	je     c000d700 <tcp_process+0x11c>
c000d6d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d6e0:	83 f8 03             	cmp    eax,0x3
c000d6e3:	74 1b                	je     c000d700 <tcp_process+0x11c>
c000d6e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d6ec:	83 c8 02             	or     eax,0x2
c000d6ef:	88 c2                	mov    dl,al
c000d6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d6f8:	b0 00                	mov    al,0x0
c000d6fa:	e9 81 08 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d6ff:	90                   	nop
c000d700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d704:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d707:	0f b6 c0             	movzx  eax,al
c000d70a:	83 e0 10             	and    eax,0x10
c000d70d:	75 0d                	jne    c000d71c <tcp_process+0x138>
c000d70f:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d719:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d71c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d720:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d727:	83 ec 0c             	sub    esp,0xc
c000d72a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d72e:	e8 f1 fa ff ff       	call   c000d224 <tcp_parseopt>
c000d733:	83 c4 10             	add    esp,0x10
c000d736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d73a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d73d:	83 f8 09             	cmp    eax,0x9
c000d740:	0f 87 16 08 00 00    	ja     c000df5c <tcp_process+0x978>
c000d746:	8b 04 85 b8 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf848]
c000d74d:	ff e0                	jmp    eax
c000d74f:	90                   	nop
c000d750:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d755:	0f b6 c0             	movzx  eax,al
c000d758:	83 e0 10             	and    eax,0x10
c000d75b:	0f 84 07 02 00 00    	je     c000d968 <tcp_process+0x384>
c000d761:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d766:	0f b6 c0             	movzx  eax,al
c000d769:	83 e0 02             	and    eax,0x2
c000d76c:	0f 84 f6 01 00 00    	je     c000d968 <tcp_process+0x384>
c000d772:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d776:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d779:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d77c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d77f:	83 ec 0c             	sub    esp,0xc
c000d782:	50                   	push   eax
c000d783:	e8 b8 34 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d788:	83 c4 10             	add    esp,0x10
c000d78b:	8d 50 01             	lea    edx,[eax+0x1]
c000d78e:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d793:	39 c2                	cmp    edx,eax
c000d795:	0f 85 cd 01 00 00    	jne    c000d968 <tcp_process+0x384>
c000d79b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79f:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d7a3:	83 c0 01             	add    eax,0x1
c000d7a6:	89 c2                	mov    edx,eax
c000d7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ac:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d7b0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d7b5:	8d 50 01             	lea    edx,[eax+0x1]
c000d7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7bc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d7bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d7c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ca:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d7cd:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d7:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d7da:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d7df:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d7e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e7:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d7eb:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d7f0:	8d 50 ff             	lea    edx,[eax-0x1]
c000d7f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f7:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d7fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fe:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d809:	8d 50 04             	lea    edx,[eax+0x4]
c000d80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d810:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d813:	0f b7 c0             	movzx  eax,ax
c000d816:	83 ec 08             	sub    esp,0x8
c000d819:	52                   	push   edx
c000d81a:	50                   	push   eax
c000d81b:	e8 d8 dd ff ff       	call   c000b5f8 <tcp_eff_send_mss>
c000d820:	83 c4 10             	add    esp,0x10
c000d823:	89 c2                	mov    edx,eax
c000d825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d829:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d831:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d834:	89 c2                	mov    edx,eax
c000d836:	c1 e2 02             	shl    edx,0x2
c000d839:	01 d0                	add    eax,edx
c000d83b:	d1 e0                	shl    eax,1
c000d83d:	89 c2                	mov    edx,eax
c000d83f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d843:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d84f:	0f b7 c0             	movzx  eax,ax
c000d852:	83 f8 01             	cmp    eax,0x1
c000d855:	75 0d                	jne    c000d864 <tcp_process+0x280>
c000d857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d85e:	d1 e0                	shl    eax,1
c000d860:	eb 0a                	jmp    c000d86c <tcp_process+0x288>
c000d862:	66 90                	xchg   ax,ax
c000d864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d868:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d86b:	90                   	nop
c000d86c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d870:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d878:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d87b:	0f b7 c0             	movzx  eax,ax
c000d87e:	85 c0                	test   eax,eax
c000d880:	75 16                	jne    c000d898 <tcp_process+0x2b4>
c000d882:	83 ec 08             	sub    esp,0x8
c000d885:	68 73 07 03 c0       	push   0xc0030773
c000d88a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000d88f:	e8 04 23 01 00       	call   c001fb98 <CPrintf>
c000d894:	83 c4 10             	add    esp,0x10
c000d897:	90                   	nop
c000d898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d89c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d89f:	83 e8 01             	sub    eax,0x1
c000d8a2:	89 c2                	mov    edx,eax
c000d8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a8:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000d8ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8bb:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c1:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d8c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d8cb:	85 c0                	test   eax,eax
c000d8cd:	75 0d                	jne    c000d8dc <tcp_process+0x2f8>
c000d8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8d3:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d8d9:	eb 15                	jmp    c000d8f0 <tcp_process+0x30c>
c000d8db:	90                   	nop
c000d8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e0:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d8e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ea:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d8ee:	66 90                	xchg   ax,ax
c000d8f0:	83 ec 0c             	sub    esp,0xc
c000d8f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8f7:	e8 18 c7 ff ff       	call   c000a014 <tcp_seg_free>
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d903:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d909:	85 c0                	test   eax,eax
c000d90b:	74 27                	je     c000d934 <tcp_process+0x350>
c000d90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d911:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d917:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d91b:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d91e:	83 ec 04             	sub    esp,0x4
c000d921:	6a 00                	push   0x0
c000d923:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d927:	52                   	push   edx
c000d928:	ff d0                	call   eax
c000d92a:	83 c4 10             	add    esp,0x10
c000d92d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d931:	eb 09                	jmp    c000d93c <tcp_process+0x358>
c000d933:	90                   	nop
c000d934:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d939:	8d 76 00             	lea    esi,[esi+0x0]
c000d93c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d941:	83 f8 f6             	cmp    eax,0xfffffff6
c000d944:	75 0a                	jne    c000d950 <tcp_process+0x36c>
c000d946:	b0 f6                	mov    al,0xf6
c000d948:	e9 33 06 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000d94d:	8d 76 00             	lea    esi,[esi+0x0]
c000d950:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d954:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d957:	83 c8 02             	or     eax,0x2
c000d95a:	88 c2                	mov    dl,al
c000d95c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d960:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d963:	e9 f8 05 00 00       	jmp    c000df60 <tcp_process+0x97c>
c000d968:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d96d:	0f b6 c0             	movzx  eax,al
c000d970:	83 e0 10             	and    eax,0x10
c000d973:	0f 84 e7 05 00 00    	je     c000df60 <tcp_process+0x97c>
c000d979:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d97e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d981:	0f b7 c8             	movzx  ecx,ax
c000d984:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d989:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d98d:	0f b7 d0             	movzx  edx,ax
c000d990:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d996:	0f b7 d8             	movzx  ebx,ax
c000d999:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d99e:	01 c3                	add    ebx,eax
c000d9a0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d9a5:	83 ec 08             	sub    esp,0x8
c000d9a8:	51                   	push   ecx
c000d9a9:	52                   	push   edx
c000d9aa:	68 90 68 03 c0       	push   0xc0036890
c000d9af:	68 98 68 03 c0       	push   0xc0036898
c000d9b4:	53                   	push   ebx
c000d9b5:	50                   	push   eax
c000d9b6:	e8 f9 29 00 00       	call   c00103b4 <tcp_rst>
c000d9bb:	83 c4 20             	add    esp,0x20
c000d9be:	e9 9d 05 00 00       	jmp    c000df60 <tcp_process+0x97c>
c000d9c3:	90                   	nop
c000d9c4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d9c9:	0f b6 c0             	movzx  eax,al
c000d9cc:	83 e0 10             	and    eax,0x10
c000d9cf:	0f 84 ab 01 00 00    	je     c000db80 <tcp_process+0x59c>
c000d9d5:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9df:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d9e2:	29 c2                	sub    edx,eax
c000d9e4:	89 d0                	mov    eax,edx
c000d9e6:	83 e8 01             	sub    eax,0x1
c000d9e9:	0f 88 45 01 00 00    	js     c000db34 <tcp_process+0x550>
c000d9ef:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f9:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d9fc:	29 c2                	sub    edx,eax
c000d9fe:	89 d0                	mov    eax,edx
c000da00:	85 c0                	test   eax,eax
c000da02:	0f 8f 2c 01 00 00    	jg     c000db34 <tcp_process+0x550>
c000da08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000da13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da17:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000da1a:	85 c0                	test   eax,eax
c000da1c:	75 16                	jne    c000da34 <tcp_process+0x450>
c000da1e:	83 ec 08             	sub    esp,0x8
c000da21:	68 89 07 03 c0       	push   0xc0030789
c000da26:	68 c6 fb 02 c0       	push   0xc002fbc6
c000da2b:	e8 68 21 01 00       	call   c001fb98 <CPrintf>
c000da30:	83 c4 10             	add    esp,0x10
c000da33:	90                   	nop
c000da34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da38:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000da3b:	85 c0                	test   eax,eax
c000da3d:	74 25                	je     c000da64 <tcp_process+0x480>
c000da3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da43:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000da46:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da4a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000da4d:	83 ec 04             	sub    esp,0x4
c000da50:	6a 00                	push   0x0
c000da52:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da56:	52                   	push   edx
c000da57:	ff d0                	call   eax
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000da60:	eb 0a                	jmp    c000da6c <tcp_process+0x488>
c000da62:	66 90                	xchg   ax,ax
c000da64:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000da69:	8d 76 00             	lea    esi,[esi+0x0]
c000da6c:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da71:	85 c0                	test   eax,eax
c000da73:	74 23                	je     c000da98 <tcp_process+0x4b4>
c000da75:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000da7a:	83 f8 f6             	cmp    eax,0xfffffff6
c000da7d:	74 11                	je     c000da90 <tcp_process+0x4ac>
c000da7f:	83 ec 0c             	sub    esp,0xc
c000da82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da86:	e8 29 d8 ff ff       	call   c000b2b4 <tcp_abort>
c000da8b:	83 c4 10             	add    esp,0x10
c000da8e:	66 90                	xchg   ax,ax
c000da90:	b0 f6                	mov    al,0xf6
c000da92:	e9 e9 04 00 00       	jmp    c000df80 <tcp_process+0x99c>
c000da97:	90                   	nop
c000da98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da9c:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000daa0:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000daa5:	83 ec 0c             	sub    esp,0xc
c000daa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daac:	e8 b3 e0 ff ff       	call   c000bb64 <tcp_receive>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dabb:	0f b7 c0             	movzx  eax,ax
c000dabe:	85 c0                	test   eax,eax
c000dac0:	74 16                	je     c000dad8 <tcp_process+0x4f4>
c000dac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac6:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000dac9:	83 e8 01             	sub    eax,0x1
c000dacc:	89 c2                	mov    edx,eax
c000dace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dad2:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000dad6:	66 90                	xchg   ax,ax
c000dad8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000dadd:	83 f8 01             	cmp    eax,0x1
c000dae0:	75 0e                	jne    c000daf0 <tcp_process+0x50c>
c000dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000dae9:	d1 e0                	shl    eax,1
c000daeb:	eb 0b                	jmp    c000daf8 <tcp_process+0x514>
c000daed:	8d 76 00             	lea    esi,[esi+0x0]
c000daf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daf4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000daf7:	90                   	nop
c000daf8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dafc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000db00:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db05:	0f b6 c0             	movzx  eax,al
c000db08:	83 e0 20             	and    eax,0x20
c000db0b:	0f 84 ab 00 00 00    	je     c000dbbc <tcp_process+0x5d8>
c000db11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db15:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db18:	83 c8 02             	or     eax,0x2
c000db1b:	88 c2                	mov    dl,al
c000db1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db21:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db28:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db2f:	e9 88 00 00 00       	jmp    c000dbbc <tcp_process+0x5d8>
c000db34:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db39:	66 8b 00             	mov    ax,WORD PTR [eax]
c000db3c:	0f b7 c8             	movzx  ecx,ax
c000db3f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000db44:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000db48:	0f b7 d0             	movzx  edx,ax
c000db4b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000db51:	0f b7 d8             	movzx  ebx,ax
c000db54:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000db59:	01 c3                	add    ebx,eax
c000db5b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db60:	83 ec 08             	sub    esp,0x8
c000db63:	51                   	push   ecx
c000db64:	52                   	push   edx
c000db65:	68 90 68 03 c0       	push   0xc0036890
c000db6a:	68 98 68 03 c0       	push   0xc0036898
c000db6f:	53                   	push   ebx
c000db70:	50                   	push   eax
c000db71:	e8 3e 28 00 00       	call   c00103b4 <tcp_rst>
c000db76:	83 c4 20             	add    esp,0x20
c000db79:	e9 e6 03 00 00       	jmp    c000df64 <tcp_process+0x980>
c000db7e:	66 90                	xchg   ax,ax
c000db80:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db85:	0f b6 c0             	movzx  eax,al
c000db88:	83 e0 02             	and    eax,0x2
c000db8b:	0f 84 d3 03 00 00    	je     c000df64 <tcp_process+0x980>
c000db91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db95:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db98:	8d 50 ff             	lea    edx,[eax-0x1]
c000db9b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000dba0:	39 c2                	cmp    edx,eax
c000dba2:	0f 85 bc 03 00 00    	jne    c000df64 <tcp_process+0x980>
c000dba8:	83 ec 0c             	sub    esp,0xc
c000dbab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbaf:	e8 0c 2a 00 00       	call   c00105c0 <tcp_rexmit>
c000dbb4:	83 c4 10             	add    esp,0x10
c000dbb7:	e9 a8 03 00 00       	jmp    c000df64 <tcp_process+0x980>
c000dbbc:	90                   	nop
c000dbbd:	e9 a2 03 00 00       	jmp    c000df64 <tcp_process+0x980>
c000dbc2:	66 90                	xchg   ax,ax
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbcb:	e8 94 df ff ff       	call   c000bb64 <tcp_receive>
c000dbd0:	83 c4 10             	add    esp,0x10
c000dbd3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dbd8:	0f b6 c0             	movzx  eax,al
c000dbdb:	83 e0 20             	and    eax,0x20
c000dbde:	0f 84 84 03 00 00    	je     c000df68 <tcp_process+0x984>
c000dbe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbeb:	83 c8 02             	or     eax,0x2
c000dbee:	88 c2                	mov    dl,al
c000dbf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbf4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbfb:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000dc02:	e9 61 03 00 00       	jmp    c000df68 <tcp_process+0x984>
c000dc07:	90                   	nop
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc0f:	e8 50 df ff ff       	call   c000bb64 <tcp_receive>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc1c:	0f b6 c0             	movzx  eax,al
c000dc1f:	83 e0 20             	and    eax,0x20
c000dc22:	0f 84 08 01 00 00    	je     c000dd30 <tcp_process+0x74c>
c000dc28:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dc2d:	0f b6 c0             	movzx  eax,al
c000dc30:	83 e0 10             	and    eax,0x10
c000dc33:	0f 84 d3 00 00 00    	je     c000dd0c <tcp_process+0x728>
c000dc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc3d:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc40:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc45:	39 c2                	cmp    edx,eax
c000dc47:	0f 85 bf 00 00 00    	jne    c000dd0c <tcp_process+0x728>
c000dc4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc51:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc54:	83 c8 02             	or     eax,0x2
c000dc57:	88 c2                	mov    dl,al
c000dc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc60:	83 ec 0c             	sub    esp,0xc
c000dc63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc67:	e8 0c c5 ff ff       	call   c000a178 <tcp_pcb_purge>
c000dc6c:	83 c4 10             	add    esp,0x10
c000dc6f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc74:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc78:	75 12                	jne    c000dc8c <tcp_process+0x6a8>
c000dc7a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc82:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc87:	eb 4b                	jmp    c000dcd4 <tcp_process+0x6f0>
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc91:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc96:	eb 30                	jmp    c000dcc8 <tcp_process+0x6e4>
c000dc98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dca0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dca4:	75 12                	jne    c000dcb8 <tcp_process+0x6d4>
c000dca6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dcaf:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dcb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcb5:	eb 1d                	jmp    c000dcd4 <tcp_process+0x6f0>
c000dcb7:	90                   	nop
c000dcb8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcc0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dcc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dccd:	85 c0                	test   eax,eax
c000dccf:	75 c7                	jne    c000dc98 <tcp_process+0x6b4>
c000dcd1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce3:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dcea:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcf4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcfb:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd00:	e8 cb 2e 00 00       	call   c0010bd0 <tcp_timer_needed>
c000dd05:	e9 62 02 00 00       	jmp    c000df6c <tcp_process+0x988>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd10:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd13:	83 c8 02             	or     eax,0x2
c000dd16:	88 c2                	mov    dl,al
c000dd18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd1c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd23:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dd2a:	e9 3d 02 00 00       	jmp    c000df6c <tcp_process+0x988>
c000dd2f:	90                   	nop
c000dd30:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd35:	0f b6 c0             	movzx  eax,al
c000dd38:	83 e0 10             	and    eax,0x10
c000dd3b:	0f 84 2b 02 00 00    	je     c000df6c <tcp_process+0x988>
c000dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd45:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd48:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd4d:	39 c2                	cmp    edx,eax
c000dd4f:	0f 85 17 02 00 00    	jne    c000df6c <tcp_process+0x988>
c000dd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd59:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dd60:	e9 07 02 00 00       	jmp    c000df6c <tcp_process+0x988>
c000dd65:	8d 76 00             	lea    esi,[esi+0x0]
c000dd68:	83 ec 0c             	sub    esp,0xc
c000dd6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd6f:	e8 f0 dd ff ff       	call   c000bb64 <tcp_receive>
c000dd74:	83 c4 10             	add    esp,0x10
c000dd77:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dd7c:	0f b6 c0             	movzx  eax,al
c000dd7f:	83 e0 20             	and    eax,0x20
c000dd82:	0f 84 e8 01 00 00    	je     c000df70 <tcp_process+0x98c>
c000dd88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd8c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dd8f:	83 c8 02             	or     eax,0x2
c000dd92:	88 c2                	mov    dl,al
c000dd94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd98:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dd9b:	83 ec 0c             	sub    esp,0xc
c000dd9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dda2:	e8 d1 c3 ff ff       	call   c000a178 <tcp_pcb_purge>
c000dda7:	83 c4 10             	add    esp,0x10
c000ddaa:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddaf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000ddb3:	75 0f                	jne    c000ddc4 <tcp_process+0x7e0>
c000ddb5:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddbd:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ddc2:	eb 48                	jmp    c000de0c <tcp_process+0x828>
c000ddc4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddc9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddce:	eb 30                	jmp    c000de00 <tcp_process+0x81c>
c000ddd0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddd5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddd8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dddc:	75 12                	jne    c000ddf0 <tcp_process+0x80c>
c000ddde:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dde3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dde7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ddea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dded:	eb 1d                	jmp    c000de0c <tcp_process+0x828>
c000ddef:	90                   	nop
c000ddf0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddf5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ddf8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddfd:	8d 76 00             	lea    esi,[esi+0x0]
c000de00:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de05:	85 c0                	test   eax,eax
c000de07:	75 c7                	jne    c000ddd0 <tcp_process+0x7ec>
c000de09:	8d 76 00             	lea    esi,[esi+0x0]
c000de0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de10:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de1b:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de22:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de2c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de33:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de38:	e8 93 2d 00 00       	call   c0010bd0 <tcp_timer_needed>
c000de3d:	e9 2e 01 00 00       	jmp    c000df70 <tcp_process+0x98c>
c000de42:	66 90                	xchg   ax,ax
c000de44:	83 ec 0c             	sub    esp,0xc
c000de47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de4b:	e8 14 dd ff ff       	call   c000bb64 <tcp_receive>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de58:	0f b6 c0             	movzx  eax,al
c000de5b:	83 e0 10             	and    eax,0x10
c000de5e:	0f 84 10 01 00 00    	je     c000df74 <tcp_process+0x990>
c000de64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de68:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de6b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de70:	39 c2                	cmp    edx,eax
c000de72:	0f 85 fc 00 00 00    	jne    c000df74 <tcp_process+0x990>
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de7f:	e8 f4 c2 ff ff       	call   c000a178 <tcp_pcb_purge>
c000de84:	83 c4 10             	add    esp,0x10
c000de87:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de8c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de90:	75 12                	jne    c000dea4 <tcp_process+0x8c0>
c000de92:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000de97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de9a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000de9f:	eb 4b                	jmp    c000deec <tcp_process+0x908>
c000dea1:	8d 76 00             	lea    esi,[esi+0x0]
c000dea4:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dea9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000deae:	eb 30                	jmp    c000dee0 <tcp_process+0x8fc>
c000deb0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000deb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000deb8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000debc:	75 12                	jne    c000ded0 <tcp_process+0x8ec>
c000debe:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dec3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dec7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000deca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000decd:	eb 1d                	jmp    c000deec <tcp_process+0x908>
c000decf:	90                   	nop
c000ded0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ded5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ded8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dedd:	8d 76 00             	lea    esi,[esi+0x0]
c000dee0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dee5:	85 c0                	test   eax,eax
c000dee7:	75 c7                	jne    c000deb0 <tcp_process+0x8cc>
c000dee9:	8d 76 00             	lea    esi,[esi+0x0]
c000deec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000def7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000defb:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000df02:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000df08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df0c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000df0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df13:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000df18:	e8 b3 2c 00 00       	call   c0010bd0 <tcp_timer_needed>
c000df1d:	eb 55                	jmp    c000df74 <tcp_process+0x990>
c000df1f:	90                   	nop
c000df20:	83 ec 0c             	sub    esp,0xc
c000df23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df27:	e8 38 dc ff ff       	call   c000bb64 <tcp_receive>
c000df2c:	83 c4 10             	add    esp,0x10
c000df2f:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000df34:	0f b6 c0             	movzx  eax,al
c000df37:	83 e0 10             	and    eax,0x10
c000df3a:	74 3c                	je     c000df78 <tcp_process+0x994>
c000df3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df40:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000df43:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000df48:	39 c2                	cmp    edx,eax
c000df4a:	75 2c                	jne    c000df78 <tcp_process+0x994>
c000df4c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000df51:	83 c8 10             	or     eax,0x10
c000df54:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000df59:	eb 1d                	jmp    c000df78 <tcp_process+0x994>
c000df5b:	90                   	nop
c000df5c:	90                   	nop
c000df5d:	eb 1d                	jmp    c000df7c <tcp_process+0x998>
c000df5f:	90                   	nop
c000df60:	90                   	nop
c000df61:	eb 19                	jmp    c000df7c <tcp_process+0x998>
c000df63:	90                   	nop
c000df64:	90                   	nop
c000df65:	eb 15                	jmp    c000df7c <tcp_process+0x998>
c000df67:	90                   	nop
c000df68:	90                   	nop
c000df69:	eb 11                	jmp    c000df7c <tcp_process+0x998>
c000df6b:	90                   	nop
c000df6c:	90                   	nop
c000df6d:	eb 0d                	jmp    c000df7c <tcp_process+0x998>
c000df6f:	90                   	nop
c000df70:	90                   	nop
c000df71:	eb 09                	jmp    c000df7c <tcp_process+0x998>
c000df73:	90                   	nop
c000df74:	90                   	nop
c000df75:	eb 05                	jmp    c000df7c <tcp_process+0x998>
c000df77:	90                   	nop
c000df78:	90                   	nop
c000df79:	8d 76 00             	lea    esi,[esi+0x0]
c000df7c:	b0 00                	mov    al,0x0
c000df7e:	66 90                	xchg   ax,ax
c000df80:	83 c4 18             	add    esp,0x18
c000df83:	5b                   	pop    ebx
c000df84:	c3                   	ret    
c000df85:	8d 76 00             	lea    esi,[esi+0x0]

c000df88 <tcp_input>:
c000df88:	53                   	push   ebx
c000df89:	83 ec 18             	sub    esp,0x18
c000df8c:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000df92:	83 c0 01             	add    eax,0x1
c000df95:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000df9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfa2:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000dfa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfab:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dfae:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000dfb3:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dfb6:	0f b7 c0             	movzx  eax,ax
c000dfb9:	83 ec 0c             	sub    esp,0xc
c000dfbc:	50                   	push   eax
c000dfbd:	e8 5a 2c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	0f b7 c0             	movzx  eax,ax
c000dfc8:	c1 e8 08             	shr    eax,0x8
c000dfcb:	0f b7 c0             	movzx  eax,ax
c000dfce:	83 e0 0f             	and    eax,0xf
c000dfd1:	c1 e0 02             	shl    eax,0x2
c000dfd4:	01 d8                	add    eax,ebx
c000dfd6:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000dfdb:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000dfe0:	66 8b 00             	mov    ax,WORD PTR [eax]
c000dfe3:	0f b7 c0             	movzx  eax,ax
c000dfe6:	83 ec 0c             	sub    esp,0xc
c000dfe9:	50                   	push   eax
c000dfea:	e8 2d 2c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	0f b7 c0             	movzx  eax,ax
c000dff5:	c1 e8 08             	shr    eax,0x8
c000dff8:	83 e0 0f             	and    eax,0xf
c000dffb:	c1 e0 02             	shl    eax,0x2
c000dffe:	f7 d8                	neg    eax
c000e000:	98                   	cwde   
c000e001:	83 ec 08             	sub    esp,0x8
c000e004:	50                   	push   eax
c000e005:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e009:	e8 da a1 ff ff       	call   c00081e8 <pbuf_header>
c000e00e:	83 c4 10             	add    esp,0x10
c000e011:	0f b6 c0             	movzx  eax,al
c000e014:	85 c0                	test   eax,eax
c000e016:	75 10                	jne    c000e028 <tcp_input+0xa0>
c000e018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e01c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e01f:	0f b7 c0             	movzx  eax,ax
c000e022:	83 f8 13             	cmp    eax,0x13
c000e025:	77 35                	ja     c000e05c <tcp_input+0xd4>
c000e027:	90                   	nop
c000e028:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e02e:	83 c0 01             	add    eax,0x1
c000e031:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e037:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e03d:	83 c0 01             	add    eax,0x1
c000e040:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04d:	e8 36 a3 ff ff       	call   c0008388 <pbuf_free>
c000e052:	83 c4 10             	add    esp,0x10
c000e055:	e9 fe 09 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e05a:	66 90                	xchg   ax,ax
c000e05c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e061:	83 ec 08             	sub    esp,0x8
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	50                   	push   eax
c000e069:	e8 be 5e 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c000e06e:	83 c4 10             	add    esp,0x10
c000e071:	0f b6 c0             	movzx  eax,al
c000e074:	85 c0                	test   eax,eax
c000e076:	75 14                	jne    c000e08c <tcp_input+0x104>
c000e078:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e07d:	25 f0 00 00 00       	and    eax,0xf0
c000e082:	3d e0 00 00 00       	cmp    eax,0xe0
c000e087:	75 37                	jne    c000e0c0 <tcp_input+0x138>
c000e089:	8d 76 00             	lea    esi,[esi+0x0]
c000e08c:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e092:	83 c0 01             	add    eax,0x1
c000e095:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e09b:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e0a1:	83 c0 01             	add    eax,0x1
c000e0a4:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e0aa:	83 ec 0c             	sub    esp,0xc
c000e0ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0b1:	e8 d2 a2 ff ff       	call   c0008388 <pbuf_free>
c000e0b6:	83 c4 10             	add    esp,0x10
c000e0b9:	e9 9a 09 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e0be:	66 90                	xchg   ax,ax
c000e0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0c7:	0f b7 c0             	movzx  eax,ax
c000e0ca:	83 ec 0c             	sub    esp,0xc
c000e0cd:	50                   	push   eax
c000e0ce:	6a 06                	push   0x6
c000e0d0:	68 98 68 03 c0       	push   0xc0036898
c000e0d5:	68 90 68 03 c0       	push   0xc0036890
c000e0da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e0de:	e8 61 51 00 00       	call   c0013244 <inet_chksum_pseudo>
c000e0e3:	83 c4 20             	add    esp,0x20
c000e0e6:	0f b7 c0             	movzx  eax,ax
c000e0e9:	85 c0                	test   eax,eax
c000e0eb:	74 33                	je     c000e120 <tcp_input+0x198>
c000e0ed:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e0f3:	83 c0 01             	add    eax,0x1
c000e0f6:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e0fc:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e102:	83 c0 01             	add    eax,0x1
c000e105:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e10b:	83 ec 0c             	sub    esp,0xc
c000e10e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e112:	e8 71 a2 ff ff       	call   c0008388 <pbuf_free>
c000e117:	83 c4 10             	add    esp,0x10
c000e11a:	e9 39 09 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e11f:	90                   	nop
c000e120:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e125:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e129:	0f b7 c0             	movzx  eax,ax
c000e12c:	83 ec 0c             	sub    esp,0xc
c000e12f:	50                   	push   eax
c000e130:	e8 e7 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e135:	83 c4 10             	add    esp,0x10
c000e138:	0f b7 c0             	movzx  eax,ax
c000e13b:	c1 e8 0c             	shr    eax,0xc
c000e13e:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e142:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e147:	ba 00 00 00 00       	mov    edx,0x0
c000e14c:	89 d1                	mov    ecx,edx
c000e14e:	29 c1                	sub    ecx,eax
c000e150:	89 c8                	mov    eax,ecx
c000e152:	c1 e0 02             	shl    eax,0x2
c000e155:	98                   	cwde   
c000e156:	83 ec 08             	sub    esp,0x8
c000e159:	50                   	push   eax
c000e15a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15e:	e8 85 a0 ff ff       	call   c00081e8 <pbuf_header>
c000e163:	83 c4 10             	add    esp,0x10
c000e166:	0f b6 c0             	movzx  eax,al
c000e169:	85 c0                	test   eax,eax
c000e16b:	74 33                	je     c000e1a0 <tcp_input+0x218>
c000e16d:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e173:	83 c0 01             	add    eax,0x1
c000e176:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e17c:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e182:	83 c0 01             	add    eax,0x1
c000e185:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e18b:	83 ec 0c             	sub    esp,0xc
c000e18e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e192:	e8 f1 a1 ff ff       	call   c0008388 <pbuf_free>
c000e197:	83 c4 10             	add    esp,0x10
c000e19a:	e9 b9 08 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e19f:	90                   	nop
c000e1a0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1a5:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e1a8:	0f b7 c0             	movzx  eax,ax
c000e1ab:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1b1:	83 ec 0c             	sub    esp,0xc
c000e1b4:	50                   	push   eax
c000e1b5:	e8 62 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e1ba:	83 c4 10             	add    esp,0x10
c000e1bd:	66 89 03             	mov    WORD PTR [ebx],ax
c000e1c0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1c5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e1c9:	0f b7 c0             	movzx  eax,ax
c000e1cc:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1d2:	83 ec 0c             	sub    esp,0xc
c000e1d5:	50                   	push   eax
c000e1d6:	e8 41 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e1db:	83 c4 10             	add    esp,0x10
c000e1de:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e1e2:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e1ea:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e1f0:	83 ec 0c             	sub    esp,0xc
c000e1f3:	50                   	push   eax
c000e1f4:	e8 47 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e1f9:	83 c4 10             	add    esp,0x10
c000e1fc:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e1ff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e202:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e207:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e20c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e20f:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e215:	83 ec 0c             	sub    esp,0xc
c000e218:	50                   	push   eax
c000e219:	e8 22 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e21e:	83 c4 10             	add    esp,0x10
c000e221:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e224:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e227:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e22c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e231:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e235:	0f b7 c0             	movzx  eax,ax
c000e238:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e23e:	83 ec 0c             	sub    esp,0xc
c000e241:	50                   	push   eax
c000e242:	e8 d5 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e247:	83 c4 10             	add    esp,0x10
c000e24a:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e24e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e253:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e257:	0f b7 c0             	movzx  eax,ax
c000e25a:	83 ec 0c             	sub    esp,0xc
c000e25d:	50                   	push   eax
c000e25e:	e8 b9 29 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e263:	83 c4 10             	add    esp,0x10
c000e266:	83 e0 3f             	and    eax,0x3f
c000e269:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e272:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e275:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e27a:	0f b6 c0             	movzx  eax,al
c000e27d:	83 e0 03             	and    eax,0x3
c000e280:	0f 95 c0             	setne  al
c000e283:	0f b6 c0             	movzx  eax,al
c000e286:	01 d0                	add    eax,edx
c000e288:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e28e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e296:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e29b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e29f:	e9 50 01 00 00       	jmp    c000e3f4 <tcp_input+0x46c>
c000e2a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2ab:	85 c0                	test   eax,eax
c000e2ad:	75 15                	jne    c000e2c4 <tcp_input+0x33c>
c000e2af:	83 ec 08             	sub    esp,0x8
c000e2b2:	68 30 06 03 c0       	push   0xc0030630
c000e2b7:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e2bc:	e8 d7 18 01 00       	call   c001fb98 <CPrintf>
c000e2c1:	83 c4 10             	add    esp,0x10
c000e2c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2cb:	83 f8 0a             	cmp    eax,0xa
c000e2ce:	75 18                	jne    c000e2e8 <tcp_input+0x360>
c000e2d0:	83 ec 08             	sub    esp,0x8
c000e2d3:	68 58 06 03 c0       	push   0xc0030658
c000e2d8:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e2dd:	e8 b6 18 01 00       	call   c001fb98 <CPrintf>
c000e2e2:	83 c4 10             	add    esp,0x10
c000e2e5:	8d 76 00             	lea    esi,[esi+0x0]
c000e2e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2ef:	83 f8 01             	cmp    eax,0x1
c000e2f2:	75 18                	jne    c000e30c <tcp_input+0x384>
c000e2f4:	83 ec 08             	sub    esp,0x8
c000e2f7:	68 84 06 03 c0       	push   0xc0030684
c000e2fc:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e301:	e8 92 18 01 00       	call   c001fb98 <CPrintf>
c000e306:	83 c4 10             	add    esp,0x10
c000e309:	8d 76 00             	lea    esi,[esi+0x0]
c000e30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e310:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e314:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e319:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e31c:	0f b7 d2             	movzx  edx,dx
c000e31f:	0f b7 c0             	movzx  eax,ax
c000e322:	39 c2                	cmp    edx,eax
c000e324:	0f 85 b6 00 00 00    	jne    c000e3e0 <tcp_input+0x458>
c000e32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e32e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e331:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e336:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e33a:	0f b7 d2             	movzx  edx,dx
c000e33d:	0f b7 c0             	movzx  eax,ax
c000e340:	39 c2                	cmp    edx,eax
c000e342:	0f 85 98 00 00 00    	jne    c000e3e0 <tcp_input+0x458>
c000e348:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e34c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e34f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e354:	39 c2                	cmp    edx,eax
c000e356:	0f 85 84 00 00 00    	jne    c000e3e0 <tcp_input+0x458>
c000e35c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e360:	8b 10                	mov    edx,DWORD PTR [eax]
c000e362:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e367:	39 c2                	cmp    edx,eax
c000e369:	75 75                	jne    c000e3e0 <tcp_input+0x458>
c000e36b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e36f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e372:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e376:	75 18                	jne    c000e390 <tcp_input+0x408>
c000e378:	83 ec 08             	sub    esp,0x8
c000e37b:	68 ac 06 03 c0       	push   0xc00306ac
c000e380:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e385:	e8 0e 18 01 00       	call   c001fb98 <CPrintf>
c000e38a:	83 c4 10             	add    esp,0x10
c000e38d:	8d 76 00             	lea    esi,[esi+0x0]
c000e390:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e395:	74 25                	je     c000e3bc <tcp_input+0x434>
c000e397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e39b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e39e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3a5:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e3ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e3b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e3bb:	90                   	nop
c000e3bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3c3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e3c7:	75 3b                	jne    c000e404 <tcp_input+0x47c>
c000e3c9:	83 ec 08             	sub    esp,0x8
c000e3cc:	68 d8 06 03 c0       	push   0xc00306d8
c000e3d1:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e3d6:	e8 bd 17 01 00       	call   c001fb98 <CPrintf>
c000e3db:	83 c4 10             	add    esp,0x10
c000e3de:	eb 24                	jmp    c000e404 <tcp_input+0x47c>
c000e3e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3f3:	90                   	nop
c000e3f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e3f9:	0f 85 a5 fe ff ff    	jne    c000e2a4 <tcp_input+0x31c>
c000e3ff:	eb 07                	jmp    c000e408 <tcp_input+0x480>
c000e401:	8d 76 00             	lea    esi,[esi+0x0]
c000e404:	90                   	nop
c000e405:	8d 76 00             	lea    esi,[esi+0x0]
c000e408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e40d:	0f 85 89 01 00 00    	jne    c000e59c <tcp_input+0x614>
c000e413:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e41c:	e9 ab 00 00 00       	jmp    c000e4cc <tcp_input+0x544>
c000e421:	8d 76 00             	lea    esi,[esi+0x0]
c000e424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e428:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e42b:	83 f8 0a             	cmp    eax,0xa
c000e42e:	74 18                	je     c000e448 <tcp_input+0x4c0>
c000e430:	83 ec 08             	sub    esp,0x8
c000e433:	68 04 07 03 c0       	push   0xc0030704
c000e438:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e43d:	e8 56 17 01 00       	call   c001fb98 <CPrintf>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	8d 76 00             	lea    esi,[esi+0x0]
c000e448:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e44c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e450:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e455:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e458:	0f b7 d2             	movzx  edx,dx
c000e45b:	0f b7 c0             	movzx  eax,ax
c000e45e:	39 c2                	cmp    edx,eax
c000e460:	75 5e                	jne    c000e4c0 <tcp_input+0x538>
c000e462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e466:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e469:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e46e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e472:	0f b7 d2             	movzx  edx,dx
c000e475:	0f b7 c0             	movzx  eax,ax
c000e478:	39 c2                	cmp    edx,eax
c000e47a:	75 44                	jne    c000e4c0 <tcp_input+0x538>
c000e47c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e480:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e483:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e488:	39 c2                	cmp    edx,eax
c000e48a:	75 34                	jne    c000e4c0 <tcp_input+0x538>
c000e48c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e490:	8b 10                	mov    edx,DWORD PTR [eax]
c000e492:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e497:	39 c2                	cmp    edx,eax
c000e499:	75 25                	jne    c000e4c0 <tcp_input+0x538>
c000e49b:	83 ec 0c             	sub    esp,0xc
c000e49e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4a2:	e8 45 d4 ff ff       	call   c000b8ec <tcp_timewait_input>
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	83 ec 0c             	sub    esp,0xc
c000e4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4b1:	e8 d2 9e ff ff       	call   c0008388 <pbuf_free>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	e9 9a 05 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e4be:	66 90                	xchg   ax,ax
c000e4c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e4c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e4cb:	90                   	nop
c000e4cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e4d1:	0f 85 4d ff ff ff    	jne    c000e424 <tcp_input+0x49c>
c000e4d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e4df:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e4e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e4e8:	eb 52                	jmp    c000e53c <tcp_input+0x5b4>
c000e4ea:	66 90                	xchg   ax,ax
c000e4ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4f0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e4f3:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e4f8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e4fc:	0f b7 d2             	movzx  edx,dx
c000e4ff:	0f b7 c0             	movzx  eax,ax
c000e502:	39 c2                	cmp    edx,eax
c000e504:	75 22                	jne    c000e528 <tcp_input+0x5a0>
c000e506:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e50a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e50c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e511:	39 c2                	cmp    edx,eax
c000e513:	74 2f                	je     c000e544 <tcp_input+0x5bc>
c000e515:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e519:	85 c0                	test   eax,eax
c000e51b:	74 27                	je     c000e544 <tcp_input+0x5bc>
c000e51d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e521:	8b 00                	mov    eax,DWORD PTR [eax]
c000e523:	85 c0                	test   eax,eax
c000e525:	74 1d                	je     c000e544 <tcp_input+0x5bc>
c000e527:	90                   	nop
c000e528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e52c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e530:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e534:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e537:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e53b:	90                   	nop
c000e53c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e541:	75 a9                	jne    c000e4ec <tcp_input+0x564>
c000e543:	90                   	nop
c000e544:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e549:	74 51                	je     c000e59c <tcp_input+0x614>
c000e54b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e550:	74 26                	je     c000e578 <tcp_input+0x5f0>
c000e552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e556:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e55d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e560:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e56a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e56d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e571:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e576:	66 90                	xchg   ax,ax
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e57f:	e8 4c ee ff ff       	call   c000d3d0 <tcp_listen_input>
c000e584:	83 c4 10             	add    esp,0x10
c000e587:	83 ec 0c             	sub    esp,0xc
c000e58a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e58e:	e8 f5 9d ff ff       	call   c0008388 <pbuf_free>
c000e593:	83 c4 10             	add    esp,0x10
c000e596:	e9 bd 04 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e59b:	90                   	nop
c000e59c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e5a1:	0f 84 1d 04 00 00    	je     c000e9c4 <tcp_input+0xa3c>
c000e5a7:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e5b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e5b8:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c2:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e5c7:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e5cc:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e5d1:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e5db:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e5e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5e6:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e5ec:	85 c0                	test   eax,eax
c000e5ee:	0f 84 b4 00 00 00    	je     c000e6a8 <tcp_input+0x720>
c000e5f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f8:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e5fe:	85 c0                	test   eax,eax
c000e600:	74 2e                	je     c000e630 <tcp_input+0x6a8>
c000e602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e606:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e60c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e610:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e616:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e61a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e61d:	6a 00                	push   0x0
c000e61f:	51                   	push   ecx
c000e620:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e624:	52                   	push   edx
c000e625:	ff d0                	call   eax
c000e627:	83 c4 10             	add    esp,0x10
c000e62a:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e62e:	eb 20                	jmp    c000e650 <tcp_input+0x6c8>
c000e630:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e634:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e63a:	6a 00                	push   0x0
c000e63c:	50                   	push   eax
c000e63d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e641:	6a 00                	push   0x0
c000e643:	e8 74 c8 ff ff       	call   c000aebc <tcp_recv_null>
c000e648:	83 c4 10             	add    esp,0x10
c000e64b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e64f:	90                   	nop
c000e650:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e655:	85 c0                	test   eax,eax
c000e657:	75 13                	jne    c000e66c <tcp_input+0x6e4>
c000e659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e65d:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e667:	eb 3f                	jmp    c000e6a8 <tcp_input+0x720>
c000e669:	8d 76 00             	lea    esi,[esi+0x0]
c000e66c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e671:	83 f8 f6             	cmp    eax,0xfffffff6
c000e674:	74 0e                	je     c000e684 <tcp_input+0x6fc>
c000e676:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e67c:	0f b7 c0             	movzx  eax,ax
c000e67f:	85 c0                	test   eax,eax
c000e681:	74 25                	je     c000e6a8 <tcp_input+0x720>
c000e683:	90                   	nop
c000e684:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e68a:	83 c0 01             	add    eax,0x1
c000e68d:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e693:	83 ec 0c             	sub    esp,0xc
c000e696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e69a:	e8 e9 9c ff ff       	call   c0008388 <pbuf_free>
c000e69f:	83 c4 10             	add    esp,0x10
c000e6a2:	e9 b1 03 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e6a7:	90                   	nop
c000e6a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6ac:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e6b1:	83 ec 0c             	sub    esp,0xc
c000e6b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6b8:	e8 27 ef ff ff       	call   c000d5e4 <tcp_process>
c000e6bd:	83 c4 10             	add    esp,0x10
c000e6c0:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e6c4:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e6c9:	83 f8 f6             	cmp    eax,0xfffffff6
c000e6cc:	0f 84 9e 02 00 00    	je     c000e970 <tcp_input+0x9e8>
c000e6d2:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e6d7:	0f b6 c0             	movzx  eax,al
c000e6da:	83 e0 08             	and    eax,0x8
c000e6dd:	74 59                	je     c000e738 <tcp_input+0x7b0>
c000e6df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6e3:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e6e9:	85 c0                	test   eax,eax
c000e6eb:	74 1f                	je     c000e70c <tcp_input+0x784>
c000e6ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6f1:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e6f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6fb:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e6fe:	83 ec 08             	sub    esp,0x8
c000e701:	6a f5                	push   0xfffffff5
c000e703:	52                   	push   edx
c000e704:	ff d0                	call   eax
c000e706:	83 c4 10             	add    esp,0x10
c000e709:	8d 76 00             	lea    esi,[esi+0x0]
c000e70c:	83 ec 08             	sub    esp,0x8
c000e70f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e713:	68 70 68 03 c0       	push   0xc0036870
c000e718:	e8 bb c2 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	83 ec 08             	sub    esp,0x8
c000e723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e727:	6a 02                	push   0x2
c000e729:	e8 9a 93 ff ff       	call   c0007ac8 <memp_free>
c000e72e:	83 c4 10             	add    esp,0x10
c000e731:	e9 4a 02 00 00       	jmp    c000e980 <tcp_input+0x9f8>
c000e736:	66 90                	xchg   ax,ax
c000e738:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e73d:	0f b6 c0             	movzx  eax,al
c000e740:	83 e0 10             	and    eax,0x10
c000e743:	74 2b                	je     c000e770 <tcp_input+0x7e8>
c000e745:	83 ec 08             	sub    esp,0x8
c000e748:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e74c:	68 70 68 03 c0       	push   0xc0036870
c000e751:	e8 82 c2 ff ff       	call   c000a9d8 <tcp_pcb_remove>
c000e756:	83 c4 10             	add    esp,0x10
c000e759:	83 ec 08             	sub    esp,0x8
c000e75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e760:	6a 02                	push   0x2
c000e762:	e8 61 93 ff ff       	call   c0007ac8 <memp_free>
c000e767:	83 c4 10             	add    esp,0x10
c000e76a:	e9 11 02 00 00       	jmp    c000e980 <tcp_input+0x9f8>
c000e76f:	90                   	nop
c000e770:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e779:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e77c:	0f b7 c0             	movzx  eax,ax
c000e77f:	85 c0                	test   eax,eax
c000e781:	74 55                	je     c000e7d8 <tcp_input+0x850>
c000e783:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e787:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e78d:	85 c0                	test   eax,eax
c000e78f:	74 2f                	je     c000e7c0 <tcp_input+0x838>
c000e791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e795:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e79b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e79f:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e7a2:	0f b7 ca             	movzx  ecx,dx
c000e7a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7a9:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7ac:	83 ec 04             	sub    esp,0x4
c000e7af:	51                   	push   ecx
c000e7b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b4:	52                   	push   edx
c000e7b5:	ff d0                	call   eax
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7be:	eb 08                	jmp    c000e7c8 <tcp_input+0x840>
c000e7c0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e7cd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e7d0:	0f 84 9e 01 00 00    	je     c000e974 <tcp_input+0x9ec>
c000e7d6:	66 90                	xchg   ax,ax
c000e7d8:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7dd:	85 c0                	test   eax,eax
c000e7df:	0f 84 f3 00 00 00    	je     c000e8d8 <tcp_input+0x950>
c000e7e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e9:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e7ef:	85 c0                	test   eax,eax
c000e7f1:	74 15                	je     c000e808 <tcp_input+0x880>
c000e7f3:	83 ec 08             	sub    esp,0x8
c000e7f6:	68 9d 07 03 c0       	push   0xc003079d
c000e7fb:	68 c6 fb 02 c0       	push   0xc002fbc6
c000e800:	e8 93 13 01 00       	call   c001fb98 <CPrintf>
c000e805:	83 c4 10             	add    esp,0x10
c000e808:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e80c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e80f:	0f b6 c0             	movzx  eax,al
c000e812:	83 e0 10             	and    eax,0x10
c000e815:	74 25                	je     c000e83c <tcp_input+0x8b4>
c000e817:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e81c:	83 ec 0c             	sub    esp,0xc
c000e81f:	50                   	push   eax
c000e820:	e8 63 9b ff ff       	call   c0008388 <pbuf_free>
c000e825:	83 c4 10             	add    esp,0x10
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e82f:	e8 80 ca ff ff       	call   c000b2b4 <tcp_abort>
c000e834:	83 c4 10             	add    esp,0x10
c000e837:	e9 44 01 00 00       	jmp    c000e980 <tcp_input+0x9f8>
c000e83c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e841:	0f b6 c0             	movzx  eax,al
c000e844:	83 e0 08             	and    eax,0x8
c000e847:	74 13                	je     c000e85c <tcp_input+0x8d4>
c000e849:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e84e:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e851:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e856:	83 ca 01             	or     edx,0x1
c000e859:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e85c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e860:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e866:	85 c0                	test   eax,eax
c000e868:	74 2a                	je     c000e894 <tcp_input+0x90c>
c000e86a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e874:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e87e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e881:	6a 00                	push   0x0
c000e883:	51                   	push   ecx
c000e884:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e888:	52                   	push   edx
c000e889:	ff d0                	call   eax
c000e88b:	83 c4 10             	add    esp,0x10
c000e88e:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e892:	eb 1c                	jmp    c000e8b0 <tcp_input+0x928>
c000e894:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e899:	6a 00                	push   0x0
c000e89b:	50                   	push   eax
c000e89c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e8a0:	6a 00                	push   0x0
c000e8a2:	e8 15 c6 ff ff       	call   c000aebc <tcp_recv_null>
c000e8a7:	83 c4 10             	add    esp,0x10
c000e8aa:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e8ae:	66 90                	xchg   ax,ax
c000e8b0:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8b5:	83 f8 f6             	cmp    eax,0xfffffff6
c000e8b8:	0f 84 ba 00 00 00    	je     c000e978 <tcp_input+0x9f0>
c000e8be:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e8c3:	85 c0                	test   eax,eax
c000e8c5:	74 11                	je     c000e8d8 <tcp_input+0x950>
c000e8c7:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e8cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8d1:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e8d7:	90                   	nop
c000e8d8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e8dd:	0f b6 c0             	movzx  eax,al
c000e8e0:	83 e0 20             	and    eax,0x20
c000e8e3:	74 6f                	je     c000e954 <tcp_input+0x9cc>
c000e8e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8e9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e8ec:	0f b7 c0             	movzx  eax,ax
c000e8ef:	3d 60 08 00 00       	cmp    eax,0x860
c000e8f4:	74 16                	je     c000e90c <tcp_input+0x984>
c000e8f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8fa:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e8fd:	83 c0 01             	add    eax,0x1
c000e900:	89 c2                	mov    edx,eax
c000e902:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e906:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000e90a:	66 90                	xchg   ax,ax
c000e90c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e910:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e916:	85 c0                	test   eax,eax
c000e918:	74 26                	je     c000e940 <tcp_input+0x9b8>
c000e91a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e91e:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e924:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e928:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e92b:	6a 00                	push   0x0
c000e92d:	6a 00                	push   0x0
c000e92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e933:	52                   	push   edx
c000e934:	ff d0                	call   eax
c000e936:	83 c4 10             	add    esp,0x10
c000e939:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e93d:	eb 09                	jmp    c000e948 <tcp_input+0x9c0>
c000e93f:	90                   	nop
c000e940:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e945:	8d 76 00             	lea    esi,[esi+0x0]
c000e948:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e94d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e950:	74 2a                	je     c000e97c <tcp_input+0x9f4>
c000e952:	66 90                	xchg   ax,ax
c000e954:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e965:	e8 be 15 00 00       	call   c000ff28 <tcp_output>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	eb 11                	jmp    c000e980 <tcp_input+0x9f8>
c000e96f:	90                   	nop
c000e970:	90                   	nop
c000e971:	eb 0d                	jmp    c000e980 <tcp_input+0x9f8>
c000e973:	90                   	nop
c000e974:	90                   	nop
c000e975:	eb 09                	jmp    c000e980 <tcp_input+0x9f8>
c000e977:	90                   	nop
c000e978:	90                   	nop
c000e979:	eb 05                	jmp    c000e980 <tcp_input+0x9f8>
c000e97b:	90                   	nop
c000e97c:	90                   	nop
c000e97d:	8d 76 00             	lea    esi,[esi+0x0]
c000e980:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e98a:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e994:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e999:	85 c0                	test   eax,eax
c000e99b:	0f 84 b7 00 00 00    	je     c000ea58 <tcp_input+0xad0>
c000e9a1:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e9a6:	83 ec 0c             	sub    esp,0xc
c000e9a9:	50                   	push   eax
c000e9aa:	e8 d9 99 ff ff       	call   c0008388 <pbuf_free>
c000e9af:	83 c4 10             	add    esp,0x10
c000e9b2:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e9bc:	e9 97 00 00 00       	jmp    c000ea58 <tcp_input+0xad0>
c000e9c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9c4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e9c9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e9cd:	0f b7 c0             	movzx  eax,ax
c000e9d0:	83 ec 0c             	sub    esp,0xc
c000e9d3:	50                   	push   eax
c000e9d4:	e8 43 22 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e9d9:	83 c4 10             	add    esp,0x10
c000e9dc:	0f b7 c0             	movzx  eax,ax
c000e9df:	83 e0 04             	and    eax,0x4
c000e9e2:	75 64                	jne    c000ea48 <tcp_input+0xac0>
c000e9e4:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e9ea:	83 c0 01             	add    eax,0x1
c000e9ed:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e9f3:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e9f9:	83 c0 01             	add    eax,0x1
c000e9fc:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000ea02:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000ea07:	66 8b 00             	mov    ax,WORD PTR [eax]
c000ea0a:	0f b7 c8             	movzx  ecx,ax
c000ea0d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000ea12:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000ea16:	0f b7 d0             	movzx  edx,ax
c000ea19:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000ea1f:	0f b7 d8             	movzx  ebx,ax
c000ea22:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ea27:	01 c3                	add    ebx,eax
c000ea29:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	51                   	push   ecx
c000ea32:	52                   	push   edx
c000ea33:	68 90 68 03 c0       	push   0xc0036890
c000ea38:	68 98 68 03 c0       	push   0xc0036898
c000ea3d:	53                   	push   ebx
c000ea3e:	50                   	push   eax
c000ea3f:	e8 70 19 00 00       	call   c00103b4 <tcp_rst>
c000ea44:	83 c4 20             	add    esp,0x20
c000ea47:	90                   	nop
c000ea48:	83 ec 0c             	sub    esp,0xc
c000ea4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ea4f:	e8 34 99 ff ff       	call   c0008388 <pbuf_free>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	90                   	nop
c000ea58:	83 c4 18             	add    esp,0x18
c000ea5b:	5b                   	pop    ebx
c000ea5c:	c3                   	ret    
c000ea5d:	66 90                	xchg   ax,ax
c000ea5f:	90                   	nop

c000ea60 <tcp_output_alloc_header>:
c000ea60:	83 ec 2c             	sub    esp,0x2c
c000ea63:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea6b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ea70:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ea75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea7d:	01 d0                	add    eax,edx
c000ea7f:	83 c0 14             	add    eax,0x14
c000ea82:	0f b7 c0             	movzx  eax,ax
c000ea85:	83 ec 04             	sub    esp,0x4
c000ea88:	6a 00                	push   0x0
c000ea8a:	50                   	push   eax
c000ea8b:	6a 01                	push   0x1
c000ea8d:	e8 d2 9a ff ff       	call   c0008564 <pbuf_alloc>
c000ea92:	83 c4 10             	add    esp,0x10
c000ea95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea99:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ea9e:	0f 84 18 01 00 00    	je     c000ebbc <tcp_output_alloc_header+0x15c>
c000eaa4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eaa9:	8d 50 13             	lea    edx,[eax+0x13]
c000eaac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eab0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000eab4:	0f b7 c0             	movzx  eax,ax
c000eab7:	39 c2                	cmp    edx,eax
c000eab9:	7c 15                	jl     c000ead0 <tcp_output_alloc_header+0x70>
c000eabb:	83 ec 08             	sub    esp,0x8
c000eabe:	68 e0 07 03 c0       	push   0xc00307e0
c000eac3:	68 c6 fb 02 c0       	push   0xc002fbc6
c000eac8:	e8 cb 10 01 00       	call   c001fb98 <CPrintf>
c000eacd:	83 c4 10             	add    esp,0x10
c000ead0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ead4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ead7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eadb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eadf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eae2:	0f b7 c0             	movzx  eax,ax
c000eae5:	83 ec 0c             	sub    esp,0xc
c000eae8:	50                   	push   eax
c000eae9:	e8 2e 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eaee:	83 c4 10             	add    esp,0x10
c000eaf1:	89 c2                	mov    edx,eax
c000eaf3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaf7:	66 89 10             	mov    WORD PTR [eax],dx
c000eafa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eafe:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000eb02:	0f b7 c0             	movzx  eax,ax
c000eb05:	83 ec 0c             	sub    esp,0xc
c000eb08:	50                   	push   eax
c000eb09:	e8 0e 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	89 c2                	mov    edx,eax
c000eb13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb17:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000eb1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb1f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eb23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb2a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000eb2d:	83 ec 0c             	sub    esp,0xc
c000eb30:	50                   	push   eax
c000eb31:	e8 0a 21 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000eb36:	83 c4 10             	add    esp,0x10
c000eb39:	89 c2                	mov    edx,eax
c000eb3b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eb42:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eb47:	c1 e8 02             	shr    eax,0x2
c000eb4a:	83 c0 05             	add    eax,0x5
c000eb4d:	c1 e0 0c             	shl    eax,0xc
c000eb50:	83 c8 10             	or     eax,0x10
c000eb53:	0f b7 c0             	movzx  eax,ax
c000eb56:	83 ec 0c             	sub    esp,0xc
c000eb59:	50                   	push   eax
c000eb5a:	e8 bd 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb5f:	83 c4 10             	add    esp,0x10
c000eb62:	89 c2                	mov    edx,eax
c000eb64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb68:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000eb6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb70:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eb74:	0f b7 c0             	movzx  eax,ax
c000eb77:	83 ec 0c             	sub    esp,0xc
c000eb7a:	50                   	push   eax
c000eb7b:	e8 9c 20 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eb80:	83 c4 10             	add    esp,0x10
c000eb83:	89 c2                	mov    edx,eax
c000eb85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb89:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000eb8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb91:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eb97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb9b:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eba1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eba8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebac:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ebb0:	0f b7 c0             	movzx  eax,ax
c000ebb3:	01 c2                	add    edx,eax
c000ebb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebb9:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ebbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ebc0:	83 c4 2c             	add    esp,0x2c
c000ebc3:	c3                   	ret    

c000ebc4 <tcp_create_segment>:
c000ebc4:	53                   	push   ebx
c000ebc5:	83 ec 28             	sub    esp,0x28
c000ebc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ebcc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ebd0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ebd4:	88 d0                	mov    al,dl
c000ebd6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ebda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ebdf:	c1 e0 02             	shl    eax,0x2
c000ebe2:	83 e0 04             	and    eax,0x4
c000ebe5:	88 c2                	mov    dl,al
c000ebe7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ebec:	83 e0 02             	and    eax,0x2
c000ebef:	74 07                	je     c000ebf8 <tcp_create_segment+0x34>
c000ebf1:	b0 0c                	mov    al,0xc
c000ebf3:	eb 07                	jmp    c000ebfc <tcp_create_segment+0x38>
c000ebf5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebf8:	b0 00                	mov    al,0x0
c000ebfa:	66 90                	xchg   ax,ax
c000ebfc:	01 d0                	add    eax,edx
c000ebfe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ec02:	83 ec 0c             	sub    esp,0xc
c000ec05:	6a 04                	push   0x4
c000ec07:	e8 90 8d ff ff       	call   c000799c <memp_malloc>
c000ec0c:	83 c4 10             	add    esp,0x10
c000ec0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec13:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ec18:	75 1a                	jne    c000ec34 <tcp_create_segment+0x70>
c000ec1a:	83 ec 0c             	sub    esp,0xc
c000ec1d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ec21:	e8 62 97 ff ff       	call   c0008388 <pbuf_free>
c000ec26:	83 c4 10             	add    esp,0x10
c000ec29:	b8 00 00 00 00       	mov    eax,0x0
c000ec2e:	e9 31 01 00 00       	jmp    c000ed64 <tcp_create_segment+0x1a0>
c000ec33:	90                   	nop
c000ec34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec38:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000ec3c:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000ec3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec43:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ec49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec4d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec51:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ec54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ec58:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ec5b:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec60:	89 d1                	mov    ecx,edx
c000ec62:	29 c1                	sub    ecx,eax
c000ec64:	89 c8                	mov    eax,ecx
c000ec66:	89 c2                	mov    edx,eax
c000ec68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec6c:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ec70:	83 ec 08             	sub    esp,0x8
c000ec73:	6a 14                	push   0x14
c000ec75:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ec79:	e8 6a 95 ff ff       	call   c00081e8 <pbuf_header>
c000ec7e:	83 c4 10             	add    esp,0x10
c000ec81:	0f b6 c0             	movzx  eax,al
c000ec84:	85 c0                	test   eax,eax
c000ec86:	74 28                	je     c000ecb0 <tcp_create_segment+0xec>
c000ec88:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ec8e:	83 c0 01             	add    eax,0x1
c000ec91:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ec97:	83 ec 0c             	sub    esp,0xc
c000ec9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ec9e:	e8 71 b3 ff ff       	call   c000a014 <tcp_seg_free>
c000eca3:	83 c4 10             	add    esp,0x10
c000eca6:	b8 00 00 00 00       	mov    eax,0x0
c000ecab:	e9 b4 00 00 00       	jmp    c000ed64 <tcp_create_segment+0x1a0>
c000ecb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecb7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ecba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ecc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ecc8:	0f b7 c0             	movzx  eax,ax
c000eccb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eccf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecd2:	83 ec 0c             	sub    esp,0xc
c000ecd5:	50                   	push   eax
c000ecd6:	e8 41 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	66 89 03             	mov    WORD PTR [ebx],ax
c000ece1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece5:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ece9:	0f b7 c0             	movzx  eax,ax
c000ecec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ecf0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ecf3:	83 ec 0c             	sub    esp,0xc
c000ecf6:	50                   	push   eax
c000ecf7:	e8 20 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ecfc:	83 c4 10             	add    esp,0x10
c000ecff:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ed03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed07:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ed0a:	83 ec 0c             	sub    esp,0xc
c000ed0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ed11:	e8 2a 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ed16:	83 c4 10             	add    esp,0x10
c000ed19:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ed1c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ed21:	c1 e8 02             	shr    eax,0x2
c000ed24:	0f b6 c0             	movzx  eax,al
c000ed27:	83 c0 05             	add    eax,0x5
c000ed2a:	c1 e0 0c             	shl    eax,0xc
c000ed2d:	89 c2                	mov    edx,eax
c000ed2f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ed34:	09 d0                	or     eax,edx
c000ed36:	0f b7 c0             	movzx  eax,ax
c000ed39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed3d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ed40:	83 ec 0c             	sub    esp,0xc
c000ed43:	50                   	push   eax
c000ed44:	e8 d3 1e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ed49:	83 c4 10             	add    esp,0x10
c000ed4c:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ed50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed57:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ed5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed61:	8d 76 00             	lea    esi,[esi+0x0]
c000ed64:	83 c4 28             	add    esp,0x28
c000ed67:	5b                   	pop    ebx
c000ed68:	c3                   	ret    
c000ed69:	8d 76 00             	lea    esi,[esi+0x0]

c000ed6c <tcp_pbuf_prealloc>:
c000ed6c:	53                   	push   ebx
c000ed6d:	83 ec 28             	sub    esp,0x28
c000ed70:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ed74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed78:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ed7c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ed80:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ed85:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed8a:	88 d8                	mov    al,bl
c000ed8c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed90:	88 c8                	mov    al,cl
c000ed92:	88 04 24             	mov    BYTE PTR [esp],al
c000ed95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed99:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed9e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000eda3:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000eda8:	39 c2                	cmp    edx,eax
c000edaa:	73 64                	jae    c000ee10 <tcp_pbuf_prealloc+0xa4>
c000edac:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000edb1:	83 e0 02             	and    eax,0x2
c000edb4:	75 2e                	jne    c000ede4 <tcp_pbuf_prealloc+0x78>
c000edb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edba:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000edbd:	0f b6 c0             	movzx  eax,al
c000edc0:	83 e0 40             	and    eax,0x40
c000edc3:	75 4b                	jne    c000ee10 <tcp_pbuf_prealloc+0xa4>
c000edc5:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000edc9:	85 c0                	test   eax,eax
c000edcb:	74 17                	je     c000ede4 <tcp_pbuf_prealloc+0x78>
c000edcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edd1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000edd4:	85 c0                	test   eax,eax
c000edd6:	75 0c                	jne    c000ede4 <tcp_pbuf_prealloc+0x78>
c000edd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eddc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eddf:	85 c0                	test   eax,eax
c000ede1:	74 2d                	je     c000ee10 <tcp_pbuf_prealloc+0xa4>
c000ede3:	90                   	nop
c000ede4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ede9:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000edef:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000edf4:	39 c2                	cmp    edx,eax
c000edf6:	7d 0c                	jge    c000ee04 <tcp_pbuf_prealloc+0x98>
c000edf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edfc:	05 18 02 00 00       	add    eax,0x218
c000ee01:	eb 05                	jmp    c000ee08 <tcp_pbuf_prealloc+0x9c>
c000ee03:	90                   	nop
c000ee04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee08:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ee0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee10:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ee15:	83 ec 04             	sub    esp,0x4
c000ee18:	6a 00                	push   0x0
c000ee1a:	50                   	push   eax
c000ee1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee1f:	e8 40 97 ff ff       	call   c0008564 <pbuf_alloc>
c000ee24:	83 c4 10             	add    esp,0x10
c000ee27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee2b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ee30:	75 0a                	jne    c000ee3c <tcp_pbuf_prealloc+0xd0>
c000ee32:	b8 00 00 00 00       	mov    eax,0x0
c000ee37:	eb 5f                	jmp    c000ee98 <tcp_pbuf_prealloc+0x12c>
c000ee39:	8d 76 00             	lea    esi,[esi+0x0]
c000ee3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee42:	85 c0                	test   eax,eax
c000ee44:	74 16                	je     c000ee5c <tcp_pbuf_prealloc+0xf0>
c000ee46:	83 ec 08             	sub    esp,0x8
c000ee49:	68 64 0a 03 c0       	push   0xc0030a64
c000ee4e:	68 c6 fb 02 c0       	push   0xc002fbc6
c000ee53:	e8 40 0d 01 00       	call   c001fb98 <CPrintf>
c000ee58:	83 c4 10             	add    esp,0x10
c000ee5b:	90                   	nop
c000ee5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee60:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ee64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee68:	89 d1                	mov    ecx,edx
c000ee6a:	29 c1                	sub    ecx,eax
c000ee6c:	89 c8                	mov    eax,ecx
c000ee6e:	89 c2                	mov    edx,eax
c000ee70:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee74:	66 89 10             	mov    WORD PTR [eax],dx
c000ee77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee7f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ee83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee87:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ee8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee8e:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000ee92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee96:	66 90                	xchg   ax,ax
c000ee98:	83 c4 28             	add    esp,0x28
c000ee9b:	5b                   	pop    ebx
c000ee9c:	c3                   	ret    
c000ee9d:	8d 76 00             	lea    esi,[esi+0x0]

c000eea0 <tcp_write_checks>:
c000eea0:	83 ec 1c             	sub    esp,0x1c
c000eea3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eea7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eeac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eeb3:	83 f8 04             	cmp    eax,0x4
c000eeb6:	74 2c                	je     c000eee4 <tcp_write_checks+0x44>
c000eeb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eebf:	83 f8 07             	cmp    eax,0x7
c000eec2:	74 20                	je     c000eee4 <tcp_write_checks+0x44>
c000eec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eecb:	83 f8 02             	cmp    eax,0x2
c000eece:	74 14                	je     c000eee4 <tcp_write_checks+0x44>
c000eed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000eed7:	83 f8 03             	cmp    eax,0x3
c000eeda:	74 08                	je     c000eee4 <tcp_write_checks+0x44>
c000eedc:	b0 f3                	mov    al,0xf3
c000eede:	e9 f9 00 00 00       	jmp    c000efdc <tcp_write_checks+0x13c>
c000eee3:	90                   	nop
c000eee4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eee9:	85 c0                	test   eax,eax
c000eeeb:	75 07                	jne    c000eef4 <tcp_write_checks+0x54>
c000eeed:	b0 00                	mov    al,0x0
c000eeef:	e9 e8 00 00 00       	jmp    c000efdc <tcp_write_checks+0x13c>
c000eef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef8:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000eefc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ef01:	0f b7 c0             	movzx  eax,ax
c000ef04:	39 c2                	cmp    edx,eax
c000ef06:	76 1c                	jbe    c000ef24 <tcp_write_checks+0x84>
c000ef08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef0c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef0f:	83 c8 80             	or     eax,0xffffff80
c000ef12:	88 c2                	mov    dl,al
c000ef14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef18:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ef1b:	b0 ff                	mov    al,0xff
c000ef1d:	e9 ba 00 00 00       	jmp    c000efdc <tcp_write_checks+0x13c>
c000ef22:	66 90                	xchg   ax,ax
c000ef24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef28:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef2b:	0f b7 c0             	movzx  eax,ax
c000ef2e:	83 f8 01             	cmp    eax,0x1
c000ef31:	77 11                	ja     c000ef44 <tcp_write_checks+0xa4>
c000ef33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef37:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef3a:	0f b7 c0             	movzx  eax,ax
c000ef3d:	3d fc ff 00 00       	cmp    eax,0xfffc
c000ef42:	76 28                	jbe    c000ef6c <tcp_write_checks+0xcc>
c000ef44:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000ef4a:	83 c0 01             	add    eax,0x1
c000ef4d:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ef53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef57:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ef5a:	83 c8 80             	or     eax,0xffffff80
c000ef5d:	88 c2                	mov    dl,al
c000ef5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef63:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ef66:	b0 ff                	mov    al,0xff
c000ef68:	eb 72                	jmp    c000efdc <tcp_write_checks+0x13c>
c000ef6a:	66 90                	xchg   ax,ax
c000ef6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef70:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef73:	0f b7 c0             	movzx  eax,ax
c000ef76:	85 c0                	test   eax,eax
c000ef78:	74 2e                	je     c000efa8 <tcp_write_checks+0x108>
c000ef7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef7e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ef81:	85 c0                	test   eax,eax
c000ef83:	75 53                	jne    c000efd8 <tcp_write_checks+0x138>
c000ef85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef89:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef8c:	85 c0                	test   eax,eax
c000ef8e:	75 48                	jne    c000efd8 <tcp_write_checks+0x138>
c000ef90:	83 ec 08             	sub    esp,0x8
c000ef93:	68 10 08 03 c0       	push   0xc0030810
c000ef98:	68 c6 fb 02 c0       	push   0xc002fbc6
c000ef9d:	e8 f6 0b 01 00       	call   c001fb98 <CPrintf>
c000efa2:	83 c4 10             	add    esp,0x10
c000efa5:	eb 31                	jmp    c000efd8 <tcp_write_checks+0x138>
c000efa7:	90                   	nop
c000efa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efac:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000efaf:	85 c0                	test   eax,eax
c000efb1:	75 0d                	jne    c000efc0 <tcp_write_checks+0x120>
c000efb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efb7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000efba:	85 c0                	test   eax,eax
c000efbc:	74 1a                	je     c000efd8 <tcp_write_checks+0x138>
c000efbe:	66 90                	xchg   ax,ax
c000efc0:	83 ec 08             	sub    esp,0x8
c000efc3:	68 4c 08 03 c0       	push   0xc003084c
c000efc8:	68 c6 fb 02 c0       	push   0xc002fbc6
c000efcd:	e8 c6 0b 01 00       	call   c001fb98 <CPrintf>
c000efd2:	83 c4 10             	add    esp,0x10
c000efd5:	8d 76 00             	lea    esi,[esi+0x0]
c000efd8:	b0 00                	mov    al,0x0
c000efda:	66 90                	xchg   ax,ax
c000efdc:	83 c4 1c             	add    esp,0x1c
c000efdf:	c3                   	ret    

c000efe0 <tcp_write>:
c000efe0:	56                   	push   esi
c000efe1:	53                   	push   ebx
c000efe2:	83 ec 54             	sub    esp,0x54
c000efe5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000efe9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000efed:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eff2:	88 d0                	mov    al,dl
c000eff4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eff8:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f000:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000f008:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000f010:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000f018:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000f020:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000f027:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000f02c:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000f031:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000f038:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000f03f:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000f044:	75 1e                	jne    c000f064 <tcp_write+0x84>
c000f046:	83 ec 08             	sub    esp,0x8
c000f049:	68 80 08 03 c0       	push   0xc0030880
c000f04e:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f053:	e8 40 0b 01 00       	call   c001fb98 <CPrintf>
c000f058:	83 c4 10             	add    esp,0x10
c000f05b:	b0 f2                	mov    al,0xf2
c000f05d:	e9 1e 08 00 00       	jmp    c000f880 <tcp_write+0x8a0>
c000f062:	66 90                	xchg   ax,ax
c000f064:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f069:	83 ec 08             	sub    esp,0x8
c000f06c:	50                   	push   eax
c000f06d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f071:	e8 2a fe ff ff       	call   c000eea0 <tcp_write_checks>
c000f076:	83 c4 10             	add    esp,0x10
c000f079:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000f07d:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000f082:	85 c0                	test   eax,eax
c000f084:	74 0a                	je     c000f090 <tcp_write+0xb0>
c000f086:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000f08a:	e9 f1 07 00 00       	jmp    c000f880 <tcp_write+0x8a0>
c000f08f:	90                   	nop
c000f090:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f094:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f097:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f09c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f0a0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0a3:	85 c0                	test   eax,eax
c000f0a5:	0f 84 79 02 00 00    	je     c000f324 <tcp_write+0x344>
c000f0ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f0af:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f0b2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0b6:	eb 0c                	jmp    c000f0c4 <tcp_write+0xe4>
c000f0b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0be:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f0c2:	66 90                	xchg   ax,ax
c000f0c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ca:	85 c0                	test   eax,eax
c000f0cc:	75 ea                	jne    c000f0b8 <tcp_write+0xd8>
c000f0ce:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0d2:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f0d5:	0f b6 c0             	movzx  eax,al
c000f0d8:	c1 e0 02             	shl    eax,0x2
c000f0db:	83 e0 04             	and    eax,0x4
c000f0de:	89 c2                	mov    edx,eax
c000f0e0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0e4:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f0e7:	0f b6 c0             	movzx  eax,al
c000f0ea:	83 e0 02             	and    eax,0x2
c000f0ed:	74 09                	je     c000f0f8 <tcp_write+0x118>
c000f0ef:	b8 0c 00 00 00       	mov    eax,0xc
c000f0f4:	eb 0a                	jmp    c000f100 <tcp_write+0x120>
c000f0f6:	66 90                	xchg   ax,ax
c000f0f8:	b8 00 00 00 00       	mov    eax,0x0
c000f0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f100:	01 d0                	add    eax,edx
c000f102:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f107:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f10b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f10e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f112:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f115:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f11a:	01 c8                	add    eax,ecx
c000f11c:	89 d6                	mov    esi,edx
c000f11e:	29 c6                	sub    esi,eax
c000f120:	89 f0                	mov    eax,esi
c000f122:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f127:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f12b:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f12f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f134:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f139:	0f b7 c0             	movzx  eax,ax
c000f13c:	85 c0                	test   eax,eax
c000f13e:	0f 84 84 00 00 00    	je     c000f1c8 <tcp_write+0x1e8>
c000f144:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f149:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f14e:	39 c2                	cmp    edx,eax
c000f150:	76 16                	jbe    c000f168 <tcp_write+0x188>
c000f152:	83 ec 08             	sub    esp,0x8
c000f155:	68 b4 08 03 c0       	push   0xc00308b4
c000f15a:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f15f:	e8 34 0a 01 00       	call   c001fb98 <CPrintf>
c000f164:	83 c4 10             	add    esp,0x10
c000f167:	90                   	nop
c000f168:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f16c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f170:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f179:	0f b7 d8             	movzx  ebx,ax
c000f17c:	0f b7 ca             	movzx  ecx,dx
c000f17f:	39 cb                	cmp    ebx,ecx
c000f181:	76 05                	jbe    c000f188 <tcp_write+0x1a8>
c000f183:	89 d0                	mov    eax,edx
c000f185:	8d 76 00             	lea    esi,[esi+0x0]
c000f188:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f18d:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f192:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f197:	01 d0                	add    eax,edx
c000f199:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f19e:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f1a3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f1a8:	89 d6                	mov    esi,edx
c000f1aa:	29 c6                	sub    esi,eax
c000f1ac:	89 f0                	mov    eax,esi
c000f1ae:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f1b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f1b7:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f1bc:	89 d6                	mov    esi,edx
c000f1be:	29 c6                	sub    esi,eax
c000f1c0:	89 f0                	mov    eax,esi
c000f1c2:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f1c7:	90                   	nop
c000f1c8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f1cd:	0f b7 c0             	movzx  eax,ax
c000f1d0:	85 c0                	test   eax,eax
c000f1d2:	74 24                	je     c000f1f8 <tcp_write+0x218>
c000f1d4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f1d9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f1de:	39 c2                	cmp    edx,eax
c000f1e0:	74 16                	je     c000f1f8 <tcp_write+0x218>
c000f1e2:	83 ec 08             	sub    esp,0x8
c000f1e5:	68 78 0a 03 c0       	push   0xc0030a78
c000f1ea:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f1ef:	e8 a4 09 01 00       	call   c001fb98 <CPrintf>
c000f1f4:	83 c4 10             	add    esp,0x10
c000f1f7:	90                   	nop
c000f1f8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f1fd:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f202:	39 c2                	cmp    edx,eax
c000f204:	0f 83 ca 03 00 00    	jae    c000f5d4 <tcp_write+0x5f4>
c000f20a:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f20f:	85 c0                	test   eax,eax
c000f211:	0f 84 bd 03 00 00    	je     c000f5d4 <tcp_write+0x5f4>
c000f217:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f21b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f21e:	0f b7 c0             	movzx  eax,ax
c000f221:	85 c0                	test   eax,eax
c000f223:	0f 84 ab 03 00 00    	je     c000f5d4 <tcp_write+0x5f4>
c000f229:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f22e:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f233:	29 c2                	sub    edx,eax
c000f235:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f23a:	39 c2                	cmp    edx,eax
c000f23c:	0f 4e c2             	cmovle eax,edx
c000f23f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f244:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f248:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f24c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f251:	83 e0 01             	and    eax,0x1
c000f254:	74 62                	je     c000f2b8 <tcp_write+0x2d8>
c000f256:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f25b:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f260:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f265:	83 ec 04             	sub    esp,0x4
c000f268:	6a 01                	push   0x1
c000f26a:	51                   	push   ecx
c000f26b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f26f:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f273:	51                   	push   ecx
c000f274:	52                   	push   edx
c000f275:	50                   	push   eax
c000f276:	6a 03                	push   0x3
c000f278:	e8 ef fa ff ff       	call   c000ed6c <tcp_pbuf_prealloc>
c000f27d:	83 c4 20             	add    esp,0x20
c000f280:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f284:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f289:	0f 84 4d 05 00 00    	je     c000f7dc <tcp_write+0x7fc>
c000f28f:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f294:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f299:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f29d:	01 c1                	add    ecx,eax
c000f29f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f2a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f2a6:	83 ec 04             	sub    esp,0x4
c000f2a9:	52                   	push   edx
c000f2aa:	51                   	push   ecx
c000f2ab:	50                   	push   eax
c000f2ac:	e8 c9 10 ff ff       	call   c000037a <memcpy>
c000f2b1:	83 c4 10             	add    esp,0x10
c000f2b4:	eb 3a                	jmp    c000f2f0 <tcp_write+0x310>
c000f2b6:	66 90                	xchg   ax,ax
c000f2b8:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f2bd:	83 ec 04             	sub    esp,0x4
c000f2c0:	6a 01                	push   0x1
c000f2c2:	50                   	push   eax
c000f2c3:	6a 03                	push   0x3
c000f2c5:	e8 9a 92 ff ff       	call   c0008564 <pbuf_alloc>
c000f2ca:	83 c4 10             	add    esp,0x10
c000f2cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f2d1:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f2d6:	0f 84 04 05 00 00    	je     c000f7e0 <tcp_write+0x800>
c000f2dc:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f2e1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f2e5:	01 c2                	add    edx,eax
c000f2e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f2eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f2ee:	66 90                	xchg   ax,ax
c000f2f0:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f2f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f2f9:	01 d0                	add    eax,edx
c000f2fb:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f300:	83 ec 0c             	sub    esp,0xc
c000f303:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f307:	e8 58 98 ff ff       	call   c0008b64 <pbuf_clen>
c000f30c:	83 c4 10             	add    esp,0x10
c000f30f:	0f b6 c0             	movzx  eax,al
c000f312:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f316:	01 d0                	add    eax,edx
c000f318:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f31d:	e9 b2 02 00 00       	jmp    c000f5d4 <tcp_write+0x5f4>
c000f322:	66 90                	xchg   ax,ax
c000f324:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f328:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f32c:	0f b7 c0             	movzx  eax,ax
c000f32f:	85 c0                	test   eax,eax
c000f331:	0f 84 9d 02 00 00    	je     c000f5d4 <tcp_write+0x5f4>
c000f337:	83 ec 08             	sub    esp,0x8
c000f33a:	68 d4 08 03 c0       	push   0xc00308d4
c000f33f:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f344:	e8 4f 08 01 00       	call   c001fb98 <CPrintf>
c000f349:	83 c4 10             	add    esp,0x10
c000f34c:	e9 83 02 00 00       	jmp    c000f5d4 <tcp_write+0x5f4>
c000f351:	8d 76 00             	lea    esi,[esi+0x0]
c000f354:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f358:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f35d:	89 d3                	mov    ebx,edx
c000f35f:	29 c3                	sub    ebx,eax
c000f361:	89 d8                	mov    eax,ebx
c000f363:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f368:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f36c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f36f:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f374:	89 d6                	mov    esi,edx
c000f376:	29 c6                	sub    esi,eax
c000f378:	89 f0                	mov    eax,esi
c000f37a:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f37f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f383:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f388:	0f b7 d8             	movzx  ebx,ax
c000f38b:	0f b7 ca             	movzx  ecx,dx
c000f38e:	39 cb                	cmp    ebx,ecx
c000f390:	76 02                	jbe    c000f394 <tcp_write+0x3b4>
c000f392:	89 d0                	mov    eax,edx
c000f394:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f399:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f39e:	83 e0 01             	and    eax,0x1
c000f3a1:	0f 84 b1 00 00 00    	je     c000f458 <tcp_write+0x478>
c000f3a7:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f3ac:	0f 94 c0             	sete   al
c000f3af:	0f b6 d8             	movzx  ebx,al
c000f3b2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f3b7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f3bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f3be:	0f b7 d0             	movzx  edx,ax
c000f3c1:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f3c6:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f3cb:	01 f0                	add    eax,esi
c000f3cd:	0f b7 c0             	movzx  eax,ax
c000f3d0:	83 ec 04             	sub    esp,0x4
c000f3d3:	53                   	push   ebx
c000f3d4:	51                   	push   ecx
c000f3d5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f3d9:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f3dd:	51                   	push   ecx
c000f3de:	52                   	push   edx
c000f3df:	50                   	push   eax
c000f3e0:	6a 00                	push   0x0
c000f3e2:	e8 85 f9 ff ff       	call   c000ed6c <tcp_pbuf_prealloc>
c000f3e7:	83 c4 20             	add    esp,0x20
c000f3ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f3ee:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f3f3:	0f 84 eb 03 00 00    	je     c000f7e4 <tcp_write+0x804>
c000f3f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f3fd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f401:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f406:	0f b7 c0             	movzx  eax,ax
c000f409:	39 c2                	cmp    edx,eax
c000f40b:	76 17                	jbe    c000f424 <tcp_write+0x444>
c000f40d:	83 ec 08             	sub    esp,0x8
c000f410:	68 04 09 03 c0       	push   0xc0030904
c000f415:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f41a:	e8 79 07 01 00       	call   c001fb98 <CPrintf>
c000f41f:	83 c4 10             	add    esp,0x10
c000f422:	66 90                	xchg   ax,ax
c000f424:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f429:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f42e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f432:	01 d1                	add    ecx,edx
c000f434:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f438:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f43b:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f440:	01 da                	add    edx,ebx
c000f442:	83 ec 04             	sub    esp,0x4
c000f445:	50                   	push   eax
c000f446:	51                   	push   ecx
c000f447:	52                   	push   edx
c000f448:	e8 2d 0f ff ff       	call   c000037a <memcpy>
c000f44d:	83 c4 10             	add    esp,0x10
c000f450:	e9 a7 00 00 00       	jmp    c000f4fc <tcp_write+0x51c>
c000f455:	8d 76 00             	lea    esi,[esi+0x0]
c000f458:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f45d:	0f b7 c0             	movzx  eax,ax
c000f460:	85 c0                	test   eax,eax
c000f462:	74 18                	je     c000f47c <tcp_write+0x49c>
c000f464:	83 ec 08             	sub    esp,0x8
c000f467:	68 96 0a 03 c0       	push   0xc0030a96
c000f46c:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f471:	e8 22 07 01 00       	call   c001fb98 <CPrintf>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	8d 76 00             	lea    esi,[esi+0x0]
c000f47c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f481:	83 ec 04             	sub    esp,0x4
c000f484:	6a 01                	push   0x1
c000f486:	50                   	push   eax
c000f487:	6a 00                	push   0x0
c000f489:	e8 d6 90 ff ff       	call   c0008564 <pbuf_alloc>
c000f48e:	83 c4 10             	add    esp,0x10
c000f491:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f495:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f49a:	0f 84 48 03 00 00    	je     c000f7e8 <tcp_write+0x808>
c000f4a0:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4a5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f4a9:	01 c2                	add    edx,eax
c000f4ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f4af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f4b2:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f4b7:	83 ec 04             	sub    esp,0x4
c000f4ba:	6a 00                	push   0x0
c000f4bc:	50                   	push   eax
c000f4bd:	6a 00                	push   0x0
c000f4bf:	e8 a0 90 ff ff       	call   c0008564 <pbuf_alloc>
c000f4c4:	83 c4 10             	add    esp,0x10
c000f4c7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f4cb:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f4d0:	75 16                	jne    c000f4e8 <tcp_write+0x508>
c000f4d2:	83 ec 0c             	sub    esp,0xc
c000f4d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f4d9:	e8 aa 8e ff ff       	call   c0008388 <pbuf_free>
c000f4de:	83 c4 10             	add    esp,0x10
c000f4e1:	e9 0a 03 00 00       	jmp    c000f7f0 <tcp_write+0x810>
c000f4e6:	66 90                	xchg   ax,ax
c000f4e8:	83 ec 08             	sub    esp,0x8
c000f4eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f4ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f4f3:	e8 d4 96 ff ff       	call   c0008bcc <pbuf_cat>
c000f4f8:	83 c4 10             	add    esp,0x10
c000f4fb:	90                   	nop
c000f4fc:	83 ec 0c             	sub    esp,0xc
c000f4ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f503:	e8 5c 96 ff ff       	call   c0008b64 <pbuf_clen>
c000f508:	83 c4 10             	add    esp,0x10
c000f50b:	0f b6 c0             	movzx  eax,al
c000f50e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f512:	01 d0                	add    eax,edx
c000f514:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f519:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f51e:	83 f8 02             	cmp    eax,0x2
c000f521:	77 0d                	ja     c000f530 <tcp_write+0x550>
c000f523:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f528:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f52d:	76 15                	jbe    c000f544 <tcp_write+0x564>
c000f52f:	90                   	nop
c000f530:	83 ec 0c             	sub    esp,0xc
c000f533:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f537:	e8 4c 8e ff ff       	call   c0008388 <pbuf_free>
c000f53c:	83 c4 10             	add    esp,0x10
c000f53f:	e9 ac 02 00 00       	jmp    c000f7f0 <tcp_write+0x810>
c000f544:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f549:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f54d:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f550:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f555:	01 ca                	add    edx,ecx
c000f557:	83 ec 0c             	sub    esp,0xc
c000f55a:	50                   	push   eax
c000f55b:	52                   	push   edx
c000f55c:	6a 00                	push   0x0
c000f55e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f562:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f566:	e8 59 f6 ff ff       	call   c000ebc4 <tcp_create_segment>
c000f56b:	83 c4 20             	add    esp,0x20
c000f56e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f572:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f577:	0f 84 6f 02 00 00    	je     c000f7ec <tcp_write+0x80c>
c000f57d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f582:	75 0c                	jne    c000f590 <tcp_write+0x5b0>
c000f584:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f588:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f58c:	eb 2a                	jmp    c000f5b8 <tcp_write+0x5d8>
c000f58e:	66 90                	xchg   ax,ax
c000f590:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f595:	75 15                	jne    c000f5ac <tcp_write+0x5cc>
c000f597:	83 ec 08             	sub    esp,0x8
c000f59a:	68 a4 0a 03 c0       	push   0xc0030aa4
c000f59f:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f5a4:	e8 ef 05 01 00       	call   c001fb98 <CPrintf>
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f5b0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f5b4:	89 10                	mov    DWORD PTR [eax],edx
c000f5b6:	66 90                	xchg   ax,ax
c000f5b8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f5bc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f5c0:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f5c5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f5ca:	01 d0                	add    eax,edx
c000f5cc:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d4:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f5d9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f5de:	39 c2                	cmp    edx,eax
c000f5e0:	0f 82 6e fd ff ff    	jb     c000f354 <tcp_write+0x374>
c000f5e6:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f5eb:	85 c0                	test   eax,eax
c000f5ed:	0f 84 a1 00 00 00    	je     c000f694 <tcp_write+0x6b4>
c000f5f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5fe:	eb 74                	jmp    c000f674 <tcp_write+0x694>
c000f600:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f607:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f60c:	01 d0                	add    eax,edx
c000f60e:	89 c2                	mov    edx,eax
c000f610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f614:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f618:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f61c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61e:	85 c0                	test   eax,eax
c000f620:	75 46                	jne    c000f668 <tcp_write+0x688>
c000f622:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f627:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f62b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f62e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f632:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f636:	0f b7 d2             	movzx  edx,dx
c000f639:	01 ca                	add    edx,ecx
c000f63b:	83 ec 04             	sub    esp,0x4
c000f63e:	50                   	push   eax
c000f63f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f643:	52                   	push   edx
c000f644:	e8 31 0d ff ff       	call   c000037a <memcpy>
c000f649:	83 c4 10             	add    esp,0x10
c000f64c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f650:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f654:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f659:	01 d0                	add    eax,edx
c000f65b:	89 c2                	mov    edx,eax
c000f65d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f661:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f665:	8d 76 00             	lea    esi,[esi+0x0]
c000f668:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f66e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f672:	66 90                	xchg   ax,ax
c000f674:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f679:	75 85                	jne    c000f600 <tcp_write+0x620>
c000f67b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f67f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f682:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f687:	01 d0                	add    eax,edx
c000f689:	89 c2                	mov    edx,eax
c000f68b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f68f:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f693:	90                   	nop
c000f694:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f699:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f69d:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f6a1:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f6a6:	74 50                	je     c000f6f8 <tcp_write+0x718>
c000f6a8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f6ad:	75 15                	jne    c000f6c4 <tcp_write+0x6e4>
c000f6af:	83 ec 08             	sub    esp,0x8
c000f6b2:	68 44 09 03 c0       	push   0xc0030944
c000f6b7:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f6bc:	e8 d7 04 01 00       	call   c001fb98 <CPrintf>
c000f6c1:	83 c4 10             	add    esp,0x10
c000f6c4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6cb:	83 ec 08             	sub    esp,0x8
c000f6ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f6d2:	50                   	push   eax
c000f6d3:	e8 f4 94 ff ff       	call   c0008bcc <pbuf_cat>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6df:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f6e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f6e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f6e9:	01 d0                	add    eax,edx
c000f6eb:	89 c2                	mov    edx,eax
c000f6ed:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f6f1:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f6f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f6f8:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f6fd:	75 0d                	jne    c000f70c <tcp_write+0x72c>
c000f6ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f703:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f707:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f70a:	eb 0c                	jmp    c000f718 <tcp_write+0x738>
c000f70c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f710:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f714:	89 10                	mov    DWORD PTR [eax],edx
c000f716:	66 90                	xchg   ax,ax
c000f718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f71c:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f71f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f724:	01 c2                	add    edx,eax
c000f726:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f72a:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f72d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f731:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f735:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f739:	89 d3                	mov    ebx,edx
c000f73b:	29 c3                	sub    ebx,eax
c000f73d:	89 d8                	mov    eax,ebx
c000f73f:	89 c2                	mov    edx,eax
c000f741:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f745:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f749:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f74d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f751:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f755:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f759:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f75c:	0f b7 c0             	movzx  eax,ax
c000f75f:	85 c0                	test   eax,eax
c000f761:	74 2d                	je     c000f790 <tcp_write+0x7b0>
c000f763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f767:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f76a:	85 c0                	test   eax,eax
c000f76c:	75 22                	jne    c000f790 <tcp_write+0x7b0>
c000f76e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f772:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f775:	85 c0                	test   eax,eax
c000f777:	75 17                	jne    c000f790 <tcp_write+0x7b0>
c000f779:	83 ec 08             	sub    esp,0x8
c000f77c:	68 b5 0a 03 c0       	push   0xc0030ab5
c000f781:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f786:	e8 0d 04 01 00       	call   c001fb98 <CPrintf>
c000f78b:	83 c4 10             	add    esp,0x10
c000f78e:	66 90                	xchg   ax,ax
c000f790:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f795:	74 3d                	je     c000f7d4 <tcp_write+0x7f4>
c000f797:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f79b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f79e:	85 c0                	test   eax,eax
c000f7a0:	74 32                	je     c000f7d4 <tcp_write+0x7f4>
c000f7a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f7a7:	83 e0 02             	and    eax,0x2
c000f7aa:	75 28                	jne    c000f7d4 <tcp_write+0x7f4>
c000f7ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f7b3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f7b7:	83 ec 0c             	sub    esp,0xc
c000f7ba:	6a 08                	push   0x8
c000f7bc:	e8 5b 14 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	89 c2                	mov    edx,eax
c000f7c6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f7cd:	09 da                	or     edx,ebx
c000f7cf:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f7d3:	90                   	nop
c000f7d4:	b0 00                	mov    al,0x0
c000f7d6:	e9 a5 00 00 00       	jmp    c000f880 <tcp_write+0x8a0>
c000f7db:	90                   	nop
c000f7dc:	90                   	nop
c000f7dd:	eb 11                	jmp    c000f7f0 <tcp_write+0x810>
c000f7df:	90                   	nop
c000f7e0:	90                   	nop
c000f7e1:	eb 0d                	jmp    c000f7f0 <tcp_write+0x810>
c000f7e3:	90                   	nop
c000f7e4:	90                   	nop
c000f7e5:	eb 09                	jmp    c000f7f0 <tcp_write+0x810>
c000f7e7:	90                   	nop
c000f7e8:	90                   	nop
c000f7e9:	eb 05                	jmp    c000f7f0 <tcp_write+0x810>
c000f7eb:	90                   	nop
c000f7ec:	90                   	nop
c000f7ed:	8d 76 00             	lea    esi,[esi+0x0]
c000f7f0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7f4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f7f7:	83 c8 80             	or     eax,0xffffff80
c000f7fa:	88 c2                	mov    dl,al
c000f7fc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f800:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f803:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f809:	83 c0 01             	add    eax,0x1
c000f80c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f812:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f817:	74 0f                	je     c000f828 <tcp_write+0x848>
c000f819:	83 ec 0c             	sub    esp,0xc
c000f81c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f820:	e8 63 8b ff ff       	call   c0008388 <pbuf_free>
c000f825:	83 c4 10             	add    esp,0x10
c000f828:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f82d:	74 11                	je     c000f840 <tcp_write+0x860>
c000f82f:	83 ec 0c             	sub    esp,0xc
c000f832:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f836:	e8 1d a8 ff ff       	call   c000a058 <tcp_segs_free>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	66 90                	xchg   ax,ax
c000f840:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f844:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f847:	0f b7 c0             	movzx  eax,ax
c000f84a:	85 c0                	test   eax,eax
c000f84c:	74 2e                	je     c000f87c <tcp_write+0x89c>
c000f84e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f852:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f855:	85 c0                	test   eax,eax
c000f857:	75 23                	jne    c000f87c <tcp_write+0x89c>
c000f859:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f85d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f860:	85 c0                	test   eax,eax
c000f862:	75 18                	jne    c000f87c <tcp_write+0x89c>
c000f864:	83 ec 08             	sub    esp,0x8
c000f867:	68 b5 0a 03 c0       	push   0xc0030ab5
c000f86c:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f871:	e8 22 03 01 00       	call   c001fb98 <CPrintf>
c000f876:	83 c4 10             	add    esp,0x10
c000f879:	8d 76 00             	lea    esi,[esi+0x0]
c000f87c:	b0 ff                	mov    al,0xff
c000f87e:	66 90                	xchg   ax,ax
c000f880:	83 c4 54             	add    esp,0x54
c000f883:	5b                   	pop    ebx
c000f884:	5e                   	pop    esi
c000f885:	c3                   	ret    
c000f886:	66 90                	xchg   ax,ax

c000f888 <tcp_enqueue_flags>:
c000f888:	83 ec 3c             	sub    esp,0x3c
c000f88b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f88f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f893:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f898:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f89d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f8a2:	83 e0 03             	and    eax,0x3
c000f8a5:	75 15                	jne    c000f8bc <tcp_enqueue_flags+0x34>
c000f8a7:	83 ec 08             	sub    esp,0x8
c000f8aa:	68 7c 09 03 c0       	push   0xc003097c
c000f8af:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f8b4:	e8 df 02 01 00       	call   c001fb98 <CPrintf>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8c3:	0f b7 c0             	movzx  eax,ax
c000f8c6:	83 f8 01             	cmp    eax,0x1
c000f8c9:	77 11                	ja     c000f8dc <tcp_enqueue_flags+0x54>
c000f8cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8cf:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f8d2:	0f b7 c0             	movzx  eax,ax
c000f8d5:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f8da:	76 2c                	jbe    c000f908 <tcp_enqueue_flags+0x80>
c000f8dc:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8e2:	83 c0 01             	add    eax,0x1
c000f8e5:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8ef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8f2:	83 c8 80             	or     eax,0xffffff80
c000f8f5:	88 c2                	mov    dl,al
c000f8f7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8fb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8fe:	b0 ff                	mov    al,0xff
c000f900:	e9 6f 02 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f90d:	83 e0 02             	and    eax,0x2
c000f910:	74 06                	je     c000f918 <tcp_enqueue_flags+0x90>
c000f912:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f917:	90                   	nop
c000f918:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f91d:	c1 e0 02             	shl    eax,0x2
c000f920:	83 e0 04             	and    eax,0x4
c000f923:	88 c2                	mov    dl,al
c000f925:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f92a:	83 e0 02             	and    eax,0x2
c000f92d:	74 05                	je     c000f934 <tcp_enqueue_flags+0xac>
c000f92f:	b0 0c                	mov    al,0xc
c000f931:	eb 05                	jmp    c000f938 <tcp_enqueue_flags+0xb0>
c000f933:	90                   	nop
c000f934:	b0 00                	mov    al,0x0
c000f936:	66 90                	xchg   ax,ax
c000f938:	01 d0                	add    eax,edx
c000f93a:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f93e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f942:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f946:	0f b7 c0             	movzx  eax,ax
c000f949:	85 c0                	test   eax,eax
c000f94b:	75 17                	jne    c000f964 <tcp_enqueue_flags+0xdc>
c000f94d:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f953:	83 c0 01             	add    eax,0x1
c000f956:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f95c:	b0 ff                	mov    al,0xff
c000f95e:	e9 11 02 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000f963:	90                   	nop
c000f964:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f969:	83 ec 04             	sub    esp,0x4
c000f96c:	6a 00                	push   0x0
c000f96e:	50                   	push   eax
c000f96f:	6a 00                	push   0x0
c000f971:	e8 ee 8b ff ff       	call   c0008564 <pbuf_alloc>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f97d:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f982:	75 2c                	jne    c000f9b0 <tcp_enqueue_flags+0x128>
c000f984:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f988:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f98b:	83 c8 80             	or     eax,0xffffff80
c000f98e:	88 c2                	mov    dl,al
c000f990:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f994:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f997:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f99d:	83 c0 01             	add    eax,0x1
c000f9a0:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f9a6:	b0 ff                	mov    al,0xff
c000f9a8:	e9 c7 01 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000f9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f9b4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f9b8:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f9bd:	0f b7 d2             	movzx  edx,dx
c000f9c0:	0f b7 c0             	movzx  eax,ax
c000f9c3:	39 c2                	cmp    edx,eax
c000f9c5:	73 15                	jae    c000f9dc <tcp_enqueue_flags+0x154>
c000f9c7:	83 ec 08             	sub    esp,0x8
c000f9ca:	68 d4 09 03 c0       	push   0xc00309d4
c000f9cf:	68 c6 fb 02 c0       	push   0xc002fbc6
c000f9d4:	e8 bf 01 01 00       	call   c001fb98 <CPrintf>
c000f9d9:	83 c4 10             	add    esp,0x10
c000f9dc:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f9e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e5:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f9e8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9ed:	83 ec 0c             	sub    esp,0xc
c000f9f0:	51                   	push   ecx
c000f9f1:	52                   	push   edx
c000f9f2:	50                   	push   eax
c000f9f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f9f7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f9fb:	e8 c4 f1 ff ff       	call   c000ebc4 <tcp_create_segment>
c000fa00:	83 c4 20             	add    esp,0x20
c000fa03:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fa07:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fa0c:	75 2a                	jne    c000fa38 <tcp_enqueue_flags+0x1b0>
c000fa0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa12:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa15:	83 c8 80             	or     eax,0xffffff80
c000fa18:	88 c2                	mov    dl,al
c000fa1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa1e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa21:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000fa27:	83 c0 01             	add    eax,0x1
c000fa2a:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000fa30:	b0 ff                	mov    al,0xff
c000fa32:	e9 3d 01 00 00       	jmp    c000fb74 <tcp_enqueue_flags+0x2ec>
c000fa37:	90                   	nop
c000fa38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa3c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fa3f:	0f b7 c0             	movzx  eax,ax
c000fa42:	85 c0                	test   eax,eax
c000fa44:	74 16                	je     c000fa5c <tcp_enqueue_flags+0x1d4>
c000fa46:	83 ec 08             	sub    esp,0x8
c000fa49:	68 10 0a 03 c0       	push   0xc0030a10
c000fa4e:	68 c6 fb 02 c0       	push   0xc002fbc6
c000fa53:	e8 40 01 01 00       	call   c001fb98 <CPrintf>
c000fa58:	83 c4 10             	add    esp,0x10
c000fa5b:	90                   	nop
c000fa5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa60:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa63:	85 c0                	test   eax,eax
c000fa65:	75 0d                	jne    c000fa74 <tcp_enqueue_flags+0x1ec>
c000fa67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000fa6f:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000fa72:	eb 30                	jmp    c000faa4 <tcp_enqueue_flags+0x21c>
c000fa74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa78:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fa7f:	eb 0f                	jmp    c000fa90 <tcp_enqueue_flags+0x208>
c000fa81:	8d 76 00             	lea    esi,[esi+0x0]
c000fa84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa88:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fa8e:	66 90                	xchg   ax,ax
c000fa90:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa94:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa96:	85 c0                	test   eax,eax
c000fa98:	75 ea                	jne    c000fa84 <tcp_enqueue_flags+0x1fc>
c000fa9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000faa2:	89 10                	mov    DWORD PTR [eax],edx
c000faa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000faa8:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000faae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fab3:	83 e0 02             	and    eax,0x2
c000fab6:	75 0c                	jne    c000fac4 <tcp_enqueue_flags+0x23c>
c000fab8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fabd:	83 e0 01             	and    eax,0x1
c000fac0:	74 2a                	je     c000faec <tcp_enqueue_flags+0x264>
c000fac2:	66 90                	xchg   ax,ax
c000fac4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fac8:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000facb:	8d 50 01             	lea    edx,[eax+0x1]
c000face:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fad2:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fad5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fad9:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fadd:	83 e8 01             	sub    eax,0x1
c000fae0:	89 c2                	mov    edx,eax
c000fae2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fae6:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000faea:	66 90                	xchg   ax,ax
c000faec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000faf1:	83 e0 01             	and    eax,0x1
c000faf4:	74 16                	je     c000fb0c <tcp_enqueue_flags+0x284>
c000faf6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fafa:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fafd:	83 c8 20             	or     eax,0x20
c000fb00:	88 c2                	mov    dl,al
c000fb02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb06:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb09:	8d 76 00             	lea    esi,[esi+0x0]
c000fb0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fb10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb13:	83 ec 0c             	sub    esp,0xc
c000fb16:	50                   	push   eax
c000fb17:	e8 48 90 ff ff       	call   c0008b64 <pbuf_clen>
c000fb1c:	83 c4 10             	add    esp,0x10
c000fb1f:	88 c1                	mov    cl,al
c000fb21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb25:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fb28:	0f b6 c1             	movzx  eax,cl
c000fb2b:	01 d0                	add    eax,edx
c000fb2d:	89 c2                	mov    edx,eax
c000fb2f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb33:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fb37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb3b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fb3e:	0f b7 c0             	movzx  eax,ax
c000fb41:	85 c0                	test   eax,eax
c000fb43:	74 2b                	je     c000fb70 <tcp_enqueue_flags+0x2e8>
c000fb45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb49:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fb4c:	85 c0                	test   eax,eax
c000fb4e:	75 20                	jne    c000fb70 <tcp_enqueue_flags+0x2e8>
c000fb50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb54:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb57:	85 c0                	test   eax,eax
c000fb59:	75 15                	jne    c000fb70 <tcp_enqueue_flags+0x2e8>
c000fb5b:	83 ec 08             	sub    esp,0x8
c000fb5e:	68 3c 0a 03 c0       	push   0xc0030a3c
c000fb63:	68 c6 fb 02 c0       	push   0xc002fbc6
c000fb68:	e8 2b 00 01 00       	call   c001fb98 <CPrintf>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	b0 00                	mov    al,0x0
c000fb72:	66 90                	xchg   ax,ax
c000fb74:	83 c4 3c             	add    esp,0x3c
c000fb77:	c3                   	ret    

c000fb78 <tcp_send_fin>:
c000fb78:	53                   	push   ebx
c000fb79:	83 ec 18             	sub    esp,0x18
c000fb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb80:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb83:	85 c0                	test   eax,eax
c000fb85:	74 71                	je     c000fbf8 <tcp_send_fin+0x80>
c000fb87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fb8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb92:	eb 0c                	jmp    c000fba0 <tcp_send_fin+0x28>
c000fb94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb9e:	66 90                	xchg   ax,ax
c000fba0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fba4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba6:	85 c0                	test   eax,eax
c000fba8:	75 ea                	jne    c000fb94 <tcp_send_fin+0x1c>
c000fbaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbb1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fbb5:	0f b7 c0             	movzx  eax,ax
c000fbb8:	83 ec 0c             	sub    esp,0xc
c000fbbb:	50                   	push   eax
c000fbbc:	e8 5b 10 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fbc1:	83 c4 10             	add    esp,0x10
c000fbc4:	0f b7 c0             	movzx  eax,ax
c000fbc7:	83 e0 07             	and    eax,0x7
c000fbca:	75 2c                	jne    c000fbf8 <tcp_send_fin+0x80>
c000fbcc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbd0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbd3:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fbd7:	83 ec 0c             	sub    esp,0xc
c000fbda:	6a 01                	push   0x1
c000fbdc:	e8 3b 10 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	89 c2                	mov    edx,eax
c000fbe6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fbea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fbed:	09 da                	or     edx,ebx
c000fbef:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fbf3:	b0 00                	mov    al,0x0
c000fbf5:	eb 15                	jmp    c000fc0c <tcp_send_fin+0x94>
c000fbf7:	90                   	nop
c000fbf8:	83 ec 08             	sub    esp,0x8
c000fbfb:	6a 01                	push   0x1
c000fbfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc01:	e8 82 fc ff ff       	call   c000f888 <tcp_enqueue_flags>
c000fc06:	83 c4 10             	add    esp,0x10
c000fc09:	8d 76 00             	lea    esi,[esi+0x0]
c000fc0c:	83 c4 18             	add    esp,0x18
c000fc0f:	5b                   	pop    ebx
c000fc10:	c3                   	ret    
c000fc11:	8d 76 00             	lea    esi,[esi+0x0]

c000fc14 <tcp_send_empty_ack>:
c000fc14:	53                   	push   ebx
c000fc15:	83 ec 18             	sub    esp,0x18
c000fc18:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc21:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fc24:	83 ec 0c             	sub    esp,0xc
c000fc27:	50                   	push   eax
c000fc28:	e8 13 10 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	89 c2                	mov    edx,eax
c000fc32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fc37:	52                   	push   edx
c000fc38:	6a 00                	push   0x0
c000fc3a:	50                   	push   eax
c000fc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fc3f:	e8 1c ee ff ff       	call   c000ea60 <tcp_output_alloc_header>
c000fc44:	83 c4 10             	add    esp,0x10
c000fc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc4b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc50:	75 0a                	jne    c000fc5c <tcp_send_empty_ack+0x48>
c000fc52:	b0 fe                	mov    al,0xfe
c000fc54:	e9 9b 00 00 00       	jmp    c000fcf4 <tcp_send_empty_ack+0xe0>
c000fc59:	8d 76 00             	lea    esi,[esi+0x0]
c000fc5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fc67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc6b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fc6e:	83 e0 fc             	and    eax,0xfffffffc
c000fc71:	88 c2                	mov    dl,al
c000fc73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc77:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fc7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fc81:	0f b7 d0             	movzx  edx,ax
c000fc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc88:	8d 48 04             	lea    ecx,[eax+0x4]
c000fc8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	52                   	push   edx
c000fc93:	6a 06                	push   0x6
c000fc95:	51                   	push   ecx
c000fc96:	50                   	push   eax
c000fc97:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc9b:	e8 a4 35 00 00       	call   c0013244 <inet_chksum_pseudo>
c000fca0:	83 c4 20             	add    esp,0x20
c000fca3:	89 c2                	mov    edx,eax
c000fca5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fca9:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fcad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb1:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fcb4:	0f b6 c8             	movzx  ecx,al
c000fcb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcbb:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcbe:	0f b6 d0             	movzx  edx,al
c000fcc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc5:	8d 58 04             	lea    ebx,[eax+0x4]
c000fcc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fccc:	83 ec 08             	sub    esp,0x8
c000fccf:	6a 06                	push   0x6
c000fcd1:	51                   	push   ecx
c000fcd2:	52                   	push   edx
c000fcd3:	53                   	push   ebx
c000fcd4:	50                   	push   eax
c000fcd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcd9:	e8 a6 41 00 00       	call   c0013e84 <ip_output>
c000fcde:	83 c4 20             	add    esp,0x20
c000fce1:	83 ec 0c             	sub    esp,0xc
c000fce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fce8:	e8 9b 86 ff ff       	call   c0008388 <pbuf_free>
c000fced:	83 c4 10             	add    esp,0x10
c000fcf0:	b0 00                	mov    al,0x0
c000fcf2:	66 90                	xchg   ax,ax
c000fcf4:	83 c4 18             	add    esp,0x18
c000fcf7:	5b                   	pop    ebx
c000fcf8:	c3                   	ret    
c000fcf9:	8d 76 00             	lea    esi,[esi+0x0]

c000fcfc <tcp_output_segment>:
c000fcfc:	56                   	push   esi
c000fcfd:	53                   	push   ebx
c000fcfe:	83 ec 14             	sub    esp,0x14
c000fd01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd05:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fd08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	50                   	push   eax
c000fd13:	e8 28 0f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fd1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd22:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fd26:	0f b7 c0             	movzx  eax,ax
c000fd29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd2d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	50                   	push   eax
c000fd34:	e8 e3 0e ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fd39:	83 c4 10             	add    esp,0x10
c000fd3c:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fd40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd44:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fd47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd4b:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fd4f:	0f b7 c0             	movzx  eax,ax
c000fd52:	01 c2                	add    edx,eax
c000fd54:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd58:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fd5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd62:	83 c0 14             	add    eax,0x14
c000fd65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6d:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fd70:	0f b6 c0             	movzx  eax,al
c000fd73:	83 e0 01             	and    eax,0x1
c000fd76:	74 10                	je     c000fd88 <tcp_output_segment+0x8c>
c000fd78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd7c:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fd82:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fd87:	90                   	nop
c000fd88:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd8c:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fd90:	98                   	cwde   
c000fd91:	83 f8 ff             	cmp    eax,0xffffffff
c000fd94:	75 0a                	jne    c000fda0 <tcp_output_segment+0xa4>
c000fd96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd9a:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fda0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fda4:	85 c0                	test   eax,eax
c000fda6:	74 0c                	je     c000fdb4 <tcp_output_segment+0xb8>
c000fda8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdac:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdae:	85 c0                	test   eax,eax
c000fdb0:	75 32                	jne    c000fde4 <tcp_output_segment+0xe8>
c000fdb2:	66 90                	xchg   ax,ax
c000fdb4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdb8:	83 c0 04             	add    eax,0x4
c000fdbb:	83 ec 0c             	sub    esp,0xc
c000fdbe:	50                   	push   eax
c000fdbf:	e8 0c 39 00 00       	call   c00136d0 <ip_route>
c000fdc4:	83 c4 10             	add    esp,0x10
c000fdc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fdcb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fdd0:	0f 84 46 01 00 00    	je     c000ff1c <tcp_output_segment+0x220>
c000fdd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fdda:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fddd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fde1:	89 10                	mov    DWORD PTR [eax],edx
c000fde3:	90                   	nop
c000fde4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fde8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fdeb:	85 c0                	test   eax,eax
c000fded:	75 2d                	jne    c000fe1c <tcp_output_segment+0x120>
c000fdef:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fdf5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdf9:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	50                   	push   eax
c000fe0a:	e8 31 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fe0f:	83 c4 10             	add    esp,0x10
c000fe12:	89 c2                	mov    edx,eax
c000fe14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe18:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fe1b:	90                   	nop
c000fe1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe20:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fe23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe2d:	29 c2                	sub    edx,eax
c000fe2f:	89 d0                	mov    eax,edx
c000fe31:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fe36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe3d:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000fe41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe45:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe48:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fe4d:	89 ce                	mov    esi,ecx
c000fe4f:	29 d6                	sub    esi,edx
c000fe51:	89 f2                	mov    edx,esi
c000fe53:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000fe57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe5e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000fe61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe68:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fe6d:	89 ce                	mov    esi,ecx
c000fe6f:	29 d6                	sub    esi,edx
c000fe71:	89 f2                	mov    edx,esi
c000fe73:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000fe77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe7e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fe82:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fe85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fe88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe8f:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fe95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe9f:	0f b7 c8             	movzx  ecx,ax
c000fea2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fea6:	8d 70 04             	lea    esi,[eax+0x4]
c000fea9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000feb4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000feb8:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	51                   	push   ecx
c000febf:	6a 06                	push   0x6
c000fec1:	56                   	push   esi
c000fec2:	52                   	push   edx
c000fec3:	50                   	push   eax
c000fec4:	e8 7b 33 00 00       	call   c0013244 <inet_chksum_pseudo>
c000fec9:	83 c4 20             	add    esp,0x20
c000fecc:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fed0:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fed6:	83 c0 01             	add    eax,0x1
c000fed9:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fedf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fee3:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fee6:	0f b6 d8             	movzx  ebx,al
c000fee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000feed:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fef0:	0f b6 c8             	movzx  ecx,al
c000fef3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fef7:	8d 70 04             	lea    esi,[eax+0x4]
c000fefa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fefe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff05:	83 ec 08             	sub    esp,0x8
c000ff08:	6a 06                	push   0x6
c000ff0a:	53                   	push   ebx
c000ff0b:	51                   	push   ecx
c000ff0c:	56                   	push   esi
c000ff0d:	52                   	push   edx
c000ff0e:	50                   	push   eax
c000ff0f:	e8 70 3f 00 00       	call   c0013e84 <ip_output>
c000ff14:	83 c4 20             	add    esp,0x20
c000ff17:	eb 07                	jmp    c000ff20 <tcp_output_segment+0x224>
c000ff19:	8d 76 00             	lea    esi,[esi+0x0]
c000ff1c:	90                   	nop
c000ff1d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff20:	83 c4 14             	add    esp,0x14
c000ff23:	5b                   	pop    ebx
c000ff24:	5e                   	pop    esi
c000ff25:	c3                   	ret    
c000ff26:	66 90                	xchg   ax,ax

c000ff28 <tcp_output>:
c000ff28:	56                   	push   esi
c000ff29:	53                   	push   ebx
c000ff2a:	83 ec 24             	sub    esp,0x24
c000ff2d:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000ff32:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ff36:	75 08                	jne    c000ff40 <tcp_output+0x18>
c000ff38:	b0 00                	mov    al,0x0
c000ff3a:	e9 6d 04 00 00       	jmp    c00103ac <tcp_output+0x484>
c000ff3f:	90                   	nop
c000ff40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff44:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000ff48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff4c:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000ff4f:	89 c8                	mov    eax,ecx
c000ff51:	0f b7 d8             	movzx  ebx,ax
c000ff54:	0f b7 ca             	movzx  ecx,dx
c000ff57:	39 cb                	cmp    ebx,ecx
c000ff59:	76 05                	jbe    c000ff60 <tcp_output+0x38>
c000ff5b:	89 d0                	mov    eax,edx
c000ff5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff60:	0f b7 c0             	movzx  eax,ax
c000ff63:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff6b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff76:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff79:	0f b6 c0             	movzx  eax,al
c000ff7c:	83 e0 02             	and    eax,0x2
c000ff7f:	74 4f                	je     c000ffd0 <tcp_output+0xa8>
c000ff81:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ff86:	74 34                	je     c000ffbc <tcp_output+0x94>
c000ff88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	50                   	push   eax
c000ff96:	e8 a5 0c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	89 c2                	mov    edx,eax
c000ffa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa4:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000ffa7:	29 c2                	sub    edx,eax
c000ffa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ffb0:	0f b7 c0             	movzx  eax,ax
c000ffb3:	01 d0                	add    eax,edx
c000ffb5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000ffb9:	73 15                	jae    c000ffd0 <tcp_output+0xa8>
c000ffbb:	90                   	nop
c000ffbc:	83 ec 0c             	sub    esp,0xc
c000ffbf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ffc3:	e8 4c fc ff ff       	call   c000fc14 <tcp_send_empty_ack>
c000ffc8:	83 c4 10             	add    esp,0x10
c000ffcb:	e9 dc 03 00 00       	jmp    c00103ac <tcp_output+0x484>
c000ffd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffd4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ffd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffdb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ffe0:	0f 84 e6 02 00 00    	je     c00102cc <tcp_output+0x3a4>
c000ffe6:	eb 0c                	jmp    c000fff4 <tcp_output+0xcc>
c000ffe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffec:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff2:	66 90                	xchg   ax,ax
c000fff4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fff8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fffa:	85 c0                	test   eax,eax
c000fffc:	75 ea                	jne    c000ffe8 <tcp_output+0xc0>
c000fffe:	e9 c9 02 00 00       	jmp    c00102cc <tcp_output+0x3a4>
c0010003:	90                   	nop
c0010004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010008:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001000b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001000f:	0f b7 c0             	movzx  eax,ax
c0010012:	83 ec 0c             	sub    esp,0xc
c0010015:	50                   	push   eax
c0010016:	e8 01 0c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	0f b7 c0             	movzx  eax,ax
c0010021:	83 e0 04             	and    eax,0x4
c0010024:	74 16                	je     c001003c <tcp_output+0x114>
c0010026:	83 ec 08             	sub    esp,0x8
c0010029:	68 d3 0a 03 c0       	push   0xc0030ad3
c001002e:	68 c6 fb 02 c0       	push   0xc002fbc6
c0010033:	e8 60 fb 00 00       	call   c001fb98 <CPrintf>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	90                   	nop
c001003c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010040:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010043:	85 c0                	test   eax,eax
c0010045:	74 45                	je     c001008c <tcp_output+0x164>
c0010047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001004b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001004e:	0f b6 c0             	movzx  eax,al
c0010051:	83 e0 44             	and    eax,0x44
c0010054:	75 36                	jne    c001008c <tcp_output+0x164>
c0010056:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001005a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001005d:	85 c0                	test   eax,eax
c001005f:	74 33                	je     c0010094 <tcp_output+0x16c>
c0010061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010065:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010068:	8b 00                	mov    eax,DWORD PTR [eax]
c001006a:	85 c0                	test   eax,eax
c001006c:	75 1e                	jne    c001008c <tcp_output+0x164>
c001006e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010072:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010075:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0010078:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001007c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001007f:	0f b7 d2             	movzx  edx,dx
c0010082:	0f b7 c0             	movzx  eax,ax
c0010085:	39 c2                	cmp    edx,eax
c0010087:	72 0b                	jb     c0010094 <tcp_output+0x16c>
c0010089:	8d 76 00             	lea    esi,[esi+0x0]
c001008c:	b8 01 00 00 00       	mov    eax,0x1
c0010091:	eb 09                	jmp    c001009c <tcp_output+0x174>
c0010093:	90                   	nop
c0010094:	b8 00 00 00 00       	mov    eax,0x0
c0010099:	8d 76 00             	lea    esi,[esi+0x0]
c001009c:	85 c0                	test   eax,eax
c001009e:	75 18                	jne    c00100b8 <tcp_output+0x190>
c00100a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100a4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00100a7:	0f b6 c0             	movzx  eax,al
c00100aa:	25 a0 00 00 00       	and    eax,0xa0
c00100af:	0f 84 57 02 00 00    	je     c001030c <tcp_output+0x3e4>
c00100b5:	8d 76 00             	lea    esi,[esi+0x0]
c00100b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00100be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100c2:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00100c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100c9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00100cc:	83 f8 02             	cmp    eax,0x2
c00100cf:	74 3b                	je     c001010c <tcp_output+0x1e4>
c00100d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100d8:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	6a 10                	push   0x10
c00100e1:	e8 36 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00100e6:	83 c4 10             	add    esp,0x10
c00100e9:	89 c2                	mov    edx,eax
c00100eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100f2:	09 da                	or     edx,ebx
c00100f4:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c00100f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100fc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00100ff:	83 e0 fc             	and    eax,0xfffffffc
c0010102:	88 c2                	mov    dl,al
c0010104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010108:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001010b:	90                   	nop
c001010c:	83 ec 08             	sub    esp,0x8
c001010f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010113:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010117:	e8 e0 fb ff ff       	call   c000fcfc <tcp_output_segment>
c001011c:	83 c4 10             	add    esp,0x10
c001011f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010123:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010126:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	50                   	push   eax
c001012d:	e8 0e 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010132:	83 c4 10             	add    esp,0x10
c0010135:	89 c3                	mov    ebx,eax
c0010137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001013b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001013e:	0f b7 f0             	movzx  esi,ax
c0010141:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010148:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001014c:	0f b7 c0             	movzx  eax,ax
c001014f:	83 ec 0c             	sub    esp,0xc
c0010152:	50                   	push   eax
c0010153:	e8 c4 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010158:	83 c4 10             	add    esp,0x10
c001015b:	0f b7 c0             	movzx  eax,ax
c001015e:	83 e0 03             	and    eax,0x3
c0010161:	0f 95 c0             	setne  al
c0010164:	0f b6 c0             	movzx  eax,al
c0010167:	01 f0                	add    eax,esi
c0010169:	01 d8                	add    eax,ebx
c001016b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001016f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010173:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010176:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001017a:	79 0c                	jns    c0010188 <tcp_output+0x260>
c001017c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010180:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010184:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c0010187:	90                   	nop
c0010188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001018c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001018f:	0f b7 d8             	movzx  ebx,ax
c0010192:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010196:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010199:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001019d:	0f b7 c0             	movzx  eax,ax
c00101a0:	83 ec 0c             	sub    esp,0xc
c00101a3:	50                   	push   eax
c00101a4:	e8 73 0a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00101a9:	83 c4 10             	add    esp,0x10
c00101ac:	0f b7 c0             	movzx  eax,ax
c00101af:	83 e0 03             	and    eax,0x3
c00101b2:	0f 95 c0             	setne  al
c00101b5:	0f b6 c0             	movzx  eax,al
c00101b8:	01 d8                	add    eax,ebx
c00101ba:	85 c0                	test   eax,eax
c00101bc:	0f 8e ee 00 00 00    	jle    c00102b0 <tcp_output+0x388>
c00101c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00101cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101d0:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00101d3:	85 c0                	test   eax,eax
c00101d5:	75 19                	jne    c00101f0 <tcp_output+0x2c8>
c00101d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101df:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00101e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101ea:	e9 d1 00 00 00       	jmp    c00102c0 <tcp_output+0x398>
c00101ef:	90                   	nop
c00101f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101f4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	50                   	push   eax
c00101fe:	e8 3d 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010203:	83 c4 10             	add    esp,0x10
c0010206:	89 c3                	mov    ebx,eax
c0010208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001020c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001020f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010212:	83 ec 0c             	sub    esp,0xc
c0010215:	50                   	push   eax
c0010216:	e8 25 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001021b:	83 c4 10             	add    esp,0x10
c001021e:	29 c3                	sub    ebx,eax
c0010220:	89 d8                	mov    eax,ebx
c0010222:	79 74                	jns    c0010298 <tcp_output+0x370>
c0010224:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010228:	83 c0 7c             	add    eax,0x7c
c001022b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001022f:	eb 0f                	jmp    c0010240 <tcp_output+0x318>
c0010231:	8d 76 00             	lea    esi,[esi+0x0]
c0010234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010238:	8b 00                	mov    eax,DWORD PTR [eax]
c001023a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001023e:	66 90                	xchg   ax,ax
c0010240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010244:	8b 00                	mov    eax,DWORD PTR [eax]
c0010246:	85 c0                	test   eax,eax
c0010248:	74 36                	je     c0010280 <tcp_output+0x358>
c001024a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001024e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010250:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010253:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	50                   	push   eax
c001025a:	e8 e1 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001025f:	83 c4 10             	add    esp,0x10
c0010262:	89 c3                	mov    ebx,eax
c0010264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010268:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001026b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	50                   	push   eax
c0010272:	e8 c9 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010277:	83 c4 10             	add    esp,0x10
c001027a:	29 c3                	sub    ebx,eax
c001027c:	89 d8                	mov    eax,ebx
c001027e:	78 b4                	js     c0010234 <tcp_output+0x30c>
c0010280:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010284:	8b 10                	mov    edx,DWORD PTR [eax]
c0010286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001028a:	89 10                	mov    DWORD PTR [eax],edx
c001028c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010290:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010294:	89 10                	mov    DWORD PTR [eax],edx
c0010296:	eb 28                	jmp    c00102c0 <tcp_output+0x398>
c0010298:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001029c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00102a0:	89 10                	mov    DWORD PTR [eax],edx
c00102a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00102a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00102a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ac:	eb 12                	jmp    c00102c0 <tcp_output+0x398>
c00102ae:	66 90                	xchg   ax,ax
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00102b7:	e8 58 9d ff ff       	call   c000a014 <tcp_seg_free>
c00102bc:	83 c4 10             	add    esp,0x10
c00102bf:	90                   	nop
c00102c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00102c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102cb:	90                   	nop
c00102cc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00102d1:	74 3d                	je     c0010310 <tcp_output+0x3e8>
c00102d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102dd:	83 ec 0c             	sub    esp,0xc
c00102e0:	50                   	push   eax
c00102e1:	e8 5a 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00102e6:	83 c4 10             	add    esp,0x10
c00102e9:	89 c2                	mov    edx,eax
c00102eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102ef:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102f2:	29 c2                	sub    edx,eax
c00102f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102fb:	0f b7 c0             	movzx  eax,ax
c00102fe:	01 d0                	add    eax,edx
c0010300:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010304:	0f 83 fa fc ff ff    	jae    c0010004 <tcp_output+0xdc>
c001030a:	eb 04                	jmp    c0010310 <tcp_output+0x3e8>
c001030c:	90                   	nop
c001030d:	8d 76 00             	lea    esi,[esi+0x0]
c0010310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010314:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010317:	85 c0                	test   eax,eax
c0010319:	75 0d                	jne    c0010328 <tcp_output+0x400>
c001031b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001031f:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010325:	8d 76 00             	lea    esi,[esi+0x0]
c0010328:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001032d:	74 65                	je     c0010394 <tcp_output+0x46c>
c001032f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010333:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010339:	0f b6 c0             	movzx  eax,al
c001033c:	85 c0                	test   eax,eax
c001033e:	75 54                	jne    c0010394 <tcp_output+0x46c>
c0010340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010344:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010347:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001034a:	83 ec 0c             	sub    esp,0xc
c001034d:	50                   	push   eax
c001034e:	e8 ed 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010353:	83 c4 10             	add    esp,0x10
c0010356:	89 c2                	mov    edx,eax
c0010358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001035c:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001035f:	29 c2                	sub    edx,eax
c0010361:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010365:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010368:	0f b7 c0             	movzx  eax,ax
c001036b:	01 c2                	add    edx,eax
c001036d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010371:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010374:	0f b7 c0             	movzx  eax,ax
c0010377:	39 c2                	cmp    edx,eax
c0010379:	76 19                	jbe    c0010394 <tcp_output+0x46c>
c001037b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001037f:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010389:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001038d:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c0010394:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010398:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001039b:	83 e0 7f             	and    eax,0x7f
c001039e:	88 c2                	mov    dl,al
c00103a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00103a4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00103a7:	b0 00                	mov    al,0x0
c00103a9:	8d 76 00             	lea    esi,[esi+0x0]
c00103ac:	83 c4 24             	add    esp,0x24
c00103af:	5b                   	pop    ebx
c00103b0:	5e                   	pop    esi
c00103b1:	c3                   	ret    
c00103b2:	66 90                	xchg   ax,ax

c00103b4 <tcp_rst>:
c00103b4:	83 ec 2c             	sub    esp,0x2c
c00103b7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00103bb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00103bf:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c00103c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00103c9:	83 ec 04             	sub    esp,0x4
c00103cc:	6a 00                	push   0x0
c00103ce:	6a 14                	push   0x14
c00103d0:	6a 01                	push   0x1
c00103d2:	e8 8d 81 ff ff       	call   c0008564 <pbuf_alloc>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00103de:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00103e3:	0f 84 3f 01 00 00    	je     c0010528 <tcp_rst+0x174>
c00103e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00103ed:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00103f1:	0f b7 c0             	movzx  eax,ax
c00103f4:	83 f8 13             	cmp    eax,0x13
c00103f7:	77 17                	ja     c0010410 <tcp_rst+0x5c>
c00103f9:	83 ec 08             	sub    esp,0x8
c00103fc:	68 e0 07 03 c0       	push   0xc00307e0
c0010401:	68 c6 fb 02 c0       	push   0xc002fbc6
c0010406:	e8 8d f7 00 00       	call   c001fb98 <CPrintf>
c001040b:	83 c4 10             	add    esp,0x10
c001040e:	66 90                	xchg   ax,ax
c0010410:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001041b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0010420:	83 ec 0c             	sub    esp,0xc
c0010423:	50                   	push   eax
c0010424:	e8 f3 07 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010429:	83 c4 10             	add    esp,0x10
c001042c:	89 c2                	mov    edx,eax
c001042e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010432:	66 89 10             	mov    WORD PTR [eax],dx
c0010435:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c001043a:	83 ec 0c             	sub    esp,0xc
c001043d:	50                   	push   eax
c001043e:	e8 d9 07 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	89 c2                	mov    edx,eax
c0010448:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001044c:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010457:	e8 e4 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001045c:	83 c4 10             	add    esp,0x10
c001045f:	89 c2                	mov    edx,eax
c0010461:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010465:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010468:	83 ec 0c             	sub    esp,0xc
c001046b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001046f:	e8 cc 07 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	89 c2                	mov    edx,eax
c0010479:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001047d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010480:	83 ec 0c             	sub    esp,0xc
c0010483:	68 14 50 00 00       	push   0x5014
c0010488:	e8 8f 07 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	89 c2                	mov    edx,eax
c0010492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010496:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001049a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001049e:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c00104a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00104a8:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00104ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00104b2:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c00104b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00104bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00104bf:	0f b7 c0             	movzx  eax,ax
c00104c2:	83 ec 0c             	sub    esp,0xc
c00104c5:	50                   	push   eax
c00104c6:	6a 06                	push   0x6
c00104c8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00104cc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00104d0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00104d4:	e8 6b 2d 00 00       	call   c0013244 <inet_chksum_pseudo>
c00104d9:	83 c4 20             	add    esp,0x20
c00104dc:	89 c2                	mov    edx,eax
c00104de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00104e2:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00104e6:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00104ec:	83 c0 01             	add    eax,0x1
c00104ef:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00104f5:	83 ec 08             	sub    esp,0x8
c00104f8:	6a 06                	push   0x6
c00104fa:	6a 00                	push   0x0
c00104fc:	68 ff 00 00 00       	push   0xff
c0010501:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010505:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010509:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001050d:	e8 72 39 00 00       	call   c0013e84 <ip_output>
c0010512:	83 c4 20             	add    esp,0x20
c0010515:	83 ec 0c             	sub    esp,0xc
c0010518:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001051c:	e8 67 7e ff ff       	call   c0008388 <pbuf_free>
c0010521:	83 c4 10             	add    esp,0x10
c0010524:	eb 06                	jmp    c001052c <tcp_rst+0x178>
c0010526:	66 90                	xchg   ax,ax
c0010528:	90                   	nop
c0010529:	8d 76 00             	lea    esi,[esi+0x0]
c001052c:	83 c4 2c             	add    esp,0x2c
c001052f:	c3                   	ret    

c0010530 <tcp_rexmit_rto>:
c0010530:	83 ec 1c             	sub    esp,0x1c
c0010533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010537:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001053a:	85 c0                	test   eax,eax
c001053c:	74 7a                	je     c00105b8 <tcp_rexmit_rto+0x88>
c001053e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010542:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010545:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010549:	eb 0d                	jmp    c0010558 <tcp_rexmit_rto+0x28>
c001054b:	90                   	nop
c001054c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010550:	8b 00                	mov    eax,DWORD PTR [eax]
c0010552:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010556:	66 90                	xchg   ax,ax
c0010558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001055c:	8b 00                	mov    eax,DWORD PTR [eax]
c001055e:	85 c0                	test   eax,eax
c0010560:	75 ea                	jne    c001054c <tcp_rexmit_rto+0x1c>
c0010562:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010566:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c0010569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001056d:	89 10                	mov    DWORD PTR [eax],edx
c001056f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010573:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c0010576:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001057a:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c001057d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010581:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001058c:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c001058f:	83 c0 01             	add    eax,0x1
c0010592:	88 c2                	mov    dl,al
c0010594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010598:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001059b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001059f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105a6:	83 ec 0c             	sub    esp,0xc
c00105a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00105ad:	e8 76 f9 ff ff       	call   c000ff28 <tcp_output>
c00105b2:	83 c4 10             	add    esp,0x10
c00105b5:	eb 05                	jmp    c00105bc <tcp_rexmit_rto+0x8c>
c00105b7:	90                   	nop
c00105b8:	90                   	nop
c00105b9:	8d 76 00             	lea    esi,[esi+0x0]
c00105bc:	83 c4 1c             	add    esp,0x1c
c00105bf:	c3                   	ret    

c00105c0 <tcp_rexmit>:
c00105c0:	53                   	push   ebx
c00105c1:	83 ec 18             	sub    esp,0x18
c00105c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105c8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105cb:	85 c0                	test   eax,eax
c00105cd:	0f 84 a9 00 00 00    	je     c001067c <tcp_rexmit+0xbc>
c00105d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105d7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00105e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00105e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105e8:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c00105eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105ef:	83 c0 78             	add    eax,0x78
c00105f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00105f6:	eb 0c                	jmp    c0010604 <tcp_rexmit+0x44>
c00105f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00105fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010602:	66 90                	xchg   ax,ax
c0010604:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010608:	8b 00                	mov    eax,DWORD PTR [eax]
c001060a:	85 c0                	test   eax,eax
c001060c:	74 36                	je     c0010644 <tcp_rexmit+0x84>
c001060e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010612:	8b 00                	mov    eax,DWORD PTR [eax]
c0010614:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010617:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	50                   	push   eax
c001061e:	e8 1d 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010623:	83 c4 10             	add    esp,0x10
c0010626:	89 c3                	mov    ebx,eax
c0010628:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001062c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001062f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	50                   	push   eax
c0010636:	e8 05 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001063b:	83 c4 10             	add    esp,0x10
c001063e:	29 c3                	sub    ebx,eax
c0010640:	89 d8                	mov    eax,ebx
c0010642:	78 b4                	js     c00105f8 <tcp_rexmit+0x38>
c0010644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010648:	8b 10                	mov    edx,DWORD PTR [eax]
c001064a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001064e:	89 10                	mov    DWORD PTR [eax],edx
c0010650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010658:	89 10                	mov    DWORD PTR [eax],edx
c001065a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065e:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010661:	83 c0 01             	add    eax,0x1
c0010664:	88 c2                	mov    dl,al
c0010666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001066a:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001066d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010671:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010678:	eb 06                	jmp    c0010680 <tcp_rexmit+0xc0>
c001067a:	66 90                	xchg   ax,ax
c001067c:	90                   	nop
c001067d:	8d 76 00             	lea    esi,[esi+0x0]
c0010680:	83 c4 18             	add    esp,0x18
c0010683:	5b                   	pop    ebx
c0010684:	c3                   	ret    
c0010685:	8d 76 00             	lea    esi,[esi+0x0]

c0010688 <tcp_rexmit_fast>:
c0010688:	83 ec 0c             	sub    esp,0xc
c001068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010692:	85 c0                	test   eax,eax
c0010694:	0f 84 d2 00 00 00    	je     c001076c <tcp_rexmit_fast+0xe4>
c001069a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106a1:	0f b6 c0             	movzx  eax,al
c00106a4:	83 e0 04             	and    eax,0x4
c00106a7:	0f 85 bf 00 00 00    	jne    c001076c <tcp_rexmit_fast+0xe4>
c00106ad:	83 ec 0c             	sub    esp,0xc
c00106b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b4:	e8 07 ff ff ff       	call   c00105c0 <tcp_rexmit>
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c00106c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c8:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00106cb:	0f b7 d2             	movzx  edx,dx
c00106ce:	0f b7 c0             	movzx  eax,ax
c00106d1:	39 c2                	cmp    edx,eax
c00106d3:	76 1b                	jbe    c00106f0 <tcp_rexmit_fast+0x68>
c00106d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106d9:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00106dc:	0f b7 c0             	movzx  eax,ax
c00106df:	d1 e8                	shr    eax,1
c00106e1:	89 c2                	mov    edx,eax
c00106e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106e7:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c00106eb:	eb 1b                	jmp    c0010708 <tcp_rexmit_fast+0x80>
c00106ed:	8d 76 00             	lea    esi,[esi+0x0]
c00106f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f4:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c00106f8:	0f b7 c0             	movzx  eax,ax
c00106fb:	d1 e8                	shr    eax,1
c00106fd:	89 c2                	mov    edx,eax
c00106ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010703:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010707:	90                   	nop
c0010708:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070c:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001070f:	0f b7 d0             	movzx  edx,ax
c0010712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010716:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010719:	0f b7 c0             	movzx  eax,ax
c001071c:	d1 e0                	shl    eax,1
c001071e:	39 c2                	cmp    edx,eax
c0010720:	7d 16                	jge    c0010738 <tcp_rexmit_fast+0xb0>
c0010722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010726:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010729:	d1 e0                	shl    eax,1
c001072b:	89 c2                	mov    edx,eax
c001072d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010731:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010735:	8d 76 00             	lea    esi,[esi+0x0]
c0010738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073c:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001073f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010743:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010746:	89 c1                	mov    ecx,eax
c0010748:	d1 e1                	shl    ecx,1
c001074a:	01 c8                	add    eax,ecx
c001074c:	01 d0                	add    eax,edx
c001074e:	89 c2                	mov    edx,eax
c0010750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010754:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c0010758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001075c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001075f:	83 c8 04             	or     eax,0x4
c0010762:	88 c2                	mov    dl,al
c0010764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010768:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001076b:	90                   	nop
c001076c:	90                   	nop
c001076d:	83 c4 0c             	add    esp,0xc
c0010770:	c3                   	ret    
c0010771:	8d 76 00             	lea    esi,[esi+0x0]

c0010774 <tcp_keepalive>:
c0010774:	83 ec 1c             	sub    esp,0x1c
c0010777:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001077b:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001077e:	83 e8 01             	sub    eax,0x1
c0010781:	83 ec 0c             	sub    esp,0xc
c0010784:	50                   	push   eax
c0010785:	e8 b6 04 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001078a:	83 c4 10             	add    esp,0x10
c001078d:	50                   	push   eax
c001078e:	6a 00                	push   0x0
c0010790:	6a 00                	push   0x0
c0010792:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010796:	e8 c5 e2 ff ff       	call   c000ea60 <tcp_output_alloc_header>
c001079b:	83 c4 10             	add    esp,0x10
c001079e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107a7:	0f 84 8b 00 00 00    	je     c0010838 <tcp_keepalive+0xc4>
c00107ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107bf:	0f b7 d0             	movzx  edx,ax
c00107c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107c6:	8d 48 04             	lea    ecx,[eax+0x4]
c00107c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	52                   	push   edx
c00107d1:	6a 06                	push   0x6
c00107d3:	51                   	push   ecx
c00107d4:	50                   	push   eax
c00107d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00107d9:	e8 66 2a 00 00       	call   c0013244 <inet_chksum_pseudo>
c00107de:	83 c4 20             	add    esp,0x20
c00107e1:	89 c2                	mov    edx,eax
c00107e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107e7:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00107eb:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00107f1:	83 c0 01             	add    eax,0x1
c00107f4:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00107fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107fe:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010801:	0f b6 d0             	movzx  edx,al
c0010804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010808:	8d 48 04             	lea    ecx,[eax+0x4]
c001080b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001080f:	83 ec 08             	sub    esp,0x8
c0010812:	6a 06                	push   0x6
c0010814:	6a 00                	push   0x0
c0010816:	52                   	push   edx
c0010817:	51                   	push   ecx
c0010818:	50                   	push   eax
c0010819:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001081d:	e8 62 36 00 00       	call   c0013e84 <ip_output>
c0010822:	83 c4 20             	add    esp,0x20
c0010825:	83 ec 0c             	sub    esp,0xc
c0010828:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001082c:	e8 57 7b ff ff       	call   c0008388 <pbuf_free>
c0010831:	83 c4 10             	add    esp,0x10
c0010834:	eb 06                	jmp    c001083c <tcp_keepalive+0xc8>
c0010836:	66 90                	xchg   ax,ax
c0010838:	90                   	nop
c0010839:	8d 76 00             	lea    esi,[esi+0x0]
c001083c:	83 c4 1c             	add    esp,0x1c
c001083f:	c3                   	ret    

c0010840 <tcp_zero_window_probe>:
c0010840:	53                   	push   ebx
c0010841:	83 ec 28             	sub    esp,0x28
c0010844:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010848:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001084b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001084f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010854:	75 0e                	jne    c0010864 <tcp_zero_window_probe+0x24>
c0010856:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001085a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001085d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010861:	8d 76 00             	lea    esi,[esi+0x0]
c0010864:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010869:	0f 84 99 01 00 00    	je     c0010a08 <tcp_zero_window_probe+0x1c8>
c001086f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010873:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010876:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001087a:	0f b7 c0             	movzx  eax,ax
c001087d:	83 ec 0c             	sub    esp,0xc
c0010880:	50                   	push   eax
c0010881:	e8 96 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010886:	83 c4 10             	add    esp,0x10
c0010889:	0f b7 c0             	movzx  eax,ax
c001088c:	83 e0 01             	and    eax,0x1
c001088f:	74 17                	je     c00108a8 <tcp_zero_window_probe+0x68>
c0010891:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010895:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010898:	0f b7 c0             	movzx  eax,ax
c001089b:	85 c0                	test   eax,eax
c001089d:	75 09                	jne    c00108a8 <tcp_zero_window_probe+0x68>
c001089f:	b8 01 00 00 00       	mov    eax,0x1
c00108a4:	eb 0a                	jmp    c00108b0 <tcp_zero_window_probe+0x70>
c00108a6:	66 90                	xchg   ax,ax
c00108a8:	b8 00 00 00 00       	mov    eax,0x0
c00108ad:	8d 76 00             	lea    esi,[esi+0x0]
c00108b0:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00108b4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00108b9:	85 c0                	test   eax,eax
c00108bb:	0f 94 c0             	sete   al
c00108be:	0f b6 c0             	movzx  eax,al
c00108c1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00108c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108cd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00108d0:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00108d5:	52                   	push   edx
c00108d6:	50                   	push   eax
c00108d7:	6a 00                	push   0x0
c00108d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108dd:	e8 7e e1 ff ff       	call   c000ea60 <tcp_output_alloc_header>
c00108e2:	83 c4 10             	add    esp,0x10
c00108e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00108e9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00108ee:	0f 84 18 01 00 00    	je     c0010a0c <tcp_zero_window_probe+0x1cc>
c00108f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00108ff:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010904:	85 c0                	test   eax,eax
c0010906:	74 28                	je     c0010930 <tcp_zero_window_probe+0xf0>
c0010908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010910:	80 e4 c0             	and    ah,0xc0
c0010913:	89 c3                	mov    ebx,eax
c0010915:	83 ec 0c             	sub    esp,0xc
c0010918:	6a 11                	push   0x11
c001091a:	e8 fd 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001091f:	83 c4 10             	add    esp,0x10
c0010922:	09 d8                	or     eax,ebx
c0010924:	89 c2                	mov    edx,eax
c0010926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092a:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001092e:	eb 58                	jmp    c0010988 <tcp_zero_window_probe+0x148>
c0010930:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010937:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001093a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001093e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010942:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010945:	83 c0 14             	add    eax,0x14
c0010948:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001094c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010950:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010954:	0f b7 c0             	movzx  eax,ax
c0010957:	83 ec 0c             	sub    esp,0xc
c001095a:	50                   	push   eax
c001095b:	e8 bc 02 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010960:	83 c4 10             	add    esp,0x10
c0010963:	0f b7 c0             	movzx  eax,ax
c0010966:	c1 e8 0c             	shr    eax,0xc
c0010969:	c1 e0 02             	shl    eax,0x2
c001096c:	0f b7 d0             	movzx  edx,ax
c001096f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010973:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010976:	52                   	push   edx
c0010977:	6a 01                	push   0x1
c0010979:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001097d:	50                   	push   eax
c001097e:	e8 b1 86 ff ff       	call   c0009034 <pbuf_copy_partial>
c0010983:	83 c4 10             	add    esp,0x10
c0010986:	66 90                	xchg   ax,ax
c0010988:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001098c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001098f:	0f b7 d0             	movzx  edx,ax
c0010992:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010996:	8d 48 04             	lea    ecx,[eax+0x4]
c0010999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001099d:	83 ec 0c             	sub    esp,0xc
c00109a0:	52                   	push   edx
c00109a1:	6a 06                	push   0x6
c00109a3:	51                   	push   ecx
c00109a4:	50                   	push   eax
c00109a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00109a9:	e8 96 28 00 00       	call   c0013244 <inet_chksum_pseudo>
c00109ae:	83 c4 20             	add    esp,0x20
c00109b1:	89 c2                	mov    edx,eax
c00109b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b7:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c00109bb:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c00109c1:	83 c0 01             	add    eax,0x1
c00109c4:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c00109ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109ce:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00109d1:	0f b6 d0             	movzx  edx,al
c00109d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109d8:	8d 48 04             	lea    ecx,[eax+0x4]
c00109db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00109df:	83 ec 08             	sub    esp,0x8
c00109e2:	6a 06                	push   0x6
c00109e4:	6a 00                	push   0x0
c00109e6:	52                   	push   edx
c00109e7:	51                   	push   ecx
c00109e8:	50                   	push   eax
c00109e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00109ed:	e8 92 34 00 00       	call   c0013e84 <ip_output>
c00109f2:	83 c4 20             	add    esp,0x20
c00109f5:	83 ec 0c             	sub    esp,0xc
c00109f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00109fc:	e8 87 79 ff ff       	call   c0008388 <pbuf_free>
c0010a01:	83 c4 10             	add    esp,0x10
c0010a04:	eb 0a                	jmp    c0010a10 <tcp_zero_window_probe+0x1d0>
c0010a06:	66 90                	xchg   ax,ax
c0010a08:	90                   	nop
c0010a09:	eb 05                	jmp    c0010a10 <tcp_zero_window_probe+0x1d0>
c0010a0b:	90                   	nop
c0010a0c:	90                   	nop
c0010a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a10:	83 c4 28             	add    esp,0x28
c0010a13:	5b                   	pop    ebx
c0010a14:	c3                   	ret    
c0010a15:	66 90                	xchg   ax,ax
c0010a17:	90                   	nop

c0010a18 <sys_timeout>:
c0010a18:	83 ec 1c             	sub    esp,0x1c
c0010a1b:	83 ec 0c             	sub    esp,0xc
c0010a1e:	6a 0b                	push   0xb
c0010a20:	e8 77 6f ff ff       	call   c000799c <memp_malloc>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a2c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010a31:	75 25                	jne    c0010a58 <sys_timeout+0x40>
c0010a33:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010a38:	0f 85 3e 01 00 00    	jne    c0010b7c <sys_timeout+0x164>
c0010a3e:	83 ec 08             	sub    esp,0x8
c0010a41:	68 ec 0a 03 c0       	push   0xc0030aec
c0010a46:	68 c6 fb 02 c0       	push   0xc002fbc6
c0010a4b:	e8 48 f1 00 00       	call   c001fb98 <CPrintf>
c0010a50:	83 c4 10             	add    esp,0x10
c0010a53:	e9 24 01 00 00       	jmp    c0010b7c <sys_timeout+0x164>
c0010a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010a6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010a6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010a75:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010a78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010a80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a83:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a88:	85 c0                	test   eax,eax
c0010a8a:	75 10                	jne    c0010a9c <sys_timeout+0x84>
c0010a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a90:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a95:	e9 e6 00 00 00       	jmp    c0010b80 <sys_timeout+0x168>
c0010a9a:	66 90                	xchg   ax,ax
c0010a9c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010aa1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010aa4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010aa8:	73 2e                	jae    c0010ad8 <sys_timeout+0xc0>
c0010aaa:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010aaf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ab2:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ab7:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010abb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010abe:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010ac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ac8:	89 10                	mov    DWORD PTR [eax],edx
c0010aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ace:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010ad3:	e9 a8 00 00 00       	jmp    c0010b80 <sys_timeout+0x168>
c0010ad8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010add:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ae1:	e9 86 00 00 00       	jmp    c0010b6c <sys_timeout+0x154>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010aec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010af3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010af6:	29 c2                	sub    edx,eax
c0010af8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010afc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010aff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b03:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b05:	85 c0                	test   eax,eax
c0010b07:	74 17                	je     c0010b20 <sys_timeout+0x108>
c0010b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b19:	39 c2                	cmp    edx,eax
c0010b1b:	76 43                	jbe    c0010b60 <sys_timeout+0x148>
c0010b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b26:	85 c0                	test   eax,eax
c0010b28:	74 1e                	je     c0010b48 <sys_timeout+0x130>
c0010b2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b30:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010b33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b37:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010b3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b40:	29 d1                	sub    ecx,edx
c0010b42:	89 ca                	mov    edx,ecx
c0010b44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b47:	90                   	nop
c0010b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b52:	89 10                	mov    DWORD PTR [eax],edx
c0010b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b5c:	89 10                	mov    DWORD PTR [eax],edx
c0010b5e:	eb 20                	jmp    c0010b80 <sys_timeout+0x168>
c0010b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010b71:	0f 85 71 ff ff ff    	jne    c0010ae8 <sys_timeout+0xd0>
c0010b77:	eb 07                	jmp    c0010b80 <sys_timeout+0x168>
c0010b79:	8d 76 00             	lea    esi,[esi+0x0]
c0010b7c:	90                   	nop
c0010b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b80:	83 c4 1c             	add    esp,0x1c
c0010b83:	c3                   	ret    

c0010b84 <tcpip_tcp_timer>:
c0010b84:	83 ec 0c             	sub    esp,0xc
c0010b87:	e8 b8 a4 ff ff       	call   c000b044 <tcp_tmr>
c0010b8c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b91:	85 c0                	test   eax,eax
c0010b93:	75 0b                	jne    c0010ba0 <tcpip_tcp_timer+0x1c>
c0010b95:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b9a:	85 c0                	test   eax,eax
c0010b9c:	74 1e                	je     c0010bbc <tcpip_tcp_timer+0x38>
c0010b9e:	66 90                	xchg   ax,ax
c0010ba0:	83 ec 04             	sub    esp,0x4
c0010ba3:	6a 00                	push   0x0
c0010ba5:	68 84 0b 01 c0       	push   0xc0010b84
c0010baa:	68 fa 00 00 00       	push   0xfa
c0010baf:	e8 64 fe ff ff       	call   c0010a18 <sys_timeout>
c0010bb4:	83 c4 10             	add    esp,0x10
c0010bb7:	eb 0f                	jmp    c0010bc8 <tcpip_tcp_timer+0x44>
c0010bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bbc:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010bc6:	66 90                	xchg   ax,ax
c0010bc8:	90                   	nop
c0010bc9:	83 c4 0c             	add    esp,0xc
c0010bcc:	c3                   	ret    
c0010bcd:	8d 76 00             	lea    esi,[esi+0x0]

c0010bd0 <tcp_timer_needed>:
c0010bd0:	83 ec 0c             	sub    esp,0xc
c0010bd3:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	75 38                	jne    c0010c14 <tcp_timer_needed+0x44>
c0010bdc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010be1:	85 c0                	test   eax,eax
c0010be3:	75 0b                	jne    c0010bf0 <tcp_timer_needed+0x20>
c0010be5:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010bea:	85 c0                	test   eax,eax
c0010bec:	74 26                	je     c0010c14 <tcp_timer_needed+0x44>
c0010bee:	66 90                	xchg   ax,ax
c0010bf0:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010bfa:	83 ec 04             	sub    esp,0x4
c0010bfd:	6a 00                	push   0x0
c0010bff:	68 84 0b 01 c0       	push   0xc0010b84
c0010c04:	68 fa 00 00 00       	push   0xfa
c0010c09:	e8 0a fe ff ff       	call   c0010a18 <sys_timeout>
c0010c0e:	83 c4 10             	add    esp,0x10
c0010c11:	8d 76 00             	lea    esi,[esi+0x0]
c0010c14:	90                   	nop
c0010c15:	83 c4 0c             	add    esp,0xc
c0010c18:	c3                   	ret    
c0010c19:	8d 76 00             	lea    esi,[esi+0x0]

c0010c1c <ip_reass_timer>:
c0010c1c:	83 ec 0c             	sub    esp,0xc
c0010c1f:	e8 18 3b 00 00       	call   c001473c <ip_reass_tmr>
c0010c24:	83 ec 04             	sub    esp,0x4
c0010c27:	6a 00                	push   0x0
c0010c29:	68 1c 0c 01 c0       	push   0xc0010c1c
c0010c2e:	68 e8 03 00 00       	push   0x3e8
c0010c33:	e8 e0 fd ff ff       	call   c0010a18 <sys_timeout>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	90                   	nop
c0010c3c:	83 c4 0c             	add    esp,0xc
c0010c3f:	c3                   	ret    

c0010c40 <arp_timer>:
c0010c40:	83 ec 0c             	sub    esp,0xc
c0010c43:	e8 64 0d 00 00       	call   c00119ac <etharp_tmr>
c0010c48:	83 ec 04             	sub    esp,0x4
c0010c4b:	6a 00                	push   0x0
c0010c4d:	68 40 0c 01 c0       	push   0xc0010c40
c0010c52:	68 88 13 00 00       	push   0x1388
c0010c57:	e8 bc fd ff ff       	call   c0010a18 <sys_timeout>
c0010c5c:	83 c4 10             	add    esp,0x10
c0010c5f:	90                   	nop
c0010c60:	83 c4 0c             	add    esp,0xc
c0010c63:	c3                   	ret    

c0010c64 <sys_timeouts_init>:
c0010c64:	83 ec 0c             	sub    esp,0xc
c0010c67:	83 ec 04             	sub    esp,0x4
c0010c6a:	6a 00                	push   0x0
c0010c6c:	68 1c 0c 01 c0       	push   0xc0010c1c
c0010c71:	68 e8 03 00 00       	push   0x3e8
c0010c76:	e8 9d fd ff ff       	call   c0010a18 <sys_timeout>
c0010c7b:	83 c4 10             	add    esp,0x10
c0010c7e:	83 ec 04             	sub    esp,0x4
c0010c81:	6a 00                	push   0x0
c0010c83:	68 40 0c 01 c0       	push   0xc0010c40
c0010c88:	68 88 13 00 00       	push   0x1388
c0010c8d:	e8 86 fd ff ff       	call   c0010a18 <sys_timeout>
c0010c92:	83 c4 10             	add    esp,0x10
c0010c95:	90                   	nop
c0010c96:	83 c4 0c             	add    esp,0xc
c0010c99:	c3                   	ret    
c0010c9a:	66 90                	xchg   ax,ax

c0010c9c <sys_untimeout>:
c0010c9c:	83 ec 1c             	sub    esp,0x1c
c0010c9f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ca4:	85 c0                	test   eax,eax
c0010ca6:	0f 84 b4 00 00 00    	je     c0010d60 <sys_untimeout+0xc4>
c0010cac:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010cbd:	e9 8e 00 00 00       	jmp    c0010d50 <sys_untimeout+0xb4>
c0010cc2:	66 90                	xchg   ax,ax
c0010cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ccb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010ccf:	75 6b                	jne    c0010d3c <sys_untimeout+0xa0>
c0010cd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cd5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cd8:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010cdc:	75 5e                	jne    c0010d3c <sys_untimeout+0xa0>
c0010cde:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010ce3:	75 0f                	jne    c0010cf4 <sys_untimeout+0x58>
c0010ce5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ce9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ceb:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010cf0:	eb 0e                	jmp    c0010d00 <sys_untimeout+0x64>
c0010cf2:	66 90                	xchg   ax,ax
c0010cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010cf8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010cfe:	89 10                	mov    DWORD PTR [eax],edx
c0010d00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d04:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d06:	85 c0                	test   eax,eax
c0010d08:	74 1e                	je     c0010d28 <sys_untimeout+0x8c>
c0010d0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d10:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010d13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d17:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d20:	01 ca                	add    edx,ecx
c0010d22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d25:	8d 76 00             	lea    esi,[esi+0x0]
c0010d28:	83 ec 08             	sub    esp,0x8
c0010d2b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d2f:	6a 0b                	push   0xb
c0010d31:	e8 92 6d ff ff       	call   c0007ac8 <memp_free>
c0010d36:	83 c4 10             	add    esp,0x10
c0010d39:	eb 29                	jmp    c0010d64 <sys_untimeout+0xc8>
c0010d3b:	90                   	nop
c0010d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d4e:	66 90                	xchg   ax,ax
c0010d50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d55:	0f 85 69 ff ff ff    	jne    c0010cc4 <sys_untimeout+0x28>
c0010d5b:	90                   	nop
c0010d5c:	eb 06                	jmp    c0010d64 <sys_untimeout+0xc8>
c0010d5e:	66 90                	xchg   ax,ax
c0010d60:	90                   	nop
c0010d61:	8d 76 00             	lea    esi,[esi+0x0]
c0010d64:	83 c4 1c             	add    esp,0x1c
c0010d67:	c3                   	ret    

c0010d68 <sys_timeouts_mbox_fetch>:
c0010d68:	83 ec 1c             	sub    esp,0x1c
c0010d6b:	90                   	nop
c0010d6c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 1f                	jne    c0010d94 <sys_timeouts_mbox_fetch+0x2c>
c0010d75:	83 ec 04             	sub    esp,0x4
c0010d78:	6a 00                	push   0x0
c0010d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d82:	e8 d9 ff fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d8e:	e9 cd 00 00 00       	jmp    c0010e60 <sys_timeouts_mbox_fetch+0xf8>
c0010d93:	90                   	nop
c0010d94:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d9c:	85 c0                	test   eax,eax
c0010d9e:	74 24                	je     c0010dc4 <sys_timeouts_mbox_fetch+0x5c>
c0010da0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010da5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010da8:	83 ec 04             	sub    esp,0x4
c0010dab:	50                   	push   eax
c0010dac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010db0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010db4:	e8 a7 ff fe ff       	call   c0000d60 <sys_arch_mbox_fetch>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dc0:	eb 0a                	jmp    c0010dcc <sys_timeouts_mbox_fetch+0x64>
c0010dc2:	66 90                	xchg   ax,ax
c0010dc4:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010dcc:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010dd1:	75 5d                	jne    c0010e30 <sys_timeouts_mbox_fetch+0xc8>
c0010dd3:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010dd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010ddc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010de2:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010de7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010deb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010df2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010df6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010df9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dfc:	83 ec 08             	sub    esp,0x8
c0010dff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e03:	6a 0b                	push   0xb
c0010e05:	e8 be 6c ff ff       	call   c0007ac8 <memp_free>
c0010e0a:	83 c4 10             	add    esp,0x10
c0010e0d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010e12:	0f 84 54 ff ff ff    	je     c0010d6c <sys_timeouts_mbox_fetch+0x4>
c0010e18:	83 ec 0c             	sub    esp,0xc
c0010e1b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010e1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e23:	ff d0                	call   eax
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	e9 3f ff ff ff       	jmp    c0010d6c <sys_timeouts_mbox_fetch+0x4>
c0010e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0010e30:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e38:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010e3c:	73 16                	jae    c0010e54 <sys_timeouts_mbox_fetch+0xec>
c0010e3e:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010e46:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e4b:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010e4f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e52:	eb 0c                	jmp    c0010e60 <sys_timeouts_mbox_fetch+0xf8>
c0010e54:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010e59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e60:	90                   	nop
c0010e61:	83 c4 1c             	add    esp,0x1c
c0010e64:	c3                   	ret    
c0010e65:	66 90                	xchg   ax,ax
c0010e67:	90                   	nop

c0010e68 <udp_input>:
c0010e68:	53                   	push   ebx
c0010e69:	83 ec 28             	sub    esp,0x28
c0010e6c:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010e72:	83 c0 01             	add    eax,0x1
c0010e75:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e86:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010e8d:	0f b7 d8             	movzx  ebx,ax
c0010e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e94:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e97:	0f b7 c0             	movzx  eax,ax
c0010e9a:	83 ec 0c             	sub    esp,0xc
c0010e9d:	50                   	push   eax
c0010e9e:	e8 79 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	0f b7 c0             	movzx  eax,ax
c0010ea9:	c1 e8 08             	shr    eax,0x8
c0010eac:	0f b7 c0             	movzx  eax,ax
c0010eaf:	83 e0 0f             	and    eax,0xf
c0010eb2:	83 c0 02             	add    eax,0x2
c0010eb5:	c1 e0 02             	shl    eax,0x2
c0010eb8:	39 c3                	cmp    ebx,eax
c0010eba:	7c 3c                	jl     c0010ef8 <udp_input+0x90>
c0010ebc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ec0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ec3:	0f b7 c0             	movzx  eax,ax
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	50                   	push   eax
c0010eca:	e8 4d fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ecf:	83 c4 10             	add    esp,0x10
c0010ed2:	0f b7 c0             	movzx  eax,ax
c0010ed5:	c1 e8 08             	shr    eax,0x8
c0010ed8:	83 e0 0f             	and    eax,0xf
c0010edb:	c1 e0 02             	shl    eax,0x2
c0010ede:	f7 d8                	neg    eax
c0010ee0:	98                   	cwde   
c0010ee1:	83 ec 08             	sub    esp,0x8
c0010ee4:	50                   	push   eax
c0010ee5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ee9:	e8 fa 72 ff ff       	call   c00081e8 <pbuf_header>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	0f b6 c0             	movzx  eax,al
c0010ef4:	85 c0                	test   eax,eax
c0010ef6:	74 34                	je     c0010f2c <udp_input+0xc4>
c0010ef8:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010efe:	83 c0 01             	add    eax,0x1
c0010f01:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010f07:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010f0d:	83 c0 01             	add    eax,0x1
c0010f10:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010f16:	83 ec 0c             	sub    esp,0xc
c0010f19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f1d:	e8 66 74 ff ff       	call   c0008388 <pbuf_free>
c0010f22:	83 c4 10             	add    esp,0x10
c0010f25:	e9 aa 03 00 00       	jmp    c00112d4 <udp_input+0x46c>
c0010f2a:	66 90                	xchg   ax,ax
c0010f2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f37:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f3c:	83 ec 08             	sub    esp,0x8
c0010f3f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f43:	50                   	push   eax
c0010f44:	e8 e3 2f 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010f50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f54:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010f57:	0f b7 c0             	movzx  eax,ax
c0010f5a:	83 ec 0c             	sub    esp,0xc
c0010f5d:	50                   	push   eax
c0010f5e:	e8 b9 fc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010f63:	83 c4 10             	add    esp,0x10
c0010f66:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010f6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f6f:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010f73:	0f b7 c0             	movzx  eax,ax
c0010f76:	83 ec 0c             	sub    esp,0xc
c0010f79:	50                   	push   eax
c0010f7a:	e8 9d fc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010f7f:	83 c4 10             	add    esp,0x10
c0010f82:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010f87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010f8f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010f94:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010f9c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010fa1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fa5:	e9 0a 01 00 00       	jmp    c00110b4 <udp_input+0x24c>
c0010faa:	66 90                	xchg   ax,ax
c0010fac:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010fb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb5:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010fb9:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010fbe:	0f b7 c0             	movzx  eax,ax
c0010fc1:	39 c2                	cmp    edx,eax
c0010fc3:	75 57                	jne    c001101c <udp_input+0x1b4>
c0010fc5:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010fca:	85 c0                	test   eax,eax
c0010fcc:	75 12                	jne    c0010fe0 <udp_input+0x178>
c0010fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fd2:	85 c0                	test   eax,eax
c0010fd4:	74 22                	je     c0010ff8 <udp_input+0x190>
c0010fd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fda:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fdc:	85 c0                	test   eax,eax
c0010fde:	74 18                	je     c0010ff8 <udp_input+0x190>
c0010fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fe6:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010feb:	39 c2                	cmp    edx,eax
c0010fed:	74 09                	je     c0010ff8 <udp_input+0x190>
c0010fef:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010ff4:	85 c0                	test   eax,eax
c0010ff6:	74 24                	je     c001101c <udp_input+0x1b4>
c0010ff8:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010ffd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011002:	75 18                	jne    c001101c <udp_input+0x1b4>
c0011004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011008:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001100b:	0f b6 c0             	movzx  eax,al
c001100e:	83 e0 04             	and    eax,0x4
c0011011:	75 09                	jne    c001101c <udp_input+0x1b4>
c0011013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011017:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001101b:	90                   	nop
c001101c:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0011021:	85 c0                	test   eax,eax
c0011023:	74 7b                	je     c00110a0 <udp_input+0x238>
c0011025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011029:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001102c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0011031:	0f b7 c0             	movzx  eax,ax
c0011034:	39 c2                	cmp    edx,eax
c0011036:	75 68                	jne    c00110a0 <udp_input+0x238>
c0011038:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001103c:	83 c0 04             	add    eax,0x4
c001103f:	74 1b                	je     c001105c <udp_input+0x1f4>
c0011041:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011048:	85 c0                	test   eax,eax
c001104a:	74 10                	je     c001105c <udp_input+0x1f4>
c001104c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011050:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011053:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0011058:	39 c2                	cmp    edx,eax
c001105a:	75 44                	jne    c00110a0 <udp_input+0x238>
c001105c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011061:	74 29                	je     c001108c <udp_input+0x224>
c0011063:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011067:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001106a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001106e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011071:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001107b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001107e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011082:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011087:	eb 37                	jmp    c00110c0 <udp_input+0x258>
c0011089:	8d 76 00             	lea    esi,[esi+0x0]
c001108c:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0011092:	83 c0 01             	add    eax,0x1
c0011095:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c001109b:	eb 23                	jmp    c00110c0 <udp_input+0x258>
c001109d:	8d 76 00             	lea    esi,[esi+0x0]
c00110a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00110a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00110af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110b3:	90                   	nop
c00110b4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110b9:	0f 85 ed fe ff ff    	jne    c0010fac <udp_input+0x144>
c00110bf:	90                   	nop
c00110c0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110c5:	75 09                	jne    c00110d0 <udp_input+0x268>
c00110c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110cf:	90                   	nop
c00110d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110d5:	75 15                	jne    c00110ec <udp_input+0x284>
c00110d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00110db:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00110de:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110e3:	39 c2                	cmp    edx,eax
c00110e5:	0f 85 d9 01 00 00    	jne    c00112c4 <udp_input+0x45c>
c00110eb:	90                   	nop
c00110ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110f0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00110f4:	0f b7 c0             	movzx  eax,ax
c00110f7:	85 c0                	test   eax,eax
c00110f9:	74 61                	je     c001115c <udp_input+0x2f4>
c00110fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011102:	0f b7 c0             	movzx  eax,ax
c0011105:	83 ec 0c             	sub    esp,0xc
c0011108:	50                   	push   eax
c0011109:	6a 11                	push   0x11
c001110b:	68 98 68 03 c0       	push   0xc0036898
c0011110:	68 90 68 03 c0       	push   0xc0036890
c0011115:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011119:	e8 26 21 00 00       	call   c0013244 <inet_chksum_pseudo>
c001111e:	83 c4 20             	add    esp,0x20
c0011121:	0f b7 c0             	movzx  eax,ax
c0011124:	85 c0                	test   eax,eax
c0011126:	74 34                	je     c001115c <udp_input+0x2f4>
c0011128:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c001112e:	83 c0 01             	add    eax,0x1
c0011131:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0011137:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001113d:	83 c0 01             	add    eax,0x1
c0011140:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001114d:	e8 36 72 ff ff       	call   c0008388 <pbuf_free>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	e9 7a 01 00 00       	jmp    c00112d4 <udp_input+0x46c>
c001115a:	66 90                	xchg   ax,ax
c001115c:	83 ec 08             	sub    esp,0x8
c001115f:	6a f8                	push   0xfffffff8
c0011161:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011165:	e8 7e 70 ff ff       	call   c00081e8 <pbuf_header>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	0f b6 c0             	movzx  eax,al
c0011170:	85 c0                	test   eax,eax
c0011172:	74 38                	je     c00111ac <udp_input+0x344>
c0011174:	83 ec 08             	sub    esp,0x8
c0011177:	68 29 0b 03 c0       	push   0xc0030b29
c001117c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011181:	e8 12 ea 00 00       	call   c001fb98 <CPrintf>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001118f:	83 c0 01             	add    eax,0x1
c0011192:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011198:	83 ec 0c             	sub    esp,0xc
c001119b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001119f:	e8 e4 71 ff ff       	call   c0008388 <pbuf_free>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	e9 28 01 00 00       	jmp    c00112d4 <udp_input+0x46c>
c00111ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00111b1:	74 51                	je     c0011204 <udp_input+0x39c>
c00111b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00111ba:	85 c0                	test   eax,eax
c00111bc:	74 32                	je     c00111f0 <udp_input+0x388>
c00111be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00111c5:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00111ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00111ce:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00111d1:	83 ec 0c             	sub    esp,0xc
c00111d4:	51                   	push   ecx
c00111d5:	68 90 68 03 c0       	push   0xc0036890
c00111da:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00111de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00111e2:	52                   	push   edx
c00111e3:	ff d0                	call   eax
c00111e5:	83 c4 20             	add    esp,0x20
c00111e8:	e9 e7 00 00 00       	jmp    c00112d4 <udp_input+0x46c>
c00111ed:	8d 76 00             	lea    esi,[esi+0x0]
c00111f0:	83 ec 0c             	sub    esp,0xc
c00111f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111f7:	e8 8c 71 ff ff       	call   c0008388 <pbuf_free>
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	e9 d0 00 00 00       	jmp    c00112d4 <udp_input+0x46c>
c0011204:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011209:	85 c0                	test   eax,eax
c001120b:	0f 85 83 00 00 00    	jne    c0011294 <udp_input+0x42c>
c0011211:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011216:	25 f0 00 00 00       	and    eax,0xf0
c001121b:	3d e0 00 00 00       	cmp    eax,0xe0
c0011220:	74 72                	je     c0011294 <udp_input+0x42c>
c0011222:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011226:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011229:	0f b7 c0             	movzx  eax,ax
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	50                   	push   eax
c0011230:	e8 e7 f9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011235:	83 c4 10             	add    esp,0x10
c0011238:	0f b7 c0             	movzx  eax,ax
c001123b:	c1 e8 08             	shr    eax,0x8
c001123e:	0f b7 c0             	movzx  eax,ax
c0011241:	83 e0 0f             	and    eax,0xf
c0011244:	83 c0 02             	add    eax,0x2
c0011247:	c1 e0 02             	shl    eax,0x2
c001124a:	98                   	cwde   
c001124b:	83 ec 08             	sub    esp,0x8
c001124e:	50                   	push   eax
c001124f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011253:	e8 90 6f ff ff       	call   c00081e8 <pbuf_header>
c0011258:	83 c4 10             	add    esp,0x10
c001125b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001125f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011262:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011266:	74 18                	je     c0011280 <udp_input+0x418>
c0011268:	83 ec 08             	sub    esp,0x8
c001126b:	68 3d 0b 03 c0       	push   0xc0030b3d
c0011270:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011275:	e8 1e e9 00 00       	call   c001fb98 <CPrintf>
c001127a:	83 c4 10             	add    esp,0x10
c001127d:	8d 76 00             	lea    esi,[esi+0x0]
c0011280:	83 ec 08             	sub    esp,0x8
c0011283:	6a 03                	push   0x3
c0011285:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011289:	e8 76 1e 00 00       	call   c0013104 <icmp_dest_unreach>
c001128e:	83 c4 10             	add    esp,0x10
c0011291:	8d 76 00             	lea    esi,[esi+0x0]
c0011294:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c001129a:	83 c0 01             	add    eax,0x1
c001129d:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00112a3:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00112a9:	83 c0 01             	add    eax,0x1
c00112ac:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00112b2:	83 ec 0c             	sub    esp,0xc
c00112b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112b9:	e8 ca 70 ff ff       	call   c0008388 <pbuf_free>
c00112be:	83 c4 10             	add    esp,0x10
c00112c1:	eb 11                	jmp    c00112d4 <udp_input+0x46c>
c00112c3:	90                   	nop
c00112c4:	83 ec 0c             	sub    esp,0xc
c00112c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00112cb:	e8 b8 70 ff ff       	call   c0008388 <pbuf_free>
c00112d0:	83 c4 10             	add    esp,0x10
c00112d3:	90                   	nop
c00112d4:	90                   	nop
c00112d5:	83 c4 28             	add    esp,0x28
c00112d8:	5b                   	pop    ebx
c00112d9:	c3                   	ret    
c00112da:	66 90                	xchg   ax,ax

c00112dc <udp_bind>:
c00112dc:	83 ec 2c             	sub    esp,0x2c
c00112df:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00112e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00112e8:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00112ed:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00112f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112f6:	e9 8d 00 00 00       	jmp    c0011388 <udp_bind+0xac>
c00112fb:	90                   	nop
c00112fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011300:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011304:	75 26                	jne    c001132c <udp_bind+0x50>
c0011306:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001130b:	85 c0                	test   eax,eax
c001130d:	74 15                	je     c0011324 <udp_bind+0x48>
c001130f:	83 ec 08             	sub    esp,0x8
c0011312:	68 51 0b 03 c0       	push   0xc0030b51
c0011317:	68 c6 fb 02 c0       	push   0xc002fbc6
c001131c:	e8 77 e8 00 00       	call   c001fb98 <CPrintf>
c0011321:	83 c4 10             	add    esp,0x10
c0011324:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011329:	eb 51                	jmp    c001137c <udp_bind+0xa0>
c001132b:	90                   	nop
c001132c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011330:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011334:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011339:	0f b7 c0             	movzx  eax,ax
c001133c:	39 c2                	cmp    edx,eax
c001133e:	75 3c                	jne    c001137c <udp_bind+0xa0>
c0011340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011344:	85 c0                	test   eax,eax
c0011346:	74 2c                	je     c0011374 <udp_bind+0x98>
c0011348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134c:	8b 00                	mov    eax,DWORD PTR [eax]
c001134e:	85 c0                	test   eax,eax
c0011350:	74 22                	je     c0011374 <udp_bind+0x98>
c0011352:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011357:	74 1b                	je     c0011374 <udp_bind+0x98>
c0011359:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001135d:	8b 00                	mov    eax,DWORD PTR [eax]
c001135f:	85 c0                	test   eax,eax
c0011361:	74 11                	je     c0011374 <udp_bind+0x98>
c0011363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011367:	8b 10                	mov    edx,DWORD PTR [eax]
c0011369:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001136d:	8b 00                	mov    eax,DWORD PTR [eax]
c001136f:	39 c2                	cmp    edx,eax
c0011371:	75 09                	jne    c001137c <udp_bind+0xa0>
c0011373:	90                   	nop
c0011374:	b0 f8                	mov    al,0xf8
c0011376:	e9 dd 00 00 00       	jmp    c0011458 <udp_bind+0x17c>
c001137b:	90                   	nop
c001137c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011380:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011383:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011387:	90                   	nop
c0011388:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001138d:	0f 85 69 ff ff ff    	jne    c00112fc <udp_bind+0x20>
c0011393:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011398:	74 0a                	je     c00113a4 <udp_bind+0xc8>
c001139a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001139e:	8b 00                	mov    eax,DWORD PTR [eax]
c00113a0:	eb 0a                	jmp    c00113ac <udp_bind+0xd0>
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	b8 00 00 00 00       	mov    eax,0x0
c00113a9:	8d 76 00             	lea    esi,[esi+0x0]
c00113ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00113b0:	89 02                	mov    DWORD PTR [edx],eax
c00113b2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00113b7:	85 c0                	test   eax,eax
c00113b9:	75 6d                	jne    c0011428 <udp_bind+0x14c>
c00113bb:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c00113c2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113cb:	eb 3b                	jmp    c0011408 <udp_bind+0x12c>
c00113cd:	8d 76 00             	lea    esi,[esi+0x0]
c00113d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00113d4:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113d8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00113dd:	0f b7 c0             	movzx  eax,ax
c00113e0:	39 c2                	cmp    edx,eax
c00113e2:	75 18                	jne    c00113fc <udp_bind+0x120>
c00113e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113e8:	83 c0 01             	add    eax,0x1
c00113eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113f0:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00113f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113f9:	eb 0d                	jmp    c0011408 <udp_bind+0x12c>
c00113fb:	90                   	nop
c00113fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011400:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011403:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011407:	90                   	nop
c0011408:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001140d:	74 0d                	je     c001141c <udp_bind+0x140>
c001140f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011414:	3d ff ff 00 00       	cmp    eax,0xffff
c0011419:	75 b5                	jne    c00113d0 <udp_bind+0xf4>
c001141b:	90                   	nop
c001141c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011421:	74 05                	je     c0011428 <udp_bind+0x14c>
c0011423:	b0 f8                	mov    al,0xf8
c0011425:	eb 31                	jmp    c0011458 <udp_bind+0x17c>
c0011427:	90                   	nop
c0011428:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001142c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011430:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c0011434:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011439:	85 c0                	test   eax,eax
c001143b:	75 17                	jne    c0011454 <udp_bind+0x178>
c001143d:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011443:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011447:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001144a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001144e:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011453:	90                   	nop
c0011454:	b0 00                	mov    al,0x0
c0011456:	66 90                	xchg   ax,ax
c0011458:	83 c4 2c             	add    esp,0x2c
c001145b:	c3                   	ret    

c001145c <udp_sendto_if>:
c001145c:	83 ec 2c             	sub    esp,0x2c
c001145f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011463:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011468:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001146c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011470:	0f b7 c0             	movzx  eax,ax
c0011473:	85 c0                	test   eax,eax
c0011475:	75 39                	jne    c00114b0 <udp_sendto_if+0x54>
c0011477:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001147b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001147f:	0f b7 d0             	movzx  edx,ax
c0011482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011486:	83 ec 04             	sub    esp,0x4
c0011489:	52                   	push   edx
c001148a:	50                   	push   eax
c001148b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001148f:	e8 48 fe ff ff       	call   c00112dc <udp_bind>
c0011494:	83 c4 10             	add    esp,0x10
c0011497:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001149b:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00114a0:	85 c0                	test   eax,eax
c00114a2:	74 0c                	je     c00114b0 <udp_sendto_if+0x54>
c00114a4:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00114a8:	e9 2f 02 00 00       	jmp    c00116dc <udp_sendto_if+0x280>
c00114ad:	8d 76 00             	lea    esi,[esi+0x0]
c00114b0:	83 ec 08             	sub    esp,0x8
c00114b3:	6a 08                	push   0x8
c00114b5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00114b9:	e8 2a 6d ff ff       	call   c00081e8 <pbuf_header>
c00114be:	83 c4 10             	add    esp,0x10
c00114c1:	0f b6 c0             	movzx  eax,al
c00114c4:	85 c0                	test   eax,eax
c00114c6:	74 48                	je     c0011510 <udp_sendto_if+0xb4>
c00114c8:	83 ec 04             	sub    esp,0x4
c00114cb:	6a 00                	push   0x0
c00114cd:	6a 08                	push   0x8
c00114cf:	6a 01                	push   0x1
c00114d1:	e8 8e 70 ff ff       	call   c0008564 <pbuf_alloc>
c00114d6:	83 c4 10             	add    esp,0x10
c00114d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00114dd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00114e2:	75 08                	jne    c00114ec <udp_sendto_if+0x90>
c00114e4:	b0 ff                	mov    al,0xff
c00114e6:	e9 f1 01 00 00       	jmp    c00116dc <udp_sendto_if+0x280>
c00114eb:	90                   	nop
c00114ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00114f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114f3:	0f b7 c0             	movzx  eax,ax
c00114f6:	85 c0                	test   eax,eax
c00114f8:	74 1e                	je     c0011518 <udp_sendto_if+0xbc>
c00114fa:	83 ec 08             	sub    esp,0x8
c00114fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011505:	e8 a2 77 ff ff       	call   c0008cac <pbuf_chain>
c001150a:	83 c4 10             	add    esp,0x10
c001150d:	eb 09                	jmp    c0011518 <udp_sendto_if+0xbc>
c001150f:	90                   	nop
c0011510:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011518:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001151c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011520:	0f b7 c0             	movzx  eax,ax
c0011523:	83 f8 07             	cmp    eax,0x7
c0011526:	77 18                	ja     c0011540 <udp_sendto_if+0xe4>
c0011528:	83 ec 08             	sub    esp,0x8
c001152b:	68 60 0b 03 c0       	push   0xc0030b60
c0011530:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011535:	e8 5e e6 00 00       	call   c001fb98 <CPrintf>
c001153a:	83 c4 10             	add    esp,0x10
c001153d:	8d 76 00             	lea    esi,[esi+0x0]
c0011540:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011544:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011547:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001154b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001154f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011553:	0f b7 c0             	movzx  eax,ax
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	50                   	push   eax
c001155a:	e8 bd f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001155f:	83 c4 10             	add    esp,0x10
c0011562:	89 c2                	mov    edx,eax
c0011564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011568:	66 89 10             	mov    WORD PTR [eax],dx
c001156b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011570:	83 ec 0c             	sub    esp,0xc
c0011573:	50                   	push   eax
c0011574:	e8 a3 f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011579:	83 c4 10             	add    esp,0x10
c001157c:	89 c2                	mov    edx,eax
c001157e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011582:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0011586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001158a:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0011590:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011594:	85 c0                	test   eax,eax
c0011596:	74 0c                	je     c00115a4 <udp_sendto_if+0x148>
c0011598:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001159c:	8b 00                	mov    eax,DWORD PTR [eax]
c001159e:	85 c0                	test   eax,eax
c00115a0:	75 12                	jne    c00115b4 <udp_sendto_if+0x158>
c00115a2:	66 90                	xchg   ax,ax
c00115a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115a8:	83 c0 04             	add    eax,0x4
c00115ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115af:	eb 47                	jmp    c00115f8 <udp_sendto_if+0x19c>
c00115b1:	8d 76 00             	lea    esi,[esi+0x0]
c00115b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00115ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115c1:	39 c2                	cmp    edx,eax
c00115c3:	74 2b                	je     c00115f0 <udp_sendto_if+0x194>
c00115c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115c9:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115cd:	74 19                	je     c00115e8 <udp_sendto_if+0x18c>
c00115cf:	83 ec 0c             	sub    esp,0xc
c00115d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00115d6:	e8 ad 6d ff ff       	call   c0008388 <pbuf_free>
c00115db:	83 c4 10             	add    esp,0x10
c00115de:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00115e6:	66 90                	xchg   ax,ax
c00115e8:	b0 fa                	mov    al,0xfa
c00115ea:	e9 ed 00 00 00       	jmp    c00116dc <udp_sendto_if+0x280>
c00115ef:	90                   	nop
c00115f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115f4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00115f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00115ff:	0f b7 c0             	movzx  eax,ax
c0011602:	83 ec 0c             	sub    esp,0xc
c0011605:	50                   	push   eax
c0011606:	e8 11 f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001160b:	83 c4 10             	add    esp,0x10
c001160e:	89 c2                	mov    edx,eax
c0011610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011614:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0011618:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001161c:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001161f:	0f b6 c0             	movzx  eax,al
c0011622:	83 e0 01             	and    eax,0x1
c0011625:	75 49                	jne    c0011670 <udp_sendto_if+0x214>
c0011627:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001162b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001162e:	0f b7 c0             	movzx  eax,ax
c0011631:	83 ec 0c             	sub    esp,0xc
c0011634:	50                   	push   eax
c0011635:	6a 11                	push   0x11
c0011637:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001163b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001163f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011643:	e8 fc 1b 00 00       	call   c0013244 <inet_chksum_pseudo>
c0011648:	83 c4 20             	add    esp,0x20
c001164b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0011650:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0011655:	85 c0                	test   eax,eax
c0011657:	75 07                	jne    c0011660 <udp_sendto_if+0x204>
c0011659:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c0011660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011664:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0011669:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001166d:	8d 76 00             	lea    esi,[esi+0x0]
c0011670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011674:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011677:	0f b6 d0             	movzx  edx,al
c001167a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0011681:	0f b6 c0             	movzx  eax,al
c0011684:	83 ec 04             	sub    esp,0x4
c0011687:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001168b:	6a 11                	push   0x11
c001168d:	52                   	push   edx
c001168e:	50                   	push   eax
c001168f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011693:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011697:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001169b:	e8 08 25 00 00       	call   c0013ba8 <ip_output_if>
c00116a0:	83 c4 20             	add    esp,0x20
c00116a3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00116a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00116ab:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00116af:	74 17                	je     c00116c8 <udp_sendto_if+0x26c>
c00116b1:	83 ec 0c             	sub    esp,0xc
c00116b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116b8:	e8 cb 6c ff ff       	call   c0008388 <pbuf_free>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00116c8:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c00116ce:	83 c0 01             	add    eax,0x1
c00116d1:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c00116d7:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00116db:	90                   	nop
c00116dc:	83 c4 2c             	add    esp,0x2c
c00116df:	c3                   	ret    

c00116e0 <udp_sendto>:
c00116e0:	83 ec 2c             	sub    esp,0x2c
c00116e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00116e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116ec:	83 ec 0c             	sub    esp,0xc
c00116ef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00116f3:	e8 d8 1f 00 00       	call   c00136d0 <ip_route>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011704:	75 16                	jne    c001171c <udp_sendto+0x3c>
c0011706:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c001170c:	83 c0 01             	add    eax,0x1
c001170f:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c0011715:	b0 fc                	mov    al,0xfc
c0011717:	eb 27                	jmp    c0011740 <udp_sendto+0x60>
c0011719:	8d 76 00             	lea    esi,[esi+0x0]
c001171c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011721:	83 ec 0c             	sub    esp,0xc
c0011724:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011728:	50                   	push   eax
c0011729:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001172d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011731:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011735:	e8 22 fd ff ff       	call   c001145c <udp_sendto_if>
c001173a:	83 c4 20             	add    esp,0x20
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	83 c4 2c             	add    esp,0x2c
c0011743:	c3                   	ret    

c0011744 <udp_send>:
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001174b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001174e:	0f b7 c0             	movzx  eax,ax
c0011751:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011755:	83 c2 04             	add    edx,0x4
c0011758:	50                   	push   eax
c0011759:	52                   	push   edx
c001175a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001175e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011762:	e8 79 ff ff ff       	call   c00116e0 <udp_sendto>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	83 c4 0c             	add    esp,0xc
c001176d:	c3                   	ret    
c001176e:	66 90                	xchg   ax,ax

c0011770 <udp_connect>:
c0011770:	83 ec 2c             	sub    esp,0x2c
c0011773:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011777:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001177c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011780:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011784:	0f b7 c0             	movzx  eax,ax
c0011787:	85 c0                	test   eax,eax
c0011789:	75 39                	jne    c00117c4 <udp_connect+0x54>
c001178b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001178f:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011793:	0f b7 d0             	movzx  edx,ax
c0011796:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001179a:	83 ec 04             	sub    esp,0x4
c001179d:	52                   	push   edx
c001179e:	50                   	push   eax
c001179f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00117a3:	e8 34 fb ff ff       	call   c00112dc <udp_bind>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00117af:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c00117b4:	85 c0                	test   eax,eax
c00117b6:	74 0c                	je     c00117c4 <udp_connect+0x54>
c00117b8:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00117bc:	e9 8b 00 00 00       	jmp    c001184c <udp_connect+0xdc>
c00117c1:	8d 76 00             	lea    esi,[esi+0x0]
c00117c4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00117c9:	74 09                	je     c00117d4 <udp_connect+0x64>
c00117cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00117d1:	eb 09                	jmp    c00117dc <udp_connect+0x6c>
c00117d3:	90                   	nop
c00117d4:	b8 00 00 00 00       	mov    eax,0x0
c00117d9:	8d 76 00             	lea    esi,[esi+0x0]
c00117dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117e0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00117e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117eb:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c00117ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117f3:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117f6:	83 c8 04             	or     eax,0x4
c00117f9:	88 c2                	mov    dl,al
c00117fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117ff:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011802:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011807:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001180b:	eb 1f                	jmp    c001182c <udp_connect+0xbc>
c001180d:	8d 76 00             	lea    esi,[esi+0x0]
c0011810:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011814:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011818:	75 06                	jne    c0011820 <udp_connect+0xb0>
c001181a:	b0 00                	mov    al,0x0
c001181c:	eb 2e                	jmp    c001184c <udp_connect+0xdc>
c001181e:	66 90                	xchg   ax,ax
c0011820:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011824:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011827:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001182b:	90                   	nop
c001182c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011831:	75 dd                	jne    c0011810 <udp_connect+0xa0>
c0011833:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011839:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001183d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011844:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011849:	b0 00                	mov    al,0x0
c001184b:	90                   	nop
c001184c:	83 c4 2c             	add    esp,0x2c
c001184f:	c3                   	ret    

c0011850 <udp_disconnect>:
c0011850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001185b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001185f:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c0011865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011869:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001186c:	83 e0 fb             	and    eax,0xfffffffb
c001186f:	88 c2                	mov    dl,al
c0011871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011875:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011878:	90                   	nop
c0011879:	c3                   	ret    
c001187a:	66 90                	xchg   ax,ax

c001187c <udp_recv>:
c001187c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011880:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011884:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011887:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001188f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011892:	90                   	nop
c0011893:	c3                   	ret    

c0011894 <udp_remove>:
c0011894:	83 ec 1c             	sub    esp,0x1c
c0011897:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001189c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00118a0:	75 12                	jne    c00118b4 <udp_remove+0x20>
c00118a2:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118a7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118aa:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00118af:	eb 4b                	jmp    c00118fc <udp_remove+0x68>
c00118b1:	8d 76 00             	lea    esi,[esi+0x0]
c00118b4:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00118b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118bd:	eb 35                	jmp    c00118f4 <udp_remove+0x60>
c00118bf:	90                   	nop
c00118c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118c7:	85 c0                	test   eax,eax
c00118c9:	74 1d                	je     c00118e8 <udp_remove+0x54>
c00118cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118d2:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00118d6:	75 10                	jne    c00118e8 <udp_remove+0x54>
c00118d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00118dc:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00118df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00118e6:	66 90                	xchg   ax,ax
c00118e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00118ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118f3:	90                   	nop
c00118f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00118f9:	75 c5                	jne    c00118c0 <udp_remove+0x2c>
c00118fb:	90                   	nop
c00118fc:	83 ec 08             	sub    esp,0x8
c00118ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011903:	6a 01                	push   0x1
c0011905:	e8 be 61 ff ff       	call   c0007ac8 <memp_free>
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	90                   	nop
c001190e:	83 c4 1c             	add    esp,0x1c
c0011911:	c3                   	ret    
c0011912:	66 90                	xchg   ax,ax

c0011914 <udp_new>:
c0011914:	83 ec 1c             	sub    esp,0x1c
c0011917:	83 ec 0c             	sub    esp,0xc
c001191a:	6a 01                	push   0x1
c001191c:	e8 7b 60 ff ff       	call   c000799c <memp_malloc>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001192d:	74 1d                	je     c001194c <udp_new+0x38>
c001192f:	83 ec 04             	sub    esp,0x4
c0011932:	6a 20                	push   0x20
c0011934:	6a 00                	push   0x0
c0011936:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001193a:	e8 b1 eb fe ff       	call   c00004f0 <memset>
c001193f:	83 c4 10             	add    esp,0x10
c0011942:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011946:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c001194a:	66 90                	xchg   ax,ax
c001194c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011950:	83 c4 1c             	add    esp,0x1c
c0011953:	c3                   	ret    

c0011954 <free_entry>:
c0011954:	83 ec 0c             	sub    esp,0xc
c0011957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001195b:	c1 e0 04             	shl    eax,0x4
c001195e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011963:	8b 00                	mov    eax,DWORD PTR [eax]
c0011965:	85 c0                	test   eax,eax
c0011967:	74 2f                	je     c0011998 <free_entry+0x44>
c0011969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001196d:	c1 e0 04             	shl    eax,0x4
c0011970:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011975:	8b 00                	mov    eax,DWORD PTR [eax]
c0011977:	83 ec 0c             	sub    esp,0xc
c001197a:	50                   	push   eax
c001197b:	e8 08 6a ff ff       	call   c0008388 <pbuf_free>
c0011980:	83 c4 10             	add    esp,0x10
c0011983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011987:	c1 e0 04             	shl    eax,0x4
c001198a:	05 00 a9 03 c0       	add    eax,0xc003a900
c001198f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011995:	8d 76 00             	lea    esi,[esi+0x0]
c0011998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001199c:	c1 e0 04             	shl    eax,0x4
c001199f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00119a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00119a7:	90                   	nop
c00119a8:	83 c4 0c             	add    esp,0xc
c00119ab:	c3                   	ret    

c00119ac <etharp_tmr>:
c00119ac:	83 ec 1c             	sub    esp,0x1c
c00119af:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00119b4:	e9 a7 00 00 00       	jmp    c0011a60 <etharp_tmr+0xb4>
c00119b9:	8d 76 00             	lea    esi,[esi+0x0]
c00119bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119c1:	c1 e0 04             	shl    eax,0x4
c00119c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00119c9:	8a 00                	mov    al,BYTE PTR [eax]
c00119cb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00119cf:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c00119d4:	85 c0                	test   eax,eax
c00119d6:	74 7c                	je     c0011a54 <etharp_tmr+0xa8>
c00119d8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119dd:	89 c2                	mov    edx,eax
c00119df:	c1 e2 04             	shl    edx,0x4
c00119e2:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c00119e8:	8a 12                	mov    dl,BYTE PTR [edx]
c00119ea:	83 c2 01             	add    edx,0x1
c00119ed:	c1 e0 04             	shl    eax,0x4
c00119f0:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00119f5:	88 10                	mov    BYTE PTR [eax],dl
c00119f7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119fc:	c1 e0 04             	shl    eax,0x4
c00119ff:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a04:	8a 00                	mov    al,BYTE PTR [eax]
c0011a06:	0f b6 c0             	movzx  eax,al
c0011a09:	3d ef 00 00 00       	cmp    eax,0xef
c0011a0e:	77 30                	ja     c0011a40 <etharp_tmr+0x94>
c0011a10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a15:	c1 e0 04             	shl    eax,0x4
c0011a18:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a1d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a1f:	0f b6 c0             	movzx  eax,al
c0011a22:	83 f8 01             	cmp    eax,0x1
c0011a25:	75 2d                	jne    c0011a54 <etharp_tmr+0xa8>
c0011a27:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a2c:	c1 e0 04             	shl    eax,0x4
c0011a2f:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a34:	8a 00                	mov    al,BYTE PTR [eax]
c0011a36:	0f b6 c0             	movzx  eax,al
c0011a39:	83 f8 01             	cmp    eax,0x1
c0011a3c:	76 16                	jbe    c0011a54 <etharp_tmr+0xa8>
c0011a3e:	66 90                	xchg   ax,ax
c0011a40:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a45:	83 ec 0c             	sub    esp,0xc
c0011a48:	50                   	push   eax
c0011a49:	e8 06 ff ff ff       	call   c0011954 <free_entry>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	8d 76 00             	lea    esi,[esi+0x0]
c0011a54:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011a58:	83 c0 01             	add    eax,0x1
c0011a5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011a5f:	90                   	nop
c0011a60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011a65:	83 f8 09             	cmp    eax,0x9
c0011a68:	0f 86 4e ff ff ff    	jbe    c00119bc <etharp_tmr+0x10>
c0011a6e:	90                   	nop
c0011a6f:	83 c4 1c             	add    esp,0x1c
c0011a72:	c3                   	ret    
c0011a73:	90                   	nop

c0011a74 <find_entry>:
c0011a74:	83 ec 2c             	sub    esp,0x2c
c0011a77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011a7f:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011a84:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011a89:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c0011a8e:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011a93:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011a98:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011a9d:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c0011aa2:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011aa7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011aac:	e9 7f 01 00 00       	jmp    c0011c30 <find_entry+0x1bc>
c0011ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ab4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ab9:	c1 e0 04             	shl    eax,0x4
c0011abc:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ac1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011ac7:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011acc:	83 f8 0a             	cmp    eax,0xa
c0011acf:	75 17                	jne    c0011ae8 <find_entry+0x74>
c0011ad1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011ad6:	85 c0                	test   eax,eax
c0011ad8:	75 0e                	jne    c0011ae8 <find_entry+0x74>
c0011ada:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ade:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011ae2:	e9 3d 01 00 00       	jmp    c0011c24 <find_entry+0x1b0>
c0011ae7:	90                   	nop
c0011ae8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011aed:	85 c0                	test   eax,eax
c0011aef:	0f 84 2f 01 00 00    	je     c0011c24 <find_entry+0x1b0>
c0011af5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011afa:	83 f8 01             	cmp    eax,0x1
c0011afd:	74 21                	je     c0011b20 <find_entry+0xac>
c0011aff:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b04:	83 f8 02             	cmp    eax,0x2
c0011b07:	74 17                	je     c0011b20 <find_entry+0xac>
c0011b09:	83 ec 08             	sub    esp,0x8
c0011b0c:	68 90 0b 03 c0       	push   0xc0030b90
c0011b11:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011b16:	e8 7d e0 00 00       	call   c001fb98 <CPrintf>
c0011b1b:	83 c4 10             	add    esp,0x10
c0011b1e:	66 90                	xchg   ax,ax
c0011b20:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011b25:	74 25                	je     c0011b4c <find_entry+0xd8>
c0011b27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b2d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b32:	c1 e0 04             	shl    eax,0x4
c0011b35:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b3c:	39 c2                	cmp    edx,eax
c0011b3e:	75 0c                	jne    c0011b4c <find_entry+0xd8>
c0011b40:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b44:	e9 53 02 00 00       	jmp    c0011d9c <find_entry+0x328>
c0011b49:	8d 76 00             	lea    esi,[esi+0x0]
c0011b4c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b51:	83 f8 01             	cmp    eax,0x1
c0011b54:	0f 85 8a 00 00 00    	jne    c0011be4 <find_entry+0x170>
c0011b5a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b5f:	c1 e0 04             	shl    eax,0x4
c0011b62:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b69:	85 c0                	test   eax,eax
c0011b6b:	74 3f                	je     c0011bac <find_entry+0x138>
c0011b6d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b72:	c1 e0 04             	shl    eax,0x4
c0011b75:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b7a:	8a 00                	mov    al,BYTE PTR [eax]
c0011b7c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011b81:	0f b6 c0             	movzx  eax,al
c0011b84:	39 c2                	cmp    edx,eax
c0011b86:	0f 87 98 00 00 00    	ja     c0011c24 <find_entry+0x1b0>
c0011b8c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b90:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	c1 e0 04             	shl    eax,0x4
c0011b9c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ba1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ba3:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011ba7:	eb 7b                	jmp    c0011c24 <find_entry+0x1b0>
c0011ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0011bac:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bb1:	c1 e0 04             	shl    eax,0x4
c0011bb4:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bb9:	8a 00                	mov    al,BYTE PTR [eax]
c0011bbb:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011bc0:	0f b6 c0             	movzx  eax,al
c0011bc3:	39 c2                	cmp    edx,eax
c0011bc5:	77 5d                	ja     c0011c24 <find_entry+0x1b0>
c0011bc7:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011bcb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011bcf:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bd4:	c1 e0 04             	shl    eax,0x4
c0011bd7:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bdc:	8a 00                	mov    al,BYTE PTR [eax]
c0011bde:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011be2:	eb 40                	jmp    c0011c24 <find_entry+0x1b0>
c0011be4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011be9:	83 f8 02             	cmp    eax,0x2
c0011bec:	75 36                	jne    c0011c24 <find_entry+0x1b0>
c0011bee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bf3:	c1 e0 04             	shl    eax,0x4
c0011bf6:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011bfb:	8a 00                	mov    al,BYTE PTR [eax]
c0011bfd:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011c02:	0f b6 c0             	movzx  eax,al
c0011c05:	39 c2                	cmp    edx,eax
c0011c07:	77 1b                	ja     c0011c24 <find_entry+0x1b0>
c0011c09:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c0d:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011c11:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c16:	c1 e0 04             	shl    eax,0x4
c0011c19:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c1e:	8a 00                	mov    al,BYTE PTR [eax]
c0011c20:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011c24:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c28:	83 c0 01             	add    eax,0x1
c0011c2b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c2f:	90                   	nop
c0011c30:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c35:	83 f8 09             	cmp    eax,0x9
c0011c38:	0f 86 76 fe ff ff    	jbe    c0011ab4 <find_entry+0x40>
c0011c3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011c43:	83 e0 02             	and    eax,0x2
c0011c46:	75 14                	jne    c0011c5c <find_entry+0x1e8>
c0011c48:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c4d:	83 f8 0a             	cmp    eax,0xa
c0011c50:	75 12                	jne    c0011c64 <find_entry+0x1f0>
c0011c52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011c57:	83 e0 01             	and    eax,0x1
c0011c5a:	75 08                	jne    c0011c64 <find_entry+0x1f0>
c0011c5c:	b0 ff                	mov    al,0xff
c0011c5e:	e9 39 01 00 00       	jmp    c0011d9c <find_entry+0x328>
c0011c63:	90                   	nop
c0011c64:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011c69:	83 f8 09             	cmp    eax,0x9
c0011c6c:	7f 0e                	jg     c0011c7c <find_entry+0x208>
c0011c6e:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011c72:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c76:	e9 a1 00 00 00       	jmp    c0011d1c <find_entry+0x2a8>
c0011c7b:	90                   	nop
c0011c7c:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011c81:	83 f8 09             	cmp    eax,0x9
c0011c84:	7f 32                	jg     c0011cb8 <find_entry+0x244>
c0011c86:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011c8a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c8e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c93:	c1 e0 04             	shl    eax,0x4
c0011c96:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011c9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c9d:	85 c0                	test   eax,eax
c0011c9f:	74 47                	je     c0011ce8 <find_entry+0x274>
c0011ca1:	83 ec 08             	sub    esp,0x8
c0011ca4:	68 09 0d 03 c0       	push   0xc0030d09
c0011ca9:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011cae:	e8 e5 de 00 00       	call   c001fb98 <CPrintf>
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	eb 30                	jmp    c0011ce8 <find_entry+0x274>
c0011cb8:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011cbd:	83 f8 09             	cmp    eax,0x9
c0011cc0:	7f 0a                	jg     c0011ccc <find_entry+0x258>
c0011cc2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011cc6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011cca:	eb 1c                	jmp    c0011ce8 <find_entry+0x274>
c0011ccc:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011cd1:	83 f8 09             	cmp    eax,0x9
c0011cd4:	7f 0a                	jg     c0011ce0 <find_entry+0x26c>
c0011cd6:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011cda:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011cde:	eb 08                	jmp    c0011ce8 <find_entry+0x274>
c0011ce0:	b0 ff                	mov    al,0xff
c0011ce2:	e9 b5 00 00 00       	jmp    c0011d9c <find_entry+0x328>
c0011ce7:	90                   	nop
c0011ce8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ced:	83 f8 09             	cmp    eax,0x9
c0011cf0:	76 16                	jbe    c0011d08 <find_entry+0x294>
c0011cf2:	83 ec 08             	sub    esp,0x8
c0011cf5:	68 20 0d 03 c0       	push   0xc0030d20
c0011cfa:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011cff:	e8 94 de 00 00       	call   c001fb98 <CPrintf>
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	90                   	nop
c0011d08:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d0d:	83 ec 0c             	sub    esp,0xc
c0011d10:	50                   	push   eax
c0011d11:	e8 3e fc ff ff       	call   c0011954 <free_entry>
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	8d 76 00             	lea    esi,[esi+0x0]
c0011d1c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d21:	83 f8 09             	cmp    eax,0x9
c0011d24:	76 16                	jbe    c0011d3c <find_entry+0x2c8>
c0011d26:	83 ec 08             	sub    esp,0x8
c0011d29:	68 20 0d 03 c0       	push   0xc0030d20
c0011d2e:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011d33:	e8 60 de 00 00       	call   c001fb98 <CPrintf>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	90                   	nop
c0011d3c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d41:	c1 e0 04             	shl    eax,0x4
c0011d44:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011d49:	8a 00                	mov    al,BYTE PTR [eax]
c0011d4b:	0f b6 c0             	movzx  eax,al
c0011d4e:	85 c0                	test   eax,eax
c0011d50:	74 16                	je     c0011d68 <find_entry+0x2f4>
c0011d52:	83 ec 08             	sub    esp,0x8
c0011d55:	68 d0 0b 03 c0       	push   0xc0030bd0
c0011d5a:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011d5f:	e8 34 de 00 00       	call   c001fb98 <CPrintf>
c0011d64:	83 c4 10             	add    esp,0x10
c0011d67:	90                   	nop
c0011d68:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011d6d:	74 19                	je     c0011d88 <find_entry+0x314>
c0011d6f:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011d74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d78:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7a:	c1 e2 04             	shl    edx,0x4
c0011d7d:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011d83:	89 02                	mov    DWORD PTR [edx],eax
c0011d85:	8d 76 00             	lea    esi,[esi+0x0]
c0011d88:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011d8d:	c1 e0 04             	shl    eax,0x4
c0011d90:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d95:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011d98:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011d9c:	83 c4 2c             	add    esp,0x2c
c0011d9f:	c3                   	ret    

c0011da0 <etharp_send_ip>:
c0011da0:	83 ec 1c             	sub    esp,0x1c
c0011da3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011da7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011db2:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011db5:	0f b6 c0             	movzx  eax,al
c0011db8:	83 f8 06             	cmp    eax,0x6
c0011dbb:	74 17                	je     c0011dd4 <etharp_send_ip+0x34>
c0011dbd:	83 ec 08             	sub    esp,0x8
c0011dc0:	68 fc 0b 03 c0       	push   0xc0030bfc
c0011dc5:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011dca:	e8 c9 dd 00 00       	call   c001fb98 <CPrintf>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	66 90                	xchg   ax,ax
c0011dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dd8:	83 ec 04             	sub    esp,0x4
c0011ddb:	6a 06                	push   0x6
c0011ddd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011de1:	50                   	push   eax
c0011de2:	e8 93 e5 fe ff       	call   c000037a <memcpy>
c0011de7:	83 c4 10             	add    esp,0x10
c0011dea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dee:	83 c0 06             	add    eax,0x6
c0011df1:	83 ec 04             	sub    esp,0x4
c0011df4:	6a 06                	push   0x6
c0011df6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011dfa:	50                   	push   eax
c0011dfb:	e8 7a e5 fe ff       	call   c000037a <memcpy>
c0011e00:	83 c4 10             	add    esp,0x10
c0011e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e07:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e11:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011e14:	83 ec 08             	sub    esp,0x8
c0011e17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e1f:	ff d0                	call   eax
c0011e21:	83 c4 10             	add    esp,0x10
c0011e24:	83 c4 1c             	add    esp,0x1c
c0011e27:	c3                   	ret    

c0011e28 <update_arp_entry>:
c0011e28:	83 ec 2c             	sub    esp,0x2c
c0011e2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011e2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e37:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011e3a:	0f b6 c0             	movzx  eax,al
c0011e3d:	83 f8 06             	cmp    eax,0x6
c0011e40:	74 16                	je     c0011e58 <update_arp_entry+0x30>
c0011e42:	83 ec 08             	sub    esp,0x8
c0011e45:	68 40 0c 03 c0       	push   0xc0030c40
c0011e4a:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011e4f:	e8 44 dd 00 00       	call   c001fb98 <CPrintf>
c0011e54:	83 c4 10             	add    esp,0x10
c0011e57:	90                   	nop
c0011e58:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011e5d:	74 39                	je     c0011e98 <update_arp_entry+0x70>
c0011e5f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e65:	85 c0                	test   eax,eax
c0011e67:	74 2f                	je     c0011e98 <update_arp_entry+0x70>
c0011e69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6f:	83 ec 08             	sub    esp,0x8
c0011e72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e76:	50                   	push   eax
c0011e77:	e8 b0 20 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0011e7c:	83 c4 10             	add    esp,0x10
c0011e7f:	0f b6 c0             	movzx  eax,al
c0011e82:	85 c0                	test   eax,eax
c0011e84:	75 12                	jne    c0011e98 <update_arp_entry+0x70>
c0011e86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8c:	25 f0 00 00 00       	and    eax,0xf0
c0011e91:	3d e0 00 00 00       	cmp    eax,0xe0
c0011e96:	75 08                	jne    c0011ea0 <update_arp_entry+0x78>
c0011e98:	b0 f2                	mov    al,0xf2
c0011e9a:	e9 d9 00 00 00       	jmp    c0011f78 <update_arp_entry+0x150>
c0011e9f:	90                   	nop
c0011ea0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ea5:	83 ec 08             	sub    esp,0x8
c0011ea8:	50                   	push   eax
c0011ea9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ead:	e8 c2 fb ff ff       	call   c0011a74 <find_entry>
c0011eb2:	83 c4 10             	add    esp,0x10
c0011eb5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011eb9:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ebe:	85 c0                	test   eax,eax
c0011ec0:	79 0a                	jns    c0011ecc <update_arp_entry+0xa4>
c0011ec2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011ec6:	e9 ad 00 00 00       	jmp    c0011f78 <update_arp_entry+0x150>
c0011ecb:	90                   	nop
c0011ecc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ed1:	c1 e0 04             	shl    eax,0x4
c0011ed4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011ed9:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011edc:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011ee1:	c1 e0 04             	shl    eax,0x4
c0011ee4:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ee9:	83 c0 08             	add    eax,0x8
c0011eec:	83 ec 04             	sub    esp,0x4
c0011eef:	6a 06                	push   0x6
c0011ef1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011ef5:	50                   	push   eax
c0011ef6:	e8 7f e4 fe ff       	call   c000037a <memcpy>
c0011efb:	83 c4 10             	add    esp,0x10
c0011efe:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f03:	c1 e0 04             	shl    eax,0x4
c0011f06:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011f0b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f0e:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f13:	c1 e0 04             	shl    eax,0x4
c0011f16:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f1d:	85 c0                	test   eax,eax
c0011f1f:	74 53                	je     c0011f74 <update_arp_entry+0x14c>
c0011f21:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f26:	c1 e0 04             	shl    eax,0x4
c0011f29:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f34:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011f39:	c1 e0 04             	shl    eax,0x4
c0011f3c:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f41:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011f47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f4b:	83 c0 23             	add    eax,0x23
c0011f4e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f52:	50                   	push   eax
c0011f53:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011f57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f5b:	e8 40 fe ff ff       	call   c0011da0 <etharp_send_ip>
c0011f60:	83 c4 10             	add    esp,0x10
c0011f63:	83 ec 0c             	sub    esp,0xc
c0011f66:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011f6a:	e8 19 64 ff ff       	call   c0008388 <pbuf_free>
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	66 90                	xchg   ax,ax
c0011f74:	b0 00                	mov    al,0x0
c0011f76:	66 90                	xchg   ax,ax
c0011f78:	83 c4 2c             	add    esp,0x2c
c0011f7b:	c3                   	ret    

c0011f7c <etharp_find_addr>:
c0011f7c:	83 ec 1c             	sub    esp,0x1c
c0011f7f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011f84:	74 0a                	je     c0011f90 <etharp_find_addr+0x14>
c0011f86:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011f8b:	75 1b                	jne    c0011fa8 <etharp_find_addr+0x2c>
c0011f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0011f90:	83 ec 08             	sub    esp,0x8
c0011f93:	68 68 0c 03 c0       	push   0xc0030c68
c0011f98:	68 c6 fb 02 c0       	push   0xc002fbc6
c0011f9d:	e8 f6 db 00 00       	call   c001fb98 <CPrintf>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0011fa8:	83 ec 08             	sub    esp,0x8
c0011fab:	6a 02                	push   0x2
c0011fad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011fb1:	e8 be fa ff ff       	call   c0011a74 <find_entry>
c0011fb6:	83 c4 10             	add    esp,0x10
c0011fb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011fbd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011fc2:	85 c0                	test   eax,eax
c0011fc4:	78 4a                	js     c0012010 <etharp_find_addr+0x94>
c0011fc6:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011fcb:	c1 e0 04             	shl    eax,0x4
c0011fce:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011fd3:	8a 00                	mov    al,BYTE PTR [eax]
c0011fd5:	0f b6 c0             	movzx  eax,al
c0011fd8:	83 f8 02             	cmp    eax,0x2
c0011fdb:	75 33                	jne    c0012010 <etharp_find_addr+0x94>
c0011fdd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011fe2:	c1 e0 04             	shl    eax,0x4
c0011fe5:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011fea:	8d 50 08             	lea    edx,[eax+0x8]
c0011fed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ff1:	89 10                	mov    DWORD PTR [eax],edx
c0011ff3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011ff8:	c1 e0 04             	shl    eax,0x4
c0011ffb:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012000:	8d 50 04             	lea    edx,[eax+0x4]
c0012003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012007:	89 10                	mov    DWORD PTR [eax],edx
c0012009:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001200d:	eb 05                	jmp    c0012014 <etharp_find_addr+0x98>
c001200f:	90                   	nop
c0012010:	b0 ff                	mov    al,0xff
c0012012:	66 90                	xchg   ax,ax
c0012014:	83 c4 1c             	add    esp,0x1c
c0012017:	c3                   	ret    

c0012018 <etharp_arp_input>:
c0012018:	83 ec 2c             	sub    esp,0x2c
c001201b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0012020:	75 1a                	jne    c001203c <etharp_arp_input+0x24>
c0012022:	83 ec 08             	sub    esp,0x8
c0012025:	68 33 0d 03 c0       	push   0xc0030d33
c001202a:	68 c6 fb 02 c0       	push   0xc002fbc6
c001202f:	e8 64 db 00 00       	call   c001fb98 <CPrintf>
c0012034:	83 c4 10             	add    esp,0x10
c0012037:	e9 d4 02 00 00       	jmp    c0012310 <etharp_arp_input+0x2f8>
c001203c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012040:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012044:	0f b7 c0             	movzx  eax,ax
c0012047:	83 f8 29             	cmp    eax,0x29
c001204a:	77 34                	ja     c0012080 <etharp_arp_input+0x68>
c001204c:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0012052:	83 c0 01             	add    eax,0x1
c0012055:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c001205b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012061:	83 c0 01             	add    eax,0x1
c0012064:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c001206a:	83 ec 0c             	sub    esp,0xc
c001206d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012071:	e8 12 63 ff ff       	call   c0008388 <pbuf_free>
c0012076:	83 c4 10             	add    esp,0x10
c0012079:	e9 92 02 00 00       	jmp    c0012310 <etharp_arp_input+0x2f8>
c001207e:	66 90                	xchg   ax,ax
c0012080:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012087:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001208b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001208f:	83 c0 0e             	add    eax,0xe
c0012092:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012096:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001209a:	66 8b 00             	mov    ax,WORD PTR [eax]
c001209d:	0f b7 c0             	movzx  eax,ax
c00120a0:	3d 00 01 00 00       	cmp    eax,0x100
c00120a5:	75 31                	jne    c00120d8 <etharp_arp_input+0xc0>
c00120a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ab:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00120ae:	0f b6 c0             	movzx  eax,al
c00120b1:	83 f8 06             	cmp    eax,0x6
c00120b4:	75 22                	jne    c00120d8 <etharp_arp_input+0xc0>
c00120b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120ba:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c00120bd:	0f b6 c0             	movzx  eax,al
c00120c0:	83 f8 04             	cmp    eax,0x4
c00120c3:	75 13                	jne    c00120d8 <etharp_arp_input+0xc0>
c00120c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120c9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00120cd:	0f b7 c0             	movzx  eax,ax
c00120d0:	83 f8 08             	cmp    eax,0x8
c00120d3:	74 37                	je     c001210c <etharp_arp_input+0xf4>
c00120d5:	8d 76 00             	lea    esi,[esi+0x0]
c00120d8:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00120de:	83 c0 01             	add    eax,0x1
c00120e1:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00120e7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00120ed:	83 c0 01             	add    eax,0x1
c00120f0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00120f6:	83 ec 0c             	sub    esp,0xc
c00120f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00120fd:	e8 86 62 ff ff       	call   c0008388 <pbuf_free>
c0012102:	83 c4 10             	add    esp,0x10
c0012105:	e9 06 02 00 00       	jmp    c0012310 <etharp_arp_input+0x2f8>
c001210a:	66 90                	xchg   ax,ax
c001210c:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c0012112:	83 c0 01             	add    eax,0x1
c0012115:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c001211b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001211f:	83 c0 0e             	add    eax,0xe
c0012122:	83 ec 04             	sub    esp,0x4
c0012125:	6a 04                	push   0x4
c0012127:	50                   	push   eax
c0012128:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001212c:	50                   	push   eax
c001212d:	e8 48 e2 fe ff       	call   c000037a <memcpy>
c0012132:	83 c4 10             	add    esp,0x10
c0012135:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012139:	83 c0 18             	add    eax,0x18
c001213c:	83 ec 04             	sub    esp,0x4
c001213f:	6a 04                	push   0x4
c0012141:	50                   	push   eax
c0012142:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012146:	50                   	push   eax
c0012147:	e8 2e e2 fe ff       	call   c000037a <memcpy>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012153:	83 c0 04             	add    eax,0x4
c0012156:	74 0c                	je     c0012164 <etharp_arp_input+0x14c>
c0012158:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001215c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001215f:	85 c0                	test   eax,eax
c0012161:	75 09                	jne    c001216c <etharp_arp_input+0x154>
c0012163:	90                   	nop
c0012164:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012169:	eb 15                	jmp    c0012180 <etharp_arp_input+0x168>
c001216b:	90                   	nop
c001216c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012174:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012177:	39 c2                	cmp    edx,eax
c0012179:	0f 94 c0             	sete   al
c001217c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012180:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012185:	85 c0                	test   eax,eax
c0012187:	74 07                	je     c0012190 <etharp_arp_input+0x178>
c0012189:	b8 01 00 00 00       	mov    eax,0x1
c001218e:	eb 08                	jmp    c0012198 <etharp_arp_input+0x180>
c0012190:	b8 02 00 00 00       	mov    eax,0x2
c0012195:	8d 76 00             	lea    esi,[esi+0x0]
c0012198:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001219c:	83 c2 08             	add    edx,0x8
c001219f:	50                   	push   eax
c00121a0:	52                   	push   edx
c00121a1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00121a5:	50                   	push   eax
c00121a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121aa:	e8 79 fc ff ff       	call   c0011e28 <update_arp_entry>
c00121af:	83 c4 10             	add    esp,0x10
c00121b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121b6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00121ba:	0f b7 c0             	movzx  eax,ax
c00121bd:	3d 00 01 00 00       	cmp    eax,0x100
c00121c2:	74 10                	je     c00121d4 <etharp_arp_input+0x1bc>
c00121c4:	3d 00 02 00 00       	cmp    eax,0x200
c00121c9:	0f 84 2d 01 00 00    	je     c00122fc <etharp_arp_input+0x2e4>
c00121cf:	e9 14 01 00 00       	jmp    c00122e8 <etharp_arp_input+0x2d0>
c00121d4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00121d9:	85 c0                	test   eax,eax
c00121db:	0f 84 fb 00 00 00    	je     c00122dc <etharp_arp_input+0x2c4>
c00121e1:	83 ec 0c             	sub    esp,0xc
c00121e4:	6a 02                	push   0x2
c00121e6:	e8 31 ea fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00121eb:	83 c4 10             	add    esp,0x10
c00121ee:	89 c2                	mov    edx,eax
c00121f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121f4:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00121f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121fc:	8d 50 0e             	lea    edx,[eax+0xe]
c00121ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012203:	83 c0 18             	add    eax,0x18
c0012206:	83 ec 04             	sub    esp,0x4
c0012209:	6a 04                	push   0x4
c001220b:	52                   	push   edx
c001220c:	50                   	push   eax
c001220d:	e8 68 e1 fe ff       	call   c000037a <memcpy>
c0012212:	83 c4 10             	add    esp,0x10
c0012215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012219:	8d 50 04             	lea    edx,[eax+0x4]
c001221c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012220:	83 c0 0e             	add    eax,0xe
c0012223:	83 ec 04             	sub    esp,0x4
c0012226:	6a 04                	push   0x4
c0012228:	52                   	push   edx
c0012229:	50                   	push   eax
c001222a:	e8 4b e1 fe ff       	call   c000037a <memcpy>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012236:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012239:	0f b6 c0             	movzx  eax,al
c001223c:	83 f8 06             	cmp    eax,0x6
c001223f:	74 17                	je     c0012258 <etharp_arp_input+0x240>
c0012241:	83 ec 08             	sub    esp,0x8
c0012244:	68 fc 0b 03 c0       	push   0xc0030bfc
c0012249:	68 c6 fb 02 c0       	push   0xc002fbc6
c001224e:	e8 45 d9 00 00       	call   c001fb98 <CPrintf>
c0012253:	83 c4 10             	add    esp,0x10
c0012256:	66 90                	xchg   ax,ax
c0012258:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001225c:	8d 50 08             	lea    edx,[eax+0x8]
c001225f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012263:	83 c0 12             	add    eax,0x12
c0012266:	83 ec 04             	sub    esp,0x4
c0012269:	6a 06                	push   0x6
c001226b:	52                   	push   edx
c001226c:	50                   	push   eax
c001226d:	e8 08 e1 fe ff       	call   c000037a <memcpy>
c0012272:	83 c4 10             	add    esp,0x10
c0012275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012279:	8d 50 08             	lea    edx,[eax+0x8]
c001227c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012280:	83 ec 04             	sub    esp,0x4
c0012283:	6a 06                	push   0x6
c0012285:	52                   	push   edx
c0012286:	50                   	push   eax
c0012287:	e8 ee e0 fe ff       	call   c000037a <memcpy>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012293:	83 c0 08             	add    eax,0x8
c0012296:	83 ec 04             	sub    esp,0x4
c0012299:	6a 06                	push   0x6
c001229b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001229f:	50                   	push   eax
c00122a0:	e8 d5 e0 fe ff       	call   c000037a <memcpy>
c00122a5:	83 c4 10             	add    esp,0x10
c00122a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122ac:	83 c0 06             	add    eax,0x6
c00122af:	83 ec 04             	sub    esp,0x4
c00122b2:	6a 06                	push   0x6
c00122b4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122b8:	50                   	push   eax
c00122b9:	e8 bc e0 fe ff       	call   c000037a <memcpy>
c00122be:	83 c4 10             	add    esp,0x10
c00122c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122c5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00122c8:	83 ec 08             	sub    esp,0x8
c00122cb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00122cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122d3:	ff d0                	call   eax
c00122d5:	83 c4 10             	add    esp,0x10
c00122d8:	eb 26                	jmp    c0012300 <etharp_arp_input+0x2e8>
c00122da:	66 90                	xchg   ax,ax
c00122dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122e0:	83 c0 04             	add    eax,0x4
c00122e3:	eb 1b                	jmp    c0012300 <etharp_arp_input+0x2e8>
c00122e5:	8d 76 00             	lea    esi,[esi+0x0]
c00122e8:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c00122ee:	83 c0 01             	add    eax,0x1
c00122f1:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c00122f7:	eb 07                	jmp    c0012300 <etharp_arp_input+0x2e8>
c00122f9:	8d 76 00             	lea    esi,[esi+0x0]
c00122fc:	90                   	nop
c00122fd:	8d 76 00             	lea    esi,[esi+0x0]
c0012300:	83 ec 0c             	sub    esp,0xc
c0012303:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012307:	e8 7c 60 ff ff       	call   c0008388 <pbuf_free>
c001230c:	83 c4 10             	add    esp,0x10
c001230f:	90                   	nop
c0012310:	83 c4 2c             	add    esp,0x2c
c0012313:	c3                   	ret    

c0012314 <etharp_raw>:
c0012314:	83 ec 2c             	sub    esp,0x2c
c0012317:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001231b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012320:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012325:	83 ec 04             	sub    esp,0x4
c0012328:	6a 00                	push   0x0
c001232a:	6a 2a                	push   0x2a
c001232c:	6a 03                	push   0x3
c001232e:	e8 31 62 ff ff       	call   c0008564 <pbuf_alloc>
c0012333:	83 c4 10             	add    esp,0x10
c0012336:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001233a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001233f:	75 17                	jne    c0012358 <etharp_raw+0x44>
c0012341:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012347:	83 c0 01             	add    eax,0x1
c001234a:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012350:	b0 ff                	mov    al,0xff
c0012352:	e9 89 01 00 00       	jmp    c00124e0 <etharp_raw+0x1cc>
c0012357:	90                   	nop
c0012358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001235c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012360:	0f b7 c0             	movzx  eax,ax
c0012363:	83 f8 29             	cmp    eax,0x29
c0012366:	77 18                	ja     c0012380 <etharp_raw+0x6c>
c0012368:	83 ec 08             	sub    esp,0x8
c001236b:	68 8c 0c 03 c0       	push   0xc0030c8c
c0012370:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012375:	e8 1e d8 00 00       	call   c001fb98 <CPrintf>
c001237a:	83 c4 10             	add    esp,0x10
c001237d:	8d 76 00             	lea    esi,[esi+0x0]
c0012380:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012384:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012387:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001238b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001238f:	83 c0 0e             	add    eax,0xe
c0012392:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012396:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001239b:	83 ec 0c             	sub    esp,0xc
c001239e:	50                   	push   eax
c001239f:	e8 78 e8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	89 c2                	mov    edx,eax
c00123a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ad:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00123b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123b5:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00123b8:	0f b6 c0             	movzx  eax,al
c00123bb:	83 f8 06             	cmp    eax,0x6
c00123be:	74 18                	je     c00123d8 <etharp_raw+0xc4>
c00123c0:	83 ec 08             	sub    esp,0x8
c00123c3:	68 fc 0b 03 c0       	push   0xc0030bfc
c00123c8:	68 c6 fb 02 c0       	push   0xc002fbc6
c00123cd:	e8 c6 d7 00 00       	call   c001fb98 <CPrintf>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	8d 76 00             	lea    esi,[esi+0x0]
c00123d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123dc:	83 c0 08             	add    eax,0x8
c00123df:	83 ec 04             	sub    esp,0x4
c00123e2:	6a 06                	push   0x6
c00123e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00123e8:	50                   	push   eax
c00123e9:	e8 8c df fe ff       	call   c000037a <memcpy>
c00123ee:	83 c4 10             	add    esp,0x10
c00123f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123f5:	83 c0 12             	add    eax,0x12
c00123f8:	83 ec 04             	sub    esp,0x4
c00123fb:	6a 06                	push   0x6
c00123fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012401:	50                   	push   eax
c0012402:	e8 73 df fe ff       	call   c000037a <memcpy>
c0012407:	83 c4 10             	add    esp,0x10
c001240a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001240e:	83 ec 04             	sub    esp,0x4
c0012411:	6a 06                	push   0x6
c0012413:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012417:	50                   	push   eax
c0012418:	e8 5d df fe ff       	call   c000037a <memcpy>
c001241d:	83 c4 10             	add    esp,0x10
c0012420:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012424:	83 c0 06             	add    eax,0x6
c0012427:	83 ec 04             	sub    esp,0x4
c001242a:	6a 06                	push   0x6
c001242c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012430:	50                   	push   eax
c0012431:	e8 44 df fe ff       	call   c000037a <memcpy>
c0012436:	83 c4 10             	add    esp,0x10
c0012439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243d:	83 c0 0e             	add    eax,0xe
c0012440:	83 ec 04             	sub    esp,0x4
c0012443:	6a 04                	push   0x4
c0012445:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012449:	50                   	push   eax
c001244a:	e8 2b df fe ff       	call   c000037a <memcpy>
c001244f:	83 c4 10             	add    esp,0x10
c0012452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012456:	83 c0 18             	add    eax,0x18
c0012459:	83 ec 04             	sub    esp,0x4
c001245c:	6a 04                	push   0x4
c001245e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012462:	50                   	push   eax
c0012463:	e8 12 df fe ff       	call   c000037a <memcpy>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001246f:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c0012474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012478:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c001247e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012482:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c0012486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248a:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c001248e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012492:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c0012498:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001249c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001249f:	83 ec 08             	sub    esp,0x8
c00124a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00124a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124aa:	ff d0                	call   eax
c00124ac:	83 c4 10             	add    esp,0x10
c00124af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00124b3:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c00124b9:	83 c0 01             	add    eax,0x1
c00124bc:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c00124c2:	83 ec 0c             	sub    esp,0xc
c00124c5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00124c9:	e8 ba 5e ff ff       	call   c0008388 <pbuf_free>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00124d9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00124dd:	8d 76 00             	lea    esi,[esi+0x0]
c00124e0:	83 c4 2c             	add    esp,0x2c
c00124e3:	c3                   	ret    

c00124e4 <etharp_request>:
c00124e4:	83 ec 0c             	sub    esp,0xc
c00124e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124eb:	8d 48 04             	lea    ecx,[eax+0x4]
c00124ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f2:	8d 50 23             	lea    edx,[eax+0x23]
c00124f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f9:	83 c0 23             	add    eax,0x23
c00124fc:	6a 01                	push   0x1
c00124fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012502:	68 5c 0d 03 c0       	push   0xc0030d5c
c0012507:	51                   	push   ecx
c0012508:	52                   	push   edx
c0012509:	68 64 0d 03 c0       	push   0xc0030d64
c001250e:	50                   	push   eax
c001250f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012513:	e8 fc fd ff ff       	call   c0012314 <etharp_raw>
c0012518:	83 c4 20             	add    esp,0x20
c001251b:	83 c4 0c             	add    esp,0xc
c001251e:	c3                   	ret    
c001251f:	90                   	nop

c0012520 <etharp_query>:
c0012520:	83 ec 2c             	sub    esp,0x2c
c0012523:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012527:	83 c0 23             	add    eax,0x23
c001252a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001252e:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012533:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012537:	8b 00                	mov    eax,DWORD PTR [eax]
c0012539:	83 ec 08             	sub    esp,0x8
c001253c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012540:	50                   	push   eax
c0012541:	e8 e6 19 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	0f b6 c0             	movzx  eax,al
c001254c:	85 c0                	test   eax,eax
c001254e:	75 24                	jne    c0012574 <etharp_query+0x54>
c0012550:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012554:	8b 00                	mov    eax,DWORD PTR [eax]
c0012556:	25 f0 00 00 00       	and    eax,0xf0
c001255b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012560:	74 12                	je     c0012574 <etharp_query+0x54>
c0012562:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0012567:	74 0b                	je     c0012574 <etharp_query+0x54>
c0012569:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001256d:	8b 00                	mov    eax,DWORD PTR [eax]
c001256f:	85 c0                	test   eax,eax
c0012571:	75 09                	jne    c001257c <etharp_query+0x5c>
c0012573:	90                   	nop
c0012574:	b0 f2                	mov    al,0xf2
c0012576:	e9 dd 02 00 00       	jmp    c0012858 <etharp_query+0x338>
c001257b:	90                   	nop
c001257c:	83 ec 08             	sub    esp,0x8
c001257f:	6a 01                	push   0x1
c0012581:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012585:	e8 ea f4 ff ff       	call   c0011a74 <find_entry>
c001258a:	83 c4 10             	add    esp,0x10
c001258d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012591:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012596:	85 c0                	test   eax,eax
c0012598:	79 22                	jns    c00125bc <etharp_query+0x9c>
c001259a:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c001259f:	74 0f                	je     c00125b0 <etharp_query+0x90>
c00125a1:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00125a7:	83 c0 01             	add    eax,0x1
c00125aa:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00125b0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125b4:	e9 9f 02 00 00       	jmp    c0012858 <etharp_query+0x338>
c00125b9:	8d 76 00             	lea    esi,[esi+0x0]
c00125bc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125c1:	c1 e0 04             	shl    eax,0x4
c00125c4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125c9:	8a 00                	mov    al,BYTE PTR [eax]
c00125cb:	0f b6 c0             	movzx  eax,al
c00125ce:	85 c0                	test   eax,eax
c00125d0:	75 12                	jne    c00125e4 <etharp_query+0xc4>
c00125d2:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125d7:	c1 e0 04             	shl    eax,0x4
c00125da:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125df:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00125e2:	66 90                	xchg   ax,ax
c00125e4:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125e9:	c1 e0 04             	shl    eax,0x4
c00125ec:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125f1:	8a 00                	mov    al,BYTE PTR [eax]
c00125f3:	0f b6 c0             	movzx  eax,al
c00125f6:	83 f8 01             	cmp    eax,0x1
c00125f9:	74 2d                	je     c0012628 <etharp_query+0x108>
c00125fb:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012600:	c1 e0 04             	shl    eax,0x4
c0012603:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012608:	8a 00                	mov    al,BYTE PTR [eax]
c001260a:	0f b6 c0             	movzx  eax,al
c001260d:	83 f8 02             	cmp    eax,0x2
c0012610:	74 16                	je     c0012628 <etharp_query+0x108>
c0012612:	83 ec 08             	sub    esp,0x8
c0012615:	68 c0 0c 03 c0       	push   0xc0030cc0
c001261a:	68 c6 fb 02 c0       	push   0xc002fbc6
c001261f:	e8 74 d5 00 00       	call   c001fb98 <CPrintf>
c0012624:	83 c4 10             	add    esp,0x10
c0012627:	90                   	nop
c0012628:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001262d:	c1 e0 04             	shl    eax,0x4
c0012630:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012635:	8a 00                	mov    al,BYTE PTR [eax]
c0012637:	0f b6 c0             	movzx  eax,al
c001263a:	83 f8 01             	cmp    eax,0x1
c001263d:	74 09                	je     c0012648 <etharp_query+0x128>
c001263f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012644:	75 2a                	jne    c0012670 <etharp_query+0x150>
c0012646:	66 90                	xchg   ax,ax
c0012648:	83 ec 08             	sub    esp,0x8
c001264b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001264f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012653:	e8 8c fe ff ff       	call   c00124e4 <etharp_request>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001265f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012664:	75 0a                	jne    c0012670 <etharp_query+0x150>
c0012666:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001266a:	e9 e9 01 00 00       	jmp    c0012858 <etharp_query+0x338>
c001266f:	90                   	nop
c0012670:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012675:	75 15                	jne    c001268c <etharp_query+0x16c>
c0012677:	83 ec 08             	sub    esp,0x8
c001267a:	68 3a 00 03 c0       	push   0xc003003a
c001267f:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012684:	e8 0f d5 00 00       	call   c001fb98 <CPrintf>
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012691:	c1 e0 04             	shl    eax,0x4
c0012694:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012699:	8a 00                	mov    al,BYTE PTR [eax]
c001269b:	0f b6 c0             	movzx  eax,al
c001269e:	83 f8 02             	cmp    eax,0x2
c00126a1:	75 39                	jne    c00126dc <etharp_query+0x1bc>
c00126a3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00126a7:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00126ac:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126b1:	c1 e0 04             	shl    eax,0x4
c00126b4:	05 00 a9 03 c0       	add    eax,0xc003a900
c00126b9:	83 c0 08             	add    eax,0x8
c00126bc:	50                   	push   eax
c00126bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126c1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126c9:	e8 d2 f6 ff ff       	call   c0011da0 <etharp_send_ip>
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00126d5:	e9 7a 01 00 00       	jmp    c0012854 <etharp_query+0x334>
c00126da:	66 90                	xchg   ax,ax
c00126dc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126e1:	c1 e0 04             	shl    eax,0x4
c00126e4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00126e9:	8a 00                	mov    al,BYTE PTR [eax]
c00126eb:	0f b6 c0             	movzx  eax,al
c00126ee:	83 f8 01             	cmp    eax,0x1
c00126f1:	0f 85 5d 01 00 00    	jne    c0012854 <etharp_query+0x334>
c00126f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00126ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012703:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012707:	eb 63                	jmp    c001276c <etharp_query+0x24c>
c0012709:	8d 76 00             	lea    esi,[esi+0x0]
c001270c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012710:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012714:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012718:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001271b:	0f b7 d2             	movzx  edx,dx
c001271e:	0f b7 c0             	movzx  eax,ax
c0012721:	39 c2                	cmp    edx,eax
c0012723:	75 1f                	jne    c0012744 <etharp_query+0x224>
c0012725:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012729:	8b 00                	mov    eax,DWORD PTR [eax]
c001272b:	85 c0                	test   eax,eax
c001272d:	74 15                	je     c0012744 <etharp_query+0x224>
c001272f:	83 ec 08             	sub    esp,0x8
c0012732:	68 41 0d 03 c0       	push   0xc0030d41
c0012737:	68 c6 fb 02 c0       	push   0xc002fbc6
c001273c:	e8 57 d4 00 00       	call   c001fb98 <CPrintf>
c0012741:	83 c4 10             	add    esp,0x10
c0012744:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012748:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c001274b:	0f b6 c0             	movzx  eax,al
c001274e:	83 f8 01             	cmp    eax,0x1
c0012751:	74 0d                	je     c0012760 <etharp_query+0x240>
c0012753:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c001275b:	eb 17                	jmp    c0012774 <etharp_query+0x254>
c001275d:	8d 76 00             	lea    esi,[esi+0x0]
c0012760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012764:	8b 00                	mov    eax,DWORD PTR [eax]
c0012766:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001276a:	66 90                	xchg   ax,ax
c001276c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012771:	75 99                	jne    c001270c <etharp_query+0x1ec>
c0012773:	90                   	nop
c0012774:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012779:	74 59                	je     c00127d4 <etharp_query+0x2b4>
c001277b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001277f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012782:	0f b7 c0             	movzx  eax,ax
c0012785:	83 ec 04             	sub    esp,0x4
c0012788:	6a 00                	push   0x0
c001278a:	50                   	push   eax
c001278b:	6a 03                	push   0x3
c001278d:	e8 d2 5d ff ff       	call   c0008564 <pbuf_alloc>
c0012792:	83 c4 10             	add    esp,0x10
c0012795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012799:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001279e:	74 4c                	je     c00127ec <etharp_query+0x2cc>
c00127a0:	83 ec 08             	sub    esp,0x8
c00127a3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00127a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00127ab:	e8 1c 66 ff ff       	call   c0008dcc <pbuf_copy>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	0f be c0             	movsx  eax,al
c00127b6:	85 c0                	test   eax,eax
c00127b8:	74 32                	je     c00127ec <etharp_query+0x2cc>
c00127ba:	83 ec 0c             	sub    esp,0xc
c00127bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00127c1:	e8 c2 5b ff ff       	call   c0008388 <pbuf_free>
c00127c6:	83 c4 10             	add    esp,0x10
c00127c9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127d1:	eb 19                	jmp    c00127ec <etharp_query+0x2cc>
c00127d3:	90                   	nop
c00127d4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127dc:	83 ec 0c             	sub    esp,0xc
c00127df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00127e3:	e8 b0 63 ff ff       	call   c0008b98 <pbuf_ref>
c00127e8:	83 c4 10             	add    esp,0x10
c00127eb:	90                   	nop
c00127ec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00127f1:	74 4d                	je     c0012840 <etharp_query+0x320>
c00127f3:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00127f8:	c1 e0 04             	shl    eax,0x4
c00127fb:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012800:	8b 00                	mov    eax,DWORD PTR [eax]
c0012802:	85 c0                	test   eax,eax
c0012804:	74 1e                	je     c0012824 <etharp_query+0x304>
c0012806:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001280b:	c1 e0 04             	shl    eax,0x4
c001280e:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012813:	8b 00                	mov    eax,DWORD PTR [eax]
c0012815:	83 ec 0c             	sub    esp,0xc
c0012818:	50                   	push   eax
c0012819:	e8 6a 5b ff ff       	call   c0008388 <pbuf_free>
c001281e:	83 c4 10             	add    esp,0x10
c0012821:	8d 76 00             	lea    esi,[esi+0x0]
c0012824:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012829:	c1 e0 04             	shl    eax,0x4
c001282c:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c0012832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012836:	89 02                	mov    DWORD PTR [edx],eax
c0012838:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001283d:	eb 15                	jmp    c0012854 <etharp_query+0x334>
c001283f:	90                   	nop
c0012840:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012846:	83 c0 01             	add    eax,0x1
c0012849:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001284f:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c0012854:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012858:	83 c4 2c             	add    esp,0x2c
c001285b:	c3                   	ret    

c001285c <etharp_output>:
c001285c:	83 ec 1c             	sub    esp,0x1c
c001285f:	83 ec 08             	sub    esp,0x8
c0012862:	6a 0e                	push   0xe
c0012864:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012868:	e8 7b 59 ff ff       	call   c00081e8 <pbuf_header>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	0f b6 c0             	movzx  eax,al
c0012873:	85 c0                	test   eax,eax
c0012875:	74 19                	je     c0012890 <etharp_output+0x34>
c0012877:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c001287d:	83 c0 01             	add    eax,0x1
c0012880:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c0012886:	b0 fe                	mov    al,0xfe
c0012888:	e9 8b 01 00 00       	jmp    c0012a18 <etharp_output+0x1bc>
c001288d:	8d 76 00             	lea    esi,[esi+0x0]
c0012890:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012898:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001289c:	8b 00                	mov    eax,DWORD PTR [eax]
c001289e:	83 ec 08             	sub    esp,0x8
c00128a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00128a5:	50                   	push   eax
c00128a6:	e8 81 16 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c00128ab:	83 c4 10             	add    esp,0x10
c00128ae:	0f b6 c0             	movzx  eax,al
c00128b1:	85 c0                	test   eax,eax
c00128b3:	74 0f                	je     c00128c4 <etharp_output+0x68>
c00128b5:	c7 44 24 0c 64 0d 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030d64
c00128bd:	e9 3a 01 00 00       	jmp    c00129fc <etharp_output+0x1a0>
c00128c2:	66 90                	xchg   ax,ax
c00128c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ca:	25 f0 00 00 00       	and    eax,0xf0
c00128cf:	3d e0 00 00 00       	cmp    eax,0xe0
c00128d4:	75 42                	jne    c0012918 <etharp_output+0xbc>
c00128d6:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c00128db:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00128e0:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c00128e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128e9:	83 c0 01             	add    eax,0x1
c00128ec:	8a 00                	mov    al,BYTE PTR [eax]
c00128ee:	83 e0 7f             	and    eax,0x7f
c00128f1:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00128f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128f9:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c00128fc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012900:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012904:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012907:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001290b:	8d 44 24 06          	lea    eax,[esp+0x6]
c001290f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012913:	e9 e4 00 00 00       	jmp    c00129fc <etharp_output+0x1a0>
c0012918:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001291c:	8b 10                	mov    edx,DWORD PTR [eax]
c001291e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012922:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012925:	31 c2                	xor    edx,eax
c0012927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001292b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001292e:	21 d0                	and    eax,edx
c0012930:	74 3a                	je     c001296c <etharp_output+0x110>
c0012932:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012936:	8b 00                	mov    eax,DWORD PTR [eax]
c0012938:	0f b7 c0             	movzx  eax,ax
c001293b:	3d a9 fe 00 00       	cmp    eax,0xfea9
c0012940:	74 2a                	je     c001296c <etharp_output+0x110>
c0012942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012946:	83 c0 0c             	add    eax,0xc
c0012949:	74 19                	je     c0012964 <etharp_output+0x108>
c001294b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001294f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012952:	85 c0                	test   eax,eax
c0012954:	74 0e                	je     c0012964 <etharp_output+0x108>
c0012956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001295a:	83 c0 0c             	add    eax,0xc
c001295d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012961:	eb 09                	jmp    c001296c <etharp_output+0x110>
c0012963:	90                   	nop
c0012964:	b0 fc                	mov    al,0xfc
c0012966:	e9 ad 00 00 00       	jmp    c0012a18 <etharp_output+0x1bc>
c001296b:	90                   	nop
c001296c:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012971:	0f b6 c0             	movzx  eax,al
c0012974:	c1 e0 04             	shl    eax,0x4
c0012977:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001297c:	8a 00                	mov    al,BYTE PTR [eax]
c001297e:	0f b6 c0             	movzx  eax,al
c0012981:	83 f8 02             	cmp    eax,0x2
c0012984:	75 5a                	jne    c00129e0 <etharp_output+0x184>
c0012986:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001298a:	8b 10                	mov    edx,DWORD PTR [eax]
c001298c:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012991:	0f b6 c0             	movzx  eax,al
c0012994:	c1 e0 04             	shl    eax,0x4
c0012997:	05 04 a9 03 c0       	add    eax,0xc003a904
c001299c:	8b 00                	mov    eax,DWORD PTR [eax]
c001299e:	39 c2                	cmp    edx,eax
c00129a0:	75 3e                	jne    c00129e0 <etharp_output+0x184>
c00129a2:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00129a8:	83 c0 01             	add    eax,0x1
c00129ab:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00129b1:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00129b6:	0f b6 c0             	movzx  eax,al
c00129b9:	c1 e0 04             	shl    eax,0x4
c00129bc:	05 00 a9 03 c0       	add    eax,0xc003a900
c00129c1:	8d 50 08             	lea    edx,[eax+0x8]
c00129c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129c8:	83 c0 23             	add    eax,0x23
c00129cb:	52                   	push   edx
c00129cc:	50                   	push   eax
c00129cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d5:	e8 c6 f3 ff ff       	call   c0011da0 <etharp_send_ip>
c00129da:	83 c4 10             	add    esp,0x10
c00129dd:	eb 39                	jmp    c0012a18 <etharp_output+0x1bc>
c00129df:	90                   	nop
c00129e0:	83 ec 04             	sub    esp,0x4
c00129e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00129eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129ef:	e8 2c fb ff ff       	call   c0012520 <etharp_query>
c00129f4:	83 c4 10             	add    esp,0x10
c00129f7:	eb 1f                	jmp    c0012a18 <etharp_output+0x1bc>
c00129f9:	8d 76 00             	lea    esi,[esi+0x0]
c00129fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a00:	83 c0 23             	add    eax,0x23
c0012a03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012a07:	50                   	push   eax
c0012a08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a10:	e8 8b f3 ff ff       	call   c0011da0 <etharp_send_ip>
c0012a15:	83 c4 10             	add    esp,0x10
c0012a18:	83 c4 1c             	add    esp,0x1c
c0012a1b:	c3                   	ret    

c0012a1c <ethernet_input>:
c0012a1c:	83 ec 1c             	sub    esp,0x1c
c0012a1f:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a2a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012a2e:	0f b7 c0             	movzx  eax,ax
c0012a31:	83 f8 0e             	cmp    eax,0xe
c0012a34:	77 26                	ja     c0012a5c <ethernet_input+0x40>
c0012a36:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a3c:	83 c0 01             	add    eax,0x1
c0012a3f:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a45:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a4b:	83 c0 01             	add    eax,0x1
c0012a4e:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a54:	e9 ef 00 00 00       	jmp    c0012b48 <ethernet_input+0x12c>
c0012a59:	8d 76 00             	lea    esi,[esi+0x0]
c0012a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a6b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0012a6f:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0012a74:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0012a79:	83 f8 08             	cmp    eax,0x8
c0012a7c:	74 0e                	je     c0012a8c <ethernet_input+0x70>
c0012a7e:	3d 08 06 00 00       	cmp    eax,0x608
c0012a83:	74 6b                	je     c0012af0 <ethernet_input+0xd4>
c0012a85:	e9 92 00 00 00       	jmp    c0012b1c <ethernet_input+0x100>
c0012a8a:	66 90                	xchg   ax,ax
c0012a8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a90:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a93:	0f b6 c0             	movzx  eax,al
c0012a96:	83 e0 20             	and    eax,0x20
c0012a99:	0f 84 a1 00 00 00    	je     c0012b40 <ethernet_input+0x124>
c0012a9f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012aa4:	f7 d8                	neg    eax
c0012aa6:	98                   	cwde   
c0012aa7:	83 ec 08             	sub    esp,0x8
c0012aaa:	50                   	push   eax
c0012aab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012aaf:	e8 34 57 ff ff       	call   c00081e8 <pbuf_header>
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	0f b6 c0             	movzx  eax,al
c0012aba:	85 c0                	test   eax,eax
c0012abc:	74 1a                	je     c0012ad8 <ethernet_input+0xbc>
c0012abe:	83 ec 08             	sub    esp,0x8
c0012ac1:	68 e8 0c 03 c0       	push   0xc0030ce8
c0012ac6:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012acb:	e8 c8 d0 00 00       	call   c001fb98 <CPrintf>
c0012ad0:	83 c4 10             	add    esp,0x10
c0012ad3:	eb 73                	jmp    c0012b48 <ethernet_input+0x12c>
c0012ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad8:	83 ec 08             	sub    esp,0x8
c0012adb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012adf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ae3:	e8 7c 0c 00 00       	call   c0013764 <ip_input>
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	eb 4f                	jmp    c0012b3c <ethernet_input+0x120>
c0012aed:	8d 76 00             	lea    esi,[esi+0x0]
c0012af0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012af4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012af7:	0f b6 c0             	movzx  eax,al
c0012afa:	83 e0 20             	and    eax,0x20
c0012afd:	74 45                	je     c0012b44 <ethernet_input+0x128>
c0012aff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b03:	83 c0 23             	add    eax,0x23
c0012b06:	83 ec 04             	sub    esp,0x4
c0012b09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b0d:	50                   	push   eax
c0012b0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012b12:	e8 01 f5 ff ff       	call   c0012018 <etharp_arp_input>
c0012b17:	83 c4 10             	add    esp,0x10
c0012b1a:	eb 20                	jmp    c0012b3c <ethernet_input+0x120>
c0012b1c:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012b22:	83 c0 01             	add    eax,0x1
c0012b25:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012b2b:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012b31:	83 c0 01             	add    eax,0x1
c0012b34:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012b3a:	eb 0c                	jmp    c0012b48 <ethernet_input+0x12c>
c0012b3c:	b0 00                	mov    al,0x0
c0012b3e:	eb 1c                	jmp    c0012b5c <ethernet_input+0x140>
c0012b40:	90                   	nop
c0012b41:	eb 05                	jmp    c0012b48 <ethernet_input+0x12c>
c0012b43:	90                   	nop
c0012b44:	90                   	nop
c0012b45:	8d 76 00             	lea    esi,[esi+0x0]
c0012b48:	83 ec 0c             	sub    esp,0xc
c0012b4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b4f:	e8 34 58 ff ff       	call   c0008388 <pbuf_free>
c0012b54:	83 c4 10             	add    esp,0x10
c0012b57:	b0 00                	mov    al,0x0
c0012b59:	8d 76 00             	lea    esi,[esi+0x0]
c0012b5c:	83 c4 1c             	add    esp,0x1c
c0012b5f:	c3                   	ret    

c0012b60 <icmp_input>:
c0012b60:	83 ec 2c             	sub    esp,0x2c
c0012b63:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012b69:	83 c0 01             	add    eax,0x1
c0012b6c:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012b72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b81:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012b84:	0f b7 c0             	movzx  eax,ax
c0012b87:	83 ec 0c             	sub    esp,0xc
c0012b8a:	50                   	push   eax
c0012b8b:	e8 8c e0 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012b90:	83 c4 10             	add    esp,0x10
c0012b93:	0f b7 c0             	movzx  eax,ax
c0012b96:	c1 e8 08             	shr    eax,0x8
c0012b99:	83 e0 0f             	and    eax,0xf
c0012b9c:	c1 e0 02             	shl    eax,0x2
c0012b9f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012ba4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012ba9:	f7 d8                	neg    eax
c0012bab:	98                   	cwde   
c0012bac:	83 ec 08             	sub    esp,0x8
c0012baf:	50                   	push   eax
c0012bb0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bb4:	e8 2f 56 ff ff       	call   c00081e8 <pbuf_header>
c0012bb9:	83 c4 10             	add    esp,0x10
c0012bbc:	0f b6 c0             	movzx  eax,al
c0012bbf:	85 c0                	test   eax,eax
c0012bc1:	0f 85 b1 03 00 00    	jne    c0012f78 <icmp_input+0x418>
c0012bc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bcb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bce:	0f b7 c0             	movzx  eax,ax
c0012bd1:	83 f8 03             	cmp    eax,0x3
c0012bd4:	0f 86 9e 03 00 00    	jbe    c0012f78 <icmp_input+0x418>
c0012bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012be1:	8a 00                	mov    al,BYTE PTR [eax]
c0012be3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012be7:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012bec:	85 c0                	test   eax,eax
c0012bee:	0f 84 6c 03 00 00    	je     c0012f60 <icmp_input+0x400>
c0012bf4:	83 f8 08             	cmp    eax,0x8
c0012bf7:	0f 85 43 03 00 00    	jne    c0012f40 <icmp_input+0x3e0>
c0012bfd:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012c05:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012c0a:	25 f0 00 00 00       	and    eax,0xf0
c0012c0f:	3d e0 00 00 00       	cmp    eax,0xe0
c0012c14:	75 0a                	jne    c0012c20 <icmp_input+0xc0>
c0012c16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012c1e:	66 90                	xchg   ax,ax
c0012c20:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012c25:	83 ec 08             	sub    esp,0x8
c0012c28:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c2c:	50                   	push   eax
c0012c2d:	e8 fa 12 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	0f b6 c0             	movzx  eax,al
c0012c38:	85 c0                	test   eax,eax
c0012c3a:	74 08                	je     c0012c44 <icmp_input+0xe4>
c0012c3c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012c44:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012c49:	75 25                	jne    c0012c70 <icmp_input+0x110>
c0012c4b:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012c51:	83 c0 01             	add    eax,0x1
c0012c54:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012c5a:	83 ec 0c             	sub    esp,0xc
c0012c5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c61:	e8 22 57 ff ff       	call   c0008388 <pbuf_free>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	e9 56 03 00 00       	jmp    c0012fc4 <icmp_input+0x464>
c0012c6e:	66 90                	xchg   ax,ax
c0012c70:	90                   	nop
c0012c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c78:	0f b7 c0             	movzx  eax,ax
c0012c7b:	83 f8 07             	cmp    eax,0x7
c0012c7e:	0f 86 f8 02 00 00    	jbe    c0012f7c <icmp_input+0x41c>
c0012c84:	83 ec 0c             	sub    esp,0xc
c0012c87:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8b:	e8 5c 09 00 00       	call   c00135ec <inet_chksum_pbuf>
c0012c90:	83 c4 10             	add    esp,0x10
c0012c93:	0f b7 c0             	movzx  eax,ax
c0012c96:	85 c0                	test   eax,eax
c0012c98:	74 26                	je     c0012cc0 <icmp_input+0x160>
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ca1:	e8 e2 56 ff ff       	call   c0008388 <pbuf_free>
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012caf:	83 c0 01             	add    eax,0x1
c0012cb2:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012cb8:	e9 07 03 00 00       	jmp    c0012fc4 <icmp_input+0x464>
c0012cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0012cc0:	83 ec 08             	sub    esp,0x8
c0012cc3:	6a 22                	push   0x22
c0012cc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012cc9:	e8 1a 55 ff ff       	call   c00081e8 <pbuf_header>
c0012cce:	83 c4 10             	add    esp,0x10
c0012cd1:	0f b6 c0             	movzx  eax,al
c0012cd4:	85 c0                	test   eax,eax
c0012cd6:	0f 84 24 01 00 00    	je     c0012e00 <icmp_input+0x2a0>
c0012cdc:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012ce1:	83 ec 08             	sub    esp,0x8
c0012ce4:	50                   	push   eax
c0012ce5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ce9:	e8 fa 54 ff ff       	call   c00081e8 <pbuf_header>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	0f b6 c0             	movzx  eax,al
c0012cf4:	85 c0                	test   eax,eax
c0012cf6:	74 1c                	je     c0012d14 <icmp_input+0x1b4>
c0012cf8:	83 ec 08             	sub    esp,0x8
c0012cfb:	68 6c 0d 03 c0       	push   0xc0030d6c
c0012d00:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012d05:	e8 8e ce 00 00       	call   c001fb98 <CPrintf>
c0012d0a:	83 c4 10             	add    esp,0x10
c0012d0d:	e9 92 02 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012d12:	66 90                	xchg   ax,ax
c0012d14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d18:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012d1b:	0f b7 c0             	movzx  eax,ax
c0012d1e:	83 ec 04             	sub    esp,0x4
c0012d21:	6a 00                	push   0x0
c0012d23:	50                   	push   eax
c0012d24:	6a 02                	push   0x2
c0012d26:	e8 39 58 ff ff       	call   c0008564 <pbuf_alloc>
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012d32:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012d37:	0f 84 63 02 00 00    	je     c0012fa0 <icmp_input+0x440>
c0012d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d41:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012d45:	0f b7 c0             	movzx  eax,ax
c0012d48:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012d4d:	83 c2 08             	add    edx,0x8
c0012d50:	39 d0                	cmp    eax,edx
c0012d52:	73 18                	jae    c0012d6c <icmp_input+0x20c>
c0012d54:	83 ec 08             	sub    esp,0x8
c0012d57:	68 a0 0d 03 c0       	push   0xc0030da0
c0012d5c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012d61:	e8 32 ce 00 00       	call   c001fb98 <CPrintf>
c0012d66:	83 c4 10             	add    esp,0x10
c0012d69:	8d 76 00             	lea    esi,[esi+0x0]
c0012d6c:	83 ec 08             	sub    esp,0x8
c0012d6f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d77:	e8 50 60 ff ff       	call   c0008dcc <pbuf_copy>
c0012d7c:	83 c4 10             	add    esp,0x10
c0012d7f:	0f be c0             	movsx  eax,al
c0012d82:	85 c0                	test   eax,eax
c0012d84:	74 1a                	je     c0012da0 <icmp_input+0x240>
c0012d86:	83 ec 08             	sub    esp,0x8
c0012d89:	68 d8 0d 03 c0       	push   0xc0030dd8
c0012d8e:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012d93:	e8 00 ce 00 00       	call   c001fb98 <CPrintf>
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	e9 04 02 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012da7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012dab:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012db0:	f7 d8                	neg    eax
c0012db2:	98                   	cwde   
c0012db3:	83 ec 08             	sub    esp,0x8
c0012db6:	50                   	push   eax
c0012db7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dbb:	e8 28 54 ff ff       	call   c00081e8 <pbuf_header>
c0012dc0:	83 c4 10             	add    esp,0x10
c0012dc3:	0f b6 c0             	movzx  eax,al
c0012dc6:	85 c0                	test   eax,eax
c0012dc8:	74 1a                	je     c0012de4 <icmp_input+0x284>
c0012dca:	83 ec 08             	sub    esp,0x8
c0012dcd:	68 00 0e 03 c0       	push   0xc0030e00
c0012dd2:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012dd7:	e8 bc cd 00 00       	call   c001fb98 <CPrintf>
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	e9 c0 01 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012de4:	83 ec 0c             	sub    esp,0xc
c0012de7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012deb:	e8 98 55 ff ff       	call   c0008388 <pbuf_free>
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012dfb:	eb 37                	jmp    c0012e34 <icmp_input+0x2d4>
c0012dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012e00:	83 ec 08             	sub    esp,0x8
c0012e03:	6a de                	push   0xffffffde
c0012e05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e09:	e8 da 53 ff ff       	call   c00081e8 <pbuf_header>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	0f b6 c0             	movzx  eax,al
c0012e14:	85 c0                	test   eax,eax
c0012e16:	74 1c                	je     c0012e34 <icmp_input+0x2d4>
c0012e18:	83 ec 08             	sub    esp,0x8
c0012e1b:	68 00 0e 03 c0       	push   0xc0030e00
c0012e20:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012e25:	e8 6e cd 00 00       	call   c001fb98 <CPrintf>
c0012e2a:	83 c4 10             	add    esp,0x10
c0012e2d:	e9 72 01 00 00       	jmp    c0012fa4 <icmp_input+0x444>
c0012e32:	66 90                	xchg   ax,ax
c0012e34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e3f:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012e45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012e4c:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012e59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e5d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e64:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012e68:	0f b7 c0             	movzx  eax,ax
c0012e6b:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012e70:	76 1a                	jbe    c0012e8c <icmp_input+0x32c>
c0012e72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e76:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012e7a:	83 c0 09             	add    eax,0x9
c0012e7d:	89 c2                	mov    edx,eax
c0012e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e83:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012e87:	eb 1b                	jmp    c0012ea4 <icmp_input+0x344>
c0012e89:	8d 76 00             	lea    esi,[esi+0x0]
c0012e8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e90:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012e94:	83 c0 08             	add    eax,0x8
c0012e97:	89 c2                	mov    edx,eax
c0012e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e9d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ea8:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eb0:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012eb6:	83 ec 08             	sub    esp,0x8
c0012eb9:	6a 14                	push   0x14
c0012ebb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012ebf:	e8 00 07 00 00       	call   c00135c4 <inet_chksum>
c0012ec4:	83 c4 10             	add    esp,0x10
c0012ec7:	89 c2                	mov    edx,eax
c0012ec9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ecd:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0012ed1:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012ed7:	83 c0 01             	add    eax,0x1
c0012eda:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012ee0:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012ee5:	83 ec 08             	sub    esp,0x8
c0012ee8:	50                   	push   eax
c0012ee9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012eed:	e8 f6 52 ff ff       	call   c00081e8 <pbuf_header>
c0012ef2:	83 c4 10             	add    esp,0x10
c0012ef5:	0f b6 c0             	movzx  eax,al
c0012ef8:	85 c0                	test   eax,eax
c0012efa:	74 18                	je     c0012f14 <icmp_input+0x3b4>
c0012efc:	83 ec 08             	sub    esp,0x8
c0012eff:	68 e8 0c 03 c0       	push   0xc0030ce8
c0012f04:	68 c6 fb 02 c0       	push   0xc002fbc6
c0012f09:	e8 8a cc 00 00       	call   c001fb98 <CPrintf>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	eb 51                	jmp    c0012f64 <icmp_input+0x404>
c0012f13:	90                   	nop
c0012f14:	83 ec 04             	sub    esp,0x4
c0012f17:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f1b:	6a 01                	push   0x1
c0012f1d:	6a 00                	push   0x0
c0012f1f:	68 ff 00 00 00       	push   0xff
c0012f24:	6a 00                	push   0x0
c0012f26:	68 98 68 03 c0       	push   0xc0036898
c0012f2b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f2f:	e8 74 0c 00 00       	call   c0013ba8 <ip_output_if>
c0012f34:	83 c4 20             	add    esp,0x20
c0012f37:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012f3b:	eb 27                	jmp    c0012f64 <icmp_input+0x404>
c0012f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f40:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012f46:	83 c0 01             	add    eax,0x1
c0012f49:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012f4f:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012f55:	83 c0 01             	add    eax,0x1
c0012f58:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012f5e:	eb 04                	jmp    c0012f64 <icmp_input+0x404>
c0012f60:	90                   	nop
c0012f61:	8d 76 00             	lea    esi,[esi+0x0]
c0012f64:	83 ec 0c             	sub    esp,0xc
c0012f67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f6b:	e8 18 54 ff ff       	call   c0008388 <pbuf_free>
c0012f70:	83 c4 10             	add    esp,0x10
c0012f73:	eb 4f                	jmp    c0012fc4 <icmp_input+0x464>
c0012f75:	8d 76 00             	lea    esi,[esi+0x0]
c0012f78:	90                   	nop
c0012f79:	eb 05                	jmp    c0012f80 <icmp_input+0x420>
c0012f7b:	90                   	nop
c0012f7c:	90                   	nop
c0012f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0012f80:	83 ec 0c             	sub    esp,0xc
c0012f83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012f87:	e8 fc 53 ff ff       	call   c0008388 <pbuf_free>
c0012f8c:	83 c4 10             	add    esp,0x10
c0012f8f:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012f95:	83 c0 01             	add    eax,0x1
c0012f98:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012f9e:	eb 24                	jmp    c0012fc4 <icmp_input+0x464>
c0012fa0:	90                   	nop
c0012fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0012fa4:	83 ec 0c             	sub    esp,0xc
c0012fa7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fab:	e8 d8 53 ff ff       	call   c0008388 <pbuf_free>
c0012fb0:	83 c4 10             	add    esp,0x10
c0012fb3:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012fb9:	83 c0 01             	add    eax,0x1
c0012fbc:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012fc2:	90                   	nop
c0012fc3:	90                   	nop
c0012fc4:	83 c4 2c             	add    esp,0x2c
c0012fc7:	c3                   	ret    

c0012fc8 <icmp_send_response>:
c0012fc8:	83 ec 2c             	sub    esp,0x2c
c0012fcb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fcf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012fd3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012fd7:	88 d0                	mov    al,dl
c0012fd9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012fdd:	83 ec 04             	sub    esp,0x4
c0012fe0:	6a 00                	push   0x0
c0012fe2:	6a 24                	push   0x24
c0012fe4:	6a 01                	push   0x1
c0012fe6:	e8 79 55 ff ff       	call   c0008564 <pbuf_alloc>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ff2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012ff7:	0f 84 ff 00 00 00    	je     c00130fc <icmp_send_response+0x134>
c0012ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013001:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013005:	0f b7 c0             	movzx  eax,ax
c0013008:	83 f8 23             	cmp    eax,0x23
c001300b:	77 17                	ja     c0013024 <icmp_send_response+0x5c>
c001300d:	83 ec 08             	sub    esp,0x8
c0013010:	68 34 0e 03 c0       	push   0xc0030e34
c0013015:	68 c6 fb 02 c0       	push   0xc002fbc6
c001301a:	e8 79 cb 00 00       	call   c001fb98 <CPrintf>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	66 90                	xchg   ax,ax
c0013024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001302b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001302f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013033:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013036:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001303a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001303e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013042:	88 10                	mov    BYTE PTR [eax],dl
c0013044:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013048:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c001304c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001304f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013053:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0013059:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001305d:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001306a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001306e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013071:	83 c2 08             	add    edx,0x8
c0013074:	83 ec 04             	sub    esp,0x4
c0013077:	6a 1c                	push   0x1c
c0013079:	50                   	push   eax
c001307a:	52                   	push   edx
c001307b:	e8 fa d2 fe ff       	call   c000037a <memcpy>
c0013080:	83 c4 10             	add    esp,0x10
c0013083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013087:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c001308d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013091:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013095:	0f b7 c0             	movzx  eax,ax
c0013098:	83 ec 08             	sub    esp,0x8
c001309b:	50                   	push   eax
c001309c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00130a0:	e8 1f 05 00 00       	call   c00135c4 <inet_chksum>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	89 c2                	mov    edx,eax
c00130aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130ae:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00130b2:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c00130b8:	83 c0 01             	add    eax,0x1
c00130bb:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c00130c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00130c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130cc:	83 ec 08             	sub    esp,0x8
c00130cf:	6a 01                	push   0x1
c00130d1:	6a 00                	push   0x0
c00130d3:	68 ff 00 00 00       	push   0xff
c00130d8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00130dc:	50                   	push   eax
c00130dd:	6a 00                	push   0x0
c00130df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130e3:	e8 9c 0d 00 00       	call   c0013e84 <ip_output>
c00130e8:	83 c4 20             	add    esp,0x20
c00130eb:	83 ec 0c             	sub    esp,0xc
c00130ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00130f2:	e8 91 52 ff ff       	call   c0008388 <pbuf_free>
c00130f7:	83 c4 10             	add    esp,0x10
c00130fa:	eb 04                	jmp    c0013100 <icmp_send_response+0x138>
c00130fc:	90                   	nop
c00130fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013100:	83 c4 2c             	add    esp,0x2c
c0013103:	c3                   	ret    

c0013104 <icmp_dest_unreach>:
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001310b:	0f b6 c0             	movzx  eax,al
c001310e:	83 ec 04             	sub    esp,0x4
c0013111:	50                   	push   eax
c0013112:	6a 03                	push   0x3
c0013114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013118:	e8 ab fe ff ff       	call   c0012fc8 <icmp_send_response>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	90                   	nop
c0013121:	83 c4 0c             	add    esp,0xc
c0013124:	c3                   	ret    
c0013125:	8d 76 00             	lea    esi,[esi+0x0]

c0013128 <icmp_time_exceeded>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001312f:	0f b6 c0             	movzx  eax,al
c0013132:	83 ec 04             	sub    esp,0x4
c0013135:	50                   	push   eax
c0013136:	6a 0b                	push   0xb
c0013138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313c:	e8 87 fe ff ff       	call   c0012fc8 <icmp_send_response>
c0013141:	83 c4 10             	add    esp,0x10
c0013144:	90                   	nop
c0013145:	83 c4 0c             	add    esp,0xc
c0013148:	c3                   	ret    
c0013149:	66 90                	xchg   ax,ax
c001314b:	90                   	nop

c001314c <lwip_standard_chksum>:
c001314c:	83 ec 2c             	sub    esp,0x2c
c001314f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013153:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013157:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c001315e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001316a:	83 e0 01             	and    eax,0x1
c001316d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013171:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013176:	74 24                	je     c001319c <lwip_standard_chksum+0x50>
c0013178:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001317d:	7e 1d                	jle    c001319c <lwip_standard_chksum+0x50>
c001317f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013183:	8d 42 01             	lea    eax,[edx+0x1]
c0013186:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001318a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001318e:	83 c0 01             	add    eax,0x1
c0013191:	8a 12                	mov    dl,BYTE PTR [edx]
c0013193:	88 10                	mov    BYTE PTR [eax],dl
c0013195:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c001319a:	66 90                	xchg   ax,ax
c001319c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131a0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131a4:	eb 1e                	jmp    c00131c4 <lwip_standard_chksum+0x78>
c00131a6:	66 90                	xchg   ax,ax
c00131a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ac:	8d 50 02             	lea    edx,[eax+0x2]
c00131af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00131b6:	0f b7 c0             	movzx  eax,ax
c00131b9:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00131bd:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c00131c2:	66 90                	xchg   ax,ax
c00131c4:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00131c9:	7f dd                	jg     c00131a8 <lwip_standard_chksum+0x5c>
c00131cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00131d0:	7e 0e                	jle    c00131e0 <lwip_standard_chksum+0x94>
c00131d2:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00131d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131da:	8a 12                	mov    dl,BYTE PTR [edx]
c00131dc:	88 10                	mov    BYTE PTR [eax],dl
c00131de:	66 90                	xchg   ax,ax
c00131e0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00131e5:	0f b7 c0             	movzx  eax,ax
c00131e8:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00131ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131f0:	c1 e8 10             	shr    eax,0x10
c00131f3:	89 c2                	mov    edx,eax
c00131f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131f9:	0f b7 c0             	movzx  eax,ax
c00131fc:	01 d0                	add    eax,edx
c00131fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013202:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013206:	c1 e8 10             	shr    eax,0x10
c0013209:	89 c2                	mov    edx,eax
c001320b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001320f:	0f b7 c0             	movzx  eax,ax
c0013212:	01 d0                	add    eax,edx
c0013214:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013218:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001321d:	74 1d                	je     c001323c <lwip_standard_chksum+0xf0>
c001321f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013223:	0f b7 c0             	movzx  eax,ax
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	50                   	push   eax
c001322a:	e8 ed d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	0f b7 c0             	movzx  eax,ax
c0013235:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013239:	8d 76 00             	lea    esi,[esi+0x0]
c001323c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013240:	83 c4 2c             	add    esp,0x2c
c0013243:	c3                   	ret    

c0013244 <inet_chksum_pseudo>:
c0013244:	83 ec 2c             	sub    esp,0x2c
c0013247:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001324b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001324f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013253:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013258:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013260:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013265:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013269:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001326d:	e9 8a 00 00 00       	jmp    c00132fc <inet_chksum_pseudo+0xb8>
c0013272:	66 90                	xchg   ax,ax
c0013274:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013278:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001327c:	0f b7 d0             	movzx  edx,ax
c001327f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013283:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013286:	83 ec 08             	sub    esp,0x8
c0013289:	52                   	push   edx
c001328a:	50                   	push   eax
c001328b:	e8 bc fe ff ff       	call   c001314c <lwip_standard_chksum>
c0013290:	83 c4 10             	add    esp,0x10
c0013293:	0f b7 c0             	movzx  eax,ax
c0013296:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001329a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001329e:	c1 e8 10             	shr    eax,0x10
c00132a1:	89 c2                	mov    edx,eax
c00132a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a7:	0f b7 c0             	movzx  eax,ax
c00132aa:	01 d0                	add    eax,edx
c00132ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00132b8:	83 e0 01             	and    eax,0x1
c00132bb:	0f b7 c0             	movzx  eax,ax
c00132be:	85 c0                	test   eax,eax
c00132c0:	74 2e                	je     c00132f0 <inet_chksum_pseudo+0xac>
c00132c2:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00132c6:	ba 01 00 00 00       	mov    edx,0x1
c00132cb:	29 c2                	sub    edx,eax
c00132cd:	89 d0                	mov    eax,edx
c00132cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00132d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132d7:	0f b7 c0             	movzx  eax,ax
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	50                   	push   eax
c00132de:	e8 39 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00132e3:	83 c4 10             	add    esp,0x10
c00132e6:	0f b7 c0             	movzx  eax,ax
c00132e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132ed:	8d 76 00             	lea    esi,[esi+0x0]
c00132f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00132f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00132fa:	66 90                	xchg   ax,ax
c00132fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013301:	0f 85 6d ff ff ff    	jne    c0013274 <inet_chksum_pseudo+0x30>
c0013307:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001330c:	85 c0                	test   eax,eax
c001330e:	74 1c                	je     c001332c <inet_chksum_pseudo+0xe8>
c0013310:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013314:	0f b7 c0             	movzx  eax,ax
c0013317:	83 ec 0c             	sub    esp,0xc
c001331a:	50                   	push   eax
c001331b:	e8 fc d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	0f b7 c0             	movzx  eax,ax
c0013326:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001332a:	66 90                	xchg   ax,ax
c001332c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013330:	8b 00                	mov    eax,DWORD PTR [eax]
c0013332:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001333a:	0f b7 c0             	movzx  eax,ax
c001333d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013345:	c1 e8 10             	shr    eax,0x10
c0013348:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001334c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013350:	8b 00                	mov    eax,DWORD PTR [eax]
c0013352:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335a:	0f b7 c0             	movzx  eax,ax
c001335d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013365:	c1 e8 10             	shr    eax,0x10
c0013368:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001336c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013371:	83 ec 0c             	sub    esp,0xc
c0013374:	50                   	push   eax
c0013375:	e8 a2 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001337a:	83 c4 10             	add    esp,0x10
c001337d:	0f b7 c0             	movzx  eax,ax
c0013380:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013384:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013389:	83 ec 0c             	sub    esp,0xc
c001338c:	50                   	push   eax
c001338d:	e8 8a d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013392:	83 c4 10             	add    esp,0x10
c0013395:	0f b7 c0             	movzx  eax,ax
c0013398:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001339c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a0:	c1 e8 10             	shr    eax,0x10
c00133a3:	89 c2                	mov    edx,eax
c00133a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a9:	0f b7 c0             	movzx  eax,ax
c00133ac:	01 d0                	add    eax,edx
c00133ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133b6:	c1 e8 10             	shr    eax,0x10
c00133b9:	89 c2                	mov    edx,eax
c00133bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bf:	0f b7 c0             	movzx  eax,ax
c00133c2:	01 d0                	add    eax,edx
c00133c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133cc:	f7 d0                	not    eax
c00133ce:	83 c4 2c             	add    esp,0x2c
c00133d1:	c3                   	ret    
c00133d2:	66 90                	xchg   ax,ax

c00133d4 <inet_chksum_pseudo_partial>:
c00133d4:	83 ec 2c             	sub    esp,0x2c
c00133d7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00133db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00133df:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00133e3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00133e7:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c00133ec:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00133f1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00133f9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00133fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013402:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013406:	e9 d9 00 00 00       	jmp    c00134e4 <inet_chksum_pseudo_partial+0x110>
c001340b:	90                   	nop
c001340c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013410:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013414:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013419:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c001341e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013423:	39 c2                	cmp    edx,eax
c0013425:	76 09                	jbe    c0013430 <inet_chksum_pseudo_partial+0x5c>
c0013427:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001342b:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013430:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013435:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013439:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001343c:	83 ec 08             	sub    esp,0x8
c001343f:	52                   	push   edx
c0013440:	50                   	push   eax
c0013441:	e8 06 fd ff ff       	call   c001314c <lwip_standard_chksum>
c0013446:	83 c4 10             	add    esp,0x10
c0013449:	0f b7 c0             	movzx  eax,ax
c001344c:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013450:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013454:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013458:	89 d1                	mov    ecx,edx
c001345a:	29 c1                	sub    ecx,eax
c001345c:	89 c8                	mov    eax,ecx
c001345e:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013463:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013468:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c001346d:	76 15                	jbe    c0013484 <inet_chksum_pseudo_partial+0xb0>
c001346f:	83 ec 08             	sub    esp,0x8
c0013472:	68 60 0e 03 c0       	push   0xc0030e60
c0013477:	68 c6 fb 02 c0       	push   0xc002fbc6
c001347c:	e8 17 c7 00 00       	call   c001fb98 <CPrintf>
c0013481:	83 c4 10             	add    esp,0x10
c0013484:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013488:	c1 e8 10             	shr    eax,0x10
c001348b:	89 c2                	mov    edx,eax
c001348d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013491:	0f b7 c0             	movzx  eax,ax
c0013494:	01 d0                	add    eax,edx
c0013496:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001349a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001349e:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134a2:	83 e0 01             	and    eax,0x1
c00134a5:	0f b7 c0             	movzx  eax,ax
c00134a8:	85 c0                	test   eax,eax
c00134aa:	74 2c                	je     c00134d8 <inet_chksum_pseudo_partial+0x104>
c00134ac:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00134b0:	ba 01 00 00 00       	mov    edx,0x1
c00134b5:	29 c2                	sub    edx,eax
c00134b7:	89 d0                	mov    eax,edx
c00134b9:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00134bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134c1:	0f b7 c0             	movzx  eax,ax
c00134c4:	83 ec 0c             	sub    esp,0xc
c00134c7:	50                   	push   eax
c00134c8:	e8 4f d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134cd:	83 c4 10             	add    esp,0x10
c00134d0:	0f b7 c0             	movzx  eax,ax
c00134d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d7:	90                   	nop
c00134d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00134de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134e2:	66 90                	xchg   ax,ax
c00134e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00134e9:	74 0d                	je     c00134f8 <inet_chksum_pseudo_partial+0x124>
c00134eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00134f0:	85 c0                	test   eax,eax
c00134f2:	0f 85 14 ff ff ff    	jne    c001340c <inet_chksum_pseudo_partial+0x38>
c00134f8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00134fd:	85 c0                	test   eax,eax
c00134ff:	74 1b                	je     c001351c <inet_chksum_pseudo_partial+0x148>
c0013501:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013505:	0f b7 c0             	movzx  eax,ax
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	50                   	push   eax
c001350c:	e8 0b d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	0f b7 c0             	movzx  eax,ax
c0013517:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001351b:	90                   	nop
c001351c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013520:	8b 00                	mov    eax,DWORD PTR [eax]
c0013522:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001352a:	0f b7 c0             	movzx  eax,ax
c001352d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013535:	c1 e8 10             	shr    eax,0x10
c0013538:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001353c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013540:	8b 00                	mov    eax,DWORD PTR [eax]
c0013542:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354a:	0f b7 c0             	movzx  eax,ax
c001354d:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013555:	c1 e8 10             	shr    eax,0x10
c0013558:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001355c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013561:	83 ec 0c             	sub    esp,0xc
c0013564:	50                   	push   eax
c0013565:	e8 b2 d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001356a:	83 c4 10             	add    esp,0x10
c001356d:	0f b7 c0             	movzx  eax,ax
c0013570:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013574:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013579:	83 ec 0c             	sub    esp,0xc
c001357c:	50                   	push   eax
c001357d:	e8 9a d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013582:	83 c4 10             	add    esp,0x10
c0013585:	0f b7 c0             	movzx  eax,ax
c0013588:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001358c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013590:	c1 e8 10             	shr    eax,0x10
c0013593:	89 c2                	mov    edx,eax
c0013595:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013599:	0f b7 c0             	movzx  eax,ax
c001359c:	01 d0                	add    eax,edx
c001359e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a6:	c1 e8 10             	shr    eax,0x10
c00135a9:	89 c2                	mov    edx,eax
c00135ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135af:	0f b7 c0             	movzx  eax,ax
c00135b2:	01 d0                	add    eax,edx
c00135b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00135b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135bc:	f7 d0                	not    eax
c00135be:	83 c4 2c             	add    esp,0x2c
c00135c1:	c3                   	ret    
c00135c2:	66 90                	xchg   ax,ax

c00135c4 <inet_chksum>:
c00135c4:	83 ec 1c             	sub    esp,0x1c
c00135c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00135cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00135d0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00135d5:	83 ec 08             	sub    esp,0x8
c00135d8:	50                   	push   eax
c00135d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00135dd:	e8 6a fb ff ff       	call   c001314c <lwip_standard_chksum>
c00135e2:	83 c4 10             	add    esp,0x10
c00135e5:	f7 d0                	not    eax
c00135e7:	83 c4 1c             	add    esp,0x1c
c00135ea:	c3                   	ret    
c00135eb:	90                   	nop

c00135ec <inet_chksum_pbuf>:
c00135ec:	83 ec 1c             	sub    esp,0x1c
c00135ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00135f7:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c00135fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013600:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013604:	e9 8b 00 00 00       	jmp    c0013694 <inet_chksum_pbuf+0xa8>
c0013609:	8d 76 00             	lea    esi,[esi+0x0]
c001360c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013610:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013614:	0f b7 d0             	movzx  edx,ax
c0013617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001361b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001361e:	83 ec 08             	sub    esp,0x8
c0013621:	52                   	push   edx
c0013622:	50                   	push   eax
c0013623:	e8 24 fb ff ff       	call   c001314c <lwip_standard_chksum>
c0013628:	83 c4 10             	add    esp,0x10
c001362b:	0f b7 c0             	movzx  eax,ax
c001362e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0013632:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013636:	c1 e8 10             	shr    eax,0x10
c0013639:	89 c2                	mov    edx,eax
c001363b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001363f:	0f b7 c0             	movzx  eax,ax
c0013642:	01 d0                	add    eax,edx
c0013644:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001364c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013650:	83 e0 01             	and    eax,0x1
c0013653:	0f b7 c0             	movzx  eax,ax
c0013656:	85 c0                	test   eax,eax
c0013658:	74 2e                	je     c0013688 <inet_chksum_pbuf+0x9c>
c001365a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001365e:	ba 01 00 00 00       	mov    edx,0x1
c0013663:	29 c2                	sub    edx,eax
c0013665:	89 d0                	mov    eax,edx
c0013667:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001366b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001366f:	0f b7 c0             	movzx  eax,ax
c0013672:	83 ec 0c             	sub    esp,0xc
c0013675:	50                   	push   eax
c0013676:	e8 a1 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001367b:	83 c4 10             	add    esp,0x10
c001367e:	0f b7 c0             	movzx  eax,ax
c0013681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013685:	8d 76 00             	lea    esi,[esi+0x0]
c0013688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001368c:	8b 00                	mov    eax,DWORD PTR [eax]
c001368e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013692:	66 90                	xchg   ax,ax
c0013694:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013699:	0f 85 6d ff ff ff    	jne    c001360c <inet_chksum_pbuf+0x20>
c001369f:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00136a4:	85 c0                	test   eax,eax
c00136a6:	74 1c                	je     c00136c4 <inet_chksum_pbuf+0xd8>
c00136a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136ac:	0f b7 c0             	movzx  eax,ax
c00136af:	83 ec 0c             	sub    esp,0xc
c00136b2:	50                   	push   eax
c00136b3:	e8 64 d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	0f b7 c0             	movzx  eax,ax
c00136be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136c2:	66 90                	xchg   ax,ax
c00136c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136c8:	f7 d0                	not    eax
c00136ca:	83 c4 1c             	add    esp,0x1c
c00136cd:	c3                   	ret    
c00136ce:	66 90                	xchg   ax,ax

c00136d0 <ip_route>:
c00136d0:	83 ec 10             	sub    esp,0x10
c00136d3:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00136d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136dc:	eb 42                	jmp    c0013720 <ip_route+0x50>
c00136de:	66 90                	xchg   ax,ax
c00136e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136e4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00136e7:	83 e0 01             	and    eax,0x1
c00136ea:	0f b6 c0             	movzx  eax,al
c00136ed:	85 c0                	test   eax,eax
c00136ef:	74 23                	je     c0013714 <ip_route+0x44>
c00136f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00136f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136fe:	31 c2                	xor    edx,eax
c0013700:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013704:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013707:	21 d0                	and    eax,edx
c0013709:	75 09                	jne    c0013714 <ip_route+0x44>
c001370b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001370f:	eb 4f                	jmp    c0013760 <ip_route+0x90>
c0013711:	8d 76 00             	lea    esi,[esi+0x0]
c0013714:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013718:	8b 00                	mov    eax,DWORD PTR [eax]
c001371a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001371e:	66 90                	xchg   ax,ax
c0013720:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013725:	75 b9                	jne    c00136e0 <ip_route+0x10>
c0013727:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c001372c:	85 c0                	test   eax,eax
c001372e:	74 10                	je     c0013740 <ip_route+0x70>
c0013730:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013735:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013738:	0f b6 c0             	movzx  eax,al
c001373b:	83 e0 01             	and    eax,0x1
c001373e:	75 18                	jne    c0013758 <ip_route+0x88>
c0013740:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013746:	83 c0 01             	add    eax,0x1
c0013749:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001374f:	b8 00 00 00 00       	mov    eax,0x0
c0013754:	eb 0a                	jmp    c0013760 <ip_route+0x90>
c0013756:	66 90                	xchg   ax,ax
c0013758:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c001375d:	8d 76 00             	lea    esi,[esi+0x0]
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	c3                   	ret    

c0013764 <ip_input>:
c0013764:	83 ec 1c             	sub    esp,0x1c
c0013767:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c001376d:	83 c0 01             	add    eax,0x1
c0013770:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c0013776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001377a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001377d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013781:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013785:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013788:	0f b7 c0             	movzx  eax,ax
c001378b:	83 ec 0c             	sub    esp,0xc
c001378e:	50                   	push   eax
c001378f:	e8 88 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	0f b7 c0             	movzx  eax,ax
c001379a:	c1 e8 0c             	shr    eax,0xc
c001379d:	0f b7 c0             	movzx  eax,ax
c00137a0:	83 f8 04             	cmp    eax,0x4
c00137a3:	74 37                	je     c00137dc <ip_input+0x78>
c00137a5:	83 ec 0c             	sub    esp,0xc
c00137a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137ac:	e8 d7 4b ff ff       	call   c0008388 <pbuf_free>
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c00137ba:	83 c0 01             	add    eax,0x1
c00137bd:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c00137c3:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137c9:	83 c0 01             	add    eax,0x1
c00137cc:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137d2:	b0 00                	mov    al,0x0
c00137d4:	e9 cb 03 00 00       	jmp    c0013ba4 <ip_input+0x440>
c00137d9:	8d 76 00             	lea    esi,[esi+0x0]
c00137dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137e0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00137e3:	0f b7 c0             	movzx  eax,ax
c00137e6:	83 ec 0c             	sub    esp,0xc
c00137e9:	50                   	push   eax
c00137ea:	e8 2d d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00137ef:	83 c4 10             	add    esp,0x10
c00137f2:	0f b7 c0             	movzx  eax,ax
c00137f5:	c1 e8 08             	shr    eax,0x8
c00137f8:	83 e0 0f             	and    eax,0xf
c00137fb:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013800:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013805:	c1 e0 02             	shl    eax,0x2
c0013808:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001380d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013811:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013815:	0f b7 c0             	movzx  eax,ax
c0013818:	83 ec 0c             	sub    esp,0xc
c001381b:	50                   	push   eax
c001381c:	e8 fb d3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013821:	83 c4 10             	add    esp,0x10
c0013824:	66 89 04 24          	mov    WORD PTR [esp],ax
c0013828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001382c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013830:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013835:	0f b7 c0             	movzx  eax,ax
c0013838:	39 c2                	cmp    edx,eax
c001383a:	77 14                	ja     c0013850 <ip_input+0xec>
c001383c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013840:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013843:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013847:	0f b7 c0             	movzx  eax,ax
c001384a:	39 c2                	cmp    edx,eax
c001384c:	76 36                	jbe    c0013884 <ip_input+0x120>
c001384e:	66 90                	xchg   ax,ax
c0013850:	83 ec 0c             	sub    esp,0xc
c0013853:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013857:	e8 2c 4b ff ff       	call   c0008388 <pbuf_free>
c001385c:	83 c4 10             	add    esp,0x10
c001385f:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c0013865:	83 c0 01             	add    eax,0x1
c0013868:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c001386e:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013874:	83 c0 01             	add    eax,0x1
c0013877:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001387d:	b0 00                	mov    al,0x0
c001387f:	e9 20 03 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013884:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013889:	83 ec 08             	sub    esp,0x8
c001388c:	50                   	push   eax
c001388d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013891:	e8 2e fd ff ff       	call   c00135c4 <inet_chksum>
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	0f b7 c0             	movzx  eax,ax
c001389c:	85 c0                	test   eax,eax
c001389e:	74 34                	je     c00138d4 <ip_input+0x170>
c00138a0:	83 ec 0c             	sub    esp,0xc
c00138a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138a7:	e8 dc 4a ff ff       	call   c0008388 <pbuf_free>
c00138ac:	83 c4 10             	add    esp,0x10
c00138af:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c00138b5:	83 c0 01             	add    eax,0x1
c00138b8:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c00138be:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00138c4:	83 c0 01             	add    eax,0x1
c00138c7:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00138cd:	b0 00                	mov    al,0x0
c00138cf:	e9 d0 02 00 00       	jmp    c0013ba4 <ip_input+0x440>
c00138d4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00138d8:	83 ec 08             	sub    esp,0x8
c00138db:	50                   	push   eax
c00138dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138e0:	e8 77 50 ff ff       	call   c000895c <pbuf_realloc>
c00138e5:	83 c4 10             	add    esp,0x10
c00138e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00138ef:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c00138f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00138fb:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013900:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013908:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001390c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013914:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013917:	83 e0 01             	and    eax,0x1
c001391a:	0f b6 c0             	movzx  eax,al
c001391d:	85 c0                	test   eax,eax
c001391f:	74 43                	je     c0013964 <ip_input+0x200>
c0013921:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013925:	83 c0 04             	add    eax,0x4
c0013928:	74 3a                	je     c0013964 <ip_input+0x200>
c001392a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001392e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013931:	85 c0                	test   eax,eax
c0013933:	74 2f                	je     c0013964 <ip_input+0x200>
c0013935:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c001393b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001393f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013942:	39 c2                	cmp    edx,eax
c0013944:	74 66                	je     c00139ac <ip_input+0x248>
c0013946:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001394b:	83 ec 08             	sub    esp,0x8
c001394e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013952:	50                   	push   eax
c0013953:	e8 d4 05 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0013958:	83 c4 10             	add    esp,0x10
c001395b:	0f b6 c0             	movzx  eax,al
c001395e:	85 c0                	test   eax,eax
c0013960:	75 4a                	jne    c00139ac <ip_input+0x248>
c0013962:	66 90                	xchg   ax,ax
c0013964:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013969:	74 15                	je     c0013980 <ip_input+0x21c>
c001396b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013973:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013978:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001397c:	eb 0e                	jmp    c001398c <ip_input+0x228>
c001397e:	66 90                	xchg   ax,ax
c0013980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013984:	8b 00                	mov    eax,DWORD PTR [eax]
c0013986:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001398a:	66 90                	xchg   ax,ax
c001398c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013990:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0013994:	75 0a                	jne    c00139a0 <ip_input+0x23c>
c0013996:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001399a:	8b 00                	mov    eax,DWORD PTR [eax]
c001399c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00139a5:	0f 85 65 ff ff ff    	jne    c0013910 <ip_input+0x1ac>
c00139ab:	90                   	nop
c00139ac:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00139b1:	83 ec 08             	sub    esp,0x8
c00139b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b8:	50                   	push   eax
c00139b9:	e8 6e 05 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c00139be:	83 c4 10             	add    esp,0x10
c00139c1:	0f b6 c0             	movzx  eax,al
c00139c4:	85 c0                	test   eax,eax
c00139c6:	75 14                	jne    c00139dc <ip_input+0x278>
c00139c8:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00139cd:	25 f0 00 00 00       	and    eax,0xf0
c00139d2:	3d e0 00 00 00       	cmp    eax,0xe0
c00139d7:	75 2b                	jne    c0013a04 <ip_input+0x2a0>
c00139d9:	8d 76 00             	lea    esi,[esi+0x0]
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139e3:	e8 a0 49 ff ff       	call   c0008388 <pbuf_free>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00139f1:	83 c0 01             	add    eax,0x1
c00139f4:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00139fa:	b0 00                	mov    al,0x0
c00139fc:	e9 a3 01 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013a01:	8d 76 00             	lea    esi,[esi+0x0]
c0013a04:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a09:	75 19                	jne    c0013a24 <ip_input+0x2c0>
c0013a0b:	83 ec 0c             	sub    esp,0xc
c0013a0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a12:	e8 71 49 ff ff       	call   c0008388 <pbuf_free>
c0013a17:	83 c4 10             	add    esp,0x10
c0013a1a:	b0 00                	mov    al,0x0
c0013a1c:	e9 83 01 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013a21:	8d 76 00             	lea    esi,[esi+0x0]
c0013a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a28:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013a2c:	0f b7 c0             	movzx  eax,ax
c0013a2f:	25 3f ff 00 00       	and    eax,0xff3f
c0013a34:	74 2e                	je     c0013a64 <ip_input+0x300>
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a3d:	e8 8a 13 00 00       	call   c0014dcc <ip_reass>
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a49:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0013a4e:	75 08                	jne    c0013a58 <ip_input+0x2f4>
c0013a50:	b0 00                	mov    al,0x0
c0013a52:	e9 4d 01 00 00       	jmp    c0013ba4 <ip_input+0x440>
c0013a57:	90                   	nop
c0013a58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013a5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a63:	90                   	nop
c0013a64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a68:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c0013a6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a71:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c0013a76:	83 ec 08             	sub    esp,0x8
c0013a79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a81:	e8 32 5c ff ff       	call   c00096b8 <raw_input>
c0013a86:	83 c4 10             	add    esp,0x10
c0013a89:	0f b6 c0             	movzx  eax,al
c0013a8c:	85 c0                	test   eax,eax
c0013a8e:	0f 85 e0 00 00 00    	jne    c0013b74 <ip_input+0x410>
c0013a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a98:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013a9b:	0f b6 c0             	movzx  eax,al
c0013a9e:	83 f8 06             	cmp    eax,0x6
c0013aa1:	74 25                	je     c0013ac8 <ip_input+0x364>
c0013aa3:	83 f8 11             	cmp    eax,0x11
c0013aa6:	74 08                	je     c0013ab0 <ip_input+0x34c>
c0013aa8:	83 f8 01             	cmp    eax,0x1
c0013aab:	74 33                	je     c0013ae0 <ip_input+0x37c>
c0013aad:	eb 49                	jmp    c0013af8 <ip_input+0x394>
c0013aaf:	90                   	nop
c0013ab0:	83 ec 08             	sub    esp,0x8
c0013ab3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ab7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013abb:	e8 a8 d3 ff ff       	call   c0010e68 <udp_input>
c0013ac0:	83 c4 10             	add    esp,0x10
c0013ac3:	e9 b0 00 00 00       	jmp    c0013b78 <ip_input+0x414>
c0013ac8:	83 ec 08             	sub    esp,0x8
c0013acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ad3:	e8 b0 a4 ff ff       	call   c000df88 <tcp_input>
c0013ad8:	83 c4 10             	add    esp,0x10
c0013adb:	e9 98 00 00 00       	jmp    c0013b78 <ip_input+0x414>
c0013ae0:	83 ec 08             	sub    esp,0x8
c0013ae3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ae7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013aeb:	e8 70 f0 ff ff       	call   c0012b60 <icmp_input>
c0013af0:	83 c4 10             	add    esp,0x10
c0013af3:	e9 80 00 00 00       	jmp    c0013b78 <ip_input+0x414>
c0013af8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013afd:	83 ec 08             	sub    esp,0x8
c0013b00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b04:	50                   	push   eax
c0013b05:	e8 22 04 00 00       	call   c0013f2c <ip4_addr_isbroadcast>
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	0f b6 c0             	movzx  eax,al
c0013b10:	85 c0                	test   eax,eax
c0013b12:	75 30                	jne    c0013b44 <ip_input+0x3e0>
c0013b14:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013b19:	25 f0 00 00 00       	and    eax,0xf0
c0013b1e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013b23:	74 1f                	je     c0013b44 <ip_input+0x3e0>
c0013b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013b2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013b30:	83 ec 08             	sub    esp,0x8
c0013b33:	6a 02                	push   0x2
c0013b35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b39:	e8 c6 f5 ff ff       	call   c0013104 <icmp_dest_unreach>
c0013b3e:	83 c4 10             	add    esp,0x10
c0013b41:	8d 76 00             	lea    esi,[esi+0x0]
c0013b44:	83 ec 0c             	sub    esp,0xc
c0013b47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013b4b:	e8 38 48 ff ff       	call   c0008388 <pbuf_free>
c0013b50:	83 c4 10             	add    esp,0x10
c0013b53:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013b59:	83 c0 01             	add    eax,0x1
c0013b5c:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013b62:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013b68:	83 c0 01             	add    eax,0x1
c0013b6b:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013b71:	eb 05                	jmp    c0013b78 <ip_input+0x414>
c0013b73:	90                   	nop
c0013b74:	90                   	nop
c0013b75:	8d 76 00             	lea    esi,[esi+0x0]
c0013b78:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013b82:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013b8c:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013b96:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013ba0:	b0 00                	mov    al,0x0
c0013ba2:	66 90                	xchg   ax,ax
c0013ba4:	83 c4 1c             	add    esp,0x1c
c0013ba7:	c3                   	ret    

c0013ba8 <ip_output_if>:
c0013ba8:	83 ec 2c             	sub    esp,0x2c
c0013bab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013baf:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013bb3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013bb7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013bbb:	88 c8                	mov    al,cl
c0013bbd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013bc1:	88 d0                	mov    al,dl
c0013bc3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013bc7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013bcf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bd3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013bd7:	0f b7 c0             	movzx  eax,ax
c0013bda:	83 f8 01             	cmp    eax,0x1
c0013bdd:	74 15                	je     c0013bf4 <ip_output_if+0x4c>
c0013bdf:	83 ec 08             	sub    esp,0x8
c0013be2:	68 6a 0e 03 c0       	push   0xc0030e6a
c0013be7:	68 c6 fb 02 c0       	push   0xc002fbc6
c0013bec:	e8 a7 bf 00 00       	call   c001fb98 <CPrintf>
c0013bf1:	83 c4 10             	add    esp,0x10
c0013bf4:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013bf9:	0f 84 f5 01 00 00    	je     c0013df4 <ip_output_if+0x24c>
c0013bff:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013c06:	83 ec 08             	sub    esp,0x8
c0013c09:	6a 14                	push   0x14
c0013c0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013c0f:	e8 d4 45 ff ff       	call   c00081e8 <pbuf_header>
c0013c14:	83 c4 10             	add    esp,0x10
c0013c17:	0f b6 c0             	movzx  eax,al
c0013c1a:	85 c0                	test   eax,eax
c0013c1c:	74 16                	je     c0013c34 <ip_output_if+0x8c>
c0013c1e:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013c24:	83 c0 01             	add    eax,0x1
c0013c27:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013c2d:	b0 fe                	mov    al,0xfe
c0013c2f:	e9 4c 02 00 00       	jmp    c0013e80 <ip_output_if+0x2d8>
c0013c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013c3b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c43:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013c47:	0f b7 c0             	movzx  eax,ax
c0013c4a:	83 f8 13             	cmp    eax,0x13
c0013c4d:	77 15                	ja     c0013c64 <ip_output_if+0xbc>
c0013c4f:	83 ec 08             	sub    esp,0x8
c0013c52:	68 78 0e 03 c0       	push   0xc0030e78
c0013c57:	68 c6 fb 02 c0       	push   0xc002fbc6
c0013c5c:	e8 37 bf 00 00       	call   c001fb98 <CPrintf>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c68:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013c6c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013c6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c73:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013c77:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013c7a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013c7f:	c1 e0 08             	shl    eax,0x8
c0013c82:	89 c2                	mov    edx,eax
c0013c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013c89:	09 d0                	or     eax,edx
c0013c8b:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c93:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c99:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013c9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ca0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013ca3:	0f b7 c0             	movzx  eax,ax
c0013ca6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013caa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013cb1:	c1 e8 10             	shr    eax,0x10
c0013cb4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cb8:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013cbd:	c1 e8 02             	shr    eax,0x2
c0013cc0:	0f b7 c0             	movzx  eax,ax
c0013cc3:	c1 e0 08             	shl    eax,0x8
c0013cc6:	80 cc 40             	or     ah,0x40
c0013cc9:	89 c2                	mov    edx,eax
c0013ccb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013cd0:	09 d0                	or     eax,edx
c0013cd2:	0f b7 c0             	movzx  eax,ax
c0013cd5:	83 ec 0c             	sub    esp,0xc
c0013cd8:	50                   	push   eax
c0013cd9:	e8 3e cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013cde:	83 c4 10             	add    esp,0x10
c0013ce1:	89 c2                	mov    edx,eax
c0013ce3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ce7:	66 89 10             	mov    WORD PTR [eax],dx
c0013cea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cee:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013cf1:	0f b7 c0             	movzx  eax,ax
c0013cf4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cf8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013cfc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013cff:	0f b7 c0             	movzx  eax,ax
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	50                   	push   eax
c0013d06:	e8 11 cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	89 c2                	mov    edx,eax
c0013d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d14:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013d18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d1c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013d20:	0f b7 c0             	movzx  eax,ax
c0013d23:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d2b:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013d31:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013d37:	0f b7 c0             	movzx  eax,ax
c0013d3a:	83 ec 0c             	sub    esp,0xc
c0013d3d:	50                   	push   eax
c0013d3e:	e8 d9 ce fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013d43:	83 c4 10             	add    esp,0x10
c0013d46:	89 c2                	mov    edx,eax
c0013d48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d4c:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013d50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d54:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013d58:	0f b7 c0             	movzx  eax,ax
c0013d5b:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d5f:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013d65:	83 c0 01             	add    eax,0x1
c0013d68:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013d6e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013d73:	74 0b                	je     c0013d80 <ip_output_if+0x1d8>
c0013d75:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d79:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d7b:	85 c0                	test   eax,eax
c0013d7d:	75 11                	jne    c0013d90 <ip_output_if+0x1e8>
c0013d7f:	90                   	nop
c0013d80:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d84:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013d87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d8b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013d8e:	eb 10                	jmp    c0013da0 <ip_output_if+0x1f8>
c0013d90:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013d94:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d9a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0013da0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013da4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013da7:	0f b7 c0             	movzx  eax,ax
c0013daa:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013db2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013db5:	c1 e8 10             	shr    eax,0x10
c0013db8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013dbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dc0:	c1 e8 10             	shr    eax,0x10
c0013dc3:	89 c2                	mov    edx,eax
c0013dc5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dc9:	0f b7 c0             	movzx  eax,ax
c0013dcc:	01 d0                	add    eax,edx
c0013dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dd6:	c1 e8 10             	shr    eax,0x10
c0013dd9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013ddd:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013de1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013de5:	89 c2                	mov    edx,eax
c0013de7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013deb:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013def:	eb 23                	jmp    c0013e14 <ip_output_if+0x26c>
c0013df1:	8d 76 00             	lea    esi,[esi+0x0]
c0013df4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dfb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013dff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e0a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e0e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013e1a:	83 c0 01             	add    eax,0x1
c0013e1d:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013e23:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013e2a:	0f b7 c0             	movzx  eax,ax
c0013e2d:	85 c0                	test   eax,eax
c0013e2f:	74 33                	je     c0013e64 <ip_output_if+0x2bc>
c0013e31:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e35:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013e38:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013e3f:	0f b7 d2             	movzx  edx,dx
c0013e42:	0f b7 c0             	movzx  eax,ax
c0013e45:	39 c2                	cmp    edx,eax
c0013e47:	76 1b                	jbe    c0013e64 <ip_output_if+0x2bc>
c0013e49:	83 ec 04             	sub    esp,0x4
c0013e4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e50:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013e54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e58:	e8 37 14 00 00       	call   c0015294 <ip_frag>
c0013e5d:	83 c4 10             	add    esp,0x10
c0013e60:	eb 1e                	jmp    c0013e80 <ip_output_if+0x2d8>
c0013e62:	66 90                	xchg   ax,ax
c0013e64:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013e68:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013e6b:	83 ec 04             	sub    esp,0x4
c0013e6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013e72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013e76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013e7a:	ff d0                	call   eax
c0013e7c:	83 c4 10             	add    esp,0x10
c0013e7f:	90                   	nop
c0013e80:	83 c4 2c             	add    esp,0x2c
c0013e83:	c3                   	ret    

c0013e84 <ip_output>:
c0013e84:	83 ec 2c             	sub    esp,0x2c
c0013e87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e8b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013e8f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013e93:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013e97:	88 c8                	mov    al,cl
c0013e99:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013e9d:	88 d0                	mov    al,dl
c0013e9f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013ea3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ea7:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013eab:	0f b7 c0             	movzx  eax,ax
c0013eae:	83 f8 01             	cmp    eax,0x1
c0013eb1:	74 15                	je     c0013ec8 <ip_output+0x44>
c0013eb3:	83 ec 08             	sub    esp,0x8
c0013eb6:	68 6a 0e 03 c0       	push   0xc0030e6a
c0013ebb:	68 c6 fb 02 c0       	push   0xc002fbc6
c0013ec0:	e8 d3 bc 00 00       	call   c001fb98 <CPrintf>
c0013ec5:	83 c4 10             	add    esp,0x10
c0013ec8:	83 ec 0c             	sub    esp,0xc
c0013ecb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013ecf:	e8 fc f7 ff ff       	call   c00136d0 <ip_route>
c0013ed4:	83 c4 10             	add    esp,0x10
c0013ed7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013edb:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013ee0:	75 16                	jne    c0013ef8 <ip_output+0x74>
c0013ee2:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013ee8:	83 c0 01             	add    eax,0x1
c0013eeb:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013ef1:	b0 fc                	mov    al,0xfc
c0013ef3:	eb 33                	jmp    c0013f28 <ip_output+0xa4>
c0013ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ef8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013efd:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013f02:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013f07:	83 ec 04             	sub    esp,0x4
c0013f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f0e:	51                   	push   ecx
c0013f0f:	52                   	push   edx
c0013f10:	50                   	push   eax
c0013f11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013f15:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013f19:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013f1d:	e8 86 fc ff ff       	call   c0013ba8 <ip_output_if>
c0013f22:	83 c4 20             	add    esp,0x20
c0013f25:	8d 76 00             	lea    esi,[esi+0x0]
c0013f28:	83 c4 2c             	add    esp,0x2c
c0013f2b:	c3                   	ret    

c0013f2c <ip4_addr_isbroadcast>:
c0013f2c:	83 ec 10             	sub    esp,0x10
c0013f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f37:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013f3c:	74 0a                	je     c0013f48 <ip4_addr_isbroadcast+0x1c>
c0013f3e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013f43:	75 07                	jne    c0013f4c <ip4_addr_isbroadcast+0x20>
c0013f45:	8d 76 00             	lea    esi,[esi+0x0]
c0013f48:	b0 01                	mov    al,0x1
c0013f4a:	eb 64                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013f4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f50:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013f53:	0f b6 c0             	movzx  eax,al
c0013f56:	83 e0 02             	and    eax,0x2
c0013f59:	75 05                	jne    c0013f60 <ip4_addr_isbroadcast+0x34>
c0013f5b:	b0 00                	mov    al,0x0
c0013f5d:	eb 51                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013f5f:	90                   	nop
c0013f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f67:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013f6b:	75 07                	jne    c0013f74 <ip4_addr_isbroadcast+0x48>
c0013f6d:	b0 00                	mov    al,0x0
c0013f6f:	eb 3f                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013f71:	8d 76 00             	lea    esi,[esi+0x0]
c0013f74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013f7f:	31 c2                	xor    edx,eax
c0013f81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f85:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013f88:	21 d0                	and    eax,edx
c0013f8a:	75 20                	jne    c0013fac <ip4_addr_isbroadcast+0x80>
c0013f8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013f93:	f7 d0                	not    eax
c0013f95:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013f99:	89 c2                	mov    edx,eax
c0013f9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013fa2:	f7 d0                	not    eax
c0013fa4:	39 c2                	cmp    edx,eax
c0013fa6:	75 04                	jne    c0013fac <ip4_addr_isbroadcast+0x80>
c0013fa8:	b0 01                	mov    al,0x1
c0013faa:	eb 04                	jmp    c0013fb0 <ip4_addr_isbroadcast+0x84>
c0013fac:	b0 00                	mov    al,0x0
c0013fae:	66 90                	xchg   ax,ax
c0013fb0:	83 c4 10             	add    esp,0x10
c0013fb3:	c3                   	ret    

c0013fb4 <ip4_addr_netmask_valid>:
c0013fb4:	83 ec 1c             	sub    esp,0x1c
c0013fb7:	83 ec 0c             	sub    esp,0xc
c0013fba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fbe:	e8 7d cc fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0013fc3:	83 c4 10             	add    esp,0x10
c0013fc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fca:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013fd2:	eb 10                	jmp    c0013fe4 <ip4_addr_netmask_valid+0x30>
c0013fd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fd8:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013fdc:	74 12                	je     c0013ff0 <ip4_addr_netmask_valid+0x3c>
c0013fde:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013fe9:	75 e9                	jne    c0013fd4 <ip4_addr_netmask_valid+0x20>
c0013feb:	eb 1b                	jmp    c0014008 <ip4_addr_netmask_valid+0x54>
c0013fed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff0:	90                   	nop
c0013ff1:	eb 15                	jmp    c0014008 <ip4_addr_netmask_valid+0x54>
c0013ff3:	90                   	nop
c0013ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013ff8:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013ffc:	74 06                	je     c0014004 <ip4_addr_netmask_valid+0x50>
c0013ffe:	b0 00                	mov    al,0x0
c0014000:	eb 12                	jmp    c0014014 <ip4_addr_netmask_valid+0x60>
c0014002:	66 90                	xchg   ax,ax
c0014004:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0014008:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001400d:	75 e5                	jne    c0013ff4 <ip4_addr_netmask_valid+0x40>
c001400f:	b0 01                	mov    al,0x1
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	83 c4 1c             	add    esp,0x1c
c0014017:	c3                   	ret    

c0014018 <ipaddr_aton>:
c0014018:	83 ec 2c             	sub    esp,0x2c
c001401b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001401f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014023:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014027:	8a 00                	mov    al,BYTE PTR [eax]
c0014029:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014034:	0f b6 c0             	movzx  eax,al
c0014037:	83 f8 2f             	cmp    eax,0x2f
c001403a:	76 0c                	jbe    c0014048 <ipaddr_aton+0x30>
c001403c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014040:	0f b6 c0             	movzx  eax,al
c0014043:	83 f8 39             	cmp    eax,0x39
c0014046:	76 0c                	jbe    c0014054 <ipaddr_aton+0x3c>
c0014048:	b8 00 00 00 00       	mov    eax,0x0
c001404d:	e9 f2 02 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c0014052:	66 90                	xchg   ax,ax
c0014054:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001405c:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0014061:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014066:	83 f8 30             	cmp    eax,0x30
c0014069:	75 45                	jne    c00140b0 <ipaddr_aton+0x98>
c001406b:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014070:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014074:	8a 00                	mov    al,BYTE PTR [eax]
c0014076:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001407a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001407f:	83 f8 78             	cmp    eax,0x78
c0014082:	74 0c                	je     c0014090 <ipaddr_aton+0x78>
c0014084:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014089:	83 f8 58             	cmp    eax,0x58
c001408c:	75 1a                	jne    c00140a8 <ipaddr_aton+0x90>
c001408e:	66 90                	xchg   ax,ax
c0014090:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0014095:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001409a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001409e:	8a 00                	mov    al,BYTE PTR [eax]
c00140a0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140a4:	eb 0a                	jmp    c00140b0 <ipaddr_aton+0x98>
c00140a6:	66 90                	xchg   ax,ax
c00140a8:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c00140ad:	8d 76 00             	lea    esi,[esi+0x0]
c00140b0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140b4:	0f b6 c0             	movzx  eax,al
c00140b7:	83 f8 2f             	cmp    eax,0x2f
c00140ba:	76 3c                	jbe    c00140f8 <ipaddr_aton+0xe0>
c00140bc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140c0:	0f b6 c0             	movzx  eax,al
c00140c3:	83 f8 39             	cmp    eax,0x39
c00140c6:	77 30                	ja     c00140f8 <ipaddr_aton+0xe0>
c00140c8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00140cd:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00140d2:	89 c2                	mov    edx,eax
c00140d4:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140d9:	01 d0                	add    eax,edx
c00140db:	83 e8 30             	sub    eax,0x30
c00140de:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140e2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140eb:	8a 00                	mov    al,BYTE PTR [eax]
c00140ed:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140f1:	e9 ae 00 00 00       	jmp    c00141a4 <ipaddr_aton+0x18c>
c00140f6:	66 90                	xchg   ax,ax
c00140f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00140fd:	83 f8 10             	cmp    eax,0x10
c0014100:	0f 85 a6 00 00 00    	jne    c00141ac <ipaddr_aton+0x194>
c0014106:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001410a:	0f b6 c0             	movzx  eax,al
c001410d:	83 f8 2f             	cmp    eax,0x2f
c0014110:	76 0e                	jbe    c0014120 <ipaddr_aton+0x108>
c0014112:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014116:	0f b6 c0             	movzx  eax,al
c0014119:	83 f8 39             	cmp    eax,0x39
c001411c:	76 32                	jbe    c0014150 <ipaddr_aton+0x138>
c001411e:	66 90                	xchg   ax,ax
c0014120:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014124:	0f b6 c0             	movzx  eax,al
c0014127:	83 f8 60             	cmp    eax,0x60
c001412a:	76 0c                	jbe    c0014138 <ipaddr_aton+0x120>
c001412c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014130:	0f b6 c0             	movzx  eax,al
c0014133:	83 f8 66             	cmp    eax,0x66
c0014136:	76 18                	jbe    c0014150 <ipaddr_aton+0x138>
c0014138:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001413c:	0f b6 c0             	movzx  eax,al
c001413f:	83 f8 40             	cmp    eax,0x40
c0014142:	76 68                	jbe    c00141ac <ipaddr_aton+0x194>
c0014144:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014148:	0f b6 c0             	movzx  eax,al
c001414b:	83 f8 46             	cmp    eax,0x46
c001414e:	77 5c                	ja     c00141ac <ipaddr_aton+0x194>
c0014150:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014154:	c1 e0 04             	shl    eax,0x4
c0014157:	89 c2                	mov    edx,eax
c0014159:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415e:	8d 48 0a             	lea    ecx,[eax+0xa]
c0014161:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014165:	0f b6 c0             	movzx  eax,al
c0014168:	83 f8 60             	cmp    eax,0x60
c001416b:	76 13                	jbe    c0014180 <ipaddr_aton+0x168>
c001416d:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014171:	0f b6 c0             	movzx  eax,al
c0014174:	83 f8 7a             	cmp    eax,0x7a
c0014177:	77 07                	ja     c0014180 <ipaddr_aton+0x168>
c0014179:	b8 61 00 00 00       	mov    eax,0x61
c001417e:	eb 08                	jmp    c0014188 <ipaddr_aton+0x170>
c0014180:	b8 41 00 00 00       	mov    eax,0x41
c0014185:	8d 76 00             	lea    esi,[esi+0x0]
c0014188:	29 c1                	sub    ecx,eax
c001418a:	89 c8                	mov    eax,ecx
c001418c:	09 d0                	or     eax,edx
c001418e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014192:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001419b:	8a 00                	mov    al,BYTE PTR [eax]
c001419d:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141a1:	8d 76 00             	lea    esi,[esi+0x0]
c00141a4:	e9 07 ff ff ff       	jmp    c00140b0 <ipaddr_aton+0x98>
c00141a9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ac:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141b1:	83 f8 2e             	cmp    eax,0x2e
c00141b4:	75 42                	jne    c00141f8 <ipaddr_aton+0x1e0>
c00141b6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00141ba:	83 c0 0c             	add    eax,0xc
c00141bd:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00141c1:	72 0d                	jb     c00141d0 <ipaddr_aton+0x1b8>
c00141c3:	b8 00 00 00 00       	mov    eax,0x0
c00141c8:	e9 77 01 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c00141cd:	8d 76 00             	lea    esi,[esi+0x0]
c00141d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141d4:	8d 50 04             	lea    edx,[eax+0x4]
c00141d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00141db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00141df:	89 10                	mov    DWORD PTR [eax],edx
c00141e1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00141e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00141ea:	8a 00                	mov    al,BYTE PTR [eax]
c00141ec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00141f0:	e9 3b fe ff ff       	jmp    c0014030 <ipaddr_aton+0x18>
c00141f5:	8d 76 00             	lea    esi,[esi+0x0]
c00141f8:	90                   	nop
c00141f9:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00141fe:	85 c0                	test   eax,eax
c0014200:	74 46                	je     c0014248 <ipaddr_aton+0x230>
c0014202:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014207:	83 f8 20             	cmp    eax,0x20
c001420a:	74 3c                	je     c0014248 <ipaddr_aton+0x230>
c001420c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014211:	83 f8 0c             	cmp    eax,0xc
c0014214:	74 32                	je     c0014248 <ipaddr_aton+0x230>
c0014216:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001421b:	83 f8 0a             	cmp    eax,0xa
c001421e:	74 28                	je     c0014248 <ipaddr_aton+0x230>
c0014220:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014225:	83 f8 0d             	cmp    eax,0xd
c0014228:	74 1e                	je     c0014248 <ipaddr_aton+0x230>
c001422a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001422f:	83 f8 09             	cmp    eax,0x9
c0014232:	74 14                	je     c0014248 <ipaddr_aton+0x230>
c0014234:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014239:	83 f8 0b             	cmp    eax,0xb
c001423c:	74 0a                	je     c0014248 <ipaddr_aton+0x230>
c001423e:	b8 00 00 00 00       	mov    eax,0x0
c0014243:	e9 fc 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c0014248:	8d 44 24 04          	lea    eax,[esp+0x4]
c001424c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014250:	29 c2                	sub    edx,eax
c0014252:	89 d0                	mov    eax,edx
c0014254:	c1 f8 02             	sar    eax,0x2
c0014257:	83 c0 01             	add    eax,0x1
c001425a:	83 f8 04             	cmp    eax,0x4
c001425d:	0f 87 9d 00 00 00    	ja     c0014300 <ipaddr_aton+0x2e8>
c0014263:	8b 04 85 b0 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf150]
c001426a:	ff e0                	jmp    eax
c001426c:	b8 00 00 00 00       	mov    eax,0x0
c0014271:	e9 ce 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c0014276:	66 90                	xchg   ax,ax
c0014278:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c0014280:	76 0a                	jbe    c001428c <ipaddr_aton+0x274>
c0014282:	b8 00 00 00 00       	mov    eax,0x0
c0014287:	e9 b8 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c001428c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014290:	c1 e0 18             	shl    eax,0x18
c0014293:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014297:	e9 80 00 00 00       	jmp    c001431c <ipaddr_aton+0x304>
c001429c:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00142a4:	76 0a                	jbe    c00142b0 <ipaddr_aton+0x298>
c00142a6:	b8 00 00 00 00       	mov    eax,0x0
c00142ab:	e9 94 00 00 00       	jmp    c0014344 <ipaddr_aton+0x32c>
c00142b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142b4:	c1 e0 18             	shl    eax,0x18
c00142b7:	89 c2                	mov    edx,eax
c00142b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142bd:	c1 e0 10             	shl    eax,0x10
c00142c0:	09 d0                	or     eax,edx
c00142c2:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00142c6:	eb 54                	jmp    c001431c <ipaddr_aton+0x304>
c00142c8:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c00142d0:	76 0a                	jbe    c00142dc <ipaddr_aton+0x2c4>
c00142d2:	b8 00 00 00 00       	mov    eax,0x0
c00142d7:	eb 6b                	jmp    c0014344 <ipaddr_aton+0x32c>
c00142d9:	8d 76 00             	lea    esi,[esi+0x0]
c00142dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142e0:	c1 e0 18             	shl    eax,0x18
c00142e3:	89 c2                	mov    edx,eax
c00142e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142e9:	c1 e0 10             	shl    eax,0x10
c00142ec:	09 c2                	or     edx,eax
c00142ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142f2:	c1 e0 08             	shl    eax,0x8
c00142f5:	09 d0                	or     eax,edx
c00142f7:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00142fb:	eb 1f                	jmp    c001431c <ipaddr_aton+0x304>
c00142fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014300:	83 ec 08             	sub    esp,0x8
c0014303:	68 a5 0e 03 c0       	push   0xc0030ea5
c0014308:	68 c6 fb 02 c0       	push   0xc002fbc6
c001430d:	e8 86 b8 00 00       	call   c001fb98 <CPrintf>
c0014312:	83 c4 10             	add    esp,0x10
c0014315:	eb 05                	jmp    c001431c <ipaddr_aton+0x304>
c0014317:	90                   	nop
c0014318:	90                   	nop
c0014319:	8d 76 00             	lea    esi,[esi+0x0]
c001431c:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014321:	74 19                	je     c001433c <ipaddr_aton+0x324>
c0014323:	83 ec 0c             	sub    esp,0xc
c0014326:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001432a:	e8 11 c9 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	89 c2                	mov    edx,eax
c0014334:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014338:	89 10                	mov    DWORD PTR [eax],edx
c001433a:	66 90                	xchg   ax,ax
c001433c:	b8 01 00 00 00       	mov    eax,0x1
c0014341:	8d 76 00             	lea    esi,[esi+0x0]
c0014344:	83 c4 2c             	add    esp,0x2c
c0014347:	c3                   	ret    

c0014348 <ipaddr_addr>:
c0014348:	83 ec 1c             	sub    esp,0x1c
c001434b:	83 ec 08             	sub    esp,0x8
c001434e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0014352:	50                   	push   eax
c0014353:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014357:	e8 bc fc ff ff       	call   c0014018 <ipaddr_aton>
c001435c:	83 c4 10             	add    esp,0x10
c001435f:	85 c0                	test   eax,eax
c0014361:	74 09                	je     c001436c <ipaddr_addr+0x24>
c0014363:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014367:	eb 0b                	jmp    c0014374 <ipaddr_addr+0x2c>
c0014369:	8d 76 00             	lea    esi,[esi+0x0]
c001436c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014371:	8d 76 00             	lea    esi,[esi+0x0]
c0014374:	83 c4 1c             	add    esp,0x1c
c0014377:	c3                   	ret    

c0014378 <ipaddr_ntoa_r>:
c0014378:	83 ec 20             	sub    esp,0x20
c001437b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014383:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014387:	8b 00                	mov    eax,DWORD PTR [eax]
c0014389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001438d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014391:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014395:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014399:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001439d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00143a2:	e9 f9 00 00 00       	jmp    c00144a0 <ipaddr_ntoa_r+0x128>
c00143a7:	90                   	nop
c00143a8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00143ad:	8d 76 00             	lea    esi,[esi+0x0]
c00143b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143b4:	8a 00                	mov    al,BYTE PTR [eax]
c00143b6:	0f b6 c8             	movzx  ecx,al
c00143b9:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00143be:	89 c8                	mov    eax,ecx
c00143c0:	f7 e2                	mul    edx
c00143c2:	c1 ea 03             	shr    edx,0x3
c00143c5:	89 d0                	mov    eax,edx
c00143c7:	c1 e0 02             	shl    eax,0x2
c00143ca:	01 d0                	add    eax,edx
c00143cc:	d1 e0                	shl    eax,1
c00143ce:	29 c1                	sub    ecx,eax
c00143d0:	89 c8                	mov    eax,ecx
c00143d2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00143d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143da:	8a 00                	mov    al,BYTE PTR [eax]
c00143dc:	0f b6 c0             	movzx  eax,al
c00143df:	ba cd cc cc cc       	mov    edx,0xcccccccd
c00143e4:	f7 e2                	mul    edx
c00143e6:	89 d0                	mov    eax,edx
c00143e8:	c1 e8 03             	shr    eax,0x3
c00143eb:	88 c2                	mov    dl,al
c00143ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143f1:	88 10                	mov    BYTE PTR [eax],dl
c00143f3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00143f7:	83 c0 30             	add    eax,0x30
c00143fa:	88 c1                	mov    cl,al
c00143fc:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014400:	8d 50 01             	lea    edx,[eax+0x1]
c0014403:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014407:	0f b6 c0             	movzx  eax,al
c001440a:	88 ca                	mov    dl,cl
c001440c:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014410:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014414:	8a 00                	mov    al,BYTE PTR [eax]
c0014416:	0f b6 c0             	movzx  eax,al
c0014419:	85 c0                	test   eax,eax
c001441b:	75 93                	jne    c00143b0 <ipaddr_ntoa_r+0x38>
c001441d:	eb 35                	jmp    c0014454 <ipaddr_ntoa_r+0xdc>
c001441f:	90                   	nop
c0014420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014424:	8d 50 01             	lea    edx,[eax+0x1]
c0014427:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001442b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001442f:	7f 0b                	jg     c001443c <ipaddr_ntoa_r+0xc4>
c0014431:	b8 00 00 00 00       	mov    eax,0x0
c0014436:	e9 85 00 00 00       	jmp    c00144c0 <ipaddr_ntoa_r+0x148>
c001443b:	90                   	nop
c001443c:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0014441:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014445:	8d 48 01             	lea    ecx,[eax+0x1]
c0014448:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001444c:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c0014450:	88 10                	mov    BYTE PTR [eax],dl
c0014452:	66 90                	xchg   ax,ax
c0014454:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014458:	8d 50 ff             	lea    edx,[eax-0x1]
c001445b:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001445f:	0f b6 c0             	movzx  eax,al
c0014462:	85 c0                	test   eax,eax
c0014464:	75 ba                	jne    c0014420 <ipaddr_ntoa_r+0xa8>
c0014466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001446a:	8d 50 01             	lea    edx,[eax+0x1]
c001446d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014471:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014475:	7f 09                	jg     c0014480 <ipaddr_ntoa_r+0x108>
c0014477:	b8 00 00 00 00       	mov    eax,0x0
c001447c:	eb 42                	jmp    c00144c0 <ipaddr_ntoa_r+0x148>
c001447e:	66 90                	xchg   ax,ax
c0014480:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014484:	8d 50 01             	lea    edx,[eax+0x1]
c0014487:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001448b:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c001448e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0014497:	83 c0 01             	add    eax,0x1
c001449a:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001449e:	66 90                	xchg   ax,ax
c00144a0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00144a5:	83 f8 03             	cmp    eax,0x3
c00144a8:	0f 86 fa fe ff ff    	jbe    c00143a8 <ipaddr_ntoa_r+0x30>
c00144ae:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00144b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00144b7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00144ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00144be:	66 90                	xchg   ax,ax
c00144c0:	83 c4 20             	add    esp,0x20
c00144c3:	c3                   	ret    

c00144c4 <ipaddr_ntoa>:
c00144c4:	6a 10                	push   0x10
c00144c6:	68 a4 a9 03 c0       	push   0xc003a9a4
c00144cb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00144cf:	e8 a4 fe ff ff       	call   c0014378 <ipaddr_ntoa_r>
c00144d4:	83 c4 0c             	add    esp,0xc
c00144d7:	c3                   	ret    

c00144d8 <ip_reass_dequeue_datagram>:
c00144d8:	83 ec 0c             	sub    esp,0xc
c00144db:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00144e0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00144e4:	75 0e                	jne    c00144f4 <ip_reass_dequeue_datagram+0x1c>
c00144e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00144ec:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00144f1:	eb 29                	jmp    c001451c <ip_reass_dequeue_datagram+0x44>
c00144f3:	90                   	nop
c00144f4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00144f9:	75 15                	jne    c0014510 <ip_reass_dequeue_datagram+0x38>
c00144fb:	83 ec 08             	sub    esp,0x8
c00144fe:	68 cc 0e 03 c0       	push   0xc0030ecc
c0014503:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014508:	e8 8b b6 00 00       	call   c001fb98 <CPrintf>
c001450d:	83 c4 10             	add    esp,0x10
c0014510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014514:	8b 10                	mov    edx,DWORD PTR [eax]
c0014516:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001451a:	89 10                	mov    DWORD PTR [eax],edx
c001451c:	83 ec 08             	sub    esp,0x8
c001451f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014523:	6a 05                	push   0x5
c0014525:	e8 9e 35 ff ff       	call   c0007ac8 <memp_free>
c001452a:	83 c4 10             	add    esp,0x10
c001452d:	90                   	nop
c001452e:	83 c4 0c             	add    esp,0xc
c0014531:	c3                   	ret    
c0014532:	66 90                	xchg   ax,ax

c0014534 <ip_reass_free_complete_datagram>:
c0014534:	83 ec 2c             	sub    esp,0x2c
c0014537:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c001453e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014542:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014546:	75 18                	jne    c0014560 <ip_reass_free_complete_datagram+0x2c>
c0014548:	83 ec 08             	sub    esp,0x8
c001454b:	68 e5 0e 03 c0       	push   0xc0030ee5
c0014550:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014555:	e8 3e b6 00 00       	call   c001fb98 <CPrintf>
c001455a:	83 c4 10             	add    esp,0x10
c001455d:	8d 76 00             	lea    esi,[esi+0x0]
c0014560:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014565:	74 21                	je     c0014588 <ip_reass_free_complete_datagram+0x54>
c0014567:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001456b:	8b 00                	mov    eax,DWORD PTR [eax]
c001456d:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0014571:	74 15                	je     c0014588 <ip_reass_free_complete_datagram+0x54>
c0014573:	83 ec 08             	sub    esp,0x8
c0014576:	68 f1 0e 03 c0       	push   0xc0030ef1
c001457b:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014580:	e8 13 b6 00 00       	call   c001fb98 <CPrintf>
c0014585:	83 c4 10             	add    esp,0x10
c0014588:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001458c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001458f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014592:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001459a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001459e:	0f b7 c0             	movzx  eax,ax
c00145a1:	85 c0                	test   eax,eax
c00145a3:	0f 85 a3 00 00 00    	jne    c001464c <ip_reass_free_complete_datagram+0x118>
c00145a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b8:	8b 10                	mov    edx,DWORD PTR [eax]
c00145ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00145c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00145c5:	8d 50 08             	lea    edx,[eax+0x8]
c00145c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145cf:	83 ec 04             	sub    esp,0x4
c00145d2:	6a 14                	push   0x14
c00145d4:	52                   	push   edx
c00145d5:	50                   	push   eax
c00145d6:	e8 9f bd fe ff       	call   c000037a <memcpy>
c00145db:	83 c4 10             	add    esp,0x10
c00145de:	83 ec 08             	sub    esp,0x8
c00145e1:	6a 01                	push   0x1
c00145e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145e7:	e8 3c eb ff ff       	call   c0013128 <icmp_time_exceeded>
c00145ec:	83 c4 10             	add    esp,0x10
c00145ef:	83 ec 0c             	sub    esp,0xc
c00145f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145f6:	e8 69 45 ff ff       	call   c0008b64 <pbuf_clen>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0014602:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014607:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001460c:	01 d0                	add    eax,edx
c001460e:	3d ff ff 00 00       	cmp    eax,0xffff
c0014613:	7e 17                	jle    c001462c <ip_reass_free_complete_datagram+0xf8>
c0014615:	83 ec 08             	sub    esp,0x8
c0014618:	68 03 0f 03 c0       	push   0xc0030f03
c001461d:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014622:	e8 71 b5 00 00       	call   c001fb98 <CPrintf>
c0014627:	83 c4 10             	add    esp,0x10
c001462a:	66 90                	xchg   ax,ax
c001462c:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014631:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0014636:	01 d0                	add    eax,edx
c0014638:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001463d:	83 ec 0c             	sub    esp,0xc
c0014640:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014644:	e8 3f 3d ff ff       	call   c0008388 <pbuf_free>
c0014649:	83 c4 10             	add    esp,0x10
c001464c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014653:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014657:	eb 7b                	jmp    c00146d4 <ip_reass_free_complete_datagram+0x1a0>
c0014659:	8d 76 00             	lea    esi,[esi+0x0]
c001465c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014667:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001466b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001466f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014673:	8b 00                	mov    eax,DWORD PTR [eax]
c0014675:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014679:	83 ec 0c             	sub    esp,0xc
c001467c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014680:	e8 df 44 ff ff       	call   c0008b64 <pbuf_clen>
c0014685:	83 c4 10             	add    esp,0x10
c0014688:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001468c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014691:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014696:	01 d0                	add    eax,edx
c0014698:	3d ff ff 00 00       	cmp    eax,0xffff
c001469d:	7e 15                	jle    c00146b4 <ip_reass_free_complete_datagram+0x180>
c001469f:	83 ec 08             	sub    esp,0x8
c00146a2:	68 03 0f 03 c0       	push   0xc0030f03
c00146a7:	68 c6 fb 02 c0       	push   0xc002fbc6
c00146ac:	e8 e7 b4 00 00       	call   c001fb98 <CPrintf>
c00146b1:	83 c4 10             	add    esp,0x10
c00146b4:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00146b9:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00146be:	01 d0                	add    eax,edx
c00146c0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00146c5:	83 ec 0c             	sub    esp,0xc
c00146c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146cc:	e8 b7 3c ff ff       	call   c0008388 <pbuf_free>
c00146d1:	83 c4 10             	add    esp,0x10
c00146d4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00146d9:	75 81                	jne    c001465c <ip_reass_free_complete_datagram+0x128>
c00146db:	83 ec 08             	sub    esp,0x8
c00146de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00146e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00146e6:	e8 ed fd ff ff       	call   c00144d8 <ip_reass_dequeue_datagram>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c00146f4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00146f9:	0f b7 c0             	movzx  eax,ax
c00146fc:	39 c2                	cmp    edx,eax
c00146fe:	76 18                	jbe    c0014718 <ip_reass_free_complete_datagram+0x1e4>
c0014700:	83 ec 08             	sub    esp,0x8
c0014703:	68 20 0f 03 c0       	push   0xc0030f20
c0014708:	68 c6 fb 02 c0       	push   0xc002fbc6
c001470d:	e8 86 b4 00 00       	call   c001fb98 <CPrintf>
c0014712:	83 c4 10             	add    esp,0x10
c0014715:	8d 76 00             	lea    esi,[esi+0x0]
c0014718:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001471f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014724:	89 d1                	mov    ecx,edx
c0014726:	29 c1                	sub    ecx,eax
c0014728:	89 c8                	mov    eax,ecx
c001472a:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014730:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014735:	83 c4 2c             	add    esp,0x2c
c0014738:	c3                   	ret    
c0014739:	8d 76 00             	lea    esi,[esi+0x0]

c001473c <ip_reass_tmr>:
c001473c:	83 ec 1c             	sub    esp,0x1c
c001473f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014747:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001474c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014750:	eb 62                	jmp    c00147b4 <ip_reass_tmr+0x78>
c0014752:	66 90                	xchg   ax,ax
c0014754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014758:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001475b:	0f b6 c0             	movzx  eax,al
c001475e:	85 c0                	test   eax,eax
c0014760:	74 2a                	je     c001478c <ip_reass_tmr+0x50>
c0014762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014766:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c0014769:	83 e8 01             	sub    eax,0x1
c001476c:	88 c2                	mov    dl,al
c001476e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014772:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c0014775:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014779:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014781:	8b 00                	mov    eax,DWORD PTR [eax]
c0014783:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014787:	eb 2b                	jmp    c00147b4 <ip_reass_tmr+0x78>
c0014789:	8d 76 00             	lea    esi,[esi+0x0]
c001478c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014790:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014794:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014798:	8b 00                	mov    eax,DWORD PTR [eax]
c001479a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001479e:	83 ec 08             	sub    esp,0x8
c00147a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147a9:	e8 86 fd ff ff       	call   c0014534 <ip_reass_free_complete_datagram>
c00147ae:	83 c4 10             	add    esp,0x10
c00147b1:	8d 76 00             	lea    esi,[esi+0x0]
c00147b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147b9:	75 99                	jne    c0014754 <ip_reass_tmr+0x18>
c00147bb:	90                   	nop
c00147bc:	83 c4 1c             	add    esp,0x1c
c00147bf:	c3                   	ret    

c00147c0 <ip_reass_remove_oldest_datagram>:
c00147c0:	83 ec 2c             	sub    esp,0x2c
c00147c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00147cb:	90                   	nop
c00147cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00147d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00147dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147e4:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00147e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147ed:	e9 9a 00 00 00       	jmp    c001488c <ip_reass_remove_oldest_datagram+0xcc>
c00147f2:	66 90                	xchg   ax,ax
c00147f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147f8:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c00147fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014802:	39 c2                	cmp    edx,eax
c0014804:	75 2e                	jne    c0014834 <ip_reass_remove_oldest_datagram+0x74>
c0014806:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001480a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001480d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014811:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014814:	39 c2                	cmp    edx,eax
c0014816:	75 1c                	jne    c0014834 <ip_reass_remove_oldest_datagram+0x74>
c0014818:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001481c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001481f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014823:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014827:	0f b7 d2             	movzx  edx,dx
c001482a:	0f b7 c0             	movzx  eax,ax
c001482d:	39 c2                	cmp    edx,eax
c001482f:	74 3b                	je     c001486c <ip_reass_remove_oldest_datagram+0xac>
c0014831:	8d 76 00             	lea    esi,[esi+0x0]
c0014834:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0014839:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001483e:	75 0c                	jne    c001484c <ip_reass_remove_oldest_datagram+0x8c>
c0014840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014844:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014848:	eb 22                	jmp    c001486c <ip_reass_remove_oldest_datagram+0xac>
c001484a:	66 90                	xchg   ax,ax
c001484c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014850:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c0014853:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014857:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c001485a:	0f b6 d2             	movzx  edx,dl
c001485d:	0f b6 c0             	movzx  eax,al
c0014860:	39 c2                	cmp    edx,eax
c0014862:	77 08                	ja     c001486c <ip_reass_remove_oldest_datagram+0xac>
c0014864:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014868:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001486c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014870:	8b 00                	mov    eax,DWORD PTR [eax]
c0014872:	85 c0                	test   eax,eax
c0014874:	74 0a                	je     c0014880 <ip_reass_remove_oldest_datagram+0xc0>
c0014876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001487a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001487e:	66 90                	xchg   ax,ax
c0014880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014884:	8b 00                	mov    eax,DWORD PTR [eax]
c0014886:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001488a:	66 90                	xchg   ax,ax
c001488c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014891:	0f 85 5d ff ff ff    	jne    c00147f4 <ip_reass_remove_oldest_datagram+0x34>
c0014897:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001489c:	74 22                	je     c00148c0 <ip_reass_remove_oldest_datagram+0x100>
c001489e:	83 ec 08             	sub    esp,0x8
c00148a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00148a9:	e8 86 fc ff ff       	call   c0014534 <ip_reass_free_complete_datagram>
c00148ae:	83 c4 10             	add    esp,0x10
c00148b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00148b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148b9:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c00148bd:	8d 76 00             	lea    esi,[esi+0x0]
c00148c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148c4:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00148c8:	7d 0e                	jge    c00148d8 <ip_reass_remove_oldest_datagram+0x118>
c00148ca:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c00148cf:	0f 8f f7 fe ff ff    	jg     c00147cc <ip_reass_remove_oldest_datagram+0xc>
c00148d5:	8d 76 00             	lea    esi,[esi+0x0]
c00148d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148dc:	83 c4 2c             	add    esp,0x2c
c00148df:	c3                   	ret    

c00148e0 <ip_reass_enqueue_new_datagram>:
c00148e0:	83 ec 1c             	sub    esp,0x1c
c00148e3:	83 ec 0c             	sub    esp,0xc
c00148e6:	6a 05                	push   0x5
c00148e8:	e8 af 30 ff ff       	call   c000799c <memp_malloc>
c00148ed:	83 c4 10             	add    esp,0x10
c00148f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148f4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00148f9:	75 4d                	jne    c0014948 <ip_reass_enqueue_new_datagram+0x68>
c00148fb:	83 ec 08             	sub    esp,0x8
c00148fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014902:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014906:	e8 b5 fe ff ff       	call   c00147c0 <ip_reass_remove_oldest_datagram>
c001490b:	83 c4 10             	add    esp,0x10
c001490e:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0014912:	7f 14                	jg     c0014928 <ip_reass_enqueue_new_datagram+0x48>
c0014914:	83 ec 0c             	sub    esp,0xc
c0014917:	6a 05                	push   0x5
c0014919:	e8 7e 30 ff ff       	call   c000799c <memp_malloc>
c001491e:	83 c4 10             	add    esp,0x10
c0014921:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014925:	8d 76 00             	lea    esi,[esi+0x0]
c0014928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001492d:	75 19                	jne    c0014948 <ip_reass_enqueue_new_datagram+0x68>
c001492f:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014935:	83 c0 01             	add    eax,0x1
c0014938:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c001493e:	b8 00 00 00 00       	mov    eax,0x0
c0014943:	eb 53                	jmp    c0014998 <ip_reass_enqueue_new_datagram+0xb8>
c0014945:	8d 76 00             	lea    esi,[esi+0x0]
c0014948:	83 ec 04             	sub    esp,0x4
c001494b:	6a 20                	push   0x20
c001494d:	6a 00                	push   0x0
c001494f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014953:	e8 98 bb fe ff       	call   c00004f0 <memset>
c0014958:	83 c4 10             	add    esp,0x10
c001495b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001495f:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c0014963:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c0014969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001496d:	89 10                	mov    DWORD PTR [eax],edx
c001496f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014973:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001497c:	83 c0 08             	add    eax,0x8
c001497f:	83 ec 04             	sub    esp,0x4
c0014982:	6a 14                	push   0x14
c0014984:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014988:	50                   	push   eax
c0014989:	e8 ec b9 fe ff       	call   c000037a <memcpy>
c001498e:	83 c4 10             	add    esp,0x10
c0014991:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014995:	8d 76 00             	lea    esi,[esi+0x0]
c0014998:	83 c4 1c             	add    esp,0x1c
c001499b:	c3                   	ret    

c001499c <ip_reass_chain_frag_into_datagram_and_validate>:
c001499c:	53                   	push   ebx
c001499d:	83 ec 28             	sub    esp,0x28
c00149a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00149a8:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00149b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00149b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00149b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149bf:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c00149c3:	0f b7 c0             	movzx  eax,ax
c00149c6:	83 ec 0c             	sub    esp,0xc
c00149c9:	50                   	push   eax
c00149ca:	e8 4d c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00149cf:	83 c4 10             	add    esp,0x10
c00149d2:	89 c3                	mov    ebx,eax
c00149d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00149d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00149db:	0f b7 c0             	movzx  eax,ax
c00149de:	83 ec 0c             	sub    esp,0xc
c00149e1:	50                   	push   eax
c00149e2:	e8 35 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00149e7:	83 c4 10             	add    esp,0x10
c00149ea:	0f b7 c0             	movzx  eax,ax
c00149ed:	c1 e8 08             	shr    eax,0x8
c00149f0:	83 e0 0f             	and    eax,0xf
c00149f3:	c1 e0 02             	shl    eax,0x2
c00149f6:	89 d9                	mov    ecx,ebx
c00149f8:	29 c1                	sub    ecx,eax
c00149fa:	89 c8                	mov    eax,ecx
c00149fc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014a05:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a09:	0f b7 c0             	movzx  eax,ax
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	50                   	push   eax
c0014a10:	e8 07 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014a15:	83 c4 10             	add    esp,0x10
c0014a18:	25 ff 1f 00 00       	and    eax,0x1fff
c0014a1d:	c1 e0 03             	shl    eax,0x3
c0014a20:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014a25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a34:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014a3a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014a42:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014a46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014a4a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0014a4f:	01 d0                	add    eax,edx
c0014a51:	89 c2                	mov    edx,eax
c0014a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a57:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0014a5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a66:	e9 11 01 00 00       	jmp    c0014b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c0014a6b:	90                   	nop
c0014a6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014a70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a7b:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a83:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a87:	0f b7 d2             	movzx  edx,dx
c0014a8a:	0f b7 c0             	movzx  eax,ax
c0014a8d:	39 c2                	cmp    edx,eax
c0014a8f:	73 6f                	jae    c0014b00 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c0014a91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014a99:	89 10                	mov    DWORD PTR [eax],edx
c0014a9b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014aa0:	74 4e                	je     c0014af0 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c0014aa2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014aa6:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014aaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aae:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ab2:	0f b7 d2             	movzx  edx,dx
c0014ab5:	0f b7 c0             	movzx  eax,ax
c0014ab8:	39 c2                	cmp    edx,eax
c0014aba:	0f 82 bc 02 00 00    	jb     c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014ac0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ac4:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014acc:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ad0:	0f b7 d2             	movzx  edx,dx
c0014ad3:	0f b7 c0             	movzx  eax,ax
c0014ad6:	39 c2                	cmp    edx,eax
c0014ad8:	0f 87 9e 02 00 00    	ja     c0014d7c <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014ade:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ae2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014ae6:	89 10                	mov    DWORD PTR [eax],edx
c0014ae8:	e9 9b 00 00 00       	jmp    c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014aed:	8d 76 00             	lea    esi,[esi+0x0]
c0014af0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014af4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014af8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014afb:	e9 88 00 00 00       	jmp    c0014b88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014b00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b04:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b0c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b10:	0f b7 d2             	movzx  edx,dx
c0014b13:	0f b7 c0             	movzx  eax,ax
c0014b16:	39 c2                	cmp    edx,eax
c0014b18:	0f 84 62 02 00 00    	je     c0014d80 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014b1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b22:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b2a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014b2e:	0f b7 d2             	movzx  edx,dx
c0014b31:	0f b7 c0             	movzx  eax,ax
c0014b34:	39 c2                	cmp    edx,eax
c0014b36:	0f 82 48 02 00 00    	jb     c0014d84 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014b3c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b41:	74 25                	je     c0014b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014b43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b47:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b4f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b53:	0f b7 d2             	movzx  edx,dx
c0014b56:	0f b7 c0             	movzx  eax,ax
c0014b59:	39 c2                	cmp    edx,eax
c0014b5b:	74 0b                	je     c0014b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014b5d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b65:	8d 76 00             	lea    esi,[esi+0x0]
c0014b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b7a:	66 90                	xchg   ax,ax
c0014b7c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b81:	0f 85 e5 fe ff ff    	jne    c0014a6c <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014b87:	90                   	nop
c0014b88:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b8d:	0f 85 95 00 00 00    	jne    c0014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b93:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014b98:	74 62                	je     c0014bfc <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014b9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9e:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014ba2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ba6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014baa:	0f b7 d2             	movzx  edx,dx
c0014bad:	0f b7 c0             	movzx  eax,ax
c0014bb0:	39 c2                	cmp    edx,eax
c0014bb2:	76 18                	jbe    c0014bcc <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014bb4:	83 ec 08             	sub    esp,0x8
c0014bb7:	68 3b 0f 03 c0       	push   0xc0030f3b
c0014bbc:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014bc1:	e8 d2 af 00 00       	call   c001fb98 <CPrintf>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bd0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014bd4:	89 10                	mov    DWORD PTR [eax],edx
c0014bd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bda:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014be2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014be6:	0f b7 d2             	movzx  edx,dx
c0014be9:	0f b7 c0             	movzx  eax,ax
c0014bec:	39 c2                	cmp    edx,eax
c0014bee:	74 38                	je     c0014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014bf0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bf8:	eb 2e                	jmp    c0014c28 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014bfa:	66 90                	xchg   ax,ax
c0014bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c03:	85 c0                	test   eax,eax
c0014c05:	74 15                	je     c0014c1c <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014c07:	83 ec 08             	sub    esp,0x8
c0014c0a:	68 7c 0f 03 c0       	push   0xc0030f7c
c0014c0f:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014c14:	e8 7f af 00 00       	call   c001fb98 <CPrintf>
c0014c19:	83 c4 10             	add    esp,0x10
c0014c1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c20:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014c27:	90                   	nop
c0014c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c2c:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014c2f:	0f b6 c0             	movzx  eax,al
c0014c32:	83 e0 01             	and    eax,0x1
c0014c35:	0f 84 39 01 00 00    	je     c0014d74 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014c3b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014c40:	0f 84 26 01 00 00    	je     c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c50:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c54:	0f b7 c0             	movzx  eax,ax
c0014c57:	85 c0                	test   eax,eax
c0014c59:	74 0d                	je     c0014c68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014c5b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014c63:	e9 04 01 00 00       	jmp    c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c74:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c7a:	eb 44                	jmp    c0014cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014c7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014c8b:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c93:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014c97:	0f b7 d2             	movzx  edx,dx
c0014c9a:	0f b7 c0             	movzx  eax,ax
c0014c9d:	39 c2                	cmp    edx,eax
c0014c9f:	74 0b                	je     c0014cac <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014ca1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ca9:	eb 1d                	jmp    c0014cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014cab:	90                   	nop
c0014cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cbe:	66 90                	xchg   ax,ax
c0014cc0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014cc5:	75 b5                	jne    c0014c7c <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014cc7:	90                   	nop
c0014cc8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014ccd:	0f 84 99 00 00 00    	je     c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014cd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cd7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cda:	85 c0                	test   eax,eax
c0014cdc:	75 16                	jne    c0014cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014cde:	83 ec 08             	sub    esp,0x8
c0014ce1:	68 59 0f 03 c0       	push   0xc0030f59
c0014ce6:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014ceb:	e8 a8 ae 00 00       	call   c001fb98 <CPrintf>
c0014cf0:	83 c4 10             	add    esp,0x10
c0014cf3:	90                   	nop
c0014cf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014cfe:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014d02:	75 18                	jne    c0014d1c <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014d04:	83 ec 08             	sub    esp,0x8
c0014d07:	68 59 0f 03 c0       	push   0xc0030f59
c0014d0c:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014d11:	e8 82 ae 00 00       	call   c001fb98 <CPrintf>
c0014d16:	83 c4 10             	add    esp,0x10
c0014d19:	8d 76 00             	lea    esi,[esi+0x0]
c0014d1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d20:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d22:	85 c0                	test   eax,eax
c0014d24:	74 16                	je     c0014d3c <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014d26:	83 ec 08             	sub    esp,0x8
c0014d29:	68 b4 0f 03 c0       	push   0xc0030fb4
c0014d2e:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014d33:	e8 60 ae 00 00       	call   c001fb98 <CPrintf>
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	90                   	nop
c0014d3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014d40:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014d44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d48:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014d4b:	0f b7 d2             	movzx  edx,dx
c0014d4e:	0f b7 c0             	movzx  eax,ax
c0014d51:	39 c2                	cmp    edx,eax
c0014d53:	74 17                	je     c0014d6c <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014d55:	83 ec 08             	sub    esp,0x8
c0014d58:	68 d8 0f 03 c0       	push   0xc0030fd8
c0014d5d:	68 c6 fb 02 c0       	push   0xc002fbc6
c0014d62:	e8 31 ae 00 00       	call   c001fb98 <CPrintf>
c0014d67:	83 c4 10             	add    esp,0x10
c0014d6a:	66 90                	xchg   ax,ax
c0014d6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d70:	eb 52                	jmp    c0014dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014d72:	66 90                	xchg   ax,ax
c0014d74:	b8 00 00 00 00       	mov    eax,0x0
c0014d79:	eb 49                	jmp    c0014dc4 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014d7b:	90                   	nop
c0014d7c:	90                   	nop
c0014d7d:	eb 09                	jmp    c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014d7f:	90                   	nop
c0014d80:	90                   	nop
c0014d81:	eb 05                	jmp    c0014d88 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014d83:	90                   	nop
c0014d84:	90                   	nop
c0014d85:	8d 76 00             	lea    esi,[esi+0x0]
c0014d88:	83 ec 0c             	sub    esp,0xc
c0014d8b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d8f:	e8 d0 3d ff ff       	call   c0008b64 <pbuf_clen>
c0014d94:	83 c4 10             	add    esp,0x10
c0014d97:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014d9e:	0f b6 c0             	movzx  eax,al
c0014da1:	89 d3                	mov    ebx,edx
c0014da3:	29 c3                	sub    ebx,eax
c0014da5:	89 d8                	mov    eax,ebx
c0014da7:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014dad:	83 ec 0c             	sub    esp,0xc
c0014db0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014db4:	e8 cf 35 ff ff       	call   c0008388 <pbuf_free>
c0014db9:	83 c4 10             	add    esp,0x10
c0014dbc:	b8 00 00 00 00       	mov    eax,0x0
c0014dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014dc4:	83 c4 28             	add    esp,0x28
c0014dc7:	5b                   	pop    ebx
c0014dc8:	c3                   	ret    
c0014dc9:	8d 76 00             	lea    esi,[esi+0x0]

c0014dcc <ip_reass>:
c0014dcc:	53                   	push   ebx
c0014dcd:	83 ec 28             	sub    esp,0x28
c0014dd0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014dd8:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014dde:	83 c0 01             	add    eax,0x1
c0014de1:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014deb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014dee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014df6:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014df9:	0f b7 c0             	movzx  eax,ax
c0014dfc:	83 ec 0c             	sub    esp,0xc
c0014dff:	50                   	push   eax
c0014e00:	e8 17 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	0f b7 c0             	movzx  eax,ax
c0014e0b:	c1 e8 08             	shr    eax,0x8
c0014e0e:	0f b7 c0             	movzx  eax,ax
c0014e11:	83 e0 0f             	and    eax,0xf
c0014e14:	c1 e0 02             	shl    eax,0x2
c0014e17:	83 f8 14             	cmp    eax,0x14
c0014e1a:	74 14                	je     c0014e30 <ip_reass+0x64>
c0014e1c:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014e22:	83 c0 01             	add    eax,0x1
c0014e25:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014e2b:	e9 70 03 00 00       	jmp    c00151a0 <ip_reass+0x3d4>
c0014e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e34:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e38:	0f b7 c0             	movzx  eax,ax
c0014e3b:	83 ec 0c             	sub    esp,0xc
c0014e3e:	50                   	push   eax
c0014e3f:	e8 d8 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e4c:	c1 e0 03             	shl    eax,0x3
c0014e4f:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e58:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014e5c:	0f b7 c0             	movzx  eax,ax
c0014e5f:	83 ec 0c             	sub    esp,0xc
c0014e62:	50                   	push   eax
c0014e63:	e8 b4 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	89 c3                	mov    ebx,eax
c0014e6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e71:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014e74:	0f b7 c0             	movzx  eax,ax
c0014e77:	83 ec 0c             	sub    esp,0xc
c0014e7a:	50                   	push   eax
c0014e7b:	e8 9c bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014e80:	83 c4 10             	add    esp,0x10
c0014e83:	0f b7 c0             	movzx  eax,ax
c0014e86:	c1 e8 08             	shr    eax,0x8
c0014e89:	83 e0 0f             	and    eax,0xf
c0014e8c:	c1 e0 02             	shl    eax,0x2
c0014e8f:	89 d9                	mov    ecx,ebx
c0014e91:	29 c1                	sub    ecx,eax
c0014e93:	89 c8                	mov    eax,ecx
c0014e95:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014e9a:	83 ec 0c             	sub    esp,0xc
c0014e9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014ea1:	e8 be 3c ff ff       	call   c0008b64 <pbuf_clen>
c0014ea6:	83 c4 10             	add    esp,0x10
c0014ea9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014ead:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014eb3:	0f b7 d0             	movzx  edx,ax
c0014eb6:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ebb:	01 d0                	add    eax,edx
c0014ebd:	83 f8 0a             	cmp    eax,0xa
c0014ec0:	7e 42                	jle    c0014f04 <ip_reass+0x138>
c0014ec2:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ec7:	83 ec 08             	sub    esp,0x8
c0014eca:	50                   	push   eax
c0014ecb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ecf:	e8 ec f8 ff ff       	call   c00147c0 <ip_reass_remove_oldest_datagram>
c0014ed4:	83 c4 10             	add    esp,0x10
c0014ed7:	85 c0                	test   eax,eax
c0014ed9:	74 15                	je     c0014ef0 <ip_reass+0x124>
c0014edb:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014ee1:	0f b7 d0             	movzx  edx,ax
c0014ee4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ee9:	01 d0                	add    eax,edx
c0014eeb:	83 f8 0a             	cmp    eax,0xa
c0014eee:	7e 14                	jle    c0014f04 <ip_reass+0x138>
c0014ef0:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014ef6:	83 c0 01             	add    eax,0x1
c0014ef9:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014eff:	e9 9c 02 00 00       	jmp    c00151a0 <ip_reass+0x3d4>
c0014f04:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014f09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f0d:	eb 65                	jmp    c0014f74 <ip_reass+0x1a8>
c0014f0f:	90                   	nop
c0014f10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f14:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014f1e:	39 c2                	cmp    edx,eax
c0014f20:	75 3e                	jne    c0014f60 <ip_reass+0x194>
c0014f22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f26:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f30:	39 c2                	cmp    edx,eax
c0014f32:	75 2c                	jne    c0014f60 <ip_reass+0x194>
c0014f34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f38:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014f3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014f43:	0f b7 d2             	movzx  edx,dx
c0014f46:	0f b7 c0             	movzx  eax,ax
c0014f49:	39 c2                	cmp    edx,eax
c0014f4b:	75 13                	jne    c0014f60 <ip_reass+0x194>
c0014f4d:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014f53:	83 c0 01             	add    eax,0x1
c0014f56:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014f5c:	eb 1e                	jmp    c0014f7c <ip_reass+0x1b0>
c0014f5e:	66 90                	xchg   ax,ax
c0014f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014f68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f72:	66 90                	xchg   ax,ax
c0014f74:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f79:	75 95                	jne    c0014f10 <ip_reass+0x144>
c0014f7b:	90                   	nop
c0014f7c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014f81:	75 25                	jne    c0014fa8 <ip_reass+0x1dc>
c0014f83:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014f88:	83 ec 08             	sub    esp,0x8
c0014f8b:	50                   	push   eax
c0014f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f90:	e8 4b f9 ff ff       	call   c00148e0 <ip_reass_enqueue_new_datagram>
c0014f95:	83 c4 10             	add    esp,0x10
c0014f98:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f9c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014fa1:	75 61                	jne    c0015004 <ip_reass+0x238>
c0014fa3:	e9 f8 01 00 00       	jmp    c00151a0 <ip_reass+0x3d4>
c0014fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fac:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014fb0:	0f b7 c0             	movzx  eax,ax
c0014fb3:	83 ec 0c             	sub    esp,0xc
c0014fb6:	50                   	push   eax
c0014fb7:	e8 60 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fbc:	83 c4 10             	add    esp,0x10
c0014fbf:	0f b7 c0             	movzx  eax,ax
c0014fc2:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fc7:	75 3b                	jne    c0015004 <ip_reass+0x238>
c0014fc9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fcd:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014fd1:	0f b7 c0             	movzx  eax,ax
c0014fd4:	83 ec 0c             	sub    esp,0xc
c0014fd7:	50                   	push   eax
c0014fd8:	e8 3f bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	0f b7 c0             	movzx  eax,ax
c0014fe3:	25 ff 1f 00 00       	and    eax,0x1fff
c0014fe8:	74 1a                	je     c0015004 <ip_reass+0x238>
c0014fea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fee:	83 c0 08             	add    eax,0x8
c0014ff1:	83 ec 04             	sub    esp,0x4
c0014ff4:	6a 14                	push   0x14
c0014ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014ffa:	50                   	push   eax
c0014ffb:	e8 7a b3 fe ff       	call   c000037a <memcpy>
c0015000:	83 c4 10             	add    esp,0x10
c0015003:	90                   	nop
c0015004:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0015009:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001500f:	01 d0                	add    eax,edx
c0015011:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0015017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001501b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001501f:	0f b7 c0             	movzx  eax,ax
c0015022:	83 e0 20             	and    eax,0x20
c0015025:	75 29                	jne    c0015050 <ip_reass+0x284>
c0015027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001502b:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c001502e:	83 c8 01             	or     eax,0x1
c0015031:	88 c2                	mov    dl,al
c0015033:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015037:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c001503a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001503f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015043:	01 d0                	add    eax,edx
c0015045:	89 c2                	mov    edx,eax
c0015047:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001504b:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001504f:	90                   	nop
c0015050:	83 ec 08             	sub    esp,0x8
c0015053:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0015057:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001505b:	e8 3c f9 ff ff       	call   c001499c <ip_reass_chain_frag_into_datagram_and_validate>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	85 c0                	test   eax,eax
c0015065:	0f 84 2d 01 00 00    	je     c0015198 <ip_reass+0x3cc>
c001506b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001506f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015072:	83 c0 14             	add    eax,0x14
c0015075:	89 c2                	mov    edx,eax
c0015077:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001507b:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c001507f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015083:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015086:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015089:	8b 00                	mov    eax,DWORD PTR [eax]
c001508b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001508f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015093:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001509d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150a1:	83 c0 08             	add    eax,0x8
c00150a4:	83 ec 04             	sub    esp,0x4
c00150a7:	6a 14                	push   0x14
c00150a9:	50                   	push   eax
c00150aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150ae:	e8 c7 b2 fe ff       	call   c000037a <memcpy>
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00150ba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00150bd:	0f b7 c0             	movzx  eax,ax
c00150c0:	83 ec 0c             	sub    esp,0xc
c00150c3:	50                   	push   eax
c00150c4:	e8 53 bb fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00150c9:	83 c4 10             	add    esp,0x10
c00150cc:	89 c2                	mov    edx,eax
c00150ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150d2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00150d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150da:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00150e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150e4:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00150ea:	83 ec 08             	sub    esp,0x8
c00150ed:	6a 14                	push   0x14
c00150ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150f3:	e8 cc e4 ff ff       	call   c00135c4 <inet_chksum>
c00150f8:	83 c4 10             	add    esp,0x10
c00150fb:	89 c2                	mov    edx,eax
c00150fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015101:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015105:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015109:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001510c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015110:	eb 3e                	jmp    c0015150 <ip_reass+0x384>
c0015112:	66 90                	xchg   ax,ax
c0015114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015118:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001511b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001511f:	83 ec 08             	sub    esp,0x8
c0015122:	6a ec                	push   0xffffffec
c0015124:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015128:	e8 bb 30 ff ff       	call   c00081e8 <pbuf_header>
c001512d:	83 c4 10             	add    esp,0x10
c0015130:	83 ec 08             	sub    esp,0x8
c0015133:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015137:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001513b:	e8 8c 3a ff ff       	call   c0008bcc <pbuf_cat>
c0015140:	83 c4 10             	add    esp,0x10
c0015143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015147:	8b 00                	mov    eax,DWORD PTR [eax]
c0015149:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001514d:	8d 76 00             	lea    esi,[esi+0x0]
c0015150:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015155:	75 bd                	jne    c0015114 <ip_reass+0x348>
c0015157:	83 ec 08             	sub    esp,0x8
c001515a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015162:	e8 71 f3 ff ff       	call   c00144d8 <ip_reass_dequeue_datagram>
c0015167:	83 c4 10             	add    esp,0x10
c001516a:	83 ec 0c             	sub    esp,0xc
c001516d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015171:	e8 ee 39 ff ff       	call   c0008b64 <pbuf_clen>
c0015176:	83 c4 10             	add    esp,0x10
c0015179:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0015180:	0f b6 c0             	movzx  eax,al
c0015183:	89 d3                	mov    ebx,edx
c0015185:	29 c3                	sub    ebx,eax
c0015187:	89 d8                	mov    eax,ebx
c0015189:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c001518f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015193:	eb 2f                	jmp    c00151c4 <ip_reass+0x3f8>
c0015195:	8d 76 00             	lea    esi,[esi+0x0]
c0015198:	b8 00 00 00 00       	mov    eax,0x0
c001519d:	eb 25                	jmp    c00151c4 <ip_reass+0x3f8>
c001519f:	90                   	nop
c00151a0:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00151a6:	83 c0 01             	add    eax,0x1
c00151a9:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00151af:	83 ec 0c             	sub    esp,0xc
c00151b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151b6:	e8 cd 31 ff ff       	call   c0008388 <pbuf_free>
c00151bb:	83 c4 10             	add    esp,0x10
c00151be:	b8 00 00 00 00       	mov    eax,0x0
c00151c3:	90                   	nop
c00151c4:	83 c4 28             	add    esp,0x28
c00151c7:	5b                   	pop    ebx
c00151c8:	c3                   	ret    
c00151c9:	8d 76 00             	lea    esi,[esi+0x0]

c00151cc <ip_frag_alloc_pbuf_custom_ref>:
c00151cc:	83 ec 0c             	sub    esp,0xc
c00151cf:	83 ec 0c             	sub    esp,0xc
c00151d2:	6a 06                	push   0x6
c00151d4:	e8 c3 27 ff ff       	call   c000799c <memp_malloc>
c00151d9:	83 c4 10             	add    esp,0x10
c00151dc:	83 c4 0c             	add    esp,0xc
c00151df:	c3                   	ret    

c00151e0 <ip_frag_free_pbuf_custom_ref>:
c00151e0:	83 ec 0c             	sub    esp,0xc
c00151e3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00151e8:	75 16                	jne    c0015200 <ip_frag_free_pbuf_custom_ref+0x20>
c00151ea:	83 ec 08             	sub    esp,0x8
c00151ed:	68 f6 ff 02 c0       	push   0xc002fff6
c00151f2:	68 c6 fb 02 c0       	push   0xc002fbc6
c00151f7:	e8 9c a9 00 00       	call   c001fb98 <CPrintf>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	90                   	nop
c0015200:	83 ec 08             	sub    esp,0x8
c0015203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015207:	6a 06                	push   0x6
c0015209:	e8 ba 28 ff ff       	call   c0007ac8 <memp_free>
c001520e:	83 c4 10             	add    esp,0x10
c0015211:	90                   	nop
c0015212:	83 c4 0c             	add    esp,0xc
c0015215:	c3                   	ret    
c0015216:	66 90                	xchg   ax,ax

c0015218 <ipfrag_free_pbuf_custom>:
c0015218:	83 ec 1c             	sub    esp,0x1c
c001521b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001521f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015223:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015228:	75 16                	jne    c0015240 <ipfrag_free_pbuf_custom+0x28>
c001522a:	83 ec 08             	sub    esp,0x8
c001522d:	68 66 0f 03 c0       	push   0xc0030f66
c0015232:	68 c6 fb 02 c0       	push   0xc002fbc6
c0015237:	e8 5c a9 00 00       	call   c001fb98 <CPrintf>
c001523c:	83 c4 10             	add    esp,0x10
c001523f:	90                   	nop
c0015240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015244:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015248:	74 16                	je     c0015260 <ipfrag_free_pbuf_custom+0x48>
c001524a:	83 ec 08             	sub    esp,0x8
c001524d:	68 72 0f 03 c0       	push   0xc0030f72
c0015252:	68 c6 fb 02 c0       	push   0xc002fbc6
c0015257:	e8 3c a9 00 00       	call   c001fb98 <CPrintf>
c001525c:	83 c4 10             	add    esp,0x10
c001525f:	90                   	nop
c0015260:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015264:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015267:	85 c0                	test   eax,eax
c0015269:	74 15                	je     c0015280 <ipfrag_free_pbuf_custom+0x68>
c001526b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001526f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015272:	83 ec 0c             	sub    esp,0xc
c0015275:	50                   	push   eax
c0015276:	e8 0d 31 ff ff       	call   c0008388 <pbuf_free>
c001527b:	83 c4 10             	add    esp,0x10
c001527e:	66 90                	xchg   ax,ax
c0015280:	83 ec 0c             	sub    esp,0xc
c0015283:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015287:	e8 54 ff ff ff       	call   c00151e0 <ip_frag_free_pbuf_custom_ref>
c001528c:	83 c4 10             	add    esp,0x10
c001528f:	90                   	nop
c0015290:	83 c4 1c             	add    esp,0x1c
c0015293:	c3                   	ret    

c0015294 <ip_frag>:
c0015294:	53                   	push   ebx
c0015295:	83 ec 38             	sub    esp,0x38
c0015298:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001529c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001529f:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00152a4:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00152ab:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00152b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00152b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152c9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00152cd:	0f b7 c0             	movzx  eax,ax
c00152d0:	83 ec 0c             	sub    esp,0xc
c00152d3:	50                   	push   eax
c00152d4:	e8 43 b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00152d9:	83 c4 10             	add    esp,0x10
c00152dc:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00152e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152e5:	25 ff 1f 00 00       	and    eax,0x1fff
c00152ea:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c00152ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152f3:	25 00 20 00 00       	and    eax,0x2000
c00152f8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00152fd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015301:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015304:	83 e8 14             	sub    eax,0x14
c0015307:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001530c:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015311:	83 e8 14             	sub    eax,0x14
c0015314:	8d 50 07             	lea    edx,[eax+0x7]
c0015317:	0f 48 c2             	cmovs  eax,edx
c001531a:	c1 f8 03             	sar    eax,0x3
c001531d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015322:	e9 05 03 00 00       	jmp    c001562c <ip_frag+0x398>
c0015327:	90                   	nop
c0015328:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001532d:	8d 50 ed             	lea    edx,[eax-0x13]
c0015330:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015335:	39 c2                	cmp    edx,eax
c0015337:	0f 9f c0             	setg   al
c001533a:	0f b6 c0             	movzx  eax,al
c001533d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015346:	25 ff 1f 00 00       	and    eax,0x1fff
c001534b:	89 c2                	mov    edx,eax
c001534d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0015352:	09 d0                	or     eax,edx
c0015354:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015359:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c001535e:	85 c0                	test   eax,eax
c0015360:	75 0e                	jne    c0015370 <ip_frag+0xdc>
c0015362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015366:	80 cc 20             	or     ah,0x20
c0015369:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001536e:	66 90                	xchg   ax,ax
c0015370:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0015375:	85 c0                	test   eax,eax
c0015377:	75 0b                	jne    c0015384 <ip_frag+0xf0>
c0015379:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001537d:	c1 e0 03             	shl    eax,0x3
c0015380:	eb 0a                	jmp    c001538c <ip_frag+0xf8>
c0015382:	66 90                	xchg   ax,ax
c0015384:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c0015389:	8d 76 00             	lea    esi,[esi+0x0]
c001538c:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0015391:	83 ec 04             	sub    esp,0x4
c0015394:	6a 00                	push   0x0
c0015396:	6a 14                	push   0x14
c0015398:	6a 02                	push   0x2
c001539a:	e8 c5 31 ff ff       	call   c0008564 <pbuf_alloc>
c001539f:	83 c4 10             	add    esp,0x10
c00153a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153a6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00153ab:	75 07                	jne    c00153b4 <ip_frag+0x120>
c00153ad:	b0 ff                	mov    al,0xff
c00153af:	e9 88 02 00 00       	jmp    c001563c <ip_frag+0x3a8>
c00153b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00153bc:	0f b7 c0             	movzx  eax,ax
c00153bf:	83 f8 13             	cmp    eax,0x13
c00153c2:	77 18                	ja     c00153dc <ip_frag+0x148>
c00153c4:	83 ec 08             	sub    esp,0x8
c00153c7:	68 08 10 03 c0       	push   0xc0031008
c00153cc:	68 c6 fb 02 c0       	push   0xc002fbc6
c00153d1:	e8 c2 a7 00 00       	call   c001fb98 <CPrintf>
c00153d6:	83 c4 10             	add    esp,0x10
c00153d9:	8d 76 00             	lea    esi,[esi+0x0]
c00153dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00153e3:	83 ec 04             	sub    esp,0x4
c00153e6:	6a 14                	push   0x14
c00153e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00153ec:	50                   	push   eax
c00153ed:	e8 88 af fe ff       	call   c000037a <memcpy>
c00153f2:	83 c4 10             	add    esp,0x10
c00153f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00153f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00153fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015400:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015404:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015407:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c001540c:	01 c2                	add    edx,eax
c001540e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015412:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015415:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015419:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c001541d:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015422:	89 d1                	mov    ecx,edx
c0015424:	29 c1                	sub    ecx,eax
c0015426:	89 c8                	mov    eax,ecx
c0015428:	89 c2                	mov    edx,eax
c001542a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001542e:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015436:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c001543b:	e9 18 01 00 00       	jmp    c0015558 <ip_frag+0x2c4>
c0015440:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015444:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015448:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001544c:	0f b7 d8             	movzx  ebx,ax
c001544f:	0f b7 ca             	movzx  ecx,dx
c0015452:	39 cb                	cmp    ebx,ecx
c0015454:	76 02                	jbe    c0015458 <ip_frag+0x1c4>
c0015456:	89 d0                	mov    eax,edx
c0015458:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c001545d:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015462:	85 c0                	test   eax,eax
c0015464:	75 12                	jne    c0015478 <ip_frag+0x1e4>
c0015466:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001546a:	8b 00                	mov    eax,DWORD PTR [eax]
c001546c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015470:	e9 e3 00 00 00       	jmp    c0015558 <ip_frag+0x2c4>
c0015475:	8d 76 00             	lea    esi,[esi+0x0]
c0015478:	e8 4f fd ff ff       	call   c00151cc <ip_frag_alloc_pbuf_custom_ref>
c001547d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015481:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015486:	75 18                	jne    c00154a0 <ip_frag+0x20c>
c0015488:	83 ec 0c             	sub    esp,0xc
c001548b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001548f:	e8 f4 2e ff ff       	call   c0008388 <pbuf_free>
c0015494:	83 c4 10             	add    esp,0x10
c0015497:	b0 ff                	mov    al,0xff
c0015499:	e9 9e 01 00 00       	jmp    c001563c <ip_frag+0x3a8>
c001549e:	66 90                	xchg   ax,ax
c00154a0:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00154a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00154a9:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00154ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00154b0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00154b5:	83 ec 08             	sub    esp,0x8
c00154b8:	53                   	push   ebx
c00154b9:	51                   	push   ecx
c00154ba:	52                   	push   edx
c00154bb:	6a 02                	push   0x2
c00154bd:	50                   	push   eax
c00154be:	6a 03                	push   0x3
c00154c0:	e8 ff 2b ff ff       	call   c00080c4 <pbuf_alloced_custom>
c00154c5:	83 c4 20             	add    esp,0x20
c00154c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154cc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00154d1:	75 25                	jne    c00154f8 <ip_frag+0x264>
c00154d3:	83 ec 0c             	sub    esp,0xc
c00154d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154da:	e8 01 fd ff ff       	call   c00151e0 <ip_frag_free_pbuf_custom_ref>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00154e9:	e8 9a 2e ff ff       	call   c0008388 <pbuf_free>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	b0 ff                	mov    al,0xff
c00154f3:	e9 44 01 00 00       	jmp    c001563c <ip_frag+0x3a8>
c00154f8:	83 ec 0c             	sub    esp,0xc
c00154fb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00154ff:	e8 94 36 ff ff       	call   c0008b98 <pbuf_ref>
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001550b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001550f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015512:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015516:	c7 40 10 18 52 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015218
c001551d:	83 ec 08             	sub    esp,0x8
c0015520:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015524:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015528:	e8 9f 36 ff ff       	call   c0008bcc <pbuf_cat>
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015534:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015539:	89 d3                	mov    ebx,edx
c001553b:	29 c3                	sub    ebx,eax
c001553d:	89 d8                	mov    eax,ebx
c001553f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015544:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015549:	85 c0                	test   eax,eax
c001554b:	74 0b                	je     c0015558 <ip_frag+0x2c4>
c001554d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015551:	8b 00                	mov    eax,DWORD PTR [eax]
c0015553:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015557:	90                   	nop
c0015558:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c001555d:	85 c0                	test   eax,eax
c001555f:	0f 85 db fe ff ff    	jne    c0015440 <ip_frag+0x1ac>
c0015565:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001556a:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001556f:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c0015574:	83 ec 0c             	sub    esp,0xc
c0015577:	50                   	push   eax
c0015578:	e8 9f b6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	89 c2                	mov    edx,eax
c0015582:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015586:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c001558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001558e:	83 c0 14             	add    eax,0x14
c0015591:	0f b7 c0             	movzx  eax,ax
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	50                   	push   eax
c0015598:	e8 7f b6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	89 c2                	mov    edx,eax
c00155a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155a6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00155aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155ae:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c00155b4:	83 ec 08             	sub    esp,0x8
c00155b7:	6a 14                	push   0x14
c00155b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00155bd:	e8 02 e0 ff ff       	call   c00135c4 <inet_chksum>
c00155c2:	83 c4 10             	add    esp,0x10
c00155c5:	89 c2                	mov    edx,eax
c00155c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155cb:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00155cf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00155d3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155d6:	83 ec 04             	sub    esp,0x4
c00155d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00155dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155e1:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00155e5:	ff d0                	call   eax
c00155e7:	83 c4 10             	add    esp,0x10
c00155ea:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c00155f0:	83 c0 01             	add    eax,0x1
c00155f3:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c00155f9:	83 ec 0c             	sub    esp,0xc
c00155fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015600:	e8 83 2d ff ff       	call   c0008388 <pbuf_free>
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001560d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015611:	89 d1                	mov    ecx,edx
c0015613:	29 c1                	sub    ecx,eax
c0015615:	89 c8                	mov    eax,ecx
c0015617:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001561c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015624:	01 d0                	add    eax,edx
c0015626:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001562b:	90                   	nop
c001562c:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015631:	85 c0                	test   eax,eax
c0015633:	0f 85 ef fc ff ff    	jne    c0015328 <ip_frag+0x94>
c0015639:	b0 00                	mov    al,0x0
c001563b:	90                   	nop
c001563c:	83 c4 38             	add    esp,0x38
c001563f:	5b                   	pop    ebx
c0015640:	c3                   	ret    
c0015641:	90                   	nop

c0015642 <Computer::close(int, int, void*)>:
c0015642:	53                   	push   ebx
c0015643:	83 ec 08             	sub    esp,0x8
c0015646:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001564a:	e8 db a3 00 00       	call   c001fa2a <KeExecuteAtexit()>
c001564f:	83 ec 0c             	sub    esp,0xc
c0015652:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015658:	50                   	push   eax
c0015659:	e8 82 5f 00 00       	call   c001b5e0 <Device::closeAll()>
c001565e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0015664:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015668:	8b 10                	mov    edx,DWORD PTR [eax]
c001566a:	51                   	push   ecx
c001566b:	68 0f 27 00 00       	push   0x270f
c0015670:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015674:	53                   	push   ebx
c0015675:	50                   	push   eax
c0015676:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015679:	83 c4 14             	add    esp,0x14
c001567c:	68 28 10 03 c0       	push   0xc0031028
c0015681:	e8 e4 ab 00 00       	call   c002026a <KePanic(char const*)>
c0015686:	83 c4 18             	add    esp,0x18
c0015689:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001568e:	5b                   	pop    ebx
c001568f:	c3                   	ret    

c0015690 <Krnl::firstTask()>:
c0015690:	53                   	push   ebx
c0015691:	83 ec 14             	sub    esp,0x14
c0015694:	fb                   	sti    
c0015695:	68 3e 10 03 c0       	push   0xc003103e
c001569a:	e8 6a a4 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001569f:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00156a6:	e8 f0 0d 00 00       	call   c001649b <malloc>
c00156ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00156b2:	89 c3                	mov    ebx,eax
c00156b4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00156b9:	50                   	push   eax
c00156ba:	68 57 10 03 c0       	push   0xc0031057
c00156bf:	6a 01                	push   0x1
c00156c1:	53                   	push   ebx
c00156c2:	e8 91 f7 00 00       	call   c0024e58 <Process::Process(bool, char const*, Process*, char**)>
c00156c7:	83 c4 20             	add    esp,0x20
c00156ca:	68 ff 00 00 00       	push   0xff
c00156cf:	6a 00                	push   0x0
c00156d1:	68 e7 5e 01 c0       	push   0xc0015ee7
c00156d6:	53                   	push   ebx
c00156d7:	e8 a4 f9 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c00156dc:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c00156e2:	6a 7a                	push   0x7a
c00156e4:	6a 00                	push   0x0
c00156e6:	68 38 59 02 c0       	push   0xc0025938
c00156eb:	52                   	push   edx
c00156ec:	e8 8f f9 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c00156f1:	83 c4 14             	add    esp,0x14
c00156f4:	68 54 11 03 c0       	push   0xc0031154
c00156f9:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c00156fe:	e8 06 a4 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015703:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c001570a:	e8 12 ad 00 00       	call   c0020421 <KeInitRand()>
c001570f:	e8 bb 05 01 00       	call   c0025ccf <Vm::initialise8086()>
c0015714:	e8 ab 4a 00 00       	call   c001a1c4 <Fs::initVFS()>
c0015719:	c7 04 24 64 10 03 c0 	mov    DWORD PTR [esp],0xc0031064
c0015720:	e8 e4 a3 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015725:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001572a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015730:	8b 10                	mov    edx,DWORD PTR [eax]
c0015732:	6a 00                	push   0x0
c0015734:	6a 00                	push   0x0
c0015736:	6a 00                	push   0x0
c0015738:	50                   	push   eax
c0015739:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001573c:	83 c4 14             	add    esp,0x14
c001573f:	68 54 11 03 c0       	push   0xc0031154
c0015744:	e8 c0 a3 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015749:	e8 10 42 00 00       	call   c001995e <KeInitialiseSymlinks()>
c001574e:	e8 5f a9 00 00       	call   c00200b2 <KeLoadSystemEnv()>
c0015753:	e8 d7 ab 00 00       	call   c002032f <KeSetupPowerManager()>
c0015758:	83 c4 0c             	add    esp,0xc
c001575b:	6a 3a                	push   0x3a
c001575d:	68 7e 10 03 c0       	push   0xc003107e
c0015762:	68 87 10 03 c0       	push   0xc0031087
c0015767:	e8 85 d8 00 00       	call   c0022ff1 <Reg::readIntWithDefault(char*, char*, int)>
c001576c:	89 04 24             	mov    DWORD PTR [esp],eax
c001576f:	e8 7c 56 00 00       	call   c001adf0 <User::loadClockSettings(int)>
c0015774:	c7 04 24 78 11 03 c0 	mov    DWORD PTR [esp],0xc0031178
c001577b:	e8 89 a3 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015780:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015785:	59                   	pop    ecx
c0015786:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c001578c:	53                   	push   ebx
c001578d:	e8 02 5d 00 00       	call   c001b494 <Device::loadDriversForAll()>
c0015792:	e8 a1 16 ff ff       	call   c0006e38 <lwip_init>
c0015797:	c7 04 24 8f 10 03 c0 	mov    DWORD PTR [esp],0xc003108f
c001579e:	e8 66 a3 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c00157a3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00157a9:	58                   	pop    eax
c00157aa:	5a                   	pop    edx
c00157ab:	6a 01                	push   0x1
c00157ad:	68 a0 10 03 c0       	push   0xc00310a0
c00157b2:	e8 84 f0 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c00157b7:	59                   	pop    ecx
c00157b8:	5a                   	pop    edx
c00157b9:	53                   	push   ebx
c00157ba:	50                   	push   eax
c00157bb:	e8 dc f2 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	83 ec 0c             	sub    esp,0xc
c00157c6:	6a 02                	push   0x2
c00157c8:	e8 bb fb 00 00       	call   c0025388 <blockTask(TaskState)>
c00157cd:	83 c4 10             	add    esp,0x10
c00157d0:	eb f1                	jmp    c00157c3 <Krnl::firstTask()+0x133>

c00157d2 <Computer::Computer()>:
c00157d2:	83 ec 0c             	sub    esp,0xc
c00157d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157d9:	83 ec 08             	sub    esp,0x8
c00157dc:	68 bc 10 03 c0       	push   0xc00310bc
c00157e1:	50                   	push   eax
c00157e2:	e8 f3 5c 00 00       	call   c001b4da <Device::Device(char const*)>
c00157e7:	83 c4 10             	add    esp,0x10
c00157ea:	ba c4 11 03 c0       	mov    edx,0xc00311c4
c00157ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f3:	89 10                	mov    DWORD PTR [eax],edx
c00157f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157f9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0015803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015807:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015815:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001581b:	83 ca 04             	or     edx,0x4
c001581e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015828:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001582e:	0f b6 d0             	movzx  edx,al
c0015831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015835:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c001583c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015840:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015846:	0f b6 d0             	movzx  edx,al
c0015849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001584d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0015852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001585c:	8d 50 01             	lea    edx,[eax+0x1]
c001585f:	88 d1                	mov    cl,dl
c0015861:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015865:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001586b:	0f b6 d0             	movzx  edx,al
c001586e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015872:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0015876:	83 e1 3f             	and    ecx,0x3f
c0015879:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001587d:	90                   	nop
c001587e:	83 c4 0c             	add    esp,0xc
c0015881:	c3                   	ret    

c0015882 <Computer::setBootMessage(char const*)>:
c0015882:	c3                   	ret    
c0015883:	90                   	nop

c0015884 <Computer::detectFeatures()>:
c0015884:	55                   	push   ebp
c0015885:	57                   	push   edi
c0015886:	56                   	push   esi
c0015887:	53                   	push   ebx
c0015888:	83 ec 1c             	sub    esp,0x1c
c001588b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001588f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0015895:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c001589b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00158a1:	e8 53 a9 fe ff       	call   c00001f9 <detectCPUID>
c00158a6:	31 d2                	xor    edx,edx
c00158a8:	85 c0                	test   eax,eax
c00158aa:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158b0:	0f 95 c2             	setne  dl
c00158b3:	d1 e2                	shl    edx,1
c00158b5:	83 e0 fd             	and    eax,0xfffffffd
c00158b8:	09 d0                	or     eax,edx
c00158ba:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158c0:	a8 02                	test   al,0x2
c00158c2:	75 51                	jne    c0015915 <Computer::detectFeatures()+0x91>
c00158c4:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c00158cb:	74 0f                	je     c00158dc <Computer::detectFeatures()+0x58>
c00158cd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158d3:	83 e0 fb             	and    eax,0xfffffffb
c00158d6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158dc:	e8 15 8b 01 00       	call   c002e3f6 <x87Detect>
c00158e1:	83 e0 01             	and    eax,0x1
c00158e4:	c1 e0 04             	shl    eax,0x4
c00158e7:	89 c2                	mov    edx,eax
c00158e9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158ef:	83 e0 ef             	and    eax,0xffffffef
c00158f2:	09 d0                	or     eax,edx
c00158f4:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158fa:	a8 10                	test   al,0x10
c00158fc:	88 c2                	mov    dl,al
c00158fe:	0f 85 33 01 00 00    	jne    c0015a37 <Computer::detectFeatures()+0x1b3>
c0015904:	80 e2 80             	and    dl,0x80
c0015907:	0f 85 4c 01 00 00    	jne    c0015a59 <Computer::detectFeatures()+0x1d5>
c001590d:	83 c4 1c             	add    esp,0x1c
c0015910:	5b                   	pop    ebx
c0015911:	5e                   	pop    esi
c0015912:	5f                   	pop    edi
c0015913:	5d                   	pop    ebp
c0015914:	c3                   	ret    
c0015915:	83 ec 0c             	sub    esp,0xc
c0015918:	6a 20                	push   0x20
c001591a:	e8 23 96 00 00       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001591f:	83 e0 01             	and    eax,0x1
c0015922:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015929:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001592f:	83 e0 f7             	and    eax,0xfffffff7
c0015932:	09 d0                	or     eax,edx
c0015934:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001593a:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015941:	e8 fc 95 00 00       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c0015946:	89 c2                	mov    edx,eax
c0015948:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c001594e:	83 e2 01             	and    edx,0x1
c0015951:	83 e0 fe             	and    eax,0xfffffffe
c0015954:	09 d0                	or     eax,edx
c0015956:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001595c:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0015963:	e8 da 95 00 00       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c0015968:	89 c2                	mov    edx,eax
c001596a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015970:	c1 e2 07             	shl    edx,0x7
c0015973:	83 e0 7f             	and    eax,0x7f
c0015976:	09 d0                	or     eax,edx
c0015978:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c001597e:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0015985:	e8 b8 95 00 00       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001598a:	83 c4 10             	add    esp,0x10
c001598d:	83 e0 01             	and    eax,0x1
c0015990:	c1 e0 05             	shl    eax,0x5
c0015993:	89 c2                	mov    edx,eax
c0015995:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001599b:	83 e0 df             	and    eax,0xffffffdf
c001599e:	09 d0                	or     eax,edx
c00159a0:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00159aa:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159b0:	0f 84 c9 00 00 00    	je     c0015a7f <Computer::detectFeatures()+0x1fb>
c00159b6:	83 e0 fe             	and    eax,0xfffffffe
c00159b9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159bf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159c5:	89 c2                	mov    edx,eax
c00159c7:	83 e2 09             	and    edx,0x9
c00159ca:	83 fa 01             	cmp    edx,0x1
c00159cd:	75 09                	jne    c00159d8 <Computer::detectFeatures()+0x154>
c00159cf:	83 e0 fe             	and    eax,0xfffffffe
c00159d2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159d8:	83 ec 0c             	sub    esp,0xc
c00159db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00159df:	50                   	push   eax
c00159e0:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c00159e4:	55                   	push   ebp
c00159e5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00159e9:	57                   	push   edi
c00159ea:	8d 74 24 18          	lea    esi,[esp+0x18]
c00159ee:	56                   	push   esi
c00159ef:	68 00 00 00 80       	push   0x80000000
c00159f4:	e8 c5 94 00 00       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00159f9:	83 c4 20             	add    esp,0x20
c00159fc:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0015a03:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015a07:	0f 86 b7 fe ff ff    	jbe    c00158c4 <Computer::detectFeatures()+0x40>
c0015a0d:	83 ec 0c             	sub    esp,0xc
c0015a10:	50                   	push   eax
c0015a11:	55                   	push   ebp
c0015a12:	57                   	push   edi
c0015a13:	56                   	push   esi
c0015a14:	68 01 00 00 80       	push   0x80000001
c0015a19:	e8 a0 94 00 00       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015a1e:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015a24:	83 c4 20             	add    esp,0x20
c0015a27:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015a2c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015a32:	e9 8d fe ff ff       	jmp    c00158c4 <Computer::detectFeatures()+0x40>
c0015a37:	e8 74 89 01 00       	call   c002e3b0 <sseDetect>
c0015a3c:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0015a42:	83 e2 7f             	and    edx,0x7f
c0015a45:	c1 e0 07             	shl    eax,0x7
c0015a48:	09 c2                	or     edx,eax
c0015a4a:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015a50:	80 e2 80             	and    dl,0x80
c0015a53:	0f 84 b4 fe ff ff    	je     c001590d <Computer::detectFeatures()+0x89>
c0015a59:	e8 e2 85 01 00       	call   c002e040 <avxDetect>
c0015a5e:	83 e0 01             	and    eax,0x1
c0015a61:	c1 e0 05             	shl    eax,0x5
c0015a64:	89 c2                	mov    edx,eax
c0015a66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015a6c:	83 e0 df             	and    eax,0xffffffdf
c0015a6f:	09 d0                	or     eax,edx
c0015a71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0015a77:	83 c4 1c             	add    esp,0x1c
c0015a7a:	5b                   	pop    ebx
c0015a7b:	5e                   	pop    esi
c0015a7c:	5f                   	pop    edi
c0015a7d:	5d                   	pop    ebp
c0015a7e:	c3                   	ret    
c0015a7f:	83 ec 0c             	sub    esp,0xc
c0015a82:	68 00 02 00 00       	push   0x200
c0015a87:	e8 b6 94 00 00       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c0015a8c:	83 c4 10             	add    esp,0x10
c0015a8f:	89 c2                	mov    edx,eax
c0015a91:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015a97:	83 e2 01             	and    edx,0x1
c0015a9a:	83 e0 fe             	and    eax,0xfffffffe
c0015a9d:	09 d0                	or     eax,edx
c0015a9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015aa5:	e9 15 ff ff ff       	jmp    c00159bf <Computer::detectFeatures()+0x13b>

c0015aaa <Computer::displayFeatures()>:
c0015aaa:	c3                   	ret    
c0015aab:	90                   	nop

c0015aac <Computer::rdmsr(unsigned int)>:
c0015aac:	83 ec 0c             	sub    esp,0xc
c0015aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ab3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015aba:	74 0a                	je     c0015ac6 <Computer::rdmsr(unsigned int)+0x1a>
c0015abc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ac0:	0f 32                	rdmsr  
c0015ac2:	83 c4 0c             	add    esp,0xc
c0015ac5:	c3                   	ret    
c0015ac6:	83 ec 0c             	sub    esp,0xc
c0015ac9:	68 c5 10 03 c0       	push   0xc00310c5
c0015ace:	e8 97 a7 00 00       	call   c002026a <KePanic(char const*)>
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	eb e4                	jmp    c0015abc <Computer::rdmsr(unsigned int)+0x10>

c0015ad8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015ad8:	57                   	push   edi
c0015ad9:	56                   	push   esi
c0015ada:	83 ec 04             	sub    esp,0x4
c0015add:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015ae5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015ae9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015af0:	74 10                	je     c0015b02 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015af2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015af6:	89 f0                	mov    eax,esi
c0015af8:	89 fa                	mov    edx,edi
c0015afa:	0f 30                	wrmsr  
c0015afc:	83 c4 04             	add    esp,0x4
c0015aff:	5e                   	pop    esi
c0015b00:	5f                   	pop    edi
c0015b01:	c3                   	ret    
c0015b02:	83 ec 0c             	sub    esp,0xc
c0015b05:	68 cb 10 03 c0       	push   0xc00310cb
c0015b0a:	e8 5b a7 00 00       	call   c002026a <KePanic(char const*)>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	eb de                	jmp    c0015af2 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015b14 <Computer::shutdown()>:
c0015b14:	83 ec 0c             	sub    esp,0xc
c0015b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b1d:	6a 00                	push   0x0
c0015b1f:	6a 00                	push   0x0
c0015b21:	6a 00                	push   0x0
c0015b23:	50                   	push   eax
c0015b24:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015b27:	83 c4 1c             	add    esp,0x1c
c0015b2a:	c3                   	ret    
c0015b2b:	90                   	nop

c0015b2c <Computer::restart()>:
c0015b2c:	83 ec 0c             	sub    esp,0xc
c0015b2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b33:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b35:	6a 00                	push   0x0
c0015b37:	6a 00                	push   0x0
c0015b39:	6a 01                	push   0x1
c0015b3b:	50                   	push   eax
c0015b3c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015b3f:	83 c4 1c             	add    esp,0x1c
c0015b42:	c3                   	ret    
c0015b43:	90                   	nop

c0015b44 <Computer::sleep()>:
c0015b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b48:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015b4e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015b52:	e9 bd 8e 00 00       	jmp    c001ea14 <ACPI::sleep()>
c0015b57:	90                   	nop

c0015b58 <Computer::nmiEnabled()>:
c0015b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b5c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015b62:	c3                   	ret    
c0015b63:	90                   	nop

c0015b64 <Computer::readCMOS(unsigned char)>:
c0015b64:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b68:	31 d2                	xor    edx,edx
c0015b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b6e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015b75:	75 02                	jne    c0015b79 <Computer::readCMOS(unsigned char)+0x15>
c0015b77:	b2 80                	mov    dl,0x80
c0015b79:	09 d0                	or     eax,edx
c0015b7b:	e6 70                	out    0x70,al
c0015b7d:	e4 71                	in     al,0x71
c0015b7f:	c3                   	ret    

c0015b80 <Computer::enableNMI(bool)>:
c0015b80:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b88:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015b8e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015b96:	eb cc                	jmp    c0015b64 <Computer::readCMOS(unsigned char)>

c0015b98 <Computer::open(int, int, void*)>:
c0015b98:	56                   	push   esi
c0015b99:	53                   	push   ebx
c0015b9a:	83 ec 10             	sub    esp,0x10
c0015b9d:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015ba4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015ba8:	68 d1 10 03 c0       	push   0xc00310d1
c0015bad:	0f 94 05 a0 3c 03 c0 	sete   BYTE PTR ds:0xc0033ca0
c0015bb4:	e8 50 9f 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015bb9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015bc0:	e8 d6 08 00 00       	call   c001649b <malloc>
c0015bc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bc8:	89 c6                	mov    esi,eax
c0015bca:	e8 b9 89 00 00       	call   c001e588 <ACPI::ACPI()>
c0015bcf:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015bd5:	58                   	pop    eax
c0015bd6:	5a                   	pop    edx
c0015bd7:	56                   	push   esi
c0015bd8:	53                   	push   ebx
c0015bd9:	e8 9a 57 00 00       	call   c001b378 <Device::addChild(Device*)>
c0015bde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015be1:	e8 9e fc ff ff       	call   c0015884 <Computer::detectFeatures()>
c0015be6:	59                   	pop    ecx
c0015be7:	5e                   	pop    esi
c0015be8:	6a 01                	push   0x1
c0015bea:	53                   	push   ebx
c0015beb:	e8 90 ff ff ff       	call   c0015b80 <Computer::enableNMI(bool)>
c0015bf0:	c7 04 24 e9 10 03 c0 	mov    DWORD PTR [esp],0xc00310e9
c0015bf7:	e8 0d 9f 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015bfc:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015c03:	e8 93 08 00 00       	call   c001649b <malloc>
c0015c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c0b:	89 c6                	mov    esi,eax
c0015c0d:	e8 e8 93 00 00       	call   c001effa <CPU::CPU()>
c0015c12:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015c18:	58                   	pop    eax
c0015c19:	5a                   	pop    edx
c0015c1a:	56                   	push   esi
c0015c1b:	53                   	push   ebx
c0015c1c:	e8 57 57 00 00       	call   c001b378 <Device::addChild(Device*)>
c0015c21:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015c2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c2d:	51                   	push   ecx
c0015c2e:	6a 00                	push   0x0
c0015c30:	6a 00                	push   0x0
c0015c32:	50                   	push   eax
c0015c33:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015c36:	83 c4 14             	add    esp,0x14
c0015c39:	68 98 11 03 c0       	push   0xc0031198
c0015c3e:	e8 c6 9e 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015c43:	e8 ce 12 01 00       	call   c0026f16 <HalInitialiseCoprocessor()>
c0015c48:	c7 04 24 03 11 03 c0 	mov    DWORD PTR [esp],0xc0031103
c0015c4f:	e8 b5 9e 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c0015c54:	c7 04 24 90 56 01 c0 	mov    DWORD PTR [esp],0xc0015690
c0015c5b:	e8 48 f5 00 00       	call   c00251a8 <setupMultitasking(void (*)())>
c0015c60:	83 c4 14             	add    esp,0x14
c0015c63:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c68:	5b                   	pop    ebx
c0015c69:	5e                   	pop    esi
c0015c6a:	c3                   	ret    
c0015c6b:	90                   	nop

c0015c6c <Computer::disableNMI()>:
c0015c6c:	6a 00                	push   0x0
c0015c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c72:	50                   	push   eax
c0015c73:	e8 08 ff ff ff       	call   c0015b80 <Computer::enableNMI(bool)>
c0015c78:	5a                   	pop    edx
c0015c79:	59                   	pop    ecx
c0015c7a:	c3                   	ret    
c0015c7b:	90                   	nop

c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015c7c:	53                   	push   ebx
c0015c7d:	b2 80                	mov    dl,0x80
c0015c7f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015c83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c87:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c8b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015c92:	74 02                	je     c0015c96 <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015c94:	31 d2                	xor    edx,edx
c0015c96:	09 d0                	or     eax,edx
c0015c98:	e6 70                	out    0x70,al
c0015c9a:	88 c8                	mov    al,cl
c0015c9c:	e6 71                	out    0x71,al
c0015c9e:	5b                   	pop    ebx
c0015c9f:	c3                   	ret    

c0015ca0 <Computer::handleNMI()>:
c0015ca0:	56                   	push   esi
c0015ca1:	53                   	push   ebx
c0015ca2:	83 ec 10             	sub    esp,0x10
c0015ca5:	e4 92                	in     al,0x92
c0015ca7:	89 c6                	mov    esi,eax
c0015ca9:	e4 61                	in     al,0x61
c0015cab:	68 1e 11 03 c0       	push   0xc003111e
c0015cb0:	88 c3                	mov    bl,al
c0015cb2:	e8 2b 36 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0015cb7:	83 c4 10             	add    esp,0x10
c0015cba:	83 e6 10             	and    esi,0x10
c0015cbd:	75 10                	jne    c0015ccf <Computer::handleNMI()+0x2f>
c0015cbf:	f6 c3 40             	test   bl,0x40
c0015cc2:	75 20                	jne    c0015ce4 <Computer::handleNMI()+0x44>
c0015cc4:	80 e3 80             	and    bl,0x80
c0015cc7:	75 30                	jne    c0015cf9 <Computer::handleNMI()+0x59>
c0015cc9:	83 c4 04             	add    esp,0x4
c0015ccc:	5b                   	pop    ebx
c0015ccd:	5e                   	pop    esi
c0015cce:	c3                   	ret    
c0015ccf:	83 ec 0c             	sub    esp,0xc
c0015cd2:	68 2f 11 03 c0       	push   0xc003112f
c0015cd7:	e8 8e a5 00 00       	call   c002026a <KePanic(char const*)>
c0015cdc:	83 c4 10             	add    esp,0x10
c0015cdf:	f6 c3 40             	test   bl,0x40
c0015ce2:	74 e0                	je     c0015cc4 <Computer::handleNMI()+0x24>
c0015ce4:	83 ec 0c             	sub    esp,0xc
c0015ce7:	68 3c 11 03 c0       	push   0xc003113c
c0015cec:	e8 79 a5 00 00       	call   c002026a <KePanic(char const*)>
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	80 e3 80             	and    bl,0x80
c0015cf7:	74 d0                	je     c0015cc9 <Computer::handleNMI()+0x29>
c0015cf9:	c7 44 24 10 46 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031146
c0015d01:	83 c4 04             	add    esp,0x4
c0015d04:	5b                   	pop    ebx
c0015d05:	5e                   	pop    esi
c0015d06:	e9 5f a5 00 00       	jmp    c002026a <KePanic(char const*)>
c0015d0b:	90                   	nop

c0015d0c <GDTEntry::setBase(unsigned int)>:
c0015d0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d10:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015d14:	89 c1                	mov    ecx,eax
c0015d16:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015d1a:	c1 e9 10             	shr    ecx,0x10
c0015d1d:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015d20:	c1 e8 18             	shr    eax,0x18
c0015d23:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015d26:	c3                   	ret    
c0015d27:	90                   	nop

c0015d28 <GDTEntry::setLimit(unsigned int)>:
c0015d28:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015d2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015d30:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015d33:	66 89 01             	mov    WORD PTR [ecx],ax
c0015d36:	c1 e8 10             	shr    eax,0x10
c0015d39:	83 e0 0f             	and    eax,0xf
c0015d3c:	83 e2 f0             	and    edx,0xfffffff0
c0015d3f:	09 d0                	or     eax,edx
c0015d41:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015d44:	c3                   	ret    
c0015d45:	90                   	nop

c0015d46 <GDT::GDT()>:
c0015d46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015d5a:	90                   	nop
c0015d5b:	c3                   	ret    

c0015d5c <GDT::addEntry(GDTEntry)>:
c0015d5c:	53                   	push   ebx
c0015d5d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015d69:	8b 02                	mov    eax,DWORD PTR [edx]
c0015d6b:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015d6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d72:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015d76:	c1 e0 03             	shl    eax,0x3
c0015d79:	89 0a                	mov    DWORD PTR [edx],ecx
c0015d7b:	5b                   	pop    ebx
c0015d7c:	c3                   	ret    
c0015d7d:	90                   	nop

c0015d7e <GDT::getNumberOfEntries()>:
c0015d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d84:	c3                   	ret    
c0015d85:	90                   	nop

c0015d86 <GDT::flush()>:
c0015d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0015d8c:	83 c0 04             	add    eax,0x4
c0015d8f:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015d94:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015d9b:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015da2:	e9 b3 a5 fe ff       	jmp    c000035a <loadGDT>
c0015da7:	90                   	nop

c0015da8 <GDT::setup()>:
c0015da8:	57                   	push   edi
c0015da9:	56                   	push   esi
c0015daa:	53                   	push   ebx
c0015dab:	83 ec 30             	sub    esp,0x30
c0015dae:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015db2:	6a 00                	push   0x0
c0015db4:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015db8:	56                   	push   esi
c0015db9:	e8 4e ff ff ff       	call   c0015d0c <GDTEntry::setBase(unsigned int)>
c0015dbe:	6a 00                	push   0x0
c0015dc0:	56                   	push   esi
c0015dc1:	e8 62 ff ff ff       	call   c0015d28 <GDTEntry::setLimit(unsigned int)>
c0015dc6:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015dce:	6a 00                	push   0x0
c0015dd0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015dd4:	56                   	push   esi
c0015dd5:	e8 32 ff ff ff       	call   c0015d0c <GDTEntry::setBase(unsigned int)>
c0015dda:	68 ff ff ff 00       	push   0xffffff
c0015ddf:	56                   	push   esi
c0015de0:	e8 43 ff ff ff       	call   c0015d28 <GDTEntry::setLimit(unsigned int)>
c0015de5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015de9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015ded:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015df2:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015df6:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015dfb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015dff:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015e03:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015e07:	89 f8                	mov    eax,edi
c0015e09:	89 fa                	mov    edx,edi
c0015e0b:	80 e4 f7             	and    ah,0xf7
c0015e0e:	80 ce 60             	or     dh,0x60
c0015e11:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015e15:	89 c7                	mov    edi,eax
c0015e17:	80 cc 60             	or     ah,0x60
c0015e1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015e1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015e22:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015e26:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015e2a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015e2e:	83 c4 20             	add    esp,0x20
c0015e31:	6a 00                	push   0x0
c0015e33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e37:	50                   	push   eax
c0015e38:	e8 cf fe ff ff       	call   c0015d0c <GDTEntry::setBase(unsigned int)>
c0015e3d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015e41:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015e45:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015e49:	83 e0 3f             	and    eax,0x3f
c0015e4c:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015e50:	6a 00                	push   0x0
c0015e52:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015e56:	50                   	push   eax
c0015e57:	e8 b0 fe ff ff       	call   c0015d0c <GDTEntry::setBase(unsigned int)>
c0015e5c:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015e60:	83 e0 3f             	and    eax,0x3f
c0015e63:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015e67:	83 c4 0c             	add    esp,0xc
c0015e6a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015e72:	53                   	push   ebx
c0015e73:	e8 e4 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015e78:	83 c4 0c             	add    esp,0xc
c0015e7b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e7f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e83:	53                   	push   ebx
c0015e84:	e8 d3 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015e89:	83 c4 0c             	add    esp,0xc
c0015e8c:	57                   	push   edi
c0015e8d:	56                   	push   esi
c0015e8e:	53                   	push   ebx
c0015e8f:	e8 c8 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015e94:	83 c4 0c             	add    esp,0xc
c0015e97:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015e9b:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015e9f:	53                   	push   ebx
c0015ea0:	e8 b7 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015ea5:	83 c4 0c             	add    esp,0xc
c0015ea8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015eac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015eb0:	53                   	push   ebx
c0015eb1:	e8 a6 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015eb6:	83 c4 0c             	add    esp,0xc
c0015eb9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ebd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015ec1:	53                   	push   ebx
c0015ec2:	e8 95 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015ec7:	83 c4 0c             	add    esp,0xc
c0015eca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ece:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015ed2:	53                   	push   ebx
c0015ed3:	e8 84 fe ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0015ed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015edb:	e8 a6 fe ff ff       	call   c0015d86 <GDT::flush()>
c0015ee0:	83 c4 40             	add    esp,0x40
c0015ee3:	5b                   	pop    ebx
c0015ee4:	5e                   	pop    esi
c0015ee5:	5f                   	pop    edi
c0015ee6:	c3                   	ret    

c0015ee7 <idleFunction(void*)>:
c0015ee7:	83 ec 0c             	sub    esp,0xc
c0015eea:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015eef:	48                   	dec    eax
c0015ef0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015ef5:	75 01                	jne    c0015ef8 <idleFunction(void*)+0x11>
c0015ef7:	fb                   	sti    
c0015ef8:	e8 e5 0c 01 00       	call   c0026be2 <HalSystemIdle()>
c0015efd:	e8 b0 8a 01 00       	call   c002e9b2 <idleCommon()>
c0015f02:	eb f4                	jmp    c0015ef8 <idleFunction(void*)+0x11>

c0015f04 <IDTEntry::IDTEntry(bool)>:
c0015f04:	53                   	push   ebx
c0015f05:	83 ec 04             	sub    esp,0x4
c0015f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f0c:	88 04 24             	mov    BYTE PTR [esp],al
c0015f0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f13:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015f19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f1d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015f21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f25:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f28:	83 e2 f0             	and    edx,0xfffffff0
c0015f2b:	83 ca 0e             	or     edx,0xe
c0015f2e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f35:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f38:	83 e2 ef             	and    edx,0xffffffef
c0015f3b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f3e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015f42:	85 c0                	test   eax,eax
c0015f44:	74 06                	je     c0015f4c <IDTEntry::IDTEntry(bool)+0x48>
c0015f46:	b2 03                	mov    dl,0x3
c0015f48:	eb 06                	jmp    c0015f50 <IDTEntry::IDTEntry(bool)+0x4c>
c0015f4a:	66 90                	xchg   ax,ax
c0015f4c:	b2 00                	mov    dl,0x0
c0015f4e:	66 90                	xchg   ax,ax
c0015f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f54:	83 e2 03             	and    edx,0x3
c0015f57:	89 d3                	mov    ebx,edx
c0015f59:	c1 e3 05             	shl    ebx,0x5
c0015f5c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f5f:	83 e2 9f             	and    edx,0xffffff9f
c0015f62:	88 d1                	mov    cl,dl
c0015f64:	88 da                	mov    dl,bl
c0015f66:	09 ca                	or     edx,ecx
c0015f68:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f6f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015f72:	83 ca 80             	or     edx,0xffffff80
c0015f75:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015f78:	90                   	nop
c0015f79:	83 c4 04             	add    esp,0x4
c0015f7c:	5b                   	pop    ebx
c0015f7d:	c3                   	ret    

c0015f7e <IDTEntry::setOffset(unsigned int)>:
c0015f7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f86:	66 89 02             	mov    WORD PTR [edx],ax
c0015f89:	c1 e8 10             	shr    eax,0x10
c0015f8c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015f90:	c3                   	ret    
c0015f91:	90                   	nop
c0015f92:	66 90                	xchg   ax,ax

c0015f94 <IDT::IDT()>:
c0015f94:	90                   	nop
c0015f95:	c3                   	ret    

c0015f96 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f9a:	83 c0 30             	add    eax,0x30
c0015f9d:	c3                   	ret    

c0015f9e <IDT::addEntry(IDTEntry, int)>:
c0015f9e:	53                   	push   ebx
c0015f9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fa3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015fa7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015fab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015faf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015fb2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015fb6:	5b                   	pop    ebx
c0015fb7:	c3                   	ret    

c0015fb8 <IDT::addEntry(int, void (*)(), bool)>:
c0015fb8:	53                   	push   ebx
c0015fb9:	83 ec 10             	sub    esp,0x10
c0015fbc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015fc1:	50                   	push   eax
c0015fc2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015fc6:	53                   	push   ebx
c0015fc7:	e8 38 ff ff ff       	call   c0015f04 <IDTEntry::IDTEntry(bool)>
c0015fcc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015fd0:	53                   	push   ebx
c0015fd1:	e8 a8 ff ff ff       	call   c0015f7e <IDTEntry::setOffset(unsigned int)>
c0015fd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fda:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fde:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fe2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015fe6:	e8 b3 ff ff ff       	call   c0015f9e <IDT::addEntry(IDTEntry, int)>
c0015feb:	83 c4 30             	add    esp,0x30
c0015fee:	5b                   	pop    ebx
c0015fef:	c3                   	ret    

c0015ff0 <IDT::flush()>:
c0015ff0:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015ff9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ffd:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0016002:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0016009:	c3                   	ret    

c001600a <IDT::setup()>:
c001600a:	57                   	push   edi
c001600b:	56                   	push   esi
c001600c:	53                   	push   ebx
c001600d:	83 ec 10             	sub    esp,0x10
c0016010:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016014:	6a 00                	push   0x0
c0016016:	68 b0 e0 02 c0       	push   0xc002e0b0
c001601b:	6a 00                	push   0x0
c001601d:	53                   	push   ebx
c001601e:	e8 95 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016023:	6a 00                	push   0x0
c0016025:	68 c0 e0 02 c0       	push   0xc002e0c0
c001602a:	6a 01                	push   0x1
c001602c:	53                   	push   ebx
c001602d:	e8 86 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016032:	83 c4 20             	add    esp,0x20
c0016035:	6a 00                	push   0x0
c0016037:	68 ca e0 02 c0       	push   0xc002e0ca
c001603c:	6a 02                	push   0x2
c001603e:	53                   	push   ebx
c001603f:	e8 74 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016044:	6a 00                	push   0x0
c0016046:	68 d4 e0 02 c0       	push   0xc002e0d4
c001604b:	6a 03                	push   0x3
c001604d:	53                   	push   ebx
c001604e:	e8 65 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016053:	83 c4 20             	add    esp,0x20
c0016056:	6a 00                	push   0x0
c0016058:	68 de e0 02 c0       	push   0xc002e0de
c001605d:	6a 04                	push   0x4
c001605f:	53                   	push   ebx
c0016060:	e8 53 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016065:	6a 00                	push   0x0
c0016067:	68 e8 e0 02 c0       	push   0xc002e0e8
c001606c:	6a 05                	push   0x5
c001606e:	53                   	push   ebx
c001606f:	e8 44 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016074:	83 c4 20             	add    esp,0x20
c0016077:	6a 00                	push   0x0
c0016079:	68 f2 e0 02 c0       	push   0xc002e0f2
c001607e:	6a 06                	push   0x6
c0016080:	53                   	push   ebx
c0016081:	e8 32 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016086:	6a 00                	push   0x0
c0016088:	68 fc e0 02 c0       	push   0xc002e0fc
c001608d:	6a 07                	push   0x7
c001608f:	53                   	push   ebx
c0016090:	e8 23 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016095:	83 c4 20             	add    esp,0x20
c0016098:	6a 00                	push   0x0
c001609a:	68 06 e1 02 c0       	push   0xc002e106
c001609f:	6a 08                	push   0x8
c00160a1:	53                   	push   ebx
c00160a2:	e8 11 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00160a7:	6a 00                	push   0x0
c00160a9:	68 0e e1 02 c0       	push   0xc002e10e
c00160ae:	6a 09                	push   0x9
c00160b0:	53                   	push   ebx
c00160b1:	e8 02 ff ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00160b6:	83 c4 20             	add    esp,0x20
c00160b9:	6a 00                	push   0x0
c00160bb:	68 18 e1 02 c0       	push   0xc002e118
c00160c0:	6a 0a                	push   0xa
c00160c2:	53                   	push   ebx
c00160c3:	e8 f0 fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00160c8:	6a 00                	push   0x0
c00160ca:	68 20 e1 02 c0       	push   0xc002e120
c00160cf:	6a 0b                	push   0xb
c00160d1:	53                   	push   ebx
c00160d2:	e8 e1 fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00160d7:	83 c4 20             	add    esp,0x20
c00160da:	6a 00                	push   0x0
c00160dc:	68 28 e1 02 c0       	push   0xc002e128
c00160e1:	6a 0c                	push   0xc
c00160e3:	53                   	push   ebx
c00160e4:	e8 cf fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00160e9:	6a 00                	push   0x0
c00160eb:	68 30 e1 02 c0       	push   0xc002e130
c00160f0:	6a 0d                	push   0xd
c00160f2:	53                   	push   ebx
c00160f3:	e8 c0 fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00160f8:	83 c4 20             	add    esp,0x20
c00160fb:	6a 00                	push   0x0
c00160fd:	68 4a e1 02 c0       	push   0xc002e14a
c0016102:	6a 0e                	push   0xe
c0016104:	53                   	push   ebx
c0016105:	e8 ae fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001610a:	6a 00                	push   0x0
c001610c:	68 52 e1 02 c0       	push   0xc002e152
c0016111:	6a 0f                	push   0xf
c0016113:	53                   	push   ebx
c0016114:	e8 9f fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016119:	83 c4 20             	add    esp,0x20
c001611c:	6a 00                	push   0x0
c001611e:	68 5c e1 02 c0       	push   0xc002e15c
c0016123:	6a 10                	push   0x10
c0016125:	53                   	push   ebx
c0016126:	e8 8d fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001612b:	6a 00                	push   0x0
c001612d:	68 66 e1 02 c0       	push   0xc002e166
c0016132:	6a 11                	push   0x11
c0016134:	53                   	push   ebx
c0016135:	e8 7e fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001613a:	83 c4 20             	add    esp,0x20
c001613d:	6a 00                	push   0x0
c001613f:	68 70 e1 02 c0       	push   0xc002e170
c0016144:	6a 12                	push   0x12
c0016146:	53                   	push   ebx
c0016147:	e8 6c fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001614c:	6a 01                	push   0x1
c001614e:	68 0a e2 02 c0       	push   0xc002e20a
c0016153:	6a 60                	push   0x60
c0016155:	53                   	push   ebx
c0016156:	e8 5d fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001615b:	83 c4 20             	add    esp,0x20
c001615e:	6a 00                	push   0x0
c0016160:	68 11 e2 02 c0       	push   0xc002e211
c0016165:	6a 20                	push   0x20
c0016167:	53                   	push   ebx
c0016168:	e8 4b fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001616d:	6a 00                	push   0x0
c001616f:	68 fc e1 02 c0       	push   0xc002e1fc
c0016174:	6a 21                	push   0x21
c0016176:	53                   	push   ebx
c0016177:	e8 3c fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001617c:	83 c4 20             	add    esp,0x20
c001617f:	6a 00                	push   0x0
c0016181:	68 03 e2 02 c0       	push   0xc002e203
c0016186:	6a 22                	push   0x22
c0016188:	53                   	push   ebx
c0016189:	e8 2a fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001618e:	6a 00                	push   0x0
c0016190:	68 7a e1 02 c0       	push   0xc002e17a
c0016195:	6a 23                	push   0x23
c0016197:	53                   	push   ebx
c0016198:	e8 1b fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c001619d:	83 c4 20             	add    esp,0x20
c00161a0:	6a 00                	push   0x0
c00161a2:	68 84 e1 02 c0       	push   0xc002e184
c00161a7:	6a 24                	push   0x24
c00161a9:	53                   	push   ebx
c00161aa:	e8 09 fe ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00161af:	6a 00                	push   0x0
c00161b1:	68 8e e1 02 c0       	push   0xc002e18e
c00161b6:	6a 25                	push   0x25
c00161b8:	53                   	push   ebx
c00161b9:	e8 fa fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00161be:	83 c4 20             	add    esp,0x20
c00161c1:	6a 00                	push   0x0
c00161c3:	68 98 e1 02 c0       	push   0xc002e198
c00161c8:	6a 26                	push   0x26
c00161ca:	53                   	push   ebx
c00161cb:	e8 e8 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00161d0:	6a 00                	push   0x0
c00161d2:	68 a2 e1 02 c0       	push   0xc002e1a2
c00161d7:	6a 27                	push   0x27
c00161d9:	53                   	push   ebx
c00161da:	e8 d9 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00161df:	83 c4 20             	add    esp,0x20
c00161e2:	6a 00                	push   0x0
c00161e4:	68 ac e1 02 c0       	push   0xc002e1ac
c00161e9:	6a 28                	push   0x28
c00161eb:	53                   	push   ebx
c00161ec:	e8 c7 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00161f1:	6a 00                	push   0x0
c00161f3:	68 b6 e1 02 c0       	push   0xc002e1b6
c00161f8:	6a 29                	push   0x29
c00161fa:	53                   	push   ebx
c00161fb:	e8 b8 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016200:	83 c4 20             	add    esp,0x20
c0016203:	6a 00                	push   0x0
c0016205:	68 c0 e1 02 c0       	push   0xc002e1c0
c001620a:	6a 2a                	push   0x2a
c001620c:	53                   	push   ebx
c001620d:	e8 a6 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016212:	6a 00                	push   0x0
c0016214:	68 ca e1 02 c0       	push   0xc002e1ca
c0016219:	6a 2b                	push   0x2b
c001621b:	53                   	push   ebx
c001621c:	e8 97 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016221:	83 c4 20             	add    esp,0x20
c0016224:	6a 00                	push   0x0
c0016226:	68 d4 e1 02 c0       	push   0xc002e1d4
c001622b:	6a 2c                	push   0x2c
c001622d:	53                   	push   ebx
c001622e:	e8 85 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016233:	6a 00                	push   0x0
c0016235:	68 de e1 02 c0       	push   0xc002e1de
c001623a:	6a 2d                	push   0x2d
c001623c:	53                   	push   ebx
c001623d:	e8 76 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016242:	83 c4 20             	add    esp,0x20
c0016245:	6a 00                	push   0x0
c0016247:	68 e8 e1 02 c0       	push   0xc002e1e8
c001624c:	6a 2e                	push   0x2e
c001624e:	53                   	push   ebx
c001624f:	e8 64 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016254:	6a 00                	push   0x0
c0016256:	68 f2 e1 02 c0       	push   0xc002e1f2
c001625b:	6a 2f                	push   0x2f
c001625d:	53                   	push   ebx
c001625e:	e8 55 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016263:	83 c4 20             	add    esp,0x20
c0016266:	6a 00                	push   0x0
c0016268:	68 4c e3 02 c0       	push   0xc002e34c
c001626d:	6a 30                	push   0x30
c001626f:	53                   	push   ebx
c0016270:	e8 43 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016275:	6a 00                	push   0x0
c0016277:	68 56 e3 02 c0       	push   0xc002e356
c001627c:	6a 31                	push   0x31
c001627e:	53                   	push   ebx
c001627f:	e8 34 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016284:	83 c4 20             	add    esp,0x20
c0016287:	6a 00                	push   0x0
c0016289:	68 60 e3 02 c0       	push   0xc002e360
c001628e:	6a 32                	push   0x32
c0016290:	53                   	push   ebx
c0016291:	e8 22 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c0016296:	6a 00                	push   0x0
c0016298:	68 6a e3 02 c0       	push   0xc002e36a
c001629d:	6a 33                	push   0x33
c001629f:	53                   	push   ebx
c00162a0:	e8 13 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00162a5:	83 c4 20             	add    esp,0x20
c00162a8:	6a 00                	push   0x0
c00162aa:	68 74 e3 02 c0       	push   0xc002e374
c00162af:	6a 34                	push   0x34
c00162b1:	53                   	push   ebx
c00162b2:	e8 01 fd ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00162b7:	6a 00                	push   0x0
c00162b9:	68 7e e3 02 c0       	push   0xc002e37e
c00162be:	6a 35                	push   0x35
c00162c0:	53                   	push   ebx
c00162c1:	e8 f2 fc ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00162c6:	83 c4 20             	add    esp,0x20
c00162c9:	6a 00                	push   0x0
c00162cb:	68 88 e3 02 c0       	push   0xc002e388
c00162d0:	6a 36                	push   0x36
c00162d2:	53                   	push   ebx
c00162d3:	e8 e0 fc ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00162d8:	6a 00                	push   0x0
c00162da:	68 92 e3 02 c0       	push   0xc002e392
c00162df:	6a 37                	push   0x37
c00162e1:	53                   	push   ebx
c00162e2:	e8 d1 fc ff ff       	call   c0015fb8 <IDT::addEntry(int, void (*)(), bool)>
c00162e7:	83 c4 1c             	add    esp,0x1c
c00162ea:	6a 03                	push   0x3
c00162ec:	6a 02                	push   0x2
c00162ee:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00162f4:	e8 e5 24 00 00       	call   c00187de <VAS::allocatePages(int, int)>
c00162f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016300:	89 c6                	mov    esi,eax
c0016302:	e8 94 01 00 00       	call   c001649b <malloc>
c0016307:	81 c6 00 20 00 00    	add    esi,0x2000
c001630d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016310:	89 c7                	mov    edi,eax
c0016312:	e8 ed 15 00 00       	call   c0017904 <TSS::TSS()>
c0016317:	83 c4 0c             	add    esp,0xc
c001631a:	68 06 e1 02 c0       	push   0xc002e106
c001631f:	56                   	push   esi
c0016320:	57                   	push   edi
c0016321:	e8 22 16 00 00       	call   c0017948 <TSS::setup(unsigned long, unsigned long)>
c0016326:	89 c6                	mov    esi,eax
c0016328:	58                   	pop    eax
c0016329:	5a                   	pop    edx
c001632a:	6a 00                	push   0x0
c001632c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016330:	50                   	push   eax
c0016331:	e8 ce fb ff ff       	call   c0015f04 <IDTEntry::IDTEntry(bool)>
c0016336:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001633a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001633f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0016346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001634a:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016350:	80 ce 05             	or     dh,0x5
c0016353:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016357:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c001635a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001635e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016361:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016364:	e8 87 fc ff ff       	call   c0015ff0 <IDT::flush()>
c0016369:	83 c4 20             	add    esp,0x20
c001636c:	5b                   	pop    ebx
c001636d:	5e                   	pop    esi
c001636e:	5f                   	pop    edi
c001636f:	c3                   	ret    

c0016370 <sbrk>:
c0016370:	55                   	push   ebp
c0016371:	57                   	push   edi
c0016372:	56                   	push   esi
c0016373:	53                   	push   ebx
c0016374:	83 ec 1c             	sub    esp,0x1c
c0016377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001637b:	85 c0                	test   eax,eax
c001637d:	74 66                	je     c00163e5 <sbrk+0x75>
c001637f:	78 6b                	js     c00163ec <sbrk+0x7c>
c0016381:	8b 15 84 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c84
c0016387:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001638b:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c0016391:	05 ff 0f 00 00       	add    eax,0xfff
c0016396:	0f 49 e8             	cmovns ebp,eax
c0016399:	c1 fd 0c             	sar    ebp,0xc
c001639c:	bb 00 00 00 00       	mov    ebx,0x0
c00163a1:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00163a7:	8b 3d 84 3c 03 c0    	mov    edi,DWORD PTR ds:0xc0033c84
c00163ad:	e8 08 04 00 00       	call   c00167ba <Phys::allocatePage()>
c00163b2:	68 01 04 00 00       	push   0x401
c00163b7:	57                   	push   edi
c00163b8:	50                   	push   eax
c00163b9:	56                   	push   esi
c00163ba:	e8 17 23 00 00       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00163bf:	81 05 84 3c 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033c84,0x1000
c00163c9:	83 c3 01             	add    ebx,0x1
c00163cc:	83 c4 10             	add    esp,0x10
c00163cf:	39 dd                	cmp    ebp,ebx
c00163d1:	75 ce                	jne    c00163a1 <sbrk+0x31>
c00163d3:	0f 20 d8             	mov    eax,cr3
c00163d6:	0f 22 d8             	mov    cr3,eax
c00163d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163dd:	83 c4 1c             	add    esp,0x1c
c00163e0:	5b                   	pop    ebx
c00163e1:	5e                   	pop    esi
c00163e2:	5f                   	pop    edi
c00163e3:	5d                   	pop    ebp
c00163e4:	c3                   	ret    
c00163e5:	a1 84 3c 03 c0       	mov    eax,ds:0xc0033c84
c00163ea:	eb f1                	jmp    c00163dd <sbrk+0x6d>
c00163ec:	83 ec 08             	sub    esp,0x8
c00163ef:	50                   	push   eax
c00163f0:	68 e8 11 03 c0       	push   0xc00311e8
c00163f5:	e8 e8 2e 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00163fa:	83 c4 10             	add    esp,0x10
c00163fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016402:	eb d9                	jmp    c00163dd <sbrk+0x6d>

c0016404 <mmap>:
c0016404:	83 ec 18             	sub    esp,0x18
c0016407:	68 18 12 03 c0       	push   0xc0031218
c001640c:	e8 59 9e 00 00       	call   c002026a <KePanic(char const*)>
c0016411:	b8 00 00 00 00       	mov    eax,0x0
c0016416:	83 c4 1c             	add    esp,0x1c
c0016419:	c3                   	ret    

c001641a <munmap>:
c001641a:	83 ec 18             	sub    esp,0x18
c001641d:	68 1d 12 03 c0       	push   0xc003121d
c0016422:	e8 43 9e 00 00       	call   c002026a <KePanic(char const*)>
c0016427:	b8 00 00 00 00       	mov    eax,0x0
c001642c:	83 c4 1c             	add    esp,0x1c
c001642f:	c3                   	ret    

c0016430 <liballoc_lock()>:
c0016430:	fa                   	cli    
c0016431:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016438:	b8 00 00 00 00       	mov    eax,0x0
c001643d:	c3                   	ret    

c001643e <liballoc_unlock()>:
c001643e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016443:	83 e8 01             	sub    eax,0x1
c0016446:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001644b:	75 01                	jne    c001644e <liballoc_unlock()+0x10>
c001644d:	fb                   	sti    
c001644e:	b8 00 00 00 00       	mov    eax,0x0
c0016453:	c3                   	ret    

c0016454 <liballoc_alloc(int)>:
c0016454:	83 ec 10             	sub    esp,0x10
c0016457:	6a 01                	push   0x1
c0016459:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001645d:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016463:	e8 76 23 00 00       	call   c00187de <VAS::allocatePages(int, int)>
c0016468:	83 c4 1c             	add    esp,0x1c
c001646b:	c3                   	ret    

c001646c <liballoc_free(void*, int)>:
c001646c:	83 ec 14             	sub    esp,0x14
c001646f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016473:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016479:	e8 a0 1f 00 00       	call   c001841e <VAS::freeAllocatedPages(unsigned long)>
c001647e:	b8 00 00 00 00       	mov    eax,0x0
c0016483:	83 c4 1c             	add    esp,0x1c
c0016486:	c3                   	ret    

c0016487 <realloc>:
c0016487:	83 ec 14             	sub    esp,0x14
c001648a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016492:	e8 41 b3 fe ff       	call   c00017d8 <dlrealloc>
c0016497:	83 c4 1c             	add    esp,0x1c
c001649a:	c3                   	ret    

c001649b <malloc>:
c001649b:	53                   	push   ebx
c001649c:	83 ec 10             	sub    esp,0x10
c001649f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00164a3:	53                   	push   ebx
c00164a4:	68 24 12 03 c0       	push   0xc0031224
c00164a9:	e8 34 2e 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00164ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164b1:	e8 e5 ad fe ff       	call   c000129b <dlmalloc>
c00164b6:	83 c4 18             	add    esp,0x18
c00164b9:	5b                   	pop    ebx
c00164ba:	c3                   	ret    

c00164bb <free>:
c00164bb:	83 ec 18             	sub    esp,0x18
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	e8 76 aa fe ff       	call   c0000f3d <dlfree>
c00164c7:	83 c4 1c             	add    esp,0x1c
c00164ca:	c3                   	ret    

c00164cb <rfree>:
c00164cb:	83 ec 18             	sub    esp,0x18
c00164ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d2:	e8 66 aa fe ff       	call   c0000f3d <dlfree>
c00164d7:	83 c4 1c             	add    esp,0x1c
c00164da:	c3                   	ret    

c00164db <calloc>:
c00164db:	56                   	push   esi
c00164dc:	53                   	push   ebx
c00164dd:	83 ec 10             	sub    esp,0x10
c00164e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00164e4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00164e9:	53                   	push   ebx
c00164ea:	e8 ac ff ff ff       	call   c001649b <malloc>
c00164ef:	89 c6                	mov    esi,eax
c00164f1:	83 c4 0c             	add    esp,0xc
c00164f4:	53                   	push   ebx
c00164f5:	6a 00                	push   0x0
c00164f7:	50                   	push   eax
c00164f8:	e8 f3 9f fe ff       	call   c00004f0 <memset>
c00164fd:	89 f0                	mov    eax,esi
c00164ff:	83 c4 14             	add    esp,0x14
c0016502:	5b                   	pop    ebx
c0016503:	5e                   	pop    esi
c0016504:	c3                   	ret    

c0016505 <KeEntryPoint>:
c0016505:	57                   	push   edi
c0016506:	bf f9 03 00 00       	mov    edi,0x3f9
c001650b:	56                   	push   esi
c001650c:	31 f6                	xor    esi,esi
c001650e:	53                   	push   ebx
c001650f:	89 fa                	mov    edx,edi
c0016511:	83 ec 2c             	sub    esp,0x2c
c0016514:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016519:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c001651e:	89 f0                	mov    eax,esi
c0016520:	ee                   	out    dx,al
c0016521:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016526:	b0 80                	mov    al,0x80
c0016528:	89 da                	mov    edx,ebx
c001652a:	ee                   	out    dx,al
c001652b:	b1 03                	mov    cl,0x3
c001652d:	ba f8 03 00 00       	mov    edx,0x3f8
c0016532:	88 c8                	mov    al,cl
c0016534:	ee                   	out    dx,al
c0016535:	89 f0                	mov    eax,esi
c0016537:	89 fa                	mov    edx,edi
c0016539:	ee                   	out    dx,al
c001653a:	88 c8                	mov    al,cl
c001653c:	89 da                	mov    edx,ebx
c001653e:	ee                   	out    dx,al
c001653f:	b0 c7                	mov    al,0xc7
c0016541:	ba fa 03 00 00       	mov    edx,0x3fa
c0016546:	ee                   	out    dx,al
c0016547:	b0 0b                	mov    al,0xb
c0016549:	ba fc 03 00 00       	mov    edx,0x3fc
c001654e:	ee                   	out    dx,al
c001654f:	68 31 12 03 c0       	push   0xc0031231
c0016554:	e8 89 2d 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0016559:	e8 2f 95 00 00       	call   c001fa8d <KeDisplaySplashScreen()>
c001655e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0016563:	05 ff 0f 00 00       	add    eax,0xfff
c0016568:	25 00 f0 ff ff       	and    eax,0xfffff000
c001656d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016570:	e8 b3 03 00 00       	call   c0016928 <Phys::physicalMemorySetup(unsigned int)>
c0016575:	e8 27 1c 00 00       	call   c00181a1 <Virt::virtualMemorySetup()>
c001657a:	e8 58 94 00 00       	call   c001f9d7 <KeInitialiseAtexit()>
c001657f:	58                   	pop    eax
c0016580:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0016584:	53                   	push   ebx
c0016585:	e8 14 1f 00 00       	call   c001849e <VAS::VAS()>
c001658a:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c0016590:	e8 b5 83 01 00       	call   c002e94a <_init>
c0016595:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c001659c:	e8 fa fe ff ff       	call   c001649b <malloc>
c00165a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00165a4:	89 c6                	mov    esi,eax
c00165a6:	e8 27 f2 ff ff       	call   c00157d2 <Computer::Computer()>
c00165ab:	53                   	push   ebx
c00165ac:	6a 00                	push   0x0
c00165ae:	6a 00                	push   0x0
c00165b0:	56                   	push   esi
c00165b1:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00165b7:	e8 dc f5 ff ff       	call   c0015b98 <Computer::open(int, int, void*)>
c00165bc:	83 c4 14             	add    esp,0x14
c00165bf:	53                   	push   ebx
c00165c0:	e8 a3 1f 00 00       	call   c0018568 <VAS::~VAS()>
c00165c5:	83 c4 30             	add    esp,0x30
c00165c8:	5b                   	pop    ebx
c00165c9:	5e                   	pop    esi
c00165ca:	5f                   	pop    edi
c00165cb:	c3                   	ret    

c00165cc <Phys::allocateDMA(unsigned long)>:
c00165cc:	55                   	push   ebp
c00165cd:	31 ed                	xor    ebp,ebp
c00165cf:	57                   	push   edi
c00165d0:	56                   	push   esi
c00165d1:	31 f6                	xor    esi,esi
c00165d3:	53                   	push   ebx
c00165d4:	31 db                	xor    ebx,ebx
c00165d6:	83 ec 1c             	sub    esp,0x1c
c00165d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165dd:	05 ff 0f 00 00       	add    eax,0xfff
c00165e2:	c1 e8 0c             	shr    eax,0xc
c00165e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165e9:	31 c0                	xor    eax,eax
c00165eb:	eb 1b                	jmp    c0016608 <Phys::allocateDMA(unsigned long)+0x3c>
c00165ed:	8d 78 01             	lea    edi,[eax+0x1]
c00165f0:	85 c0                	test   eax,eax
c00165f2:	0f 44 eb             	cmove  ebp,ebx
c00165f5:	0f 44 f3             	cmove  esi,ebx
c00165f8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00165fc:	74 37                	je     c0016635 <Phys::allocateDMA(unsigned long)+0x69>
c00165fe:	89 f8                	mov    eax,edi
c0016600:	83 c3 01             	add    ebx,0x1
c0016603:	83 fb 0f             	cmp    ebx,0xf
c0016606:	7f 13                	jg     c001661b <Phys::allocateDMA(unsigned long)+0x4f>
c0016608:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c001660f:	74 dc                	je     c00165ed <Phys::allocateDMA(unsigned long)+0x21>
c0016611:	31 c0                	xor    eax,eax
c0016613:	83 c3 01             	add    ebx,0x1
c0016616:	83 fb 0f             	cmp    ebx,0xf
c0016619:	7e ed                	jle    c0016608 <Phys::allocateDMA(unsigned long)+0x3c>
c001661b:	83 ec 0c             	sub    esp,0xc
c001661e:	68 48 12 03 c0       	push   0xc0031248
c0016623:	e8 42 9c 00 00       	call   c002026a <KePanic(char const*)>
c0016628:	83 c4 10             	add    esp,0x10
c001662b:	31 c0                	xor    eax,eax
c001662d:	83 c4 1c             	add    esp,0x1c
c0016630:	5b                   	pop    ebx
c0016631:	5e                   	pop    esi
c0016632:	5f                   	pop    edi
c0016633:	5d                   	pop    ebp
c0016634:	c3                   	ret    
c0016635:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016639:	89 f2                	mov    edx,esi
c001663b:	c1 fa 04             	sar    edx,0x4
c001663e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016642:	01 f1                	add    ecx,esi
c0016644:	8d 51 0e             	lea    edx,[ecx+0xe]
c0016647:	83 e9 01             	sub    ecx,0x1
c001664a:	0f 48 ca             	cmovs  ecx,edx
c001664d:	c1 f9 04             	sar    ecx,0x4
c0016650:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0016654:	74 06                	je     c001665c <Phys::allocateDMA(unsigned long)+0x90>
c0016656:	89 eb                	mov    ebx,ebp
c0016658:	31 c0                	xor    eax,eax
c001665a:	eb b7                	jmp    c0016613 <Phys::allocateDMA(unsigned long)+0x47>
c001665c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016660:	85 d2                	test   edx,edx
c0016662:	74 17                	je     c001667b <Phys::allocateDMA(unsigned long)+0xaf>
c0016664:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c001666a:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c0016671:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0016674:	83 c2 01             	add    edx,0x1
c0016677:	39 d0                	cmp    eax,edx
c0016679:	75 f6                	jne    c0016671 <Phys::allocateDMA(unsigned long)+0xa5>
c001667b:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016681:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016685:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016689:	01 c2                	add    edx,eax
c001668b:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016691:	85 c9                	test   ecx,ecx
c0016693:	74 17                	je     c00166ac <Phys::allocateDMA(unsigned long)+0xe0>
c0016695:	83 ec 0c             	sub    esp,0xc
c0016698:	68 48 12 03 c0       	push   0xc0031248
c001669d:	e8 c8 9b 00 00       	call   c002026a <KePanic(char const*)>
c00166a2:	83 c4 10             	add    esp,0x10
c00166a5:	89 f8                	mov    eax,edi
c00166a7:	e9 54 ff ff ff       	jmp    c0016600 <Phys::allocateDMA(unsigned long)+0x34>
c00166ac:	c1 e6 0c             	shl    esi,0xc
c00166af:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c00166b5:	e9 73 ff ff ff       	jmp    c001662d <Phys::allocateDMA(unsigned long)+0x61>

c00166ba <Phys::freeDMA(unsigned long, unsigned long)>:
c00166ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166be:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00166c4:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00166c9:	c1 ea 0c             	shr    edx,0xc
c00166cc:	29 d0                	sub    eax,edx
c00166ce:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00166d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166d7:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00166dc:	c1 e8 0c             	shr    eax,0xc
c00166df:	85 d2                	test   edx,edx
c00166e1:	74 11                	je     c00166f4 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00166e3:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c00166e8:	01 c2                	add    edx,eax
c00166ea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00166ed:	83 c0 01             	add    eax,0x1
c00166f0:	39 d0                	cmp    eax,edx
c00166f2:	75 f6                	jne    c00166ea <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00166f4:	c3                   	ret    

c00166f5 <Phys::setPageState(unsigned long, bool)>:
c00166f5:	57                   	push   edi
c00166f6:	56                   	push   esi
c00166f7:	8b 35 88 3c 03 c0    	mov    esi,DWORD PTR ds:0xc0033c88
c00166fd:	53                   	push   ebx
c00166fe:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016703:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001670b:	89 ca                	mov    edx,ecx
c001670d:	83 e1 07             	and    ecx,0x7
c0016710:	c1 ea 03             	shr    edx,0x3
c0016713:	0f b6 c0             	movzx  eax,al
c0016716:	d3 c3                	rol    ebx,cl
c0016718:	01 d6                	add    esi,edx
c001671a:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001671d:	d3 e0                	shl    eax,cl
c001671f:	21 fb                	and    ebx,edi
c0016721:	88 1e                	mov    BYTE PTR [esi],bl
c0016723:	8b 1d 88 3c 03 c0    	mov    ebx,DWORD PTR ds:0xc0033c88
c0016729:	01 da                	add    edx,ebx
c001672b:	8a 0a                	mov    cl,BYTE PTR [edx]
c001672d:	09 c8                	or     eax,ecx
c001672f:	88 02                	mov    BYTE PTR [edx],al
c0016731:	5b                   	pop    ebx
c0016732:	5e                   	pop    esi
c0016733:	5f                   	pop    edi
c0016734:	c3                   	ret    

c0016735 <Phys::getPageState(unsigned long)>:
c0016735:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016739:	8b 15 88 3c 03 c0    	mov    edx,DWORD PTR ds:0xc0033c88
c001673f:	89 c8                	mov    eax,ecx
c0016741:	83 e1 07             	and    ecx,0x7
c0016744:	c1 e8 03             	shr    eax,0x3
c0016747:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c001674b:	d3 f8                	sar    eax,cl
c001674d:	83 e0 01             	and    eax,0x1
c0016750:	c3                   	ret    

c0016751 <Phys::freePage(unsigned long)>:
c0016751:	53                   	push   ebx
c0016752:	83 ec 08             	sub    esp,0x8
c0016755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016759:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001675f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0016765:	76 41                	jbe    c00167a8 <Phys::freePage(unsigned long)+0x57>
c0016767:	c1 e8 0c             	shr    eax,0xc
c001676a:	50                   	push   eax
c001676b:	89 c3                	mov    ebx,eax
c001676d:	e8 c3 ff ff ff       	call   c0016735 <Phys::getPageState(unsigned long)>
c0016772:	5a                   	pop    edx
c0016773:	84 c0                	test   al,al
c0016775:	74 20                	je     c0016797 <Phys::freePage(unsigned long)+0x46>
c0016777:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c001677c:	83 ec 08             	sub    esp,0x8
c001677f:	6a 00                	push   0x0
c0016781:	53                   	push   ebx
c0016782:	83 e8 01             	sub    eax,0x1
c0016785:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001678a:	e8 66 ff ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	83 c4 08             	add    esp,0x8
c0016795:	5b                   	pop    ebx
c0016796:	c3                   	ret    
c0016797:	c7 44 24 10 ed 12 03 c0 	mov    DWORD PTR [esp+0x10],0xc00312ed
c001679f:	83 c4 08             	add    esp,0x8
c00167a2:	5b                   	pop    ebx
c00167a3:	e9 c2 9a 00 00       	jmp    c002026a <KePanic(char const*)>
c00167a8:	68 00 10 00 00       	push   0x1000
c00167ad:	50                   	push   eax
c00167ae:	e8 07 ff ff ff       	call   c00166ba <Phys::freeDMA(unsigned long, unsigned long)>
c00167b3:	59                   	pop    ecx
c00167b4:	5b                   	pop    ebx
c00167b5:	83 c4 08             	add    esp,0x8
c00167b8:	5b                   	pop    ebx
c00167b9:	c3                   	ret    

c00167ba <Phys::allocatePage()>:
c00167ba:	56                   	push   esi
c00167bb:	53                   	push   ebx
c00167bc:	83 ec 14             	sub    esp,0x14
c00167bf:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00167c5:	89 f3                	mov    ebx,esi
c00167c7:	eb 0a                	jmp    c00167d3 <Phys::allocatePage()+0x19>
c00167c9:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c00167cf:	39 de                	cmp    esi,ebx
c00167d1:	74 26                	je     c00167f9 <Phys::allocatePage()+0x3f>
c00167d3:	53                   	push   ebx
c00167d4:	e8 5c ff ff ff       	call   c0016735 <Phys::getPageState(unsigned long)>
c00167d9:	5a                   	pop    edx
c00167da:	84 c0                	test   al,al
c00167dc:	74 67                	je     c0016845 <Phys::allocatePage()+0x8b>
c00167de:	83 c3 01             	add    ebx,0x1
c00167e1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00167e7:	75 e0                	jne    c00167c9 <Phys::allocatePage()+0xf>
c00167e9:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c00167f3:	31 db                	xor    ebx,ebx
c00167f5:	39 de                	cmp    esi,ebx
c00167f7:	75 da                	jne    c00167d3 <Phys::allocatePage()+0x19>
c00167f9:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c00167fe:	83 ec 0c             	sub    esp,0xc
c0016801:	83 f0 01             	xor    eax,0x1
c0016804:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016809:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001680e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016811:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016817:	50                   	push   eax
c0016818:	e8 79 27 00 00       	call   c0018f96 <VAS::scanForEviction()>
c001681d:	83 c4 10             	add    esp,0x10
c0016820:	85 c0                	test   eax,eax
c0016822:	75 48                	jne    c001686c <Phys::allocatePage()+0xb2>
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	68 70 12 03 c0       	push   0xc0031270
c001682c:	e8 39 9a 00 00       	call   c002026a <KePanic(char const*)>
c0016831:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016837:	83 c4 10             	add    esp,0x10
c001683a:	53                   	push   ebx
c001683b:	e8 f5 fe ff ff       	call   c0016735 <Phys::getPageState(unsigned long)>
c0016840:	5a                   	pop    edx
c0016841:	84 c0                	test   al,al
c0016843:	75 99                	jne    c00167de <Phys::allocatePage()+0x24>
c0016845:	6a 01                	push   0x1
c0016847:	53                   	push   ebx
c0016848:	e8 a8 fe ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c001684d:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c0016853:	59                   	pop    ecx
c0016854:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016859:	5b                   	pop    ebx
c001685a:	83 c2 01             	add    edx,0x1
c001685d:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c0016863:	c1 e0 0c             	shl    eax,0xc
c0016866:	83 c4 14             	add    esp,0x14
c0016869:	5b                   	pop    ebx
c001686a:	5e                   	pop    esi
c001686b:	c3                   	ret    
c001686c:	83 ec 08             	sub    esp,0x8
c001686f:	89 c2                	mov    edx,eax
c0016871:	6a 01                	push   0x1
c0016873:	c1 ea 0c             	shr    edx,0xc
c0016876:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001687a:	52                   	push   edx
c001687b:	e8 75 fe ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c0016880:	83 c4 10             	add    esp,0x10
c0016883:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016887:	eb dd                	jmp    c0016866 <Phys::allocatePage()+0xac>

c0016889 <Phys::allocateContiguousPages(int)>:
c0016889:	57                   	push   edi
c001688a:	56                   	push   esi
c001688b:	53                   	push   ebx
c001688c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016890:	fa                   	cli    
c0016891:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016896:	31 db                	xor    ebx,ebx
c0016898:	83 c0 01             	add    eax,0x1
c001689b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00168a0:	85 db                	test   ebx,ebx
c00168a2:	75 11                	jne    c00168b5 <Phys::allocateContiguousPages(int)+0x2c>
c00168a4:	e8 11 ff ff ff       	call   c00167ba <Phys::allocatePage()>
c00168a9:	83 fe 01             	cmp    esi,0x1
c00168ac:	89 c7                	mov    edi,eax
c00168ae:	74 21                	je     c00168d1 <Phys::allocateContiguousPages(int)+0x48>
c00168b0:	bb 01 00 00 00       	mov    ebx,0x1
c00168b5:	e8 00 ff ff ff       	call   c00167ba <Phys::allocatePage()>
c00168ba:	89 da                	mov    edx,ebx
c00168bc:	c1 e2 0c             	shl    edx,0xc
c00168bf:	01 fa                	add    edx,edi
c00168c1:	39 c2                	cmp    edx,eax
c00168c3:	74 22                	je     c00168e7 <Phys::allocateContiguousPages(int)+0x5e>
c00168c5:	83 fe 01             	cmp    esi,0x1
c00168c8:	bb 01 00 00 00       	mov    ebx,0x1
c00168cd:	89 c7                	mov    edi,eax
c00168cf:	75 e4                	jne    c00168b5 <Phys::allocateContiguousPages(int)+0x2c>
c00168d1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00168d6:	83 e8 01             	sub    eax,0x1
c00168d9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00168de:	75 01                	jne    c00168e1 <Phys::allocateContiguousPages(int)+0x58>
c00168e0:	fb                   	sti    
c00168e1:	5b                   	pop    ebx
c00168e2:	89 f8                	mov    eax,edi
c00168e4:	5e                   	pop    esi
c00168e5:	5f                   	pop    edi
c00168e6:	c3                   	ret    
c00168e7:	83 c3 01             	add    ebx,0x1
c00168ea:	39 f3                	cmp    ebx,esi
c00168ec:	75 b2                	jne    c00168a0 <Phys::allocateContiguousPages(int)+0x17>
c00168ee:	eb e1                	jmp    c00168d1 <Phys::allocateContiguousPages(int)+0x48>

c00168f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00168f0:	56                   	push   esi
c00168f1:	53                   	push   ebx
c00168f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168f6:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c00168fc:	73 06                	jae    c0016904 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00168fe:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016908:	c1 eb 0c             	shr    ebx,0xc
c001690b:	c1 e8 0c             	shr    eax,0xc
c001690e:	39 d8                	cmp    eax,ebx
c0016910:	73 13                	jae    c0016925 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0016912:	6a 00                	push   0x0
c0016914:	50                   	push   eax
c0016915:	8d 70 01             	lea    esi,[eax+0x1]
c0016918:	e8 d8 fd ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c001691d:	39 f3                	cmp    ebx,esi
c001691f:	89 f0                	mov    eax,esi
c0016921:	5a                   	pop    edx
c0016922:	59                   	pop    ecx
c0016923:	75 ed                	jne    c0016912 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016925:	5b                   	pop    ebx
c0016926:	5e                   	pop    esi
c0016927:	c3                   	ret    

c0016928 <Phys::physicalMemorySetup(unsigned int)>:
c0016928:	55                   	push   ebp
c0016929:	57                   	push   edi
c001692a:	56                   	push   esi
c001692b:	53                   	push   ebx
c001692c:	31 db                	xor    ebx,ebx
c001692e:	83 ec 40             	sub    esp,0x40
c0016931:	6a 10                	push   0x10
c0016933:	6a 00                	push   0x0
c0016935:	68 f0 a9 03 c0       	push   0xc003a9f0
c001693a:	e8 b1 9b fe ff       	call   c00004f0 <memset>
c001693f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0016943:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016948:	05 00 10 00 00       	add    eax,0x1000
c001694d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016951:	5a                   	pop    edx
c0016952:	59                   	pop    ecx
c0016953:	50                   	push   eax
c0016954:	68 03 13 03 c0       	push   0xc0031303
c0016959:	e8 84 29 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	83 ec 08             	sub    esp,0x8
c0016964:	6a 01                	push   0x1
c0016966:	53                   	push   ebx
c0016967:	83 c3 01             	add    ebx,0x1
c001696a:	e8 86 fd ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c001696f:	83 c4 10             	add    esp,0x10
c0016972:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016978:	75 e7                	jne    c0016961 <Phys::physicalMemorySetup(unsigned int)+0x39>
c001697a:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0016981:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0016988:	c1 e0 08             	shl    eax,0x8
c001698b:	09 c2                	or     edx,eax
c001698d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0016991:	0f 84 43 01 00 00    	je     c0016ada <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c0016997:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001699f:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00169a4:	e9 82 00 00 00       	jmp    c0016a2b <Phys::physicalMemorySetup(unsigned int)+0x103>
c00169a9:	ba 00 00 08 00       	mov    edx,0x80000
c00169ae:	89 c1                	mov    ecx,eax
c00169b0:	39 f2                	cmp    edx,esi
c00169b2:	19 f9                	sbb    ecx,edi
c00169b4:	0f 82 c0 00 00 00    	jb     c0016a7a <Phys::physicalMemorySetup(unsigned int)+0x152>
c00169ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169be:	89 c5                	mov    ebp,eax
c00169c0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00169c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00169c8:	19 cd                	sbb    ebp,ecx
c00169ca:	0f 83 af 00 00 00    	jae    c0016a7f <Phys::physicalMemorySetup(unsigned int)+0x157>
c00169d0:	89 d6                	mov    esi,edx
c00169d2:	ba 00 00 0a 00       	mov    edx,0xa0000
c00169d7:	39 f2                	cmp    edx,esi
c00169d9:	89 cf                	mov    edi,ecx
c00169db:	19 c8                	sbb    eax,ecx
c00169dd:	73 07                	jae    c00169e6 <Phys::physicalMemorySetup(unsigned int)+0xbe>
c00169df:	be 00 00 0a 00       	mov    esi,0xa0000
c00169e4:	31 ff                	xor    edi,edi
c00169e6:	89 f2                	mov    edx,esi
c00169e8:	b8 ff 1f 00 00       	mov    eax,0x1fff
c00169ed:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c00169f3:	89 f9                	mov    ecx,edi
c00169f5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00169f9:	83 d1 ff             	adc    ecx,0xffffffff
c00169fc:	39 d0                	cmp    eax,edx
c00169fe:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0016a02:	b8 00 00 00 00       	mov    eax,0x0
c0016a07:	19 c8                	sbb    eax,ecx
c0016a09:	0f 82 9d 01 00 00    	jb     c0016bac <Phys::physicalMemorySetup(unsigned int)+0x284>
c0016a0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016a13:	83 c3 18             	add    ebx,0x18
c0016a16:	83 c6 01             	add    esi,0x1
c0016a19:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016a1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016a21:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0016a25:	0f 84 bf 00 00 00    	je     c0016aea <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016a2b:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016a2d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a30:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016a33:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016a36:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016a3a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016a3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016a41:	01 f0                	add    eax,esi
c0016a43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016a47:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016a4b:	55                   	push   ebp
c0016a4c:	11 fa                	adc    edx,edi
c0016a4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a52:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016a56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a5a:	50                   	push   eax
c0016a5b:	56                   	push   esi
c0016a5c:	68 a0 12 03 c0       	push   0xc00312a0
c0016a61:	e8 7c 28 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0016a66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a6a:	83 c4 10             	add    esp,0x10
c0016a6d:	09 f8                	or     eax,edi
c0016a6f:	75 79                	jne    c0016aea <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016a71:	83 fd 01             	cmp    ebp,0x1
c0016a74:	0f 84 2f ff ff ff    	je     c00169a9 <Phys::physicalMemorySetup(unsigned int)+0x81>
c0016a7a:	83 fd 01             	cmp    ebp,0x1
c0016a7d:	75 90                	jne    c0016a0f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016a7f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016a83:	31 d2                	xor    edx,edx
c0016a85:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0016a89:	89 c8                	mov    eax,ecx
c0016a8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a8f:	19 d1                	sbb    ecx,edx
c0016a91:	0f 82 78 ff ff ff    	jb     c0016a0f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016a97:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0016a9c:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0016aa0:	b9 00 00 00 00       	mov    ecx,0x0
c0016aa5:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0016aa9:	0f 83 60 ff ff ff    	jae    c0016a0f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016aaf:	39 c6                	cmp    esi,eax
c0016ab1:	19 d7                	sbb    edi,edx
c0016ab3:	0f 83 ff 00 00 00    	jae    c0016bb8 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016ab9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016abd:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016ac1:	29 c7                	sub    edi,eax
c0016ac3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016ac7:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016acb:	19 d5                	sbb    ebp,edx
c0016acd:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016ad1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ad5:	e9 de 00 00 00       	jmp    c0016bb8 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	68 1b 13 03 c0       	push   0xc003131b
c0016ae2:	e8 83 97 00 00       	call   c002026a <KePanic(char const*)>
c0016ae7:	83 c4 10             	add    esp,0x10
c0016aea:	83 ec 08             	sub    esp,0x8
c0016aed:	bb 60 00 00 00       	mov    ebx,0x60
c0016af2:	6a 00                	push   0x0
c0016af4:	6a 06                	push   0x6
c0016af6:	e8 fa fb ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c0016afb:	58                   	pop    eax
c0016afc:	5a                   	pop    edx
c0016afd:	6a 00                	push   0x0
c0016aff:	6a 07                	push   0x7
c0016b01:	e8 ef fb ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c0016b06:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016b0c:	83 c4 10             	add    esp,0x10
c0016b0f:	83 c1 02             	add    ecx,0x2
c0016b12:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016b18:	83 ec 08             	sub    esp,0x8
c0016b1b:	6a 00                	push   0x0
c0016b1d:	53                   	push   ebx
c0016b1e:	83 c3 01             	add    ebx,0x1
c0016b21:	e8 cf fb ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c0016b26:	83 c4 10             	add    esp,0x10
c0016b29:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016b2f:	75 e7                	jne    c0016b18 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016b31:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b36:	bb 40 01 00 00       	mov    ebx,0x140
c0016b3b:	83 c0 20             	add    eax,0x20
c0016b3e:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b43:	eb 26                	jmp    c0016b6b <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016b45:	83 ec 08             	sub    esp,0x8
c0016b48:	6a 00                	push   0x0
c0016b4a:	53                   	push   ebx
c0016b4b:	83 c3 01             	add    ebx,0x1
c0016b4e:	e8 a2 fb ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c0016b53:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b58:	83 c4 10             	add    esp,0x10
c0016b5b:	83 c0 01             	add    eax,0x1
c0016b5e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016b64:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b69:	74 07                	je     c0016b72 <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016b6b:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016b70:	7e d3                	jle    c0016b45 <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016b72:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016b77:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016b7c:	7f 26                	jg     c0016ba4 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016b7e:	83 ec 08             	sub    esp,0x8
c0016b81:	6a 00                	push   0x0
c0016b83:	53                   	push   ebx
c0016b84:	83 c3 01             	add    ebx,0x1
c0016b87:	e8 69 fb ff ff       	call   c00166f5 <Phys::setPageState(unsigned long, bool)>
c0016b8c:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016b91:	83 c4 10             	add    esp,0x10
c0016b94:	83 c0 01             	add    eax,0x1
c0016b97:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016b9d:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016ba2:	75 d3                	jne    c0016b77 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016ba4:	83 c4 3c             	add    esp,0x3c
c0016ba7:	5b                   	pop    ebx
c0016ba8:	5e                   	pop    esi
c0016ba9:	5f                   	pop    edi
c0016baa:	5d                   	pop    ebp
c0016bab:	c3                   	ret    
c0016bac:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016bb0:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016bb8:	83 ec 04             	sub    esp,0x4
c0016bbb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016bbf:	56                   	push   esi
c0016bc0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016bc4:	57                   	push   edi
c0016bc5:	68 c4 12 03 c0       	push   0xc00312c4
c0016bca:	e8 13 27 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0016bcf:	5d                   	pop    ebp
c0016bd0:	58                   	pop    eax
c0016bd1:	56                   	push   esi
c0016bd2:	57                   	push   edi
c0016bd3:	e8 18 fd ff ff       	call   c00168f0 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016bdc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016be0:	83 c4 0c             	add    esp,0xc
c0016be3:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016be9:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016bed:	01 f0                	add    eax,esi
c0016bef:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016bf4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016bfb:	52                   	push   edx
c0016bfc:	50                   	push   eax
c0016bfd:	68 29 13 03 c0       	push   0xc0031329
c0016c02:	e8 db 26 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0016c07:	83 c4 10             	add    esp,0x10
c0016c0a:	e9 00 fe ff ff       	jmp    c0016a0f <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016c0f:	90                   	nop

c0016c10 <Pipe::isAtty()>:
c0016c10:	31 c0                	xor    eax,eax
c0016c12:	c3                   	ret    
c0016c13:	90                   	nop

c0016c14 <Pipe::~Pipe()>:
c0016c14:	83 ec 0c             	sub    esp,0xc
c0016c17:	ba 88 13 03 c0       	mov    edx,0xc0031388
c0016c1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c20:	89 10                	mov    DWORD PTR [eax],edx
c0016c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c26:	83 ec 0c             	sub    esp,0xc
c0016c29:	50                   	push   eax
c0016c2a:	e8 35 11 00 00       	call   c0017d64 <UnixFile::~UnixFile()>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	90                   	nop
c0016c33:	83 c4 0c             	add    esp,0xc
c0016c36:	c3                   	ret    
c0016c37:	90                   	nop

c0016c38 <Pipe::~Pipe()>:
c0016c38:	83 ec 0c             	sub    esp,0xc
c0016c3b:	83 ec 0c             	sub    esp,0xc
c0016c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c42:	e8 cd ff ff ff       	call   c0016c14 <Pipe::~Pipe()>
c0016c47:	83 c4 10             	add    esp,0x10
c0016c4a:	83 ec 08             	sub    esp,0x8
c0016c4d:	6a 20                	push   0x20
c0016c4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c53:	e8 8c 25 00 00       	call   c00191e4 <operator delete(void*, unsigned long)>
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	83 c4 0c             	add    esp,0xc
c0016c5e:	c3                   	ret    
c0016c5f:	90                   	nop

c0016c60 <Pipe::write(unsigned long long, void*, int*)>:
c0016c60:	55                   	push   ebp
c0016c61:	57                   	push   edi
c0016c62:	56                   	push   esi
c0016c63:	53                   	push   ebx
c0016c64:	83 ec 1c             	sub    esp,0x1c
c0016c67:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c6b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c73:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016c76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016c7a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016c7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c80:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016c84:	89 d8                	mov    eax,ebx
c0016c86:	89 d6                	mov    esi,edx
c0016c88:	89 d7                	mov    edi,edx
c0016c8a:	c1 ff 1f             	sar    edi,0x1f
c0016c8d:	03 34 24             	add    esi,DWORD PTR [esp]
c0016c90:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016c94:	c1 f8 1f             	sar    eax,0x1f
c0016c97:	39 f3                	cmp    ebx,esi
c0016c99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ca1:	19 f8                	sbb    eax,edi
c0016ca3:	b8 01 00 00 00       	mov    eax,0x1
c0016ca8:	72 72                	jb     c0016d1c <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016caa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016cad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016cb1:	01 d0                	add    eax,edx
c0016cb3:	99                   	cdq    
c0016cb4:	f7 fb                	idiv   ebx
c0016cb6:	89 d8                	mov    eax,ebx
c0016cb8:	29 d0                	sub    eax,edx
c0016cba:	89 d6                	mov    esi,edx
c0016cbc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016cbf:	89 c3                	mov    ebx,eax
c0016cc1:	c1 fb 1f             	sar    ebx,0x1f
c0016cc4:	39 c2                	cmp    edx,eax
c0016cc6:	19 df                	sbb    edi,ebx
c0016cc8:	bb 00 00 00 00       	mov    ebx,0x0
c0016ccd:	72 04                	jb     c0016cd3 <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016ccf:	89 d3                	mov    ebx,edx
c0016cd1:	29 c3                	sub    ebx,eax
c0016cd3:	89 d0                	mov    eax,edx
c0016cd5:	29 d8                	sub    eax,ebx
c0016cd7:	74 0d                	je     c0016ce6 <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016cd9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016cdc:	89 c1                	mov    ecx,eax
c0016cde:	01 f7                	add    edi,esi
c0016ce0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ce4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ce6:	85 db                	test   ebx,ebx
c0016ce8:	74 0d                	je     c0016cf7 <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016cea:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cee:	89 d9                	mov    ecx,ebx
c0016cf0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016cf3:	89 c6                	mov    esi,eax
c0016cf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cf7:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016cfa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016cff:	75 10                	jne    c0016d11 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016d01:	83 ec 0c             	sub    esp,0xc
c0016d04:	68 45 13 03 c0       	push   0xc0031345
c0016d09:	e8 5c 95 00 00       	call   c002026a <KePanic(char const*)>
c0016d0e:	83 c4 10             	add    esp,0x10
c0016d11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d15:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d18:	89 08                	mov    DWORD PTR [eax],ecx
c0016d1a:	31 c0                	xor    eax,eax
c0016d1c:	83 c4 1c             	add    esp,0x1c
c0016d1f:	5b                   	pop    ebx
c0016d20:	5e                   	pop    esi
c0016d21:	5f                   	pop    edi
c0016d22:	5d                   	pop    ebp
c0016d23:	c3                   	ret    

c0016d24 <Pipe::read(unsigned long long, void*, int*)>:
c0016d24:	55                   	push   ebp
c0016d25:	57                   	push   edi
c0016d26:	56                   	push   esi
c0016d27:	53                   	push   ebx
c0016d28:	83 ec 1c             	sub    esp,0x1c
c0016d2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016d2f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016d33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016d37:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016d3a:	89 c8                	mov    eax,ecx
c0016d3c:	99                   	cdq    
c0016d3d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016d41:	74 24                	je     c0016d67 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016d43:	39 f9                	cmp    ecx,edi
c0016d45:	89 d1                	mov    ecx,edx
c0016d47:	19 f1                	sbb    ecx,esi
c0016d49:	73 1c                	jae    c0016d67 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016d4b:	fa                   	cli    
c0016d4c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016d52:	e8 75 e5 00 00       	call   c00252cc <schedule()>
c0016d57:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016d5c:	48                   	dec    eax
c0016d5d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016d62:	75 d3                	jne    c0016d37 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016d64:	fb                   	sti    
c0016d65:	eb d0                	jmp    c0016d37 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016d67:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016d6b:	39 f8                	cmp    eax,edi
c0016d6d:	89 d1                	mov    ecx,edx
c0016d6f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016d73:	19 f1                	sbb    ecx,esi
c0016d75:	73 08                	jae    c0016d7f <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016d77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016d7f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016d82:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016d85:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016d89:	29 f7                	sub    edi,esi
c0016d8b:	89 f8                	mov    eax,edi
c0016d8d:	99                   	cdq    
c0016d8e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016d92:	89 d0                	mov    eax,edx
c0016d94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d98:	19 c2                	sbb    edx,eax
c0016d9a:	89 f8                	mov    eax,edi
c0016d9c:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016da1:	89 ea                	mov    edx,ebp
c0016da3:	29 c2                	sub    edx,eax
c0016da5:	85 c0                	test   eax,eax
c0016da7:	74 0b                	je     c0016db4 <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016da9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016dac:	89 c1                	mov    ecx,eax
c0016dae:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016db2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016db4:	85 d2                	test   edx,edx
c0016db6:	74 0d                	je     c0016dc5 <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016db8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016dbc:	89 d1                	mov    ecx,edx
c0016dbe:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016dc1:	89 c7                	mov    edi,eax
c0016dc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dc5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016dc8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016dcb:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016dce:	99                   	cdq    
c0016dcf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016dd3:	89 f7                	mov    edi,esi
c0016dd5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016dd9:	c1 ff 1f             	sar    edi,0x1f
c0016ddc:	57                   	push   edi
c0016ddd:	56                   	push   esi
c0016dde:	52                   	push   edx
c0016ddf:	50                   	push   eax
c0016de0:	e8 4b 7a 01 00       	call   c002e830 <__umoddi3>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016ded:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016df0:	75 10                	jne    c0016e02 <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016df2:	83 ec 0c             	sub    esp,0xc
c0016df5:	68 62 13 03 c0       	push   0xc0031362
c0016dfa:	e8 6b 94 00 00       	call   c002026a <KePanic(char const*)>
c0016dff:	83 c4 10             	add    esp,0x10
c0016e02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e0a:	89 10                	mov    DWORD PTR [eax],edx
c0016e0c:	83 c4 1c             	add    esp,0x1c
c0016e0f:	31 c0                	xor    eax,eax
c0016e11:	5b                   	pop    ebx
c0016e12:	5e                   	pop    esi
c0016e13:	5f                   	pop    edi
c0016e14:	5d                   	pop    ebp
c0016e15:	c3                   	ret    

c0016e16 <Pipe::Pipe(int)>:
c0016e16:	83 ec 0c             	sub    esp,0xc
c0016e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e1d:	83 ec 08             	sub    esp,0x8
c0016e20:	6a 00                	push   0x0
c0016e22:	50                   	push   eax
c0016e23:	e8 56 0d 00 00       	call   c0017b7e <UnixFile::UnixFile(int)>
c0016e28:	83 c4 10             	add    esp,0x10
c0016e2b:	ba 88 13 03 c0       	mov    edx,0xc0031388
c0016e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e34:	89 10                	mov    DWORD PTR [eax],edx
c0016e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016e3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016e41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e45:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e50:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016e57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016e5b:	83 ec 0c             	sub    esp,0xc
c0016e5e:	50                   	push   eax
c0016e5f:	e8 37 f6 ff ff       	call   c001649b <malloc>
c0016e64:	83 c4 10             	add    esp,0x10
c0016e67:	89 c2                	mov    edx,eax
c0016e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e74:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016e78:	90                   	nop
c0016e79:	83 c4 0c             	add    esp,0xc
c0016e7c:	c3                   	ret    
c0016e7d:	90                   	nop

c0016e7e <VgaText::isAtty()>:
c0016e7e:	b0 01                	mov    al,0x1
c0016e80:	c3                   	ret    
c0016e81:	90                   	nop

c0016e82 <VgaText::~VgaText()>:
c0016e82:	83 ec 0c             	sub    esp,0xc
c0016e85:	ba d0 13 03 c0       	mov    edx,0xc00313d0
c0016e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e8e:	89 10                	mov    DWORD PTR [eax],edx
c0016e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e94:	83 ec 0c             	sub    esp,0xc
c0016e97:	50                   	push   eax
c0016e98:	e8 c7 0e 00 00       	call   c0017d64 <UnixFile::~UnixFile()>
c0016e9d:	83 c4 10             	add    esp,0x10
c0016ea0:	90                   	nop
c0016ea1:	83 c4 0c             	add    esp,0xc
c0016ea4:	c3                   	ret    
c0016ea5:	90                   	nop

c0016ea6 <VgaText::~VgaText()>:
c0016ea6:	83 ec 0c             	sub    esp,0xc
c0016ea9:	83 ec 0c             	sub    esp,0xc
c0016eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016eb0:	e8 cd ff ff ff       	call   c0016e82 <VgaText::~VgaText()>
c0016eb5:	83 c4 10             	add    esp,0x10
c0016eb8:	83 ec 08             	sub    esp,0x8
c0016ebb:	68 84 01 00 00       	push   0x184
c0016ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ec4:	e8 1b 23 00 00       	call   c00191e4 <operator delete(void*, unsigned long)>
c0016ec9:	83 c4 10             	add    esp,0x10
c0016ecc:	83 c4 0c             	add    esp,0xc
c0016ecf:	c3                   	ret    

c0016ed0 <VgaText::read(unsigned long long, void*, int*)>:
c0016ed0:	83 ec 10             	sub    esp,0x10
c0016ed3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ed7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016edb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016edf:	e8 82 53 00 00       	call   c001c266 <readKeyboard(VgaText*, char*, unsigned long)>
c0016ee4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ee8:	89 02                	mov    DWORD PTR [edx],eax
c0016eea:	31 c0                	xor    eax,eax
c0016eec:	83 c4 1c             	add    esp,0x1c
c0016eef:	c3                   	ret    

c0016ef0 <setTerminalScrollLock(bool)>:
c0016ef0:	c3                   	ret    

c0016ef1 <doTerminalCycle()>:
c0016ef1:	c3                   	ret    

c0016ef2 <addToTerminalCycle(VgaText*)>:
c0016ef2:	c3                   	ret    

c0016ef3 <scrollTerminalScrollLock(int)>:
c0016ef3:	c3                   	ret    

c0016ef4 <VgaText::updateTitle()>:
c0016ef4:	c3                   	ret    
c0016ef5:	90                   	nop

c0016ef6 <VgaText::load()>:
c0016ef6:	c3                   	ret    
c0016ef7:	90                   	nop

c0016ef8 <VgaText::updateCursor()>:
c0016ef8:	83 ec 14             	sub    esp,0x14
c0016efb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016eff:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016f02:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016f05:	e8 ca 0e 01 00       	call   c0027dd4 <HalConsoleCursorUpdate(int, int)>
c0016f0a:	83 c4 1c             	add    esp,0x1c
c0016f0d:	c3                   	ret    

c0016f0e <VgaText::doANSI_SGR(int)>:
c0016f0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f16:	85 d2                	test   edx,edx
c0016f18:	75 0b                	jne    c0016f25 <VgaText::doANSI_SGR(int)+0x17>
c0016f1a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016f1d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016f20:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016f23:	eb 59                	jmp    c0016f7e <VgaText::doANSI_SGR(int)+0x70>
c0016f25:	83 fa 07             	cmp    edx,0x7
c0016f28:	75 0b                	jne    c0016f35 <VgaText::doANSI_SGR(int)+0x27>
c0016f2a:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016f2d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016f30:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016f33:	eb 49                	jmp    c0016f7e <VgaText::doANSI_SGR(int)+0x70>
c0016f35:	83 fa 1b             	cmp    edx,0x1b
c0016f38:	74 e0                	je     c0016f1a <VgaText::doANSI_SGR(int)+0xc>
c0016f3a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016f3d:	83 f9 07             	cmp    ecx,0x7
c0016f40:	77 09                	ja     c0016f4b <VgaText::doANSI_SGR(int)+0x3d>
c0016f42:	8b 14 8d c0 3c 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc340]
c0016f49:	eb 20                	jmp    c0016f6b <VgaText::doANSI_SGR(int)+0x5d>
c0016f4b:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016f4e:	83 f9 07             	cmp    ecx,0x7
c0016f51:	77 09                	ja     c0016f5c <VgaText::doANSI_SGR(int)+0x4e>
c0016f53:	8b 14 8d c0 3c 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc340]
c0016f5a:	eb 22                	jmp    c0016f7e <VgaText::doANSI_SGR(int)+0x70>
c0016f5c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016f5f:	83 f9 07             	cmp    ecx,0x7
c0016f62:	77 0b                	ja     c0016f6f <VgaText::doANSI_SGR(int)+0x61>
c0016f64:	8b 14 95 78 3b 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc488]
c0016f6b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016f6e:	c3                   	ret    
c0016f6f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016f72:	83 f9 07             	cmp    ecx,0x7
c0016f75:	77 0a                	ja     c0016f81 <VgaText::doANSI_SGR(int)+0x73>
c0016f77:	8b 14 95 50 3b 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc4b0]
c0016f7e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016f81:	c3                   	ret    

c0016f82 <VgaText::setDefaultBgColour(VgaColour)>:
c0016f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f8a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016f8d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016f90:	c3                   	ret    
c0016f91:	90                   	nop

c0016f92 <VgaText::setDefaultFgColour(VgaColour)>:
c0016f92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f9a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016f9d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016fa0:	c3                   	ret    
c0016fa1:	90                   	nop

c0016fa2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016fa2:	53                   	push   ebx
c0016fa3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016fa7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016fab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016faf:	51                   	push   ecx
c0016fb0:	e8 cd ff ff ff       	call   c0016f82 <VgaText::setDefaultBgColour(VgaColour)>
c0016fb5:	58                   	pop    eax
c0016fb6:	5a                   	pop    edx
c0016fb7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016fbb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016fbf:	5b                   	pop    ebx
c0016fc0:	eb d0                	jmp    c0016f92 <VgaText::setDefaultFgColour(VgaColour)>

c0016fc2 <VgaText::setTitleTextColour(VgaColour)>:
c0016fc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fca:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016fcd:	c3                   	ret    

c0016fce <VgaText::setTitleColour(VgaColour)>:
c0016fce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016fd9:	c3                   	ret    

c0016fda <VgaText::setTitle(char*)>:
c0016fda:	c3                   	ret    
c0016fdb:	90                   	nop

c0016fdc <VgaText::combineColours(unsigned char, unsigned char)>:
c0016fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fe0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016fe5:	83 e0 0f             	and    eax,0xf
c0016fe8:	c1 e2 04             	shl    edx,0x4
c0016feb:	09 d0                	or     eax,edx
c0016fed:	c3                   	ret    

c0016fee <VgaText::scrollScreen()>:
c0016fee:	55                   	push   ebp
c0016fef:	57                   	push   edi
c0016ff0:	56                   	push   esi
c0016ff1:	be 01 00 00 00       	mov    esi,0x1
c0016ff6:	53                   	push   ebx
c0016ff7:	83 ec 0c             	sub    esp,0xc
c0016ffa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016ffe:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0017001:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0017007:	31 ff                	xor    edi,edi
c0017009:	01 e9                	add    ecx,ebp
c001700b:	8a 01                	mov    al,BYTE PTR [ecx]
c001700d:	83 fe 18             	cmp    esi,0x18
c0017010:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0017016:	75 20                	jne    c0017038 <VgaText::scrollScreen()+0x4a>
c0017018:	f7 c7 01 00 00 00    	test   edi,0x1
c001701e:	74 15                	je     c0017035 <VgaText::scrollScreen()+0x47>
c0017020:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017024:	50                   	push   eax
c0017025:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017029:	50                   	push   eax
c001702a:	e8 ad ff ff ff       	call   c0016fdc <VgaText::combineColours(unsigned char, unsigned char)>
c001702f:	5a                   	pop    edx
c0017030:	5a                   	pop    edx
c0017031:	88 01                	mov    BYTE PTR [ecx],al
c0017033:	eb 03                	jmp    c0017038 <VgaText::scrollScreen()+0x4a>
c0017035:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0017038:	47                   	inc    edi
c0017039:	41                   	inc    ecx
c001703a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0017040:	75 c9                	jne    c001700b <VgaText::scrollScreen()+0x1d>
c0017042:	46                   	inc    esi
c0017043:	83 fe 19             	cmp    esi,0x19
c0017046:	75 b9                	jne    c0017001 <VgaText::scrollScreen()+0x13>
c0017048:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001704e:	75 1f                	jne    c001706f <VgaText::scrollScreen()+0x81>
c0017050:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0017054:	74 05                	je     c001705b <VgaText::scrollScreen()+0x6d>
c0017056:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0017059:	eb 14                	jmp    c001706f <VgaText::scrollScreen()+0x81>
c001705b:	50                   	push   eax
c001705c:	50                   	push   eax
c001705d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0017061:	50                   	push   eax
c0017062:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0017066:	50                   	push   eax
c0017067:	e8 fc 0b 01 00       	call   c0027c68 <HalConsoleScroll(int, int)>
c001706c:	83 c4 10             	add    esp,0x10
c001706f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017073:	83 c4 0c             	add    esp,0xc
c0017076:	5b                   	pop    ebx
c0017077:	5e                   	pop    esi
c0017078:	5f                   	pop    edi
c0017079:	5d                   	pop    ebp
c001707a:	e9 79 fe ff ff       	jmp    c0016ef8 <VgaText::updateCursor()>
c001707f:	90                   	nop

c0017080 <VgaText::combineCharAndColour(char, unsigned char)>:
c0017080:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017085:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001708a:	c1 e0 08             	shl    eax,0x8
c001708d:	09 d0                	or     eax,edx
c001708f:	c3                   	ret    

c0017090 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0017090:	55                   	push   ebp
c0017091:	57                   	push   edi
c0017092:	56                   	push   esi
c0017093:	53                   	push   ebx
c0017094:	83 ec 1c             	sub    esp,0x1c
c0017097:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001709b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001709f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00170a3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170ab:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170af:	0f b6 c3             	movzx  eax,bl
c00170b2:	50                   	push   eax
c00170b3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00170b8:	50                   	push   eax
c00170b9:	e8 1e ff ff ff       	call   c0016fdc <VgaText::combineColours(unsigned char, unsigned char)>
c00170be:	5a                   	pop    edx
c00170bf:	59                   	pop    ecx
c00170c0:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00170c5:	0f b6 c0             	movzx  eax,al
c00170c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00170cc:	50                   	push   eax
c00170cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00170d1:	e8 aa ff ff ff       	call   c0017080 <VgaText::combineCharAndColour(char, unsigned char)>
c00170d6:	5a                   	pop    edx
c00170d7:	6b d7 50             	imul   edx,edi,0x50
c00170da:	59                   	pop    ecx
c00170db:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00170de:	01 f2                	add    edx,esi
c00170e0:	0f b7 d2             	movzx  edx,dx
c00170e3:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00170e7:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00170ed:	75 28                	jne    c0017117 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00170ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00170f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170f7:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00170fb:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00170ff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017103:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017107:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001710b:	83 c4 1c             	add    esp,0x1c
c001710e:	5b                   	pop    ebx
c001710f:	5e                   	pop    esi
c0017110:	5f                   	pop    edi
c0017111:	5d                   	pop    ebp
c0017112:	e9 59 0c 01 00       	jmp    c0027d70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017117:	83 c4 1c             	add    esp,0x1c
c001711a:	5b                   	pop    ebx
c001711b:	5e                   	pop    esi
c001711c:	5f                   	pop    edi
c001711d:	5d                   	pop    ebp
c001711e:	c3                   	ret    
c001711f:	90                   	nop

c0017120 <VgaText::getCursorX()>:
c0017120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017124:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017127:	c3                   	ret    

c0017128 <VgaText::getCursorY()>:
c0017128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001712c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001712f:	c3                   	ret    

c0017130 <VgaText::setCursor(int, int)>:
c0017130:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017138:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001713b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001713f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017142:	e9 b1 fd ff ff       	jmp    c0016ef8 <VgaText::updateCursor()>

c0017147 <setActiveTerminal(VgaText*)>:
c0017147:	53                   	push   ebx
c0017148:	83 ec 08             	sub    esp,0x8
c001714b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001714f:	85 db                	test   ebx,ebx
c0017151:	75 11                	jne    c0017164 <setActiveTerminal(VgaText*)+0x1d>
c0017153:	c7 44 24 10 9c 13 03 c0 	mov    DWORD PTR [esp+0x10],0xc003139c
c001715b:	83 c4 08             	add    esp,0x8
c001715e:	5b                   	pop    ebx
c001715f:	e9 06 91 00 00       	jmp    c002026a <KePanic(char const*)>
c0017164:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0017169:	85 c0                	test   eax,eax
c001716b:	74 0c                	je     c0017179 <setActiveTerminal(VgaText*)+0x32>
c001716d:	83 ec 0c             	sub    esp,0xc
c0017170:	50                   	push   eax
c0017171:	e8 82 fd ff ff       	call   c0016ef8 <VgaText::updateCursor()>
c0017176:	83 c4 10             	add    esp,0x10
c0017179:	50                   	push   eax
c001717a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001717d:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0017183:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017186:	53                   	push   ebx
c0017187:	e8 a4 ff ff ff       	call   c0017130 <VgaText::setCursor(int, int)>
c001718c:	83 c4 18             	add    esp,0x18
c001718f:	5b                   	pop    ebx
c0017190:	c3                   	ret    
c0017191:	90                   	nop

c0017192 <VgaText::clearScreen()>:
c0017192:	57                   	push   edi
c0017193:	56                   	push   esi
c0017194:	31 f6                	xor    esi,esi
c0017196:	53                   	push   ebx
c0017197:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001719b:	52                   	push   edx
c001719c:	6a 00                	push   0x0
c001719e:	6a 00                	push   0x0
c00171a0:	53                   	push   ebx
c00171a1:	e8 8a ff ff ff       	call   c0017130 <VgaText::setCursor(int, int)>
c00171a6:	83 c4 10             	add    esp,0x10
c00171a9:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00171b0:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00171b3:	7e 20                	jle    c00171d5 <VgaText::clearScreen()+0x43>
c00171b5:	31 ff                	xor    edi,edi
c00171b7:	50                   	push   eax
c00171b8:	50                   	push   eax
c00171b9:	56                   	push   esi
c00171ba:	57                   	push   edi
c00171bb:	47                   	inc    edi
c00171bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00171bf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00171c2:	6a 20                	push   0x20
c00171c4:	53                   	push   ebx
c00171c5:	e8 c6 fe ff ff       	call   c0017090 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00171ca:	83 c4 20             	add    esp,0x20
c00171cd:	83 ff 50             	cmp    edi,0x50
c00171d0:	75 e5                	jne    c00171b7 <VgaText::clearScreen()+0x25>
c00171d2:	46                   	inc    esi
c00171d3:	eb db                	jmp    c00171b0 <VgaText::clearScreen()+0x1e>
c00171d5:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00171dc:	5b                   	pop    ebx
c00171dd:	5e                   	pop    esi
c00171de:	5f                   	pop    edi
c00171df:	c3                   	ret    

c00171e0 <VgaText::setCursorX(int)>:
c00171e0:	83 ec 10             	sub    esp,0x10
c00171e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171e7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00171ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ee:	50                   	push   eax
c00171ef:	e8 3c ff ff ff       	call   c0017130 <VgaText::setCursor(int, int)>
c00171f4:	83 c4 1c             	add    esp,0x1c
c00171f7:	c3                   	ret    

c00171f8 <VgaText::setCursorY(int)>:
c00171f8:	83 ec 10             	sub    esp,0x10
c00171fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00171ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017203:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017206:	50                   	push   eax
c0017207:	e8 24 ff ff ff       	call   c0017130 <VgaText::setCursor(int, int)>
c001720c:	83 c4 1c             	add    esp,0x1c
c001720f:	c3                   	ret    

c0017210 <VgaText::incrementCursor(bool)>:
c0017210:	56                   	push   esi
c0017211:	53                   	push   ebx
c0017212:	51                   	push   ecx
c0017213:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017217:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001721b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001721e:	40                   	inc    eax
c001721f:	83 f8 50             	cmp    eax,0x50
c0017222:	74 05                	je     c0017229 <VgaText::incrementCursor(bool)+0x19>
c0017224:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017227:	eb 24                	jmp    c001724d <VgaText::incrementCursor(bool)+0x3d>
c0017229:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017230:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017233:	8d 50 01             	lea    edx,[eax+0x1]
c0017236:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017239:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001723c:	75 0f                	jne    c001724d <VgaText::incrementCursor(bool)+0x3d>
c001723e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017241:	83 ec 0c             	sub    esp,0xc
c0017244:	53                   	push   ebx
c0017245:	e8 a4 fd ff ff       	call   c0016fee <VgaText::scrollScreen()>
c001724a:	83 c4 10             	add    esp,0x10
c001724d:	89 f0                	mov    eax,esi
c001724f:	84 c0                	test   al,al
c0017251:	74 0c                	je     c001725f <VgaText::incrementCursor(bool)+0x4f>
c0017253:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017257:	5a                   	pop    edx
c0017258:	5b                   	pop    ebx
c0017259:	5e                   	pop    esi
c001725a:	e9 99 fc ff ff       	jmp    c0016ef8 <VgaText::updateCursor()>
c001725f:	58                   	pop    eax
c0017260:	5b                   	pop    ebx
c0017261:	5e                   	pop    esi
c0017262:	c3                   	ret    
c0017263:	90                   	nop

c0017264 <VgaText::decrementCursor(bool)>:
c0017264:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017268:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001726c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001726f:	85 c0                	test   eax,eax
c0017271:	74 04                	je     c0017277 <VgaText::decrementCursor(bool)+0x13>
c0017273:	48                   	dec    eax
c0017274:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0017277:	84 c9                	test   cl,cl
c0017279:	74 09                	je     c0017284 <VgaText::decrementCursor(bool)+0x20>
c001727b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001727f:	e9 74 fc ff ff       	jmp    c0016ef8 <VgaText::updateCursor()>
c0017284:	c3                   	ret    
c0017285:	90                   	nop

c0017286 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0017286:	53                   	push   ebx
c0017287:	83 ec 08             	sub    esp,0x8
c001728a:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001728f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017293:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017297:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001729b:	83 f8 07             	cmp    eax,0x7
c001729e:	75 21                	jne    c00172c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00172a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00172a8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00172b0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00172b8:	83 c4 08             	add    esp,0x8
c00172bb:	5b                   	pop    ebx
c00172bc:	e9 d6 3a 00 00       	jmp    c001ad97 <Krnl::beep(int, int, bool)>
c00172c1:	83 f8 0d             	cmp    eax,0xd
c00172c4:	75 09                	jne    c00172cf <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00172c6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00172cd:	eb 2d                	jmp    c00172fc <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00172cf:	83 f8 0a             	cmp    eax,0xa
c00172d2:	75 31                	jne    c0017305 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00172d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00172db:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172de:	8d 50 01             	lea    edx,[eax+0x1]
c00172e1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00172e4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00172e7:	75 0f                	jne    c00172f8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00172e9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00172ec:	83 ec 0c             	sub    esp,0xc
c00172ef:	53                   	push   ebx
c00172f0:	e8 f9 fc ff ff       	call   c0016fee <VgaText::scrollScreen()>
c00172f5:	83 c4 10             	add    esp,0x10
c00172f8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00172fc:	83 c4 08             	add    esp,0x8
c00172ff:	5b                   	pop    ebx
c0017300:	e9 f3 fb ff ff       	jmp    c0016ef8 <VgaText::updateCursor()>
c0017305:	83 f8 08             	cmp    eax,0x8
c0017308:	75 25                	jne    c001732f <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001730a:	50                   	push   eax
c001730b:	50                   	push   eax
c001730c:	6a 01                	push   0x1
c001730e:	53                   	push   ebx
c001730f:	e8 50 ff ff ff       	call   c0017264 <VgaText::decrementCursor(bool)>
c0017314:	5a                   	pop    edx
c0017315:	59                   	pop    ecx
c0017316:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017319:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001731c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001731f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017322:	6a 20                	push   0x20
c0017324:	53                   	push   ebx
c0017325:	e8 66 fd ff ff       	call   c0017090 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001732a:	83 c4 28             	add    esp,0x28
c001732d:	5b                   	pop    ebx
c001732e:	c3                   	ret    
c001732f:	83 ec 08             	sub    esp,0x8
c0017332:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017335:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017338:	51                   	push   ecx
c0017339:	52                   	push   edx
c001733a:	50                   	push   eax
c001733b:	53                   	push   ebx
c001733c:	e8 4f fd ff ff       	call   c0017090 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017341:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0017345:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001734d:	83 c4 28             	add    esp,0x28
c0017350:	5b                   	pop    ebx
c0017351:	e9 ba fe ff ff       	jmp    c0017210 <VgaText::incrementCursor(bool)>

c0017356 <VgaText::putchar(char)>:
c0017356:	57                   	push   edi
c0017357:	56                   	push   esi
c0017358:	53                   	push   ebx
c0017359:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001735d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017361:	0f be c2             	movsx  eax,dl
c0017364:	83 f8 5b             	cmp    eax,0x5b
c0017367:	75 18                	jne    c0017381 <VgaText::putchar(char)+0x2b>
c0017369:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001736d:	74 20                	je     c001738f <VgaText::putchar(char)+0x39>
c001736f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0017375:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001737c:	e9 b8 00 00 00       	jmp    c0017439 <VgaText::putchar(char)+0xe3>
c0017381:	83 f8 1b             	cmp    eax,0x1b
c0017384:	75 09                	jne    c001738f <VgaText::putchar(char)+0x39>
c0017386:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001738a:	e9 aa 00 00 00       	jmp    c0017439 <VgaText::putchar(char)+0xe3>
c001738f:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c0017393:	89 f9                	mov    ecx,edi
c0017395:	84 c9                	test   cl,cl
c0017397:	0f 84 8c 00 00 00    	je     c0017429 <VgaText::putchar(char)+0xd3>
c001739d:	8d 4a c0             	lea    ecx,[edx-0x40]
c00173a0:	80 f9 3e             	cmp    cl,0x3e
c00173a3:	77 70                	ja     c0017415 <VgaText::putchar(char)+0xbf>
c00173a5:	83 f8 6d             	cmp    eax,0x6d
c00173a8:	75 3f                	jne    c00173e9 <VgaText::putchar(char)+0x93>
c00173aa:	31 f6                	xor    esi,esi
c00173ac:	31 d2                	xor    edx,edx
c00173ae:	31 c0                	xor    eax,eax
c00173b0:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00173b3:	7e 25                	jle    c00173da <VgaText::putchar(char)+0x84>
c00173b5:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00173ba:	83 fa 3b             	cmp    edx,0x3b
c00173bd:	75 0f                	jne    c00173ce <VgaText::putchar(char)+0x78>
c00173bf:	50                   	push   eax
c00173c0:	53                   	push   ebx
c00173c1:	e8 48 fb ff ff       	call   c0016f0e <VgaText::doANSI_SGR(int)>
c00173c6:	31 d2                	xor    edx,edx
c00173c8:	59                   	pop    ecx
c00173c9:	58                   	pop    eax
c00173ca:	31 c0                	xor    eax,eax
c00173cc:	eb 09                	jmp    c00173d7 <VgaText::putchar(char)+0x81>
c00173ce:	6b c0 0a             	imul   eax,eax,0xa
c00173d1:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00173d5:	89 fa                	mov    edx,edi
c00173d7:	46                   	inc    esi
c00173d8:	eb d6                	jmp    c00173b0 <VgaText::putchar(char)+0x5a>
c00173da:	84 d2                	test   dl,dl
c00173dc:	74 2f                	je     c001740d <VgaText::putchar(char)+0xb7>
c00173de:	50                   	push   eax
c00173df:	53                   	push   ebx
c00173e0:	e8 29 fb ff ff       	call   c0016f0e <VgaText::doANSI_SGR(int)>
c00173e5:	58                   	pop    eax
c00173e6:	5a                   	pop    edx
c00173e7:	eb 24                	jmp    c001740d <VgaText::putchar(char)+0xb7>
c00173e9:	83 f8 4a             	cmp    eax,0x4a
c00173ec:	75 1f                	jne    c001740d <VgaText::putchar(char)+0xb7>
c00173ee:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00173f2:	75 19                	jne    c001740d <VgaText::putchar(char)+0xb7>
c00173f4:	83 ec 0c             	sub    esp,0xc
c00173f7:	53                   	push   ebx
c00173f8:	e8 95 fd ff ff       	call   c0017192 <VgaText::clearScreen()>
c00173fd:	83 c4 0c             	add    esp,0xc
c0017400:	6a 00                	push   0x0
c0017402:	6a 00                	push   0x0
c0017404:	53                   	push   ebx
c0017405:	e8 26 fd ff ff       	call   c0017130 <VgaText::setCursor(int, int)>
c001740a:	83 c4 10             	add    esp,0x10
c001740d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017413:	eb 24                	jmp    c0017439 <VgaText::putchar(char)+0xe3>
c0017415:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017418:	83 f8 0e             	cmp    eax,0xe
c001741b:	7f 1c                	jg     c0017439 <VgaText::putchar(char)+0xe3>
c001741d:	8d 48 01             	lea    ecx,[eax+0x1]
c0017420:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017423:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c0017427:	eb 10                	jmp    c0017439 <VgaText::putchar(char)+0xe3>
c0017429:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001742c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001742f:	50                   	push   eax
c0017430:	53                   	push   ebx
c0017431:	e8 50 fe ff ff       	call   c0017286 <VgaText::putchar(char, VgaColour, VgaColour)>
c0017436:	83 c4 10             	add    esp,0x10
c0017439:	5b                   	pop    ebx
c001743a:	5e                   	pop    esi
c001743b:	5f                   	pop    edi
c001743c:	c3                   	ret    
c001743d:	90                   	nop

c001743e <VgaText::putx(unsigned int)>:
c001743e:	57                   	push   edi
c001743f:	b9 11 00 00 00       	mov    ecx,0x11
c0017444:	56                   	push   esi
c0017445:	be aa 13 03 c0       	mov    esi,0xc00313aa
c001744a:	53                   	push   ebx
c001744b:	83 ec 20             	sub    esp,0x20
c001744e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0017452:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0017456:	fc                   	cld    
c0017457:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017459:	be 08 00 00 00       	mov    esi,0x8
c001745e:	50                   	push   eax
c001745f:	50                   	push   eax
c0017460:	89 d8                	mov    eax,ebx
c0017462:	c1 e8 1c             	shr    eax,0x1c
c0017465:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001746a:	c1 e3 04             	shl    ebx,0x4
c001746d:	50                   	push   eax
c001746e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017472:	e8 df fe ff ff       	call   c0017356 <VgaText::putchar(char)>
c0017477:	83 c4 10             	add    esp,0x10
c001747a:	4e                   	dec    esi
c001747b:	75 e1                	jne    c001745e <VgaText::putx(unsigned int)+0x20>
c001747d:	83 c4 20             	add    esp,0x20
c0017480:	5b                   	pop    ebx
c0017481:	5e                   	pop    esi
c0017482:	5f                   	pop    edi
c0017483:	c3                   	ret    

c0017484 <VgaText::puts(char const*)>:
c0017484:	53                   	push   ebx
c0017485:	83 ec 08             	sub    esp,0x8
c0017488:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001748c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001748f:	85 c0                	test   eax,eax
c0017491:	74 12                	je     c00174a5 <VgaText::puts(char const*)+0x21>
c0017493:	51                   	push   ecx
c0017494:	43                   	inc    ebx
c0017495:	51                   	push   ecx
c0017496:	50                   	push   eax
c0017497:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001749b:	e8 b6 fe ff ff       	call   c0017356 <VgaText::putchar(char)>
c00174a0:	83 c4 10             	add    esp,0x10
c00174a3:	eb e7                	jmp    c001748c <VgaText::puts(char const*)+0x8>
c00174a5:	83 c4 08             	add    esp,0x8
c00174a8:	5b                   	pop    ebx
c00174a9:	c3                   	ret    

c00174aa <VgaText::write(unsigned long long, void*, int*)>:
c00174aa:	55                   	push   ebp
c00174ab:	57                   	push   edi
c00174ac:	56                   	push   esi
c00174ad:	53                   	push   ebx
c00174ae:	83 ec 0c             	sub    esp,0xc
c00174b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00174b5:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00174b9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00174bd:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00174c4:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00174c7:	39 eb                	cmp    ebx,ebp
c00174c9:	74 13                	je     c00174de <VgaText::write(unsigned long long, void*, int*)+0x34>
c00174cb:	50                   	push   eax
c00174cc:	43                   	inc    ebx
c00174cd:	50                   	push   eax
c00174ce:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00174d2:	50                   	push   eax
c00174d3:	56                   	push   esi
c00174d4:	e8 7d fe ff ff       	call   c0017356 <VgaText::putchar(char)>
c00174d9:	83 c4 10             	add    esp,0x10
c00174dc:	eb e9                	jmp    c00174c7 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00174de:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00174e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00174e9:	89 38                	mov    DWORD PTR [eax],edi
c00174eb:	83 c4 0c             	add    esp,0xc
c00174ee:	31 c0                	xor    eax,eax
c00174f0:	5b                   	pop    ebx
c00174f1:	5e                   	pop    esi
c00174f2:	5f                   	pop    edi
c00174f3:	5d                   	pop    ebp
c00174f4:	c3                   	ret    
c00174f5:	90                   	nop

c00174f6 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00174f6:	55                   	push   ebp
c00174f7:	57                   	push   edi
c00174f8:	56                   	push   esi
c00174f9:	53                   	push   ebx
c00174fa:	83 ec 0c             	sub    esp,0xc
c00174fd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017501:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017506:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c001750d:	50                   	push   eax
c001750e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017513:	50                   	push   eax
c0017514:	e8 c3 fa ff ff       	call   c0016fdc <VgaText::combineColours(unsigned char, unsigned char)>
c0017519:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001751d:	5a                   	pop    edx
c001751e:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017521:	59                   	pop    ecx
c0017522:	0f b6 f8             	movzx  edi,al
c0017525:	0f b7 db             	movzx  ebx,bx
c0017528:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001752c:	01 db                	add    ebx,ebx
c001752e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017531:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017534:	85 c0                	test   eax,eax
c0017536:	0f 84 ef 00 00 00    	je     c001762b <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001753c:	83 f8 0d             	cmp    eax,0xd
c001753f:	75 0c                	jne    c001754d <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017541:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017548:	e9 d8 00 00 00       	jmp    c0017625 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001754d:	83 f8 0a             	cmp    eax,0xa
c0017550:	75 44                	jne    c0017596 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0017552:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017559:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001755c:	8d 48 01             	lea    ecx,[eax+0x1]
c001755f:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c0017562:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0017565:	75 0f                	jne    c0017576 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0017567:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c001756a:	83 ec 0c             	sub    esp,0xc
c001756d:	55                   	push   ebp
c001756e:	e8 7b fa ff ff       	call   c0016fee <VgaText::scrollScreen()>
c0017573:	83 c4 10             	add    esp,0x10
c0017576:	83 ec 0c             	sub    esp,0xc
c0017579:	55                   	push   ebp
c001757a:	e8 79 f9 ff ff       	call   c0016ef8 <VgaText::updateCursor()>
c001757f:	83 c4 10             	add    esp,0x10
c0017582:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017586:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017589:	0f b7 db             	movzx  ebx,bx
c001758c:	01 db                	add    ebx,ebx
c001758e:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017591:	e9 8f 00 00 00       	jmp    c0017625 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017596:	83 f8 08             	cmp    eax,0x8
c0017599:	75 34                	jne    c00175cf <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c001759b:	51                   	push   ecx
c001759c:	51                   	push   ecx
c001759d:	6a 01                	push   0x1
c001759f:	55                   	push   ebp
c00175a0:	e8 bf fc ff ff       	call   c0017264 <VgaText::decrementCursor(bool)>
c00175a5:	5b                   	pop    ebx
c00175a6:	58                   	pop    eax
c00175a7:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00175aa:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00175ad:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00175b0:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00175b3:	6a 20                	push   0x20
c00175b5:	55                   	push   ebp
c00175b6:	e8 d5 fa ff ff       	call   c0017090 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00175bb:	83 c4 20             	add    esp,0x20
c00175be:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00175c2:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00175c5:	0f b7 db             	movzx  ebx,bx
c00175c8:	01 db                	add    ebx,ebx
c00175ca:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00175cd:	eb 56                	jmp    c0017625 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00175cf:	52                   	push   edx
c00175d0:	52                   	push   edx
c00175d1:	57                   	push   edi
c00175d2:	50                   	push   eax
c00175d3:	e8 a8 fa ff ff       	call   c0017080 <VgaText::combineCharAndColour(char, unsigned char)>
c00175d8:	83 c4 10             	add    esp,0x10
c00175db:	66 89 03             	mov    WORD PTR [ebx],ax
c00175de:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c00175e4:	75 1d                	jne    c0017603 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00175ec:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00175ef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175f7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00175fa:	50                   	push   eax
c00175fb:	e8 70 07 01 00       	call   c0027d70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017600:	83 c4 20             	add    esp,0x20
c0017603:	50                   	push   eax
c0017604:	83 c3 02             	add    ebx,0x2
c0017607:	50                   	push   eax
c0017608:	6a 00                	push   0x0
c001760a:	55                   	push   ebp
c001760b:	e8 00 fc ff ff       	call   c0017210 <VgaText::incrementCursor(bool)>
c0017610:	83 c4 10             	add    esp,0x10
c0017613:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c0017617:	75 0c                	jne    c0017625 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017619:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c001761d:	0f b7 db             	movzx  ebx,bx
c0017620:	01 db                	add    ebx,ebx
c0017622:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017625:	46                   	inc    esi
c0017626:	e9 06 ff ff ff       	jmp    c0017531 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c001762b:	83 ec 0c             	sub    esp,0xc
c001762e:	55                   	push   ebp
c001762f:	e8 c4 f8 ff ff       	call   c0016ef8 <VgaText::updateCursor()>
c0017634:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c001763b:	83 c4 1c             	add    esp,0x1c
c001763e:	5b                   	pop    ebx
c001763f:	5e                   	pop    esi
c0017640:	5f                   	pop    edi
c0017641:	5d                   	pop    ebp
c0017642:	c3                   	ret    
c0017643:	90                   	nop

c0017644 <VgaText::VgaText(char const*)>:
c0017644:	56                   	push   esi
c0017645:	53                   	push   ebx
c0017646:	83 ec 04             	sub    esp,0x4
c0017649:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001764d:	83 ec 08             	sub    esp,0x8
c0017650:	6a 00                	push   0x0
c0017652:	50                   	push   eax
c0017653:	e8 26 05 00 00       	call   c0017b7e <UnixFile::UnixFile(int)>
c0017658:	83 c4 10             	add    esp,0x10
c001765b:	ba d0 13 03 c0       	mov    edx,0xc00313d0
c0017660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017664:	89 10                	mov    DWORD PTR [eax],edx
c0017666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001766a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0017671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017675:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001767c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017680:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0017684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017688:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001768c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017690:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001769b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00176a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00176ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176b1:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00176b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176bc:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00176c3:	83 ec 0c             	sub    esp,0xc
c00176c6:	6a 01                	push   0x1
c00176c8:	e8 00 09 00 00       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c00176cd:	83 c4 10             	add    esp,0x10
c00176d0:	89 c2                	mov    edx,eax
c00176d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176d6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00176d9:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00176df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00176e6:	89 c6                	mov    esi,eax
c00176e8:	e8 cd f0 ff ff       	call   c00167ba <Phys::allocatePage()>
c00176ed:	68 05 0c 00 00       	push   0xc05
c00176f2:	56                   	push   esi
c00176f3:	50                   	push   eax
c00176f4:	53                   	push   ebx
c00176f5:	e8 dc 0f 00 00       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017701:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017704:	83 ec 04             	sub    esp,0x4
c0017707:	68 a0 0f 00 00       	push   0xfa0
c001770c:	6a 00                	push   0x0
c001770e:	50                   	push   eax
c001770f:	e8 dc 8d fe ff       	call   c00004f0 <memset>
c0017714:	83 c4 10             	add    esp,0x10
c0017717:	83 ec 04             	sub    esp,0x4
c001771a:	6a 00                	push   0x0
c001771c:	6a 07                	push   0x7
c001771e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017722:	e8 7b f8 ff ff       	call   c0016fa2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017727:	83 c4 10             	add    esp,0x10
c001772a:	83 ec 04             	sub    esp,0x4
c001772d:	6a 00                	push   0x0
c001772f:	6a 00                	push   0x0
c0017731:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017735:	e8 f6 f9 ff ff       	call   c0017130 <VgaText::setCursor(int, int)>
c001773a:	83 c4 10             	add    esp,0x10
c001773d:	83 ec 0c             	sub    esp,0xc
c0017740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017744:	e8 49 fa ff ff       	call   c0017192 <VgaText::clearScreen()>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017750:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0017754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017758:	05 82 00 00 00       	add    eax,0x82
c001775d:	83 ec 04             	sub    esp,0x4
c0017760:	68 80 00 00 00       	push   0x80
c0017765:	6a 00                	push   0x0
c0017767:	50                   	push   eax
c0017768:	e8 83 8d fe ff       	call   c00004f0 <memset>
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017774:	05 02 01 00 00       	add    eax,0x102
c0017779:	83 ec 04             	sub    esp,0x4
c001777c:	68 80 00 00 00       	push   0x80
c0017781:	6a 00                	push   0x0
c0017783:	50                   	push   eax
c0017784:	e8 67 8d fe ff       	call   c00004f0 <memset>
c0017789:	83 c4 10             	add    esp,0x10
c001778c:	90                   	nop
c001778d:	83 c4 04             	add    esp,0x4
c0017790:	5b                   	pop    ebx
c0017791:	5e                   	pop    esi
c0017792:	c3                   	ret    
c0017793:	90                   	nop

c0017794 <VgaText::receiveKey(unsigned char)>:
c0017794:	55                   	push   ebp
c0017795:	57                   	push   edi
c0017796:	56                   	push   esi
c0017797:	53                   	push   ebx
c0017798:	83 ec 2c             	sub    esp,0x2c
c001779b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001779f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00177a3:	89 fd                	mov    ebp,edi
c00177a5:	81 e5 ff 00 00 00    	and    ebp,0xff
c00177ab:	0f 84 48 01 00 00    	je     c00178f9 <VgaText::receiveKey(unsigned char)+0x165>
c00177b1:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00177b7:	83 fd 08             	cmp    ebp,0x8
c00177ba:	75 6a                	jne    c0017826 <VgaText::receiveKey(unsigned char)+0x92>
c00177bc:	83 ec 0c             	sub    esp,0xc
c00177bf:	56                   	push   esi
c00177c0:	e8 bb 8d fe ff       	call   c0000580 <strlen>
c00177c5:	83 c4 10             	add    esp,0x10
c00177c8:	85 c0                	test   eax,eax
c00177ca:	0f 84 ef 00 00 00    	je     c00178bf <VgaText::receiveKey(unsigned char)+0x12b>
c00177d0:	50                   	push   eax
c00177d1:	50                   	push   eax
c00177d2:	6a 08                	push   0x8
c00177d4:	53                   	push   ebx
c00177d5:	e8 7c fb ff ff       	call   c0017356 <VgaText::putchar(char)>
c00177da:	89 34 24             	mov    DWORD PTR [esp],esi
c00177dd:	e8 9e 8d fe ff       	call   c0000580 <strlen>
c00177e2:	83 c4 10             	add    esp,0x10
c00177e5:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00177ed:	83 fa 1f             	cmp    edx,0x1f
c00177f0:	89 d0                	mov    eax,edx
c00177f2:	7f 1c                	jg     c0017810 <VgaText::receiveKey(unsigned char)+0x7c>
c00177f4:	83 e8 08             	sub    eax,0x8
c00177f7:	3c 02                	cmp    al,0x2
c00177f9:	76 15                	jbe    c0017810 <VgaText::receiveKey(unsigned char)+0x7c>
c00177fb:	83 fa 0d             	cmp    edx,0xd
c00177fe:	74 10                	je     c0017810 <VgaText::receiveKey(unsigned char)+0x7c>
c0017800:	57                   	push   edi
c0017801:	57                   	push   edi
c0017802:	68 bb 13 03 c0       	push   0xc00313bb
c0017807:	53                   	push   ebx
c0017808:	e8 77 fc ff ff       	call   c0017484 <VgaText::puts(char const*)>
c001780d:	83 c4 10             	add    esp,0x10
c0017810:	83 ec 0c             	sub    esp,0xc
c0017813:	56                   	push   esi
c0017814:	e8 67 8d fe ff       	call   c0000580 <strlen>
c0017819:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017821:	e9 96 00 00 00       	jmp    c00178bc <VgaText::receiveKey(unsigned char)+0x128>
c0017826:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c001782c:	83 ec 0c             	sub    esp,0xc
c001782f:	50                   	push   eax
c0017830:	e8 4b 8d fe ff       	call   c0000580 <strlen>
c0017835:	89 34 24             	mov    DWORD PTR [esp],esi
c0017838:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001783c:	e8 3f 8d fe ff       	call   c0000580 <strlen>
c0017841:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017845:	83 c4 10             	add    esp,0x10
c0017848:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001784c:	3d 80 00 00 00       	cmp    eax,0x80
c0017851:	0f 87 a2 00 00 00    	ja     c00178f9 <VgaText::receiveKey(unsigned char)+0x165>
c0017857:	8d 47 ff             	lea    eax,[edi-0x1]
c001785a:	3c 1e                	cmp    al,0x1e
c001785c:	77 35                	ja     c0017893 <VgaText::receiveKey(unsigned char)+0xff>
c001785e:	8d 47 f7             	lea    eax,[edi-0x9]
c0017861:	3c 01                	cmp    al,0x1
c0017863:	76 2e                	jbe    c0017893 <VgaText::receiveKey(unsigned char)+0xff>
c0017865:	83 fd 0d             	cmp    ebp,0xd
c0017868:	74 29                	je     c0017893 <VgaText::receiveKey(unsigned char)+0xff>
c001786a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001786d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017870:	68 c1 13 03 c0       	push   0xc00313c1
c0017875:	53                   	push   ebx
c0017876:	e8 7b fc ff ff       	call   c00174f6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001787b:	8d 47 40             	lea    eax,[edi+0x40]
c001787e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017881:	0f b6 c0             	movzx  eax,al
c0017884:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017887:	50                   	push   eax
c0017888:	53                   	push   ebx
c0017889:	e8 f8 f9 ff ff       	call   c0017286 <VgaText::putchar(char, VgaColour, VgaColour)>
c001788e:	83 c4 20             	add    esp,0x20
c0017891:	eb 11                	jmp    c00178a4 <VgaText::receiveKey(unsigned char)+0x110>
c0017893:	51                   	push   ecx
c0017894:	89 f8                	mov    eax,edi
c0017896:	51                   	push   ecx
c0017897:	0f be c0             	movsx  eax,al
c001789a:	50                   	push   eax
c001789b:	53                   	push   ebx
c001789c:	e8 b5 fa ff ff       	call   c0017356 <VgaText::putchar(char)>
c00178a1:	83 c4 10             	add    esp,0x10
c00178a4:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00178a9:	89 f8                	mov    eax,edi
c00178ab:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00178af:	52                   	push   edx
c00178b0:	52                   	push   edx
c00178b1:	8d 44 24 26          	lea    eax,[esp+0x26]
c00178b5:	50                   	push   eax
c00178b6:	56                   	push   esi
c00178b7:	e8 b4 8f fe ff       	call   c0000870 <strcat>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00178c6:	75 0f                	jne    c00178d7 <VgaText::receiveKey(unsigned char)+0x143>
c00178c8:	83 fd 1c             	cmp    ebp,0x1c
c00178cb:	77 2c                	ja     c00178f9 <VgaText::receiveKey(unsigned char)+0x165>
c00178cd:	b8 08 04 00 10       	mov    eax,0x10000408
c00178d2:	0f a3 e8             	bt     eax,ebp
c00178d5:	73 22                	jae    c00178f9 <VgaText::receiveKey(unsigned char)+0x165>
c00178d7:	50                   	push   eax
c00178d8:	81 c3 02 01 00 00    	add    ebx,0x102
c00178de:	50                   	push   eax
c00178df:	56                   	push   esi
c00178e0:	53                   	push   ebx
c00178e1:	e8 8a 8f fe ff       	call   c0000870 <strcat>
c00178e6:	83 c4 0c             	add    esp,0xc
c00178e9:	68 80 00 00 00       	push   0x80
c00178ee:	6a 00                	push   0x0
c00178f0:	56                   	push   esi
c00178f1:	e8 fa 8b fe ff       	call   c00004f0 <memset>
c00178f6:	83 c4 10             	add    esp,0x10
c00178f9:	83 c4 2c             	add    esp,0x2c
c00178fc:	5b                   	pop    ebx
c00178fd:	5e                   	pop    esi
c00178fe:	5f                   	pop    edi
c00178ff:	5d                   	pop    ebp
c0017900:	c3                   	ret    
c0017901:	90                   	nop

c0017902 <VgaText::doUpdate()>:
c0017902:	c3                   	ret    
c0017903:	90                   	nop

c0017904 <TSS::TSS()>:
c0017904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017908:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001790f:	90                   	nop
c0017910:	c3                   	ret    
c0017911:	90                   	nop
c0017912:	66 90                	xchg   ax,ax

c0017914 <TSS::setESP(unsigned long)>:
c0017914:	55                   	push   ebp
c0017915:	89 e5                	mov    ebp,esp
c0017917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001791a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001791d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017920:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017923:	90                   	nop
c0017924:	5d                   	pop    ebp
c0017925:	c3                   	ret    
c0017926:	66 90                	xchg   ax,ax

c0017928 <TSS::flush()>:
c0017928:	55                   	push   ebp
c0017929:	89 e5                	mov    ebp,esp
c001792b:	83 ec 10             	sub    esp,0x10
c001792e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017931:	8b 00                	mov    eax,DWORD PTR [eax]
c0017933:	83 c8 03             	or     eax,0x3
c0017936:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001793a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001793e:	66 89 d0             	mov    ax,dx
c0017941:	0f 00 d8             	ltr    ax
c0017944:	90                   	nop
c0017945:	c9                   	leave  
c0017946:	c3                   	ret    
c0017947:	90                   	nop

c0017948 <TSS::setup(unsigned long, unsigned long)>:
c0017948:	55                   	push   ebp
c0017949:	89 e5                	mov    ebp,esp
c001794b:	83 ec 18             	sub    esp,0x18
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	6a 68                	push   0x68
c0017953:	e8 43 eb ff ff       	call   c001649b <malloc>
c0017958:	83 c4 10             	add    esp,0x10
c001795b:	89 c2                	mov    edx,eax
c001795d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017960:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017963:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017966:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017969:	83 ec 04             	sub    esp,0x4
c001796c:	6a 68                	push   0x68
c001796e:	6a 00                	push   0x0
c0017970:	50                   	push   eax
c0017971:	e8 7a 8b fe ff       	call   c00004f0 <memset>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001797c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001797f:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0017985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001798b:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017994:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017997:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001799a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001799d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179a3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00179a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179af:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00179b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179bb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00179c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179c7:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00179cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179d3:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00179d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179df:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00179e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179eb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00179ee:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00179f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00179fa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00179fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a03:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017a0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a10:	0f 20 da             	mov    edx,cr3
c0017a13:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0017a16:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017a19:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017a1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a1f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a22:	83 ec 08             	sub    esp,0x8
c0017a25:	50                   	push   eax
c0017a26:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017a29:	50                   	push   eax
c0017a2a:	e8 dd e2 ff ff       	call   c0015d0c <GDTEntry::setBase(unsigned int)>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	83 ec 08             	sub    esp,0x8
c0017a35:	6a 68                	push   0x68
c0017a37:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017a3a:	50                   	push   eax
c0017a3b:	e8 e8 e2 ff ff       	call   c0015d28 <GDTEntry::setLimit(unsigned int)>
c0017a40:	83 c4 10             	add    esp,0x10
c0017a43:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0017a47:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017a4a:	83 e0 0f             	and    eax,0xf
c0017a4d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017a50:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017a53:	83 c8 40             	or     eax,0x40
c0017a56:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017a59:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017a5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a64:	05 78 01 00 00       	add    eax,0x178
c0017a69:	83 ec 04             	sub    esp,0x4
c0017a6c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0017a6f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0017a72:	50                   	push   eax
c0017a73:	e8 e4 e2 ff ff       	call   c0015d5c <GDT::addEntry(GDTEntry)>
c0017a78:	83 c4 10             	add    esp,0x10
c0017a7b:	89 c2                	mov    edx,eax
c0017a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017a80:	89 10                	mov    DWORD PTR [eax],edx
c0017a82:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017a87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017a8d:	05 78 01 00 00       	add    eax,0x178
c0017a92:	83 ec 0c             	sub    esp,0xc
c0017a95:	50                   	push   eax
c0017a96:	e8 eb e2 ff ff       	call   c0015d86 <GDT::flush()>
c0017a9b:	83 c4 10             	add    esp,0x10
c0017a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017aa1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017aa3:	c9                   	leave  
c0017aa4:	c3                   	ret    
c0017aa5:	90                   	nop

c0017aa6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0017aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017aaa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017aae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ab1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017ab6:	75 08                	jne    c0017ac0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017ab8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017abe:	eb 38                	jmp    c0017af8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017ac0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017ac5:	75 17                	jne    c0017ade <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0017ac7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017acc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017acf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ad5:	8b 10                	mov    edx,DWORD PTR [eax]
c0017ad7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017adb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017ade:	89 c1                	mov    ecx,eax
c0017ae0:	83 e1 fd             	and    ecx,0xfffffffd
c0017ae3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017ae9:	74 cd                	je     c0017ab8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017aeb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017af0:	83 e0 ef             	and    eax,0xffffffef
c0017af3:	83 f8 08             	cmp    eax,0x8
c0017af6:	76 c0                	jbe    c0017ab8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017af8:	31 c0                	xor    eax,eax
c0017afa:	c3                   	ret    
c0017afb:	90                   	nop

c0017afc <ReservedFilename::isAtty()>:
c0017afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b00:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b03:	31 c0                	xor    eax,eax
c0017b05:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017b0b:	74 09                	je     c0017b16 <ReservedFilename::isAtty()+0x1a>
c0017b0d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017b13:	0f 94 c0             	sete   al
c0017b16:	c3                   	ret    
c0017b17:	90                   	nop

c0017b18 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b1c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017b20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b27:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017b2c:	75 08                	jne    c0017b36 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017b2e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017b34:	eb 3d                	jmp    c0017b73 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017b36:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017b3b:	75 17                	jne    c0017b54 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017b3d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b42:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017b45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0017b4d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017b51:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017b54:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017b59:	75 04                	jne    c0017b5f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017b5b:	89 0a                	mov    DWORD PTR [edx],ecx
c0017b5d:	eb 14                	jmp    c0017b73 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017b5f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017b64:	74 c8                	je     c0017b2e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017b66:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017b6b:	83 e0 ef             	and    eax,0xffffffef
c0017b6e:	83 f8 08             	cmp    eax,0x8
c0017b71:	76 bb                	jbe    c0017b2e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017b73:	31 c0                	xor    eax,eax
c0017b75:	c3                   	ret    

c0017b76 <UnixFile::getFileDescriptor()>:
c0017b76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b7d:	c3                   	ret    

c0017b7e <UnixFile::UnixFile(int)>:
c0017b7e:	53                   	push   ebx
c0017b7f:	83 ec 28             	sub    esp,0x28
c0017b82:	ba 98 14 03 c0       	mov    edx,0xc0031498
c0017b87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b8b:	89 10                	mov    DWORD PTR [eax],edx
c0017b8d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017b95:	0f 8f 90 01 00 00    	jg     c0017d2b <UnixFile::UnixFile(int)+0x1ad>
c0017b9b:	a1 00 3d 03 c0       	mov    eax,ds:0xc0033d00
c0017ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba3:	89 15 00 3d 03 c0    	mov    DWORD PTR ds:0xc0033d00,edx
c0017ba9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017bb0:	83 ec 08             	sub    esp,0x8
c0017bb3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017bb7:	68 98 aa 03 c0       	push   0xc003aa98
c0017bbc:	e8 57 6e 01 00       	call   c002ea18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017bc1:	83 c4 10             	add    esp,0x10
c0017bc4:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017bc9:	83 f0 01             	xor    eax,0x1
c0017bcc:	0f b6 c0             	movzx  eax,al
c0017bcf:	85 c0                	test   eax,eax
c0017bd1:	0f 84 55 01 00 00    	je     c0017d2c <UnixFile::UnixFile(int)+0x1ae>
c0017bd7:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017bde:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bed:	e8 a9 e8 ff ff       	call   c001649b <malloc>
c0017bf2:	83 c4 10             	add    esp,0x10
c0017bf5:	89 c3                	mov    ebx,eax
c0017bf7:	83 ec 08             	sub    esp,0x8
c0017bfa:	68 03 ff ff 0f       	push   0xfffff03
c0017bff:	53                   	push   ebx
c0017c00:	e8 2d 01 00 00       	call   c0017d32 <ReservedFilename::ReservedFilename(int)>
c0017c05:	83 c4 10             	add    esp,0x10
c0017c08:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017c0e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017c16:	83 ec 0c             	sub    esp,0xc
c0017c19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c1d:	e8 79 e8 ff ff       	call   c001649b <malloc>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	89 c3                	mov    ebx,eax
c0017c27:	83 ec 08             	sub    esp,0x8
c0017c2a:	68 01 ff ff 0f       	push   0xfffff01
c0017c2f:	53                   	push   ebx
c0017c30:	e8 fd 00 00 00       	call   c0017d32 <ReservedFilename::ReservedFilename(int)>
c0017c35:	83 c4 10             	add    esp,0x10
c0017c38:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017c3e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017c46:	83 ec 0c             	sub    esp,0xc
c0017c49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c4d:	e8 49 e8 ff ff       	call   c001649b <malloc>
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	89 c3                	mov    ebx,eax
c0017c57:	83 ec 08             	sub    esp,0x8
c0017c5a:	68 00 ff ff 0f       	push   0xfffff00
c0017c5f:	53                   	push   ebx
c0017c60:	e8 cd 00 00 00       	call   c0017d32 <ReservedFilename::ReservedFilename(int)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017c6e:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017c76:	83 ec 0c             	sub    esp,0xc
c0017c79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c7d:	e8 19 e8 ff ff       	call   c001649b <malloc>
c0017c82:	83 c4 10             	add    esp,0x10
c0017c85:	89 c3                	mov    ebx,eax
c0017c87:	83 ec 08             	sub    esp,0x8
c0017c8a:	68 02 ff ff 0f       	push   0xfffff02
c0017c8f:	53                   	push   ebx
c0017c90:	e8 9d 00 00 00       	call   c0017d32 <ReservedFilename::ReservedFilename(int)>
c0017c95:	83 c4 10             	add    esp,0x10
c0017c98:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017c9e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017ca6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017cab:	7f 7f                	jg     c0017d2c <UnixFile::UnixFile(int)+0x1ae>
c0017cad:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017cb5:	83 ec 0c             	sub    esp,0xc
c0017cb8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cbc:	e8 da e7 ff ff       	call   c001649b <malloc>
c0017cc1:	83 c4 10             	add    esp,0x10
c0017cc4:	89 c3                	mov    ebx,eax
c0017cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cca:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017ccf:	83 ec 08             	sub    esp,0x8
c0017cd2:	50                   	push   eax
c0017cd3:	53                   	push   ebx
c0017cd4:	e8 59 00 00 00       	call   c0017d32 <ReservedFilename::ReservedFilename(int)>
c0017cd9:	83 c4 10             	add    esp,0x10
c0017cdc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ce0:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017ce7:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017cef:	83 ec 0c             	sub    esp,0xc
c0017cf2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cf6:	e8 a0 e7 ff ff       	call   c001649b <malloc>
c0017cfb:	83 c4 10             	add    esp,0x10
c0017cfe:	89 c3                	mov    ebx,eax
c0017d00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d04:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017d09:	83 ec 08             	sub    esp,0x8
c0017d0c:	50                   	push   eax
c0017d0d:	53                   	push   ebx
c0017d0e:	e8 1f 00 00 00       	call   c0017d32 <ReservedFilename::ReservedFilename(int)>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d1a:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017d21:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017d26:	e9 7b ff ff ff       	jmp    c0017ca6 <UnixFile::UnixFile(int)+0x128>
c0017d2b:	90                   	nop
c0017d2c:	83 c4 28             	add    esp,0x28
c0017d2f:	5b                   	pop    ebx
c0017d30:	c3                   	ret    
c0017d31:	90                   	nop

c0017d32 <ReservedFilename::ReservedFilename(int)>:
c0017d32:	83 ec 0c             	sub    esp,0xc
c0017d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d39:	83 ec 08             	sub    esp,0x8
c0017d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d40:	50                   	push   eax
c0017d41:	e8 38 fe ff ff       	call   c0017b7e <UnixFile::UnixFile(int)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	ba b4 14 03 c0       	mov    edx,0xc00314b4
c0017d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d52:	89 10                	mov    DWORD PTR [eax],edx
c0017d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017d5f:	90                   	nop
c0017d60:	83 c4 0c             	add    esp,0xc
c0017d63:	c3                   	ret    

c0017d64 <UnixFile::~UnixFile()>:
c0017d64:	83 ec 1c             	sub    esp,0x1c
c0017d67:	ba 98 14 03 c0       	mov    edx,0xc0031498
c0017d6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d70:	89 10                	mov    DWORD PTR [eax],edx
c0017d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017d79:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017d7e:	7f 76                	jg     c0017df6 <UnixFile::~UnixFile()+0x92>
c0017d80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d88:	83 ec 0c             	sub    esp,0xc
c0017d8b:	68 98 aa 03 c0       	push   0xc003aa98
c0017d90:	e8 57 6d 01 00       	call   c002eaec <LinkedList<UnixFile>::getFirstElement()>
c0017d95:	83 c4 10             	add    esp,0x10
c0017d98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d9c:	83 ec 0c             	sub    esp,0xc
c0017d9f:	68 98 aa 03 c0       	push   0xc003aa98
c0017da4:	e8 4b 6d 01 00       	call   c002eaf4 <LinkedList<UnixFile>::removeFirst()>
c0017da9:	83 c4 10             	add    esp,0x10
c0017dac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017db0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017db4:	74 43                	je     c0017df9 <UnixFile::~UnixFile()+0x95>
c0017db6:	83 ec 08             	sub    esp,0x8
c0017db9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017dbd:	68 98 aa 03 c0       	push   0xc003aa98
c0017dc2:	e8 51 6c 01 00       	call   c002ea18 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017dc7:	83 c4 10             	add    esp,0x10
c0017dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dce:	8d 50 01             	lea    edx,[eax+0x1]
c0017dd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017dd5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017dda:	0f 94 c0             	sete   al
c0017ddd:	0f b6 c0             	movzx  eax,al
c0017de0:	85 c0                	test   eax,eax
c0017de2:	74 a4                	je     c0017d88 <UnixFile::~UnixFile()+0x24>
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	68 70 14 03 c0       	push   0xc0031470
c0017dec:	e8 79 84 00 00       	call   c002026a <KePanic(char const*)>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	eb 92                	jmp    c0017d88 <UnixFile::~UnixFile()+0x24>
c0017df6:	90                   	nop
c0017df7:	eb 01                	jmp    c0017dfa <UnixFile::~UnixFile()+0x96>
c0017df9:	90                   	nop
c0017dfa:	90                   	nop
c0017dfb:	83 c4 1c             	add    esp,0x1c
c0017dfe:	c3                   	ret    
c0017dff:	90                   	nop

c0017e00 <UnixFile::~UnixFile()>:
c0017e00:	83 ec 0c             	sub    esp,0xc
c0017e03:	83 ec 0c             	sub    esp,0xc
c0017e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e0a:	e8 55 ff ff ff       	call   c0017d64 <UnixFile::~UnixFile()>
c0017e0f:	83 c4 10             	add    esp,0x10
c0017e12:	83 ec 08             	sub    esp,0x8
c0017e15:	6a 0c                	push   0xc
c0017e17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e1b:	e8 c4 13 00 00       	call   c00191e4 <operator delete(void*, unsigned long)>
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	83 c4 0c             	add    esp,0xc
c0017e26:	c3                   	ret    
c0017e27:	90                   	nop

c0017e28 <ReservedFilename::~ReservedFilename()>:
c0017e28:	83 ec 0c             	sub    esp,0xc
c0017e2b:	ba b4 14 03 c0       	mov    edx,0xc00314b4
c0017e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e34:	89 10                	mov    DWORD PTR [eax],edx
c0017e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e3a:	83 ec 0c             	sub    esp,0xc
c0017e3d:	50                   	push   eax
c0017e3e:	e8 21 ff ff ff       	call   c0017d64 <UnixFile::~UnixFile()>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	90                   	nop
c0017e47:	83 c4 0c             	add    esp,0xc
c0017e4a:	c3                   	ret    
c0017e4b:	90                   	nop

c0017e4c <ReservedFilename::~ReservedFilename()>:
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	83 ec 0c             	sub    esp,0xc
c0017e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e56:	e8 cd ff ff ff       	call   c0017e28 <ReservedFilename::~ReservedFilename()>
c0017e5b:	83 c4 10             	add    esp,0x10
c0017e5e:	83 ec 08             	sub    esp,0x8
c0017e61:	6a 0c                	push   0xc
c0017e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e67:	e8 78 13 00 00       	call   c00191e4 <operator delete(void*, unsigned long)>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	83 c4 0c             	add    esp,0xc
c0017e72:	c3                   	ret    

c0017e73 <KeGetFileFromDescriptor(int)>:
c0017e73:	53                   	push   ebx
c0017e74:	83 ec 08             	sub    esp,0x8
c0017e77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e7b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017e81:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017e87:	7f 2c                	jg     c0017eb5 <KeGetFileFromDescriptor(int)+0x42>
c0017e89:	83 ec 0c             	sub    esp,0xc
c0017e8c:	68 98 aa 03 c0       	push   0xc003aa98
c0017e91:	e8 56 6c 01 00       	call   c002eaec <LinkedList<UnixFile>::getFirstElement()>
c0017e96:	83 c4 10             	add    esp,0x10
c0017e99:	85 c0                	test   eax,eax
c0017e9b:	75 04                	jne    c0017ea1 <KeGetFileFromDescriptor(int)+0x2e>
c0017e9d:	31 c0                	xor    eax,eax
c0017e9f:	eb 6e                	jmp    c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017ea1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017ea4:	74 69                	je     c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017ea6:	52                   	push   edx
c0017ea7:	52                   	push   edx
c0017ea8:	50                   	push   eax
c0017ea9:	68 98 aa 03 c0       	push   0xc003aa98
c0017eae:	e8 e3 6c 01 00       	call   c002eb96 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017eb3:	eb e1                	jmp    c0017e96 <KeGetFileFromDescriptor(int)+0x23>
c0017eb5:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017ebb:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017ec0:	74 4d                	je     c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017ec2:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017ec8:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017ecd:	74 40                	je     c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017ecf:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017ed5:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017eda:	74 33                	je     c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017edc:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017ee2:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017ee7:	74 26                	je     c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017ee9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017eef:	83 f8 08             	cmp    eax,0x8
c0017ef2:	77 09                	ja     c0017efd <KeGetFileFromDescriptor(int)+0x8a>
c0017ef4:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017efb:	eb 12                	jmp    c0017f0f <KeGetFileFromDescriptor(int)+0x9c>
c0017efd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017f03:	83 fb 08             	cmp    ebx,0x8
c0017f06:	77 95                	ja     c0017e9d <KeGetFileFromDescriptor(int)+0x2a>
c0017f08:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017f0f:	83 c4 08             	add    esp,0x8
c0017f12:	5b                   	pop    ebx
c0017f13:	c3                   	ret    

c0017f14 <__static_initialization_and_destruction_0(int, int)>:
c0017f14:	83 ec 0c             	sub    esp,0xc
c0017f17:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017f1c:	75 34                	jne    c0017f52 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017f1e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017f26:	75 2a                	jne    c0017f52 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	68 98 aa 03 c0       	push   0xc003aa98
c0017f30:	e8 a1 6a 01 00       	call   c002e9d6 <LinkedList<UnixFile>::LinkedList()>
c0017f35:	83 c4 10             	add    esp,0x10
c0017f38:	83 ec 04             	sub    esp,0x4
c0017f3b:	68 78 3c 03 c0       	push   0xc0033c78
c0017f40:	68 98 aa 03 c0       	push   0xc003aa98
c0017f45:	68 d4 e9 02 c0       	push   0xc002e9d4
c0017f4a:	e8 45 12 00 00       	call   c0019194 <__cxa_atexit>
c0017f4f:	83 c4 10             	add    esp,0x10
c0017f52:	90                   	nop
c0017f53:	83 c4 0c             	add    esp,0xc
c0017f56:	c3                   	ret    

c0017f57 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017f57:	83 ec 0c             	sub    esp,0xc
c0017f5a:	83 ec 08             	sub    esp,0x8
c0017f5d:	68 ff ff 00 00       	push   0xffff
c0017f62:	6a 01                	push   0x1
c0017f64:	e8 ab ff ff ff       	call   c0017f14 <__static_initialization_and_destruction_0(int, int)>
c0017f69:	83 c4 10             	add    esp,0x10
c0017f6c:	83 c4 0c             	add    esp,0xc
c0017f6f:	c3                   	ret    

c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017f70:	53                   	push   ebx
c0017f71:	8b 15 08 3d 03 c0    	mov    edx,DWORD PTR ds:0xc0033d08
c0017f77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f7f:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017f85:	89 d8                	mov    eax,ebx
c0017f87:	d1 e8                	shr    eax,1
c0017f89:	01 d0                	add    eax,edx
c0017f8b:	80 e3 01             	and    bl,0x1
c0017f8e:	8a 10                	mov    dl,BYTE PTR [eax]
c0017f90:	75 09                	jne    c0017f9b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017f92:	83 e2 f0             	and    edx,0xfffffff0
c0017f95:	09 ca                	or     edx,ecx
c0017f97:	88 10                	mov    BYTE PTR [eax],dl
c0017f99:	5b                   	pop    ebx
c0017f9a:	c3                   	ret    
c0017f9b:	0f b6 c9             	movzx  ecx,cl
c0017f9e:	83 e2 0f             	and    edx,0xf
c0017fa1:	c1 e1 04             	shl    ecx,0x4
c0017fa4:	09 ca                	or     edx,ecx
c0017fa6:	88 10                	mov    BYTE PTR [eax],dl
c0017fa8:	5b                   	pop    ebx
c0017fa9:	c3                   	ret    

c0017faa <Virt::getPageState(unsigned long)>:
c0017faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fae:	8b 0d 08 3d 03 c0    	mov    ecx,DWORD PTR ds:0xc0033d08
c0017fb4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017fba:	89 d0                	mov    eax,edx
c0017fbc:	d1 e8                	shr    eax,1
c0017fbe:	80 e2 01             	and    dl,0x1
c0017fc1:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017fc4:	74 03                	je     c0017fc9 <Virt::getPageState(unsigned long)+0x1f>
c0017fc6:	c1 e8 04             	shr    eax,0x4
c0017fc9:	83 e0 0f             	and    eax,0xf
c0017fcc:	c3                   	ret    

c0017fcd <Virt::allocateKernelVirtualPages(int)>:
c0017fcd:	55                   	push   ebp
c0017fce:	57                   	push   edi
c0017fcf:	56                   	push   esi
c0017fd0:	31 f6                	xor    esi,esi
c0017fd2:	53                   	push   ebx
c0017fd3:	31 db                	xor    ebx,ebx
c0017fd5:	83 ec 1c             	sub    esp,0x1c
c0017fd8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017fdd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017fe1:	8b 2d 04 3d 03 c0    	mov    ebp,DWORD PTR ds:0xc0033d04
c0017fe7:	55                   	push   ebp
c0017fe8:	e8 bd ff ff ff       	call   c0017faa <Virt::getPageState(unsigned long)>
c0017fed:	5a                   	pop    edx
c0017fee:	84 c0                	test   al,al
c0017ff0:	75 3d                	jne    c001802f <Virt::allocateKernelVirtualPages(int)+0x62>
c0017ff2:	85 db                	test   ebx,ebx
c0017ff4:	0f 44 f5             	cmove  esi,ebp
c0017ff7:	83 c3 01             	add    ebx,0x1
c0017ffa:	39 fb                	cmp    ebx,edi
c0017ffc:	74 5e                	je     c001805c <Virt::allocateKernelVirtualPages(int)+0x8f>
c0017ffe:	83 c5 01             	add    ebp,0x1
c0018001:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0018007:	76 33                	jbe    c001803c <Virt::allocateKernelVirtualPages(int)+0x6f>
c0018009:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001800e:	c7 05 04 3d 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033d04,0xc8000
c0018018:	75 2a                	jne    c0018044 <Virt::allocateKernelVirtualPages(int)+0x77>
c001801a:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001801f:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0018024:	55                   	push   ebp
c0018025:	e8 80 ff ff ff       	call   c0017faa <Virt::getPageState(unsigned long)>
c001802a:	5a                   	pop    edx
c001802b:	84 c0                	test   al,al
c001802d:	74 c3                	je     c0017ff2 <Virt::allocateKernelVirtualPages(int)+0x25>
c001802f:	83 c5 01             	add    ebp,0x1
c0018032:	31 db                	xor    ebx,ebx
c0018034:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c001803a:	77 cd                	ja     c0018009 <Virt::allocateKernelVirtualPages(int)+0x3c>
c001803c:	89 2d 04 3d 03 c0    	mov    DWORD PTR ds:0xc0033d04,ebp
c0018042:	eb a3                	jmp    c0017fe7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0018044:	83 ec 0c             	sub    esp,0xc
c0018047:	68 c8 14 03 c0       	push   0xc00314c8
c001804c:	e8 19 82 00 00       	call   c002026a <KePanic(char const*)>
c0018051:	8b 2d 04 3d 03 c0    	mov    ebp,DWORD PTR ds:0xc0033d04
c0018057:	83 c4 10             	add    esp,0x10
c001805a:	eb 8b                	jmp    c0017fe7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001805c:	89 35 04 3d 03 c0    	mov    DWORD PTR ds:0xc0033d04,esi
c0018062:	83 fb 01             	cmp    ebx,0x1
c0018065:	74 63                	je     c00180ca <Virt::allocateKernelVirtualPages(int)+0xfd>
c0018067:	85 ff                	test   edi,edi
c0018069:	74 41                	je     c00180ac <Virt::allocateKernelVirtualPages(int)+0xdf>
c001806b:	89 f0                	mov    eax,esi
c001806d:	31 db                	xor    ebx,ebx
c001806f:	8d 6f ff             	lea    ebp,[edi-0x1]
c0018072:	eb 16                	jmp    c001808a <Virt::allocateKernelVirtualPages(int)+0xbd>
c0018074:	6a 01                	push   0x1
c0018076:	83 c3 01             	add    ebx,0x1
c0018079:	50                   	push   eax
c001807a:	e8 f1 fe ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001807f:	39 fb                	cmp    ebx,edi
c0018081:	58                   	pop    eax
c0018082:	5a                   	pop    edx
c0018083:	74 27                	je     c00180ac <Virt::allocateKernelVirtualPages(int)+0xdf>
c0018085:	a1 04 3d 03 c0       	mov    eax,ds:0xc0033d04
c001808a:	8d 50 01             	lea    edx,[eax+0x1]
c001808d:	85 db                	test   ebx,ebx
c001808f:	89 15 04 3d 03 c0    	mov    DWORD PTR ds:0xc0033d04,edx
c0018095:	74 22                	je     c00180b9 <Virt::allocateKernelVirtualPages(int)+0xec>
c0018097:	39 dd                	cmp    ebp,ebx
c0018099:	75 d9                	jne    c0018074 <Virt::allocateKernelVirtualPages(int)+0xa7>
c001809b:	6a 03                	push   0x3
c001809d:	83 c3 01             	add    ebx,0x1
c00180a0:	50                   	push   eax
c00180a1:	e8 ca fe ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180a6:	39 fb                	cmp    ebx,edi
c00180a8:	59                   	pop    ecx
c00180a9:	58                   	pop    eax
c00180aa:	75 d9                	jne    c0018085 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00180ac:	83 c4 1c             	add    esp,0x1c
c00180af:	89 f0                	mov    eax,esi
c00180b1:	5b                   	pop    ebx
c00180b2:	c1 e0 0c             	shl    eax,0xc
c00180b5:	5e                   	pop    esi
c00180b6:	5f                   	pop    edi
c00180b7:	5d                   	pop    ebp
c00180b8:	c3                   	ret    
c00180b9:	6a 02                	push   0x2
c00180bb:	bb 01 00 00 00       	mov    ebx,0x1
c00180c0:	50                   	push   eax
c00180c1:	e8 aa fe ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180c6:	58                   	pop    eax
c00180c7:	5a                   	pop    edx
c00180c8:	eb bb                	jmp    c0018085 <Virt::allocateKernelVirtualPages(int)+0xb8>
c00180ca:	6a 04                	push   0x4
c00180cc:	56                   	push   esi
c00180cd:	8d 46 01             	lea    eax,[esi+0x1]
c00180d0:	a3 04 3d 03 c0       	mov    ds:0xc0033d04,eax
c00180d5:	e8 96 fe ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180da:	89 f0                	mov    eax,esi
c00180dc:	59                   	pop    ecx
c00180dd:	c1 e0 0c             	shl    eax,0xc
c00180e0:	5b                   	pop    ebx
c00180e1:	83 c4 1c             	add    esp,0x1c
c00180e4:	5b                   	pop    ebx
c00180e5:	5e                   	pop    esi
c00180e6:	5f                   	pop    edi
c00180e7:	5d                   	pop    ebp
c00180e8:	c3                   	ret    

c00180e9 <Virt::freeSwapfilePage(unsigned long)>:
c00180e9:	53                   	push   ebx
c00180ea:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c00180f0:	b8 01 00 00 00       	mov    eax,0x1
c00180f5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00180f9:	d3 e0                	shl    eax,cl
c00180fb:	89 cb                	mov    ebx,ecx
c00180fd:	c1 eb 05             	shr    ebx,0x5
c0018100:	f7 d0                	not    eax
c0018102:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0018105:	21 c1                	and    ecx,eax
c0018107:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c001810a:	5b                   	pop    ebx
c001810b:	c3                   	ret    

c001810c <Virt::swapIDToSector(unsigned long)>:
c001810c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018110:	8b 15 0c 3d 03 c0    	mov    edx,DWORD PTR ds:0xc0033d0c
c0018116:	8b 0d 14 3d 03 c0    	mov    ecx,DWORD PTR ds:0xc0033d14
c001811c:	0f af c2             	imul   eax,edx
c001811f:	01 c8                	add    eax,ecx
c0018121:	c3                   	ret    

c0018122 <Virt::allocateSwapfilePage()>:
c0018122:	55                   	push   ebp
c0018123:	31 d2                	xor    edx,edx
c0018125:	57                   	push   edi
c0018126:	56                   	push   esi
c0018127:	53                   	push   ebx
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	8b 1d 10 3d 03 c0    	mov    ebx,DWORD PTR ds:0xc0033d10
c0018131:	8b 0d 0c 3d 03 c0    	mov    ecx,DWORD PTR ds:0xc0033d0c
c0018137:	89 d8                	mov    eax,ebx
c0018139:	f7 f1                	div    ecx
c001813b:	39 cb                	cmp    ebx,ecx
c001813d:	72 2f                	jb     c001816e <Virt::allocateSwapfilePage()+0x4c>
c001813f:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0018145:	8b 16                	mov    edx,DWORD PTR [esi]
c0018147:	f6 c2 01             	test   dl,0x1
c001814a:	74 3e                	je     c001818a <Virt::allocateSwapfilePage()+0x68>
c001814c:	31 c9                	xor    ecx,ecx
c001814e:	bf 01 00 00 00       	mov    edi,0x1
c0018153:	eb 12                	jmp    c0018167 <Virt::allocateSwapfilePage()+0x45>
c0018155:	89 ca                	mov    edx,ecx
c0018157:	89 fd                	mov    ebp,edi
c0018159:	c1 ea 05             	shr    edx,0x5
c001815c:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001815f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018161:	d3 e5                	shl    ebp,cl
c0018163:	85 ea                	test   edx,ebp
c0018165:	74 2c                	je     c0018193 <Virt::allocateSwapfilePage()+0x71>
c0018167:	83 c1 01             	add    ecx,0x1
c001816a:	39 c8                	cmp    eax,ecx
c001816c:	77 e7                	ja     c0018155 <Virt::allocateSwapfilePage()+0x33>
c001816e:	83 ec 0c             	sub    esp,0xc
c0018171:	68 5c 17 03 c0       	push   0xc003175c
c0018176:	e8 ef 80 00 00       	call   c002026a <KePanic(char const*)>
c001817b:	83 c4 10             	add    esp,0x10
c001817e:	31 c9                	xor    ecx,ecx
c0018180:	83 c4 0c             	add    esp,0xc
c0018183:	89 c8                	mov    eax,ecx
c0018185:	5b                   	pop    ebx
c0018186:	5e                   	pop    esi
c0018187:	5f                   	pop    edi
c0018188:	5d                   	pop    ebp
c0018189:	c3                   	ret    
c001818a:	89 f3                	mov    ebx,esi
c001818c:	bd 01 00 00 00       	mov    ebp,0x1
c0018191:	31 c9                	xor    ecx,ecx
c0018193:	09 ea                	or     edx,ebp
c0018195:	89 c8                	mov    eax,ecx
c0018197:	89 13                	mov    DWORD PTR [ebx],edx
c0018199:	83 c4 0c             	add    esp,0xc
c001819c:	5b                   	pop    ebx
c001819d:	5e                   	pop    esi
c001819e:	5f                   	pop    edi
c001819f:	5d                   	pop    ebp
c00181a0:	c3                   	ret    

c00181a1 <Virt::virtualMemorySetup()>:
c00181a1:	53                   	push   ebx
c00181a2:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00181a7:	6a 0f                	push   0xf
c00181a9:	53                   	push   ebx
c00181aa:	83 c3 01             	add    ebx,0x1
c00181ad:	e8 be fd ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181b2:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00181b8:	58                   	pop    eax
c00181b9:	5a                   	pop    edx
c00181ba:	75 eb                	jne    c00181a7 <Virt::virtualMemorySetup()+0x6>
c00181bc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00181c1:	6a 00                	push   0x0
c00181c3:	53                   	push   ebx
c00181c4:	83 c3 01             	add    ebx,0x1
c00181c7:	e8 a4 fd ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181cc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00181d2:	59                   	pop    ecx
c00181d3:	58                   	pop    eax
c00181d4:	75 eb                	jne    c00181c1 <Virt::virtualMemorySetup()+0x20>
c00181d6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00181db:	6a 0f                	push   0xf
c00181dd:	53                   	push   ebx
c00181de:	83 c3 01             	add    ebx,0x1
c00181e1:	e8 8a fd ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00181e6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00181ec:	58                   	pop    eax
c00181ed:	5a                   	pop    edx
c00181ee:	75 eb                	jne    c00181db <Virt::virtualMemorySetup()+0x3a>
c00181f0:	5b                   	pop    ebx
c00181f1:	c3                   	ret    

c00181f2 <Virt::setupPageSwapping(int)>:
c00181f2:	53                   	push   ebx
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c00181fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00181ff:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0018205:	8b 10                	mov    edx,DWORD PTR [eax]
c0018207:	53                   	push   ebx
c0018208:	68 73 17 03 c0       	push   0xc0031773
c001820d:	50                   	push   eax
c001820e:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018211:	c1 e3 0b             	shl    ebx,0xb
c0018214:	89 1d 10 3d 03 c0    	mov    DWORD PTR ds:0xc0033d10,ebx
c001821a:	c1 eb 08             	shr    ebx,0x8
c001821d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018220:	c6 05 18 3d 03 c0 43 	mov    BYTE PTR ds:0xc0033d18,0x43
c0018227:	c7 05 0c 3d 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033d0c,0x8
c0018231:	a3 14 3d 03 c0       	mov    ds:0xc0033d14,eax
c0018236:	e8 60 e2 ff ff       	call   c001649b <malloc>
c001823b:	31 d2                	xor    edx,edx
c001823d:	83 c4 0c             	add    esp,0xc
c0018240:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c0018245:	89 c1                	mov    ecx,eax
c0018247:	a1 10 3d 03 c0       	mov    eax,ds:0xc0033d10
c001824c:	f7 35 0c 3d 03 c0    	div    DWORD PTR ds:0xc0033d0c
c0018252:	c1 e8 05             	shr    eax,0x5
c0018255:	50                   	push   eax
c0018256:	6a 00                	push   0x0
c0018258:	51                   	push   ecx
c0018259:	e8 92 82 fe ff       	call   c00004f0 <memset>
c001825e:	83 c4 18             	add    esp,0x18
c0018261:	5b                   	pop    ebx
c0018262:	c3                   	ret    
c0018263:	90                   	nop

c0018264 <VAS::setCPUSpecific(unsigned long)>:
c0018264:	c3                   	ret    
c0018265:	90                   	nop

c0018266 <VAS::VAS(VAS*)>:
c0018266:	83 ec 0c             	sub    esp,0xc
c0018269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001826d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018278:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001827f:	83 ec 0c             	sub    esp,0xc
c0018282:	68 e8 14 03 c0       	push   0xc00314e8
c0018287:	e8 de 7f 00 00       	call   c002026a <KePanic(char const*)>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	90                   	nop
c0018290:	83 c4 0c             	add    esp,0xc
c0018293:	c3                   	ret    

c0018294 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0018294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018298:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001829d:	89 c2                	mov    edx,eax
c001829f:	c1 ea 16             	shr    edx,0x16
c00182a2:	c1 e8 0a             	shr    eax,0xa
c00182a5:	83 f9 01             	cmp    ecx,0x1
c00182a8:	19 c9                	sbb    ecx,ecx
c00182aa:	25 fc 0f 00 00       	and    eax,0xffc
c00182af:	c1 e2 0c             	shl    edx,0xc
c00182b2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00182b8:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00182bf:	01 d0                	add    eax,edx
c00182c1:	c3                   	ret    

c00182c2 <VAS::getPageTableEntry(unsigned long)>:
c00182c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00182c6:	89 ca                	mov    edx,ecx
c00182c8:	c1 ea 16             	shr    edx,0x16
c00182cb:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00182d1:	c1 e9 0a             	shr    ecx,0xa
c00182d4:	c1 e0 0c             	shl    eax,0xc
c00182d7:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00182dd:	8d 04 08             	lea    eax,[eax+ecx*1]
c00182e0:	c3                   	ret    

c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>:
c00182e1:	55                   	push   ebp
c00182e2:	57                   	push   edi
c00182e3:	bf 01 00 00 00       	mov    edi,0x1
c00182e8:	56                   	push   esi
c00182e9:	53                   	push   ebx
c00182ea:	83 ec 1c             	sub    esp,0x1c
c00182ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00182f1:	c1 ee 0c             	shr    esi,0xc
c00182f4:	eb 48                	jmp    c001833e <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00182f6:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c00182fb:	83 ec 08             	sub    esp,0x8
c00182fe:	55                   	push   ebp
c00182ff:	50                   	push   eax
c0018300:	e8 bd ff ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018305:	83 c4 10             	add    esp,0x10
c0018308:	8b 10                	mov    edx,DWORD PTR [eax]
c001830a:	f6 c6 04             	test   dh,0x4
c001830d:	75 70                	jne    c001837f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001830f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018315:	83 fb 04             	cmp    ebx,0x4
c0018318:	0f 84 8a 00 00 00    	je     c00183a8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001831e:	83 fb 02             	cmp    ebx,0x2
c0018321:	0f 84 9a 00 00 00    	je     c00183c1 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0018327:	83 fb 03             	cmp    ebx,0x3
c001832a:	0f 84 be 00 00 00    	je     c00183ee <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018330:	83 fb 01             	cmp    ebx,0x1
c0018333:	0f 84 a2 00 00 00    	je     c00183db <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018339:	83 c6 01             	add    esi,0x1
c001833c:	31 ff                	xor    edi,edi
c001833e:	56                   	push   esi
c001833f:	89 f5                	mov    ebp,esi
c0018341:	e8 64 fc ff ff       	call   c0017faa <Virt::getPageState(unsigned long)>
c0018346:	c1 e5 0c             	shl    ebp,0xc
c0018349:	5a                   	pop    edx
c001834a:	0f b6 d8             	movzx  ebx,al
c001834d:	85 db                	test   ebx,ebx
c001834f:	75 a5                	jne    c00182f6 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018351:	83 ec 0c             	sub    esp,0xc
c0018354:	68 8a 17 03 c0       	push   0xc003178a
c0018359:	e8 0c 7f 00 00       	call   c002026a <KePanic(char const*)>
c001835e:	5a                   	pop    edx
c001835f:	59                   	pop    ecx
c0018360:	55                   	push   ebp
c0018361:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c0018367:	55                   	push   ebp
c0018368:	e8 55 ff ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c001836d:	83 c4 10             	add    esp,0x10
c0018370:	8b 10                	mov    edx,DWORD PTR [eax]
c0018372:	f6 c6 04             	test   dh,0x4
c0018375:	75 08                	jne    c001837f <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018377:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001837d:	eb ba                	jmp    c0018339 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001837f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018383:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0018389:	83 ec 0c             	sub    esp,0xc
c001838c:	52                   	push   edx
c001838d:	e8 bf e3 ff ff       	call   c0016751 <Phys::freePage(unsigned long)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	83 fb 04             	cmp    ebx,0x4
c0018398:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001839c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00183a2:	0f 85 76 ff ff ff    	jne    c001831e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00183a8:	83 e7 01             	and    edi,0x1
c00183ab:	75 46                	jne    c00183f3 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00183ad:	c7 44 24 30 0c 15 03 c0 	mov    DWORD PTR [esp+0x30],0xc003150c
c00183b5:	83 c4 1c             	add    esp,0x1c
c00183b8:	5b                   	pop    ebx
c00183b9:	5e                   	pop    esi
c00183ba:	5f                   	pop    edi
c00183bb:	5d                   	pop    ebp
c00183bc:	e9 a9 7e 00 00       	jmp    c002026a <KePanic(char const*)>
c00183c1:	83 e7 01             	and    edi,0x1
c00183c4:	75 15                	jne    c00183db <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00183c6:	83 ec 0c             	sub    esp,0xc
c00183c9:	68 a6 17 03 c0       	push   0xc00317a6
c00183ce:	e8 97 7e 00 00       	call   c002026a <KePanic(char const*)>
c00183d3:	83 c4 10             	add    esp,0x10
c00183d6:	e9 5e ff ff ff       	jmp    c0018339 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00183db:	83 ec 08             	sub    esp,0x8
c00183de:	6a 00                	push   0x0
c00183e0:	56                   	push   esi
c00183e1:	e8 8a fb ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	e9 4b ff ff ff       	jmp    c0018339 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00183ee:	83 e7 01             	and    edi,0x1
c00183f1:	75 16                	jne    c0018409 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00183f3:	83 ec 08             	sub    esp,0x8
c00183f6:	6a 00                	push   0x0
c00183f8:	56                   	push   esi
c00183f9:	e8 72 fb ff ff       	call   c0017f70 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00183fe:	83 c4 10             	add    esp,0x10
c0018401:	83 c4 1c             	add    esp,0x1c
c0018404:	5b                   	pop    ebx
c0018405:	5e                   	pop    esi
c0018406:	5f                   	pop    edi
c0018407:	5d                   	pop    ebp
c0018408:	c3                   	ret    
c0018409:	c7 44 24 30 c2 17 03 c0 	mov    DWORD PTR [esp+0x30],0xc00317c2
c0018411:	83 c4 1c             	add    esp,0x1c
c0018414:	5b                   	pop    ebx
c0018415:	5e                   	pop    esi
c0018416:	5f                   	pop    edi
c0018417:	5d                   	pop    ebp
c0018418:	e9 4d 7e 00 00       	jmp    c002026a <KePanic(char const*)>
c001841d:	90                   	nop

c001841e <VAS::freeAllocatedPages(unsigned long)>:
c001841e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018422:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018426:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001842a:	74 09                	je     c0018435 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001842c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018430:	e9 ac fe ff ff       	jmp    c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0018435:	c7 44 24 04 30 15 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031530
c001843d:	e9 a0 0e 00 00       	jmp    c00192e2 <Dbg::kprintf(char const*, ...)>

c0018442 <VAS::virtualToPhysical(unsigned long)>:
c0018442:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018446:	50                   	push   eax
c0018447:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001844b:	52                   	push   edx
c001844c:	e8 71 fe ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018451:	59                   	pop    ecx
c0018452:	5a                   	pop    edx
c0018453:	8b 00                	mov    eax,DWORD PTR [eax]
c0018455:	25 00 f0 ff ff       	and    eax,0xfffff000
c001845a:	c3                   	ret    
c001845b:	90                   	nop

c001845c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c001845c:	55                   	push   ebp
c001845d:	57                   	push   edi
c001845e:	56                   	push   esi
c001845f:	53                   	push   ebx
c0018460:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018464:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0018468:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001846c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018470:	85 db                	test   ebx,ebx
c0018472:	7e 24                	jle    c0018498 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0018474:	c1 e3 0c             	shl    ebx,0xc
c0018477:	01 f3                	add    ebx,esi
c0018479:	56                   	push   esi
c001847a:	81 c6 00 10 00 00    	add    esi,0x1000
c0018480:	55                   	push   ebp
c0018481:	e8 3c fe ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018486:	5a                   	pop    edx
c0018487:	59                   	pop    ecx
c0018488:	8b 08                	mov    ecx,DWORD PTR [eax]
c001848a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001848e:	21 f9                	and    ecx,edi
c0018490:	09 d1                	or     ecx,edx
c0018492:	39 f3                	cmp    ebx,esi
c0018494:	89 08                	mov    DWORD PTR [eax],ecx
c0018496:	75 e1                	jne    c0018479 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0018498:	5b                   	pop    ebx
c0018499:	5e                   	pop    esi
c001849a:	5f                   	pop    edi
c001849b:	5d                   	pop    ebp
c001849c:	c3                   	ret    
c001849d:	90                   	nop

c001849e <VAS::VAS()>:
c001849e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00184a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00184b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184b8:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c00184bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184c1:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00184c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184c9:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00184cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184d0:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00184d7:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c00184dc:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00184e1:	29 c2                	sub    edx,eax
c00184e3:	89 d0                	mov    eax,edx
c00184e5:	05 ff 0f 00 00       	add    eax,0xfff
c00184ea:	c1 e8 0c             	shr    eax,0xc
c00184ed:	89 c2                	mov    edx,eax
c00184ef:	b8 00 50 03 c0       	mov    eax,0xc0035000
c00184f4:	6a 04                	push   0x4
c00184f6:	6a ff                	push   0xffffffff
c00184f8:	52                   	push   edx
c00184f9:	50                   	push   eax
c00184fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184fe:	e8 59 ff ff ff       	call   c001845c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018503:	83 c4 14             	add    esp,0x14
c0018506:	90                   	nop
c0018507:	c3                   	ret    

c0018508 <VAS::setToWriteCombining(unsigned long, int)>:
c0018508:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001850d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018513:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c001851a:	75 01                	jne    c001851d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001851c:	c3                   	ret    
c001851d:	68 80 00 00 00       	push   0x80
c0018522:	6a ff                	push   0xffffffff
c0018524:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018528:	50                   	push   eax
c0018529:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001852d:	52                   	push   edx
c001852e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018532:	51                   	push   ecx
c0018533:	e8 24 ff ff ff       	call   c001845c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018538:	83 c4 14             	add    esp,0x14
c001853b:	c3                   	ret    

c001853c <VAS::mapOtherVASIn(bool, VAS*)>:
c001853c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018540:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018547:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001854a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001854f:	83 f8 01             	cmp    eax,0x1
c0018552:	19 c0                	sbb    eax,eax
c0018554:	83 ca 03             	or     edx,0x3
c0018557:	83 e0 fc             	and    eax,0xfffffffc
c001855a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0018561:	0f 20 d8             	mov    eax,cr3
c0018564:	0f 22 d8             	mov    cr3,eax
c0018567:	c3                   	ret    

c0018568 <VAS::~VAS()>:
c0018568:	83 ec 2c             	sub    esp,0x2c
c001856b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018573:	fa                   	cli    
c0018574:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018579:	83 c0 01             	add    eax,0x1
c001857c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018581:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018586:	8b 00                	mov    eax,DWORD PTR [eax]
c0018588:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001858b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018591:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018595:	6a 01                	push   0x1
c0018597:	50                   	push   eax
c0018598:	e8 9f ff ff ff       	call   c001853c <VAS::mapOtherVASIn(bool, VAS*)>
c001859d:	83 c4 0c             	add    esp,0xc
c00185a0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00185a8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00185b0:	0f 8f d8 00 00 00    	jg     c001868e <VAS::~VAS()+0x126>
c00185b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00185c1:	c1 e2 02             	shl    edx,0x2
c00185c4:	01 d0                	add    eax,edx
c00185c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00185c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185d0:	83 e0 01             	and    eax,0x1
c00185d3:	0f 84 ab 00 00 00    	je     c0018684 <VAS::~VAS()+0x11c>
c00185d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00185e1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00185e9:	7f 74                	jg     c001865f <VAS::~VAS()+0xf7>
c00185eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185ef:	c1 e0 0a             	shl    eax,0xa
c00185f2:	89 c2                	mov    edx,eax
c00185f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185f8:	01 d0                	add    eax,edx
c00185fa:	c1 e0 0c             	shl    eax,0xc
c00185fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018601:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018606:	8b 00                	mov    eax,DWORD PTR [eax]
c0018608:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001860b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018611:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018615:	6a 01                	push   0x1
c0018617:	50                   	push   eax
c0018618:	e8 77 fc ff ff       	call   c0018294 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001861d:	83 c4 0c             	add    esp,0xc
c0018620:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018624:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018628:	8b 00                	mov    eax,DWORD PTR [eax]
c001862a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001862e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018632:	25 01 04 00 00       	and    eax,0x401
c0018637:	3d 01 04 00 00       	cmp    eax,0x401
c001863c:	75 1a                	jne    c0018658 <VAS::~VAS()+0xf0>
c001863e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018642:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018647:	83 ec 0c             	sub    esp,0xc
c001864a:	50                   	push   eax
c001864b:	e8 01 e1 ff ff       	call   c0016751 <Phys::freePage(unsigned long)>
c0018650:	83 c4 10             	add    esp,0x10
c0018653:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018658:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c001865d:	eb 82                	jmp    c00185e1 <VAS::~VAS()+0x79>
c001865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018663:	25 00 04 00 00       	and    eax,0x400
c0018668:	74 1a                	je     c0018684 <VAS::~VAS()+0x11c>
c001866a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001866e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018673:	83 ec 0c             	sub    esp,0xc
c0018676:	50                   	push   eax
c0018677:	e8 d5 e0 ff ff       	call   c0016751 <Phys::freePage(unsigned long)>
c001867c:	83 c4 10             	add    esp,0x10
c001867f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018684:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018689:	e9 1a ff ff ff       	jmp    c00185a8 <VAS::~VAS()+0x40>
c001868e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018692:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018695:	83 ec 0c             	sub    esp,0xc
c0018698:	50                   	push   eax
c0018699:	e8 43 fc ff ff       	call   c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c001869e:	83 c4 10             	add    esp,0x10
c00186a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00186a8:	83 ec 0c             	sub    esp,0xc
c00186ab:	50                   	push   eax
c00186ac:	e8 a0 e0 ff ff       	call   c0016751 <Phys::freePage(unsigned long)>
c00186b1:	83 c4 10             	add    esp,0x10
c00186b4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00186b9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00186be:	83 e8 01             	sub    eax,0x1
c00186c1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00186c6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00186cb:	85 c0                	test   eax,eax
c00186cd:	75 01                	jne    c00186d0 <VAS::~VAS()+0x168>
c00186cf:	fb                   	sti    
c00186d0:	90                   	nop
c00186d1:	83 c4 2c             	add    esp,0x2c
c00186d4:	c3                   	ret    
c00186d5:	90                   	nop

c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00186d6:	55                   	push   ebp
c00186d7:	57                   	push   edi
c00186d8:	56                   	push   esi
c00186d9:	53                   	push   ebx
c00186da:	83 ec 1c             	sub    esp,0x1c
c00186dd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00186e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00186e5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00186e9:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00186ef:	77 08                	ja     c00186f9 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c00186f1:	0f 20 d8             	mov    eax,cr3
c00186f4:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c00186f7:	75 43                	jne    c001873c <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00186f9:	89 d8                	mov    eax,ebx
c00186fb:	09 f8                	or     eax,edi
c00186fd:	a9 ff 0f 00 00       	test   eax,0xfff
c0018702:	75 53                	jne    c0018757 <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c0018704:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0018707:	89 de                	mov    esi,ebx
c0018709:	c1 ee 16             	shr    esi,0x16
c001870c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0018713:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0018717:	74 50                	je     c0018769 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0018719:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001871d:	c1 eb 0a             	shr    ebx,0xa
c0018720:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0018726:	c1 e6 0c             	shl    esi,0xc
c0018729:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001872f:	09 c7                	or     edi,eax
c0018731:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c0018734:	83 c4 1c             	add    esp,0x1c
c0018737:	5b                   	pop    ebx
c0018738:	5e                   	pop    esi
c0018739:	5f                   	pop    edi
c001873a:	5d                   	pop    ebp
c001873b:	c3                   	ret    
c001873c:	83 ec 0c             	sub    esp,0xc
c001873f:	68 54 15 03 c0       	push   0xc0031554
c0018744:	e8 99 0b 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018749:	89 d8                	mov    eax,ebx
c001874b:	83 c4 10             	add    esp,0x10
c001874e:	09 f8                	or     eax,edi
c0018750:	a9 ff 0f 00 00       	test   eax,0xfff
c0018755:	74 ad                	je     c0018704 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	68 bc 15 03 c0       	push   0xc00315bc
c001875f:	e8 06 7b 00 00       	call   c002026a <KePanic(char const*)>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	eb 9b                	jmp    c0018704 <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c0018769:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001876d:	e8 48 e0 ff ff       	call   c00167ba <Phys::allocatePage()>
c0018772:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001877f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018783:	6a 01                	push   0x1
c0018785:	e8 43 f8 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c001878a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018791:	6a 01                	push   0x1
c0018793:	50                   	push   eax
c0018794:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018798:	52                   	push   edx
c0018799:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001879d:	51                   	push   ecx
c001879e:	e8 3d 01 00 00       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00187a3:	83 c4 1c             	add    esp,0x1c
c00187a6:	68 00 10 00 00       	push   0x1000
c00187ab:	6a 00                	push   0x0
c00187ad:	50                   	push   eax
c00187ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00187b2:	e8 39 7d fe ff       	call   c00004f0 <memset>
c00187b7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00187bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00187be:	e8 1e fb ff ff       	call   c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c00187c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00187d1:	0d 07 04 00 00       	or     eax,0x407
c00187d6:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c00187d9:	e9 3b ff ff ff       	jmp    c0018719 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c00187de <VAS::allocatePages(int, int)>:
c00187de:	55                   	push   ebp
c00187df:	57                   	push   edi
c00187e0:	56                   	push   esi
c00187e1:	53                   	push   ebx
c00187e2:	83 ec 1c             	sub    esp,0x1c
c00187e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00187e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00187ed:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c00187f1:	75 75                	jne    c0018868 <VAS::allocatePages(int, int)+0x8a>
c00187f3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00187f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187fa:	85 c0                	test   eax,eax
c00187fc:	74 49                	je     c0018847 <VAS::allocatePages(int, int)+0x69>
c00187fe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018802:	89 d5                	mov    ebp,edx
c0018804:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018808:	c1 e5 0c             	shl    ebp,0xc
c001880b:	01 dd                	add    ebp,ebx
c001880d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018810:	81 cf 00 04 00 00    	or     edi,0x400
c0018816:	85 d2                	test   edx,edx
c0018818:	7e 1b                	jle    c0018835 <VAS::allocatePages(int, int)+0x57>
c001881a:	e8 9b df ff ff       	call   c00167ba <Phys::allocatePage()>
c001881f:	57                   	push   edi
c0018820:	53                   	push   ebx
c0018821:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018827:	50                   	push   eax
c0018828:	56                   	push   esi
c0018829:	e8 a8 fe ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001882e:	83 c4 10             	add    esp,0x10
c0018831:	39 dd                	cmp    ebp,ebx
c0018833:	75 e5                	jne    c001881a <VAS::allocatePages(int, int)+0x3c>
c0018835:	0f 20 d8             	mov    eax,cr3
c0018838:	0f 22 d8             	mov    cr3,eax
c001883b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001883f:	83 c4 1c             	add    esp,0x1c
c0018842:	5b                   	pop    ebx
c0018843:	5e                   	pop    esi
c0018844:	5f                   	pop    edi
c0018845:	5d                   	pop    ebp
c0018846:	c3                   	ret    
c0018847:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001884b:	83 ec 0c             	sub    esp,0xc
c001884e:	68 e0 15 03 c0       	push   0xc00315e0
c0018853:	e8 12 7a 00 00       	call   c002026a <KePanic(char const*)>
c0018858:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001885b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001885f:	83 c4 10             	add    esp,0x10
c0018862:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018866:	eb 96                	jmp    c00187fe <VAS::allocatePages(int, int)+0x20>
c0018868:	83 ec 0c             	sub    esp,0xc
c001886b:	52                   	push   edx
c001886c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0018870:	e8 58 f7 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c0018875:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018879:	83 c4 10             	add    esp,0x10
c001887c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018881:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018885:	77 38                	ja     c00188bf <VAS::allocatePages(int, int)+0xe1>
c0018887:	85 d2                	test   edx,edx
c0018889:	7e aa                	jle    c0018835 <VAS::allocatePages(int, int)+0x57>
c001888b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001888f:	c1 e2 0c             	shl    edx,0xc
c0018892:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0018896:	81 cf 00 04 00 00    	or     edi,0x400
c001889c:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c001889f:	e8 16 df ff ff       	call   c00167ba <Phys::allocatePage()>
c00188a4:	57                   	push   edi
c00188a5:	53                   	push   ebx
c00188a6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00188ac:	50                   	push   eax
c00188ad:	56                   	push   esi
c00188ae:	e8 23 fe ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00188b3:	83 c4 10             	add    esp,0x10
c00188b6:	39 dd                	cmp    ebp,ebx
c00188b8:	75 e5                	jne    c001889f <VAS::allocatePages(int, int)+0xc1>
c00188ba:	e9 76 ff ff ff       	jmp    c0018835 <VAS::allocatePages(int, int)+0x57>
c00188bf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00188c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00188ca:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c00188d1:	74 b4                	je     c0018887 <VAS::allocatePages(int, int)+0xa9>
c00188d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188d7:	80 cc 01             	or     ah,0x1
c00188da:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00188de:	eb a7                	jmp    c0018887 <VAS::allocatePages(int, int)+0xa9>

c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00188e0:	55                   	push   ebp
c00188e1:	57                   	push   edi
c00188e2:	56                   	push   esi
c00188e3:	53                   	push   ebx
c00188e4:	83 ec 1c             	sub    esp,0x1c
c00188e7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00188eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00188ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00188f3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00188f7:	85 db                	test   ebx,ebx
c00188f9:	7e 2c                	jle    c0018927 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c00188fb:	c1 e3 0c             	shl    ebx,0xc
c00188fe:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018901:	89 f3                	mov    ebx,esi
c0018903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018907:	55                   	push   ebp
c0018908:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001890c:	29 f2                	sub    edx,esi
c001890e:	01 da                	add    edx,ebx
c0018910:	52                   	push   edx
c0018911:	53                   	push   ebx
c0018912:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018918:	57                   	push   edi
c0018919:	e8 b8 fd ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c001891e:	83 c4 10             	add    esp,0x10
c0018921:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c0018925:	75 e0                	jne    c0018907 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c0018927:	0f 20 d8             	mov    eax,cr3
c001892a:	0f 22 d8             	mov    cr3,eax
c001892d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018931:	83 c4 1c             	add    esp,0x1c
c0018934:	5b                   	pop    ebx
c0018935:	5e                   	pop    esi
c0018936:	5f                   	pop    edi
c0018937:	5d                   	pop    ebp
c0018938:	c3                   	ret    
c0018939:	90                   	nop

c001893a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001893a:	55                   	push   ebp
c001893b:	57                   	push   edi
c001893c:	56                   	push   esi
c001893d:	53                   	push   ebx
c001893e:	83 ec 1c             	sub    esp,0x1c
c0018941:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018945:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018949:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001894d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018951:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018955:	09 d8                	or     eax,ebx
c0018957:	a9 ff 0f 00 00       	test   eax,0xfff
c001895c:	75 4b                	jne    c00189a9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001895e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018961:	89 de                	mov    esi,ebx
c0018963:	c1 ee 16             	shr    esi,0x16
c0018966:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c001896d:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c0018971:	74 48                	je     c00189bb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c0018973:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c0018978:	c1 eb 0a             	shr    ebx,0xa
c001897b:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001897f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0018983:	83 ff 01             	cmp    edi,0x1
c0018986:	19 c0                	sbb    eax,eax
c0018988:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001898e:	c1 e6 0c             	shl    esi,0xc
c0018991:	25 00 00 c0 ff       	and    eax,0xffc00000
c0018996:	01 f3                	add    ebx,esi
c0018998:	09 ca                	or     edx,ecx
c001899a:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00189a1:	83 c4 1c             	add    esp,0x1c
c00189a4:	5b                   	pop    ebx
c00189a5:	5e                   	pop    esi
c00189a6:	5f                   	pop    edi
c00189a7:	5d                   	pop    ebp
c00189a8:	c3                   	ret    
c00189a9:	83 ec 0c             	sub    esp,0xc
c00189ac:	68 0c 16 03 c0       	push   0xc003160c
c00189b1:	e8 b4 78 00 00       	call   c002026a <KePanic(char const*)>
c00189b6:	83 c4 10             	add    esp,0x10
c00189b9:	eb a3                	jmp    c001895e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00189bb:	e8 fa dd ff ff       	call   c00167ba <Phys::allocatePage()>
c00189c0:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00189c6:	83 ec 0c             	sub    esp,0xc
c00189c9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00189cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00189d1:	6a 01                	push   0x1
c00189d3:	e8 f5 f5 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c00189d8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00189df:	6a 01                	push   0x1
c00189e1:	50                   	push   eax
c00189e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e6:	50                   	push   eax
c00189e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00189eb:	51                   	push   ecx
c00189ec:	e8 ef fe ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189f1:	83 c4 1c             	add    esp,0x1c
c00189f4:	68 00 10 00 00       	push   0x1000
c00189f9:	6a 00                	push   0x0
c00189fb:	50                   	push   eax
c00189fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018a00:	e8 eb 7a fe ff       	call   c00004f0 <memset>
c0018a05:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018a0c:	e8 d0 f8 ff ff       	call   c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0018a11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a15:	83 c4 10             	add    esp,0x10
c0018a18:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018a1b:	81 ca 07 04 00 00    	or     edx,0x407
c0018a21:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c0018a24:	e9 4a ff ff ff       	jmp    c0018973 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018a29:	90                   	nop

c0018a2a <VAS::VAS(bool)>:
c0018a2a:	53                   	push   ebx
c0018a2b:	83 ec 28             	sub    esp,0x28
c0018a2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018a32:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018a41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018a4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a50:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018a54:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0018a57:	e8 5e dd ff ff       	call   c00167ba <Phys::allocatePage()>
c0018a5c:	89 c2                	mov    edx,eax
c0018a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a62:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018a65:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0018a6b:	83 ec 0c             	sub    esp,0xc
c0018a6e:	6a 01                	push   0x1
c0018a70:	e8 58 f5 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c0018a75:	83 c4 10             	add    esp,0x10
c0018a78:	89 c2                	mov    edx,eax
c0018a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018a81:	83 ec 0c             	sub    esp,0xc
c0018a84:	6a 03                	push   0x3
c0018a86:	6a 01                	push   0x1
c0018a88:	52                   	push   edx
c0018a89:	50                   	push   eax
c0018a8a:	53                   	push   ebx
c0018a8b:	e8 50 fe ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018a90:	83 c4 20             	add    esp,0x20
c0018a93:	89 c2                	mov    edx,eax
c0018a95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a99:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018a9c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018aa4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018aac:	7f 1d                	jg     c0018acb <VAS::VAS(bool)+0xa1>
c0018aae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ab2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018ab5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018ab9:	c1 e2 02             	shl    edx,0x2
c0018abc:	01 d0                	add    eax,edx
c0018abe:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018ac4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018ac9:	eb d9                	jmp    c0018aa4 <VAS::VAS(bool)+0x7a>
c0018acb:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018ad3:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018adb:	7f 7e                	jg     c0018b5b <VAS::VAS(bool)+0x131>
c0018add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ae1:	2d 00 02 00 00       	sub    eax,0x200
c0018ae6:	c1 e0 0c             	shl    eax,0xc
c0018ae9:	83 c8 05             	or     eax,0x5
c0018aec:	89 c2                	mov    edx,eax
c0018aee:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018af3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018af9:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aff:	83 e0 10             	and    eax,0x10
c0018b02:	0f b6 c0             	movzx  eax,al
c0018b05:	85 c0                	test   eax,eax
c0018b07:	74 07                	je     c0018b10 <VAS::VAS(bool)+0xe6>
c0018b09:	b8 00 01 00 00       	mov    eax,0x100
c0018b0e:	eb 05                	jmp    c0018b15 <VAS::VAS(bool)+0xeb>
c0018b10:	b8 00 00 00 00       	mov    eax,0x0
c0018b15:	09 d0                	or     eax,edx
c0018b17:	89 c1                	mov    ecx,eax
c0018b19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b1d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b20:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b24:	c1 e2 02             	shl    edx,0x2
c0018b27:	01 d0                	add    eax,edx
c0018b29:	89 ca                	mov    edx,ecx
c0018b2b:	89 10                	mov    DWORD PTR [eax],edx
c0018b2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b31:	2d 40 03 00 00       	sub    eax,0x340
c0018b36:	83 f8 7f             	cmp    eax,0x7f
c0018b39:	77 16                	ja     c0018b51 <VAS::VAS(bool)+0x127>
c0018b3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018b46:	c1 e2 02             	shl    edx,0x2
c0018b49:	01 d0                	add    eax,edx
c0018b4b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018b51:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018b56:	e9 78 ff ff ff       	jmp    c0018ad3 <VAS::VAS(bool)+0xa9>
c0018b5b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b66:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018b6c:	83 e0 10             	and    eax,0x10
c0018b6f:	0f b6 c0             	movzx  eax,al
c0018b72:	85 c0                	test   eax,eax
c0018b74:	74 07                	je     c0018b7d <VAS::VAS(bool)+0x153>
c0018b76:	b8 03 41 00 00       	mov    eax,0x4103
c0018b7b:	eb 05                	jmp    c0018b82 <VAS::VAS(bool)+0x158>
c0018b7d:	b8 03 40 00 00       	mov    eax,0x4003
c0018b82:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018b86:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018b89:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018b8f:	89 02                	mov    DWORD PTR [edx],eax
c0018b91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b95:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018b98:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b9d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018ba3:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ba9:	83 e0 10             	and    eax,0x10
c0018bac:	0f b6 c0             	movzx  eax,al
c0018baf:	85 c0                	test   eax,eax
c0018bb1:	74 07                	je     c0018bba <VAS::VAS(bool)+0x190>
c0018bb3:	b8 00 01 00 00       	mov    eax,0x100
c0018bb8:	eb 05                	jmp    c0018bbf <VAS::VAS(bool)+0x195>
c0018bba:	b8 00 00 00 00       	mov    eax,0x0
c0018bbf:	09 c2                	or     edx,eax
c0018bc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bc5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018bc8:	05 fc 0f 00 00       	add    eax,0xffc
c0018bcd:	83 ca 03             	or     edx,0x3
c0018bd0:	89 10                	mov    DWORD PTR [eax],edx
c0018bd2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018bd7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018bdd:	83 ec 0c             	sub    esp,0xc
c0018be0:	50                   	push   eax
c0018be1:	e8 f0 29 00 00       	call   c001b5d6 <Device::getName()>
c0018be6:	83 c4 10             	add    esp,0x10
c0018be9:	83 ec 08             	sub    esp,0x8
c0018bec:	68 dc 17 03 c0       	push   0xc00317dc
c0018bf1:	50                   	push   eax
c0018bf2:	e8 89 7b fe ff       	call   c0000780 <strcmp>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	85 c0                	test   eax,eax
c0018bfc:	0f 94 c0             	sete   al
c0018bff:	0f b6 c0             	movzx  eax,al
c0018c02:	85 c0                	test   eax,eax
c0018c04:	74 68                	je     c0018c6e <VAS::VAS(bool)+0x244>
c0018c06:	fa                   	cli    
c0018c07:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018c0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c12:	05 7c 09 00 00       	add    eax,0x97c
c0018c17:	83 ec 0c             	sub    esp,0xc
c0018c1a:	50                   	push   eax
c0018c1b:	e8 76 d3 ff ff       	call   c0015f96 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018c20:	83 c4 10             	add    esp,0x10
c0018c23:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018c28:	89 c3                	mov    ebx,eax
c0018c2a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018c2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018c35:	05 7c 09 00 00       	add    eax,0x97c
c0018c3a:	83 ec 0c             	sub    esp,0xc
c0018c3d:	50                   	push   eax
c0018c3e:	e8 53 d3 ff ff       	call   c0015f96 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018c43:	83 c4 10             	add    esp,0x10
c0018c46:	83 ec 08             	sub    esp,0x8
c0018c49:	50                   	push   eax
c0018c4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c4e:	e8 6f f6 ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c58:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018c5d:	6a 11                	push   0x11
c0018c5f:	53                   	push   ebx
c0018c60:	50                   	push   eax
c0018c61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c65:	e8 6c fa ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018c6a:	83 c4 10             	add    esp,0x10
c0018c6d:	fb                   	sti    
c0018c6e:	90                   	nop
c0018c6f:	83 c4 28             	add    esp,0x28
c0018c72:	5b                   	pop    ebx
c0018c73:	c3                   	ret    

c0018c74 <VAS::evict(unsigned long)>:
c0018c74:	55                   	push   ebp
c0018c75:	57                   	push   edi
c0018c76:	56                   	push   esi
c0018c77:	53                   	push   ebx
c0018c78:	83 ec 1c             	sub    esp,0x1c
c0018c7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c7f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c87:	e8 96 f4 ff ff       	call   c0018122 <Virt::allocateSwapfilePage()>
c0018c8c:	89 c7                	mov    edi,eax
c0018c8e:	a1 0c 3d 03 c0       	mov    eax,ds:0xc0033d0c
c0018c93:	85 c0                	test   eax,eax
c0018c95:	7e 40                	jle    c0018cd7 <VAS::evict(unsigned long)+0x63>
c0018c97:	89 ee                	mov    esi,ebp
c0018c99:	31 db                	xor    ebx,ebx
c0018c9b:	83 ec 0c             	sub    esp,0xc
c0018c9e:	57                   	push   edi
c0018c9f:	e8 68 f4 ff ff       	call   c001810c <Virt::swapIDToSector(unsigned long)>
c0018ca4:	31 d2                	xor    edx,edx
c0018ca6:	89 34 24             	mov    DWORD PTR [esp],esi
c0018ca9:	81 c6 00 02 00 00    	add    esi,0x200
c0018caf:	6a 01                	push   0x1
c0018cb1:	52                   	push   edx
c0018cb2:	01 d8                	add    eax,ebx
c0018cb4:	83 c3 01             	add    ebx,0x1
c0018cb7:	50                   	push   eax
c0018cb8:	0f be 05 18 3d 03 c0 	movsx  eax,BYTE PTR ds:0xc0033d18
c0018cbf:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018cc6:	50                   	push   eax
c0018cc7:	e8 0e 3b 00 00       	call   c001c7da <LogicalDisk::write(unsigned long long, int, void*)>
c0018ccc:	83 c4 20             	add    esp,0x20
c0018ccf:	39 1d 0c 3d 03 c0    	cmp    DWORD PTR ds:0xc0033d0c,ebx
c0018cd5:	7f c4                	jg     c0018c9b <VAS::evict(unsigned long)+0x27>
c0018cd7:	c1 e7 0c             	shl    edi,0xc
c0018cda:	83 ec 08             	sub    esp,0x8
c0018cdd:	55                   	push   ebp
c0018cde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018ce2:	50                   	push   eax
c0018ce3:	e8 da f5 ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018ce8:	8b 10                	mov    edx,DWORD PTR [eax]
c0018cea:	89 d3                	mov    ebx,edx
c0018cec:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018cf2:	09 d7                	or     edi,edx
c0018cf4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018cfa:	89 38                	mov    DWORD PTR [eax],edi
c0018cfc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018cff:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018d05:	83 c2 01             	add    edx,0x1
c0018d08:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018d0e:	e8 3e da ff ff       	call   c0016751 <Phys::freePage(unsigned long)>
c0018d13:	0f 20 d8             	mov    eax,cr3
c0018d16:	0f 22 d8             	mov    cr3,eax
c0018d19:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018d1f:	51                   	push   ecx
c0018d20:	55                   	push   ebp
c0018d21:	53                   	push   ebx
c0018d22:	68 30 16 03 c0       	push   0xc0031630
c0018d27:	e8 b6 05 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018d2c:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018d31:	c7 44 24 50 ea 17 03 c0 	mov    DWORD PTR [esp+0x50],0xc00317ea
c0018d39:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018d3d:	8d 50 01             	lea    edx,[eax+0x1]
c0018d40:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018d46:	83 c4 3c             	add    esp,0x3c
c0018d49:	5b                   	pop    ebx
c0018d4a:	5e                   	pop    esi
c0018d4b:	5f                   	pop    edi
c0018d4c:	5d                   	pop    ebp
c0018d4d:	e9 90 05 00 00       	jmp    c00192e2 <Dbg::kprintf(char const*, ...)>

c0018d52 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018d52:	55                   	push   ebp
c0018d53:	57                   	push   edi
c0018d54:	56                   	push   esi
c0018d55:	53                   	push   ebx
c0018d56:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018d5c:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018d63:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018d69:	77 78                	ja     c0018de3 <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018d6b:	83 ec 08             	sub    esp,0x8
c0018d6e:	53                   	push   ebx
c0018d6f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018d75:	68 0d 18 03 c0       	push   0xc003180d
c0018d7a:	e8 63 05 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018d7f:	58                   	pop    eax
c0018d80:	5a                   	pop    edx
c0018d81:	53                   	push   ebx
c0018d82:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018d89:	51                   	push   ecx
c0018d8a:	e8 33 f5 ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018d8f:	83 c4 10             	add    esp,0x10
c0018d92:	85 c0                	test   eax,eax
c0018d94:	89 c5                	mov    ebp,eax
c0018d96:	0f 95 c0             	setne  al
c0018d99:	85 db                	test   ebx,ebx
c0018d9b:	0f 95 c2             	setne  dl
c0018d9e:	21 d0                	and    eax,edx
c0018da0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018da4:	a8 01                	test   al,0x1
c0018da6:	75 0f                	jne    c0018db7 <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018da8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018dac:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018db2:	5b                   	pop    ebx
c0018db3:	5e                   	pop    esi
c0018db4:	5f                   	pop    edi
c0018db5:	5d                   	pop    ebp
c0018db6:	c3                   	ret    
c0018db7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018dba:	f6 c4 02             	test   ah,0x2
c0018dbd:	75 39                	jne    c0018df8 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018dbf:	89 c2                	mov    edx,eax
c0018dc1:	81 e2 01 04 00 00    	and    edx,0x401
c0018dc7:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018dcd:	74 73                	je     c0018e42 <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018dcf:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018dd4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018dd8:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018dde:	5b                   	pop    ebx
c0018ddf:	5e                   	pop    esi
c0018de0:	5f                   	pop    edi
c0018de1:	5d                   	pop    ebp
c0018de2:	c3                   	ret    
c0018de3:	83 ec 0c             	sub    esp,0xc
c0018de6:	68 fb 17 03 c0       	push   0xc00317fb
c0018deb:	e8 7a 74 00 00       	call   c002026a <KePanic(char const*)>
c0018df0:	83 c4 10             	add    esp,0x10
c0018df3:	e9 73 ff ff ff       	jmp    c0018d6b <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018df8:	83 ec 0c             	sub    esp,0xc
c0018dfb:	89 de                	mov    esi,ebx
c0018dfd:	68 60 16 03 c0       	push   0xc0031660
c0018e02:	e8 db 04 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018e07:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018e0b:	e8 aa d9 ff ff       	call   c00167ba <Phys::allocatePage()>
c0018e10:	ba 00 10 00 00       	mov    edx,0x1000
c0018e15:	89 d1                	mov    ecx,edx
c0018e17:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e19:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018e1c:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018e22:	09 c8                	or     eax,ecx
c0018e24:	83 c8 02             	or     eax,0x2
c0018e27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018e2a:	0f 20 d8             	mov    eax,cr3
c0018e2d:	0f 22 d8             	mov    cr3,eax
c0018e30:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018e34:	89 df                	mov    edi,ebx
c0018e36:	89 d1                	mov    ecx,edx
c0018e38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e3a:	83 c4 10             	add    esp,0x10
c0018e3d:	e9 66 ff ff ff       	jmp    c0018da8 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0018e42:	c1 e8 0c             	shr    eax,0xc
c0018e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e49:	e8 6c d9 ff ff       	call   c00167ba <Phys::allocatePage()>
c0018e4e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018e51:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0018e57:	09 c2                	or     edx,eax
c0018e59:	81 ca 01 08 00 00    	or     edx,0x801
c0018e5f:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0018e62:	a1 0c 3d 03 c0       	mov    eax,ds:0xc0033d0c
c0018e67:	85 c0                	test   eax,eax
c0018e69:	7e 44                	jle    c0018eaf <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c0018e6b:	89 df                	mov    edi,ebx
c0018e6d:	31 f6                	xor    esi,esi
c0018e6f:	83 ec 0c             	sub    esp,0xc
c0018e72:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018e76:	51                   	push   ecx
c0018e77:	e8 90 f2 ff ff       	call   c001810c <Virt::swapIDToSector(unsigned long)>
c0018e7c:	31 d2                	xor    edx,edx
c0018e7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018e81:	81 c7 00 02 00 00    	add    edi,0x200
c0018e87:	6a 01                	push   0x1
c0018e89:	52                   	push   edx
c0018e8a:	01 f0                	add    eax,esi
c0018e8c:	83 c6 01             	add    esi,0x1
c0018e8f:	50                   	push   eax
c0018e90:	0f be 05 18 3d 03 c0 	movsx  eax,BYTE PTR ds:0xc0033d18
c0018e97:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c0018e9e:	55                   	push   ebp
c0018e9f:	e8 ca 38 00 00       	call   c001c76e <LogicalDisk::read(unsigned long long, int, void*)>
c0018ea4:	83 c4 20             	add    esp,0x20
c0018ea7:	39 35 0c 3d 03 c0    	cmp    DWORD PTR ds:0xc0033d0c,esi
c0018ead:	7f c0                	jg     c0018e6f <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c0018eaf:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018eb4:	83 ec 04             	sub    esp,0x4
c0018eb7:	83 e8 01             	sub    eax,0x1
c0018eba:	50                   	push   eax
c0018ebb:	53                   	push   ebx
c0018ebc:	68 20 18 03 c0       	push   0xc0031820
c0018ec1:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018ec6:	e8 17 04 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018ecb:	58                   	pop    eax
c0018ecc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ed0:	52                   	push   edx
c0018ed1:	e8 13 f2 ff ff       	call   c00180e9 <Virt::freeSwapfilePage(unsigned long)>
c0018ed6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018edb:	83 c4 10             	add    esp,0x10
c0018ede:	83 e8 01             	sub    eax,0x1
c0018ee1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018ee6:	85 c0                	test   eax,eax
c0018ee8:	75 01                	jne    c0018eeb <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c0018eea:	fb                   	sti    
c0018eeb:	0f 20 d8             	mov    eax,cr3
c0018eee:	0f 22 d8             	mov    cr3,eax
c0018ef1:	e9 b2 fe ff ff       	jmp    c0018da8 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0018ef6 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018ef6:	55                   	push   ebp
c0018ef7:	57                   	push   edi
c0018ef8:	56                   	push   esi
c0018ef9:	53                   	push   ebx
c0018efa:	83 ec 28             	sub    esp,0x28
c0018efd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f01:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018f05:	50                   	push   eax
c0018f06:	e8 c2 f0 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c0018f0b:	83 c4 0c             	add    esp,0xc
c0018f0e:	6a 07                	push   0x7
c0018f10:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018f14:	52                   	push   edx
c0018f15:	89 c5                	mov    ebp,eax
c0018f17:	53                   	push   ebx
c0018f18:	e8 c1 f8 ff ff       	call   c00187de <VAS::allocatePages(int, int)>
c0018f1d:	83 c4 10             	add    esp,0x10
c0018f20:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018f24:	89 c7                	mov    edi,eax
c0018f26:	85 c9                	test   ecx,ecx
c0018f28:	74 2f                	je     c0018f59 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018f2a:	31 f6                	xor    esi,esi
c0018f2c:	e8 89 d8 ff ff       	call   c00167ba <Phys::allocatePage()>
c0018f31:	83 c6 01             	add    esi,0x1
c0018f34:	6a 03                	push   0x3
c0018f36:	55                   	push   ebp
c0018f37:	50                   	push   eax
c0018f38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018f3c:	53                   	push   ebx
c0018f3d:	e8 94 f7 ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018f42:	6a 07                	push   0x7
c0018f44:	57                   	push   edi
c0018f45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f49:	50                   	push   eax
c0018f4a:	53                   	push   ebx
c0018f4b:	e8 86 f7 ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018f50:	83 c4 20             	add    esp,0x20
c0018f53:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0018f57:	75 d3                	jne    c0018f2c <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018f59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f5d:	89 28                	mov    DWORD PTR [eax],ebp
c0018f5f:	83 c4 1c             	add    esp,0x1c
c0018f62:	89 f8                	mov    eax,edi
c0018f64:	5b                   	pop    ebx
c0018f65:	5e                   	pop    esi
c0018f66:	5f                   	pop    edi
c0018f67:	5d                   	pop    ebp
c0018f68:	c3                   	ret    
c0018f69:	90                   	nop

c0018f6a <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018f6a:	53                   	push   ebx
c0018f6b:	83 ec 14             	sub    esp,0x14
c0018f6e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018f72:	68 80 16 03 c0       	push   0xc0031680
c0018f77:	e8 66 03 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018f7c:	c7 04 24 e0 16 03 c0 	mov    DWORD PTR [esp],0xc00316e0
c0018f83:	e8 5a 03 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0018f88:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018f8c:	83 c4 18             	add    esp,0x18
c0018f8f:	5b                   	pop    ebx
c0018f90:	e9 4c f3 ff ff       	jmp    c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0018f95:	90                   	nop

c0018f96 <VAS::scanForEviction()>:
c0018f96:	57                   	push   edi
c0018f97:	56                   	push   esi
c0018f98:	31 f6                	xor    esi,esi
c0018f9a:	53                   	push   ebx
c0018f9b:	83 ec 10             	sub    esp,0x10
c0018f9e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018fa2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018fa5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018fab:	75 0e                	jne    c0018fbb <VAS::scanForEviction()+0x25>
c0018fad:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018fb0:	89 da                	mov    edx,ebx
c0018fb2:	c1 ea 16             	shr    edx,0x16
c0018fb5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018fb9:	74 57                	je     c0019012 <VAS::scanForEviction()+0x7c>
c0018fbb:	53                   	push   ebx
c0018fbc:	57                   	push   edi
c0018fbd:	e8 00 f3 ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0018fc2:	5a                   	pop    edx
c0018fc3:	59                   	pop    ecx
c0018fc4:	8b 10                	mov    edx,DWORD PTR [eax]
c0018fc6:	89 d1                	mov    ecx,edx
c0018fc8:	c1 e9 0c             	shr    ecx,0xc
c0018fcb:	74 10                	je     c0018fdd <VAS::scanForEviction()+0x47>
c0018fcd:	89 d1                	mov    ecx,edx
c0018fcf:	81 e1 01 08 00 00    	and    ecx,0x801
c0018fd5:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018fdb:	74 40                	je     c001901d <VAS::scanForEviction()+0x87>
c0018fdd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018fe3:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018fe9:	76 2d                	jbe    c0019018 <VAS::scanForEviction()+0x82>
c0018feb:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018ff2:	83 c6 01             	add    esi,0x1
c0018ff5:	83 fe 03             	cmp    esi,0x3
c0018ff8:	74 32                	je     c001902c <VAS::scanForEviction()+0x96>
c0018ffa:	31 db                	xor    ebx,ebx
c0018ffc:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0019002:	75 b7                	jne    c0018fbb <VAS::scanForEviction()+0x25>
c0019004:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0019007:	89 da                	mov    edx,ebx
c0019009:	c1 ea 16             	shr    edx,0x16
c001900c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0019010:	75 a9                	jne    c0018fbb <VAS::scanForEviction()+0x25>
c0019012:	81 c3 00 00 40 00    	add    ebx,0x400000
c0019018:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c001901b:	eb 88                	jmp    c0018fa5 <VAS::scanForEviction()+0xf>
c001901d:	f6 c2 20             	test   dl,0x20
c0019020:	74 13                	je     c0019035 <VAS::scanForEviction()+0x9f>
c0019022:	83 e2 df             	and    edx,0xffffffdf
c0019025:	89 10                	mov    DWORD PTR [eax],edx
c0019027:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001902a:	eb b1                	jmp    c0018fdd <VAS::scanForEviction()+0x47>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	31 c0                	xor    eax,eax
c0019031:	5b                   	pop    ebx
c0019032:	5e                   	pop    esi
c0019033:	5f                   	pop    edi
c0019034:	c3                   	ret    
c0019035:	89 d0                	mov    eax,edx
c0019037:	83 ec 08             	sub    esp,0x8
c001903a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001903f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019043:	53                   	push   ebx
c0019044:	68 35 18 03 c0       	push   0xc0031835
c0019049:	e8 94 02 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001904e:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019051:	58                   	pop    eax
c0019052:	5a                   	pop    edx
c0019053:	51                   	push   ecx
c0019054:	57                   	push   edi
c0019055:	e8 1a fc ff ff       	call   c0018c74 <VAS::evict(unsigned long)>
c001905a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001905d:	5b                   	pop    ebx
c001905e:	5e                   	pop    esi
c001905f:	50                   	push   eax
c0019060:	68 49 18 03 c0       	push   0xc0031849
c0019065:	e8 78 02 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001906a:	58                   	pop    eax
c001906b:	5a                   	pop    edx
c001906c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019070:	50                   	push   eax
c0019071:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019075:	68 5c 18 03 c0       	push   0xc003185c
c001907a:	e8 63 02 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001907f:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	81 c1 00 10 00 00    	add    ecx,0x1000
c001908b:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c001908e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019092:	83 c4 10             	add    esp,0x10
c0019095:	5b                   	pop    ebx
c0019096:	5e                   	pop    esi
c0019097:	5f                   	pop    edi
c0019098:	c3                   	ret    

c0019099 <mapVASFirstTime>:
c0019099:	55                   	push   ebp
c001909a:	57                   	push   edi
c001909b:	56                   	push   esi
c001909c:	53                   	push   ebx
c001909d:	83 ec 0c             	sub    esp,0xc
c00190a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190a5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00190a8:	83 fa 01             	cmp    edx,0x1
c00190ab:	0f 84 cb 00 00 00    	je     c001917c <mapVASFirstTime+0xe3>
c00190b1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00190b4:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00190b9:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00190be:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c00190c1:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00190c7:	c1 e5 15             	shl    ebp,0x15
c00190ca:	29 eb                	sub    ebx,ebp
c00190cc:	29 ef                	sub    edi,ebp
c00190ce:	e8 e7 d6 ff ff       	call   c00167ba <Phys::allocatePage()>
c00190d3:	83 ec 0c             	sub    esp,0xc
c00190d6:	68 03 04 00 00       	push   0x403
c00190db:	6a 01                	push   0x1
c00190dd:	53                   	push   ebx
c00190de:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00190e4:	50                   	push   eax
c00190e5:	56                   	push   esi
c00190e6:	e8 f5 f7 ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00190eb:	83 c4 20             	add    esp,0x20
c00190ee:	39 fb                	cmp    ebx,edi
c00190f0:	75 dc                	jne    c00190ce <mapVASFirstTime+0x35>
c00190f2:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00190f7:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00190fc:	29 eb                	sub    ebx,ebp
c00190fe:	29 ef                	sub    edi,ebp
c0019100:	e8 b5 d6 ff ff       	call   c00167ba <Phys::allocatePage()>
c0019105:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019109:	83 fa 01             	cmp    edx,0x1
c001910c:	19 d2                	sbb    edx,edx
c001910e:	83 ec 0c             	sub    esp,0xc
c0019111:	83 e2 04             	and    edx,0x4
c0019114:	81 c2 03 04 00 00    	add    edx,0x403
c001911a:	52                   	push   edx
c001911b:	6a 01                	push   0x1
c001911d:	53                   	push   ebx
c001911e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0019124:	50                   	push   eax
c0019125:	56                   	push   esi
c0019126:	e8 b5 f7 ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001912b:	83 c4 20             	add    esp,0x20
c001912e:	39 df                	cmp    edi,ebx
c0019130:	75 ce                	jne    c0019100 <mapVASFirstTime+0x67>
c0019132:	83 ec 0c             	sub    esp,0xc
c0019135:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c001913a:	6a 04                	push   0x4
c001913c:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0019142:	6a ff                	push   0xffffffff
c0019144:	c1 eb 0c             	shr    ebx,0xc
c0019147:	53                   	push   ebx
c0019148:	68 00 50 03 c0       	push   0xc0035000
c001914d:	56                   	push   esi
c001914e:	e8 09 f3 ff ff       	call   c001845c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0019153:	83 c4 14             	add    esp,0x14
c0019156:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c001915b:	6a 04                	push   0x4
c001915d:	6a ff                	push   0xffffffff
c001915f:	53                   	push   ebx
c0019160:	68 00 50 03 c0       	push   0xc0035000
c0019165:	50                   	push   eax
c0019166:	e8 f1 f2 ff ff       	call   c001845c <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001916b:	0f 20 d8             	mov    eax,cr3
c001916e:	0f 22 d8             	mov    cr3,eax
c0019171:	83 c4 20             	add    esp,0x20
c0019174:	83 c4 0c             	add    esp,0xc
c0019177:	5b                   	pop    ebx
c0019178:	5e                   	pop    esi
c0019179:	5f                   	pop    edi
c001917a:	5d                   	pop    ebp
c001917b:	c3                   	ret    
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	68 69 18 03 c0       	push   0xc0031869
c0019184:	e8 59 01 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019189:	83 c4 10             	add    esp,0x10
c001918c:	83 c4 0c             	add    esp,0xc
c001918f:	5b                   	pop    ebx
c0019190:	5e                   	pop    esi
c0019191:	5f                   	pop    edi
c0019192:	5d                   	pop    ebp
c0019193:	c3                   	ret    

c0019194 <__cxa_atexit>:
c0019194:	31 c0                	xor    eax,eax
c0019196:	c3                   	ret    

c0019197 <__cxa_finalize>:
c0019197:	c3                   	ret    

c0019198 <__stack_chk_fail>:
c0019198:	55                   	push   ebp
c0019199:	89 e5                	mov    ebp,esp
c001919b:	83 ec 10             	sub    esp,0x10
c001919e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00191a1:	68 82 18 03 c0       	push   0xc0031882
c00191a6:	e8 37 01 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00191ab:	58                   	pop    eax
c00191ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00191af:	5a                   	pop    edx
c00191b0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00191b3:	68 82 18 03 c0       	push   0xc0031882
c00191b8:	e8 25 01 00 00       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00191bd:	c7 04 24 8a 18 03 c0 	mov    DWORD PTR [esp],0xc003188a
c00191c4:	e8 a1 70 00 00       	call   c002026a <KePanic(char const*)>
c00191c9:	83 c4 10             	add    esp,0x10
c00191cc:	c9                   	leave  
c00191cd:	c3                   	ret    

c00191ce <__cxa_pure_virtual>:
c00191ce:	83 ec 18             	sub    esp,0x18
c00191d1:	68 a2 18 03 c0       	push   0xc00318a2
c00191d6:	e8 8f 70 00 00       	call   c002026a <KePanic(char const*)>
c00191db:	83 c4 1c             	add    esp,0x1c
c00191de:	c3                   	ret    

c00191df <operator new[](unsigned long)>:
c00191df:	e9 b7 d2 ff ff       	jmp    c001649b <malloc>

c00191e4 <operator delete(void*, unsigned long)>:
c00191e4:	e9 e2 d2 ff ff       	jmp    c00164cb <rfree>

c00191e9 <operator delete[](void*)>:
c00191e9:	e9 dd d2 ff ff       	jmp    c00164cb <rfree>

c00191ee <operator delete[](void*, unsigned long)>:
c00191ee:	e9 d8 d2 ff ff       	jmp    c00164cb <rfree>

c00191f3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00191f3:	55                   	push   ebp
c00191f4:	57                   	push   edi
c00191f5:	56                   	push   esi
c00191f6:	53                   	push   ebx
c00191f7:	83 ec 20             	sub    esp,0x20
c00191fa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00191fe:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c0019206:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001920a:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c0019212:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019216:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c001921e:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c0019226:	89 f7                	mov    edi,esi
c0019228:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001922d:	89 eb                	mov    ebx,ebp
c001922f:	eb 02                	jmp    c0019233 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0019231:	89 c7                	mov    edi,eax
c0019233:	31 d2                	xor    edx,edx
c0019235:	89 f8                	mov    eax,edi
c0019237:	f7 f1                	div    ecx
c0019239:	83 c3 01             	add    ebx,0x1
c001923c:	39 cf                	cmp    edi,ecx
c001923e:	73 f1                	jae    c0019231 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0019240:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0019243:	eb 02                	jmp    c0019247 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c0019245:	89 c6                	mov    esi,eax
c0019247:	31 d2                	xor    edx,edx
c0019249:	89 f0                	mov    eax,esi
c001924b:	f7 f1                	div    ecx
c001924d:	83 eb 01             	sub    ebx,0x1
c0019250:	39 ce                	cmp    esi,ecx
c0019252:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0019256:	88 13                	mov    BYTE PTR [ebx],dl
c0019258:	73 eb                	jae    c0019245 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c001925a:	83 c4 20             	add    esp,0x20
c001925d:	89 e8                	mov    eax,ebp
c001925f:	5b                   	pop    ebx
c0019260:	5e                   	pop    esi
c0019261:	5f                   	pop    edi
c0019262:	5d                   	pop    ebp
c0019263:	c3                   	ret    

c0019264 <Dbg::logc(char)>:
c0019264:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001926b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001926f:	75 12                	jne    c0019283 <Dbg::logc(char)+0x1f>
c0019271:	ba fd 03 00 00       	mov    edx,0x3fd
c0019276:	ec                   	in     al,dx
c0019277:	a8 20                	test   al,0x20
c0019279:	74 fb                	je     c0019276 <Dbg::logc(char)+0x12>
c001927b:	ba f8 03 00 00       	mov    edx,0x3f8
c0019280:	88 c8                	mov    al,cl
c0019282:	ee                   	out    dx,al
c0019283:	c3                   	ret    

c0019284 <Dbg::logs(char*)>:
c0019284:	53                   	push   ebx
c0019285:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019289:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001928c:	85 c0                	test   eax,eax
c001928e:	74 11                	je     c00192a1 <Dbg::logs(char*)+0x1d>
c0019290:	50                   	push   eax
c0019291:	83 c3 01             	add    ebx,0x1
c0019294:	e8 cb ff ff ff       	call   c0019264 <Dbg::logc(char)>
c0019299:	58                   	pop    eax
c001929a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001929d:	85 c0                	test   eax,eax
c001929f:	75 ef                	jne    c0019290 <Dbg::logs(char*)+0xc>
c00192a1:	5b                   	pop    ebx
c00192a2:	c3                   	ret    

c00192a3 <Dbg::logWriteInt(unsigned int)>:
c00192a3:	83 ec 10             	sub    esp,0x10
c00192a6:	6a 0a                	push   0xa
c00192a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192ac:	50                   	push   eax
c00192ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00192b1:	50                   	push   eax
c00192b2:	e8 3c ff ff ff       	call   c00191f3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00192b7:	50                   	push   eax
c00192b8:	e8 c7 ff ff ff       	call   c0019284 <Dbg::logs(char*)>
c00192bd:	83 c4 20             	add    esp,0x20
c00192c0:	c3                   	ret    

c00192c1 <Dbg::logWriteIntBase(unsigned int, int)>:
c00192c1:	83 ec 10             	sub    esp,0x10
c00192c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192c8:	50                   	push   eax
c00192c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192cd:	50                   	push   eax
c00192ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00192d2:	52                   	push   edx
c00192d3:	e8 1b ff ff ff       	call   c00191f3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00192d8:	50                   	push   eax
c00192d9:	e8 a6 ff ff ff       	call   c0019284 <Dbg::logs(char*)>
c00192de:	83 c4 20             	add    esp,0x20
c00192e1:	c3                   	ret    

c00192e2 <Dbg::kprintf(char const*, ...)>:
c00192e2:	55                   	push   ebp
c00192e3:	57                   	push   edi
c00192e4:	56                   	push   esi
c00192e5:	53                   	push   ebx
c00192e6:	83 ec 0c             	sub    esp,0xc
c00192e9:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00192f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192f4:	74 08                	je     c00192fe <Dbg::kprintf(char const*, ...)+0x1c>
c00192f6:	83 c4 0c             	add    esp,0xc
c00192f9:	5b                   	pop    ebx
c00192fa:	5e                   	pop    esi
c00192fb:	5f                   	pop    edi
c00192fc:	5d                   	pop    ebp
c00192fd:	c3                   	ret    
c00192fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019302:	31 ff                	xor    edi,edi
c0019304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019308:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001930b:	85 c0                	test   eax,eax
c001930d:	74 e7                	je     c00192f6 <Dbg::kprintf(char const*, ...)+0x14>
c001930f:	8d 77 01             	lea    esi,[edi+0x1]
c0019312:	83 f8 25             	cmp    eax,0x25
c0019315:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019318:	75 47                	jne    c0019361 <Dbg::kprintf(char const*, ...)+0x7f>
c001931a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001931d:	83 c7 02             	add    edi,0x2
c0019320:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0019323:	83 e8 25             	sub    eax,0x25
c0019326:	0f b6 c0             	movzx  eax,al
c0019329:	83 f8 53             	cmp    eax,0x53
c001932c:	0f 87 ce 00 00 00    	ja     c0019400 <Dbg::kprintf(char const*, ...)+0x11e>
c0019332:	ff 24 85 b8 18 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce748]
c0019339:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001933d:	89 c8                	mov    eax,ecx
c001933f:	83 c1 04             	add    ecx,0x4
c0019342:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019346:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019348:	55                   	push   ebp
c0019349:	e8 55 ff ff ff       	call   c00192a3 <Dbg::logWriteInt(unsigned int)>
c001934e:	58                   	pop    eax
c001934f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0019352:	85 c0                	test   eax,eax
c0019354:	74 a0                	je     c00192f6 <Dbg::kprintf(char const*, ...)+0x14>
c0019356:	8d 77 01             	lea    esi,[edi+0x1]
c0019359:	83 f8 25             	cmp    eax,0x25
c001935c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001935f:	74 b9                	je     c001931a <Dbg::kprintf(char const*, ...)+0x38>
c0019361:	50                   	push   eax
c0019362:	89 f7                	mov    edi,esi
c0019364:	e8 fb fe ff ff       	call   c0019264 <Dbg::logc(char)>
c0019369:	89 ee                	mov    esi,ebp
c001936b:	58                   	pop    eax
c001936c:	eb e1                	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c001936e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019372:	89 c8                	mov    eax,ecx
c0019374:	83 c1 04             	add    ecx,0x4
c0019377:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001937b:	8b 00                	mov    eax,DWORD PTR [eax]
c001937d:	50                   	push   eax
c001937e:	e8 01 ff ff ff       	call   c0019284 <Dbg::logs(char*)>
c0019383:	58                   	pop    eax
c0019384:	eb c9                	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c0019386:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001938a:	89 d0                	mov    eax,edx
c001938c:	83 c2 04             	add    edx,0x4
c001938f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019393:	8b 00                	mov    eax,DWORD PTR [eax]
c0019395:	50                   	push   eax
c0019396:	e8 08 ff ff ff       	call   c00192a3 <Dbg::logWriteInt(unsigned int)>
c001939b:	58                   	pop    eax
c001939c:	eb b1                	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c001939e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00193a2:	89 d0                	mov    eax,edx
c00193a4:	83 c2 04             	add    edx,0x4
c00193a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00193ab:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00193ae:	50                   	push   eax
c00193af:	e8 b0 fe ff ff       	call   c0019264 <Dbg::logc(char)>
c00193b4:	58                   	pop    eax
c00193b5:	eb 98                	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c00193b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00193bb:	89 c8                	mov    eax,ecx
c00193bd:	83 c1 04             	add    ecx,0x4
c00193c0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00193c4:	6a 10                	push   0x10
c00193c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00193c8:	51                   	push   ecx
c00193c9:	e8 f3 fe ff ff       	call   c00192c1 <Dbg::logWriteIntBase(unsigned int, int)>
c00193ce:	5d                   	pop    ebp
c00193cf:	58                   	pop    eax
c00193d0:	e9 7a ff ff ff       	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c00193d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00193d9:	89 d0                	mov    eax,edx
c00193db:	83 c2 08             	add    edx,0x8
c00193de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00193e2:	6a 10                	push   0x10
c00193e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00193e6:	50                   	push   eax
c00193e7:	e8 d5 fe ff ff       	call   c00192c1 <Dbg::logWriteIntBase(unsigned int, int)>
c00193ec:	58                   	pop    eax
c00193ed:	5a                   	pop    edx
c00193ee:	e9 5c ff ff ff       	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c00193f3:	6a 25                	push   0x25
c00193f5:	e8 6a fe ff ff       	call   c0019264 <Dbg::logc(char)>
c00193fa:	5a                   	pop    edx
c00193fb:	e9 4f ff ff ff       	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>
c0019400:	6a 25                	push   0x25
c0019402:	e8 5d fe ff ff       	call   c0019264 <Dbg::logc(char)>
c0019407:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001940b:	50                   	push   eax
c001940c:	e8 53 fe ff ff       	call   c0019264 <Dbg::logc(char)>
c0019411:	5a                   	pop    edx
c0019412:	59                   	pop    ecx
c0019413:	e9 37 ff ff ff       	jmp    c001934f <Dbg::kprintf(char const*, ...)+0x6d>

c0019418 <KiUbsanPrintDetails(char const*, void*)>:
c0019418:	83 ec 1c             	sub    esp,0x1c
c001941b:	83 ec 08             	sub    esp,0x8
c001941e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019422:	68 08 1a 03 c0       	push   0xc0031a08
c0019427:	e8 b6 fe ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001942c:	83 c4 10             	add    esp,0x10
c001942f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001943b:	8b 00                	mov    eax,DWORD PTR [eax]
c001943d:	83 ec 08             	sub    esp,0x8
c0019440:	50                   	push   eax
c0019441:	68 1c 1a 03 c0       	push   0xc0031a1c
c0019446:	e8 97 fe ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001944b:	83 c4 10             	add    esp,0x10
c001944e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019455:	83 ec 08             	sub    esp,0x8
c0019458:	50                   	push   eax
c0019459:	68 26 1a 03 c0       	push   0xc0031a26
c001945e:	e8 7f fe ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019463:	83 c4 10             	add    esp,0x10
c0019466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001946a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001946d:	83 ec 08             	sub    esp,0x8
c0019470:	50                   	push   eax
c0019471:	68 30 1a 03 c0       	push   0xc0031a30
c0019476:	e8 67 fe ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	90                   	nop
c001947f:	83 c4 1c             	add    esp,0x1c
c0019482:	c3                   	ret    
c0019483:	90                   	nop

c0019484 <__ubsan_handle_type_mismatch_v1>:
c0019484:	83 ec 0c             	sub    esp,0xc
c0019487:	83 ec 08             	sub    esp,0x8
c001948a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001948e:	68 74 1b 03 c0       	push   0xc0031b74
c0019493:	e8 80 ff ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c0019498:	83 c4 10             	add    esp,0x10
c001949b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194a0:	75 16                	jne    c00194b8 <__ubsan_handle_type_mismatch_v1+0x34>
c00194a2:	83 ec 0c             	sub    esp,0xc
c00194a5:	68 3a 1a 03 c0       	push   0xc0031a3a
c00194aa:	e8 33 fe ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00194af:	83 c4 10             	add    esp,0x10
c00194b2:	e9 91 00 00 00       	jmp    c0019548 <__ubsan_handle_type_mismatch_v1+0xc4>
c00194b7:	90                   	nop
c00194b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00194bf:	85 c0                	test   eax,eax
c00194c1:	74 29                	je     c00194ec <__ubsan_handle_type_mismatch_v1+0x68>
c00194c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194c7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00194ca:	83 e8 01             	sub    eax,0x1
c00194cd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00194d1:	75 19                	jne    c00194ec <__ubsan_handle_type_mismatch_v1+0x68>
c00194d3:	83 ec 08             	sub    esp,0x8
c00194d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194da:	68 94 1b 03 c0       	push   0xc0031b94
c00194df:	e8 fe fd ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	eb 5f                	jmp    c0019548 <__ubsan_handle_type_mismatch_v1+0xc4>
c00194e9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ec:	83 ec 0c             	sub    esp,0xc
c00194ef:	68 4f 1a 03 c0       	push   0xc0031a4f
c00194f4:	e8 e9 fd ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00194f9:	83 c4 10             	add    esp,0x10
c00194fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019500:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019503:	0f b6 c0             	movzx  eax,al
c0019506:	83 ec 08             	sub    esp,0x8
c0019509:	50                   	push   eax
c001950a:	68 69 1a 03 c0       	push   0xc0031a69
c001950f:	e8 ce fd ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001951b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001951e:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019529:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001952c:	0f b6 c0             	movzx  eax,al
c001952f:	8b 04 85 20 3d 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc2e0]
c0019536:	51                   	push   ecx
c0019537:	52                   	push   edx
c0019538:	50                   	push   eax
c0019539:	68 bc 1b 03 c0       	push   0xc0031bbc
c001953e:	e8 9f fd ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	66 90                	xchg   ax,ax
c0019548:	83 ec 0c             	sub    esp,0xc
c001954b:	68 74 1b 03 c0       	push   0xc0031b74
c0019550:	e8 15 6d 00 00       	call   c002026a <KePanic(char const*)>
c0019555:	83 c4 10             	add    esp,0x10
c0019558:	90                   	nop
c0019559:	83 c4 0c             	add    esp,0xc
c001955c:	c3                   	ret    
c001955d:	8d 76 00             	lea    esi,[esi+0x0]

c0019560 <__ubsan_handle_pointer_overflow>:
c0019560:	83 ec 0c             	sub    esp,0xc
c0019563:	83 ec 08             	sub    esp,0x8
c0019566:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001956a:	68 04 1c 03 c0       	push   0xc0031c04
c001956f:	e8 a4 fe ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c0019574:	83 c4 10             	add    esp,0x10
c0019577:	83 ec 0c             	sub    esp,0xc
c001957a:	68 04 1c 03 c0       	push   0xc0031c04
c001957f:	e8 e6 6c 00 00       	call   c002026a <KePanic(char const*)>
c0019584:	83 c4 10             	add    esp,0x10
c0019587:	90                   	nop
c0019588:	83 c4 0c             	add    esp,0xc
c001958b:	c3                   	ret    

c001958c <__ubsan_handle_out_of_bounds>:
c001958c:	83 ec 0c             	sub    esp,0xc
c001958f:	83 ec 08             	sub    esp,0x8
c0019592:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019596:	68 74 1a 03 c0       	push   0xc0031a74
c001959b:	e8 78 fe ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c00195a0:	83 c4 10             	add    esp,0x10
c00195a3:	83 ec 0c             	sub    esp,0xc
c00195a6:	68 74 1a 03 c0       	push   0xc0031a74
c00195ab:	e8 ba 6c 00 00       	call   c002026a <KePanic(char const*)>
c00195b0:	83 c4 10             	add    esp,0x10
c00195b3:	90                   	nop
c00195b4:	83 c4 0c             	add    esp,0xc
c00195b7:	c3                   	ret    

c00195b8 <__ubsan_handle_add_overflow>:
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	83 ec 08             	sub    esp,0x8
c00195be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195c2:	68 91 1a 03 c0       	push   0xc0031a91
c00195c7:	e8 4c fe ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c00195cc:	83 c4 10             	add    esp,0x10
c00195cf:	83 ec 0c             	sub    esp,0xc
c00195d2:	68 91 1a 03 c0       	push   0xc0031a91
c00195d7:	e8 8e 6c 00 00       	call   c002026a <KePanic(char const*)>
c00195dc:	83 c4 10             	add    esp,0x10
c00195df:	90                   	nop
c00195e0:	83 c4 0c             	add    esp,0xc
c00195e3:	c3                   	ret    

c00195e4 <__ubsan_handle_load_invalid_value>:
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	83 ec 08             	sub    esp,0x8
c00195ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195ee:	68 24 1c 03 c0       	push   0xc0031c24
c00195f3:	e8 20 fe ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	83 ec 0c             	sub    esp,0xc
c00195fe:	68 24 1c 03 c0       	push   0xc0031c24
c0019603:	e8 62 6c 00 00       	call   c002026a <KePanic(char const*)>
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	90                   	nop
c001960c:	83 c4 0c             	add    esp,0xc
c001960f:	c3                   	ret    

c0019610 <__ubsan_handle_divrem_overflow>:
c0019610:	83 ec 0c             	sub    esp,0xc
c0019613:	83 ec 08             	sub    esp,0x8
c0019616:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001961a:	68 48 1c 03 c0       	push   0xc0031c48
c001961f:	e8 f4 fd ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	83 ec 0c             	sub    esp,0xc
c001962a:	68 48 1c 03 c0       	push   0xc0031c48
c001962f:	e8 36 6c 00 00       	call   c002026a <KePanic(char const*)>
c0019634:	83 c4 10             	add    esp,0x10
c0019637:	90                   	nop
c0019638:	83 c4 0c             	add    esp,0xc
c001963b:	c3                   	ret    

c001963c <__ubsan_handle_mul_overflow>:
c001963c:	83 ec 0c             	sub    esp,0xc
c001963f:	83 ec 08             	sub    esp,0x8
c0019642:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019646:	68 ad 1a 03 c0       	push   0xc0031aad
c001964b:	e8 c8 fd ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	83 ec 0c             	sub    esp,0xc
c0019656:	68 ad 1a 03 c0       	push   0xc0031aad
c001965b:	e8 0a 6c 00 00       	call   c002026a <KePanic(char const*)>
c0019660:	83 c4 10             	add    esp,0x10
c0019663:	90                   	nop
c0019664:	83 c4 0c             	add    esp,0xc
c0019667:	c3                   	ret    

c0019668 <__ubsan_handle_sub_overflow>:
c0019668:	83 ec 0c             	sub    esp,0xc
c001966b:	83 ec 08             	sub    esp,0x8
c001966e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019672:	68 c9 1a 03 c0       	push   0xc0031ac9
c0019677:	e8 9c fd ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c001967c:	83 c4 10             	add    esp,0x10
c001967f:	83 ec 0c             	sub    esp,0xc
c0019682:	68 c9 1a 03 c0       	push   0xc0031ac9
c0019687:	e8 de 6b 00 00       	call   c002026a <KePanic(char const*)>
c001968c:	83 c4 10             	add    esp,0x10
c001968f:	90                   	nop
c0019690:	83 c4 0c             	add    esp,0xc
c0019693:	c3                   	ret    

c0019694 <__ubsan_handle_shift_out_of_bounds>:
c0019694:	83 ec 0c             	sub    esp,0xc
c0019697:	83 ec 08             	sub    esp,0x8
c001969a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001969e:	68 68 1c 03 c0       	push   0xc0031c68
c00196a3:	e8 70 fd ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	83 ec 0c             	sub    esp,0xc
c00196ae:	68 68 1c 03 c0       	push   0xc0031c68
c00196b3:	e8 b2 6b 00 00       	call   c002026a <KePanic(char const*)>
c00196b8:	83 c4 10             	add    esp,0x10
c00196bb:	90                   	nop
c00196bc:	83 c4 0c             	add    esp,0xc
c00196bf:	c3                   	ret    

c00196c0 <__ubsan_handle_negate_overflow>:
c00196c0:	83 ec 0c             	sub    esp,0xc
c00196c3:	83 ec 08             	sub    esp,0x8
c00196c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ca:	68 8c 1c 03 c0       	push   0xc0031c8c
c00196cf:	e8 44 fd ff ff       	call   c0019418 <KiUbsanPrintDetails(char const*, void*)>
c00196d4:	83 c4 10             	add    esp,0x10
c00196d7:	83 ec 0c             	sub    esp,0xc
c00196da:	68 8c 1c 03 c0       	push   0xc0031c8c
c00196df:	e8 86 6b 00 00       	call   c002026a <KePanic(char const*)>
c00196e4:	83 c4 10             	add    esp,0x10
c00196e7:	90                   	nop
c00196e8:	83 c4 0c             	add    esp,0xc
c00196eb:	c3                   	ret    

c00196ec <KiIsHashInTable(unsigned short)>:
c00196ec:	0f b7 d0             	movzx  edx,ax
c00196ef:	83 e0 07             	and    eax,0x7
c00196f2:	c1 fa 03             	sar    edx,0x3
c00196f5:	88 c1                	mov    cl,al
c00196f7:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00196fe:	d3 fa                	sar    edx,cl
c0019700:	89 d0                	mov    eax,edx
c0019702:	83 e0 01             	and    eax,0x1
c0019705:	c3                   	ret    

c0019706 <KiSetHashInTable(unsigned short, bool)>:
c0019706:	56                   	push   esi
c0019707:	53                   	push   ebx
c0019708:	0f b7 d8             	movzx  ebx,ax
c001970b:	c1 fb 03             	sar    ebx,0x3
c001970e:	83 e0 07             	and    eax,0x7
c0019711:	89 c1                	mov    ecx,eax
c0019713:	b8 01 00 00 00       	mov    eax,0x1
c0019718:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c001971f:	d3 e0                	shl    eax,cl
c0019721:	84 d2                	test   dl,dl
c0019723:	74 04                	je     c0019729 <KiSetHashInTable(unsigned short, bool)+0x23>
c0019725:	09 f0                	or     eax,esi
c0019727:	eb 04                	jmp    c001972d <KiSetHashInTable(unsigned short, bool)+0x27>
c0019729:	f7 d0                	not    eax
c001972b:	21 f0                	and    eax,esi
c001972d:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c0019733:	5b                   	pop    ebx
c0019734:	5e                   	pop    esi
c0019735:	c3                   	ret    

c0019736 <KiFlushSymlinkChanges()>:
c0019736:	57                   	push   edi
c0019737:	56                   	push   esi
c0019738:	53                   	push   ebx
c0019739:	83 ec 1c             	sub    esp,0x1c
c001973c:	68 14 01 00 00       	push   0x114
c0019741:	e8 55 cd ff ff       	call   c001649b <malloc>
c0019746:	83 c4 0c             	add    esp,0xc
c0019749:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001974f:	68 ab 1c 03 c0       	push   0xc0031cab
c0019754:	50                   	push   eax
c0019755:	89 c3                	mov    ebx,eax
c0019757:	e8 9e 0d 00 00       	call   c001a4fa <File::File(char const*, Process*)>
c001975c:	83 c4 10             	add    esp,0x10
c001975f:	85 db                	test   ebx,ebx
c0019761:	75 10                	jne    c0019773 <KiFlushSymlinkChanges()+0x3d>
c0019763:	83 ec 0c             	sub    esp,0xc
c0019766:	68 c9 1c 03 c0       	push   0xc0031cc9
c001976b:	e8 fa 6a 00 00       	call   c002026a <KePanic(char const*)>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	50                   	push   eax
c0019774:	50                   	push   eax
c0019775:	6a 06                	push   0x6
c0019777:	53                   	push   ebx
c0019778:	e8 9b 0d 00 00       	call   c001a518 <File::open(FileOpenMode)>
c001977d:	83 c4 10             	add    esp,0x10
c0019780:	85 c0                	test   eax,eax
c0019782:	74 10                	je     c0019794 <KiFlushSymlinkChanges()+0x5e>
c0019784:	83 ec 0c             	sub    esp,0xc
c0019787:	68 e3 1c 03 c0       	push   0xc0031ce3
c001978c:	e8 d9 6a 00 00       	call   c002026a <KePanic(char const*)>
c0019791:	83 c4 10             	add    esp,0x10
c0019794:	31 f6                	xor    esi,esi
c0019796:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c001979c:	7e 70                	jle    c001980e <KiFlushSymlinkChanges()+0xd8>
c001979e:	83 ec 0c             	sub    esp,0xc
c00197a1:	89 f0                	mov    eax,esi
c00197a3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197a5:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00197a9:	c1 e0 08             	shl    eax,0x8
c00197ac:	57                   	push   edi
c00197ad:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197b2:	50                   	push   eax
c00197b3:	6a 00                	push   0x0
c00197b5:	68 00 01 00 00       	push   0x100
c00197ba:	53                   	push   ebx
c00197bb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00197be:	83 c4 20             	add    esp,0x20
c00197c1:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c00197c9:	74 10                	je     c00197db <KiFlushSymlinkChanges()+0xa5>
c00197cb:	83 ec 0c             	sub    esp,0xc
c00197ce:	68 fd 1c 03 c0       	push   0xc0031cfd
c00197d3:	e8 92 6a 00 00       	call   c002026a <KePanic(char const*)>
c00197d8:	83 c4 10             	add    esp,0x10
c00197db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00197dd:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c00197e4:	83 ec 0c             	sub    esp,0xc
c00197e7:	57                   	push   edi
c00197e8:	52                   	push   edx
c00197e9:	6a 00                	push   0x0
c00197eb:	6a 08                	push   0x8
c00197ed:	53                   	push   ebx
c00197ee:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00197f1:	83 c4 20             	add    esp,0x20
c00197f4:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00197f9:	74 10                	je     c001980b <KiFlushSymlinkChanges()+0xd5>
c00197fb:	83 ec 0c             	sub    esp,0xc
c00197fe:	68 17 1d 03 c0       	push   0xc0031d17
c0019803:	e8 62 6a 00 00       	call   c002026a <KePanic(char const*)>
c0019808:	83 c4 10             	add    esp,0x10
c001980b:	46                   	inc    esi
c001980c:	eb 88                	jmp    c0019796 <KiFlushSymlinkChanges()+0x60>
c001980e:	83 ec 0c             	sub    esp,0xc
c0019811:	53                   	push   ebx
c0019812:	e8 5f 0d 00 00       	call   c001a576 <File::close()>
c0019817:	83 c4 10             	add    esp,0x10
c001981a:	85 db                	test   ebx,ebx
c001981c:	74 0c                	je     c001982a <KiFlushSymlinkChanges()+0xf4>
c001981e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019820:	83 ec 0c             	sub    esp,0xc
c0019823:	53                   	push   ebx
c0019824:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019827:	83 c4 10             	add    esp,0x10
c001982a:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019834:	83 c4 10             	add    esp,0x10
c0019837:	5b                   	pop    ebx
c0019838:	5e                   	pop    esi
c0019839:	5f                   	pop    edi
c001983a:	c3                   	ret    

c001983b <KiDeinitialiseSymlinks(void*)>:
c001983b:	e9 f6 fe ff ff       	jmp    c0019736 <KiFlushSymlinkChanges()>

c0019840 <KiGetSymlinkHash(char const*)>:
c0019840:	53                   	push   ebx
c0019841:	89 c3                	mov    ebx,eax
c0019843:	83 ec 14             	sub    esp,0x14
c0019846:	50                   	push   eax
c0019847:	e8 34 6d fe ff       	call   c0000580 <strlen>
c001984c:	5a                   	pop    edx
c001984d:	59                   	pop    ecx
c001984e:	50                   	push   eax
c001984f:	53                   	push   ebx
c0019850:	e8 7c 63 00 00       	call   c001fbd1 <KeCalculateCRC32(unsigned char*, int)>
c0019855:	83 c4 18             	add    esp,0x18
c0019858:	5b                   	pop    ebx
c0019859:	89 c2                	mov    edx,eax
c001985b:	c1 ea 10             	shr    edx,0x10
c001985e:	31 d0                	xor    eax,edx
c0019860:	c3                   	ret    

c0019861 <KiCreateSymlinkID()>:
c0019861:	55                   	push   ebp
c0019862:	57                   	push   edi
c0019863:	56                   	push   esi
c0019864:	53                   	push   ebx
c0019865:	31 db                	xor    ebx,ebx
c0019867:	83 ec 1c             	sub    esp,0x1c
c001986a:	e8 49 6b 00 00       	call   c00203b8 <KeRand()>
c001986f:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019875:	31 d2                	xor    edx,edx
c0019877:	43                   	inc    ebx
c0019878:	31 ff                	xor    edi,edi
c001987a:	8d 4d 01             	lea    ecx,[ebp+0x1]
c001987d:	89 ee                	mov    esi,ebp
c001987f:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019885:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0019889:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001988d:	c1 e0 1f             	shl    eax,0x1f
c0019890:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0019896:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001989a:	75 10                	jne    c00198ac <KiCreateSymlinkID()+0x4b>
c001989c:	83 ec 0c             	sub    esp,0xc
c001989f:	68 31 1d 03 c0       	push   0xc0031d31
c00198a4:	e8 c1 69 00 00       	call   c002026a <KePanic(char const*)>
c00198a9:	83 c4 10             	add    esp,0x10
c00198ac:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00198b0:	75 06                	jne    c00198b8 <KiCreateSymlinkID()+0x57>
c00198b2:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00198b6:	74 b2                	je     c001986a <KiCreateSymlinkID()+0x9>
c00198b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00198c0:	83 c4 1c             	add    esp,0x1c
c00198c3:	5b                   	pop    ebx
c00198c4:	31 f0                	xor    eax,esi
c00198c6:	5e                   	pop    esi
c00198c7:	31 fa                	xor    edx,edi
c00198c9:	5f                   	pop    edi
c00198ca:	5d                   	pop    ebp
c00198cb:	c3                   	ret    

c00198cc <KeRegisterSymlink(char const*, unsigned long long)>:
c00198cc:	53                   	push   ebx
c00198cd:	83 ec 0c             	sub    esp,0xc
c00198d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00198d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00198d8:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00198dd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00198e1:	68 00 01 00 00       	push   0x100
c00198e6:	6a 00                	push   0x0
c00198e8:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c00198ef:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c00198f6:	c1 e0 08             	shl    eax,0x8
c00198f9:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00198fe:	50                   	push   eax
c00198ff:	e8 ec 6b fe ff       	call   c00004f0 <memset>
c0019904:	58                   	pop    eax
c0019905:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001990a:	5a                   	pop    edx
c001990b:	c1 e0 08             	shl    eax,0x8
c001990e:	53                   	push   ebx
c001990f:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019914:	50                   	push   eax
c0019915:	e8 36 6d fe ff       	call   c0000650 <strcpy>
c001991a:	89 d8                	mov    eax,ebx
c001991c:	e8 1f ff ff ff       	call   c0019840 <KiGetSymlinkHash(char const*)>
c0019921:	59                   	pop    ecx
c0019922:	0f b7 d8             	movzx  ebx,ax
c0019925:	58                   	pop    eax
c0019926:	53                   	push   ebx
c0019927:	68 3a 1d 03 c0       	push   0xc0031d3a
c001992c:	e8 b1 f9 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019931:	89 d8                	mov    eax,ebx
c0019933:	ba 01 00 00 00       	mov    edx,0x1
c0019938:	e8 c9 fd ff ff       	call   c0019706 <KiSetHashInTable(unsigned short, bool)>
c001993d:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019942:	83 c4 10             	add    esp,0x10
c0019945:	40                   	inc    eax
c0019946:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c001994b:	83 f8 03             	cmp    eax,0x3
c001994e:	7e 09                	jle    c0019959 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019950:	83 c4 08             	add    esp,0x8
c0019953:	5b                   	pop    ebx
c0019954:	e9 dd fd ff ff       	jmp    c0019736 <KiFlushSymlinkChanges()>
c0019959:	83 c4 08             	add    esp,0x8
c001995c:	5b                   	pop    ebx
c001995d:	c3                   	ret    

c001995e <KeInitialiseSymlinks()>:
c001995e:	57                   	push   edi
c001995f:	56                   	push   esi
c0019960:	53                   	push   ebx
c0019961:	81 ec 14 01 00 00    	sub    esp,0x114
c0019967:	68 00 20 00 00       	push   0x2000
c001996c:	6a 00                	push   0x0
c001996e:	68 00 af 03 c0       	push   0xc003af00
c0019973:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c001997d:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c0019987:	e8 64 6b fe ff       	call   c00004f0 <memset>
c001998c:	59                   	pop    ecx
c001998d:	5b                   	pop    ebx
c001998e:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019994:	68 4e 1d 03 c0       	push   0xc0031d4e
c0019999:	e8 44 f9 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001999e:	5e                   	pop    esi
c001999f:	5f                   	pop    edi
c00199a0:	6a 00                	push   0x0
c00199a2:	68 3b 98 01 c0       	push   0xc001983b
c00199a7:	e8 4a 60 00 00       	call   c001f9f6 <KeRegisterAtexit(void (*)(void*), void*)>
c00199ac:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00199b3:	e8 e3 ca ff ff       	call   c001649b <malloc>
c00199b8:	83 c4 0c             	add    esp,0xc
c00199bb:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00199c1:	68 ab 1c 03 c0       	push   0xc0031cab
c00199c6:	50                   	push   eax
c00199c7:	89 c3                	mov    ebx,eax
c00199c9:	e8 2c 0b 00 00       	call   c001a4fa <File::File(char const*, Process*)>
c00199ce:	83 c4 10             	add    esp,0x10
c00199d1:	85 db                	test   ebx,ebx
c00199d3:	75 10                	jne    c00199e5 <KeInitialiseSymlinks()+0x87>
c00199d5:	83 ec 0c             	sub    esp,0xc
c00199d8:	68 6b 1d 03 c0       	push   0xc0031d6b
c00199dd:	e8 88 68 00 00       	call   c002026a <KePanic(char const*)>
c00199e2:	83 c4 10             	add    esp,0x10
c00199e5:	83 ec 0c             	sub    esp,0xc
c00199e8:	53                   	push   ebx
c00199e9:	e8 ee 0d 00 00       	call   c001a7dc <File::exists()>
c00199ee:	83 c4 10             	add    esp,0x10
c00199f1:	84 c0                	test   al,al
c00199f3:	75 3a                	jne    c0019a2f <KeInitialiseSymlinks()+0xd1>
c00199f5:	52                   	push   edx
c00199f6:	52                   	push   edx
c00199f7:	6a 12                	push   0x12
c00199f9:	53                   	push   ebx
c00199fa:	e8 19 0b 00 00       	call   c001a518 <File::open(FileOpenMode)>
c00199ff:	83 c4 10             	add    esp,0x10
c0019a02:	85 c0                	test   eax,eax
c0019a04:	74 10                	je     c0019a16 <KeInitialiseSymlinks()+0xb8>
c0019a06:	83 ec 0c             	sub    esp,0xc
c0019a09:	68 88 1d 03 c0       	push   0xc0031d88
c0019a0e:	e8 57 68 00 00       	call   c002026a <KePanic(char const*)>
c0019a13:	83 c4 10             	add    esp,0x10
c0019a16:	83 ec 0c             	sub    esp,0xc
c0019a19:	53                   	push   ebx
c0019a1a:	e8 57 0b 00 00       	call   c001a576 <File::close()>
c0019a1f:	83 c4 10             	add    esp,0x10
c0019a22:	85 db                	test   ebx,ebx
c0019a24:	0f 84 9e 00 00 00    	je     c0019ac8 <KeInitialiseSymlinks()+0x16a>
c0019a2a:	e9 8d 00 00 00       	jmp    c0019abc <KeInitialiseSymlinks()+0x15e>
c0019a2f:	50                   	push   eax
c0019a30:	50                   	push   eax
c0019a31:	6a 01                	push   0x1
c0019a33:	53                   	push   ebx
c0019a34:	e8 df 0a 00 00       	call   c001a518 <File::open(FileOpenMode)>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	85 c0                	test   eax,eax
c0019a3e:	74 10                	je     c0019a50 <KeInitialiseSymlinks()+0xf2>
c0019a40:	83 ec 0c             	sub    esp,0xc
c0019a43:	68 a5 1d 03 c0       	push   0xc0031da5
c0019a48:	e8 1d 68 00 00       	call   c002026a <KePanic(char const*)>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019a5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a5f:	57                   	push   edi
c0019a60:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019a64:	56                   	push   esi
c0019a65:	6a 00                	push   0x0
c0019a67:	68 00 01 00 00       	push   0x100
c0019a6c:	53                   	push   ebx
c0019a6d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a70:	83 c4 20             	add    esp,0x20
c0019a73:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019a7b:	75 33                	jne    c0019ab0 <KeInitialiseSymlinks()+0x152>
c0019a7d:	83 ec 0c             	sub    esp,0xc
c0019a80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a82:	57                   	push   edi
c0019a83:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019a87:	52                   	push   edx
c0019a88:	6a 00                	push   0x0
c0019a8a:	6a 08                	push   0x8
c0019a8c:	53                   	push   ebx
c0019a8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a90:	83 c4 20             	add    esp,0x20
c0019a93:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019a98:	75 16                	jne    c0019ab0 <KeInitialiseSymlinks()+0x152>
c0019a9a:	89 f0                	mov    eax,esi
c0019a9c:	e8 9f fd ff ff       	call   c0019840 <KiGetSymlinkHash(char const*)>
c0019aa1:	ba 01 00 00 00       	mov    edx,0x1
c0019aa6:	0f b7 c0             	movzx  eax,ax
c0019aa9:	e8 58 fc ff ff       	call   c0019706 <KiSetHashInTable(unsigned short, bool)>
c0019aae:	eb a0                	jmp    c0019a50 <KeInitialiseSymlinks()+0xf2>
c0019ab0:	83 ec 0c             	sub    esp,0xc
c0019ab3:	53                   	push   ebx
c0019ab4:	e8 bd 0a 00 00       	call   c001a576 <File::close()>
c0019ab9:	83 c4 10             	add    esp,0x10
c0019abc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019abe:	83 ec 0c             	sub    esp,0xc
c0019ac1:	53                   	push   ebx
c0019ac2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ac5:	83 c4 10             	add    esp,0x10
c0019ac8:	81 c4 10 01 00 00    	add    esp,0x110
c0019ace:	5b                   	pop    ebx
c0019acf:	5e                   	pop    esi
c0019ad0:	5f                   	pop    edi
c0019ad1:	c3                   	ret    

c0019ad2 <KiIsSymlinkRegistered(char const*)>:
c0019ad2:	55                   	push   ebp
c0019ad3:	57                   	push   edi
c0019ad4:	56                   	push   esi
c0019ad5:	53                   	push   ebx
c0019ad6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019adc:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019ae3:	89 f0                	mov    eax,esi
c0019ae5:	e8 56 fd ff ff       	call   c0019840 <KiGetSymlinkHash(char const*)>
c0019aea:	53                   	push   ebx
c0019aeb:	56                   	push   esi
c0019aec:	0f b7 c0             	movzx  eax,ax
c0019aef:	50                   	push   eax
c0019af0:	68 c0 1d 03 c0       	push   0xc0031dc0
c0019af5:	e8 e8 f7 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019afa:	89 f0                	mov    eax,esi
c0019afc:	e8 3f fd ff ff       	call   c0019840 <KiGetSymlinkHash(char const*)>
c0019b01:	0f b7 c0             	movzx  eax,ax
c0019b04:	e8 e3 fb ff ff       	call   c00196ec <KiIsHashInTable(unsigned short)>
c0019b09:	83 c4 10             	add    esp,0x10
c0019b0c:	31 d2                	xor    edx,edx
c0019b0e:	88 c1                	mov    cl,al
c0019b10:	31 c0                	xor    eax,eax
c0019b12:	84 c9                	test   cl,cl
c0019b14:	0f 84 31 01 00 00    	je     c0019c4b <KiIsSymlinkRegistered(char const*)+0x179>
c0019b1a:	31 db                	xor    ebx,ebx
c0019b1c:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019b22:	7e 30                	jle    c0019b54 <KiIsSymlinkRegistered(char const*)+0x82>
c0019b24:	89 d8                	mov    eax,ebx
c0019b26:	c1 e0 08             	shl    eax,0x8
c0019b29:	51                   	push   ecx
c0019b2a:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019b2f:	51                   	push   ecx
c0019b30:	50                   	push   eax
c0019b31:	56                   	push   esi
c0019b32:	e8 49 6c fe ff       	call   c0000780 <strcmp>
c0019b37:	83 c4 10             	add    esp,0x10
c0019b3a:	85 c0                	test   eax,eax
c0019b3c:	75 13                	jne    c0019b51 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019b3e:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019b45:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019b4c:	e9 fa 00 00 00       	jmp    c0019c4b <KiIsSymlinkRegistered(char const*)+0x179>
c0019b51:	43                   	inc    ebx
c0019b52:	eb c8                	jmp    c0019b1c <KiIsSymlinkRegistered(char const*)+0x4a>
c0019b54:	83 ec 0c             	sub    esp,0xc
c0019b57:	68 14 01 00 00       	push   0x114
c0019b5c:	e8 3a c9 ff ff       	call   c001649b <malloc>
c0019b61:	83 c4 0c             	add    esp,0xc
c0019b64:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b6a:	68 ab 1c 03 c0       	push   0xc0031cab
c0019b6f:	50                   	push   eax
c0019b70:	89 c3                	mov    ebx,eax
c0019b72:	e8 83 09 00 00       	call   c001a4fa <File::File(char const*, Process*)>
c0019b77:	83 c4 10             	add    esp,0x10
c0019b7a:	85 db                	test   ebx,ebx
c0019b7c:	75 12                	jne    c0019b90 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019b7e:	83 ec 0c             	sub    esp,0xc
c0019b81:	68 d5 1d 03 c0       	push   0xc0031dd5
c0019b86:	e8 df 66 00 00       	call   c002026a <KePanic(char const*)>
c0019b8b:	83 c4 10             	add    esp,0x10
c0019b8e:	eb 10                	jmp    c0019ba0 <KiIsSymlinkRegistered(char const*)+0xce>
c0019b90:	83 ec 0c             	sub    esp,0xc
c0019b93:	53                   	push   ebx
c0019b94:	e8 43 0c 00 00       	call   c001a7dc <File::exists()>
c0019b99:	83 c4 10             	add    esp,0x10
c0019b9c:	84 c0                	test   al,al
c0019b9e:	74 de                	je     c0019b7e <KiIsSymlinkRegistered(char const*)+0xac>
c0019ba0:	52                   	push   edx
c0019ba1:	52                   	push   edx
c0019ba2:	6a 01                	push   0x1
c0019ba4:	53                   	push   ebx
c0019ba5:	e8 6e 09 00 00       	call   c001a518 <File::open(FileOpenMode)>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	85 c0                	test   eax,eax
c0019baf:	74 10                	je     c0019bc1 <KiIsSymlinkRegistered(char const*)+0xef>
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	68 f0 1d 03 c0       	push   0xc0031df0
c0019bb9:	e8 ac 66 00 00       	call   c002026a <KePanic(char const*)>
c0019bbe:	83 c4 10             	add    esp,0x10
c0019bc1:	83 ec 0c             	sub    esp,0xc
c0019bc4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bc6:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019bca:	55                   	push   ebp
c0019bcb:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019bcf:	57                   	push   edi
c0019bd0:	6a 00                	push   0x0
c0019bd2:	68 00 01 00 00       	push   0x100
c0019bd7:	53                   	push   ebx
c0019bd8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bdb:	83 c4 20             	add    esp,0x20
c0019bde:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019be6:	75 4b                	jne    c0019c33 <KiIsSymlinkRegistered(char const*)+0x161>
c0019be8:	83 ec 0c             	sub    esp,0xc
c0019beb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bed:	55                   	push   ebp
c0019bee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019bf2:	52                   	push   edx
c0019bf3:	6a 00                	push   0x0
c0019bf5:	6a 08                	push   0x8
c0019bf7:	53                   	push   ebx
c0019bf8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bfb:	83 c4 20             	add    esp,0x20
c0019bfe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019c03:	75 2e                	jne    c0019c33 <KiIsSymlinkRegistered(char const*)+0x161>
c0019c05:	50                   	push   eax
c0019c06:	50                   	push   eax
c0019c07:	57                   	push   edi
c0019c08:	56                   	push   esi
c0019c09:	e8 72 6b fe ff       	call   c0000780 <strcmp>
c0019c0e:	83 c4 10             	add    esp,0x10
c0019c11:	85 c0                	test   eax,eax
c0019c13:	75 ac                	jne    c0019bc1 <KiIsSymlinkRegistered(char const*)+0xef>
c0019c15:	83 ec 0c             	sub    esp,0xc
c0019c18:	53                   	push   ebx
c0019c19:	e8 58 09 00 00       	call   c001a576 <File::close()>
c0019c1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	eb 18                	jmp    c0019c4b <KiIsSymlinkRegistered(char const*)+0x179>
c0019c33:	83 ec 0c             	sub    esp,0xc
c0019c36:	53                   	push   ebx
c0019c37:	e8 3a 09 00 00       	call   c001a576 <File::close()>
c0019c3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c44:	83 c4 10             	add    esp,0x10
c0019c47:	31 c0                	xor    eax,eax
c0019c49:	31 d2                	xor    edx,edx
c0019c4b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019c51:	5b                   	pop    ebx
c0019c52:	5e                   	pop    esi
c0019c53:	5f                   	pop    edi
c0019c54:	5d                   	pop    ebp
c0019c55:	c3                   	ret    

c0019c56 <KeDereferenceSymlink(char const*, char*)>:
c0019c56:	55                   	push   ebp
c0019c57:	57                   	push   edi
c0019c58:	56                   	push   esi
c0019c59:	53                   	push   ebx
c0019c5a:	83 ec 48             	sub    esp,0x48
c0019c5d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019c61:	56                   	push   esi
c0019c62:	e8 6b fe ff ff       	call   c0019ad2 <KiIsSymlinkRegistered(char const*)>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	89 c7                	mov    edi,eax
c0019c6c:	89 d0                	mov    eax,edx
c0019c6e:	09 f8                	or     eax,edi
c0019c70:	75 07                	jne    c0019c79 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019c72:	31 c0                	xor    eax,eax
c0019c74:	e9 7c 01 00 00       	jmp    c0019df5 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019c79:	83 ec 0c             	sub    esp,0xc
c0019c7c:	89 d5                	mov    ebp,edx
c0019c7e:	68 14 01 00 00       	push   0x114
c0019c83:	e8 13 c8 ff ff       	call   c001649b <malloc>
c0019c88:	83 c4 0c             	add    esp,0xc
c0019c8b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019c91:	56                   	push   esi
c0019c92:	50                   	push   eax
c0019c93:	89 c3                	mov    ebx,eax
c0019c95:	e8 60 08 00 00       	call   c001a4fa <File::File(char const*, Process*)>
c0019c9a:	83 c4 10             	add    esp,0x10
c0019c9d:	85 db                	test   ebx,ebx
c0019c9f:	0f 84 32 01 00 00    	je     c0019dd7 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019ca5:	56                   	push   esi
c0019ca6:	56                   	push   esi
c0019ca7:	6a 01                	push   0x1
c0019ca9:	53                   	push   ebx
c0019caa:	e8 69 08 00 00       	call   c001a518 <File::open(FileOpenMode)>
c0019caf:	83 c4 10             	add    esp,0x10
c0019cb2:	85 c0                	test   eax,eax
c0019cb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cb6:	74 09                	je     c0019cc1 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019cb8:	83 ec 0c             	sub    esp,0xc
c0019cbb:	53                   	push   ebx
c0019cbc:	e9 10 01 00 00       	jmp    c0019dd1 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019cc1:	83 ec 0c             	sub    esp,0xc
c0019cc4:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019cc8:	56                   	push   esi
c0019cc9:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019ccd:	52                   	push   edx
c0019cce:	6a 00                	push   0x0
c0019cd0:	6a 08                	push   0x8
c0019cd2:	53                   	push   ebx
c0019cd3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cd6:	83 c4 20             	add    esp,0x20
c0019cd9:	85 c0                	test   eax,eax
c0019cdb:	0f 85 e2 00 00 00    	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ce1:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019ce6:	0f 85 d7 00 00 00    	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cec:	83 ec 0c             	sub    esp,0xc
c0019cef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cf1:	56                   	push   esi
c0019cf2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019cf6:	52                   	push   edx
c0019cf7:	6a 00                	push   0x0
c0019cf9:	6a 08                	push   0x8
c0019cfb:	53                   	push   ebx
c0019cfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cff:	83 c4 20             	add    esp,0x20
c0019d02:	85 c0                	test   eax,eax
c0019d04:	0f 85 b9 00 00 00    	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d0a:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019d0f:	0f 85 ae 00 00 00    	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d15:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019d19:	0f 85 53 ff ff ff    	jne    c0019c72 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019d1f:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019d23:	0f 85 49 ff ff ff    	jne    c0019c72 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019d29:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019d31:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019d39:	51                   	push   ecx
c0019d3a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019d3e:	50                   	push   eax
c0019d3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019d43:	50                   	push   eax
c0019d44:	53                   	push   ebx
c0019d45:	e8 d0 0a 00 00       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c0019d4a:	83 c4 10             	add    esp,0x10
c0019d4d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019d52:	75 6f                	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019d58:	31 c9                	xor    ecx,ecx
c0019d5a:	bf 0f 00 00 00       	mov    edi,0xf
c0019d5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d63:	39 c7                	cmp    edi,eax
c0019d65:	89 cf                	mov    edi,ecx
c0019d67:	19 d7                	sbb    edi,edx
c0019d69:	73 58                	jae    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019d6b:	83 c0 f0             	add    eax,0xfffffff0
c0019d6e:	bf ff 00 00 00       	mov    edi,0xff
c0019d73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d77:	83 d2 ff             	adc    edx,0xffffffff
c0019d7a:	39 c7                	cmp    edi,eax
c0019d7c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019d80:	19 d1                	sbb    ecx,edx
c0019d82:	72 53                	jb     c0019dd7 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019d84:	40                   	inc    eax
c0019d85:	52                   	push   edx
c0019d86:	50                   	push   eax
c0019d87:	6a 00                	push   0x0
c0019d89:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019d8d:	e8 5e 67 fe ff       	call   c00004f0 <memset>
c0019d92:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d94:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d97:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019d9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019d9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019da3:	53                   	push   ebx
c0019da4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019da7:	83 c4 20             	add    esp,0x20
c0019daa:	85 c0                	test   eax,eax
c0019dac:	75 15                	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019dae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019db2:	89 c7                	mov    edi,eax
c0019db4:	c1 ff 1f             	sar    edi,0x1f
c0019db7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019dbb:	75 06                	jne    c0019dc3 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019dbd:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019dc1:	74 19                	je     c0019ddc <KeDereferenceSymlink(char const*, char*)+0x186>
c0019dc3:	83 ec 0c             	sub    esp,0xc
c0019dc6:	53                   	push   ebx
c0019dc7:	e8 aa 07 00 00       	call   c001a576 <File::close()>
c0019dcc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dd1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019dd4:	83 c4 10             	add    esp,0x10
c0019dd7:	83 c8 ff             	or     eax,0xffffffff
c0019dda:	eb 19                	jmp    c0019df5 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019ddc:	83 ec 0c             	sub    esp,0xc
c0019ddf:	53                   	push   ebx
c0019de0:	e8 91 07 00 00       	call   c001a576 <File::close()>
c0019de5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019de7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dea:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ded:	83 c4 10             	add    esp,0x10
c0019df0:	b8 01 00 00 00       	mov    eax,0x1
c0019df5:	83 c4 3c             	add    esp,0x3c
c0019df8:	5b                   	pop    ebx
c0019df9:	5e                   	pop    esi
c0019dfa:	5f                   	pop    edi
c0019dfb:	5d                   	pop    ebp
c0019dfc:	c3                   	ret    

c0019dfd <KeCreateSymlink(char const*, char const*)>:
c0019dfd:	55                   	push   ebp
c0019dfe:	57                   	push   edi
c0019dff:	56                   	push   esi
c0019e00:	53                   	push   ebx
c0019e01:	83 ec 38             	sub    esp,0x38
c0019e04:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019e08:	68 14 01 00 00       	push   0x114
c0019e0d:	e8 89 c6 ff ff       	call   c001649b <malloc>
c0019e12:	6a 00                	push   0x0
c0019e14:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019e1a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019e1e:	89 c3                	mov    ebx,eax
c0019e20:	50                   	push   eax
c0019e21:	e8 f6 05 00 00       	call   c001a41c <File::File(char const*, Process*, bool)>
c0019e26:	83 c4 20             	add    esp,0x20
c0019e29:	85 db                	test   ebx,ebx
c0019e2b:	b8 01 00 00 00       	mov    eax,0x1
c0019e30:	0f 84 19 01 00 00    	je     c0019f4f <KeCreateSymlink(char const*, char const*)+0x152>
c0019e36:	52                   	push   edx
c0019e37:	52                   	push   edx
c0019e38:	6a 12                	push   0x12
c0019e3a:	53                   	push   ebx
c0019e3b:	e8 d8 06 00 00       	call   c001a518 <File::open(FileOpenMode)>
c0019e40:	83 c4 10             	add    esp,0x10
c0019e43:	85 c0                	test   eax,eax
c0019e45:	74 0b                	je     c0019e52 <KeCreateSymlink(char const*, char const*)+0x55>
c0019e47:	83 ec 0c             	sub    esp,0xc
c0019e4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e4c:	53                   	push   ebx
c0019e4d:	e9 f2 00 00 00       	jmp    c0019f44 <KeCreateSymlink(char const*, char const*)+0x147>
c0019e52:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019e56:	be 3d 1e 03 c0       	mov    esi,0xc0031e3d
c0019e5b:	b9 09 00 00 00       	mov    ecx,0x9
c0019e60:	fc                   	cld    
c0019e61:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e63:	83 ec 0c             	sub    esp,0xc
c0019e66:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019e6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e6c:	56                   	push   esi
c0019e6d:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019e71:	52                   	push   edx
c0019e72:	6a 00                	push   0x0
c0019e74:	6a 08                	push   0x8
c0019e76:	53                   	push   ebx
c0019e77:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019e7a:	83 c4 20             	add    esp,0x20
c0019e7d:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019e82:	0f 85 ae 00 00 00    	jne    c0019f36 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e88:	85 c0                	test   eax,eax
c0019e8a:	0f 85 a6 00 00 00    	jne    c0019f36 <KeCreateSymlink(char const*, char const*)+0x139>
c0019e90:	e8 cc f9 ff ff       	call   c0019861 <KiCreateSymlinkID()>
c0019e95:	83 ec 0c             	sub    esp,0xc
c0019e98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019e9c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019ea0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ea2:	56                   	push   esi
c0019ea3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ea7:	52                   	push   edx
c0019ea8:	6a 00                	push   0x0
c0019eaa:	6a 08                	push   0x8
c0019eac:	53                   	push   ebx
c0019ead:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019eb0:	83 c4 20             	add    esp,0x20
c0019eb3:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019eb8:	75 7c                	jne    c0019f36 <KeCreateSymlink(char const*, char const*)+0x139>
c0019eba:	85 c0                	test   eax,eax
c0019ebc:	75 78                	jne    c0019f36 <KeCreateSymlink(char const*, char const*)+0x139>
c0019ebe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019ec6:	55                   	push   ebp
c0019ec7:	e8 b4 66 fe ff       	call   c0000580 <strlen>
c0019ecc:	31 d2                	xor    edx,edx
c0019ece:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ed1:	55                   	push   ebp
c0019ed2:	52                   	push   edx
c0019ed3:	50                   	push   eax
c0019ed4:	53                   	push   ebx
c0019ed5:	ff d7                	call   edi
c0019ed7:	83 c4 14             	add    esp,0x14
c0019eda:	55                   	push   ebp
c0019edb:	89 c6                	mov    esi,eax
c0019edd:	e8 9e 66 fe ff       	call   c0000580 <strlen>
c0019ee2:	83 c4 10             	add    esp,0x10
c0019ee5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019ee9:	75 4b                	jne    c0019f36 <KeCreateSymlink(char const*, char const*)+0x139>
c0019eeb:	85 f6                	test   esi,esi
c0019eed:	75 47                	jne    c0019f36 <KeCreateSymlink(char const*, char const*)+0x139>
c0019eef:	50                   	push   eax
c0019ef0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019ef4:	55                   	push   ebp
c0019ef5:	68 0b 1e 03 c0       	push   0xc0031e0b
c0019efa:	e8 e3 f3 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019eff:	83 c4 0c             	add    esp,0xc
c0019f02:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019f06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019f0a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019f0e:	e8 b9 f9 ff ff       	call   c00198cc <KeRegisterSymlink(char const*, unsigned long long)>
c0019f13:	c7 04 24 30 1e 03 c0 	mov    DWORD PTR [esp],0xc0031e30
c0019f1a:	e8 c3 f3 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0019f1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f22:	e8 4f 06 00 00       	call   c001a576 <File::close()>
c0019f27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f2c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f2f:	83 c4 10             	add    esp,0x10
c0019f32:	31 c0                	xor    eax,eax
c0019f34:	eb 19                	jmp    c0019f4f <KeCreateSymlink(char const*, char const*)+0x152>
c0019f36:	83 ec 0c             	sub    esp,0xc
c0019f39:	53                   	push   ebx
c0019f3a:	e8 37 06 00 00       	call   c001a576 <File::close()>
c0019f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f44:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019f47:	83 c4 10             	add    esp,0x10
c0019f4a:	b8 01 00 00 00       	mov    eax,0x1
c0019f4f:	83 c4 2c             	add    esp,0x2c
c0019f52:	5b                   	pop    ebx
c0019f53:	5e                   	pop    esi
c0019f54:	5f                   	pop    edi
c0019f55:	5d                   	pop    ebp
c0019f56:	c3                   	ret    
c0019f57:	90                   	nop

c0019f58 <File::read(unsigned long long, void*, int*)>:
c0019f58:	53                   	push   ebx
c0019f59:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f5d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f61:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f68:	83 f8 19             	cmp    eax,0x19
c0019f6b:	77 35                	ja     c0019fa2 <File::read(unsigned long long, void*, int*)+0x4a>
c0019f6d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f74:	85 c0                	test   eax,eax
c0019f76:	74 2a                	je     c0019fa2 <File::read(unsigned long long, void*, int*)+0x4a>
c0019f78:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f7e:	85 c0                	test   eax,eax
c0019f80:	74 20                	je     c0019fa2 <File::read(unsigned long long, void*, int*)+0x4a>
c0019f82:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f86:	74 21                	je     c0019fa9 <File::read(unsigned long long, void*, int*)+0x51>
c0019f88:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f8a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f8e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f9c:	5b                   	pop    ebx
c0019f9d:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019fa0:	ff e0                	jmp    eax
c0019fa2:	b8 0b 00 00 00       	mov    eax,0xb
c0019fa7:	eb 05                	jmp    c0019fae <File::read(unsigned long long, void*, int*)+0x56>
c0019fa9:	b8 05 00 00 00       	mov    eax,0x5
c0019fae:	5b                   	pop    ebx
c0019faf:	c3                   	ret    

c0019fb0 <File::write(unsigned long long, void*, int*)>:
c0019fb0:	53                   	push   ebx
c0019fb1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019fb9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019fc0:	83 f8 19             	cmp    eax,0x19
c0019fc3:	77 35                	ja     c0019ffa <File::write(unsigned long long, void*, int*)+0x4a>
c0019fc5:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019fcc:	85 c0                	test   eax,eax
c0019fce:	74 2a                	je     c0019ffa <File::write(unsigned long long, void*, int*)+0x4a>
c0019fd0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019fd6:	85 c0                	test   eax,eax
c0019fd8:	74 20                	je     c0019ffa <File::write(unsigned long long, void*, int*)+0x4a>
c0019fda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019fde:	74 21                	je     c001a001 <File::write(unsigned long long, void*, int*)+0x51>
c0019fe0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019fe2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019fe6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019fec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ff0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ff4:	5b                   	pop    ebx
c0019ff5:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019ff8:	ff e0                	jmp    eax
c0019ffa:	b8 0b 00 00 00       	mov    eax,0xb
c0019fff:	eb 05                	jmp    c001a006 <File::write(unsigned long long, void*, int*)+0x56>
c001a001:	b8 05 00 00 00       	mov    eax,0x5
c001a006:	5b                   	pop    ebx
c001a007:	c3                   	ret    

c001a008 <Directory::read(unsigned long long, void*, int*)>:
c001a008:	53                   	push   ebx
c001a009:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a00d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a011:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001a018:	83 f8 19             	cmp    eax,0x19
c001a01b:	77 35                	ja     c001a052 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a01d:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a024:	85 c0                	test   eax,eax
c001a026:	74 2a                	je     c001a052 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a028:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a02e:	85 c0                	test   eax,eax
c001a030:	74 20                	je     c001a052 <Directory::read(unsigned long long, void*, int*)+0x4a>
c001a032:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a036:	74 21                	je     c001a059 <Directory::read(unsigned long long, void*, int*)+0x51>
c001a038:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a03a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a03e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001a044:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a048:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a04c:	5b                   	pop    ebx
c001a04d:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c001a050:	ff e0                	jmp    eax
c001a052:	b8 0b 00 00 00       	mov    eax,0xb
c001a057:	eb 05                	jmp    c001a05e <Directory::read(unsigned long long, void*, int*)+0x56>
c001a059:	b8 05 00 00 00       	mov    eax,0x5
c001a05e:	5b                   	pop    ebx
c001a05f:	c3                   	ret    

c001a060 <Directory::write(unsigned long long, void*, int*)>:
c001a060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a064:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c001a06b:	b8 0b 00 00 00       	mov    eax,0xb
c001a070:	83 fa 19             	cmp    edx,0x19
c001a073:	77 18                	ja     c001a08d <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a075:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a07c:	85 d2                	test   edx,edx
c001a07e:	74 0d                	je     c001a08d <Directory::write(unsigned long long, void*, int*)+0x2d>
c001a080:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c001a087:	19 c0                	sbb    eax,eax
c001a089:	83 e0 0a             	and    eax,0xa
c001a08c:	40                   	inc    eax
c001a08d:	c3                   	ret    

c001a08e <File::isAtty()>:
c001a08e:	31 c0                	xor    eax,eax
c001a090:	c3                   	ret    
c001a091:	90                   	nop

c001a092 <Directory::isAtty()>:
c001a092:	31 c0                	xor    eax,eax
c001a094:	c3                   	ret    
c001a095:	90                   	nop

c001a096 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a096:	b8 0a 00 00 00       	mov    eax,0xa
c001a09b:	c3                   	ret    

c001a09c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c001a09c:	b8 0a 00 00 00       	mov    eax,0xa
c001a0a1:	c3                   	ret    

c001a0a2 <Filesystem::allocateSwapfile(char const*, int)>:
c001a0a2:	31 c0                	xor    eax,eax
c001a0a4:	31 d2                	xor    edx,edx
c001a0a6:	c3                   	ret    
c001a0a7:	90                   	nop

c001a0a8 <File::~File()>:
c001a0a8:	83 ec 0c             	sub    esp,0xc
c001a0ab:	ba fc 1e 03 c0       	mov    edx,0xc0031efc
c001a0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b4:	89 10                	mov    DWORD PTR [eax],edx
c001a0b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0ba:	83 ec 0c             	sub    esp,0xc
c001a0bd:	50                   	push   eax
c001a0be:	e8 a1 dc ff ff       	call   c0017d64 <UnixFile::~UnixFile()>
c001a0c3:	83 c4 10             	add    esp,0x10
c001a0c6:	90                   	nop
c001a0c7:	83 c4 0c             	add    esp,0xc
c001a0ca:	c3                   	ret    
c001a0cb:	90                   	nop

c001a0cc <File::~File()>:
c001a0cc:	83 ec 0c             	sub    esp,0xc
c001a0cf:	83 ec 0c             	sub    esp,0xc
c001a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0d6:	e8 cd ff ff ff       	call   c001a0a8 <File::~File()>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	83 ec 08             	sub    esp,0x8
c001a0e1:	68 14 01 00 00       	push   0x114
c001a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0ea:	e8 f5 f0 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	83 c4 0c             	add    esp,0xc
c001a0f5:	c3                   	ret    

c001a0f6 <Directory::~Directory()>:
c001a0f6:	83 ec 0c             	sub    esp,0xc
c001a0f9:	ba 18 1f 03 c0       	mov    edx,0xc0031f18
c001a0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a102:	89 10                	mov    DWORD PTR [eax],edx
c001a104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a108:	83 ec 0c             	sub    esp,0xc
c001a10b:	50                   	push   eax
c001a10c:	e8 53 dc ff ff       	call   c0017d64 <UnixFile::~UnixFile()>
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	90                   	nop
c001a115:	83 c4 0c             	add    esp,0xc
c001a118:	c3                   	ret    
c001a119:	90                   	nop

c001a11a <Directory::~Directory()>:
c001a11a:	83 ec 0c             	sub    esp,0xc
c001a11d:	83 ec 0c             	sub    esp,0xc
c001a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a124:	e8 cd ff ff ff       	call   c001a0f6 <Directory::~Directory()>
c001a129:	83 c4 10             	add    esp,0x10
c001a12c:	83 ec 08             	sub    esp,0x8
c001a12f:	68 14 01 00 00       	push   0x114
c001a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a138:	e8 a7 f0 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001a13d:	83 c4 10             	add    esp,0x10
c001a140:	83 c4 0c             	add    esp,0xc
c001a143:	c3                   	ret    

c001a144 <Filesystem::Filesystem()>:
c001a144:	ba 90 1e 03 c0       	mov    edx,0xc0031e90
c001a149:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a14d:	89 10                	mov    DWORD PTR [eax],edx
c001a14f:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a155:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a159:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a15c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a160:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a165:	90                   	nop
c001a166:	c3                   	ret    
c001a167:	90                   	nop

c001a168 <Filesystem::~Filesystem()>:
c001a168:	ba 90 1e 03 c0       	mov    edx,0xc0031e90
c001a16d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a171:	89 10                	mov    DWORD PTR [eax],edx
c001a173:	90                   	nop
c001a174:	c3                   	ret    
c001a175:	90                   	nop

c001a176 <Filesystem::~Filesystem()>:
c001a176:	83 ec 0c             	sub    esp,0xc
c001a179:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a17d:	e8 e6 ff ff ff       	call   c001a168 <Filesystem::~Filesystem()>
c001a182:	83 c4 04             	add    esp,0x4
c001a185:	83 ec 08             	sub    esp,0x8
c001a188:	6a 08                	push   0x8
c001a18a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a18e:	e8 51 f0 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	83 c4 0c             	add    esp,0xc
c001a199:	c3                   	ret    

c001a19a <Fs::getcwd(Process*, char*, int)>:
c001a19a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a19e:	31 c0                	xor    eax,eax
c001a1a0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a1a4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a1a7:	7d 15                	jge    c001a1be <Fs::getcwd(Process*, char*, int)+0x24>
c001a1a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a1ad:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a1b4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a1b7:	84 c9                	test   cl,cl
c001a1b9:	74 06                	je     c001a1c1 <Fs::getcwd(Process*, char*, int)+0x27>
c001a1bb:	40                   	inc    eax
c001a1bc:	eb e2                	jmp    c001a1a0 <Fs::getcwd(Process*, char*, int)+0x6>
c001a1be:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a1c1:	31 c0                	xor    eax,eax
c001a1c3:	c3                   	ret    

c001a1c4 <Fs::initVFS()>:
c001a1c4:	83 ec 18             	sub    esp,0x18
c001a1c7:	6a 08                	push   0x8
c001a1c9:	e8 cd c2 ff ff       	call   c001649b <malloc>
c001a1ce:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1d1:	e8 d2 e9 00 00       	call   c0028ba8 <FAT::FAT()>
c001a1d6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a1dd:	e8 b9 c2 ff ff       	call   c001649b <malloc>
c001a1e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1e5:	e8 ec f8 00 00       	call   c0029ad6 <ISO9660::ISO9660()>
c001a1ea:	83 c4 1c             	add    esp,0x1c
c001a1ed:	c3                   	ret    

c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a1ee:	55                   	push   ebp
c001a1ef:	57                   	push   edi
c001a1f0:	56                   	push   esi
c001a1f1:	53                   	push   ebx
c001a1f2:	81 ec 20 04 00 00    	sub    esp,0x420
c001a1f8:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a1ff:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a206:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a20d:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a214:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a218:	68 00 04 00 00       	push   0x400
c001a21d:	6a 00                	push   0x0
c001a21f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a223:	57                   	push   edi
c001a224:	e8 c7 62 fe ff       	call   c00004f0 <memset>
c001a229:	83 c4 10             	add    esp,0x10
c001a22c:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a230:	75 0b                	jne    c001a23d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a232:	50                   	push   eax
c001a233:	50                   	push   eax
c001a234:	56                   	push   esi
c001a235:	57                   	push   edi
c001a236:	e8 15 64 fe ff       	call   c0000650 <strcpy>
c001a23b:	eb 45                	jmp    c001a282 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a23d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a240:	83 f8 2f             	cmp    eax,0x2f
c001a243:	74 05                	je     c001a24a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a245:	83 f8 5c             	cmp    eax,0x5c
c001a248:	75 19                	jne    c001a263 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a24a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a24d:	3c 60                	cmp    al,0x60
c001a24f:	7e 03                	jle    c001a254 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a251:	83 e8 20             	sub    eax,0x20
c001a254:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a258:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a25f:	50                   	push   eax
c001a260:	50                   	push   eax
c001a261:	eb 18                	jmp    c001a27b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a263:	50                   	push   eax
c001a264:	50                   	push   eax
c001a265:	55                   	push   ebp
c001a266:	57                   	push   edi
c001a267:	e8 e4 63 fe ff       	call   c0000650 <strcpy>
c001a26c:	58                   	pop    eax
c001a26d:	5a                   	pop    edx
c001a26e:	68 7f 2f 03 c0       	push   0xc0032f7f
c001a273:	57                   	push   edi
c001a274:	e8 f7 65 fe ff       	call   c0000870 <strcat>
c001a279:	59                   	pop    ecx
c001a27a:	5d                   	pop    ebp
c001a27b:	56                   	push   esi
c001a27c:	57                   	push   edi
c001a27d:	e8 ee 65 fe ff       	call   c0000870 <strcat>
c001a282:	83 c4 10             	add    esp,0x10
c001a285:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a289:	3c 60                	cmp    al,0x60
c001a28b:	7e 03                	jle    c001a290 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a28d:	83 e8 20             	sub    eax,0x20
c001a290:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a294:	be 03 00 00 00       	mov    esi,0x3
c001a299:	88 03                	mov    BYTE PTR [ebx],al
c001a29b:	b8 03 00 00 00       	mov    eax,0x3
c001a2a0:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a2a7:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a2ad:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a2b1:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a2b6:	89 fa                	mov    edx,edi
c001a2b8:	0f be ea             	movsx  ebp,dl
c001a2bb:	85 ed                	test   ebp,ebp
c001a2bd:	0f 84 a1 00 00 00    	je     c001a364 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a2c3:	8d 56 01             	lea    edx,[esi+0x1]
c001a2c6:	83 fd 2f             	cmp    ebp,0x2f
c001a2c9:	74 05                	je     c001a2d0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a2cb:	83 fd 5c             	cmp    ebp,0x5c
c001a2ce:	75 12                	jne    c001a2e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a2d0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a2d5:	89 c5                	mov    ebp,eax
c001a2d7:	74 09                	je     c001a2e2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a2d9:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a2dd:	40                   	inc    eax
c001a2de:	89 d6                	mov    esi,edx
c001a2e0:	eb cf                	jmp    c001a2b1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a2e2:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a2e7:	89 f9                	mov    ecx,edi
c001a2e9:	0f be e9             	movsx  ebp,cl
c001a2ec:	75 61                	jne    c001a34f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a2ee:	83 fd 2e             	cmp    ebp,0x2e
c001a2f1:	75 5c                	jne    c001a34f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a2f3:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a2f8:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a2fd:	74 19                	je     c001a318 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a2ff:	83 fd 2e             	cmp    ebp,0x2e
c001a302:	74 55                	je     c001a359 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a304:	89 f2                	mov    edx,esi
c001a306:	42                   	inc    edx
c001a307:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a30c:	83 f9 2f             	cmp    ecx,0x2f
c001a30f:	74 f5                	je     c001a306 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a311:	83 f9 5c             	cmp    ecx,0x5c
c001a314:	74 f0                	je     c001a306 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a316:	eb c6                	jmp    c001a2de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a318:	83 fd 2e             	cmp    ebp,0x2e
c001a31b:	74 3c                	je     c001a359 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a31d:	83 f8 03             	cmp    eax,0x3
c001a320:	74 bc                	je     c001a2de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a322:	42                   	inc    edx
c001a323:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a328:	83 f9 2f             	cmp    ecx,0x2f
c001a32b:	74 f5                	je     c001a322 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a32d:	83 f9 5c             	cmp    ecx,0x5c
c001a330:	74 f0                	je     c001a322 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a332:	48                   	dec    eax
c001a333:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a337:	75 06                	jne    c001a33f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a339:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a33d:	eb f3                	jmp    c001a332 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a33f:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a343:	74 07                	je     c001a34c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a345:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a349:	48                   	dec    eax
c001a34a:	eb f3                	jmp    c001a33f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a34c:	40                   	inc    eax
c001a34d:	eb 8f                	jmp    c001a2de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a34f:	83 fd 2f             	cmp    ebp,0x2f
c001a352:	74 8a                	je     c001a2de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a354:	83 fd 5c             	cmp    ebp,0x5c
c001a357:	74 85                	je     c001a2de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a359:	89 f9                	mov    ecx,edi
c001a35b:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a35e:	40                   	inc    eax
c001a35f:	e9 7a ff ff ff       	jmp    c001a2de <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a364:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a368:	83 ec 0c             	sub    esp,0xc
c001a36b:	53                   	push   ebx
c001a36c:	e8 0f 62 fe ff       	call   c0000580 <strlen>
c001a371:	83 c4 10             	add    esp,0x10
c001a374:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a379:	74 1c                	je     c001a397 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a37b:	83 ec 0c             	sub    esp,0xc
c001a37e:	53                   	push   ebx
c001a37f:	e8 fc 61 fe ff       	call   c0000580 <strlen>
c001a384:	83 c4 10             	add    esp,0x10
c001a387:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a38c:	74 09                	je     c001a397 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a38e:	31 ff                	xor    edi,edi
c001a390:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a395:	eb 5c                	jmp    c001a3f3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a397:	83 ec 0c             	sub    esp,0xc
c001a39a:	53                   	push   ebx
c001a39b:	e8 e0 61 fe ff       	call   c0000580 <strlen>
c001a3a0:	83 c4 10             	add    esp,0x10
c001a3a3:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a3a8:	74 e4                	je     c001a38e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a3aa:	83 ec 0c             	sub    esp,0xc
c001a3ad:	53                   	push   ebx
c001a3ae:	e8 cd 61 fe ff       	call   c0000580 <strlen>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a3bb:	eb ab                	jmp    c001a368 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a3bd:	52                   	push   edx
c001a3be:	52                   	push   edx
c001a3bf:	53                   	push   ebx
c001a3c0:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a3c4:	55                   	push   ebp
c001a3c5:	e8 86 62 fe ff       	call   c0000650 <strcpy>
c001a3ca:	59                   	pop    ecx
c001a3cb:	58                   	pop    eax
c001a3cc:	53                   	push   ebx
c001a3cd:	55                   	push   ebp
c001a3ce:	e8 83 f8 ff ff       	call   c0019c56 <KeDereferenceSymlink(char const*, char*)>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	48                   	dec    eax
c001a3d7:	75 37                	jne    c001a410 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a3d9:	50                   	push   eax
c001a3da:	53                   	push   ebx
c001a3db:	55                   	push   ebp
c001a3dc:	68 46 1e 03 c0       	push   0xc0031e46
c001a3e1:	e8 fc ee ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001a3e6:	8d 47 01             	lea    eax,[edi+0x1]
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	83 ff 14             	cmp    edi,0x14
c001a3ef:	74 08                	je     c001a3f9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a3f1:	89 c7                	mov    edi,eax
c001a3f3:	85 f6                	test   esi,esi
c001a3f5:	75 c6                	jne    c001a3bd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a3f7:	eb 17                	jmp    c001a410 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a3f9:	83 ec 0c             	sub    esp,0xc
c001a3fc:	bf 15 00 00 00       	mov    edi,0x15
c001a401:	68 61 1e 03 c0       	push   0xc0031e61
c001a406:	e8 5f 5e 00 00       	call   c002026a <KePanic(char const*)>
c001a40b:	83 c4 10             	add    esp,0x10
c001a40e:	eb e3                	jmp    c001a3f3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a410:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a416:	5b                   	pop    ebx
c001a417:	5e                   	pop    esi
c001a418:	5f                   	pop    edi
c001a419:	5d                   	pop    ebp
c001a41a:	c3                   	ret    
c001a41b:	90                   	nop

c001a41c <File::File(char const*, Process*, bool)>:
c001a41c:	83 ec 1c             	sub    esp,0x1c
c001a41f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a423:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a42b:	83 ec 08             	sub    esp,0x8
c001a42e:	6a 00                	push   0x0
c001a430:	50                   	push   eax
c001a431:	e8 48 d7 ff ff       	call   c0017b7e <UnixFile::UnixFile(int)>
c001a436:	83 c4 10             	add    esp,0x10
c001a439:	ba fc 1e 03 c0       	mov    edx,0xc0031efc
c001a43e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a442:	89 10                	mov    DWORD PTR [eax],edx
c001a444:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a449:	85 c0                	test   eax,eax
c001a44b:	74 0f                	je     c001a45c <File::File(char const*, Process*, bool)+0x40>
c001a44d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a452:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a456:	74 04                	je     c001a45c <File::File(char const*, Process*, bool)+0x40>
c001a458:	b0 01                	mov    al,0x1
c001a45a:	eb 02                	jmp    c001a45e <File::File(char const*, Process*, bool)+0x42>
c001a45c:	b0 00                	mov    al,0x0
c001a45e:	0f b6 c0             	movzx  eax,al
c001a461:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a465:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a46b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a46f:	83 c2 0d             	add    edx,0xd
c001a472:	50                   	push   eax
c001a473:	51                   	push   ecx
c001a474:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a478:	52                   	push   edx
c001a479:	e8 70 fd ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a47e:	83 c4 10             	add    esp,0x10
c001a481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a485:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a488:	83 e8 41             	sub    eax,0x41
c001a48b:	88 c2                	mov    dl,al
c001a48d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a491:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a497:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a49b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4a3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a4a9:	0f b6 c0             	movzx  eax,al
c001a4ac:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a4b3:	85 c0                	test   eax,eax
c001a4b5:	74 3e                	je     c001a4f5 <File::File(char const*, Process*, bool)+0xd9>
c001a4b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a4c1:	0f b6 c0             	movzx  eax,al
c001a4c4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a4cb:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a4d1:	85 c0                	test   eax,eax
c001a4d3:	75 20                	jne    c001a4f5 <File::File(char const*, Process*, bool)+0xd9>
c001a4d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a4d9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a4df:	0f b6 c0             	movzx  eax,al
c001a4e2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a4e9:	83 ec 0c             	sub    esp,0xc
c001a4ec:	50                   	push   eax
c001a4ed:	e8 ba 21 00 00       	call   c001c6ac <LogicalDisk::mount()>
c001a4f2:	83 c4 10             	add    esp,0x10
c001a4f5:	90                   	nop
c001a4f6:	83 c4 1c             	add    esp,0x1c
c001a4f9:	c3                   	ret    

c001a4fa <File::File(char const*, Process*)>:
c001a4fa:	83 ec 0c             	sub    esp,0xc
c001a4fd:	6a 01                	push   0x1
c001a4ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a50b:	e8 0c ff ff ff       	call   c001a41c <File::File(char const*, Process*, bool)>
c001a510:	83 c4 10             	add    esp,0x10
c001a513:	90                   	nop
c001a514:	83 c4 0c             	add    esp,0xc
c001a517:	c3                   	ret    

c001a518 <File::open(FileOpenMode)>:
c001a518:	53                   	push   ebx
c001a519:	b8 0b 00 00 00       	mov    eax,0xb
c001a51e:	83 ec 08             	sub    esp,0x8
c001a521:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a525:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a52c:	83 fa 19             	cmp    edx,0x19
c001a52f:	77 40                	ja     c001a571 <File::open(FileOpenMode)+0x59>
c001a531:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a538:	85 d2                	test   edx,edx
c001a53a:	74 35                	je     c001a571 <File::open(FileOpenMode)+0x59>
c001a53c:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a542:	85 d2                	test   edx,edx
c001a544:	74 2b                	je     c001a571 <File::open(FileOpenMode)+0x59>
c001a546:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a54a:	b8 06 00 00 00       	mov    eax,0x6
c001a54f:	75 20                	jne    c001a571 <File::open(FileOpenMode)+0x59>
c001a551:	8b 02                	mov    eax,DWORD PTR [edx]
c001a553:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a559:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a55d:	51                   	push   ecx
c001a55e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a561:	51                   	push   ecx
c001a562:	52                   	push   edx
c001a563:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a566:	83 c4 10             	add    esp,0x10
c001a569:	85 c0                	test   eax,eax
c001a56b:	75 04                	jne    c001a571 <File::open(FileOpenMode)+0x59>
c001a56d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a571:	83 c4 08             	add    esp,0x8
c001a574:	5b                   	pop    ebx
c001a575:	c3                   	ret    

c001a576 <File::close()>:
c001a576:	53                   	push   ebx
c001a577:	b8 0b 00 00 00       	mov    eax,0xb
c001a57c:	83 ec 08             	sub    esp,0x8
c001a57f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a583:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a58a:	83 f9 19             	cmp    ecx,0x19
c001a58d:	77 41                	ja     c001a5d0 <File::close()+0x5a>
c001a58f:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a596:	85 db                	test   ebx,ebx
c001a598:	74 36                	je     c001a5d0 <File::close()+0x5a>
c001a59a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a5a1:	74 2d                	je     c001a5d0 <File::close()+0x5a>
c001a5a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a5a7:	b8 05 00 00 00       	mov    eax,0x5
c001a5ac:	74 22                	je     c001a5d0 <File::close()+0x5a>
c001a5ae:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a5b2:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5b9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a5bf:	53                   	push   ebx
c001a5c0:	53                   	push   ebx
c001a5c1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a5c3:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a5c9:	50                   	push   eax
c001a5ca:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a5cd:	83 c4 10             	add    esp,0x10
c001a5d0:	83 c4 08             	add    esp,0x8
c001a5d3:	5b                   	pop    ebx
c001a5d4:	c3                   	ret    
c001a5d5:	90                   	nop

c001a5d6 <File::seek(unsigned long long)>:
c001a5d6:	56                   	push   esi
c001a5d7:	b8 0b 00 00 00       	mov    eax,0xb
c001a5dc:	53                   	push   ebx
c001a5dd:	51                   	push   ecx
c001a5de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a5e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5ea:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a5f1:	83 fa 19             	cmp    edx,0x19
c001a5f4:	77 31                	ja     c001a627 <File::seek(unsigned long long)+0x51>
c001a5f6:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5fd:	85 d2                	test   edx,edx
c001a5ff:	74 26                	je     c001a627 <File::seek(unsigned long long)+0x51>
c001a601:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a607:	85 d2                	test   edx,edx
c001a609:	74 1c                	je     c001a627 <File::seek(unsigned long long)+0x51>
c001a60b:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a60f:	b8 05 00 00 00       	mov    eax,0x5
c001a614:	74 11                	je     c001a627 <File::seek(unsigned long long)+0x51>
c001a616:	8b 02                	mov    eax,DWORD PTR [edx]
c001a618:	53                   	push   ebx
c001a619:	51                   	push   ecx
c001a61a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a620:	52                   	push   edx
c001a621:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a624:	83 c4 10             	add    esp,0x10
c001a627:	5a                   	pop    edx
c001a628:	5b                   	pop    ebx
c001a629:	5e                   	pop    esi
c001a62a:	c3                   	ret    
c001a62b:	90                   	nop

c001a62c <File::truncate(unsigned long long)>:
c001a62c:	56                   	push   esi
c001a62d:	b8 0b 00 00 00       	mov    eax,0xb
c001a632:	53                   	push   ebx
c001a633:	51                   	push   ecx
c001a634:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a638:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a63c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a640:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a647:	83 fa 19             	cmp    edx,0x19
c001a64a:	77 31                	ja     c001a67d <File::truncate(unsigned long long)+0x51>
c001a64c:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a653:	85 d2                	test   edx,edx
c001a655:	74 26                	je     c001a67d <File::truncate(unsigned long long)+0x51>
c001a657:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a65d:	85 d2                	test   edx,edx
c001a65f:	74 1c                	je     c001a67d <File::truncate(unsigned long long)+0x51>
c001a661:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a665:	b8 05 00 00 00       	mov    eax,0x5
c001a66a:	74 11                	je     c001a67d <File::truncate(unsigned long long)+0x51>
c001a66c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a66e:	53                   	push   ebx
c001a66f:	51                   	push   ecx
c001a670:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a676:	52                   	push   edx
c001a677:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a67a:	83 c4 10             	add    esp,0x10
c001a67d:	5a                   	pop    edx
c001a67e:	5b                   	pop    ebx
c001a67f:	5e                   	pop    esi
c001a680:	c3                   	ret    
c001a681:	90                   	nop

c001a682 <File::tell(unsigned long long*)>:
c001a682:	83 ec 0c             	sub    esp,0xc
c001a685:	b8 0b 00 00 00       	mov    eax,0xb
c001a68a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a68e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a695:	83 fa 19             	cmp    edx,0x19
c001a698:	77 34                	ja     c001a6ce <File::tell(unsigned long long*)+0x4c>
c001a69a:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a6a1:	85 d2                	test   edx,edx
c001a6a3:	74 29                	je     c001a6ce <File::tell(unsigned long long*)+0x4c>
c001a6a5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a6ab:	85 d2                	test   edx,edx
c001a6ad:	74 1f                	je     c001a6ce <File::tell(unsigned long long*)+0x4c>
c001a6af:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a6b3:	b8 05 00 00 00       	mov    eax,0x5
c001a6b8:	74 14                	je     c001a6ce <File::tell(unsigned long long*)+0x4c>
c001a6ba:	50                   	push   eax
c001a6bb:	8b 02                	mov    eax,DWORD PTR [edx]
c001a6bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6c1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a6c7:	52                   	push   edx
c001a6c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a6cb:	83 c4 10             	add    esp,0x10
c001a6ce:	83 c4 0c             	add    esp,0xc
c001a6d1:	c3                   	ret    

c001a6d2 <File::rewind()>:
c001a6d2:	83 ec 10             	sub    esp,0x10
c001a6d5:	6a 00                	push   0x0
c001a6d7:	6a 00                	push   0x0
c001a6d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6dd:	e8 f4 fe ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c001a6e2:	83 c4 1c             	add    esp,0x1c
c001a6e5:	c3                   	ret    

c001a6e6 <File::unlink()>:
c001a6e6:	83 ec 0c             	sub    esp,0xc
c001a6e9:	b8 0b 00 00 00       	mov    eax,0xb
c001a6ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6f9:	83 f9 19             	cmp    ecx,0x19
c001a6fc:	77 2f                	ja     c001a72d <File::unlink()+0x47>
c001a6fe:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a705:	85 c9                	test   ecx,ecx
c001a707:	74 24                	je     c001a72d <File::unlink()+0x47>
c001a709:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a70f:	85 c9                	test   ecx,ecx
c001a711:	74 1a                	je     c001a72d <File::unlink()+0x47>
c001a713:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a717:	b8 06 00 00 00       	mov    eax,0x6
c001a71c:	75 0f                	jne    c001a72d <File::unlink()+0x47>
c001a71e:	50                   	push   eax
c001a71f:	83 c2 0d             	add    edx,0xd
c001a722:	50                   	push   eax
c001a723:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a725:	52                   	push   edx
c001a726:	51                   	push   ecx
c001a727:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a72a:	83 c4 10             	add    esp,0x10
c001a72d:	83 c4 0c             	add    esp,0xc
c001a730:	c3                   	ret    
c001a731:	90                   	nop

c001a732 <File::rename(char const*)>:
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	b8 0b 00 00 00       	mov    eax,0xb
c001a73a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a73e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a745:	83 f9 19             	cmp    ecx,0x19
c001a748:	77 32                	ja     c001a77c <File::rename(char const*)+0x4a>
c001a74a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a751:	85 c9                	test   ecx,ecx
c001a753:	74 27                	je     c001a77c <File::rename(char const*)+0x4a>
c001a755:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a75b:	85 c9                	test   ecx,ecx
c001a75d:	74 1d                	je     c001a77c <File::rename(char const*)+0x4a>
c001a75f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a763:	b8 06 00 00 00       	mov    eax,0x6
c001a768:	75 12                	jne    c001a77c <File::rename(char const*)+0x4a>
c001a76a:	50                   	push   eax
c001a76b:	83 c2 0d             	add    edx,0xd
c001a76e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a770:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a774:	52                   	push   edx
c001a775:	51                   	push   ecx
c001a776:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a779:	83 c4 10             	add    esp,0x10
c001a77c:	83 c4 0c             	add    esp,0xc
c001a77f:	c3                   	ret    

c001a780 <File::chfatattr(unsigned char, unsigned char)>:
c001a780:	57                   	push   edi
c001a781:	b8 0b 00 00 00       	mov    eax,0xb
c001a786:	56                   	push   esi
c001a787:	53                   	push   ebx
c001a788:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a78c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a790:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a794:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a79b:	83 f9 19             	cmp    ecx,0x19
c001a79e:	77 37                	ja     c001a7d7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a7a0:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a7a7:	85 c9                	test   ecx,ecx
c001a7a9:	74 2c                	je     c001a7d7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a7ab:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a7b1:	85 c9                	test   ecx,ecx
c001a7b3:	74 22                	je     c001a7d7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a7b5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a7b9:	b8 06 00 00 00       	mov    eax,0x6
c001a7be:	75 17                	jne    c001a7d7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a7c0:	89 f0                	mov    eax,esi
c001a7c2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7c4:	0f b6 db             	movzx  ebx,bl
c001a7c7:	0f b6 f0             	movzx  esi,al
c001a7ca:	83 c2 0d             	add    edx,0xd
c001a7cd:	56                   	push   esi
c001a7ce:	53                   	push   ebx
c001a7cf:	52                   	push   edx
c001a7d0:	51                   	push   ecx
c001a7d1:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a7d4:	83 c4 10             	add    esp,0x10
c001a7d7:	5b                   	pop    ebx
c001a7d8:	5e                   	pop    esi
c001a7d9:	5f                   	pop    edi
c001a7da:	c3                   	ret    
c001a7db:	90                   	nop

c001a7dc <File::exists()>:
c001a7dc:	83 ec 0c             	sub    esp,0xc
c001a7df:	31 c0                	xor    eax,eax
c001a7e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7e5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a7ec:	83 f9 19             	cmp    ecx,0x19
c001a7ef:	77 24                	ja     c001a815 <File::exists()+0x39>
c001a7f1:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a7f8:	85 c9                	test   ecx,ecx
c001a7fa:	74 19                	je     c001a815 <File::exists()+0x39>
c001a7fc:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a802:	85 c9                	test   ecx,ecx
c001a804:	74 0f                	je     c001a815 <File::exists()+0x39>
c001a806:	50                   	push   eax
c001a807:	83 c2 0d             	add    edx,0xd
c001a80a:	50                   	push   eax
c001a80b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a80d:	52                   	push   edx
c001a80e:	51                   	push   ecx
c001a80f:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	83 c4 0c             	add    esp,0xc
c001a818:	c3                   	ret    
c001a819:	90                   	nop

c001a81a <File::stat(unsigned long long*, bool*)>:
c001a81a:	56                   	push   esi
c001a81b:	53                   	push   ebx
c001a81c:	50                   	push   eax
c001a81d:	b8 0b 00 00 00       	mov    eax,0xb
c001a822:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a826:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a82a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a82e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a835:	83 f9 19             	cmp    ecx,0x19
c001a838:	77 3d                	ja     c001a877 <File::stat(unsigned long long*, bool*)+0x5d>
c001a83a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a841:	85 c9                	test   ecx,ecx
c001a843:	74 32                	je     c001a877 <File::stat(unsigned long long*, bool*)+0x5d>
c001a845:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a84b:	85 c9                	test   ecx,ecx
c001a84d:	74 28                	je     c001a877 <File::stat(unsigned long long*, bool*)+0x5d>
c001a84f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a853:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a855:	74 13                	je     c001a86a <File::stat(unsigned long long*, bool*)+0x50>
c001a857:	83 ec 04             	sub    esp,0x4
c001a85a:	56                   	push   esi
c001a85b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a861:	51                   	push   ecx
c001a862:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a865:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a868:	eb 0a                	jmp    c001a874 <File::stat(unsigned long long*, bool*)+0x5a>
c001a86a:	53                   	push   ebx
c001a86b:	83 c2 0d             	add    edx,0xd
c001a86e:	56                   	push   esi
c001a86f:	52                   	push   edx
c001a870:	51                   	push   ecx
c001a871:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a874:	83 c4 10             	add    esp,0x10
c001a877:	5a                   	pop    edx
c001a878:	5b                   	pop    ebx
c001a879:	5e                   	pop    esi
c001a87a:	c3                   	ret    

c001a87b <Fs::setcwd(Process*, char*)>:
c001a87b:	55                   	push   ebp
c001a87c:	57                   	push   edi
c001a87d:	56                   	push   esi
c001a87e:	53                   	push   ebx
c001a87f:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a885:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a88c:	6a 00                	push   0x0
c001a88e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a894:	57                   	push   edi
c001a895:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a89c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a8a0:	56                   	push   esi
c001a8a1:	e8 48 f9 ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a8a6:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8a9:	e8 d2 5c fe ff       	call   c0000580 <strlen>
c001a8ae:	83 c4 10             	add    esp,0x10
c001a8b1:	83 f8 02             	cmp    eax,0x2
c001a8b4:	77 15                	ja     c001a8cb <Fs::setcwd(Process*, char*)+0x50>
c001a8b6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a8bb:	83 eb 41             	sub    ebx,0x41
c001a8be:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a8c5:	85 c0                	test   eax,eax
c001a8c7:	75 1c                	jne    c001a8e5 <Fs::setcwd(Process*, char*)+0x6a>
c001a8c9:	eb 2f                	jmp    c001a8fa <Fs::setcwd(Process*, char*)+0x7f>
c001a8cb:	83 ec 0c             	sub    esp,0xc
c001a8ce:	56                   	push   esi
c001a8cf:	e8 ac 5c fe ff       	call   c0000580 <strlen>
c001a8d4:	83 c4 10             	add    esp,0x10
c001a8d7:	83 f8 03             	cmp    eax,0x3
c001a8da:	75 57                	jne    c001a933 <Fs::setcwd(Process*, char*)+0xb8>
c001a8dc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a8e1:	75 50                	jne    c001a933 <Fs::setcwd(Process*, char*)+0xb8>
c001a8e3:	eb d1                	jmp    c001a8b6 <Fs::setcwd(Process*, char*)+0x3b>
c001a8e5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a8ec:	75 0c                	jne    c001a8fa <Fs::setcwd(Process*, char*)+0x7f>
c001a8ee:	83 ec 0c             	sub    esp,0xc
c001a8f1:	50                   	push   eax
c001a8f2:	e8 b5 1d 00 00       	call   c001c6ac <LogicalDisk::mount()>
c001a8f7:	83 c4 10             	add    esp,0x10
c001a8fa:	83 fb 19             	cmp    ebx,0x19
c001a8fd:	b8 03 00 00 00       	mov    eax,0x3
c001a902:	0f 87 c6 00 00 00    	ja     c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a908:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a90f:	b8 05 00 00 00       	mov    eax,0x5
c001a914:	85 d2                	test   edx,edx
c001a916:	0f 84 b2 00 00 00    	je     c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a91c:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a923:	b8 06 00 00 00       	mov    eax,0x6
c001a928:	0f 85 92 00 00 00    	jne    c001a9c0 <Fs::setcwd(Process*, char*)+0x145>
c001a92e:	e9 9b 00 00 00       	jmp    c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a933:	83 ec 0c             	sub    esp,0xc
c001a936:	68 14 01 00 00       	push   0x114
c001a93b:	e8 5b bb ff ff       	call   c001649b <malloc>
c001a940:	83 c4 0c             	add    esp,0xc
c001a943:	55                   	push   ebp
c001a944:	56                   	push   esi
c001a945:	50                   	push   eax
c001a946:	89 c3                	mov    ebx,eax
c001a948:	e8 ad fb ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c001a94d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a952:	83 c4 0c             	add    esp,0xc
c001a955:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a959:	50                   	push   eax
c001a95a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a95e:	50                   	push   eax
c001a95f:	53                   	push   ebx
c001a960:	e8 b5 fe ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	83 f8 02             	cmp    eax,0x2
c001a96b:	74 27                	je     c001a994 <Fs::setcwd(Process*, char*)+0x119>
c001a96d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a972:	75 1c                	jne    c001a990 <Fs::setcwd(Process*, char*)+0x115>
c001a974:	85 db                	test   ebx,ebx
c001a976:	b8 02 00 00 00       	mov    eax,0x2
c001a97b:	74 51                	je     c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a97d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a97f:	83 ec 0c             	sub    esp,0xc
c001a982:	53                   	push   ebx
c001a983:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a986:	83 c4 10             	add    esp,0x10
c001a989:	b8 02 00 00 00       	mov    eax,0x2
c001a98e:	eb 3e                	jmp    c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a990:	85 c0                	test   eax,eax
c001a992:	74 1c                	je     c001a9b0 <Fs::setcwd(Process*, char*)+0x135>
c001a994:	85 db                	test   ebx,ebx
c001a996:	b8 01 00 00 00       	mov    eax,0x1
c001a99b:	74 31                	je     c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a99d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a99f:	83 ec 0c             	sub    esp,0xc
c001a9a2:	53                   	push   ebx
c001a9a3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	b8 01 00 00 00       	mov    eax,0x1
c001a9ae:	eb 1e                	jmp    c001a9ce <Fs::setcwd(Process*, char*)+0x153>
c001a9b0:	85 db                	test   ebx,ebx
c001a9b2:	74 0c                	je     c001a9c0 <Fs::setcwd(Process*, char*)+0x145>
c001a9b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9b6:	83 ec 0c             	sub    esp,0xc
c001a9b9:	53                   	push   ebx
c001a9ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9bd:	83 c4 10             	add    esp,0x10
c001a9c0:	50                   	push   eax
c001a9c1:	50                   	push   eax
c001a9c2:	56                   	push   esi
c001a9c3:	57                   	push   edi
c001a9c4:	e8 87 5c fe ff       	call   c0000650 <strcpy>
c001a9c9:	83 c4 10             	add    esp,0x10
c001a9cc:	31 c0                	xor    eax,eax
c001a9ce:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a9d4:	5b                   	pop    ebx
c001a9d5:	5e                   	pop    esi
c001a9d6:	5f                   	pop    edi
c001a9d7:	5d                   	pop    ebp
c001a9d8:	c3                   	ret    
c001a9d9:	90                   	nop

c001a9da <Directory::Directory(char const*, Process*)>:
c001a9da:	83 ec 0c             	sub    esp,0xc
c001a9dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e1:	83 ec 08             	sub    esp,0x8
c001a9e4:	6a 00                	push   0x0
c001a9e6:	50                   	push   eax
c001a9e7:	e8 92 d1 ff ff       	call   c0017b7e <UnixFile::UnixFile(int)>
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	ba 18 1f 03 c0       	mov    edx,0xc0031f18
c001a9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9f8:	89 10                	mov    DWORD PTR [eax],edx
c001a9fa:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a9ff:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001aa03:	0f 95 c0             	setne  al
c001aa06:	0f b6 c0             	movzx  eax,al
c001aa09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa0d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001aa13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa17:	83 c2 0d             	add    edx,0xd
c001aa1a:	50                   	push   eax
c001aa1b:	51                   	push   ecx
c001aa1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa20:	52                   	push   edx
c001aa21:	e8 c8 f7 ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001aa26:	83 c4 10             	add    esp,0x10
c001aa29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001aa30:	83 e8 41             	sub    eax,0x41
c001aa33:	88 c2                	mov    dl,al
c001aa35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa39:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001aa3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa43:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001aa47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa4b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aa51:	0f b6 c0             	movzx  eax,al
c001aa54:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aa5b:	85 c0                	test   eax,eax
c001aa5d:	74 3e                	je     c001aa9d <Directory::Directory(char const*, Process*)+0xc3>
c001aa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa63:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aa69:	0f b6 c0             	movzx  eax,al
c001aa6c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aa73:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aa79:	85 c0                	test   eax,eax
c001aa7b:	75 20                	jne    c001aa9d <Directory::Directory(char const*, Process*)+0xc3>
c001aa7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa81:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001aa87:	0f b6 c0             	movzx  eax,al
c001aa8a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001aa91:	83 ec 0c             	sub    esp,0xc
c001aa94:	50                   	push   eax
c001aa95:	e8 12 1c 00 00       	call   c001c6ac <LogicalDisk::mount()>
c001aa9a:	83 c4 10             	add    esp,0x10
c001aa9d:	90                   	nop
c001aa9e:	83 c4 0c             	add    esp,0xc
c001aaa1:	c3                   	ret    

c001aaa2 <Directory::open()>:
c001aaa2:	53                   	push   ebx
c001aaa3:	b8 0b 00 00 00       	mov    eax,0xb
c001aaa8:	83 ec 08             	sub    esp,0x8
c001aaab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaaf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001aab6:	83 fa 19             	cmp    edx,0x19
c001aab9:	77 3d                	ja     c001aaf8 <Directory::open()+0x56>
c001aabb:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001aac2:	85 d2                	test   edx,edx
c001aac4:	74 32                	je     c001aaf8 <Directory::open()+0x56>
c001aac6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aacc:	85 d2                	test   edx,edx
c001aace:	74 28                	je     c001aaf8 <Directory::open()+0x56>
c001aad0:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aad4:	b8 06 00 00 00       	mov    eax,0x6
c001aad9:	75 1d                	jne    c001aaf8 <Directory::open()+0x56>
c001aadb:	50                   	push   eax
c001aadc:	8b 02                	mov    eax,DWORD PTR [edx]
c001aade:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aae4:	51                   	push   ecx
c001aae5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aae8:	51                   	push   ecx
c001aae9:	52                   	push   edx
c001aaea:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aaed:	83 c4 10             	add    esp,0x10
c001aaf0:	85 c0                	test   eax,eax
c001aaf2:	75 04                	jne    c001aaf8 <Directory::open()+0x56>
c001aaf4:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aaf8:	83 c4 08             	add    esp,0x8
c001aafb:	5b                   	pop    ebx
c001aafc:	c3                   	ret    
c001aafd:	90                   	nop

c001aafe <Directory::close()>:
c001aafe:	53                   	push   ebx
c001aaff:	b8 0b 00 00 00       	mov    eax,0xb
c001ab04:	83 ec 08             	sub    esp,0x8
c001ab07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab0b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab12:	83 f9 19             	cmp    ecx,0x19
c001ab15:	77 41                	ja     c001ab58 <Directory::close()+0x5a>
c001ab17:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab1e:	85 db                	test   ebx,ebx
c001ab20:	74 36                	je     c001ab58 <Directory::close()+0x5a>
c001ab22:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001ab29:	74 2d                	je     c001ab58 <Directory::close()+0x5a>
c001ab2b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab2f:	b8 05 00 00 00       	mov    eax,0x5
c001ab34:	74 22                	je     c001ab58 <Directory::close()+0x5a>
c001ab36:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001ab3a:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab41:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001ab47:	53                   	push   ebx
c001ab48:	53                   	push   ebx
c001ab49:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab4b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001ab51:	50                   	push   eax
c001ab52:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001ab55:	83 c4 10             	add    esp,0x10
c001ab58:	83 c4 08             	add    esp,0x8
c001ab5b:	5b                   	pop    ebx
c001ab5c:	c3                   	ret    
c001ab5d:	90                   	nop

c001ab5e <Directory::unlink()>:
c001ab5e:	83 ec 0c             	sub    esp,0xc
c001ab61:	b8 0b 00 00 00       	mov    eax,0xb
c001ab66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab6a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab71:	83 f9 19             	cmp    ecx,0x19
c001ab74:	77 2f                	ja     c001aba5 <Directory::unlink()+0x47>
c001ab76:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab7d:	85 c9                	test   ecx,ecx
c001ab7f:	74 24                	je     c001aba5 <Directory::unlink()+0x47>
c001ab81:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab87:	85 c9                	test   ecx,ecx
c001ab89:	74 1a                	je     c001aba5 <Directory::unlink()+0x47>
c001ab8b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab8f:	b8 06 00 00 00       	mov    eax,0x6
c001ab94:	75 0f                	jne    c001aba5 <Directory::unlink()+0x47>
c001ab96:	50                   	push   eax
c001ab97:	83 c2 0d             	add    edx,0xd
c001ab9a:	50                   	push   eax
c001ab9b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab9d:	52                   	push   edx
c001ab9e:	51                   	push   ecx
c001ab9f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aba2:	83 c4 10             	add    esp,0x10
c001aba5:	83 c4 0c             	add    esp,0xc
c001aba8:	c3                   	ret    
c001aba9:	90                   	nop

c001abaa <Directory::rename(char const*)>:
c001abaa:	83 ec 0c             	sub    esp,0xc
c001abad:	b8 0b 00 00 00       	mov    eax,0xb
c001abb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abb6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abbd:	83 f9 19             	cmp    ecx,0x19
c001abc0:	77 32                	ja     c001abf4 <Directory::rename(char const*)+0x4a>
c001abc2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abc9:	85 c9                	test   ecx,ecx
c001abcb:	74 27                	je     c001abf4 <Directory::rename(char const*)+0x4a>
c001abcd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001abd3:	85 c9                	test   ecx,ecx
c001abd5:	74 1d                	je     c001abf4 <Directory::rename(char const*)+0x4a>
c001abd7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001abdb:	b8 06 00 00 00       	mov    eax,0x6
c001abe0:	75 12                	jne    c001abf4 <Directory::rename(char const*)+0x4a>
c001abe2:	50                   	push   eax
c001abe3:	83 c2 0d             	add    edx,0xd
c001abe6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001abe8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001abec:	52                   	push   edx
c001abed:	51                   	push   ecx
c001abee:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	83 c4 0c             	add    esp,0xc
c001abf7:	c3                   	ret    

c001abf8 <Directory::exists()>:
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	31 c0                	xor    eax,eax
c001abfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac01:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac08:	83 f9 19             	cmp    ecx,0x19
c001ac0b:	77 24                	ja     c001ac31 <Directory::exists()+0x39>
c001ac0d:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac14:	85 c9                	test   ecx,ecx
c001ac16:	74 19                	je     c001ac31 <Directory::exists()+0x39>
c001ac18:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ac1e:	85 c9                	test   ecx,ecx
c001ac20:	74 0f                	je     c001ac31 <Directory::exists()+0x39>
c001ac22:	50                   	push   eax
c001ac23:	83 c2 0d             	add    edx,0xd
c001ac26:	50                   	push   eax
c001ac27:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ac29:	52                   	push   edx
c001ac2a:	51                   	push   ecx
c001ac2b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ac2e:	83 c4 10             	add    esp,0x10
c001ac31:	83 c4 0c             	add    esp,0xc
c001ac34:	c3                   	ret    
c001ac35:	90                   	nop

c001ac36 <Directory::read(dirent*)>:
c001ac36:	83 ec 1c             	sub    esp,0x1c
c001ac39:	b8 0b 00 00 00       	mov    eax,0xb
c001ac3e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac49:	83 f9 19             	cmp    ecx,0x19
c001ac4c:	77 30                	ja     c001ac7e <Directory::read(dirent*)+0x48>
c001ac4e:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ac55:	85 c9                	test   ecx,ecx
c001ac57:	74 25                	je     c001ac7e <Directory::read(dirent*)+0x48>
c001ac59:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ac60:	74 1c                	je     c001ac7e <Directory::read(dirent*)+0x48>
c001ac62:	83 ec 0c             	sub    esp,0xc
c001ac65:	8b 02                	mov    eax,DWORD PTR [edx]
c001ac67:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ac6b:	51                   	push   ecx
c001ac6c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ac70:	6a 00                	push   0x0
c001ac72:	68 10 01 00 00       	push   0x110
c001ac77:	52                   	push   edx
c001ac78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ac7b:	83 c4 20             	add    esp,0x20
c001ac7e:	83 c4 1c             	add    esp,0x1c
c001ac81:	c3                   	ret    

c001ac82 <Directory::create()>:
c001ac82:	83 ec 0c             	sub    esp,0xc
c001ac85:	b8 0b 00 00 00       	mov    eax,0xb
c001ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ac95:	83 f9 19             	cmp    ecx,0x19
c001ac98:	77 2f                	ja     c001acc9 <Directory::create()+0x47>
c001ac9a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aca1:	85 c9                	test   ecx,ecx
c001aca3:	74 24                	je     c001acc9 <Directory::create()+0x47>
c001aca5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001acab:	85 c9                	test   ecx,ecx
c001acad:	74 1a                	je     c001acc9 <Directory::create()+0x47>
c001acaf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001acb3:	b8 06 00 00 00       	mov    eax,0x6
c001acb8:	75 0f                	jne    c001acc9 <Directory::create()+0x47>
c001acba:	50                   	push   eax
c001acbb:	83 c2 0d             	add    edx,0xd
c001acbe:	50                   	push   eax
c001acbf:	8b 01                	mov    eax,DWORD PTR [ecx]
c001acc1:	52                   	push   edx
c001acc2:	51                   	push   ecx
c001acc3:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001acc6:	83 c4 10             	add    esp,0x10
c001acc9:	83 c4 0c             	add    esp,0xc
c001accc:	c3                   	ret    
c001accd:	90                   	nop

c001acce <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001acce:	b8 0a 00 00 00       	mov    eax,0xa
c001acd3:	c3                   	ret    

c001acd4 <Bus::Bus(char const*)>:
c001acd4:	83 ec 0c             	sub    esp,0xc
c001acd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acdb:	83 ec 08             	sub    esp,0x8
c001acde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ace2:	50                   	push   eax
c001ace3:	e8 f2 07 00 00       	call   c001b4da <Device::Device(char const*)>
c001ace8:	83 c4 10             	add    esp,0x10
c001aceb:	ba 34 1f 03 c0       	mov    edx,0xc0031f34
c001acf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf4:	89 10                	mov    DWORD PTR [eax],edx
c001acf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ad04:	90                   	nop
c001ad05:	83 c4 0c             	add    esp,0xc
c001ad08:	c3                   	ret    
c001ad09:	90                   	nop
c001ad0a:	66 90                	xchg   ax,ax

c001ad0c <Bus::~Bus()>:
c001ad0c:	83 ec 0c             	sub    esp,0xc
c001ad0f:	ba 34 1f 03 c0       	mov    edx,0xc0031f34
c001ad14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad18:	89 10                	mov    DWORD PTR [eax],edx
c001ad1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad1e:	83 ec 0c             	sub    esp,0xc
c001ad21:	50                   	push   eax
c001ad22:	e8 53 05 00 00       	call   c001b27a <Device::~Device()>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	90                   	nop
c001ad2b:	83 c4 0c             	add    esp,0xc
c001ad2e:	c3                   	ret    
c001ad2f:	90                   	nop

c001ad30 <Bus::~Bus()>:
c001ad30:	83 ec 0c             	sub    esp,0xc
c001ad33:	83 ec 0c             	sub    esp,0xc
c001ad36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad3a:	e8 cd ff ff ff       	call   c001ad0c <Bus::~Bus()>
c001ad3f:	83 c4 10             	add    esp,0x10
c001ad42:	83 ec 08             	sub    esp,0x8
c001ad45:	68 58 01 00 00       	push   0x158
c001ad4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad4e:	e8 91 e4 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001ad53:	83 c4 10             	add    esp,0x10
c001ad56:	83 c4 0c             	add    esp,0xc
c001ad59:	c3                   	ret    

c001ad5a <beepThread(void*)>:
c001ad5a:	83 ec 0c             	sub    esp,0xc
c001ad5d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ad62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad66:	48                   	dec    eax
c001ad67:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ad6c:	75 01                	jne    c001ad6f <beepThread(void*)+0x15>
c001ad6e:	fb                   	sti    
c001ad6f:	6b c2 0a             	imul   eax,edx,0xa
c001ad72:	83 ec 0c             	sub    esp,0xc
c001ad75:	50                   	push   eax
c001ad76:	e8 29 a7 00 00       	call   c00254a4 <milliTenthSleep(unsigned int)>
c001ad7b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad82:	e8 22 c5 00 00       	call   c00272a9 <HalMakeBeep(int)>
c001ad87:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001ad8f:	83 c4 1c             	add    esp,0x1c
c001ad92:	e9 f1 a5 00 00       	jmp    c0025388 <blockTask(TaskState)>

c001ad97 <Krnl::beep(int, int, bool)>:
c001ad97:	56                   	push   esi
c001ad98:	53                   	push   ebx
c001ad99:	83 ec 10             	sub    esp,0x10
c001ad9c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ada0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ada4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ada8:	e8 fc c4 00 00       	call   c00272a9 <HalMakeBeep(int)>
c001adad:	89 f0                	mov    eax,esi
c001adaf:	83 c4 10             	add    esp,0x10
c001adb2:	84 c0                	test   al,al
c001adb4:	74 1e                	je     c001add4 <Krnl::beep(int, int, bool)+0x3d>
c001adb6:	6b db 0a             	imul   ebx,ebx,0xa
c001adb9:	83 ec 0c             	sub    esp,0xc
c001adbc:	53                   	push   ebx
c001adbd:	e8 e2 a6 00 00       	call   c00254a4 <milliTenthSleep(unsigned int)>
c001adc2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001adca:	83 c4 14             	add    esp,0x14
c001adcd:	5b                   	pop    ebx
c001adce:	5e                   	pop    esi
c001adcf:	e9 d5 c4 00 00       	jmp    c00272a9 <HalMakeBeep(int)>
c001add4:	68 e6 00 00 00       	push   0xe6
c001add9:	53                   	push   ebx
c001adda:	68 5a ad 01 c0       	push   0xc001ad5a
c001addf:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ade5:	e8 96 a2 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c001adea:	83 c4 14             	add    esp,0x14
c001aded:	5b                   	pop    ebx
c001adee:	5e                   	pop    esi
c001adef:	c3                   	ret    

c001adf0 <User::loadClockSettings(int)>:
c001adf0:	53                   	push   ebx
c001adf1:	83 ec 14             	sub    esp,0x14
c001adf4:	68 14 01 00 00       	push   0x114
c001adf9:	e8 9d b6 ff ff       	call   c001649b <malloc>
c001adfe:	83 c4 0c             	add    esp,0xc
c001ae01:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ae07:	68 58 1f 03 c0       	push   0xc0031f58
c001ae0c:	50                   	push   eax
c001ae0d:	89 c3                	mov    ebx,eax
c001ae0f:	e8 e6 f6 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c001ae14:	58                   	pop    eax
c001ae15:	5a                   	pop    edx
c001ae16:	6a 01                	push   0x1
c001ae18:	53                   	push   ebx
c001ae19:	e8 fa f6 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c001ae1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae21:	e8 50 f7 ff ff       	call   c001a576 <File::close()>
c001ae26:	83 c4 10             	add    esp,0x10
c001ae29:	85 db                	test   ebx,ebx
c001ae2b:	74 0f                	je     c001ae3c <User::loadClockSettings(int)+0x4c>
c001ae2d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae2f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ae33:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ae36:	83 c4 08             	add    esp,0x8
c001ae39:	5b                   	pop    ebx
c001ae3a:	ff e0                	jmp    eax
c001ae3c:	83 c4 08             	add    esp,0x8
c001ae3f:	5b                   	pop    ebx
c001ae40:	c3                   	ret    
c001ae41:	90                   	nop

c001ae42 <Clock::Clock(char const*)>:
c001ae42:	83 ec 0c             	sub    esp,0xc
c001ae45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae49:	83 ec 08             	sub    esp,0x8
c001ae4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae50:	50                   	push   eax
c001ae51:	e8 84 06 00 00       	call   c001b4da <Device::Device(char const*)>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	ba 80 1f 03 c0       	mov    edx,0xc0031f80
c001ae5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae62:	89 10                	mov    DWORD PTR [eax],edx
c001ae64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae68:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001ae72:	90                   	nop
c001ae73:	83 c4 0c             	add    esp,0xc
c001ae76:	c3                   	ret    
c001ae77:	90                   	nop

c001ae78 <Clock::~Clock()>:
c001ae78:	83 ec 0c             	sub    esp,0xc
c001ae7b:	ba 80 1f 03 c0       	mov    edx,0xc0031f80
c001ae80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae84:	89 10                	mov    DWORD PTR [eax],edx
c001ae86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae8a:	83 ec 0c             	sub    esp,0xc
c001ae8d:	50                   	push   eax
c001ae8e:	e8 e7 03 00 00       	call   c001b27a <Device::~Device()>
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	90                   	nop
c001ae97:	83 c4 0c             	add    esp,0xc
c001ae9a:	c3                   	ret    
c001ae9b:	90                   	nop

c001ae9c <Clock::~Clock()>:
c001ae9c:	83 ec 0c             	sub    esp,0xc
c001ae9f:	83 ec 0c             	sub    esp,0xc
c001aea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aea6:	e8 cd ff ff ff       	call   c001ae78 <Clock::~Clock()>
c001aeab:	83 c4 10             	add    esp,0x10
c001aeae:	83 ec 08             	sub    esp,0x8
c001aeb1:	68 58 01 00 00       	push   0x158
c001aeb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeba:	e8 25 e3 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	83 c4 0c             	add    esp,0xc
c001aec5:	c3                   	ret    

c001aec6 <Clock::timeInSecondsLocal()>:
c001aec6:	53                   	push   ebx
c001aec7:	83 ec 14             	sub    esp,0x14
c001aeca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aece:	8b 10                	mov    edx,DWORD PTR [eax]
c001aed0:	50                   	push   eax
c001aed1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001aed4:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001aedb:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001aee1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001aee7:	89 cb                	mov    ebx,ecx
c001aee9:	c1 fb 1f             	sar    ebx,0x1f
c001aeec:	01 c8                	add    eax,ecx
c001aeee:	11 da                	adc    edx,ebx
c001aef0:	83 c4 10             	add    esp,0x10
c001aef3:	31 c9                	xor    ecx,ecx
c001aef5:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001aefc:	74 05                	je     c001af03 <Clock::timeInSecondsLocal()+0x3d>
c001aefe:	b9 08 07 00 00       	mov    ecx,0x708
c001af03:	31 db                	xor    ebx,ebx
c001af05:	01 c8                	add    eax,ecx
c001af07:	11 da                	adc    edx,ebx
c001af09:	83 c4 08             	add    esp,0x8
c001af0c:	5b                   	pop    ebx
c001af0d:	c3                   	ret    

c001af0e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001af0e:	57                   	push   edi
c001af0f:	56                   	push   esi
c001af10:	53                   	push   ebx
c001af11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001af19:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001af1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001af1f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001af22:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001af29:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001af2f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001af35:	99                   	cdq    
c001af36:	29 c6                	sub    esi,eax
c001af38:	19 d7                	sbb    edi,edx
c001af3a:	89 f0                	mov    eax,esi
c001af3c:	31 f6                	xor    esi,esi
c001af3e:	89 fa                	mov    edx,edi
c001af40:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001af47:	74 05                	je     c001af4e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001af49:	be 08 07 00 00       	mov    esi,0x708
c001af4e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001af52:	31 ff                	xor    edi,edi
c001af54:	29 f0                	sub    eax,esi
c001af56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af5a:	19 fa                	sbb    edx,edi
c001af5c:	89 d8                	mov    eax,ebx
c001af5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001af62:	5b                   	pop    ebx
c001af63:	5e                   	pop    esi
c001af64:	5f                   	pop    edi
c001af65:	ff e0                	jmp    eax

c001af67 <datetimeToSeconds(datetime_t)>:
c001af67:	55                   	push   ebp
c001af68:	57                   	push   edi
c001af69:	56                   	push   esi
c001af6a:	53                   	push   ebx
c001af6b:	83 ec 0c             	sub    esp,0xc
c001af6e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001af72:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af76:	89 f7                	mov    edi,esi
c001af78:	89 f0                	mov    eax,esi
c001af7a:	0f b6 cf             	movzx  ecx,bh
c001af7d:	0f b6 c4             	movzx  eax,ah
c001af80:	c1 ef 10             	shr    edi,0x10
c001af83:	89 da                	mov    edx,ebx
c001af85:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001af88:	89 f9                	mov    ecx,edi
c001af8a:	0f b6 f9             	movzx  edi,cl
c001af8d:	89 f1                	mov    ecx,esi
c001af8f:	6b c0 3c             	imul   eax,eax,0x3c
c001af92:	0f b6 f1             	movzx  esi,cl
c001af95:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001af9b:	0f b6 db             	movzx  ebx,bl
c001af9e:	c1 ea 10             	shr    edx,0x10
c001afa1:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001afa7:	01 f8                	add    eax,edi
c001afa9:	01 f0                	add    eax,esi
c001afab:	89 04 24             	mov    DWORD PTR [esp],eax
c001afae:	c1 f8 1f             	sar    eax,0x1f
c001afb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afb5:	89 e8                	mov    eax,ebp
c001afb7:	0f b6 c0             	movzx  eax,al
c001afba:	8b 0c 85 c0 1f 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce040]
c001afc1:	83 f8 01             	cmp    eax,0x1
c001afc4:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001afc8:	0f b7 da             	movzx  ebx,dx
c001afcb:	76 27                	jbe    c001aff4 <datetimeToSeconds(datetime_t)+0x8d>
c001afcd:	80 e2 03             	and    dl,0x3
c001afd0:	75 22                	jne    c001aff4 <datetimeToSeconds(datetime_t)+0x8d>
c001afd2:	31 d2                	xor    edx,edx
c001afd4:	be 64 00 00 00       	mov    esi,0x64
c001afd9:	89 d8                	mov    eax,ebx
c001afdb:	f7 f6                	div    esi
c001afdd:	85 d2                	test   edx,edx
c001afdf:	75 12                	jne    c001aff3 <datetimeToSeconds(datetime_t)+0x8c>
c001afe1:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001afe7:	be 90 01 00 00       	mov    esi,0x190
c001afec:	99                   	cdq    
c001afed:	f7 fe                	idiv   esi
c001afef:	85 d2                	test   edx,edx
c001aff1:	75 01                	jne    c001aff4 <datetimeToSeconds(datetime_t)+0x8d>
c001aff3:	41                   	inc    ecx
c001aff4:	83 fb 46             	cmp    ebx,0x46
c001aff7:	76 48                	jbe    c001b041 <datetimeToSeconds(datetime_t)+0xda>
c001aff9:	be 46 00 00 00       	mov    esi,0x46
c001affe:	bf 64 00 00 00       	mov    edi,0x64
c001b003:	bd 90 01 00 00       	mov    ebp,0x190
c001b008:	f7 c6 03 00 00 00    	test   esi,0x3
c001b00e:	b8 6d 01 00 00       	mov    eax,0x16d
c001b013:	75 23                	jne    c001b038 <datetimeToSeconds(datetime_t)+0xd1>
c001b015:	89 f0                	mov    eax,esi
c001b017:	99                   	cdq    
c001b018:	f7 ff                	idiv   edi
c001b01a:	b8 6e 01 00 00       	mov    eax,0x16e
c001b01f:	85 d2                	test   edx,edx
c001b021:	75 15                	jne    c001b038 <datetimeToSeconds(datetime_t)+0xd1>
c001b023:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001b029:	99                   	cdq    
c001b02a:	f7 fd                	idiv   ebp
c001b02c:	83 fa 01             	cmp    edx,0x1
c001b02f:	19 c0                	sbb    eax,eax
c001b031:	f7 d0                	not    eax
c001b033:	05 6e 01 00 00       	add    eax,0x16e
c001b038:	46                   	inc    esi
c001b039:	01 c1                	add    ecx,eax
c001b03b:	39 de                	cmp    esi,ebx
c001b03d:	7c c9                	jl     c001b008 <datetimeToSeconds(datetime_t)+0xa1>
c001b03f:	eb 34                	jmp    c001b075 <datetimeToSeconds(datetime_t)+0x10e>
c001b041:	74 32                	je     c001b075 <datetimeToSeconds(datetime_t)+0x10e>
c001b043:	b8 45 00 00 00       	mov    eax,0x45
c001b048:	89 c2                	mov    edx,eax
c001b04a:	83 e2 03             	and    edx,0x3
c001b04d:	39 d8                	cmp    eax,ebx
c001b04f:	7e 0f                	jle    c001b060 <datetimeToSeconds(datetime_t)+0xf9>
c001b051:	83 fa 01             	cmp    edx,0x1
c001b054:	19 d2                	sbb    edx,edx
c001b056:	48                   	dec    eax
c001b057:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001b05e:	eb e8                	jmp    c001b048 <datetimeToSeconds(datetime_t)+0xe1>
c001b060:	85 d2                	test   edx,edx
c001b062:	b8 6d 01 00 00       	mov    eax,0x16d
c001b067:	75 0a                	jne    c001b073 <datetimeToSeconds(datetime_t)+0x10c>
c001b069:	83 fb 01             	cmp    ebx,0x1
c001b06c:	19 c0                	sbb    eax,eax
c001b06e:	05 6e 01 00 00       	add    eax,0x16e
c001b073:	29 c1                	sub    ecx,eax
c001b075:	b8 80 51 01 00       	mov    eax,0x15180
c001b07a:	f7 e9                	imul   ecx
c001b07c:	03 04 24             	add    eax,DWORD PTR [esp]
c001b07f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001b083:	83 c4 0c             	add    esp,0xc
c001b086:	5b                   	pop    ebx
c001b087:	5e                   	pop    esi
c001b088:	5f                   	pop    edi
c001b089:	5d                   	pop    ebp
c001b08a:	c3                   	ret    
c001b08b:	90                   	nop

c001b08c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001b08c:	57                   	push   edi
c001b08d:	56                   	push   esi
c001b08e:	53                   	push   ebx
c001b08f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b093:	8b 06                	mov    eax,DWORD PTR [esi]
c001b095:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001b098:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b09c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0a0:	e8 c2 fe ff ff       	call   c001af67 <datetimeToSeconds(datetime_t)>
c001b0a5:	59                   	pop    ecx
c001b0a6:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001b0ad:	5b                   	pop    ebx
c001b0ae:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001b0b4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001b0ba:	89 cb                	mov    ebx,ecx
c001b0bc:	c1 fb 1f             	sar    ebx,0x1f
c001b0bf:	29 c8                	sub    eax,ecx
c001b0c1:	19 da                	sbb    edx,ebx
c001b0c3:	31 c9                	xor    ecx,ecx
c001b0c5:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b0cc:	74 05                	je     c001b0d3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b0ce:	b9 08 07 00 00       	mov    ecx,0x708
c001b0d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b0d7:	31 db                	xor    ebx,ebx
c001b0d9:	29 c8                	sub    eax,ecx
c001b0db:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b0df:	19 da                	sbb    edx,ebx
c001b0e1:	89 f8                	mov    eax,edi
c001b0e3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0e7:	5b                   	pop    ebx
c001b0e8:	5e                   	pop    esi
c001b0e9:	5f                   	pop    edi
c001b0ea:	ff e0                	jmp    eax

c001b0ec <secondsToDatetime(unsigned long long)>:
c001b0ec:	55                   	push   ebp
c001b0ed:	57                   	push   edi
c001b0ee:	56                   	push   esi
c001b0ef:	53                   	push   ebx
c001b0f0:	83 ec 1c             	sub    esp,0x1c
c001b0f3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b0f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b0fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0ff:	6a 00                	push   0x0
c001b101:	68 80 51 01 00       	push   0x15180
c001b106:	55                   	push   ebp
c001b107:	57                   	push   edi
c001b108:	e8 23 36 01 00       	call   c002e730 <__udivdi3>
c001b10d:	83 c4 10             	add    esp,0x10
c001b110:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b114:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b11a:	6a 00                	push   0x0
c001b11c:	68 80 51 01 00       	push   0x15180
c001b121:	55                   	push   ebp
c001b122:	57                   	push   edi
c001b123:	bf 10 0e 00 00       	mov    edi,0xe10
c001b128:	e8 03 37 01 00       	call   c002e830 <__umoddi3>
c001b12d:	83 c4 10             	add    esp,0x10
c001b130:	99                   	cdq    
c001b131:	f7 ff                	idiv   edi
c001b133:	bf 3c 00 00 00       	mov    edi,0x3c
c001b138:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b13b:	89 d0                	mov    eax,edx
c001b13d:	99                   	cdq    
c001b13e:	f7 ff                	idiv   edi
c001b140:	85 db                	test   ebx,ebx
c001b142:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b145:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b148:	79 11                	jns    c001b15b <secondsToDatetime(unsigned long long)+0x6f>
c001b14a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b14e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b154:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b159:	eb 07                	jmp    c001b162 <secondsToDatetime(unsigned long long)+0x76>
c001b15b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b160:	89 d8                	mov    eax,ebx
c001b162:	99                   	cdq    
c001b163:	bf b4 05 00 00       	mov    edi,0x5b4
c001b168:	f7 f9                	idiv   ecx
c001b16a:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b16f:	31 d2                	xor    edx,edx
c001b171:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b176:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b17a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b182:	01 c3                	add    ebx,eax
c001b184:	89 d8                	mov    eax,ebx
c001b186:	f7 f1                	div    ecx
c001b188:	31 d2                	xor    edx,edx
c001b18a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b18d:	89 d8                	mov    eax,ebx
c001b18f:	f7 f7                	div    edi
c001b191:	31 d2                	xor    edx,edx
c001b193:	29 c1                	sub    ecx,eax
c001b195:	89 d8                	mov    eax,ebx
c001b197:	f7 f5                	div    ebp
c001b199:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b19e:	31 d2                	xor    edx,edx
c001b1a0:	29 c1                	sub    ecx,eax
c001b1a2:	89 c8                	mov    eax,ecx
c001b1a4:	f7 f5                	div    ebp
c001b1a6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b1ab:	31 d2                	xor    edx,edx
c001b1ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b1b1:	89 c8                	mov    eax,ecx
c001b1b3:	f7 f5                	div    ebp
c001b1b5:	31 d2                	xor    edx,edx
c001b1b7:	01 c3                	add    ebx,eax
c001b1b9:	89 c8                	mov    eax,ecx
c001b1bb:	f7 f7                	div    edi
c001b1bd:	bf 99 00 00 00       	mov    edi,0x99
c001b1c2:	31 d2                	xor    edx,edx
c001b1c4:	29 c3                	sub    ebx,eax
c001b1c6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b1ce:	29 c3                	sub    ebx,eax
c001b1d0:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b1d3:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b1d6:	83 c1 02             	add    ecx,0x2
c001b1d9:	89 c8                	mov    eax,ecx
c001b1db:	bb 05 00 00 00       	mov    ebx,0x5
c001b1e0:	f7 f7                	div    edi
c001b1e2:	31 d2                	xor    edx,edx
c001b1e4:	89 c7                	mov    edi,eax
c001b1e6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b1ec:	83 c0 02             	add    eax,0x2
c001b1ef:	f7 f3                	div    ebx
c001b1f1:	89 eb                	mov    ebx,ebp
c001b1f3:	29 c3                	sub    ebx,eax
c001b1f5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b1fb:	88 1e                	mov    BYTE PTR [esi],bl
c001b1fd:	19 c0                	sbb    eax,eax
c001b1ff:	31 d2                	xor    edx,edx
c001b201:	83 e0 0c             	and    eax,0xc
c001b204:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b208:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b210:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b214:	83 f9 01             	cmp    ecx,0x1
c001b217:	0f 96 c2             	setbe  dl
c001b21a:	41                   	inc    ecx
c001b21b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b21e:	01 d0                	add    eax,edx
c001b220:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b224:	83 c4 1c             	add    esp,0x1c
c001b227:	89 f0                	mov    eax,esi
c001b229:	5b                   	pop    ebx
c001b22a:	5e                   	pop    esi
c001b22b:	5f                   	pop    edi
c001b22c:	5d                   	pop    ebp
c001b22d:	c2 04 00             	ret    0x4

c001b230 <Clock::timeInDatetimeLocal()>:
c001b230:	53                   	push   ebx
c001b231:	83 ec 14             	sub    esp,0x14
c001b234:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b238:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b23c:	e8 85 fc ff ff       	call   c001aec6 <Clock::timeInSecondsLocal()>
c001b241:	83 c4 0c             	add    esp,0xc
c001b244:	52                   	push   edx
c001b245:	50                   	push   eax
c001b246:	53                   	push   ebx
c001b247:	e8 a0 fe ff ff       	call   c001b0ec <secondsToDatetime(unsigned long long)>
c001b24c:	89 d8                	mov    eax,ebx
c001b24e:	83 c4 14             	add    esp,0x14
c001b251:	5b                   	pop    ebx
c001b252:	c2 04 00             	ret    0x4
c001b255:	90                   	nop

c001b256 <Device::hibernate()>:
c001b256:	c3                   	ret    
c001b257:	90                   	nop

c001b258 <Device::wake()>:
c001b258:	c3                   	ret    
c001b259:	90                   	nop

c001b25a <Device::detect()>:
c001b25a:	c3                   	ret    
c001b25b:	90                   	nop

c001b25c <Device::disableLegacy()>:
c001b25c:	c3                   	ret    
c001b25d:	90                   	nop

c001b25e <Device::powerSaving(PowerSavingLevel)>:
c001b25e:	c3                   	ret    
c001b25f:	90                   	nop

c001b260 <DriverlessDevice::close(int, int, void*)>:
c001b260:	31 c0                	xor    eax,eax
c001b262:	c3                   	ret    
c001b263:	90                   	nop

c001b264 <DriverlessDevice::detect()>:
c001b264:	c3                   	ret    
c001b265:	90                   	nop

c001b266 <DriverlessDevice::open(int, int, void*)>:
c001b266:	83 ec 18             	sub    esp,0x18
c001b269:	68 f0 1f 03 c0       	push   0xc0031ff0
c001b26e:	e8 f7 4f 00 00       	call   c002026a <KePanic(char const*)>
c001b273:	83 c8 ff             	or     eax,0xffffffff
c001b276:	83 c4 1c             	add    esp,0x1c
c001b279:	c3                   	ret    

c001b27a <Device::~Device()>:
c001b27a:	ba 5c 20 03 c0       	mov    edx,0xc003205c
c001b27f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b283:	89 10                	mov    DWORD PTR [eax],edx
c001b285:	90                   	nop
c001b286:	c3                   	ret    
c001b287:	90                   	nop

c001b288 <Device::~Device()>:
c001b288:	83 ec 0c             	sub    esp,0xc
c001b28b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b28f:	e8 e6 ff ff ff       	call   c001b27a <Device::~Device()>
c001b294:	83 c4 04             	add    esp,0x4
c001b297:	83 ec 08             	sub    esp,0x8
c001b29a:	68 58 01 00 00       	push   0x158
c001b29f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2a3:	e8 3c df ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001b2a8:	83 c4 10             	add    esp,0x10
c001b2ab:	83 c4 0c             	add    esp,0xc
c001b2ae:	c3                   	ret    
c001b2af:	90                   	nop

c001b2b0 <Device::findAndLoadDriver()>:
c001b2b0:	c7 44 24 04 0e 20 03 c0 	mov    DWORD PTR [esp+0x4],0xc003200e
c001b2b8:	e9 25 e0 ff ff       	jmp    c00192e2 <Dbg::kprintf(char const*, ...)>
c001b2bd:	90                   	nop

c001b2be <Device::preOpenPCI(PCIDeviceInfo)>:
c001b2be:	57                   	push   edi
c001b2bf:	b9 09 00 00 00       	mov    ecx,0x9
c001b2c4:	56                   	push   esi
c001b2c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b2c9:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b2cd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b2d7:	81 c7 18 01 00 00    	add    edi,0x118
c001b2dd:	fc                   	cld    
c001b2de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b2e0:	5e                   	pop    esi
c001b2e1:	5f                   	pop    edi
c001b2e2:	c3                   	ret    
c001b2e3:	90                   	nop

c001b2e4 <Device::preOpenACPI(void*, char*, char*)>:
c001b2e4:	57                   	push   edi
c001b2e5:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b2ea:	56                   	push   esi
c001b2eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2f7:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b301:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b307:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b30d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b30f:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b315:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b319:	b9 0e 00 00 00       	mov    ecx,0xe
c001b31e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b320:	5e                   	pop    esi
c001b321:	5f                   	pop    edi
c001b322:	c3                   	ret    
c001b323:	90                   	nop

c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b324:	53                   	push   ebx
c001b325:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b32d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b335:	0f b6 c0             	movzx  eax,al
c001b338:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b33c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b340:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b348:	5b                   	pop    ebx
c001b349:	e9 be 05 00 00       	jmp    c001b90c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b34e <Device::getParent()>:
c001b34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b352:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b358:	c3                   	ret    
c001b359:	90                   	nop

c001b35a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b35a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b35e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b362:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b367:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b36b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b36f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b373:	e9 0b 07 00 00       	jmp    c001ba83 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b378 <Device::addChild(Device*)>:
c001b378:	53                   	push   ebx
c001b379:	83 ec 08             	sub    esp,0x8
c001b37c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b380:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b384:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b38a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b390:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b392:	85 d2                	test   edx,edx
c001b394:	74 04                	je     c001b39a <Device::addChild(Device*)+0x22>
c001b396:	89 d3                	mov    ebx,edx
c001b398:	eb f6                	jmp    c001b390 <Device::addChild(Device*)+0x18>
c001b39a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b39d:	83 ec 0c             	sub    esp,0xc
c001b3a0:	6a 08                	push   0x8
c001b3a2:	e8 f4 b0 ff ff       	call   c001649b <malloc>
c001b3a7:	89 03                	mov    DWORD PTR [ebx],eax
c001b3a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3b6:	83 c4 18             	add    esp,0x18
c001b3b9:	5b                   	pop    ebx
c001b3ba:	c3                   	ret    
c001b3bb:	90                   	nop

c001b3bc <Device::removeAllChildren()>:
c001b3bc:	56                   	push   esi
c001b3bd:	53                   	push   ebx
c001b3be:	52                   	push   edx
c001b3bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3c3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b3c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3cc:	74 17                	je     c001b3e5 <Device::removeAllChildren()+0x29>
c001b3ce:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b3d1:	85 c0                	test   eax,eax
c001b3d3:	74 0c                	je     c001b3e1 <Device::removeAllChildren()+0x25>
c001b3d5:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3d7:	83 ec 0c             	sub    esp,0xc
c001b3da:	50                   	push   eax
c001b3db:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b3de:	83 c4 10             	add    esp,0x10
c001b3e1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3e3:	eb e4                	jmp    c001b3c9 <Device::removeAllChildren()+0xd>
c001b3e5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b3eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3f1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b3f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3fe:	58                   	pop    eax
c001b3ff:	5b                   	pop    ebx
c001b400:	5e                   	pop    esi
c001b401:	c3                   	ret    

c001b402 <Device::hibernateAll()>:
c001b402:	53                   	push   ebx
c001b403:	83 ec 14             	sub    esp,0x14
c001b406:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b40a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b40c:	53                   	push   ebx
c001b40d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b410:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b416:	83 c4 10             	add    esp,0x10
c001b419:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b41c:	74 0f                	je     c001b42d <Device::hibernateAll()+0x2b>
c001b41e:	83 ec 0c             	sub    esp,0xc
c001b421:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b424:	e8 d9 ff ff ff       	call   c001b402 <Device::hibernateAll()>
c001b429:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b42b:	eb e9                	jmp    c001b416 <Device::hibernateAll()+0x14>
c001b42d:	83 c4 08             	add    esp,0x8
c001b430:	5b                   	pop    ebx
c001b431:	c3                   	ret    

c001b432 <Device::wakeAll()>:
c001b432:	53                   	push   ebx
c001b433:	83 ec 14             	sub    esp,0x14
c001b436:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b43a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b43c:	53                   	push   ebx
c001b43d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b440:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b446:	83 c4 10             	add    esp,0x10
c001b449:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b44c:	74 0f                	je     c001b45d <Device::wakeAll()+0x2b>
c001b44e:	83 ec 0c             	sub    esp,0xc
c001b451:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b454:	e8 d9 ff ff ff       	call   c001b432 <Device::wakeAll()>
c001b459:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b45b:	eb e9                	jmp    c001b446 <Device::wakeAll()+0x14>
c001b45d:	83 c4 08             	add    esp,0x8
c001b460:	5b                   	pop    ebx
c001b461:	c3                   	ret    

c001b462 <Device::detectAll()>:
c001b462:	53                   	push   ebx
c001b463:	83 ec 14             	sub    esp,0x14
c001b466:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b46a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b46c:	53                   	push   ebx
c001b46d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b470:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b476:	83 c4 10             	add    esp,0x10
c001b479:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b47c:	74 0f                	je     c001b48d <Device::detectAll()+0x2b>
c001b47e:	83 ec 0c             	sub    esp,0xc
c001b481:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b484:	e8 d9 ff ff ff       	call   c001b462 <Device::detectAll()>
c001b489:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b48b:	eb e9                	jmp    c001b476 <Device::detectAll()+0x14>
c001b48d:	83 c4 08             	add    esp,0x8
c001b490:	5b                   	pop    ebx
c001b491:	c3                   	ret    

c001b492 <Device::disableLegacyAll()>:
c001b492:	c3                   	ret    
c001b493:	90                   	nop

c001b494 <Device::loadDriversForAll()>:
c001b494:	c3                   	ret    
c001b495:	90                   	nop

c001b496 <Device::powerSavingAll(PowerSavingLevel)>:
c001b496:	56                   	push   esi
c001b497:	53                   	push   ebx
c001b498:	83 ec 0c             	sub    esp,0xc
c001b49b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b49f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4a5:	56                   	push   esi
c001b4a6:	53                   	push   ebx
c001b4a7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b4aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b4b0:	83 c4 10             	add    esp,0x10
c001b4b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b4b6:	74 0f                	je     c001b4c7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b4b8:	52                   	push   edx
c001b4b9:	52                   	push   edx
c001b4ba:	56                   	push   esi
c001b4bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b4be:	e8 d3 ff ff ff       	call   c001b496 <Device::powerSavingAll(PowerSavingLevel)>
c001b4c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b4c5:	eb e9                	jmp    c001b4b0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b4c7:	58                   	pop    eax
c001b4c8:	5b                   	pop    ebx
c001b4c9:	5e                   	pop    esi
c001b4ca:	c3                   	ret    
c001b4cb:	90                   	nop

c001b4cc <Device::setName(char const*)>:
c001b4cc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b4d4:	e9 77 51 fe ff       	jmp    c0000650 <strcpy>
c001b4d9:	90                   	nop

c001b4da <Device::Device(char const*)>:
c001b4da:	83 ec 1c             	sub    esp,0x1c
c001b4dd:	ba 5c 20 03 c0       	mov    edx,0xc003205c
c001b4e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4e6:	89 10                	mov    DWORD PTR [eax],edx
c001b4e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4ec:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4fa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b508:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b512:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b516:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b520:	83 ec 08             	sub    esp,0x8
c001b523:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b527:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b52b:	e8 9c ff ff ff       	call   c001b4cc <Device::setName(char const*)>
c001b530:	83 c4 10             	add    esp,0x10
c001b533:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b53b:	83 ec 0c             	sub    esp,0xc
c001b53e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b542:	e8 54 af ff ff       	call   c001649b <malloc>
c001b547:	83 c4 10             	add    esp,0x10
c001b54a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b550:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b557:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b55b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b565:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b56b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b575:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b57b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b586:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b58d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b591:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b59c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b5a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5aa:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b5b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5b8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b5c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5c6:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b5d0:	90                   	nop
c001b5d1:	83 c4 1c             	add    esp,0x1c
c001b5d4:	c3                   	ret    
c001b5d5:	90                   	nop

c001b5d6 <Device::getName()>:
c001b5d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5da:	05 d0 00 00 00       	add    eax,0xd0
c001b5df:	c3                   	ret    

c001b5e0 <Device::closeAll()>:
c001b5e0:	53                   	push   ebx
c001b5e1:	83 ec 08             	sub    esp,0x8
c001b5e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5e8:	53                   	push   ebx
c001b5e9:	e8 e8 ff ff ff       	call   c001b5d6 <Device::getName()>
c001b5ee:	52                   	push   edx
c001b5ef:	50                   	push   eax
c001b5f0:	68 48 20 03 c0       	push   0xc0032048
c001b5f5:	e8 e8 dc ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001b5fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b5fc:	6a 00                	push   0x0
c001b5fe:	6a 00                	push   0x0
c001b600:	6a 00                	push   0x0
c001b602:	53                   	push   ebx
c001b603:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b606:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b60c:	83 c4 20             	add    esp,0x20
c001b60f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b612:	74 12                	je     c001b626 <Device::closeAll()+0x46>
c001b614:	83 ec 0c             	sub    esp,0xc
c001b617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b61a:	e8 c1 ff ff ff       	call   c001b5e0 <Device::closeAll()>
c001b61f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b621:	83 c4 10             	add    esp,0x10
c001b624:	eb e9                	jmp    c001b60f <Device::closeAll()+0x2f>
c001b626:	83 c4 08             	add    esp,0x8
c001b629:	5b                   	pop    ebx
c001b62a:	c3                   	ret    
c001b62b:	90                   	nop

c001b62c <DriverlessDevice::DriverlessDevice(char const*)>:
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b633:	83 ec 08             	sub    esp,0x8
c001b636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b63a:	50                   	push   eax
c001b63b:	e8 9a fe ff ff       	call   c001b4da <Device::Device(char const*)>
c001b640:	83 c4 10             	add    esp,0x10
c001b643:	ba 88 20 03 c0       	mov    edx,0xc0032088
c001b648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64c:	89 10                	mov    DWORD PTR [eax],edx
c001b64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b652:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b65c:	90                   	nop
c001b65d:	83 c4 0c             	add    esp,0xc
c001b660:	c3                   	ret    
c001b661:	90                   	nop

c001b662 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b662:	57                   	push   edi
c001b663:	56                   	push   esi
c001b664:	53                   	push   ebx
c001b665:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b669:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b66d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b671:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b677:	75 0c                	jne    c001b685 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b679:	52                   	push   edx
c001b67a:	52                   	push   edx
c001b67b:	53                   	push   ebx
c001b67c:	56                   	push   esi
c001b67d:	e8 60 35 01 00       	call   c002ebe2 <LinkedList<Device>::addElement(Device*)>
c001b682:	83 c4 10             	add    esp,0x10
c001b685:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b68b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b68e:	74 12                	je     c001b6a2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b690:	50                   	push   eax
c001b691:	57                   	push   edi
c001b692:	56                   	push   esi
c001b693:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b696:	e8 c7 ff ff ff       	call   c001b662 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b69b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	eb e9                	jmp    c001b68b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b6a2:	5b                   	pop    ebx
c001b6a3:	5e                   	pop    esi
c001b6a4:	5f                   	pop    edi
c001b6a5:	c3                   	ret    

c001b6a6 <getDevicesOfType(DeviceType)>:
c001b6a6:	53                   	push   ebx
c001b6a7:	83 ec 14             	sub    esp,0x14
c001b6aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6ae:	53                   	push   ebx
c001b6af:	e8 0a 36 01 00       	call   c002ecbe <LinkedList<Device>::LinkedList()>
c001b6b4:	83 c4 0c             	add    esp,0xc
c001b6b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b6bb:	53                   	push   ebx
c001b6bc:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b6c2:	e8 9b ff ff ff       	call   c001b662 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b6c7:	83 c4 18             	add    esp,0x18
c001b6ca:	89 d8                	mov    eax,ebx
c001b6cc:	5b                   	pop    ebx
c001b6cd:	c2 04 00             	ret    0x4

c001b6d0 <HardDiskController::HardDiskController(char const*)>:
c001b6d0:	83 ec 0c             	sub    esp,0xc
c001b6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6d7:	83 ec 08             	sub    esp,0x8
c001b6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6de:	50                   	push   eax
c001b6df:	e8 f6 fd ff ff       	call   c001b4da <Device::Device(char const*)>
c001b6e4:	83 c4 10             	add    esp,0x10
c001b6e7:	ba b4 20 03 c0       	mov    edx,0xc00320b4
c001b6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f0:	89 10                	mov    DWORD PTR [eax],edx
c001b6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6f6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b700:	90                   	nop
c001b701:	83 c4 0c             	add    esp,0xc
c001b704:	c3                   	ret    
c001b705:	90                   	nop
c001b706:	66 90                	xchg   ax,ax

c001b708 <HardDiskController::~HardDiskController()>:
c001b708:	83 ec 0c             	sub    esp,0xc
c001b70b:	ba b4 20 03 c0       	mov    edx,0xc00320b4
c001b710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b714:	89 10                	mov    DWORD PTR [eax],edx
c001b716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	50                   	push   eax
c001b71e:	e8 57 fb ff ff       	call   c001b27a <Device::~Device()>
c001b723:	83 c4 10             	add    esp,0x10
c001b726:	90                   	nop
c001b727:	83 c4 0c             	add    esp,0xc
c001b72a:	c3                   	ret    
c001b72b:	90                   	nop

c001b72c <HardDiskController::~HardDiskController()>:
c001b72c:	83 ec 0c             	sub    esp,0xc
c001b72f:	83 ec 0c             	sub    esp,0xc
c001b732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b736:	e8 cd ff ff ff       	call   c001b708 <HardDiskController::~HardDiskController()>
c001b73b:	83 c4 10             	add    esp,0x10
c001b73e:	83 ec 08             	sub    esp,0x8
c001b741:	68 58 01 00 00       	push   0x158
c001b746:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b74a:	e8 95 da ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	83 c4 0c             	add    esp,0xc
c001b755:	c3                   	ret    

c001b756 <PhysicalDisk::eject()>:
c001b756:	83 c8 ff             	or     eax,0xffffffff
c001b759:	c3                   	ret    

c001b75a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b75a:	83 ec 0c             	sub    esp,0xc
c001b75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b761:	83 ec 08             	sub    esp,0x8
c001b764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b768:	50                   	push   eax
c001b769:	e8 6c fd ff ff       	call   c001b4da <Device::Device(char const*)>
c001b76e:	83 c4 10             	add    esp,0x10
c001b771:	ba e0 20 03 c0       	mov    edx,0xc00320e0
c001b776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77a:	89 10                	mov    DWORD PTR [eax],edx
c001b77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b780:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b78b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b796:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7a8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b7bc:	90                   	nop
c001b7bd:	83 c4 0c             	add    esp,0xc
c001b7c0:	c3                   	ret    
c001b7c1:	90                   	nop

c001b7c2 <PhysicalDisk::startCache()>:
c001b7c2:	56                   	push   esi
c001b7c3:	53                   	push   ebx
c001b7c4:	83 ec 10             	sub    esp,0x10
c001b7c7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b7cb:	6a 44                	push   0x44
c001b7cd:	e8 c9 ac ff ff       	call   c001649b <malloc>
c001b7d2:	89 c6                	mov    esi,eax
c001b7d4:	58                   	pop    eax
c001b7d5:	5a                   	pop    edx
c001b7d6:	53                   	push   ebx
c001b7d7:	56                   	push   esi
c001b7d8:	e8 77 17 00 00       	call   c001cf54 <VCache::VCache(PhysicalDisk*)>
c001b7dd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b7e3:	83 c4 14             	add    esp,0x14
c001b7e6:	5b                   	pop    ebx
c001b7e7:	5e                   	pop    esi
c001b7e8:	c3                   	ret    
c001b7e9:	90                   	nop

c001b7ea <PhysicalDisk::~PhysicalDisk()>:
c001b7ea:	83 ec 0c             	sub    esp,0xc
c001b7ed:	ba e0 20 03 c0       	mov    edx,0xc00320e0
c001b7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7f6:	89 10                	mov    DWORD PTR [eax],edx
c001b7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7fc:	83 ec 0c             	sub    esp,0xc
c001b7ff:	50                   	push   eax
c001b800:	e8 75 fa ff ff       	call   c001b27a <Device::~Device()>
c001b805:	83 c4 10             	add    esp,0x10
c001b808:	90                   	nop
c001b809:	83 c4 0c             	add    esp,0xc
c001b80c:	c3                   	ret    
c001b80d:	90                   	nop

c001b80e <PhysicalDisk::~PhysicalDisk()>:
c001b80e:	83 ec 0c             	sub    esp,0xc
c001b811:	83 ec 0c             	sub    esp,0xc
c001b814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b818:	e8 cd ff ff ff       	call   c001b7ea <PhysicalDisk::~PhysicalDisk()>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	83 ec 08             	sub    esp,0x8
c001b823:	68 6c 01 00 00       	push   0x16c
c001b828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b82c:	e8 b3 d9 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001b831:	83 c4 10             	add    esp,0x10
c001b834:	83 c4 0c             	add    esp,0xc
c001b837:	c3                   	ret    

c001b838 <int_handler>:
c001b838:	55                   	push   ebp
c001b839:	57                   	push   edi
c001b83a:	56                   	push   esi
c001b83b:	53                   	push   ebx
c001b83c:	83 ec 0c             	sub    esp,0xc
c001b83f:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b846:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b84a:	74 0b                	je     c001b857 <int_handler+0x1f>
c001b84c:	fa                   	cli    
c001b84d:	f4                   	hlt    
c001b84e:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b855:	75 f5                	jne    c001b84c <int_handler+0x14>
c001b857:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b85a:	8d 46 e0             	lea    eax,[esi-0x20]
c001b85d:	83 f8 17             	cmp    eax,0x17
c001b860:	76 40                	jbe    c001b8a2 <int_handler+0x6a>
c001b862:	c1 e6 04             	shl    esi,0x4
c001b865:	31 db                	xor    ebx,ebx
c001b867:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b86d:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b873:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b877:	85 c0                	test   eax,eax
c001b879:	74 13                	je     c001b88e <int_handler+0x56>
c001b87b:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b87f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b882:	74 2c                	je     c001b8b0 <int_handler+0x78>
c001b884:	83 ec 08             	sub    esp,0x8
c001b887:	52                   	push   edx
c001b888:	57                   	push   edi
c001b889:	ff d0                	call   eax
c001b88b:	83 c4 10             	add    esp,0x10
c001b88e:	83 c3 01             	add    ebx,0x1
c001b891:	83 fb 04             	cmp    ebx,0x4
c001b894:	75 dd                	jne    c001b873 <int_handler+0x3b>
c001b896:	83 c4 0c             	add    esp,0xc
c001b899:	31 c0                	xor    eax,eax
c001b89b:	5b                   	pop    ebx
c001b89c:	31 d2                	xor    edx,edx
c001b89e:	5e                   	pop    esi
c001b89f:	5f                   	pop    edi
c001b8a0:	5d                   	pop    ebp
c001b8a1:	c3                   	ret    
c001b8a2:	83 ec 0c             	sub    esp,0xc
c001b8a5:	50                   	push   eax
c001b8a6:	e8 3b ba 00 00       	call   c00272e6 <HalEndOfInterrupt(int)>
c001b8ab:	83 c4 10             	add    esp,0x10
c001b8ae:	eb b2                	jmp    c001b862 <int_handler+0x2a>
c001b8b0:	83 ec 08             	sub    esp,0x8
c001b8b3:	52                   	push   edx
c001b8b4:	57                   	push   edi
c001b8b5:	ff d0                	call   eax
c001b8b7:	83 c4 10             	add    esp,0x10
c001b8ba:	83 c4 0c             	add    esp,0xc
c001b8bd:	5b                   	pop    ebx
c001b8be:	5e                   	pop    esi
c001b8bf:	5f                   	pop    edi
c001b8c0:	5d                   	pop    ebp
c001b8c1:	c3                   	ret    

c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b8c2:	56                   	push   esi
c001b8c3:	31 c0                	xor    eax,eax
c001b8c5:	53                   	push   ebx
c001b8c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b8ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8ce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b8d2:	89 ca                	mov    edx,ecx
c001b8d4:	c1 e2 04             	shl    edx,0x4
c001b8d7:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b8df:	74 17                	je     c001b8f8 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b8e1:	83 c0 01             	add    eax,0x1
c001b8e4:	83 f8 04             	cmp    eax,0x4
c001b8e7:	75 ee                	jne    c001b8d7 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b8e9:	c7 44 24 0c 10 21 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032110
c001b8f1:	5b                   	pop    ebx
c001b8f2:	5e                   	pop    esi
c001b8f3:	e9 72 49 00 00       	jmp    c002026a <KePanic(char const*)>
c001b8f8:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b8fb:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b902:	5b                   	pop    ebx
c001b903:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b90a:	5e                   	pop    esi
c001b90b:	c3                   	ret    

c001b90c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b90c:	55                   	push   ebp
c001b90d:	57                   	push   edi
c001b90e:	56                   	push   esi
c001b90f:	53                   	push   ebx
c001b910:	83 ec 0c             	sub    esp,0xc
c001b913:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b919:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b91d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b921:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b928:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b92b:	74 57                	je     c001b984 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b92d:	84 c0                	test   al,al
c001b92f:	89 c7                	mov    edi,eax
c001b931:	74 1d                	je     c001b950 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b933:	83 fe 0f             	cmp    esi,0xf
c001b936:	0f 8f d9 00 00 00    	jg     c001ba15 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001b93c:	0f b6 b6 48 3d 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc2b8]
c001b943:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b94b:	d1 ef                	shr    edi,1
c001b94d:	83 e7 01             	and    edi,0x1
c001b950:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b955:	83 ec 08             	sub    esp,0x8
c001b958:	31 db                	xor    ebx,ebx
c001b95a:	50                   	push   eax
c001b95b:	68 1d 21 03 c0       	push   0xc003211d
c001b960:	e8 7d d9 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001b965:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b96a:	83 c4 10             	add    esp,0x10
c001b96d:	85 c0                	test   eax,eax
c001b96f:	7f 59                	jg     c001b9ca <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001b971:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b974:	83 ec 0c             	sub    esp,0xc
c001b977:	68 34 21 03 c0       	push   0xc0032134
c001b97c:	e8 e9 48 00 00       	call   c002026a <KePanic(char const*)>
c001b981:	83 c4 10             	add    esp,0x10
c001b984:	89 e8                	mov    eax,ebp
c001b986:	31 d2                	xor    edx,edx
c001b988:	c1 e0 04             	shl    eax,0x4
c001b98b:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b992:	85 c9                	test   ecx,ecx
c001b994:	0f 84 92 00 00 00    	je     c001ba2c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001b99a:	83 c2 01             	add    edx,0x1
c001b99d:	83 fa 04             	cmp    edx,0x4
c001b9a0:	75 e9                	jne    c001b98b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001b9a2:	83 ec 0c             	sub    esp,0xc
c001b9a5:	68 88 21 03 c0       	push   0xc0032188
c001b9aa:	e8 bb 48 00 00       	call   c002026a <KePanic(char const*)>
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9b7:	83 c4 0c             	add    esp,0xc
c001b9ba:	5b                   	pop    ebx
c001b9bb:	5e                   	pop    esi
c001b9bc:	5f                   	pop    edi
c001b9bd:	5d                   	pop    ebp
c001b9be:	c3                   	ret    
c001b9bf:	83 c3 01             	add    ebx,0x1
c001b9c2:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b9c8:	7e a7                	jle    c001b971 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001b9ca:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001b9d1:	83 ec 08             	sub    esp,0x8
c001b9d4:	56                   	push   esi
c001b9d5:	55                   	push   ebp
c001b9d6:	e8 4b 21 01 00       	call   c002db26 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b9db:	83 c4 10             	add    esp,0x10
c001b9de:	84 c0                	test   al,al
c001b9e0:	74 dd                	je     c001b9bf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b9e2:	89 f8                	mov    eax,edi
c001b9e4:	83 ec 04             	sub    esp,0x4
c001b9e7:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b9ee:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b9f1:	0f b6 f8             	movzx  edi,al
c001b9f4:	57                   	push   edi
c001b9f5:	89 e8                	mov    eax,ebp
c001b9f7:	6a 00                	push   0x0
c001b9f9:	0f b6 c0             	movzx  eax,al
c001b9fc:	50                   	push   eax
c001b9fd:	89 f0                	mov    eax,esi
c001b9ff:	6a 00                	push   0x0
c001ba01:	0f b6 c0             	movzx  eax,al
c001ba04:	6a 00                	push   0x0
c001ba06:	50                   	push   eax
c001ba07:	53                   	push   ebx
c001ba08:	e8 85 22 01 00       	call   c002dc92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001ba0d:	83 c4 20             	add    esp,0x20
c001ba10:	e9 6f ff ff ff       	jmp    c001b984 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001ba15:	83 ec 0c             	sub    esp,0xc
c001ba18:	31 ff                	xor    edi,edi
c001ba1a:	68 50 21 03 c0       	push   0xc0032150
c001ba1f:	e8 46 48 00 00       	call   c002026a <KePanic(char const*)>
c001ba24:	83 c4 10             	add    esp,0x10
c001ba27:	e9 24 ff ff ff       	jmp    c001b950 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001ba2c:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001ba2f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ba33:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001ba3a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ba3e:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001ba45:	83 c4 0c             	add    esp,0xc
c001ba48:	89 f0                	mov    eax,esi
c001ba4a:	5b                   	pop    ebx
c001ba4b:	5e                   	pop    esi
c001ba4c:	5f                   	pop    edi
c001ba4d:	5d                   	pop    ebp
c001ba4e:	c3                   	ret    

c001ba4f <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001ba4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba57:	c1 e0 04             	shl    eax,0x4
c001ba5a:	8d 50 10             	lea    edx,[eax+0x10]
c001ba5d:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001ba63:	74 08                	je     c001ba6d <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001ba65:	83 c0 04             	add    eax,0x4
c001ba68:	39 d0                	cmp    eax,edx
c001ba6a:	75 f1                	jne    c001ba5d <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001ba6c:	c3                   	ret    
c001ba6d:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba77:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba81:	eb e2                	jmp    c001ba65 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001ba83 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001ba83:	56                   	push   esi
c001ba84:	53                   	push   ebx
c001ba85:	83 ec 04             	sub    esp,0x4
c001ba88:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ba95:	74 0e                	je     c001baa5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001ba97:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ba9c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001baa3:	75 34                	jne    c001bad9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001baa5:	8d 43 20             	lea    eax,[ebx+0x20]
c001baa8:	c1 e0 04             	shl    eax,0x4
c001baab:	8d 50 10             	lea    edx,[eax+0x10]
c001baae:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001bab4:	74 0d                	je     c001bac3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001bab6:	83 c0 04             	add    eax,0x4
c001bab9:	39 d0                	cmp    eax,edx
c001babb:	75 f1                	jne    c001baae <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001babd:	83 c4 04             	add    esp,0x4
c001bac0:	5b                   	pop    ebx
c001bac1:	5e                   	pop    esi
c001bac2:	c3                   	ret    
c001bac3:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bacd:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001bad7:	eb dd                	jmp    c001bab6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001bad9:	83 fb 0f             	cmp    ebx,0xf
c001badc:	7f 09                	jg     c001bae7 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001bade:	0f b6 9b 48 3d 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcc2b8]
c001bae5:	eb be                	jmp    c001baa5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001bae7:	83 ec 0c             	sub    esp,0xc
c001baea:	68 41 21 03 c0       	push   0xc0032141
c001baef:	e8 76 47 00 00       	call   c002026a <KePanic(char const*)>
c001baf4:	83 c4 10             	add    esp,0x10
c001baf7:	eb ac                	jmp    c001baa5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001baf9 <setupINTS()>:
c001baf9:	31 c0                	xor    eax,eax
c001bafb:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001bb05:	83 c0 10             	add    eax,0x10
c001bb08:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001bb12:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001bb1c:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001bb26:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001bb30:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001bb3a:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001bb44:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001bb4e:	3d 00 10 00 00       	cmp    eax,0x1000
c001bb53:	75 a6                	jne    c001bafb <setupINTS()+0x2>
c001bb55:	c3                   	ret    

c001bb56 <convertLegacyIRQNumber(int)>:
c001bb56:	83 ec 0c             	sub    esp,0xc
c001bb59:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001bb5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb63:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb6a:	74 0c                	je     c001bb78 <convertLegacyIRQNumber(int)+0x22>
c001bb6c:	83 f8 0f             	cmp    eax,0xf
c001bb6f:	7f 0b                	jg     c001bb7c <convertLegacyIRQNumber(int)+0x26>
c001bb71:	0f b6 80 48 3d 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc2b8]
c001bb78:	83 c4 0c             	add    esp,0xc
c001bb7b:	c3                   	ret    
c001bb7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bb80:	83 ec 0c             	sub    esp,0xc
c001bb83:	68 50 21 03 c0       	push   0xc0032150
c001bb88:	e8 dd 46 00 00       	call   c002026a <KePanic(char const*)>
c001bb8d:	83 c4 10             	add    esp,0x10
c001bb90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb94:	83 c4 0c             	add    esp,0xc
c001bb97:	c3                   	ret    

c001bb98 <startGUI(void*)>:
c001bb98:	55                   	push   ebp
c001bb99:	89 e5                	mov    ebp,esp
c001bb9b:	53                   	push   ebx
c001bb9c:	83 ec 04             	sub    esp,0x4
c001bb9f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bba4:	83 e8 01             	sub    eax,0x1
c001bba7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bbac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbb1:	85 c0                	test   eax,eax
c001bbb3:	75 01                	jne    c001bbb6 <startGUI(void*)+0x1e>
c001bbb5:	fb                   	sti    
c001bbb6:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bbbc:	83 ec 08             	sub    esp,0x8
c001bbbf:	6a 01                	push   0x1
c001bbc1:	68 ad 21 03 c0       	push   0xc00321ad
c001bbc6:	e8 70 8c 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001bbcb:	83 c4 10             	add    esp,0x10
c001bbce:	83 ec 08             	sub    esp,0x8
c001bbd1:	53                   	push   ebx
c001bbd2:	50                   	push   eax
c001bbd3:	e8 c4 8e 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001bbd8:	83 c4 10             	add    esp,0x10
c001bbdb:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bbe1:	83 ec 08             	sub    esp,0x8
c001bbe4:	6a 01                	push   0x1
c001bbe6:	68 c7 21 03 c0       	push   0xc00321c7
c001bbeb:	e8 4b 8c 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001bbf0:	83 c4 10             	add    esp,0x10
c001bbf3:	83 ec 08             	sub    esp,0x8
c001bbf6:	53                   	push   ebx
c001bbf7:	50                   	push   eax
c001bbf8:	e8 9f 8e 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	eb fe                	jmp    c001bc00 <startGUI(void*)+0x68>

c001bc02 <startGUIVESA(void*)>:
c001bc02:	55                   	push   ebp
c001bc03:	89 e5                	mov    ebp,esp
c001bc05:	53                   	push   ebx
c001bc06:	83 ec 04             	sub    esp,0x4
c001bc09:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc0e:	83 e8 01             	sub    eax,0x1
c001bc11:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc16:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc1b:	85 c0                	test   eax,eax
c001bc1d:	75 01                	jne    c001bc20 <startGUIVESA(void*)+0x1e>
c001bc1f:	fb                   	sti    
c001bc20:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bc26:	83 ec 08             	sub    esp,0x8
c001bc29:	6a 01                	push   0x1
c001bc2b:	68 e5 21 03 c0       	push   0xc00321e5
c001bc30:	e8 06 8c 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001bc35:	83 c4 10             	add    esp,0x10
c001bc38:	83 ec 08             	sub    esp,0x8
c001bc3b:	53                   	push   ebx
c001bc3c:	50                   	push   eax
c001bc3d:	e8 5a 8e 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001bc42:	83 c4 10             	add    esp,0x10
c001bc45:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bc4b:	83 ec 08             	sub    esp,0x8
c001bc4e:	6a 01                	push   0x1
c001bc50:	68 c7 21 03 c0       	push   0xc00321c7
c001bc55:	e8 e1 8b 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001bc5a:	83 c4 10             	add    esp,0x10
c001bc5d:	83 ec 08             	sub    esp,0x8
c001bc60:	53                   	push   ebx
c001bc61:	50                   	push   eax
c001bc62:	e8 35 8e 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	eb fe                	jmp    c001bc6a <startGUIVESA(void*)+0x68>

c001bc6c <sendKeyToTerminal(unsigned char)>:
c001bc6c:	55                   	push   ebp
c001bc6d:	89 e5                	mov    ebp,esp
c001bc6f:	83 ec 28             	sub    esp,0x28
c001bc72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bc78:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bc7d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bc81:	83 ec 08             	sub    esp,0x8
c001bc84:	52                   	push   edx
c001bc85:	50                   	push   eax
c001bc86:	e8 09 bb ff ff       	call   c0017794 <VgaText::receiveKey(unsigned char)>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc92:	83 f8 0a             	cmp    eax,0xa
c001bc95:	74 16                	je     c001bcad <sendKeyToTerminal(unsigned char)+0x41>
c001bc97:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bc9b:	83 f8 03             	cmp    eax,0x3
c001bc9e:	74 0d                	je     c001bcad <sendKeyToTerminal(unsigned char)+0x41>
c001bca0:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bca4:	83 f8 1c             	cmp    eax,0x1c
c001bca7:	0f 85 97 00 00 00    	jne    c001bd44 <sendKeyToTerminal(unsigned char)+0xd8>
c001bcad:	fa                   	cli    
c001bcae:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bcb3:	83 c0 01             	add    eax,0x1
c001bcb6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bcbb:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bcc0:	83 c0 01             	add    eax,0x1
c001bcc3:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bcc8:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bccd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bcd0:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bcda:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bcde:	74 1f                	je     c001bcff <sendKeyToTerminal(unsigned char)+0x93>
c001bce0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bce3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bce6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bce9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bcec:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bcef:	83 ec 0c             	sub    esp,0xc
c001bcf2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bcf5:	e8 be 98 00 00       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c001bcfa:	83 c4 10             	add    esp,0x10
c001bcfd:	eb db                	jmp    c001bcda <sendKeyToTerminal(unsigned char)+0x6e>
c001bcff:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bd04:	83 e8 01             	sub    eax,0x1
c001bd07:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bd0c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bd11:	85 c0                	test   eax,eax
c001bd13:	75 18                	jne    c001bd2d <sendKeyToTerminal(unsigned char)+0xc1>
c001bd15:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bd1a:	85 c0                	test   eax,eax
c001bd1c:	74 0f                	je     c001bd2d <sendKeyToTerminal(unsigned char)+0xc1>
c001bd1e:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bd28:	e8 9f 95 00 00       	call   c00252cc <schedule()>
c001bd2d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd32:	83 e8 01             	sub    eax,0x1
c001bd35:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bd3a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bd3f:	85 c0                	test   eax,eax
c001bd41:	75 01                	jne    c001bd44 <sendKeyToTerminal(unsigned char)+0xd8>
c001bd43:	fb                   	sti    
c001bd44:	90                   	nop
c001bd45:	c9                   	leave  
c001bd46:	c3                   	ret    

c001bd47 <sendKeyboardToken(KeyboardToken)>:
c001bd47:	55                   	push   ebp
c001bd48:	89 e5                	mov    ebp,esp
c001bd4a:	83 ec 18             	sub    esp,0x18
c001bd4d:	e8 68 45 00 00       	call   c00202ba <KeUserIOReceived()>
c001bd52:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bd55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd58:	0f b7 c0             	movzx  eax,ax
c001bd5b:	83 f2 01             	xor    edx,0x1
c001bd5e:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bd64:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bd69:	85 c0                	test   eax,eax
c001bd6b:	74 24                	je     c001bd91 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bd6d:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001bd73:	83 ec 04             	sub    esp,0x4
c001bd76:	68 40 ef 03 c0       	push   0xc003ef40
c001bd7b:	83 ec 08             	sub    esp,0x8
c001bd7e:	89 e0                	mov    eax,esp
c001bd80:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bd83:	89 08                	mov    DWORD PTR [eax],ecx
c001bd85:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bd88:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001bd8c:	ff d2                	call   edx
c001bd8e:	83 c4 10             	add    esp,0x10
c001bd91:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bd95:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bd98:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bd9d:	0f b6 d2             	movzx  edx,dl
c001bda0:	0f b6 c0             	movzx  eax,al
c001bda3:	39 c2                	cmp    edx,eax
c001bda5:	74 1c                	je     c001bdc3 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bda7:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bdaa:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bdaf:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bdb4:	0f b6 c0             	movzx  eax,al
c001bdb7:	83 ec 0c             	sub    esp,0xc
c001bdba:	50                   	push   eax
c001bdbb:	e8 30 b1 ff ff       	call   c0016ef0 <setTerminalScrollLock(bool)>
c001bdc0:	83 c4 10             	add    esp,0x10
c001bdc3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bdc6:	0f b6 c0             	movzx  eax,al
c001bdc9:	85 c0                	test   eax,eax
c001bdcb:	0f 84 da 00 00 00    	je     c001beab <sendKeyboardToken(KeyboardToken)+0x164>
c001bdd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdd4:	0f b7 c0             	movzx  eax,ax
c001bdd7:	3d 18 03 00 00       	cmp    eax,0x318
c001bddc:	75 06                	jne    c001bde4 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bdde:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bde4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde7:	0f b7 c0             	movzx  eax,ax
c001bdea:	3d 19 03 00 00       	cmp    eax,0x319
c001bdef:	75 06                	jne    c001bdf7 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bdf1:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bdf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdfa:	0f b7 c0             	movzx  eax,ax
c001bdfd:	3d 1a 03 00 00       	cmp    eax,0x31a
c001be02:	75 06                	jne    c001be0a <sendKeyboardToken(KeyboardToken)+0xc3>
c001be04:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001be0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be0d:	0f b7 c0             	movzx  eax,ax
c001be10:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be15:	75 06                	jne    c001be1d <sendKeyboardToken(KeyboardToken)+0xd6>
c001be17:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001be1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be20:	0f b7 c0             	movzx  eax,ax
c001be23:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be28:	75 06                	jne    c001be30 <sendKeyboardToken(KeyboardToken)+0xe9>
c001be2a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001be30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be33:	0f b7 c0             	movzx  eax,ax
c001be36:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be3b:	75 06                	jne    c001be43 <sendKeyboardToken(KeyboardToken)+0xfc>
c001be3d:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be46:	0f b7 c0             	movzx  eax,ax
c001be49:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be4e:	75 06                	jne    c001be56 <sendKeyboardToken(KeyboardToken)+0x10f>
c001be50:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001be56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be59:	0f b7 c0             	movzx  eax,ax
c001be5c:	3d 1f 03 00 00       	cmp    eax,0x31f
c001be61:	75 06                	jne    c001be69 <sendKeyboardToken(KeyboardToken)+0x122>
c001be63:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001be69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be6c:	0f b7 c0             	movzx  eax,ax
c001be6f:	3d 20 03 00 00       	cmp    eax,0x320
c001be74:	75 06                	jne    c001be7c <sendKeyboardToken(KeyboardToken)+0x135>
c001be76:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001be7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be7f:	0f b7 c0             	movzx  eax,ax
c001be82:	3d 21 03 00 00       	cmp    eax,0x321
c001be87:	75 06                	jne    c001be8f <sendKeyboardToken(KeyboardToken)+0x148>
c001be89:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001be8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be92:	0f b7 c0             	movzx  eax,ax
c001be95:	3d 22 03 00 00       	cmp    eax,0x322
c001be9a:	0f 85 f1 00 00 00    	jne    c001bf91 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bea0:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bea6:	e9 e6 00 00 00       	jmp    c001bf91 <sendKeyboardToken(KeyboardToken)+0x24a>
c001beab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beae:	0f b7 c0             	movzx  eax,ax
c001beb1:	3d 18 03 00 00       	cmp    eax,0x318
c001beb6:	75 0a                	jne    c001bec2 <sendKeyboardToken(KeyboardToken)+0x17b>
c001beb8:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bebe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec5:	0f b7 c0             	movzx  eax,ax
c001bec8:	3d 19 03 00 00       	cmp    eax,0x319
c001becd:	75 0a                	jne    c001bed9 <sendKeyboardToken(KeyboardToken)+0x192>
c001becf:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001bed5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bedc:	0f b7 c0             	movzx  eax,ax
c001bedf:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bee4:	75 0a                	jne    c001bef0 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001bee6:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001beec:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bef3:	0f b7 c0             	movzx  eax,ax
c001bef6:	3d 1b 03 00 00       	cmp    eax,0x31b
c001befb:	75 0a                	jne    c001bf07 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001befd:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001bf03:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf0a:	0f b7 c0             	movzx  eax,ax
c001bf0d:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bf12:	75 0a                	jne    c001bf1e <sendKeyboardToken(KeyboardToken)+0x1d7>
c001bf14:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001bf1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf21:	0f b7 c0             	movzx  eax,ax
c001bf24:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bf29:	75 0a                	jne    c001bf35 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001bf2b:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bf31:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf38:	0f b7 c0             	movzx  eax,ax
c001bf3b:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bf40:	75 0a                	jne    c001bf4c <sendKeyboardToken(KeyboardToken)+0x205>
c001bf42:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001bf48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf4f:	0f b7 c0             	movzx  eax,ax
c001bf52:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bf57:	75 0a                	jne    c001bf63 <sendKeyboardToken(KeyboardToken)+0x21c>
c001bf59:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bf5f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf66:	0f b7 c0             	movzx  eax,ax
c001bf69:	3d 20 03 00 00       	cmp    eax,0x320
c001bf6e:	75 0a                	jne    c001bf7a <sendKeyboardToken(KeyboardToken)+0x233>
c001bf70:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001bf76:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf7d:	0f b7 c0             	movzx  eax,ax
c001bf80:	3d 21 03 00 00       	cmp    eax,0x321
c001bf85:	75 0a                	jne    c001bf91 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bf87:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bf8d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bf91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf94:	0f b7 c0             	movzx  eax,ax
c001bf97:	3d 00 02 00 00       	cmp    eax,0x200
c001bf9c:	75 2f                	jne    c001bfcd <sendKeyboardToken(KeyboardToken)+0x286>
c001bf9e:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bfa3:	83 f0 01             	xor    eax,0x1
c001bfa6:	0f b6 c0             	movzx  eax,al
c001bfa9:	85 c0                	test   eax,eax
c001bfab:	74 20                	je     c001bfcd <sendKeyboardToken(KeyboardToken)+0x286>
c001bfad:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bfb2:	6a 01                	push   0x1
c001bfb4:	6a 00                	push   0x0
c001bfb6:	68 98 bb 01 c0       	push   0xc001bb98
c001bfbb:	50                   	push   eax
c001bfbc:	e8 bf 90 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c001bfc1:	83 c4 10             	add    esp,0x10
c001bfc4:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bfcb:	eb 3a                	jmp    c001c007 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bfcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfd0:	0f b7 c0             	movzx  eax,ax
c001bfd3:	3d 01 02 00 00       	cmp    eax,0x201
c001bfd8:	75 2d                	jne    c001c007 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bfda:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bfdf:	83 f0 01             	xor    eax,0x1
c001bfe2:	0f b6 c0             	movzx  eax,al
c001bfe5:	85 c0                	test   eax,eax
c001bfe7:	74 1e                	je     c001c007 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bfe9:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bfee:	6a 01                	push   0x1
c001bff0:	6a 00                	push   0x0
c001bff2:	68 02 bc 01 c0       	push   0xc001bc02
c001bff7:	50                   	push   eax
c001bff8:	e8 83 90 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c001bffd:	83 c4 10             	add    esp,0x10
c001c000:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001c007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c00a:	0f b7 c0             	movzx  eax,ax
c001c00d:	3d 25 03 00 00       	cmp    eax,0x325
c001c012:	75 06                	jne    c001c01a <sendKeyboardToken(KeyboardToken)+0x2d3>
c001c014:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001c01a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01d:	0f b7 c0             	movzx  eax,ax
c001c020:	3d 24 03 00 00       	cmp    eax,0x324
c001c025:	75 06                	jne    c001c02d <sendKeyboardToken(KeyboardToken)+0x2e6>
c001c027:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001c02d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c030:	0f b7 c0             	movzx  eax,ax
c001c033:	3d 23 03 00 00       	cmp    eax,0x323
c001c038:	75 06                	jne    c001c040 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001c03a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001c040:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c043:	0f b7 c0             	movzx  eax,ax
c001c046:	3d 26 03 00 00       	cmp    eax,0x326
c001c04b:	75 06                	jne    c001c053 <sendKeyboardToken(KeyboardToken)+0x30c>
c001c04d:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001c053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c056:	0f b7 c0             	movzx  eax,ax
c001c059:	3d 27 03 00 00       	cmp    eax,0x327
c001c05e:	75 06                	jne    c001c066 <sendKeyboardToken(KeyboardToken)+0x31f>
c001c060:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001c066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c069:	0f b7 c0             	movzx  eax,ax
c001c06c:	3d 22 03 00 00       	cmp    eax,0x322
c001c071:	75 06                	jne    c001c079 <sendKeyboardToken(KeyboardToken)+0x332>
c001c073:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001c079:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001c07d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c080:	83 f0 01             	xor    eax,0x1
c001c083:	0f b6 c0             	movzx  eax,al
c001c086:	85 c0                	test   eax,eax
c001c088:	74 7c                	je     c001c106 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001c08a:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001c08f:	0f b6 c0             	movzx  eax,al
c001c092:	85 c0                	test   eax,eax
c001c094:	74 43                	je     c001c0d9 <sendKeyboardToken(KeyboardToken)+0x392>
c001c096:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c09a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001c09e:	85 c0                	test   eax,eax
c001c0a0:	74 2b                	je     c001c0cd <sendKeyboardToken(KeyboardToken)+0x386>
c001c0a2:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001c0a8:	89 d0                	mov    eax,edx
c001c0aa:	c1 e0 02             	shl    eax,0x2
c001c0ad:	01 d0                	add    eax,edx
c001c0af:	d1 e0                	shl    eax,1
c001c0b1:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c0b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b9:	0f b7 c0             	movzx  eax,ax
c001c0bc:	8d 50 d0             	lea    edx,[eax-0x30]
c001c0bf:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c0c4:	01 d0                	add    eax,edx
c001c0c6:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c0cb:	eb 71                	jmp    c001c13e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c0cd:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c0d7:	eb 65                	jmp    c001c13e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c0d9:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c0de:	85 c0                	test   eax,eax
c001c0e0:	74 18                	je     c001c0fa <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c0e2:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c0e7:	0f b6 c0             	movzx  eax,al
c001c0ea:	83 ec 0c             	sub    esp,0xc
c001c0ed:	50                   	push   eax
c001c0ee:	e8 79 fb ff ff       	call   c001bc6c <sendKeyToTerminal(unsigned char)>
c001c0f3:	83 c4 10             	add    esp,0x10
c001c0f6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c0fa:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c104:	eb 38                	jmp    c001c13e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c109:	0f b7 c0             	movzx  eax,ax
c001c10c:	3d 01 01 00 00       	cmp    eax,0x101
c001c111:	75 2b                	jne    c001c13e <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c113:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c118:	85 c0                	test   eax,eax
c001c11a:	74 18                	je     c001c134 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c11c:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c121:	0f b6 c0             	movzx  eax,al
c001c124:	83 ec 0c             	sub    esp,0xc
c001c127:	50                   	push   eax
c001c128:	e8 3f fb ff ff       	call   c001bc6c <sendKeyToTerminal(unsigned char)>
c001c12d:	83 c4 10             	add    esp,0x10
c001c130:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c134:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c13e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c141:	83 f0 01             	xor    eax,0x1
c001c144:	0f b6 c0             	movzx  eax,al
c001c147:	85 c0                	test   eax,eax
c001c149:	74 5a                	je     c001c1a5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c14b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c14e:	83 f0 01             	xor    eax,0x1
c001c151:	0f b6 c0             	movzx  eax,al
c001c154:	85 c0                	test   eax,eax
c001c156:	74 4d                	je     c001c1a5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c158:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c15d:	83 f0 01             	xor    eax,0x1
c001c160:	0f b6 c0             	movzx  eax,al
c001c163:	85 c0                	test   eax,eax
c001c165:	74 3e                	je     c001c1a5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c16a:	0f b7 c0             	movzx  eax,ax
c001c16d:	83 f8 1f             	cmp    eax,0x1f
c001c170:	76 0b                	jbe    c001c17d <sendKeyboardToken(KeyboardToken)+0x436>
c001c172:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c175:	0f b7 c0             	movzx  eax,ax
c001c178:	83 f8 7e             	cmp    eax,0x7e
c001c17b:	76 16                	jbe    c001c193 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c17d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c180:	0f b7 c0             	movzx  eax,ax
c001c183:	83 f8 0a             	cmp    eax,0xa
c001c186:	74 0b                	je     c001c193 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c18b:	0f b7 c0             	movzx  eax,ax
c001c18e:	83 f8 08             	cmp    eax,0x8
c001c191:	75 12                	jne    c001c1a5 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c196:	0f b6 c0             	movzx  eax,al
c001c199:	83 ec 0c             	sub    esp,0xc
c001c19c:	50                   	push   eax
c001c19d:	e8 ca fa ff ff       	call   c001bc6c <sendKeyToTerminal(unsigned char)>
c001c1a2:	83 c4 10             	add    esp,0x10
c001c1a5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c1a8:	83 f0 01             	xor    eax,0x1
c001c1ab:	0f b6 c0             	movzx  eax,al
c001c1ae:	85 c0                	test   eax,eax
c001c1b0:	74 5d                	je     c001c20f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1b2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c1b5:	83 f0 01             	xor    eax,0x1
c001c1b8:	0f b6 c0             	movzx  eax,al
c001c1bb:	85 c0                	test   eax,eax
c001c1bd:	74 50                	je     c001c20f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1bf:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c1c4:	0f b6 c0             	movzx  eax,al
c001c1c7:	85 c0                	test   eax,eax
c001c1c9:	74 44                	je     c001c20f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ce:	0f b7 c0             	movzx  eax,ax
c001c1d1:	83 f8 3f             	cmp    eax,0x3f
c001c1d4:	76 39                	jbe    c001c20f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1d9:	0f b7 c0             	movzx  eax,ax
c001c1dc:	83 f8 7f             	cmp    eax,0x7f
c001c1df:	77 2e                	ja     c001c20f <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e4:	88 c2                	mov    dl,al
c001c1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1e9:	0f b7 c0             	movzx  eax,ax
c001c1ec:	83 f8 5f             	cmp    eax,0x5f
c001c1ef:	76 04                	jbe    c001c1f5 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c1f1:	b0 20                	mov    al,0x20
c001c1f3:	eb 02                	jmp    c001c1f7 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c1f5:	b0 00                	mov    al,0x0
c001c1f7:	89 d1                	mov    ecx,edx
c001c1f9:	29 c1                	sub    ecx,eax
c001c1fb:	89 c8                	mov    eax,ecx
c001c1fd:	83 e8 40             	sub    eax,0x40
c001c200:	0f b6 c0             	movzx  eax,al
c001c203:	83 ec 0c             	sub    esp,0xc
c001c206:	50                   	push   eax
c001c207:	e8 60 fa ff ff       	call   c001bc6c <sendKeyToTerminal(unsigned char)>
c001c20c:	83 c4 10             	add    esp,0x10
c001c20f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c212:	0f b7 c0             	movzx  eax,ax
c001c215:	3d 00 03 00 00       	cmp    eax,0x300
c001c21a:	75 12                	jne    c001c22e <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c21c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c21f:	83 f0 01             	xor    eax,0x1
c001c222:	0f b6 c0             	movzx  eax,al
c001c225:	85 c0                	test   eax,eax
c001c227:	74 05                	je     c001c22e <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c229:	e8 c3 ac ff ff       	call   c0016ef1 <doTerminalCycle()>
c001c22e:	90                   	nop
c001c22f:	c9                   	leave  
c001c230:	c3                   	ret    

c001c231 <clearInternalKeybuffer(VgaText*)>:
c001c231:	55                   	push   ebp
c001c232:	89 e5                	mov    ebp,esp
c001c234:	83 ec 08             	sub    esp,0x8
c001c237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c23a:	05 02 01 00 00       	add    eax,0x102
c001c23f:	83 ec 0c             	sub    esp,0xc
c001c242:	50                   	push   eax
c001c243:	e8 38 43 fe ff       	call   c0000580 <strlen>
c001c248:	83 c4 10             	add    esp,0x10
c001c24b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c24e:	81 c2 02 01 00 00    	add    edx,0x102
c001c254:	83 ec 04             	sub    esp,0x4
c001c257:	50                   	push   eax
c001c258:	6a 00                	push   0x0
c001c25a:	52                   	push   edx
c001c25b:	e8 90 42 fe ff       	call   c00004f0 <memset>
c001c260:	83 c4 10             	add    esp,0x10
c001c263:	90                   	nop
c001c264:	c9                   	leave  
c001c265:	c3                   	ret    

c001c266 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c266:	55                   	push   ebp
c001c267:	89 e5                	mov    ebp,esp
c001c269:	83 ec 18             	sub    esp,0x18
c001c26c:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c271:	85 c0                	test   eax,eax
c001c273:	74 2a                	je     c001c29f <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c275:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c27b:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c281:	83 ec 04             	sub    esp,0x4
c001c284:	68 40 ef 03 c0       	push   0xc003ef40
c001c289:	83 ec 08             	sub    esp,0x8
c001c28c:	89 e0                	mov    eax,esp
c001c28e:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c291:	89 08                	mov    DWORD PTR [eax],ecx
c001c293:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c296:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c29a:	ff d2                	call   edx
c001c29c:	83 c4 10             	add    esp,0x10
c001c29f:	fb                   	sti    
c001c2a0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c2a7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c2ab:	0f 84 0d 01 00 00    	je     c001c3be <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c2b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c2b4:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c2ba:	0f be c0             	movsx  eax,al
c001c2bd:	85 c0                	test   eax,eax
c001c2bf:	75 2c                	jne    c001c2ed <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c2c1:	fa                   	cli    
c001c2c2:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c2c7:	83 c0 01             	add    eax,0x1
c001c2ca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c2cf:	e8 f8 8f 00 00       	call   c00252cc <schedule()>
c001c2d4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c2d9:	83 e8 01             	sub    eax,0x1
c001c2dc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c2e1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c2e6:	85 c0                	test   eax,eax
c001c2e8:	75 c7                	jne    c001c2b1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c2ea:	fb                   	sti    
c001c2eb:	eb c4                	jmp    c001c2b1 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c2ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c2f0:	8d 50 01             	lea    edx,[eax+0x1]
c001c2f3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c2f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2f9:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c2ff:	88 10                	mov    BYTE PTR [eax],dl
c001c301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c304:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c30a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c30d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c311:	83 f8 03             	cmp    eax,0x3
c001c314:	75 1e                	jne    c001c334 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c316:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c31b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c31d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c320:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c326:	83 ec 08             	sub    esp,0x8
c001c329:	6a 02                	push   0x2
c001c32b:	50                   	push   eax
c001c32c:	e8 eb 47 00 00       	call   c0020b1c <KeRaiseSignal(SigHandlerBlock*, int)>
c001c331:	83 c4 10             	add    esp,0x10
c001c334:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c338:	83 f8 1c             	cmp    eax,0x1c
c001c33b:	75 1e                	jne    c001c35b <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c33d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c342:	8b 00                	mov    eax,DWORD PTR [eax]
c001c344:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c347:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c34d:	83 ec 08             	sub    esp,0x8
c001c350:	6a 09                	push   0x9
c001c352:	50                   	push   eax
c001c353:	e8 c4 47 00 00       	call   c0020b1c <KeRaiseSignal(SigHandlerBlock*, int)>
c001c358:	83 c4 10             	add    esp,0x10
c001c35b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c35e:	05 02 01 00 00       	add    eax,0x102
c001c363:	83 ec 0c             	sub    esp,0xc
c001c366:	50                   	push   eax
c001c367:	e8 14 42 fe ff       	call   c0000580 <strlen>
c001c36c:	83 c4 10             	add    esp,0x10
c001c36f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c372:	81 c2 02 01 00 00    	add    edx,0x102
c001c378:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c37b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c37e:	81 c2 02 01 00 00    	add    edx,0x102
c001c384:	83 ec 04             	sub    esp,0x4
c001c387:	50                   	push   eax
c001c388:	51                   	push   ecx
c001c389:	52                   	push   edx
c001c38a:	e8 41 40 fe ff       	call   c00003d0 <memmove>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c396:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c39a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c39e:	83 f8 0a             	cmp    eax,0xa
c001c3a1:	74 16                	je     c001c3b9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c3a3:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c3a7:	83 f8 03             	cmp    eax,0x3
c001c3aa:	74 0d                	je     c001c3b9 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c3ac:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c3b0:	83 f8 1c             	cmp    eax,0x1c
c001c3b3:	0f 85 ee fe ff ff    	jne    c001c2a7 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c3b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c3bc:	eb 03                	jmp    c001c3c1 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c3be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c3c1:	c9                   	leave  
c001c3c2:	c3                   	ret    
c001c3c3:	90                   	nop

c001c3c4 <Keyboard::Keyboard(char const*)>:
c001c3c4:	83 ec 0c             	sub    esp,0xc
c001c3c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3cb:	83 ec 08             	sub    esp,0x8
c001c3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3d2:	50                   	push   eax
c001c3d3:	e8 02 f1 ff ff       	call   c001b4da <Device::Device(char const*)>
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	ba 08 22 03 c0       	mov    edx,0xc0032208
c001c3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e4:	89 10                	mov    DWORD PTR [eax],edx
c001c3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ea:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c3f4:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c3fb:	90                   	nop
c001c3fc:	83 c4 0c             	add    esp,0xc
c001c3ff:	c3                   	ret    

c001c400 <Keyboard::~Keyboard()>:
c001c400:	83 ec 0c             	sub    esp,0xc
c001c403:	ba 08 22 03 c0       	mov    edx,0xc0032208
c001c408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40c:	89 10                	mov    DWORD PTR [eax],edx
c001c40e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c412:	83 ec 0c             	sub    esp,0xc
c001c415:	50                   	push   eax
c001c416:	e8 5f ee ff ff       	call   c001b27a <Device::~Device()>
c001c41b:	83 c4 10             	add    esp,0x10
c001c41e:	90                   	nop
c001c41f:	83 c4 0c             	add    esp,0xc
c001c422:	c3                   	ret    
c001c423:	90                   	nop

c001c424 <Keyboard::~Keyboard()>:
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	83 ec 0c             	sub    esp,0xc
c001c42a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c42e:	e8 cd ff ff ff       	call   c001c400 <Keyboard::~Keyboard()>
c001c433:	83 c4 10             	add    esp,0x10
c001c436:	83 ec 08             	sub    esp,0x8
c001c439:	68 5c 01 00 00       	push   0x15c
c001c43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c442:	e8 9d cd ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001c447:	83 c4 10             	add    esp,0x10
c001c44a:	83 c4 0c             	add    esp,0xc
c001c44d:	c3                   	ret    

c001c44e <LogicalDisk::close(int, int, void*)>:
c001c44e:	83 c8 ff             	or     eax,0xffffffff
c001c451:	c3                   	ret    

c001c452 <LogicalDisk::~LogicalDisk()>:
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	ba 80 22 03 c0       	mov    edx,0xc0032280
c001c45a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45e:	89 10                	mov    DWORD PTR [eax],edx
c001c460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c464:	83 ec 0c             	sub    esp,0xc
c001c467:	50                   	push   eax
c001c468:	e8 0d ee ff ff       	call   c001b27a <Device::~Device()>
c001c46d:	83 c4 10             	add    esp,0x10
c001c470:	90                   	nop
c001c471:	83 c4 0c             	add    esp,0xc
c001c474:	c3                   	ret    
c001c475:	90                   	nop

c001c476 <LogicalDisk::~LogicalDisk()>:
c001c476:	83 ec 0c             	sub    esp,0xc
c001c479:	83 ec 0c             	sub    esp,0xc
c001c47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c480:	e8 cd ff ff ff       	call   c001c452 <LogicalDisk::~LogicalDisk()>
c001c485:	83 c4 10             	add    esp,0x10
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	68 78 01 00 00       	push   0x178
c001c490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c494:	e8 4b cd ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001c499:	83 c4 10             	add    esp,0x10
c001c49c:	83 c4 0c             	add    esp,0xc
c001c49f:	c3                   	ret    

c001c4a0 <LogicalDisk::open(int, int, void*)>:
c001c4a0:	83 ec 18             	sub    esp,0x18
c001c4a3:	68 34 22 03 c0       	push   0xc0032234
c001c4a8:	e8 bd 3d 00 00       	call   c002026a <KePanic(char const*)>
c001c4ad:	83 c8 ff             	or     eax,0xffffffff
c001c4b0:	83 c4 1c             	add    esp,0x1c
c001c4b3:	c3                   	ret    

c001c4b4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c4b4:	53                   	push   ebx
c001c4b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4c1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c4c7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c4cd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c4d3:	77 10                	ja     c001c4e5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c4d5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c4db:	89 d3                	mov    ebx,edx
c001c4dd:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c4e3:	72 05                	jb     c001c4ea <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c4e5:	83 c8 ff             	or     eax,0xffffffff
c001c4e8:	89 c2                	mov    edx,eax
c001c4ea:	5b                   	pop    ebx
c001c4eb:	c3                   	ret    

c001c4ec <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c4ec:	56                   	push   esi
c001c4ed:	83 c8 ff             	or     eax,0xffffffff
c001c4f0:	53                   	push   ebx
c001c4f1:	89 c2                	mov    edx,eax
c001c4f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c4f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c4fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4ff:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c505:	77 27                	ja     c001c52e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c507:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c50d:	89 d8                	mov    eax,ebx
c001c50f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c515:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c51a:	89 c2                	mov    edx,eax
c001c51c:	73 10                	jae    c001c52e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c51e:	89 c8                	mov    eax,ecx
c001c520:	89 da                	mov    edx,ebx
c001c522:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c528:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c52e:	5b                   	pop    ebx
c001c52f:	5e                   	pop    esi
c001c530:	c3                   	ret    
c001c531:	90                   	nop

c001c532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c532:	83 ec 1c             	sub    esp,0x1c
c001c535:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c539:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c53d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c545:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c549:	89 04 24             	mov    DWORD PTR [esp],eax
c001c54c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c550:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c554:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c558:	83 ec 08             	sub    esp,0x8
c001c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c55f:	50                   	push   eax
c001c560:	e8 75 ef ff ff       	call   c001b4da <Device::Device(char const*)>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	ba 80 22 03 c0       	mov    edx,0xc0032280
c001c56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c571:	89 10                	mov    DWORD PTR [eax],edx
c001c573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c577:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c582:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c58d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c598:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c5a2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c5a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5ae:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c5b4:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c5ba:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c5be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c5c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5c5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c5cb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c5d9:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c5e3:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c5ed:	90                   	nop
c001c5ee:	83 c4 1c             	add    esp,0x1c
c001c5f1:	c3                   	ret    

c001c5f2 <LogicalDisk::assignDriveLetter()>:
c001c5f2:	55                   	push   ebp
c001c5f3:	57                   	push   edi
c001c5f4:	56                   	push   esi
c001c5f5:	53                   	push   ebx
c001c5f6:	83 ec 14             	sub    esp,0x14
c001c5f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c5fd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c603:	b0 41                	mov    al,0x41
c001c605:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c60b:	84 d2                	test   dl,dl
c001c60d:	75 02                	jne    c001c611 <LogicalDisk::assignDriveLetter()+0x1f>
c001c60f:	b0 43                	mov    al,0x43
c001c611:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c617:	0f b6 ca             	movzx  ecx,dl
c001c61a:	0f be e8             	movsx  ebp,al
c001c61d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c621:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c625:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c62b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c62f:	3c 43                	cmp    al,0x43
c001c631:	75 10                	jne    c001c643 <LogicalDisk::assignDriveLetter()+0x51>
c001c633:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c63a:	75 5a                	jne    c001c696 <LogicalDisk::assignDriveLetter()+0xa4>
c001c63c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c641:	75 53                	jne    c001c696 <LogicalDisk::assignDriveLetter()+0xa4>
c001c643:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c646:	ba 01 00 00 00       	mov    edx,0x1
c001c64b:	89 34 24             	mov    DWORD PTR [esp],esi
c001c64e:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c651:	d3 e2                	shl    edx,cl
c001c653:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c657:	89 d7                	mov    edi,edx
c001c659:	89 d6                	mov    esi,edx
c001c65b:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c65f:	c1 ff 1f             	sar    edi,0x1f
c001c662:	21 f9                	and    ecx,edi
c001c664:	09 d1                	or     ecx,edx
c001c666:	75 2e                	jne    c001c696 <LogicalDisk::assignDriveLetter()+0xa4>
c001c668:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c66c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c670:	09 f2                	or     edx,esi
c001c672:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c675:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c67b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c67f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c685:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c68c:	09 fa                	or     edx,edi
c001c68e:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c694:	eb 0d                	jmp    c001c6a3 <LogicalDisk::assignDriveLetter()+0xb1>
c001c696:	8d 50 01             	lea    edx,[eax+0x1]
c001c699:	45                   	inc    ebp
c001c69a:	80 fa 5b             	cmp    dl,0x5b
c001c69d:	88 d0                	mov    al,dl
c001c69f:	75 8e                	jne    c001c62f <LogicalDisk::assignDriveLetter()+0x3d>
c001c6a1:	31 c0                	xor    eax,eax
c001c6a3:	83 c4 14             	add    esp,0x14
c001c6a6:	5b                   	pop    ebx
c001c6a7:	5e                   	pop    esi
c001c6a8:	5f                   	pop    edi
c001c6a9:	5d                   	pop    ebp
c001c6aa:	c3                   	ret    
c001c6ab:	90                   	nop

c001c6ac <LogicalDisk::mount()>:
c001c6ac:	56                   	push   esi
c001c6ad:	53                   	push   ebx
c001c6ae:	53                   	push   ebx
c001c6af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6b3:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c6b9:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c6c3:	85 db                	test   ebx,ebx
c001c6c5:	74 27                	je     c001c6ee <LogicalDisk::mount()+0x42>
c001c6c7:	51                   	push   ecx
c001c6c8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c6cf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c6d1:	83 e8 41             	sub    eax,0x41
c001c6d4:	50                   	push   eax
c001c6d5:	56                   	push   esi
c001c6d6:	53                   	push   ebx
c001c6d7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c6da:	83 c4 10             	add    esp,0x10
c001c6dd:	84 c0                	test   al,al
c001c6df:	74 08                	je     c001c6e9 <LogicalDisk::mount()+0x3d>
c001c6e1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c6e7:	eb 07                	jmp    c001c6f0 <LogicalDisk::mount()+0x44>
c001c6e9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c6ec:	eb d5                	jmp    c001c6c3 <LogicalDisk::mount()+0x17>
c001c6ee:	31 c0                	xor    eax,eax
c001c6f0:	5a                   	pop    edx
c001c6f1:	5b                   	pop    ebx
c001c6f2:	5e                   	pop    esi
c001c6f3:	c3                   	ret    

c001c6f4 <LogicalDisk::unmount()>:
c001c6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c702:	c3                   	ret    
c001c703:	90                   	nop

c001c704 <LogicalDisk::eject()>:
c001c704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c708:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c70e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c714:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c717:	90                   	nop

c001c718 <LogicalDisk::unassignDriveLetter()>:
c001c718:	57                   	push   edi
c001c719:	56                   	push   esi
c001c71a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c71e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c725:	85 c9                	test   ecx,ecx
c001c727:	75 0f                	jne    c001c738 <LogicalDisk::unassignDriveLetter()+0x20>
c001c729:	c7 44 24 0c 58 22 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032258
c001c731:	5e                   	pop    esi
c001c732:	5f                   	pop    edi
c001c733:	e9 32 3b 00 00       	jmp    c002026a <KePanic(char const*)>
c001c738:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c73f:	83 e9 41             	sub    ecx,0x41
c001c742:	b8 01 00 00 00       	mov    eax,0x1
c001c747:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c752:	d3 e0                	shl    eax,cl
c001c754:	89 c7                	mov    edi,eax
c001c756:	f7 d0                	not    eax
c001c758:	c1 ff 1f             	sar    edi,0x1f
c001c75b:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c761:	89 fe                	mov    esi,edi
c001c763:	f7 d6                	not    esi
c001c765:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c76b:	5e                   	pop    esi
c001c76c:	5f                   	pop    edi
c001c76d:	c3                   	ret    

c001c76e <LogicalDisk::read(unsigned long long, int, void*)>:
c001c76e:	57                   	push   edi
c001c76f:	56                   	push   esi
c001c770:	53                   	push   ebx
c001c771:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c779:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c787:	77 41                	ja     c001c7ca <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c789:	99                   	cdq    
c001c78a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c790:	01 c8                	add    eax,ecx
c001c792:	11 da                	adc    edx,ebx
c001c794:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c79a:	19 d7                	sbb    edi,edx
c001c79c:	72 33                	jb     c001c7d1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c79e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c7a4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c7ae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c7b2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c7b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7c2:	5b                   	pop    ebx
c001c7c3:	5e                   	pop    esi
c001c7c4:	5f                   	pop    edi
c001c7c5:	e9 c6 0a 00 00       	jmp    c001d290 <VCache::read(unsigned long long, int, void*)>
c001c7ca:	b8 05 00 00 00       	mov    eax,0x5
c001c7cf:	eb 05                	jmp    c001c7d6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c7d1:	b8 07 00 00 00       	mov    eax,0x7
c001c7d6:	5b                   	pop    ebx
c001c7d7:	5e                   	pop    esi
c001c7d8:	5f                   	pop    edi
c001c7d9:	c3                   	ret    

c001c7da <LogicalDisk::write(unsigned long long, int, void*)>:
c001c7da:	57                   	push   edi
c001c7db:	56                   	push   esi
c001c7dc:	53                   	push   ebx
c001c7dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c7e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c7e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c7f3:	77 41                	ja     c001c836 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c7f5:	99                   	cdq    
c001c7f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c7fc:	01 c8                	add    eax,ecx
c001c7fe:	11 da                	adc    edx,ebx
c001c800:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c806:	19 d7                	sbb    edi,edx
c001c808:	72 33                	jb     c001c83d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c80a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c810:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c816:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c81a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c81e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c82a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c82e:	5b                   	pop    ebx
c001c82f:	5e                   	pop    esi
c001c830:	5f                   	pop    edi
c001c831:	e9 6a 09 00 00       	jmp    c001d1a0 <VCache::write(unsigned long long, int, void*)>
c001c836:	b8 05 00 00 00       	mov    eax,0x5
c001c83b:	eb 05                	jmp    c001c842 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c83d:	b8 07 00 00 00       	mov    eax,0x7
c001c842:	5b                   	pop    ebx
c001c843:	5e                   	pop    esi
c001c844:	5f                   	pop    edi
c001c845:	c3                   	ret    
c001c846:	66 90                	xchg   ax,ax

c001c848 <Mouse::Mouse(char const*)>:
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84f:	83 ec 08             	sub    esp,0x8
c001c852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c856:	50                   	push   eax
c001c857:	e8 7e ec ff ff       	call   c001b4da <Device::Device(char const*)>
c001c85c:	83 c4 10             	add    esp,0x10
c001c85f:	ba ac 22 03 c0       	mov    edx,0xc00322ac
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	89 10                	mov    DWORD PTR [eax],edx
c001c86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c878:	90                   	nop
c001c879:	83 c4 0c             	add    esp,0xc
c001c87c:	c3                   	ret    
c001c87d:	90                   	nop
c001c87e:	66 90                	xchg   ax,ax

c001c880 <Mouse::~Mouse()>:
c001c880:	83 ec 0c             	sub    esp,0xc
c001c883:	ba ac 22 03 c0       	mov    edx,0xc00322ac
c001c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88c:	89 10                	mov    DWORD PTR [eax],edx
c001c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c892:	83 ec 0c             	sub    esp,0xc
c001c895:	50                   	push   eax
c001c896:	e8 df e9 ff ff       	call   c001b27a <Device::~Device()>
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	90                   	nop
c001c89f:	83 c4 0c             	add    esp,0xc
c001c8a2:	c3                   	ret    
c001c8a3:	90                   	nop

c001c8a4 <Mouse::~Mouse()>:
c001c8a4:	83 ec 0c             	sub    esp,0xc
c001c8a7:	83 ec 0c             	sub    esp,0xc
c001c8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ae:	e8 cd ff ff ff       	call   c001c880 <Mouse::~Mouse()>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	83 ec 08             	sub    esp,0x8
c001c8b9:	68 58 01 00 00       	push   0x158
c001c8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8c2:	e8 1d c9 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001c8c7:	83 c4 10             	add    esp,0x10
c001c8ca:	83 c4 0c             	add    esp,0xc
c001c8cd:	c3                   	ret    

c001c8ce <NIC::getMAC()>:
c001c8ce:	31 c0                	xor    eax,eax
c001c8d0:	31 d2                	xor    edx,edx
c001c8d2:	c3                   	ret    
c001c8d3:	90                   	nop

c001c8d4 <NIC::write(int, unsigned char*, int*)>:
c001c8d4:	b8 01 00 00 00       	mov    eax,0x1
c001c8d9:	c3                   	ret    

c001c8da <NIC::NIC(char const*)>:
c001c8da:	83 ec 0c             	sub    esp,0xc
c001c8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e1:	83 ec 08             	sub    esp,0x8
c001c8e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8e8:	50                   	push   eax
c001c8e9:	e8 ec eb ff ff       	call   c001b4da <Device::Device(char const*)>
c001c8ee:	83 c4 10             	add    esp,0x10
c001c8f1:	ba d8 22 03 c0       	mov    edx,0xc00322d8
c001c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fa:	89 10                	mov    DWORD PTR [eax],edx
c001c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c900:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c90a:	90                   	nop
c001c90b:	83 c4 0c             	add    esp,0xc
c001c90e:	c3                   	ret    
c001c90f:	90                   	nop

c001c910 <NIC::~NIC()>:
c001c910:	83 ec 0c             	sub    esp,0xc
c001c913:	ba d8 22 03 c0       	mov    edx,0xc00322d8
c001c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91c:	89 10                	mov    DWORD PTR [eax],edx
c001c91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c922:	83 ec 0c             	sub    esp,0xc
c001c925:	50                   	push   eax
c001c926:	e8 4f e9 ff ff       	call   c001b27a <Device::~Device()>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	90                   	nop
c001c92f:	83 c4 0c             	add    esp,0xc
c001c932:	c3                   	ret    
c001c933:	90                   	nop

c001c934 <NIC::~NIC()>:
c001c934:	83 ec 0c             	sub    esp,0xc
c001c937:	83 ec 0c             	sub    esp,0xc
c001c93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c93e:	e8 cd ff ff ff       	call   c001c910 <NIC::~NIC()>
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	83 ec 08             	sub    esp,0x8
c001c949:	68 58 01 00 00       	push   0x158
c001c94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c952:	e8 8d c8 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001c957:	83 c4 10             	add    esp,0x10
c001c95a:	83 c4 0c             	add    esp,0xc
c001c95d:	c3                   	ret    

c001c95e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c95e:	55                   	push   ebp
c001c95f:	57                   	push   edi
c001c960:	56                   	push   esi
c001c961:	53                   	push   ebx
c001c962:	81 ec 28 01 00 00    	sub    esp,0x128
c001c968:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c96f:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001c976:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001c97d:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001c984:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c988:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c98c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c993:	e8 3e ec ff ff       	call   c001b5d6 <Device::getName()>
c001c998:	5a                   	pop    edx
c001c999:	59                   	pop    ecx
c001c99a:	50                   	push   eax
c001c99b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c99f:	55                   	push   ebp
c001c9a0:	e8 ab 3c fe ff       	call   c0000650 <strcpy>
c001c9a5:	5b                   	pop    ebx
c001c9a6:	58                   	pop    eax
c001c9a7:	68 04 23 03 c0       	push   0xc0032304
c001c9ac:	55                   	push   ebp
c001c9ad:	e8 be 3e fe ff       	call   c0000870 <strcat>
c001c9b2:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c9b9:	e8 dd 9a ff ff       	call   c001649b <malloc>
c001c9be:	83 c4 0c             	add    esp,0xc
c001c9c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c9c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c9c9:	89 c3                	mov    ebx,eax
c001c9cb:	57                   	push   edi
c001c9cc:	56                   	push   esi
c001c9cd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c9d4:	55                   	push   ebp
c001c9d5:	50                   	push   eax
c001c9d6:	e8 57 fb ff ff       	call   c001c532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9db:	83 c4 14             	add    esp,0x14
c001c9de:	53                   	push   ebx
c001c9df:	e8 0e fc ff ff       	call   c001c5f2 <LogicalDisk::assignDriveLetter()>
c001c9e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9e7:	e8 c0 fc ff ff       	call   c001c6ac <LogicalDisk::mount()>
c001c9ec:	58                   	pop    eax
c001c9ed:	5a                   	pop    edx
c001c9ee:	53                   	push   ebx
c001c9ef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c9f6:	e8 7d e9 ff ff       	call   c001b378 <Device::addChild(Device*)>
c001c9fb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ca01:	5b                   	pop    ebx
c001ca02:	5e                   	pop    esi
c001ca03:	5f                   	pop    edi
c001ca04:	5d                   	pop    ebp
c001ca05:	c3                   	ret    

c001ca06 <createPartitionsForDisk(PhysicalDisk*)>:
c001ca06:	55                   	push   ebp
c001ca07:	57                   	push   edi
c001ca08:	56                   	push   esi
c001ca09:	53                   	push   ebx
c001ca0a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001ca10:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001ca17:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca1d:	3d 00 02 00 00       	cmp    eax,0x200
c001ca22:	74 27                	je     c001ca4b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001ca24:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001ca2a:	83 ec 10             	sub    esp,0x10
c001ca2d:	99                   	cdq    
c001ca2e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001ca34:	52                   	push   edx
c001ca35:	50                   	push   eax
c001ca36:	0f a4 f7 0a          	shld   edi,esi,0xa
c001ca3a:	c1 e6 0a             	shl    esi,0xa
c001ca3d:	89 fd                	mov    ebp,edi
c001ca3f:	55                   	push   ebp
c001ca40:	56                   	push   esi
c001ca41:	e8 ea 1c 01 00       	call   c002e730 <__udivdi3>
c001ca46:	e9 b9 00 00 00       	jmp    c001cb04 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001ca4b:	83 ec 0c             	sub    esp,0xc
c001ca4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca50:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001ca54:	56                   	push   esi
c001ca55:	6a 01                	push   0x1
c001ca57:	6a 00                	push   0x0
c001ca59:	6a 00                	push   0x0
c001ca5b:	53                   	push   ebx
c001ca5c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ca5f:	83 c4 20             	add    esp,0x20
c001ca62:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001ca6a:	75 0a                	jne    c001ca76 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001ca6c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001ca74:	74 2c                	je     c001caa2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001ca76:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca7c:	83 ec 10             	sub    esp,0x10
c001ca7f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca85:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca8b:	89 f7                	mov    edi,esi
c001ca8d:	c1 ff 1f             	sar    edi,0x1f
c001ca90:	57                   	push   edi
c001ca91:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca95:	56                   	push   esi
c001ca96:	c1 e0 0a             	shl    eax,0xa
c001ca99:	52                   	push   edx
c001ca9a:	50                   	push   eax
c001ca9b:	e8 90 1c 01 00       	call   c002e730 <__udivdi3>
c001caa0:	eb 62                	jmp    c001cb04 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001caa2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001caa9:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001cab0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001cab7:	89 cf                	mov    edi,ecx
c001cab9:	83 e2 7f             	and    edx,0x7f
c001cabc:	83 e7 7f             	and    edi,0x7f
c001cabf:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001cac2:	83 e0 7f             	and    eax,0x7f
c001cac5:	8d 14 01             	lea    edx,[ecx+eax*1]
c001cac8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001cacf:	83 e0 7f             	and    eax,0x7f
c001cad2:	01 d0                	add    eax,edx
c001cad4:	84 c0                	test   al,al
c001cad6:	89 c5                	mov    ebp,eax
c001cad8:	74 41                	je     c001cb1b <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001cada:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cae0:	83 ec 10             	sub    esp,0x10
c001cae3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cae9:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001caef:	89 f7                	mov    edi,esi
c001caf1:	c1 ff 1f             	sar    edi,0x1f
c001caf4:	57                   	push   edi
c001caf5:	0f a4 c2 0a          	shld   edx,eax,0xa
c001caf9:	56                   	push   esi
c001cafa:	c1 e0 0a             	shl    eax,0xa
c001cafd:	52                   	push   edx
c001cafe:	50                   	push   eax
c001caff:	e8 2c 1c 01 00       	call   c002e730 <__udivdi3>
c001cb04:	83 c4 14             	add    esp,0x14
c001cb07:	52                   	push   edx
c001cb08:	50                   	push   eax
c001cb09:	6a 00                	push   0x0
c001cb0b:	6a 00                	push   0x0
c001cb0d:	53                   	push   ebx
c001cb0e:	e8 4b fe ff ff       	call   c001c95e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb13:	83 c4 20             	add    esp,0x20
c001cb16:	e9 73 01 00 00       	jmp    c001cc8e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001cb1b:	89 f0                	mov    eax,esi
c001cb1d:	31 c9                	xor    ecx,ecx
c001cb1f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001cb26:	75 02                	jne    c001cb2a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001cb28:	89 cd                	mov    ebp,ecx
c001cb2a:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001cb32:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001cb39:	83 c0 10             	add    eax,0x10
c001cb3c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001cb44:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001cb4b:	c1 e2 08             	shl    edx,0x8
c001cb4e:	c1 e6 10             	shl    esi,0x10
c001cb51:	09 f2                	or     edx,esi
c001cb53:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001cb5a:	09 f2                	or     edx,esi
c001cb5c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001cb63:	c1 e6 18             	shl    esi,0x18
c001cb66:	09 f2                	or     edx,esi
c001cb68:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001cb6f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001cb73:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cb7a:	c1 e6 10             	shl    esi,0x10
c001cb7d:	c1 e2 08             	shl    edx,0x8
c001cb80:	09 f2                	or     edx,esi
c001cb82:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cb89:	09 f2                	or     edx,esi
c001cb8b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001cb92:	c1 e6 18             	shl    esi,0x18
c001cb95:	09 f2                	or     edx,esi
c001cb97:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cb9b:	41                   	inc    ecx
c001cb9c:	83 f9 04             	cmp    ecx,0x4
c001cb9f:	0f 85 7a ff ff ff    	jne    c001cb1f <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba9:	83 f0 01             	xor    eax,0x1
c001cbac:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cbb0:	75 4f                	jne    c001cc01 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cbb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbb6:	83 f0 01             	xor    eax,0x1
c001cbb9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001cbbd:	75 42                	jne    c001cc01 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001cbbf:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cbc5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cbcd:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cbd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cbdb:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cbe1:	89 f7                	mov    edi,esi
c001cbe3:	c1 ff 1f             	sar    edi,0x1f
c001cbe6:	57                   	push   edi
c001cbe7:	56                   	push   esi
c001cbe8:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cbec:	52                   	push   edx
c001cbed:	c1 e0 0a             	shl    eax,0xa
c001cbf0:	50                   	push   eax
c001cbf1:	e8 3a 1b 01 00       	call   c002e730 <__udivdi3>
c001cbf6:	83 c4 10             	add    esp,0x10
c001cbf9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cbfd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cc01:	89 e8                	mov    eax,ebp
c001cc03:	0f b6 e8             	movzx  ebp,al
c001cc06:	85 ed                	test   ebp,ebp
c001cc08:	74 50                	je     c001cc5a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cc0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc0e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cc12:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc16:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cc1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc1e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cc22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cc26:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cc2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cc2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cc36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc3a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cc3e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cc42:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cc46:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cc4a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cc4e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cc52:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cc56:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cc5a:	31 ed                	xor    ebp,ebp
c001cc5c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cc60:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cc64:	89 f8                	mov    eax,edi
c001cc66:	09 f0                	or     eax,esi
c001cc68:	74 1e                	je     c001cc88 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cc6a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cc6e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cc72:	89 d1                	mov    ecx,edx
c001cc74:	09 c1                	or     ecx,eax
c001cc76:	74 10                	je     c001cc88 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	57                   	push   edi
c001cc7c:	56                   	push   esi
c001cc7d:	52                   	push   edx
c001cc7e:	50                   	push   eax
c001cc7f:	53                   	push   ebx
c001cc80:	e8 d9 fc ff ff       	call   c001c95e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cc85:	83 c4 20             	add    esp,0x20
c001cc88:	45                   	inc    ebp
c001cc89:	83 fd 04             	cmp    ebp,0x4
c001cc8c:	75 ce                	jne    c001cc5c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cc8e:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cc94:	5b                   	pop    ebx
c001cc95:	5e                   	pop    esi
c001cc96:	5f                   	pop    edi
c001cc97:	5d                   	pop    ebp
c001cc98:	c3                   	ret    
c001cc99:	66 90                	xchg   ax,ax
c001cc9b:	90                   	nop

c001cc9c <Serial::Serial(char const*)>:
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca3:	83 ec 08             	sub    esp,0x8
c001cca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccaa:	50                   	push   eax
c001ccab:	e8 2a e8 ff ff       	call   c001b4da <Device::Device(char const*)>
c001ccb0:	83 c4 10             	add    esp,0x10
c001ccb3:	ba 18 23 03 c0       	mov    edx,0xc0032318
c001ccb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbc:	89 10                	mov    DWORD PTR [eax],edx
c001ccbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccc2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cccc:	90                   	nop
c001cccd:	83 c4 0c             	add    esp,0xc
c001ccd0:	c3                   	ret    
c001ccd1:	90                   	nop
c001ccd2:	66 90                	xchg   ax,ax

c001ccd4 <Serial::~Serial()>:
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	ba 18 23 03 c0       	mov    edx,0xc0032318
c001ccdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce0:	89 10                	mov    DWORD PTR [eax],edx
c001cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce6:	83 ec 0c             	sub    esp,0xc
c001cce9:	50                   	push   eax
c001ccea:	e8 8b e5 ff ff       	call   c001b27a <Device::~Device()>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	90                   	nop
c001ccf3:	83 c4 0c             	add    esp,0xc
c001ccf6:	c3                   	ret    
c001ccf7:	90                   	nop

c001ccf8 <Serial::~Serial()>:
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	83 ec 0c             	sub    esp,0xc
c001ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd02:	e8 cd ff ff ff       	call   c001ccd4 <Serial::~Serial()>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	83 ec 08             	sub    esp,0x8
c001cd0d:	68 58 01 00 00       	push   0x158
c001cd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd16:	e8 c9 c4 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001cd1b:	83 c4 10             	add    esp,0x10
c001cd1e:	83 c4 0c             	add    esp,0xc
c001cd21:	c3                   	ret    
c001cd22:	66 90                	xchg   ax,ax

c001cd24 <Timer::Timer(char const*)>:
c001cd24:	83 ec 0c             	sub    esp,0xc
c001cd27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd2b:	83 ec 08             	sub    esp,0x8
c001cd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd32:	50                   	push   eax
c001cd33:	e8 a2 e7 ff ff       	call   c001b4da <Device::Device(char const*)>
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	ba 5c 23 03 c0       	mov    edx,0xc003235c
c001cd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd44:	89 10                	mov    DWORD PTR [eax],edx
c001cd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cd54:	90                   	nop
c001cd55:	83 c4 0c             	add    esp,0xc
c001cd58:	c3                   	ret    
c001cd59:	90                   	nop
c001cd5a:	66 90                	xchg   ax,ax

c001cd5c <Timer::~Timer()>:
c001cd5c:	83 ec 0c             	sub    esp,0xc
c001cd5f:	ba 5c 23 03 c0       	mov    edx,0xc003235c
c001cd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd68:	89 10                	mov    DWORD PTR [eax],edx
c001cd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6e:	83 ec 0c             	sub    esp,0xc
c001cd71:	50                   	push   eax
c001cd72:	e8 03 e5 ff ff       	call   c001b27a <Device::~Device()>
c001cd77:	83 c4 10             	add    esp,0x10
c001cd7a:	90                   	nop
c001cd7b:	83 c4 0c             	add    esp,0xc
c001cd7e:	c3                   	ret    
c001cd7f:	90                   	nop

c001cd80 <Timer::~Timer()>:
c001cd80:	83 ec 0c             	sub    esp,0xc
c001cd83:	83 ec 0c             	sub    esp,0xc
c001cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8a:	e8 cd ff ff ff       	call   c001cd5c <Timer::~Timer()>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	83 ec 08             	sub    esp,0x8
c001cd95:	68 5c 01 00 00       	push   0x15c
c001cd9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd9e:	e8 41 c4 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001cda3:	83 c4 10             	add    esp,0x10
c001cda6:	83 c4 0c             	add    esp,0xc
c001cda9:	c3                   	ret    

c001cdaa <Timer::read()>:
c001cdaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cdae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cdb4:	c3                   	ret    

c001cdb5 <setupTimer(int)>:
c001cdb5:	53                   	push   ebx
c001cdb6:	83 ec 14             	sub    esp,0x14
c001cdb9:	68 5c 01 00 00       	push   0x15c
c001cdbe:	e8 d8 96 ff ff       	call   c001649b <malloc>
c001cdc3:	89 04 24             	mov    DWORD PTR [esp],eax
c001cdc6:	89 c3                	mov    ebx,eax
c001cdc8:	e8 e3 11 01 00       	call   c002dfb0 <PIT::PIT()>
c001cdcd:	58                   	pop    eax
c001cdce:	5a                   	pop    edx
c001cdcf:	53                   	push   ebx
c001cdd0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cdd6:	e8 9d e5 ff ff       	call   c001b378 <Device::addChild(Device*)>
c001cddb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cddd:	6a 00                	push   0x0
c001cddf:	6a 00                	push   0x0
c001cde1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cde5:	53                   	push   ebx
c001cde6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cde9:	83 c4 28             	add    esp,0x28
c001cdec:	89 d8                	mov    eax,ebx
c001cdee:	5b                   	pop    ebx
c001cdef:	c3                   	ret    

c001cdf0 <timerHandler(unsigned int)>:
c001cdf0:	57                   	push   edi
c001cdf1:	56                   	push   esi
c001cdf2:	53                   	push   ebx
c001cdf3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cdf7:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cdfd:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001ce04:	0f 84 46 01 00 00    	je     c001cf50 <timerHandler(unsigned int)+0x160>
c001ce0a:	fa                   	cli    
c001ce0b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ce11:	83 ec 0c             	sub    esp,0xc
c001ce14:	68 e0 01 04 c0       	push   0xc00401e0
c001ce19:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001ce1f:	e8 dc 1e 01 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ce24:	83 c4 10             	add    esp,0x10
c001ce27:	84 c0                	test   al,al
c001ce29:	0f 85 a1 00 00 00    	jne    c001ced0 <timerHandler(unsigned int)+0xe0>
c001ce2f:	83 ec 0c             	sub    esp,0xc
c001ce32:	68 e0 01 04 c0       	push   0xc00401e0
c001ce37:	e8 e0 1e 01 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce3c:	83 c4 10             	add    esp,0x10
c001ce3f:	89 c6                	mov    esi,eax
c001ce41:	8d 76 00             	lea    esi,[esi+0x0]
c001ce44:	83 ec 0c             	sub    esp,0xc
c001ce47:	68 e0 01 04 c0       	push   0xc00401e0
c001ce4c:	e8 cb 1e 01 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce51:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001ce58:	89 c3                	mov    ebx,eax
c001ce5a:	e8 c5 1e 01 00       	call   c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ce5f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ce62:	83 c4 10             	add    esp,0x10
c001ce65:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001ce6b:	77 23                	ja     c001ce90 <timerHandler(unsigned int)+0xa0>
c001ce6d:	83 ec 0c             	sub    esp,0xc
c001ce70:	53                   	push   ebx
c001ce71:	e8 42 87 00 00       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c001ce76:	83 c4 10             	add    esp,0x10
c001ce79:	39 de                	cmp    esi,ebx
c001ce7b:	75 27                	jne    c001cea4 <timerHandler(unsigned int)+0xb4>
c001ce7d:	83 ec 0c             	sub    esp,0xc
c001ce80:	68 e0 01 04 c0       	push   0xc00401e0
c001ce85:	e8 92 1e 01 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ce8a:	89 c6                	mov    esi,eax
c001ce8c:	eb 12                	jmp    c001cea0 <timerHandler(unsigned int)+0xb0>
c001ce8e:	66 90                	xchg   ax,ax
c001ce90:	50                   	push   eax
c001ce91:	50                   	push   eax
c001ce92:	53                   	push   ebx
c001ce93:	68 e0 01 04 c0       	push   0xc00401e0
c001ce98:	e8 43 1f 01 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ce9d:	8d 76 00             	lea    esi,[esi+0x0]
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	90                   	nop
c001cea4:	83 ec 0c             	sub    esp,0xc
c001cea7:	68 e0 01 04 c0       	push   0xc00401e0
c001ceac:	e8 4f 1e 01 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	84 c0                	test   al,al
c001ceb6:	75 18                	jne    c001ced0 <timerHandler(unsigned int)+0xe0>
c001ceb8:	83 ec 0c             	sub    esp,0xc
c001cebb:	68 e0 01 04 c0       	push   0xc00401e0
c001cec0:	e8 57 1e 01 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cec5:	83 c4 10             	add    esp,0x10
c001cec8:	39 f0                	cmp    eax,esi
c001ceca:	0f 85 74 ff ff ff    	jne    c001ce44 <timerHandler(unsigned int)+0x54>
c001ced0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ced5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001ced9:	74 3d                	je     c001cf18 <timerHandler(unsigned int)+0x128>
c001cedb:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001cee2:	74 34                	je     c001cf18 <timerHandler(unsigned int)+0x128>
c001cee4:	fa                   	cli    
c001cee5:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ceeb:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001cef1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cef6:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001cef9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cefe:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001cf01:	77 05                	ja     c001cf08 <timerHandler(unsigned int)+0x118>
c001cf03:	e8 c4 83 00 00       	call   c00252cc <schedule()>
c001cf08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cf0d:	48                   	dec    eax
c001cf0e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cf13:	75 03                	jne    c001cf18 <timerHandler(unsigned int)+0x128>
c001cf15:	fb                   	sti    
c001cf16:	66 90                	xchg   ax,ax
c001cf18:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001cf1d:	48                   	dec    eax
c001cf1e:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001cf23:	75 1b                	jne    c001cf40 <timerHandler(unsigned int)+0x150>
c001cf25:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001cf2c:	74 12                	je     c001cf40 <timerHandler(unsigned int)+0x150>
c001cf2e:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001cf38:	e8 8f 83 00 00       	call   c00252cc <schedule()>
c001cf3d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cf45:	48                   	dec    eax
c001cf46:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cf4b:	75 03                	jne    c001cf50 <timerHandler(unsigned int)+0x160>
c001cf4d:	fb                   	sti    
c001cf4e:	66 90                	xchg   ax,ax
c001cf50:	5b                   	pop    ebx
c001cf51:	5e                   	pop    esi
c001cf52:	5f                   	pop    edi
c001cf53:	c3                   	ret    

c001cf54 <VCache::VCache(PhysicalDisk*)>:
c001cf54:	53                   	push   ebx
c001cf55:	83 ec 18             	sub    esp,0x18
c001cf58:	ba 8c 23 03 c0       	mov    edx,0xc003238c
c001cf5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf61:	89 10                	mov    DWORD PTR [eax],edx
c001cf63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf67:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cf6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf72:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001cf79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf7d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001cf84:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cf8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf8f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cf96:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cf9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfa1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cfb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cfbb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cfc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cfca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfce:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cfd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfd6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cfda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfde:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfe5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cfed:	83 ec 0c             	sub    esp,0xc
c001cff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cff4:	e8 a2 94 ff ff       	call   c001649b <malloc>
c001cff9:	83 c4 10             	add    esp,0x10
c001cffc:	89 c3                	mov    ebx,eax
c001cffe:	83 ec 0c             	sub    esp,0xc
c001d001:	53                   	push   ebx
c001d002:	e8 49 32 00 00       	call   c0020250 <Mutex::Mutex()>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d00e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001d011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d015:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d019:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d01c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d020:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001d027:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d02b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d031:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d035:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d038:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d03c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001d042:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d048:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d04c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001d04f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001d052:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d056:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001d05a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d05e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d064:	05 00 02 00 00       	add    eax,0x200
c001d069:	c1 e0 03             	shl    eax,0x3
c001d06c:	83 ec 0c             	sub    esp,0xc
c001d06f:	50                   	push   eax
c001d070:	e8 26 94 ff ff       	call   c001649b <malloc>
c001d075:	83 c4 10             	add    esp,0x10
c001d078:	89 c2                	mov    edx,eax
c001d07a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d07e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001d081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d085:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001d08c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d090:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001d094:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d098:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d09e:	89 d0                	mov    eax,edx
c001d0a0:	c1 e0 02             	shl    eax,0x2
c001d0a3:	01 d0                	add    eax,edx
c001d0a5:	c1 e0 04             	shl    eax,0x4
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	50                   	push   eax
c001d0ac:	e8 ea 93 ff ff       	call   c001649b <malloc>
c001d0b1:	83 c4 10             	add    esp,0x10
c001d0b4:	89 c2                	mov    edx,eax
c001d0b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d0bd:	90                   	nop
c001d0be:	83 c4 18             	add    esp,0x18
c001d0c1:	5b                   	pop    ebx
c001d0c2:	c3                   	ret    
c001d0c3:	90                   	nop

c001d0c4 <VCache::invalidateReadBuffer()>:
c001d0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0c8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d0ce:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d0d2:	c3                   	ret    
c001d0d3:	90                   	nop

c001d0d4 <VCache::writeWriteBuffer()>:
c001d0d4:	53                   	push   ebx
c001d0d5:	83 ec 08             	sub    esp,0x8
c001d0d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d0dc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d0e0:	74 1e                	je     c001d100 <VCache::writeWriteBuffer()+0x2c>
c001d0e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0ea:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d0ed:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d0f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d0f3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d0f6:	50                   	push   eax
c001d0f7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d0fa:	83 c4 20             	add    esp,0x20
c001d0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001d100:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d107:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d10e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d112:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d119:	83 c4 08             	add    esp,0x8
c001d11c:	5b                   	pop    ebx
c001d11d:	c3                   	ret    
c001d11e:	66 90                	xchg   ax,ax

c001d120 <VCache::~VCache()>:
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	ba 8c 23 03 c0       	mov    edx,0xc003238c
c001d128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12c:	89 10                	mov    DWORD PTR [eax],edx
c001d12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d132:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d135:	0f b6 c0             	movzx  eax,al
c001d138:	85 c0                	test   eax,eax
c001d13a:	74 10                	je     c001d14c <VCache::~VCache()+0x2c>
c001d13c:	83 ec 0c             	sub    esp,0xc
c001d13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d143:	e8 8c ff ff ff       	call   c001d0d4 <VCache::writeWriteBuffer()>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	90                   	nop
c001d14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d150:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d153:	83 ec 0c             	sub    esp,0xc
c001d156:	50                   	push   eax
c001d157:	e8 5f 93 ff ff       	call   c00164bb <free>
c001d15c:	83 c4 10             	add    esp,0x10
c001d15f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d163:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d166:	83 ec 0c             	sub    esp,0xc
c001d169:	50                   	push   eax
c001d16a:	e8 4c 93 ff ff       	call   c00164bb <free>
c001d16f:	83 c4 10             	add    esp,0x10
c001d172:	90                   	nop
c001d173:	83 c4 0c             	add    esp,0xc
c001d176:	c3                   	ret    
c001d177:	90                   	nop

c001d178 <VCache::~VCache()>:
c001d178:	83 ec 0c             	sub    esp,0xc
c001d17b:	83 ec 0c             	sub    esp,0xc
c001d17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d182:	e8 99 ff ff ff       	call   c001d120 <VCache::~VCache()>
c001d187:	83 c4 10             	add    esp,0x10
c001d18a:	83 ec 08             	sub    esp,0x8
c001d18d:	6a 44                	push   0x44
c001d18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d193:	e8 4c c0 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001d198:	83 c4 10             	add    esp,0x10
c001d19b:	83 c4 0c             	add    esp,0xc
c001d19e:	c3                   	ret    
c001d19f:	90                   	nop

c001d1a0 <VCache::write(unsigned long long, int, void*)>:
c001d1a0:	55                   	push   ebp
c001d1a1:	57                   	push   edi
c001d1a2:	56                   	push   esi
c001d1a3:	53                   	push   ebx
c001d1a4:	83 ec 1c             	sub    esp,0x1c
c001d1a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d1af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d1b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d1b7:	e8 7c 7e 00 00       	call   c0025038 <KeDisablePreemption()>
c001d1bc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d1c0:	74 0e                	je     c001d1d0 <VCache::write(unsigned long long, int, void*)+0x30>
c001d1c2:	83 ec 0c             	sub    esp,0xc
c001d1c5:	53                   	push   ebx
c001d1c6:	e8 f9 fe ff ff       	call   c001d0c4 <VCache::invalidateReadBuffer()>
c001d1cb:	83 c4 10             	add    esp,0x10
c001d1ce:	66 90                	xchg   ax,ax
c001d1d0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d1d4:	74 5e                	je     c001d234 <VCache::write(unsigned long long, int, void*)+0x94>
c001d1d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d1d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1dd:	99                   	cdq    
c001d1de:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d1e1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d1e4:	89 c1                	mov    ecx,eax
c001d1e6:	31 f1                	xor    ecx,esi
c001d1e8:	89 d0                	mov    eax,edx
c001d1ea:	31 f8                	xor    eax,edi
c001d1ec:	09 c1                	or     ecx,eax
c001d1ee:	75 38                	jne    c001d228 <VCache::write(unsigned long long, int, void*)+0x88>
c001d1f0:	83 fd 01             	cmp    ebp,0x1
c001d1f3:	75 33                	jne    c001d228 <VCache::write(unsigned long long, int, void*)+0x88>
c001d1f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1f8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d1fc:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d200:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d206:	0f af f9             	imul   edi,ecx
c001d209:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d20c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d20e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d211:	40                   	inc    eax
c001d212:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d215:	83 f8 50             	cmp    eax,0x50
c001d218:	75 66                	jne    c001d280 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d21a:	83 ec 0c             	sub    esp,0xc
c001d21d:	53                   	push   ebx
c001d21e:	e8 b1 fe ff ff       	call   c001d0d4 <VCache::writeWriteBuffer()>
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	eb 58                	jmp    c001d280 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d228:	83 ec 0c             	sub    esp,0xc
c001d22b:	53                   	push   ebx
c001d22c:	e8 a3 fe ff ff       	call   c001d0d4 <VCache::writeWriteBuffer()>
c001d231:	83 c4 10             	add    esp,0x10
c001d234:	83 fd 4f             	cmp    ebp,0x4f
c001d237:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d23a:	7f 20                	jg     c001d25c <VCache::write(unsigned long long, int, void*)+0xbc>
c001d23c:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d23f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d243:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d246:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d249:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d24c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d250:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d258:	eb 26                	jmp    c001d280 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d25a:	66 90                	xchg   ax,ax
c001d25c:	83 ec 0c             	sub    esp,0xc
c001d25f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d261:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d265:	55                   	push   ebp
c001d266:	57                   	push   edi
c001d267:	56                   	push   esi
c001d268:	50                   	push   eax
c001d269:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d26c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d270:	83 c4 20             	add    esp,0x20
c001d273:	e8 e8 7d 00 00       	call   c0025060 <KeRestorePreemption()>
c001d278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27c:	eb 0a                	jmp    c001d288 <VCache::write(unsigned long long, int, void*)+0xe8>
c001d27e:	66 90                	xchg   ax,ax
c001d280:	e8 db 7d 00 00       	call   c0025060 <KeRestorePreemption()>
c001d285:	31 c0                	xor    eax,eax
c001d287:	90                   	nop
c001d288:	83 c4 1c             	add    esp,0x1c
c001d28b:	5b                   	pop    ebx
c001d28c:	5e                   	pop    esi
c001d28d:	5f                   	pop    edi
c001d28e:	5d                   	pop    ebp
c001d28f:	c3                   	ret    

c001d290 <VCache::read(unsigned long long, int, void*)>:
c001d290:	55                   	push   ebp
c001d291:	57                   	push   edi
c001d292:	56                   	push   esi
c001d293:	53                   	push   ebx
c001d294:	83 ec 1c             	sub    esp,0x1c
c001d297:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d29b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d29f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d2a3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d2a7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d2ab:	89 04 24             	mov    DWORD PTR [esp],eax
c001d2ae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d2b2:	e8 81 7d 00 00       	call   c0025038 <KeDisablePreemption()>
c001d2b7:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d2bb:	74 0f                	je     c001d2cc <VCache::read(unsigned long long, int, void*)+0x3c>
c001d2bd:	83 ec 0c             	sub    esp,0xc
c001d2c0:	53                   	push   ebx
c001d2c1:	e8 0e fe ff ff       	call   c001d0d4 <VCache::writeWriteBuffer()>
c001d2c6:	83 c4 10             	add    esp,0x10
c001d2c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d2cc:	83 fe 01             	cmp    esi,0x1
c001d2cf:	0f 85 8b 00 00 00    	jne    c001d360 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d2d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2d8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d2df:	75 7f                	jne    c001d360 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d2e1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d2e4:	89 d1                	mov    ecx,edx
c001d2e6:	f7 d9                	neg    ecx
c001d2e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d2ec:	89 cf                	mov    edi,ecx
c001d2ee:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d2f1:	c1 ff 1f             	sar    edi,0x1f
c001d2f4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d2f8:	89 ce                	mov    esi,ecx
c001d2fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2fe:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d302:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d306:	89 cf                	mov    edi,ecx
c001d308:	74 32                	je     c001d33c <VCache::read(unsigned long long, int, void*)+0xac>
c001d30a:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d30d:	75 2d                	jne    c001d33c <VCache::read(unsigned long long, int, void*)+0xac>
c001d30f:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d312:	75 28                	jne    c001d33c <VCache::read(unsigned long long, int, void*)+0xac>
c001d314:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d317:	89 ef                	mov    edi,ebp
c001d319:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d31f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d322:	8d 70 ff             	lea    esi,[eax-0x1]
c001d325:	23 34 24             	and    esi,DWORD PTR [esp]
c001d328:	0f af f1             	imul   esi,ecx
c001d32b:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d32e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d330:	e8 2b 7d 00 00       	call   c0025060 <KeRestorePreemption()>
c001d335:	31 c0                	xor    eax,eax
c001d337:	eb 57                	jmp    c001d390 <VCache::read(unsigned long long, int, void*)+0x100>
c001d339:	8d 76 00             	lea    esi,[esi+0x0]
c001d33c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d340:	83 ec 0c             	sub    esp,0xc
c001d343:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d346:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d349:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d34b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d34e:	52                   	push   edx
c001d34f:	57                   	push   edi
c001d350:	56                   	push   esi
c001d351:	50                   	push   eax
c001d352:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d355:	83 c4 20             	add    esp,0x20
c001d358:	85 c0                	test   eax,eax
c001d35a:	75 34                	jne    c001d390 <VCache::read(unsigned long long, int, void*)+0x100>
c001d35c:	eb b6                	jmp    c001d314 <VCache::read(unsigned long long, int, void*)+0x84>
c001d35e:	66 90                	xchg   ax,ax
c001d360:	83 ec 0c             	sub    esp,0xc
c001d363:	53                   	push   ebx
c001d364:	e8 5b fd ff ff       	call   c001d0c4 <VCache::invalidateReadBuffer()>
c001d369:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d36c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d36e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d371:	56                   	push   esi
c001d372:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d37a:	50                   	push   eax
c001d37b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d37e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d382:	83 c4 20             	add    esp,0x20
c001d385:	e8 d6 7c 00 00       	call   c0025060 <KeRestorePreemption()>
c001d38a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d38d:	8d 76 00             	lea    esi,[esi+0x0]
c001d390:	83 c4 1c             	add    esp,0x1c
c001d393:	5b                   	pop    ebx
c001d394:	5e                   	pop    esi
c001d395:	5f                   	pop    edi
c001d396:	5d                   	pop    ebp
c001d397:	c3                   	ret    

c001d398 <Video::putrect(int, int, int, int, unsigned int)>:
c001d398:	55                   	push   ebp
c001d399:	57                   	push   edi
c001d39a:	56                   	push   esi
c001d39b:	53                   	push   ebx
c001d39c:	83 ec 1c             	sub    esp,0x1c
c001d39f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d3a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3a7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d3ab:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d3af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d3b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3b7:	01 df                	add    edi,ebx
c001d3b9:	39 fb                	cmp    ebx,edi
c001d3bb:	7d 1f                	jge    c001d3dc <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d3bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d3c1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d3c5:	7d 12                	jge    c001d3d9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d3c7:	8b 16                	mov    edx,DWORD PTR [esi]
c001d3c9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3cd:	53                   	push   ebx
c001d3ce:	55                   	push   ebp
c001d3cf:	45                   	inc    ebp
c001d3d0:	56                   	push   esi
c001d3d1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d3d4:	83 c4 10             	add    esp,0x10
c001d3d7:	eb e8                	jmp    c001d3c1 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d3d9:	43                   	inc    ebx
c001d3da:	eb dd                	jmp    c001d3b9 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d3dc:	83 c4 1c             	add    esp,0x1c
c001d3df:	5b                   	pop    ebx
c001d3e0:	5e                   	pop    esi
c001d3e1:	5f                   	pop    edi
c001d3e2:	5d                   	pop    ebp
c001d3e3:	c3                   	ret    

c001d3e4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d3e4:	55                   	push   ebp
c001d3e5:	57                   	push   edi
c001d3e6:	31 ff                	xor    edi,edi
c001d3e8:	56                   	push   esi
c001d3e9:	53                   	push   ebx
c001d3ea:	83 ec 1c             	sub    esp,0x1c
c001d3ed:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d3f1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d3f5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d3fc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d401:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d405:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d409:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d40d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d410:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d414:	01 f9                	add    ecx,edi
c001d416:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d41a:	7d 2f                	jge    c001d44b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d41c:	31 f6                	xor    esi,esi
c001d41e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d422:	01 f2                	add    edx,esi
c001d424:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d428:	7d 1a                	jge    c001d444 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d42a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d42d:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d430:	46                   	inc    esi
c001d431:	51                   	push   ecx
c001d432:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d436:	52                   	push   edx
c001d437:	55                   	push   ebp
c001d438:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d43b:	83 c4 10             	add    esp,0x10
c001d43e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d442:	eb da                	jmp    c001d41e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d444:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d448:	47                   	inc    edi
c001d449:	eb c5                	jmp    c001d410 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d44b:	83 c4 1c             	add    esp,0x1c
c001d44e:	5b                   	pop    ebx
c001d44f:	5e                   	pop    esi
c001d450:	5f                   	pop    edi
c001d451:	5d                   	pop    ebp
c001d452:	c3                   	ret    
c001d453:	90                   	nop

c001d454 <Video::blit(unsigned int*, int, int, int, int)>:
c001d454:	55                   	push   ebp
c001d455:	ba 00 00 00 00       	mov    edx,0x0
c001d45a:	57                   	push   edi
c001d45b:	56                   	push   esi
c001d45c:	53                   	push   ebx
c001d45d:	83 ec 1c             	sub    esp,0x1c
c001d460:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d464:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d468:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d46c:	85 c0                	test   eax,eax
c001d46e:	0f 49 d0             	cmovns edx,eax
c001d471:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d478:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d47c:	89 eb                	mov    ebx,ebp
c001d47e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d482:	01 ea                	add    edx,ebp
c001d484:	39 da                	cmp    edx,ebx
c001d486:	7e 54                	jle    c001d4dc <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d488:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d48e:	7c 4c                	jl     c001d4dc <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d490:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d494:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d498:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d49c:	01 c1                	add    ecx,eax
c001d49e:	39 f9                	cmp    ecx,edi
c001d4a0:	7e 2f                	jle    c001d4d1 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d4a2:	83 c2 04             	add    edx,0x4
c001d4a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d4ab:	7c 21                	jl     c001d4ce <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d4ad:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d4b1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d4b3:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d4b6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d4ba:	55                   	push   ebp
c001d4bb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d4bf:	56                   	push   esi
c001d4c0:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d4c3:	83 c4 10             	add    esp,0x10
c001d4c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d4ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d4ce:	47                   	inc    edi
c001d4cf:	eb c7                	jmp    c001d498 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d4d1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d4d5:	43                   	inc    ebx
c001d4d6:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d4da:	eb a2                	jmp    c001d47e <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d4dc:	83 c4 1c             	add    esp,0x1c
c001d4df:	5b                   	pop    ebx
c001d4e0:	5e                   	pop    esi
c001d4e1:	5f                   	pop    edi
c001d4e2:	5d                   	pop    ebp
c001d4e3:	c3                   	ret    

c001d4e4 <Video::clearScreen(unsigned int)>:
c001d4e4:	57                   	push   edi
c001d4e5:	56                   	push   esi
c001d4e6:	53                   	push   ebx
c001d4e7:	31 db                	xor    ebx,ebx
c001d4e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4ed:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d4f3:	7e 1f                	jle    c001d514 <Video::clearScreen(unsigned int)+0x30>
c001d4f5:	31 ff                	xor    edi,edi
c001d4f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d4fd:	7e 12                	jle    c001d511 <Video::clearScreen(unsigned int)+0x2d>
c001d4ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001d501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d505:	53                   	push   ebx
c001d506:	57                   	push   edi
c001d507:	47                   	inc    edi
c001d508:	56                   	push   esi
c001d509:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d50c:	83 c4 10             	add    esp,0x10
c001d50f:	eb e6                	jmp    c001d4f7 <Video::clearScreen(unsigned int)+0x13>
c001d511:	43                   	inc    ebx
c001d512:	eb d9                	jmp    c001d4ed <Video::clearScreen(unsigned int)+0x9>
c001d514:	5b                   	pop    ebx
c001d515:	5e                   	pop    esi
c001d516:	5f                   	pop    edi
c001d517:	c3                   	ret    

c001d518 <Video::putpixel(int, int, unsigned int)>:
c001d518:	c7 44 24 04 94 23 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032394
c001d520:	e9 45 2d 00 00       	jmp    c002026a <KePanic(char const*)>
c001d525:	90                   	nop

c001d526 <Video::readPixelApprox(int, int)>:
c001d526:	83 ec 18             	sub    esp,0x18
c001d529:	68 b5 23 03 c0       	push   0xc00323b5
c001d52e:	e8 37 2d 00 00       	call   c002026a <KePanic(char const*)>
c001d533:	31 c0                	xor    eax,eax
c001d535:	83 c4 1c             	add    esp,0x1c
c001d538:	c3                   	ret    
c001d539:	90                   	nop

c001d53a <Video::Video(char const*)>:
c001d53a:	83 ec 0c             	sub    esp,0xc
c001d53d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d541:	83 ec 08             	sub    esp,0x8
c001d544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d548:	50                   	push   eax
c001d549:	e8 8c df ff ff       	call   c001b4da <Device::Device(char const*)>
c001d54e:	83 c4 10             	add    esp,0x10
c001d551:	ba 58 24 03 c0       	mov    edx,0xc0032458
c001d556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d55a:	89 10                	mov    DWORD PTR [eax],edx
c001d55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d560:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d56a:	90                   	nop
c001d56b:	83 c4 0c             	add    esp,0xc
c001d56e:	c3                   	ret    
c001d56f:	90                   	nop

c001d570 <Video::~Video()>:
c001d570:	83 ec 0c             	sub    esp,0xc
c001d573:	ba 58 24 03 c0       	mov    edx,0xc0032458
c001d578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57c:	89 10                	mov    DWORD PTR [eax],edx
c001d57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d582:	83 ec 0c             	sub    esp,0xc
c001d585:	50                   	push   eax
c001d586:	e8 ef dc ff ff       	call   c001b27a <Device::~Device()>
c001d58b:	83 c4 10             	add    esp,0x10
c001d58e:	90                   	nop
c001d58f:	83 c4 0c             	add    esp,0xc
c001d592:	c3                   	ret    
c001d593:	90                   	nop

c001d594 <Video::~Video()>:
c001d594:	83 ec 0c             	sub    esp,0xc
c001d597:	83 ec 0c             	sub    esp,0xc
c001d59a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d59e:	e8 cd ff ff ff       	call   c001d570 <Video::~Video()>
c001d5a3:	83 c4 10             	add    esp,0x10
c001d5a6:	83 ec 08             	sub    esp,0x8
c001d5a9:	68 64 01 00 00       	push   0x164
c001d5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5b2:	e8 2d bc ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c001d5b7:	83 c4 10             	add    esp,0x10
c001d5ba:	83 c4 0c             	add    esp,0xc
c001d5bd:	c3                   	ret    

c001d5be <Video::isMonochrome()>:
c001d5be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d5c8:	c3                   	ret    
c001d5c9:	90                   	nop

c001d5ca <Video::getWidth()>:
c001d5ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5d4:	c3                   	ret    
c001d5d5:	90                   	nop

c001d5d6 <Video::getHeight()>:
c001d5d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d5e0:	c3                   	ret    
c001d5e1:	90                   	nop

c001d5e2 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d5e2:	55                   	push   ebp
c001d5e3:	57                   	push   edi
c001d5e4:	56                   	push   esi
c001d5e5:	53                   	push   ebx
c001d5e6:	83 ec 2c             	sub    esp,0x2c
c001d5e9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d5ed:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d5f1:	83 f8 01             	cmp    eax,0x1
c001d5f4:	19 c9                	sbb    ecx,ecx
c001d5f6:	31 db                	xor    ebx,ebx
c001d5f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d5fc:	89 ce                	mov    esi,ecx
c001d5fe:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d606:	f7 d6                	not    esi
c001d608:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d60e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d612:	01 d8                	add    eax,ebx
c001d614:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d618:	57                   	push   edi
c001d619:	e8 b8 ff ff ff       	call   c001d5d6 <Video::getHeight()>
c001d61e:	59                   	pop    ecx
c001d61f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d623:	7e 70                	jle    c001d695 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d625:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d629:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d62d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d630:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d634:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d638:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d63f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d643:	89 e8                	mov    eax,ebp
c001d645:	83 c0 20             	add    eax,0x20
c001d648:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d64c:	57                   	push   edi
c001d64d:	e8 78 ff ff ff       	call   c001d5ca <Video::getWidth()>
c001d652:	5a                   	pop    edx
c001d653:	39 c5                	cmp    ebp,eax
c001d655:	7d 34                	jge    c001d68b <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d657:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d65c:	74 05                	je     c001d663 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d65e:	8b 07                	mov    eax,DWORD PTR [edi]
c001d660:	56                   	push   esi
c001d661:	eb 0d                	jmp    c001d670 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d663:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d668:	74 12                	je     c001d67c <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d66a:	8b 07                	mov    eax,DWORD PTR [edi]
c001d66c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d670:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d674:	55                   	push   ebp
c001d675:	57                   	push   edi
c001d676:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d679:	83 c4 10             	add    esp,0x10
c001d67c:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d680:	45                   	inc    ebp
c001d681:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d685:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d689:	75 c1                	jne    c001d64c <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d68b:	43                   	inc    ebx
c001d68c:	83 fb 20             	cmp    ebx,0x20
c001d68f:	0f 85 79 ff ff ff    	jne    c001d60e <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d695:	83 c4 2c             	add    esp,0x2c
c001d698:	5b                   	pop    ebx
c001d699:	5e                   	pop    esi
c001d69a:	5f                   	pop    edi
c001d69b:	5d                   	pop    ebp
c001d69c:	c3                   	ret    
c001d69d:	90                   	nop

c001d69e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d69e:	55                   	push   ebp
c001d69f:	57                   	push   edi
c001d6a0:	56                   	push   esi
c001d6a1:	53                   	push   ebx
c001d6a2:	83 ec 48             	sub    esp,0x48
c001d6a5:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d6a9:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d6ad:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d6b1:	c1 e0 08             	shl    eax,0x8
c001d6b4:	01 d0                	add    eax,edx
c001d6b6:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d6ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6be:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d6c2:	c1 e0 08             	shl    eax,0x8
c001d6c5:	01 d0                	add    eax,edx
c001d6c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6cf:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d6d4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d6d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d6dc:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d6e3:	50                   	push   eax
c001d6e4:	e8 b2 8d ff ff       	call   c001649b <malloc>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	85 c0                	test   eax,eax
c001d6ee:	89 c5                	mov    ebp,eax
c001d6f0:	75 10                	jne    c001d702 <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d6f2:	83 ec 0c             	sub    esp,0xc
c001d6f5:	68 e0 23 03 c0       	push   0xc00323e0
c001d6fa:	e8 6b 2b 00 00       	call   c002026a <KePanic(char const*)>
c001d6ff:	83 c4 10             	add    esp,0x10
c001d702:	52                   	push   edx
c001d703:	bf 12 00 00 00       	mov    edi,0x12
c001d708:	52                   	push   edx
c001d709:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d70d:	50                   	push   eax
c001d70e:	68 f0 23 03 c0       	push   0xc00323f0
c001d713:	e8 ca bb ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001d718:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d71b:	83 e0 20             	and    eax,0x20
c001d71e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d722:	85 c0                	test   eax,eax
c001d724:	59                   	pop    ecx
c001d725:	0f 94 c0             	sete   al
c001d728:	0f b6 c0             	movzx  eax,al
c001d72b:	5e                   	pop    esi
c001d72c:	50                   	push   eax
c001d72d:	68 fa 23 03 c0       	push   0xc00323fa
c001d732:	e8 ab bb ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001d737:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001d73b:	83 c4 10             	add    esp,0x10
c001d73e:	85 c0                	test   eax,eax
c001d740:	89 c2                	mov    edx,eax
c001d742:	74 11                	je     c001d755 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001d744:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001d748:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d74c:	c1 ff 03             	sar    edi,0x3
c001d74f:	0f af f9             	imul   edi,ecx
c001d752:	83 c7 12             	add    edi,0x12
c001d755:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d75a:	74 07                	je     c001d763 <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001d75c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d761:	75 12                	jne    c001d775 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001d763:	83 ec 0c             	sub    esp,0xc
c001d766:	68 08 24 03 c0       	push   0xc0032408
c001d76b:	e8 72 bb ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001d770:	e9 aa 02 00 00       	jmp    c001da1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001d775:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d779:	83 f9 02             	cmp    ecx,0x2
c001d77c:	74 0e                	je     c001d78c <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001d77e:	83 f9 0a             	cmp    ecx,0xa
c001d781:	0f 84 d1 00 00 00    	je     c001d858 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001d787:	e9 7e 02 00 00       	jmp    c001da0a <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001d78c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d791:	75 0e                	jne    c001d7a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d793:	84 d2                	test   dl,dl
c001d795:	75 0a                	jne    c001d7a1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d797:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d79a:	83 e8 18             	sub    eax,0x18
c001d79d:	a8 f7                	test   al,0xf7
c001d79f:	74 0d                	je     c001d7ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001d7a1:	83 ec 0c             	sub    esp,0xc
c001d7a4:	68 1d 24 03 c0       	push   0xc003241d
c001d7a9:	e9 64 02 00 00       	jmp    c001da12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d7ae:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d7b6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d7bb:	31 c0                	xor    eax,eax
c001d7bd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d7c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d7c9:	89 c6                	mov    esi,eax
c001d7cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d7d0:	75 15                	jne    c001d7e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d7d2:	99                   	cdq    
c001d7d3:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d7d7:	85 d2                	test   edx,edx
c001d7d9:	75 0c                	jne    c001d7e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d7db:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001d7df:	29 c6                	sub    esi,eax
c001d7e1:	4e                   	dec    esi
c001d7e2:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001d7e7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d7eb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d7f3:	75 0c                	jne    c001d801 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001d7f5:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001d7fa:	c1 e2 18             	shl    edx,0x18
c001d7fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d801:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001d806:	8d 46 01             	lea    eax,[esi+0x1]
c001d809:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001d80d:	c1 e1 10             	shl    ecx,0x10
c001d810:	89 ca                	mov    edx,ecx
c001d812:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001d817:	c1 e1 08             	shl    ecx,0x8
c001d81a:	09 d1                	or     ecx,edx
c001d81c:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d820:	09 d1                	or     ecx,edx
c001d822:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001d826:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001d82a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d82e:	c1 fa 03             	sar    edx,0x3
c001d831:	01 d7                	add    edi,edx
c001d833:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d837:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001d83b:	7e 04                	jle    c001d841 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001d83d:	89 c6                	mov    esi,eax
c001d83f:	eb 8a                	jmp    c001d7cb <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001d841:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001d845:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d849:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d84d:	0f 8f 6e ff ff ff    	jg     c001d7c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001d853:	e9 ce 01 00 00       	jmp    c001da26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d858:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d85d:	75 0e                	jne    c001d86d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d85f:	85 c0                	test   eax,eax
c001d861:	75 0a                	jne    c001d86d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d863:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d866:	83 e8 18             	sub    eax,0x18
c001d869:	a8 f7                	test   al,0xf7
c001d86b:	74 0d                	je     c001d87a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001d86d:	83 ec 0c             	sub    esp,0xc
c001d870:	68 2b 24 03 c0       	push   0xc003242b
c001d875:	e9 98 01 00 00       	jmp    c001da12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d87a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d882:	31 c9                	xor    ecx,ecx
c001d884:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d88c:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001d890:	0f 8d 90 01 00 00    	jge    c001da26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d89a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d89e:	0f 8e 82 01 00 00    	jle    c001da26 <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d8a4:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d8a8:	8d 77 01             	lea    esi,[edi+0x1]
c001d8ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d8af:	83 fa 7f             	cmp    edx,0x7f
c001d8b2:	89 d0                	mov    eax,edx
c001d8b4:	0f 8e a3 00 00 00    	jle    c001d95d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001d8ba:	83 e0 7f             	and    eax,0x7f
c001d8bd:	31 d2                	xor    edx,edx
c001d8bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d8c3:	40                   	inc    eax
c001d8c4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d8cc:	75 08                	jne    c001d8d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001d8ce:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001d8d3:	c1 e2 18             	shl    edx,0x18
c001d8d6:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001d8db:	c1 e0 10             	shl    eax,0x10
c001d8de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d8e2:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001d8e7:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d8eb:	c1 e0 08             	shl    eax,0x8
c001d8ee:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d8f2:	09 f8                	or     eax,edi
c001d8f4:	31 ff                	xor    edi,edi
c001d8f6:	09 d0                	or     eax,edx
c001d8f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d8fc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d901:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d905:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001d90a:	75 1d                	jne    c001d929 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d90c:	89 c8                	mov    eax,ecx
c001d90e:	99                   	cdq    
c001d90f:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d913:	85 d2                	test   edx,edx
c001d915:	75 12                	jne    c001d929 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d917:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d91b:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d91f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d923:	49                   	dec    ecx
c001d924:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d929:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d92d:	8d 51 01             	lea    edx,[ecx+0x1]
c001d930:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001d934:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d938:	8d 47 01             	lea    eax,[edi+0x1]
c001d93b:	7e 06                	jle    c001d943 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001d93d:	89 c7                	mov    edi,eax
c001d93f:	89 d1                	mov    ecx,edx
c001d941:	eb c2                	jmp    c001d905 <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001d943:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d947:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d94b:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d94f:	c1 f8 03             	sar    eax,0x3
c001d952:	01 c6                	add    esi,eax
c001d954:	89 d1                	mov    ecx,edx
c001d956:	89 f7                	mov    edi,esi
c001d958:	e9 2f ff ff ff       	jmp    c001d88c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001d95d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d965:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d969:	40                   	inc    eax
c001d96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d96e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d973:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d977:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d97c:	75 1d                	jne    c001d99b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d97e:	89 c8                	mov    eax,ecx
c001d980:	99                   	cdq    
c001d981:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d985:	85 d2                	test   edx,edx
c001d987:	75 12                	jne    c001d99b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d989:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d98d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d991:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d995:	49                   	dec    ecx
c001d996:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d99b:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d99f:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d9a7:	75 0c                	jne    c001d9b5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001d9a9:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001d9ae:	c1 e7 18             	shl    edi,0x18
c001d9b1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d9b5:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d9ba:	8d 51 01             	lea    edx,[ecx+0x1]
c001d9bd:	c1 e0 10             	shl    eax,0x10
c001d9c0:	89 c7                	mov    edi,eax
c001d9c2:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001d9c7:	c1 e0 08             	shl    eax,0x8
c001d9ca:	09 f8                	or     eax,edi
c001d9cc:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d9d0:	09 f8                	or     eax,edi
c001d9d2:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d9d6:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d9da:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d9de:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d9e2:	c1 f8 03             	sar    eax,0x3
c001d9e5:	01 c6                	add    esi,eax
c001d9e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9eb:	40                   	inc    eax
c001d9ec:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001d9f0:	7e 0b                	jle    c001d9fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001d9f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9f6:	89 d1                	mov    ecx,edx
c001d9f8:	e9 7a ff ff ff       	jmp    c001d977 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001d9fd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001da01:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001da05:	e9 4a ff ff ff       	jmp    c001d954 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001da0a:	50                   	push   eax
c001da0b:	50                   	push   eax
c001da0c:	51                   	push   ecx
c001da0d:	68 3a 24 03 c0       	push   0xc003243a
c001da12:	e8 cb b8 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001da17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da1a:	e8 9c 8a ff ff       	call   c00164bb <free>
c001da1f:	83 c4 10             	add    esp,0x10
c001da22:	31 ed                	xor    ebp,ebp
c001da24:	eb 14                	jmp    c001da3a <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001da26:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001da2a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001da2e:	89 18                	mov    DWORD PTR [eax],ebx
c001da30:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001da34:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da38:	89 18                	mov    DWORD PTR [eax],ebx
c001da3a:	83 c4 3c             	add    esp,0x3c
c001da3d:	89 e8                	mov    eax,ebp
c001da3f:	5b                   	pop    ebx
c001da40:	5e                   	pop    esi
c001da41:	5f                   	pop    edi
c001da42:	5d                   	pop    ebp
c001da43:	c3                   	ret    

c001da44 <Video::putTGA(int, int, unsigned char*, int)>:
c001da44:	55                   	push   ebp
c001da45:	57                   	push   edi
c001da46:	56                   	push   esi
c001da47:	53                   	push   ebx
c001da48:	83 ec 28             	sub    esp,0x28
c001da4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001da4f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da53:	50                   	push   eax
c001da54:	8d 44 24 18          	lea    eax,[esp+0x18]
c001da58:	50                   	push   eax
c001da59:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001da5d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001da61:	55                   	push   ebp
c001da62:	e8 37 fc ff ff       	call   c001d69e <Video::tgaParse(unsigned char*, int, int*, int*)>
c001da67:	83 c4 20             	add    esp,0x20
c001da6a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001da6e:	85 c0                	test   eax,eax
c001da70:	74 3b                	je     c001daad <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001da72:	89 c6                	mov    esi,eax
c001da74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001da78:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001da7c:	39 d8                	cmp    eax,ebx
c001da7e:	7e 2d                	jle    c001daad <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001da80:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001da84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001da88:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001da8c:	39 f8                	cmp    eax,edi
c001da8e:	7e 1a                	jle    c001daaa <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001da90:	83 c6 04             	add    esi,0x4
c001da93:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001da96:	85 c0                	test   eax,eax
c001da98:	79 0d                	jns    c001daa7 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001da9a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001da9d:	50                   	push   eax
c001da9e:	53                   	push   ebx
c001da9f:	57                   	push   edi
c001daa0:	55                   	push   ebp
c001daa1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001daa4:	83 c4 10             	add    esp,0x10
c001daa7:	47                   	inc    edi
c001daa8:	eb da                	jmp    c001da84 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001daaa:	43                   	inc    ebx
c001daab:	eb c7                	jmp    c001da74 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001daad:	83 c4 1c             	add    esp,0x1c
c001dab0:	5b                   	pop    ebx
c001dab1:	5e                   	pop    esi
c001dab2:	5f                   	pop    edi
c001dab3:	5d                   	pop    ebp
c001dab4:	c3                   	ret    
c001dab5:	66 90                	xchg   ax,ax
c001dab7:	90                   	nop

c001dab8 <ACPI::close(int, int, void*)>:
c001dab8:	83 ec 1c             	sub    esp,0x1c
c001dabb:	83 ec 0c             	sub    esp,0xc
c001dabe:	68 9c 24 03 c0       	push   0xc003249c
c001dac3:	e8 1a b8 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001dac8:	83 c4 10             	add    esp,0x10
c001dacb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001dad3:	74 1b                	je     c001daf0 <ACPI::close(int, int, void*)+0x38>
c001dad5:	83 ec 0c             	sub    esp,0xc
c001dad8:	68 ab 24 03 c0       	push   0xc00324ab
c001dadd:	e8 00 b8 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001dae2:	83 c4 10             	add    esp,0x10
c001dae5:	b8 00 00 00 00       	mov    eax,0x0
c001daea:	e9 01 01 00 00       	jmp    c001dbf0 <ACPI::close(int, int, void*)+0x138>
c001daef:	90                   	nop
c001daf0:	83 ec 0c             	sub    esp,0xc
c001daf3:	68 bc 24 03 c0       	push   0xc00324bc
c001daf8:	e8 e5 b7 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001dafd:	83 c4 10             	add    esp,0x10
c001db00:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001db05:	75 45                	jne    c001db4c <ACPI::close(int, int, void*)+0x94>
c001db07:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db0c:	83 ec 08             	sub    esp,0x8
c001db0f:	50                   	push   eax
c001db10:	68 cb 24 03 c0       	push   0xc00324cb
c001db15:	e8 c8 b7 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001db1a:	83 c4 10             	add    esp,0x10
c001db1d:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db22:	85 c0                	test   eax,eax
c001db24:	74 0a                	je     c001db30 <ACPI::close(int, int, void*)+0x78>
c001db26:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db2b:	ff d0                	call   eax
c001db2d:	8d 76 00             	lea    esi,[esi+0x0]
c001db30:	83 ec 0c             	sub    esp,0xc
c001db33:	68 9c 26 03 c0       	push   0xc003269c
c001db38:	e8 2d 27 00 00       	call   c002026a <KePanic(char const*)>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db45:	e9 a6 00 00 00       	jmp    c001dbf0 <ACPI::close(int, int, void*)+0x138>
c001db4a:	66 90                	xchg   ax,ax
c001db4c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001db51:	0f 85 81 00 00 00    	jne    c001dbd8 <ACPI::close(int, int, void*)+0x120>
c001db57:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001db5c:	83 ec 08             	sub    esp,0x8
c001db5f:	50                   	push   eax
c001db60:	68 e9 24 03 c0       	push   0xc00324e9
c001db65:	e8 78 b7 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001db72:	85 c0                	test   eax,eax
c001db74:	74 0a                	je     c001db80 <ACPI::close(int, int, void*)+0xc8>
c001db76:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001db7b:	ff d0                	call   eax
c001db7d:	8d 76 00             	lea    esi,[esi+0x0]
c001db80:	83 ec 0c             	sub    esp,0xc
c001db83:	68 04 25 03 c0       	push   0xc0032504
c001db88:	e8 55 b7 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001db8d:	83 c4 10             	add    esp,0x10
c001db90:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001db95:	8d 76 00             	lea    esi,[esi+0x0]
c001db98:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001db9d:	83 e0 02             	and    eax,0x2
c001dba0:	74 1e                	je     c001dbc0 <ACPI::close(int, int, void*)+0x108>
c001dba2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dba9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbad:	89 c2                	mov    edx,eax
c001dbaf:	ec                   	in     al,dx
c001dbb0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dbb4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001dbb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbbc:	eb da                	jmp    c001db98 <ACPI::close(int, int, void*)+0xe0>
c001dbbe:	66 90                	xchg   ax,ax
c001dbc0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001dbc7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001dbcc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dbd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dbd4:	ee                   	out    dx,al
c001dbd5:	8d 76 00             	lea    esi,[esi+0x0]
c001dbd8:	83 ec 0c             	sub    esp,0xc
c001dbdb:	68 16 25 03 c0       	push   0xc0032516
c001dbe0:	e8 fd b6 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001dbe5:	83 c4 10             	add    esp,0x10
c001dbe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dbed:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf0:	83 c4 1c             	add    esp,0x1c
c001dbf3:	c3                   	ret    

c001dbf4 <findRSDP()>:
c001dbf4:	83 ec 1c             	sub    esp,0x1c
c001dbf7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbfc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dc02:	83 e0 04             	and    eax,0x4
c001dc05:	0f b6 c0             	movzx  eax,al
c001dc08:	85 c0                	test   eax,eax
c001dc0a:	75 08                	jne    c001dc14 <findRSDP()+0x20>
c001dc0c:	b8 00 00 00 00       	mov    eax,0x0
c001dc11:	eb 75                	jmp    c001dc88 <findRSDP()+0x94>
c001dc13:	90                   	nop
c001dc14:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001dc19:	3d ff 07 00 00       	cmp    eax,0x7ff
c001dc1e:	7f 1c                	jg     c001dc3c <findRSDP()+0x48>
c001dc20:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dc25:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dc2b:	83 e2 fb             	and    edx,0xfffffffb
c001dc2e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dc34:	b8 00 00 00 00       	mov    eax,0x0
c001dc39:	eb 4d                	jmp    c001dc88 <findRSDP()+0x94>
c001dc3b:	90                   	nop
c001dc3c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001dc44:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dc4c:	77 32                	ja     c001dc80 <findRSDP()+0x8c>
c001dc4e:	83 ec 04             	sub    esp,0x4
c001dc51:	6a 08                	push   0x8
c001dc53:	68 25 25 03 c0       	push   0xc0032525
c001dc58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dc5c:	e8 1f 27 fe ff       	call   c0000380 <memcmp>
c001dc61:	83 c4 10             	add    esp,0x10
c001dc64:	85 c0                	test   eax,eax
c001dc66:	0f 94 c0             	sete   al
c001dc69:	0f b6 c0             	movzx  eax,al
c001dc6c:	85 c0                	test   eax,eax
c001dc6e:	74 08                	je     c001dc78 <findRSDP()+0x84>
c001dc70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc74:	eb 12                	jmp    c001dc88 <findRSDP()+0x94>
c001dc76:	66 90                	xchg   ax,ax
c001dc78:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dc7d:	eb c5                	jmp    c001dc44 <findRSDP()+0x50>
c001dc7f:	90                   	nop
c001dc80:	b8 00 00 00 00       	mov    eax,0x0
c001dc85:	8d 76 00             	lea    esi,[esi+0x0]
c001dc88:	83 c4 1c             	add    esp,0x1c
c001dc8b:	c3                   	ret    

c001dc8c <loadACPITables(unsigned char*)>:
c001dc8c:	57                   	push   edi
c001dc8d:	56                   	push   esi
c001dc8e:	53                   	push   ebx
c001dc8f:	83 ec 60             	sub    esp,0x60
c001dc92:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dc97:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dc9d:	83 e0 04             	and    eax,0x4
c001dca0:	0f b6 c0             	movzx  eax,al
c001dca3:	85 c0                	test   eax,eax
c001dca5:	0f 84 41 02 00 00    	je     c001deec <loadACPITables(unsigned char*)+0x260>
c001dcab:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dcb0:	0f b6 c0             	movzx  eax,al
c001dcb3:	85 c0                	test   eax,eax
c001dcb5:	74 79                	je     c001dd30 <loadACPITables(unsigned char*)+0xa4>
c001dcb7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dcbb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dcbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dcc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dcc6:	83 e8 24             	sub    eax,0x24
c001dcc9:	c1 e8 03             	shr    eax,0x3
c001dccc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dcd0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dcd8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dcdc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dce0:	0f 8d ba 00 00 00    	jge    c001dda0 <loadACPITables(unsigned char*)+0x114>
c001dce6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dcea:	83 c0 24             	add    eax,0x24
c001dced:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dcf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dcf5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dcf9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dcfd:	c1 e0 03             	shl    eax,0x3
c001dd00:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dd04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dd08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd0d:	89 c1                	mov    ecx,eax
c001dd0f:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dd14:	8d 50 01             	lea    edx,[eax+0x1]
c001dd17:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dd1d:	89 ca                	mov    edx,ecx
c001dd1f:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd26:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dd2b:	eb ab                	jmp    c001dcd8 <loadACPITables(unsigned char*)+0x4c>
c001dd2d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd30:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dd34:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dd38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dd3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd3f:	83 e8 24             	sub    eax,0x24
c001dd42:	c1 e8 02             	shr    eax,0x2
c001dd45:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dd49:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dd51:	8d 76 00             	lea    esi,[esi+0x0]
c001dd54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dd58:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dd5c:	7d 42                	jge    c001dda0 <loadACPITables(unsigned char*)+0x114>
c001dd5e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dd62:	83 c0 24             	add    eax,0x24
c001dd65:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dd69:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd6d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dd71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dd75:	c1 e0 02             	shl    eax,0x2
c001dd78:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dd7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dd80:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd82:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dd87:	8d 50 01             	lea    edx,[eax+0x1]
c001dd8a:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dd90:	89 ca                	mov    edx,ecx
c001dd92:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd99:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dd9e:	eb b4                	jmp    c001dd54 <loadACPITables(unsigned char*)+0xc8>
c001dda0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dda8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001ddad:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001ddb1:	0f 8d 39 01 00 00    	jge    c001def0 <loadACPITables(unsigned char*)+0x264>
c001ddb7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ddbb:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001ddc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ddce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddd2:	25 ff 0f 00 00       	and    eax,0xfff
c001ddd7:	89 c6                	mov    esi,eax
c001ddd9:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dddf:	83 ec 0c             	sub    esp,0xc
c001dde2:	6a 01                	push   0x1
c001dde4:	e8 e4 a1 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c001dde9:	83 c4 10             	add    esp,0x10
c001ddec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ddf0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001ddf6:	83 ec 0c             	sub    esp,0xc
c001ddf9:	6a 01                	push   0x1
c001ddfb:	6a 01                	push   0x1
c001ddfd:	50                   	push   eax
c001ddfe:	52                   	push   edx
c001ddff:	53                   	push   ebx
c001de00:	e8 db aa ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de05:	83 c4 20             	add    esp,0x20
c001de08:	09 f0                	or     eax,esi
c001de0a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de0e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de12:	c1 e0 03             	shl    eax,0x3
c001de15:	05 20 f4 03 c0       	add    eax,0xc003f420
c001de1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de26:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001de2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001de3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001de3e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de42:	89 c6                	mov    esi,eax
c001de44:	89 d7                	mov    edi,edx
c001de46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de48:	89 c8                	mov    eax,ecx
c001de4a:	89 fa                	mov    edx,edi
c001de4c:	89 f3                	mov    ebx,esi
c001de4e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001de52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001de56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001de5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de61:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001de65:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de69:	05 00 10 00 00       	add    eax,0x1000
c001de6e:	c1 e8 0c             	shr    eax,0xc
c001de71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001de75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de79:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de81:	25 ff 0f 00 00       	and    eax,0xfff
c001de86:	89 c6                	mov    esi,eax
c001de88:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001de8e:	83 ec 0c             	sub    esp,0xc
c001de91:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001de95:	e8 33 a1 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c001de9a:	83 c4 10             	add    esp,0x10
c001de9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dea1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dea7:	83 ec 0c             	sub    esp,0xc
c001deaa:	6a 01                	push   0x1
c001deac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001deb0:	50                   	push   eax
c001deb1:	52                   	push   edx
c001deb2:	53                   	push   ebx
c001deb3:	e8 28 aa ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001deb8:	83 c4 20             	add    esp,0x20
c001debb:	09 f0                	or     eax,esi
c001debd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec5:	83 ec 0c             	sub    esp,0xc
c001dec8:	50                   	push   eax
c001dec9:	e8 13 a4 ff ff       	call   c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c001dece:	83 c4 10             	add    esp,0x10
c001ded1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ded5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ded9:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dee0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001dee5:	e9 be fe ff ff       	jmp    c001dda8 <loadACPITables(unsigned char*)+0x11c>
c001deea:	66 90                	xchg   ax,ax
c001deec:	90                   	nop
c001deed:	8d 76 00             	lea    esi,[esi+0x0]
c001def0:	83 c4 60             	add    esp,0x60
c001def3:	5b                   	pop    ebx
c001def4:	5e                   	pop    esi
c001def5:	5f                   	pop    edi
c001def6:	c3                   	ret    
c001def7:	90                   	nop

c001def8 <findRSDT(unsigned char*)>:
c001def8:	57                   	push   edi
c001def9:	56                   	push   esi
c001defa:	53                   	push   ebx
c001defb:	83 ec 50             	sub    esp,0x50
c001defe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df03:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df09:	83 e0 04             	and    eax,0x4
c001df0c:	0f b6 c0             	movzx  eax,al
c001df0f:	85 c0                	test   eax,eax
c001df11:	75 0d                	jne    c001df20 <findRSDT(unsigned char*)+0x28>
c001df13:	b8 00 00 00 00       	mov    eax,0x0
c001df18:	e9 2b 01 00 00       	jmp    c001e048 <findRSDT(unsigned char*)+0x150>
c001df1d:	8d 76 00             	lea    esi,[esi+0x0]
c001df20:	89 e0                	mov    eax,esp
c001df22:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001df26:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001df2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001df2e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001df36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001df3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001df3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001df42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001df46:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001df4a:	89 c6                	mov    esi,eax
c001df4c:	89 d7                	mov    edi,edx
c001df4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df50:	89 c8                	mov    eax,ecx
c001df52:	89 fa                	mov    edx,edi
c001df54:	89 f3                	mov    ebx,esi
c001df56:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001df5a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001df5e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df62:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df66:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001df6a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001df72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001df76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001df7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001df7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df82:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df8a:	25 ff 0f 00 00       	and    eax,0xfff
c001df8f:	89 c6                	mov    esi,eax
c001df91:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df97:	83 ec 0c             	sub    esp,0xc
c001df9a:	6a 02                	push   0x2
c001df9c:	e8 2c a0 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c001dfa1:	83 c4 10             	add    esp,0x10
c001dfa4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dfa8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dfae:	83 ec 0c             	sub    esp,0xc
c001dfb1:	6a 01                	push   0x1
c001dfb3:	6a 02                	push   0x2
c001dfb5:	50                   	push   eax
c001dfb6:	52                   	push   edx
c001dfb7:	53                   	push   ebx
c001dfb8:	e8 23 a9 ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dfbd:	83 c4 20             	add    esp,0x20
c001dfc0:	09 f0                	or     eax,esi
c001dfc2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dfc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dfca:	25 ff 0f 00 00       	and    eax,0xfff
c001dfcf:	89 c6                	mov    esi,eax
c001dfd1:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dfd7:	83 ec 0c             	sub    esp,0xc
c001dfda:	6a 02                	push   0x2
c001dfdc:	e8 ec 9f ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c001dfe1:	83 c4 10             	add    esp,0x10
c001dfe4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dfe8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dfee:	83 ec 0c             	sub    esp,0xc
c001dff1:	6a 01                	push   0x1
c001dff3:	6a 02                	push   0x2
c001dff5:	50                   	push   eax
c001dff6:	52                   	push   edx
c001dff7:	53                   	push   ebx
c001dff8:	e8 e3 a8 ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dffd:	83 c4 20             	add    esp,0x20
c001e000:	09 f0                	or     eax,esi
c001e002:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001e006:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e00b:	85 c0                	test   eax,eax
c001e00d:	75 11                	jne    c001e020 <findRSDT(unsigned char*)+0x128>
c001e00f:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001e016:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e01a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e01e:	eb 24                	jmp    c001e044 <findRSDT(unsigned char*)+0x14c>
c001e020:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001e025:	83 f8 02             	cmp    eax,0x2
c001e028:	75 12                	jne    c001e03c <findRSDT(unsigned char*)+0x144>
c001e02a:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001e031:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e035:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e039:	eb 09                	jmp    c001e044 <findRSDT(unsigned char*)+0x14c>
c001e03b:	90                   	nop
c001e03c:	b8 00 00 00 00       	mov    eax,0x0
c001e041:	eb 05                	jmp    c001e048 <findRSDT(unsigned char*)+0x150>
c001e043:	90                   	nop
c001e044:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e048:	83 c4 50             	add    esp,0x50
c001e04b:	5b                   	pop    ebx
c001e04c:	5e                   	pop    esi
c001e04d:	5f                   	pop    edi
c001e04e:	c3                   	ret    
c001e04f:	90                   	nop

c001e050 <findDataTable(unsigned char*, char*)>:
c001e050:	83 ec 1c             	sub    esp,0x1c
c001e053:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e058:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e05e:	83 e0 04             	and    eax,0x4
c001e061:	0f b6 c0             	movzx  eax,al
c001e064:	85 c0                	test   eax,eax
c001e066:	75 08                	jne    c001e070 <findDataTable(unsigned char*, char*)+0x20>
c001e068:	b8 00 00 00 00       	mov    eax,0x0
c001e06d:	eb 5d                	jmp    c001e0cc <findDataTable(unsigned char*, char*)+0x7c>
c001e06f:	90                   	nop
c001e070:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e078:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001e07d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001e081:	7d 41                	jge    c001e0c4 <findDataTable(unsigned char*, char*)+0x74>
c001e083:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e087:	c1 e0 03             	shl    eax,0x3
c001e08a:	05 20 f4 03 c0       	add    eax,0xc003f420
c001e08f:	83 ec 04             	sub    esp,0x4
c001e092:	6a 04                	push   0x4
c001e094:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e098:	50                   	push   eax
c001e099:	e8 e2 22 fe ff       	call   c0000380 <memcmp>
c001e09e:	83 c4 10             	add    esp,0x10
c001e0a1:	85 c0                	test   eax,eax
c001e0a3:	0f 94 c0             	sete   al
c001e0a6:	0f b6 c0             	movzx  eax,al
c001e0a9:	85 c0                	test   eax,eax
c001e0ab:	74 0f                	je     c001e0bc <findDataTable(unsigned char*, char*)+0x6c>
c001e0ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e0b1:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001e0b8:	eb 12                	jmp    c001e0cc <findDataTable(unsigned char*, char*)+0x7c>
c001e0ba:	66 90                	xchg   ax,ax
c001e0bc:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001e0c1:	eb b5                	jmp    c001e078 <findDataTable(unsigned char*, char*)+0x28>
c001e0c3:	90                   	nop
c001e0c4:	b8 00 00 00 00       	mov    eax,0x0
c001e0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001e0cc:	83 c4 1c             	add    esp,0x1c
c001e0cf:	c3                   	ret    

c001e0d0 <scanMADT()>:
c001e0d0:	53                   	push   ebx
c001e0d1:	83 ec 38             	sub    esp,0x38
c001e0d4:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e0d9:	25 00 04 00 00       	and    eax,0x400
c001e0de:	74 14                	je     c001e0f4 <scanMADT()+0x24>
c001e0e0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0e5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0eb:	83 e2 fb             	and    edx,0xfffffffb
c001e0ee:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0f4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0f9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e0ff:	83 e0 04             	and    eax,0x4
c001e102:	0f b6 c0             	movzx  eax,al
c001e105:	85 c0                	test   eax,eax
c001e107:	0f 84 6b 04 00 00    	je     c001e578 <scanMADT()+0x4a8>
c001e10d:	e8 e2 fa ff ff       	call   c001dbf4 <findRSDP()>
c001e112:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e117:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e11c:	85 c0                	test   eax,eax
c001e11e:	75 1c                	jne    c001e13c <scanMADT()+0x6c>
c001e120:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e125:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e12b:	83 e2 fb             	and    edx,0xfffffffb
c001e12e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e134:	e9 47 04 00 00       	jmp    c001e580 <scanMADT()+0x4b0>
c001e139:	8d 76 00             	lea    esi,[esi+0x0]
c001e13c:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e141:	83 ec 0c             	sub    esp,0xc
c001e144:	50                   	push   eax
c001e145:	e8 ae fd ff ff       	call   c001def8 <findRSDT(unsigned char*)>
c001e14a:	83 c4 10             	add    esp,0x10
c001e14d:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e152:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e157:	85 c0                	test   eax,eax
c001e159:	75 19                	jne    c001e174 <scanMADT()+0xa4>
c001e15b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e160:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e166:	83 e2 fb             	and    edx,0xfffffffb
c001e169:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e16f:	e9 0c 04 00 00       	jmp    c001e580 <scanMADT()+0x4b0>
c001e174:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e179:	83 ec 0c             	sub    esp,0xc
c001e17c:	50                   	push   eax
c001e17d:	e8 0a fb ff ff       	call   c001dc8c <loadACPITables(unsigned char*)>
c001e182:	83 c4 10             	add    esp,0x10
c001e185:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e18a:	83 ec 08             	sub    esp,0x8
c001e18d:	68 2e 25 03 c0       	push   0xc003252e
c001e192:	50                   	push   eax
c001e193:	e8 b8 fe ff ff       	call   c001e050 <findDataTable(unsigned char*, char*)>
c001e198:	83 c4 10             	add    esp,0x10
c001e19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e19f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e1a4:	75 1a                	jne    c001e1c0 <scanMADT()+0xf0>
c001e1a6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e1ab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e1b1:	83 e2 fe             	and    edx,0xfffffffe
c001e1b4:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e1ba:	e9 c1 03 00 00       	jmp    c001e580 <scanMADT()+0x4b0>
c001e1bf:	90                   	nop
c001e1c0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e1c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1cf:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e1d3:	0f 87 a7 03 00 00    	ja     c001e580 <scanMADT()+0x4b0>
c001e1d9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e1e1:	0f 87 99 03 00 00    	ja     c001e580 <scanMADT()+0x4b0>
c001e1e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1eb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e1ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1f3:	8d 50 01             	lea    edx,[eax+0x1]
c001e1f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e202:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e206:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e20a:	8d 50 01             	lea    edx,[eax+0x1]
c001e20d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e211:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e215:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e219:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e21d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e222:	83 f8 02             	cmp    eax,0x2
c001e225:	0f 86 51 03 00 00    	jbe    c001e57c <scanMADT()+0x4ac>
c001e22b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e230:	85 c0                	test   eax,eax
c001e232:	75 58                	jne    c001e28c <scanMADT()+0x1bc>
c001e234:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e238:	8d 50 01             	lea    edx,[eax+0x1]
c001e23b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e23f:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e245:	0f b6 d2             	movzx  edx,dl
c001e248:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e24c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e250:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e256:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e25a:	8d 50 01             	lea    edx,[eax+0x1]
c001e25d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e261:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e267:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e26a:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e270:	0f b6 d2             	movzx  edx,dl
c001e273:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e277:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e27b:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e281:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e286:	e9 d9 02 00 00       	jmp    c001e564 <scanMADT()+0x494>
c001e28b:	90                   	nop
c001e28c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e291:	83 f8 01             	cmp    eax,0x1
c001e294:	0f 85 1a 01 00 00    	jne    c001e3b4 <scanMADT()+0x2e4>
c001e29a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e29e:	8d 50 01             	lea    edx,[eax+0x1]
c001e2a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e2a5:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e2ab:	0f b6 d2             	movzx  edx,dl
c001e2ae:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e2b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e2b6:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e2bc:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e2c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2c9:	01 d0                	add    eax,edx
c001e2cb:	83 c0 2c             	add    eax,0x2c
c001e2ce:	8a 00                	mov    al,BYTE PTR [eax]
c001e2d0:	0f b6 d0             	movzx  edx,al
c001e2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2d7:	8d 48 01             	lea    ecx,[eax+0x1]
c001e2da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e2e2:	0f b6 c0             	movzx  eax,al
c001e2e5:	c1 e0 08             	shl    eax,0x8
c001e2e8:	89 d1                	mov    ecx,edx
c001e2ea:	09 c1                	or     ecx,eax
c001e2ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2f0:	8d 50 02             	lea    edx,[eax+0x2]
c001e2f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2fb:	0f b6 c0             	movzx  eax,al
c001e2fe:	c1 e0 10             	shl    eax,0x10
c001e301:	09 c1                	or     ecx,eax
c001e303:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e307:	8d 50 03             	lea    edx,[eax+0x3]
c001e30a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e30e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e312:	0f b6 c0             	movzx  eax,al
c001e315:	c1 e0 18             	shl    eax,0x18
c001e318:	09 c1                	or     ecx,eax
c001e31a:	89 ca                	mov    edx,ecx
c001e31c:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e321:	0f b6 c0             	movzx  eax,al
c001e324:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e32b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e330:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e334:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e338:	01 d0                	add    eax,edx
c001e33a:	83 c0 2c             	add    eax,0x2c
c001e33d:	8a 00                	mov    al,BYTE PTR [eax]
c001e33f:	0f b6 d0             	movzx  edx,al
c001e342:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e346:	8d 48 01             	lea    ecx,[eax+0x1]
c001e349:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e34d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e351:	0f b6 c0             	movzx  eax,al
c001e354:	c1 e0 08             	shl    eax,0x8
c001e357:	89 d1                	mov    ecx,edx
c001e359:	09 c1                	or     ecx,eax
c001e35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e35f:	8d 50 02             	lea    edx,[eax+0x2]
c001e362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e366:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e36a:	0f b6 c0             	movzx  eax,al
c001e36d:	c1 e0 10             	shl    eax,0x10
c001e370:	09 c1                	or     ecx,eax
c001e372:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e376:	8d 50 03             	lea    edx,[eax+0x3]
c001e379:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e37d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e381:	0f b6 c0             	movzx  eax,al
c001e384:	c1 e0 18             	shl    eax,0x18
c001e387:	09 c1                	or     ecx,eax
c001e389:	89 ca                	mov    edx,ecx
c001e38b:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e390:	0f b6 c0             	movzx  eax,al
c001e393:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e39a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e39f:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e3a4:	83 c0 01             	add    eax,0x1
c001e3a7:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e3ac:	e9 b3 01 00 00       	jmp    c001e564 <scanMADT()+0x494>
c001e3b1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3b4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3b9:	83 f8 02             	cmp    eax,0x2
c001e3bc:	0f 85 ea 00 00 00    	jne    c001e4ac <scanMADT()+0x3dc>
c001e3c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3c6:	8d 50 01             	lea    edx,[eax+0x1]
c001e3c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3d1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3d5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e3d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3dd:	8d 50 01             	lea    edx,[eax+0x1]
c001e3e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3e8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e3ec:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e3f0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e3f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3f8:	01 d0                	add    eax,edx
c001e3fa:	83 c0 2c             	add    eax,0x2c
c001e3fd:	8a 00                	mov    al,BYTE PTR [eax]
c001e3ff:	0f b6 d0             	movzx  edx,al
c001e402:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e406:	8d 48 01             	lea    ecx,[eax+0x1]
c001e409:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e40d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e411:	0f b6 c0             	movzx  eax,al
c001e414:	c1 e0 08             	shl    eax,0x8
c001e417:	89 d1                	mov    ecx,edx
c001e419:	09 c1                	or     ecx,eax
c001e41b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e41f:	8d 50 02             	lea    edx,[eax+0x2]
c001e422:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e426:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e42a:	0f b6 c0             	movzx  eax,al
c001e42d:	c1 e0 10             	shl    eax,0x10
c001e430:	09 c1                	or     ecx,eax
c001e432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e436:	8d 50 03             	lea    edx,[eax+0x3]
c001e439:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e43d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e441:	0f b6 c0             	movzx  eax,al
c001e444:	c1 e0 18             	shl    eax,0x18
c001e447:	09 c8                	or     eax,ecx
c001e449:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e44d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e452:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e456:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e45a:	01 d0                	add    eax,edx
c001e45c:	83 c0 2c             	add    eax,0x2c
c001e45f:	8a 00                	mov    al,BYTE PTR [eax]
c001e461:	0f b6 d0             	movzx  edx,al
c001e464:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e468:	8d 48 01             	lea    ecx,[eax+0x1]
c001e46b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e46f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e473:	0f b6 c0             	movzx  eax,al
c001e476:	c1 e0 08             	shl    eax,0x8
c001e479:	09 d0                	or     eax,edx
c001e47b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e480:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e485:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e48a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e48e:	88 90 48 3d 03 c0    	mov    BYTE PTR [eax-0x3ffcc2b8],dl
c001e494:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e499:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e49e:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e4a6:	e9 b9 00 00 00       	jmp    c001e564 <scanMADT()+0x494>
c001e4ab:	90                   	nop
c001e4ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e4b1:	83 f8 04             	cmp    eax,0x4
c001e4b4:	0f 85 9a 00 00 00    	jne    c001e554 <scanMADT()+0x484>
c001e4ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4be:	8d 50 01             	lea    edx,[eax+0x1]
c001e4c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e4c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e4cd:	0f b6 c0             	movzx  eax,al
c001e4d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4d4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e4d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4dc:	01 d0                	add    eax,edx
c001e4de:	83 c0 2c             	add    eax,0x2c
c001e4e1:	8a 00                	mov    al,BYTE PTR [eax]
c001e4e3:	0f b6 d0             	movzx  edx,al
c001e4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e4ea:	8d 48 01             	lea    ecx,[eax+0x1]
c001e4ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4f1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e4f5:	0f b6 c0             	movzx  eax,al
c001e4f8:	c1 e0 08             	shl    eax,0x8
c001e4fb:	09 d0                	or     eax,edx
c001e4fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e501:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e506:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e50a:	8d 50 01             	lea    edx,[eax+0x1]
c001e50d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e511:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e515:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e519:	0f b6 c0             	movzx  eax,al
c001e51c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e524:	c1 e0 08             	shl    eax,0x8
c001e527:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e52b:	89 c1                	mov    ecx,eax
c001e52d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e531:	c1 e0 18             	shl    eax,0x18
c001e534:	89 c3                	mov    ebx,eax
c001e536:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e53b:	8d 50 01             	lea    edx,[eax+0x1]
c001e53e:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e544:	09 d9                	or     ecx,ebx
c001e546:	89 ca                	mov    edx,ecx
c001e548:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e54f:	eb 13                	jmp    c001e564 <scanMADT()+0x494>
c001e551:	8d 76 00             	lea    esi,[esi+0x0]
c001e554:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e559:	83 f8 05             	cmp    eax,0x5
c001e55c:	75 06                	jne    c001e564 <scanMADT()+0x494>
c001e55e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e563:	90                   	nop
c001e564:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e569:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e56d:	01 d0                	add    eax,edx
c001e56f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e573:	e9 50 fc ff ff       	jmp    c001e1c8 <scanMADT()+0xf8>
c001e578:	90                   	nop
c001e579:	eb 05                	jmp    c001e580 <scanMADT()+0x4b0>
c001e57b:	90                   	nop
c001e57c:	90                   	nop
c001e57d:	8d 76 00             	lea    esi,[esi+0x0]
c001e580:	83 c4 38             	add    esp,0x38
c001e583:	5b                   	pop    ebx
c001e584:	c3                   	ret    
c001e585:	90                   	nop
c001e586:	66 90                	xchg   ax,ax

c001e588 <ACPI::ACPI()>:
c001e588:	83 ec 0c             	sub    esp,0xc
c001e58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e58f:	83 ec 08             	sub    esp,0x8
c001e592:	68 33 25 03 c0       	push   0xc0032533
c001e597:	50                   	push   eax
c001e598:	e8 3d cf ff ff       	call   c001b4da <Device::Device(char const*)>
c001e59d:	83 c4 10             	add    esp,0x10
c001e5a0:	ba 40 27 03 c0       	mov    edx,0xc0032740
c001e5a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a9:	89 10                	mov    DWORD PTR [eax],edx
c001e5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5af:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e5b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ba:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5c8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e5d2:	e8 f9 fa ff ff       	call   c001e0d0 <scanMADT()>
c001e5d7:	90                   	nop
c001e5d8:	83 c4 0c             	add    esp,0xc
c001e5db:	c3                   	ret    

c001e5dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e5dc:	83 ec 2c             	sub    esp,0x2c
c001e5df:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e5e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e5e7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5eb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e5ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e5f4:	88 c8                	mov    al,cl
c001e5f6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e5fa:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e5ff:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e607:	90                   	nop
c001e608:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e60c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e612:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e616:	0f 8d b0 00 00 00    	jge    c001e6cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e61c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e620:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e624:	83 c2 2a             	add    edx,0x2a
c001e627:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e62b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e630:	0f b7 c0             	movzx  eax,ax
c001e633:	39 c2                	cmp    edx,eax
c001e635:	0f 85 85 00 00 00    	jne    c001e6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e63b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e63f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e643:	83 c2 2a             	add    edx,0x2a
c001e646:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e64a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e64f:	0f b6 c0             	movzx  eax,al
c001e652:	39 c2                	cmp    edx,eax
c001e654:	75 6a                	jne    c001e6c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e656:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e65b:	85 c0                	test   eax,eax
c001e65d:	74 3d                	je     c001e69c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e65f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e663:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e667:	83 c2 2a             	add    edx,0x2a
c001e66a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e66e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e672:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e675:	39 c2                	cmp    edx,eax
c001e677:	74 13                	je     c001e68c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e679:	83 ec 0c             	sub    esp,0xc
c001e67c:	68 c0 26 03 c0       	push   0xc00326c0
c001e681:	e8 e4 1b 00 00       	call   c002026a <KePanic(char const*)>
c001e686:	83 c4 10             	add    esp,0x10
c001e689:	8d 76 00             	lea    esi,[esi+0x0]
c001e68c:	83 ec 0c             	sub    esp,0xc
c001e68f:	68 38 25 03 c0       	push   0xc0032538
c001e694:	e8 d1 1b 00 00       	call   c002026a <KePanic(char const*)>
c001e699:	83 c4 10             	add    esp,0x10
c001e69c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e6a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e6a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e6a8:	83 c2 2a             	add    edx,0x2a
c001e6ab:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e6af:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6b1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e6b4:	89 01                	mov    DWORD PTR [ecx],eax
c001e6b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6b9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6be:	66 90                	xchg   ax,ax
c001e6c0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e6c5:	e9 3e ff ff ff       	jmp    c001e608 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e6ca:	66 90                	xchg   ax,ax
c001e6cc:	90                   	nop
c001e6cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e6d1:	83 c4 2c             	add    esp,0x2c
c001e6d4:	c2 04 00             	ret    0x4
c001e6d7:	90                   	nop

c001e6d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e6d8:	83 ec 1c             	sub    esp,0x1c
c001e6db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e6df:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e6e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e6e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e6ec:	88 c8                	mov    al,cl
c001e6ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e6f2:	88 d0                	mov    al,dl
c001e6f4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e6f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6fc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e706:	83 c2 2a             	add    edx,0x2a
c001e709:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e70d:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e711:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e715:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e71f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e726:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e72b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e72f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e735:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e739:	83 c0 01             	add    eax,0x1
c001e73c:	88 c1                	mov    cl,al
c001e73e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e742:	83 c2 2a             	add    edx,0x2a
c001e745:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e757:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e75a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e75e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e766:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e76c:	8d 50 01             	lea    edx,[eax+0x1]
c001e76f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e773:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e77d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e783:	3d 00 02 00 00       	cmp    eax,0x200
c001e788:	75 12                	jne    c001e79c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e78a:	83 ec 0c             	sub    esp,0xc
c001e78d:	68 47 25 03 c0       	push   0xc0032547
c001e792:	e8 d3 1a 00 00       	call   c002026a <KePanic(char const*)>
c001e797:	83 c4 10             	add    esp,0x10
c001e79a:	66 90                	xchg   ax,ax
c001e79c:	90                   	nop
c001e79d:	83 c4 1c             	add    esp,0x1c
c001e7a0:	c3                   	ret    
c001e7a1:	90                   	nop
c001e7a2:	66 90                	xchg   ax,ax

c001e7a4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e7a4:	b8 00 00 00 00       	mov    eax,0x0
c001e7a9:	c3                   	ret    
c001e7aa:	66 90                	xchg   ax,ax

c001e7ac <ACPI::detectPCI()>:
c001e7ac:	53                   	push   ebx
c001e7ad:	83 ec 28             	sub    esp,0x28
c001e7b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e7b5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e7ba:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e7bf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e7c5:	83 e0 04             	and    eax,0x4
c001e7c8:	0f b6 c0             	movzx  eax,al
c001e7cb:	85 c0                	test   eax,eax
c001e7cd:	74 2d                	je     c001e7fc <ACPI::detectPCI()+0x50>
c001e7cf:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e7d4:	83 ec 08             	sub    esp,0x8
c001e7d7:	68 64 25 03 c0       	push   0xc0032564
c001e7dc:	50                   	push   eax
c001e7dd:	e8 6e f8 ff ff       	call   c001e050 <findDataTable(unsigned char*, char*)>
c001e7e2:	83 c4 10             	add    esp,0x10
c001e7e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e7e9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e7ee:	74 0c                	je     c001e7fc <ACPI::detectPCI()+0x50>
c001e7f0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7f5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7fa:	66 90                	xchg   ax,ax
c001e7fc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e804:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e808:	8a 00                	mov    al,BYTE PTR [eax]
c001e80a:	0f b6 c0             	movzx  eax,al
c001e80d:	83 f8 01             	cmp    eax,0x1
c001e810:	75 0e                	jne    c001e820 <ACPI::detectPCI()+0x74>
c001e812:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e817:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e81c:	eb 2e                	jmp    c001e84c <ACPI::detectPCI()+0xa0>
c001e81e:	66 90                	xchg   ax,ax
c001e820:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e824:	8a 00                	mov    al,BYTE PTR [eax]
c001e826:	0f b6 c0             	movzx  eax,al
c001e829:	83 f8 02             	cmp    eax,0x2
c001e82c:	75 1e                	jne    c001e84c <ACPI::detectPCI()+0xa0>
c001e82e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e833:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e838:	85 c0                	test   eax,eax
c001e83a:	74 10                	je     c001e84c <ACPI::detectPCI()+0xa0>
c001e83c:	83 ec 0c             	sub    esp,0xc
c001e83f:	68 f0 26 03 c0       	push   0xc00326f0
c001e844:	e8 21 1a 00 00       	call   c002026a <KePanic(char const*)>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e850:	83 f0 01             	xor    eax,0x1
c001e853:	0f b6 c0             	movzx  eax,al
c001e856:	85 c0                	test   eax,eax
c001e858:	74 46                	je     c001e8a0 <ACPI::detectPCI()+0xf4>
c001e85a:	e8 d1 18 fe ff       	call   c0000130 <manualPCIProbe>
c001e85f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e863:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e868:	75 0e                	jne    c001e878 <ACPI::detectPCI()+0xcc>
c001e86a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e86f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e874:	eb 2a                	jmp    c001e8a0 <ACPI::detectPCI()+0xf4>
c001e876:	66 90                	xchg   ax,ax
c001e878:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e87d:	75 21                	jne    c001e8a0 <ACPI::detectPCI()+0xf4>
c001e87f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e884:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e889:	85 c0                	test   eax,eax
c001e88b:	74 13                	je     c001e8a0 <ACPI::detectPCI()+0xf4>
c001e88d:	83 ec 0c             	sub    esp,0xc
c001e890:	68 f0 26 03 c0       	push   0xc00326f0
c001e895:	e8 d0 19 00 00       	call   c002026a <KePanic(char const*)>
c001e89a:	83 c4 10             	add    esp,0x10
c001e89d:	8d 76 00             	lea    esi,[esi+0x0]
c001e8a0:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e8a5:	85 c0                	test   eax,eax
c001e8a7:	0f 84 87 00 00 00    	je     c001e934 <ACPI::detectPCI()+0x188>
c001e8ad:	83 ec 0c             	sub    esp,0xc
c001e8b0:	68 69 25 03 c0       	push   0xc0032569
c001e8b5:	e8 4f 12 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001e8ba:	83 c4 10             	add    esp,0x10
c001e8bd:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e8c5:	83 ec 0c             	sub    esp,0xc
c001e8c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8cc:	e8 ca 7b ff ff       	call   c001649b <malloc>
c001e8d1:	83 c4 10             	add    esp,0x10
c001e8d4:	89 c3                	mov    ebx,eax
c001e8d6:	83 ec 0c             	sub    esp,0xc
c001e8d9:	53                   	push   ebx
c001e8da:	e8 43 b8 00 00       	call   c002a122 <PCI::PCI()>
c001e8df:	83 c4 10             	add    esp,0x10
c001e8e2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e8e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8ea:	83 ec 08             	sub    esp,0x8
c001e8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e8f1:	50                   	push   eax
c001e8f2:	e8 81 ca ff ff       	call   c001b378 <Device::addChild(Device*)>
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8fe:	8b 00                	mov    eax,DWORD PTR [eax]
c001e900:	83 c0 08             	add    eax,0x8
c001e903:	8b 00                	mov    eax,DWORD PTR [eax]
c001e905:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e90a:	85 d2                	test   edx,edx
c001e90c:	74 0a                	je     c001e918 <ACPI::detectPCI()+0x16c>
c001e90e:	ba 01 00 00 00       	mov    edx,0x1
c001e913:	eb 0b                	jmp    c001e920 <ACPI::detectPCI()+0x174>
c001e915:	8d 76 00             	lea    esi,[esi+0x0]
c001e918:	ba 02 00 00 00       	mov    edx,0x2
c001e91d:	8d 76 00             	lea    esi,[esi+0x0]
c001e920:	6a 00                	push   0x0
c001e922:	6a 00                	push   0x0
c001e924:	52                   	push   edx
c001e925:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e929:	ff d0                	call   eax
c001e92b:	83 c4 10             	add    esp,0x10
c001e92e:	e9 91 00 00 00       	jmp    c001e9c4 <ACPI::detectPCI()+0x218>
c001e933:	90                   	nop
c001e934:	83 ec 0c             	sub    esp,0xc
c001e937:	68 81 25 03 c0       	push   0xc0032581
c001e93c:	e8 c8 11 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e94b:	83 ec 0c             	sub    esp,0xc
c001e94e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e952:	e8 44 7b ff ff       	call   c001649b <malloc>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	89 c3                	mov    ebx,eax
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	53                   	push   ebx
c001e960:	e8 65 c3 00 00       	call   c002acca <IDE::IDE()>
c001e965:	83 c4 10             	add    esp,0x10
c001e968:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e96c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e970:	83 ec 08             	sub    esp,0x8
c001e973:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e977:	50                   	push   eax
c001e978:	e8 fb c9 ff ff       	call   c001b378 <Device::addChild(Device*)>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e984:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e992:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e99b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e99f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e9a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ae:	83 c0 08             	add    eax,0x8
c001e9b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9b3:	6a 00                	push   0x0
c001e9b5:	6a 00                	push   0x0
c001e9b7:	6a 00                	push   0x0
c001e9b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e9bd:	ff d0                	call   eax
c001e9bf:	83 c4 10             	add    esp,0x10
c001e9c2:	66 90                	xchg   ax,ax
c001e9c4:	90                   	nop
c001e9c5:	83 c4 28             	add    esp,0x28
c001e9c8:	5b                   	pop    ebx
c001e9c9:	c3                   	ret    
c001e9ca:	66 90                	xchg   ax,ax

c001e9cc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e9cc:	83 ec 1c             	sub    esp,0x1c
c001e9cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e9d3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e9d6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e9da:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e9df:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e9e4:	83 ec 08             	sub    esp,0x8
c001e9e7:	52                   	push   edx
c001e9e8:	50                   	push   eax
c001e9e9:	e8 76 71 ff ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c001e9ee:	83 c4 10             	add    esp,0x10
c001e9f1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e9f5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e9fa:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e9ff:	83 ec 04             	sub    esp,0x4
c001ea02:	6a 01                	push   0x1
c001ea04:	52                   	push   edx
c001ea05:	50                   	push   eax
c001ea06:	e8 71 72 ff ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	90                   	nop
c001ea0f:	83 c4 1c             	add    esp,0x1c
c001ea12:	c3                   	ret    
c001ea13:	90                   	nop

c001ea14 <ACPI::sleep()>:
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ea1c:	85 c0                	test   eax,eax
c001ea1e:	74 08                	je     c001ea28 <ACPI::sleep()+0x14>
c001ea20:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001ea25:	ff d0                	call   eax
c001ea27:	90                   	nop
c001ea28:	90                   	nop
c001ea29:	83 c4 0c             	add    esp,0xc
c001ea2c:	c3                   	ret    
c001ea2d:	90                   	nop
c001ea2e:	66 90                	xchg   ax,ax

c001ea30 <ACPI::open(int, int, void*)>:
c001ea30:	55                   	push   ebp
c001ea31:	89 e5                	mov    ebp,esp
c001ea33:	53                   	push   ebx
c001ea34:	81 ec 74 01 00 00    	sub    esp,0x174
c001ea3a:	83 ec 0c             	sub    esp,0xc
c001ea3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ea40:	e8 67 fd ff ff       	call   c001e7ac <ACPI::detectPCI()>
c001ea45:	83 c4 10             	add    esp,0x10
c001ea48:	83 ec 0c             	sub    esp,0xc
c001ea4b:	68 18 27 03 c0       	push   0xc0032718
c001ea50:	e8 b4 10 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001ea55:	83 c4 10             	add    esp,0x10
c001ea58:	b8 4c 05 00 00       	mov    eax,0x54c
c001ea5d:	8a 00                	mov    al,BYTE PTR [eax]
c001ea5f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001ea62:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ea66:	83 f8 01             	cmp    eax,0x1
c001ea69:	75 15                	jne    c001ea80 <ACPI::open(int, int, void*)+0x50>
c001ea6b:	83 ec 0c             	sub    esp,0xc
c001ea6e:	68 96 25 03 c0       	push   0xc0032596
c001ea73:	e8 41 53 00 00       	call   c0023db9 <Thr::loadKernelSymbolTable(char const*)>
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	eb 33                	jmp    c001eab0 <ACPI::open(int, int, void*)+0x80>
c001ea7d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea80:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001ea84:	3d bb 00 00 00       	cmp    eax,0xbb
c001ea89:	75 15                	jne    c001eaa0 <ACPI::open(int, int, void*)+0x70>
c001ea8b:	83 ec 0c             	sub    esp,0xc
c001ea8e:	68 b4 25 03 c0       	push   0xc00325b4
c001ea93:	e8 21 53 00 00       	call   c0023db9 <Thr::loadKernelSymbolTable(char const*)>
c001ea98:	83 c4 10             	add    esp,0x10
c001ea9b:	eb 13                	jmp    c001eab0 <ACPI::open(int, int, void*)+0x80>
c001ea9d:	8d 76 00             	lea    esi,[esi+0x0]
c001eaa0:	83 ec 0c             	sub    esp,0xc
c001eaa3:	68 d2 25 03 c0       	push   0xc00325d2
c001eaa8:	e8 bd 17 00 00       	call   c002026a <KePanic(char const*)>
c001eaad:	83 c4 10             	add    esp,0x10
c001eab0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001eab4:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001eabb:	83 ec 0c             	sub    esp,0xc
c001eabe:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001eac1:	e8 d5 79 ff ff       	call   c001649b <malloc>
c001eac6:	83 c4 10             	add    esp,0x10
c001eac9:	89 c3                	mov    ebx,eax
c001eacb:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ead0:	83 ec 04             	sub    esp,0x4
c001ead3:	50                   	push   eax
c001ead4:	68 ec 25 03 c0       	push   0xc00325ec
c001ead9:	53                   	push   ebx
c001eada:	e8 1b ba ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c001eadf:	83 c4 10             	add    esp,0x10
c001eae2:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001eae5:	83 ec 08             	sub    esp,0x8
c001eae8:	6a 01                	push   0x1
c001eaea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001eaed:	e8 26 ba ff ff       	call   c001a518 <File::open(FileOpenMode)>
c001eaf2:	83 c4 10             	add    esp,0x10
c001eaf5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001eaf8:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001eafc:	75 12                	jne    c001eb10 <ACPI::open(int, int, void*)+0xe0>
c001eafe:	83 ec 0c             	sub    esp,0xc
c001eb01:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001eb04:	e8 6d ba ff ff       	call   c001a576 <File::close()>
c001eb09:	83 c4 10             	add    esp,0x10
c001eb0c:	eb 06                	jmp    c001eb14 <ACPI::open(int, int, void*)+0xe4>
c001eb0e:	66 90                	xchg   ax,ax
c001eb10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001eb14:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001eb18:	74 16                	je     c001eb30 <ACPI::open(int, int, void*)+0x100>
c001eb1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001eb1d:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb1f:	83 c0 08             	add    eax,0x8
c001eb22:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb24:	83 ec 0c             	sub    esp,0xc
c001eb27:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001eb2a:	ff d0                	call   eax
c001eb2c:	83 c4 10             	add    esp,0x10
c001eb2f:	90                   	nop
c001eb30:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001eb33:	83 f0 01             	xor    eax,0x1
c001eb36:	0f b6 c0             	movzx  eax,al
c001eb39:	85 c0                	test   eax,eax
c001eb3b:	74 3b                	je     c001eb78 <ACPI::open(int, int, void*)+0x148>
c001eb3d:	83 ec 0c             	sub    esp,0xc
c001eb40:	68 0a 26 03 c0       	push   0xc003260a
c001eb45:	e8 bf 0f 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001eb4a:	83 c4 10             	add    esp,0x10
c001eb4d:	83 ec 04             	sub    esp,0x4
c001eb50:	6a 0c                	push   0xc
c001eb52:	68 25 26 03 c0       	push   0xc0032625
c001eb57:	68 36 26 03 c0       	push   0xc0032636
c001eb5c:	e8 90 44 00 00       	call   c0022ff1 <Reg::readIntWithDefault(char*, char*, int)>
c001eb61:	83 c4 10             	add    esp,0x10
c001eb64:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001eb67:	83 ec 0c             	sub    esp,0xc
c001eb6a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001eb6d:	e8 80 96 ff ff       	call   c00181f2 <Virt::setupPageSwapping(int)>
c001eb72:	83 c4 10             	add    esp,0x10
c001eb75:	8d 76 00             	lea    esi,[esi+0x0]
c001eb78:	83 ec 0c             	sub    esp,0xc
c001eb7b:	68 64 10 03 c0       	push   0xc0031064
c001eb80:	e8 84 0f 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001eb85:	83 c4 10             	add    esp,0x10
c001eb88:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eb8b:	83 ec 08             	sub    esp,0x8
c001eb8e:	6a 13                	push   0x13
c001eb90:	50                   	push   eax
c001eb91:	e8 10 cb ff ff       	call   c001b6a6 <getDevicesOfType(DeviceType)>
c001eb96:	83 c4 0c             	add    esp,0xc
c001eb99:	8d 76 00             	lea    esi,[esi+0x0]
c001eb9c:	83 ec 0c             	sub    esp,0xc
c001eb9f:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eba2:	50                   	push   eax
c001eba3:	e8 68 03 01 00       	call   c002ef10 <LinkedList<Device>::isEmpty()>
c001eba8:	83 c4 10             	add    esp,0x10
c001ebab:	83 f0 01             	xor    eax,0x1
c001ebae:	0f b6 c0             	movzx  eax,al
c001ebb1:	85 c0                	test   eax,eax
c001ebb3:	0f 84 1f 01 00 00    	je     c001ecd8 <ACPI::open(int, int, void*)+0x2a8>
c001ebb9:	83 ec 0c             	sub    esp,0xc
c001ebbc:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ebbf:	50                   	push   eax
c001ebc0:	e8 67 03 01 00       	call   c002ef2c <LinkedList<Device>::getFirstElement()>
c001ebc5:	83 c4 10             	add    esp,0x10
c001ebc8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ebcb:	83 ec 0c             	sub    esp,0xc
c001ebce:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ebd1:	50                   	push   eax
c001ebd2:	e8 5d 03 01 00       	call   c002ef34 <LinkedList<Device>::removeFirst()>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001ebdd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001ebe0:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001ebe3:	b8 24 00 00 00       	mov    eax,0x24
c001ebe8:	83 e0 fc             	and    eax,0xfffffffc
c001ebeb:	89 c3                	mov    ebx,eax
c001ebed:	b8 00 00 00 00       	mov    eax,0x0
c001ebf2:	66 90                	xchg   ax,ax
c001ebf4:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001ebfb:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001ec02:	83 c0 04             	add    eax,0x4
c001ec05:	39 d8                	cmp    eax,ebx
c001ec07:	72 eb                	jb     c001ebf4 <ACPI::open(int, int, void*)+0x1c4>
c001ec09:	83 ec 08             	sub    esp,0x8
c001ec0c:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001ec12:	50                   	push   eax
c001ec13:	83 ec 24             	sub    esp,0x24
c001ec16:	89 e1                	mov    ecx,esp
c001ec18:	b8 24 00 00 00       	mov    eax,0x24
c001ec1d:	83 e0 fc             	and    eax,0xfffffffc
c001ec20:	89 c3                	mov    ebx,eax
c001ec22:	b8 00 00 00 00       	mov    eax,0x0
c001ec27:	90                   	nop
c001ec28:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001ec2f:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001ec32:	83 c0 04             	add    eax,0x4
c001ec35:	39 d8                	cmp    eax,ebx
c001ec37:	72 ef                	jb     c001ec28 <ACPI::open(int, int, void*)+0x1f8>
c001ec39:	e8 cc b9 00 00       	call   c002a60a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001ec3e:	83 c4 30             	add    esp,0x30
c001ec41:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec44:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001ec48:	0f 84 4e ff ff ff    	je     c001eb9c <ACPI::open(int, int, void*)+0x16c>
c001ec4e:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001ec55:	83 ec 0c             	sub    esp,0xc
c001ec58:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001ec5b:	e8 3b 78 ff ff       	call   c001649b <malloc>
c001ec60:	83 c4 10             	add    esp,0x10
c001ec63:	89 c3                	mov    ebx,eax
c001ec65:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec6a:	83 ec 04             	sub    esp,0x4
c001ec6d:	50                   	push   eax
c001ec6e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ec71:	53                   	push   ebx
c001ec72:	e8 83 b8 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c001ec77:	83 c4 10             	add    esp,0x10
c001ec7a:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001ec7d:	83 ec 0c             	sub    esp,0xc
c001ec80:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ec83:	e8 54 bb ff ff       	call   c001a7dc <File::exists()>
c001ec88:	83 c4 10             	add    esp,0x10
c001ec8b:	0f b6 c0             	movzx  eax,al
c001ec8e:	85 c0                	test   eax,eax
c001ec90:	74 22                	je     c001ecb4 <ACPI::open(int, int, void*)+0x284>
c001ec92:	83 ec 08             	sub    esp,0x8
c001ec95:	6a 01                	push   0x1
c001ec97:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ec9a:	e8 9c 5b 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001ec9f:	83 c4 10             	add    esp,0x10
c001eca2:	83 ec 08             	sub    esp,0x8
c001eca5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001eca8:	50                   	push   eax
c001eca9:	e8 ee 5d 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001ecae:	83 c4 10             	add    esp,0x10
c001ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecb4:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001ecb8:	0f 84 de fe ff ff    	je     c001eb9c <ACPI::open(int, int, void*)+0x16c>
c001ecbe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ecc1:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc3:	83 c0 08             	add    eax,0x8
c001ecc6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecc8:	83 ec 0c             	sub    esp,0xc
c001eccb:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ecce:	ff d0                	call   eax
c001ecd0:	83 c4 10             	add    esp,0x10
c001ecd3:	e9 c4 fe ff ff       	jmp    c001eb9c <ACPI::open(int, int, void*)+0x16c>
c001ecd8:	83 ec 0c             	sub    esp,0xc
c001ecdb:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ecde:	50                   	push   eax
c001ecdf:	e8 28 02 01 00       	call   c002ef0c <LinkedList<Device>::~LinkedList()>
c001ece4:	83 c4 10             	add    esp,0x10
c001ece7:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001eced:	83 ec 08             	sub    esp,0x8
c001ecf0:	6a 01                	push   0x1
c001ecf2:	68 3d 26 03 c0       	push   0xc003263d
c001ecf7:	e8 3f 5b 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	83 ec 08             	sub    esp,0x8
c001ed02:	53                   	push   ebx
c001ed03:	50                   	push   eax
c001ed04:	e8 93 5d 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001ed09:	83 c4 10             	add    esp,0x10
c001ed0c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ed11:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ed17:	83 e0 04             	and    eax,0x4
c001ed1a:	0f b6 c0             	movzx  eax,al
c001ed1d:	85 c0                	test   eax,eax
c001ed1f:	0f 84 e3 00 00 00    	je     c001ee08 <ACPI::open(int, int, void*)+0x3d8>
c001ed25:	83 ec 0c             	sub    esp,0xc
c001ed28:	68 5a 26 03 c0       	push   0xc003265a
c001ed2d:	e8 d7 0d 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001ed32:	83 c4 10             	add    esp,0x10
c001ed35:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001ed3c:	83 ec 0c             	sub    esp,0xc
c001ed3f:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001ed42:	e8 54 77 ff ff       	call   c001649b <malloc>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	89 c3                	mov    ebx,eax
c001ed4c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ed51:	83 ec 04             	sub    esp,0x4
c001ed54:	50                   	push   eax
c001ed55:	68 77 26 03 c0       	push   0xc0032677
c001ed5a:	53                   	push   ebx
c001ed5b:	e8 9a b7 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c001ed60:	83 c4 10             	add    esp,0x10
c001ed63:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001ed66:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ed6a:	74 1c                	je     c001ed88 <ACPI::open(int, int, void*)+0x358>
c001ed6c:	83 ec 0c             	sub    esp,0xc
c001ed6f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001ed72:	e8 65 ba ff ff       	call   c001a7dc <File::exists()>
c001ed77:	83 c4 10             	add    esp,0x10
c001ed7a:	0f b6 c0             	movzx  eax,al
c001ed7d:	85 c0                	test   eax,eax
c001ed7f:	74 07                	je     c001ed88 <ACPI::open(int, int, void*)+0x358>
c001ed81:	b0 01                	mov    al,0x1
c001ed83:	eb 07                	jmp    c001ed8c <ACPI::open(int, int, void*)+0x35c>
c001ed85:	8d 76 00             	lea    esi,[esi+0x0]
c001ed88:	b0 00                	mov    al,0x0
c001ed8a:	66 90                	xchg   ax,ax
c001ed8c:	0f b6 c0             	movzx  eax,al
c001ed8f:	85 c0                	test   eax,eax
c001ed91:	74 21                	je     c001edb4 <ACPI::open(int, int, void*)+0x384>
c001ed93:	83 ec 08             	sub    esp,0x8
c001ed96:	6a 01                	push   0x1
c001ed98:	68 77 26 03 c0       	push   0xc0032677
c001ed9d:	e8 99 5a 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c001eda2:	83 c4 10             	add    esp,0x10
c001eda5:	83 ec 08             	sub    esp,0x8
c001eda8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001edab:	50                   	push   eax
c001edac:	e8 eb 5c 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c001edb1:	83 c4 10             	add    esp,0x10
c001edb4:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001edb8:	74 1e                	je     c001edd8 <ACPI::open(int, int, void*)+0x3a8>
c001edba:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001edbe:	74 18                	je     c001edd8 <ACPI::open(int, int, void*)+0x3a8>
c001edc0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001edc3:	8b 00                	mov    eax,DWORD PTR [eax]
c001edc5:	83 c0 08             	add    eax,0x8
c001edc8:	8b 00                	mov    eax,DWORD PTR [eax]
c001edca:	83 ec 0c             	sub    esp,0xc
c001edcd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001edd0:	ff d0                	call   eax
c001edd2:	83 c4 10             	add    esp,0x10
c001edd5:	8d 76 00             	lea    esi,[esi+0x0]
c001edd8:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001eddd:	83 ec 08             	sub    esp,0x8
c001ede0:	68 94 26 03 c0       	push   0xc0032694
c001ede5:	50                   	push   eax
c001ede6:	e8 65 f2 ff ff       	call   c001e050 <findDataTable(unsigned char*, char*)>
c001edeb:	83 c4 10             	add    esp,0x10
c001edee:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001edf1:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001edf5:	74 11                	je     c001ee08 <ACPI::open(int, int, void*)+0x3d8>
c001edf7:	83 ec 08             	sub    esp,0x8
c001edfa:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001edfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ee00:	e8 c7 fb ff ff       	call   c001e9cc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ee05:	83 c4 10             	add    esp,0x10
c001ee08:	b8 00 00 00 00       	mov    eax,0x0
c001ee0d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee10:	c9                   	leave  
c001ee11:	c3                   	ret    

c001ee12 <CPU::close(int, int, void*)>:
c001ee12:	31 c0                	xor    eax,eax
c001ee14:	c3                   	ret    
c001ee15:	90                   	nop

c001ee16 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ee16:	60                   	pusha  
c001ee17:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee23:	9c                   	pushf  
c001ee24:	fa                   	cli    
c001ee25:	0f 09                	wbinvd 
c001ee27:	0f 30                	wrmsr  
c001ee29:	9d                   	popf   
c001ee2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ee2e:	89 02                	mov    DWORD PTR [edx],eax
c001ee30:	61                   	popa   
c001ee31:	c3                   	ret    

c001ee32 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ee32:	60                   	pusha  
c001ee33:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ee37:	9c                   	pushf  
c001ee38:	fa                   	cli    
c001ee39:	0f 09                	wbinvd 
c001ee3b:	31 c0                	xor    eax,eax
c001ee3d:	31 d2                	xor    edx,edx
c001ee3f:	0f 32                	rdmsr  
c001ee41:	9d                   	popf   
c001ee42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee46:	89 02                	mov    DWORD PTR [edx],eax
c001ee48:	61                   	popa   
c001ee49:	c3                   	ret    

c001ee4a <CPU::AMD_K6_writeback(int, int, int)>:
c001ee4a:	56                   	push   esi
c001ee4b:	53                   	push   ebx
c001ee4c:	83 ec 10             	sub    esp,0x10
c001ee4f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ee54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee58:	75 5d                	jne    c001eeb7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee5a:	83 f8 08             	cmp    eax,0x8
c001ee5d:	75 09                	jne    c001ee68 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ee5f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ee64:	7e 13                	jle    c001ee79 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee66:	eb 30                	jmp    c001ee98 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee68:	83 f8 06             	cmp    eax,0x6
c001ee6b:	7c 4a                	jl     c001eeb7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee6d:	83 f8 07             	cmp    eax,0x7
c001ee70:	7e 07                	jle    c001ee79 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ee72:	83 f8 09             	cmp    eax,0x9
c001ee75:	74 21                	je     c001ee98 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001ee77:	eb 3e                	jmp    c001eeb7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ee79:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001ee7f:	89 e6                	mov    esi,esp
c001ee81:	56                   	push   esi
c001ee82:	68 82 00 00 c0       	push   0xc0000082
c001ee87:	e8 a6 ff ff ff       	call   c001ee32 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001ee8c:	c1 eb 15             	shr    ebx,0x15
c001ee8f:	56                   	push   esi
c001ee90:	83 e3 7e             	and    ebx,0x7e
c001ee93:	6a 00                	push   0x0
c001ee95:	53                   	push   ebx
c001ee96:	eb 12                	jmp    c001eeaa <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001ee98:	89 e3                	mov    ebx,esp
c001ee9a:	53                   	push   ebx
c001ee9b:	68 82 00 00 c0       	push   0xc0000082
c001eea0:	e8 8d ff ff ff       	call   c001ee32 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001eea5:	53                   	push   ebx
c001eea6:	6a 00                	push   0x0
c001eea8:	6a 00                	push   0x0
c001eeaa:	68 82 00 00 c0       	push   0xc0000082
c001eeaf:	e8 62 ff ff ff       	call   c001ee16 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001eeb4:	83 c4 18             	add    esp,0x18
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	5b                   	pop    ebx
c001eebb:	5e                   	pop    esi
c001eebc:	c3                   	ret    
c001eebd:	90                   	nop

c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001eebe:	55                   	push   ebp
c001eebf:	57                   	push   edi
c001eec0:	56                   	push   esi
c001eec1:	53                   	push   ebx
c001eec2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eec6:	39 05 58 3d 03 c0    	cmp    DWORD PTR ds:0xc0033d58,eax
c001eecc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001eed0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001eed4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001eed8:	75 23                	jne    c001eefd <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001eeda:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001eedf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001eee3:	89 06                	mov    DWORD PTR [esi],eax
c001eee5:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001eeea:	89 07                	mov    DWORD PTR [edi],eax
c001eeec:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001eef1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001eef4:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001eef9:	89 02                	mov    DWORD PTR [edx],eax
c001eefb:	eb 3f                	jmp    c001ef3c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001eefd:	31 c9                	xor    ecx,ecx
c001eeff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef03:	0f a2                	cpuid  
c001ef05:	89 06                	mov    DWORD PTR [esi],eax
c001ef07:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef0b:	89 1f                	mov    DWORD PTR [edi],ebx
c001ef0d:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ef10:	89 10                	mov    DWORD PTR [eax],edx
c001ef12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ef16:	a3 58 3d 03 c0       	mov    ds:0xc0033d58,eax
c001ef1b:	8b 06                	mov    eax,DWORD PTR [esi]
c001ef1d:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ef22:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef24:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ef29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ef2c:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ef31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ef35:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef37:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ef3c:	5b                   	pop    ebx
c001ef3d:	5e                   	pop    esi
c001ef3e:	5f                   	pop    edi
c001ef3f:	5d                   	pop    ebp
c001ef40:	c3                   	ret    
c001ef41:	90                   	nop

c001ef42 <CPU::cpuidCheckEDX(unsigned int)>:
c001ef42:	83 ec 10             	sub    esp,0x10
c001ef45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef49:	50                   	push   eax
c001ef4a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef4e:	50                   	push   eax
c001ef4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef53:	50                   	push   eax
c001ef54:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef58:	50                   	push   eax
c001ef59:	6a 01                	push   0x1
c001ef5b:	e8 5e ff ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef64:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001ef68:	0f 95 c0             	setne  al
c001ef6b:	83 c4 24             	add    esp,0x24
c001ef6e:	c3                   	ret    
c001ef6f:	90                   	nop

c001ef70 <CPU::cpuidCheckECX(unsigned int)>:
c001ef70:	83 ec 10             	sub    esp,0x10
c001ef73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef77:	50                   	push   eax
c001ef78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef7c:	50                   	push   eax
c001ef7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef81:	50                   	push   eax
c001ef82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef86:	50                   	push   eax
c001ef87:	6a 01                	push   0x1
c001ef89:	e8 30 ff ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef92:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef96:	0f 95 c0             	setne  al
c001ef99:	83 c4 24             	add    esp,0x24
c001ef9c:	c3                   	ret    
c001ef9d:	90                   	nop

c001ef9e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001ef9e:	83 ec 10             	sub    esp,0x10
c001efa1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efa5:	50                   	push   eax
c001efa6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efaa:	50                   	push   eax
c001efab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efaf:	50                   	push   eax
c001efb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efb4:	50                   	push   eax
c001efb5:	6a 07                	push   0x7
c001efb7:	e8 02 ff ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efbc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efc0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001efc4:	0f 95 c0             	setne  al
c001efc7:	83 c4 24             	add    esp,0x24
c001efca:	c3                   	ret    
c001efcb:	90                   	nop

c001efcc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001efcc:	83 ec 10             	sub    esp,0x10
c001efcf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efd3:	50                   	push   eax
c001efd4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efd8:	50                   	push   eax
c001efd9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efdd:	50                   	push   eax
c001efde:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001efe2:	50                   	push   eax
c001efe3:	6a 07                	push   0x7
c001efe5:	e8 d4 fe ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001efea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001efee:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001eff2:	0f 95 c0             	setne  al
c001eff5:	83 c4 24             	add    esp,0x24
c001eff8:	c3                   	ret    
c001eff9:	90                   	nop

c001effa <CPU::CPU()>:
c001effa:	83 ec 0c             	sub    esp,0xc
c001effd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f001:	83 ec 08             	sub    esp,0x8
c001f004:	68 55 28 03 c0       	push   0xc0032855
c001f009:	50                   	push   eax
c001f00a:	e8 cb c4 ff ff       	call   c001b4da <Device::Device(char const*)>
c001f00f:	83 c4 10             	add    esp,0x10
c001f012:	ba e8 28 03 c0       	mov    edx,0xc00328e8
c001f017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f01b:	89 10                	mov    DWORD PTR [eax],edx
c001f01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f021:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001f02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02f:	05 78 01 00 00       	add    eax,0x178
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	50                   	push   eax
c001f038:	e8 09 6d ff ff       	call   c0015d46 <GDT::GDT()>
c001f03d:	83 c4 10             	add    esp,0x10
c001f040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f044:	05 7c 09 00 00       	add    eax,0x97c
c001f049:	83 ec 0c             	sub    esp,0xc
c001f04c:	50                   	push   eax
c001f04d:	e8 42 6f ff ff       	call   c0015f94 <IDT::IDT()>
c001f052:	83 c4 10             	add    esp,0x10
c001f055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f059:	05 7c 11 00 00       	add    eax,0x117c
c001f05e:	83 ec 0c             	sub    esp,0xc
c001f061:	50                   	push   eax
c001f062:	e8 9d 88 ff ff       	call   c0017904 <TSS::TSS()>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001f075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f079:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001f083:	90                   	nop
c001f084:	83 c4 0c             	add    esp,0xc
c001f087:	c3                   	ret    

c001f088 <CPU::displayFeatures()>:
c001f088:	c3                   	ret    
c001f089:	90                   	nop

c001f08a <CPU::detectFeatures()>:
c001f08a:	55                   	push   ebp
c001f08b:	57                   	push   edi
c001f08c:	56                   	push   esi
c001f08d:	53                   	push   ebx
c001f08e:	83 ec 30             	sub    esp,0x30
c001f091:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f095:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001f09f:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001f0a5:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001f0ac:	6a 0d                	push   0xd
c001f0ae:	6a 00                	push   0x0
c001f0b0:	55                   	push   ebp
c001f0b1:	e8 3a 14 fe ff       	call   c00004f0 <memset>
c001f0b6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f0bb:	83 c4 10             	add    esp,0x10
c001f0be:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001f0c5:	0f 84 db 05 00 00    	je     c001f6a6 <CPU::detectFeatures()+0x61c>
c001f0cb:	83 ec 0c             	sub    esp,0xc
c001f0ce:	89 ef                	mov    edi,ebp
c001f0d0:	6a 10                	push   0x10
c001f0d2:	e8 6b fe ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f0d7:	83 e0 01             	and    eax,0x1
c001f0da:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0dd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0e3:	83 e0 fd             	and    eax,0xfffffffd
c001f0e6:	09 d0                	or     eax,edx
c001f0e8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0ee:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f0f5:	e8 48 fe ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f0fa:	83 e0 01             	and    eax,0x1
c001f0fd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f104:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f10a:	83 e0 fb             	and    eax,0xfffffffb
c001f10d:	09 d0                	or     eax,edx
c001f10f:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f115:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f11c:	e8 21 fe ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f121:	83 e0 01             	and    eax,0x1
c001f124:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f12b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f131:	83 e0 f7             	and    eax,0xfffffff7
c001f134:	09 d0                	or     eax,edx
c001f136:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f13c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f143:	e8 fa fd ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f148:	83 e0 01             	and    eax,0x1
c001f14b:	c1 e0 04             	shl    eax,0x4
c001f14e:	89 c2                	mov    edx,eax
c001f150:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f156:	83 e0 ef             	and    eax,0xffffffef
c001f159:	09 d0                	or     eax,edx
c001f15b:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f161:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f168:	e8 d5 fd ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f16d:	83 e0 01             	and    eax,0x1
c001f170:	c1 e0 05             	shl    eax,0x5
c001f173:	89 c2                	mov    edx,eax
c001f175:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f17b:	83 e0 df             	and    eax,0xffffffdf
c001f17e:	09 d0                	or     eax,edx
c001f180:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f186:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f18d:	e8 b0 fd ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f192:	83 e0 01             	and    eax,0x1
c001f195:	8d 14 00             	lea    edx,[eax+eax*1]
c001f198:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f19e:	83 e0 fd             	and    eax,0xfffffffd
c001f1a1:	09 d0                	or     eax,edx
c001f1a3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f1a9:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f1b0:	e8 8d fd ff ff       	call   c001ef42 <CPU::cpuidCheckEDX(unsigned int)>
c001f1b5:	83 e0 01             	and    eax,0x1
c001f1b8:	c1 e0 06             	shl    eax,0x6
c001f1bb:	89 c2                	mov    edx,eax
c001f1bd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f1c3:	83 e0 bf             	and    eax,0xffffffbf
c001f1c6:	09 d0                	or     eax,edx
c001f1c8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f1ce:	58                   	pop    eax
c001f1cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1d3:	50                   	push   eax
c001f1d4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1d8:	50                   	push   eax
c001f1d9:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f1dd:	56                   	push   esi
c001f1de:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f1e2:	50                   	push   eax
c001f1e3:	6a 00                	push   0x0
c001f1e5:	e8 d4 fc ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f1ea:	b8 04 00 00 00       	mov    eax,0x4
c001f1ef:	89 c1                	mov    ecx,eax
c001f1f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1f3:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f1f9:	89 c1                	mov    ecx,eax
c001f1fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f1ff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f201:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f207:	89 c1                	mov    ecx,eax
c001f209:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f20d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f20f:	83 c4 18             	add    esp,0x18
c001f212:	68 64 27 03 c0       	push   0xc0032764
c001f217:	55                   	push   ebp
c001f218:	e8 63 15 fe ff       	call   c0000780 <strcmp>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	85 c0                	test   eax,eax
c001f222:	75 0f                	jne    c001f233 <CPU::detectFeatures()+0x1a9>
c001f224:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f22e:	e9 22 02 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f233:	50                   	push   eax
c001f234:	50                   	push   eax
c001f235:	68 71 27 03 c0       	push   0xc0032771
c001f23a:	55                   	push   ebp
c001f23b:	e8 40 15 fe ff       	call   c0000780 <strcmp>
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	85 c0                	test   eax,eax
c001f245:	74 dd                	je     c001f224 <CPU::detectFeatures()+0x19a>
c001f247:	50                   	push   eax
c001f248:	50                   	push   eax
c001f249:	68 7e 27 03 c0       	push   0xc003277e
c001f24e:	55                   	push   ebp
c001f24f:	e8 2c 15 fe ff       	call   c0000780 <strcmp>
c001f254:	83 c4 10             	add    esp,0x10
c001f257:	85 c0                	test   eax,eax
c001f259:	74 2a                	je     c001f285 <CPU::detectFeatures()+0x1fb>
c001f25b:	50                   	push   eax
c001f25c:	50                   	push   eax
c001f25d:	68 8b 27 03 c0       	push   0xc003278b
c001f262:	55                   	push   ebp
c001f263:	e8 18 15 fe ff       	call   c0000780 <strcmp>
c001f268:	83 c4 10             	add    esp,0x10
c001f26b:	85 c0                	test   eax,eax
c001f26d:	74 16                	je     c001f285 <CPU::detectFeatures()+0x1fb>
c001f26f:	50                   	push   eax
c001f270:	50                   	push   eax
c001f271:	68 98 27 03 c0       	push   0xc0032798
c001f276:	55                   	push   ebp
c001f277:	e8 04 15 fe ff       	call   c0000780 <strcmp>
c001f27c:	83 c4 10             	add    esp,0x10
c001f27f:	85 c0                	test   eax,eax
c001f281:	74 48                	je     c001f2cb <CPU::detectFeatures()+0x241>
c001f283:	eb 0f                	jmp    c001f294 <CPU::detectFeatures()+0x20a>
c001f285:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f28f:	e9 c1 01 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f294:	50                   	push   eax
c001f295:	50                   	push   eax
c001f296:	68 a5 27 03 c0       	push   0xc00327a5
c001f29b:	55                   	push   ebp
c001f29c:	e8 df 14 fe ff       	call   c0000780 <strcmp>
c001f2a1:	83 c4 10             	add    esp,0x10
c001f2a4:	85 c0                	test   eax,eax
c001f2a6:	74 23                	je     c001f2cb <CPU::detectFeatures()+0x241>
c001f2a8:	57                   	push   edi
c001f2a9:	57                   	push   edi
c001f2aa:	68 b2 27 03 c0       	push   0xc00327b2
c001f2af:	55                   	push   ebp
c001f2b0:	e8 cb 14 fe ff       	call   c0000780 <strcmp>
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	85 c0                	test   eax,eax
c001f2ba:	75 1e                	jne    c001f2da <CPU::detectFeatures()+0x250>
c001f2bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f2c6:	e9 8a 01 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f2cb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f2d5:	e9 7b 01 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f2da:	56                   	push   esi
c001f2db:	56                   	push   esi
c001f2dc:	68 bf 27 03 c0       	push   0xc00327bf
c001f2e1:	55                   	push   ebp
c001f2e2:	e8 99 14 fe ff       	call   c0000780 <strcmp>
c001f2e7:	83 c4 10             	add    esp,0x10
c001f2ea:	85 c0                	test   eax,eax
c001f2ec:	75 0f                	jne    c001f2fd <CPU::detectFeatures()+0x273>
c001f2ee:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f2f8:	e9 58 01 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f2fd:	51                   	push   ecx
c001f2fe:	51                   	push   ecx
c001f2ff:	68 7e 27 03 c0       	push   0xc003277e
c001f304:	55                   	push   ebp
c001f305:	e8 76 14 fe ff       	call   c0000780 <strcmp>
c001f30a:	83 c4 10             	add    esp,0x10
c001f30d:	85 c0                	test   eax,eax
c001f30f:	75 0f                	jne    c001f320 <CPU::detectFeatures()+0x296>
c001f311:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f31b:	e9 35 01 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f320:	52                   	push   edx
c001f321:	52                   	push   edx
c001f322:	68 cc 27 03 c0       	push   0xc00327cc
c001f327:	55                   	push   ebp
c001f328:	e8 53 14 fe ff       	call   c0000780 <strcmp>
c001f32d:	83 c4 10             	add    esp,0x10
c001f330:	85 c0                	test   eax,eax
c001f332:	75 0f                	jne    c001f343 <CPU::detectFeatures()+0x2b9>
c001f334:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f33e:	e9 12 01 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f343:	50                   	push   eax
c001f344:	50                   	push   eax
c001f345:	68 d9 27 03 c0       	push   0xc00327d9
c001f34a:	55                   	push   ebp
c001f34b:	e8 30 14 fe ff       	call   c0000780 <strcmp>
c001f350:	83 c4 10             	add    esp,0x10
c001f353:	85 c0                	test   eax,eax
c001f355:	75 0f                	jne    c001f366 <CPU::detectFeatures()+0x2dc>
c001f357:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f361:	e9 ef 00 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f366:	50                   	push   eax
c001f367:	50                   	push   eax
c001f368:	68 e6 27 03 c0       	push   0xc00327e6
c001f36d:	55                   	push   ebp
c001f36e:	e8 0d 14 fe ff       	call   c0000780 <strcmp>
c001f373:	83 c4 10             	add    esp,0x10
c001f376:	85 c0                	test   eax,eax
c001f378:	75 0f                	jne    c001f389 <CPU::detectFeatures()+0x2ff>
c001f37a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f384:	e9 cc 00 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f389:	50                   	push   eax
c001f38a:	50                   	push   eax
c001f38b:	68 f3 27 03 c0       	push   0xc00327f3
c001f390:	55                   	push   ebp
c001f391:	e8 ea 13 fe ff       	call   c0000780 <strcmp>
c001f396:	83 c4 10             	add    esp,0x10
c001f399:	85 c0                	test   eax,eax
c001f39b:	75 0f                	jne    c001f3ac <CPU::detectFeatures()+0x322>
c001f39d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f3a7:	e9 a9 00 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f3ac:	50                   	push   eax
c001f3ad:	50                   	push   eax
c001f3ae:	68 00 28 03 c0       	push   0xc0032800
c001f3b3:	55                   	push   ebp
c001f3b4:	e8 c7 13 fe ff       	call   c0000780 <strcmp>
c001f3b9:	83 c4 10             	add    esp,0x10
c001f3bc:	85 c0                	test   eax,eax
c001f3be:	75 0f                	jne    c001f3cf <CPU::detectFeatures()+0x345>
c001f3c0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f3ca:	e9 86 00 00 00       	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f3cf:	50                   	push   eax
c001f3d0:	50                   	push   eax
c001f3d1:	68 0d 28 03 c0       	push   0xc003280d
c001f3d6:	55                   	push   ebp
c001f3d7:	e8 a4 13 fe ff       	call   c0000780 <strcmp>
c001f3dc:	83 c4 10             	add    esp,0x10
c001f3df:	85 c0                	test   eax,eax
c001f3e1:	75 0c                	jne    c001f3ef <CPU::detectFeatures()+0x365>
c001f3e3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f3ed:	eb 66                	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f3ef:	50                   	push   eax
c001f3f0:	50                   	push   eax
c001f3f1:	68 1a 28 03 c0       	push   0xc003281a
c001f3f6:	55                   	push   ebp
c001f3f7:	e8 84 13 fe ff       	call   c0000780 <strcmp>
c001f3fc:	83 c4 10             	add    esp,0x10
c001f3ff:	85 c0                	test   eax,eax
c001f401:	75 0c                	jne    c001f40f <CPU::detectFeatures()+0x385>
c001f403:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f40d:	eb 46                	jmp    c001f455 <CPU::detectFeatures()+0x3cb>
c001f40f:	57                   	push   edi
c001f410:	57                   	push   edi
c001f411:	68 27 28 03 c0       	push   0xc0032827
c001f416:	55                   	push   ebp
c001f417:	e8 64 13 fe ff       	call   c0000780 <strcmp>
c001f41c:	83 c4 10             	add    esp,0x10
c001f41f:	85 c0                	test   eax,eax
c001f421:	74 e0                	je     c001f403 <CPU::detectFeatures()+0x379>
c001f423:	56                   	push   esi
c001f424:	56                   	push   esi
c001f425:	68 34 28 03 c0       	push   0xc0032834
c001f42a:	55                   	push   ebp
c001f42b:	e8 50 13 fe ff       	call   c0000780 <strcmp>
c001f430:	83 c4 10             	add    esp,0x10
c001f433:	85 c0                	test   eax,eax
c001f435:	74 cc                	je     c001f403 <CPU::detectFeatures()+0x379>
c001f437:	51                   	push   ecx
c001f438:	51                   	push   ecx
c001f439:	68 41 28 03 c0       	push   0xc0032841
c001f43e:	55                   	push   ebp
c001f43f:	e8 3c 13 fe ff       	call   c0000780 <strcmp>
c001f444:	83 c4 10             	add    esp,0x10
c001f447:	85 c0                	test   eax,eax
c001f449:	74 b8                	je     c001f403 <CPU::detectFeatures()+0x379>
c001f44b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f455:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f45a:	0f 86 be 00 00 00    	jbe    c001f51e <CPU::detectFeatures()+0x494>
c001f460:	83 ec 0c             	sub    esp,0xc
c001f463:	68 80 00 00 00       	push   0x80
c001f468:	e8 31 fb ff ff       	call   c001ef9e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f46d:	83 e0 01             	and    eax,0x1
c001f470:	c1 e0 06             	shl    eax,0x6
c001f473:	89 c2                	mov    edx,eax
c001f475:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f47b:	83 e0 bf             	and    eax,0xffffffbf
c001f47e:	09 d0                	or     eax,edx
c001f480:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f486:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f48d:	e8 0c fb ff ff       	call   c001ef9e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f492:	83 e0 01             	and    eax,0x1
c001f495:	c1 e0 04             	shl    eax,0x4
c001f498:	89 c2                	mov    edx,eax
c001f49a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4a0:	83 e0 ef             	and    eax,0xffffffef
c001f4a3:	09 d0                	or     eax,edx
c001f4a5:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4ab:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f4b2:	e8 e7 fa ff ff       	call   c001ef9e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f4b7:	89 c2                	mov    edx,eax
c001f4b9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f4bf:	c1 e2 07             	shl    edx,0x7
c001f4c2:	83 e0 7f             	and    eax,0x7f
c001f4c5:	09 d0                	or     eax,edx
c001f4c7:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f4cd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f4d4:	e8 f3 fa ff ff       	call   c001efcc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f4d9:	83 e0 01             	and    eax,0x1
c001f4dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f4e3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f4e9:	83 e0 f7             	and    eax,0xfffffff7
c001f4ec:	09 d0                	or     eax,edx
c001f4ee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f4f4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f4fb:	e8 cc fa ff ff       	call   c001efcc <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f500:	83 c4 10             	add    esp,0x10
c001f503:	83 e0 01             	and    eax,0x1
c001f506:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f50d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f513:	83 e0 fb             	and    eax,0xfffffffb
c001f516:	09 d0                	or     eax,edx
c001f518:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f51e:	83 ec 0c             	sub    esp,0xc
c001f521:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f525:	50                   	push   eax
c001f526:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f52a:	50                   	push   eax
c001f52b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f52f:	57                   	push   edi
c001f530:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f534:	56                   	push   esi
c001f535:	6a 01                	push   0x1
c001f537:	e8 82 f9 ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f53c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f540:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f546:	89 c1                	mov    ecx,eax
c001f548:	83 e1 0f             	and    ecx,0xf
c001f54b:	83 e2 f0             	and    edx,0xfffffff0
c001f54e:	09 ca                	or     edx,ecx
c001f550:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f556:	89 c2                	mov    edx,eax
c001f558:	c1 ea 04             	shr    edx,0x4
c001f55b:	83 e2 0f             	and    edx,0xf
c001f55e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f562:	89 d1                	mov    ecx,edx
c001f564:	83 c4 20             	add    esp,0x20
c001f567:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f56d:	c1 e1 06             	shl    ecx,0x6
c001f570:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f576:	09 ca                	or     edx,ecx
c001f578:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f57f:	89 c2                	mov    edx,eax
c001f581:	c1 ea 08             	shr    edx,0x8
c001f584:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f58a:	83 e2 0f             	and    edx,0xf
c001f58d:	89 d5                	mov    ebp,edx
c001f58f:	83 e5 03             	and    ebp,0x3
c001f592:	c1 e5 06             	shl    ebp,0x6
c001f595:	83 e1 3f             	and    ecx,0x3f
c001f598:	09 e9                	or     ecx,ebp
c001f59a:	89 d5                	mov    ebp,edx
c001f59c:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f5a2:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f5a8:	c1 ed 02             	shr    ebp,0x2
c001f5ab:	83 e1 c0             	and    ecx,0xffffffc0
c001f5ae:	09 e9                	or     ecx,ebp
c001f5b0:	89 c5                	mov    ebp,eax
c001f5b2:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f5b8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f5be:	c1 ed 08             	shr    ebp,0x8
c001f5c1:	83 e5 30             	and    ebp,0x30
c001f5c4:	83 e1 cf             	and    ecx,0xffffffcf
c001f5c7:	09 e9                	or     ecx,ebp
c001f5c9:	83 fa 06             	cmp    edx,0x6
c001f5cc:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f5d2:	74 05                	je     c001f5d9 <CPU::detectFeatures()+0x54f>
c001f5d4:	83 fa 0f             	cmp    edx,0xf
c001f5d7:	75 64                	jne    c001f63d <CPU::detectFeatures()+0x5b3>
c001f5d9:	89 c1                	mov    ecx,eax
c001f5db:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f5e1:	c1 e9 10             	shr    ecx,0x10
c001f5e4:	c1 e1 04             	shl    ecx,0x4
c001f5e7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f5eb:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f5f1:	0f b6 c9             	movzx  ecx,cl
c001f5f4:	c1 e1 06             	shl    ecx,0x6
c001f5f7:	09 e9                	or     ecx,ebp
c001f5f9:	83 fa 0f             	cmp    edx,0xf
c001f5fc:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f603:	75 38                	jne    c001f63d <CPU::detectFeatures()+0x5b3>
c001f605:	c1 e8 14             	shr    eax,0x14
c001f608:	83 c0 0f             	add    eax,0xf
c001f60b:	0f b6 c0             	movzx  eax,al
c001f60e:	89 c2                	mov    edx,eax
c001f610:	c1 e8 02             	shr    eax,0x2
c001f613:	83 e2 03             	and    edx,0x3
c001f616:	89 d1                	mov    ecx,edx
c001f618:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f61e:	c1 e1 06             	shl    ecx,0x6
c001f621:	83 e2 3f             	and    edx,0x3f
c001f624:	09 ca                	or     edx,ecx
c001f626:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f62c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f632:	83 e2 c0             	and    edx,0xffffffc0
c001f635:	09 d0                	or     eax,edx
c001f637:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f63d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f643:	83 ec 0c             	sub    esp,0xc
c001f646:	83 c8 07             	or     eax,0x7
c001f649:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f64f:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f653:	50                   	push   eax
c001f654:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f658:	55                   	push   ebp
c001f659:	57                   	push   edi
c001f65a:	56                   	push   esi
c001f65b:	68 00 00 00 80       	push   0x80000000
c001f660:	e8 59 f8 ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f665:	83 c4 20             	add    esp,0x20
c001f668:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f670:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f674:	76 1e                	jbe    c001f694 <CPU::detectFeatures()+0x60a>
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	50                   	push   eax
c001f67a:	55                   	push   ebp
c001f67b:	57                   	push   edi
c001f67c:	56                   	push   esi
c001f67d:	68 01 00 00 80       	push   0x80000001
c001f682:	e8 37 f8 ff ff       	call   c001eebe <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f687:	83 c4 20             	add    esp,0x20
c001f68a:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f694:	52                   	push   edx
c001f695:	52                   	push   edx
c001f696:	68 4d 28 03 c0       	push   0xc003284d
c001f69b:	53                   	push   ebx
c001f69c:	e8 2b be ff ff       	call   c001b4cc <Device::setName(char const*)>
c001f6a1:	83 c4 10             	add    esp,0x10
c001f6a4:	eb 69                	jmp    c001f70f <CPU::detectFeatures()+0x685>
c001f6a6:	50                   	push   eax
c001f6a7:	50                   	push   eax
c001f6a8:	68 b2 27 03 c0       	push   0xc00327b2
c001f6ad:	55                   	push   ebp
c001f6ae:	e8 9d 0f fe ff       	call   c0000650 <strcpy>
c001f6b3:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f6bd:	e8 01 0b fe ff       	call   c00001c3 <is486>
c001f6c2:	83 c4 10             	add    esp,0x10
c001f6c5:	85 c0                	test   eax,eax
c001f6c7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f6cd:	74 1f                	je     c001f6ee <CPU::detectFeatures()+0x664>
c001f6cf:	83 c8 07             	or     eax,0x7
c001f6d2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f6d8:	0f 20 c0             	mov    eax,cr0
c001f6db:	83 e0 14             	and    eax,0x14
c001f6de:	83 f8 04             	cmp    eax,0x4
c001f6e1:	75 10                	jne    c001f6f3 <CPU::detectFeatures()+0x669>
c001f6e3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f6e9:	83 e0 fd             	and    eax,0xfffffffd
c001f6ec:	eb 1b                	jmp    c001f709 <CPU::detectFeatures()+0x67f>
c001f6ee:	83 e0 f8             	and    eax,0xfffffff8
c001f6f1:	eb df                	jmp    c001f6d2 <CPU::detectFeatures()+0x648>
c001f6f3:	e8 a6 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f6f8:	83 e0 01             	and    eax,0x1
c001f6fb:	8d 14 00             	lea    edx,[eax+eax*1]
c001f6fe:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f704:	83 e0 fd             	and    eax,0xfffffffd
c001f707:	09 d0                	or     eax,edx
c001f709:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f70f:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f716:	74 17                	je     c001f72f <CPU::detectFeatures()+0x6a5>
c001f718:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f71e:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f724:	83 c8 10             	or     eax,0x10
c001f727:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f72d:	eb 20                	jmp    c001f74f <CPU::detectFeatures()+0x6c5>
c001f72f:	e8 6a 0a fe ff       	call   c000019e <hasLegacyFPU>
c001f734:	83 e0 01             	and    eax,0x1
c001f737:	8d 14 00             	lea    edx,[eax+eax*1]
c001f73a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f740:	83 e0 fd             	and    eax,0xfffffffd
c001f743:	09 d0                	or     eax,edx
c001f745:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f74b:	a8 02                	test   al,0x2
c001f74d:	75 c9                	jne    c001f718 <CPU::detectFeatures()+0x68e>
c001f74f:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f756:	83 c4 2c             	add    esp,0x2c
c001f759:	5b                   	pop    ebx
c001f75a:	5e                   	pop    esi
c001f75b:	5f                   	pop    edi
c001f75c:	5d                   	pop    ebp
c001f75d:	c3                   	ret    

c001f75e <CPU::setupSMEP()>:
c001f75e:	0f 20 e0             	mov    eax,cr4
c001f761:	0d 00 00 10 00       	or     eax,0x100000
c001f766:	0f 22 e0             	mov    cr4,eax
c001f769:	c3                   	ret    

c001f76a <CPU::setupUMIP()>:
c001f76a:	0f 20 e0             	mov    eax,cr4
c001f76d:	80 cc 08             	or     ah,0x8
c001f770:	0f 22 e0             	mov    cr4,eax
c001f773:	c3                   	ret    

c001f774 <CPU::setupTSC()>:
c001f774:	0f 20 e0             	mov    eax,cr4
c001f777:	83 c8 04             	or     eax,0x4
c001f77a:	0f 22 e0             	mov    cr4,eax
c001f77d:	c3                   	ret    

c001f77e <CPU::setupLargePages()>:
c001f77e:	0f 20 e0             	mov    eax,cr4
c001f781:	83 c8 10             	or     eax,0x10
c001f784:	0f 22 e0             	mov    cr4,eax
c001f787:	c3                   	ret    

c001f788 <CPU::setupPAT()>:
c001f788:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f78d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f794:	74 2c                	je     c001f7c2 <CPU::setupPAT()+0x3a>
c001f796:	53                   	push   ebx
c001f797:	83 ec 10             	sub    esp,0x10
c001f79a:	68 77 02 00 00       	push   0x277
c001f79f:	50                   	push   eax
c001f7a0:	e8 07 63 ff ff       	call   c0015aac <Computer::rdmsr(unsigned int)>
c001f7a5:	83 e2 f8             	and    edx,0xfffffff8
c001f7a8:	83 ca 01             	or     edx,0x1
c001f7ab:	52                   	push   edx
c001f7ac:	50                   	push   eax
c001f7ad:	68 77 02 00 00       	push   0x277
c001f7b2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f7b8:	e8 1b 63 ff ff       	call   c0015ad8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f7bd:	83 c4 28             	add    esp,0x28
c001f7c0:	5b                   	pop    ebx
c001f7c1:	c3                   	ret    
c001f7c2:	c3                   	ret    
c001f7c3:	90                   	nop

c001f7c4 <CPU::setupMTRR()>:
c001f7c4:	c3                   	ret    
c001f7c5:	90                   	nop

c001f7c6 <CPU::setupGlobalPages()>:
c001f7c6:	0f 20 e0             	mov    eax,cr4
c001f7c9:	0c 80                	or     al,0x80
c001f7cb:	0f 22 e0             	mov    cr4,eax
c001f7ce:	c3                   	ret    
c001f7cf:	90                   	nop

c001f7d0 <CPU::allowUsermodeDataAccess()>:
c001f7d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7db:	74 03                	je     c001f7e0 <CPU::allowUsermodeDataAccess()+0x10>
c001f7dd:	0f 01 cb             	stac   
c001f7e0:	c3                   	ret    
c001f7e1:	90                   	nop

c001f7e2 <CPU::prohibitUsermodeDataAccess()>:
c001f7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f7ed:	74 03                	je     c001f7f2 <CPU::prohibitUsermodeDataAccess()+0x10>
c001f7ef:	0f 01 ca             	clac   
c001f7f2:	c3                   	ret    
c001f7f3:	90                   	nop

c001f7f4 <CPU::setupSMAP()>:
c001f7f4:	0f 20 e0             	mov    eax,cr4
c001f7f7:	0d 00 00 20 00       	or     eax,0x200000
c001f7fc:	0f 22 e0             	mov    cr4,eax
c001f7ff:	eb e1                	jmp    c001f7e2 <CPU::prohibitUsermodeDataAccess()>
c001f801:	90                   	nop

c001f802 <CPU::setupFeatures()>:
c001f802:	53                   	push   ebx
c001f803:	83 ec 08             	sub    esp,0x8
c001f806:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f80a:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f811:	74 18                	je     c001f82b <CPU::setupFeatures()+0x29>
c001f813:	83 ec 0c             	sub    esp,0xc
c001f816:	68 59 28 03 c0       	push   0xc0032859
c001f81b:	e8 c2 9a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001f820:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f823:	e8 42 ff ff ff       	call   c001f76a <CPU::setupUMIP()>
c001f828:	83 c4 10             	add    esp,0x10
c001f82b:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f832:	74 18                	je     c001f84c <CPU::setupFeatures()+0x4a>
c001f834:	83 ec 0c             	sub    esp,0xc
c001f837:	68 63 28 03 c0       	push   0xc0032863
c001f83c:	e8 a1 9a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001f841:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f844:	e8 2b ff ff ff       	call   c001f774 <CPU::setupTSC()>
c001f849:	83 c4 10             	add    esp,0x10
c001f84c:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f853:	74 18                	je     c001f86d <CPU::setupFeatures()+0x6b>
c001f855:	83 ec 0c             	sub    esp,0xc
c001f858:	68 6c 28 03 c0       	push   0xc003286c
c001f85d:	e8 80 9a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001f862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f865:	e8 14 ff ff ff       	call   c001f77e <CPU::setupLargePages()>
c001f86a:	83 c4 10             	add    esp,0x10
c001f86d:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f874:	74 18                	je     c001f88e <CPU::setupFeatures()+0x8c>
c001f876:	83 ec 0c             	sub    esp,0xc
c001f879:	68 75 28 03 c0       	push   0xc0032875
c001f87e:	e8 5f 9a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001f883:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f886:	e8 3b ff ff ff       	call   c001f7c6 <CPU::setupGlobalPages()>
c001f88b:	83 c4 10             	add    esp,0x10
c001f88e:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f895:	74 18                	je     c001f8af <CPU::setupFeatures()+0xad>
c001f897:	83 ec 0c             	sub    esp,0xc
c001f89a:	68 87 28 03 c0       	push   0xc0032887
c001f89f:	e8 3e 9a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001f8a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8a7:	e8 dc fe ff ff       	call   c001f788 <CPU::setupPAT()>
c001f8ac:	83 c4 10             	add    esp,0x10
c001f8af:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f8b6:	74 11                	je     c001f8c9 <CPU::setupFeatures()+0xc7>
c001f8b8:	c7 44 24 10 90 28 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032890
c001f8c0:	83 c4 08             	add    esp,0x8
c001f8c3:	5b                   	pop    ebx
c001f8c4:	e9 19 9a ff ff       	jmp    c00192e2 <Dbg::kprintf(char const*, ...)>
c001f8c9:	83 c4 08             	add    esp,0x8
c001f8cc:	5b                   	pop    ebx
c001f8cd:	c3                   	ret    

c001f8ce <CPU::open(int, int, void*)>:
c001f8ce:	55                   	push   ebp
c001f8cf:	57                   	push   edi
c001f8d0:	56                   	push   esi
c001f8d1:	53                   	push   ebx
c001f8d2:	83 ec 18             	sub    esp,0x18
c001f8d5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f8d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f8dd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f8e1:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f8e7:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f8ed:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f8f3:	50                   	push   eax
c001f8f4:	e8 af 64 ff ff       	call   c0015da8 <GDT::setup()>
c001f8f9:	83 c4 0c             	add    esp,0xc
c001f8fc:	6a 00                	push   0x0
c001f8fe:	68 ef be ad de       	push   0xdeadbeef
c001f903:	55                   	push   ebp
c001f904:	e8 3f 80 ff ff       	call   c0017948 <TSS::setup(unsigned long, unsigned long)>
c001f909:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f90c:	e8 17 80 ff ff       	call   c0017928 <TSS::flush()>
c001f911:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f917:	89 04 24             	mov    DWORD PTR [esp],eax
c001f91a:	e8 eb 66 ff ff       	call   c001600a <IDT::setup()>
c001f91f:	b8 00 04 00 00       	mov    eax,0x400
c001f924:	0f 23 f8             	mov    db7,eax
c001f927:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f931:	e8 84 6e ff ff       	call   c00167ba <Phys::allocatePage()>
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	85 f6                	test   esi,esi
c001f93b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f941:	89 38                	mov    DWORD PTR [eax],edi
c001f943:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f949:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f94c:	74 10                	je     c001f95e <CPU::open(int, int, void*)+0x90>
c001f94e:	50                   	push   eax
c001f94f:	50                   	push   eax
c001f950:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f956:	56                   	push   esi
c001f957:	e8 08 89 ff ff       	call   c0018264 <VAS::setCPUSpecific(unsigned long)>
c001f95c:	eb 0d                	jmp    c001f96b <CPU::open(int, int, void*)+0x9d>
c001f95e:	83 ec 0c             	sub    esp,0xc
c001f961:	68 9a 28 03 c0       	push   0xc003289a
c001f966:	e8 ff 08 00 00       	call   c002026a <KePanic(char const*)>
c001f96b:	83 c4 10             	add    esp,0x10
c001f96e:	83 ec 0c             	sub    esp,0xc
c001f971:	68 a8 28 03 c0       	push   0xc00328a8
c001f976:	e8 8e 01 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001f97b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f97e:	e8 07 f7 ff ff       	call   c001f08a <CPU::detectFeatures()>
c001f983:	c7 04 24 cb 28 03 c0 	mov    DWORD PTR [esp],0xc00328cb
c001f98a:	e8 7a 01 00 00       	call   c001fb09 <KeSetBootMessage(char const*)>
c001f98f:	e8 5f 77 00 00       	call   c00270f3 <HalInitialise()>
c001f994:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f999:	83 e0 10             	and    eax,0x10
c001f99c:	83 f8 01             	cmp    eax,0x1
c001f99f:	19 c0                	sbb    eax,eax
c001f9a1:	83 e0 46             	and    eax,0x46
c001f9a4:	83 c0 1e             	add    eax,0x1e
c001f9a7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9aa:	e8 06 d4 ff ff       	call   c001cdb5 <setupTimer(int)>
c001f9af:	83 c4 10             	add    esp,0x10
c001f9b2:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f9b9:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f9bf:	74 0c                	je     c001f9cd <CPU::open(int, int, void*)+0xff>
c001f9c1:	83 ec 0c             	sub    esp,0xc
c001f9c4:	53                   	push   ebx
c001f9c5:	e8 38 fe ff ff       	call   c001f802 <CPU::setupFeatures()>
c001f9ca:	83 c4 10             	add    esp,0x10
c001f9cd:	83 c4 0c             	add    esp,0xc
c001f9d0:	31 c0                	xor    eax,eax
c001f9d2:	5b                   	pop    ebx
c001f9d3:	5e                   	pop    esi
c001f9d4:	5f                   	pop    edi
c001f9d5:	5d                   	pop    ebp
c001f9d6:	c3                   	ret    

c001f9d7 <KeInitialiseAtexit()>:
c001f9d7:	83 ec 10             	sub    esp,0x10
c001f9da:	6a 60                	push   0x60
c001f9dc:	6a 00                	push   0x0
c001f9de:	68 20 f9 03 c0       	push   0xc003f920
c001f9e3:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f9ed:	e8 fe 0a fe ff       	call   c00004f0 <memset>
c001f9f2:	83 c4 1c             	add    esp,0x1c
c001f9f5:	c3                   	ret    

c001f9f6 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f9f6:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f9fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f9ff:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001fa06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fa0a:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001fa11:	40                   	inc    eax
c001fa12:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001fa17:	83 f8 17             	cmp    eax,0x17
c001fa1a:	7e 0d                	jle    c001fa29 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001fa1c:	c7 44 24 04 0c 29 03 c0 	mov    DWORD PTR [esp+0x4],0xc003290c
c001fa24:	e9 41 08 00 00       	jmp    c002026a <KePanic(char const*)>
c001fa29:	c3                   	ret    

c001fa2a <KeExecuteAtexit()>:
c001fa2a:	53                   	push   ebx
c001fa2b:	31 db                	xor    ebx,ebx
c001fa2d:	83 ec 08             	sub    esp,0x8
c001fa30:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001fa36:	7e 50                	jle    c001fa88 <KeExecuteAtexit()+0x5e>
c001fa38:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001fa3f:	85 c0                	test   eax,eax
c001fa41:	74 42                	je     c001fa85 <KeExecuteAtexit()+0x5b>
c001fa43:	51                   	push   ecx
c001fa44:	50                   	push   eax
c001fa45:	53                   	push   ebx
c001fa46:	68 25 29 03 c0       	push   0xc0032925
c001fa4b:	e8 92 98 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001fa50:	58                   	pop    eax
c001fa51:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001fa58:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001fa5f:	c7 04 24 47 29 03 c0 	mov    DWORD PTR [esp],0xc0032947
c001fa66:	e8 77 98 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001fa6b:	c7 04 24 f3 3a 03 c0 	mov    DWORD PTR [esp],0xc0033af3
c001fa72:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001fa7d:	e8 60 98 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001fa82:	83 c4 10             	add    esp,0x10
c001fa85:	43                   	inc    ebx
c001fa86:	eb a8                	jmp    c001fa30 <KeExecuteAtexit()+0x6>
c001fa88:	83 c4 08             	add    esp,0x8
c001fa8b:	5b                   	pop    ebx
c001fa8c:	c3                   	ret    

c001fa8d <KeDisplaySplashScreen()>:
c001fa8d:	55                   	push   ebp
c001fa8e:	bd 05 00 00 00       	mov    ebp,0x5
c001fa93:	57                   	push   edi
c001fa94:	bf 0a 00 00 00       	mov    edi,0xa
c001fa99:	56                   	push   esi
c001fa9a:	31 f6                	xor    esi,esi
c001fa9c:	53                   	push   ebx
c001fa9d:	31 db                	xor    ebx,ebx
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	0f b6 96 60 3d 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc2a0]
c001faa9:	85 d2                	test   edx,edx
c001faab:	89 d0                	mov    eax,edx
c001faad:	74 52                	je     c001fb01 <KeDisplaySplashScreen()+0x74>
c001faaf:	80 bb 96 3d 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc26a],0xdb
c001fab6:	75 13                	jne    c001facb <KeDisplaySplashScreen()+0x3e>
c001fab8:	0f b6 8b 95 3d 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc26b]
c001fabf:	83 e1 fe             	and    ecx,0xfffffffe
c001fac2:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fac8:	75 01                	jne    c001facb <KeDisplaySplashScreen()+0x3e>
c001faca:	47                   	inc    edi
c001facb:	83 fa 0d             	cmp    edx,0xd
c001face:	74 28                	je     c001faf8 <KeDisplaySplashScreen()+0x6b>
c001fad0:	83 fa 0a             	cmp    edx,0xa
c001fad3:	75 0a                	jne    c001fadf <KeDisplaySplashScreen()+0x52>
c001fad5:	45                   	inc    ebp
c001fad6:	bf 0a 00 00 00       	mov    edi,0xa
c001fadb:	31 db                	xor    ebx,ebx
c001fadd:	eb 19                	jmp    c001faf8 <KeDisplaySplashScreen()+0x6b>
c001fadf:	83 ec 0c             	sub    esp,0xc
c001fae2:	0f be c0             	movsx  eax,al
c001fae5:	55                   	push   ebp
c001fae6:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fae9:	43                   	inc    ebx
c001faea:	52                   	push   edx
c001faeb:	6a 00                	push   0x0
c001faed:	6a 0e                	push   0xe
c001faef:	50                   	push   eax
c001faf0:	e8 7b 82 00 00       	call   c0027d70 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001faf5:	83 c4 20             	add    esp,0x20
c001faf8:	46                   	inc    esi
c001faf9:	81 fe 42 01 00 00    	cmp    esi,0x142
c001faff:	75 a1                	jne    c001faa2 <KeDisplaySplashScreen()+0x15>
c001fb01:	83 c4 0c             	add    esp,0xc
c001fb04:	5b                   	pop    ebx
c001fb05:	5e                   	pop    esi
c001fb06:	5f                   	pop    edi
c001fb07:	5d                   	pop    ebp
c001fb08:	c3                   	ret    

c001fb09 <KeSetBootMessage(char const*)>:
c001fb09:	57                   	push   edi
c001fb0a:	56                   	push   esi
c001fb0b:	53                   	push   ebx
c001fb0c:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fb12:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fb19:	68 9e 00 00 00       	push   0x9e
c001fb1e:	6a 00                	push   0x0
c001fb20:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fb24:	56                   	push   esi
c001fb25:	e8 c6 09 fe ff       	call   c00004f0 <memset>
c001fb2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb2d:	e8 4e 0a fe ff       	call   c0000580 <strlen>
c001fb32:	ba 50 00 00 00       	mov    edx,0x50
c001fb37:	83 c4 10             	add    esp,0x10
c001fb3a:	31 c9                	xor    ecx,ecx
c001fb3c:	29 c2                	sub    edx,eax
c001fb3e:	83 e2 fe             	and    edx,0xfffffffe
c001fb41:	01 f2                	add    edx,esi
c001fb43:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fb48:	84 c0                	test   al,al
c001fb4a:	74 0a                	je     c001fb56 <KeSetBootMessage(char const*)+0x4d>
c001fb4c:	80 cc 0f             	or     ah,0xf
c001fb4f:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fb53:	41                   	inc    ecx
c001fb54:	eb ed                	jmp    c001fb43 <KeSetBootMessage(char const*)+0x3a>
c001fb56:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fb5b:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fb60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb62:	81 c4 a0 00 00 00    	add    esp,0xa0
c001fb68:	5b                   	pop    ebx
c001fb69:	5e                   	pop    esi
c001fb6a:	5f                   	pop    edi
c001fb6b:	c3                   	ret    

c001fb6c <CUnlockScheduler>:
c001fb6c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb71:	83 e8 01             	sub    eax,0x1
c001fb74:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb79:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb7e:	85 c0                	test   eax,eax
c001fb80:	75 02                	jne    c001fb84 <CUnlockScheduler+0x18>
c001fb82:	fb                   	sti    
c001fb83:	90                   	nop
c001fb84:	90                   	nop
c001fb85:	c3                   	ret    
c001fb86:	66 90                	xchg   ax,ax

c001fb88 <CLockScheduler>:
c001fb88:	fa                   	cli    
c001fb89:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fb8e:	83 c0 01             	add    eax,0x1
c001fb91:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fb96:	90                   	nop
c001fb97:	c3                   	ret    

c001fb98 <CPrintf>:
c001fb98:	83 ec 0c             	sub    esp,0xc
c001fb9b:	83 ec 08             	sub    esp,0x8
c001fb9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fba2:	68 d0 fb 02 c0       	push   0xc002fbd0
c001fba7:	e8 36 97 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c001fbac:	83 c4 10             	add    esp,0x10
c001fbaf:	90                   	nop
c001fbb0:	83 c4 0c             	add    esp,0xc
c001fbb3:	c3                   	ret    

c001fbb4 <Krnl::handlePowerButton()>:
c001fbb4:	83 ec 0c             	sub    esp,0xc
c001fbb7:	e8 09 07 00 00       	call   c00202c5 <KeHandlePowerButton()>
c001fbbc:	90                   	nop
c001fbbd:	83 c4 0c             	add    esp,0xc
c001fbc0:	c3                   	ret    
c001fbc1:	8d 76 00             	lea    esi,[esi+0x0]

c001fbc4 <Krnl::handleSleepButton()>:
c001fbc4:	83 ec 0c             	sub    esp,0xc
c001fbc7:	e8 2e 07 00 00       	call   c00202fa <KeHandleSleepButton()>
c001fbcc:	90                   	nop
c001fbcd:	83 c4 0c             	add    esp,0xc
c001fbd0:	c3                   	ret    

c001fbd1 <KeCalculateCRC32(unsigned char*, int)>:
c001fbd1:	53                   	push   ebx
c001fbd2:	83 c8 ff             	or     eax,0xffffffff
c001fbd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fbd9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fbdd:	01 cb                	add    ebx,ecx
c001fbdf:	39 d9                	cmp    ecx,ebx
c001fbe1:	74 15                	je     c001fbf8 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fbe3:	41                   	inc    ecx
c001fbe4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fbe7:	31 c2                	xor    edx,eax
c001fbe9:	c1 e8 08             	shr    eax,0x8
c001fbec:	0f b6 d2             	movzx  edx,dl
c001fbef:	33 04 95 c0 3e 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc140]
c001fbf6:	eb e7                	jmp    c001fbdf <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fbf8:	5b                   	pop    ebx
c001fbf9:	f7 d0                	not    eax
c001fbfb:	c3                   	ret    

c001fbfc <EnvVarContainer::getEnv(char const*)>:
c001fbfc:	57                   	push   edi
c001fbfd:	56                   	push   esi
c001fbfe:	53                   	push   ebx
c001fbff:	31 db                	xor    ebx,ebx
c001fc01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc05:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fc07:	7e 2b                	jle    c001fc34 <EnvVarContainer::getEnv(char const*)+0x38>
c001fc09:	50                   	push   eax
c001fc0a:	50                   	push   eax
c001fc0b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc0e:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fc15:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fc18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fc1c:	e8 5f 0b fe ff       	call   c0000780 <strcmp>
c001fc21:	83 c4 10             	add    esp,0x10
c001fc24:	85 c0                	test   eax,eax
c001fc26:	75 09                	jne    c001fc31 <EnvVarContainer::getEnv(char const*)+0x35>
c001fc28:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fc2b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fc2f:	eb 05                	jmp    c001fc36 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fc31:	43                   	inc    ebx
c001fc32:	eb d1                	jmp    c001fc05 <EnvVarContainer::getEnv(char const*)+0x9>
c001fc34:	31 c0                	xor    eax,eax
c001fc36:	5b                   	pop    ebx
c001fc37:	5e                   	pop    esi
c001fc38:	5f                   	pop    edi
c001fc39:	c3                   	ret    

c001fc3a <EnvVarContainer::setEnv(char const*, char const*)>:
c001fc3a:	55                   	push   ebp
c001fc3b:	57                   	push   edi
c001fc3c:	56                   	push   esi
c001fc3d:	53                   	push   ebx
c001fc3e:	83 ec 28             	sub    esp,0x28
c001fc41:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fc45:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fc49:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fc4d:	56                   	push   esi
c001fc4e:	e8 2d 09 fe ff       	call   c0000580 <strlen>
c001fc53:	40                   	inc    eax
c001fc54:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc57:	e8 3f 68 ff ff       	call   c001649b <malloc>
c001fc5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc63:	e8 18 09 fe ff       	call   c0000580 <strlen>
c001fc68:	40                   	inc    eax
c001fc69:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc6c:	e8 2a 68 ff ff       	call   c001649b <malloc>
c001fc71:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fc78:	e8 03 09 fe ff       	call   c0000580 <strlen>
c001fc7d:	83 c4 0c             	add    esp,0xc
c001fc80:	40                   	inc    eax
c001fc81:	50                   	push   eax
c001fc82:	6a 00                	push   0x0
c001fc84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fc88:	e8 63 08 fe ff       	call   c00004f0 <memset>
c001fc8d:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc90:	e8 eb 08 fe ff       	call   c0000580 <strlen>
c001fc95:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fc99:	8d 48 01             	lea    ecx,[eax+0x1]
c001fc9c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fca1:	89 de                	mov    esi,ebx
c001fca3:	e8 d8 08 fe ff       	call   c0000580 <strlen>
c001fca8:	83 c4 0c             	add    esp,0xc
c001fcab:	40                   	inc    eax
c001fcac:	50                   	push   eax
c001fcad:	6a 00                	push   0x0
c001fcaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fcb3:	e8 38 08 fe ff       	call   c00004f0 <memset>
c001fcb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcbb:	e8 c0 08 fe ff       	call   c0000580 <strlen>
c001fcc0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fcc4:	8d 48 01             	lea    ecx,[eax+0x1]
c001fcc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fccc:	40                   	inc    eax
c001fccd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fcd0:	c1 e0 03             	shl    eax,0x3
c001fcd3:	5a                   	pop    edx
c001fcd4:	59                   	pop    ecx
c001fcd5:	50                   	push   eax
c001fcd6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fcd9:	e8 a9 67 ff ff       	call   c0016487 <realloc>
c001fcde:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fce1:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fce5:	b9 08 00 00 00       	mov    ecx,0x8
c001fcea:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fced:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fcf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fcf3:	83 c4 2c             	add    esp,0x2c
c001fcf6:	5b                   	pop    ebx
c001fcf7:	5e                   	pop    esi
c001fcf8:	5f                   	pop    edi
c001fcf9:	5d                   	pop    ebp
c001fcfa:	c3                   	ret    
c001fcfb:	90                   	nop

c001fcfc <EnvVarContainer::deleteEnv(char const*)>:
c001fcfc:	c3                   	ret    
c001fcfd:	90                   	nop

c001fcfe <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fcfe:	55                   	push   ebp
c001fcff:	57                   	push   edi
c001fd00:	56                   	push   esi
c001fd01:	53                   	push   ebx
c001fd02:	81 ec 38 01 00 00    	sub    esp,0x138
c001fd08:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fd0f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fd16:	68 14 01 00 00       	push   0x114
c001fd1b:	e8 7b 67 ff ff       	call   c001649b <malloc>
c001fd20:	83 c4 0c             	add    esp,0xc
c001fd23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd26:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fd2d:	89 c3                	mov    ebx,eax
c001fd2f:	50                   	push   eax
c001fd30:	e8 c5 a7 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c001fd35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fd38:	e8 9f aa ff ff       	call   c001a7dc <File::exists()>
c001fd3d:	83 c4 10             	add    esp,0x10
c001fd40:	84 c0                	test   al,al
c001fd42:	75 31                	jne    c001fd75 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fd44:	50                   	push   eax
c001fd45:	50                   	push   eax
c001fd46:	6a 12                	push   0x12
c001fd48:	53                   	push   ebx
c001fd49:	e8 ca a7 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c001fd4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fd50:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fd53:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd56:	e8 25 08 fe ff       	call   c0000580 <strlen>
c001fd5b:	5a                   	pop    edx
c001fd5c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fd60:	52                   	push   edx
c001fd61:	31 d2                	xor    edx,edx
c001fd63:	56                   	push   esi
c001fd64:	52                   	push   edx
c001fd65:	50                   	push   eax
c001fd66:	53                   	push   ebx
c001fd67:	ff d7                	call   edi
c001fd69:	83 c4 14             	add    esp,0x14
c001fd6c:	53                   	push   ebx
c001fd6d:	e8 04 a8 ff ff       	call   c001a576 <File::close()>
c001fd72:	83 c4 10             	add    esp,0x10
c001fd75:	56                   	push   esi
c001fd76:	31 f6                	xor    esi,esi
c001fd78:	68 00 01 00 00       	push   0x100
c001fd7d:	6a 00                	push   0x0
c001fd7f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fd83:	50                   	push   eax
c001fd84:	e8 67 07 fe ff       	call   c00004f0 <memset>
c001fd89:	5f                   	pop    edi
c001fd8a:	58                   	pop    eax
c001fd8b:	6a 01                	push   0x1
c001fd8d:	53                   	push   ebx
c001fd8e:	e8 85 a7 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fd9e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fda6:	83 ec 0c             	sub    esp,0xc
c001fda9:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fdad:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fdaf:	52                   	push   edx
c001fdb0:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001fdb4:	51                   	push   ecx
c001fdb5:	6a 00                	push   0x0
c001fdb7:	6a 01                	push   0x1
c001fdb9:	53                   	push   ebx
c001fdba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fdbd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fdc2:	83 c4 20             	add    esp,0x20
c001fdc5:	85 c0                	test   eax,eax
c001fdc7:	89 c1                	mov    ecx,eax
c001fdc9:	0f 84 36 01 00 00    	je     c001ff05 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fdcf:	83 f8 0d             	cmp    eax,0xd
c001fdd2:	0f 84 22 01 00 00    	je     c001fefa <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fdd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fddd:	0f 84 f0 00 00 00    	je     c001fed3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fde3:	83 f8 0a             	cmp    eax,0xa
c001fde6:	74 13                	je     c001fdfb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fde8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fded:	74 0c                	je     c001fdfb <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fdef:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fdf5:	0f 8e f6 00 00 00    	jle    c001fef1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fdfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdff:	83 ec 0c             	sub    esp,0xc
c001fe02:	8d 78 01             	lea    edi,[eax+0x1]
c001fe05:	57                   	push   edi
c001fe06:	e8 90 66 ff ff       	call   c001649b <malloc>
c001fe0b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fe0f:	8d 56 04             	lea    edx,[esi+0x4]
c001fe12:	89 14 24             	mov    DWORD PTR [esp],edx
c001fe15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fe19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fe1d:	e8 79 66 ff ff       	call   c001649b <malloc>
c001fe22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fe26:	83 c4 0c             	add    esp,0xc
c001fe29:	57                   	push   edi
c001fe2a:	6a 00                	push   0x0
c001fe2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fe30:	e8 bb 06 fe ff       	call   c00004f0 <memset>
c001fe35:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe39:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fe3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe43:	83 c4 0c             	add    esp,0xc
c001fe46:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fe4a:	52                   	push   edx
c001fe4b:	6a 00                	push   0x0
c001fe4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fe51:	e8 9a 06 fe ff       	call   c00004f0 <memset>
c001fe56:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fe5a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fe5e:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe61:	e8 1a 07 fe ff       	call   c0000580 <strlen>
c001fe66:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fe6a:	89 c1                	mov    ecx,eax
c001fe6c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fe6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fe77:	40                   	inc    eax
c001fe78:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fe7b:	85 d2                	test   edx,edx
c001fe7d:	75 0c                	jne    c001fe8b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fe7f:	83 ec 0c             	sub    esp,0xc
c001fe82:	6a 08                	push   0x8
c001fe84:	e8 12 66 ff ff       	call   c001649b <malloc>
c001fe89:	eb 0c                	jmp    c001fe97 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fe8b:	51                   	push   ecx
c001fe8c:	51                   	push   ecx
c001fe8d:	c1 e0 03             	shl    eax,0x3
c001fe90:	50                   	push   eax
c001fe91:	52                   	push   edx
c001fe92:	e8 f0 65 ff ff       	call   c0016487 <realloc>
c001fe97:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fe9a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fe9d:	83 c4 10             	add    esp,0x10
c001fea0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fea3:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fea7:	b9 08 00 00 00       	mov    ecx,0x8
c001feac:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001feb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001feb2:	50                   	push   eax
c001feb3:	31 f6                	xor    esi,esi
c001feb5:	68 00 01 00 00       	push   0x100
c001feba:	6a 00                	push   0x0
c001febc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fec0:	50                   	push   eax
c001fec1:	e8 2a 06 fe ff       	call   c00004f0 <memset>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fed1:	eb 27                	jmp    c001fefa <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fed3:	83 f8 3d             	cmp    eax,0x3d
c001fed6:	74 1e                	je     c001fef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fed8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fede:	7f 07                	jg     c001fee7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fee0:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001fee4:	46                   	inc    esi
c001fee5:	eb 13                	jmp    c001fefa <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fee7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001feef:	eb 09                	jmp    c001fefa <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fef1:	83 f8 3d             	cmp    eax,0x3d
c001fef4:	75 ea                	jne    c001fee0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fef6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fefa:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001feff:	0f 85 99 fe ff ff    	jne    c001fd9e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001ff05:	83 ec 0c             	sub    esp,0xc
c001ff08:	53                   	push   ebx
c001ff09:	e8 68 a6 ff ff       	call   c001a576 <File::close()>
c001ff0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ff10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff13:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ff16:	81 c4 3c 01 00 00    	add    esp,0x13c
c001ff1c:	5b                   	pop    ebx
c001ff1d:	5e                   	pop    esi
c001ff1e:	5f                   	pop    edi
c001ff1f:	5d                   	pop    ebp
c001ff20:	c3                   	ret    
c001ff21:	90                   	nop

c001ff22 <EnvVarContainer::__loadSystem()>:
c001ff22:	83 ec 10             	sub    esp,0x10
c001ff25:	68 c0 42 03 c0       	push   0xc00342c0
c001ff2a:	68 4c 29 03 c0       	push   0xc003294c
c001ff2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff33:	e8 c6 fd ff ff       	call   c001fcfe <EnvVarContainer::loadFrom(char const*, char const*)>
c001ff38:	83 c4 1c             	add    esp,0x1c
c001ff3b:	c3                   	ret    

c001ff3c <EnvVarContainer::__loadUser()>:
c001ff3c:	c3                   	ret    
c001ff3d:	90                   	nop

c001ff3e <EnvVarContainer::EnvVarContainer(Process*)>:
c001ff3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff50:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff5e:	90                   	nop
c001ff5f:	c3                   	ret    

c001ff60 <EnvVarContainer::~EnvVarContainer()>:
c001ff60:	83 ec 0c             	sub    esp,0xc
c001ff63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff6a:	85 c0                	test   eax,eax
c001ff6c:	74 1d                	je     c001ff8b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff72:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff74:	85 c0                	test   eax,eax
c001ff76:	74 13                	je     c001ff8b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001ff78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff7f:	83 ec 0c             	sub    esp,0xc
c001ff82:	50                   	push   eax
c001ff83:	e8 33 65 ff ff       	call   c00164bb <free>
c001ff88:	83 c4 10             	add    esp,0x10
c001ff8b:	90                   	nop
c001ff8c:	83 c4 0c             	add    esp,0xc
c001ff8f:	c3                   	ret    

c001ff90 <KeGetEnv(Process*, char const*)>:
c001ff90:	53                   	push   ebx
c001ff91:	83 ec 08             	sub    esp,0x8
c001ff94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff98:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001ff9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ffa2:	74 04                	je     c001ffa8 <KeGetEnv(Process*, char const*)+0x18>
c001ffa4:	85 c0                	test   eax,eax
c001ffa6:	75 0b                	jne    c001ffb3 <KeGetEnv(Process*, char const*)+0x23>
c001ffa8:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ffad:	85 c0                	test   eax,eax
c001ffaf:	75 19                	jne    c001ffca <KeGetEnv(Process*, char const*)+0x3a>
c001ffb1:	eb 27                	jmp    c001ffda <KeGetEnv(Process*, char const*)+0x4a>
c001ffb3:	52                   	push   edx
c001ffb4:	52                   	push   edx
c001ffb5:	53                   	push   ebx
c001ffb6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001ffbc:	e8 3b fc ff ff       	call   c001fbfc <EnvVarContainer::getEnv(char const*)>
c001ffc1:	83 c4 10             	add    esp,0x10
c001ffc4:	85 c0                	test   eax,eax
c001ffc6:	75 28                	jne    c001fff0 <KeGetEnv(Process*, char const*)+0x60>
c001ffc8:	eb de                	jmp    c001ffa8 <KeGetEnv(Process*, char const*)+0x18>
c001ffca:	52                   	push   edx
c001ffcb:	52                   	push   edx
c001ffcc:	53                   	push   ebx
c001ffcd:	50                   	push   eax
c001ffce:	e8 29 fc ff ff       	call   c001fbfc <EnvVarContainer::getEnv(char const*)>
c001ffd3:	83 c4 10             	add    esp,0x10
c001ffd6:	85 c0                	test   eax,eax
c001ffd8:	75 16                	jne    c001fff0 <KeGetEnv(Process*, char const*)+0x60>
c001ffda:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ffde:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ffe3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ffe7:	83 c4 08             	add    esp,0x8
c001ffea:	5b                   	pop    ebx
c001ffeb:	e9 0c fc ff ff       	jmp    c001fbfc <EnvVarContainer::getEnv(char const*)>
c001fff0:	83 c4 08             	add    esp,0x8
c001fff3:	5b                   	pop    ebx
c001fff4:	c3                   	ret    

c001fff5 <KeSetEnvSystem(char const*, char const*)>:
c001fff5:	83 ec 10             	sub    esp,0x10
c001fff8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fffc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020000:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c0020006:	e8 2f fc ff ff       	call   c001fc3a <EnvVarContainer::setEnv(char const*, char const*)>
c002000b:	83 c4 1c             	add    esp,0x1c
c002000e:	c3                   	ret    

c002000f <KeSetEnvUser(char const*, char const*)>:
c002000f:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c0020014:	85 c0                	test   eax,eax
c0020016:	74 15                	je     c002002d <KeSetEnvUser(char const*, char const*)+0x1e>
c0020018:	83 ec 10             	sub    esp,0x10
c002001b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002001f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020023:	50                   	push   eax
c0020024:	e8 11 fc ff ff       	call   c001fc3a <EnvVarContainer::setEnv(char const*, char const*)>
c0020029:	83 c4 1c             	add    esp,0x1c
c002002c:	c3                   	ret    
c002002d:	c3                   	ret    

c002002e <KeSetEnvProcess(Process*, char const*, char const*)>:
c002002e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020032:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0020038:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002003c:	e9 f9 fb ff ff       	jmp    c001fc3a <EnvVarContainer::setEnv(char const*, char const*)>

c0020041 <KeDeleteEnvSystem(char const*)>:
c0020041:	c3                   	ret    

c0020042 <KeDeleteEnvUser(char const*)>:
c0020042:	c3                   	ret    

c0020043 <KeDeleteEnvProcess(Process*, char const*)>:
c0020043:	c3                   	ret    

c0020044 <KeNewProcessEnv(Process*)>:
c0020044:	83 ec 28             	sub    esp,0x28
c0020047:	6a 0c                	push   0xc
c0020049:	e8 4d 64 ff ff       	call   c001649b <malloc>
c002004e:	5a                   	pop    edx
c002004f:	59                   	pop    ecx
c0020050:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020054:	50                   	push   eax
c0020055:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020059:	e8 e0 fe ff ff       	call   c001ff3e <EnvVarContainer::EnvVarContainer(Process*)>
c002005e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020062:	83 c4 2c             	add    esp,0x2c
c0020065:	c3                   	ret    

c0020066 <KeCopyProcessEnv(Process*, Process*)>:
c0020066:	57                   	push   edi
c0020067:	56                   	push   esi
c0020068:	53                   	push   ebx
c0020069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0020076:	6a 0c                	push   0xc
c0020078:	e8 1e 64 ff ff       	call   c001649b <malloc>
c002007d:	89 c3                	mov    ebx,eax
c002007f:	58                   	pop    eax
c0020080:	5a                   	pop    edx
c0020081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020085:	53                   	push   ebx
c0020086:	e8 b3 fe ff ff       	call   c001ff3e <EnvVarContainer::EnvVarContainer(Process*)>
c002008b:	8b 07                	mov    eax,DWORD PTR [edi]
c002008d:	89 03                	mov    DWORD PTR [ebx],eax
c002008f:	c1 e0 03             	shl    eax,0x3
c0020092:	89 04 24             	mov    DWORD PTR [esp],eax
c0020095:	e8 01 64 ff ff       	call   c001649b <malloc>
c002009a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c002009d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c002009f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00200a2:	89 c7                	mov    edi,eax
c00200a4:	c1 e1 03             	shl    ecx,0x3
c00200a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00200a9:	83 c4 10             	add    esp,0x10
c00200ac:	89 d8                	mov    eax,ebx
c00200ae:	5b                   	pop    ebx
c00200af:	5e                   	pop    esi
c00200b0:	5f                   	pop    edi
c00200b1:	c3                   	ret    

c00200b2 <KeLoadSystemEnv()>:
c00200b2:	53                   	push   ebx
c00200b3:	83 ec 14             	sub    esp,0x14
c00200b6:	6a 0c                	push   0xc
c00200b8:	e8 de 63 ff ff       	call   c001649b <malloc>
c00200bd:	89 c3                	mov    ebx,eax
c00200bf:	58                   	pop    eax
c00200c0:	5a                   	pop    edx
c00200c1:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200c7:	53                   	push   ebx
c00200c8:	e8 71 fe ff ff       	call   c001ff3e <EnvVarContainer::EnvVarContainer(Process*)>
c00200cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00200d0:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c00200d6:	e8 47 fe ff ff       	call   c001ff22 <EnvVarContainer::__loadSystem()>
c00200db:	83 c4 18             	add    esp,0x18
c00200de:	5b                   	pop    ebx
c00200df:	c3                   	ret    

c00200e0 <KeLoadUserEnv()>:
c00200e0:	53                   	push   ebx
c00200e1:	83 ec 14             	sub    esp,0x14
c00200e4:	6a 0c                	push   0xc
c00200e6:	e8 b0 63 ff ff       	call   c001649b <malloc>
c00200eb:	89 c3                	mov    ebx,eax
c00200ed:	58                   	pop    eax
c00200ee:	5a                   	pop    edx
c00200ef:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00200f5:	53                   	push   ebx
c00200f6:	e8 43 fe ff ff       	call   c001ff3e <EnvVarContainer::EnvVarContainer(Process*)>
c00200fb:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020101:	83 c4 18             	add    esp,0x18
c0020104:	5b                   	pop    ebx
c0020105:	c3                   	ret    

c0020106 <KeFlushEnv()>:
c0020106:	c3                   	ret    

c0020107 <KeGetProcessTotalEnvCount(Process*)>:
c0020107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002010b:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020111:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020117:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c002011c:	8b 00                	mov    eax,DWORD PTR [eax]
c002011e:	03 01                	add    eax,DWORD PTR [ecx]
c0020120:	85 d2                	test   edx,edx
c0020122:	74 02                	je     c0020126 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020124:	03 02                	add    eax,DWORD PTR [edx]
c0020126:	c3                   	ret    

c0020127 <KeGetProcessEnvPair(Process*, int)>:
c0020127:	57                   	push   edi
c0020128:	56                   	push   esi
c0020129:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002012f:	53                   	push   ebx
c0020130:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020134:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020138:	85 f6                	test   esi,esi
c002013a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002013e:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020144:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020146:	75 16                	jne    c002015e <KeGetProcessEnvPair(Process*, int)+0x37>
c0020148:	39 c2                	cmp    edx,eax
c002014a:	7c 16                	jl     c0020162 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002014c:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c0020152:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020154:	01 c6                	add    esi,eax
c0020156:	39 d6                	cmp    esi,edx
c0020158:	7e 3c                	jle    c0020196 <KeGetProcessEnvPair(Process*, int)+0x6f>
c002015a:	29 c2                	sub    edx,eax
c002015c:	eb 04                	jmp    c0020162 <KeGetProcessEnvPair(Process*, int)+0x3b>
c002015e:	39 c2                	cmp    edx,eax
c0020160:	7d 05                	jge    c0020167 <KeGetProcessEnvPair(Process*, int)+0x40>
c0020162:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0020165:	eb 20                	jmp    c0020187 <KeGetProcessEnvPair(Process*, int)+0x60>
c0020167:	8b 3e                	mov    edi,DWORD PTR [esi]
c0020169:	8d 0c 07             	lea    ecx,[edi+eax*1]
c002016c:	39 d1                	cmp    ecx,edx
c002016e:	7e 04                	jle    c0020174 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0020170:	29 c2                	sub    edx,eax
c0020172:	eb 10                	jmp    c0020184 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0020174:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c002017a:	03 0e                	add    ecx,DWORD PTR [esi]
c002017c:	39 d1                	cmp    ecx,edx
c002017e:	7e 16                	jle    c0020196 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020180:	29 c2                	sub    edx,eax
c0020182:	29 fa                	sub    edx,edi
c0020184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0020187:	8d 14 d0             	lea    edx,[eax+edx*8]
c002018a:	8b 02                	mov    eax,DWORD PTR [edx]
c002018c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c002018f:	89 03                	mov    DWORD PTR [ebx],eax
c0020191:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0020194:	eb 1d                	jmp    c00201b3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0020196:	83 ec 0c             	sub    esp,0xc
c0020199:	68 6e 29 03 c0       	push   0xc003296e
c002019e:	e8 c7 00 00 00       	call   c002026a <KePanic(char const*)>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00201ac:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00201b3:	89 d8                	mov    eax,ebx
c00201b5:	5b                   	pop    ebx
c00201b6:	5e                   	pop    esi
c00201b7:	5f                   	pop    edi
c00201b8:	c2 04 00             	ret    0x4

c00201bb <CPU::current()>:
c00201bb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00201c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201c6:	c3                   	ret    

c00201c7 <operator new(unsigned long)>:
c00201c7:	e9 cf 62 ff ff       	jmp    c001649b <malloc>

c00201cc <operator delete(void*)>:
c00201cc:	e9 fa 62 ff ff       	jmp    c00164cb <rfree>

c00201d1 <disableIRQs()>:
c00201d1:	fa                   	cli    
c00201d2:	c3                   	ret    

c00201d3 <enableIRQs()>:
c00201d3:	fb                   	sti    
c00201d4:	c3                   	ret    

c00201d5 <lockScheduler()>:
c00201d5:	fa                   	cli    
c00201d6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201dc:	c3                   	ret    

c00201dd <unlockScheduler()>:
c00201dd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201e2:	48                   	dec    eax
c00201e3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201e8:	75 01                	jne    c00201eb <unlockScheduler()+0xe>
c00201ea:	fb                   	sti    
c00201eb:	c3                   	ret    

c00201ec <lockStuff()>:
c00201ec:	fa                   	cli    
c00201ed:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00201f3:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c00201f9:	c3                   	ret    

c00201fa <unlockStuff()>:
c00201fa:	83 ec 0c             	sub    esp,0xc
c00201fd:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020202:	48                   	dec    eax
c0020203:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020208:	75 18                	jne    c0020222 <unlockStuff()+0x28>
c002020a:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020211:	74 0f                	je     c0020222 <unlockStuff()+0x28>
c0020213:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002021d:	e8 aa 50 00 00       	call   c00252cc <schedule()>
c0020222:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020227:	48                   	dec    eax
c0020228:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002022d:	75 01                	jne    c0020230 <unlockStuff()+0x36>
c002022f:	fb                   	sti    
c0020230:	83 c4 0c             	add    esp,0xc
c0020233:	c3                   	ret    

c0020234 <Virt::getAKernelVAS()>:
c0020234:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020239:	c3                   	ret    

c002023a <__not_memcpy>:
c002023a:	57                   	push   edi
c002023b:	56                   	push   esi
c002023c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020240:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020244:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020248:	89 c7                	mov    edi,eax
c002024a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002024c:	5e                   	pop    esi
c002024d:	5f                   	pop    edi
c002024e:	c3                   	ret    
c002024f:	90                   	nop

c0020250 <Mutex::Mutex()>:
c0020250:	83 ec 0c             	sub    esp,0xc
c0020253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020257:	83 ec 08             	sub    esp,0x8
c002025a:	6a 01                	push   0x1
c002025c:	50                   	push   eax
c002025d:	e8 ae 03 00 00       	call   c0020610 <Semaphore::Semaphore(int)>
c0020262:	83 c4 10             	add    esp,0x10
c0020265:	90                   	nop
c0020266:	83 c4 0c             	add    esp,0xc
c0020269:	c3                   	ret    

c002026a <KePanic(char const*)>:
c002026a:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c0020271:	e9 4e 6d 00 00       	jmp    c0026fc4 <HalPanic(char const*)>

c0020276 <KePowerThread(void*)>:
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002027e:	48                   	dec    eax
c002027f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020284:	75 01                	jne    c0020287 <KePowerThread(void*)+0x11>
c0020286:	fb                   	sti    
c0020287:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002028e:	83 ec 0c             	sub    esp,0xc
c0020291:	6a 0a                	push   0xa
c0020293:	e8 20 52 00 00       	call   c00254b8 <sleep(unsigned int)>
c0020298:	83 c4 10             	add    esp,0x10
c002029b:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00202a2:	eb e3                	jmp    c0020287 <KePowerThread(void*)+0x11>

c00202a4 <KeChangePowerSettings(PowerSettings)>:
c00202a4:	57                   	push   edi
c00202a5:	b9 09 00 00 00       	mov    ecx,0x9
c00202aa:	56                   	push   esi
c00202ab:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00202b0:	fc                   	cld    
c00202b1:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00202b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00202b7:	5e                   	pop    esi
c00202b8:	5f                   	pop    edi
c00202b9:	c3                   	ret    

c00202ba <KeUserIOReceived()>:
c00202ba:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00202c4:	c3                   	ret    

c00202c5 <KeHandlePowerButton()>:
c00202c5:	83 ec 0c             	sub    esp,0xc
c00202c8:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c00202cd:	83 f8 02             	cmp    eax,0x2
c00202d0:	75 10                	jne    c00202e2 <KeHandlePowerButton()+0x1d>
c00202d2:	83 ec 0c             	sub    esp,0xc
c00202d5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202db:	e8 34 58 ff ff       	call   c0015b14 <Computer::shutdown()>
c00202e0:	eb 11                	jmp    c00202f3 <KeHandlePowerButton()+0x2e>
c00202e2:	48                   	dec    eax
c00202e3:	75 11                	jne    c00202f6 <KeHandlePowerButton()+0x31>
c00202e5:	83 ec 0c             	sub    esp,0xc
c00202e8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00202ee:	e8 51 58 ff ff       	call   c0015b44 <Computer::sleep()>
c00202f3:	83 c4 10             	add    esp,0x10
c00202f6:	83 c4 0c             	add    esp,0xc
c00202f9:	c3                   	ret    

c00202fa <KeHandleSleepButton()>:
c00202fa:	83 ec 0c             	sub    esp,0xc
c00202fd:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c0020302:	83 f8 02             	cmp    eax,0x2
c0020305:	75 10                	jne    c0020317 <KeHandleSleepButton()+0x1d>
c0020307:	83 ec 0c             	sub    esp,0xc
c002030a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020310:	e8 ff 57 ff ff       	call   c0015b14 <Computer::shutdown()>
c0020315:	eb 11                	jmp    c0020328 <KeHandleSleepButton()+0x2e>
c0020317:	48                   	dec    eax
c0020318:	75 11                	jne    c002032b <KeHandleSleepButton()+0x31>
c002031a:	83 ec 0c             	sub    esp,0xc
c002031d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020323:	e8 1c 58 ff ff       	call   c0015b44 <Computer::sleep()>
c0020328:	83 c4 10             	add    esp,0x10
c002032b:	83 c4 0c             	add    esp,0xc
c002032e:	c3                   	ret    

c002032f <KeSetupPowerManager()>:
c002032f:	83 ec 0c             	sub    esp,0xc
c0020332:	68 f0 00 00 00       	push   0xf0
c0020337:	6a 00                	push   0x0
c0020339:	68 76 02 02 c0       	push   0xc0020276
c002033e:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020344:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c002034e:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020355:	e8 26 4d 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c002035a:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c0020364:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c002036e:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c0020378:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c0020382:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c002038c:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c0020396:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00203a0:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00203aa:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00203b4:	83 c4 1c             	add    esp,0x1c
c00203b7:	c3                   	ret    

c00203b8 <KeRand()>:
c00203b8:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00203c2:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c00203cc:	53                   	push   ebx
c00203cd:	01 c1                	add    ecx,eax
c00203cf:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00203d4:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c00203da:	01 ca                	add    edx,ecx
c00203dc:	05 ef 04 b5 00       	add    eax,0xb504ef
c00203e1:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c00203e6:	83 d2 00             	adc    edx,0x0
c00203e9:	0f b7 da             	movzx  ebx,dx
c00203ec:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c00203f2:	0f ac d8 0e          	shrd   eax,ebx,0xe
c00203f6:	5b                   	pop    ebx
c00203f7:	c3                   	ret    

c00203f8 <KeSeedRand(unsigned int)>:
c00203f8:	53                   	push   ebx
c00203f9:	83 ec 08             	sub    esp,0x8
c00203fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020400:	e8 de 6e 00 00       	call   c00272e3 <HalGetRand()>
c0020405:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c002040f:	31 d8                	xor    eax,ebx
c0020411:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020416:	e8 9d ff ff ff       	call   c00203b8 <KeRand()>
c002041b:	83 c4 08             	add    esp,0x8
c002041e:	5b                   	pop    ebx
c002041f:	eb 97                	jmp    c00203b8 <KeRand()>

c0020421 <KeInitRand()>:
c0020421:	83 ec 0c             	sub    esp,0xc
c0020424:	e8 af 6c 00 00       	call   c00270d8 <HalQueryPerformanceCounter()>
c0020429:	0f 20 da             	mov    edx,cr3
c002042c:	0f 22 da             	mov    cr3,edx
c002042f:	0f 20 da             	mov    edx,cr3
c0020432:	0f 22 da             	mov    cr3,edx
c0020435:	0f 20 da             	mov    edx,cr3
c0020438:	0f 22 da             	mov    cr3,edx
c002043b:	0f 20 da             	mov    edx,cr3
c002043e:	0f 22 da             	mov    cr3,edx
c0020441:	83 ec 0c             	sub    esp,0xc
c0020444:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020449:	50                   	push   eax
c002044a:	e8 a9 ff ff ff       	call   c00203f8 <KeSeedRand(unsigned int)>
c002044f:	83 c4 1c             	add    esp,0x1c
c0020452:	c3                   	ret    
c0020453:	90                   	nop

c0020454 <KeResolveCompatibilitySymbol(char*)>:
c0020454:	83 ec 0c             	sub    esp,0xc
c0020457:	83 ec 08             	sub    esp,0x8
c002045a:	68 88 29 03 c0       	push   0xc0032988
c002045f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020463:	e8 18 03 fe ff       	call   c0000780 <strcmp>
c0020468:	83 c4 10             	add    esp,0x10
c002046b:	85 c0                	test   eax,eax
c002046d:	0f 94 c0             	sete   al
c0020470:	0f b6 c0             	movzx  eax,al
c0020473:	85 c0                	test   eax,eax
c0020475:	74 0d                	je     c0020484 <KeResolveCompatibilitySymbol(char*)+0x30>
c0020477:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c002047c:	e9 8b 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020481:	8d 76 00             	lea    esi,[esi+0x0]
c0020484:	83 ec 08             	sub    esp,0x8
c0020487:	68 91 29 03 c0       	push   0xc0032991
c002048c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020490:	e8 eb 02 fe ff       	call   c0000780 <strcmp>
c0020495:	83 c4 10             	add    esp,0x10
c0020498:	85 c0                	test   eax,eax
c002049a:	0f 94 c0             	sete   al
c002049d:	0f b6 c0             	movzx  eax,al
c00204a0:	85 c0                	test   eax,eax
c00204a2:	74 0c                	je     c00204b0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00204a4:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c00204a9:	e9 5e 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204ae:	66 90                	xchg   ax,ax
c00204b0:	83 ec 08             	sub    esp,0x8
c00204b3:	68 9b 29 03 c0       	push   0xc003299b
c00204b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204bc:	e8 bf 02 fe ff       	call   c0000780 <strcmp>
c00204c1:	83 c4 10             	add    esp,0x10
c00204c4:	85 c0                	test   eax,eax
c00204c6:	0f 94 c0             	sete   al
c00204c9:	0f b6 c0             	movzx  eax,al
c00204cc:	85 c0                	test   eax,eax
c00204ce:	74 0c                	je     c00204dc <KeResolveCompatibilitySymbol(char*)+0x88>
c00204d0:	b8 64 e4 02 c0       	mov    eax,0xc002e464
c00204d5:	e9 32 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204da:	66 90                	xchg   ax,ax
c00204dc:	83 ec 08             	sub    esp,0x8
c00204df:	68 a4 29 03 c0       	push   0xc00329a4
c00204e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e8:	e8 93 02 fe ff       	call   c0000780 <strcmp>
c00204ed:	83 c4 10             	add    esp,0x10
c00204f0:	85 c0                	test   eax,eax
c00204f2:	0f 94 c0             	sete   al
c00204f5:	0f b6 c0             	movzx  eax,al
c00204f8:	85 c0                	test   eax,eax
c00204fa:	74 0c                	je     c0020508 <KeResolveCompatibilitySymbol(char*)+0xb4>
c00204fc:	b8 6a 02 02 c0       	mov    eax,0xc002026a
c0020501:	e9 06 01 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020506:	66 90                	xchg   ax,ax
c0020508:	83 ec 08             	sub    esp,0x8
c002050b:	68 b7 29 03 c0       	push   0xc00329b7
c0020510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020514:	e8 67 02 fe ff       	call   c0000780 <strcmp>
c0020519:	83 c4 10             	add    esp,0x10
c002051c:	85 c0                	test   eax,eax
c002051e:	0f 94 c0             	sete   al
c0020521:	0f b6 c0             	movzx  eax,al
c0020524:	85 c0                	test   eax,eax
c0020526:	74 0c                	je     c0020534 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020528:	b8 09 fb 01 c0       	mov    eax,0xc001fb09
c002052d:	e9 da 00 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020532:	66 90                	xchg   ax,ax
c0020534:	83 ec 08             	sub    esp,0x8
c0020537:	68 d4 29 03 c0       	push   0xc00329d4
c002053c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020540:	e8 3b 02 fe ff       	call   c0000780 <strcmp>
c0020545:	83 c4 10             	add    esp,0x10
c0020548:	85 c0                	test   eax,eax
c002054a:	0f 94 c0             	sete   al
c002054d:	0f b6 c0             	movzx  eax,al
c0020550:	85 c0                	test   eax,eax
c0020552:	74 0c                	je     c0020560 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020554:	b8 30 e8 02 c0       	mov    eax,0xc002e830
c0020559:	e9 ae 00 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002055e:	66 90                	xchg   ax,ax
c0020560:	83 ec 08             	sub    esp,0x8
c0020563:	68 de 29 03 c0       	push   0xc00329de
c0020568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002056c:	e8 0f 02 fe ff       	call   c0000780 <strcmp>
c0020571:	83 c4 10             	add    esp,0x10
c0020574:	85 c0                	test   eax,eax
c0020576:	0f 94 c0             	sete   al
c0020579:	0f b6 c0             	movzx  eax,al
c002057c:	85 c0                	test   eax,eax
c002057e:	74 0c                	je     c002058c <KeResolveCompatibilitySymbol(char*)+0x138>
c0020580:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0020585:	e9 82 00 00 00       	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002058a:	66 90                	xchg   ax,ax
c002058c:	83 ec 08             	sub    esp,0x8
c002058f:	68 e7 29 03 c0       	push   0xc00329e7
c0020594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020598:	e8 e3 01 fe ff       	call   c0000780 <strcmp>
c002059d:	83 c4 10             	add    esp,0x10
c00205a0:	85 c0                	test   eax,eax
c00205a2:	0f 94 c0             	sete   al
c00205a5:	0f b6 c0             	movzx  eax,al
c00205a8:	85 c0                	test   eax,eax
c00205aa:	74 08                	je     c00205b4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00205ac:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205b1:	eb 59                	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205b3:	90                   	nop
c00205b4:	83 ec 08             	sub    esp,0x8
c00205b7:	68 ff 29 03 c0       	push   0xc00329ff
c00205bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205c0:	e8 bb 01 fe ff       	call   c0000780 <strcmp>
c00205c5:	83 c4 10             	add    esp,0x10
c00205c8:	85 c0                	test   eax,eax
c00205ca:	0f 94 c0             	sete   al
c00205cd:	0f b6 c0             	movzx  eax,al
c00205d0:	85 c0                	test   eax,eax
c00205d2:	74 08                	je     c00205dc <KeResolveCompatibilitySymbol(char*)+0x188>
c00205d4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00205d9:	eb 31                	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00205db:	90                   	nop
c00205dc:	83 ec 08             	sub    esp,0x8
c00205df:	68 0c 2a 03 c0       	push   0xc0032a0c
c00205e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205e8:	e8 93 01 fe ff       	call   c0000780 <strcmp>
c00205ed:	83 c4 10             	add    esp,0x10
c00205f0:	85 c0                	test   eax,eax
c00205f2:	0f 94 c0             	sete   al
c00205f5:	0f b6 c0             	movzx  eax,al
c00205f8:	85 c0                	test   eax,eax
c00205fa:	74 08                	je     c0020604 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00205fc:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020601:	eb 09                	jmp    c002060c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020603:	90                   	nop
c0020604:	b8 00 00 00 00       	mov    eax,0x0
c0020609:	8d 76 00             	lea    esi,[esi+0x0]
c002060c:	83 c4 0c             	add    esp,0xc
c002060f:	c3                   	ret    

c0020610 <Semaphore::Semaphore(int)>:
c0020610:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020614:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020618:	89 10                	mov    DWORD PTR [eax],edx
c002061a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002061e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020625:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020629:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020634:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002063b:	90                   	nop
c002063c:	c3                   	ret    
c002063d:	90                   	nop
c002063e:	66 90                	xchg   ax,ax

c0020640 <Semaphore::tryAcquire()>:
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	fa                   	cli    
c0020644:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020649:	83 c0 01             	add    eax,0x1
c002064c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020651:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020656:	83 c0 01             	add    eax,0x1
c0020659:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020662:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020669:	8b 00                	mov    eax,DWORD PTR [eax]
c002066b:	39 c2                	cmp    edx,eax
c002066d:	7d 5d                	jge    c00206cc <Semaphore::tryAcquire()+0x8c>
c002066f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020673:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020676:	8d 50 01             	lea    edx,[eax+0x1]
c0020679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020680:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020685:	83 e8 01             	sub    eax,0x1
c0020688:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002068d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020692:	85 c0                	test   eax,eax
c0020694:	75 1a                	jne    c00206b0 <Semaphore::tryAcquire()+0x70>
c0020696:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002069b:	85 c0                	test   eax,eax
c002069d:	74 11                	je     c00206b0 <Semaphore::tryAcquire()+0x70>
c002069f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206a9:	e8 1e 4c 00 00       	call   c00252cc <schedule()>
c00206ae:	66 90                	xchg   ax,ax
c00206b0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206b5:	83 e8 01             	sub    eax,0x1
c00206b8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206bd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206c2:	85 c0                	test   eax,eax
c00206c4:	75 02                	jne    c00206c8 <Semaphore::tryAcquire()+0x88>
c00206c6:	fb                   	sti    
c00206c7:	90                   	nop
c00206c8:	b0 01                	mov    al,0x1
c00206ca:	eb 4c                	jmp    c0020718 <Semaphore::tryAcquire()+0xd8>
c00206cc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206d1:	83 e8 01             	sub    eax,0x1
c00206d4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206d9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206de:	85 c0                	test   eax,eax
c00206e0:	75 1a                	jne    c00206fc <Semaphore::tryAcquire()+0xbc>
c00206e2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206e7:	85 c0                	test   eax,eax
c00206e9:	74 11                	je     c00206fc <Semaphore::tryAcquire()+0xbc>
c00206eb:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206f5:	e8 d2 4b 00 00       	call   c00252cc <schedule()>
c00206fa:	66 90                	xchg   ax,ax
c00206fc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020701:	83 e8 01             	sub    eax,0x1
c0020704:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020709:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002070e:	85 c0                	test   eax,eax
c0020710:	75 02                	jne    c0020714 <Semaphore::tryAcquire()+0xd4>
c0020712:	fb                   	sti    
c0020713:	90                   	nop
c0020714:	b0 00                	mov    al,0x0
c0020716:	66 90                	xchg   ax,ax
c0020718:	83 c4 0c             	add    esp,0xc
c002071b:	c3                   	ret    

c002071c <Semaphore::assertLocked(char const*)>:
c002071c:	83 ec 0c             	sub    esp,0xc
c002071f:	fa                   	cli    
c0020720:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020725:	83 c0 01             	add    eax,0x1
c0020728:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002072d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020732:	83 c0 01             	add    eax,0x1
c0020735:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002073a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020745:	8b 00                	mov    eax,DWORD PTR [eax]
c0020747:	39 c2                	cmp    edx,eax
c0020749:	7d 11                	jge    c002075c <Semaphore::assertLocked(char const*)+0x40>
c002074b:	83 ec 0c             	sub    esp,0xc
c002074e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020752:	e8 13 fb ff ff       	call   c002026a <KePanic(char const*)>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	66 90                	xchg   ax,ax
c002075c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020761:	83 e8 01             	sub    eax,0x1
c0020764:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020769:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002076e:	85 c0                	test   eax,eax
c0020770:	75 1a                	jne    c002078c <Semaphore::assertLocked(char const*)+0x70>
c0020772:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020777:	85 c0                	test   eax,eax
c0020779:	74 11                	je     c002078c <Semaphore::assertLocked(char const*)+0x70>
c002077b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020785:	e8 42 4b 00 00       	call   c00252cc <schedule()>
c002078a:	66 90                	xchg   ax,ax
c002078c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020791:	83 e8 01             	sub    eax,0x1
c0020794:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020799:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002079e:	85 c0                	test   eax,eax
c00207a0:	75 02                	jne    c00207a4 <Semaphore::assertLocked(char const*)+0x88>
c00207a2:	fb                   	sti    
c00207a3:	90                   	nop
c00207a4:	90                   	nop
c00207a5:	83 c4 0c             	add    esp,0xc
c00207a8:	c3                   	ret    
c00207a9:	90                   	nop
c00207aa:	66 90                	xchg   ax,ax

c00207ac <Semaphore::acquire(int)>:
c00207ac:	83 ec 1c             	sub    esp,0x1c
c00207af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00207b4:	0f 84 9a 00 00 00    	je     c0020854 <Semaphore::acquire(int)+0xa8>
c00207ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207c2:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00207c7:	90                   	nop
c00207c8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00207cd:	85 c0                	test   eax,eax
c00207cf:	74 77                	je     c0020848 <Semaphore::acquire(int)+0x9c>
c00207d1:	83 ec 0c             	sub    esp,0xc
c00207d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00207d8:	e8 63 fe ff ff       	call   c0020640 <Semaphore::tryAcquire()>
c00207dd:	83 c4 10             	add    esp,0x10
c00207e0:	83 f0 01             	xor    eax,0x1
c00207e3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00207e7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00207eb:	83 f0 01             	xor    eax,0x1
c00207ee:	0f b6 c0             	movzx  eax,al
c00207f1:	85 c0                	test   eax,eax
c00207f3:	75 4f                	jne    c0020844 <Semaphore::acquire(int)+0x98>
c00207f5:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c00207fa:	7f 2c                	jg     c0020828 <Semaphore::acquire(int)+0x7c>
c00207fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020800:	89 d0                	mov    eax,edx
c0020802:	c1 e0 02             	shl    eax,0x2
c0020805:	01 d0                	add    eax,edx
c0020807:	d1 e0                	shl    eax,1
c0020809:	83 ec 0c             	sub    esp,0xc
c002080c:	50                   	push   eax
c002080d:	e8 92 4c 00 00       	call   c00254a4 <milliTenthSleep(unsigned int)>
c0020812:	83 c4 10             	add    esp,0x10
c0020815:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020819:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002081d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020825:	eb a1                	jmp    c00207c8 <Semaphore::acquire(int)+0x1c>
c0020827:	90                   	nop
c0020828:	83 ec 0c             	sub    esp,0xc
c002082b:	68 90 01 00 00       	push   0x190
c0020830:	e8 6f 4c 00 00       	call   c00254a4 <milliTenthSleep(unsigned int)>
c0020835:	83 c4 10             	add    esp,0x10
c0020838:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c002083d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020842:	eb 84                	jmp    c00207c8 <Semaphore::acquire(int)+0x1c>
c0020844:	90                   	nop
c0020845:	8d 76 00             	lea    esi,[esi+0x0]
c0020848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002084c:	e9 ff 00 00 00       	jmp    c0020950 <Semaphore::acquire(int)+0x1a4>
c0020851:	8d 76 00             	lea    esi,[esi+0x0]
c0020854:	fa                   	cli    
c0020855:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002085a:	83 c0 01             	add    eax,0x1
c002085d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020862:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020867:	83 c0 01             	add    eax,0x1
c002086a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002086f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020873:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002087a:	8b 00                	mov    eax,DWORD PTR [eax]
c002087c:	39 c2                	cmp    edx,eax
c002087e:	7d 14                	jge    c0020894 <Semaphore::acquire(int)+0xe8>
c0020880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020884:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020887:	8d 50 01             	lea    edx,[eax+0x1]
c002088a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002088e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020891:	eb 6d                	jmp    c0020900 <Semaphore::acquire(int)+0x154>
c0020893:	90                   	nop
c0020894:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020899:	8b 00                	mov    eax,DWORD PTR [eax]
c002089b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00208a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208a9:	85 c0                	test   eax,eax
c00208ab:	75 13                	jne    c00208c0 <Semaphore::acquire(int)+0x114>
c00208ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00208b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208b8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208bb:	eb 17                	jmp    c00208d4 <Semaphore::acquire(int)+0x128>
c00208bd:	8d 76 00             	lea    esi,[esi+0x0]
c00208c0:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00208c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00208cc:	8b 12                	mov    edx,DWORD PTR [edx]
c00208ce:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00208d1:	8d 76 00             	lea    esi,[esi+0x0]
c00208d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00208d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00208db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	68 1c 2a 03 c0       	push   0xc0032a1c
c00208ea:	e8 f3 89 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00208ef:	83 c4 10             	add    esp,0x10
c00208f2:	83 ec 0c             	sub    esp,0xc
c00208f5:	6a 05                	push   0x5
c00208f7:	e8 8c 4a 00 00       	call   c0025388 <blockTask(TaskState)>
c00208fc:	83 c4 10             	add    esp,0x10
c00208ff:	90                   	nop
c0020900:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020905:	83 e8 01             	sub    eax,0x1
c0020908:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002090d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020912:	85 c0                	test   eax,eax
c0020914:	75 1a                	jne    c0020930 <Semaphore::acquire(int)+0x184>
c0020916:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002091b:	85 c0                	test   eax,eax
c002091d:	74 11                	je     c0020930 <Semaphore::acquire(int)+0x184>
c002091f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020929:	e8 9e 49 00 00       	call   c00252cc <schedule()>
c002092e:	66 90                	xchg   ax,ax
c0020930:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020935:	83 e8 01             	sub    eax,0x1
c0020938:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002093d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020942:	85 c0                	test   eax,eax
c0020944:	75 02                	jne    c0020948 <Semaphore::acquire(int)+0x19c>
c0020946:	fb                   	sti    
c0020947:	90                   	nop
c0020948:	b8 00 00 00 00       	mov    eax,0x0
c002094d:	8d 76 00             	lea    esi,[esi+0x0]
c0020950:	83 c4 1c             	add    esp,0x1c
c0020953:	c3                   	ret    

c0020954 <Semaphore::acquire()>:
c0020954:	83 ec 0c             	sub    esp,0xc
c0020957:	83 ec 08             	sub    esp,0x8
c002095a:	6a 00                	push   0x0
c002095c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020960:	e8 47 fe ff ff       	call   c00207ac <Semaphore::acquire(int)>
c0020965:	83 c4 10             	add    esp,0x10
c0020968:	90                   	nop
c0020969:	83 c4 0c             	add    esp,0xc
c002096c:	c3                   	ret    
c002096d:	90                   	nop
c002096e:	66 90                	xchg   ax,ax

c0020970 <Semaphore::release()>:
c0020970:	83 ec 1c             	sub    esp,0x1c
c0020973:	fa                   	cli    
c0020974:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020979:	83 c0 01             	add    eax,0x1
c002097c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020981:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020986:	83 c0 01             	add    eax,0x1
c0020989:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002098e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020992:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020995:	85 c0                	test   eax,eax
c0020997:	74 2b                	je     c00209c4 <Semaphore::release()+0x54>
c0020999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002099d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00209a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209a8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00209ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00209b2:	83 ec 0c             	sub    esp,0xc
c00209b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00209b9:	e8 fa 4b 00 00       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c00209be:	83 c4 10             	add    esp,0x10
c00209c1:	eb 15                	jmp    c00209d8 <Semaphore::release()+0x68>
c00209c3:	90                   	nop
c00209c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00209cb:	8d 50 ff             	lea    edx,[eax-0x1]
c00209ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209d2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00209d5:	8d 76 00             	lea    esi,[esi+0x0]
c00209d8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209dd:	83 e8 01             	sub    eax,0x1
c00209e0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00209e5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00209ea:	85 c0                	test   eax,eax
c00209ec:	75 1a                	jne    c0020a08 <Semaphore::release()+0x98>
c00209ee:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00209f3:	85 c0                	test   eax,eax
c00209f5:	74 11                	je     c0020a08 <Semaphore::release()+0x98>
c00209f7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020a01:	e8 c6 48 00 00       	call   c00252cc <schedule()>
c0020a06:	66 90                	xchg   ax,ax
c0020a08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a0d:	83 e8 01             	sub    eax,0x1
c0020a10:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020a15:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020a1a:	85 c0                	test   eax,eax
c0020a1c:	75 02                	jne    c0020a20 <Semaphore::release()+0xb0>
c0020a1e:	fb                   	sti    
c0020a1f:	90                   	nop
c0020a20:	90                   	nop
c0020a21:	83 c4 1c             	add    esp,0x1c
c0020a24:	c3                   	ret    

c0020a25 <KiSigKill(int)>:
c0020a25:	83 ec 0c             	sub    esp,0xc
c0020a28:	6a 00                	push   0x0
c0020a2a:	6a 00                	push   0x0
c0020a2c:	6a ff                	push   0xffffffff
c0020a2e:	6a 01                	push   0x1
c0020a30:	e8 1d 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a35:	83 c4 1c             	add    esp,0x1c
c0020a38:	c3                   	ret    

c0020a39 <KiDefaultSignalHandlerIgnore(int)>:
c0020a39:	c3                   	ret    

c0020a3a <KiDefaultSignalHandlerPause(int)>:
c0020a3a:	57                   	push   edi
c0020a3b:	b9 07 00 00 00       	mov    ecx,0x7
c0020a40:	56                   	push   esi
c0020a41:	be 77 2a 03 c0       	mov    esi,0xc0032a77
c0020a46:	83 ec 24             	sub    esp,0x24
c0020a49:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020a4d:	fc                   	cld    
c0020a4e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020a50:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020a54:	50                   	push   eax
c0020a55:	6a 00                	push   0x0
c0020a57:	6a 00                	push   0x0
c0020a59:	6a 27                	push   0x27
c0020a5b:	e8 f2 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a60:	83 c4 34             	add    esp,0x34
c0020a63:	5e                   	pop    esi
c0020a64:	5f                   	pop    edi
c0020a65:	c3                   	ret    

c0020a66 <KiDefaultSignalHandlerResume(int)>:
c0020a66:	57                   	push   edi
c0020a67:	b9 1d 00 00 00       	mov    ecx,0x1d
c0020a6c:	56                   	push   esi
c0020a6d:	be 93 2a 03 c0       	mov    esi,0xc0032a93
c0020a72:	83 ec 24             	sub    esp,0x24
c0020a75:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0020a79:	fc                   	cld    
c0020a7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a7c:	8d 44 24 03          	lea    eax,[esp+0x3]
c0020a80:	50                   	push   eax
c0020a81:	6a 00                	push   0x0
c0020a83:	6a 00                	push   0x0
c0020a85:	6a 27                	push   0x27
c0020a87:	e8 c6 45 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020a8c:	83 c4 34             	add    esp,0x34
c0020a8f:	5e                   	pop    esi
c0020a90:	5f                   	pop    edi
c0020a91:	c3                   	ret    

c0020a92 <KeDeinitSignals(SigHandlerBlock*)>:
c0020a92:	e9 24 5a ff ff       	jmp    c00164bb <free>

c0020a97 <KeInitSignals()>:
c0020a97:	53                   	push   ebx
c0020a98:	83 ec 14             	sub    esp,0x14
c0020a9b:	68 c8 00 00 00       	push   0xc8
c0020aa0:	e8 f6 59 ff ff       	call   c001649b <malloc>
c0020aa5:	83 c4 0c             	add    esp,0xc
c0020aa8:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0020ab2:	89 c3                	mov    ebx,eax
c0020ab4:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0020abe:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020ac4:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0020ac8:	6a 20                	push   0x20
c0020aca:	6a 00                	push   0x0
c0020acc:	50                   	push   eax
c0020acd:	e8 1e fa fd ff       	call   c00004f0 <memset>
c0020ad2:	83 c4 0c             	add    esp,0xc
c0020ad5:	6a 44                	push   0x44
c0020ad7:	6a 00                	push   0x0
c0020ad9:	53                   	push   ebx
c0020ada:	e8 11 fa fd ff       	call   c00004f0 <memset>
c0020adf:	83 c4 18             	add    esp,0x18
c0020ae2:	89 d8                	mov    eax,ebx
c0020ae4:	5b                   	pop    ebx
c0020ae5:	c3                   	ret    

c0020ae6 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020ae6:	53                   	push   ebx
c0020ae7:	b8 01 00 00 00       	mov    eax,0x1
c0020aec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020af0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020af4:	83 f9 10             	cmp    ecx,0x10
c0020af7:	7f 21                	jg     c0020b1a <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afd:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020b00:	89 03                	mov    DWORD PTR [ebx],eax
c0020b02:	b8 01 00 00 00       	mov    eax,0x1
c0020b07:	d3 e0                	shl    eax,cl
c0020b09:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020b0d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020b10:	31 c0                	xor    eax,eax
c0020b12:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020b1a:	5b                   	pop    ebx
c0020b1b:	c3                   	ret    

c0020b1c <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020b1c:	55                   	push   ebp
c0020b1d:	57                   	push   edi
c0020b1e:	bf 08 00 00 00       	mov    edi,0x8
c0020b23:	56                   	push   esi
c0020b24:	53                   	push   ebx
c0020b25:	83 ec 18             	sub    esp,0x18
c0020b28:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020b2c:	68 b0 2a 03 c0       	push   0xc0032ab0
c0020b31:	e8 ac 87 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0020b36:	83 c4 10             	add    esp,0x10
c0020b39:	31 c9                	xor    ecx,ecx
c0020b3b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b42:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020b48:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020b4c:	99                   	cdq    
c0020b4d:	f7 ff                	idiv   edi
c0020b4f:	8d 42 24             	lea    eax,[edx+0x24]
c0020b52:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020b56:	85 f6                	test   esi,esi
c0020b58:	75 1a                	jne    c0020b74 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020b5a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020b5e:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020b62:	50                   	push   eax
c0020b63:	50                   	push   eax
c0020b64:	52                   	push   edx
c0020b65:	68 c1 2a 03 c0       	push   0xc0032ac1
c0020b6a:	e8 73 87 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0020b6f:	83 c4 10             	add    esp,0x10
c0020b72:	eb 1b                	jmp    c0020b8f <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020b74:	41                   	inc    ecx
c0020b75:	83 f9 08             	cmp    ecx,0x8
c0020b78:	75 ce                	jne    c0020b48 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020b7a:	83 ec 0c             	sub    esp,0xc
c0020b7d:	be 01 00 00 00       	mov    esi,0x1
c0020b82:	68 e2 2a 03 c0       	push   0xc0032ae2
c0020b87:	e8 56 87 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0020b8c:	83 c4 10             	add    esp,0x10
c0020b8f:	83 c4 0c             	add    esp,0xc
c0020b92:	89 f0                	mov    eax,esi
c0020b94:	5b                   	pop    ebx
c0020b95:	5e                   	pop    esi
c0020b96:	5f                   	pop    edi
c0020b97:	5d                   	pop    ebp
c0020b98:	c3                   	ret    

c0020b99 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020b99:	55                   	push   ebp
c0020b9a:	57                   	push   edi
c0020b9b:	56                   	push   esi
c0020b9c:	53                   	push   ebx
c0020b9d:	51                   	push   ecx
c0020b9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ba2:	85 db                	test   ebx,ebx
c0020ba4:	0f 84 bc 00 00 00    	je     c0020c66 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020baa:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020bb1:	0f 84 af 00 00 00    	je     c0020c66 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bb7:	31 c9                	xor    ecx,ecx
c0020bb9:	bf 08 00 00 00       	mov    edi,0x8
c0020bbe:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020bc4:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020bc7:	99                   	cdq    
c0020bc8:	f7 ff                	idiv   edi
c0020bca:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020bd1:	85 ed                	test   ebp,ebp
c0020bd3:	0f 84 9e 00 00 00    	je     c0020c77 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020bd9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020bdf:	89 e9                	mov    ecx,ebp
c0020be1:	bf 01 00 00 00       	mov    edi,0x1
c0020be6:	d3 e7                	shl    edi,cl
c0020be8:	31 c9                	xor    ecx,ecx
c0020bea:	89 04 24             	mov    DWORD PTR [esp],eax
c0020bed:	b8 01 00 00 00       	mov    eax,0x1
c0020bf2:	d3 e0                	shl    eax,cl
c0020bf4:	85 04 24             	test   DWORD PTR [esp],eax
c0020bf7:	74 06                	je     c0020bff <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020bf9:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020bfd:	75 67                	jne    c0020c66 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bff:	41                   	inc    ecx
c0020c00:	83 f9 11             	cmp    ecx,0x11
c0020c03:	75 e8                	jne    c0020bed <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020c05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c08:	46                   	inc    esi
c0020c09:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c0f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020c1a:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020c21:	09 f8                	or     eax,edi
c0020c23:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020c29:	31 c0                	xor    eax,eax
c0020c2b:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020c33:	74 09                	je     c0020c3e <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020c35:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020c3c:	eb 06                	jmp    c0020c44 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020c3e:	40                   	inc    eax
c0020c3f:	83 f8 08             	cmp    eax,0x8
c0020c42:	75 e7                	jne    c0020c2b <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020c44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020c48:	83 fd 09             	cmp    ebp,0x9
c0020c4b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020c4e:	89 2a                	mov    DWORD PTR [edx],ebp
c0020c50:	75 07                	jne    c0020c59 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020c52:	b8 25 0a 02 c0       	mov    eax,0xc0020a25
c0020c57:	eb 31                	jmp    c0020c8a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c59:	83 f8 01             	cmp    eax,0x1
c0020c5c:	75 0c                	jne    c0020c6a <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020c5e:	f7 d7                	not    edi
c0020c60:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020c66:	31 c0                	xor    eax,eax
c0020c68:	eb 20                	jmp    c0020c8a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c6a:	85 c0                	test   eax,eax
c0020c6c:	75 1c                	jne    c0020c8a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c6e:	8b 04 ad 20 43 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbce0]
c0020c75:	eb 13                	jmp    c0020c8a <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020c77:	41                   	inc    ecx
c0020c78:	46                   	inc    esi
c0020c79:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020c7f:	83 f9 08             	cmp    ecx,0x8
c0020c82:	0f 85 36 ff ff ff    	jne    c0020bbe <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020c88:	eb dc                	jmp    c0020c66 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020c8a:	5a                   	pop    edx
c0020c8b:	5b                   	pop    ebx
c0020c8c:	5e                   	pop    esi
c0020c8d:	5f                   	pop    edi
c0020c8e:	5d                   	pop    ebp
c0020c8f:	c3                   	ret    

c0020c90 <KiCheckSignalZ>:
c0020c90:	83 ec 10             	sub    esp,0x10
c0020c93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c97:	50                   	push   eax
c0020c98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020ca0:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020ca6:	e8 ee fe ff ff       	call   c0020b99 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020cab:	5a                   	pop    edx
c0020cac:	31 d2                	xor    edx,edx
c0020cae:	59                   	pop    ecx
c0020caf:	85 c0                	test   eax,eax
c0020cb1:	74 19                	je     c0020ccc <KiCheckSignalZ+0x3c>
c0020cb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020cb9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020cbc:	89 02                	mov    DWORD PTR [edx],eax
c0020cbe:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020cc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020cc9:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020ccc:	89 d0                	mov    eax,edx
c0020cce:	83 c4 10             	add    esp,0x10
c0020cd1:	c3                   	ret    

c0020cd2 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020cd2:	56                   	push   esi
c0020cd3:	53                   	push   ebx
c0020cd4:	bb 01 00 00 00       	mov    ebx,0x1
c0020cd9:	52                   	push   edx
c0020cda:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020cde:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020ce2:	d3 e3                	shl    ebx,cl
c0020ce4:	83 f9 10             	cmp    ecx,0x10
c0020ce7:	7f 08                	jg     c0020cf1 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020ce9:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020cef:	75 10                	jne    c0020d01 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020cf1:	83 ec 0c             	sub    esp,0xc
c0020cf4:	68 f3 2a 03 c0       	push   0xc0032af3
c0020cf9:	e8 6c f5 ff ff       	call   c002026a <KePanic(char const*)>
c0020cfe:	83 c4 10             	add    esp,0x10
c0020d01:	f7 d3                	not    ebx
c0020d03:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020d09:	58                   	pop    eax
c0020d0a:	5b                   	pop    ebx
c0020d0b:	5e                   	pop    esi
c0020d0c:	c3                   	ret    

c0020d0d <KiFinishSignalZ>:
c0020d0d:	53                   	push   ebx
c0020d0e:	83 ec 10             	sub    esp,0x10
c0020d11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020d15:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020d18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d20:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020d26:	e8 a7 ff ff ff       	call   c0020cd2 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020d2b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020d31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020d38:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020d3f:	83 c4 18             	add    esp,0x18
c0020d42:	5b                   	pop    ebx
c0020d43:	c3                   	ret    

c0020d44 <SysSeekDir(regs*)>:
c0020d44:	31 c0                	xor    eax,eax
c0020d46:	31 d2                	xor    edx,edx
c0020d48:	c3                   	ret    

c0020d49 <SysTellDir(regs*)>:
c0020d49:	31 c0                	xor    eax,eax
c0020d4b:	31 d2                	xor    edx,edx
c0020d4d:	c3                   	ret    

c0020d4e <SysVerify(regs*)>:
c0020d4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d52:	31 d2                	xor    edx,edx
c0020d54:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020d57:	c3                   	ret    

c0020d58 <SysGetArgc(regs*)>:
c0020d58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020d5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020d60:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020d66:	89 c2                	mov    edx,eax
c0020d68:	c1 fa 1f             	sar    edx,0x1f
c0020d6b:	c3                   	ret    

c0020d6c <SysTTYName(regs*)>:
c0020d6c:	b8 01 00 00 00       	mov    eax,0x1
c0020d71:	31 d2                	xor    edx,edx
c0020d73:	c3                   	ret    

c0020d74 <SysFormatDisk(regs*)>:
c0020d74:	56                   	push   esi
c0020d75:	53                   	push   ebx
c0020d76:	83 ec 04             	sub    esp,0x4
c0020d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020d7d:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020d83:	eb 2a                	jmp    c0020daf <SysFormatDisk(regs*)+0x3b>
c0020d85:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020d88:	83 ec 0c             	sub    esp,0xc
c0020d8b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020d8e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020d90:	51                   	push   ecx
c0020d91:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020d94:	51                   	push   ecx
c0020d95:	50                   	push   eax
c0020d96:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020d9d:	50                   	push   eax
c0020d9e:	53                   	push   ebx
c0020d9f:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020da2:	83 c4 20             	add    esp,0x20
c0020da5:	83 f8 08             	cmp    eax,0x8
c0020da8:	89 c1                	mov    ecx,eax
c0020daa:	75 14                	jne    c0020dc0 <SysFormatDisk(regs*)+0x4c>
c0020dac:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020daf:	85 db                	test   ebx,ebx
c0020db1:	75 d2                	jne    c0020d85 <SysFormatDisk(regs*)+0x11>
c0020db3:	b8 03 00 00 00       	mov    eax,0x3
c0020db8:	31 d2                	xor    edx,edx
c0020dba:	83 c4 04             	add    esp,0x4
c0020dbd:	5b                   	pop    ebx
c0020dbe:	5e                   	pop    esi
c0020dbf:	c3                   	ret    
c0020dc0:	85 c0                	test   eax,eax
c0020dc2:	74 13                	je     c0020dd7 <SysFormatDisk(regs*)+0x63>
c0020dc4:	31 d2                	xor    edx,edx
c0020dc6:	83 f9 09             	cmp    ecx,0x9
c0020dc9:	b8 01 00 00 00       	mov    eax,0x1
c0020dce:	74 ea                	je     c0020dba <SysFormatDisk(regs*)+0x46>
c0020dd0:	b8 02 00 00 00       	mov    eax,0x2
c0020dd5:	eb e1                	jmp    c0020db8 <SysFormatDisk(regs*)+0x44>
c0020dd7:	31 c0                	xor    eax,eax
c0020dd9:	eb dd                	jmp    c0020db8 <SysFormatDisk(regs*)+0x44>

c0020ddb <SysSetDiskVolumeLabel(regs*)>:
c0020ddb:	56                   	push   esi
c0020ddc:	53                   	push   ebx
c0020ddd:	83 ec 04             	sub    esp,0x4
c0020de0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020de4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020de7:	83 f8 19             	cmp    eax,0x19
c0020dea:	77 33                	ja     c0020e1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020dec:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020df3:	85 c9                	test   ecx,ecx
c0020df5:	74 28                	je     c0020e1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020df7:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020dfa:	85 db                	test   ebx,ebx
c0020dfc:	74 21                	je     c0020e1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020dfe:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020e04:	85 d2                	test   edx,edx
c0020e06:	74 17                	je     c0020e1f <SysSetDiskVolumeLabel(regs*)+0x44>
c0020e08:	8b 32                	mov    esi,DWORD PTR [edx]
c0020e0a:	53                   	push   ebx
c0020e0b:	50                   	push   eax
c0020e0c:	51                   	push   ecx
c0020e0d:	52                   	push   edx
c0020e0e:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020e11:	83 c4 10             	add    esp,0x10
c0020e14:	83 c4 04             	add    esp,0x4
c0020e17:	5b                   	pop    ebx
c0020e18:	5e                   	pop    esi
c0020e19:	89 c2                	mov    edx,eax
c0020e1b:	c1 fa 1f             	sar    edx,0x1f
c0020e1e:	c3                   	ret    
c0020e1f:	83 c4 04             	add    esp,0x4
c0020e22:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e27:	5b                   	pop    ebx
c0020e28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e2d:	5e                   	pop    esi
c0020e2e:	c3                   	ret    

c0020e2f <SysGetDiskVolumeLabel(regs*)>:
c0020e2f:	57                   	push   edi
c0020e30:	56                   	push   esi
c0020e31:	53                   	push   ebx
c0020e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e36:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020e39:	83 fa 19             	cmp    edx,0x19
c0020e3c:	77 3c                	ja     c0020e7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e3e:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020e45:	85 c9                	test   ecx,ecx
c0020e47:	74 31                	je     c0020e7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e49:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e4c:	85 db                	test   ebx,ebx
c0020e4e:	74 2a                	je     c0020e7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e50:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020e53:	85 f6                	test   esi,esi
c0020e55:	74 23                	je     c0020e7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e57:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020e5d:	85 c0                	test   eax,eax
c0020e5f:	74 19                	je     c0020e7a <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020e61:	83 ec 0c             	sub    esp,0xc
c0020e64:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e66:	56                   	push   esi
c0020e67:	53                   	push   ebx
c0020e68:	52                   	push   edx
c0020e69:	51                   	push   ecx
c0020e6a:	50                   	push   eax
c0020e6b:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020e6e:	83 c4 20             	add    esp,0x20
c0020e71:	5b                   	pop    ebx
c0020e72:	5e                   	pop    esi
c0020e73:	89 c2                	mov    edx,eax
c0020e75:	c1 fa 1f             	sar    edx,0x1f
c0020e78:	5f                   	pop    edi
c0020e79:	c3                   	ret    
c0020e7a:	5b                   	pop    ebx
c0020e7b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020e80:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020e85:	5e                   	pop    esi
c0020e86:	5f                   	pop    edi
c0020e87:	c3                   	ret    

c0020e88 <SysShutdown(regs*)>:
c0020e88:	57                   	push   edi
c0020e89:	56                   	push   esi
c0020e8a:	83 ec 04             	sub    esp,0x4
c0020e8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e91:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020e94:	85 c0                	test   eax,eax
c0020e96:	74 1e                	je     c0020eb6 <SysShutdown(regs*)+0x2e>
c0020e98:	83 f8 01             	cmp    eax,0x1
c0020e9b:	74 5f                	je     c0020efc <SysShutdown(regs*)+0x74>
c0020e9d:	83 f8 02             	cmp    eax,0x2
c0020ea0:	be ff ff ff ff       	mov    esi,0xffffffff
c0020ea5:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020eaa:	74 32                	je     c0020ede <SysShutdown(regs*)+0x56>
c0020eac:	83 c4 04             	add    esp,0x4
c0020eaf:	89 f0                	mov    eax,esi
c0020eb1:	5e                   	pop    esi
c0020eb2:	89 fa                	mov    edx,edi
c0020eb4:	5f                   	pop    edi
c0020eb5:	c3                   	ret    
c0020eb6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ebb:	be ff ff ff ff       	mov    esi,0xffffffff
c0020ec0:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020ec5:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ec7:	6a 00                	push   0x0
c0020ec9:	6a 00                	push   0x0
c0020ecb:	6a 00                	push   0x0
c0020ecd:	50                   	push   eax
c0020ece:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	89 f0                	mov    eax,esi
c0020ed6:	83 c4 04             	add    esp,0x4
c0020ed9:	89 fa                	mov    edx,edi
c0020edb:	5e                   	pop    esi
c0020edc:	5f                   	pop    edi
c0020edd:	c3                   	ret    
c0020ede:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020ee3:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ee5:	6a 00                	push   0x0
c0020ee7:	6a 00                	push   0x0
c0020ee9:	6a 01                	push   0x1
c0020eeb:	50                   	push   eax
c0020eec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020eef:	83 c4 10             	add    esp,0x10
c0020ef2:	89 f0                	mov    eax,esi
c0020ef4:	83 c4 04             	add    esp,0x4
c0020ef7:	89 fa                	mov    edx,edi
c0020ef9:	5e                   	pop    esi
c0020efa:	5f                   	pop    edi
c0020efb:	c3                   	ret    
c0020efc:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020f01:	85 c0                	test   eax,eax
c0020f03:	74 02                	je     c0020f07 <SysShutdown(regs*)+0x7f>
c0020f05:	ff d0                	call   eax
c0020f07:	31 f6                	xor    esi,esi
c0020f09:	83 c4 04             	add    esp,0x4
c0020f0c:	89 f0                	mov    eax,esi
c0020f0e:	31 ff                	xor    edi,edi
c0020f10:	5e                   	pop    esi
c0020f11:	89 fa                	mov    edx,edi
c0020f13:	5f                   	pop    edi
c0020f14:	c3                   	ret    

c0020f15 <SysRealpath(regs*)>:
c0020f15:	53                   	push   ebx
c0020f16:	83 ec 08             	sub    esp,0x8
c0020f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f1d:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0020f20:	85 c9                	test   ecx,ecx
c0020f22:	74 36                	je     c0020f5a <SysRealpath(regs*)+0x45>
c0020f24:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020f27:	31 d2                	xor    edx,edx
c0020f29:	b8 01 00 00 00       	mov    eax,0x1
c0020f2e:	85 db                	test   ebx,ebx
c0020f30:	75 05                	jne    c0020f37 <SysRealpath(regs*)+0x22>
c0020f32:	83 c4 08             	add    esp,0x8
c0020f35:	5b                   	pop    ebx
c0020f36:	c3                   	ret    
c0020f37:	6a 00                	push   0x0
c0020f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f3e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f41:	05 0c 01 00 00       	add    eax,0x10c
c0020f46:	50                   	push   eax
c0020f47:	51                   	push   ecx
c0020f48:	53                   	push   ebx
c0020f49:	e8 a0 92 ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020f4e:	83 c4 10             	add    esp,0x10
c0020f51:	31 c0                	xor    eax,eax
c0020f53:	31 d2                	xor    edx,edx
c0020f55:	83 c4 08             	add    esp,0x8
c0020f58:	5b                   	pop    ebx
c0020f59:	c3                   	ret    
c0020f5a:	b8 01 00 00 00       	mov    eax,0x1
c0020f5f:	31 d2                	xor    edx,edx
c0020f61:	eb f2                	jmp    c0020f55 <SysRealpath(regs*)+0x40>

c0020f63 <SysReadDir(regs*)>:
c0020f63:	53                   	push   ebx
c0020f64:	83 ec 18             	sub    esp,0x18
c0020f67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020f6b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020f6e:	83 f8 02             	cmp    eax,0x2
c0020f71:	76 4f                	jbe    c0020fc2 <SysReadDir(regs*)+0x5f>
c0020f73:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020f7a:	77 52                	ja     c0020fce <SysReadDir(regs*)+0x6b>
c0020f7c:	83 ec 0c             	sub    esp,0xc
c0020f7f:	50                   	push   eax
c0020f80:	e8 ee 6e ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c0020f85:	83 c4 10             	add    esp,0x10
c0020f88:	85 c0                	test   eax,eax
c0020f8a:	74 42                	je     c0020fce <SysReadDir(regs*)+0x6b>
c0020f8c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020f94:	83 ec 0c             	sub    esp,0xc
c0020f97:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020f9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f9d:	51                   	push   ecx
c0020f9e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020fa1:	51                   	push   ecx
c0020fa2:	6a 00                	push   0x0
c0020fa4:	68 10 01 00 00       	push   0x110
c0020fa9:	50                   	push   eax
c0020faa:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020fad:	83 c4 20             	add    esp,0x20
c0020fb0:	85 c0                	test   eax,eax
c0020fb2:	89 c1                	mov    ecx,eax
c0020fb4:	74 27                	je     c0020fdd <SysReadDir(regs*)+0x7a>
c0020fb6:	31 d2                	xor    edx,edx
c0020fb8:	83 f9 07             	cmp    ecx,0x7
c0020fbb:	b8 02 00 00 00       	mov    eax,0x2
c0020fc0:	75 16                	jne    c0020fd8 <SysReadDir(regs*)+0x75>
c0020fc2:	b8 01 00 00 00       	mov    eax,0x1
c0020fc7:	31 d2                	xor    edx,edx
c0020fc9:	83 c4 18             	add    esp,0x18
c0020fcc:	5b                   	pop    ebx
c0020fcd:	c3                   	ret    
c0020fce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fd8:	83 c4 18             	add    esp,0x18
c0020fdb:	5b                   	pop    ebx
c0020fdc:	c3                   	ret    
c0020fdd:	31 c0                	xor    eax,eax
c0020fdf:	31 d2                	xor    edx,edx
c0020fe1:	eb e6                	jmp    c0020fc9 <SysReadDir(regs*)+0x66>

c0020fe3 <SysIsATTY(regs*)>:
c0020fe3:	83 ec 0c             	sub    esp,0xc
c0020fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fea:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fed:	83 f8 02             	cmp    eax,0x2
c0020ff0:	76 07                	jbe    c0020ff9 <SysIsATTY(regs*)+0x16>
c0020ff2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020ff7:	75 26                	jne    c002101f <SysIsATTY(regs*)+0x3c>
c0020ff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ffe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021001:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0021007:	85 c0                	test   eax,eax
c0021009:	74 24                	je     c002102f <SysIsATTY(regs*)+0x4c>
c002100b:	8b 10                	mov    edx,DWORD PTR [eax]
c002100d:	83 ec 0c             	sub    esp,0xc
c0021010:	50                   	push   eax
c0021011:	ff 12                	call   DWORD PTR [edx]
c0021013:	83 c4 10             	add    esp,0x10
c0021016:	31 d2                	xor    edx,edx
c0021018:	83 c4 0c             	add    esp,0xc
c002101b:	0f b6 c0             	movzx  eax,al
c002101e:	c3                   	ret    
c002101f:	83 ec 0c             	sub    esp,0xc
c0021022:	50                   	push   eax
c0021023:	e8 4b 6e ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c0021028:	83 c4 10             	add    esp,0x10
c002102b:	85 c0                	test   eax,eax
c002102d:	75 dc                	jne    c002100b <SysIsATTY(regs*)+0x28>
c002102f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021034:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021039:	83 c4 0c             	add    esp,0xc
c002103c:	c3                   	ret    

c002103d <SysSeek(regs*)>:
c002103d:	56                   	push   esi
c002103e:	53                   	push   ebx
c002103f:	83 ec 04             	sub    esp,0x4
c0021042:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021046:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021049:	8d 71 fd             	lea    esi,[ecx-0x3]
c002104c:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0021052:	77 33                	ja     c0021087 <SysSeek(regs*)+0x4a>
c0021054:	83 ec 0c             	sub    esp,0xc
c0021057:	51                   	push   ecx
c0021058:	e8 16 6e ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c002105d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0021060:	83 c4 0c             	add    esp,0xc
c0021063:	31 db                	xor    ebx,ebx
c0021065:	53                   	push   ebx
c0021066:	51                   	push   ecx
c0021067:	50                   	push   eax
c0021068:	e8 69 95 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c002106d:	83 c4 10             	add    esp,0x10
c0021070:	85 c0                	test   eax,eax
c0021072:	0f 95 c0             	setne  al
c0021075:	31 d2                	xor    edx,edx
c0021077:	0f b6 c0             	movzx  eax,al
c002107a:	f7 d8                	neg    eax
c002107c:	83 d2 00             	adc    edx,0x0
c002107f:	83 c4 04             	add    esp,0x4
c0021082:	5b                   	pop    ebx
c0021083:	f7 da                	neg    edx
c0021085:	5e                   	pop    esi
c0021086:	c3                   	ret    
c0021087:	83 c4 04             	add    esp,0x4
c002108a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002108f:	5b                   	pop    ebx
c0021090:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021095:	5e                   	pop    esi
c0021096:	c3                   	ret    

c0021097 <SysTell(regs*)>:
c0021097:	53                   	push   ebx
c0021098:	83 ec 08             	sub    esp,0x8
c002109b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002109f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210a2:	83 f8 02             	cmp    eax,0x2
c00210a5:	76 4e                	jbe    c00210f5 <SysTell(regs*)+0x5e>
c00210a7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210ac:	76 19                	jbe    c00210c7 <SysTell(regs*)+0x30>
c00210ae:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210b1:	31 d2                	xor    edx,edx
c00210b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210c0:	83 c4 08             	add    esp,0x8
c00210c3:	31 c0                	xor    eax,eax
c00210c5:	5b                   	pop    ebx
c00210c6:	c3                   	ret    
c00210c7:	83 ec 0c             	sub    esp,0xc
c00210ca:	50                   	push   eax
c00210cb:	e8 a3 6d ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c00210d0:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00210d3:	5a                   	pop    edx
c00210d4:	59                   	pop    ecx
c00210d5:	53                   	push   ebx
c00210d6:	50                   	push   eax
c00210d7:	e8 a6 95 ff ff       	call   c001a682 <File::tell(unsigned long long*)>
c00210dc:	83 c4 10             	add    esp,0x10
c00210df:	85 c0                	test   eax,eax
c00210e1:	0f 95 c0             	setne  al
c00210e4:	31 d2                	xor    edx,edx
c00210e6:	0f b6 c0             	movzx  eax,al
c00210e9:	f7 d8                	neg    eax
c00210eb:	83 d2 00             	adc    edx,0x0
c00210ee:	83 c4 08             	add    esp,0x8
c00210f1:	5b                   	pop    ebx
c00210f2:	f7 da                	neg    edx
c00210f4:	c3                   	ret    
c00210f5:	83 c4 08             	add    esp,0x8
c00210f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210fd:	5b                   	pop    ebx
c00210fe:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021103:	c3                   	ret    

c0021104 <SysSize(regs*)>:
c0021104:	53                   	push   ebx
c0021105:	83 ec 18             	sub    esp,0x18
c0021108:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002110c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002110f:	83 f8 02             	cmp    eax,0x2
c0021112:	76 54                	jbe    c0021168 <SysSize(regs*)+0x64>
c0021114:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021119:	76 19                	jbe    c0021134 <SysSize(regs*)+0x30>
c002111b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002111e:	31 d2                	xor    edx,edx
c0021120:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021126:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002112d:	83 c4 18             	add    esp,0x18
c0021130:	31 c0                	xor    eax,eax
c0021132:	5b                   	pop    ebx
c0021133:	c3                   	ret    
c0021134:	83 ec 0c             	sub    esp,0xc
c0021137:	50                   	push   eax
c0021138:	e8 36 6d ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c002113d:	83 c4 0c             	add    esp,0xc
c0021140:	8d 54 24 13          	lea    edx,[esp+0x13]
c0021144:	52                   	push   edx
c0021145:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021148:	52                   	push   edx
c0021149:	50                   	push   eax
c002114a:	e8 cb 96 ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c002114f:	83 c4 10             	add    esp,0x10
c0021152:	85 c0                	test   eax,eax
c0021154:	0f 95 c0             	setne  al
c0021157:	31 d2                	xor    edx,edx
c0021159:	0f b6 c0             	movzx  eax,al
c002115c:	f7 d8                	neg    eax
c002115e:	83 d2 00             	adc    edx,0x0
c0021161:	83 c4 18             	add    esp,0x18
c0021164:	5b                   	pop    ebx
c0021165:	f7 da                	neg    edx
c0021167:	c3                   	ret    
c0021168:	83 c4 18             	add    esp,0x18
c002116b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021170:	5b                   	pop    ebx
c0021171:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021176:	c3                   	ret    

c0021177 <SysSizeFromFilename(regs*)>:
c0021177:	55                   	push   ebp
c0021178:	57                   	push   edi
c0021179:	56                   	push   esi
c002117a:	53                   	push   ebx
c002117b:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0021181:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0021188:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002118b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c002118e:	85 f6                	test   esi,esi
c0021190:	89 f8                	mov    eax,edi
c0021192:	74 09                	je     c002119d <SysSizeFromFilename(regs*)+0x26>
c0021194:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c002119a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002119d:	83 f8 02             	cmp    eax,0x2
c00211a0:	0f 86 ca 00 00 00    	jbe    c0021270 <SysSizeFromFilename(regs*)+0xf9>
c00211a6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00211ab:	76 1f                	jbe    c00211cc <SysSizeFromFilename(regs*)+0x55>
c00211ad:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00211b0:	31 d2                	xor    edx,edx
c00211b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211bf:	31 c0                	xor    eax,eax
c00211c1:	81 c4 4c 02 00 00    	add    esp,0x24c
c00211c7:	5b                   	pop    ebx
c00211c8:	5e                   	pop    esi
c00211c9:	5f                   	pop    edi
c00211ca:	5d                   	pop    ebp
c00211cb:	c3                   	ret    
c00211cc:	83 ec 0c             	sub    esp,0xc
c00211cf:	68 14 01 00 00       	push   0x114
c00211d4:	e8 c2 52 ff ff       	call   c001649b <malloc>
c00211d9:	6a 01                	push   0x1
c00211db:	89 c5                	mov    ebp,eax
c00211dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00211e2:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00211e5:	51                   	push   ecx
c00211e6:	57                   	push   edi
c00211e7:	55                   	push   ebp
c00211e8:	e8 2f 92 ff ff       	call   c001a41c <File::File(char const*, Process*, bool)>
c00211ed:	83 c4 1c             	add    esp,0x1c
c00211f0:	8d 44 24 13          	lea    eax,[esp+0x13]
c00211f4:	50                   	push   eax
c00211f5:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00211f8:	53                   	push   ebx
c00211f9:	55                   	push   ebp
c00211fa:	e8 1b 96 ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c00211ff:	83 c4 10             	add    esp,0x10
c0021202:	85 ed                	test   ebp,ebp
c0021204:	89 c3                	mov    ebx,eax
c0021206:	74 0d                	je     c0021215 <SysSizeFromFilename(regs*)+0x9e>
c0021208:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002120b:	83 ec 0c             	sub    esp,0xc
c002120e:	55                   	push   ebp
c002120f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021212:	83 c4 10             	add    esp,0x10
c0021215:	85 db                	test   ebx,ebx
c0021217:	75 57                	jne    c0021270 <SysSizeFromFilename(regs*)+0xf9>
c0021219:	6a 00                	push   0x0
c002121b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021220:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021223:	05 0c 01 00 00       	add    eax,0x10c
c0021228:	50                   	push   eax
c0021229:	57                   	push   edi
c002122a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021231:	53                   	push   ebx
c0021232:	e8 b7 8f ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021237:	58                   	pop    eax
c0021238:	5a                   	pop    edx
c0021239:	8d 44 24 18          	lea    eax,[esp+0x18]
c002123d:	50                   	push   eax
c002123e:	53                   	push   ebx
c002123f:	e8 12 8a ff ff       	call   c0019c56 <KeDereferenceSymlink(char const*, char*)>
c0021244:	83 c4 10             	add    esp,0x10
c0021247:	ba 00 00 00 00       	mov    edx,0x0
c002124c:	83 f8 01             	cmp    eax,0x1
c002124f:	b8 00 00 00 00       	mov    eax,0x0
c0021254:	74 2f                	je     c0021285 <SysSizeFromFilename(regs*)+0x10e>
c0021256:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002125b:	74 3b                	je     c0021298 <SysSizeFromFilename(regs*)+0x121>
c002125d:	85 f6                	test   esi,esi
c002125f:	0f 84 5c ff ff ff    	je     c00211c1 <SysSizeFromFilename(regs*)+0x4a>
c0021265:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002126b:	e9 51 ff ff ff       	jmp    c00211c1 <SysSizeFromFilename(regs*)+0x4a>
c0021270:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021276:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002127b:	5b                   	pop    ebx
c002127c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021281:	5e                   	pop    esi
c0021282:	5f                   	pop    edi
c0021283:	5d                   	pop    ebp
c0021284:	c3                   	ret    
c0021285:	85 f6                	test   esi,esi
c0021287:	0f 84 34 ff ff ff    	je     c00211c1 <SysSizeFromFilename(regs*)+0x4a>
c002128d:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0021293:	e9 29 ff ff ff       	jmp    c00211c1 <SysSizeFromFilename(regs*)+0x4a>
c0021298:	85 f6                	test   esi,esi
c002129a:	0f 84 21 ff ff ff    	je     c00211c1 <SysSizeFromFilename(regs*)+0x4a>
c00212a0:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212a6:	e9 16 ff ff ff       	jmp    c00211c1 <SysSizeFromFilename(regs*)+0x4a>

c00212ab <SysSizeFromFilenameNoSymlink(regs*)>:
c00212ab:	55                   	push   ebp
c00212ac:	57                   	push   edi
c00212ad:	56                   	push   esi
c00212ae:	53                   	push   ebx
c00212af:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00212b5:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00212bc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00212bf:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00212c2:	85 f6                	test   esi,esi
c00212c4:	89 f8                	mov    eax,edi
c00212c6:	74 09                	je     c00212d1 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c00212c8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00212d1:	83 f8 02             	cmp    eax,0x2
c00212d4:	0f 86 ca 00 00 00    	jbe    c00213a4 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c00212da:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00212df:	76 1f                	jbe    c0021300 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c00212e1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00212e4:	31 d2                	xor    edx,edx
c00212e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212f3:	31 c0                	xor    eax,eax
c00212f5:	81 c4 4c 02 00 00    	add    esp,0x24c
c00212fb:	5b                   	pop    ebx
c00212fc:	5e                   	pop    esi
c00212fd:	5f                   	pop    edi
c00212fe:	5d                   	pop    ebp
c00212ff:	c3                   	ret    
c0021300:	83 ec 0c             	sub    esp,0xc
c0021303:	68 14 01 00 00       	push   0x114
c0021308:	e8 8e 51 ff ff       	call   c001649b <malloc>
c002130d:	6a 00                	push   0x0
c002130f:	89 c5                	mov    ebp,eax
c0021311:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021316:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021319:	51                   	push   ecx
c002131a:	57                   	push   edi
c002131b:	55                   	push   ebp
c002131c:	e8 fb 90 ff ff       	call   c001a41c <File::File(char const*, Process*, bool)>
c0021321:	83 c4 1c             	add    esp,0x1c
c0021324:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021328:	50                   	push   eax
c0021329:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002132c:	53                   	push   ebx
c002132d:	55                   	push   ebp
c002132e:	e8 e7 94 ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c0021333:	83 c4 10             	add    esp,0x10
c0021336:	85 ed                	test   ebp,ebp
c0021338:	89 c3                	mov    ebx,eax
c002133a:	74 0d                	je     c0021349 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c002133c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002133f:	83 ec 0c             	sub    esp,0xc
c0021342:	55                   	push   ebp
c0021343:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021346:	83 c4 10             	add    esp,0x10
c0021349:	85 db                	test   ebx,ebx
c002134b:	75 57                	jne    c00213a4 <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c002134d:	6a 00                	push   0x0
c002134f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021354:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021357:	05 0c 01 00 00       	add    eax,0x10c
c002135c:	50                   	push   eax
c002135d:	57                   	push   edi
c002135e:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021365:	53                   	push   ebx
c0021366:	e8 83 8e ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002136b:	58                   	pop    eax
c002136c:	5a                   	pop    edx
c002136d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021371:	50                   	push   eax
c0021372:	53                   	push   ebx
c0021373:	e8 de 88 ff ff       	call   c0019c56 <KeDereferenceSymlink(char const*, char*)>
c0021378:	83 c4 10             	add    esp,0x10
c002137b:	ba 00 00 00 00       	mov    edx,0x0
c0021380:	83 f8 01             	cmp    eax,0x1
c0021383:	b8 00 00 00 00       	mov    eax,0x0
c0021388:	74 2f                	je     c00213b9 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c002138a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002138f:	74 3b                	je     c00213cc <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c0021391:	85 f6                	test   esi,esi
c0021393:	0f 84 5c ff ff ff    	je     c00212f5 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021399:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c002139f:	e9 51 ff ff ff       	jmp    c00212f5 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213a4:	81 c4 4c 02 00 00    	add    esp,0x24c
c00213aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213af:	5b                   	pop    ebx
c00213b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213b5:	5e                   	pop    esi
c00213b6:	5f                   	pop    edi
c00213b7:	5d                   	pop    ebp
c00213b8:	c3                   	ret    
c00213b9:	85 f6                	test   esi,esi
c00213bb:	0f 84 34 ff ff ff    	je     c00212f5 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213c1:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00213c7:	e9 29 ff ff ff       	jmp    c00212f5 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213cc:	85 f6                	test   esi,esi
c00213ce:	0f 84 21 ff ff ff    	je     c00212f5 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00213d4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00213da:	e9 16 ff ff ff       	jmp    c00212f5 <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c00213df <SysClose(regs*)>:
c00213df:	53                   	push   ebx
c00213e0:	83 ec 08             	sub    esp,0x8
c00213e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00213ea:	83 f8 02             	cmp    eax,0x2
c00213ed:	76 41                	jbe    c0021430 <SysClose(regs*)+0x51>
c00213ef:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00213f5:	83 fa 01             	cmp    edx,0x1
c00213f8:	76 2d                	jbe    c0021427 <SysClose(regs*)+0x48>
c00213fa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00213ff:	77 2f                	ja     c0021430 <SysClose(regs*)+0x51>
c0021401:	83 ec 0c             	sub    esp,0xc
c0021404:	50                   	push   eax
c0021405:	e8 69 6a ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c002140a:	89 04 24             	mov    DWORD PTR [esp],eax
c002140d:	89 c3                	mov    ebx,eax
c002140f:	e8 62 91 ff ff       	call   c001a576 <File::close()>
c0021414:	83 c4 10             	add    esp,0x10
c0021417:	85 db                	test   ebx,ebx
c0021419:	74 0c                	je     c0021427 <SysClose(regs*)+0x48>
c002141b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002141d:	83 ec 0c             	sub    esp,0xc
c0021420:	53                   	push   ebx
c0021421:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021424:	83 c4 10             	add    esp,0x10
c0021427:	83 c4 08             	add    esp,0x8
c002142a:	31 c0                	xor    eax,eax
c002142c:	5b                   	pop    ebx
c002142d:	31 d2                	xor    edx,edx
c002142f:	c3                   	ret    
c0021430:	83 c4 08             	add    esp,0x8
c0021433:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021438:	5b                   	pop    ebx
c0021439:	ba ff ff ff ff       	mov    edx,0xffffffff
c002143e:	c3                   	ret    

c002143f <SysOpenDir(regs*)>:
c002143f:	56                   	push   esi
c0021440:	53                   	push   ebx
c0021441:	83 ec 04             	sub    esp,0x4
c0021444:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021448:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002144b:	85 c9                	test   ecx,ecx
c002144d:	74 5d                	je     c00214ac <SysOpenDir(regs*)+0x6d>
c002144f:	83 ec 0c             	sub    esp,0xc
c0021452:	68 14 01 00 00       	push   0x114
c0021457:	e8 3f 50 ff ff       	call   c001649b <malloc>
c002145c:	83 c4 0c             	add    esp,0xc
c002145f:	89 c6                	mov    esi,eax
c0021461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021466:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021469:	50                   	push   eax
c002146a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002146d:	52                   	push   edx
c002146e:	56                   	push   esi
c002146f:	e8 66 95 ff ff       	call   c001a9da <Directory::Directory(char const*, Process*)>
c0021474:	83 c4 10             	add    esp,0x10
c0021477:	85 f6                	test   esi,esi
c0021479:	74 31                	je     c00214ac <SysOpenDir(regs*)+0x6d>
c002147b:	83 ec 0c             	sub    esp,0xc
c002147e:	56                   	push   esi
c002147f:	e8 1e 96 ff ff       	call   c001aaa2 <Directory::open()>
c0021484:	83 c4 10             	add    esp,0x10
c0021487:	85 c0                	test   eax,eax
c0021489:	75 21                	jne    c00214ac <SysOpenDir(regs*)+0x6d>
c002148b:	83 ec 0c             	sub    esp,0xc
c002148e:	56                   	push   esi
c002148f:	e8 e2 66 ff ff       	call   c0017b76 <UnixFile::getFileDescriptor()>
c0021494:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021497:	83 c4 10             	add    esp,0x10
c002149a:	89 02                	mov    DWORD PTR [edx],eax
c002149c:	c1 f8 1f             	sar    eax,0x1f
c002149f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00214a2:	83 c4 04             	add    esp,0x4
c00214a5:	31 c0                	xor    eax,eax
c00214a7:	5b                   	pop    ebx
c00214a8:	31 d2                	xor    edx,edx
c00214aa:	5e                   	pop    esi
c00214ab:	c3                   	ret    
c00214ac:	83 c4 04             	add    esp,0x4
c00214af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214b4:	5b                   	pop    ebx
c00214b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214ba:	5e                   	pop    esi
c00214bb:	c3                   	ret    

c00214bc <SysMakeDir(regs*)>:
c00214bc:	56                   	push   esi
c00214bd:	53                   	push   ebx
c00214be:	83 ec 10             	sub    esp,0x10
c00214c1:	68 14 01 00 00       	push   0x114
c00214c6:	e8 d0 4f ff ff       	call   c001649b <malloc>
c00214cb:	83 c4 0c             	add    esp,0xc
c00214ce:	89 c3                	mov    ebx,eax
c00214d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00214d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00214d8:	50                   	push   eax
c00214d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00214dd:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00214e0:	52                   	push   edx
c00214e1:	53                   	push   ebx
c00214e2:	e8 f3 94 ff ff       	call   c001a9da <Directory::Directory(char const*, Process*)>
c00214e7:	83 c4 10             	add    esp,0x10
c00214ea:	85 db                	test   ebx,ebx
c00214ec:	74 2c                	je     c002151a <SysMakeDir(regs*)+0x5e>
c00214ee:	83 ec 0c             	sub    esp,0xc
c00214f1:	53                   	push   ebx
c00214f2:	e8 8b 97 ff ff       	call   c001ac82 <Directory::create()>
c00214f7:	89 c6                	mov    esi,eax
c00214f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00214fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00214fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021501:	83 c4 10             	add    esp,0x10
c0021504:	31 c0                	xor    eax,eax
c0021506:	85 f6                	test   esi,esi
c0021508:	0f 95 c0             	setne  al
c002150b:	31 d2                	xor    edx,edx
c002150d:	f7 d8                	neg    eax
c002150f:	83 d2 00             	adc    edx,0x0
c0021512:	83 c4 04             	add    esp,0x4
c0021515:	5b                   	pop    ebx
c0021516:	f7 da                	neg    edx
c0021518:	5e                   	pop    esi
c0021519:	c3                   	ret    
c002151a:	83 c4 04             	add    esp,0x4
c002151d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021522:	5b                   	pop    ebx
c0021523:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021528:	5e                   	pop    esi
c0021529:	c3                   	ret    

c002152a <SysCloseDir(regs*)>:
c002152a:	53                   	push   ebx
c002152b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021530:	83 ec 08             	sub    esp,0x8
c0021533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021537:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002153a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002153f:	8d 59 fd             	lea    ebx,[ecx-0x3]
c0021542:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0021548:	77 2a                	ja     c0021574 <SysCloseDir(regs*)+0x4a>
c002154a:	83 ec 0c             	sub    esp,0xc
c002154d:	51                   	push   ecx
c002154e:	e8 20 69 ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c0021553:	89 04 24             	mov    DWORD PTR [esp],eax
c0021556:	89 c3                	mov    ebx,eax
c0021558:	e8 a1 95 ff ff       	call   c001aafe <Directory::close()>
c002155d:	83 c4 10             	add    esp,0x10
c0021560:	85 db                	test   ebx,ebx
c0021562:	74 0c                	je     c0021570 <SysCloseDir(regs*)+0x46>
c0021564:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021566:	83 ec 0c             	sub    esp,0xc
c0021569:	53                   	push   ebx
c002156a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002156d:	83 c4 10             	add    esp,0x10
c0021570:	31 c0                	xor    eax,eax
c0021572:	31 d2                	xor    edx,edx
c0021574:	83 c4 08             	add    esp,0x8
c0021577:	5b                   	pop    ebx
c0021578:	c3                   	ret    

c0021579 <SysWait(regs*)>:
c0021579:	83 ec 10             	sub    esp,0x10
c002157c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021580:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021583:	52                   	push   edx
c0021584:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0021587:	51                   	push   ecx
c0021588:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002158b:	50                   	push   eax
c002158c:	e8 2f 3e 00 00       	call   c00253c0 <waitTask(int, int*, int)>
c0021591:	83 c4 1c             	add    esp,0x1c
c0021594:	89 c2                	mov    edx,eax
c0021596:	c1 fa 1f             	sar    edx,0x1f
c0021599:	c3                   	ret    

c002159a <SysNotImpl(regs*)>:
c002159a:	83 ec 18             	sub    esp,0x18
c002159d:	68 04 2b 03 c0       	push   0xc0032b04
c00215a2:	e8 c3 ec ff ff       	call   c002026a <KePanic(char const*)>
c00215a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00215ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00215b1:	83 c4 1c             	add    esp,0x1c
c00215b4:	c3                   	ret    

c00215b5 <SysPanic(regs*)>:
c00215b5:	83 ec 18             	sub    esp,0x18
c00215b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215bc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00215bf:	50                   	push   eax
c00215c0:	e8 a5 ec ff ff       	call   c002026a <KePanic(char const*)>
c00215c5:	b8 01 00 00 00       	mov    eax,0x1
c00215ca:	31 d2                	xor    edx,edx
c00215cc:	83 c4 1c             	add    esp,0x1c
c00215cf:	c3                   	ret    

c00215d0 <SysRmdir(regs*)>:
c00215d0:	56                   	push   esi
c00215d1:	53                   	push   ebx
c00215d2:	83 ec 10             	sub    esp,0x10
c00215d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215d9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00215dc:	68 14 01 00 00       	push   0x114
c00215e1:	e8 b5 4e ff ff       	call   c001649b <malloc>
c00215e6:	6a 00                	push   0x0
c00215e8:	89 c3                	mov    ebx,eax
c00215ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00215ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00215f2:	50                   	push   eax
c00215f3:	56                   	push   esi
c00215f4:	53                   	push   ebx
c00215f5:	e8 22 8e ff ff       	call   c001a41c <File::File(char const*, Process*, bool)>
c00215fa:	83 c4 14             	add    esp,0x14
c00215fd:	53                   	push   ebx
c00215fe:	e8 e3 90 ff ff       	call   c001a6e6 <File::unlink()>
c0021603:	83 c4 10             	add    esp,0x10
c0021606:	85 db                	test   ebx,ebx
c0021608:	89 c6                	mov    esi,eax
c002160a:	74 0c                	je     c0021618 <SysRmdir(regs*)+0x48>
c002160c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002160e:	83 ec 0c             	sub    esp,0xc
c0021611:	53                   	push   ebx
c0021612:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021615:	83 c4 10             	add    esp,0x10
c0021618:	31 c0                	xor    eax,eax
c002161a:	85 f6                	test   esi,esi
c002161c:	0f 95 c0             	setne  al
c002161f:	31 d2                	xor    edx,edx
c0021621:	f7 d8                	neg    eax
c0021623:	83 d2 00             	adc    edx,0x0
c0021626:	83 c4 04             	add    esp,0x4
c0021629:	5b                   	pop    ebx
c002162a:	f7 da                	neg    edx
c002162c:	5e                   	pop    esi
c002162d:	c3                   	ret    

c002162e <SysUnlink(regs*)>:
c002162e:	56                   	push   esi
c002162f:	53                   	push   ebx
c0021630:	83 ec 10             	sub    esp,0x10
c0021633:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021637:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c002163a:	68 14 01 00 00       	push   0x114
c002163f:	e8 57 4e ff ff       	call   c001649b <malloc>
c0021644:	6a 00                	push   0x0
c0021646:	89 c3                	mov    ebx,eax
c0021648:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002164d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021650:	50                   	push   eax
c0021651:	56                   	push   esi
c0021652:	53                   	push   ebx
c0021653:	e8 c4 8d ff ff       	call   c001a41c <File::File(char const*, Process*, bool)>
c0021658:	83 c4 14             	add    esp,0x14
c002165b:	53                   	push   ebx
c002165c:	e8 85 90 ff ff       	call   c001a6e6 <File::unlink()>
c0021661:	83 c4 10             	add    esp,0x10
c0021664:	85 db                	test   ebx,ebx
c0021666:	89 c6                	mov    esi,eax
c0021668:	74 0c                	je     c0021676 <SysUnlink(regs*)+0x48>
c002166a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002166c:	83 ec 0c             	sub    esp,0xc
c002166f:	53                   	push   ebx
c0021670:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021673:	83 c4 10             	add    esp,0x10
c0021676:	31 c0                	xor    eax,eax
c0021678:	85 f6                	test   esi,esi
c002167a:	0f 95 c0             	setne  al
c002167d:	31 d2                	xor    edx,edx
c002167f:	f7 d8                	neg    eax
c0021681:	83 d2 00             	adc    edx,0x0
c0021684:	83 c4 04             	add    esp,0x4
c0021687:	5b                   	pop    ebx
c0021688:	f7 da                	neg    edx
c002168a:	5e                   	pop    esi
c002168b:	c3                   	ret    

c002168c <SysGetArgv(regs*)>:
c002168c:	83 ec 0c             	sub    esp,0xc
c002168f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021693:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0021696:	85 c0                	test   eax,eax
c0021698:	78 2c                	js     c00216c6 <SysGetArgv(regs*)+0x3a>
c002169a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00216a0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00216a3:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00216a9:	7d 1b                	jge    c00216c6 <SysGetArgv(regs*)+0x3a>
c00216ab:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00216b2:	85 c0                	test   eax,eax
c00216b4:	74 18                	je     c00216ce <SysGetArgv(regs*)+0x42>
c00216b6:	83 ec 08             	sub    esp,0x8
c00216b9:	50                   	push   eax
c00216ba:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00216bd:	50                   	push   eax
c00216be:	e8 8d ef fd ff       	call   c0000650 <strcpy>
c00216c3:	83 c4 10             	add    esp,0x10
c00216c6:	31 c0                	xor    eax,eax
c00216c8:	31 d2                	xor    edx,edx
c00216ca:	83 c4 0c             	add    esp,0xc
c00216cd:	c3                   	ret    
c00216ce:	b8 01 00 00 00       	mov    eax,0x1
c00216d3:	31 d2                	xor    edx,edx
c00216d5:	83 c4 0c             	add    esp,0xc
c00216d8:	c3                   	ret    

c00216d9 <SysUSleep(regs*)>:
c00216d9:	83 ec 1c             	sub    esp,0x1c
c00216dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00216e0:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00216e3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00216e6:	6a 00                	push   0x0
c00216e8:	6a 64                	push   0x64
c00216ea:	52                   	push   edx
c00216eb:	50                   	push   eax
c00216ec:	e8 3f d0 00 00       	call   c002e730 <__udivdi3>
c00216f1:	83 c4 14             	add    esp,0x14
c00216f4:	50                   	push   eax
c00216f5:	e8 aa 3d 00 00       	call   c00254a4 <milliTenthSleep(unsigned int)>
c00216fa:	31 c0                	xor    eax,eax
c00216fc:	31 d2                	xor    edx,edx
c00216fe:	83 c4 1c             	add    esp,0x1c
c0021701:	c3                   	ret    

c0021702 <SysSpawn(regs*)>:
c0021702:	56                   	push   esi
c0021703:	53                   	push   ebx
c0021704:	83 ec 04             	sub    esp,0x4
c0021707:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002170b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002170e:	85 f6                	test   esi,esi
c0021710:	75 0a                	jne    c002171c <SysSpawn(regs*)+0x1a>
c0021712:	83 c4 04             	add    esp,0x4
c0021715:	31 c0                	xor    eax,eax
c0021717:	5b                   	pop    ebx
c0021718:	31 d2                	xor    edx,edx
c002171a:	5e                   	pop    esi
c002171b:	c3                   	ret    
c002171c:	83 ec 0c             	sub    esp,0xc
c002171f:	68 24 07 00 00       	push   0x724
c0021724:	e8 72 4d ff ff       	call   c001649b <malloc>
c0021729:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002172c:	83 c4 10             	add    esp,0x10
c002172f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021732:	89 c6                	mov    esi,eax
c0021734:	31 c0                	xor    eax,eax
c0021736:	85 c9                	test   ecx,ecx
c0021738:	75 08                	jne    c0021742 <SysSpawn(regs*)+0x40>
c002173a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002173f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021742:	52                   	push   edx
c0021743:	50                   	push   eax
c0021744:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021747:	50                   	push   eax
c0021748:	56                   	push   esi
c0021749:	e8 fe 34 00 00       	call   c0024c4c <Process::Process(char const*, Process*, char**)>
c002174e:	83 c4 10             	add    esp,0x10
c0021751:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021758:	75 b8                	jne    c0021712 <SysSpawn(regs*)+0x10>
c002175a:	83 ec 0c             	sub    esp,0xc
c002175d:	56                   	push   esi
c002175e:	e8 25 3a 00 00       	call   c0025188 <Process::createUserThread()>
c0021763:	8b 06                	mov    eax,DWORD PTR [esi]
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	83 c4 04             	add    esp,0x4
c002176b:	5b                   	pop    ebx
c002176c:	89 c2                	mov    edx,eax
c002176e:	c1 fa 1f             	sar    edx,0x1f
c0021771:	5e                   	pop    esi
c0021772:	c3                   	ret    

c0021773 <SysGetEnv(regs*)>:
c0021773:	57                   	push   edi
c0021774:	56                   	push   esi
c0021775:	53                   	push   ebx
c0021776:	83 ec 1c             	sub    esp,0x1c
c0021779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002177e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021782:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021785:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0021788:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c002178b:	51                   	push   ecx
c002178c:	e8 76 e9 ff ff       	call   c0020107 <KeGetProcessTotalEnvCount(Process*)>
c0021791:	83 c4 10             	add    esp,0x10
c0021794:	39 c7                	cmp    edi,eax
c0021796:	7c 12                	jl     c00217aa <SysGetEnv(regs*)+0x37>
c0021798:	31 c0                	xor    eax,eax
c002179a:	31 d2                	xor    edx,edx
c002179c:	85 f6                	test   esi,esi
c002179e:	74 03                	je     c00217a3 <SysGetEnv(regs*)+0x30>
c00217a0:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217a3:	83 c4 10             	add    esp,0x10
c00217a6:	5b                   	pop    ebx
c00217a7:	5e                   	pop    esi
c00217a8:	5f                   	pop    edi
c00217a9:	c3                   	ret    
c00217aa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217ae:	83 ec 04             	sub    esp,0x4
c00217b1:	57                   	push   edi
c00217b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00217b8:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00217bb:	57                   	push   edi
c00217bc:	50                   	push   eax
c00217bd:	e8 65 e9 ff ff       	call   c0020127 <KeGetProcessEnvPair(Process*, int)>
c00217c2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00217c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00217c9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00217cd:	83 c4 0c             	add    esp,0xc
c00217d0:	85 d2                	test   edx,edx
c00217d2:	75 23                	jne    c00217f7 <SysGetEnv(regs*)+0x84>
c00217d4:	83 ec 0c             	sub    esp,0xc
c00217d7:	50                   	push   eax
c00217d8:	e8 a3 ed fd ff       	call   c0000580 <strlen>
c00217dd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00217e0:	89 c3                	mov    ebx,eax
c00217e2:	e8 99 ed fd ff       	call   c0000580 <strlen>
c00217e7:	83 c4 10             	add    esp,0x10
c00217ea:	31 d2                	xor    edx,edx
c00217ec:	83 c4 10             	add    esp,0x10
c00217ef:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00217f3:	5b                   	pop    ebx
c00217f4:	5e                   	pop    esi
c00217f5:	5f                   	pop    edi
c00217f6:	c3                   	ret    
c00217f7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00217fa:	83 ec 08             	sub    esp,0x8
c00217fd:	50                   	push   eax
c00217fe:	56                   	push   esi
c00217ff:	e8 4c ee fd ff       	call   c0000650 <strcpy>
c0021804:	58                   	pop    eax
c0021805:	5a                   	pop    edx
c0021806:	68 1e 2b 03 c0       	push   0xc0032b1e
c002180b:	56                   	push   esi
c002180c:	e8 5f f0 fd ff       	call   c0000870 <strcat>
c0021811:	59                   	pop    ecx
c0021812:	5b                   	pop    ebx
c0021813:	57                   	push   edi
c0021814:	56                   	push   esi
c0021815:	e8 56 f0 fd ff       	call   c0000870 <strcat>
c002181a:	83 c4 10             	add    esp,0x10
c002181d:	31 c0                	xor    eax,eax
c002181f:	83 c4 10             	add    esp,0x10
c0021822:	31 d2                	xor    edx,edx
c0021824:	5b                   	pop    ebx
c0021825:	5e                   	pop    esi
c0021826:	5f                   	pop    edi
c0021827:	c3                   	ret    

c0021828 <SysSetFatAttrib(regs*)>:
c0021828:	57                   	push   edi
c0021829:	56                   	push   esi
c002182a:	53                   	push   ebx
c002182b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002182f:	83 ec 0c             	sub    esp,0xc
c0021832:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021835:	68 14 01 00 00       	push   0x114
c002183a:	e8 5c 4c ff ff       	call   c001649b <malloc>
c002183f:	83 c4 0c             	add    esp,0xc
c0021842:	89 c3                	mov    ebx,eax
c0021844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021849:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002184c:	50                   	push   eax
c002184d:	57                   	push   edi
c002184e:	53                   	push   ebx
c002184f:	e8 a6 8c ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0021854:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021857:	83 c4 0c             	add    esp,0xc
c002185a:	0f b6 d4             	movzx  edx,ah
c002185d:	0f b6 c0             	movzx  eax,al
c0021860:	52                   	push   edx
c0021861:	50                   	push   eax
c0021862:	53                   	push   ebx
c0021863:	e8 18 8f ff ff       	call   c001a780 <File::chfatattr(unsigned char, unsigned char)>
c0021868:	83 c4 10             	add    esp,0x10
c002186b:	85 db                	test   ebx,ebx
c002186d:	89 c6                	mov    esi,eax
c002186f:	74 0c                	je     c002187d <SysSetFatAttrib(regs*)+0x55>
c0021871:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021873:	83 ec 0c             	sub    esp,0xc
c0021876:	53                   	push   ebx
c0021877:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002187a:	83 c4 10             	add    esp,0x10
c002187d:	5b                   	pop    ebx
c002187e:	31 c0                	xor    eax,eax
c0021880:	85 f6                	test   esi,esi
c0021882:	0f 95 c0             	setne  al
c0021885:	31 d2                	xor    edx,edx
c0021887:	5e                   	pop    esi
c0021888:	f7 d8                	neg    eax
c002188a:	83 d2 00             	adc    edx,0x0
c002188d:	f7 da                	neg    edx
c002188f:	5f                   	pop    edi
c0021890:	c3                   	ret    

c0021891 <SysPipe(regs*)>:
c0021891:	57                   	push   edi
c0021892:	56                   	push   esi
c0021893:	53                   	push   ebx
c0021894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021898:	83 ec 0c             	sub    esp,0xc
c002189b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c002189e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00218a1:	6a 20                	push   0x20
c00218a3:	e8 f3 4b ff ff       	call   c001649b <malloc>
c00218a8:	89 c3                	mov    ebx,eax
c00218aa:	58                   	pop    eax
c00218ab:	5a                   	pop    edx
c00218ac:	68 00 50 00 00       	push   0x5000
c00218b1:	53                   	push   ebx
c00218b2:	e8 5f 55 ff ff       	call   c0016e16 <Pipe::Pipe(int)>
c00218b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218ba:	e8 b7 62 ff ff       	call   c0017b76 <UnixFile::getFileDescriptor()>
c00218bf:	89 07                	mov    DWORD PTR [edi],eax
c00218c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00218c4:	e8 ad 62 ff ff       	call   c0017b76 <UnixFile::getFileDescriptor()>
c00218c9:	83 c4 10             	add    esp,0x10
c00218cc:	31 d2                	xor    edx,edx
c00218ce:	89 06                	mov    DWORD PTR [esi],eax
c00218d0:	31 c0                	xor    eax,eax
c00218d2:	5b                   	pop    ebx
c00218d3:	5e                   	pop    esi
c00218d4:	5f                   	pop    edi
c00218d5:	c3                   	ret    

c00218d6 <SysGetUnixTime(regs*)>:
c00218d6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00218db:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00218e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00218e5:	e9 dc 95 ff ff       	jmp    c001aec6 <Clock::timeInSecondsLocal()>

c00218ea <string_ends_with(char const*, char const*)>:
c00218ea:	57                   	push   edi
c00218eb:	56                   	push   esi
c00218ec:	53                   	push   ebx
c00218ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00218f1:	83 ec 0c             	sub    esp,0xc
c00218f4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00218f8:	53                   	push   ebx
c00218f9:	e8 82 ec fd ff       	call   c0000580 <strlen>
c00218fe:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021901:	89 c6                	mov    esi,eax
c0021903:	e8 78 ec fd ff       	call   c0000580 <strlen>
c0021908:	83 c4 10             	add    esp,0x10
c002190b:	31 d2                	xor    edx,edx
c002190d:	39 c6                	cmp    esi,eax
c002190f:	7d 06                	jge    c0021917 <string_ends_with(char const*, char const*)+0x2d>
c0021911:	5b                   	pop    ebx
c0021912:	89 d0                	mov    eax,edx
c0021914:	5e                   	pop    esi
c0021915:	5f                   	pop    edi
c0021916:	c3                   	ret    
c0021917:	83 ec 08             	sub    esp,0x8
c002191a:	29 c6                	sub    esi,eax
c002191c:	57                   	push   edi
c002191d:	01 f3                	add    ebx,esi
c002191f:	53                   	push   ebx
c0021920:	e8 5b ee fd ff       	call   c0000780 <strcmp>
c0021925:	83 c4 10             	add    esp,0x10
c0021928:	31 d2                	xor    edx,edx
c002192a:	5b                   	pop    ebx
c002192b:	5e                   	pop    esi
c002192c:	85 c0                	test   eax,eax
c002192e:	5f                   	pop    edi
c002192f:	0f 94 c2             	sete   dl
c0021932:	89 d0                	mov    eax,edx
c0021934:	c3                   	ret    

c0021935 <SysOpen(regs*)>:
c0021935:	56                   	push   esi
c0021936:	53                   	push   ebx
c0021937:	81 ec 04 01 00 00    	sub    esp,0x104
c002193d:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0021944:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021947:	85 c0                	test   eax,eax
c0021949:	0f 84 c4 01 00 00    	je     c0021b13 <SysOpen(regs*)+0x1de>
c002194f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021952:	85 c0                	test   eax,eax
c0021954:	0f 84 b9 01 00 00    	je     c0021b13 <SysOpen(regs*)+0x1de>
c002195a:	6a 00                	push   0x0
c002195c:	68 20 2b 03 c0       	push   0xc0032b20
c0021961:	50                   	push   eax
c0021962:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0021966:	56                   	push   esi
c0021967:	e8 82 88 ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002196c:	89 34 24             	mov    DWORD PTR [esp],esi
c002196f:	e8 0c ec fd ff       	call   c0000580 <strlen>
c0021974:	83 c4 10             	add    esp,0x10
c0021977:	83 e8 01             	sub    eax,0x1
c002197a:	74 29                	je     c00219a5 <SysOpen(regs*)+0x70>
c002197c:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0021980:	83 fa 2e             	cmp    edx,0x2e
c0021983:	74 1c                	je     c00219a1 <SysOpen(regs*)+0x6c>
c0021985:	83 fa 3a             	cmp    edx,0x3a
c0021988:	74 17                	je     c00219a1 <SysOpen(regs*)+0x6c>
c002198a:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c002198e:	83 e8 01             	sub    eax,0x1
c0021991:	74 12                	je     c00219a5 <SysOpen(regs*)+0x70>
c0021993:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0021997:	83 fa 3a             	cmp    edx,0x3a
c002199a:	74 05                	je     c00219a1 <SysOpen(regs*)+0x6c>
c002199c:	83 fa 2e             	cmp    edx,0x2e
c002199f:	75 e9                	jne    c002198a <SysOpen(regs*)+0x55>
c00219a1:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00219a5:	83 ec 08             	sub    esp,0x8
c00219a8:	68 24 2b 03 c0       	push   0xc0032b24
c00219ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219b0:	50                   	push   eax
c00219b1:	e8 34 ff ff ff       	call   c00218ea <string_ends_with(char const*, char const*)>
c00219b6:	83 c4 10             	add    esp,0x10
c00219b9:	85 c0                	test   eax,eax
c00219bb:	74 1d                	je     c00219da <SysOpen(regs*)+0xa5>
c00219bd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00219c0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00219c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00219cd:	81 c4 04 01 00 00    	add    esp,0x104
c00219d3:	31 c0                	xor    eax,eax
c00219d5:	5b                   	pop    ebx
c00219d6:	31 d2                	xor    edx,edx
c00219d8:	5e                   	pop    esi
c00219d9:	c3                   	ret    
c00219da:	83 ec 08             	sub    esp,0x8
c00219dd:	68 29 2b 03 c0       	push   0xc0032b29
c00219e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219e5:	50                   	push   eax
c00219e6:	e8 ff fe ff ff       	call   c00218ea <string_ends_with(char const*, char const*)>
c00219eb:	83 c4 10             	add    esp,0x10
c00219ee:	85 c0                	test   eax,eax
c00219f0:	75 cb                	jne    c00219bd <SysOpen(regs*)+0x88>
c00219f2:	83 ec 08             	sub    esp,0x8
c00219f5:	68 25 2b 03 c0       	push   0xc0032b25
c00219fa:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00219fd:	50                   	push   eax
c00219fe:	e8 7d ed fd ff       	call   c0000780 <strcmp>
c0021a03:	83 c4 10             	add    esp,0x10
c0021a06:	85 c0                	test   eax,eax
c0021a08:	74 b3                	je     c00219bd <SysOpen(regs*)+0x88>
c0021a0a:	83 ec 08             	sub    esp,0x8
c0021a0d:	68 24 2b 03 c0       	push   0xc0032b24
c0021a12:	56                   	push   esi
c0021a13:	e8 d2 fe ff ff       	call   c00218ea <string_ends_with(char const*, char const*)>
c0021a18:	83 c4 10             	add    esp,0x10
c0021a1b:	85 c0                	test   eax,eax
c0021a1d:	75 9e                	jne    c00219bd <SysOpen(regs*)+0x88>
c0021a1f:	83 ec 08             	sub    esp,0x8
c0021a22:	68 2e 2b 03 c0       	push   0xc0032b2e
c0021a27:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a2a:	50                   	push   eax
c0021a2b:	e8 ba fe ff ff       	call   c00218ea <string_ends_with(char const*, char const*)>
c0021a30:	83 c4 10             	add    esp,0x10
c0021a33:	85 c0                	test   eax,eax
c0021a35:	0f 85 eb 00 00 00    	jne    c0021b26 <SysOpen(regs*)+0x1f1>
c0021a3b:	83 ec 08             	sub    esp,0x8
c0021a3e:	68 33 2b 03 c0       	push   0xc0032b33
c0021a43:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021a46:	50                   	push   eax
c0021a47:	e8 9e fe ff ff       	call   c00218ea <string_ends_with(char const*, char const*)>
c0021a4c:	83 c4 10             	add    esp,0x10
c0021a4f:	85 c0                	test   eax,eax
c0021a51:	0f 85 cf 00 00 00    	jne    c0021b26 <SysOpen(regs*)+0x1f1>
c0021a57:	83 ec 08             	sub    esp,0x8
c0021a5a:	68 2f 2b 03 c0       	push   0xc0032b2f
c0021a5f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021a62:	51                   	push   ecx
c0021a63:	e8 18 ed fd ff       	call   c0000780 <strcmp>
c0021a68:	83 c4 10             	add    esp,0x10
c0021a6b:	85 c0                	test   eax,eax
c0021a6d:	0f 84 b3 00 00 00    	je     c0021b26 <SysOpen(regs*)+0x1f1>
c0021a73:	83 ec 08             	sub    esp,0x8
c0021a76:	68 2e 2b 03 c0       	push   0xc0032b2e
c0021a7b:	56                   	push   esi
c0021a7c:	e8 69 fe ff ff       	call   c00218ea <string_ends_with(char const*, char const*)>
c0021a81:	83 c4 10             	add    esp,0x10
c0021a84:	85 c0                	test   eax,eax
c0021a86:	0f 85 9a 00 00 00    	jne    c0021b26 <SysOpen(regs*)+0x1f1>
c0021a8c:	83 ec 0c             	sub    esp,0xc
c0021a8f:	68 14 01 00 00       	push   0x114
c0021a94:	e8 02 4a ff ff       	call   c001649b <malloc>
c0021a99:	83 c4 0c             	add    esp,0xc
c0021a9c:	89 c6                	mov    esi,eax
c0021a9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021aa3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021aa6:	50                   	push   eax
c0021aa7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0021aaa:	52                   	push   edx
c0021aab:	56                   	push   esi
c0021aac:	e8 49 8a ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0021ab1:	83 c4 10             	add    esp,0x10
c0021ab4:	85 f6                	test   esi,esi
c0021ab6:	74 5b                	je     c0021b13 <SysOpen(regs*)+0x1de>
c0021ab8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021abb:	0f b6 c2             	movzx  eax,dl
c0021abe:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0021ac1:	89 d0                	mov    eax,edx
c0021ac3:	83 e0 01             	and    eax,0x1
c0021ac6:	f6 c2 02             	test   dl,0x2
c0021ac9:	74 03                	je     c0021ace <SysOpen(regs*)+0x199>
c0021acb:	83 c8 02             	or     eax,0x2
c0021ace:	f6 c2 04             	test   dl,0x4
c0021ad1:	74 03                	je     c0021ad6 <SysOpen(regs*)+0x1a1>
c0021ad3:	83 c8 04             	or     eax,0x4
c0021ad6:	f6 c2 08             	test   dl,0x8
c0021ad9:	74 03                	je     c0021ade <SysOpen(regs*)+0x1a9>
c0021adb:	83 c8 0a             	or     eax,0xa
c0021ade:	80 e2 10             	and    dl,0x10
c0021ae1:	74 03                	je     c0021ae6 <SysOpen(regs*)+0x1b1>
c0021ae3:	83 c8 12             	or     eax,0x12
c0021ae6:	83 ec 08             	sub    esp,0x8
c0021ae9:	50                   	push   eax
c0021aea:	56                   	push   esi
c0021aeb:	e8 28 8a ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0021af0:	83 c4 10             	add    esp,0x10
c0021af3:	85 c0                	test   eax,eax
c0021af5:	75 1c                	jne    c0021b13 <SysOpen(regs*)+0x1de>
c0021af7:	83 ec 0c             	sub    esp,0xc
c0021afa:	56                   	push   esi
c0021afb:	e8 76 60 ff ff       	call   c0017b76 <UnixFile::getFileDescriptor()>
c0021b00:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	89 02                	mov    DWORD PTR [edx],eax
c0021b08:	c1 f8 1f             	sar    eax,0x1f
c0021b0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021b0e:	e9 ba fe ff ff       	jmp    c00219cd <SysOpen(regs*)+0x98>
c0021b13:	81 c4 04 01 00 00    	add    esp,0x104
c0021b19:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021b1e:	5b                   	pop    ebx
c0021b1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021b24:	5e                   	pop    esi
c0021b25:	c3                   	ret    
c0021b26:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021b29:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021b2f:	e9 92 fe ff ff       	jmp    c00219c6 <SysOpen(regs*)+0x91>

c0021b34 <KeSystemCall(regs*, void*)>:
c0021b34:	53                   	push   ebx
c0021b35:	83 ec 08             	sub    esp,0x8
c0021b38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021b3c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021b3f:	83 f8 3e             	cmp    eax,0x3e
c0021b42:	77 16                	ja     c0021b5a <KeSystemCall(regs*, void*)+0x26>
c0021b44:	8b 14 85 80 43 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbc80]
c0021b4b:	85 d2                	test   edx,edx
c0021b4d:	74 0b                	je     c0021b5a <KeSystemCall(regs*, void*)+0x26>
c0021b4f:	83 ec 0c             	sub    esp,0xc
c0021b52:	53                   	push   ebx
c0021b53:	ff d2                	call   edx
c0021b55:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021b58:	eb 0d                	jmp    c0021b67 <KeSystemCall(regs*, void*)+0x33>
c0021b5a:	52                   	push   edx
c0021b5b:	52                   	push   edx
c0021b5c:	50                   	push   eax
c0021b5d:	68 38 2b 03 c0       	push   0xc0032b38
c0021b62:	e8 7b 77 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0021b67:	83 c4 10             	add    esp,0x10
c0021b6a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021b6f:	83 c4 08             	add    esp,0x8
c0021b72:	31 d2                	xor    edx,edx
c0021b74:	5b                   	pop    ebx
c0021b75:	c3                   	ret    
c0021b76:	66 90                	xchg   ax,ax

c0021b78 <KeSwitchEndian16(unsigned short)>:
c0021b78:	83 ec 04             	sub    esp,0x4
c0021b7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b7f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021b83:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b87:	c1 f8 08             	sar    eax,0x8
c0021b8a:	89 c2                	mov    edx,eax
c0021b8c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021b90:	c1 e0 08             	shl    eax,0x8
c0021b93:	09 d0                	or     eax,edx
c0021b95:	83 c4 04             	add    esp,0x4
c0021b98:	c3                   	ret    
c0021b99:	8d 76 00             	lea    esi,[esi+0x0]

c0021b9c <KeSwitchEndian32(unsigned int)>:
c0021b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba0:	c1 e8 18             	shr    eax,0x18
c0021ba3:	89 c2                	mov    edx,eax
c0021ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba9:	c1 e0 08             	shl    eax,0x8
c0021bac:	25 00 00 ff 00       	and    eax,0xff0000
c0021bb1:	09 c2                	or     edx,eax
c0021bb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bb7:	c1 e8 08             	shr    eax,0x8
c0021bba:	25 00 ff 00 00       	and    eax,0xff00
c0021bbf:	09 c2                	or     edx,eax
c0021bc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bc5:	c1 e0 18             	shl    eax,0x18
c0021bc8:	09 d0                	or     eax,edx
c0021bca:	c3                   	ret    
c0021bcb:	90                   	nop

c0021bcc <EthernetCRC32(unsigned char*, int)>:
c0021bcc:	83 ec 10             	sub    esp,0x10
c0021bcf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021bd4:	75 0a                	jne    c0021be0 <EthernetCRC32(unsigned char*, int)+0x14>
c0021bd6:	b8 00 00 00 00       	mov    eax,0x0
c0021bdb:	e9 8c 00 00 00       	jmp    c0021c6c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021be0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021be5:	7f 09                	jg     c0021bf0 <EthernetCRC32(unsigned char*, int)+0x24>
c0021be7:	b8 00 00 00 00       	mov    eax,0x0
c0021bec:	eb 7e                	jmp    c0021c6c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021bee:	66 90                	xchg   ax,ax
c0021bf0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021bf8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c04:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021c08:	7d 5a                	jge    c0021c64 <EthernetCRC32(unsigned char*, int)+0x98>
c0021c0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c12:	01 d0                	add    eax,edx
c0021c14:	8a 00                	mov    al,BYTE PTR [eax]
c0021c16:	0f b6 c0             	movzx  eax,al
c0021c19:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021c1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c25:	8d 76 00             	lea    esi,[esi+0x0]
c0021c28:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021c2d:	7f 2d                	jg     c0021c5c <EthernetCRC32(unsigned char*, int)+0x90>
c0021c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c33:	83 e0 01             	and    eax,0x1
c0021c36:	74 10                	je     c0021c48 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3c:	d1 e8                	shr    eax,1
c0021c3e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021c43:	eb 0b                	jmp    c0021c50 <EthernetCRC32(unsigned char*, int)+0x84>
c0021c45:	8d 76 00             	lea    esi,[esi+0x0]
c0021c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c4c:	d1 e8                	shr    eax,1
c0021c4e:	66 90                	xchg   ax,ax
c0021c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021c54:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021c59:	eb cd                	jmp    c0021c28 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021c5b:	90                   	nop
c0021c5c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021c61:	eb 9d                	jmp    c0021c00 <EthernetCRC32(unsigned char*, int)+0x34>
c0021c63:	90                   	nop
c0021c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c68:	f7 d0                	not    eax
c0021c6a:	66 90                	xchg   ax,ax
c0021c6c:	83 c4 10             	add    esp,0x10
c0021c6f:	c3                   	ret    

c0021c70 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021c70:	83 ec 2c             	sub    esp,0x2c
c0021c73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c77:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021c7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021c84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021c8b:	0f b7 c0             	movzx  eax,ax
c0021c8e:	3d 06 08 00 00       	cmp    eax,0x806
c0021c93:	75 13                	jne    c0021ca8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021c95:	83 ec 0c             	sub    esp,0xc
c0021c98:	68 4c 2b 03 c0       	push   0xc0032b4c
c0021c9d:	e8 40 76 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0021ca2:	83 c4 10             	add    esp,0x10
c0021ca5:	eb 25                	jmp    c0021ccc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021ca7:	90                   	nop
c0021ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021cac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021caf:	0f b7 c0             	movzx  eax,ax
c0021cb2:	3d 00 08 00 00       	cmp    eax,0x800
c0021cb7:	75 13                	jne    c0021ccc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021cb9:	83 ec 0c             	sub    esp,0xc
c0021cbc:	68 62 2b 03 c0       	push   0xc0032b62
c0021cc1:	e8 1c 76 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0021cc6:	83 c4 10             	add    esp,0x10
c0021cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0021ccc:	90                   	nop
c0021ccd:	83 c4 2c             	add    esp,0x2c
c0021cd0:	c3                   	ret    
c0021cd1:	66 90                	xchg   ax,ax
c0021cd3:	90                   	nop

c0021cd4 <KeNetCreateSemaphore>:
c0021cd4:	53                   	push   ebx
c0021cd5:	83 ec 18             	sub    esp,0x18
c0021cd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021ce0:	83 ec 0c             	sub    esp,0xc
c0021ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ce7:	e8 af 47 ff ff       	call   c001649b <malloc>
c0021cec:	83 c4 10             	add    esp,0x10
c0021cef:	89 c3                	mov    ebx,eax
c0021cf1:	83 ec 08             	sub    esp,0x8
c0021cf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021cf8:	53                   	push   ebx
c0021cf9:	e8 12 e9 ff ff       	call   c0020610 <Semaphore::Semaphore(int)>
c0021cfe:	83 c4 10             	add    esp,0x10
c0021d01:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021d05:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d0d:	89 10                	mov    DWORD PTR [eax],edx
c0021d0f:	90                   	nop
c0021d10:	83 c4 18             	add    esp,0x18
c0021d13:	5b                   	pop    ebx
c0021d14:	c3                   	ret    
c0021d15:	8d 76 00             	lea    esi,[esi+0x0]

c0021d18 <KeNetFreeSemaphore>:
c0021d18:	83 ec 0c             	sub    esp,0xc
c0021d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d21:	83 ec 08             	sub    esp,0x8
c0021d24:	6a 10                	push   0x10
c0021d26:	50                   	push   eax
c0021d27:	e8 b8 74 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c0021d2c:	83 c4 10             	add    esp,0x10
c0021d2f:	90                   	nop
c0021d30:	83 c4 0c             	add    esp,0xc
c0021d33:	c3                   	ret    

c0021d34 <KeNetSignalSemaphore>:
c0021d34:	83 ec 0c             	sub    esp,0xc
c0021d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d3d:	83 ec 0c             	sub    esp,0xc
c0021d40:	50                   	push   eax
c0021d41:	e8 2a ec ff ff       	call   c0020970 <Semaphore::release()>
c0021d46:	83 c4 10             	add    esp,0x10
c0021d49:	90                   	nop
c0021d4a:	83 c4 0c             	add    esp,0xc
c0021d4d:	c3                   	ret    
c0021d4e:	66 90                	xchg   ax,ax

c0021d50 <KeNetWaitSemaphore>:
c0021d50:	83 ec 0c             	sub    esp,0xc
c0021d53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d57:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d59:	83 ec 08             	sub    esp,0x8
c0021d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d60:	50                   	push   eax
c0021d61:	e8 46 ea ff ff       	call   c00207ac <Semaphore::acquire(int)>
c0021d66:	83 c4 10             	add    esp,0x10
c0021d69:	83 c4 0c             	add    esp,0xc
c0021d6c:	c3                   	ret    
c0021d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0021d70 <KeNetCreateThread>:
c0021d70:	83 ec 0c             	sub    esp,0xc
c0021d73:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021d78:	68 80 00 00 00       	push   0x80
c0021d7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021d85:	50                   	push   eax
c0021d86:	e8 f5 32 00 00       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c0021d8b:	83 c4 10             	add    esp,0x10
c0021d8e:	90                   	nop
c0021d8f:	83 c4 0c             	add    esp,0xc
c0021d92:	c3                   	ret    
c0021d93:	90                   	nop

c0021d94 <KeCPanic>:
c0021d94:	83 ec 0c             	sub    esp,0xc
c0021d97:	83 ec 0c             	sub    esp,0xc
c0021d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d9e:	e8 c7 e4 ff ff       	call   c002026a <KePanic(char const*)>
c0021da3:	83 c4 10             	add    esp,0x10
c0021da6:	90                   	nop
c0021da7:	83 c4 0c             	add    esp,0xc
c0021daa:	c3                   	ret    
c0021dab:	90                   	nop

c0021dac <KeCPuts>:
c0021dac:	83 ec 0c             	sub    esp,0xc
c0021daf:	83 ec 08             	sub    esp,0x8
c0021db2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021db6:	68 16 32 03 c0       	push   0xc0033216
c0021dbb:	e8 22 75 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0021dc0:	83 c4 10             	add    esp,0x10
c0021dc3:	90                   	nop
c0021dc4:	83 c4 0c             	add    esp,0xc
c0021dc7:	c3                   	ret    

c0021dc8 <CmOpen(char const*)>:
c0021dc8:	57                   	push   edi
c0021dc9:	56                   	push   esi
c0021dca:	53                   	push   ebx
c0021dcb:	83 ec 1c             	sub    esp,0x1c
c0021dce:	6a 30                	push   0x30
c0021dd0:	e8 c6 46 ff ff       	call   c001649b <malloc>
c0021dd5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021ddc:	89 c3                	mov    ebx,eax
c0021dde:	e8 b8 46 ff ff       	call   c001649b <malloc>
c0021de3:	83 c4 0c             	add    esp,0xc
c0021de6:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021dec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021df0:	89 c6                	mov    esi,eax
c0021df2:	50                   	push   eax
c0021df3:	e8 02 87 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0021df8:	83 c4 0c             	add    esp,0xc
c0021dfb:	89 33                	mov    DWORD PTR [ebx],esi
c0021dfd:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021e01:	50                   	push   eax
c0021e02:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021e06:	50                   	push   eax
c0021e07:	56                   	push   esi
c0021e08:	e8 0d 8a ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c0021e0d:	5a                   	pop    edx
c0021e0e:	59                   	pop    ecx
c0021e0f:	6a 01                	push   0x1
c0021e11:	ff 33                	push   DWORD PTR [ebx]
c0021e13:	e8 00 87 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0021e18:	5e                   	pop    esi
c0021e19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e1d:	e8 79 46 ff ff       	call   c001649b <malloc>
c0021e22:	5a                   	pop    edx
c0021e23:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021e27:	89 c7                	mov    edi,eax
c0021e29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e2b:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e2d:	56                   	push   esi
c0021e2e:	57                   	push   edi
c0021e2f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e37:	50                   	push   eax
c0021e38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e3b:	83 c4 14             	add    esp,0x14
c0021e3e:	ff 33                	push   DWORD PTR [ebx]
c0021e40:	e8 31 87 ff ff       	call   c001a576 <File::close()>
c0021e45:	59                   	pop    ecx
c0021e46:	58                   	pop    eax
c0021e47:	6a 13                	push   0x13
c0021e49:	ff 33                	push   DWORD PTR [ebx]
c0021e4b:	e8 c8 86 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0021e50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e52:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e54:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e57:	57                   	push   edi
c0021e58:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e60:	50                   	push   eax
c0021e61:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021e64:	83 c4 14             	add    esp,0x14
c0021e67:	57                   	push   edi
c0021e68:	e8 4e 46 ff ff       	call   c00164bb <free>
c0021e6d:	83 c4 10             	add    esp,0x10
c0021e70:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021e73:	75 10                	jne    c0021e85 <CmOpen(char const*)+0xbd>
c0021e75:	83 ec 0c             	sub    esp,0xc
c0021e78:	68 77 2b 03 c0       	push   0xc0032b77
c0021e7d:	e8 e8 e3 ff ff       	call   c002026a <KePanic(char const*)>
c0021e82:	83 c4 10             	add    esp,0x10
c0021e85:	50                   	push   eax
c0021e86:	6a 00                	push   0x0
c0021e88:	6a 00                	push   0x0
c0021e8a:	ff 33                	push   DWORD PTR [ebx]
c0021e8c:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021e8f:	e8 42 87 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0021e94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e96:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e98:	89 34 24             	mov    DWORD PTR [esp],esi
c0021e9b:	57                   	push   edi
c0021e9c:	6a 00                	push   0x0
c0021e9e:	6a 2b                	push   0x2b
c0021ea0:	50                   	push   eax
c0021ea1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021ea4:	83 c4 1c             	add    esp,0x1c
c0021ea7:	6a 00                	push   0x0
c0021ea9:	6a 00                	push   0x0
c0021eab:	ff 33                	push   DWORD PTR [ebx]
c0021ead:	e8 24 87 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0021eb2:	83 c4 0c             	add    esp,0xc
c0021eb5:	6a 08                	push   0x8
c0021eb7:	68 88 2b 03 c0       	push   0xc0032b88
c0021ebc:	57                   	push   edi
c0021ebd:	e8 be e4 fd ff       	call   c0000380 <memcmp>
c0021ec2:	83 c4 10             	add    esp,0x10
c0021ec5:	85 c0                	test   eax,eax
c0021ec7:	74 10                	je     c0021ed9 <CmOpen(char const*)+0x111>
c0021ec9:	83 ec 0c             	sub    esp,0xc
c0021ecc:	68 91 2b 03 c0       	push   0xc0032b91
c0021ed1:	e8 94 e3 ff ff       	call   c002026a <KePanic(char const*)>
c0021ed6:	83 c4 10             	add    esp,0x10
c0021ed9:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021edd:	83 c4 10             	add    esp,0x10
c0021ee0:	89 d8                	mov    eax,ebx
c0021ee2:	5b                   	pop    ebx
c0021ee3:	5e                   	pop    esi
c0021ee4:	5f                   	pop    edi
c0021ee5:	c3                   	ret    

c0021ee6 <CmClose(Reghive_Tag*)>:
c0021ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eea:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021eee:	74 0b                	je     c0021efb <CmClose(Reghive_Tag*)+0x15>
c0021ef0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ef6:	e9 7b 86 ff ff       	jmp    c001a576 <File::close()>
c0021efb:	c3                   	ret    

c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021efc:	53                   	push   ebx
c0021efd:	83 ec 18             	sub    esp,0x18
c0021f00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021f04:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021f08:	74 29                	je     c0021f33 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021f0a:	50                   	push   eax
c0021f0b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021f10:	99                   	cdq    
c0021f11:	52                   	push   edx
c0021f12:	50                   	push   eax
c0021f13:	ff 33                	push   DWORD PTR [ebx]
c0021f15:	e8 bc 86 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0021f1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021f1c:	5a                   	pop    edx
c0021f1d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021f21:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f23:	51                   	push   ecx
c0021f24:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021f28:	6a 00                	push   0x0
c0021f2a:	6a 2b                	push   0x2b
c0021f2c:	50                   	push   eax
c0021f2d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021f30:	83 c4 20             	add    esp,0x20
c0021f33:	83 c4 18             	add    esp,0x18
c0021f36:	5b                   	pop    ebx
c0021f37:	c3                   	ret    

c0021f38 <CmGetString(Reghive_Tag*, int, char*)>:
c0021f38:	55                   	push   ebp
c0021f39:	57                   	push   edi
c0021f3a:	56                   	push   esi
c0021f3b:	53                   	push   ebx
c0021f3c:	31 db                	xor    ebx,ebx
c0021f3e:	83 ec 70             	sub    esp,0x70
c0021f41:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021f45:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021f4c:	50                   	push   eax
c0021f4d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021f54:	55                   	push   ebp
c0021f55:	e8 a2 ff ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f5a:	83 c4 10             	add    esp,0x10
c0021f5d:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021f62:	c1 e0 08             	shl    eax,0x8
c0021f65:	89 c2                	mov    edx,eax
c0021f67:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021f6c:	09 d0                	or     eax,edx
c0021f6e:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021f73:	c1 e0 08             	shl    eax,0x8
c0021f76:	09 d0                	or     eax,edx
c0021f78:	74 25                	je     c0021f9f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021f7a:	52                   	push   edx
c0021f7b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021f7f:	52                   	push   edx
c0021f80:	6b fb 0d             	imul   edi,ebx,0xd
c0021f83:	50                   	push   eax
c0021f84:	55                   	push   ebp
c0021f85:	e8 72 ff ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021f8a:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021f8e:	b9 27 00 00 00       	mov    ecx,0x27
c0021f93:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021f9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f9c:	83 c4 10             	add    esp,0x10
c0021f9f:	83 c3 03             	add    ebx,0x3
c0021fa2:	83 fb 15             	cmp    ebx,0x15
c0021fa5:	75 b6                	jne    c0021f5d <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021fa7:	83 c4 6c             	add    esp,0x6c
c0021faa:	5b                   	pop    ebx
c0021fab:	5e                   	pop    esi
c0021fac:	5f                   	pop    edi
c0021fad:	5d                   	pop    ebp
c0021fae:	c3                   	ret    

c0021faf <CmEnterDirectory(Reghive_Tag*, int)>:
c0021faf:	83 ec 40             	sub    esp,0x40
c0021fb2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021fb6:	50                   	push   eax
c0021fb7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fbb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021fbf:	e8 38 ff ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021fc4:	83 c4 10             	add    esp,0x10
c0021fc7:	83 c8 ff             	or     eax,0xffffffff
c0021fca:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021fcf:	75 19                	jne    c0021fea <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021fd1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021fd6:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021fdb:	c1 e0 08             	shl    eax,0x8
c0021fde:	09 c2                	or     edx,eax
c0021fe0:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021fe5:	c1 e0 10             	shl    eax,0x10
c0021fe8:	09 d0                	or     eax,edx
c0021fea:	83 c4 3c             	add    esp,0x3c
c0021fed:	c3                   	ret    

c0021fee <CmGetNext(Reghive_Tag*, int)>:
c0021fee:	83 ec 40             	sub    esp,0x40
c0021ff1:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021ff5:	50                   	push   eax
c0021ff6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ffa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ffe:	e8 f9 fe ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022003:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0022008:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c002200d:	c1 e0 08             	shl    eax,0x8
c0022010:	09 c2                	or     edx,eax
c0022012:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0022017:	83 c4 4c             	add    esp,0x4c
c002201a:	c1 e0 10             	shl    eax,0x10
c002201d:	09 d0                	or     eax,edx
c002201f:	c3                   	ret    

c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0022020:	53                   	push   ebx
c0022021:	83 ec 18             	sub    esp,0x18
c0022024:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022028:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c002202c:	74 29                	je     c0022057 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c002202e:	50                   	push   eax
c002202f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0022034:	99                   	cdq    
c0022035:	52                   	push   edx
c0022036:	50                   	push   eax
c0022037:	ff 33                	push   DWORD PTR [ebx]
c0022039:	e8 98 85 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c002203e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022040:	5a                   	pop    edx
c0022041:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022045:	8b 10                	mov    edx,DWORD PTR [eax]
c0022047:	51                   	push   ecx
c0022048:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002204c:	6a 00                	push   0x0
c002204e:	6a 2b                	push   0x2b
c0022050:	50                   	push   eax
c0022051:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0022054:	83 c4 20             	add    esp,0x20
c0022057:	83 c4 18             	add    esp,0x18
c002205a:	5b                   	pop    ebx
c002205b:	c3                   	ret    

c002205c <CmFreeExtent(Reghive_Tag*, int)>:
c002205c:	53                   	push   ebx
c002205d:	83 ec 3c             	sub    esp,0x3c
c0022060:	6a 2b                	push   0x2b
c0022062:	6a 00                	push   0x0
c0022064:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022068:	53                   	push   ebx
c0022069:	e8 82 e4 fd ff       	call   c00004f0 <memset>
c002206e:	83 c4 0c             	add    esp,0xc
c0022071:	53                   	push   ebx
c0022072:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022076:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002207a:	e8 a1 ff ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002207f:	83 c4 48             	add    esp,0x48
c0022082:	5b                   	pop    ebx
c0022083:	c3                   	ret    

c0022084 <CmUpdateHeader(Reghive_Tag*)>:
c0022084:	83 ec 0c             	sub    esp,0xc
c0022087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c002208f:	74 10                	je     c00220a1 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0022091:	52                   	push   edx
c0022092:	8d 50 05             	lea    edx,[eax+0x5]
c0022095:	52                   	push   edx
c0022096:	6a 00                	push   0x0
c0022098:	50                   	push   eax
c0022099:	e8 82 ff ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002209e:	83 c4 10             	add    esp,0x10
c00220a1:	83 c4 0c             	add    esp,0xc
c00220a4:	c3                   	ret    

c00220a5 <CmExpand(Reghive_Tag*, int)>:
c00220a5:	55                   	push   ebp
c00220a6:	57                   	push   edi
c00220a7:	83 cf ff             	or     edi,0xffffffff
c00220aa:	56                   	push   esi
c00220ab:	53                   	push   ebx
c00220ac:	83 ec 3c             	sub    esp,0x3c
c00220af:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00220b3:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00220b7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00220bb:	74 59                	je     c0022116 <CmExpand(Reghive_Tag*, int)+0x71>
c00220bd:	50                   	push   eax
c00220be:	31 d2                	xor    edx,edx
c00220c0:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00220c4:	31 ff                	xor    edi,edi
c00220c6:	52                   	push   edx
c00220c7:	50                   	push   eax
c00220c8:	ff 33                	push   DWORD PTR [ebx]
c00220ca:	e8 07 85 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c00220cf:	83 c4 0c             	add    esp,0xc
c00220d2:	6a 2b                	push   0x2b
c00220d4:	6a 00                	push   0x0
c00220d6:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c00220da:	55                   	push   ebp
c00220db:	e8 10 e4 fd ff       	call   c00004f0 <memset>
c00220e0:	83 c4 10             	add    esp,0x10
c00220e3:	39 f7                	cmp    edi,esi
c00220e5:	7d 1b                	jge    c0022102 <CmExpand(Reghive_Tag*, int)+0x5d>
c00220e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00220e9:	83 ec 0c             	sub    esp,0xc
c00220ec:	47                   	inc    edi
c00220ed:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c00220f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00220f3:	51                   	push   ecx
c00220f4:	55                   	push   ebp
c00220f5:	6a 00                	push   0x0
c00220f7:	6a 2b                	push   0x2b
c00220f9:	50                   	push   eax
c00220fa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00220fd:	83 c4 20             	add    esp,0x20
c0022100:	eb e1                	jmp    c00220e3 <CmExpand(Reghive_Tag*, int)+0x3e>
c0022102:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0022105:	83 ec 0c             	sub    esp,0xc
c0022108:	01 fe                	add    esi,edi
c002210a:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c002210d:	53                   	push   ebx
c002210e:	e8 71 ff ff ff       	call   c0022084 <CmUpdateHeader(Reghive_Tag*)>
c0022113:	83 c4 10             	add    esp,0x10
c0022116:	83 c4 3c             	add    esp,0x3c
c0022119:	89 f8                	mov    eax,edi
c002211b:	5b                   	pop    ebx
c002211c:	5e                   	pop    esi
c002211d:	5f                   	pop    edi
c002211e:	5d                   	pop    ebp
c002211f:	c3                   	ret    

c0022120 <CmFindUnusedExtent(Reghive_Tag*)>:
c0022120:	55                   	push   ebp
c0022121:	57                   	push   edi
c0022122:	56                   	push   esi
c0022123:	53                   	push   ebx
c0022124:	83 cb ff             	or     ebx,0xffffffff
c0022127:	83 ec 1c             	sub    esp,0x1c
c002212a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002212e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0022132:	74 68                	je     c002219c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022134:	51                   	push   ecx
c0022135:	be 2b 00 00 00       	mov    esi,0x2b
c002213a:	6a 00                	push   0x0
c002213c:	31 ff                	xor    edi,edi
c002213e:	6a 00                	push   0x0
c0022140:	31 db                	xor    ebx,ebx
c0022142:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022145:	e8 8c 84 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c002214a:	83 c4 10             	add    esp,0x10
c002214d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022150:	76 3b                	jbe    c002218d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022152:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022155:	83 ec 0c             	sub    esp,0xc
c0022158:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002215c:	8b 10                	mov    edx,DWORD PTR [eax]
c002215e:	51                   	push   ecx
c002215f:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022163:	51                   	push   ecx
c0022164:	6a 00                	push   0x0
c0022166:	6a 01                	push   0x1
c0022168:	50                   	push   eax
c0022169:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002216c:	83 c4 20             	add    esp,0x20
c002216f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022174:	74 26                	je     c002219c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022176:	52                   	push   edx
c0022177:	43                   	inc    ebx
c0022178:	57                   	push   edi
c0022179:	56                   	push   esi
c002217a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002217d:	e8 54 84 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0022182:	83 c6 2b             	add    esi,0x2b
c0022185:	83 d7 00             	adc    edi,0x0
c0022188:	83 c4 10             	add    esp,0x10
c002218b:	eb c0                	jmp    c002214d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c002218d:	50                   	push   eax
c002218e:	50                   	push   eax
c002218f:	6a 40                	push   0x40
c0022191:	55                   	push   ebp
c0022192:	e8 0e ff ff ff       	call   c00220a5 <CmExpand(Reghive_Tag*, int)>
c0022197:	83 c4 10             	add    esp,0x10
c002219a:	89 c3                	mov    ebx,eax
c002219c:	83 c4 1c             	add    esp,0x1c
c002219f:	89 d8                	mov    eax,ebx
c00221a1:	5b                   	pop    ebx
c00221a2:	5e                   	pop    esi
c00221a3:	5f                   	pop    edi
c00221a4:	5d                   	pop    ebp
c00221a5:	c3                   	ret    

c00221a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00221a6:	55                   	push   ebp
c00221a7:	57                   	push   edi
c00221a8:	56                   	push   esi
c00221a9:	53                   	push   ebx
c00221aa:	81 ec 88 00 00 00    	sub    esp,0x88
c00221b0:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00221b7:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221be:	e8 5d ff ff ff       	call   c0022120 <CmFindUnusedExtent(Reghive_Tag*)>
c00221c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00221c7:	83 c4 0c             	add    esp,0xc
c00221ca:	6a 2b                	push   0x2b
c00221cc:	6a 00                	push   0x0
c00221ce:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00221d2:	55                   	push   ebp
c00221d3:	e8 18 e3 fd ff       	call   c00004f0 <memset>
c00221d8:	83 c4 10             	add    esp,0x10
c00221db:	85 db                	test   ebx,ebx
c00221dd:	74 12                	je     c00221f1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00221df:	51                   	push   ecx
c00221e0:	55                   	push   ebp
c00221e1:	53                   	push   ebx
c00221e2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221e9:	e8 0e fd ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221ee:	83 c4 10             	add    esp,0x10
c00221f1:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00221f5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00221fc:	b9 2b 00 00 00       	mov    ecx,0x2b
c0022201:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022203:	85 db                	test   ebx,ebx
c0022205:	74 49                	je     c0022250 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0022207:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c002220c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0022211:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022215:	c1 e0 08             	shl    eax,0x8
c0022218:	81 e2 ff ff ff 00    	and    edx,0xffffff
c002221e:	09 c8                	or     eax,ecx
c0022220:	74 11                	je     c0022233 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0022222:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0022226:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c002222a:	c1 e8 10             	shr    eax,0x10
c002222d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022231:	eb 0f                	jmp    c0022242 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0022233:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022238:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002223d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022242:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022246:	c1 ea 08             	shr    edx,0x8
c0022249:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002224e:	eb 0f                	jmp    c002225f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022250:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022255:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002225a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002225f:	52                   	push   edx
c0022260:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022264:	50                   	push   eax
c0022265:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022269:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022270:	e8 ab fd ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	85 db                	test   ebx,ebx
c002227a:	74 12                	je     c002228e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002227c:	50                   	push   eax
c002227d:	55                   	push   ebp
c002227e:	53                   	push   ebx
c002227f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022286:	e8 95 fd ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002228b:	83 c4 10             	add    esp,0x10
c002228e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022292:	83 c4 7c             	add    esp,0x7c
c0022295:	5b                   	pop    ebx
c0022296:	5e                   	pop    esi
c0022297:	5f                   	pop    edi
c0022298:	5d                   	pop    ebp
c0022299:	c3                   	ret    

c002229a <CmSetString(Reghive_Tag*, int, char const*)>:
c002229a:	55                   	push   ebp
c002229b:	57                   	push   edi
c002229c:	56                   	push   esi
c002229d:	53                   	push   ebx
c002229e:	bb 27 00 00 00       	mov    ebx,0x27
c00222a3:	81 ec 88 00 00 00    	sub    esp,0x88
c00222a9:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c00222b0:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00222b7:	e8 c4 e2 fd ff       	call   c0000580 <strlen>
c00222bc:	8d 48 26             	lea    ecx,[eax+0x26]
c00222bf:	89 c8                	mov    eax,ecx
c00222c1:	99                   	cdq    
c00222c2:	f7 fb                	idiv   ebx
c00222c4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00222c8:	83 c4 10             	add    esp,0x10
c00222cb:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00222d1:	7e 10                	jle    c00222e3 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00222d3:	83 ec 0c             	sub    esp,0xc
c00222d6:	68 a2 2b 03 c0       	push   0xc0032ba2
c00222db:	e8 8a df ff ff       	call   c002026a <KePanic(char const*)>
c00222e0:	83 c4 10             	add    esp,0x10
c00222e3:	53                   	push   ebx
c00222e4:	31 ed                	xor    ebp,ebp
c00222e6:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00222ea:	53                   	push   ebx
c00222eb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00222f2:	57                   	push   edi
c00222f3:	e8 04 fc ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00222f8:	83 c4 10             	add    esp,0x10
c00222fb:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00222ff:	89 f0                	mov    eax,esi
c0022301:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c0022305:	c1 e0 08             	shl    eax,0x8
c0022308:	09 c6                	or     esi,eax
c002230a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c002230e:	c1 e6 08             	shl    esi,0x8
c0022311:	09 c6                	or     esi,eax
c0022313:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0022317:	7e 72                	jle    c002238b <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c0022319:	85 f6                	test   esi,esi
c002231b:	75 25                	jne    c0022342 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c002231d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0022322:	8d 44 24 45          	lea    eax,[esp+0x45]
c0022326:	50                   	push   eax
c0022327:	6a 00                	push   0x0
c0022329:	6a 00                	push   0x0
c002232b:	57                   	push   edi
c002232c:	e8 75 fe ff ff       	call   c00221a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022331:	83 c4 10             	add    esp,0x10
c0022334:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022337:	89 c6                	mov    esi,eax
c0022339:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c002233c:	c1 f8 10             	sar    eax,0x10
c002233f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022342:	51                   	push   ecx
c0022343:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022347:	52                   	push   edx
c0022348:	56                   	push   esi
c0022349:	57                   	push   edi
c002234a:	e8 ad fb ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002234f:	83 c4 0c             	add    esp,0xc
c0022352:	6a 27                	push   0x27
c0022354:	6a 00                	push   0x0
c0022356:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002235a:	51                   	push   ecx
c002235b:	e8 90 e1 fd ff       	call   c00004f0 <memset>
c0022360:	6b c5 27             	imul   eax,ebp,0x27
c0022363:	83 c4 0c             	add    esp,0xc
c0022366:	6a 27                	push   0x27
c0022368:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002236f:	50                   	push   eax
c0022370:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022374:	51                   	push   ecx
c0022375:	e8 16 e3 fd ff       	call   c0000690 <strncpy>
c002237a:	83 c4 0c             	add    esp,0xc
c002237d:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022381:	52                   	push   edx
c0022382:	56                   	push   esi
c0022383:	57                   	push   edi
c0022384:	e8 97 fc ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022389:	eb 19                	jmp    c00223a4 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c002238b:	85 f6                	test   esi,esi
c002238d:	74 18                	je     c00223a7 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c002238f:	52                   	push   edx
c0022390:	52                   	push   edx
c0022391:	56                   	push   esi
c0022392:	57                   	push   edi
c0022393:	e8 c4 fc ff ff       	call   c002205c <CmFreeExtent(Reghive_Tag*, int)>
c0022398:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c002239c:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00223a0:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00223a4:	83 c4 10             	add    esp,0x10
c00223a7:	45                   	inc    ebp
c00223a8:	83 c3 03             	add    ebx,0x3
c00223ab:	83 fd 07             	cmp    ebp,0x7
c00223ae:	0f 85 47 ff ff ff    	jne    c00222fb <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00223b4:	50                   	push   eax
c00223b5:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00223b9:	50                   	push   eax
c00223ba:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00223c1:	57                   	push   edi
c00223c2:	e8 59 fc ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223c7:	81 c4 8c 00 00 00    	add    esp,0x8c
c00223cd:	5b                   	pop    ebx
c00223ce:	5e                   	pop    esi
c00223cf:	5f                   	pop    edi
c00223d0:	5d                   	pop    ebp
c00223d1:	c3                   	ret    

c00223d2 <CmGetMatch(char*, char*, bool, bool*)>:
c00223d2:	56                   	push   esi
c00223d3:	53                   	push   ebx
c00223d4:	50                   	push   eax
c00223d5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00223da:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00223de:	74 25                	je     c0022405 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00223e0:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00223e3:	31 db                	xor    ebx,ebx
c00223e5:	50                   	push   eax
c00223e6:	50                   	push   eax
c00223e7:	8d 04 9d 80 44 03 c0 	lea    eax,[ebx*4-0x3ffcbb80]
c00223ee:	50                   	push   eax
c00223ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223f3:	e8 88 e3 fd ff       	call   c0000780 <strcmp>
c00223f8:	83 c4 10             	add    esp,0x10
c00223fb:	85 c0                	test   eax,eax
c00223fd:	74 2e                	je     c002242d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00223ff:	43                   	inc    ebx
c0022400:	83 fb 3f             	cmp    ebx,0x3f
c0022403:	75 e0                	jne    c00223e5 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0022405:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022408:	31 db                	xor    ebx,ebx
c002240a:	51                   	push   ecx
c002240b:	51                   	push   ecx
c002240c:	8d 04 9d 80 44 03 c0 	lea    eax,[ebx*4-0x3ffcbb80]
c0022413:	50                   	push   eax
c0022414:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022418:	e8 63 e3 fd ff       	call   c0000780 <strcmp>
c002241d:	83 c4 10             	add    esp,0x10
c0022420:	85 c0                	test   eax,eax
c0022422:	74 09                	je     c002242d <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022424:	43                   	inc    ebx
c0022425:	83 fb 3f             	cmp    ebx,0x3f
c0022428:	75 e0                	jne    c002240a <CmGetMatch(char*, char*, bool, bool*)+0x38>
c002242a:	83 cb ff             	or     ebx,0xffffffff
c002242d:	5a                   	pop    edx
c002242e:	89 d8                	mov    eax,ebx
c0022430:	5b                   	pop    ebx
c0022431:	5e                   	pop    esi
c0022432:	c3                   	ret    

c0022433 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0022433:	55                   	push   ebp
c0022434:	31 c0                	xor    eax,eax
c0022436:	57                   	push   edi
c0022437:	56                   	push   esi
c0022438:	53                   	push   ebx
c0022439:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002243d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022441:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022445:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022449:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002244b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002244e:	83 fd 1f             	cmp    ebp,0x1f
c0022451:	7f 0b                	jg     c002245e <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022453:	0f b6 c2             	movzx  eax,dl
c0022456:	d3 e0                	shl    eax,cl
c0022458:	09 07                	or     DWORD PTR [edi],eax
c002245a:	b0 01                	mov    al,0x1
c002245c:	01 33                	add    DWORD PTR [ebx],esi
c002245e:	5b                   	pop    ebx
c002245f:	5e                   	pop    esi
c0022460:	5f                   	pop    edi
c0022461:	5d                   	pop    ebp
c0022462:	c3                   	ret    

c0022463 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022463:	57                   	push   edi
c0022464:	56                   	push   esi
c0022465:	53                   	push   ebx
c0022466:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002246a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002246e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022472:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022476:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022478:	7c 17                	jl     c0022491 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c002247a:	8b 17                	mov    edx,DWORD PTR [edi]
c002247c:	b8 01 00 00 00       	mov    eax,0x1
c0022481:	d3 e0                	shl    eax,cl
c0022483:	48                   	dec    eax
c0022484:	21 d0                	and    eax,edx
c0022486:	d3 ea                	shr    edx,cl
c0022488:	89 17                	mov    DWORD PTR [edi],edx
c002248a:	29 0b                	sub    DWORD PTR [ebx],ecx
c002248c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002248f:	eb 05                	jmp    c0022496 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022491:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022494:	31 c0                	xor    eax,eax
c0022496:	5b                   	pop    ebx
c0022497:	5e                   	pop    esi
c0022498:	5f                   	pop    edi
c0022499:	c3                   	ret    

c002249a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c002249a:	83 ec 40             	sub    esp,0x40
c002249d:	8d 44 24 09          	lea    eax,[esp+0x9]
c00224a1:	50                   	push   eax
c00224a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224aa:	e8 4d fa ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00224b3:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00224b7:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00224bb:	89 10                	mov    DWORD PTR [eax],edx
c00224bd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00224c0:	83 c4 4c             	add    esp,0x4c
c00224c3:	c3                   	ret    

c00224c4 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00224c4:	55                   	push   ebp
c00224c5:	57                   	push   edi
c00224c6:	56                   	push   esi
c00224c7:	53                   	push   ebx
c00224c8:	83 ec 40             	sub    esp,0x40
c00224cb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00224cf:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00224d3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00224d7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00224db:	53                   	push   ebx
c00224dc:	56                   	push   esi
c00224dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224e1:	e8 16 fa ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224e6:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00224ea:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00224ee:	83 c4 0c             	add    esp,0xc
c00224f1:	53                   	push   ebx
c00224f2:	56                   	push   esi
c00224f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00224f7:	e8 24 fb ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00224fc:	83 c4 4c             	add    esp,0x4c
c00224ff:	5b                   	pop    ebx
c0022500:	5e                   	pop    esi
c0022501:	5f                   	pop    edi
c0022502:	5d                   	pop    ebp
c0022503:	c3                   	ret    

c0022504 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0022504:	55                   	push   ebp
c0022505:	57                   	push   edi
c0022506:	56                   	push   esi
c0022507:	31 f6                	xor    esi,esi
c0022509:	53                   	push   ebx
c002250a:	31 db                	xor    ebx,ebx
c002250c:	83 ec 40             	sub    esp,0x40
c002250f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022517:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002251f:	6a 12                	push   0x12
c0022521:	68 ee 00 00 00       	push   0xee
c0022526:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c002252a:	e8 c1 df fd ff       	call   c00004f0 <memset>
c002252f:	83 c4 10             	add    esp,0x10
c0022532:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022536:	6a 08                	push   0x8
c0022538:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002253c:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022540:	50                   	push   eax
c0022541:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022545:	55                   	push   ebp
c0022546:	57                   	push   edi
c0022547:	e8 e7 fe ff ff       	call   c0022433 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002254c:	83 c4 10             	add    esp,0x10
c002254f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022553:	50                   	push   eax
c0022554:	6a 06                	push   0x6
c0022556:	55                   	push   ebp
c0022557:	57                   	push   edi
c0022558:	e8 06 ff ff ff       	call   c0022463 <CmGetShift(unsigned int*, int*, int, bool*)>
c002255d:	83 c4 10             	add    esp,0x10
c0022560:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022565:	74 07                	je     c002256e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022567:	46                   	inc    esi
c0022568:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c002256c:	eb e1                	jmp    c002254f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c002256e:	43                   	inc    ebx
c002256f:	83 fb 12             	cmp    ebx,0x12
c0022572:	75 c2                	jne    c0022536 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022574:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022578:	31 f6                	xor    esi,esi
c002257a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002257d:	50                   	push   eax
c002257e:	50                   	push   eax
c002257f:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0022584:	46                   	inc    esi
c0022585:	8d 04 85 80 44 03 c0 	lea    eax,[eax*4-0x3ffcbb80]
c002258c:	50                   	push   eax
c002258d:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022591:	e8 da e2 fd ff       	call   c0000870 <strcat>
c0022596:	83 c4 10             	add    esp,0x10
c0022599:	83 fe 18             	cmp    esi,0x18
c002259c:	75 df                	jne    c002257d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c002259e:	83 c4 3c             	add    esp,0x3c
c00225a1:	31 c0                	xor    eax,eax
c00225a3:	5b                   	pop    ebx
c00225a4:	5e                   	pop    esi
c00225a5:	5f                   	pop    edi
c00225a6:	5d                   	pop    ebp
c00225a7:	c3                   	ret    

c00225a8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00225a8:	83 ec 40             	sub    esp,0x40
c00225ab:	8d 44 24 09          	lea    eax,[esp+0x9]
c00225af:	50                   	push   eax
c00225b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00225b8:	e8 3f f9 ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00225bd:	58                   	pop    eax
c00225be:	5a                   	pop    edx
c00225bf:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00225c3:	8d 44 24 15          	lea    eax,[esp+0x15]
c00225c7:	50                   	push   eax
c00225c8:	e8 37 ff ff ff       	call   c0022504 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00225cd:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00225d2:	83 c4 4c             	add    esp,0x4c
c00225d5:	c3                   	ret    

c00225d6 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00225d6:	55                   	push   ebp
c00225d7:	57                   	push   edi
c00225d8:	56                   	push   esi
c00225d9:	53                   	push   ebx
c00225da:	31 db                	xor    ebx,ebx
c00225dc:	83 ec 70             	sub    esp,0x70
c00225df:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00225e6:	6a 30                	push   0x30
c00225e8:	6a 00                	push   0x0
c00225ea:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00225ee:	56                   	push   esi
c00225ef:	e8 fc de fd ff       	call   c00004f0 <memset>
c00225f4:	83 c4 10             	add    esp,0x10
c00225f7:	83 ec 0c             	sub    esp,0xc
c00225fa:	57                   	push   edi
c00225fb:	e8 80 df fd ff       	call   c0000580 <strlen>
c0022600:	83 c4 10             	add    esp,0x10
c0022603:	39 d8                	cmp    eax,ebx
c0022605:	76 16                	jbe    c002261d <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0022607:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c002260b:	83 ec 0c             	sub    esp,0xc
c002260e:	50                   	push   eax
c002260f:	e8 4c e3 fd ff       	call   c0000960 <toupper>
c0022614:	83 c4 10             	add    esp,0x10
c0022617:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002261a:	43                   	inc    ebx
c002261b:	eb da                	jmp    c00225f7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c002261d:	52                   	push   edx
c002261e:	31 db                	xor    ebx,ebx
c0022620:	6a 18                	push   0x18
c0022622:	31 ff                	xor    edi,edi
c0022624:	6a 3f                	push   0x3f
c0022626:	8d 44 24 24          	lea    eax,[esp+0x24]
c002262a:	50                   	push   eax
c002262b:	e8 c0 de fd ff       	call   c00004f0 <memset>
c0022630:	83 c4 10             	add    esp,0x10
c0022633:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0022637:	8d 74 24 10          	lea    esi,[esp+0x10]
c002263b:	84 c0                	test   al,al
c002263d:	0f 84 af 00 00 00    	je     c00226f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022643:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022647:	8d 6b 01             	lea    ebp,[ebx+0x1]
c002264a:	83 ec 0c             	sub    esp,0xc
c002264d:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0022652:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022656:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002265a:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c002265f:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022663:	56                   	push   esi
c0022664:	e8 17 df fd ff       	call   c0000580 <strlen>
c0022669:	83 c4 10             	add    esp,0x10
c002266c:	85 c0                	test   eax,eax
c002266e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022672:	74 0b                	je     c002267f <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022674:	50                   	push   eax
c0022675:	6a 01                	push   0x1
c0022677:	56                   	push   esi
c0022678:	8d 44 24 20          	lea    eax,[esp+0x20]
c002267c:	50                   	push   eax
c002267d:	eb 0a                	jmp    c0022689 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c002267f:	50                   	push   eax
c0022680:	6a 00                	push   0x0
c0022682:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022686:	50                   	push   eax
c0022687:	6a 00                	push   0x0
c0022689:	e8 44 fd ff ff       	call   c00223d2 <CmGetMatch(char*, char*, bool, bool*)>
c002268e:	83 c4 10             	add    esp,0x10
c0022691:	83 f8 ff             	cmp    eax,0xffffffff
c0022694:	75 1a                	jne    c00226b0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022696:	83 ec 0c             	sub    esp,0xc
c0022699:	68 b7 2b 03 c0       	push   0xc0032bb7
c002269e:	e8 c7 db ff ff       	call   c002026a <KePanic(char const*)>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	b8 02 00 00 00       	mov    eax,0x2
c00226ab:	e9 bb 00 00 00       	jmp    c002276b <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00226b0:	83 ff 18             	cmp    edi,0x18
c00226b3:	75 1a                	jne    c00226cf <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00226b5:	83 ec 0c             	sub    esp,0xc
c00226b8:	68 cc 2b 03 c0       	push   0xc0032bcc
c00226bd:	e8 a8 db ff ff       	call   c002026a <KePanic(char const*)>
c00226c2:	83 c4 10             	add    esp,0x10
c00226c5:	b8 01 00 00 00       	mov    eax,0x1
c00226ca:	e9 9c 00 00 00       	jmp    c002276b <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00226cf:	47                   	inc    edi
c00226d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00226d5:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00226d9:	0f 45 dd             	cmovne ebx,ebp
c00226dc:	83 ec 0c             	sub    esp,0xc
c00226df:	56                   	push   esi
c00226e0:	e8 9b de fd ff       	call   c0000580 <strlen>
c00226e5:	83 c4 10             	add    esp,0x10
c00226e8:	85 c0                	test   eax,eax
c00226ea:	74 06                	je     c00226f2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00226ec:	43                   	inc    ebx
c00226ed:	e9 41 ff ff ff       	jmp    c0022633 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00226f2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00226fa:	31 db                	xor    ebx,ebx
c00226fc:	31 ff                	xor    edi,edi
c00226fe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022706:	50                   	push   eax
c0022707:	6a 12                	push   0x12
c0022709:	68 ee 00 00 00       	push   0xee
c002270e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022715:	e8 d6 dd fd ff       	call   c00004f0 <memset>
c002271a:	83 c4 10             	add    esp,0x10
c002271d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022721:	83 fb 17             	cmp    ebx,0x17
c0022724:	7e 26                	jle    c002274c <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c0022726:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002272a:	50                   	push   eax
c002272b:	6a 08                	push   0x8
c002272d:	55                   	push   ebp
c002272e:	56                   	push   esi
c002272f:	e8 2f fd ff ff       	call   c0022463 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022734:	83 c4 10             	add    esp,0x10
c0022737:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002273c:	74 26                	je     c0022764 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c002273e:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022745:	4b                   	dec    ebx
c0022746:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022749:	47                   	inc    edi
c002274a:	eb 1c                	jmp    c0022768 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c002274c:	6a 06                	push   0x6
c002274e:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0022753:	50                   	push   eax
c0022754:	55                   	push   ebp
c0022755:	56                   	push   esi
c0022756:	e8 d8 fc ff ff       	call   c0022433 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002275b:	83 c4 10             	add    esp,0x10
c002275e:	84 c0                	test   al,al
c0022760:	75 06                	jne    c0022768 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022762:	eb c2                	jmp    c0022726 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0022764:	31 c0                	xor    eax,eax
c0022766:	eb 03                	jmp    c002276b <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022768:	43                   	inc    ebx
c0022769:	eb b2                	jmp    c002271d <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c002276b:	83 c4 6c             	add    esp,0x6c
c002276e:	5b                   	pop    ebx
c002276f:	5e                   	pop    esi
c0022770:	5f                   	pop    edi
c0022771:	5d                   	pop    ebp
c0022772:	c3                   	ret    

c0022773 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022773:	53                   	push   ebx
c0022774:	83 ec 3c             	sub    esp,0x3c
c0022777:	6a 2b                	push   0x2b
c0022779:	6a 00                	push   0x0
c002277b:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002277f:	53                   	push   ebx
c0022780:	e8 6b dd fd ff       	call   c00004f0 <memset>
c0022785:	58                   	pop    eax
c0022786:	5a                   	pop    edx
c0022787:	8d 44 24 11          	lea    eax,[esp+0x11]
c002278b:	50                   	push   eax
c002278c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022790:	e8 41 fe ff ff       	call   c00225d6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022795:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c002279a:	83 c4 0c             	add    esp,0xc
c002279d:	6a 15                	push   0x15
c002279f:	6a 00                	push   0x0
c00227a1:	8d 44 24 27          	lea    eax,[esp+0x27]
c00227a5:	50                   	push   eax
c00227a6:	e8 45 dd fd ff       	call   c00004f0 <memset>
c00227ab:	53                   	push   ebx
c00227ac:	6a 00                	push   0x0
c00227ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227b6:	e8 eb f9 ff ff       	call   c00221a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227bb:	83 c4 58             	add    esp,0x58
c00227be:	5b                   	pop    ebx
c00227bf:	c3                   	ret    

c00227c0 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00227c0:	56                   	push   esi
c00227c1:	53                   	push   ebx
c00227c2:	83 ec 48             	sub    esp,0x48
c00227c5:	6a 12                	push   0x12
c00227c7:	68 ff 00 00 00       	push   0xff
c00227cc:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00227d0:	56                   	push   esi
c00227d1:	e8 1a dd fd ff       	call   c00004f0 <memset>
c00227d6:	5a                   	pop    edx
c00227d7:	59                   	pop    ecx
c00227d8:	56                   	push   esi
c00227d9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00227dd:	e8 f4 fd ff ff       	call   c00225d6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00227e2:	83 c4 10             	add    esp,0x10
c00227e5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00227e9:	85 db                	test   ebx,ebx
c00227eb:	74 42                	je     c002282f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00227ed:	50                   	push   eax
c00227ee:	8d 44 24 19          	lea    eax,[esp+0x19]
c00227f2:	50                   	push   eax
c00227f3:	53                   	push   ebx
c00227f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00227f8:	e8 ff f6 ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227fd:	83 c4 0c             	add    esp,0xc
c0022800:	6a 12                	push   0x12
c0022802:	8d 44 24 21          	lea    eax,[esp+0x21]
c0022806:	50                   	push   eax
c0022807:	56                   	push   esi
c0022808:	e8 73 db fd ff       	call   c0000380 <memcmp>
c002280d:	83 c4 10             	add    esp,0x10
c0022810:	85 c0                	test   eax,eax
c0022812:	74 1e                	je     c0022832 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022814:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0022819:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002281e:	c1 e3 08             	shl    ebx,0x8
c0022821:	09 d8                	or     eax,ebx
c0022823:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022828:	c1 e3 10             	shl    ebx,0x10
c002282b:	09 c3                	or     ebx,eax
c002282d:	eb ba                	jmp    c00227e9 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c002282f:	83 cb ff             	or     ebx,0xffffffff
c0022832:	83 c4 44             	add    esp,0x44
c0022835:	89 d8                	mov    eax,ebx
c0022837:	5b                   	pop    ebx
c0022838:	5e                   	pop    esi
c0022839:	c3                   	ret    

c002283a <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c002283a:	57                   	push   edi
c002283b:	56                   	push   esi
c002283c:	53                   	push   ebx
c002283d:	83 ec 34             	sub    esp,0x34
c0022840:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022844:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022848:	6a 2b                	push   0x2b
c002284a:	6a 00                	push   0x0
c002284c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022850:	53                   	push   ebx
c0022851:	e8 9a dc fd ff       	call   c00004f0 <memset>
c0022856:	58                   	pop    eax
c0022857:	5a                   	pop    edx
c0022858:	8d 44 24 11          	lea    eax,[esp+0x11]
c002285c:	50                   	push   eax
c002285d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022861:	e8 70 fd ff ff       	call   c00225d6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022866:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c002286a:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c002286e:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022872:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022876:	53                   	push   ebx
c0022877:	6a 00                	push   0x0
c0022879:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002287d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022881:	e8 20 f9 ff ff       	call   c00221a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022886:	83 c4 50             	add    esp,0x50
c0022889:	5b                   	pop    ebx
c002288a:	5e                   	pop    esi
c002288b:	5f                   	pop    edi
c002288c:	c3                   	ret    

c002288d <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c002288d:	55                   	push   ebp
c002288e:	57                   	push   edi
c002288f:	56                   	push   esi
c0022890:	53                   	push   ebx
c0022891:	83 ec 40             	sub    esp,0x40
c0022894:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022898:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002289c:	6a 2b                	push   0x2b
c002289e:	6a 00                	push   0x0
c00228a0:	8d 74 24 11          	lea    esi,[esp+0x11]
c00228a4:	56                   	push   esi
c00228a5:	e8 46 dc fd ff       	call   c00004f0 <memset>
c00228aa:	5f                   	pop    edi
c00228ab:	89 ef                	mov    edi,ebp
c00228ad:	58                   	pop    eax
c00228ae:	8d 44 24 11          	lea    eax,[esp+0x11]
c00228b2:	50                   	push   eax
c00228b3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00228b7:	e8 1a fd ff ff       	call   c00225d6 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00228bc:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00228c1:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00228c6:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00228cb:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00228d0:	83 c4 10             	add    esp,0x10
c00228d3:	85 ed                	test   ebp,ebp
c00228d5:	74 14                	je     c00228eb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228d7:	51                   	push   ecx
c00228d8:	51                   	push   ecx
c00228d9:	57                   	push   edi
c00228da:	53                   	push   ebx
c00228db:	e8 0e f7 ff ff       	call   c0021fee <CmGetNext(Reghive_Tag*, int)>
c00228e0:	83 c4 10             	add    esp,0x10
c00228e3:	85 c0                	test   eax,eax
c00228e5:	74 04                	je     c00228eb <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00228e7:	89 c7                	mov    edi,eax
c00228e9:	eb e8                	jmp    c00228d3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00228eb:	56                   	push   esi
c00228ec:	6a 00                	push   0x0
c00228ee:	57                   	push   edi
c00228ef:	53                   	push   ebx
c00228f0:	e8 b1 f8 ff ff       	call   c00221a6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00228f5:	83 c4 0c             	add    esp,0xc
c00228f8:	56                   	push   esi
c00228f9:	50                   	push   eax
c00228fa:	89 c7                	mov    edi,eax
c00228fc:	53                   	push   ebx
c00228fd:	e8 fa f5 ff ff       	call   c0021efc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022902:	58                   	pop    eax
c0022903:	5a                   	pop    edx
c0022904:	6a 6c                	push   0x6c
c0022906:	6a 00                	push   0x0
c0022908:	6a 00                	push   0x0
c002290a:	68 dd 2b 03 c0       	push   0xc0032bdd
c002290f:	57                   	push   edi
c0022910:	53                   	push   ebx
c0022911:	e8 24 ff ff ff       	call   c002283a <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022916:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c002291a:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c002291e:	c1 e8 10             	shr    eax,0x10
c0022921:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022925:	83 c4 1c             	add    esp,0x1c
c0022928:	56                   	push   esi
c0022929:	57                   	push   edi
c002292a:	53                   	push   ebx
c002292b:	e8 f0 f6 ff ff       	call   c0022020 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022930:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022935:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c002293a:	c1 e0 08             	shl    eax,0x8
c002293d:	09 c2                	or     edx,eax
c002293f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022944:	83 c4 4c             	add    esp,0x4c
c0022947:	5b                   	pop    ebx
c0022948:	5e                   	pop    esi
c0022949:	c1 e0 10             	shl    eax,0x10
c002294c:	09 d0                	or     eax,edx
c002294e:	5f                   	pop    edi
c002294f:	5d                   	pop    ebp
c0022950:	c3                   	ret    

c0022951 <zStrtok(char*, char const*)>:
c0022951:	55                   	push   ebp
c0022952:	57                   	push   edi
c0022953:	56                   	push   esi
c0022954:	53                   	push   ebx
c0022955:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022959:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002295d:	85 db                	test   ebx,ebx
c002295f:	74 2f                	je     c0022990 <zStrtok(char*, char const*)+0x3f>
c0022961:	85 c0                	test   eax,eax
c0022963:	75 09                	jne    c002296e <zStrtok(char*, char const*)+0x1d>
c0022965:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c002296a:	85 c0                	test   eax,eax
c002296c:	74 50                	je     c00229be <zStrtok(char*, char const*)+0x6d>
c002296e:	31 c9                	xor    ecx,ecx
c0022970:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022974:	74 03                	je     c0022979 <zStrtok(char*, char const*)+0x28>
c0022976:	41                   	inc    ecx
c0022977:	eb f7                	jmp    c0022970 <zStrtok(char*, char const*)+0x1f>
c0022979:	31 d2                	xor    edx,edx
c002297b:	39 ca                	cmp    edx,ecx
c002297d:	74 15                	je     c0022994 <zStrtok(char*, char const*)+0x43>
c002297f:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022983:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022986:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022989:	39 ee                	cmp    esi,ebp
c002298b:	74 13                	je     c00229a0 <zStrtok(char*, char const*)+0x4f>
c002298d:	42                   	inc    edx
c002298e:	eb eb                	jmp    c002297b <zStrtok(char*, char const*)+0x2a>
c0022990:	31 c0                	xor    eax,eax
c0022992:	eb 2a                	jmp    c00229be <zStrtok(char*, char const*)+0x6d>
c0022994:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c002299e:	eb 1e                	jmp    c00229be <zStrtok(char*, char const*)+0x6d>
c00229a0:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00229a3:	39 ce                	cmp    esi,ecx
c00229a5:	75 0a                	jne    c00229b1 <zStrtok(char*, char const*)+0x60>
c00229a7:	40                   	inc    eax
c00229a8:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c00229ad:	89 d8                	mov    eax,ebx
c00229af:	eb 0d                	jmp    c00229be <zStrtok(char*, char const*)+0x6d>
c00229b1:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00229b4:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00229b8:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c00229be:	5b                   	pop    ebx
c00229bf:	5e                   	pop    esi
c00229c0:	5f                   	pop    edi
c00229c1:	5d                   	pop    ebp
c00229c2:	c3                   	ret    

c00229c3 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00229c3:	57                   	push   edi
c00229c4:	56                   	push   esi
c00229c5:	53                   	push   ebx
c00229c6:	81 ec 08 01 00 00    	sub    esp,0x108
c00229cc:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00229d3:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00229da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00229de:	53                   	push   ebx
c00229df:	e8 6c dc fd ff       	call   c0000650 <strcpy>
c00229e4:	59                   	pop    ecx
c00229e5:	5e                   	pop    esi
c00229e6:	68 7f 2f 03 c0       	push   0xc0032f7f
c00229eb:	53                   	push   ebx
c00229ec:	bb 01 00 00 00       	mov    ebx,0x1
c00229f1:	e8 5b ff ff ff       	call   c0022951 <zStrtok(char*, char const*)>
c00229f6:	83 c4 10             	add    esp,0x10
c00229f9:	85 c0                	test   eax,eax
c00229fb:	74 3b                	je     c0022a38 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00229fd:	52                   	push   edx
c00229fe:	50                   	push   eax
c00229ff:	6a 01                	push   0x1
c0022a01:	57                   	push   edi
c0022a02:	e8 b9 fd ff ff       	call   c00227c0 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0022a07:	59                   	pop    ecx
c0022a08:	5e                   	pop    esi
c0022a09:	89 c3                	mov    ebx,eax
c0022a0b:	68 7f 2f 03 c0       	push   0xc0032f7f
c0022a10:	6a 00                	push   0x0
c0022a12:	e8 3a ff ff ff       	call   c0022951 <zStrtok(char*, char const*)>
c0022a17:	83 c4 10             	add    esp,0x10
c0022a1a:	85 c0                	test   eax,eax
c0022a1c:	89 c6                	mov    esi,eax
c0022a1e:	74 18                	je     c0022a38 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022a20:	52                   	push   edx
c0022a21:	52                   	push   edx
c0022a22:	53                   	push   ebx
c0022a23:	57                   	push   edi
c0022a24:	e8 86 f5 ff ff       	call   c0021faf <CmEnterDirectory(Reghive_Tag*, int)>
c0022a29:	83 c4 10             	add    esp,0x10
c0022a2c:	83 f8 ff             	cmp    eax,0xffffffff
c0022a2f:	89 c3                	mov    ebx,eax
c0022a31:	74 05                	je     c0022a38 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022a33:	50                   	push   eax
c0022a34:	56                   	push   esi
c0022a35:	53                   	push   ebx
c0022a36:	eb c9                	jmp    c0022a01 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022a38:	81 c4 00 01 00 00    	add    esp,0x100
c0022a3e:	89 d8                	mov    eax,ebx
c0022a40:	5b                   	pop    ebx
c0022a41:	5e                   	pop    esi
c0022a42:	5f                   	pop    edi
c0022a43:	c3                   	ret    

c0022a44 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022a44:	55                   	push   ebp
c0022a45:	57                   	push   edi
c0022a46:	56                   	push   esi
c0022a47:	53                   	push   ebx
c0022a48:	83 ec 5c             	sub    esp,0x5c
c0022a4b:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022a4f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022a53:	85 db                	test   ebx,ebx
c0022a55:	0f 8e 84 00 00 00    	jle    c0022adf <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0022a5b:	57                   	push   edi
c0022a5c:	31 ed                	xor    ebp,ebp
c0022a5e:	6a 32                	push   0x32
c0022a60:	6a 00                	push   0x0
c0022a62:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022a66:	57                   	push   edi
c0022a67:	e8 84 da fd ff       	call   c00004f0 <memset>
c0022a6c:	83 c4 0c             	add    esp,0xc
c0022a6f:	57                   	push   edi
c0022a70:	53                   	push   ebx
c0022a71:	56                   	push   esi
c0022a72:	e8 31 fb ff ff       	call   c00225a8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022a77:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022a7b:	83 c4 10             	add    esp,0x10
c0022a7e:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022a82:	7d 13                	jge    c0022a97 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022a84:	83 ec 0c             	sub    esp,0xc
c0022a87:	45                   	inc    ebp
c0022a88:	68 03 33 03 c0       	push   0xc0033303
c0022a8d:	e8 50 68 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0022a92:	83 c4 10             	add    esp,0x10
c0022a95:	eb e7                	jmp    c0022a7e <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022a97:	51                   	push   ecx
c0022a98:	57                   	push   edi
c0022a99:	53                   	push   ebx
c0022a9a:	68 e3 2b 03 c0       	push   0xc0032be3
c0022a9f:	e8 3e 68 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0022aa4:	83 c4 10             	add    esp,0x10
c0022aa7:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c0022aac:	75 1e                	jne    c0022acc <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0022aae:	52                   	push   edx
c0022aaf:	52                   	push   edx
c0022ab0:	53                   	push   ebx
c0022ab1:	56                   	push   esi
c0022ab2:	e8 f8 f4 ff ff       	call   c0021faf <CmEnterDirectory(Reghive_Tag*, int)>
c0022ab7:	83 c4 0c             	add    esp,0xc
c0022aba:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0022abe:	8d 51 04             	lea    edx,[ecx+0x4]
c0022ac1:	52                   	push   edx
c0022ac2:	50                   	push   eax
c0022ac3:	56                   	push   esi
c0022ac4:	e8 7b ff ff ff       	call   c0022a44 <CmDisplayTree(Reghive_Tag*, int, int)>
c0022ac9:	83 c4 10             	add    esp,0x10
c0022acc:	50                   	push   eax
c0022acd:	50                   	push   eax
c0022ace:	53                   	push   ebx
c0022acf:	56                   	push   esi
c0022ad0:	e8 19 f5 ff ff       	call   c0021fee <CmGetNext(Reghive_Tag*, int)>
c0022ad5:	83 c4 10             	add    esp,0x10
c0022ad8:	89 c3                	mov    ebx,eax
c0022ada:	e9 74 ff ff ff       	jmp    c0022a53 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0022adf:	83 c4 5c             	add    esp,0x5c
c0022ae2:	5b                   	pop    ebx
c0022ae3:	5e                   	pop    esi
c0022ae4:	5f                   	pop    edi
c0022ae5:	5d                   	pop    ebp
c0022ae6:	c3                   	ret    

c0022ae7 <CmSplitFinalSlashInPlace(char*)>:
c0022ae7:	53                   	push   ebx
c0022ae8:	83 ec 14             	sub    esp,0x14
c0022aeb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022aef:	53                   	push   ebx
c0022af0:	e8 8b da fd ff       	call   c0000580 <strlen>
c0022af5:	83 c4 10             	add    esp,0x10
c0022af8:	48                   	dec    eax
c0022af9:	85 c0                	test   eax,eax
c0022afb:	74 15                	je     c0022b12 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0022afd:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0022b01:	8d 14 03             	lea    edx,[ebx+eax*1]
c0022b04:	75 09                	jne    c0022b0f <CmSplitFinalSlashInPlace(char*)+0x28>
c0022b06:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022b09:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0022b0d:	eb 05                	jmp    c0022b14 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0022b0f:	48                   	dec    eax
c0022b10:	eb e7                	jmp    c0022af9 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022b12:	31 c0                	xor    eax,eax
c0022b14:	83 c4 08             	add    esp,0x8
c0022b17:	5b                   	pop    ebx
c0022b18:	c3                   	ret    

c0022b19 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022b19:	55                   	push   ebp
c0022b1a:	57                   	push   edi
c0022b1b:	56                   	push   esi
c0022b1c:	53                   	push   ebx
c0022b1d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b23:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022b2a:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0022b2d:	8d 43 01             	lea    eax,[ebx+0x1]
c0022b30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022b34:	89 f0                	mov    eax,esi
c0022b36:	3c 40                	cmp    al,0x40
c0022b38:	75 1b                	jne    c0022b55 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022b3a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022b3d:	85 c0                	test   eax,eax
c0022b3f:	74 08                	je     c0022b49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022b41:	83 f8 3a             	cmp    eax,0x3a
c0022b44:	74 03                	je     c0022b49 <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022b46:	43                   	inc    ebx
c0022b47:	eb f1                	jmp    c0022b3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022b49:	85 c0                	test   eax,eax
c0022b4b:	0f 84 45 01 00 00    	je     c0022c96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b51:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022b54:	43                   	inc    ebx
c0022b55:	50                   	push   eax
c0022b56:	6a 40                	push   0x40
c0022b58:	6a 00                	push   0x0
c0022b5a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b5e:	50                   	push   eax
c0022b5f:	e8 8c d9 fd ff       	call   c00004f0 <memset>
c0022b64:	89 f1                	mov    ecx,esi
c0022b66:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022b6d:	31 c0                	xor    eax,eax
c0022b6f:	83 c4 10             	add    esp,0x10
c0022b72:	0f be f1             	movsx  esi,cl
c0022b75:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022b78:	85 d2                	test   edx,edx
c0022b7a:	89 d1                	mov    ecx,edx
c0022b7c:	0f 84 14 01 00 00    	je     c0022c96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b82:	3d c7 00 00 00       	cmp    eax,0xc7
c0022b87:	0f 8f 09 01 00 00    	jg     c0022c96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b8d:	83 fa 0a             	cmp    edx,0xa
c0022b90:	0f 85 f1 00 00 00    	jne    c0022c87 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022b96:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022b9b:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022ba0:	89 c8                	mov    eax,ecx
c0022ba2:	a8 df                	test   al,0xdf
c0022ba4:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022ba9:	83 f9 23             	cmp    ecx,0x23
c0022bac:	0f 94 c2             	sete   dl
c0022baf:	89 d5                	mov    ebp,edx
c0022bb1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022bb5:	09 ea                	or     edx,ebp
c0022bb7:	80 e2 01             	and    dl,0x1
c0022bba:	75 47                	jne    c0022c03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022bbc:	83 e8 09             	sub    eax,0x9
c0022bbf:	3c 01                	cmp    al,0x1
c0022bc1:	76 40                	jbe    c0022c03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022bc3:	83 f9 5b             	cmp    ecx,0x5b
c0022bc6:	75 42                	jne    c0022c0a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022bc8:	83 fe 40             	cmp    esi,0x40
c0022bcb:	75 36                	jne    c0022c03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022bcd:	83 ec 0c             	sub    esp,0xc
c0022bd0:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0022bd4:	55                   	push   ebp
c0022bd5:	e8 a6 d9 fd ff       	call   c0000580 <strlen>
c0022bda:	83 c4 10             	add    esp,0x10
c0022bdd:	83 f8 3f             	cmp    eax,0x3f
c0022be0:	0f 87 b0 00 00 00    	ja     c0022c96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022be6:	50                   	push   eax
c0022be7:	50                   	push   eax
c0022be8:	55                   	push   ebp
c0022be9:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0022bed:	55                   	push   ebp
c0022bee:	e8 5d da fd ff       	call   c0000650 <strcpy>
c0022bf3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0022bf6:	e8 85 d9 fd ff       	call   c0000580 <strlen>
c0022bfb:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022c00:	83 c4 10             	add    esp,0x10
c0022c03:	31 d2                	xor    edx,edx
c0022c05:	e9 84 00 00 00       	jmp    c0022c8e <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022c0a:	83 fe 40             	cmp    esi,0x40
c0022c0d:	74 06                	je     c0022c15 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0022c0f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022c13:	eb 19                	jmp    c0022c2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022c15:	51                   	push   ecx
c0022c16:	51                   	push   ecx
c0022c17:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022c1f:	50                   	push   eax
c0022c20:	e8 5b db fd ff       	call   c0000780 <strcmp>
c0022c25:	83 c4 10             	add    esp,0x10
c0022c28:	85 c0                	test   eax,eax
c0022c2a:	75 d7                	jne    c0022c03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022c2c:	eb e1                	jmp    c0022c0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0022c2e:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0022c31:	85 c9                	test   ecx,ecx
c0022c33:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022c38:	83 f9 3d             	cmp    ecx,0x3d
c0022c3b:	0f 94 c0             	sete   al
c0022c3e:	89 c5                	mov    ebp,eax
c0022c40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022c44:	09 e8                	or     eax,ebp
c0022c46:	a8 01                	test   al,0x1
c0022c48:	89 c5                	mov    ebp,eax
c0022c4a:	75 03                	jne    c0022c4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022c4c:	42                   	inc    edx
c0022c4d:	eb df                	jmp    c0022c2e <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022c4f:	85 c9                	test   ecx,ecx
c0022c51:	74 43                	je     c0022c96 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022c53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022c57:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022c5a:	52                   	push   edx
c0022c5b:	52                   	push   edx
c0022c5c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022c60:	50                   	push   eax
c0022c61:	53                   	push   ebx
c0022c62:	e8 19 db fd ff       	call   c0000780 <strcmp>
c0022c67:	83 c4 10             	add    esp,0x10
c0022c6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c6e:	85 c0                	test   eax,eax
c0022c70:	75 91                	jne    c0022c03 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022c72:	50                   	push   eax
c0022c73:	42                   	inc    edx
c0022c74:	50                   	push   eax
c0022c75:	52                   	push   edx
c0022c76:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022c7d:	e8 ce d9 fd ff       	call   c0000650 <strcpy>
c0022c82:	83 c4 10             	add    esp,0x10
c0022c85:	eb 11                	jmp    c0022c98 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022c87:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022c8b:	8d 50 01             	lea    edx,[eax+0x1]
c0022c8e:	47                   	inc    edi
c0022c8f:	89 d0                	mov    eax,edx
c0022c91:	e9 df fe ff ff       	jmp    c0022b75 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022c96:	31 ed                	xor    ebp,ebp
c0022c98:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022c9e:	89 e8                	mov    eax,ebp
c0022ca0:	5b                   	pop    ebx
c0022ca1:	5e                   	pop    esi
c0022ca2:	5f                   	pop    edi
c0022ca3:	5d                   	pop    ebp
c0022ca4:	c3                   	ret    

c0022ca5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022ca5:	57                   	push   edi
c0022ca6:	56                   	push   esi
c0022ca7:	53                   	push   ebx
c0022ca8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022cae:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022cb5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022cbc:	53                   	push   ebx
c0022cbd:	e8 be d8 fd ff       	call   c0000580 <strlen>
c0022cc2:	89 34 24             	mov    DWORD PTR [esp],esi
c0022cc5:	89 c7                	mov    edi,eax
c0022cc7:	e8 b4 d8 fd ff       	call   c0000580 <strlen>
c0022ccc:	83 c4 10             	add    esp,0x10
c0022ccf:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022cd3:	3d ff 00 00 00       	cmp    eax,0xff
c0022cd8:	0f 87 d3 00 00 00    	ja     c0022db1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022cde:	57                   	push   edi
c0022cdf:	57                   	push   edi
c0022ce0:	56                   	push   esi
c0022ce1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022ce5:	56                   	push   esi
c0022ce6:	e8 65 d9 fd ff       	call   c0000650 <strcpy>
c0022ceb:	58                   	pop    eax
c0022cec:	5a                   	pop    edx
c0022ced:	68 7f 2f 03 c0       	push   0xc0032f7f
c0022cf2:	56                   	push   esi
c0022cf3:	e8 78 db fd ff       	call   c0000870 <strcat>
c0022cf8:	59                   	pop    ecx
c0022cf9:	5f                   	pop    edi
c0022cfa:	53                   	push   ebx
c0022cfb:	56                   	push   esi
c0022cfc:	e8 6f db fd ff       	call   c0000870 <strcat>
c0022d01:	58                   	pop    eax
c0022d02:	5a                   	pop    edx
c0022d03:	68 ed 2b 03 c0       	push   0xc0032bed
c0022d08:	56                   	push   esi
c0022d09:	e8 62 db fd ff       	call   c0000870 <strcat>
c0022d0e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022d15:	e8 81 37 ff ff       	call   c001649b <malloc>
c0022d1a:	83 c4 0c             	add    esp,0xc
c0022d1d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022d23:	56                   	push   esi
c0022d24:	50                   	push   eax
c0022d25:	89 c3                	mov    ebx,eax
c0022d27:	e8 ce 77 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0022d2c:	83 c4 10             	add    esp,0x10
c0022d2f:	85 db                	test   ebx,ebx
c0022d31:	74 7e                	je     c0022db1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022d33:	51                   	push   ecx
c0022d34:	51                   	push   ecx
c0022d35:	6a 01                	push   0x1
c0022d37:	53                   	push   ebx
c0022d38:	e8 db 77 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0022d3d:	83 c4 10             	add    esp,0x10
c0022d40:	85 c0                	test   eax,eax
c0022d42:	74 08                	je     c0022d4c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022d44:	83 ec 0c             	sub    esp,0xc
c0022d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d49:	53                   	push   ebx
c0022d4a:	eb 5f                	jmp    c0022dab <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022d4c:	52                   	push   edx
c0022d4d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022d51:	50                   	push   eax
c0022d52:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022d56:	50                   	push   eax
c0022d57:	53                   	push   ebx
c0022d58:	e8 bd 7a ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c0022d5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022d61:	83 c4 10             	add    esp,0x10
c0022d64:	89 c1                	mov    ecx,eax
c0022d66:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022d6a:	74 31                	je     c0022d9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d6c:	83 ec 0c             	sub    esp,0xc
c0022d6f:	50                   	push   eax
c0022d70:	e8 26 37 ff ff       	call   c001649b <malloc>
c0022d75:	89 c6                	mov    esi,eax
c0022d77:	58                   	pop    eax
c0022d78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d7a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022d7e:	52                   	push   edx
c0022d7f:	56                   	push   esi
c0022d80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d84:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022d88:	53                   	push   ebx
c0022d89:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022d8c:	83 c4 20             	add    esp,0x20
c0022d8f:	85 c0                	test   eax,eax
c0022d91:	75 0a                	jne    c0022d9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022d93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d97:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022d9b:	74 18                	je     c0022db5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022d9d:	83 ec 0c             	sub    esp,0xc
c0022da0:	53                   	push   ebx
c0022da1:	e8 d0 77 ff ff       	call   c001a576 <File::close()>
c0022da6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022da8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022dab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022dae:	83 c4 10             	add    esp,0x10
c0022db1:	31 c0                	xor    eax,eax
c0022db3:	eb 3b                	jmp    c0022df0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022db5:	83 ec 0c             	sub    esp,0xc
c0022db8:	53                   	push   ebx
c0022db9:	e8 b8 77 ff ff       	call   c001a576 <File::close()>
c0022dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022dc3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022dc6:	83 c4 0c             	add    esp,0xc
c0022dc9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022dd0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022dd7:	56                   	push   esi
c0022dd8:	e8 3c fd ff ff       	call   c0022b19 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022ddd:	89 34 24             	mov    DWORD PTR [esp],esi
c0022de0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022de4:	e8 d2 36 ff ff       	call   c00164bb <free>
c0022de9:	83 c4 10             	add    esp,0x10
c0022dec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022df0:	81 c4 20 01 00 00    	add    esp,0x120
c0022df6:	5b                   	pop    ebx
c0022df7:	5e                   	pop    esi
c0022df8:	5f                   	pop    edi
c0022df9:	c3                   	ret    

c0022dfa <Reg::getLine(char*, char*, char*)>:
c0022dfa:	57                   	push   edi
c0022dfb:	56                   	push   esi
c0022dfc:	53                   	push   ebx
c0022dfd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022e01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022e05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e09:	57                   	push   edi
c0022e0a:	56                   	push   esi
c0022e0b:	53                   	push   ebx
c0022e0c:	68 f2 2b 03 c0       	push   0xc0032bf2
c0022e11:	e8 8f fe ff ff       	call   c0022ca5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022e16:	83 c4 10             	add    esp,0x10
c0022e19:	84 c0                	test   al,al
c0022e1b:	75 10                	jne    c0022e2d <Reg::getLine(char*, char*, char*)+0x33>
c0022e1d:	57                   	push   edi
c0022e1e:	56                   	push   esi
c0022e1f:	53                   	push   ebx
c0022e20:	68 17 2c 03 c0       	push   0xc0032c17
c0022e25:	e8 7b fe ff ff       	call   c0022ca5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022e2a:	83 c4 10             	add    esp,0x10
c0022e2d:	5b                   	pop    ebx
c0022e2e:	5e                   	pop    esi
c0022e2f:	5f                   	pop    edi
c0022e30:	c3                   	ret    

c0022e31 <Reg::readInt(char*, char*, int*)>:
c0022e31:	55                   	push   ebp
c0022e32:	57                   	push   edi
c0022e33:	56                   	push   esi
c0022e34:	53                   	push   ebx
c0022e35:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022e3b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022e3f:	55                   	push   ebp
c0022e40:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022e47:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022e4e:	e8 a7 ff ff ff       	call   c0022dfa <Reg::getLine(char*, char*, char*)>
c0022e53:	83 c4 10             	add    esp,0x10
c0022e56:	84 c0                	test   al,al
c0022e58:	0f 84 b6 00 00 00    	je     c0022f14 <Reg::readInt(char*, char*, int*)+0xe3>
c0022e5e:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022e63:	83 fa 2b             	cmp    edx,0x2b
c0022e66:	74 0c                	je     c0022e74 <Reg::readInt(char*, char*, int*)+0x43>
c0022e68:	83 fa 2d             	cmp    edx,0x2d
c0022e6b:	75 0e                	jne    c0022e7b <Reg::readInt(char*, char*, int*)+0x4a>
c0022e6d:	ba 01 00 00 00       	mov    edx,0x1
c0022e72:	eb 0b                	jmp    c0022e7f <Reg::readInt(char*, char*, int*)+0x4e>
c0022e74:	ba 01 00 00 00       	mov    edx,0x1
c0022e79:	eb 02                	jmp    c0022e7d <Reg::readInt(char*, char*, int*)+0x4c>
c0022e7b:	31 d2                	xor    edx,edx
c0022e7d:	31 c0                	xor    eax,eax
c0022e7f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022e84:	be 0a 00 00 00       	mov    esi,0xa
c0022e89:	75 21                	jne    c0022eac <Reg::readInt(char*, char*, int*)+0x7b>
c0022e8b:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022e90:	83 f9 78             	cmp    ecx,0x78
c0022e93:	75 0a                	jne    c0022e9f <Reg::readInt(char*, char*, int*)+0x6e>
c0022e95:	83 c2 02             	add    edx,0x2
c0022e98:	be 10 00 00 00       	mov    esi,0x10
c0022e9d:	eb 0d                	jmp    c0022eac <Reg::readInt(char*, char*, int*)+0x7b>
c0022e9f:	83 f9 62             	cmp    ecx,0x62
c0022ea2:	75 08                	jne    c0022eac <Reg::readInt(char*, char*, int*)+0x7b>
c0022ea4:	83 c2 02             	add    edx,0x2
c0022ea7:	be 02 00 00 00       	mov    esi,0x2
c0022eac:	01 d5                	add    ebp,edx
c0022eae:	31 d2                	xor    edx,edx
c0022eb0:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022eb4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022eb8:	85 c9                	test   ecx,ecx
c0022eba:	0f 94 c3             	sete   bl
c0022ebd:	83 f9 0d             	cmp    ecx,0xd
c0022ec0:	89 df                	mov    edi,ebx
c0022ec2:	0f 94 c3             	sete   bl
c0022ec5:	09 df                	or     edi,ebx
c0022ec7:	89 fb                	mov    ebx,edi
c0022ec9:	83 e7 01             	and    edi,0x1
c0022ecc:	75 35                	jne    c0022f03 <Reg::readInt(char*, char*, int*)+0xd2>
c0022ece:	0f af d6             	imul   edx,esi
c0022ed1:	83 fe 10             	cmp    esi,0x10
c0022ed4:	75 26                	jne    c0022efc <Reg::readInt(char*, char*, int*)+0xcb>
c0022ed6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022eda:	83 ef 41             	sub    edi,0x41
c0022edd:	89 fb                	mov    ebx,edi
c0022edf:	80 fb 05             	cmp    bl,0x5
c0022ee2:	77 06                	ja     c0022eea <Reg::readInt(char*, char*, int*)+0xb9>
c0022ee4:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022ee8:	eb 16                	jmp    c0022f00 <Reg::readInt(char*, char*, int*)+0xcf>
c0022eea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022eee:	83 eb 61             	sub    ebx,0x61
c0022ef1:	80 fb 05             	cmp    bl,0x5
c0022ef4:	77 06                	ja     c0022efc <Reg::readInt(char*, char*, int*)+0xcb>
c0022ef6:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022efa:	eb 04                	jmp    c0022f00 <Reg::readInt(char*, char*, int*)+0xcf>
c0022efc:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022f00:	45                   	inc    ebp
c0022f01:	eb ad                	jmp    c0022eb0 <Reg::readInt(char*, char*, int*)+0x7f>
c0022f03:	84 c0                	test   al,al
c0022f05:	74 02                	je     c0022f09 <Reg::readInt(char*, char*, int*)+0xd8>
c0022f07:	f7 da                	neg    edx
c0022f09:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022f10:	89 10                	mov    DWORD PTR [eax],edx
c0022f12:	88 d8                	mov    al,bl
c0022f14:	81 c4 ec 00 00 00    	add    esp,0xec
c0022f1a:	5b                   	pop    ebx
c0022f1b:	5e                   	pop    esi
c0022f1c:	5f                   	pop    edi
c0022f1d:	5d                   	pop    ebp
c0022f1e:	c3                   	ret    

c0022f1f <Reg::readString(char*, char*, char*, int)>:
c0022f1f:	57                   	push   edi
c0022f20:	56                   	push   esi
c0022f21:	53                   	push   ebx
c0022f22:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022f28:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022f2c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022f33:	57                   	push   edi
c0022f34:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022f3b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022f42:	e8 b3 fe ff ff       	call   c0022dfa <Reg::getLine(char*, char*, char*)>
c0022f47:	83 c4 10             	add    esp,0x10
c0022f4a:	84 c0                	test   al,al
c0022f4c:	89 c6                	mov    esi,eax
c0022f4e:	74 44                	je     c0022f94 <Reg::readString(char*, char*, char*, int)+0x75>
c0022f50:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022f57:	31 c0                	xor    eax,eax
c0022f59:	4a                   	dec    edx
c0022f5a:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022f5d:	84 c9                	test   cl,cl
c0022f5f:	74 0f                	je     c0022f70 <Reg::readString(char*, char*, char*, int)+0x51>
c0022f61:	39 c2                	cmp    edx,eax
c0022f63:	7e 0b                	jle    c0022f70 <Reg::readString(char*, char*, char*, int)+0x51>
c0022f65:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022f68:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022f6d:	40                   	inc    eax
c0022f6e:	eb ea                	jmp    c0022f5a <Reg::readString(char*, char*, char*, int)+0x3b>
c0022f70:	83 ec 0c             	sub    esp,0xc
c0022f73:	53                   	push   ebx
c0022f74:	e8 07 d6 fd ff       	call   c0000580 <strlen>
c0022f79:	83 c4 10             	add    esp,0x10
c0022f7c:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022f81:	75 11                	jne    c0022f94 <Reg::readString(char*, char*, char*, int)+0x75>
c0022f83:	83 ec 0c             	sub    esp,0xc
c0022f86:	53                   	push   ebx
c0022f87:	e8 f4 d5 fd ff       	call   c0000580 <strlen>
c0022f8c:	83 c4 10             	add    esp,0x10
c0022f8f:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022f94:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022f9a:	89 f0                	mov    eax,esi
c0022f9c:	5b                   	pop    ebx
c0022f9d:	5e                   	pop    esi
c0022f9e:	5f                   	pop    edi
c0022f9f:	c3                   	ret    

c0022fa0 <Reg::readBool(char*, char*, bool*)>:
c0022fa0:	83 ec 20             	sub    esp,0x20
c0022fa3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022fa7:	50                   	push   eax
c0022fa8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fb0:	e8 7c fe ff ff       	call   c0022e31 <Reg::readInt(char*, char*, int*)>
c0022fb5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022fb9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022fbe:	0f 95 02             	setne  BYTE PTR [edx]
c0022fc1:	83 c4 2c             	add    esp,0x2c
c0022fc4:	c3                   	ret    

c0022fc5 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022fc5:	53                   	push   ebx
c0022fc6:	83 ec 1c             	sub    esp,0x1c
c0022fc9:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022fcd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022fd1:	50                   	push   eax
c0022fd2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fda:	e8 c1 ff ff ff       	call   c0022fa0 <Reg::readBool(char*, char*, bool*)>
c0022fdf:	83 c4 10             	add    esp,0x10
c0022fe2:	84 c0                	test   al,al
c0022fe4:	74 04                	je     c0022fea <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022fe6:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022fea:	83 c4 18             	add    esp,0x18
c0022fed:	88 d8                	mov    al,bl
c0022fef:	5b                   	pop    ebx
c0022ff0:	c3                   	ret    

c0022ff1 <Reg::readIntWithDefault(char*, char*, int)>:
c0022ff1:	53                   	push   ebx
c0022ff2:	83 ec 1c             	sub    esp,0x1c
c0022ff5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022ff9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022ffd:	50                   	push   eax
c0022ffe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023002:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023006:	e8 26 fe ff ff       	call   c0022e31 <Reg::readInt(char*, char*, int*)>
c002300b:	83 c4 10             	add    esp,0x10
c002300e:	84 c0                	test   al,al
c0023010:	74 04                	je     c0023016 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0023012:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0023016:	83 c4 18             	add    esp,0x18
c0023019:	89 d8                	mov    eax,ebx
c002301b:	5b                   	pop    ebx
c002301c:	c3                   	ret    

c002301d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c002301d:	57                   	push   edi
c002301e:	56                   	push   esi
c002301f:	53                   	push   ebx
c0023020:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0023024:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023028:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002302c:	56                   	push   esi
c002302d:	57                   	push   edi
c002302e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023036:	e8 e4 fe ff ff       	call   c0022f1f <Reg::readString(char*, char*, char*, int)>
c002303b:	83 c4 10             	add    esp,0x10
c002303e:	84 c0                	test   al,al
c0023040:	75 16                	jne    c0023058 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0023042:	50                   	push   eax
c0023043:	56                   	push   esi
c0023044:	6a 00                	push   0x0
c0023046:	57                   	push   edi
c0023047:	e8 a4 d4 fd ff       	call   c00004f0 <memset>
c002304c:	8d 4e ff             	lea    ecx,[esi-0x1]
c002304f:	89 de                	mov    esi,ebx
c0023051:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023053:	83 c4 10             	add    esp,0x10
c0023056:	89 df                	mov    edi,ebx
c0023058:	5b                   	pop    ebx
c0023059:	89 f8                	mov    eax,edi
c002305b:	5e                   	pop    esi
c002305c:	5f                   	pop    edi
c002305d:	c3                   	ret    

c002305e <SysEject(regs*)>:
c002305e:	83 ec 0c             	sub    esp,0xc
c0023061:	83 ca ff             	or     edx,0xffffffff
c0023064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023068:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c002306b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0023070:	83 e9 41             	sub    ecx,0x41
c0023073:	83 f9 19             	cmp    ecx,0x19
c0023076:	77 18                	ja     c0023090 <SysEject(regs*)+0x32>
c0023078:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c002307f:	85 c9                	test   ecx,ecx
c0023081:	74 0d                	je     c0023090 <SysEject(regs*)+0x32>
c0023083:	83 ec 0c             	sub    esp,0xc
c0023086:	51                   	push   ecx
c0023087:	e8 78 96 ff ff       	call   c001c704 <LogicalDisk::eject()>
c002308c:	83 c4 10             	add    esp,0x10
c002308f:	99                   	cdq    
c0023090:	83 c4 0c             	add    esp,0xc
c0023093:	c3                   	ret    

c0023094 <SysExit(regs*)>:
c0023094:	83 ec 18             	sub    esp,0x18
c0023097:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002309b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002309e:	e8 9d 29 00 00       	call   c0025a40 <terminateTask(int)>
c00230a3:	83 c8 ff             	or     eax,0xffffffff
c00230a6:	83 c4 1c             	add    esp,0x1c
c00230a9:	89 c2                	mov    edx,eax
c00230ab:	c3                   	ret    

c00230ac <SysGetCwd(regs*)>:
c00230ac:	83 ec 10             	sub    esp,0x10
c00230af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00230b3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00230b6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00230b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230be:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00230c1:	e8 d4 70 ff ff       	call   c001a19a <Fs::getcwd(Process*, char*, int)>
c00230c6:	83 c4 1c             	add    esp,0x1c
c00230c9:	99                   	cdq    
c00230ca:	c3                   	ret    

c00230cb <SysGetPID(regs*)>:
c00230cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00230d5:	99                   	cdq    
c00230d6:	c3                   	ret    

c00230d7 <SysGetRAMData(regs*)>:
c00230d7:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c00230e1:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00230e7:	99                   	cdq    
c00230e8:	f7 f9                	idiv   ecx
c00230ea:	c1 e0 18             	shl    eax,0x18
c00230ed:	09 c8                	or     eax,ecx
c00230ef:	99                   	cdq    
c00230f0:	c3                   	ret    

c00230f1 <SysGetVGAPtr(regs*)>:
c00230f1:	55                   	push   ebp
c00230f2:	57                   	push   edi
c00230f3:	56                   	push   esi
c00230f4:	53                   	push   ebx
c00230f5:	83 ec 18             	sub    esp,0x18
c00230f8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00230fc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00230ff:	e8 08 24 00 00       	call   c002550c <Thr::processFromPID(int)>
c0023104:	83 c4 10             	add    esp,0x10
c0023107:	89 c1                	mov    ecx,eax
c0023109:	b8 01 00 00 00       	mov    eax,0x1
c002310e:	85 c9                	test   ecx,ecx
c0023110:	74 57                	je     c0023169 <SysGetVGAPtr(regs*)+0x78>
c0023112:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0023116:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c002311c:	74 0c                	je     c002312a <SysGetVGAPtr(regs*)+0x39>
c002311e:	83 ec 0c             	sub    esp,0xc
c0023121:	55                   	push   ebp
c0023122:	e8 20 40 ff ff       	call   c0017147 <setActiveTerminal(VgaText*)>
c0023127:	83 c4 10             	add    esp,0x10
c002312a:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002312d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023132:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023135:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023137:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002313a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002313d:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023143:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023146:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0023149:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c002314f:	50                   	push   eax
c0023150:	50                   	push   eax
c0023151:	68 32 2c 03 c0       	push   0xc0032c32
c0023156:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023159:	05 a8 0f 00 00       	add    eax,0xfa8
c002315e:	50                   	push   eax
c002315f:	e8 ec d4 fd ff       	call   c0000650 <strcpy>
c0023164:	83 c4 10             	add    esp,0x10
c0023167:	31 c0                	xor    eax,eax
c0023169:	83 c4 0c             	add    esp,0xc
c002316c:	31 d2                	xor    edx,edx
c002316e:	5b                   	pop    ebx
c002316f:	5e                   	pop    esi
c0023170:	5f                   	pop    edi
c0023171:	5d                   	pop    ebp
c0023172:	c3                   	ret    
c0023173:	90                   	nop

c0023174 <SysKill(regs*)>:
c0023174:	53                   	push   ebx
c0023175:	83 ec 08             	sub    esp,0x8
c0023178:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002317c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023180:	75 16                	jne    c0023198 <SysKill(regs*)+0x24>
c0023182:	83 ec 0c             	sub    esp,0xc
c0023185:	68 3c 2c 03 c0       	push   0xc0032c3c
c002318a:	e8 db d0 ff ff       	call   c002026a <KePanic(char const*)>
c002318f:	83 c4 10             	add    esp,0x10
c0023192:	e9 89 00 00 00       	jmp    c0023220 <SysKill(regs*)+0xac>
c0023197:	90                   	nop
c0023198:	83 ec 0c             	sub    esp,0xc
c002319b:	68 ec 01 04 c0       	push   0xc00401ec
c00231a0:	e8 77 bb 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00231a5:	8d 76 00             	lea    esi,[esi+0x0]
c00231a8:	83 c4 10             	add    esp,0x10
c00231ab:	85 c0                	test   eax,eax
c00231ad:	74 19                	je     c00231c8 <SysKill(regs*)+0x54>
c00231af:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00231b2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00231b5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00231b7:	74 33                	je     c00231ec <SysKill(regs*)+0x78>
c00231b9:	52                   	push   edx
c00231ba:	52                   	push   edx
c00231bb:	50                   	push   eax
c00231bc:	68 ec 01 04 c0       	push   0xc00401ec
c00231c1:	e8 76 be 00 00       	call   c002f03c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00231c6:	eb e0                	jmp    c00231a8 <SysKill(regs*)+0x34>
c00231c8:	83 ec 0c             	sub    esp,0xc
c00231cb:	68 e0 01 04 c0       	push   0xc00401e0
c00231d0:	e8 47 bb 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00231d5:	8d 76 00             	lea    esi,[esi+0x0]
c00231d8:	83 c4 10             	add    esp,0x10
c00231db:	85 c0                	test   eax,eax
c00231dd:	74 41                	je     c0023220 <SysKill(regs*)+0xac>
c00231df:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00231e2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00231e5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00231e7:	75 27                	jne    c0023210 <SysKill(regs*)+0x9c>
c00231e9:	8d 76 00             	lea    esi,[esi+0x0]
c00231ec:	51                   	push   ecx
c00231ed:	51                   	push   ecx
c00231ee:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00231f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231f9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00231ff:	e8 18 d9 ff ff       	call   c0020b1c <KeRaiseSignal(SigHandlerBlock*, int)>
c0023204:	83 c4 10             	add    esp,0x10
c0023207:	31 c0                	xor    eax,eax
c0023209:	31 d2                	xor    edx,edx
c002320b:	eb 1b                	jmp    c0023228 <SysKill(regs*)+0xb4>
c002320d:	8d 76 00             	lea    esi,[esi+0x0]
c0023210:	52                   	push   edx
c0023211:	52                   	push   edx
c0023212:	50                   	push   eax
c0023213:	68 e0 01 04 c0       	push   0xc00401e0
c0023218:	e8 1f be 00 00       	call   c002f03c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002321d:	eb b9                	jmp    c00231d8 <SysKill(regs*)+0x64>
c002321f:	90                   	nop
c0023220:	83 c8 ff             	or     eax,0xffffffff
c0023223:	89 c2                	mov    edx,eax
c0023225:	8d 76 00             	lea    esi,[esi+0x0]
c0023228:	83 c4 08             	add    esp,0x8
c002322b:	5b                   	pop    ebx
c002322c:	c3                   	ret    

c002322d <SysLoadDLL(regs*)>:
c002322d:	56                   	push   esi
c002322e:	31 d2                	xor    edx,edx
c0023230:	53                   	push   ebx
c0023231:	b8 01 00 00 00       	mov    eax,0x1
c0023236:	51                   	push   ecx
c0023237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002323b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c002323f:	0f 84 8c 00 00 00    	je     c00232d1 <SysLoadDLL(regs*)+0xa4>
c0023245:	83 ec 0c             	sub    esp,0xc
c0023248:	68 14 01 00 00       	push   0x114
c002324d:	e8 49 32 ff ff       	call   c001649b <malloc>
c0023252:	83 c4 0c             	add    esp,0xc
c0023255:	89 c3                	mov    ebx,eax
c0023257:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002325c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002325f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023262:	53                   	push   ebx
c0023263:	e8 92 72 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0023268:	83 c4 10             	add    esp,0x10
c002326b:	31 d2                	xor    edx,edx
c002326d:	85 db                	test   ebx,ebx
c002326f:	b8 02 00 00 00       	mov    eax,0x2
c0023274:	74 5b                	je     c00232d1 <SysLoadDLL(regs*)+0xa4>
c0023276:	83 ec 0c             	sub    esp,0xc
c0023279:	53                   	push   ebx
c002327a:	e8 5d 75 ff ff       	call   c001a7dc <File::exists()>
c002327f:	83 c4 10             	add    esp,0x10
c0023282:	84 c0                	test   al,al
c0023284:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023286:	75 11                	jne    c0023299 <SysLoadDLL(regs*)+0x6c>
c0023288:	83 ec 0c             	sub    esp,0xc
c002328b:	53                   	push   ebx
c002328c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002328f:	83 c4 10             	add    esp,0x10
c0023292:	b8 03 00 00 00       	mov    eax,0x3
c0023297:	eb 36                	jmp    c00232cf <SysLoadDLL(regs*)+0xa2>
c0023299:	83 ec 0c             	sub    esp,0xc
c002329c:	53                   	push   ebx
c002329d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00232a0:	58                   	pop    eax
c00232a1:	5a                   	pop    edx
c00232a2:	6a 00                	push   0x0
c00232a4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00232a7:	e8 8f 15 00 00       	call   c002483b <Thr::loadDLL(char const*, bool)>
c00232ac:	83 c4 10             	add    esp,0x10
c00232af:	31 d2                	xor    edx,edx
c00232b1:	89 c1                	mov    ecx,eax
c00232b3:	b8 04 00 00 00       	mov    eax,0x4
c00232b8:	85 c9                	test   ecx,ecx
c00232ba:	74 15                	je     c00232d1 <SysLoadDLL(regs*)+0xa4>
c00232bc:	53                   	push   ebx
c00232bd:	53                   	push   ebx
c00232be:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00232c4:	51                   	push   ecx
c00232c5:	e8 d2 17 00 00       	call   c0024a9c <Thr::executeDLL(unsigned long, void*)>
c00232ca:	83 c4 10             	add    esp,0x10
c00232cd:	31 c0                	xor    eax,eax
c00232cf:	31 d2                	xor    edx,edx
c00232d1:	59                   	pop    ecx
c00232d2:	5b                   	pop    ebx
c00232d3:	5e                   	pop    esi
c00232d4:	c3                   	ret    

c00232d5 <SysRead(regs*)>:
c00232d5:	57                   	push   edi
c00232d6:	56                   	push   esi
c00232d7:	53                   	push   ebx
c00232d8:	83 ec 10             	sub    esp,0x10
c00232db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00232df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00232e2:	83 f8 02             	cmp    eax,0x2
c00232e5:	77 10                	ja     c00232f7 <SysRead(regs*)+0x22>
c00232e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00232ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00232ef:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00232f5:	eb 0e                	jmp    c0023305 <SysRead(regs*)+0x30>
c00232f7:	83 ec 0c             	sub    esp,0xc
c00232fa:	50                   	push   eax
c00232fb:	e8 73 4b ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c0023300:	83 c4 10             	add    esp,0x10
c0023303:	89 c1                	mov    ecx,eax
c0023305:	83 c8 ff             	or     eax,0xffffffff
c0023308:	85 c9                	test   ecx,ecx
c002330a:	89 c2                	mov    edx,eax
c002330c:	74 28                	je     c0023336 <SysRead(regs*)+0x61>
c002330e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023316:	83 ec 0c             	sub    esp,0xc
c0023319:	31 ff                	xor    edi,edi
c002331b:	8d 54 24 18          	lea    edx,[esp+0x18]
c002331f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0023321:	52                   	push   edx
c0023322:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023325:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023328:	57                   	push   edi
c0023329:	56                   	push   esi
c002332a:	51                   	push   ecx
c002332b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c002332e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023332:	83 c4 20             	add    esp,0x20
c0023335:	99                   	cdq    
c0023336:	83 c4 10             	add    esp,0x10
c0023339:	5b                   	pop    ebx
c002333a:	5e                   	pop    esi
c002333b:	5f                   	pop    edi
c002333c:	c3                   	ret    

c002333d <SysRegisterSignal(regs*)>:
c002333d:	83 ec 18             	sub    esp,0x18
c0023340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023344:	6a 00                	push   0x0
c0023346:	6a 00                	push   0x0
c0023348:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002334b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002334e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023353:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023356:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002335c:	e8 85 d7 ff ff       	call   c0020ae6 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023361:	83 c4 2c             	add    esp,0x2c
c0023364:	99                   	cdq    
c0023365:	c3                   	ret    

c0023366 <SysRegistryGetTypeFromPath(regs*)>:
c0023366:	57                   	push   edi
c0023367:	56                   	push   esi
c0023368:	53                   	push   ebx
c0023369:	81 ec 38 01 00 00    	sub    esp,0x138
c002336f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023376:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023379:	68 5d 2c 03 c0       	push   0xc0032c5d
c002337e:	e8 5f 5f ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0023383:	5a                   	pop    edx
c0023384:	59                   	pop    ecx
c0023385:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023388:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002338b:	e8 33 f6 ff ff       	call   c00229c3 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023390:	5f                   	pop    edi
c0023391:	5a                   	pop    edx
c0023392:	89 c6                	mov    esi,eax
c0023394:	50                   	push   eax
c0023395:	68 7d 2c 03 c0       	push   0xc0032c7d
c002339a:	e8 43 5f ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002339f:	83 c4 10             	add    esp,0x10
c00233a2:	85 f6                	test   esi,esi
c00233a4:	74 28                	je     c00233ce <SysRegistryGetTypeFromPath(regs*)+0x68>
c00233a6:	50                   	push   eax
c00233a7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00233ab:	57                   	push   edi
c00233ac:	56                   	push   esi
c00233ad:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00233b0:	e8 f3 f1 ff ff       	call   c00225a8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00233b5:	83 c4 0c             	add    esp,0xc
c00233b8:	57                   	push   edi
c00233b9:	50                   	push   eax
c00233ba:	89 c3                	mov    ebx,eax
c00233bc:	68 85 2c 03 c0       	push   0xc0032c85
c00233c1:	e8 1c 5f ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00233c6:	89 d8                	mov    eax,ebx
c00233c8:	83 c4 10             	add    esp,0x10
c00233cb:	99                   	cdq    
c00233cc:	eb 05                	jmp    c00233d3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00233ce:	83 c8 ff             	or     eax,0xffffffff
c00233d1:	89 c2                	mov    edx,eax
c00233d3:	81 c4 30 01 00 00    	add    esp,0x130
c00233d9:	5b                   	pop    ebx
c00233da:	5e                   	pop    esi
c00233db:	5f                   	pop    edi
c00233dc:	c3                   	ret    

c00233dd <SysRegistryReadExtent(regs*)>:
c00233dd:	83 ec 1c             	sub    esp,0x1c
c00233e0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00233e4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00233e7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00233ea:	85 c0                	test   eax,eax
c00233ec:	79 1f                	jns    c002340d <SysRegistryReadExtent(regs*)+0x30>
c00233ee:	52                   	push   edx
c00233ef:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00233f4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00233f8:	52                   	push   edx
c00233f9:	50                   	push   eax
c00233fa:	51                   	push   ecx
c00233fb:	e8 9a f0 ff ff       	call   c002249a <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0023400:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023404:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023408:	83 c4 10             	add    esp,0x10
c002340b:	eb 14                	jmp    c0023421 <SysRegistryReadExtent(regs*)+0x44>
c002340d:	83 ec 04             	sub    esp,0x4
c0023410:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0023413:	50                   	push   eax
c0023414:	51                   	push   ecx
c0023415:	e8 1e eb ff ff       	call   c0021f38 <CmGetString(Reghive_Tag*, int, char*)>
c002341a:	83 c4 10             	add    esp,0x10
c002341d:	31 c0                	xor    eax,eax
c002341f:	31 d2                	xor    edx,edx
c0023421:	83 c4 1c             	add    esp,0x1c
c0023424:	c3                   	ret    

c0023425 <SysRegistryPathToExtentLookup(regs*)>:
c0023425:	53                   	push   ebx
c0023426:	83 ec 10             	sub    esp,0x10
c0023429:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002342d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023430:	68 9b 2c 03 c0       	push   0xc0032c9b
c0023435:	e8 a8 5e ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002343a:	58                   	pop    eax
c002343b:	5a                   	pop    edx
c002343c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002343f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023442:	e8 7c f5 ff ff       	call   c00229c3 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023447:	83 c4 18             	add    esp,0x18
c002344a:	5b                   	pop    ebx
c002344b:	99                   	cdq    
c002344c:	c3                   	ret    

c002344d <SysRegistryEnterDirectory(regs*)>:
c002344d:	53                   	push   ebx
c002344e:	83 ec 10             	sub    esp,0x10
c0023451:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023455:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023458:	68 be 2c 03 c0       	push   0xc0032cbe
c002345d:	e8 80 5e ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0023462:	58                   	pop    eax
c0023463:	5a                   	pop    edx
c0023464:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023467:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002346a:	e8 40 eb ff ff       	call   c0021faf <CmEnterDirectory(Reghive_Tag*, int)>
c002346f:	83 c4 18             	add    esp,0x18
c0023472:	5b                   	pop    ebx
c0023473:	99                   	cdq    
c0023474:	c3                   	ret    

c0023475 <SysRegistryGetNext(regs*)>:
c0023475:	53                   	push   ebx
c0023476:	83 ec 10             	sub    esp,0x10
c0023479:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002347d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023480:	68 dc 2c 03 c0       	push   0xc0032cdc
c0023485:	e8 58 5e ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002348a:	58                   	pop    eax
c002348b:	5a                   	pop    edx
c002348c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002348f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023492:	e8 57 eb ff ff       	call   c0021fee <CmGetNext(Reghive_Tag*, int)>
c0023497:	83 c4 18             	add    esp,0x18
c002349a:	5b                   	pop    ebx
c002349b:	99                   	cdq    
c002349c:	c3                   	ret    

c002349d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c002349d:	57                   	push   edi
c002349e:	56                   	push   esi
c002349f:	53                   	push   ebx
c00234a0:	81 ec 34 01 00 00    	sub    esp,0x134
c00234a6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00234ad:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00234b1:	57                   	push   edi
c00234b2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00234b5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00234b8:	e8 eb f0 ff ff       	call   c00225a8 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00234bd:	89 c3                	mov    ebx,eax
c00234bf:	58                   	pop    eax
c00234c0:	5a                   	pop    edx
c00234c1:	57                   	push   edi
c00234c2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00234c5:	e8 86 d1 fd ff       	call   c0000650 <strcpy>
c00234ca:	81 c4 40 01 00 00    	add    esp,0x140
c00234d0:	89 d8                	mov    eax,ebx
c00234d2:	5b                   	pop    ebx
c00234d3:	99                   	cdq    
c00234d4:	5e                   	pop    esi
c00234d5:	5f                   	pop    edi
c00234d6:	c3                   	ret    

c00234d7 <SysRegistryOpen(regs*)>:
c00234d7:	83 ec 18             	sub    esp,0x18
c00234da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00234de:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00234e1:	e8 e2 e8 ff ff       	call   c0021dc8 <CmOpen(char const*)>
c00234e6:	83 c4 1c             	add    esp,0x1c
c00234e9:	99                   	cdq    
c00234ea:	c3                   	ret    

c00234eb <SysRegistryClose(regs*)>:
c00234eb:	83 ec 18             	sub    esp,0x18
c00234ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00234f2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00234f5:	e8 ec e9 ff ff       	call   c0021ee6 <CmClose(Reghive_Tag*)>
c00234fa:	31 c0                	xor    eax,eax
c00234fc:	31 d2                	xor    edx,edx
c00234fe:	83 c4 1c             	add    esp,0x1c
c0023501:	c3                   	ret    

c0023502 <SysSbrk(regs*)>:
c0023502:	56                   	push   esi
c0023503:	53                   	push   ebx
c0023504:	50                   	push   eax
c0023505:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002350a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002350e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023511:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0023514:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c002351a:	85 db                	test   ebx,ebx
c002351c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c002351f:	74 02                	je     c0023523 <SysSbrk(regs*)+0x21>
c0023521:	79 06                	jns    c0023529 <SysSbrk(regs*)+0x27>
c0023523:	89 f0                	mov    eax,esi
c0023525:	31 d2                	xor    edx,edx
c0023527:	eb 2a                	jmp    c0023553 <SysSbrk(regs*)+0x51>
c0023529:	83 c8 ff             	or     eax,0xffffffff
c002352c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023532:	89 c2                	mov    edx,eax
c0023534:	77 1d                	ja     c0023553 <SysSbrk(regs*)+0x51>
c0023536:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c002353c:	50                   	push   eax
c002353d:	68 07 0c 00 00       	push   0xc07
c0023542:	c1 ea 0c             	shr    edx,0xc
c0023545:	52                   	push   edx
c0023546:	51                   	push   ecx
c0023547:	e8 92 52 ff ff       	call   c00187de <VAS::allocatePages(int, int)>
c002354c:	89 f0                	mov    eax,esi
c002354e:	31 d2                	xor    edx,edx
c0023550:	83 c4 10             	add    esp,0x10
c0023553:	59                   	pop    ecx
c0023554:	5b                   	pop    ebx
c0023555:	5e                   	pop    esi
c0023556:	c3                   	ret    

c0023557 <SysSetCwd(regs*)>:
c0023557:	83 ec 14             	sub    esp,0x14
c002355a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002355e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023566:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023569:	e8 0d 73 ff ff       	call   c001a87b <Fs::setcwd(Process*, char*)>
c002356e:	83 c4 1c             	add    esp,0x1c
c0023571:	99                   	cdq    
c0023572:	c3                   	ret    

c0023573 <SysSetTime(regs*)>:
c0023573:	55                   	push   ebp
c0023574:	31 c9                	xor    ecx,ecx
c0023576:	57                   	push   edi
c0023577:	bd 0c 00 00 00       	mov    ebp,0xc
c002357c:	56                   	push   esi
c002357d:	53                   	push   ebx
c002357e:	31 db                	xor    ebx,ebx
c0023580:	83 ec 10             	sub    esp,0x10
c0023583:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023587:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002358a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c002358d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023590:	89 c2                	mov    edx,eax
c0023592:	c1 e8 05             	shr    eax,0x5
c0023595:	83 e2 1f             	and    edx,0x1f
c0023598:	42                   	inc    edx
c0023599:	81 ef 6c 07 00 00    	sub    edi,0x76c
c002359f:	c1 e7 10             	shl    edi,0x10
c00235a2:	88 d1                	mov    cl,dl
c00235a4:	31 d2                	xor    edx,edx
c00235a6:	f7 f5                	div    ebp
c00235a8:	89 dd                	mov    ebp,ebx
c00235aa:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00235b0:	88 d5                	mov    ch,dl
c00235b2:	31 d2                	xor    edx,edx
c00235b4:	0f b7 c1             	movzx  eax,cx
c00235b7:	09 f8                	or     eax,edi
c00235b9:	bf 3c 00 00 00       	mov    edi,0x3c
c00235be:	89 c1                	mov    ecx,eax
c00235c0:	89 f0                	mov    eax,esi
c00235c2:	f7 f7                	div    edi
c00235c4:	c1 e2 10             	shl    edx,0x10
c00235c7:	09 d5                	or     ebp,edx
c00235c9:	31 d2                	xor    edx,edx
c00235cb:	f7 f7                	div    edi
c00235cd:	89 eb                	mov    ebx,ebp
c00235cf:	bf 10 0e 00 00       	mov    edi,0xe10
c00235d4:	89 f0                	mov    eax,esi
c00235d6:	88 d7                	mov    bh,dl
c00235d8:	31 d2                	xor    edx,edx
c00235da:	f7 f7                	div    edi
c00235dc:	bf 18 00 00 00       	mov    edi,0x18
c00235e1:	31 d2                	xor    edx,edx
c00235e3:	f7 f7                	div    edi
c00235e5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00235ea:	88 d3                	mov    bl,dl
c00235ec:	53                   	push   ebx
c00235ed:	51                   	push   ecx
c00235ee:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00235f4:	e8 93 7a ff ff       	call   c001b08c <Clock::setTimeInDatetimeLocal(datetime_t)>
c00235f9:	83 c4 1c             	add    esp,0x1c
c00235fc:	31 d2                	xor    edx,edx
c00235fe:	5b                   	pop    ebx
c00235ff:	5e                   	pop    esi
c0023600:	83 f0 01             	xor    eax,0x1
c0023603:	5f                   	pop    edi
c0023604:	0f b6 c0             	movzx  eax,al
c0023607:	5d                   	pop    ebp
c0023608:	c3                   	ret    

c0023609 <SysSymlink(regs*)>:
c0023609:	56                   	push   esi
c002360a:	83 c8 ff             	or     eax,0xffffffff
c002360d:	53                   	push   ebx
c002360e:	89 c2                	mov    edx,eax
c0023610:	81 ec 34 02 00 00    	sub    esp,0x234
c0023616:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c002361d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023621:	74 50                	je     c0023673 <SysSymlink(regs*)+0x6a>
c0023623:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0023626:	85 c9                	test   ecx,ecx
c0023628:	74 49                	je     c0023673 <SysSymlink(regs*)+0x6a>
c002362a:	6a 01                	push   0x1
c002362c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023631:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023634:	05 0c 01 00 00       	add    eax,0x10c
c0023639:	50                   	push   eax
c002363a:	51                   	push   ecx
c002363b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002363f:	56                   	push   esi
c0023640:	e8 a9 6b ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023645:	6a 01                	push   0x1
c0023647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002364c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002364f:	05 0c 01 00 00       	add    eax,0x10c
c0023654:	50                   	push   eax
c0023655:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023658:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002365f:	53                   	push   ebx
c0023660:	e8 89 6b ff ff       	call   c001a1ee <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023665:	83 c4 18             	add    esp,0x18
c0023668:	56                   	push   esi
c0023669:	53                   	push   ebx
c002366a:	e8 8e 67 ff ff       	call   c0019dfd <KeCreateSymlink(char const*, char const*)>
c002366f:	83 c4 10             	add    esp,0x10
c0023672:	99                   	cdq    
c0023673:	81 c4 34 02 00 00    	add    esp,0x234
c0023679:	5b                   	pop    ebx
c002367a:	5e                   	pop    esi
c002367b:	c3                   	ret    

c002367c <SysTimezone(regs*)>:
c002367c:	53                   	push   ebx
c002367d:	83 ec 08             	sub    esp,0x8
c0023680:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023684:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023688:	75 17                	jne    c00236a1 <SysTimezone(regs*)+0x25>
c002368a:	83 ec 0c             	sub    esp,0xc
c002368d:	68 f3 2c 03 c0       	push   0xc0032cf3
c0023692:	e8 4b 5c ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0023697:	83 c8 ff             	or     eax,0xffffffff
c002369a:	83 c4 10             	add    esp,0x10
c002369d:	89 c2                	mov    edx,eax
c002369f:	eb 20                	jmp    c00236c1 <SysTimezone(regs*)+0x45>
c00236a1:	83 ec 0c             	sub    esp,0xc
c00236a4:	68 08 2d 03 c0       	push   0xc0032d08
c00236a9:	e8 34 5c ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00236ae:	58                   	pop    eax
c00236af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00236b2:	e8 39 77 ff ff       	call   c001adf0 <User::loadClockSettings(int)>
c00236b7:	83 c4 10             	add    esp,0x10
c00236ba:	b8 01 00 00 00       	mov    eax,0x1
c00236bf:	31 d2                	xor    edx,edx
c00236c1:	83 c4 08             	add    esp,0x8
c00236c4:	5b                   	pop    ebx
c00236c5:	c3                   	ret    

c00236c6 <SysTruncate(regs*)>:
c00236c6:	55                   	push   ebp
c00236c7:	57                   	push   edi
c00236c8:	31 ff                	xor    edi,edi
c00236ca:	56                   	push   esi
c00236cb:	53                   	push   ebx
c00236cc:	83 ec 0c             	sub    esp,0xc
c00236cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00236d3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00236d6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00236da:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00236dd:	89 ce                	mov    esi,ecx
c00236df:	0f 84 9a 00 00 00    	je     c002377f <SysTruncate(regs*)+0xb9>
c00236e5:	83 ec 0c             	sub    esp,0xc
c00236e8:	68 14 01 00 00       	push   0x114
c00236ed:	e8 a9 2d ff ff       	call   c001649b <malloc>
c00236f2:	83 c4 0c             	add    esp,0xc
c00236f5:	89 c3                	mov    ebx,eax
c00236f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236fc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00236ff:	55                   	push   ebp
c0023700:	53                   	push   ebx
c0023701:	e8 f4 6d ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0023706:	83 c4 10             	add    esp,0x10
c0023709:	31 d2                	xor    edx,edx
c002370b:	85 db                	test   ebx,ebx
c002370d:	b8 03 00 00 00       	mov    eax,0x3
c0023712:	0f 84 a2 00 00 00    	je     c00237ba <SysTruncate(regs*)+0xf4>
c0023718:	51                   	push   ecx
c0023719:	51                   	push   ecx
c002371a:	6a 02                	push   0x2
c002371c:	53                   	push   ebx
c002371d:	e8 f6 6d ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0023722:	83 c4 10             	add    esp,0x10
c0023725:	85 c0                	test   eax,eax
c0023727:	74 13                	je     c002373c <SysTruncate(regs*)+0x76>
c0023729:	8b 03                	mov    eax,DWORD PTR [ebx]
c002372b:	83 ec 0c             	sub    esp,0xc
c002372e:	53                   	push   ebx
c002372f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023732:	83 c4 10             	add    esp,0x10
c0023735:	b8 04 00 00 00       	mov    eax,0x4
c002373a:	eb 7c                	jmp    c00237b8 <SysTruncate(regs*)+0xf2>
c002373c:	52                   	push   edx
c002373d:	57                   	push   edi
c002373e:	56                   	push   esi
c002373f:	53                   	push   ebx
c0023740:	e8 e7 6e ff ff       	call   c001a62c <File::truncate(unsigned long long)>
c0023745:	83 c4 10             	add    esp,0x10
c0023748:	85 c0                	test   eax,eax
c002374a:	74 1b                	je     c0023767 <SysTruncate(regs*)+0xa1>
c002374c:	83 ec 0c             	sub    esp,0xc
c002374f:	53                   	push   ebx
c0023750:	e8 21 6e ff ff       	call   c001a576 <File::close()>
c0023755:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023757:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002375a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002375d:	83 c4 10             	add    esp,0x10
c0023760:	b8 05 00 00 00       	mov    eax,0x5
c0023765:	eb 51                	jmp    c00237b8 <SysTruncate(regs*)+0xf2>
c0023767:	83 ec 0c             	sub    esp,0xc
c002376a:	53                   	push   ebx
c002376b:	e8 06 6e ff ff       	call   c001a576 <File::close()>
c0023770:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023775:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023778:	83 c4 10             	add    esp,0x10
c002377b:	31 c0                	xor    eax,eax
c002377d:	eb 39                	jmp    c00237b8 <SysTruncate(regs*)+0xf2>
c002377f:	31 d2                	xor    edx,edx
c0023781:	83 fd 02             	cmp    ebp,0x2
c0023784:	b8 01 00 00 00       	mov    eax,0x1
c0023789:	7e 2f                	jle    c00237ba <SysTruncate(regs*)+0xf4>
c002378b:	83 ec 0c             	sub    esp,0xc
c002378e:	51                   	push   ecx
c002378f:	e8 df 46 ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c0023794:	83 c4 10             	add    esp,0x10
c0023797:	31 d2                	xor    edx,edx
c0023799:	89 c1                	mov    ecx,eax
c002379b:	b8 02 00 00 00       	mov    eax,0x2
c00237a0:	85 c9                	test   ecx,ecx
c00237a2:	74 16                	je     c00237ba <SysTruncate(regs*)+0xf4>
c00237a4:	50                   	push   eax
c00237a5:	57                   	push   edi
c00237a6:	56                   	push   esi
c00237a7:	51                   	push   ecx
c00237a8:	e8 7f 6e ff ff       	call   c001a62c <File::truncate(unsigned long long)>
c00237ad:	83 c4 10             	add    esp,0x10
c00237b0:	85 c0                	test   eax,eax
c00237b2:	0f 95 c0             	setne  al
c00237b5:	0f b6 c0             	movzx  eax,al
c00237b8:	31 d2                	xor    edx,edx
c00237ba:	83 c4 0c             	add    esp,0xc
c00237bd:	5b                   	pop    ebx
c00237be:	5e                   	pop    esi
c00237bf:	5f                   	pop    edi
c00237c0:	5d                   	pop    ebp
c00237c1:	c3                   	ret    

c00237c2 <SysWrite(regs*)>:
c00237c2:	57                   	push   edi
c00237c3:	56                   	push   esi
c00237c4:	53                   	push   ebx
c00237c5:	83 ec 10             	sub    esp,0x10
c00237c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00237cc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00237cf:	83 f8 02             	cmp    eax,0x2
c00237d2:	77 10                	ja     c00237e4 <SysWrite(regs*)+0x22>
c00237d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00237d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00237dc:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00237e2:	eb 0e                	jmp    c00237f2 <SysWrite(regs*)+0x30>
c00237e4:	83 ec 0c             	sub    esp,0xc
c00237e7:	50                   	push   eax
c00237e8:	e8 86 46 ff ff       	call   c0017e73 <KeGetFileFromDescriptor(int)>
c00237ed:	83 c4 10             	add    esp,0x10
c00237f0:	89 c1                	mov    ecx,eax
c00237f2:	83 c8 ff             	or     eax,0xffffffff
c00237f5:	85 c9                	test   ecx,ecx
c00237f7:	89 c2                	mov    edx,eax
c00237f9:	74 28                	je     c0023823 <SysWrite(regs*)+0x61>
c00237fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023803:	83 ec 0c             	sub    esp,0xc
c0023806:	31 ff                	xor    edi,edi
c0023808:	8d 54 24 18          	lea    edx,[esp+0x18]
c002380c:	8b 01                	mov    eax,DWORD PTR [ecx]
c002380e:	52                   	push   edx
c002380f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023812:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0023815:	57                   	push   edi
c0023816:	56                   	push   esi
c0023817:	51                   	push   ecx
c0023818:	ff 50 10             	call   DWORD PTR [eax+0x10]
c002381b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002381f:	83 c4 20             	add    esp,0x20
c0023822:	99                   	cdq    
c0023823:	83 c4 10             	add    esp,0x10
c0023826:	5b                   	pop    ebx
c0023827:	5e                   	pop    esi
c0023828:	5f                   	pop    edi
c0023829:	c3                   	ret    

c002382a <SysWsbe(regs*)>:
c002382a:	57                   	push   edi
c002382b:	b9 0b 00 00 00       	mov    ecx,0xb
c0023830:	56                   	push   esi
c0023831:	be 47 2d 03 c0       	mov    esi,0xc0032d47
c0023836:	53                   	push   ebx
c0023837:	83 ec 30             	sub    esp,0x30
c002383a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002383e:	fc                   	cld    
c002383f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023841:	83 ec 0c             	sub    esp,0xc
c0023844:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023848:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002384d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023850:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023856:	8b 06                	mov    eax,DWORD PTR [esi]
c0023858:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002385b:	57                   	push   edi
c002385c:	e8 1f cd fd ff       	call   c0000580 <strlen>
c0023861:	5a                   	pop    edx
c0023862:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023866:	52                   	push   edx
c0023867:	31 d2                	xor    edx,edx
c0023869:	57                   	push   edi
c002386a:	52                   	push   edx
c002386b:	50                   	push   eax
c002386c:	56                   	push   esi
c002386d:	ff d3                	call   ebx
c002386f:	83 c4 14             	add    esp,0x14
c0023872:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023876:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023879:	e8 c2 21 00 00       	call   c0025a40 <terminateTask(int)>
c002387e:	83 c4 40             	add    esp,0x40
c0023881:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023886:	5b                   	pop    ebx
c0023887:	31 d2                	xor    edx,edx
c0023889:	5e                   	pop    esi
c002388a:	5f                   	pop    edi
c002388b:	c3                   	ret    

c002388c <SysYield(regs*)>:
c002388c:	83 ec 0c             	sub    esp,0xc
c002388f:	fa                   	cli    
c0023890:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023896:	e8 31 1a 00 00       	call   c00252cc <schedule()>
c002389b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00238a0:	48                   	dec    eax
c00238a1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00238a6:	75 01                	jne    c00238a9 <SysYield(regs*)+0x1d>
c00238a8:	fb                   	sti    
c00238a9:	31 c0                	xor    eax,eax
c00238ab:	31 d2                	xor    edx,edx
c00238ad:	83 c4 0c             	add    esp,0xc
c00238b0:	c3                   	ret    

c00238b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00238b1:	55                   	push   ebp
c00238b2:	57                   	push   edi
c00238b3:	56                   	push   esi
c00238b4:	53                   	push   ebx
c00238b5:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00238bb:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00238c6:	74 3b                	je     c0023903 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00238c8:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00238d0:	74 31                	je     c0023903 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00238d2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00238da:	75 27                	jne    c0023903 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00238dc:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00238e3:	05 00 10 00 00       	add    eax,0x1000
c00238e8:	89 c2                	mov    edx,eax
c00238ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00238ef:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00238f6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00238fc:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0023903:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c002390a:	83 ec 0c             	sub    esp,0xc
c002390d:	6a 01                	push   0x1
c002390f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023915:	e8 b3 46 ff ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c002391a:	83 c4 10             	add    esp,0x10
c002391d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023923:	89 c3                	mov    ebx,eax
c0023925:	0f 86 26 01 00 00    	jbe    c0023a51 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c002392b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023933:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c002393a:	c1 ee 0c             	shr    esi,0xc
c002393d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023941:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023948:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c002394f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023953:	29 ef                	sub    edi,ebp
c0023955:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023959:	0f 83 f9 00 00 00    	jae    c0023a58 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c002395f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023965:	b8 00 10 00 00       	mov    eax,0x1000
c002396a:	0f 47 f8             	cmova  edi,eax
c002396d:	83 ec 0c             	sub    esp,0xc
c0023970:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023977:	31 d2                	xor    edx,edx
c0023979:	8b 08                	mov    ecx,DWORD PTR [eax]
c002397b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002397f:	50                   	push   eax
c0023980:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023984:	56                   	push   esi
c0023985:	52                   	push   edx
c0023986:	57                   	push   edi
c0023987:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c002398e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023991:	83 c4 20             	add    esp,0x20
c0023994:	85 c0                	test   eax,eax
c0023996:	75 06                	jne    c002399e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023998:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002399c:	74 13                	je     c00239b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c002399e:	83 ec 0c             	sub    esp,0xc
c00239a1:	53                   	push   ebx
c00239a2:	e8 3a 49 ff ff       	call   c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c00239a7:	83 c4 10             	add    esp,0x10
c00239aa:	31 c0                	xor    eax,eax
c00239ac:	e9 7c 01 00 00       	jmp    c0023b2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c00239b1:	fa                   	cli    
c00239b2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c00239b8:	e8 fd 2d ff ff       	call   c00167ba <Phys::allocatePage()>
c00239bd:	6a 07                	push   0x7
c00239bf:	53                   	push   ebx
c00239c0:	50                   	push   eax
c00239c1:	89 c7                	mov    edi,eax
c00239c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239cb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239d1:	e8 00 4d ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c00239d6:	83 c4 0c             	add    esp,0xc
c00239d9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00239e0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239e6:	6a 00                	push   0x0
c00239e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239ed:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239f0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239f6:	e8 41 4b ff ff       	call   c001853c <VAS::mapOtherVASIn(bool, VAS*)>
c00239fb:	58                   	pop    eax
c00239fc:	5a                   	pop    edx
c00239fd:	68 07 0c 00 00       	push   0xc07
c0023a02:	55                   	push   ebp
c0023a03:	57                   	push   edi
c0023a04:	89 df                	mov    edi,ebx
c0023a06:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023a0d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a13:	6a 00                	push   0x0
c0023a15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a1d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a23:	e8 12 4f ff ff       	call   c001893a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023a28:	b9 00 10 00 00       	mov    ecx,0x1000
c0023a2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023a2f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023a34:	83 c4 20             	add    esp,0x20
c0023a37:	48                   	dec    eax
c0023a38:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023a3d:	85 c0                	test   eax,eax
c0023a3f:	75 01                	jne    c0023a42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023a41:	fb                   	sti    
c0023a42:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023a46:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023a4c:	e9 f0 fe ff ff       	jmp    c0023941 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023a51:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023a58:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023a5f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023a65:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023a6b:	0f 86 ae 00 00 00    	jbe    c0023b1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023a71:	fa                   	cli    
c0023a72:	51                   	push   ecx
c0023a73:	31 ff                	xor    edi,edi
c0023a75:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023a7c:	c1 ee 0c             	shr    esi,0xc
c0023a7f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023a85:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a8b:	6a 00                	push   0x0
c0023a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023a92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023a95:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023a9b:	e8 9c 4a ff ff       	call   c001853c <VAS::mapOtherVASIn(bool, VAS*)>
c0023aa0:	83 c4 10             	add    esp,0x10
c0023aa3:	e8 12 2d ff ff       	call   c00167ba <Phys::allocatePage()>
c0023aa8:	47                   	inc    edi
c0023aa9:	6a 07                	push   0x7
c0023aab:	53                   	push   ebx
c0023aac:	50                   	push   eax
c0023aad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023ab1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023ab7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023aba:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023ac0:	e8 11 4c ff ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c0023ac5:	58                   	pop    eax
c0023ac6:	5a                   	pop    edx
c0023ac7:	68 07 0c 00 00       	push   0xc07
c0023acc:	55                   	push   ebp
c0023acd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023ad3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ad7:	50                   	push   eax
c0023ad8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0023adf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023ae5:	6a 00                	push   0x0
c0023ae7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023aec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023aef:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023af5:	e8 40 4e ff ff       	call   c001893a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023afa:	83 c4 1c             	add    esp,0x1c
c0023afd:	68 00 10 00 00       	push   0x1000
c0023b02:	6a 00                	push   0x0
c0023b04:	53                   	push   ebx
c0023b05:	e8 e6 c9 fd ff       	call   c00004f0 <memset>
c0023b0a:	83 c4 10             	add    esp,0x10
c0023b0d:	39 fe                	cmp    esi,edi
c0023b0f:	77 92                	ja     c0023aa3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c0023b11:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023b16:	48                   	dec    eax
c0023b17:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023b1c:	75 01                	jne    c0023b1f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023b1e:	fb                   	sti    
c0023b1f:	83 ec 0c             	sub    esp,0xc
c0023b22:	53                   	push   ebx
c0023b23:	e8 b9 47 ff ff       	call   c00182e1 <Virt::freeKernelVirtualPages(unsigned long)>
c0023b28:	83 c4 10             	add    esp,0x10
c0023b2b:	b0 01                	mov    al,0x1
c0023b2d:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023b33:	5b                   	pop    ebx
c0023b34:	5e                   	pop    esi
c0023b35:	5f                   	pop    edi
c0023b36:	5d                   	pop    ebp
c0023b37:	c3                   	ret    

c0023b38 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023b38:	55                   	push   ebp
c0023b39:	57                   	push   edi
c0023b3a:	56                   	push   esi
c0023b3b:	53                   	push   ebx
c0023b3c:	83 ec 48             	sub    esp,0x48
c0023b3f:	68 14 01 00 00       	push   0x114
c0023b44:	e8 52 29 ff ff       	call   c001649b <malloc>
c0023b49:	83 c4 0c             	add    esp,0xc
c0023b4c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023b50:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023b54:	89 c7                	mov    edi,eax
c0023b56:	50                   	push   eax
c0023b57:	e8 9e 69 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0023b5c:	58                   	pop    eax
c0023b5d:	5a                   	pop    edx
c0023b5e:	6a 01                	push   0x1
c0023b60:	57                   	push   edi
c0023b61:	e8 b2 69 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0023b66:	83 c4 10             	add    esp,0x10
c0023b69:	85 c0                	test   eax,eax
c0023b6b:	0f 85 4c 01 00 00    	jne    c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023b71:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023b79:	83 ec 0c             	sub    esp,0xc
c0023b7c:	6a 34                	push   0x34
c0023b7e:	e8 18 29 ff ff       	call   c001649b <malloc>
c0023b83:	89 c3                	mov    ebx,eax
c0023b85:	58                   	pop    eax
c0023b86:	8b 07                	mov    eax,DWORD PTR [edi]
c0023b88:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023b8c:	56                   	push   esi
c0023b8d:	53                   	push   ebx
c0023b8e:	6a 00                	push   0x0
c0023b90:	6a 34                	push   0x34
c0023b92:	57                   	push   edi
c0023b93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023b96:	83 c4 20             	add    esp,0x20
c0023b99:	85 c0                	test   eax,eax
c0023b9b:	0f 85 1c 01 00 00    	jne    c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ba1:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023ba7:	0f 85 10 01 00 00    	jne    c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023bad:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023bb0:	85 c0                	test   eax,eax
c0023bb2:	0f 84 05 01 00 00    	je     c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023bb8:	31 d2                	xor    edx,edx
c0023bba:	55                   	push   ebp
c0023bbb:	52                   	push   edx
c0023bbc:	50                   	push   eax
c0023bbd:	57                   	push   edi
c0023bbe:	e8 13 6a ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0023bc3:	83 c4 10             	add    esp,0x10
c0023bc6:	85 c0                	test   eax,eax
c0023bc8:	0f 85 ef 00 00 00    	jne    c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023bce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023bd1:	83 ec 0c             	sub    esp,0xc
c0023bd4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023bd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023bdc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023be0:	0f af c2             	imul   eax,edx
c0023be3:	50                   	push   eax
c0023be4:	e8 b2 28 ff ff       	call   c001649b <malloc>
c0023be9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023beb:	89 34 24             	mov    DWORD PTR [esp],esi
c0023bee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023bf2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023bf6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023bfa:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023bfe:	0f af c2             	imul   eax,edx
c0023c01:	99                   	cdq    
c0023c02:	52                   	push   edx
c0023c03:	50                   	push   eax
c0023c04:	57                   	push   edi
c0023c05:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023c08:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023c0b:	83 c4 20             	add    esp,0x20
c0023c0e:	85 c0                	test   eax,eax
c0023c10:	0f 84 a7 00 00 00    	je     c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023c16:	31 d2                	xor    edx,edx
c0023c18:	51                   	push   ecx
c0023c19:	52                   	push   edx
c0023c1a:	50                   	push   eax
c0023c1b:	57                   	push   edi
c0023c1c:	e8 b5 69 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0023c21:	83 c4 10             	add    esp,0x10
c0023c24:	85 c0                	test   eax,eax
c0023c26:	0f 85 91 00 00 00    	jne    c0023cbd <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023c2c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c30:	83 ec 0c             	sub    esp,0xc
c0023c33:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c37:	0f af c2             	imul   eax,edx
c0023c3a:	50                   	push   eax
c0023c3b:	e8 5b 28 ff ff       	call   c001649b <malloc>
c0023c40:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023c42:	89 34 24             	mov    DWORD PTR [esp],esi
c0023c45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023c49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c4d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023c51:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023c55:	0f af c2             	imul   eax,edx
c0023c58:	99                   	cdq    
c0023c59:	52                   	push   edx
c0023c5a:	50                   	push   eax
c0023c5b:	57                   	push   edi
c0023c5c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023c5f:	83 c4 20             	add    esp,0x20
c0023c62:	31 c9                	xor    ecx,ecx
c0023c64:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023c6c:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0023c70:	0f b7 e9             	movzx  ebp,cx
c0023c73:	0f 83 86 00 00 00    	jae    c0023cff <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023c79:	c1 e5 05             	shl    ebp,0x5
c0023c7c:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0023c80:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023c84:	75 73                	jne    c0023cf9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023c86:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023c8d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0023c90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023c94:	52                   	push   edx
c0023c95:	31 d2                	xor    edx,edx
c0023c97:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023c9a:	52                   	push   edx
c0023c9b:	50                   	push   eax
c0023c9c:	57                   	push   edi
c0023c9d:	e8 34 69 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0023ca2:	83 c4 10             	add    esp,0x10
c0023ca5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ca9:	85 c0                	test   eax,eax
c0023cab:	74 17                	je     c0023cc4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0023cad:	83 ec 0c             	sub    esp,0xc
c0023cb0:	68 73 2d 03 c0       	push   0xc0032d73
c0023cb5:	e8 28 56 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0023cba:	83 c4 10             	add    esp,0x10
c0023cbd:	31 c0                	xor    eax,eax
c0023cbf:	e9 8b 00 00 00       	jmp    c0023d4f <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0023cc4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023cc8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023ccb:	83 ec 0c             	sub    esp,0xc
c0023cce:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0023cd1:	50                   	push   eax
c0023cd2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023cd6:	56                   	push   esi
c0023cd7:	57                   	push   edi
c0023cd8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023cdc:	e8 d0 fb ff ff       	call   c00238b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023ce1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0023ce5:	83 c4 20             	add    esp,0x20
c0023ce8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0023cec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023cf0:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0023cf5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0023cf9:	41                   	inc    ecx
c0023cfa:	e9 6d ff ff ff       	jmp    c0023c6c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023cff:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0023d03:	83 ec 0c             	sub    esp,0xc
c0023d06:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023d0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d0e:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0023d14:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0023d1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023d1f:	05 00 10 00 00       	add    eax,0x1000
c0023d24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023d27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d2b:	e8 8b 27 ff ff       	call   c00164bb <free>
c0023d30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d33:	e8 83 27 ff ff       	call   c00164bb <free>
c0023d38:	58                   	pop    eax
c0023d39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d3d:	e8 79 27 ff ff       	call   c00164bb <free>
c0023d42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023d45:	e8 2c 68 ff ff       	call   c001a576 <File::close()>
c0023d4a:	83 c4 10             	add    esp,0x10
c0023d4d:	b0 01                	mov    al,0x1
c0023d4f:	83 c4 3c             	add    esp,0x3c
c0023d52:	5b                   	pop    ebx
c0023d53:	5e                   	pop    esi
c0023d54:	5f                   	pop    edi
c0023d55:	5d                   	pop    ebp
c0023d56:	c3                   	ret    

c0023d57 <Thr::runtimeReferenceHelper()>:
c0023d57:	83 ec 18             	sub    esp,0x18
c0023d5a:	68 7b 2d 03 c0       	push   0xc0032d7b
c0023d5f:	e8 7e 55 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0023d64:	fa                   	cli    
c0023d65:	83 c4 10             	add    esp,0x10
c0023d68:	eb fe                	jmp    c0023d68 <Thr::runtimeReferenceHelper()+0x11>

c0023d6a <Thr::getAddressOfKernelSymbol(char const*)>:
c0023d6a:	57                   	push   edi
c0023d6b:	56                   	push   esi
c0023d6c:	53                   	push   ebx
c0023d6d:	31 db                	xor    ebx,ebx
c0023d6f:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023d75:	7e 3c                	jle    c0023db3 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023d77:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023d7e:	31 ff                	xor    edi,edi
c0023d80:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023d87:	7e 27                	jle    c0023db0 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023d89:	50                   	push   eax
c0023d8a:	50                   	push   eax
c0023d8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d8f:	8b 06                	mov    eax,DWORD PTR [esi]
c0023d91:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023d98:	50                   	push   eax
c0023d99:	e8 e2 c9 fd ff       	call   c0000780 <strcmp>
c0023d9e:	83 c4 10             	add    esp,0x10
c0023da1:	85 c0                	test   eax,eax
c0023da3:	75 05                	jne    c0023daa <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023da5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023da8:	eb 0b                	jmp    c0023db5 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023daa:	83 c6 10             	add    esi,0x10
c0023dad:	47                   	inc    edi
c0023dae:	eb d0                	jmp    c0023d80 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023db0:	43                   	inc    ebx
c0023db1:	eb bc                	jmp    c0023d6f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023db3:	31 c0                	xor    eax,eax
c0023db5:	5b                   	pop    ebx
c0023db6:	5e                   	pop    esi
c0023db7:	5f                   	pop    edi
c0023db8:	c3                   	ret    

c0023db9 <Thr::loadKernelSymbolTable(char const*)>:
c0023db9:	55                   	push   ebp
c0023dba:	57                   	push   edi
c0023dbb:	56                   	push   esi
c0023dbc:	53                   	push   ebx
c0023dbd:	83 ec 68             	sub    esp,0x68
c0023dc0:	68 14 01 00 00       	push   0x114
c0023dc5:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023dcb:	e8 cb 26 ff ff       	call   c001649b <malloc>
c0023dd0:	83 c4 0c             	add    esp,0xc
c0023dd3:	56                   	push   esi
c0023dd4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023dd8:	89 c3                	mov    ebx,eax
c0023dda:	50                   	push   eax
c0023ddb:	e8 1a 67 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0023de0:	5e                   	pop    esi
c0023de1:	5f                   	pop    edi
c0023de2:	6a 01                	push   0x1
c0023de4:	53                   	push   ebx
c0023de5:	e8 2e 67 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0023dea:	83 c4 10             	add    esp,0x10
c0023ded:	85 c0                	test   eax,eax
c0023def:	74 0a                	je     c0023dfb <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023df1:	83 ec 0c             	sub    esp,0xc
c0023df4:	68 9d 2d 03 c0       	push   0xc0032d9d
c0023df9:	eb 34                	jmp    c0023e2f <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023dfb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023e03:	83 ec 0c             	sub    esp,0xc
c0023e06:	6a 34                	push   0x34
c0023e08:	e8 8e 26 ff ff       	call   c001649b <malloc>
c0023e0d:	59                   	pop    ecx
c0023e0e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023e12:	89 c7                	mov    edi,eax
c0023e14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e16:	56                   	push   esi
c0023e17:	57                   	push   edi
c0023e18:	6a 00                	push   0x0
c0023e1a:	6a 34                	push   0x34
c0023e1c:	53                   	push   ebx
c0023e1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023e20:	83 c4 20             	add    esp,0x20
c0023e23:	85 c0                	test   eax,eax
c0023e25:	74 17                	je     c0023e3e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023e27:	83 ec 0c             	sub    esp,0xc
c0023e2a:	68 b4 2d 03 c0       	push   0xc0032db4
c0023e2f:	e8 36 c4 ff ff       	call   c002026a <KePanic(char const*)>
c0023e34:	83 c4 10             	add    esp,0x10
c0023e37:	31 c0                	xor    eax,eax
c0023e39:	e9 31 02 00 00       	jmp    c002406f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023e3e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023e44:	75 e1                	jne    c0023e27 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e46:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023e49:	85 c0                	test   eax,eax
c0023e4b:	74 da                	je     c0023e27 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e4d:	52                   	push   edx
c0023e4e:	31 d2                	xor    edx,edx
c0023e50:	52                   	push   edx
c0023e51:	50                   	push   eax
c0023e52:	53                   	push   ebx
c0023e53:	e8 7e 67 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0023e58:	83 c4 10             	add    esp,0x10
c0023e5b:	85 c0                	test   eax,eax
c0023e5d:	75 c8                	jne    c0023e27 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023e5f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e63:	83 ec 0c             	sub    esp,0xc
c0023e66:	31 ed                	xor    ebp,ebp
c0023e68:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e6c:	0f af c2             	imul   eax,edx
c0023e6f:	50                   	push   eax
c0023e70:	e8 26 26 ff ff       	call   c001649b <malloc>
c0023e75:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023e77:	89 34 24             	mov    DWORD PTR [esp],esi
c0023e7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023e7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023e82:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023e86:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023e8a:	0f af c2             	imul   eax,edx
c0023e8d:	99                   	cdq    
c0023e8e:	52                   	push   edx
c0023e8f:	50                   	push   eax
c0023e90:	53                   	push   ebx
c0023e91:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023e94:	83 c4 20             	add    esp,0x20
c0023e97:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023e9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023ea7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023eaf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023eb7:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023ebb:	0f b7 f5             	movzx  esi,bp
c0023ebe:	0f 83 a7 00 00 00    	jae    c0023f6b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023ec4:	6b f6 28             	imul   esi,esi,0x28
c0023ec7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023ecb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023ece:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023ed2:	50                   	push   eax
c0023ed3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023ed7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023edb:	8b 16                	mov    edx,DWORD PTR [esi]
c0023edd:	6b c0 28             	imul   eax,eax,0x28
c0023ee0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023ee4:	89 d0                	mov    eax,edx
c0023ee6:	31 d2                	xor    edx,edx
c0023ee8:	52                   	push   edx
c0023ee9:	50                   	push   eax
c0023eea:	53                   	push   ebx
c0023eeb:	e8 e6 66 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0023ef0:	83 c4 0c             	add    esp,0xc
c0023ef3:	6a 20                	push   0x20
c0023ef5:	6a 00                	push   0x0
c0023ef7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023efb:	52                   	push   edx
c0023efc:	e8 ef c5 fd ff       	call   c00004f0 <memset>
c0023f01:	58                   	pop    eax
c0023f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023f04:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023f08:	51                   	push   ecx
c0023f09:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023f0d:	52                   	push   edx
c0023f0e:	6a 00                	push   0x0
c0023f10:	6a 1f                	push   0x1f
c0023f12:	53                   	push   ebx
c0023f13:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023f16:	83 c4 18             	add    esp,0x18
c0023f19:	68 cb 2d 03 c0       	push   0xc0032dcb
c0023f1e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023f22:	52                   	push   edx
c0023f23:	e8 58 c8 fd ff       	call   c0000780 <strcmp>
c0023f28:	83 c4 10             	add    esp,0x10
c0023f2b:	85 c0                	test   eax,eax
c0023f2d:	75 0f                	jne    c0023f3e <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023f2f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023f32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023f3e:	50                   	push   eax
c0023f3f:	50                   	push   eax
c0023f40:	68 d3 2d 03 c0       	push   0xc0032dd3
c0023f45:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023f49:	50                   	push   eax
c0023f4a:	e8 31 c8 fd ff       	call   c0000780 <strcmp>
c0023f4f:	83 c4 10             	add    esp,0x10
c0023f52:	85 c0                	test   eax,eax
c0023f54:	75 0f                	jne    c0023f65 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023f56:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023f59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023f5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023f65:	45                   	inc    ebp
c0023f66:	e9 4c ff ff ff       	jmp    c0023eb7 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023f6b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023f70:	75 10                	jne    c0023f82 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023f72:	83 ec 0c             	sub    esp,0xc
c0023f75:	68 db 2d 03 c0       	push   0xc0032ddb
c0023f7a:	e8 eb c2 ff ff       	call   c002026a <KePanic(char const*)>
c0023f7f:	83 c4 10             	add    esp,0x10
c0023f82:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023f87:	75 10                	jne    c0023f99 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023f89:	83 ec 0c             	sub    esp,0xc
c0023f8c:	68 db 2d 03 c0       	push   0xc0032ddb
c0023f91:	e8 d4 c2 ff ff       	call   c002026a <KePanic(char const*)>
c0023f96:	83 c4 10             	add    esp,0x10
c0023f99:	50                   	push   eax
c0023f9a:	31 d2                	xor    edx,edx
c0023f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023fa0:	52                   	push   edx
c0023fa1:	50                   	push   eax
c0023fa2:	53                   	push   ebx
c0023fa3:	e8 2e 66 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0023fa8:	5a                   	pop    edx
c0023fa9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023fad:	e8 e9 24 ff ff       	call   c001649b <malloc>
c0023fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023fb6:	31 c9                	xor    ecx,ecx
c0023fb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023fbc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fbe:	5e                   	pop    esi
c0023fbf:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023fc3:	55                   	push   ebp
c0023fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023fc8:	51                   	push   ecx
c0023fc9:	52                   	push   edx
c0023fca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023fce:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023fd2:	53                   	push   ebx
c0023fd3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fd6:	83 c4 14             	add    esp,0x14
c0023fd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023fdd:	e8 b9 24 ff ff       	call   c001649b <malloc>
c0023fe2:	89 c6                	mov    esi,eax
c0023fe4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023fe6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023fe9:	56                   	push   esi
c0023fea:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023fee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023ff2:	51                   	push   ecx
c0023ff3:	52                   	push   edx
c0023ff4:	53                   	push   ebx
c0023ff5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ff8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ffc:	83 c4 1c             	add    esp,0x1c
c0023fff:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0024005:	c1 e8 04             	shr    eax,0x4
c0024008:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c002400f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024013:	31 d2                	xor    edx,edx
c0024015:	52                   	push   edx
c0024016:	50                   	push   eax
c0024017:	53                   	push   ebx
c0024018:	e8 b9 65 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c002401d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002401f:	31 d2                	xor    edx,edx
c0024021:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024024:	56                   	push   esi
c0024025:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024029:	52                   	push   edx
c002402a:	50                   	push   eax
c002402b:	53                   	push   ebx
c002402c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002402f:	83 c4 14             	add    esp,0x14
c0024032:	53                   	push   ebx
c0024033:	e8 3e 65 ff ff       	call   c001a576 <File::close()>
c0024038:	5d                   	pop    ebp
c0024039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002403d:	e8 79 24 ff ff       	call   c00164bb <free>
c0024042:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024045:	e8 71 24 ff ff       	call   c00164bb <free>
c002404a:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c002404f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024053:	83 c4 10             	add    esp,0x10
c0024056:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c002405d:	8d 50 01             	lea    edx,[eax+0x1]
c0024060:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0024067:	b0 01                	mov    al,0x1
c0024069:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c002406f:	83 c4 5c             	add    esp,0x5c
c0024072:	5b                   	pop    ebx
c0024073:	5e                   	pop    esi
c0024074:	5f                   	pop    edi
c0024075:	5d                   	pop    ebp
c0024076:	c3                   	ret    

c0024077 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0024077:	55                   	push   ebp
c0024078:	57                   	push   edi
c0024079:	56                   	push   esi
c002407a:	53                   	push   ebx
c002407b:	81 ec 68 03 00 00    	sub    esp,0x368
c0024081:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0024088:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c002408e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0024092:	68 14 01 00 00       	push   0x114
c0024097:	e8 ff 23 ff ff       	call   c001649b <malloc>
c002409c:	83 c4 0c             	add    esp,0xc
c002409f:	56                   	push   esi
c00240a0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00240a7:	50                   	push   eax
c00240a8:	89 c3                	mov    ebx,eax
c00240aa:	e8 4b 64 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c00240af:	5f                   	pop    edi
c00240b0:	5d                   	pop    ebp
c00240b1:	6a 01                	push   0x1
c00240b3:	53                   	push   ebx
c00240b4:	e8 5f 64 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c00240b9:	83 c4 10             	add    esp,0x10
c00240bc:	85 c0                	test   eax,eax
c00240be:	0f 85 b3 06 00 00    	jne    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240c4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00240cc:	83 ec 0c             	sub    esp,0xc
c00240cf:	6a 34                	push   0x34
c00240d1:	e8 c5 23 ff ff       	call   c001649b <malloc>
c00240d6:	5e                   	pop    esi
c00240d7:	8d 74 24 54          	lea    esi,[esp+0x54]
c00240db:	89 c5                	mov    ebp,eax
c00240dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00240df:	56                   	push   esi
c00240e0:	55                   	push   ebp
c00240e1:	6a 00                	push   0x0
c00240e3:	6a 34                	push   0x34
c00240e5:	53                   	push   ebx
c00240e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00240e9:	83 c4 20             	add    esp,0x20
c00240ec:	85 c0                	test   eax,eax
c00240ee:	0f 85 83 06 00 00    	jne    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240f4:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c00240fb:	0f 85 76 06 00 00    	jne    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024101:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0024104:	85 c0                	test   eax,eax
c0024106:	0f 84 6b 06 00 00    	je     c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002410c:	31 d2                	xor    edx,edx
c002410e:	51                   	push   ecx
c002410f:	52                   	push   edx
c0024110:	50                   	push   eax
c0024111:	53                   	push   ebx
c0024112:	e8 bf 64 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0024117:	83 c4 10             	add    esp,0x10
c002411a:	85 c0                	test   eax,eax
c002411c:	0f 85 55 06 00 00    	jne    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024122:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024125:	83 ec 0c             	sub    esp,0xc
c0024128:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c002412c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024130:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024134:	0f af c2             	imul   eax,edx
c0024137:	50                   	push   eax
c0024138:	e8 5e 23 ff ff       	call   c001649b <malloc>
c002413d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002413f:	89 34 24             	mov    DWORD PTR [esp],esi
c0024142:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024146:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002414a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c002414e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024152:	0f af c2             	imul   eax,edx
c0024155:	99                   	cdq    
c0024156:	52                   	push   edx
c0024157:	50                   	push   eax
c0024158:	53                   	push   ebx
c0024159:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002415c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c002415f:	83 c4 20             	add    esp,0x20
c0024162:	85 c0                	test   eax,eax
c0024164:	0f 84 0d 06 00 00    	je     c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002416a:	52                   	push   edx
c002416b:	31 d2                	xor    edx,edx
c002416d:	52                   	push   edx
c002416e:	50                   	push   eax
c002416f:	53                   	push   ebx
c0024170:	e8 61 64 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0024175:	83 c4 10             	add    esp,0x10
c0024178:	85 c0                	test   eax,eax
c002417a:	0f 85 f7 05 00 00    	jne    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024180:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024184:	83 ec 0c             	sub    esp,0xc
c0024187:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c002418b:	0f af c2             	imul   eax,edx
c002418e:	50                   	push   eax
c002418f:	e8 07 23 ff ff       	call   c001649b <malloc>
c0024194:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024196:	89 34 24             	mov    DWORD PTR [esp],esi
c0024199:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002419d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241a1:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00241a5:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00241a9:	0f af c2             	imul   eax,edx
c00241ac:	99                   	cdq    
c00241ad:	52                   	push   edx
c00241ae:	50                   	push   eax
c00241af:	53                   	push   ebx
c00241b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00241b3:	83 c4 20             	add    esp,0x20
c00241b6:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00241bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00241bf:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c00241c3:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c00241c7:	73 78                	jae    c0024241 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c00241c9:	c1 e7 05             	shl    edi,0x5
c00241cc:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00241d0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00241d3:	75 63                	jne    c0024238 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00241d5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00241d8:	31 d2                	xor    edx,edx
c00241da:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00241dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00241e1:	50                   	push   eax
c00241e2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00241e5:	52                   	push   edx
c00241e6:	50                   	push   eax
c00241e7:	53                   	push   ebx
c00241e8:	e8 e9 63 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c00241ed:	83 c4 10             	add    esp,0x10
c00241f0:	85 c0                	test   eax,eax
c00241f2:	0f 85 7f 05 00 00    	jne    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00241f8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00241ff:	83 ec 0c             	sub    esp,0xc
c0024202:	31 d2                	xor    edx,edx
c0024204:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0024208:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002420a:	01 c6                	add    esi,eax
c002420c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024213:	50                   	push   eax
c0024214:	56                   	push   esi
c0024215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024219:	52                   	push   edx
c002421a:	50                   	push   eax
c002421b:	53                   	push   ebx
c002421c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002421f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024222:	83 c4 1c             	add    esp,0x1c
c0024225:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0024228:	50                   	push   eax
c0024229:	6a 00                	push   0x0
c002422b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c002422f:	56                   	push   esi
c0024230:	e8 bb c2 fd ff       	call   c00004f0 <memset>
c0024235:	83 c4 10             	add    esp,0x10
c0024238:	66 ff 04 24          	inc    WORD PTR [esp]
c002423c:	e9 7b ff ff ff       	jmp    c00241bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0024241:	50                   	push   eax
c0024242:	68 00 01 00 00       	push   0x100
c0024247:	6a 00                	push   0x0
c0024249:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002424d:	50                   	push   eax
c002424e:	e8 9d c2 fd ff       	call   c00004f0 <memset>
c0024253:	83 c4 0c             	add    esp,0xc
c0024256:	68 00 01 00 00       	push   0x100
c002425b:	6a 00                	push   0x0
c002425d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024264:	50                   	push   eax
c0024265:	e8 86 c2 fd ff       	call   c00004f0 <memset>
c002426a:	83 c4 10             	add    esp,0x10
c002426d:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0024274:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002427b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024283:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002428b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024293:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002429b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002429f:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c00242a3:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00242a8:	0f 83 16 01 00 00    	jae    c00243c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c00242ae:	6b ff 28             	imul   edi,edi,0x28
c00242b1:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c00242b5:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c00242b8:	51                   	push   ecx
c00242b9:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c00242bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00242c1:	8b 07                	mov    eax,DWORD PTR [edi]
c00242c3:	6b d2 28             	imul   edx,edx,0x28
c00242c6:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00242ca:	31 d2                	xor    edx,edx
c00242cc:	52                   	push   edx
c00242cd:	50                   	push   eax
c00242ce:	53                   	push   ebx
c00242cf:	e8 02 63 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c00242d4:	83 c4 0c             	add    esp,0xc
c00242d7:	6a 20                	push   0x20
c00242d9:	6a 00                	push   0x0
c00242db:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00242e2:	51                   	push   ecx
c00242e3:	e8 08 c2 fd ff       	call   c00004f0 <memset>
c00242e8:	58                   	pop    eax
c00242e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00242eb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00242ef:	52                   	push   edx
c00242f0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00242f7:	51                   	push   ecx
c00242f8:	6a 00                	push   0x0
c00242fa:	6a 1f                	push   0x1f
c00242fc:	53                   	push   ebx
c00242fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0024300:	83 c4 1c             	add    esp,0x1c
c0024303:	6a 09                	push   0x9
c0024305:	68 f5 2d 03 c0       	push   0xc0032df5
c002430a:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024311:	51                   	push   ecx
c0024312:	e8 69 c0 fd ff       	call   c0000380 <memcmp>
c0024317:	83 c4 10             	add    esp,0x10
c002431a:	85 c0                	test   eax,eax
c002431c:	75 1a                	jne    c0024338 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c002431e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024321:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0024324:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c0024328:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c002432b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024332:	89 d0                	mov    eax,edx
c0024334:	40                   	inc    eax
c0024335:	89 04 24             	mov    DWORD PTR [esp],eax
c0024338:	52                   	push   edx
c0024339:	6a 09                	push   0x9
c002433b:	68 ff 2d 03 c0       	push   0xc0032dff
c0024340:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024347:	50                   	push   eax
c0024348:	e8 33 c0 fd ff       	call   c0000380 <memcmp>
c002434d:	83 c4 10             	add    esp,0x10
c0024350:	85 c0                	test   eax,eax
c0024352:	75 1a                	jne    c002436e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0024354:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024357:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002435a:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c002435e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024361:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0024368:	89 c8                	mov    eax,ecx
c002436a:	40                   	inc    eax
c002436b:	89 04 24             	mov    DWORD PTR [esp],eax
c002436e:	50                   	push   eax
c002436f:	50                   	push   eax
c0024370:	68 cb 2d 03 c0       	push   0xc0032dcb
c0024375:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002437c:	50                   	push   eax
c002437d:	e8 fe c3 fd ff       	call   c0000780 <strcmp>
c0024382:	83 c4 10             	add    esp,0x10
c0024385:	85 c0                	test   eax,eax
c0024387:	75 0b                	jne    c0024394 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0024389:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c002438d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024390:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024394:	50                   	push   eax
c0024395:	50                   	push   eax
c0024396:	68 d3 2d 03 c0       	push   0xc0032dd3
c002439b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00243a2:	50                   	push   eax
c00243a3:	e8 d8 c3 fd ff       	call   c0000780 <strcmp>
c00243a8:	83 c4 10             	add    esp,0x10
c00243ab:	85 c0                	test   eax,eax
c00243ad:	75 0b                	jne    c00243ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c00243af:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c00243b3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00243b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00243ba:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c00243bf:	e9 d7 fe ff ff       	jmp    c002429b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c00243c4:	50                   	push   eax
c00243c5:	31 d2                	xor    edx,edx
c00243c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00243cb:	52                   	push   edx
c00243cc:	50                   	push   eax
c00243cd:	53                   	push   ebx
c00243ce:	e8 03 62 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c00243d3:	58                   	pop    eax
c00243d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00243d8:	e8 be 20 ff ff       	call   c001649b <malloc>
c00243dd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00243df:	31 d2                	xor    edx,edx
c00243e1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00243e5:	58                   	pop    eax
c00243e6:	8d 74 24 54          	lea    esi,[esp+0x54]
c00243ea:	56                   	push   esi
c00243eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00243ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243f3:	52                   	push   edx
c00243f4:	50                   	push   eax
c00243f5:	53                   	push   ebx
c00243f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00243f9:	83 c4 14             	add    esp,0x14
c00243fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024400:	e8 96 20 ff ff       	call   c001649b <malloc>
c0024405:	31 d2                	xor    edx,edx
c0024407:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002440b:	83 c4 0c             	add    esp,0xc
c002440e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024412:	52                   	push   edx
c0024413:	50                   	push   eax
c0024414:	53                   	push   ebx
c0024415:	e8 bc 61 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c002441a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002441c:	31 d2                	xor    edx,edx
c002441e:	89 34 24             	mov    DWORD PTR [esp],esi
c0024421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024425:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024429:	52                   	push   edx
c002442a:	50                   	push   eax
c002442b:	53                   	push   ebx
c002442c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002442f:	83 c4 20             	add    esp,0x20
c0024432:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0024437:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002443f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024443:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024447:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002444a:	0f 84 2b 03 00 00    	je     c002477b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0024450:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0024457:	31 d2                	xor    edx,edx
c0024459:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002445d:	c1 e8 03             	shr    eax,0x3
c0024460:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0024464:	51                   	push   ecx
c0024465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024469:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002446d:	52                   	push   edx
c002446e:	50                   	push   eax
c002446f:	53                   	push   ebx
c0024470:	e8 61 61 ff ff       	call   c001a5d6 <File::seek(unsigned long long)>
c0024475:	5e                   	pop    esi
c0024476:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002447a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024481:	e8 15 20 ff ff       	call   c001649b <malloc>
c0024486:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024488:	31 d2                	xor    edx,edx
c002448a:	89 c7                	mov    edi,eax
c002448c:	58                   	pop    eax
c002448d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024491:	50                   	push   eax
c0024492:	57                   	push   edi
c0024493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024497:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002449e:	52                   	push   edx
c002449f:	50                   	push   eax
c00244a0:	53                   	push   ebx
c00244a1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00244a4:	83 c4 20             	add    esp,0x20
c00244a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00244af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00244b3:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00244b7:	0f 8d a5 02 00 00    	jge    c0024762 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c00244bd:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00244c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244c6:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c00244c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00244cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00244d1:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00244d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00244d9:	c1 e8 08             	shr    eax,0x8
c00244dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00244e0:	89 c2                	mov    edx,eax
c00244e2:	c1 e2 04             	shl    edx,0x4
c00244e5:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00244e9:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00244ec:	85 f6                	test   esi,esi
c00244ee:	0f 85 cf 00 00 00    	jne    c00245c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00244f4:	83 ec 0c             	sub    esp,0xc
c00244f7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00244fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00244ff:	03 02                	add    eax,DWORD PTR [edx]
c0024501:	50                   	push   eax
c0024502:	e8 63 f8 ff ff       	call   c0023d6a <Thr::getAddressOfKernelSymbol(char const*)>
c0024507:	83 c4 10             	add    esp,0x10
c002450a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002450e:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0024513:	85 c0                	test   eax,eax
c0024515:	89 c6                	mov    esi,eax
c0024517:	0f 85 a6 00 00 00    	jne    c00245c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c002451d:	83 ec 0c             	sub    esp,0xc
c0024520:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0024524:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024528:	03 02                	add    eax,DWORD PTR [edx]
c002452a:	50                   	push   eax
c002452b:	e8 24 bf ff ff       	call   c0020454 <KeResolveCompatibilitySymbol(char*)>
c0024530:	83 c4 10             	add    esp,0x10
c0024533:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024537:	85 c0                	test   eax,eax
c0024539:	89 c6                	mov    esi,eax
c002453b:	0f 85 82 00 00 00    	jne    c00245c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024541:	50                   	push   eax
c0024542:	50                   	push   eax
c0024543:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024547:	03 02                	add    eax,DWORD PTR [edx]
c0024549:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002454d:	50                   	push   eax
c002454e:	68 09 2e 03 c0       	push   0xc0032e09
c0024553:	e8 8a 4d ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0024558:	58                   	pop    eax
c0024559:	5a                   	pop    edx
c002455a:	68 23 2e 03 c0       	push   0xc0032e23
c002455f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024566:	51                   	push   ecx
c0024567:	e8 e4 c0 fd ff       	call   c0000650 <strcpy>
c002456c:	59                   	pop    ecx
c002456d:	58                   	pop    eax
c002456e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024572:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024576:	03 02                	add    eax,DWORD PTR [edx]
c0024578:	50                   	push   eax
c0024579:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024580:	51                   	push   ecx
c0024581:	e8 ea c2 fd ff       	call   c0000870 <strcat>
c0024586:	58                   	pop    eax
c0024587:	5a                   	pop    edx
c0024588:	68 bd 2e 03 c0       	push   0xc0032ebd
c002458d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024594:	51                   	push   ecx
c0024595:	e8 d6 c2 fd ff       	call   c0000870 <strcat>
c002459a:	83 c4 10             	add    esp,0x10
c002459d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00245a2:	0f 84 77 01 00 00    	je     c002471f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00245a8:	83 ec 0c             	sub    esp,0xc
c00245ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00245b2:	51                   	push   ecx
c00245b3:	e8 b2 bc ff ff       	call   c002026a <KePanic(char const*)>
c00245b8:	83 c4 10             	add    esp,0x10
c00245bb:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00245bf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00245c3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00245c8:	83 f8 01             	cmp    eax,0x1
c00245cb:	0f 85 9b 00 00 00    	jne    c002466c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00245d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00245d5:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00245dc:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00245e0:	01 d0                	add    eax,edx
c00245e2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00245ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00245ee:	0f 94 c0             	sete   al
c00245f1:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00245f9:	0f 94 c1             	sete   cl
c00245fc:	09 c1                	or     ecx,eax
c00245fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024602:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0024607:	0f b6 c9             	movzx  ecx,cl
c002460a:	8b 00                	mov    eax,DWORD PTR [eax]
c002460c:	74 41                	je     c002464f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c002460e:	8d 14 06             	lea    edx,[esi+eax*1]
c0024611:	85 c9                	test   ecx,ecx
c0024613:	75 15                	jne    c002462a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0024615:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024619:	66 83 f8 0c          	cmp    ax,0xc
c002461d:	76 05                	jbe    c0024624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c002461f:	b8 0c 00 00 00       	mov    eax,0xc
c0024624:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0024628:	76 37                	jbe    c0024661 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002462a:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c002462f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024633:	0f 84 e6 00 00 00    	je     c002471f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024639:	83 ec 0c             	sub    esp,0xc
c002463c:	68 3a 2e 03 c0       	push   0xc0032e3a
c0024641:	e8 24 bc ff ff       	call   c002026a <KePanic(char const*)>
c0024646:	83 c4 10             	add    esp,0x10
c0024649:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002464d:	eb 12                	jmp    c0024661 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002464f:	01 c2                	add    edx,eax
c0024651:	85 c9                	test   ecx,ecx
c0024653:	75 0c                	jne    c0024661 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024655:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024659:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c002465d:	77 02                	ja     c0024661 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002465f:	01 f2                	add    edx,esi
c0024661:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024665:	89 10                	mov    DWORD PTR [eax],edx
c0024667:	e9 ed 00 00 00       	jmp    c0024759 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002466c:	83 f8 02             	cmp    eax,0x2
c002466f:	0f 85 81 00 00 00    	jne    c00246f6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0024675:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002467c:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0024680:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0024684:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c002468c:	74 21                	je     c00246af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c002468e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0024696:	74 17                	je     c00246af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024698:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c002469c:	ba 0a 00 00 00       	mov    edx,0xa
c00246a1:	83 f9 0e             	cmp    ecx,0xe
c00246a4:	77 03                	ja     c00246a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c00246a6:	8d 51 fc             	lea    edx,[ecx-0x4]
c00246a9:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c00246ad:	76 1f                	jbe    c00246ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c00246af:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00246b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00246b8:	74 65                	je     c002471f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00246ba:	83 ec 0c             	sub    esp,0xc
c00246bd:	68 56 2e 03 c0       	push   0xc0032e56
c00246c2:	e8 a3 bb ff ff       	call   c002026a <KePanic(char const*)>
c00246c7:	83 c4 10             	add    esp,0x10
c00246ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246ce:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00246d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00246d5:	74 15                	je     c00246ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00246d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00246db:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00246e2:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00246e6:	01 d1                	add    ecx,edx
c00246e8:	01 ce                	add    esi,ecx
c00246ea:	eb 06                	jmp    c00246f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00246ec:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00246f0:	01 d6                	add    esi,edx
c00246f2:	89 30                	mov    DWORD PTR [eax],esi
c00246f4:	eb 63                	jmp    c0024759 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00246f6:	56                   	push   esi
c00246f7:	56                   	push   esi
c00246f8:	50                   	push   eax
c00246f9:	68 72 2e 03 c0       	push   0xc0032e72
c00246fe:	e8 df 4b ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0024703:	83 c4 10             	add    esp,0x10
c0024706:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c002470b:	74 12                	je     c002471f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c002470d:	83 ec 0c             	sub    esp,0xc
c0024710:	68 7d 2e 03 c0       	push   0xc0032e7d
c0024715:	e8 50 bb ff ff       	call   c002026a <KePanic(char const*)>
c002471a:	83 c4 10             	add    esp,0x10
c002471d:	eb 3a                	jmp    c0024759 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002471f:	83 ec 0c             	sub    esp,0xc
c0024722:	53                   	push   ebx
c0024723:	e8 4e 5e ff ff       	call   c001a576 <File::close()>
c0024728:	8b 03                	mov    eax,DWORD PTR [ebx]
c002472a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002472d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024730:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024733:	e8 83 1d ff ff       	call   c00164bb <free>
c0024738:	59                   	pop    ecx
c0024739:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002473d:	e8 79 1d ff ff       	call   c00164bb <free>
c0024742:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024745:	e8 71 1d ff ff       	call   c00164bb <free>
c002474a:	5b                   	pop    ebx
c002474b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002474f:	e8 67 1d ff ff       	call   c00164bb <free>
c0024754:	83 c4 10             	add    esp,0x10
c0024757:	eb 1e                	jmp    c0024777 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024759:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c002475d:	e9 4d fd ff ff       	jmp    c00244af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0024762:	83 ec 0c             	sub    esp,0xc
c0024765:	57                   	push   edi
c0024766:	e8 50 1d ff ff       	call   c00164bb <free>
c002476b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c002476f:	83 c4 10             	add    esp,0x10
c0024772:	e9 cc fc ff ff       	jmp    c0024443 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0024777:	31 c0                	xor    eax,eax
c0024779:	eb 32                	jmp    c00247ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c002477b:	83 ec 0c             	sub    esp,0xc
c002477e:	53                   	push   ebx
c002477f:	e8 f2 5d ff ff       	call   c001a576 <File::close()>
c0024784:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024786:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024789:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002478c:	58                   	pop    eax
c002478d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024791:	e8 25 1d ff ff       	call   c00164bb <free>
c0024796:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024799:	e8 1d 1d ff ff       	call   c00164bb <free>
c002479e:	5a                   	pop    edx
c002479f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00247a3:	e8 13 1d ff ff       	call   c00164bb <free>
c00247a8:	83 c4 10             	add    esp,0x10
c00247ab:	b0 01                	mov    al,0x1
c00247ad:	81 c4 5c 03 00 00    	add    esp,0x35c
c00247b3:	5b                   	pop    ebx
c00247b4:	5e                   	pop    esi
c00247b5:	5f                   	pop    edi
c00247b6:	5d                   	pop    ebp
c00247b7:	c3                   	ret    

c00247b8 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00247b8:	56                   	push   esi
c00247b9:	31 d2                	xor    edx,edx
c00247bb:	53                   	push   ebx
c00247bc:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00247c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00247c6:	39 d3                	cmp    ebx,edx
c00247c8:	7e 1b                	jle    c00247e5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00247ca:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c00247d1:	39 c8                	cmp    eax,ecx
c00247d3:	77 0d                	ja     c00247e2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00247d5:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00247dc:	01 c6                	add    esi,eax
c00247de:	39 ce                	cmp    esi,ecx
c00247e0:	77 05                	ja     c00247e7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00247e2:	42                   	inc    edx
c00247e3:	eb e1                	jmp    c00247c6 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00247e5:	31 c0                	xor    eax,eax
c00247e7:	5b                   	pop    ebx
c00247e8:	5e                   	pop    esi
c00247e9:	c3                   	ret    

c00247ea <Thr::getDriverNameFromAddress(unsigned long)>:
c00247ea:	53                   	push   ebx
c00247eb:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00247f1:	31 c0                	xor    eax,eax
c00247f3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00247f7:	39 c3                	cmp    ebx,eax
c00247f9:	7e 22                	jle    c002481d <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00247fb:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c0024802:	39 ca                	cmp    edx,ecx
c0024804:	77 14                	ja     c002481a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024806:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c002480d:	39 ca                	cmp    edx,ecx
c002480f:	76 09                	jbe    c002481a <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0024811:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c0024818:	eb 05                	jmp    c002481f <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c002481a:	40                   	inc    eax
c002481b:	eb da                	jmp    c00247f7 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c002481d:	31 c0                	xor    eax,eax
c002481f:	5b                   	pop    ebx
c0024820:	c3                   	ret    

c0024821 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0024821:	53                   	push   ebx
c0024822:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0024826:	53                   	push   ebx
c0024827:	e8 8c ff ff ff       	call   c00247b8 <Thr::getDriverBaseFromAddress(unsigned long)>
c002482c:	5a                   	pop    edx
c002482d:	31 d2                	xor    edx,edx
c002482f:	85 c0                	test   eax,eax
c0024831:	74 04                	je     c0024837 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024833:	89 da                	mov    edx,ebx
c0024835:	29 c2                	sub    edx,eax
c0024837:	5b                   	pop    ebx
c0024838:	89 d0                	mov    eax,edx
c002483a:	c3                   	ret    

c002483b <Thr::loadDLL(char const*, bool)>:
c002483b:	55                   	push   ebp
c002483c:	57                   	push   edi
c002483d:	56                   	push   esi
c002483e:	53                   	push   ebx
c002483f:	81 ec 34 01 00 00    	sub    esp,0x134
c0024845:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c002484c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0024853:	56                   	push   esi
c0024854:	68 95 2e 03 c0       	push   0xc0032e95
c0024859:	e8 84 4a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002485e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024865:	e8 31 1c ff ff       	call   c001649b <malloc>
c002486a:	83 c4 0c             	add    esp,0xc
c002486d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024873:	56                   	push   esi
c0024874:	50                   	push   eax
c0024875:	89 c3                	mov    ebx,eax
c0024877:	e8 7e 5c ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c002487c:	83 c4 10             	add    esp,0x10
c002487f:	85 db                	test   ebx,ebx
c0024881:	75 3c                	jne    c00248bf <Thr::loadDLL(char const*, bool)+0x84>
c0024883:	89 e8                	mov    eax,ebp
c0024885:	84 c0                	test   al,al
c0024887:	0f 84 02 02 00 00    	je     c0024a8f <Thr::loadDLL(char const*, bool)+0x254>
c002488d:	50                   	push   eax
c002488e:	50                   	push   eax
c002488f:	68 a6 2e 03 c0       	push   0xc0032ea6
c0024894:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024898:	57                   	push   edi
c0024899:	e8 b2 bd fd ff       	call   c0000650 <strcpy>
c002489e:	58                   	pop    eax
c002489f:	5a                   	pop    edx
c00248a0:	56                   	push   esi
c00248a1:	57                   	push   edi
c00248a2:	e8 c9 bf fd ff       	call   c0000870 <strcat>
c00248a7:	59                   	pop    ecx
c00248a8:	58                   	pop    eax
c00248a9:	68 bd 2e 03 c0       	push   0xc0032ebd
c00248ae:	57                   	push   edi
c00248af:	e8 bc bf fd ff       	call   c0000870 <strcat>
c00248b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00248b7:	e8 ae b9 ff ff       	call   c002026a <KePanic(char const*)>
c00248bc:	83 c4 10             	add    esp,0x10
c00248bf:	50                   	push   eax
c00248c0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00248c4:	50                   	push   eax
c00248c5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00248c9:	50                   	push   eax
c00248ca:	53                   	push   ebx
c00248cb:	e8 4a 5f ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c00248d0:	83 c4 10             	add    esp,0x10
c00248d3:	85 db                	test   ebx,ebx
c00248d5:	89 c7                	mov    edi,eax
c00248d7:	74 0c                	je     c00248e5 <Thr::loadDLL(char const*, bool)+0xaa>
c00248d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00248db:	83 ec 0c             	sub    esp,0xc
c00248de:	53                   	push   ebx
c00248df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00248e2:	83 c4 10             	add    esp,0x10
c00248e5:	83 ec 0c             	sub    esp,0xc
c00248e8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00248ed:	50                   	push   eax
c00248ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00248f6:	57                   	push   edi
c00248f7:	68 bf 2e 03 c0       	push   0xc0032ebf
c00248fc:	e8 e1 49 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0024901:	83 c4 20             	add    esp,0x20
c0024904:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0024909:	75 0a                	jne    c0024915 <Thr::loadDLL(char const*, bool)+0xda>
c002490b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002490f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0024913:	75 3e                	jne    c0024953 <Thr::loadDLL(char const*, bool)+0x118>
c0024915:	89 e8                	mov    eax,ebp
c0024917:	31 db                	xor    ebx,ebx
c0024919:	84 c0                	test   al,al
c002491b:	0f 84 6e 01 00 00    	je     c0024a8f <Thr::loadDLL(char const*, bool)+0x254>
c0024921:	50                   	push   eax
c0024922:	50                   	push   eax
c0024923:	68 e0 2e 03 c0       	push   0xc0032ee0
c0024928:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c002492c:	53                   	push   ebx
c002492d:	e8 1e bd fd ff       	call   c0000650 <strcpy>
c0024932:	58                   	pop    eax
c0024933:	5a                   	pop    edx
c0024934:	56                   	push   esi
c0024935:	53                   	push   ebx
c0024936:	e8 35 bf fd ff       	call   c0000870 <strcat>
c002493b:	59                   	pop    ecx
c002493c:	5f                   	pop    edi
c002493d:	68 bd 2e 03 c0       	push   0xc0032ebd
c0024942:	53                   	push   ebx
c0024943:	e8 28 bf fd ff       	call   c0000870 <strcat>
c0024948:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002494b:	e8 1a b9 ff ff       	call   c002026a <KePanic(char const*)>
c0024950:	83 c4 10             	add    esp,0x10
c0024953:	53                   	push   ebx
c0024954:	6a 03                	push   0x3
c0024956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002495a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002495e:	05 ff 0f 00 00       	add    eax,0xfff
c0024963:	83 d2 00             	adc    edx,0x0
c0024966:	0f ac d0 0c          	shrd   eax,edx,0xc
c002496a:	50                   	push   eax
c002496b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024971:	e8 68 3e ff ff       	call   c00187de <VAS::allocatePages(int, int)>
c0024976:	89 c3                	mov    ebx,eax
c0024978:	58                   	pop    eax
c0024979:	5a                   	pop    edx
c002497a:	53                   	push   ebx
c002497b:	68 0e 13 03 c0       	push   0xc003130e
c0024980:	e8 5d 49 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0024985:	89 34 24             	mov    DWORD PTR [esp],esi
c0024988:	e8 f3 bb fd ff       	call   c0000580 <strlen>
c002498d:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c0024993:	40                   	inc    eax
c0024994:	89 04 24             	mov    DWORD PTR [esp],eax
c0024997:	e8 ff 1a ff ff       	call   c001649b <malloc>
c002499c:	59                   	pop    ecx
c002499d:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c00249a4:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c00249a9:	5f                   	pop    edi
c00249aa:	56                   	push   esi
c00249ab:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c00249b2:	e8 99 bc fd ff       	call   c0000650 <strcpy>
c00249b7:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c00249bc:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c00249c3:	8d 50 01             	lea    edx,[eax+0x1]
c00249c6:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c00249cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00249d0:	83 c4 0c             	add    esp,0xc
c00249d3:	6a 01                	push   0x1
c00249d5:	53                   	push   ebx
c00249d6:	56                   	push   esi
c00249d7:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c00249de:	e8 94 f6 ff ff       	call   c0024077 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00249e3:	83 c4 10             	add    esp,0x10
c00249e6:	89 c7                	mov    edi,eax
c00249e8:	89 f8                	mov    eax,edi
c00249ea:	83 f0 01             	xor    eax,0x1
c00249ed:	84 c0                	test   al,al
c00249ef:	74 18                	je     c0024a09 <Thr::loadDLL(char const*, bool)+0x1ce>
c00249f1:	89 e8                	mov    eax,ebp
c00249f3:	84 c0                	test   al,al
c00249f5:	74 12                	je     c0024a09 <Thr::loadDLL(char const*, bool)+0x1ce>
c00249f7:	83 ec 0c             	sub    esp,0xc
c00249fa:	68 f9 2e 03 c0       	push   0xc0032ef9
c00249ff:	e8 66 b8 ff ff       	call   c002026a <KePanic(char const*)>
c0024a04:	83 c4 10             	add    esp,0x10
c0024a07:	eb 06                	jmp    c0024a0f <Thr::loadDLL(char const*, bool)+0x1d4>
c0024a09:	89 f8                	mov    eax,edi
c0024a0b:	84 c0                	test   al,al
c0024a0d:	75 10                	jne    c0024a1f <Thr::loadDLL(char const*, bool)+0x1e4>
c0024a0f:	83 ec 0c             	sub    esp,0xc
c0024a12:	68 18 2f 03 c0       	push   0xc0032f18
c0024a17:	e8 4e b8 ff ff       	call   c002026a <KePanic(char const*)>
c0024a1c:	83 c4 10             	add    esp,0x10
c0024a1f:	31 f6                	xor    esi,esi
c0024a21:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a29:	05 ff 0f 00 00       	add    eax,0xfff
c0024a2e:	83 d2 00             	adc    edx,0x0
c0024a31:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024a35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a39:	c1 ea 0c             	shr    edx,0xc
c0024a3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024a40:	ba 00 00 00 00       	mov    edx,0x0
c0024a45:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024a49:	89 d0                	mov    eax,edx
c0024a4b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0024a4f:	73 32                	jae    c0024a83 <Thr::loadDLL(char const*, bool)+0x248>
c0024a51:	50                   	push   eax
c0024a52:	50                   	push   eax
c0024a53:	89 f0                	mov    eax,esi
c0024a55:	c1 e0 0c             	shl    eax,0xc
c0024a58:	01 d8                	add    eax,ebx
c0024a5a:	50                   	push   eax
c0024a5b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024a61:	e8 5c 38 ff ff       	call   c00182c2 <VAS::getPageTableEntry(unsigned long)>
c0024a66:	83 c4 10             	add    esp,0x10
c0024a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0024a6b:	a8 60                	test   al,0x60
c0024a6d:	75 11                	jne    c0024a80 <Thr::loadDLL(char const*, bool)+0x245>
c0024a6f:	83 ec 0c             	sub    esp,0xc
c0024a72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024a77:	50                   	push   eax
c0024a78:	e8 d4 1c ff ff       	call   c0016751 <Phys::freePage(unsigned long)>
c0024a7d:	83 c4 10             	add    esp,0x10
c0024a80:	46                   	inc    esi
c0024a81:	eb 9e                	jmp    c0024a21 <Thr::loadDLL(char const*, bool)+0x1e6>
c0024a83:	89 f8                	mov    eax,edi
c0024a85:	84 c0                	test   al,al
c0024a87:	b8 00 00 00 00       	mov    eax,0x0
c0024a8c:	0f 44 d8             	cmove  ebx,eax
c0024a8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024a95:	89 d8                	mov    eax,ebx
c0024a97:	5b                   	pop    ebx
c0024a98:	5e                   	pop    esi
c0024a99:	5f                   	pop    edi
c0024a9a:	5d                   	pop    ebp
c0024a9b:	c3                   	ret    

c0024a9c <Thr::executeDLL(unsigned long, void*)>:
c0024a9c:	56                   	push   esi
c0024a9d:	53                   	push   ebx
c0024a9e:	52                   	push   edx
c0024a9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024aa3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024aa7:	85 db                	test   ebx,ebx
c0024aa9:	75 10                	jne    c0024abb <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024aab:	83 ec 0c             	sub    esp,0xc
c0024aae:	68 34 2f 03 c0       	push   0xc0032f34
c0024ab3:	e8 b2 b7 ff ff       	call   c002026a <KePanic(char const*)>
c0024ab8:	83 c4 10             	add    esp,0x10
c0024abb:	50                   	push   eax
c0024abc:	50                   	push   eax
c0024abd:	53                   	push   ebx
c0024abe:	68 5e 2f 03 c0       	push   0xc0032f5e
c0024ac3:	e8 1a 48 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0024ac8:	89 d8                	mov    eax,ebx
c0024aca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024ace:	83 c4 14             	add    esp,0x14
c0024ad1:	5b                   	pop    ebx
c0024ad2:	5e                   	pop    esi
c0024ad3:	ff e0                	jmp    eax
c0024ad5:	66 90                	xchg   ax,ax
c0024ad7:	90                   	nop

c0024ad8 <userModeEntryPoint(void*)>:
c0024ad8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024add:	83 e8 01             	sub    eax,0x1
c0024ae0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024ae5:	75 01                	jne    c0024ae8 <userModeEntryPoint(void*)+0x10>
c0024ae7:	fb                   	sti    
c0024ae8:	fb                   	sti    
c0024ae9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024aee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0024af1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0024af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024afb:	e9 3f b7 fd ff       	jmp    c000023f <goToUsermode>

c0024b00 <changeTSS>:
c0024b00:	83 ec 14             	sub    esp,0x14
c0024b03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024b08:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0024b0b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0024b10:	c1 e2 15             	shl    edx,0x15
c0024b13:	29 d0                	sub    eax,edx
c0024b15:	50                   	push   eax
c0024b16:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0024b1b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024b21:	05 7c 11 00 00       	add    eax,0x117c
c0024b26:	50                   	push   eax
c0024b27:	e8 e8 2d ff ff       	call   c0017914 <TSS::setESP(unsigned long)>
c0024b2c:	83 c4 1c             	add    esp,0x1c
c0024b2f:	c3                   	ret    

c0024b30 <switchToThread(ThreadControlBlock*)>:
c0024b30:	57                   	push   edi
c0024b31:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024b37:	56                   	push   esi
c0024b38:	53                   	push   ebx
c0024b39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b3d:	85 c9                	test   ecx,ecx
c0024b3f:	0f 85 8b 00 00 00    	jne    c0024bd0 <switchToThread(ThreadControlBlock*)+0xa0>
c0024b45:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024b49:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024b4f:	74 7b                	je     c0024bcc <switchToThread(ThreadControlBlock*)+0x9c>
c0024b51:	b8 00 04 00 00       	mov    eax,0x400
c0024b56:	29 d0                	sub    eax,edx
c0024b58:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024b5b:	d1 f8                	sar    eax,1
c0024b5d:	01 d0                	add    eax,edx
c0024b5f:	90                   	nop
c0024b60:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024b63:	e8 70 25 00 00       	call   c00270d8 <HalQueryPerformanceCounter()>
c0024b68:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024b6d:	89 c6                	mov    esi,eax
c0024b6f:	89 d7                	mov    edi,edx
c0024b71:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024b77:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024b7c:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024b82:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024b88:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024b8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024b94:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024b9a:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024ba0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024ba3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024ba6:	01 c6                	add    esi,eax
c0024ba8:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024bab:	11 d7                	adc    edi,edx
c0024bad:	83 ec 0c             	sub    esp,0xc
c0024bb0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024bb3:	53                   	push   ebx
c0024bb4:	e8 be b6 fd ff       	call   c0000277 <switchToThreadASM>
c0024bb9:	0f 20 c0             	mov    eax,cr0
c0024bbc:	83 c8 08             	or     eax,0x8
c0024bbf:	0f 22 c0             	mov    cr0,eax
c0024bc2:	83 c4 10             	add    esp,0x10
c0024bc5:	5b                   	pop    ebx
c0024bc6:	5e                   	pop    esi
c0024bc7:	5f                   	pop    edi
c0024bc8:	c3                   	ret    
c0024bc9:	8d 76 00             	lea    esi,[esi+0x0]
c0024bcc:	31 c0                	xor    eax,eax
c0024bce:	eb 90                	jmp    c0024b60 <switchToThread(ThreadControlBlock*)+0x30>
c0024bd0:	5b                   	pop    ebx
c0024bd1:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024bdb:	5e                   	pop    esi
c0024bdc:	5f                   	pop    edi
c0024bdd:	c3                   	ret    
c0024bde:	66 90                	xchg   ax,ax

c0024be0 <Process::addArgs(char**)>:
c0024be0:	57                   	push   edi
c0024be1:	56                   	push   esi
c0024be2:	53                   	push   ebx
c0024be3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024be7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024beb:	85 f6                	test   esi,esi
c0024bed:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0024bf7:	74 4f                	je     c0024c48 <Process::addArgs(char**)+0x68>
c0024bf9:	8b 06                	mov    eax,DWORD PTR [esi]
c0024bfb:	85 c0                	test   eax,eax
c0024bfd:	74 49                	je     c0024c48 <Process::addArgs(char**)+0x68>
c0024bff:	31 db                	xor    ebx,ebx
c0024c01:	8d 76 00             	lea    esi,[esi+0x0]
c0024c04:	83 ec 0c             	sub    esp,0xc
c0024c07:	50                   	push   eax
c0024c08:	e8 73 b9 fd ff       	call   c0000580 <strlen>
c0024c0d:	83 c0 01             	add    eax,0x1
c0024c10:	89 04 24             	mov    DWORD PTR [esp],eax
c0024c13:	e8 83 18 ff ff       	call   c001649b <malloc>
c0024c18:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0024c1f:	5a                   	pop    edx
c0024c20:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0024c23:	83 c3 01             	add    ebx,0x1
c0024c26:	59                   	pop    ecx
c0024c27:	52                   	push   edx
c0024c28:	50                   	push   eax
c0024c29:	e8 22 ba fd ff       	call   c0000650 <strcpy>
c0024c2e:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024c34:	83 c4 10             	add    esp,0x10
c0024c37:	83 c1 01             	add    ecx,0x1
c0024c3a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0024c40:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0024c43:	85 c0                	test   eax,eax
c0024c45:	75 bd                	jne    c0024c04 <Process::addArgs(char**)+0x24>
c0024c47:	90                   	nop
c0024c48:	5b                   	pop    ebx
c0024c49:	5e                   	pop    esi
c0024c4a:	5f                   	pop    edi
c0024c4b:	c3                   	ret    

c0024c4c <Process::Process(char const*, Process*, char**)>:
c0024c4c:	56                   	push   esi
c0024c4d:	53                   	push   ebx
c0024c4e:	83 ec 14             	sub    esp,0x14
c0024c51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c55:	05 0c 02 00 00       	add    eax,0x20c
c0024c5a:	bb 07 00 00 00       	mov    ebx,0x7
c0024c5f:	89 c6                	mov    esi,eax
c0024c61:	8d 76 00             	lea    esi,[esi+0x0]
c0024c64:	85 db                	test   ebx,ebx
c0024c66:	78 14                	js     c0024c7c <Process::Process(char const*, Process*, char**)+0x30>
c0024c68:	83 ec 0c             	sub    esp,0xc
c0024c6b:	56                   	push   esi
c0024c6c:	e8 d7 a3 00 00       	call   c002f048 <ThreadControlBlock::ThreadControlBlock()>
c0024c71:	83 c4 10             	add    esp,0x10
c0024c74:	83 c6 5f             	add    esi,0x5f
c0024c77:	83 eb 01             	sub    ebx,0x1
c0024c7a:	eb e8                	jmp    c0024c64 <Process::Process(char const*, Process*, char**)+0x18>
c0024c7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c80:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c8b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024c92:	83 ec 0c             	sub    esp,0xc
c0024c95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c99:	e8 a6 b3 ff ff       	call   c0020044 <KeNewProcessEnv(Process*)>
c0024c9e:	83 c4 10             	add    esp,0x10
c0024ca1:	89 c2                	mov    edx,eax
c0024ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ca7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024cad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cb1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024cba:	a1 80 45 03 c0       	mov    eax,ds:0xc0034580
c0024cbf:	8d 50 01             	lea    edx,[eax+0x1]
c0024cc2:	89 15 80 45 03 c0    	mov    DWORD PTR ds:0xc0034580,edx
c0024cc8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024ccc:	89 02                	mov    DWORD PTR [edx],eax
c0024cce:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024cd6:	83 ec 0c             	sub    esp,0xc
c0024cd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024cdd:	e8 b9 17 ff ff       	call   c001649b <malloc>
c0024ce2:	83 c4 10             	add    esp,0x10
c0024ce5:	89 c3                	mov    ebx,eax
c0024ce7:	83 ec 08             	sub    esp,0x8
c0024cea:	6a 00                	push   0x0
c0024cec:	53                   	push   ebx
c0024ced:	e8 38 3d ff ff       	call   c0018a2a <VAS::VAS(bool)>
c0024cf2:	83 c4 10             	add    esp,0x10
c0024cf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cf9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024cff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d03:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024d0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024d15:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024d1b:	e8 77 bd ff ff       	call   c0020a97 <KeInitSignals()>
c0024d20:	89 c2                	mov    edx,eax
c0024d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d26:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024d2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d30:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d36:	85 c0                	test   eax,eax
c0024d38:	74 42                	je     c0024d7c <Process::Process(char const*, Process*, char**)+0x130>
c0024d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d3e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d44:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d4e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024d54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024d5e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024d64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d68:	05 0c 01 00 00       	add    eax,0x10c
c0024d6d:	83 ec 08             	sub    esp,0x8
c0024d70:	52                   	push   edx
c0024d71:	50                   	push   eax
c0024d72:	e8 d9 b8 fd ff       	call   c0000650 <strcpy>
c0024d77:	83 c4 10             	add    esp,0x10
c0024d7a:	eb 64                	jmp    c0024de0 <Process::Process(char const*, Process*, char**)+0x194>
c0024d7c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024d84:	83 ec 0c             	sub    esp,0xc
c0024d87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024d8b:	e8 0b 17 ff ff       	call   c001649b <malloc>
c0024d90:	83 c4 10             	add    esp,0x10
c0024d93:	89 c3                	mov    ebx,eax
c0024d95:	83 ec 08             	sub    esp,0x8
c0024d98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d9c:	53                   	push   ebx
c0024d9d:	e8 a2 28 ff ff       	call   c0017644 <VgaText::VgaText(char const*)>
c0024da2:	83 c4 10             	add    esp,0x10
c0024da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024da9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024daf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024db3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024db9:	83 ec 0c             	sub    esp,0xc
c0024dbc:	50                   	push   eax
c0024dbd:	e8 30 21 ff ff       	call   c0016ef2 <addToTerminalCycle(VgaText*)>
c0024dc2:	83 c4 10             	add    esp,0x10
c0024dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024dc9:	05 0c 01 00 00       	add    eax,0x10c
c0024dce:	83 ec 08             	sub    esp,0x8
c0024dd1:	68 7d 2f 03 c0       	push   0xc0032f7d
c0024dd6:	50                   	push   eax
c0024dd7:	e8 74 b8 fd ff       	call   c0000650 <strcpy>
c0024ddc:	83 c4 10             	add    esp,0x10
c0024ddf:	90                   	nop
c0024de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024de4:	83 c0 0c             	add    eax,0xc
c0024de7:	83 ec 08             	sub    esp,0x8
c0024dea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024dee:	50                   	push   eax
c0024def:	e8 5c b8 fd ff       	call   c0000650 <strcpy>
c0024df4:	83 c4 10             	add    esp,0x10
c0024df7:	83 ec 08             	sub    esp,0x8
c0024dfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024dfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e02:	e8 d9 fd ff ff       	call   c0024be0 <Process::addArgs(char**)>
c0024e07:	83 c4 10             	add    esp,0x10
c0024e0a:	83 ec 08             	sub    esp,0x8
c0024e0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e15:	e8 1e ed ff ff       	call   c0023b38 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024e1a:	83 c4 10             	add    esp,0x10
c0024e1d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024e21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024e25:	83 f0 01             	xor    eax,0x1
c0024e28:	88 c2                	mov    dl,al
c0024e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024e2e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024e34:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024e39:	83 ec 04             	sub    esp,0x4
c0024e3c:	50                   	push   eax
c0024e3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024e41:	68 d4 2f 03 c0       	push   0xc0032fd4
c0024e46:	e8 97 44 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0024e4b:	83 c4 10             	add    esp,0x10
c0024e4e:	90                   	nop
c0024e4f:	83 c4 14             	add    esp,0x14
c0024e52:	5b                   	pop    ebx
c0024e53:	5e                   	pop    esi
c0024e54:	c3                   	ret    
c0024e55:	90                   	nop
c0024e56:	66 90                	xchg   ax,ax

c0024e58 <Process::Process(bool, char const*, Process*, char**)>:
c0024e58:	56                   	push   esi
c0024e59:	53                   	push   ebx
c0024e5a:	83 ec 24             	sub    esp,0x24
c0024e5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024e61:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024e65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e69:	05 0c 02 00 00       	add    eax,0x20c
c0024e6e:	bb 07 00 00 00       	mov    ebx,0x7
c0024e73:	89 c6                	mov    esi,eax
c0024e75:	8d 76 00             	lea    esi,[esi+0x0]
c0024e78:	85 db                	test   ebx,ebx
c0024e7a:	78 14                	js     c0024e90 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024e7c:	83 ec 0c             	sub    esp,0xc
c0024e7f:	56                   	push   esi
c0024e80:	e8 c3 a1 00 00       	call   c002f048 <ThreadControlBlock::ThreadControlBlock()>
c0024e85:	83 c4 10             	add    esp,0x10
c0024e88:	83 c6 5f             	add    esi,0x5f
c0024e8b:	83 eb 01             	sub    ebx,0x1
c0024e8e:	eb e8                	jmp    c0024e78 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024e90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e94:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024e9b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e9f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024ea6:	83 ec 0c             	sub    esp,0xc
c0024ea9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ead:	e8 92 b1 ff ff       	call   c0020044 <KeNewProcessEnv(Process*)>
c0024eb2:	83 c4 10             	add    esp,0x10
c0024eb5:	89 c2                	mov    edx,eax
c0024eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ebb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024ec1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ec5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024ece:	a1 80 45 03 c0       	mov    eax,ds:0xc0034580
c0024ed3:	8d 50 01             	lea    edx,[eax+0x1]
c0024ed6:	89 15 80 45 03 c0    	mov    DWORD PTR ds:0xc0034580,edx
c0024edc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024ee0:	89 02                	mov    DWORD PTR [edx],eax
c0024ee2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024eea:	83 ec 0c             	sub    esp,0xc
c0024eed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024ef1:	e8 a5 15 ff ff       	call   c001649b <malloc>
c0024ef6:	83 c4 10             	add    esp,0x10
c0024ef9:	89 c3                	mov    ebx,eax
c0024efb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024f00:	83 ec 08             	sub    esp,0x8
c0024f03:	50                   	push   eax
c0024f04:	53                   	push   ebx
c0024f05:	e8 20 3b ff ff       	call   c0018a2a <VAS::VAS(bool)>
c0024f0a:	83 c4 10             	add    esp,0x10
c0024f0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f11:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024f17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f1b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024f25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f29:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024f2d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024f33:	e8 5f bb ff ff       	call   c0020a97 <KeInitSignals()>
c0024f38:	89 c2                	mov    edx,eax
c0024f3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f3e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024f44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f48:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f4e:	85 c0                	test   eax,eax
c0024f50:	74 42                	je     c0024f94 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024f52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f56:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f5c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024f62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f66:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f70:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024f76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024f7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024f80:	05 0c 01 00 00       	add    eax,0x10c
c0024f85:	83 ec 08             	sub    esp,0x8
c0024f88:	52                   	push   edx
c0024f89:	50                   	push   eax
c0024f8a:	e8 c1 b6 fd ff       	call   c0000650 <strcpy>
c0024f8f:	83 c4 10             	add    esp,0x10
c0024f92:	eb 64                	jmp    c0024ff8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024f94:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024f9c:	83 ec 0c             	sub    esp,0xc
c0024f9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024fa3:	e8 f3 14 ff ff       	call   c001649b <malloc>
c0024fa8:	83 c4 10             	add    esp,0x10
c0024fab:	89 c3                	mov    ebx,eax
c0024fad:	83 ec 08             	sub    esp,0x8
c0024fb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024fb4:	53                   	push   ebx
c0024fb5:	e8 8a 26 ff ff       	call   c0017644 <VgaText::VgaText(char const*)>
c0024fba:	83 c4 10             	add    esp,0x10
c0024fbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024fc1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024fcb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024fd1:	83 ec 0c             	sub    esp,0xc
c0024fd4:	50                   	push   eax
c0024fd5:	e8 18 1f ff ff       	call   c0016ef2 <addToTerminalCycle(VgaText*)>
c0024fda:	83 c4 10             	add    esp,0x10
c0024fdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024fe1:	05 0c 01 00 00       	add    eax,0x10c
c0024fe6:	83 ec 08             	sub    esp,0x8
c0024fe9:	68 7d 2f 03 c0       	push   0xc0032f7d
c0024fee:	50                   	push   eax
c0024fef:	e8 5c b6 fd ff       	call   c0000650 <strcpy>
c0024ff4:	83 c4 10             	add    esp,0x10
c0024ff7:	90                   	nop
c0024ff8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ffc:	83 c0 0c             	add    eax,0xc
c0024fff:	83 ec 08             	sub    esp,0x8
c0025002:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025006:	50                   	push   eax
c0025007:	e8 44 b6 fd ff       	call   c0000650 <strcpy>
c002500c:	83 c4 10             	add    esp,0x10
c002500f:	83 ec 08             	sub    esp,0x8
c0025012:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025016:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002501a:	e8 c1 fb ff ff       	call   c0024be0 <Process::addArgs(char**)>
c002501f:	83 c4 10             	add    esp,0x10
c0025022:	90                   	nop
c0025023:	83 c4 24             	add    esp,0x24
c0025026:	5b                   	pop    ebx
c0025027:	5e                   	pop    esi
c0025028:	c3                   	ret    
c0025029:	8d 76 00             	lea    esi,[esi+0x0]

c002502c <taskStartupFunction>:
c002502c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025031:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0025034:	c3                   	ret    
c0025035:	8d 76 00             	lea    esi,[esi+0x0]

c0025038 <KeDisablePreemption()>:
c0025038:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c002503d:	85 c0                	test   eax,eax
c002503f:	75 13                	jne    c0025054 <KeDisablePreemption()+0x1c>
c0025041:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0025047:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c002504e:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0025054:	83 c0 01             	add    eax,0x1
c0025057:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002505c:	c3                   	ret    
c002505d:	8d 76 00             	lea    esi,[esi+0x0]

c0025060 <KeRestorePreemption()>:
c0025060:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0025065:	83 e8 01             	sub    eax,0x1
c0025068:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c002506d:	75 0d                	jne    c002507c <KeRestorePreemption()+0x1c>
c002506f:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0025074:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0025079:	8d 76 00             	lea    esi,[esi+0x0]
c002507c:	c3                   	ret    
c002507d:	90                   	nop
c002507e:	66 90                	xchg   ax,ax

c0025080 <Process::createThread(void (*)(void*), void*, int)>:
c0025080:	57                   	push   edi
c0025081:	31 c9                	xor    ecx,ecx
c0025083:	56                   	push   esi
c0025084:	53                   	push   ebx
c0025085:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025089:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0025090:	89 f2                	mov    edx,esi
c0025092:	66 90                	xchg   ax,ax
c0025094:	0f b7 c2             	movzx  eax,dx
c0025097:	80 e2 01             	and    dl,0x1
c002509a:	74 14                	je     c00250b0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c002509c:	d1 f8                	sar    eax,1
c002509e:	83 c1 01             	add    ecx,0x1
c00250a1:	83 f9 10             	cmp    ecx,0x10
c00250a4:	89 c2                	mov    edx,eax
c00250a6:	75 ec                	jne    c0025094 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00250a8:	31 db                	xor    ebx,ebx
c00250aa:	89 d8                	mov    eax,ebx
c00250ac:	5b                   	pop    ebx
c00250ad:	5e                   	pop    esi
c00250ae:	5f                   	pop    edi
c00250af:	c3                   	ret    
c00250b0:	b8 01 00 00 00       	mov    eax,0x1
c00250b5:	d3 e0                	shl    eax,cl
c00250b7:	09 c6                	or     esi,eax
c00250b9:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00250c0:	8d 04 49             	lea    eax,[ecx+ecx*2]
c00250c3:	c1 e0 05             	shl    eax,0x5
c00250c6:	29 c8                	sub    eax,ecx
c00250c8:	01 d8                	add    eax,ebx
c00250ca:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00250d1:	75 0d                	jne    c00250e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00250d3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00250dd:	8d 76 00             	lea    esi,[esi+0x0]
c00250e0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00250e6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c00250e9:	83 ec 0c             	sub    esp,0xc
c00250ec:	c1 e6 05             	shl    esi,0x5
c00250ef:	29 ce                	sub    esi,ecx
c00250f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00250f4:	8d 04 33             	lea    eax,[ebx+esi*1]
c00250f7:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00250fd:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0025103:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0025109:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0025110:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0025116:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002511a:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0025120:	89 ca                	mov    edx,ecx
c0025122:	f7 da                	neg    edx
c0025124:	c1 e2 15             	shl    edx,0x15
c0025127:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c002512d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025133:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0025137:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025141:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025147:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002514b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025151:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c002515b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025165:	68 00 01 00 00       	push   0x100
c002516a:	e8 2c 13 ff ff       	call   c001649b <malloc>
c002516f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0025172:	58                   	pop    eax
c0025173:	5a                   	pop    edx
c0025174:	53                   	push   ebx
c0025175:	68 ec 01 04 c0       	push   0xc00401ec
c002517a:	e8 61 9c 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002517f:	83 c4 10             	add    esp,0x10
c0025182:	89 d8                	mov    eax,ebx
c0025184:	5b                   	pop    ebx
c0025185:	5e                   	pop    esi
c0025186:	5f                   	pop    edi
c0025187:	c3                   	ret    

c0025188 <Process::createUserThread()>:
c0025188:	83 ec 0c             	sub    esp,0xc
c002518b:	68 80 00 00 00       	push   0x80
c0025190:	6a 00                	push   0x0
c0025192:	68 d8 4a 02 c0       	push   0xc0024ad8
c0025197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002519b:	50                   	push   eax
c002519c:	e8 df fe ff ff       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c00251a1:	83 c4 1c             	add    esp,0x1c
c00251a4:	c3                   	ret    
c00251a5:	8d 76 00             	lea    esi,[esi+0x0]

c00251a8 <setupMultitasking(void (*)())>:
c00251a8:	56                   	push   esi
c00251a9:	53                   	push   ebx
c00251aa:	83 ec 04             	sub    esp,0x4
c00251ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00251b1:	eb 11                	jmp    c00251c4 <setupMultitasking(void (*)())+0x1c>
c00251b3:	90                   	nop
c00251b4:	83 ec 0c             	sub    esp,0xc
c00251b7:	68 ec 01 04 c0       	push   0xc00401ec
c00251bc:	e8 63 9b 00 00       	call   c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00251c1:	83 c4 10             	add    esp,0x10
c00251c4:	83 ec 0c             	sub    esp,0xc
c00251c7:	68 ec 01 04 c0       	push   0xc00401ec
c00251cc:	e8 2f 9b 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00251d1:	83 c4 10             	add    esp,0x10
c00251d4:	84 c0                	test   al,al
c00251d6:	74 dc                	je     c00251b4 <setupMultitasking(void (*)())+0xc>
c00251d8:	83 ec 0c             	sub    esp,0xc
c00251db:	68 24 07 00 00       	push   0x724
c00251e0:	e8 b6 12 ff ff       	call   c001649b <malloc>
c00251e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00251ec:	6a 00                	push   0x0
c00251ee:	68 81 2f 03 c0       	push   0xc0032f81
c00251f3:	6a 01                	push   0x1
c00251f5:	50                   	push   eax
c00251f6:	89 c3                	mov    ebx,eax
c00251f8:	e8 5b fc ff ff       	call   c0024e58 <Process::Process(bool, char const*, Process*, char**)>
c00251fd:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0025203:	83 c4 14             	add    esp,0x14
c0025206:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c002520c:	50                   	push   eax
c002520d:	e8 35 1f ff ff       	call   c0017147 <setActiveTerminal(VgaText*)>
c0025212:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0025219:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0025223:	83 c8 01             	or     eax,0x1
c0025226:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c002522d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025233:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0025236:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025240:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025246:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025250:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025256:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025260:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002526a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025270:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025276:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025280:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002528a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025291:	e8 05 12 ff ff       	call   c001649b <malloc>
c0025296:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002529c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00252a2:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00252a8:	5a                   	pop    edx
c00252a9:	59                   	pop    ecx
c00252aa:	68 7d 2f 03 c0       	push   0xc0032f7d
c00252af:	50                   	push   eax
c00252b0:	e8 9b b3 fd ff       	call   c0000650 <strcpy>
c00252b5:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00252bc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00252c0:	83 c4 14             	add    esp,0x14
c00252c3:	5b                   	pop    ebx
c00252c4:	5e                   	pop    esi
c00252c5:	e9 9f af fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00252ca:	66 90                	xchg   ax,ax

c00252cc <schedule()>:
c00252cc:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c00252d2:	85 d2                	test   edx,edx
c00252d4:	74 0e                	je     c00252e4 <schedule()+0x18>
c00252d6:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00252e0:	c3                   	ret    
c00252e1:	8d 76 00             	lea    esi,[esi+0x0]
c00252e4:	53                   	push   ebx
c00252e5:	83 ec 14             	sub    esp,0x14
c00252e8:	68 ec 01 04 c0       	push   0xc00401ec
c00252ed:	e8 0e 9a 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00252f2:	83 c4 10             	add    esp,0x10
c00252f5:	84 c0                	test   al,al
c00252f7:	75 3f                	jne    c0025338 <schedule()+0x6c>
c00252f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0025301:	83 fa 01             	cmp    edx,0x1
c0025304:	74 3a                	je     c0025340 <schedule()+0x74>
c0025306:	66 90                	xchg   ax,ax
c0025308:	83 ec 0c             	sub    esp,0xc
c002530b:	68 ec 01 04 c0       	push   0xc00401ec
c0025310:	e8 07 9a 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025315:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002531c:	89 c3                	mov    ebx,eax
c002531e:	e8 01 9a 00 00       	call   c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025323:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c002532a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002532d:	e8 fe f7 ff ff       	call   c0024b30 <switchToThread(ThreadControlBlock*)>
c0025332:	83 c4 10             	add    esp,0x10
c0025335:	8d 76 00             	lea    esi,[esi+0x0]
c0025338:	83 c4 08             	add    esp,0x8
c002533b:	5b                   	pop    ebx
c002533c:	c3                   	ret    
c002533d:	8d 76 00             	lea    esi,[esi+0x0]
c0025340:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025347:	83 ec 08             	sub    esp,0x8
c002534a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002534f:	50                   	push   eax
c0025350:	68 ec 01 04 c0       	push   0xc00401ec
c0025355:	e8 86 9a 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002535a:	83 c4 10             	add    esp,0x10
c002535d:	eb a9                	jmp    c0025308 <schedule()+0x3c>
c002535f:	90                   	nop

c0025360 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025360:	83 ec 0c             	sub    esp,0xc
c0025363:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025368:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002536c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002536f:	e8 58 ff ff ff       	call   c00252cc <schedule()>
c0025374:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025379:	83 e8 01             	sub    eax,0x1
c002537c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025381:	75 01                	jne    c0025384 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025383:	fb                   	sti    
c0025384:	83 c4 0c             	add    esp,0xc
c0025387:	c3                   	ret    

c0025388 <blockTask(TaskState)>:
c0025388:	83 ec 0c             	sub    esp,0xc
c002538b:	fa                   	cli    
c002538c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025391:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025395:	83 c0 01             	add    eax,0x1
c0025398:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002539d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00253a5:	e8 22 ff ff ff       	call   c00252cc <schedule()>
c00253aa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253af:	83 e8 01             	sub    eax,0x1
c00253b2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253b7:	75 03                	jne    c00253bc <blockTask(TaskState)+0x34>
c00253b9:	fb                   	sti    
c00253ba:	66 90                	xchg   ax,ax
c00253bc:	83 c4 0c             	add    esp,0xc
c00253bf:	c3                   	ret    

c00253c0 <waitTask(int, int*, int)>:
c00253c0:	83 ec 18             	sub    esp,0x18
c00253c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00253cc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00253cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00253d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253d8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00253db:	6a 07                	push   0x7
c00253dd:	e8 a6 ff ff ff       	call   c0025388 <blockTask(TaskState)>
c00253e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253e7:	83 c4 10             	add    esp,0x10
c00253ea:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00253ed:	85 d2                	test   edx,edx
c00253ef:	74 0b                	je     c00253fc <waitTask(int, int*, int)+0x3c>
c00253f1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00253f4:	89 02                	mov    DWORD PTR [edx],eax
c00253f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00253fb:	90                   	nop
c00253fc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00253ff:	83 c4 0c             	add    esp,0xc
c0025402:	c3                   	ret    
c0025403:	90                   	nop

c0025404 <milliTenthSleepUntil(unsigned int)>:
c0025404:	83 ec 0c             	sub    esp,0xc
c0025407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002540b:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c0025411:	76 05                	jbe    c0025418 <milliTenthSleepUntil(unsigned int)+0x14>
c0025413:	90                   	nop
c0025414:	83 c4 0c             	add    esp,0xc
c0025417:	c3                   	ret    
c0025418:	fa                   	cli    
c0025419:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002541f:	83 ec 08             	sub    esp,0x8
c0025422:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025428:	83 c2 01             	add    edx,0x1
c002542b:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025431:	83 c1 01             	add    ecx,0x1
c0025434:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002543a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025440:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025443:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025448:	50                   	push   eax
c0025449:	68 e0 01 04 c0       	push   0xc00401e0
c002544e:	e8 8d 99 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025453:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002545a:	e8 29 ff ff ff       	call   c0025388 <blockTask(TaskState)>
c002545f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025464:	83 c4 10             	add    esp,0x10
c0025467:	83 e8 01             	sub    eax,0x1
c002546a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002546f:	85 c0                	test   eax,eax
c0025471:	75 09                	jne    c002547c <milliTenthSleepUntil(unsigned int)+0x78>
c0025473:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025478:	85 c0                	test   eax,eax
c002547a:	75 14                	jne    c0025490 <milliTenthSleepUntil(unsigned int)+0x8c>
c002547c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025481:	83 e8 01             	sub    eax,0x1
c0025484:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025489:	75 89                	jne    c0025414 <milliTenthSleepUntil(unsigned int)+0x10>
c002548b:	fb                   	sti    
c002548c:	83 c4 0c             	add    esp,0xc
c002548f:	c3                   	ret    
c0025490:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002549a:	e8 2d fe ff ff       	call   c00252cc <schedule()>
c002549f:	eb db                	jmp    c002547c <milliTenthSleepUntil(unsigned int)+0x78>
c00254a1:	8d 76 00             	lea    esi,[esi+0x0]

c00254a4 <milliTenthSleep(unsigned int)>:
c00254a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00254a8:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c00254ad:	01 c2                	add    edx,eax
c00254af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00254b3:	e9 4c ff ff ff       	jmp    c0025404 <milliTenthSleepUntil(unsigned int)>

c00254b8 <sleep(unsigned int)>:
c00254b8:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c00254c0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00254c4:	eb de                	jmp    c00254a4 <milliTenthSleep(unsigned int)>
c00254c6:	66 90                	xchg   ax,ax

c00254c8 <taskReturned>:
c00254c8:	83 ec 18             	sub    esp,0x18
c00254cb:	68 00 30 03 c0       	push   0xc0033000
c00254d0:	e8 95 ad ff ff       	call   c002026a <KePanic(char const*)>
c00254d5:	83 c4 10             	add    esp,0x10
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	6a 02                	push   0x2
c00254dd:	e8 a6 fe ff ff       	call   c0025388 <blockTask(TaskState)>
c00254e2:	fa                   	cli    
c00254e3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254e8:	83 c0 01             	add    eax,0x1
c00254eb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254f0:	e8 d7 fd ff ff       	call   c00252cc <schedule()>
c00254f5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254fa:	83 c4 10             	add    esp,0x10
c00254fd:	83 e8 01             	sub    eax,0x1
c0025500:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025505:	85 c0                	test   eax,eax
c0025507:	75 cf                	jne    c00254d8 <taskReturned+0x10>
c0025509:	fb                   	sti    
c002550a:	eb cc                	jmp    c00254d8 <taskReturned+0x10>

c002550c <Thr::processFromPID(int)>:
c002550c:	57                   	push   edi
c002550d:	56                   	push   esi
c002550e:	53                   	push   ebx
c002550f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025513:	fa                   	cli    
c0025514:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c002551a:	83 ec 0c             	sub    esp,0xc
c002551d:	68 ec 01 04 c0       	push   0xc00401ec
c0025522:	83 c1 01             	add    ecx,0x1
c0025525:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c002552b:	e8 ec 97 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025530:	83 c4 10             	add    esp,0x10
c0025533:	89 c7                	mov    edi,eax
c0025535:	eb 15                	jmp    c002554c <Thr::processFromPID(int)+0x40>
c0025537:	90                   	nop
c0025538:	83 ec 0c             	sub    esp,0xc
c002553b:	68 ec 01 04 c0       	push   0xc00401ec
c0025540:	e8 d7 97 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025545:	83 c4 10             	add    esp,0x10
c0025548:	39 f8                	cmp    eax,edi
c002554a:	74 50                	je     c002559c <Thr::processFromPID(int)+0x90>
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	68 ec 01 04 c0       	push   0xc00401ec
c0025554:	e8 c3 97 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025559:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025560:	89 c3                	mov    ebx,eax
c0025562:	e8 bd 97 00 00       	call   c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025567:	58                   	pop    eax
c0025568:	5a                   	pop    edx
c0025569:	53                   	push   ebx
c002556a:	68 ec 01 04 c0       	push   0xc00401ec
c002556f:	e8 6c 98 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025574:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025577:	83 c4 10             	add    esp,0x10
c002557a:	39 30                	cmp    DWORD PTR [eax],esi
c002557c:	75 ba                	jne    c0025538 <Thr::processFromPID(int)+0x2c>
c002557e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025583:	83 e8 01             	sub    eax,0x1
c0025586:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002558b:	74 0b                	je     c0025598 <Thr::processFromPID(int)+0x8c>
c002558d:	8d 76 00             	lea    esi,[esi+0x0]
c0025590:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025593:	90                   	nop
c0025594:	5b                   	pop    ebx
c0025595:	5e                   	pop    esi
c0025596:	5f                   	pop    edi
c0025597:	c3                   	ret    
c0025598:	fb                   	sti    
c0025599:	eb f5                	jmp    c0025590 <Thr::processFromPID(int)+0x84>
c002559b:	90                   	nop
c002559c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255a1:	8d 50 ff             	lea    edx,[eax-0x1]
c00255a4:	31 c0                	xor    eax,eax
c00255a6:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00255ac:	85 d2                	test   edx,edx
c00255ae:	75 e4                	jne    c0025594 <Thr::processFromPID(int)+0x88>
c00255b0:	fb                   	sti    
c00255b1:	5b                   	pop    ebx
c00255b2:	5e                   	pop    esi
c00255b3:	5f                   	pop    edi
c00255b4:	c3                   	ret    
c00255b5:	8d 76 00             	lea    esi,[esi+0x0]

c00255b8 <unblockTask(ThreadControlBlock*)>:
c00255b8:	53                   	push   ebx
c00255b9:	83 ec 08             	sub    esp,0x8
c00255bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00255c0:	fa                   	cli    
c00255c1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00255c6:	83 c0 01             	add    eax,0x1
c00255c9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00255ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00255d1:	85 c0                	test   eax,eax
c00255d3:	74 67                	je     c002563c <unblockTask(ThreadControlBlock*)+0x84>
c00255d5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00255d8:	83 f8 01             	cmp    eax,0x1
c00255db:	74 37                	je     c0025614 <unblockTask(ThreadControlBlock*)+0x5c>
c00255dd:	83 ec 0c             	sub    esp,0xc
c00255e0:	68 ec 01 04 c0       	push   0xc00401ec
c00255e5:	e8 32 97 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	85 c0                	test   eax,eax
c00255ef:	75 1b                	jne    c002560c <unblockTask(ThreadControlBlock*)+0x54>
c00255f1:	eb 5d                	jmp    c0025650 <unblockTask(ThreadControlBlock*)+0x98>
c00255f3:	90                   	nop
c00255f4:	83 ec 08             	sub    esp,0x8
c00255f7:	50                   	push   eax
c00255f8:	68 ec 01 04 c0       	push   0xc00401ec
c00255fd:	e8 3a 9a 00 00       	call   c002f03c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0025602:	83 c4 10             	add    esp,0x10
c0025605:	85 c0                	test   eax,eax
c0025607:	74 47                	je     c0025650 <unblockTask(ThreadControlBlock*)+0x98>
c0025609:	8d 76 00             	lea    esi,[esi+0x0]
c002560c:	39 c3                	cmp    ebx,eax
c002560e:	75 e4                	jne    c00255f4 <unblockTask(ThreadControlBlock*)+0x3c>
c0025610:	eb 12                	jmp    c0025624 <unblockTask(ThreadControlBlock*)+0x6c>
c0025612:	66 90                	xchg   ax,ax
c0025614:	83 ec 0c             	sub    esp,0xc
c0025617:	68 9f 2f 03 c0       	push   0xc0032f9f
c002561c:	e8 c1 3c ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0025621:	83 c4 10             	add    esp,0x10
c0025624:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025629:	83 e8 01             	sub    eax,0x1
c002562c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025631:	75 01                	jne    c0025634 <unblockTask(ThreadControlBlock*)+0x7c>
c0025633:	fb                   	sti    
c0025634:	83 c4 08             	add    esp,0x8
c0025637:	5b                   	pop    ebx
c0025638:	c3                   	ret    
c0025639:	8d 76 00             	lea    esi,[esi+0x0]
c002563c:	83 ec 0c             	sub    esp,0xc
c002563f:	68 88 2f 03 c0       	push   0xc0032f88
c0025644:	e8 99 3c ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0025649:	83 c4 10             	add    esp,0x10
c002564c:	eb d6                	jmp    c0025624 <unblockTask(ThreadControlBlock*)+0x6c>
c002564e:	66 90                	xchg   ax,ax
c0025650:	83 ec 08             	sub    esp,0x8
c0025653:	53                   	push   ebx
c0025654:	68 ec 01 04 c0       	push   0xc00401ec
c0025659:	e8 82 97 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002565e:	83 c4 10             	add    esp,0x10
c0025661:	eb c1                	jmp    c0025624 <unblockTask(ThreadControlBlock*)+0x6c>
c0025663:	90                   	nop

c0025664 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025664:	55                   	push   ebp
c0025665:	57                   	push   edi
c0025666:	56                   	push   esi
c0025667:	53                   	push   ebx
c0025668:	83 ec 1c             	sub    esp,0x1c
c002566b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002566f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025672:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025678:	85 ed                	test   ebp,ebp
c002567a:	7e 28                	jle    c00256a4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c002567c:	31 f6                	xor    esi,esi
c002567e:	66 90                	xchg   ax,ax
c0025680:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025687:	83 ec 0c             	sub    esp,0xc
c002568a:	83 c6 01             	add    esi,0x1
c002568d:	57                   	push   edi
c002568e:	e8 28 0e ff ff       	call   c00164bb <free>
c0025693:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025696:	83 c4 10             	add    esp,0x10
c0025699:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002569f:	7f df                	jg     c0025680 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00256a1:	8d 76 00             	lea    esi,[esi+0x0]
c00256a4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00256ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00256b3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00256b6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00256b9:	d3 c0                	rol    eax,cl
c00256bb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00256c2:	21 c8                	and    eax,ecx
c00256c4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00256cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00256ce:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00256d6:	89 f7                	mov    edi,esi
c00256d8:	0f 85 72 01 00 00    	jne    c0025850 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00256de:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00256e4:	85 ed                	test   ebp,ebp
c00256e6:	74 1c                	je     c0025704 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00256e8:	83 ec 0c             	sub    esp,0xc
c00256eb:	55                   	push   ebp
c00256ec:	e8 6f a8 ff ff       	call   c001ff60 <EnvVarContainer::~EnvVarContainer()>
c00256f1:	59                   	pop    ecx
c00256f2:	5e                   	pop    esi
c00256f3:	6a 0c                	push   0xc
c00256f5:	55                   	push   ebp
c00256f6:	e8 e9 3a ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c00256fb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00256fe:	83 c4 10             	add    esp,0x10
c0025701:	89 f7                	mov    edi,esi
c0025703:	90                   	nop
c0025704:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c002570a:	85 c0                	test   eax,eax
c002570c:	0f 84 b2 00 00 00    	je     c00257c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0025712:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0025715:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025719:	31 c9                	xor    ecx,ecx
c002571b:	eb 17                	jmp    c0025734 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c002571d:	8d 76 00             	lea    esi,[esi+0x0]
c0025720:	83 c1 01             	add    ecx,0x1
c0025723:	83 f9 10             	cmp    ecx,0x10
c0025726:	0f 84 98 00 00 00    	je     c00257c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c002572c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025732:	66 90                	xchg   ax,ax
c0025734:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c002573b:	d3 fa                	sar    edx,cl
c002573d:	80 e2 01             	and    dl,0x1
c0025740:	74 de                	je     c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025742:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0025745:	c1 e2 05             	shl    edx,0x5
c0025748:	29 ca                	sub    edx,ecx
c002574a:	01 d0                	add    eax,edx
c002574c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025752:	83 fd 07             	cmp    ebp,0x7
c0025755:	75 c9                	jne    c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025757:	05 40 02 00 00       	add    eax,0x240
c002575c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c002575f:	83 fd ff             	cmp    ebp,0xffffffff
c0025762:	0f 8c f0 00 00 00    	jl     c0025858 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025768:	0f 84 ae 01 00 00    	je     c002591c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c002576e:	85 ed                	test   ebp,ebp
c0025770:	0f 84 92 01 00 00    	je     c0025908 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025776:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025778:	75 a6                	jne    c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002577a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002577e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025784:	01 d0                	add    eax,edx
c0025786:	66 90                	xchg   ax,ax
c0025788:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002578c:	83 ec 0c             	sub    esp,0xc
c002578f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025795:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025798:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002579e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00257a5:	50                   	push   eax
c00257a6:	e8 0d fe ff ff       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c00257ab:	83 c4 10             	add    esp,0x10
c00257ae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00257b1:	89 f7                	mov    edi,esi
c00257b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00257b7:	83 c1 01             	add    ecx,0x1
c00257ba:	83 f9 10             	cmp    ecx,0x10
c00257bd:	0f 85 69 ff ff ff    	jne    c002572c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00257c3:	90                   	nop
c00257c4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00257ca:	85 c0                	test   eax,eax
c00257cc:	74 62                	je     c0025830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00257ce:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00257d4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00257da:	74 54                	je     c0025830 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00257dc:	83 ec 0c             	sub    esp,0xc
c00257df:	68 ec 01 04 c0       	push   0xc00401ec
c00257e4:	e8 33 95 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257e9:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257f0:	89 c7                	mov    edi,eax
c00257f2:	e8 09 95 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00257f7:	83 c4 10             	add    esp,0x10
c00257fa:	84 c0                	test   al,al
c00257fc:	0f 84 ce 00 00 00    	je     c00258d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0025802:	66 90                	xchg   ax,ax
c0025804:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025807:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c002580d:	85 d2                	test   edx,edx
c002580f:	74 0f                	je     c0025820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0025811:	8b 02                	mov    eax,DWORD PTR [edx]
c0025813:	83 ec 0c             	sub    esp,0xc
c0025816:	52                   	push   edx
c0025817:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002581a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002581d:	83 c4 10             	add    esp,0x10
c0025820:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c002582a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c002582d:	8d 76 00             	lea    esi,[esi+0x0]
c0025830:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025836:	85 db                	test   ebx,ebx
c0025838:	74 16                	je     c0025850 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002583a:	83 ec 0c             	sub    esp,0xc
c002583d:	53                   	push   ebx
c002583e:	e8 25 2d ff ff       	call   c0018568 <VAS::~VAS()>
c0025843:	58                   	pop    eax
c0025844:	5a                   	pop    edx
c0025845:	6a 14                	push   0x14
c0025847:	53                   	push   ebx
c0025848:	e8 97 39 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002584d:	83 c4 10             	add    esp,0x10
c0025850:	83 c4 1c             	add    esp,0x1c
c0025853:	5b                   	pop    ebx
c0025854:	5e                   	pop    esi
c0025855:	5f                   	pop    edi
c0025856:	5d                   	pop    ebp
c0025857:	c3                   	ret    
c0025858:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002585c:	83 ec 0c             	sub    esp,0xc
c002585f:	68 34 30 03 c0       	push   0xc0033034
c0025864:	e8 01 aa ff ff       	call   c002026a <KePanic(char const*)>
c0025869:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002586c:	83 c4 10             	add    esp,0x10
c002586f:	89 f7                	mov    edi,esi
c0025871:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025875:	e9 a6 fe ff ff       	jmp    c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002587a:	66 90                	xchg   ax,ax
c002587c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025882:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025888:	75 1e                	jne    c00258a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002588a:	83 ec 0c             	sub    esp,0xc
c002588d:	68 9c 30 03 c0       	push   0xc003309c
c0025892:	e8 4b 3a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0025897:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c002589e:	e8 e5 fa ff ff       	call   c0025388 <blockTask(TaskState)>
c00258a3:	83 c4 10             	add    esp,0x10
c00258a6:	66 90                	xchg   ax,ax
c00258a8:	83 ec 08             	sub    esp,0x8
c00258ab:	56                   	push   esi
c00258ac:	68 ec 01 04 c0       	push   0xc00401ec
c00258b1:	e8 2a 95 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00258b6:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00258bd:	e8 5a 94 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00258c2:	83 c4 10             	add    esp,0x10
c00258c5:	39 f8                	cmp    eax,edi
c00258c7:	0f 84 37 ff ff ff    	je     c0025804 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00258cd:	8d 76 00             	lea    esi,[esi+0x0]
c00258d0:	83 ec 0c             	sub    esp,0xc
c00258d3:	68 ec 01 04 c0       	push   0xc00401ec
c00258d8:	e8 3f 94 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00258dd:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00258e4:	89 c6                	mov    esi,eax
c00258e6:	e8 39 94 00 00       	call   c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00258eb:	83 c4 10             	add    esp,0x10
c00258ee:	39 f3                	cmp    ebx,esi
c00258f0:	74 b6                	je     c00258a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00258f2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00258f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00258f8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00258fe:	75 a8                	jne    c00258a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0025900:	e9 77 ff ff ff       	jmp    c002587c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0025905:	8d 76 00             	lea    esi,[esi+0x0]
c0025908:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002590c:	83 ec 0c             	sub    esp,0xc
c002590f:	68 68 30 03 c0       	push   0xc0033068
c0025914:	e9 4b ff ff ff       	jmp    c0025864 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0025919:	8d 76 00             	lea    esi,[esi+0x0]
c002591c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025920:	8b 36                	mov    esi,DWORD PTR [esi]
c0025922:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0025925:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025928:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c002592e:	01 d7                	add    edi,edx
c0025930:	89 f8                	mov    eax,edi
c0025932:	e9 51 fe ff ff       	jmp    c0025788 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025937:	90                   	nop

c0025938 <cleanerTaskFunction(void*)>:
c0025938:	53                   	push   ebx
c0025939:	83 ec 08             	sub    esp,0x8
c002593c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025941:	83 e8 01             	sub    eax,0x1
c0025944:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025949:	75 01                	jne    c002594c <cleanerTaskFunction(void*)+0x14>
c002594b:	fb                   	sti    
c002594c:	fa                   	cli    
c002594d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025952:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025959:	8d 50 01             	lea    edx,[eax+0x1]
c002595c:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025962:	0f 84 c4 00 00 00    	je     c0025a2c <cleanerTaskFunction(void*)+0xf4>
c0025968:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002596d:	85 c0                	test   eax,eax
c002596f:	75 03                	jne    c0025974 <cleanerTaskFunction(void*)+0x3c>
c0025971:	fb                   	sti    
c0025972:	66 90                	xchg   ax,ax
c0025974:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c002597b:	fa                   	cli    
c002597c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025982:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025988:	83 c2 01             	add    edx,0x1
c002598b:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025991:	83 c1 01             	add    ecx,0x1
c0025994:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002599a:	fa                   	cli    
c002599b:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c00259a1:	83 c3 01             	add    ebx,0x1
c00259a4:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c00259aa:	eb 28                	jmp    c00259d4 <cleanerTaskFunction(void*)+0x9c>
c00259ac:	83 ec 0c             	sub    esp,0xc
c00259af:	68 d4 01 04 c0       	push   0xc00401d4
c00259b4:	e8 63 93 00 00       	call   c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00259b9:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c00259c0:	89 c3                	mov    ebx,eax
c00259c2:	e8 5d 93 00 00       	call   c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00259c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00259ca:	e8 95 fc ff ff       	call   c0025664 <cleanupTerminatedTask(ThreadControlBlock*)>
c00259cf:	83 c4 10             	add    esp,0x10
c00259d2:	66 90                	xchg   ax,ax
c00259d4:	83 ec 0c             	sub    esp,0xc
c00259d7:	68 d4 01 04 c0       	push   0xc00401d4
c00259dc:	e8 1f 93 00 00       	call   c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00259e1:	83 c4 10             	add    esp,0x10
c00259e4:	84 c0                	test   al,al
c00259e6:	74 c4                	je     c00259ac <cleanerTaskFunction(void*)+0x74>
c00259e8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259ed:	83 e8 01             	sub    eax,0x1
c00259f0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259f5:	75 01                	jne    c00259f8 <cleanerTaskFunction(void*)+0xc0>
c00259f7:	fb                   	sti    
c00259f8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00259fd:	83 e8 01             	sub    eax,0x1
c0025a00:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025a05:	0f 85 31 ff ff ff    	jne    c002593c <cleanerTaskFunction(void*)+0x4>
c0025a0b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025a10:	85 c0                	test   eax,eax
c0025a12:	0f 84 24 ff ff ff    	je     c002593c <cleanerTaskFunction(void*)+0x4>
c0025a18:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025a22:	e8 a5 f8 ff ff       	call   c00252cc <schedule()>
c0025a27:	e9 10 ff ff ff       	jmp    c002593c <cleanerTaskFunction(void*)+0x4>
c0025a2c:	83 ec 0c             	sub    esp,0xc
c0025a2f:	6a 02                	push   0x2
c0025a31:	e8 2a f9 ff ff       	call   c0025360 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025a36:	83 c4 10             	add    esp,0x10
c0025a39:	e9 36 ff ff ff       	jmp    c0025974 <cleanerTaskFunction(void*)+0x3c>
c0025a3e:	66 90                	xchg   ax,ax

c0025a40 <terminateTask(int)>:
c0025a40:	83 ec 14             	sub    esp,0x14
c0025a43:	fa                   	cli    
c0025a44:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025a4a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025a50:	83 c2 01             	add    edx,0x1
c0025a53:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025a59:	83 c1 01             	add    ecx,0x1
c0025a5c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025a62:	fa                   	cli    
c0025a63:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025a68:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025a6c:	83 c0 01             	add    eax,0x1
c0025a6f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025a74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a79:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025a7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a81:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025a84:	50                   	push   eax
c0025a85:	68 d4 01 04 c0       	push   0xc00401d4
c0025a8a:	e8 51 93 00 00       	call   c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025a8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025a94:	83 c4 10             	add    esp,0x10
c0025a97:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025a9e:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025aa3:	85 c0                	test   eax,eax
c0025aa5:	74 65                	je     c0025b0c <terminateTask(int)+0xcc>
c0025aa7:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025aae:	83 ec 0c             	sub    esp,0xc
c0025ab1:	50                   	push   eax
c0025ab2:	e8 01 fb ff ff       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c0025ab7:	83 c4 10             	add    esp,0x10
c0025aba:	66 90                	xchg   ax,ax
c0025abc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ac1:	83 e8 01             	sub    eax,0x1
c0025ac4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ac9:	75 01                	jne    c0025acc <terminateTask(int)+0x8c>
c0025acb:	fb                   	sti    
c0025acc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025ad1:	83 e8 01             	sub    eax,0x1
c0025ad4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025ad9:	75 09                	jne    c0025ae4 <terminateTask(int)+0xa4>
c0025adb:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0025ae2:	75 3c                	jne    c0025b20 <terminateTask(int)+0xe0>
c0025ae4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ae9:	83 e8 01             	sub    eax,0x1
c0025aec:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025af1:	75 01                	jne    c0025af4 <terminateTask(int)+0xb4>
c0025af3:	fb                   	sti    
c0025af4:	fa                   	cli    
c0025af5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025afa:	83 c0 01             	add    eax,0x1
c0025afd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b02:	66 90                	xchg   ax,ax
c0025b04:	e8 c3 f7 ff ff       	call   c00252cc <schedule()>
c0025b09:	eb d9                	jmp    c0025ae4 <terminateTask(int)+0xa4>
c0025b0b:	90                   	nop
c0025b0c:	83 ec 0c             	sub    esp,0xc
c0025b0f:	68 b6 2f 03 c0       	push   0xc0032fb6
c0025b14:	e8 c9 37 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0025b19:	83 c4 10             	add    esp,0x10
c0025b1c:	eb 9e                	jmp    c0025abc <terminateTask(int)+0x7c>
c0025b1e:	66 90                	xchg   ax,ax
c0025b20:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025b2a:	eb d8                	jmp    c0025b04 <terminateTask(int)+0xc4>

c0025b2c <Thr::terminateFromIRQ(int)>:
c0025b2c:	83 ec 18             	sub    esp,0x18
c0025b2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b33:	50                   	push   eax
c0025b34:	e8 07 ff ff ff       	call   c0025a40 <terminateTask(int)>
c0025b39:	8d 76 00             	lea    esi,[esi+0x0]

c0025b3c <__static_initialization_and_destruction_0(int, int)>:
c0025b3c:	83 ec 0c             	sub    esp,0xc
c0025b3f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025b44:	0f 85 8e 00 00 00    	jne    c0025bd8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025b4a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025b52:	0f 85 80 00 00 00    	jne    c0025bd8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025b58:	83 ec 0c             	sub    esp,0xc
c0025b5b:	68 ec 01 04 c0       	push   0xc00401ec
c0025b60:	e8 2f 95 00 00       	call   c002f094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b65:	83 c4 10             	add    esp,0x10
c0025b68:	83 ec 04             	sub    esp,0x4
c0025b6b:	68 78 3c 03 c0       	push   0xc0033c78
c0025b70:	68 ec 01 04 c0       	push   0xc00401ec
c0025b75:	68 44 f0 02 c0       	push   0xc002f044
c0025b7a:	e8 15 36 ff ff       	call   c0019194 <__cxa_atexit>
c0025b7f:	83 c4 10             	add    esp,0x10
c0025b82:	83 ec 0c             	sub    esp,0xc
c0025b85:	68 e0 01 04 c0       	push   0xc00401e0
c0025b8a:	e8 05 95 00 00       	call   c002f094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025b8f:	83 c4 10             	add    esp,0x10
c0025b92:	83 ec 04             	sub    esp,0x4
c0025b95:	68 78 3c 03 c0       	push   0xc0033c78
c0025b9a:	68 e0 01 04 c0       	push   0xc00401e0
c0025b9f:	68 44 f0 02 c0       	push   0xc002f044
c0025ba4:	e8 eb 35 ff ff       	call   c0019194 <__cxa_atexit>
c0025ba9:	83 c4 10             	add    esp,0x10
c0025bac:	83 ec 0c             	sub    esp,0xc
c0025baf:	68 d4 01 04 c0       	push   0xc00401d4
c0025bb4:	e8 db 94 00 00       	call   c002f094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025bb9:	83 c4 10             	add    esp,0x10
c0025bbc:	83 ec 04             	sub    esp,0x4
c0025bbf:	68 78 3c 03 c0       	push   0xc0033c78
c0025bc4:	68 d4 01 04 c0       	push   0xc00401d4
c0025bc9:	68 44 f0 02 c0       	push   0xc002f044
c0025bce:	e8 c1 35 ff ff       	call   c0019194 <__cxa_atexit>
c0025bd3:	83 c4 10             	add    esp,0x10
c0025bd6:	66 90                	xchg   ax,ax
c0025bd8:	90                   	nop
c0025bd9:	83 c4 0c             	add    esp,0xc
c0025bdc:	c3                   	ret    
c0025bdd:	8d 76 00             	lea    esi,[esi+0x0]

c0025be0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025be0:	83 ec 0c             	sub    esp,0xc
c0025be3:	83 ec 08             	sub    esp,0x8
c0025be6:	68 ff ff 00 00       	push   0xffff
c0025beb:	6a 01                	push   0x1
c0025bed:	e8 4a ff ff ff       	call   c0025b3c <__static_initialization_and_destruction_0(int, int)>
c0025bf2:	83 c4 10             	add    esp,0x10
c0025bf5:	83 c4 0c             	add    esp,0xc
c0025bf8:	c3                   	ret    

c0025bf9 <Vm::inbv(unsigned short)>:
c0025bf9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025bfd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025c02:	75 06                	jne    c0025c0a <Vm::inbv(unsigned short)+0x11>
c0025c04:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025c09:	c3                   	ret    
c0025c0a:	ec                   	in     al,dx
c0025c0b:	c3                   	ret    

c0025c0c <Vm::outbv(unsigned short, unsigned char)>:
c0025c0c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025c14:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025c19:	75 25                	jne    c0025c40 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025c1b:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025c21:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025c27:	8d 51 01             	lea    edx,[ecx+0x1]
c0025c2a:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025c30:	83 fa 20             	cmp    edx,0x20
c0025c33:	75 0c                	jne    c0025c41 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025c35:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025c3f:	c3                   	ret    
c0025c40:	ee                   	out    dx,al
c0025c41:	c3                   	ret    

c0025c42 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025c42:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025c47:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025c4c:	c1 e0 04             	shl    eax,0x4
c0025c4f:	01 d0                	add    eax,edx
c0025c51:	c3                   	ret    

c0025c52 <Vm::getSegment(unsigned int)>:
c0025c52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c56:	c1 e8 10             	shr    eax,0x10
c0025c59:	c3                   	ret    

c0025c5a <Vm::getOffset(unsigned int)>:
c0025c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025c5e:	c3                   	ret    

c0025c5f <Vm::mainloop2()>:
c0025c5f:	83 ec 18             	sub    esp,0x18
c0025c62:	fa                   	cli    
c0025c63:	6a 02                	push   0x2
c0025c65:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c6b:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025c72:	e8 e9 f6 ff ff       	call   c0025360 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025c77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025c7c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025c80:	52                   	push   edx
c0025c81:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025c85:	52                   	push   edx
c0025c86:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025c8a:	52                   	push   edx
c0025c8b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025c8f:	50                   	push   eax
c0025c90:	e8 7a a5 fd ff       	call   c000020f <goToVM86>
c0025c95:	83 c4 2c             	add    esp,0x2c
c0025c98:	c3                   	ret    

c0025c99 <Vm::mainVm8086Loop(void*)>:
c0025c99:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c9e:	48                   	dec    eax
c0025c9f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025ca4:	75 01                	jne    c0025ca7 <Vm::mainVm8086Loop(void*)+0xe>
c0025ca6:	fb                   	sti    
c0025ca7:	eb b6                	jmp    c0025c5f <Vm::mainloop2()>

c0025ca9 <Vm::mainloop3(unsigned long)>:
c0025ca9:	83 ec 18             	sub    esp,0x18
c0025cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025cb0:	fa                   	cli    
c0025cb1:	6a 02                	push   0x2
c0025cb3:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025cb9:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025cc0:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025cc5:	e8 96 f6 ff ff       	call   c0025360 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025cca:	83 c4 1c             	add    esp,0x1c
c0025ccd:	eb 90                	jmp    c0025c5f <Vm::mainloop2()>

c0025ccf <Vm::initialise8086()>:
c0025ccf:	83 ec 0c             	sub    esp,0xc
c0025cd2:	68 80 00 00 00       	push   0x80
c0025cd7:	6a 00                	push   0x0
c0025cd9:	68 99 5c 02 c0       	push   0xc0025c99
c0025cde:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025ce4:	e8 97 f3 ff ff       	call   c0025080 <Process::createThread(void (*)(void*), void*, int)>
c0025ce9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025cf0:	68 00 01 00 00       	push   0x100
c0025cf5:	6a 00                	push   0x0
c0025cf7:	6a 00                	push   0x0
c0025cf9:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025cfe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025d03:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025d09:	e8 d2 2b ff ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025d0e:	83 c4 2c             	add    esp,0x2c
c0025d11:	c3                   	ret    

c0025d12 <Vm::finish8086()>:
c0025d12:	53                   	push   ebx
c0025d13:	83 ec 08             	sub    esp,0x8
c0025d16:	fa                   	cli    
c0025d17:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d1d:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025d24:	75 15                	jne    c0025d3b <Vm::finish8086()+0x29>
c0025d26:	e8 a1 f5 ff ff       	call   c00252cc <schedule()>
c0025d2b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d30:	48                   	dec    eax
c0025d31:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d36:	75 de                	jne    c0025d16 <Vm::finish8086()+0x4>
c0025d38:	fb                   	sti    
c0025d39:	eb db                	jmp    c0025d16 <Vm::finish8086()+0x4>
c0025d3b:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025d42:	83 ec 0c             	sub    esp,0xc
c0025d45:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025d4b:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025d51:	e8 62 f8 ff ff       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c0025d56:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d5b:	83 c4 10             	add    esp,0x10
c0025d5e:	8d 50 ff             	lea    edx,[eax-0x1]
c0025d61:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025d67:	85 d2                	test   edx,edx
c0025d69:	75 01                	jne    c0025d6c <Vm::finish8086()+0x5a>
c0025d6b:	fb                   	sti    
c0025d6c:	83 c4 08             	add    esp,0x8
c0025d6f:	89 d8                	mov    eax,ebx
c0025d71:	5b                   	pop    ebx
c0025d72:	c3                   	ret    

c0025d73 <Vm::getOutput8086(unsigned char*)>:
c0025d73:	57                   	push   edi
c0025d74:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025d7a:	56                   	push   esi
c0025d7b:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025d80:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025d84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025d86:	5e                   	pop    esi
c0025d87:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025d8c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d96:	5f                   	pop    edi
c0025d97:	c3                   	ret    

c0025d98 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d98:	55                   	push   ebp
c0025d99:	57                   	push   edi
c0025d9a:	56                   	push   esi
c0025d9b:	53                   	push   ebx
c0025d9c:	83 ec 0c             	sub    esp,0xc
c0025d9f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025da3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025da7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025dab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025daf:	fa                   	cli    
c0025db0:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025db6:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025dbd:	75 15                	jne    c0025dd4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025dbf:	e8 08 f5 ff ff       	call   c00252cc <schedule()>
c0025dc4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025dc9:	48                   	dec    eax
c0025dca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025dcf:	75 de                	jne    c0025daf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025dd1:	fb                   	sti    
c0025dd2:	eb db                	jmp    c0025daf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025dd4:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025dde:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025de3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025de7:	0f b7 ff             	movzx  edi,di
c0025dea:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025dee:	0f b7 f6             	movzx  esi,si
c0025df1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025df5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025df9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025dfd:	50                   	push   eax
c0025dfe:	6a 20                	push   0x20
c0025e00:	6a 00                	push   0x0
c0025e02:	68 40 02 04 c0       	push   0xc0040240
c0025e07:	e8 e4 a6 fd ff       	call   c00004f0 <memset>
c0025e0c:	5a                   	pop    edx
c0025e0d:	59                   	pop    ecx
c0025e0e:	57                   	push   edi
c0025e0f:	56                   	push   esi
c0025e10:	e8 2d fe ff ff       	call   c0025c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0025e15:	83 c4 10             	add    esp,0x10
c0025e18:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025e1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025e20:	89 c7                	mov    edi,eax
c0025e22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025e24:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025e2b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e30:	48                   	dec    eax
c0025e31:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e36:	75 01                	jne    c0025e39 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025e38:	fb                   	sti    
c0025e39:	83 ec 0c             	sub    esp,0xc
c0025e3c:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025e42:	e8 71 f7 ff ff       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c0025e47:	83 c4 1c             	add    esp,0x1c
c0025e4a:	b0 01                	mov    al,0x1
c0025e4c:	5b                   	pop    ebx
c0025e4d:	5e                   	pop    esi
c0025e4e:	5f                   	pop    edi
c0025e4f:	5d                   	pop    ebp
c0025e50:	c3                   	ret    

c0025e51 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025e51:	55                   	push   ebp
c0025e52:	57                   	push   edi
c0025e53:	56                   	push   esi
c0025e54:	53                   	push   ebx
c0025e55:	83 ec 34             	sub    esp,0x34
c0025e58:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025e5c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025e60:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025e64:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025e68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025e6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025e70:	68 c4 30 03 c0       	push   0xc00330c4
c0025e75:	e8 68 34 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0025e7a:	83 c4 10             	add    esp,0x10
c0025e7d:	fa                   	cli    
c0025e7e:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025e84:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025e8a:	84 db                	test   bl,bl
c0025e8c:	75 15                	jne    c0025ea3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025e8e:	e8 39 f4 ff ff       	call   c00252cc <schedule()>
c0025e93:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e98:	48                   	dec    eax
c0025e99:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e9e:	75 dd                	jne    c0025e7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025ea0:	fb                   	sti    
c0025ea1:	eb da                	jmp    c0025e7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025ea3:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025ead:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025eb1:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025eb6:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025eba:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025ebe:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025ec2:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025ec6:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025eca:	50                   	push   eax
c0025ecb:	6a 20                	push   0x20
c0025ecd:	6a 00                	push   0x0
c0025ecf:	68 40 02 04 c0       	push   0xc0040240
c0025ed4:	e8 17 a6 fd ff       	call   c00004f0 <memset>
c0025ed9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025ee0:	e8 b6 05 ff ff       	call   c001649b <malloc>
c0025ee5:	83 c4 0c             	add    esp,0xc
c0025ee8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025eee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025ef2:	89 c5                	mov    ebp,eax
c0025ef4:	50                   	push   eax
c0025ef5:	e8 00 46 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c0025efa:	83 c4 10             	add    esp,0x10
c0025efd:	85 ed                	test   ebp,ebp
c0025eff:	75 0a                	jne    c0025f0b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025f01:	83 ec 0c             	sub    esp,0xc
c0025f04:	68 e6 30 03 c0       	push   0xc00330e6
c0025f09:	eb 2b                	jmp    c0025f36 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025f0b:	50                   	push   eax
c0025f0c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025f10:	50                   	push   eax
c0025f11:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025f15:	50                   	push   eax
c0025f16:	55                   	push   ebp
c0025f17:	e8 fe 48 ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c0025f1c:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025f20:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025f24:	83 c4 10             	add    esp,0x10
c0025f27:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025f2c:	74 27                	je     c0025f55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025f2e:	83 ec 0c             	sub    esp,0xc
c0025f31:	68 fa 30 03 c0       	push   0xc00330fa
c0025f36:	e8 2f a3 ff ff       	call   c002026a <KePanic(char const*)>
c0025f3b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f40:	83 c4 10             	add    esp,0x10
c0025f43:	48                   	dec    eax
c0025f44:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f49:	85 c0                	test   eax,eax
c0025f4b:	75 01                	jne    c0025f4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f4d:	fb                   	sti    
c0025f4e:	31 db                	xor    ebx,ebx
c0025f50:	e9 90 00 00 00       	jmp    c0025fe5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f55:	51                   	push   ecx
c0025f56:	51                   	push   ecx
c0025f57:	6a 01                	push   0x1
c0025f59:	55                   	push   ebp
c0025f5a:	e8 b9 45 ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0025f5f:	83 c4 10             	add    esp,0x10
c0025f62:	85 c0                	test   eax,eax
c0025f64:	74 26                	je     c0025f8c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025f66:	83 ec 0c             	sub    esp,0xc
c0025f69:	68 13 31 03 c0       	push   0xc0033113
c0025f6e:	e8 f7 a2 ff ff       	call   c002026a <KePanic(char const*)>
c0025f73:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025f78:	83 c4 10             	add    esp,0x10
c0025f7b:	48                   	dec    eax
c0025f7c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025f81:	85 c0                	test   eax,eax
c0025f83:	75 c9                	jne    c0025f4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025f85:	fb                   	sti    
c0025f86:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025f8a:	eb 59                	jmp    c0025fe5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025f8c:	50                   	push   eax
c0025f8d:	0f b7 ff             	movzx  edi,di
c0025f90:	50                   	push   eax
c0025f91:	0f b7 f6             	movzx  esi,si
c0025f94:	57                   	push   edi
c0025f95:	56                   	push   esi
c0025f96:	e8 a7 fc ff ff       	call   c0025c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0025f9b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0025f9e:	5a                   	pop    edx
c0025f9f:	8d 74 24 20          	lea    esi,[esp+0x20]
c0025fa3:	56                   	push   esi
c0025fa4:	50                   	push   eax
c0025fa5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025fa9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025fad:	55                   	push   ebp
c0025fae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0025fb1:	83 c4 14             	add    esp,0x14
c0025fb4:	55                   	push   ebp
c0025fb5:	e8 bc 45 ff ff       	call   c001a576 <File::close()>
c0025fba:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025fbf:	83 c4 10             	add    esp,0x10
c0025fc2:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025fc9:	48                   	dec    eax
c0025fca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025fcf:	85 c0                	test   eax,eax
c0025fd1:	75 01                	jne    c0025fd4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025fd3:	fb                   	sti    
c0025fd4:	83 ec 0c             	sub    esp,0xc
c0025fd7:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025fdd:	e8 d6 f5 ff ff       	call   c00255b8 <unblockTask(ThreadControlBlock*)>
c0025fe2:	83 c4 10             	add    esp,0x10
c0025fe5:	83 c4 2c             	add    esp,0x2c
c0025fe8:	88 d8                	mov    al,bl
c0025fea:	5b                   	pop    ebx
c0025feb:	5e                   	pop    esi
c0025fec:	5f                   	pop    edi
c0025fed:	5d                   	pop    ebp
c0025fee:	c3                   	ret    

c0025fef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025fef:	57                   	push   edi
c0025ff0:	56                   	push   esi
c0025ff1:	53                   	push   ebx
c0025ff2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ff6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025ffa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025ffe:	83 e8 06             	sub    eax,0x6
c0026001:	0f b7 c0             	movzx  eax,ax
c0026004:	50                   	push   eax
c0026005:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c002600a:	50                   	push   eax
c002600b:	e8 32 fc ff ff       	call   c0025c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0026010:	5a                   	pop    edx
c0026011:	59                   	pop    ecx
c0026012:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0026015:	8d 51 fa             	lea    edx,[ecx-0x6]
c0026018:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c002601b:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026021:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0026024:	8d 51 02             	lea    edx,[ecx+0x2]
c0026027:	66 89 10             	mov    WORD PTR [eax],dx
c002602a:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c002602e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0026032:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0026036:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0026039:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c002603d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026043:	89 f1                	mov    ecx,esi
c0026045:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0026049:	89 f2                	mov    edx,esi
c002604b:	0f b6 d6             	movzx  edx,dh
c002604e:	0f b6 f1             	movzx  esi,cl
c0026051:	74 0a                	je     c002605d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0026053:	c1 e2 08             	shl    edx,0x8
c0026056:	09 f2                	or     edx,esi
c0026058:	80 ce 02             	or     dh,0x2
c002605b:	eb 08                	jmp    c0026065 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c002605d:	c1 e2 08             	shl    edx,0x8
c0026060:	09 f2                	or     edx,esi
c0026062:	80 e6 fd             	and    dh,0xfd
c0026065:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0026069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002606e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026072:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c002607a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c002607d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0026085:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0026088:	5b                   	pop    ebx
c0026089:	5e                   	pop    esi
c002608a:	5f                   	pop    edi
c002608b:	c3                   	ret    

c002608c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c002608c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0026091:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0026096:	c1 e0 04             	shl    eax,0x4
c0026099:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c002609c:	c3                   	ret    

c002609d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c002609d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260a2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260a7:	c1 e0 04             	shl    eax,0x4
c00260aa:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00260ae:	c3                   	ret    

c00260af <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00260af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260b9:	c1 e0 04             	shl    eax,0x4
c00260bc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00260bf:	c3                   	ret    

c00260c0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00260c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260ca:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00260ce:	c1 e0 04             	shl    eax,0x4
c00260d1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00260d4:	c3                   	ret    

c00260d5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00260d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260da:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00260e3:	c1 e0 04             	shl    eax,0x4
c00260e6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00260ea:	c3                   	ret    

c00260eb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00260eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00260f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00260f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00260f9:	c1 e0 04             	shl    eax,0x4
c00260fc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00260ff:	c3                   	ret    

c0026100 <Vm::faultHandler(regs*)>:
c0026100:	55                   	push   ebp
c0026101:	57                   	push   edi
c0026102:	56                   	push   esi
c0026103:	53                   	push   ebx
c0026104:	83 ec 2c             	sub    esp,0x2c
c0026107:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002610b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002610e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0026112:	0f b7 f8             	movzx  edi,ax
c0026115:	0f b7 c0             	movzx  eax,ax
c0026118:	52                   	push   edx
c0026119:	50                   	push   eax
c002611a:	e8 23 fb ff ff       	call   c0025c42 <Vm::realToLinear(unsigned short, unsigned short)>
c002611f:	5a                   	pop    edx
c0026120:	59                   	pop    ecx
c0026121:	89 c1                	mov    ecx,eax
c0026123:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002612a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c002612f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026133:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0026136:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002613a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c002613f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026143:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026147:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002614b:	e8 f2 fa ff ff       	call   c0025c42 <Vm::realToLinear(unsigned short, unsigned short)>
c0026150:	5e                   	pop    esi
c0026151:	be 06 00 00 00       	mov    esi,0x6
c0026156:	5d                   	pop    ebp
c0026157:	31 ed                	xor    ebp,ebp
c0026159:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002615e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026161:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026167:	0f 84 74 02 00 00    	je     c00263e1 <Vm::faultHandler(regs*)+0x2e1>
c002616d:	0f 87 94 00 00 00    	ja     c0026207 <Vm::faultHandler(regs*)+0x107>
c0026173:	83 fa 66             	cmp    edx,0x66
c0026176:	0f 84 e2 01 00 00    	je     c002635e <Vm::faultHandler(regs*)+0x25e>
c002617c:	77 47                	ja     c00261c5 <Vm::faultHandler(regs*)+0xc5>
c002617e:	83 fa 36             	cmp    edx,0x36
c0026181:	0f 84 ca 01 00 00    	je     c0026351 <Vm::faultHandler(regs*)+0x251>
c0026187:	77 1a                	ja     c00261a3 <Vm::faultHandler(regs*)+0xa3>
c0026189:	83 fa 26             	cmp    edx,0x26
c002618c:	0f 84 98 01 00 00    	je     c002632a <Vm::faultHandler(regs*)+0x22a>
c0026192:	83 fa 2e             	cmp    edx,0x2e
c0026195:	0f 85 27 06 00 00    	jne    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c002619b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002619e:	31 f6                	xor    esi,esi
c00261a0:	41                   	inc    ecx
c00261a1:	eb bb                	jmp    c002615e <Vm::faultHandler(regs*)+0x5e>
c00261a3:	83 fa 64             	cmp    edx,0x64
c00261a6:	0f 84 8b 01 00 00    	je     c0026337 <Vm::faultHandler(regs*)+0x237>
c00261ac:	0f 87 92 01 00 00    	ja     c0026344 <Vm::faultHandler(regs*)+0x244>
c00261b2:	83 fa 3e             	cmp    edx,0x3e
c00261b5:	0f 85 07 06 00 00    	jne    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c00261bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261be:	be 01 00 00 00       	mov    esi,0x1
c00261c3:	eb db                	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c00261c5:	83 fa 6d             	cmp    edx,0x6d
c00261c8:	0f 84 34 03 00 00    	je     c0026502 <Vm::faultHandler(regs*)+0x402>
c00261ce:	77 17                	ja     c00261e7 <Vm::faultHandler(regs*)+0xe7>
c00261d0:	83 fa 67             	cmp    edx,0x67
c00261d3:	0f 84 92 01 00 00    	je     c002636b <Vm::faultHandler(regs*)+0x26b>
c00261d9:	83 fa 6c             	cmp    edx,0x6c
c00261dc:	0f 84 b1 02 00 00    	je     c0026493 <Vm::faultHandler(regs*)+0x393>
c00261e2:	e9 db 05 00 00       	jmp    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c00261e7:	83 fa 6f             	cmp    edx,0x6f
c00261ea:	0f 84 40 04 00 00    	je     c0026630 <Vm::faultHandler(regs*)+0x530>
c00261f0:	0f 82 a2 03 00 00    	jb     c0026598 <Vm::faultHandler(regs*)+0x498>
c00261f6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00261fc:	0f 84 76 01 00 00    	je     c0026378 <Vm::faultHandler(regs*)+0x278>
c0026202:	e9 bb 05 00 00       	jmp    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c0026207:	81 fa ec 00 00 00    	cmp    edx,0xec
c002620d:	0f 84 57 05 00 00    	je     c002676a <Vm::faultHandler(regs*)+0x66a>
c0026213:	0f 87 a9 00 00 00    	ja     c00262c2 <Vm::faultHandler(regs*)+0x1c2>
c0026219:	81 fa e4 00 00 00    	cmp    edx,0xe4
c002621f:	0f 84 d6 04 00 00    	je     c00266fb <Vm::faultHandler(regs*)+0x5fb>
c0026225:	77 78                	ja     c002629f <Vm::faultHandler(regs*)+0x19f>
c0026227:	81 fa cd 00 00 00    	cmp    edx,0xcd
c002622d:	0f 84 0e 02 00 00    	je     c0026441 <Vm::faultHandler(regs*)+0x341>
c0026233:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026239:	0f 85 83 05 00 00    	jne    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c002623f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0026243:	89 d1                	mov    ecx,edx
c0026245:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026248:	c1 e1 08             	shl    ecx,0x8
c002624b:	09 ca                	or     edx,ecx
c002624d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026250:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026254:	89 d1                	mov    ecx,edx
c0026256:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c002625a:	c1 e1 08             	shl    ecx,0x8
c002625d:	09 ca                	or     edx,ecx
c002625f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026262:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026266:	89 d1                	mov    ecx,edx
c0026268:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002626c:	c1 e1 08             	shl    ecx,0x8
c002626f:	09 ca                	or     edx,ecx
c0026271:	81 ca 00 02 02 00    	or     edx,0x20200
c0026277:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002627a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002627e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026284:	d1 e8                	shr    eax,1
c0026286:	83 e0 01             	and    eax,0x1
c0026289:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002628c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002628f:	83 c0 06             	add    eax,0x6
c0026292:	25 ff ff 00 00       	and    eax,0xffff
c0026297:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002629a:	e9 1f 05 00 00       	jmp    c00267be <Vm::faultHandler(regs*)+0x6be>
c002629f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00262a5:	0f 84 95 04 00 00    	je     c0026740 <Vm::faultHandler(regs*)+0x640>
c00262ab:	0f 82 66 04 00 00    	jb     c0026717 <Vm::faultHandler(regs*)+0x617>
c00262b1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00262b7:	0f 84 9a 04 00 00    	je     c0026757 <Vm::faultHandler(regs*)+0x657>
c00262bd:	e9 00 05 00 00       	jmp    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c00262c2:	81 fa ef 00 00 00    	cmp    edx,0xef
c00262c8:	0f 84 dd 04 00 00    	je     c00267ab <Vm::faultHandler(regs*)+0x6ab>
c00262ce:	77 2e                	ja     c00262fe <Vm::faultHandler(regs*)+0x1fe>
c00262d0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00262d6:	0f 84 aa 04 00 00    	je     c0026786 <Vm::faultHandler(regs*)+0x686>
c00262dc:	81 fa ee 00 00 00    	cmp    edx,0xee
c00262e2:	0f 85 da 04 00 00    	jne    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c00262e8:	50                   	push   eax
c00262e9:	50                   	push   eax
c00262ea:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00262ee:	50                   	push   eax
c00262ef:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00262f3:	50                   	push   eax
c00262f4:	e8 13 f9 ff ff       	call   c0025c0c <Vm::outbv(unsigned short, unsigned char)>
c00262f9:	e9 a5 04 00 00       	jmp    c00267a3 <Vm::faultHandler(regs*)+0x6a3>
c00262fe:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0026304:	0f 84 6d 01 00 00    	je     c0026477 <Vm::faultHandler(regs*)+0x377>
c002630a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0026310:	0f 84 6f 01 00 00    	je     c0026485 <Vm::faultHandler(regs*)+0x385>
c0026316:	81 fa f3 00 00 00    	cmp    edx,0xf3
c002631c:	0f 85 a0 04 00 00    	jne    c00267c2 <Vm::faultHandler(regs*)+0x6c2>
c0026322:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026325:	e9 76 fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c002632a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002632d:	be 02 00 00 00       	mov    esi,0x2
c0026332:	e9 69 fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c0026337:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002633a:	be 03 00 00 00       	mov    esi,0x3
c002633f:	e9 5c fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c0026344:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026347:	be 04 00 00 00       	mov    esi,0x4
c002634c:	e9 4f fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c0026351:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026354:	be 05 00 00 00       	mov    esi,0x5
c0026359:	e9 42 fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c002635e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026361:	bd 01 00 00 00       	mov    ebp,0x1
c0026366:	e9 35 fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c002636b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002636e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026373:	e9 28 fe ff ff       	jmp    c00261a0 <Vm::faultHandler(regs*)+0xa0>
c0026378:	83 e5 01             	and    ebp,0x1
c002637b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002637e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026382:	74 30                	je     c00263b4 <Vm::faultHandler(regs*)+0x2b4>
c0026384:	83 e9 04             	sub    ecx,0x4
c0026387:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002638d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026393:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026396:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026399:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002639f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00263a3:	0f 84 12 04 00 00    	je     c00267bb <Vm::faultHandler(regs*)+0x6bb>
c00263a9:	80 ce 02             	or     dh,0x2
c00263ac:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00263af:	e9 07 04 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c00263b4:	83 e9 02             	sub    ecx,0x2
c00263b7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00263bd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00263c0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00263c4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00263ca:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00263ce:	74 05                	je     c00263d5 <Vm::faultHandler(regs*)+0x2d5>
c00263d0:	80 ce 02             	or     dh,0x2
c00263d3:	eb 03                	jmp    c00263d8 <Vm::faultHandler(regs*)+0x2d8>
c00263d5:	80 e6 fd             	and    dh,0xfd
c00263d8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00263dc:	e9 da 03 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c00263e1:	83 e5 01             	and    ebp,0x1
c00263e4:	74 2a                	je     c0026410 <Vm::faultHandler(regs*)+0x310>
c00263e6:	8b 10                	mov    edx,DWORD PTR [eax]
c00263e8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00263ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00263f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00263f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00263f9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00263ff:	c1 e8 09             	shr    eax,0x9
c0026402:	83 e0 01             	and    eax,0x1
c0026405:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0026408:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002640b:	83 c0 04             	add    eax,0x4
c002640e:	eb 24                	jmp    c0026434 <Vm::faultHandler(regs*)+0x334>
c0026410:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0026413:	81 ca 00 02 02 00    	or     edx,0x20200
c0026419:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002641c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c002641f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026425:	c1 e8 09             	shr    eax,0x9
c0026428:	83 e0 01             	and    eax,0x1
c002642b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002642e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026431:	83 c0 02             	add    eax,0x2
c0026434:	25 ff ff 00 00       	and    eax,0xffff
c0026439:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002643c:	e9 7a 03 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c0026441:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026445:	3d ee 00 00 00       	cmp    eax,0xee
c002644a:	75 10                	jne    c002645c <Vm::faultHandler(regs*)+0x35c>
c002644c:	83 ec 0c             	sub    esp,0xc
c002644f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026452:	e8 52 f8 ff ff       	call   c0025ca9 <Vm::mainloop3(unsigned long)>
c0026457:	e9 4a 03 00 00       	jmp    c00267a6 <Vm::faultHandler(regs*)+0x6a6>
c002645c:	83 ec 0c             	sub    esp,0xc
c002645f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026467:	51                   	push   ecx
c0026468:	50                   	push   eax
c0026469:	53                   	push   ebx
c002646a:	e8 80 fb ff ff       	call   c0025fef <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c002646f:	83 c4 20             	add    esp,0x20
c0026472:	e9 47 03 00 00       	jmp    c00267be <Vm::faultHandler(regs*)+0x6be>
c0026477:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002647c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026480:	e9 36 03 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c0026485:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002648a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002648e:	e9 28 03 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c0026493:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026498:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002649b:	74 2b                	je     c00264c8 <Vm::faultHandler(regs*)+0x3c8>
c002649d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00264a4:	76 22                	jbe    c00264c8 <Vm::faultHandler(regs*)+0x3c8>
c00264a6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264aa:	50                   	push   eax
c00264ab:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264af:	50                   	push   eax
c00264b0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264b4:	50                   	push   eax
c00264b5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264b9:	50                   	push   eax
c00264ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264be:	50                   	push   eax
c00264bf:	6a 6c                	push   0x6c
c00264c1:	6a 6c                	push   0x6c
c00264c3:	e9 c0 01 00 00       	jmp    c0026688 <Vm::faultHandler(regs*)+0x588>
c00264c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00264cc:	83 ec 0c             	sub    esp,0xc
c00264cf:	0f b7 f6             	movzx  esi,si
c00264d2:	50                   	push   eax
c00264d3:	e8 21 f7 ff ff       	call   c0025bf9 <Vm::inbv(unsigned short)>
c00264d8:	83 c4 0c             	add    esp,0xc
c00264db:	0f b6 c0             	movzx  eax,al
c00264de:	50                   	push   eax
c00264df:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00264e3:	50                   	push   eax
c00264e4:	56                   	push   esi
c00264e5:	e8 d6 fb ff ff       	call   c00260c0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00264ea:	83 c4 10             	add    esp,0x10
c00264ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00264f0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264f4:	74 03                	je     c00264f9 <Vm::faultHandler(regs*)+0x3f9>
c00264f6:	48                   	dec    eax
c00264f7:	eb 01                	jmp    c00264fa <Vm::faultHandler(regs*)+0x3fa>
c00264f9:	40                   	inc    eax
c00264fa:	0f b7 c0             	movzx  eax,ax
c00264fd:	e9 8e 00 00 00       	jmp    c0026590 <Vm::faultHandler(regs*)+0x490>
c0026502:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026507:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002650a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002650d:	74 29                	je     c0026538 <Vm::faultHandler(regs*)+0x438>
c002650f:	3d ff ff 00 00       	cmp    eax,0xffff
c0026514:	76 22                	jbe    c0026538 <Vm::faultHandler(regs*)+0x438>
c0026516:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002651a:	50                   	push   eax
c002651b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002651f:	50                   	push   eax
c0026520:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026524:	50                   	push   eax
c0026525:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026529:	50                   	push   eax
c002652a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002652e:	50                   	push   eax
c002652f:	6a 6d                	push   0x6d
c0026531:	6a 6d                	push   0x6d
c0026533:	e9 50 01 00 00       	jmp    c0026688 <Vm::faultHandler(regs*)+0x588>
c0026538:	83 e5 01             	and    ebp,0x1
c002653b:	0f b7 c8             	movzx  ecx,ax
c002653e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026541:	0f b7 f6             	movzx  esi,si
c0026544:	74 1e                	je     c0026564 <Vm::faultHandler(regs*)+0x464>
c0026546:	ed                   	in     eax,dx
c0026547:	55                   	push   ebp
c0026548:	50                   	push   eax
c0026549:	51                   	push   ecx
c002654a:	56                   	push   esi
c002654b:	e8 9b fb ff ff       	call   c00260eb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026550:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026553:	83 c4 10             	add    esp,0x10
c0026556:	8d 50 04             	lea    edx,[eax+0x4]
c0026559:	83 e8 04             	sub    eax,0x4
c002655c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026562:	eb 20                	jmp    c0026584 <Vm::faultHandler(regs*)+0x484>
c0026564:	66 ed                	in     ax,dx
c0026566:	57                   	push   edi
c0026567:	0f b7 c0             	movzx  eax,ax
c002656a:	50                   	push   eax
c002656b:	51                   	push   ecx
c002656c:	56                   	push   esi
c002656d:	e8 63 fb ff ff       	call   c00260d5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026572:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026575:	83 c4 10             	add    esp,0x10
c0026578:	8d 50 02             	lea    edx,[eax+0x2]
c002657b:	83 e8 02             	sub    eax,0x2
c002657e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026584:	25 ff ff 00 00       	and    eax,0xffff
c0026589:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002658d:	0f 44 c2             	cmove  eax,edx
c0026590:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026593:	e9 23 02 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c0026598:	8d 46 ff             	lea    eax,[esi-0x1]
c002659b:	0f b6 f0             	movzx  esi,al
c002659e:	83 fe 05             	cmp    esi,0x5
c00265a1:	77 23                	ja     c00265c6 <Vm::faultHandler(regs*)+0x4c6>
c00265a3:	ff 24 b5 88 31 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcce78]
c00265aa:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00265af:	eb 15                	jmp    c00265c6 <Vm::faultHandler(regs*)+0x4c6>
c00265b1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00265b5:	eb 0f                	jmp    c00265c6 <Vm::faultHandler(regs*)+0x4c6>
c00265b7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00265bb:	eb 09                	jmp    c00265c6 <Vm::faultHandler(regs*)+0x4c6>
c00265bd:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00265c1:	eb 03                	jmp    c00265c6 <Vm::faultHandler(regs*)+0x4c6>
c00265c3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00265c6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00265cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00265ce:	74 29                	je     c00265f9 <Vm::faultHandler(regs*)+0x4f9>
c00265d0:	3d ff ff 00 00       	cmp    eax,0xffff
c00265d5:	76 22                	jbe    c00265f9 <Vm::faultHandler(regs*)+0x4f9>
c00265d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00265db:	50                   	push   eax
c00265dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00265e0:	50                   	push   eax
c00265e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00265e5:	50                   	push   eax
c00265e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00265ea:	50                   	push   eax
c00265eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265ef:	50                   	push   eax
c00265f0:	6a 6e                	push   0x6e
c00265f2:	6a 6e                	push   0x6e
c00265f4:	e9 8f 00 00 00       	jmp    c0026688 <Vm::faultHandler(regs*)+0x588>
c00265f9:	52                   	push   edx
c00265fa:	0f b7 c0             	movzx  eax,ax
c00265fd:	52                   	push   edx
c00265fe:	50                   	push   eax
c00265ff:	57                   	push   edi
c0026600:	e8 87 fa ff ff       	call   c002608c <Vm::readByteFromReal(unsigned short, unsigned short)>
c0026605:	59                   	pop    ecx
c0026606:	5e                   	pop    esi
c0026607:	0f b6 c0             	movzx  eax,al
c002660a:	50                   	push   eax
c002660b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002660f:	50                   	push   eax
c0026610:	e8 f7 f5 ff ff       	call   c0025c0c <Vm::outbv(unsigned short, unsigned char)>
c0026615:	83 c4 10             	add    esp,0x10
c0026618:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002661b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002661f:	74 03                	je     c0026624 <Vm::faultHandler(regs*)+0x524>
c0026621:	48                   	dec    eax
c0026622:	eb 01                	jmp    c0026625 <Vm::faultHandler(regs*)+0x525>
c0026624:	40                   	inc    eax
c0026625:	0f b7 c0             	movzx  eax,ax
c0026628:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002662b:	e9 8b 01 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c0026630:	8d 46 ff             	lea    eax,[esi-0x1]
c0026633:	0f b6 f0             	movzx  esi,al
c0026636:	83 fe 05             	cmp    esi,0x5
c0026639:	77 1e                	ja     c0026659 <Vm::faultHandler(regs*)+0x559>
c002663b:	ff 24 b5 a0 31 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcce60]
c0026642:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026646:	eb 11                	jmp    c0026659 <Vm::faultHandler(regs*)+0x559>
c0026648:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c002664b:	eb 0c                	jmp    c0026659 <Vm::faultHandler(regs*)+0x559>
c002664d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026650:	eb 07                	jmp    c0026659 <Vm::faultHandler(regs*)+0x559>
c0026652:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026655:	eb 02                	jmp    c0026659 <Vm::faultHandler(regs*)+0x559>
c0026657:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026659:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002665e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026661:	74 37                	je     c002669a <Vm::faultHandler(regs*)+0x59a>
c0026663:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026669:	76 2f                	jbe    c002669a <Vm::faultHandler(regs*)+0x59a>
c002666b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002666f:	50                   	push   eax
c0026670:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026674:	50                   	push   eax
c0026675:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026679:	50                   	push   eax
c002667a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002667e:	50                   	push   eax
c002667f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026683:	50                   	push   eax
c0026684:	6a 6f                	push   0x6f
c0026686:	6a 6f                	push   0x6f
c0026688:	68 2c 31 03 c0       	push   0xc003312c
c002668d:	e8 50 2c ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026692:	83 c4 20             	add    esp,0x20
c0026695:	e9 86 01 00 00       	jmp    c0026820 <Vm::faultHandler(regs*)+0x720>
c002669a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c002669d:	0f b7 d7             	movzx  edx,di
c00266a0:	0f b7 c6             	movzx  eax,si
c00266a3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00266a6:	81 e1 00 04 00 00    	and    ecx,0x400
c00266ac:	83 e5 01             	and    ebp,0x1
c00266af:	74 1c                	je     c00266cd <Vm::faultHandler(regs*)+0x5cd>
c00266b1:	55                   	push   ebp
c00266b2:	55                   	push   ebp
c00266b3:	50                   	push   eax
c00266b4:	52                   	push   edx
c00266b5:	e8 f5 f9 ff ff       	call   c00260af <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00266ba:	83 c4 10             	add    esp,0x10
c00266bd:	89 fa                	mov    edx,edi
c00266bf:	ef                   	out    dx,eax
c00266c0:	8d 46 04             	lea    eax,[esi+0x4]
c00266c3:	83 ee 04             	sub    esi,0x4
c00266c6:	25 ff ff 00 00       	and    eax,0xffff
c00266cb:	eb 1b                	jmp    c00266e8 <Vm::faultHandler(regs*)+0x5e8>
c00266cd:	55                   	push   ebp
c00266ce:	55                   	push   ebp
c00266cf:	50                   	push   eax
c00266d0:	52                   	push   edx
c00266d1:	e8 c7 f9 ff ff       	call   c002609d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00266d6:	83 c4 10             	add    esp,0x10
c00266d9:	89 fa                	mov    edx,edi
c00266db:	66 ef                	out    dx,ax
c00266dd:	8d 46 02             	lea    eax,[esi+0x2]
c00266e0:	83 ee 02             	sub    esi,0x2
c00266e3:	25 ff ff 00 00       	and    eax,0xffff
c00266e8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00266ee:	85 c9                	test   ecx,ecx
c00266f0:	0f 44 f0             	cmove  esi,eax
c00266f3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00266f6:	e9 c0 00 00 00       	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c00266fb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026702:	83 ec 0c             	sub    esp,0xc
c0026705:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026709:	50                   	push   eax
c002670a:	e8 ea f4 ff ff       	call   c0025bf9 <Vm::inbv(unsigned short)>
c002670f:	0f b6 c0             	movzx  eax,al
c0026712:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026715:	eb 3a                	jmp    c0026751 <Vm::faultHandler(regs*)+0x651>
c0026717:	83 e5 01             	and    ebp,0x1
c002671a:	74 07                	je     c0026723 <Vm::faultHandler(regs*)+0x623>
c002671c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026720:	ed                   	in     eax,dx
c0026721:	eb 14                	jmp    c0026737 <Vm::faultHandler(regs*)+0x637>
c0026723:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0026726:	66 31 f6             	xor    si,si
c0026729:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c002672c:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026730:	66 ed                	in     ax,dx
c0026732:	0f b7 c0             	movzx  eax,ax
c0026735:	09 f0                	or     eax,esi
c0026737:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002673a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002673e:	eb 7e                	jmp    c00267be <Vm::faultHandler(regs*)+0x6be>
c0026740:	52                   	push   edx
c0026741:	52                   	push   edx
c0026742:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026746:	50                   	push   eax
c0026747:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002674b:	50                   	push   eax
c002674c:	e8 bb f4 ff ff       	call   c0025c0c <Vm::outbv(unsigned short, unsigned char)>
c0026751:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026755:	eb 4f                	jmp    c00267a6 <Vm::faultHandler(regs*)+0x6a6>
c0026757:	83 e5 01             	and    ebp,0x1
c002675a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c002675d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026761:	74 03                	je     c0026766 <Vm::faultHandler(regs*)+0x666>
c0026763:	ef                   	out    dx,eax
c0026764:	eb d4                	jmp    c002673a <Vm::faultHandler(regs*)+0x63a>
c0026766:	66 ef                	out    dx,ax
c0026768:	eb d0                	jmp    c002673a <Vm::faultHandler(regs*)+0x63a>
c002676a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002676e:	83 ec 0c             	sub    esp,0xc
c0026771:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026778:	50                   	push   eax
c0026779:	e8 7b f4 ff ff       	call   c0025bf9 <Vm::inbv(unsigned short)>
c002677e:	0f b6 c0             	movzx  eax,al
c0026781:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026784:	eb 1d                	jmp    c00267a3 <Vm::faultHandler(regs*)+0x6a3>
c0026786:	83 e5 01             	and    ebp,0x1
c0026789:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002678c:	74 03                	je     c0026791 <Vm::faultHandler(regs*)+0x691>
c002678e:	ed                   	in     eax,dx
c002678f:	eb 0d                	jmp    c002679e <Vm::faultHandler(regs*)+0x69e>
c0026791:	66 ed                	in     ax,dx
c0026793:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026796:	0f b7 c0             	movzx  eax,ax
c0026799:	66 31 d2             	xor    dx,dx
c002679c:	09 d0                	or     eax,edx
c002679e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00267a1:	eb 18                	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c00267a3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00267a6:	83 c4 10             	add    esp,0x10
c00267a9:	eb 13                	jmp    c00267be <Vm::faultHandler(regs*)+0x6be>
c00267ab:	83 e5 01             	and    ebp,0x1
c00267ae:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00267b1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00267b4:	74 03                	je     c00267b9 <Vm::faultHandler(regs*)+0x6b9>
c00267b6:	ef                   	out    dx,eax
c00267b7:	eb 02                	jmp    c00267bb <Vm::faultHandler(regs*)+0x6bb>
c00267b9:	66 ef                	out    dx,ax
c00267bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00267be:	b0 01                	mov    al,0x1
c00267c0:	eb 60                	jmp    c0026822 <Vm::faultHandler(regs*)+0x722>
c00267c2:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00267c6:	50                   	push   eax
c00267c7:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00267cb:	50                   	push   eax
c00267cc:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00267d0:	50                   	push   eax
c00267d1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00267d5:	50                   	push   eax
c00267d6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00267da:	50                   	push   eax
c00267db:	52                   	push   edx
c00267dc:	52                   	push   edx
c00267dd:	68 59 31 03 c0       	push   0xc0033159
c00267e2:	e8 fb 2a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00267e7:	83 c4 20             	add    esp,0x20
c00267ea:	83 ec 0c             	sub    esp,0xc
c00267ed:	6a 60                	push   0x60
c00267ef:	e8 05 f4 ff ff       	call   c0025bf9 <Vm::inbv(unsigned short)>
c00267f4:	83 c4 10             	add    esp,0x10
c00267f7:	0f b6 d0             	movzx  edx,al
c00267fa:	83 fa 1c             	cmp    edx,0x1c
c00267fd:	74 05                	je     c0026804 <Vm::faultHandler(regs*)+0x704>
c00267ff:	83 fa 5a             	cmp    edx,0x5a
c0026802:	75 e6                	jne    c00267ea <Vm::faultHandler(regs*)+0x6ea>
c0026804:	0f b6 c0             	movzx  eax,al
c0026807:	83 f8 1c             	cmp    eax,0x1c
c002680a:	74 05                	je     c0026811 <Vm::faultHandler(regs*)+0x711>
c002680c:	83 f8 5a             	cmp    eax,0x5a
c002680f:	75 0f                	jne    c0026820 <Vm::faultHandler(regs*)+0x720>
c0026811:	83 ec 0c             	sub    esp,0xc
c0026814:	6a 60                	push   0x60
c0026816:	e8 de f3 ff ff       	call   c0025bf9 <Vm::inbv(unsigned short)>
c002681b:	83 c4 10             	add    esp,0x10
c002681e:	eb e4                	jmp    c0026804 <Vm::faultHandler(regs*)+0x704>
c0026820:	31 c0                	xor    eax,eax
c0026822:	83 c4 2c             	add    esp,0x2c
c0026825:	5b                   	pop    ebx
c0026826:	5e                   	pop    esi
c0026827:	5f                   	pop    edi
c0026828:	5d                   	pop    ebp
c0026829:	c3                   	ret    

c002682a <noCopro(unsigned long)>:
c002682a:	c3                   	ret    

c002682b <nmiHandler(regs*, void*)>:
c002682b:	83 ec 0c             	sub    esp,0xc
c002682e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026833:	83 ec 0c             	sub    esp,0xc
c0026836:	50                   	push   eax
c0026837:	e8 64 f4 fe ff       	call   c0015ca0 <Computer::handleNMI()>
c002683c:	83 c4 10             	add    esp,0x10
c002683f:	90                   	nop
c0026840:	83 c4 0c             	add    esp,0xc
c0026843:	c3                   	ret    

c0026844 <doubleFault(regs*, void*)>:
c0026844:	55                   	push   ebp
c0026845:	89 e5                	mov    ebp,esp
c0026847:	83 ec 08             	sub    esp,0x8
c002684a:	83 ec 0c             	sub    esp,0xc
c002684d:	68 b8 31 03 c0       	push   0xc00331b8
c0026852:	e8 13 9a ff ff       	call   c002026a <KePanic(char const*)>
c0026857:	83 c4 10             	add    esp,0x10
c002685a:	90                   	nop
c002685b:	c9                   	leave  
c002685c:	c3                   	ret    

c002685d <displayDebugInfo(regs*)>:
c002685d:	83 ec 1c             	sub    esp,0x1c
c0026860:	0f 20 c0             	mov    eax,cr0
c0026863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026867:	0f 20 d0             	mov    eax,cr2
c002686a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002686e:	0f 20 d8             	mov    eax,cr3
c0026871:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026875:	0f 20 e0             	mov    eax,cr4
c0026878:	89 04 24             	mov    DWORD PTR [esp],eax
c002687b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002687f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026882:	83 ec 08             	sub    esp,0x8
c0026885:	50                   	push   eax
c0026886:	68 d4 31 03 c0       	push   0xc00331d4
c002688b:	e8 52 2a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026890:	83 c4 10             	add    esp,0x10
c0026893:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026897:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c002689a:	83 ec 08             	sub    esp,0x8
c002689d:	50                   	push   eax
c002689e:	68 c5 31 03 c0       	push   0xc00331c5
c00268a3:	e8 3a 2a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00268a8:	83 c4 10             	add    esp,0x10
c00268ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268af:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00268b2:	83 ec 08             	sub    esp,0x8
c00268b5:	50                   	push   eax
c00268b6:	68 d0 31 03 c0       	push   0xc00331d0
c00268bb:	e8 22 2a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00268c0:	83 c4 10             	add    esp,0x10
c00268c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00268ca:	83 ec 08             	sub    esp,0x8
c00268cd:	50                   	push   eax
c00268ce:	68 df 31 03 c0       	push   0xc00331df
c00268d3:	e8 0a 2a ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00268d8:	83 c4 10             	add    esp,0x10
c00268db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00268df:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00268e2:	83 ec 08             	sub    esp,0x8
c00268e5:	50                   	push   eax
c00268e6:	68 ea 31 03 c0       	push   0xc00331ea
c00268eb:	e8 f2 29 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00268f0:	83 c4 10             	add    esp,0x10
c00268f3:	83 ec 08             	sub    esp,0x8
c00268f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00268fa:	68 f5 31 03 c0       	push   0xc00331f5
c00268ff:	e8 de 29 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026904:	83 c4 10             	add    esp,0x10
c0026907:	83 ec 08             	sub    esp,0x8
c002690a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002690e:	68 00 32 03 c0       	push   0xc0033200
c0026913:	e8 ca 29 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026918:	83 c4 10             	add    esp,0x10
c002691b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002691f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026922:	c1 e0 05             	shl    eax,0x5
c0026925:	8d 90 a0 45 03 c0    	lea    edx,[eax-0x3ffcba60]
c002692b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002692f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026932:	83 ec 04             	sub    esp,0x4
c0026935:	52                   	push   edx
c0026936:	50                   	push   eax
c0026937:	68 0b 32 03 c0       	push   0xc003320b
c002693c:	e8 a1 29 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026941:	83 c4 10             	add    esp,0x10
c0026944:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026949:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002694f:	83 ec 0c             	sub    esp,0xc
c0026952:	50                   	push   eax
c0026953:	e8 ef 07 ff ff       	call   c0017147 <setActiveTerminal(VgaText*)>
c0026958:	83 c4 10             	add    esp,0x10
c002695b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026960:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026966:	83 ec 08             	sub    esp,0x8
c0026969:	68 1a 32 03 c0       	push   0xc003321a
c002696e:	50                   	push   eax
c002696f:	e8 10 0b ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026974:	83 c4 10             	add    esp,0x10
c0026977:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002697c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026982:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026986:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026989:	83 ec 08             	sub    esp,0x8
c002698c:	52                   	push   edx
c002698d:	50                   	push   eax
c002698e:	e8 ab 0a ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026993:	83 c4 10             	add    esp,0x10
c0026996:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002699b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269a1:	83 ec 08             	sub    esp,0x8
c00269a4:	68 28 32 03 c0       	push   0xc0033228
c00269a9:	50                   	push   eax
c00269aa:	e8 d5 0a ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00269af:	83 c4 10             	add    esp,0x10
c00269b2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269bd:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00269c2:	8b 12                	mov    edx,DWORD PTR [edx]
c00269c4:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00269c7:	83 c2 0c             	add    edx,0xc
c00269ca:	83 ec 08             	sub    esp,0x8
c00269cd:	52                   	push   edx
c00269ce:	50                   	push   eax
c00269cf:	e8 b0 0a ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00269d4:	83 c4 10             	add    esp,0x10
c00269d7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269e2:	83 ec 08             	sub    esp,0x8
c00269e5:	68 31 32 03 c0       	push   0xc0033231
c00269ea:	50                   	push   eax
c00269eb:	e8 94 0a ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00269f0:	83 c4 10             	add    esp,0x10
c00269f3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a02:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0026a05:	83 ec 08             	sub    esp,0x8
c0026a08:	52                   	push   edx
c0026a09:	50                   	push   eax
c0026a0a:	e8 2f 0a ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026a0f:	83 c4 10             	add    esp,0x10
c0026a12:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a1d:	83 ec 08             	sub    esp,0x8
c0026a20:	68 39 32 03 c0       	push   0xc0033239
c0026a25:	50                   	push   eax
c0026a26:	e8 59 0a ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026a2b:	83 c4 10             	add    esp,0x10
c0026a2e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a3d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026a40:	83 ec 08             	sub    esp,0x8
c0026a43:	52                   	push   edx
c0026a44:	50                   	push   eax
c0026a45:	e8 f4 09 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026a4a:	83 c4 10             	add    esp,0x10
c0026a4d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a58:	83 ec 08             	sub    esp,0x8
c0026a5b:	68 41 32 03 c0       	push   0xc0033241
c0026a60:	50                   	push   eax
c0026a61:	e8 1e 0a ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026a66:	83 c4 10             	add    esp,0x10
c0026a69:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026a78:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026a7b:	83 ec 08             	sub    esp,0x8
c0026a7e:	52                   	push   edx
c0026a7f:	50                   	push   eax
c0026a80:	e8 b9 09 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026a85:	83 c4 10             	add    esp,0x10
c0026a88:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a93:	83 ec 08             	sub    esp,0x8
c0026a96:	68 49 32 03 c0       	push   0xc0033249
c0026a9b:	50                   	push   eax
c0026a9c:	e8 e3 09 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026aa1:	83 c4 10             	add    esp,0x10
c0026aa4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026aa9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026aaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026ab3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026ab6:	83 ec 08             	sub    esp,0x8
c0026ab9:	52                   	push   edx
c0026aba:	50                   	push   eax
c0026abb:	e8 7e 09 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026ac0:	83 c4 10             	add    esp,0x10
c0026ac3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ac8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026ace:	83 ec 08             	sub    esp,0x8
c0026ad1:	68 51 32 03 c0       	push   0xc0033251
c0026ad6:	50                   	push   eax
c0026ad7:	e8 a8 09 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026adc:	83 c4 10             	add    esp,0x10
c0026adf:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026ae4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026aea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026aee:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0026af1:	83 ec 08             	sub    esp,0x8
c0026af4:	52                   	push   edx
c0026af5:	50                   	push   eax
c0026af6:	e8 43 09 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026afb:	83 c4 10             	add    esp,0x10
c0026afe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b09:	83 ec 08             	sub    esp,0x8
c0026b0c:	68 59 32 03 c0       	push   0xc0033259
c0026b11:	50                   	push   eax
c0026b12:	e8 6d 09 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026b17:	83 c4 10             	add    esp,0x10
c0026b1a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b25:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026b29:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0026b2c:	83 ec 08             	sub    esp,0x8
c0026b2f:	52                   	push   edx
c0026b30:	50                   	push   eax
c0026b31:	e8 08 09 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026b36:	83 c4 10             	add    esp,0x10
c0026b39:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b44:	83 ec 08             	sub    esp,0x8
c0026b47:	68 61 32 03 c0       	push   0xc0033261
c0026b4c:	50                   	push   eax
c0026b4d:	e8 32 09 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026b52:	83 c4 10             	add    esp,0x10
c0026b55:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b60:	83 ec 08             	sub    esp,0x8
c0026b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026b67:	50                   	push   eax
c0026b68:	e8 d1 08 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026b6d:	83 c4 10             	add    esp,0x10
c0026b70:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b7b:	83 ec 08             	sub    esp,0x8
c0026b7e:	68 6a 32 03 c0       	push   0xc003326a
c0026b83:	50                   	push   eax
c0026b84:	e8 fb 08 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026b89:	83 c4 10             	add    esp,0x10
c0026b8c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026b91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b97:	83 ec 08             	sub    esp,0x8
c0026b9a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026b9e:	50                   	push   eax
c0026b9f:	e8 9a 08 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026ba4:	83 c4 10             	add    esp,0x10
c0026ba7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bb2:	83 ec 08             	sub    esp,0x8
c0026bb5:	68 72 32 03 c0       	push   0xc0033272
c0026bba:	50                   	push   eax
c0026bbb:	e8 c4 08 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0026bc0:	83 c4 10             	add    esp,0x10
c0026bc3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026bc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026bce:	83 ec 08             	sub    esp,0x8
c0026bd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026bd5:	50                   	push   eax
c0026bd6:	e8 63 08 ff ff       	call   c001743e <VgaText::putx(unsigned int)>
c0026bdb:	83 c4 10             	add    esp,0x10
c0026bde:	fa                   	cli    
c0026bdf:	f4                   	hlt    
c0026be0:	eb fe                	jmp    c0026be0 <displayDebugInfo(regs*)+0x383>

c0026be2 <HalSystemIdle()>:
c0026be2:	56                   	push   esi
c0026be3:	53                   	push   ebx
c0026be4:	83 ec 14             	sub    esp,0x14
c0026be7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026bec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026bf2:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026bf8:	83 e0 04             	and    eax,0x4
c0026bfb:	0f b6 c0             	movzx  eax,al
c0026bfe:	85 c0                	test   eax,eax
c0026c00:	0f 95 c0             	setne  al
c0026c03:	0f b6 c0             	movzx  eax,al
c0026c06:	85 c0                	test   eax,eax
c0026c08:	74 4c                	je     c0026c56 <HalSystemIdle()+0x74>
c0026c0a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026c0f:	83 ec 08             	sub    esp,0x8
c0026c12:	68 e1 00 00 00       	push   0xe1
c0026c17:	50                   	push   eax
c0026c18:	e8 8f ee fe ff       	call   c0015aac <Computer::rdmsr(unsigned int)>
c0026c1d:	83 c4 10             	add    esp,0x10
c0026c20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026c28:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026c2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026c31:	83 e2 02             	and    edx,0x2
c0026c34:	89 d3                	mov    ebx,edx
c0026c36:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026c3a:	83 e2 00             	and    edx,0x0
c0026c3d:	89 d6                	mov    esi,edx
c0026c3f:	56                   	push   esi
c0026c40:	53                   	push   ebx
c0026c41:	68 e1 00 00 00       	push   0xe1
c0026c46:	50                   	push   eax
c0026c47:	e8 8c ee fe ff       	call   c0015ad8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026c4c:	83 c4 10             	add    esp,0x10
c0026c4f:	e8 40 95 fd ff       	call   c0000194 <doTPAUSE>
c0026c54:	eb 01                	jmp    c0026c57 <HalSystemIdle()+0x75>
c0026c56:	f4                   	hlt    
c0026c57:	90                   	nop
c0026c58:	83 c4 14             	add    esp,0x14
c0026c5b:	5b                   	pop    ebx
c0026c5c:	5e                   	pop    esi
c0026c5d:	c3                   	ret    

c0026c5e <displayProgramFault(char const*)>:
c0026c5e:	83 ec 0c             	sub    esp,0xc
c0026c61:	83 ec 0c             	sub    esp,0xc
c0026c64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c68:	e8 75 26 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026c6d:	83 c4 10             	add    esp,0x10
c0026c70:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c77:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c7a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c80:	85 c0                	test   eax,eax
c0026c82:	74 21                	je     c0026ca5 <displayProgramFault(char const*)+0x47>
c0026c84:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026c94:	6a 04                	push   0x4
c0026c96:	6a 0f                	push   0xf
c0026c98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026c9c:	50                   	push   eax
c0026c9d:	e8 54 08 ff ff       	call   c00174f6 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026ca2:	83 c4 10             	add    esp,0x10
c0026ca5:	90                   	nop
c0026ca6:	83 c4 0c             	add    esp,0xc
c0026ca9:	c3                   	ret    

c0026caa <gpFault(regs*, void*)>:
c0026caa:	83 ec 1c             	sub    esp,0x1c
c0026cad:	c7 05 74 02 04 c0 00 61 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0026100
c0026cb7:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026cbc:	85 c0                	test   eax,eax
c0026cbe:	74 1e                	je     c0026cde <gpFault(regs*, void*)+0x34>
c0026cc0:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026cc5:	83 ec 0c             	sub    esp,0xc
c0026cc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026ccc:	ff d0                	call   eax
c0026cce:	83 c4 10             	add    esp,0x10
c0026cd1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026cd5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026cda:	85 c0                	test   eax,eax
c0026cdc:	75 2e                	jne    c0026d0c <gpFault(regs*, void*)+0x62>
c0026cde:	83 ec 0c             	sub    esp,0xc
c0026ce1:	68 7a 32 03 c0       	push   0xc003327a
c0026ce6:	e8 73 ff ff ff       	call   c0026c5e <displayProgramFault(char const*)>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	83 ec 0c             	sub    esp,0xc
c0026cf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026cf5:	e8 63 fb ff ff       	call   c002685d <displayDebugInfo(regs*)>
c0026cfa:	83 c4 10             	add    esp,0x10
c0026cfd:	83 ec 0c             	sub    esp,0xc
c0026d00:	6a 00                	push   0x0
c0026d02:	e8 25 ee ff ff       	call   c0025b2c <Thr::terminateFromIRQ(int)>
c0026d07:	83 c4 10             	add    esp,0x10
c0026d0a:	eb 01                	jmp    c0026d0d <gpFault(regs*, void*)+0x63>
c0026d0c:	90                   	nop
c0026d0d:	83 c4 1c             	add    esp,0x1c
c0026d10:	c3                   	ret    

c0026d11 <pgFault(regs*, void*)>:
c0026d11:	83 ec 1c             	sub    esp,0x1c
c0026d14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026d18:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026d1b:	0f 20 d0             	mov    eax,cr2
c0026d1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026d26:	83 ec 04             	sub    esp,0x4
c0026d29:	52                   	push   edx
c0026d2a:	50                   	push   eax
c0026d2b:	68 58 33 03 c0       	push   0xc0033358
c0026d30:	e8 ad 25 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026d35:	83 c4 10             	add    esp,0x10
c0026d38:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026d3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026d42:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026d48:	0f 20 d2             	mov    edx,cr2
c0026d4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026d4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026d53:	83 ec 08             	sub    esp,0x8
c0026d56:	52                   	push   edx
c0026d57:	50                   	push   eax
c0026d58:	e8 f5 1f ff ff       	call   c0018d52 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026d5d:	83 c4 10             	add    esp,0x10
c0026d60:	0f b6 c0             	movzx  eax,al
c0026d63:	85 c0                	test   eax,eax
c0026d65:	75 2e                	jne    c0026d95 <pgFault(regs*, void*)+0x84>
c0026d67:	83 ec 0c             	sub    esp,0xc
c0026d6a:	68 93 32 03 c0       	push   0xc0033293
c0026d6f:	e8 ea fe ff ff       	call   c0026c5e <displayProgramFault(char const*)>
c0026d74:	83 c4 10             	add    esp,0x10
c0026d77:	83 ec 0c             	sub    esp,0xc
c0026d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026d7e:	e8 da fa ff ff       	call   c002685d <displayDebugInfo(regs*)>
c0026d83:	83 c4 10             	add    esp,0x10
c0026d86:	83 ec 0c             	sub    esp,0xc
c0026d89:	6a 00                	push   0x0
c0026d8b:	e8 9c ed ff ff       	call   c0025b2c <Thr::terminateFromIRQ(int)>
c0026d90:	83 c4 10             	add    esp,0x10
c0026d93:	eb 01                	jmp    c0026d96 <pgFault(regs*, void*)+0x85>
c0026d95:	90                   	nop
c0026d96:	83 c4 1c             	add    esp,0x1c
c0026d99:	c3                   	ret    

c0026d9a <otherISRHandler(regs*, void*)>:
c0026d9a:	83 ec 0c             	sub    esp,0xc
c0026d9d:	83 ec 0c             	sub    esp,0xc
c0026da0:	68 80 33 03 c0       	push   0xc0033380
c0026da5:	e8 b4 fe ff ff       	call   c0026c5e <displayProgramFault(char const*)>
c0026daa:	83 c4 10             	add    esp,0x10
c0026dad:	83 ec 0c             	sub    esp,0xc
c0026db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026db4:	e8 a4 fa ff ff       	call   c002685d <displayDebugInfo(regs*)>
c0026db9:	83 c4 10             	add    esp,0x10
c0026dbc:	83 ec 0c             	sub    esp,0xc
c0026dbf:	6a 00                	push   0x0
c0026dc1:	e8 66 ed ff ff       	call   c0025b2c <Thr::terminateFromIRQ(int)>
c0026dc6:	83 c4 10             	add    esp,0x10
c0026dc9:	90                   	nop
c0026dca:	83 c4 0c             	add    esp,0xc
c0026dcd:	c3                   	ret    

c0026dce <opcodeFault(regs*, void*)>:
c0026dce:	55                   	push   ebp
c0026dcf:	89 e5                	mov    ebp,esp
c0026dd1:	83 ec 08             	sub    esp,0x8
c0026dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026dd7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026dda:	83 ec 08             	sub    esp,0x8
c0026ddd:	50                   	push   eax
c0026dde:	68 9e 32 03 c0       	push   0xc003329e
c0026de3:	e8 fa 24 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026de8:	83 c4 10             	add    esp,0x10
c0026deb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026df0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026df6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026dfc:	0f b6 c0             	movzx  eax,al
c0026dff:	85 c0                	test   eax,eax
c0026e01:	74 21                	je     c0026e24 <opcodeFault(regs*, void*)+0x56>
c0026e03:	83 ec 0c             	sub    esp,0xc
c0026e06:	68 a8 33 03 c0       	push   0xc00333a8
c0026e0b:	e8 d2 24 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026e10:	83 c4 10             	add    esp,0x10
c0026e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e16:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026e19:	8d 50 19             	lea    edx,[eax+0x19]
c0026e1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026e1f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026e22:	eb 2b                	jmp    c0026e4f <opcodeFault(regs*, void*)+0x81>
c0026e24:	83 ec 0c             	sub    esp,0xc
c0026e27:	68 ac 32 03 c0       	push   0xc00332ac
c0026e2c:	e8 2d fe ff ff       	call   c0026c5e <displayProgramFault(char const*)>
c0026e31:	83 c4 10             	add    esp,0x10
c0026e34:	83 ec 0c             	sub    esp,0xc
c0026e37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e3a:	e8 1e fa ff ff       	call   c002685d <displayDebugInfo(regs*)>
c0026e3f:	83 c4 10             	add    esp,0x10
c0026e42:	83 ec 0c             	sub    esp,0xc
c0026e45:	6a 00                	push   0x0
c0026e47:	e8 e0 ec ff ff       	call   c0025b2c <Thr::terminateFromIRQ(int)>
c0026e4c:	83 c4 10             	add    esp,0x10
c0026e4f:	c9                   	leave  
c0026e50:	c3                   	ret    

c0026e51 <i386SaveCoprocessor(void*)>:
c0026e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e55:	83 c0 3f             	add    eax,0x3f
c0026e58:	83 e0 c0             	and    eax,0xffffffc0
c0026e5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e5f:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026e65 <i386LoadCoprocessor(void*)>:
c0026e65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026e69:	83 c0 3f             	add    eax,0x3f
c0026e6c:	83 e0 c0             	and    eax,0xffffffc0
c0026e6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026e73:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026e79 <x87EmulHandler(regs*, void*)>:
c0026e79:	53                   	push   ebx
c0026e7a:	83 ec 08             	sub    esp,0x8
c0026e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026e82:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026e86:	74 10                	je     c0026e98 <x87EmulHandler(regs*, void*)+0x1f>
c0026e88:	83 ec 0c             	sub    esp,0xc
c0026e8b:	68 b9 32 03 c0       	push   0xc00332b9
c0026e90:	e8 d5 93 ff ff       	call   c002026a <KePanic(char const*)>
c0026e95:	83 c4 10             	add    esp,0x10
c0026e98:	0f 20 c0             	mov    eax,cr0
c0026e9b:	a8 08                	test   al,0x8
c0026e9d:	74 59                	je     c0026ef8 <x87EmulHandler(regs*, void*)+0x7f>
c0026e9f:	0f 06                	clts   
c0026ea1:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026ea6:	85 c0                	test   eax,eax
c0026ea8:	74 0e                	je     c0026eb8 <x87EmulHandler(regs*, void*)+0x3f>
c0026eaa:	83 ec 0c             	sub    esp,0xc
c0026ead:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026eb0:	e8 9c ff ff ff       	call   c0026e51 <i386SaveCoprocessor(void*)>
c0026eb5:	83 c4 10             	add    esp,0x10
c0026eb8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026ebe:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026ec2:	75 12                	jne    c0026ed6 <x87EmulHandler(regs*, void*)+0x5d>
c0026ec4:	83 ec 0c             	sub    esp,0xc
c0026ec7:	68 40 02 00 00       	push   0x240
c0026ecc:	e8 ca f5 fe ff       	call   c001649b <malloc>
c0026ed1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026ed4:	eb 10                	jmp    c0026ee6 <x87EmulHandler(regs*, void*)+0x6d>
c0026ed6:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026edb:	83 ec 0c             	sub    esp,0xc
c0026ede:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026ee1:	e8 7f ff ff ff       	call   c0026e65 <i386LoadCoprocessor(void*)>
c0026ee6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026eeb:	83 c4 10             	add    esp,0x10
c0026eee:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026ef3:	83 c4 08             	add    esp,0x8
c0026ef6:	5b                   	pop    ebx
c0026ef7:	c3                   	ret    
c0026ef8:	83 ec 0c             	sub    esp,0xc
c0026efb:	68 cd 32 03 c0       	push   0xc00332cd
c0026f00:	e8 dd 23 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026f05:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026f0d:	83 c4 18             	add    esp,0x18
c0026f10:	5b                   	pop    ebx
c0026f11:	e9 16 ec ff ff       	jmp    c0025b2c <Thr::terminateFromIRQ(int)>

c0026f16 <HalInitialiseCoprocessor()>:
c0026f16:	83 ec 10             	sub    esp,0x10
c0026f19:	6a 00                	push   0x0
c0026f1b:	68 79 6e 02 c0       	push   0xc0026e79
c0026f20:	6a 07                	push   0x7
c0026f22:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026f2c:	e8 91 49 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026f31:	e8 0a 71 00 00       	call   c002e040 <avxDetect>
c0026f36:	83 c4 10             	add    esp,0x10
c0026f39:	85 c0                	test   eax,eax
c0026f3b:	74 1c                	je     c0026f59 <HalInitialiseCoprocessor()+0x43>
c0026f3d:	c7 05 70 02 04 c0 6a e0 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e06a
c0026f47:	c7 05 6c 02 04 c0 7b e0 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e07b
c0026f51:	83 c4 0c             	add    esp,0xc
c0026f54:	e9 33 71 00 00       	jmp    c002e08c <avxInit>
c0026f59:	e8 52 74 00 00       	call   c002e3b0 <sseDetect>
c0026f5e:	85 c0                	test   eax,eax
c0026f60:	74 1c                	je     c0026f7e <HalInitialiseCoprocessor()+0x68>
c0026f62:	c7 05 70 02 04 c0 c8 e3 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e3c8
c0026f6c:	c7 05 6c 02 04 c0 d0 e3 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e3d0
c0026f76:	83 c4 0c             	add    esp,0xc
c0026f79:	e9 5a 74 00 00       	jmp    c002e3d8 <sseInit>
c0026f7e:	e8 73 74 00 00       	call   c002e3f6 <x87Detect>
c0026f83:	85 c0                	test   eax,eax
c0026f85:	74 1c                	je     c0026fa3 <HalInitialiseCoprocessor()+0x8d>
c0026f87:	c7 05 70 02 04 c0 11 e4 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e411
c0026f91:	c7 05 6c 02 04 c0 18 e4 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e418
c0026f9b:	83 c4 0c             	add    esp,0xc
c0026f9e:	e9 7c 74 00 00       	jmp    c002e41f <x87Init>
c0026fa3:	c7 05 70 02 04 c0 2a 68 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002682a
c0026fad:	c7 05 6c 02 04 c0 2a 68 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002682a
c0026fb7:	0f 20 c0             	mov    eax,cr0
c0026fba:	83 c8 04             	or     eax,0x4
c0026fbd:	0f 22 c0             	mov    cr0,eax
c0026fc0:	83 c4 0c             	add    esp,0xc
c0026fc3:	c3                   	ret    

c0026fc4 <HalPanic(char const*)>:
c0026fc4:	53                   	push   ebx
c0026fc5:	83 ec 10             	sub    esp,0x10
c0026fc8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026fcc:	fa                   	cli    
c0026fcd:	53                   	push   ebx
c0026fce:	68 e3 32 03 c0       	push   0xc00332e3
c0026fd3:	e8 0a 23 ff ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0026fd8:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026fdd:	83 c4 10             	add    esp,0x10
c0026fe0:	85 c0                	test   eax,eax
c0026fe2:	74 09                	je     c0026fed <HalPanic(char const*)+0x29>
c0026fe4:	83 ec 0c             	sub    esp,0xc
c0026fe7:	53                   	push   ebx
c0026fe8:	ff d0                	call   eax
c0026fea:	83 c4 10             	add    esp,0x10
c0026fed:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026ff2:	85 c0                	test   eax,eax
c0026ff4:	0f 84 dc 00 00 00    	je     c00270d6 <HalPanic(char const*)+0x112>
c0026ffa:	52                   	push   edx
c0026ffb:	6a 01                	push   0x1
c0026ffd:	6a 0f                	push   0xf
c0026fff:	50                   	push   eax
c0027000:	e8 9d ff fe ff       	call   c0016fa2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027005:	59                   	pop    ecx
c0027006:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002700c:	e8 81 01 ff ff       	call   c0017192 <VgaText::clearScreen()>
c0027011:	58                   	pop    eax
c0027012:	5a                   	pop    edx
c0027013:	68 c0 13 03 c0       	push   0xc00313c0
c0027018:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002701e:	e8 b7 ff fe ff       	call   c0016fda <VgaText::setTitle(char*)>
c0027023:	83 c4 0c             	add    esp,0xc
c0027026:	6a 01                	push   0x1
c0027028:	6a 0f                	push   0xf
c002702a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027030:	e8 6d ff fe ff       	call   c0016fa2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027035:	59                   	pop    ecx
c0027036:	58                   	pop    eax
c0027037:	68 fc 32 03 c0       	push   0xc00332fc
c002703c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027042:	e8 3d 04 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c0027047:	83 c4 0c             	add    esp,0xc
c002704a:	6a 0f                	push   0xf
c002704c:	6a 01                	push   0x1
c002704e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027054:	e8 49 ff fe ff       	call   c0016fa2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0027059:	58                   	pop    eax
c002705a:	5a                   	pop    edx
c002705b:	68 05 33 03 c0       	push   0xc0033305
c0027060:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027066:	e8 19 04 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c002706b:	83 c4 0c             	add    esp,0xc
c002706e:	6a 01                	push   0x1
c0027070:	6a 0f                	push   0xf
c0027072:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0027078:	e8 25 ff fe ff       	call   c0016fa2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c002707d:	59                   	pop    ecx
c002707e:	58                   	pop    eax
c002707f:	68 49 33 03 c0       	push   0xc0033349
c0027084:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002708a:	e8 f5 03 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c002708f:	58                   	pop    eax
c0027090:	5a                   	pop    edx
c0027091:	68 12 33 03 c0       	push   0xc0033312
c0027096:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002709c:	e8 e3 03 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00270a1:	59                   	pop    ecx
c00270a2:	58                   	pop    eax
c00270a3:	68 4c 33 03 c0       	push   0xc003334c
c00270a8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00270ae:	e8 d1 03 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00270b3:	58                   	pop    eax
c00270b4:	5a                   	pop    edx
c00270b5:	53                   	push   ebx
c00270b6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00270bc:	e8 c3 03 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00270c1:	59                   	pop    ecx
c00270c2:	5b                   	pop    ebx
c00270c3:	68 49 33 03 c0       	push   0xc0033349
c00270c8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c00270ce:	e8 b1 03 ff ff       	call   c0017484 <VgaText::puts(char const*)>
c00270d3:	83 c4 10             	add    esp,0x10
c00270d6:	eb fe                	jmp    c00270d6 <HalPanic(char const*)+0x112>

c00270d8 <HalQueryPerformanceCounter()>:
c00270d8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00270dd:	31 d2                	xor    edx,edx
c00270df:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00270e5:	31 c0                	xor    eax,eax
c00270e7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00270ee:	74 02                	je     c00270f2 <HalQueryPerformanceCounter()+0x1a>
c00270f0:	0f 31                	rdtsc  
c00270f2:	c3                   	ret    

c00270f3 <HalInitialise()>:
c00270f3:	53                   	push   ebx
c00270f4:	83 ec 08             	sub    esp,0x8
c00270f7:	e8 fd 49 ff ff       	call   c001baf9 <setupINTS()>
c00270fc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027101:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0027108:	75 0f                	jne    c0027119 <HalInitialise()+0x26>
c002710a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027110:	83 e2 fe             	and    edx,0xfffffffe
c0027113:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0027119:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0027120:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0027126:	83 e2 fe             	and    edx,0xfffffffe
c0027129:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c002712f:	e8 a0 02 00 00       	call   c00273d4 <picOpen()>
c0027134:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c002713b:	74 0a                	je     c0027147 <HalInitialise()+0x54>
c002713d:	e8 e2 01 00 00       	call   c0027324 <picDisable()>
c0027142:	e8 63 68 00 00       	call   c002d9aa <apicOpen()>
c0027147:	50                   	push   eax
c0027148:	bb 0f 00 00 00       	mov    ebx,0xf
c002714d:	6a 00                	push   0x0
c002714f:	68 9a 6d 02 c0       	push   0xc0026d9a
c0027154:	6a 00                	push   0x0
c0027156:	e8 67 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002715b:	83 c4 0c             	add    esp,0xc
c002715e:	6a 00                	push   0x0
c0027160:	68 9a 6d 02 c0       	push   0xc0026d9a
c0027165:	6a 01                	push   0x1
c0027167:	e8 56 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002716c:	83 c4 0c             	add    esp,0xc
c002716f:	6a 00                	push   0x0
c0027171:	68 2b 68 02 c0       	push   0xc002682b
c0027176:	6a 02                	push   0x2
c0027178:	e8 45 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002717d:	83 c4 0c             	add    esp,0xc
c0027180:	6a 00                	push   0x0
c0027182:	68 9a 6d 02 c0       	push   0xc0026d9a
c0027187:	6a 03                	push   0x3
c0027189:	e8 34 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002718e:	83 c4 0c             	add    esp,0xc
c0027191:	6a 00                	push   0x0
c0027193:	68 9a 6d 02 c0       	push   0xc0026d9a
c0027198:	6a 04                	push   0x4
c002719a:	e8 23 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c002719f:	83 c4 0c             	add    esp,0xc
c00271a2:	6a 00                	push   0x0
c00271a4:	68 9a 6d 02 c0       	push   0xc0026d9a
c00271a9:	6a 05                	push   0x5
c00271ab:	e8 12 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271b0:	83 c4 0c             	add    esp,0xc
c00271b3:	6a 00                	push   0x0
c00271b5:	68 ce 6d 02 c0       	push   0xc0026dce
c00271ba:	6a 06                	push   0x6
c00271bc:	e8 01 47 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271c1:	83 c4 0c             	add    esp,0xc
c00271c4:	6a 00                	push   0x0
c00271c6:	68 44 68 02 c0       	push   0xc0026844
c00271cb:	6a 08                	push   0x8
c00271cd:	e8 f0 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271d2:	83 c4 0c             	add    esp,0xc
c00271d5:	6a 00                	push   0x0
c00271d7:	68 9a 6d 02 c0       	push   0xc0026d9a
c00271dc:	6a 09                	push   0x9
c00271de:	e8 df 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271e3:	83 c4 0c             	add    esp,0xc
c00271e6:	6a 00                	push   0x0
c00271e8:	68 9a 6d 02 c0       	push   0xc0026d9a
c00271ed:	6a 0a                	push   0xa
c00271ef:	e8 ce 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00271f4:	83 c4 0c             	add    esp,0xc
c00271f7:	6a 00                	push   0x0
c00271f9:	68 9a 6d 02 c0       	push   0xc0026d9a
c00271fe:	6a 0b                	push   0xb
c0027200:	e8 bd 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027205:	83 c4 0c             	add    esp,0xc
c0027208:	6a 00                	push   0x0
c002720a:	68 aa 6c 02 c0       	push   0xc0026caa
c002720f:	6a 0d                	push   0xd
c0027211:	e8 ac 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027216:	83 c4 0c             	add    esp,0xc
c0027219:	6a 00                	push   0x0
c002721b:	68 11 6d 02 c0       	push   0xc0026d11
c0027220:	6a 0e                	push   0xe
c0027222:	e8 9b 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027227:	83 c4 10             	add    esp,0x10
c002722a:	50                   	push   eax
c002722b:	6a 00                	push   0x0
c002722d:	68 9a 6d 02 c0       	push   0xc0026d9a
c0027232:	53                   	push   ebx
c0027233:	43                   	inc    ebx
c0027234:	e8 89 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027239:	83 c4 10             	add    esp,0x10
c002723c:	83 fb 1e             	cmp    ebx,0x1e
c002723f:	75 e9                	jne    c002722a <HalInitialise()+0x137>
c0027241:	50                   	push   eax
c0027242:	6a 00                	push   0x0
c0027244:	68 34 1b 02 c0       	push   0xc0021b34
c0027249:	6a 60                	push   0x60
c002724b:	e8 72 46 ff ff       	call   c001b8c2 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027250:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027255:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c002725f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027266:	e8 30 f2 fe ff       	call   c001649b <malloc>
c002726b:	89 04 24             	mov    DWORD PTR [esp],eax
c002726e:	89 c3                	mov    ebx,eax
c0027270:	e8 37 09 00 00       	call   c0027bac <RTC::RTC()>
c0027275:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c002727f:	5a                   	pop    edx
c0027280:	59                   	pop    ecx
c0027281:	53                   	push   ebx
c0027282:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027288:	e8 eb 40 ff ff       	call   c001b378 <Device::addChild(Device*)>
c002728d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002728f:	6a 00                	push   0x0
c0027291:	6a 00                	push   0x0
c0027293:	6a 00                	push   0x0
c0027295:	53                   	push   ebx
c0027296:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027299:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002729e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00272a4:	83 c4 28             	add    esp,0x28
c00272a7:	5b                   	pop    ebx
c00272a8:	c3                   	ret    

c00272a9 <HalMakeBeep(int)>:
c00272a9:	53                   	push   ebx
c00272aa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00272ae:	85 db                	test   ebx,ebx
c00272b0:	75 07                	jne    c00272b9 <HalMakeBeep(int)+0x10>
c00272b2:	e4 61                	in     al,0x61
c00272b4:	83 e0 fc             	and    eax,0xfffffffc
c00272b7:	eb 26                	jmp    c00272df <HalMakeBeep(int)+0x36>
c00272b9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00272be:	99                   	cdq    
c00272bf:	f7 fb                	idiv   ebx
c00272c1:	89 c1                	mov    ecx,eax
c00272c3:	b0 b6                	mov    al,0xb6
c00272c5:	e6 43                	out    0x43,al
c00272c7:	88 c8                	mov    al,cl
c00272c9:	e6 42                	out    0x42,al
c00272cb:	89 c8                	mov    eax,ecx
c00272cd:	c1 e8 08             	shr    eax,0x8
c00272d0:	e6 42                	out    0x42,al
c00272d2:	e4 61                	in     al,0x61
c00272d4:	89 c2                	mov    edx,eax
c00272d6:	83 ca 03             	or     edx,0x3
c00272d9:	38 d0                	cmp    al,dl
c00272db:	74 04                	je     c00272e1 <HalMakeBeep(int)+0x38>
c00272dd:	88 d0                	mov    al,dl
c00272df:	e6 61                	out    0x61,al
c00272e1:	5b                   	pop    ebx
c00272e2:	c3                   	ret    

c00272e3 <HalGetRand()>:
c00272e3:	31 c0                	xor    eax,eax
c00272e5:	c3                   	ret    

c00272e6 <HalEndOfInterrupt(int)>:
c00272e6:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00272ed:	74 23                	je     c0027312 <HalEndOfInterrupt(int)+0x2c>
c00272ef:	83 ec 14             	sub    esp,0x14
c00272f2:	6a 1b                	push   0x1b
c00272f4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00272fa:	e8 ad e7 fe ff       	call   c0015aac <Computer::rdmsr(unsigned int)>
c00272ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0027304:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c002730e:	83 c4 1c             	add    esp,0x1c
c0027311:	c3                   	ret    
c0027312:	e9 41 02 00 00       	jmp    c0027558 <picEOI(int)>

c0027317 <HalRestart()>:
c0027317:	c3                   	ret    

c0027318 <HalShutdown()>:
c0027318:	c3                   	ret    

c0027319 <HalSleep()>:
c0027319:	c3                   	ret    
c002731a:	66 90                	xchg   ax,ax

c002731c <picIoWait()>:
c002731c:	eb 00                	jmp    c002731e <picIoWait()+0x2>
c002731e:	eb 00                	jmp    c0027320 <picIoWait()+0x4>
c0027320:	90                   	nop
c0027321:	c3                   	ret    
c0027322:	66 90                	xchg   ax,ax

c0027324 <picDisable()>:
c0027324:	83 ec 10             	sub    esp,0x10
c0027327:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c002732e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0027333:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027337:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002733c:	ee                   	out    dx,al
c002733d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0027344:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027349:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002734d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0027352:	ee                   	out    dx,al
c0027353:	90                   	nop
c0027354:	83 c4 10             	add    esp,0x10
c0027357:	c3                   	ret    

c0027358 <picGetIRQReg(int)>:
c0027358:	83 ec 10             	sub    esp,0x10
c002735b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002735f:	0f b6 c0             	movzx  eax,al
c0027362:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027369:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c002736d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027371:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027376:	ee                   	out    dx,al
c0027377:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002737b:	0f b6 c0             	movzx  eax,al
c002737e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027385:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027389:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002738d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027392:	ee                   	out    dx,al
c0027393:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002739a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002739f:	89 c2                	mov    edx,eax
c00273a1:	ec                   	in     al,dx
c00273a2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00273a6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00273aa:	0f b6 c0             	movzx  eax,al
c00273ad:	c1 e0 08             	shl    eax,0x8
c00273b0:	89 c1                	mov    ecx,eax
c00273b2:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00273b9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00273be:	89 c2                	mov    edx,eax
c00273c0:	ec                   	in     al,dx
c00273c1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00273c5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00273c9:	0f b6 c0             	movzx  eax,al
c00273cc:	09 c8                	or     eax,ecx
c00273ce:	83 c4 10             	add    esp,0x10
c00273d1:	c3                   	ret    
c00273d2:	66 90                	xchg   ax,ax

c00273d4 <picOpen()>:
c00273d4:	83 ec 50             	sub    esp,0x50
c00273d7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00273de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00273e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00273e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00273eb:	ee                   	out    dx,al
c00273ec:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00273f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00273f8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00273fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027400:	ee                   	out    dx,al
c0027401:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0027409:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0027411:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0027418:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002741c:	89 c2                	mov    edx,eax
c002741e:	ec                   	in     al,dx
c002741f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0027423:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027427:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c002742b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0027432:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027436:	89 c2                	mov    edx,eax
c0027438:	ec                   	in     al,dx
c0027439:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002743d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027441:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0027445:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c002744c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027451:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0027455:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027459:	ee                   	out    dx,al
c002745a:	e8 bd fe ff ff       	call   c002731c <picIoWait()>
c002745f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0027466:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c002746b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c002746f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027473:	ee                   	out    dx,al
c0027474:	e8 a3 fe ff ff       	call   c002731c <picIoWait()>
c0027479:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002747d:	0f b6 c0             	movzx  eax,al
c0027480:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027487:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002748b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002748f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027493:	ee                   	out    dx,al
c0027494:	e8 83 fe ff ff       	call   c002731c <picIoWait()>
c0027499:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002749d:	0f b6 c0             	movzx  eax,al
c00274a0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c00274a7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00274ab:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c00274af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00274b3:	ee                   	out    dx,al
c00274b4:	e8 63 fe ff ff       	call   c002731c <picIoWait()>
c00274b9:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c00274c0:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c00274c5:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c00274c9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00274cd:	ee                   	out    dx,al
c00274ce:	e8 49 fe ff ff       	call   c002731c <picIoWait()>
c00274d3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00274da:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00274df:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00274e3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00274e7:	ee                   	out    dx,al
c00274e8:	e8 2f fe ff ff       	call   c002731c <picIoWait()>
c00274ed:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00274f4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00274f9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00274fd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0027501:	ee                   	out    dx,al
c0027502:	e8 15 fe ff ff       	call   c002731c <picIoWait()>
c0027507:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c002750e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0027513:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0027517:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002751b:	ee                   	out    dx,al
c002751c:	e8 fb fd ff ff       	call   c002731c <picIoWait()>
c0027521:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0027526:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c002752d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027531:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027535:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027539:	ee                   	out    dx,al
c002753a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c002753f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0027546:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002754a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c002754e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027552:	ee                   	out    dx,al
c0027553:	90                   	nop
c0027554:	83 c4 50             	add    esp,0x50
c0027557:	c3                   	ret    

c0027558 <picEOI(int)>:
c0027558:	83 ec 10             	sub    esp,0x10
c002755b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027560:	75 1e                	jne    c0027580 <picEOI(int)+0x28>
c0027562:	6a 0b                	push   0xb
c0027564:	e8 ef fd ff ff       	call   c0027358 <picGetIRQReg(int)>
c0027569:	83 c4 04             	add    esp,0x4
c002756c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027571:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027576:	25 80 00 00 00       	and    eax,0x80
c002757b:	74 73                	je     c00275f0 <picEOI(int)+0x98>
c002757d:	8d 76 00             	lea    esi,[esi+0x0]
c0027580:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027585:	75 31                	jne    c00275b8 <picEOI(int)+0x60>
c0027587:	6a 0b                	push   0xb
c0027589:	e8 ca fd ff ff       	call   c0027358 <picGetIRQReg(int)>
c002758e:	83 c4 04             	add    esp,0x4
c0027591:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002759a:	98                   	cwde   
c002759b:	85 c0                	test   eax,eax
c002759d:	78 19                	js     c00275b8 <picEOI(int)+0x60>
c002759f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00275a6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00275ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00275af:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00275b4:	ee                   	out    dx,al
c00275b5:	eb 3d                	jmp    c00275f4 <picEOI(int)+0x9c>
c00275b7:	90                   	nop
c00275b8:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00275bd:	7e 19                	jle    c00275d8 <picEOI(int)+0x80>
c00275bf:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00275c6:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00275cb:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00275cf:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00275d4:	ee                   	out    dx,al
c00275d5:	8d 76 00             	lea    esi,[esi+0x0]
c00275d8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00275df:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00275e4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00275e8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00275ed:	ee                   	out    dx,al
c00275ee:	eb 04                	jmp    c00275f4 <picEOI(int)+0x9c>
c00275f0:	90                   	nop
c00275f1:	8d 76 00             	lea    esi,[esi+0x0]
c00275f4:	83 c4 10             	add    esp,0x10
c00275f7:	c3                   	ret    

c00275f8 <RTC::open(int, int, void*)>:
c00275f8:	31 c0                	xor    eax,eax
c00275fa:	c3                   	ret    
c00275fb:	90                   	nop

c00275fc <RTC::close(int, int, void*)>:
c00275fc:	31 c0                	xor    eax,eax
c00275fe:	c3                   	ret    
c00275ff:	90                   	nop

c0027600 <RTC::timeInSecondsUTC()>:
c0027600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027604:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002760a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0027610:	c3                   	ret    
c0027611:	90                   	nop

c0027612 <RTC::timeInDatetimeUTC()>:
c0027612:	53                   	push   ebx
c0027613:	83 ec 14             	sub    esp,0x14
c0027616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002761a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002761e:	8b 10                	mov    edx,DWORD PTR [eax]
c0027620:	50                   	push   eax
c0027621:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0027624:	83 c4 0c             	add    esp,0xc
c0027627:	52                   	push   edx
c0027628:	50                   	push   eax
c0027629:	53                   	push   ebx
c002762a:	e8 bd 3a ff ff       	call   c001b0ec <secondsToDatetime(unsigned long long)>
c002762f:	89 d8                	mov    eax,ebx
c0027631:	83 c4 14             	add    esp,0x14
c0027634:	5b                   	pop    ebx
c0027635:	c2 04 00             	ret    0x4

c0027638 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027638:	56                   	push   esi
c0027639:	53                   	push   ebx
c002763a:	83 ec 14             	sub    esp,0x14
c002763d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027641:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027643:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027646:	8d 44 24 08          	lea    eax,[esp+0x8]
c002764a:	52                   	push   edx
c002764b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002764f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027653:	50                   	push   eax
c0027654:	e8 93 3a ff ff       	call   c001b0ec <secondsToDatetime(unsigned long long)>
c0027659:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c002765d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027661:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027665:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027669:	89 f0                	mov    eax,esi
c002766b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002766f:	83 c4 20             	add    esp,0x20
c0027672:	5b                   	pop    ebx
c0027673:	5e                   	pop    esi
c0027674:	ff e0                	jmp    eax

c0027676 <RTC::~RTC()>:
c0027676:	83 ec 0c             	sub    esp,0xc
c0027679:	ba e8 33 03 c0       	mov    edx,0xc00333e8
c002767e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027682:	89 10                	mov    DWORD PTR [eax],edx
c0027684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027688:	83 ec 0c             	sub    esp,0xc
c002768b:	50                   	push   eax
c002768c:	e8 e7 37 ff ff       	call   c001ae78 <Clock::~Clock()>
c0027691:	83 c4 10             	add    esp,0x10
c0027694:	90                   	nop
c0027695:	83 c4 0c             	add    esp,0xc
c0027698:	c3                   	ret    
c0027699:	90                   	nop

c002769a <RTC::~RTC()>:
c002769a:	83 ec 0c             	sub    esp,0xc
c002769d:	83 ec 0c             	sub    esp,0xc
c00276a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276a4:	e8 cd ff ff ff       	call   c0027676 <RTC::~RTC()>
c00276a9:	83 c4 10             	add    esp,0x10
c00276ac:	83 ec 08             	sub    esp,0x8
c00276af:	68 60 01 00 00       	push   0x160
c00276b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276b8:	e8 27 1b ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c00276bd:	83 c4 10             	add    esp,0x10
c00276c0:	83 c4 0c             	add    esp,0xc
c00276c3:	c3                   	ret    

c00276c4 <RTC::get_update_in_progress_flag()>:
c00276c4:	83 ec 14             	sub    esp,0x14
c00276c7:	6a 0a                	push   0xa
c00276c9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276cf:	e8 90 e4 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c00276d4:	83 c4 1c             	add    esp,0x1c
c00276d7:	0f b6 c0             	movzx  eax,al
c00276da:	c1 e8 07             	shr    eax,0x7
c00276dd:	c3                   	ret    

c00276de <RTC::completeRTCRefresh()>:
c00276de:	55                   	push   ebp
c00276df:	57                   	push   edi
c00276e0:	56                   	push   esi
c00276e1:	53                   	push   ebx
c00276e2:	83 ec 3c             	sub    esp,0x3c
c00276e5:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00276eb:	83 ec 0c             	sub    esp,0xc
c00276ee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00276f2:	e8 cd ff ff ff       	call   c00276c4 <RTC::get_update_in_progress_flag()>
c00276f7:	83 c4 10             	add    esp,0x10
c00276fa:	84 c0                	test   al,al
c00276fc:	74 0e                	je     c002770c <RTC::completeRTCRefresh()+0x2e>
c00276fe:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027704:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002770a:	73 df                	jae    c00276eb <RTC::completeRTCRefresh()+0xd>
c002770c:	50                   	push   eax
c002770d:	50                   	push   eax
c002770e:	6a 00                	push   0x0
c0027710:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027716:	e8 49 e4 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c002771b:	89 c7                	mov    edi,eax
c002771d:	58                   	pop    eax
c002771e:	5a                   	pop    edx
c002771f:	6a 02                	push   0x2
c0027721:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027727:	e8 38 e4 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c002772c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027730:	59                   	pop    ecx
c0027731:	5b                   	pop    ebx
c0027732:	6a 04                	push   0x4
c0027734:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002773a:	e8 25 e4 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c002773f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027743:	5e                   	pop    esi
c0027744:	5d                   	pop    ebp
c0027745:	6a 07                	push   0x7
c0027747:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002774d:	e8 12 e4 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027752:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027756:	58                   	pop    eax
c0027757:	5a                   	pop    edx
c0027758:	6a 08                	push   0x8
c002775a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027760:	e8 ff e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027765:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027769:	59                   	pop    ecx
c002776a:	5b                   	pop    ebx
c002776b:	6a 09                	push   0x9
c002776d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027773:	e8 ec e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027778:	0f b6 c0             	movzx  eax,al
c002777b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002777f:	83 c4 10             	add    esp,0x10
c0027782:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027788:	83 ec 0c             	sub    esp,0xc
c002778b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002778f:	e8 30 ff ff ff       	call   c00276c4 <RTC::get_update_in_progress_flag()>
c0027794:	83 c4 10             	add    esp,0x10
c0027797:	84 c0                	test   al,al
c0027799:	74 0e                	je     c00277a9 <RTC::completeRTCRefresh()+0xcb>
c002779b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00277a1:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00277a7:	73 df                	jae    c0027788 <RTC::completeRTCRefresh()+0xaa>
c00277a9:	51                   	push   ecx
c00277aa:	51                   	push   ecx
c00277ab:	6a 00                	push   0x0
c00277ad:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277b3:	e8 ac e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c00277b8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00277bc:	5b                   	pop    ebx
c00277bd:	5e                   	pop    esi
c00277be:	6a 02                	push   0x2
c00277c0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277c6:	e8 99 e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c00277cb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00277cf:	5d                   	pop    ebp
c00277d0:	58                   	pop    eax
c00277d1:	6a 04                	push   0x4
c00277d3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277d9:	e8 86 e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c00277de:	88 c3                	mov    bl,al
c00277e0:	58                   	pop    eax
c00277e1:	5a                   	pop    edx
c00277e2:	6a 07                	push   0x7
c00277e4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277ea:	e8 75 e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c00277ef:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00277f3:	59                   	pop    ecx
c00277f4:	5e                   	pop    esi
c00277f5:	6a 08                	push   0x8
c00277f7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00277fd:	e8 62 e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027802:	5d                   	pop    ebp
c0027803:	89 c6                	mov    esi,eax
c0027805:	58                   	pop    eax
c0027806:	6a 09                	push   0x9
c0027808:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002780e:	e8 51 e3 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027813:	89 f9                	mov    ecx,edi
c0027815:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027819:	83 c4 10             	add    esp,0x10
c002781c:	0f b6 e8             	movzx  ebp,al
c002781f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027824:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0027828:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002782c:	74 27                	je     c0027855 <RTC::completeRTCRefresh()+0x177>
c002782e:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027832:	89 f0                	mov    eax,esi
c0027834:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027838:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c002783c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027840:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027844:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027848:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002784c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027850:	e9 2d ff ff ff       	jmp    c0027782 <RTC::completeRTCRefresh()+0xa4>
c0027855:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002785a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002785e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027862:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0027866:	75 c6                	jne    c002782e <RTC::completeRTCRefresh()+0x150>
c0027868:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002786d:	89 f1                	mov    ecx,esi
c002786f:	0f b6 fb             	movzx  edi,bl
c0027872:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027876:	0f b6 c9             	movzx  ecx,cl
c0027879:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c002787d:	89 f1                	mov    ecx,esi
c002787f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027883:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027887:	0f 94 c2             	sete   dl
c002788a:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c002788e:	0f 94 c0             	sete   al
c0027891:	21 d0                	and    eax,edx
c0027893:	31 d2                	xor    edx,edx
c0027895:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027899:	0f 94 c2             	sete   dl
c002789c:	85 c2                	test   edx,eax
c002789e:	74 8e                	je     c002782e <RTC::completeRTCRefresh()+0x150>
c00278a0:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00278a4:	75 88                	jne    c002782e <RTC::completeRTCRefresh()+0x150>
c00278a6:	52                   	push   edx
c00278a7:	52                   	push   edx
c00278a8:	6a 0b                	push   0xb
c00278aa:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278b0:	e8 af e2 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c00278b5:	83 c4 10             	add    esp,0x10
c00278b8:	a8 04                	test   al,0x4
c00278ba:	75 7a                	jne    c0027936 <RTC::completeRTCRefresh()+0x258>
c00278bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00278c0:	c1 ef 04             	shr    edi,0x4
c00278c3:	83 e6 0f             	and    esi,0xf
c00278c6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00278ca:	c1 ed 04             	shr    ebp,0x4
c00278cd:	6b ed 0a             	imul   ebp,ebp,0xa
c00278d0:	c1 ea 04             	shr    edx,0x4
c00278d3:	6b d2 0a             	imul   edx,edx,0xa
c00278d6:	83 e1 0f             	and    ecx,0xf
c00278d9:	01 d1                	add    ecx,edx
c00278db:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00278df:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00278e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00278e7:	c1 ea 04             	shr    edx,0x4
c00278ea:	6b d2 0a             	imul   edx,edx,0xa
c00278ed:	83 e1 0f             	and    ecx,0xf
c00278f0:	01 d1                	add    ecx,edx
c00278f2:	89 fa                	mov    edx,edi
c00278f4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00278f8:	83 e2 07             	and    edx,0x7
c00278fb:	89 d9                	mov    ecx,ebx
c00278fd:	6b d2 0a             	imul   edx,edx,0xa
c0027900:	83 e1 0f             	and    ecx,0xf
c0027903:	83 e3 80             	and    ebx,0xffffff80
c0027906:	01 d1                	add    ecx,edx
c0027908:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002790c:	09 cb                	or     ebx,ecx
c002790e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027912:	c1 ea 04             	shr    edx,0x4
c0027915:	6b d2 0a             	imul   edx,edx,0xa
c0027918:	83 e1 0f             	and    ecx,0xf
c002791b:	01 d1                	add    ecx,edx
c002791d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027921:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0027925:	c1 ea 04             	shr    edx,0x4
c0027928:	6b d2 0a             	imul   edx,edx,0xa
c002792b:	01 d6                	add    esi,edx
c002792d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027931:	83 e2 0f             	and    edx,0xf
c0027934:	01 d5                	add    ebp,edx
c0027936:	a8 02                	test   al,0x2
c0027938:	75 15                	jne    c002794f <RTC::completeRTCRefresh()+0x271>
c002793a:	f6 c3 80             	test   bl,0x80
c002793d:	74 10                	je     c002794f <RTC::completeRTCRefresh()+0x271>
c002793f:	83 e3 7f             	and    ebx,0x7f
c0027942:	b9 18 00 00 00       	mov    ecx,0x18
c0027947:	8d 43 0c             	lea    eax,[ebx+0xc]
c002794a:	99                   	cdq    
c002794b:	f7 f9                	idiv   ecx
c002794d:	88 d3                	mov    bl,dl
c002794f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027955:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c002795b:	77 06                	ja     c0027963 <RTC::completeRTCRefresh()+0x285>
c002795d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027963:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027968:	31 c9                	xor    ecx,ecx
c002796a:	31 d2                	xor    edx,edx
c002796c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027970:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0027974:	89 cd                	mov    ebp,ecx
c0027976:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c002797a:	c1 e7 10             	shl    edi,0x10
c002797d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027983:	c1 e0 10             	shl    eax,0x10
c0027986:	09 c5                	or     ebp,eax
c0027988:	89 e9                	mov    ecx,ebp
c002798a:	0f b7 c2             	movzx  eax,dx
c002798d:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027991:	09 f8                	or     eax,edi
c0027993:	89 c2                	mov    edx,eax
c0027995:	50                   	push   eax
c0027996:	50                   	push   eax
c0027997:	88 d9                	mov    cl,bl
c0027999:	51                   	push   ecx
c002799a:	52                   	push   edx
c002799b:	e8 c7 35 ff ff       	call   c001af67 <datetimeToSeconds(datetime_t)>
c00279a0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00279a4:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00279aa:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00279b0:	83 c4 4c             	add    esp,0x4c
c00279b3:	5b                   	pop    ebx
c00279b4:	5e                   	pop    esi
c00279b5:	5f                   	pop    edi
c00279b6:	5d                   	pop    ebp
c00279b7:	c3                   	ret    

c00279b8 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00279b8:	55                   	push   ebp
c00279b9:	57                   	push   edi
c00279ba:	56                   	push   esi
c00279bb:	53                   	push   ebx
c00279bc:	83 ec 30             	sub    esp,0x30
c00279bf:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00279c3:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00279c7:	6a 00                	push   0x0
c00279c9:	6a 00                	push   0x0
c00279cb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279d1:	e8 a6 e2 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c00279d6:	83 c4 0c             	add    esp,0xc
c00279d9:	6a 00                	push   0x0
c00279db:	6a 02                	push   0x2
c00279dd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279e3:	e8 94 e2 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c00279e8:	89 f8                	mov    eax,edi
c00279ea:	89 f9                	mov    ecx,edi
c00279ec:	0f b6 c4             	movzx  eax,ah
c00279ef:	31 d2                	xor    edx,edx
c00279f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00279f5:	c1 e9 10             	shr    ecx,0x10
c00279f8:	89 f0                	mov    eax,esi
c00279fa:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00279fe:	89 f0                	mov    eax,esi
c0027a00:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0027a04:	0f b6 c4             	movzx  eax,ah
c0027a07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027a0b:	89 f0                	mov    eax,esi
c0027a0d:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0027a11:	c1 e8 10             	shr    eax,0x10
c0027a14:	b9 64 00 00 00       	mov    ecx,0x64
c0027a19:	f7 f1                	div    ecx
c0027a1b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0027a1f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0027a23:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0027a27:	59                   	pop    ecx
c0027a28:	5b                   	pop    ebx
c0027a29:	89 fb                	mov    ebx,edi
c0027a2b:	6a 0b                	push   0xb
c0027a2d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a33:	e8 2c e1 fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027a38:	83 c4 10             	add    esp,0x10
c0027a3b:	a8 04                	test   al,0x4
c0027a3d:	89 c5                	mov    ebp,eax
c0027a3f:	75 6e                	jne    c0027aaf <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027a41:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027a45:	31 d2                	xor    edx,edx
c0027a47:	0f b6 c1             	movzx  eax,cl
c0027a4a:	b9 0a 00 00 00       	mov    ecx,0xa
c0027a4f:	f7 f1                	div    ecx
c0027a51:	c1 e0 04             	shl    eax,0x4
c0027a54:	09 d0                	or     eax,edx
c0027a56:	31 d2                	xor    edx,edx
c0027a58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027a5c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027a61:	f7 f1                	div    ecx
c0027a63:	c1 e0 04             	shl    eax,0x4
c0027a66:	09 d0                	or     eax,edx
c0027a68:	31 d2                	xor    edx,edx
c0027a6a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027a6e:	0f b6 c3             	movzx  eax,bl
c0027a71:	f7 f1                	div    ecx
c0027a73:	c1 e0 04             	shl    eax,0x4
c0027a76:	09 d0                	or     eax,edx
c0027a78:	31 d2                	xor    edx,edx
c0027a7a:	89 c3                	mov    ebx,eax
c0027a7c:	89 f0                	mov    eax,esi
c0027a7e:	0f b6 c0             	movzx  eax,al
c0027a81:	f7 f1                	div    ecx
c0027a83:	c1 e0 04             	shl    eax,0x4
c0027a86:	09 d0                	or     eax,edx
c0027a88:	31 d2                	xor    edx,edx
c0027a8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0027a8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027a93:	f7 f1                	div    ecx
c0027a95:	c1 e0 04             	shl    eax,0x4
c0027a98:	09 d0                	or     eax,edx
c0027a9a:	31 d2                	xor    edx,edx
c0027a9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027aa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027aa4:	f7 f1                	div    ecx
c0027aa6:	c1 e0 04             	shl    eax,0x4
c0027aa9:	09 d0                	or     eax,edx
c0027aab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0027aaf:	83 e5 02             	and    ebp,0x2
c0027ab2:	75 1e                	jne    c0027ad2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027ab4:	0f b6 c3             	movzx  eax,bl
c0027ab7:	83 f8 0b             	cmp    eax,0xb
c0027aba:	76 10                	jbe    c0027acc <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0027abc:	8d 53 f4             	lea    edx,[ebx-0xc]
c0027abf:	84 d2                	test   dl,dl
c0027ac1:	88 d3                	mov    bl,dl
c0027ac3:	75 02                	jne    c0027ac7 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027ac5:	b3 0c                	mov    bl,0xc
c0027ac7:	83 cb 80             	or     ebx,0xffffff80
c0027aca:	eb 06                	jmp    c0027ad2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027acc:	85 c0                	test   eax,eax
c0027ace:	75 02                	jne    c0027ad2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027ad0:	b3 0c                	mov    bl,0xc
c0027ad2:	50                   	push   eax
c0027ad3:	0f b6 db             	movzx  ebx,bl
c0027ad6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027adb:	52                   	push   edx
c0027adc:	6a 00                	push   0x0
c0027ade:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027ae4:	e8 93 e1 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027ae9:	83 c4 0c             	add    esp,0xc
c0027aec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027af1:	50                   	push   eax
c0027af2:	6a 02                	push   0x2
c0027af4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027afa:	e8 7d e1 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027aff:	83 c4 0c             	add    esp,0xc
c0027b02:	53                   	push   ebx
c0027b03:	6a 04                	push   0x4
c0027b05:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b0b:	e8 6c e1 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b10:	83 c4 0c             	add    esp,0xc
c0027b13:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0027b18:	52                   	push   edx
c0027b19:	6a 07                	push   0x7
c0027b1b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b21:	e8 56 e1 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b26:	83 c4 0c             	add    esp,0xc
c0027b29:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0027b2e:	50                   	push   eax
c0027b2f:	6a 08                	push   0x8
c0027b31:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b37:	e8 40 e1 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b3c:	83 c4 0c             	add    esp,0xc
c0027b3f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027b44:	55                   	push   ebp
c0027b45:	6a 09                	push   0x9
c0027b47:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b4d:	e8 2a e1 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b52:	5a                   	pop    edx
c0027b53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027b57:	e8 82 fb ff ff       	call   c00276de <RTC::completeRTCRefresh()>
c0027b5c:	83 c4 3c             	add    esp,0x3c
c0027b5f:	b0 01                	mov    al,0x1
c0027b61:	5b                   	pop    ebx
c0027b62:	5e                   	pop    esi
c0027b63:	5f                   	pop    edi
c0027b64:	5d                   	pop    ebp
c0027b65:	c3                   	ret    

c0027b66 <rtcIRQHandler(regs*, void*)>:
c0027b66:	53                   	push   ebx
c0027b67:	83 ec 10             	sub    esp,0x10
c0027b6a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027b6e:	6a 0c                	push   0xc
c0027b70:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027b76:	e8 e9 df fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027b7b:	83 c4 10             	add    esp,0x10
c0027b7e:	a8 80                	test   al,0x80
c0027b80:	74 24                	je     c0027ba6 <rtcIRQHandler(regs*, void*)+0x40>
c0027b82:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027b89:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027b90:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027b97:	75 0d                	jne    c0027ba6 <rtcIRQHandler(regs*, void*)+0x40>
c0027b99:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027b9d:	83 c4 08             	add    esp,0x8
c0027ba0:	5b                   	pop    ebx
c0027ba1:	e9 38 fb ff ff       	jmp    c00276de <RTC::completeRTCRefresh()>
c0027ba6:	83 c4 08             	add    esp,0x8
c0027ba9:	5b                   	pop    ebx
c0027baa:	c3                   	ret    
c0027bab:	90                   	nop

c0027bac <RTC::RTC()>:
c0027bac:	83 ec 1c             	sub    esp,0x1c
c0027baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bb3:	83 ec 08             	sub    esp,0x8
c0027bb6:	68 cb 33 03 c0       	push   0xc00333cb
c0027bbb:	50                   	push   eax
c0027bbc:	e8 81 32 ff ff       	call   c001ae42 <Clock::Clock(char const*)>
c0027bc1:	83 c4 10             	add    esp,0x10
c0027bc4:	ba e8 33 03 c0       	mov    edx,0xc00333e8
c0027bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bcd:	89 10                	mov    DWORD PTR [eax],edx
c0027bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bd3:	83 ec 0c             	sub    esp,0xc
c0027bd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027bda:	6a 01                	push   0x1
c0027bdc:	68 66 7b 02 c0       	push   0xc0027b66
c0027be1:	6a 08                	push   0x8
c0027be3:	50                   	push   eax
c0027be4:	e8 3b 37 ff ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027be9:	83 c4 20             	add    esp,0x20
c0027bec:	89 c2                	mov    edx,eax
c0027bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027bf2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027bf8:	fa                   	cli    
c0027bf9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027bfe:	83 c0 01             	add    eax,0x1
c0027c01:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027c06:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027c0b:	83 ec 08             	sub    esp,0x8
c0027c0e:	6a 0b                	push   0xb
c0027c10:	50                   	push   eax
c0027c11:	e8 4e df fe ff       	call   c0015b64 <Computer::readCMOS(unsigned char)>
c0027c16:	83 c4 10             	add    esp,0x10
c0027c19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027c1d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027c22:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027c26:	83 ca 10             	or     edx,0x10
c0027c29:	0f b6 d2             	movzx  edx,dl
c0027c2c:	83 ec 04             	sub    esp,0x4
c0027c2f:	52                   	push   edx
c0027c30:	6a 0b                	push   0xb
c0027c32:	50                   	push   eax
c0027c33:	e8 44 e0 fe ff       	call   c0015c7c <Computer::writeCMOS(unsigned char, unsigned char)>
c0027c38:	83 c4 10             	add    esp,0x10
c0027c3b:	83 ec 0c             	sub    esp,0xc
c0027c3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027c42:	e8 97 fa ff ff       	call   c00276de <RTC::completeRTCRefresh()>
c0027c47:	83 c4 10             	add    esp,0x10
c0027c4a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027c4f:	83 e8 01             	sub    eax,0x1
c0027c52:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027c57:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027c5c:	85 c0                	test   eax,eax
c0027c5e:	75 01                	jne    c0027c61 <RTC::RTC()+0xb5>
c0027c60:	fb                   	sti    
c0027c61:	90                   	nop
c0027c62:	83 c4 1c             	add    esp,0x1c
c0027c65:	c3                   	ret    
c0027c66:	66 90                	xchg   ax,ax

c0027c68 <HalConsoleScroll(int, int)>:
c0027c68:	83 ec 10             	sub    esp,0x10
c0027c6b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027c73:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027c7b:	90                   	nop
c0027c7c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027c81:	0f 8f e1 00 00 00    	jg     c0027d68 <HalConsoleScroll(int, int)+0x100>
c0027c87:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027c8f:	90                   	nop
c0027c90:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027c98:	0f 8f be 00 00 00    	jg     c0027d5c <HalConsoleScroll(int, int)+0xf4>
c0027c9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027ca2:	89 d0                	mov    eax,edx
c0027ca4:	c1 e0 02             	shl    eax,0x2
c0027ca7:	01 d0                	add    eax,edx
c0027ca9:	c1 e0 05             	shl    eax,0x5
c0027cac:	89 c2                	mov    edx,eax
c0027cae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cb2:	01 d0                	add    eax,edx
c0027cb4:	89 c2                	mov    edx,eax
c0027cb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cba:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027cbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027cc1:	89 d0                	mov    eax,edx
c0027cc3:	c1 e0 02             	shl    eax,0x2
c0027cc6:	01 d0                	add    eax,edx
c0027cc8:	c1 e0 05             	shl    eax,0x5
c0027ccb:	89 c2                	mov    edx,eax
c0027ccd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cd1:	01 d0                	add    eax,edx
c0027cd3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027cd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027cdd:	01 d0                	add    eax,edx
c0027cdf:	8a 11                	mov    dl,BYTE PTR [ecx]
c0027ce1:	88 10                	mov    BYTE PTR [eax],dl
c0027ce3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027ce8:	75 66                	jne    c0027d50 <HalConsoleScroll(int, int)+0xe8>
c0027cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027cee:	83 e0 01             	and    eax,0x1
c0027cf1:	74 39                	je     c0027d2c <HalConsoleScroll(int, int)+0xc4>
c0027cf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027cf7:	83 e0 0f             	and    eax,0xf
c0027cfa:	88 c2                	mov    dl,al
c0027cfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d00:	c1 e0 04             	shl    eax,0x4
c0027d03:	09 d0                	or     eax,edx
c0027d05:	88 c1                	mov    cl,al
c0027d07:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027d0b:	89 d0                	mov    eax,edx
c0027d0d:	c1 e0 02             	shl    eax,0x2
c0027d10:	01 d0                	add    eax,edx
c0027d12:	c1 e0 05             	shl    eax,0x5
c0027d15:	89 c2                	mov    edx,eax
c0027d17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d1b:	01 d0                	add    eax,edx
c0027d1d:	89 c2                	mov    edx,eax
c0027d1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d23:	01 d0                	add    eax,edx
c0027d25:	88 ca                	mov    dl,cl
c0027d27:	88 10                	mov    BYTE PTR [eax],dl
c0027d29:	eb 25                	jmp    c0027d50 <HalConsoleScroll(int, int)+0xe8>
c0027d2b:	90                   	nop
c0027d2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027d30:	89 d0                	mov    eax,edx
c0027d32:	c1 e0 02             	shl    eax,0x2
c0027d35:	01 d0                	add    eax,edx
c0027d37:	c1 e0 05             	shl    eax,0x5
c0027d3a:	89 c2                	mov    edx,eax
c0027d3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d40:	01 d0                	add    eax,edx
c0027d42:	89 c2                	mov    edx,eax
c0027d44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027d48:	01 d0                	add    eax,edx
c0027d4a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0027d50:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027d55:	e9 36 ff ff ff       	jmp    c0027c90 <HalConsoleScroll(int, int)+0x28>
c0027d5a:	66 90                	xchg   ax,ax
c0027d5c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027d61:	e9 16 ff ff ff       	jmp    c0027c7c <HalConsoleScroll(int, int)+0x14>
c0027d66:	66 90                	xchg   ax,ax
c0027d68:	90                   	nop
c0027d69:	83 c4 10             	add    esp,0x10
c0027d6c:	c3                   	ret    
c0027d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0027d70 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027d70:	83 ec 14             	sub    esp,0x14
c0027d73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027d77:	88 04 24             	mov    BYTE PTR [esp],al
c0027d7a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027d7d:	0f b6 c0             	movzx  eax,al
c0027d80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d84:	89 d1                	mov    ecx,edx
c0027d86:	83 e1 0f             	and    ecx,0xf
c0027d89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027d8d:	c1 e2 04             	shl    edx,0x4
c0027d90:	0f b6 d2             	movzx  edx,dl
c0027d93:	09 ca                	or     edx,ecx
c0027d95:	c1 e2 08             	shl    edx,0x8
c0027d98:	09 d0                	or     eax,edx
c0027d9a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027d9f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027da7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027dab:	89 d0                	mov    eax,edx
c0027dad:	c1 e0 02             	shl    eax,0x2
c0027db0:	01 d0                	add    eax,edx
c0027db2:	c1 e0 04             	shl    eax,0x4
c0027db5:	89 c2                	mov    edx,eax
c0027db7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027dbb:	01 d0                	add    eax,edx
c0027dbd:	d1 e0                	shl    eax,1
c0027dbf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027dc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027dc7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0027dcc:	66 89 10             	mov    WORD PTR [eax],dx
c0027dcf:	90                   	nop
c0027dd0:	83 c4 14             	add    esp,0x14
c0027dd3:	c3                   	ret    

c0027dd4 <HalConsoleCursorUpdate(int, int)>:
c0027dd4:	83 ec 20             	sub    esp,0x20
c0027dd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027ddb:	89 c2                	mov    edx,eax
c0027ddd:	c1 e2 02             	shl    edx,0x2
c0027de0:	01 d0                	add    eax,edx
c0027de2:	c1 e0 04             	shl    eax,0x4
c0027de5:	89 c2                	mov    edx,eax
c0027de7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027deb:	01 d0                	add    eax,edx
c0027ded:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027df2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027df9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027dfe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027e02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027e06:	ee                   	out    dx,al
c0027e07:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027e0c:	0f b6 c0             	movzx  eax,al
c0027e0f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027e16:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027e1a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027e1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027e22:	ee                   	out    dx,al
c0027e23:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027e2a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027e2f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027e33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027e37:	ee                   	out    dx,al
c0027e38:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027e3d:	c1 e8 08             	shr    eax,0x8
c0027e40:	0f b6 c0             	movzx  eax,al
c0027e43:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027e4a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027e4e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027e52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027e56:	ee                   	out    dx,al
c0027e57:	90                   	nop
c0027e58:	83 c4 20             	add    esp,0x20
c0027e5b:	c3                   	ret    

c0027e5c <FAT::getName()>:
c0027e5c:	b8 1c 34 03 c0       	mov    eax,0xc003341c
c0027e61:	c3                   	ret    
c0027e62:	66 90                	xchg   ax,ax

c0027e64 <FAT::tell(void*, unsigned long long*)>:
c0027e64:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027e69:	75 09                	jne    c0027e74 <FAT::tell(void*, unsigned long long*)+0x10>
c0027e6b:	b8 04 00 00 00       	mov    eax,0x4
c0027e70:	c3                   	ret    
c0027e71:	8d 76 00             	lea    esi,[esi+0x0]
c0027e74:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e79:	75 09                	jne    c0027e84 <FAT::tell(void*, unsigned long long*)+0x20>
c0027e7b:	b8 04 00 00 00       	mov    eax,0x4
c0027e80:	c3                   	ret    
c0027e81:	8d 76 00             	lea    esi,[esi+0x0]
c0027e84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027e88:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027e8b:	ba 00 00 00 00       	mov    edx,0x0
c0027e90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027e94:	89 01                	mov    DWORD PTR [ecx],eax
c0027e96:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027e99:	b8 00 00 00 00       	mov    eax,0x0
c0027e9e:	c3                   	ret    
c0027e9f:	90                   	nop

c0027ea0 <FAT::stat(void*, unsigned long long*)>:
c0027ea0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027ea5:	75 09                	jne    c0027eb0 <FAT::stat(void*, unsigned long long*)+0x10>
c0027ea7:	b8 04 00 00 00       	mov    eax,0x4
c0027eac:	c3                   	ret    
c0027ead:	8d 76 00             	lea    esi,[esi+0x0]
c0027eb0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027eb5:	75 09                	jne    c0027ec0 <FAT::stat(void*, unsigned long long*)+0x20>
c0027eb7:	b8 04 00 00 00       	mov    eax,0x4
c0027ebc:	c3                   	ret    
c0027ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0027ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ec4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027ec7:	ba 00 00 00 00       	mov    edx,0x0
c0027ecc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027ed0:	89 01                	mov    DWORD PTR [ecx],eax
c0027ed2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027ed5:	b8 00 00 00 00       	mov    eax,0x0
c0027eda:	c3                   	ret    
c0027edb:	90                   	nop

c0027edc <FAT::~FAT()>:
c0027edc:	83 ec 0c             	sub    esp,0xc
c0027edf:	ba 68 34 03 c0       	mov    edx,0xc0033468
c0027ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee8:	89 10                	mov    DWORD PTR [eax],edx
c0027eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027eee:	83 ec 0c             	sub    esp,0xc
c0027ef1:	50                   	push   eax
c0027ef2:	e8 71 22 ff ff       	call   c001a168 <Filesystem::~Filesystem()>
c0027ef7:	83 c4 10             	add    esp,0x10
c0027efa:	90                   	nop
c0027efb:	83 c4 0c             	add    esp,0xc
c0027efe:	c3                   	ret    
c0027eff:	90                   	nop

c0027f00 <FAT::~FAT()>:
c0027f00:	83 ec 0c             	sub    esp,0xc
c0027f03:	83 ec 0c             	sub    esp,0xc
c0027f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f0a:	e8 cd ff ff ff       	call   c0027edc <FAT::~FAT()>
c0027f0f:	83 c4 10             	add    esp,0x10
c0027f12:	83 ec 08             	sub    esp,0x8
c0027f15:	6a 08                	push   0x8
c0027f17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f1b:	e8 c4 12 ff ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c0027f20:	83 c4 10             	add    esp,0x10
c0027f23:	83 c4 0c             	add    esp,0xc
c0027f26:	c3                   	ret    
c0027f27:	90                   	nop

c0027f28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027f28:	83 ec 1c             	sub    esp,0x1c
c0027f2b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027f32:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027f37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f3b:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f42:	83 f8 ff             	cmp    eax,0xffffffff
c0027f45:	75 35                	jne    c0027f7c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027f47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f4b:	88 c2                	mov    dl,al
c0027f4d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f52:	01 d0                	add    eax,edx
c0027f54:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f58:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027f5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f62:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027f69:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f6e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027f72:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f79:	eb 19                	jmp    c0027f94 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027f7b:	90                   	nop
c0027f7c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027f80:	88 c2                	mov    dl,al
c0027f82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027f86:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f8d:	01 d0                	add    eax,edx
c0027f8f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027f93:	90                   	nop
c0027f94:	83 ec 04             	sub    esp,0x4
c0027f97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027f9f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027fa3:	50                   	push   eax
c0027fa4:	e8 02 d2 fd ff       	call   c00051ab <f_getlabel>
c0027fa9:	83 c4 10             	add    esp,0x10
c0027fac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027fb0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027fb5:	75 09                	jne    c0027fc0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027fb7:	b8 00 00 00 00       	mov    eax,0x0
c0027fbc:	eb 0a                	jmp    c0027fc8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027fbe:	66 90                	xchg   ax,ax
c0027fc0:	b8 01 00 00 00       	mov    eax,0x1
c0027fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0027fc8:	83 c4 1c             	add    esp,0x1c
c0027fcb:	c3                   	ret    

c0027fcc <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027fcc:	53                   	push   ebx
c0027fcd:	83 ec 58             	sub    esp,0x58
c0027fd0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027fd8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027fdc:	b9 00 00 00 00       	mov    ecx,0x0
c0027fe1:	b8 3c 00 00 00       	mov    eax,0x3c
c0027fe6:	83 e0 f8             	and    eax,0xfffffff8
c0027fe9:	89 c3                	mov    ebx,eax
c0027feb:	b8 00 00 00 00       	mov    eax,0x0
c0027ff0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0027ff4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0027ff8:	83 c0 08             	add    eax,0x8
c0027ffb:	39 d8                	cmp    eax,ebx
c0027ffd:	72 f1                	jb     c0027ff0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0027fff:	01 c2                	add    edx,eax
c0028001:	89 0a                	mov    DWORD PTR [edx],ecx
c0028003:	83 c2 04             	add    edx,0x4
c0028006:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002800a:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028011:	83 f8 ff             	cmp    eax,0xffffffff
c0028014:	75 36                	jne    c002804c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0028016:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002801a:	88 c2                	mov    dl,al
c002801c:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028021:	01 d0                	add    eax,edx
c0028023:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028027:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002802d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028031:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028038:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002803d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0028041:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028048:	eb 1a                	jmp    c0028064 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c002804a:	66 90                	xchg   ax,ax
c002804c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028050:	88 c2                	mov    dl,al
c0028052:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0028056:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002805d:	01 d0                	add    eax,edx
c002805f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028063:	90                   	nop
c0028064:	83 ec 08             	sub    esp,0x8
c0028067:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002806b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002806f:	50                   	push   eax
c0028070:	e8 fb 87 fd ff       	call   c0000870 <strcat>
c0028075:	83 c4 10             	add    esp,0x10
c0028078:	83 ec 0c             	sub    esp,0xc
c002807b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002807f:	50                   	push   eax
c0028080:	e8 7a d2 fd ff       	call   c00052ff <f_setlabel>
c0028085:	83 c4 10             	add    esp,0x10
c0028088:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002808c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0028091:	75 09                	jne    c002809c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0028093:	b8 00 00 00 00       	mov    eax,0x0
c0028098:	eb 0a                	jmp    c00280a4 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c002809a:	66 90                	xchg   ax,ax
c002809c:	b8 01 00 00 00       	mov    eax,0x1
c00280a1:	8d 76 00             	lea    esi,[esi+0x0]
c00280a4:	83 c4 58             	add    esp,0x58
c00280a7:	5b                   	pop    ebx
c00280a8:	c3                   	ret    
c00280a9:	90                   	nop
c00280aa:	66 90                	xchg   ax,ax

c00280ac <FAT::format(LogicalDisk*, int, char const*, int)>:
c00280ac:	83 ec 2c             	sub    esp,0x2c
c00280af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00280b7:	83 ec 08             	sub    esp,0x8
c00280ba:	68 40 34 03 c0       	push   0xc0033440
c00280bf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280c3:	e8 b8 86 fd ff       	call   c0000780 <strcmp>
c00280c8:	83 c4 10             	add    esp,0x10
c00280cb:	85 c0                	test   eax,eax
c00280cd:	0f 94 c0             	sete   al
c00280d0:	0f b6 c0             	movzx  eax,al
c00280d3:	85 c0                	test   eax,eax
c00280d5:	74 0d                	je     c00280e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00280d7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00280df:	e9 c0 00 00 00       	jmp    c00281a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00280e4:	83 ec 08             	sub    esp,0x8
c00280e7:	68 32 34 03 c0       	push   0xc0033432
c00280ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00280f0:	e8 8b 86 fd ff       	call   c0000780 <strcmp>
c00280f5:	83 c4 10             	add    esp,0x10
c00280f8:	85 c0                	test   eax,eax
c00280fa:	0f 94 c0             	sete   al
c00280fd:	0f b6 c0             	movzx  eax,al
c0028100:	85 c0                	test   eax,eax
c0028102:	74 10                	je     c0028114 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0028104:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002810c:	e9 93 00 00 00       	jmp    c00281a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028111:	8d 76 00             	lea    esi,[esi+0x0]
c0028114:	83 ec 08             	sub    esp,0x8
c0028117:	68 38 34 03 c0       	push   0xc0033438
c002811c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028120:	e8 5b 86 fd ff       	call   c0000780 <strcmp>
c0028125:	83 c4 10             	add    esp,0x10
c0028128:	85 c0                	test   eax,eax
c002812a:	0f 94 c0             	sete   al
c002812d:	0f b6 c0             	movzx  eax,al
c0028130:	85 c0                	test   eax,eax
c0028132:	74 0c                	je     c0028140 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0028134:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002813c:	eb 66                	jmp    c00281a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002813e:	66 90                	xchg   ax,ax
c0028140:	83 ec 08             	sub    esp,0x8
c0028143:	68 d8 f5 02 c0       	push   0xc002f5d8
c0028148:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002814c:	e8 2f 86 fd ff       	call   c0000780 <strcmp>
c0028151:	83 c4 10             	add    esp,0x10
c0028154:	85 c0                	test   eax,eax
c0028156:	0f 94 c0             	sete   al
c0028159:	0f b6 c0             	movzx  eax,al
c002815c:	85 c0                	test   eax,eax
c002815e:	74 0c                	je     c002816c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028160:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028168:	eb 3a                	jmp    c00281a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002816a:	66 90                	xchg   ax,ax
c002816c:	83 ec 08             	sub    esp,0x8
c002816f:	68 3e 34 03 c0       	push   0xc003343e
c0028174:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028178:	e8 03 86 fd ff       	call   c0000780 <strcmp>
c002817d:	83 c4 10             	add    esp,0x10
c0028180:	85 c0                	test   eax,eax
c0028182:	0f 94 c0             	sete   al
c0028185:	0f b6 c0             	movzx  eax,al
c0028188:	85 c0                	test   eax,eax
c002818a:	74 0c                	je     c0028198 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c002818c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028194:	eb 0e                	jmp    c00281a4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028196:	66 90                	xchg   ax,ax
c0028198:	b8 08 00 00 00       	mov    eax,0x8
c002819d:	e9 ea 00 00 00       	jmp    c002828c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00281a2:	66 90                	xchg   ax,ax
c00281a4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00281ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00281b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00281b4:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281bb:	83 f8 ff             	cmp    eax,0xffffffff
c00281be:	75 34                	jne    c00281f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00281c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00281c4:	88 c2                	mov    dl,al
c00281c6:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281cb:	01 d0                	add    eax,edx
c00281cd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00281d1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281d7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00281db:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281e2:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281e7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00281eb:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281f2:	eb 18                	jmp    c002820c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00281f4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00281f8:	88 c2                	mov    dl,al
c00281fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00281fe:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028205:	01 d0                	add    eax,edx
c0028207:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002820b:	90                   	nop
c002820c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028210:	88 04 24             	mov    BYTE PTR [esp],al
c0028213:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0028217:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002821b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0028223:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0028228:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028230:	83 ec 0c             	sub    esp,0xc
c0028233:	68 00 20 00 00       	push   0x2000
c0028238:	e8 5e e2 fe ff       	call   c001649b <malloc>
c002823d:	83 c4 10             	add    esp,0x10
c0028240:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028244:	68 00 20 00 00       	push   0x2000
c0028249:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002824d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028251:	50                   	push   eax
c0028252:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0028256:	50                   	push   eax
c0028257:	e8 a0 d3 fd ff       	call   c00055fc <f_mkfs>
c002825c:	83 c4 10             	add    esp,0x10
c002825f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028263:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028268:	75 0a                	jne    c0028274 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c002826a:	b8 00 00 00 00       	mov    eax,0x0
c002826f:	eb 1b                	jmp    c002828c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028271:	8d 76 00             	lea    esi,[esi+0x0]
c0028274:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028279:	75 09                	jne    c0028284 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c002827b:	b8 09 00 00 00       	mov    eax,0x9
c0028280:	eb 0a                	jmp    c002828c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028282:	66 90                	xchg   ax,ax
c0028284:	b8 01 00 00 00       	mov    eax,0x1
c0028289:	8d 76 00             	lea    esi,[esi+0x0]
c002828c:	83 c4 2c             	add    esp,0x2c
c002828f:	c3                   	ret    

c0028290 <FAT::tryMount(LogicalDisk*, int)>:
c0028290:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0028296:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002829b:	83 f8 14             	cmp    eax,0x14
c002829e:	75 18                	jne    c00282b8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00282a0:	83 ec 0c             	sub    esp,0xc
c00282a3:	68 44 34 03 c0       	push   0xc0033444
c00282a8:	e8 bd 7f ff ff       	call   c002026a <KePanic(char const*)>
c00282ad:	83 c4 10             	add    esp,0x10
c00282b0:	b0 00                	mov    al,0x0
c00282b2:	e9 ed 01 00 00       	jmp    c00284a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00282b7:	90                   	nop
c00282b8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00282bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00282c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00282cb:	3d 00 02 00 00       	cmp    eax,0x200
c00282d0:	74 0a                	je     c00282dc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00282d2:	b0 00                	mov    al,0x0
c00282d4:	e9 cb 01 00 00       	jmp    c00284a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00282d9:	8d 76 00             	lea    esi,[esi+0x0]
c00282dc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00282e4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00282eb:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00282f2:	83 f8 ff             	cmp    eax,0xffffffff
c00282f5:	74 09                	je     c0028300 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00282f7:	b0 01                	mov    al,0x1
c00282f9:	e9 a6 01 00 00       	jmp    c00284a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00282fe:	66 90                	xchg   ax,ax
c0028300:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c002830a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0028312:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0028319:	88 c2                	mov    dl,al
c002831b:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028320:	01 d0                	add    eax,edx
c0028322:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0028329:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c002832f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028336:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002833d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028342:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028349:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028350:	83 ec 0c             	sub    esp,0xc
c0028353:	68 34 02 00 00       	push   0x234
c0028358:	e8 3e e1 fe ff       	call   c001649b <malloc>
c002835d:	83 c4 10             	add    esp,0x10
c0028360:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0028367:	83 ec 04             	sub    esp,0x4
c002836a:	6a 00                	push   0x0
c002836c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028373:	50                   	push   eax
c0028374:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002837b:	e8 76 ba fd ff       	call   c0003df6 <f_mount>
c0028380:	83 c4 10             	add    esp,0x10
c0028383:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002838a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028392:	74 1c                	je     c00283b0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028394:	83 ec 0c             	sub    esp,0xc
c0028397:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002839e:	e8 28 e1 fe ff       	call   c00164cb <rfree>
c00283a3:	83 c4 10             	add    esp,0x10
c00283a6:	b0 00                	mov    al,0x0
c00283a8:	e9 f7 00 00 00       	jmp    c00284a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00283ad:	8d 76 00             	lea    esi,[esi+0x0]
c00283b0:	83 ec 04             	sub    esp,0x4
c00283b3:	68 00 01 00 00       	push   0x100
c00283b8:	6a 00                	push   0x0
c00283ba:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00283c1:	50                   	push   eax
c00283c2:	e8 29 81 fd ff       	call   c00004f0 <memset>
c00283c7:	83 c4 10             	add    esp,0x10
c00283ca:	83 ec 08             	sub    esp,0x8
c00283cd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00283d4:	50                   	push   eax
c00283d5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00283dc:	50                   	push   eax
c00283dd:	e8 8e 84 fd ff       	call   c0000870 <strcat>
c00283e2:	83 c4 10             	add    esp,0x10
c00283e5:	83 ec 08             	sub    esp,0x8
c00283e8:	68 52 34 03 c0       	push   0xc0033452
c00283ed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00283f4:	50                   	push   eax
c00283f5:	e8 76 84 fd ff       	call   c0000870 <strcat>
c00283fa:	83 c4 10             	add    esp,0x10
c00283fd:	83 ec 04             	sub    esp,0x4
c0028400:	6a 01                	push   0x1
c0028402:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0028409:	50                   	push   eax
c002840a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002840e:	50                   	push   eax
c002840f:	e8 44 ba fd ff       	call   c0003e58 <f_open>
c0028414:	83 c4 10             	add    esp,0x10
c0028417:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002841e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0028425:	85 c0                	test   eax,eax
c0028427:	74 0b                	je     c0028434 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0028429:	78 31                	js     c002845c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c002842b:	83 e8 04             	sub    eax,0x4
c002842e:	83 f8 01             	cmp    eax,0x1
c0028431:	77 29                	ja     c002845c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028433:	90                   	nop
c0028434:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c002843c:	83 ec 0c             	sub    esp,0xc
c002843f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028443:	50                   	push   eax
c0028444:	e8 bf c1 fd ff       	call   c0004608 <f_close>
c0028449:	83 c4 10             	add    esp,0x10
c002844c:	90                   	nop
c002844d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0028455:	85 c0                	test   eax,eax
c0028457:	74 43                	je     c002849c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028459:	eb 31                	jmp    c002848c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c002845b:	90                   	nop
c002845c:	83 ec 0c             	sub    esp,0xc
c002845f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028466:	e8 60 e0 fe ff       	call   c00164cb <rfree>
c002846b:	83 c4 10             	add    esp,0x10
c002846e:	83 ec 04             	sub    esp,0x4
c0028471:	6a 00                	push   0x0
c0028473:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002847a:	50                   	push   eax
c002847b:	6a 00                	push   0x0
c002847d:	e8 74 b9 fd ff       	call   c0003df6 <f_mount>
c0028482:	83 c4 10             	add    esp,0x10
c0028485:	b0 00                	mov    al,0x0
c0028487:	eb 1b                	jmp    c00284a4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028489:	8d 76 00             	lea    esi,[esi+0x0]
c002848c:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028491:	83 c0 01             	add    eax,0x1
c0028494:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028499:	8d 76 00             	lea    esi,[esi+0x0]
c002849c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00284a3:	90                   	nop
c00284a4:	81 c4 4c 03 00 00    	add    esp,0x34c
c00284aa:	c3                   	ret    
c00284ab:	90                   	nop

c00284ac <FAT::allocateSwapfile(char const*, int)>:
c00284ac:	55                   	push   ebp
c00284ad:	57                   	push   edi
c00284ae:	56                   	push   esi
c00284af:	53                   	push   ebx
c00284b0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00284b6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c00284c1:	83 ec 0c             	sub    esp,0xc
c00284c4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c00284cb:	e8 cb df fe ff       	call   c001649b <malloc>
c00284d0:	83 c4 10             	add    esp,0x10
c00284d3:	89 c7                	mov    edi,eax
c00284d5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00284da:	83 ec 04             	sub    esp,0x4
c00284dd:	50                   	push   eax
c00284de:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00284e5:	57                   	push   edi
c00284e6:	e8 0f 20 ff ff       	call   c001a4fa <File::File(char const*, Process*)>
c00284eb:	83 c4 10             	add    esp,0x10
c00284ee:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00284f5:	83 ec 04             	sub    esp,0x4
c00284f8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00284fc:	50                   	push   eax
c00284fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028501:	50                   	push   eax
c0028502:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028509:	e8 0c 23 ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c002850e:	83 c4 10             	add    esp,0x10
c0028511:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028518:	c1 e0 14             	shl    eax,0x14
c002851b:	89 c7                	mov    edi,eax
c002851d:	89 c5                	mov    ebp,eax
c002851f:	c1 fd 1f             	sar    ebp,0x1f
c0028522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028526:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002852a:	89 f9                	mov    ecx,edi
c002852c:	31 c1                	xor    ecx,eax
c002852e:	89 cb                	mov    ebx,ecx
c0028530:	89 e9                	mov    ecx,ebp
c0028532:	31 d1                	xor    ecx,edx
c0028534:	89 ce                	mov    esi,ecx
c0028536:	89 f0                	mov    eax,esi
c0028538:	09 d8                	or     eax,ebx
c002853a:	0f 84 9c 00 00 00    	je     c00285dc <FAT::allocateSwapfile(char const*, int)+0x130>
c0028540:	83 ec 0c             	sub    esp,0xc
c0028543:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002854a:	e8 97 21 ff ff       	call   c001a6e6 <File::unlink()>
c002854f:	83 c4 10             	add    esp,0x10
c0028552:	83 ec 08             	sub    esp,0x8
c0028555:	6a 12                	push   0x12
c0028557:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002855e:	e8 b5 1f ff ff       	call   c001a518 <File::open(FileOpenMode)>
c0028563:	83 c4 10             	add    esp,0x10
c0028566:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002856d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028573:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002857a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028581:	c1 e0 14             	shl    eax,0x14
c0028584:	83 ec 04             	sub    esp,0x4
c0028587:	6a 01                	push   0x1
c0028589:	50                   	push   eax
c002858a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028591:	e8 f9 ce fd ff       	call   c000548f <f_expand>
c0028596:	83 c4 10             	add    esp,0x10
c0028599:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00285a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a2:	83 c0 10             	add    eax,0x10
c00285a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00285a7:	83 ec 0c             	sub    esp,0xc
c00285aa:	8d 54 24 24          	lea    edx,[esp+0x24]
c00285ae:	52                   	push   edx
c00285af:	8d 54 24 30          	lea    edx,[esp+0x30]
c00285b3:	52                   	push   edx
c00285b4:	6a 00                	push   0x0
c00285b6:	68 00 04 00 00       	push   0x400
c00285bb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00285c2:	ff d0                	call   eax
c00285c4:	83 c4 20             	add    esp,0x20
c00285c7:	83 ec 0c             	sub    esp,0xc
c00285ca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285d1:	e8 a0 1f ff ff       	call   c001a576 <File::close()>
c00285d6:	83 c4 10             	add    esp,0x10
c00285d9:	8d 76 00             	lea    esi,[esi+0x0]
c00285dc:	83 ec 08             	sub    esp,0x8
c00285df:	6a 01                	push   0x1
c00285e1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00285e8:	e8 2b 1f ff ff       	call   c001a518 <File::open(FileOpenMode)>
c00285ed:	83 c4 10             	add    esp,0x10
c00285f0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00285f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00285f9:	83 c0 0c             	add    eax,0xc
c00285fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00285fe:	83 ec 0c             	sub    esp,0xc
c0028601:	8d 54 24 24          	lea    edx,[esp+0x24]
c0028605:	52                   	push   edx
c0028606:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c002860a:	52                   	push   edx
c002860b:	6a 00                	push   0x0
c002860d:	6a 04                	push   0x4
c002860f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028616:	ff d0                	call   eax
c0028618:	83 c4 20             	add    esp,0x20
c002861b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028622:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028628:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002862f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028636:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028639:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028640:	83 ec 0c             	sub    esp,0xc
c0028643:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002864a:	e8 27 1f ff ff       	call   c001a576 <File::close()>
c002864f:	83 c4 10             	add    esp,0x10
c0028652:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028659:	ba 00 00 00 00       	mov    edx,0x0
c002865e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028664:	5b                   	pop    ebx
c0028665:	5e                   	pop    esi
c0028666:	5f                   	pop    edi
c0028667:	5d                   	pop    ebp
c0028668:	c3                   	ret    
c0028669:	90                   	nop
c002866a:	66 90                	xchg   ax,ax

c002866c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002866c:	57                   	push   edi
c002866d:	56                   	push   esi
c002866e:	53                   	push   ebx
c002866f:	81 ec 50 02 00 00    	sub    esp,0x250
c0028675:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002867d:	74 0d                	je     c002868c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002867f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028687:	75 0f                	jne    c0028698 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028689:	8d 76 00             	lea    esi,[esi+0x0]
c002868c:	b8 04 00 00 00       	mov    eax,0x4
c0028691:	e9 3a 01 00 00       	jmp    c00287d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028696:	66 90                	xchg   ax,ax
c0028698:	83 ec 08             	sub    esp,0x8
c002869b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00286a2:	50                   	push   eax
c00286a3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00286aa:	e8 25 c2 fd ff       	call   c00048d4 <f_readdir>
c00286af:	83 c4 10             	add    esp,0x10
c00286b2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00286b9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00286c0:	83 ec 0c             	sub    esp,0xc
c00286c3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00286ca:	83 c0 16             	add    eax,0x16
c00286cd:	50                   	push   eax
c00286ce:	e8 ad 7e fd ff       	call   c0000580 <strlen>
c00286d3:	83 c4 10             	add    esp,0x10
c00286d6:	ba 00 00 00 00       	mov    edx,0x0
c00286db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00286e3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00286ea:	0f b6 c0             	movzx  eax,al
c00286ed:	83 e0 10             	and    eax,0x10
c00286f0:	74 0a                	je     c00286fc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00286f2:	b8 02 00 00 00       	mov    eax,0x2
c00286f7:	eb 0b                	jmp    c0028704 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00286f9:	8d 76 00             	lea    esi,[esi+0x0]
c00286fc:	b8 01 00 00 00       	mov    eax,0x1
c0028701:	8d 76 00             	lea    esi,[esi+0x0]
c0028704:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028708:	83 ec 08             	sub    esp,0x8
c002870b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028712:	83 c0 16             	add    eax,0x16
c0028715:	50                   	push   eax
c0028716:	8d 44 24 14          	lea    eax,[esp+0x14]
c002871a:	83 c0 10             	add    eax,0x10
c002871d:	50                   	push   eax
c002871e:	e8 2d 7f fd ff       	call   c0000650 <strcpy>
c0028723:	83 c4 10             	add    esp,0x10
c0028726:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002872d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028734:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028738:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002873f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028746:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002874d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028754:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002875b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028762:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028769:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028770:	89 c6                	mov    esi,eax
c0028772:	89 d7                	mov    edi,edx
c0028774:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028776:	89 c8                	mov    eax,ecx
c0028778:	89 fa                	mov    edx,edi
c002877a:	89 f3                	mov    ebx,esi
c002877c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028783:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002878a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028791:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028798:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002879e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00287a5:	0f be c0             	movsx  eax,al
c00287a8:	85 c0                	test   eax,eax
c00287aa:	75 08                	jne    c00287b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00287ac:	b8 07 00 00 00       	mov    eax,0x7
c00287b1:	eb 1d                	jmp    c00287d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00287b3:	90                   	nop
c00287b4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00287bb:	85 c0                	test   eax,eax
c00287bd:	75 09                	jne    c00287c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00287bf:	b8 00 00 00 00       	mov    eax,0x0
c00287c4:	eb 0a                	jmp    c00287d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00287c6:	66 90                	xchg   ax,ax
c00287c8:	b8 01 00 00 00       	mov    eax,0x1
c00287cd:	8d 76 00             	lea    esi,[esi+0x0]
c00287d0:	81 c4 50 02 00 00    	add    esp,0x250
c00287d6:	5b                   	pop    ebx
c00287d7:	5e                   	pop    esi
c00287d8:	5f                   	pop    edi
c00287d9:	c3                   	ret    
c00287da:	66 90                	xchg   ax,ax

c00287dc <FAT::read(void*, unsigned long, void*, int*)>:
c00287dc:	83 ec 1c             	sub    esp,0x1c
c00287df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287e4:	74 0a                	je     c00287f0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00287e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00287eb:	75 0b                	jne    c00287f8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00287ed:	8d 76 00             	lea    esi,[esi+0x0]
c00287f0:	b8 04 00 00 00       	mov    eax,0x4
c00287f5:	eb 41                	jmp    c0028838 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00287f7:	90                   	nop
c00287f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00287fc:	50                   	push   eax
c00287fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028801:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028805:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028809:	e8 0d b9 fd ff       	call   c000411b <f_read>
c002880e:	83 c4 10             	add    esp,0x10
c0028811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028815:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028819:	89 c2                	mov    edx,eax
c002881b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002881f:	89 10                	mov    DWORD PTR [eax],edx
c0028821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028825:	85 c0                	test   eax,eax
c0028827:	75 07                	jne    c0028830 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0028829:	b8 00 00 00 00       	mov    eax,0x0
c002882e:	eb 08                	jmp    c0028838 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028830:	b8 01 00 00 00       	mov    eax,0x1
c0028835:	8d 76 00             	lea    esi,[esi+0x0]
c0028838:	83 c4 1c             	add    esp,0x1c
c002883b:	c3                   	ret    

c002883c <FAT::write(void*, unsigned long, void*, int*)>:
c002883c:	83 ec 1c             	sub    esp,0x1c
c002883f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028844:	74 0a                	je     c0028850 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028846:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002884b:	75 0b                	jne    c0028858 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c002884d:	8d 76 00             	lea    esi,[esi+0x0]
c0028850:	b8 04 00 00 00       	mov    eax,0x4
c0028855:	eb 41                	jmp    c0028898 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028857:	90                   	nop
c0028858:	8d 44 24 08          	lea    eax,[esp+0x8]
c002885c:	50                   	push   eax
c002885d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028861:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028865:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028869:	e8 8e ba fd ff       	call   c00042fc <f_write>
c002886e:	83 c4 10             	add    esp,0x10
c0028871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028879:	89 c2                	mov    edx,eax
c002887b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002887f:	89 10                	mov    DWORD PTR [eax],edx
c0028881:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028885:	85 c0                	test   eax,eax
c0028887:	75 07                	jne    c0028890 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028889:	b8 00 00 00 00       	mov    eax,0x0
c002888e:	eb 08                	jmp    c0028898 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028890:	b8 01 00 00 00       	mov    eax,0x1
c0028895:	8d 76 00             	lea    esi,[esi+0x0]
c0028898:	83 c4 1c             	add    esp,0x1c
c002889b:	c3                   	ret    

c002889c <FAT::close(void*)>:
c002889c:	83 ec 1c             	sub    esp,0x1c
c002889f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00288a4:	75 0a                	jne    c00288b0 <FAT::close(void*)+0x14>
c00288a6:	b8 04 00 00 00       	mov    eax,0x4
c00288ab:	eb 3f                	jmp    c00288ec <FAT::close(void*)+0x50>
c00288ad:	8d 76 00             	lea    esi,[esi+0x0]
c00288b0:	83 ec 0c             	sub    esp,0xc
c00288b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288b7:	e8 4c bd fd ff       	call   c0004608 <f_close>
c00288bc:	83 c4 10             	add    esp,0x10
c00288bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00288c3:	83 ec 0c             	sub    esp,0xc
c00288c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288ca:	e8 ec db fe ff       	call   c00164bb <free>
c00288cf:	83 c4 10             	add    esp,0x10
c00288d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00288d6:	85 c0                	test   eax,eax
c00288d8:	75 0a                	jne    c00288e4 <FAT::close(void*)+0x48>
c00288da:	b8 00 00 00 00       	mov    eax,0x0
c00288df:	eb 0b                	jmp    c00288ec <FAT::close(void*)+0x50>
c00288e1:	8d 76 00             	lea    esi,[esi+0x0]
c00288e4:	b8 01 00 00 00       	mov    eax,0x1
c00288e9:	8d 76 00             	lea    esi,[esi+0x0]
c00288ec:	83 c4 1c             	add    esp,0x1c
c00288ef:	c3                   	ret    

c00288f0 <FAT::closeDir(void*)>:
c00288f0:	83 ec 1c             	sub    esp,0x1c
c00288f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00288f8:	75 0a                	jne    c0028904 <FAT::closeDir(void*)+0x14>
c00288fa:	b8 04 00 00 00       	mov    eax,0x4
c00288ff:	eb 3f                	jmp    c0028940 <FAT::closeDir(void*)+0x50>
c0028901:	8d 76 00             	lea    esi,[esi+0x0]
c0028904:	83 ec 0c             	sub    esp,0xc
c0028907:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002890b:	e8 a2 bf fd ff       	call   c00048b2 <f_closedir>
c0028910:	83 c4 10             	add    esp,0x10
c0028913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028917:	83 ec 0c             	sub    esp,0xc
c002891a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002891e:	e8 98 db fe ff       	call   c00164bb <free>
c0028923:	83 c4 10             	add    esp,0x10
c0028926:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002892a:	85 c0                	test   eax,eax
c002892c:	75 0a                	jne    c0028938 <FAT::closeDir(void*)+0x48>
c002892e:	b8 00 00 00 00       	mov    eax,0x0
c0028933:	eb 0b                	jmp    c0028940 <FAT::closeDir(void*)+0x50>
c0028935:	8d 76 00             	lea    esi,[esi+0x0]
c0028938:	b8 01 00 00 00       	mov    eax,0x1
c002893d:	8d 76 00             	lea    esi,[esi+0x0]
c0028940:	83 c4 1c             	add    esp,0x1c
c0028943:	c3                   	ret    

c0028944 <FAT::truncate(void*, unsigned long long)>:
c0028944:	83 ec 2c             	sub    esp,0x2c
c0028947:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002894b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002894f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028953:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028957:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002895c:	75 0a                	jne    c0028968 <FAT::truncate(void*, unsigned long long)+0x24>
c002895e:	b8 04 00 00 00       	mov    eax,0x4
c0028963:	eb 47                	jmp    c00289ac <FAT::truncate(void*, unsigned long long)+0x68>
c0028965:	8d 76 00             	lea    esi,[esi+0x0]
c0028968:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002896c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002896f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028973:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002897b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002897f:	83 ec 08             	sub    esp,0x8
c0028982:	50                   	push   eax
c0028983:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028987:	e8 ab bc fd ff       	call   c0004637 <f_lseek>
c002898c:	83 c4 10             	add    esp,0x10
c002898f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028993:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028997:	85 c0                	test   eax,eax
c0028999:	75 09                	jne    c00289a4 <FAT::truncate(void*, unsigned long long)+0x60>
c002899b:	b8 00 00 00 00       	mov    eax,0x0
c00289a0:	eb 0a                	jmp    c00289ac <FAT::truncate(void*, unsigned long long)+0x68>
c00289a2:	66 90                	xchg   ax,ax
c00289a4:	b8 01 00 00 00       	mov    eax,0x1
c00289a9:	8d 76 00             	lea    esi,[esi+0x0]
c00289ac:	83 c4 2c             	add    esp,0x2c
c00289af:	c3                   	ret    

c00289b0 <FAT::seek(void*, unsigned long long)>:
c00289b0:	83 ec 2c             	sub    esp,0x2c
c00289b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00289b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00289bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00289bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00289c3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00289c8:	75 0a                	jne    c00289d4 <FAT::seek(void*, unsigned long long)+0x24>
c00289ca:	b8 04 00 00 00       	mov    eax,0x4
c00289cf:	eb 33                	jmp    c0028a04 <FAT::seek(void*, unsigned long long)+0x54>
c00289d1:	8d 76 00             	lea    esi,[esi+0x0]
c00289d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00289d8:	83 ec 08             	sub    esp,0x8
c00289db:	50                   	push   eax
c00289dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00289e0:	e8 52 bc fd ff       	call   c0004637 <f_lseek>
c00289e5:	83 c4 10             	add    esp,0x10
c00289e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00289ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00289f0:	85 c0                	test   eax,eax
c00289f2:	75 08                	jne    c00289fc <FAT::seek(void*, unsigned long long)+0x4c>
c00289f4:	b8 00 00 00 00       	mov    eax,0x0
c00289f9:	eb 09                	jmp    c0028a04 <FAT::seek(void*, unsigned long long)+0x54>
c00289fb:	90                   	nop
c00289fc:	b8 01 00 00 00       	mov    eax,0x1
c0028a01:	8d 76 00             	lea    esi,[esi+0x0]
c0028a04:	83 c4 2c             	add    esp,0x2c
c0028a07:	c3                   	ret    

c0028a08 <fatWrapperReadDisk>:
c0028a08:	53                   	push   ebx
c0028a09:	83 ec 18             	sub    esp,0x18
c0028a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028a14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a19:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028a20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028a24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028a28:	ba 00 00 00 00       	mov    edx,0x0
c0028a2d:	83 ec 0c             	sub    esp,0xc
c0028a30:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a34:	53                   	push   ebx
c0028a35:	52                   	push   edx
c0028a36:	50                   	push   eax
c0028a37:	51                   	push   ecx
c0028a38:	e8 31 3d ff ff       	call   c001c76e <LogicalDisk::read(unsigned long long, int, void*)>
c0028a3d:	83 c4 20             	add    esp,0x20
c0028a40:	83 c4 18             	add    esp,0x18
c0028a43:	5b                   	pop    ebx
c0028a44:	c3                   	ret    
c0028a45:	8d 76 00             	lea    esi,[esi+0x0]

c0028a48 <fatWrapperWriteDisk>:
c0028a48:	53                   	push   ebx
c0028a49:	83 ec 18             	sub    esp,0x18
c0028a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a50:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028a54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028a59:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028a60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028a64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028a68:	ba 00 00 00 00       	mov    edx,0x0
c0028a6d:	83 ec 0c             	sub    esp,0xc
c0028a70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028a74:	53                   	push   ebx
c0028a75:	52                   	push   edx
c0028a76:	50                   	push   eax
c0028a77:	51                   	push   ecx
c0028a78:	e8 5d 3d ff ff       	call   c001c7da <LogicalDisk::write(unsigned long long, int, void*)>
c0028a7d:	83 c4 20             	add    esp,0x20
c0028a80:	83 c4 18             	add    esp,0x18
c0028a83:	5b                   	pop    ebx
c0028a84:	c3                   	ret    
c0028a85:	8d 76 00             	lea    esi,[esi+0x0]

c0028a88 <fatWrapperIoctl>:
c0028a88:	53                   	push   ebx
c0028a89:	83 ec 28             	sub    esp,0x28
c0028a8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028a90:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0028a94:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028a98:	88 d0                	mov    al,dl
c0028a9a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028aa3:	83 f8 02             	cmp    eax,0x2
c0028aa6:	75 34                	jne    c0028adc <fatWrapperIoctl+0x54>
c0028aa8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028aac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028ab0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028ab5:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028abc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028ac2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028ac8:	89 c2                	mov    edx,eax
c0028aca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028ace:	66 89 10             	mov    WORD PTR [eax],dx
c0028ad1:	b8 00 00 00 00       	mov    eax,0x0
c0028ad6:	e9 c5 00 00 00       	jmp    c0028ba0 <fatWrapperIoctl+0x118>
c0028adb:	90                   	nop
c0028adc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028ae1:	83 f8 01             	cmp    eax,0x1
c0028ae4:	75 6a                	jne    c0028b50 <fatWrapperIoctl+0xc8>
c0028ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028aea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028aee:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028af3:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028afa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028b00:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0028b06:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0028b0c:	89 c8                	mov    eax,ecx
c0028b0e:	89 da                	mov    edx,ebx
c0028b10:	0f a4 c2 0a          	shld   edx,eax,0xa
c0028b14:	c1 e0 0a             	shl    eax,0xa
c0028b17:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0028b1c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0028b23:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0028b29:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0028b2f:	89 cb                	mov    ebx,ecx
c0028b31:	c1 fb 1f             	sar    ebx,0x1f
c0028b34:	53                   	push   ebx
c0028b35:	51                   	push   ecx
c0028b36:	52                   	push   edx
c0028b37:	50                   	push   eax
c0028b38:	e8 f3 5b 00 00       	call   c002e730 <__udivdi3>
c0028b3d:	83 c4 10             	add    esp,0x10
c0028b40:	89 c2                	mov    edx,eax
c0028b42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028b46:	89 10                	mov    DWORD PTR [eax],edx
c0028b48:	b8 00 00 00 00       	mov    eax,0x0
c0028b4d:	eb 51                	jmp    c0028ba0 <fatWrapperIoctl+0x118>
c0028b4f:	90                   	nop
c0028b50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b55:	85 c0                	test   eax,eax
c0028b57:	75 07                	jne    c0028b60 <fatWrapperIoctl+0xd8>
c0028b59:	b8 00 00 00 00       	mov    eax,0x0
c0028b5e:	eb 40                	jmp    c0028ba0 <fatWrapperIoctl+0x118>
c0028b60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b65:	83 f8 03             	cmp    eax,0x3
c0028b68:	75 1a                	jne    c0028b84 <fatWrapperIoctl+0xfc>
c0028b6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028b6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028b72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028b76:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028b7c:	b8 00 00 00 00       	mov    eax,0x0
c0028b81:	eb 1d                	jmp    c0028ba0 <fatWrapperIoctl+0x118>
c0028b83:	90                   	nop
c0028b84:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028b89:	83 f8 04             	cmp    eax,0x4
c0028b8c:	75 0a                	jne    c0028b98 <fatWrapperIoctl+0x110>
c0028b8e:	b8 00 00 00 00       	mov    eax,0x0
c0028b93:	eb 0b                	jmp    c0028ba0 <fatWrapperIoctl+0x118>
c0028b95:	8d 76 00             	lea    esi,[esi+0x0]
c0028b98:	b8 04 00 00 00       	mov    eax,0x4
c0028b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba0:	83 c4 28             	add    esp,0x28
c0028ba3:	5b                   	pop    ebx
c0028ba4:	c3                   	ret    
c0028ba5:	90                   	nop
c0028ba6:	66 90                	xchg   ax,ax

c0028ba8 <FAT::FAT()>:
c0028ba8:	83 ec 1c             	sub    esp,0x1c
c0028bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028baf:	83 ec 0c             	sub    esp,0xc
c0028bb2:	50                   	push   eax
c0028bb3:	e8 8c 15 ff ff       	call   c001a144 <Filesystem::Filesystem()>
c0028bb8:	83 c4 10             	add    esp,0x10
c0028bbb:	ba 68 34 03 c0       	mov    edx,0xc0033468
c0028bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028bc4:	89 10                	mov    DWORD PTR [eax],edx
c0028bc6:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028bd0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028bd8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028bdd:	7f 19                	jg     c0028bf8 <FAT::FAT()+0x50>
c0028bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028be3:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028bee:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028bf3:	eb e3                	jmp    c0028bd8 <FAT::FAT()+0x30>
c0028bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0028bf8:	90                   	nop
c0028bf9:	83 c4 1c             	add    esp,0x1c
c0028bfc:	c3                   	ret    
c0028bfd:	90                   	nop
c0028bfe:	66 90                	xchg   ax,ax

c0028c00 <FAT::fixFilepath(char*)>:
c0028c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c04:	8a 00                	mov    al,BYTE PTR [eax]
c0028c06:	0f be c0             	movsx  eax,al
c0028c09:	83 f8 40             	cmp    eax,0x40
c0028c0c:	7e 2e                	jle    c0028c3c <FAT::fixFilepath(char*)+0x3c>
c0028c0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c12:	8a 00                	mov    al,BYTE PTR [eax]
c0028c14:	83 e8 41             	sub    eax,0x41
c0028c17:	88 c2                	mov    dl,al
c0028c19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c1d:	88 10                	mov    BYTE PTR [eax],dl
c0028c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c23:	8a 00                	mov    al,BYTE PTR [eax]
c0028c25:	0f be c0             	movsx  eax,al
c0028c28:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028c2f:	83 c0 30             	add    eax,0x30
c0028c32:	88 c2                	mov    dl,al
c0028c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028c38:	88 10                	mov    BYTE PTR [eax],dl
c0028c3a:	66 90                	xchg   ax,ax
c0028c3c:	90                   	nop
c0028c3d:	c3                   	ret    
c0028c3e:	66 90                	xchg   ax,ax

c0028c40 <FAT::open(char const*, void**, FileOpenMode)>:
c0028c40:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028c46:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028c4e:	74 0c                	je     c0028c5c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028c50:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028c58:	75 0e                	jne    c0028c68 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028c5a:	66 90                	xchg   ax,ax
c0028c5c:	b8 04 00 00 00       	mov    eax,0x4
c0028c61:	e9 46 01 00 00       	jmp    c0028dac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c66:	66 90                	xchg   ax,ax
c0028c68:	83 ec 08             	sub    esp,0x8
c0028c6b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c76:	50                   	push   eax
c0028c77:	e8 d4 79 fd ff       	call   c0000650 <strcpy>
c0028c7c:	83 c4 10             	add    esp,0x10
c0028c7f:	83 ec 08             	sub    esp,0x8
c0028c82:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028c86:	50                   	push   eax
c0028c87:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c8e:	e8 6d ff ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c0028c93:	83 c4 10             	add    esp,0x10
c0028c96:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028c9e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028ca5:	83 e0 01             	and    eax,0x1
c0028ca8:	74 12                	je     c0028cbc <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028caa:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028cb1:	83 c8 01             	or     eax,0x1
c0028cb4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cbb:	90                   	nop
c0028cbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028cc3:	83 e0 04             	and    eax,0x4
c0028cc6:	74 24                	je     c0028cec <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028cc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ccf:	83 c8 30             	or     eax,0x30
c0028cd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cd9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028ce0:	83 c8 02             	or     eax,0x2
c0028ce3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028cea:	66 90                	xchg   ax,ax
c0028cec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028cf3:	83 e0 02             	and    eax,0x2
c0028cf6:	74 14                	je     c0028d0c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028cf8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028cff:	83 c8 02             	or     eax,0x2
c0028d02:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028d09:	8d 76 00             	lea    esi,[esi+0x0]
c0028d0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028d13:	83 e0 08             	and    eax,0x8
c0028d16:	74 14                	je     c0028d2c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028d18:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028d1f:	83 c8 04             	or     eax,0x4
c0028d22:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028d29:	8d 76 00             	lea    esi,[esi+0x0]
c0028d2c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028d33:	83 e0 10             	and    eax,0x10
c0028d36:	74 14                	je     c0028d4c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028d38:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028d3f:	83 c8 08             	or     eax,0x8
c0028d42:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028d49:	8d 76 00             	lea    esi,[esi+0x0]
c0028d4c:	83 ec 0c             	sub    esp,0xc
c0028d4f:	68 28 02 00 00       	push   0x228
c0028d54:	e8 42 d7 fe ff       	call   c001649b <malloc>
c0028d59:	83 c4 10             	add    esp,0x10
c0028d5c:	89 c2                	mov    edx,eax
c0028d5e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d65:	89 10                	mov    DWORD PTR [eax],edx
c0028d67:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028d6f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0028d78:	83 ec 04             	sub    esp,0x4
c0028d7b:	52                   	push   edx
c0028d7c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028d80:	52                   	push   edx
c0028d81:	50                   	push   eax
c0028d82:	e8 d1 b0 fd ff       	call   c0003e58 <f_open>
c0028d87:	83 c4 10             	add    esp,0x10
c0028d8a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028d91:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028d99:	74 09                	je     c0028da4 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028d9b:	b8 01 00 00 00       	mov    eax,0x1
c0028da0:	eb 0a                	jmp    c0028dac <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028da2:	66 90                	xchg   ax,ax
c0028da4:	b8 00 00 00 00       	mov    eax,0x0
c0028da9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dac:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028db2:	c3                   	ret    
c0028db3:	90                   	nop

c0028db4 <FAT::openDir(char const*, void**)>:
c0028db4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028dba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028dc2:	74 0c                	je     c0028dd0 <FAT::openDir(char const*, void**)+0x1c>
c0028dc4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028dcc:	75 0e                	jne    c0028ddc <FAT::openDir(char const*, void**)+0x28>
c0028dce:	66 90                	xchg   ax,ax
c0028dd0:	b8 04 00 00 00       	mov    eax,0x4
c0028dd5:	e9 82 00 00 00       	jmp    c0028e5c <FAT::openDir(char const*, void**)+0xa8>
c0028dda:	66 90                	xchg   ax,ax
c0028ddc:	83 ec 08             	sub    esp,0x8
c0028ddf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028de6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028dea:	50                   	push   eax
c0028deb:	e8 60 78 fd ff       	call   c0000650 <strcpy>
c0028df0:	83 c4 10             	add    esp,0x10
c0028df3:	83 ec 08             	sub    esp,0x8
c0028df6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028dfa:	50                   	push   eax
c0028dfb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e02:	e8 f9 fd ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c0028e07:	83 c4 10             	add    esp,0x10
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	6a 30                	push   0x30
c0028e0f:	e8 87 d6 fe ff       	call   c001649b <malloc>
c0028e14:	83 c4 10             	add    esp,0x10
c0028e17:	89 c2                	mov    edx,eax
c0028e19:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028e20:	89 10                	mov    DWORD PTR [eax],edx
c0028e22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0028e2b:	83 ec 08             	sub    esp,0x8
c0028e2e:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028e32:	52                   	push   edx
c0028e33:	50                   	push   eax
c0028e34:	e8 ae b9 fd ff       	call   c00047e7 <f_opendir>
c0028e39:	83 c4 10             	add    esp,0x10
c0028e3c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e43:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028e4b:	74 07                	je     c0028e54 <FAT::openDir(char const*, void**)+0xa0>
c0028e4d:	b8 01 00 00 00       	mov    eax,0x1
c0028e52:	eb 08                	jmp    c0028e5c <FAT::openDir(char const*, void**)+0xa8>
c0028e54:	b8 00 00 00 00       	mov    eax,0x0
c0028e59:	8d 76 00             	lea    esi,[esi+0x0]
c0028e5c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028e62:	c3                   	ret    
c0028e63:	90                   	nop

c0028e64 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028e64:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028e6a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028e72:	75 0c                	jne    c0028e80 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028e74:	b8 04 00 00 00       	mov    eax,0x4
c0028e79:	e9 d6 00 00 00       	jmp    c0028f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e7e:	66 90                	xchg   ax,ax
c0028e80:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028e88:	75 0a                	jne    c0028e94 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028e8a:	b8 04 00 00 00       	mov    eax,0x4
c0028e8f:	e9 c0 00 00 00       	jmp    c0028f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e94:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028e9c:	75 0a                	jne    c0028ea8 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028e9e:	b8 04 00 00 00       	mov    eax,0x4
c0028ea3:	e9 ac 00 00 00       	jmp    c0028f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028ea8:	83 ec 08             	sub    esp,0x8
c0028eab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028eb2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028eb9:	50                   	push   eax
c0028eba:	e8 91 77 fd ff       	call   c0000650 <strcpy>
c0028ebf:	83 c4 10             	add    esp,0x10
c0028ec2:	83 ec 08             	sub    esp,0x8
c0028ec5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028ecc:	50                   	push   eax
c0028ecd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028ed4:	e8 27 fd ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c0028ed9:	83 c4 10             	add    esp,0x10
c0028edc:	83 ec 08             	sub    esp,0x8
c0028edf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028ee3:	50                   	push   eax
c0028ee4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028eeb:	50                   	push   eax
c0028eec:	e8 75 ba fd ff       	call   c0004966 <f_stat>
c0028ef1:	83 c4 10             	add    esp,0x10
c0028ef4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028efb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028f02:	85 c0                	test   eax,eax
c0028f04:	74 0a                	je     c0028f10 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028f06:	83 f8 04             	cmp    eax,0x4
c0028f09:	74 39                	je     c0028f44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028f0b:	eb 3f                	jmp    c0028f4c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0028f10:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028f14:	0f b6 c0             	movzx  eax,al
c0028f17:	83 e0 10             	and    eax,0x10
c0028f1a:	0f 95 c2             	setne  dl
c0028f1d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028f24:	88 10                	mov    BYTE PTR [eax],dl
c0028f26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028f2a:	ba 00 00 00 00       	mov    edx,0x0
c0028f2f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028f36:	89 01                	mov    DWORD PTR [ecx],eax
c0028f38:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028f3b:	b8 00 00 00 00       	mov    eax,0x0
c0028f40:	eb 12                	jmp    c0028f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028f42:	66 90                	xchg   ax,ax
c0028f44:	b8 02 00 00 00       	mov    eax,0x2
c0028f49:	eb 09                	jmp    c0028f54 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028f4b:	90                   	nop
c0028f4c:	b8 01 00 00 00       	mov    eax,0x1
c0028f51:	8d 76 00             	lea    esi,[esi+0x0]
c0028f54:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028f5a:	c3                   	ret    
c0028f5b:	90                   	nop

c0028f5c <FAT::unlink(char const*)>:
c0028f5c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028f62:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028f6a:	75 08                	jne    c0028f74 <FAT::unlink(char const*)+0x18>
c0028f6c:	b8 04 00 00 00       	mov    eax,0x4
c0028f71:	eb 61                	jmp    c0028fd4 <FAT::unlink(char const*)+0x78>
c0028f73:	90                   	nop
c0028f74:	83 ec 08             	sub    esp,0x8
c0028f77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028f82:	50                   	push   eax
c0028f83:	e8 c8 76 fd ff       	call   c0000650 <strcpy>
c0028f88:	83 c4 10             	add    esp,0x10
c0028f8b:	83 ec 08             	sub    esp,0x8
c0028f8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028f92:	50                   	push   eax
c0028f93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028f9a:	e8 61 fc ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c0028f9f:	83 c4 10             	add    esp,0x10
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028fa9:	50                   	push   eax
c0028faa:	e8 29 bc fd ff       	call   c0004bd8 <f_unlink>
c0028faf:	83 c4 10             	add    esp,0x10
c0028fb2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028fb9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028fc0:	85 c0                	test   eax,eax
c0028fc2:	75 08                	jne    c0028fcc <FAT::unlink(char const*)+0x70>
c0028fc4:	b8 00 00 00 00       	mov    eax,0x0
c0028fc9:	eb 09                	jmp    c0028fd4 <FAT::unlink(char const*)+0x78>
c0028fcb:	90                   	nop
c0028fcc:	b8 01 00 00 00       	mov    eax,0x1
c0028fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0028fd4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028fda:	c3                   	ret    
c0028fdb:	90                   	nop

c0028fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028fdc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028fe2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0028fe9:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0028ff0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028ff4:	88 d0                	mov    al,dl
c0028ff6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028ffa:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029002:	75 0c                	jne    c0029010 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0029004:	b8 04 00 00 00       	mov    eax,0x4
c0029009:	e9 7e 01 00 00       	jmp    c002918c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c002900e:	66 90                	xchg   ax,ax
c0029010:	83 ec 08             	sub    esp,0x8
c0029013:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002901a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002901e:	50                   	push   eax
c002901f:	e8 2c 76 fd ff       	call   c0000650 <strcpy>
c0029024:	83 c4 10             	add    esp,0x10
c0029027:	83 ec 08             	sub    esp,0x8
c002902a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002902e:	50                   	push   eax
c002902f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0029036:	e8 c5 fb ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c002903b:	83 c4 10             	add    esp,0x10
c002903e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0029046:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002904e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029053:	83 e0 01             	and    eax,0x1
c0029056:	74 14                	je     c002906c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0029058:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002905f:	83 c8 01             	or     eax,0x1
c0029062:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029069:	8d 76 00             	lea    esi,[esi+0x0]
c002906c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0029071:	83 e0 02             	and    eax,0x2
c0029074:	74 12                	je     c0029088 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0029076:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002907d:	83 c8 20             	or     eax,0x20
c0029080:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0029087:	90                   	nop
c0029088:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002908d:	83 e0 04             	and    eax,0x4
c0029090:	74 12                	je     c00290a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0029092:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0029099:	83 c8 04             	or     eax,0x4
c002909c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00290a3:	90                   	nop
c00290a4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00290a9:	83 e0 08             	and    eax,0x8
c00290ac:	74 12                	je     c00290c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00290ae:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00290b5:	83 c8 02             	or     eax,0x2
c00290b8:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c00290bf:	90                   	nop
c00290c0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290c5:	83 e0 01             	and    eax,0x1
c00290c8:	74 12                	je     c00290dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c00290ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290d1:	83 c8 01             	or     eax,0x1
c00290d4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290db:	90                   	nop
c00290dc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290e1:	83 e0 02             	and    eax,0x2
c00290e4:	74 12                	je     c00290f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c00290e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00290ed:	83 c8 20             	or     eax,0x20
c00290f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c00290f7:	90                   	nop
c00290f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00290fd:	83 e0 04             	and    eax,0x4
c0029100:	74 12                	je     c0029114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0029102:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029109:	83 c8 04             	or     eax,0x4
c002910c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029113:	90                   	nop
c0029114:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0029119:	83 e0 08             	and    eax,0x8
c002911c:	74 12                	je     c0029130 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c002911e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0029125:	83 c8 02             	or     eax,0x2
c0029128:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c002912f:	90                   	nop
c0029130:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0029137:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002913e:	09 d0                	or     eax,edx
c0029140:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029147:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002914f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0029157:	83 ec 04             	sub    esp,0x4
c002915a:	52                   	push   edx
c002915b:	50                   	push   eax
c002915c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029160:	50                   	push   eax
c0029161:	e8 e5 be fd ff       	call   c000504b <f_chmod>
c0029166:	83 c4 10             	add    esp,0x10
c0029169:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029170:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0029177:	85 c0                	test   eax,eax
c0029179:	75 09                	jne    c0029184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c002917b:	b8 00 00 00 00       	mov    eax,0x0
c0029180:	eb 0a                	jmp    c002918c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0029182:	66 90                	xchg   ax,ax
c0029184:	b8 01 00 00 00       	mov    eax,0x1
c0029189:	8d 76 00             	lea    esi,[esi+0x0]
c002918c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029192:	c3                   	ret    
c0029193:	90                   	nop

c0029194 <FAT::rename(char const*, char const*)>:
c0029194:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002919a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00291a2:	74 0c                	je     c00291b0 <FAT::rename(char const*, char const*)+0x1c>
c00291a4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00291ac:	75 0e                	jne    c00291bc <FAT::rename(char const*, char const*)+0x28>
c00291ae:	66 90                	xchg   ax,ax
c00291b0:	b8 04 00 00 00       	mov    eax,0x4
c00291b5:	e9 9e 00 00 00       	jmp    c0029258 <FAT::rename(char const*, char const*)+0xc4>
c00291ba:	66 90                	xchg   ax,ax
c00291bc:	83 ec 08             	sub    esp,0x8
c00291bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00291c6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00291cd:	50                   	push   eax
c00291ce:	e8 7d 74 fd ff       	call   c0000650 <strcpy>
c00291d3:	83 c4 10             	add    esp,0x10
c00291d6:	83 ec 08             	sub    esp,0x8
c00291d9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00291e0:	50                   	push   eax
c00291e1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00291e8:	e8 13 fa ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c00291ed:	83 c4 10             	add    esp,0x10
c00291f0:	83 ec 08             	sub    esp,0x8
c00291f3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00291fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00291fe:	50                   	push   eax
c00291ff:	e8 4c 74 fd ff       	call   c0000650 <strcpy>
c0029204:	83 c4 10             	add    esp,0x10
c0029207:	83 ec 08             	sub    esp,0x8
c002920a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002920e:	50                   	push   eax
c002920f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029216:	e8 e5 f9 ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c002921b:	83 c4 10             	add    esp,0x10
c002921e:	83 ec 08             	sub    esp,0x8
c0029221:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029225:	50                   	push   eax
c0029226:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002922d:	50                   	push   eax
c002922e:	e8 60 bc fd ff       	call   c0004e93 <f_rename>
c0029233:	83 c4 10             	add    esp,0x10
c0029236:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002923d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0029244:	85 c0                	test   eax,eax
c0029246:	75 08                	jne    c0029250 <FAT::rename(char const*, char const*)+0xbc>
c0029248:	b8 00 00 00 00       	mov    eax,0x0
c002924d:	eb 09                	jmp    c0029258 <FAT::rename(char const*, char const*)+0xc4>
c002924f:	90                   	nop
c0029250:	b8 01 00 00 00       	mov    eax,0x1
c0029255:	8d 76 00             	lea    esi,[esi+0x0]
c0029258:	81 c4 1c 02 00 00    	add    esp,0x21c
c002925e:	c3                   	ret    
c002925f:	90                   	nop

c0029260 <FAT::mkdir(char const*)>:
c0029260:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029266:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002926e:	75 08                	jne    c0029278 <FAT::mkdir(char const*)+0x18>
c0029270:	b8 04 00 00 00       	mov    eax,0x4
c0029275:	eb 61                	jmp    c00292d8 <FAT::mkdir(char const*)+0x78>
c0029277:	90                   	nop
c0029278:	83 ec 08             	sub    esp,0x8
c002927b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029282:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029286:	50                   	push   eax
c0029287:	e8 c4 73 fd ff       	call   c0000650 <strcpy>
c002928c:	83 c4 10             	add    esp,0x10
c002928f:	83 ec 08             	sub    esp,0x8
c0029292:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029296:	50                   	push   eax
c0029297:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002929e:	e8 5d f9 ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c00292a3:	83 c4 10             	add    esp,0x10
c00292a6:	83 ec 0c             	sub    esp,0xc
c00292a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00292ad:	50                   	push   eax
c00292ae:	e8 45 ba fd ff       	call   c0004cf8 <f_mkdir>
c00292b3:	83 c4 10             	add    esp,0x10
c00292b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00292bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00292c4:	85 c0                	test   eax,eax
c00292c6:	75 08                	jne    c00292d0 <FAT::mkdir(char const*)+0x70>
c00292c8:	b8 00 00 00 00       	mov    eax,0x0
c00292cd:	eb 09                	jmp    c00292d8 <FAT::mkdir(char const*)+0x78>
c00292cf:	90                   	nop
c00292d0:	b8 01 00 00 00       	mov    eax,0x1
c00292d5:	8d 76 00             	lea    esi,[esi+0x0]
c00292d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00292de:	c3                   	ret    
c00292df:	90                   	nop

c00292e0 <FAT::exists(char const*)>:
c00292e0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00292e6:	83 ec 08             	sub    esp,0x8
c00292e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00292f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00292f4:	50                   	push   eax
c00292f5:	e8 56 73 fd ff       	call   c0000650 <strcpy>
c00292fa:	83 c4 10             	add    esp,0x10
c00292fd:	83 ec 08             	sub    esp,0x8
c0029300:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0029304:	50                   	push   eax
c0029305:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002930c:	e8 ef f8 ff ff       	call   c0028c00 <FAT::fixFilepath(char*)>
c0029311:	83 c4 10             	add    esp,0x10
c0029314:	83 ec 08             	sub    esp,0x8
c0029317:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c002931e:	50                   	push   eax
c002931f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0029323:	50                   	push   eax
c0029324:	e8 3d b6 fd ff       	call   c0004966 <f_stat>
c0029329:	83 c4 10             	add    esp,0x10
c002932c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029333:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002933a:	85 c0                	test   eax,eax
c002933c:	75 06                	jne    c0029344 <FAT::exists(char const*)+0x64>
c002933e:	b0 01                	mov    al,0x1
c0029340:	eb 06                	jmp    c0029348 <FAT::exists(char const*)+0x68>
c0029342:	66 90                	xchg   ax,ax
c0029344:	b0 00                	mov    al,0x0
c0029346:	66 90                	xchg   ax,ax
c0029348:	81 c4 2c 02 00 00    	add    esp,0x22c
c002934e:	c3                   	ret    
c002934f:	90                   	nop

c0029350 <isoReadDiscSectorHelper>:
c0029350:	83 ec 2c             	sub    esp,0x2c
c0029353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0029357:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002935b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029360:	83 e8 41             	sub    eax,0x41
c0029363:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002936a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002936e:	ba 00 00 00 00       	mov    edx,0x0
c0029373:	83 ec 0c             	sub    esp,0xc
c0029376:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002937a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002937e:	52                   	push   edx
c002937f:	50                   	push   eax
c0029380:	51                   	push   ecx
c0029381:	e8 e8 33 ff ff       	call   c001c76e <LogicalDisk::read(unsigned long long, int, void*)>
c0029386:	83 c4 20             	add    esp,0x20
c0029389:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002938d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029392:	74 0c                	je     c00293a0 <isoReadDiscSectorHelper+0x50>
c0029394:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029398:	c1 e0 0b             	shl    eax,0xb
c002939b:	eb 0b                	jmp    c00293a8 <isoReadDiscSectorHelper+0x58>
c002939d:	8d 76 00             	lea    esi,[esi+0x0]
c00293a0:	b8 00 00 00 00       	mov    eax,0x0
c00293a5:	8d 76 00             	lea    esi,[esi+0x0]
c00293a8:	83 c4 2c             	add    esp,0x2c
c00293ab:	c3                   	ret    

c00293ac <iso_kprintf>:
c00293ac:	83 ec 0c             	sub    esp,0xc
c00293af:	83 ec 08             	sub    esp,0x8
c00293b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00293b6:	68 16 32 03 c0       	push   0xc0033216
c00293bb:	e8 22 ff fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00293c0:	83 c4 10             	add    esp,0x10
c00293c3:	90                   	nop
c00293c4:	83 c4 0c             	add    esp,0xc
c00293c7:	c3                   	ret    

c00293c8 <iso_kprintfd>:
c00293c8:	83 ec 0c             	sub    esp,0xc
c00293cb:	83 ec 08             	sub    esp,0x8
c00293ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00293d2:	68 56 18 03 c0       	push   0xc0031856
c00293d7:	e8 06 ff fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00293dc:	83 c4 10             	add    esp,0x10
c00293df:	90                   	nop
c00293e0:	83 c4 0c             	add    esp,0xc
c00293e3:	c3                   	ret    

c00293e4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00293e4:	b8 08 00 00 00       	mov    eax,0x8
c00293e9:	c3                   	ret    

c00293ea <ISO9660::truncate(void*, unsigned long long)>:
c00293ea:	b8 01 00 00 00       	mov    eax,0x1
c00293ef:	c3                   	ret    

c00293f0 <ISO9660::getName()>:
c00293f0:	b8 cc 34 03 c0       	mov    eax,0xc00334cc
c00293f5:	c3                   	ret    

c00293f6 <ISO9660::closeDir(void*)>:
c00293f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00293fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00293fc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00293ff:	90                   	nop

c0029400 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029400:	b8 01 00 00 00       	mov    eax,0x1
c0029405:	c3                   	ret    

c0029406 <ISO9660::unlink(char const*)>:
c0029406:	b8 01 00 00 00       	mov    eax,0x1
c002940b:	c3                   	ret    

c002940c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002940c:	b8 03 00 00 00       	mov    eax,0x3
c0029411:	c3                   	ret    

c0029412 <ISO9660::rename(char const*, char const*)>:
c0029412:	b8 01 00 00 00       	mov    eax,0x1
c0029417:	c3                   	ret    

c0029418 <ISO9660::mkdir(char const*)>:
c0029418:	b8 01 00 00 00       	mov    eax,0x1
c002941d:	c3                   	ret    

c002941e <ISO9660::~ISO9660()>:
c002941e:	83 ec 0c             	sub    esp,0xc
c0029421:	ba 0c 36 03 c0       	mov    edx,0xc003360c
c0029426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942a:	89 10                	mov    DWORD PTR [eax],edx
c002942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029430:	83 ec 0c             	sub    esp,0xc
c0029433:	50                   	push   eax
c0029434:	e8 2f 0d ff ff       	call   c001a168 <Filesystem::~Filesystem()>
c0029439:	83 c4 10             	add    esp,0x10
c002943c:	90                   	nop
c002943d:	83 c4 0c             	add    esp,0xc
c0029440:	c3                   	ret    
c0029441:	90                   	nop

c0029442 <ISO9660::~ISO9660()>:
c0029442:	83 ec 0c             	sub    esp,0xc
c0029445:	83 ec 0c             	sub    esp,0xc
c0029448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002944c:	e8 cd ff ff ff       	call   c002941e <ISO9660::~ISO9660()>
c0029451:	83 c4 10             	add    esp,0x10
c0029454:	83 ec 08             	sub    esp,0x8
c0029457:	6a 08                	push   0x8
c0029459:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002945d:	e8 82 fd fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c0029462:	83 c4 10             	add    esp,0x10
c0029465:	83 c4 0c             	add    esp,0xc
c0029468:	c3                   	ret    
c0029469:	90                   	nop

c002946a <ISO9660::exists(char const*)>:
c002946a:	83 ec 18             	sub    esp,0x18
c002946d:	68 e7 34 03 c0       	push   0xc00334e7
c0029472:	e8 f3 6d ff ff       	call   c002026a <KePanic(char const*)>
c0029477:	31 c0                	xor    eax,eax
c0029479:	83 c4 1c             	add    esp,0x1c
c002947c:	c3                   	ret    
c002947d:	90                   	nop

c002947e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002947e:	56                   	push   esi
c002947f:	53                   	push   ebx
c0029480:	53                   	push   ebx
c0029481:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029485:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029489:	85 db                	test   ebx,ebx
c002948b:	0f 84 ca 00 00 00    	je     c002955b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029491:	85 f6                	test   esi,esi
c0029493:	0f 84 c2 00 00 00    	je     c002955b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029499:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c002949e:	b8 03 00 00 00       	mov    eax,0x3
c00294a3:	0f 85 b7 00 00 00    	jne    c0029560 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00294a9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00294ab:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00294b1:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00294b8:	74 1b                	je     c00294d5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c00294ba:	85 c0                	test   eax,eax
c00294bc:	74 10                	je     c00294ce <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c00294be:	83 ec 0c             	sub    esp,0xc
c00294c1:	68 05 35 03 c0       	push   0xc0033505
c00294c6:	e8 9f 6d ff ff       	call   c002026a <KePanic(char const*)>
c00294cb:	83 c4 10             	add    esp,0x10
c00294ce:	8a 03                	mov    al,BYTE PTR [ebx]
c00294d0:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00294d5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00294d8:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00294df:	85 c0                	test   eax,eax
c00294e1:	74 09                	je     c00294ec <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00294e3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00294ea:	74 48                	je     c0029534 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00294ec:	83 ec 0c             	sub    esp,0xc
c00294ef:	68 15 35 03 c0       	push   0xc0033515
c00294f4:	e8 e9 fd fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c00294f9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00294fc:	83 c4 10             	add    esp,0x10
c00294ff:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029506:	85 c0                	test   eax,eax
c0029508:	74 17                	je     c0029521 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c002950a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029511:	83 ec 0c             	sub    esp,0xc
c0029514:	68 35 35 03 c0       	push   0xc0033535
c0029519:	e8 c4 fd fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002951e:	83 c4 10             	add    esp,0x10
c0029521:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029528:	83 ec 0c             	sub    esp,0xc
c002952b:	50                   	push   eax
c002952c:	e8 ee d6 fd ff       	call   c0006c1f <init_percd>
c0029531:	83 c4 10             	add    esp,0x10
c0029534:	51                   	push   ecx
c0029535:	83 c3 03             	add    ebx,0x3
c0029538:	51                   	push   ecx
c0029539:	6a 00                	push   0x0
c002953b:	53                   	push   ebx
c002953c:	e8 a1 d1 fd ff       	call   c00066e2 <iso_open>
c0029541:	83 c4 10             	add    esp,0x10
c0029544:	89 c2                	mov    edx,eax
c0029546:	b8 01 00 00 00       	mov    eax,0x1
c002954b:	83 fa ff             	cmp    edx,0xffffffff
c002954e:	74 10                	je     c0029560 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029550:	83 c2 32             	add    edx,0x32
c0029553:	31 c0                	xor    eax,eax
c0029555:	01 d2                	add    edx,edx
c0029557:	89 16                	mov    DWORD PTR [esi],edx
c0029559:	eb 05                	jmp    c0029560 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002955b:	b8 04 00 00 00       	mov    eax,0x4
c0029560:	5a                   	pop    edx
c0029561:	5b                   	pop    ebx
c0029562:	5e                   	pop    esi
c0029563:	c3                   	ret    

c0029564 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029564:	53                   	push   ebx
c0029565:	83 ec 08             	sub    esp,0x8
c0029568:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002956c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029570:	85 c0                	test   eax,eax
c0029572:	74 2d                	je     c00295a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029574:	85 db                	test   ebx,ebx
c0029576:	74 29                	je     c00295a1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029578:	52                   	push   edx
c0029579:	b9 02 00 00 00       	mov    ecx,0x2
c002957e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029582:	99                   	cdq    
c0029583:	f7 f9                	idiv   ecx
c0029585:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029589:	83 e8 32             	sub    eax,0x32
c002958c:	50                   	push   eax
c002958d:	e8 f8 d1 fd ff       	call   c000678a <iso_read>
c0029592:	83 c4 10             	add    esp,0x10
c0029595:	89 03                	mov    DWORD PTR [ebx],eax
c0029597:	09 d0                	or     eax,edx
c0029599:	0f 94 c0             	sete   al
c002959c:	0f b6 c0             	movzx  eax,al
c002959f:	eb 05                	jmp    c00295a6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c00295a1:	b8 04 00 00 00       	mov    eax,0x4
c00295a6:	83 c4 08             	add    esp,0x8
c00295a9:	5b                   	pop    ebx
c00295aa:	c3                   	ret    
c00295ab:	90                   	nop

c00295ac <ISO9660::seek(void*, unsigned long long)>:
c00295ac:	57                   	push   edi
c00295ad:	b8 04 00 00 00       	mov    eax,0x4
c00295b2:	56                   	push   esi
c00295b3:	51                   	push   ecx
c00295b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00295bc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00295c0:	85 d2                	test   edx,edx
c00295c2:	74 26                	je     c00295ea <ISO9660::seek(void*, unsigned long long)+0x3e>
c00295c4:	89 d0                	mov    eax,edx
c00295c6:	b9 02 00 00 00       	mov    ecx,0x2
c00295cb:	6a 00                	push   0x0
c00295cd:	99                   	cdq    
c00295ce:	f7 f9                	idiv   ecx
c00295d0:	57                   	push   edi
c00295d1:	56                   	push   esi
c00295d2:	83 e8 32             	sub    eax,0x32
c00295d5:	50                   	push   eax
c00295d6:	e8 c5 d2 fd ff       	call   c00068a0 <iso_seek>
c00295db:	83 c4 10             	add    esp,0x10
c00295de:	31 f0                	xor    eax,esi
c00295e0:	31 fa                	xor    edx,edi
c00295e2:	09 d0                	or     eax,edx
c00295e4:	0f 95 c0             	setne  al
c00295e7:	0f b6 c0             	movzx  eax,al
c00295ea:	5a                   	pop    edx
c00295eb:	5e                   	pop    esi
c00295ec:	5f                   	pop    edi
c00295ed:	c3                   	ret    

c00295ee <ISO9660::tell(void*, unsigned long long*)>:
c00295ee:	53                   	push   ebx
c00295ef:	83 ec 08             	sub    esp,0x8
c00295f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00295f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00295fa:	85 c0                	test   eax,eax
c00295fc:	74 24                	je     c0029622 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00295fe:	85 db                	test   ebx,ebx
c0029600:	74 20                	je     c0029622 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029602:	b9 02 00 00 00       	mov    ecx,0x2
c0029607:	99                   	cdq    
c0029608:	f7 f9                	idiv   ecx
c002960a:	83 ec 0c             	sub    esp,0xc
c002960d:	83 e8 32             	sub    eax,0x32
c0029610:	50                   	push   eax
c0029611:	e8 0e d3 fd ff       	call   c0006924 <iso_tell>
c0029616:	83 c4 10             	add    esp,0x10
c0029619:	89 03                	mov    DWORD PTR [ebx],eax
c002961b:	31 c0                	xor    eax,eax
c002961d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0029620:	eb 05                	jmp    c0029627 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0029622:	b8 04 00 00 00       	mov    eax,0x4
c0029627:	83 c4 08             	add    esp,0x8
c002962a:	5b                   	pop    ebx
c002962b:	c3                   	ret    

c002962c <ISO9660::stat(void*, unsigned long long*)>:
c002962c:	56                   	push   esi
c002962d:	53                   	push   ebx
c002962e:	83 ec 10             	sub    esp,0x10
c0029631:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029635:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029639:	68 59 35 03 c0       	push   0xc0033559
c002963e:	e8 9f fc fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0029643:	83 c4 10             	add    esp,0x10
c0029646:	85 db                	test   ebx,ebx
c0029648:	74 2a                	je     c0029674 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002964a:	85 f6                	test   esi,esi
c002964c:	74 26                	je     c0029674 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002964e:	89 d8                	mov    eax,ebx
c0029650:	b9 02 00 00 00       	mov    ecx,0x2
c0029655:	99                   	cdq    
c0029656:	83 ec 0c             	sub    esp,0xc
c0029659:	f7 f9                	idiv   ecx
c002965b:	83 e8 32             	sub    eax,0x32
c002965e:	50                   	push   eax
c002965f:	e8 f1 d2 fd ff       	call   c0006955 <iso_total>
c0029664:	83 c4 10             	add    esp,0x10
c0029667:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c002966e:	89 06                	mov    DWORD PTR [esi],eax
c0029670:	31 c0                	xor    eax,eax
c0029672:	eb 05                	jmp    c0029679 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029674:	b8 04 00 00 00       	mov    eax,0x4
c0029679:	5a                   	pop    edx
c002967a:	5b                   	pop    ebx
c002967b:	5e                   	pop    esi
c002967c:	c3                   	ret    
c002967d:	90                   	nop

c002967e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002967e:	55                   	push   ebp
c002967f:	57                   	push   edi
c0029680:	56                   	push   esi
c0029681:	53                   	push   ebx
c0029682:	83 ec 18             	sub    esp,0x18
c0029685:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029689:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002968d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029691:	68 61 35 03 c0       	push   0xc0033561
c0029696:	e8 47 fc fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002969b:	83 c4 10             	add    esp,0x10
c002969e:	85 ff                	test   edi,edi
c00296a0:	0f 94 c0             	sete   al
c00296a3:	85 f6                	test   esi,esi
c00296a5:	0f 94 c2             	sete   dl
c00296a8:	09 d0                	or     eax,edx
c00296aa:	a8 01                	test   al,0x1
c00296ac:	0f 85 dd 00 00 00    	jne    c002978f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00296b2:	85 db                	test   ebx,ebx
c00296b4:	0f 84 d5 00 00 00    	je     c002978f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c00296ba:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00296bd:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00296c3:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00296ca:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296d1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00296d3:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00296d9:	74 1b                	je     c00296f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00296db:	85 c0                	test   eax,eax
c00296dd:	74 10                	je     c00296ef <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00296df:	83 ec 0c             	sub    esp,0xc
c00296e2:	68 05 35 03 c0       	push   0xc0033505
c00296e7:	e8 7e 6b ff ff       	call   c002026a <KePanic(char const*)>
c00296ec:	83 c4 10             	add    esp,0x10
c00296ef:	8a 03                	mov    al,BYTE PTR [ebx]
c00296f1:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00296f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296f9:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029700:	85 c0                	test   eax,eax
c0029702:	74 09                	je     c002970d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c0029704:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002970b:	74 51                	je     c002975e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c002970d:	83 ec 0c             	sub    esp,0xc
c0029710:	68 69 35 03 c0       	push   0xc0033569
c0029715:	e8 c8 fb fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002971a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002971d:	83 c4 10             	add    esp,0x10
c0029720:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c0029728:	74 21                	je     c002974b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c002972a:	83 ec 0c             	sub    esp,0xc
c002972d:	68 89 35 03 c0       	push   0xc0033589
c0029732:	e8 ab fb fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0029737:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002973a:	83 c4 10             	add    esp,0x10
c002973d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029744:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002974b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029752:	83 ec 0c             	sub    esp,0xc
c0029755:	50                   	push   eax
c0029756:	e8 c4 d4 fd ff       	call   c0006c1f <init_percd>
c002975b:	83 c4 10             	add    esp,0x10
c002975e:	52                   	push   edx
c002975f:	83 c3 03             	add    ebx,0x3
c0029762:	52                   	push   edx
c0029763:	6a 00                	push   0x0
c0029765:	53                   	push   ebx
c0029766:	e8 77 cf fd ff       	call   c00066e2 <iso_open>
c002976b:	83 c4 10             	add    esp,0x10
c002976e:	83 f8 ff             	cmp    eax,0xffffffff
c0029771:	89 c5                	mov    ebp,eax
c0029773:	75 21                	jne    c0029796 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029775:	50                   	push   eax
c0029776:	50                   	push   eax
c0029777:	6a 01                	push   0x1
c0029779:	53                   	push   ebx
c002977a:	e8 63 cf fd ff       	call   c00066e2 <iso_open>
c002977f:	83 c4 10             	add    esp,0x10
c0029782:	ba 02 00 00 00       	mov    edx,0x2
c0029787:	40                   	inc    eax
c0029788:	74 2b                	je     c00297b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002978a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002978d:	eb 24                	jmp    c00297b3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c002978f:	ba 04 00 00 00       	mov    edx,0x4
c0029794:	eb 1f                	jmp    c00297b5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029796:	83 ec 0c             	sub    esp,0xc
c0029799:	50                   	push   eax
c002979a:	e8 b6 d1 fd ff       	call   c0006955 <iso_total>
c002979f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00297a6:	89 07                	mov    DWORD PTR [edi],eax
c00297a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00297ab:	e8 bc cf fd ff       	call   c000676c <iso_close>
c00297b0:	83 c4 10             	add    esp,0x10
c00297b3:	31 d2                	xor    edx,edx
c00297b5:	83 c4 0c             	add    esp,0xc
c00297b8:	89 d0                	mov    eax,edx
c00297ba:	5b                   	pop    ebx
c00297bb:	5e                   	pop    esi
c00297bc:	5f                   	pop    edi
c00297bd:	5d                   	pop    ebp
c00297be:	c3                   	ret    
c00297bf:	90                   	nop

c00297c0 <ISO9660::close(void*)>:
c00297c0:	83 ec 0c             	sub    esp,0xc
c00297c3:	b8 04 00 00 00       	mov    eax,0x4
c00297c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297cc:	85 d2                	test   edx,edx
c00297ce:	74 1b                	je     c00297eb <ISO9660::close(void*)+0x2b>
c00297d0:	89 d0                	mov    eax,edx
c00297d2:	b9 02 00 00 00       	mov    ecx,0x2
c00297d7:	99                   	cdq    
c00297d8:	83 ec 0c             	sub    esp,0xc
c00297db:	f7 f9                	idiv   ecx
c00297dd:	83 e8 32             	sub    eax,0x32
c00297e0:	50                   	push   eax
c00297e1:	e8 86 cf fd ff       	call   c000676c <iso_close>
c00297e6:	83 c4 10             	add    esp,0x10
c00297e9:	31 c0                	xor    eax,eax
c00297eb:	83 c4 0c             	add    esp,0xc
c00297ee:	c3                   	ret    
c00297ef:	90                   	nop

c00297f0 <ISO9660::openDir(char const*, void**)>:
c00297f0:	56                   	push   esi
c00297f1:	53                   	push   ebx
c00297f2:	50                   	push   eax
c00297f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00297f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00297fb:	85 db                	test   ebx,ebx
c00297fd:	0f 84 bd 00 00 00    	je     c00298c0 <ISO9660::openDir(char const*, void**)+0xd0>
c0029803:	85 f6                	test   esi,esi
c0029805:	0f 84 b5 00 00 00    	je     c00298c0 <ISO9660::openDir(char const*, void**)+0xd0>
c002980b:	8a 13                	mov    dl,BYTE PTR [ebx]
c002980d:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c0029813:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002981a:	74 1b                	je     c0029837 <ISO9660::openDir(char const*, void**)+0x47>
c002981c:	85 c0                	test   eax,eax
c002981e:	74 10                	je     c0029830 <ISO9660::openDir(char const*, void**)+0x40>
c0029820:	83 ec 0c             	sub    esp,0xc
c0029823:	68 05 35 03 c0       	push   0xc0033505
c0029828:	e8 3d 6a ff ff       	call   c002026a <KePanic(char const*)>
c002982d:	83 c4 10             	add    esp,0x10
c0029830:	8a 03                	mov    al,BYTE PTR [ebx]
c0029832:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029837:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002983a:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029841:	85 c0                	test   eax,eax
c0029843:	74 10                	je     c0029855 <ISO9660::openDir(char const*, void**)+0x65>
c0029845:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002984c:	74 1a                	je     c0029868 <ISO9660::openDir(char const*, void**)+0x78>
c002984e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029855:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002985c:	83 ec 0c             	sub    esp,0xc
c002985f:	50                   	push   eax
c0029860:	e8 ba d3 fd ff       	call   c0006c1f <init_percd>
c0029865:	83 c4 10             	add    esp,0x10
c0029868:	50                   	push   eax
c0029869:	83 c3 03             	add    ebx,0x3
c002986c:	50                   	push   eax
c002986d:	6a 01                	push   0x1
c002986f:	53                   	push   ebx
c0029870:	e8 6d ce fd ff       	call   c00066e2 <iso_open>
c0029875:	83 c4 10             	add    esp,0x10
c0029878:	83 f8 ff             	cmp    eax,0xffffffff
c002987b:	89 c3                	mov    ebx,eax
c002987d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029882:	75 1c                	jne    c00298a0 <ISO9660::openDir(char const*, void**)+0xb0>
c0029884:	53                   	push   ebx
c0029885:	53                   	push   ebx
c0029886:	68 ad 35 03 c0       	push   0xc00335ad
c002988b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029891:	e8 ee db fe ff       	call   c0017484 <VgaText::puts(char const*)>
c0029896:	83 c4 10             	add    esp,0x10
c0029899:	b8 01 00 00 00       	mov    eax,0x1
c002989e:	eb 25                	jmp    c00298c5 <ISO9660::openDir(char const*, void**)+0xd5>
c00298a0:	51                   	push   ecx
c00298a1:	01 db                	add    ebx,ebx
c00298a3:	51                   	push   ecx
c00298a4:	83 c3 65             	add    ebx,0x65
c00298a7:	68 c0 35 03 c0       	push   0xc00335c0
c00298ac:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00298b2:	e8 cd db fe ff       	call   c0017484 <VgaText::puts(char const*)>
c00298b7:	83 c4 10             	add    esp,0x10
c00298ba:	31 c0                	xor    eax,eax
c00298bc:	89 1e                	mov    DWORD PTR [esi],ebx
c00298be:	eb 05                	jmp    c00298c5 <ISO9660::openDir(char const*, void**)+0xd5>
c00298c0:	b8 04 00 00 00       	mov    eax,0x4
c00298c5:	5a                   	pop    edx
c00298c6:	5b                   	pop    ebx
c00298c7:	5e                   	pop    esi
c00298c8:	c3                   	ret    
c00298c9:	90                   	nop

c00298ca <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00298ca:	55                   	push   ebp
c00298cb:	57                   	push   edi
c00298cc:	56                   	push   esi
c00298cd:	53                   	push   ebx
c00298ce:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00298d4:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00298db:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00298e2:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00298e9:	85 db                	test   ebx,ebx
c00298eb:	0f 84 e4 00 00 00    	je     c00299d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00298f1:	85 ed                	test   ebp,ebp
c00298f3:	0f 84 dc 00 00 00    	je     c00299d5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00298f9:	83 ec 0c             	sub    esp,0xc
c00298fc:	68 d3 35 03 c0       	push   0xc00335d3
c0029901:	e8 dc f9 fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c0029906:	89 d8                	mov    eax,ebx
c0029908:	b9 02 00 00 00       	mov    ecx,0x2
c002990d:	99                   	cdq    
c002990e:	f7 f9                	idiv   ecx
c0029910:	83 e8 32             	sub    eax,0x32
c0029913:	89 04 24             	mov    DWORD PTR [esp],eax
c0029916:	e8 8c d0 fd ff       	call   c00069a7 <iso_readdir>
c002991b:	83 c4 10             	add    esp,0x10
c002991e:	85 c0                	test   eax,eax
c0029920:	89 c3                	mov    ebx,eax
c0029922:	75 38                	jne    c002995c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0029924:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029929:	53                   	push   ebx
c002992a:	53                   	push   ebx
c002992b:	68 de 35 03 c0       	push   0xc00335de
c0029930:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029936:	e8 49 db fe ff       	call   c0017484 <VgaText::puts(char const*)>
c002993b:	83 c4 0c             	add    esp,0xc
c002993e:	68 10 01 00 00       	push   0x110
c0029943:	6a 00                	push   0x0
c0029945:	57                   	push   edi
c0029946:	e8 a5 6b fd ff       	call   c00004f0 <memset>
c002994b:	83 c4 10             	add    esp,0x10
c002994e:	b8 01 00 00 00       	mov    eax,0x1
c0029953:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c002995a:	eb 7e                	jmp    c00299da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c002995c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029962:	8d 70 08             	lea    esi,[eax+0x8]
c0029965:	83 ec 0c             	sub    esp,0xc
c0029968:	56                   	push   esi
c0029969:	e8 12 6c fd ff       	call   c0000580 <strlen>
c002996e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029976:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002997a:	83 c4 10             	add    esp,0x10
c002997d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029981:	75 0a                	jne    c002998d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0029983:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0029986:	b8 02 00 00 00       	mov    eax,0x2
c002998b:	74 05                	je     c0029992 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c002998d:	b8 01 00 00 00       	mov    eax,0x1
c0029992:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029996:	50                   	push   eax
c0029997:	50                   	push   eax
c0029998:	56                   	push   esi
c0029999:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002999d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00299a1:	50                   	push   eax
c00299a2:	e8 a9 6c fd ff       	call   c0000650 <strcpy>
c00299a7:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00299ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00299b0:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c00299b7:	5a                   	pop    edx
c00299b8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00299bd:	59                   	pop    ecx
c00299be:	68 f1 35 03 c0       	push   0xc00335f1
c00299c3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00299c9:	e8 b6 da fe ff       	call   c0017484 <VgaText::puts(char const*)>
c00299ce:	83 c4 10             	add    esp,0x10
c00299d1:	31 c0                	xor    eax,eax
c00299d3:	eb 05                	jmp    c00299da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00299d5:	b8 04 00 00 00       	mov    eax,0x4
c00299da:	81 c4 1c 01 00 00    	add    esp,0x11c
c00299e0:	5b                   	pop    ebx
c00299e1:	5e                   	pop    esi
c00299e2:	5f                   	pop    edi
c00299e3:	5d                   	pop    ebp
c00299e4:	c3                   	ret    

c00299e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00299e5:	57                   	push   edi
c00299e6:	56                   	push   esi
c00299e7:	53                   	push   ebx
c00299e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00299ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00299f0:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c00299f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00299fa:	0f be cb             	movsx  ecx,bl
c00299fd:	75 0b                	jne    c0029a0a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00299ff:	0f be 05 40 48 03 c0 	movsx  eax,BYTE PTR ds:0xc0034840
c0029a06:	39 c8                	cmp    eax,ecx
c0029a08:	74 47                	je     c0029a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029a0a:	83 ec 0c             	sub    esp,0xc
c0029a0d:	31 d2                	xor    edx,edx
c0029a0f:	68 a0 03 04 c0       	push   0xc00403a0
c0029a14:	6a 01                	push   0x1
c0029a16:	52                   	push   edx
c0029a17:	56                   	push   esi
c0029a18:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c0029a1f:	e8 4a 2d ff ff       	call   c001c76e <LogicalDisk::read(unsigned long long, int, void*)>
c0029a24:	83 c4 20             	add    esp,0x20
c0029a27:	85 c0                	test   eax,eax
c0029a29:	75 0e                	jne    c0029a39 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c0029a2b:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029a31:	88 1d 40 48 03 c0    	mov    BYTE PTR ds:0xc0034840,bl
c0029a37:	eb 18                	jmp    c0029a51 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029a39:	50                   	push   eax
c0029a3a:	68 00 08 00 00       	push   0x800
c0029a3f:	6a 00                	push   0x0
c0029a41:	57                   	push   edi
c0029a42:	e8 a9 6a fd ff       	call   c00004f0 <memset>
c0029a47:	83 c4 10             	add    esp,0x10
c0029a4a:	b8 01 00 00 00       	mov    eax,0x1
c0029a4f:	eb 0e                	jmp    c0029a5f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029a51:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029a56:	b9 00 08 00 00       	mov    ecx,0x800
c0029a5b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029a5d:	31 c0                	xor    eax,eax
c0029a5f:	5b                   	pop    ebx
c0029a60:	5e                   	pop    esi
c0029a61:	5f                   	pop    edi
c0029a62:	c3                   	ret    
c0029a63:	90                   	nop

c0029a64 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029a64:	53                   	push   ebx
c0029a65:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029a6b:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029a75:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029a7c:	8d 58 41             	lea    ebx,[eax+0x41]
c0029a7f:	0f be db             	movsx  ebx,bl
c0029a82:	53                   	push   ebx
c0029a83:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029a87:	50                   	push   eax
c0029a88:	6a 10                	push   0x10
c0029a8a:	e8 56 ff ff ff       	call   c00299e5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029a8f:	83 c4 10             	add    esp,0x10
c0029a92:	31 d2                	xor    edx,edx
c0029a94:	85 c0                	test   eax,eax
c0029a96:	75 33                	jne    c0029acb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a98:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029a9d:	75 2c                	jne    c0029acb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029a9f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029aa4:	75 25                	jne    c0029acb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029aa6:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029aab:	75 1e                	jne    c0029acb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029aad:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029ab2:	75 17                	jne    c0029acb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029ab4:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029ab9:	75 10                	jne    c0029acb <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029abb:	83 ec 0c             	sub    esp,0xc
c0029abe:	53                   	push   ebx
c0029abf:	e8 5b d1 fd ff       	call   c0006c1f <init_percd>
c0029ac4:	83 c4 10             	add    esp,0x10
c0029ac7:	40                   	inc    eax
c0029ac8:	0f 95 c2             	setne  dl
c0029acb:	81 c4 08 08 00 00    	add    esp,0x808
c0029ad1:	88 d0                	mov    al,dl
c0029ad3:	5b                   	pop    ebx
c0029ad4:	c3                   	ret    
c0029ad5:	90                   	nop

c0029ad6 <ISO9660::ISO9660()>:
c0029ad6:	83 ec 0c             	sub    esp,0xc
c0029ad9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029add:	83 ec 0c             	sub    esp,0xc
c0029ae0:	50                   	push   eax
c0029ae1:	e8 5e 06 ff ff       	call   c001a144 <Filesystem::Filesystem()>
c0029ae6:	83 c4 10             	add    esp,0x10
c0029ae9:	ba 0c 36 03 c0       	mov    edx,0xc003360c
c0029aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029af2:	89 10                	mov    DWORD PTR [eax],edx
c0029af4:	e8 38 d2 fd ff       	call   c0006d31 <fs_iso9660_init>
c0029af9:	90                   	nop
c0029afa:	83 c4 0c             	add    esp,0xc
c0029afd:	c3                   	ret    

c0029afe <SoundCard::beginPlayback()>:
c0029afe:	c7 44 24 04 70 36 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033670
c0029b06:	e9 5f 67 ff ff       	jmp    c002026a <KePanic(char const*)>
c0029b0b:	90                   	nop

c0029b0c <SoundCard::stopPlayback()>:
c0029b0c:	c7 44 24 04 70 36 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033670
c0029b14:	e9 51 67 ff ff       	jmp    c002026a <KePanic(char const*)>
c0029b19:	90                   	nop

c0029b1a <SoundCard::SoundCard(char const*)>:
c0029b1a:	83 ec 1c             	sub    esp,0x1c
c0029b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b21:	83 ec 08             	sub    esp,0x8
c0029b24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029b28:	50                   	push   eax
c0029b29:	e8 ac 19 ff ff       	call   c001b4da <Device::Device(char const*)>
c0029b2e:	83 c4 10             	add    esp,0x10
c0029b31:	ba bc 36 03 c0       	mov    edx,0xc00336bc
c0029b36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b3a:	89 10                	mov    DWORD PTR [eax],edx
c0029b3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b40:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029b47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b4b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029b55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b59:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b67:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029b71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b75:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029b7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029b87:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029b8c:	7f 1a                	jg     c0029ba8 <SoundCard::SoundCard(char const*)+0x8e>
c0029b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029b96:	83 c2 54             	add    edx,0x54
c0029b99:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029ba1:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029ba6:	eb df                	jmp    c0029b87 <SoundCard::SoundCard(char const*)+0x6d>
c0029ba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029bac:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029bb3:	90                   	nop
c0029bb4:	83 c4 1c             	add    esp,0x1c
c0029bb7:	c3                   	ret    

c0029bb8 <SoundCard::~SoundCard()>:
c0029bb8:	83 ec 0c             	sub    esp,0xc
c0029bbb:	ba bc 36 03 c0       	mov    edx,0xc00336bc
c0029bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bc4:	89 10                	mov    DWORD PTR [eax],edx
c0029bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bca:	83 ec 0c             	sub    esp,0xc
c0029bcd:	50                   	push   eax
c0029bce:	e8 a7 16 ff ff       	call   c001b27a <Device::~Device()>
c0029bd3:	83 c4 10             	add    esp,0x10
c0029bd6:	90                   	nop
c0029bd7:	83 c4 0c             	add    esp,0xc
c0029bda:	c3                   	ret    
c0029bdb:	90                   	nop

c0029bdc <SoundCard::~SoundCard()>:
c0029bdc:	83 ec 0c             	sub    esp,0xc
c0029bdf:	83 ec 0c             	sub    esp,0xc
c0029be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029be6:	e8 cd ff ff ff       	call   c0029bb8 <SoundCard::~SoundCard()>
c0029beb:	83 c4 10             	add    esp,0x10
c0029bee:	83 ec 08             	sub    esp,0x8
c0029bf1:	68 e8 01 00 00       	push   0x1e8
c0029bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bfa:	e8 e5 f5 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c0029bff:	83 c4 10             	add    esp,0x10
c0029c02:	83 c4 0c             	add    esp,0xc
c0029c05:	c3                   	ret    

c0029c06 <SoundCard::configureRates(int, int, int)>:
c0029c06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029c0a:	31 c0                	xor    eax,eax
c0029c0c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029c13:	75 20                	jne    c0029c35 <SoundCard::configureRates(int, int, int)+0x2f>
c0029c15:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029c19:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029c1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029c23:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c2d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029c33:	b0 01                	mov    al,0x1
c0029c35:	c3                   	ret    

c0029c36 <SoundCard::getSamples16(int, short*)>:
c0029c36:	55                   	push   ebp
c0029c37:	57                   	push   edi
c0029c38:	31 ff                	xor    edi,edi
c0029c3a:	56                   	push   esi
c0029c3b:	53                   	push   ebx
c0029c3c:	31 db                	xor    ebx,ebx
c0029c3e:	83 ec 10             	sub    esp,0x10
c0029c41:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029c45:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029c49:	8d 04 36             	lea    eax,[esi+esi*1]
c0029c4c:	50                   	push   eax
c0029c4d:	6a 00                	push   0x0
c0029c4f:	55                   	push   ebp
c0029c50:	e8 9b 68 fd ff       	call   c00004f0 <memset>
c0029c55:	83 c4 10             	add    esp,0x10
c0029c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029c5c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0029c63:	85 c0                	test   eax,eax
c0029c65:	74 1a                	je     c0029c81 <SoundCard::getSamples16(int, short*)+0x4b>
c0029c67:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029c6b:	75 14                	jne    c0029c81 <SoundCard::getSamples16(int, short*)+0x4b>
c0029c6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029c71:	55                   	push   ebp
c0029c72:	56                   	push   esi
c0029c73:	50                   	push   eax
c0029c74:	e8 f3 02 00 00       	call   c0029f6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029c79:	83 c4 10             	add    esp,0x10
c0029c7c:	39 c3                	cmp    ebx,eax
c0029c7e:	0f 4c d8             	cmovl  ebx,eax
c0029c81:	47                   	inc    edi
c0029c82:	83 ff 20             	cmp    edi,0x20
c0029c85:	75 d1                	jne    c0029c58 <SoundCard::getSamples16(int, short*)+0x22>
c0029c87:	83 c4 0c             	add    esp,0xc
c0029c8a:	89 d8                	mov    eax,ebx
c0029c8c:	5b                   	pop    ebx
c0029c8d:	5e                   	pop    esi
c0029c8e:	5f                   	pop    edi
c0029c8f:	5d                   	pop    ebp
c0029c90:	c3                   	ret    
c0029c91:	90                   	nop

c0029c92 <SoundCard::getSamples32(int, int*)>:
c0029c92:	55                   	push   ebp
c0029c93:	57                   	push   edi
c0029c94:	31 ff                	xor    edi,edi
c0029c96:	56                   	push   esi
c0029c97:	31 f6                	xor    esi,esi
c0029c99:	53                   	push   ebx
c0029c9a:	83 ec 10             	sub    esp,0x10
c0029c9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029ca1:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029ca5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029ca9:	c1 e0 02             	shl    eax,0x2
c0029cac:	50                   	push   eax
c0029cad:	6a 00                	push   0x0
c0029caf:	55                   	push   ebp
c0029cb0:	e8 3b 68 fd ff       	call   c00004f0 <memset>
c0029cb5:	83 c4 10             	add    esp,0x10
c0029cb8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029cbf:	85 c0                	test   eax,eax
c0029cc1:	74 1a                	je     c0029cdd <SoundCard::getSamples32(int, int*)+0x4b>
c0029cc3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029cc7:	75 14                	jne    c0029cdd <SoundCard::getSamples32(int, int*)+0x4b>
c0029cc9:	53                   	push   ebx
c0029cca:	55                   	push   ebp
c0029ccb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029ccf:	50                   	push   eax
c0029cd0:	e8 67 03 00 00       	call   c002a03c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029cd5:	83 c4 10             	add    esp,0x10
c0029cd8:	39 c6                	cmp    esi,eax
c0029cda:	0f 4c f0             	cmovl  esi,eax
c0029cdd:	47                   	inc    edi
c0029cde:	83 ff 20             	cmp    edi,0x20
c0029ce1:	75 d5                	jne    c0029cb8 <SoundCard::getSamples32(int, int*)+0x26>
c0029ce3:	85 f6                	test   esi,esi
c0029ce5:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029cec:	75 0f                	jne    c0029cfd <SoundCard::getSamples32(int, int*)+0x6b>
c0029cee:	85 c0                	test   eax,eax
c0029cf0:	74 1b                	je     c0029d0d <SoundCard::getSamples32(int, int*)+0x7b>
c0029cf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029cf4:	83 ec 0c             	sub    esp,0xc
c0029cf7:	53                   	push   ebx
c0029cf8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029cfb:	eb 0d                	jmp    c0029d0a <SoundCard::getSamples32(int, int*)+0x78>
c0029cfd:	85 c0                	test   eax,eax
c0029cff:	75 0c                	jne    c0029d0d <SoundCard::getSamples32(int, int*)+0x7b>
c0029d01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029d03:	83 ec 0c             	sub    esp,0xc
c0029d06:	53                   	push   ebx
c0029d07:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029d0a:	83 c4 10             	add    esp,0x10
c0029d0d:	83 c4 0c             	add    esp,0xc
c0029d10:	89 f0                	mov    eax,esi
c0029d12:	5b                   	pop    ebx
c0029d13:	5e                   	pop    esi
c0029d14:	5f                   	pop    edi
c0029d15:	5d                   	pop    ebp
c0029d16:	c3                   	ret    
c0029d17:	90                   	nop

c0029d18 <SoundCard::addChannel(SoundPort*)>:
c0029d18:	83 ec 0c             	sub    esp,0xc
c0029d1b:	31 c0                	xor    eax,eax
c0029d1d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029d21:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029d29:	74 1b                	je     c0029d46 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029d2b:	40                   	inc    eax
c0029d2c:	83 f8 20             	cmp    eax,0x20
c0029d2f:	75 f0                	jne    c0029d21 <SoundCard::addChannel(SoundPort*)+0x9>
c0029d31:	83 ec 0c             	sub    esp,0xc
c0029d34:	68 95 36 03 c0       	push   0xc0033695
c0029d39:	e8 2c 65 ff ff       	call   c002026a <KePanic(char const*)>
c0029d3e:	83 c4 10             	add    esp,0x10
c0029d41:	83 c8 ff             	or     eax,0xffffffff
c0029d44:	eb 0b                	jmp    c0029d51 <SoundCard::addChannel(SoundPort*)+0x39>
c0029d46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029d4a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029d51:	83 c4 0c             	add    esp,0xc
c0029d54:	c3                   	ret    
c0029d55:	90                   	nop

c0029d56 <SoundCard::removeChannel(int)>:
c0029d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029d5e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029d69:	c3                   	ret    
c0029d6a:	66 90                	xchg   ax,ax

c0029d6c <SoundPort::SoundPort(int, int, int, int)>:
c0029d6c:	83 ec 0c             	sub    esp,0xc
c0029d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d73:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d7e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d8a:	89 10                	mov    DWORD PTR [eax],edx
c0029d8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d90:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029d9f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029da2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029da7:	75 13                	jne    c0029dbc <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dad:	8b 00                	mov    eax,DWORD PTR [eax]
c0029daf:	05 a0 0f 00 00       	add    eax,0xfa0
c0029db4:	d1 e0                	shl    eax,1
c0029db6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029dba:	66 90                	xchg   ax,ax
c0029dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dcb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dd6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029dd9:	c1 e0 02             	shl    eax,0x2
c0029ddc:	83 ec 0c             	sub    esp,0xc
c0029ddf:	50                   	push   eax
c0029de0:	e8 b6 c6 fe ff       	call   c001649b <malloc>
c0029de5:	83 c4 10             	add    esp,0x10
c0029de8:	89 c2                	mov    edx,eax
c0029dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029df1:	90                   	nop
c0029df2:	83 c4 0c             	add    esp,0xc
c0029df5:	c3                   	ret    
c0029df6:	66 90                	xchg   ax,ax

c0029df8 <SoundPort::~SoundPort()>:
c0029df8:	83 ec 0c             	sub    esp,0xc
c0029dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029e02:	85 c0                	test   eax,eax
c0029e04:	74 1e                	je     c0029e24 <SoundPort::~SoundPort()+0x2c>
c0029e06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029e0d:	83 ec 0c             	sub    esp,0xc
c0029e10:	50                   	push   eax
c0029e11:	e8 a5 c6 fe ff       	call   c00164bb <free>
c0029e16:	83 c4 10             	add    esp,0x10
c0029e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e1d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029e24:	90                   	nop
c0029e25:	83 c4 0c             	add    esp,0xc
c0029e28:	c3                   	ret    
c0029e29:	90                   	nop
c0029e2a:	66 90                	xchg   ax,ax

c0029e2c <SoundPort::unpause()>:
c0029e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e30:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029e34:	c3                   	ret    
c0029e35:	90                   	nop
c0029e36:	66 90                	xchg   ax,ax

c0029e38 <SoundPort::pause()>:
c0029e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e3c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029e40:	c3                   	ret    
c0029e41:	90                   	nop
c0029e42:	66 90                	xchg   ax,ax

c0029e44 <SoundPort::getBufferUsed()>:
c0029e44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e48:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029e4b:	c3                   	ret    

c0029e4c <SoundPort::getBufferSize()>:
c0029e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029e50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029e53:	c3                   	ret    

c0029e54 <SoundPort::buffer16(short*, int)>:
c0029e54:	55                   	push   ebp
c0029e55:	57                   	push   edi
c0029e56:	56                   	push   esi
c0029e57:	53                   	push   ebx
c0029e58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029e5c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029e60:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029e63:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029e66:	74 68                	je     c0029ed0 <SoundPort::buffer16(short*, int)+0x7c>
c0029e68:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029e6c:	85 c9                	test   ecx,ecx
c0029e6e:	7e 60                	jle    c0029ed0 <SoundPort::buffer16(short*, int)+0x7c>
c0029e70:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029e74:	8d 70 01             	lea    esi,[eax+0x1]
c0029e77:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029e7a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029e7d:	c1 e1 0f             	shl    ecx,0xf
c0029e80:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029e83:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029e86:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e89:	74 4d                	je     c0029ed8 <SoundPort::buffer16(short*, int)+0x84>
c0029e8b:	31 f6                	xor    esi,esi
c0029e8d:	eb 21                	jmp    c0029eb0 <SoundPort::buffer16(short*, int)+0x5c>
c0029e8f:	90                   	nop
c0029e90:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029e95:	8d 79 01             	lea    edi,[ecx+0x1]
c0029e98:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029e9b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029e9e:	c1 e3 0f             	shl    ebx,0xf
c0029ea1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029ea4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ea7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029eaa:	74 1c                	je     c0029ec8 <SoundPort::buffer16(short*, int)+0x74>
c0029eac:	89 c6                	mov    esi,eax
c0029eae:	66 90                	xchg   ax,ax
c0029eb0:	8d 46 01             	lea    eax,[esi+0x1]
c0029eb3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029eb7:	75 d7                	jne    c0029e90 <SoundPort::buffer16(short*, int)+0x3c>
c0029eb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0029ec0:	5b                   	pop    ebx
c0029ec1:	5e                   	pop    esi
c0029ec2:	5f                   	pop    edi
c0029ec3:	5d                   	pop    ebp
c0029ec4:	c3                   	ret    
c0029ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0029ec8:	5b                   	pop    ebx
c0029ec9:	8d 46 02             	lea    eax,[esi+0x2]
c0029ecc:	5e                   	pop    esi
c0029ecd:	5f                   	pop    edi
c0029ece:	5d                   	pop    ebp
c0029ecf:	c3                   	ret    
c0029ed0:	5b                   	pop    ebx
c0029ed1:	31 c0                	xor    eax,eax
c0029ed3:	5e                   	pop    esi
c0029ed4:	5f                   	pop    edi
c0029ed5:	5d                   	pop    ebp
c0029ed6:	c3                   	ret    
c0029ed7:	90                   	nop
c0029ed8:	b8 01 00 00 00       	mov    eax,0x1
c0029edd:	eb e1                	jmp    c0029ec0 <SoundPort::buffer16(short*, int)+0x6c>
c0029edf:	90                   	nop

c0029ee0 <SoundPort::buffer32(int*, int)>:
c0029ee0:	55                   	push   ebp
c0029ee1:	57                   	push   edi
c0029ee2:	56                   	push   esi
c0029ee3:	53                   	push   ebx
c0029ee4:	83 ec 04             	sub    esp,0x4
c0029ee7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029eef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029ef3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029ef6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029ef9:	89 04 24             	mov    DWORD PTR [esp],eax
c0029efc:	74 5a                	je     c0029f58 <SoundPort::buffer32(int*, int)+0x78>
c0029efe:	85 c0                	test   eax,eax
c0029f00:	7e 56                	jle    c0029f58 <SoundPort::buffer32(int*, int)+0x78>
c0029f02:	8d 71 01             	lea    esi,[ecx+0x1]
c0029f05:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029f08:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029f0b:	8b 37                	mov    esi,DWORD PTR [edi]
c0029f0d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029f10:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029f13:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029f16:	74 4c                	je     c0029f64 <SoundPort::buffer32(int*, int)+0x84>
c0029f18:	31 f6                	xor    esi,esi
c0029f1a:	eb 1c                	jmp    c0029f38 <SoundPort::buffer32(int*, int)+0x58>
c0029f1c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029f1f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029f22:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029f25:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029f28:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029f2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029f2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029f32:	74 18                	je     c0029f4c <SoundPort::buffer32(int*, int)+0x6c>
c0029f34:	89 de                	mov    esi,ebx
c0029f36:	66 90                	xchg   ax,ax
c0029f38:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029f3b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029f3e:	75 dc                	jne    c0029f1c <SoundPort::buffer32(int*, int)+0x3c>
c0029f40:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029f43:	90                   	nop
c0029f44:	83 c4 04             	add    esp,0x4
c0029f47:	5b                   	pop    ebx
c0029f48:	5e                   	pop    esi
c0029f49:	5f                   	pop    edi
c0029f4a:	5d                   	pop    ebp
c0029f4b:	c3                   	ret    
c0029f4c:	8d 46 02             	lea    eax,[esi+0x2]
c0029f4f:	83 c4 04             	add    esp,0x4
c0029f52:	5b                   	pop    ebx
c0029f53:	5e                   	pop    esi
c0029f54:	5f                   	pop    edi
c0029f55:	5d                   	pop    ebp
c0029f56:	c3                   	ret    
c0029f57:	90                   	nop
c0029f58:	83 c4 04             	add    esp,0x4
c0029f5b:	31 c0                	xor    eax,eax
c0029f5d:	5b                   	pop    ebx
c0029f5e:	5e                   	pop    esi
c0029f5f:	5f                   	pop    edi
c0029f60:	5d                   	pop    ebp
c0029f61:	c3                   	ret    
c0029f62:	66 90                	xchg   ax,ax
c0029f64:	b8 01 00 00 00       	mov    eax,0x1
c0029f69:	eb d9                	jmp    c0029f44 <SoundPort::buffer32(int*, int)+0x64>
c0029f6b:	90                   	nop

c0029f6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029f6c:	55                   	push   ebp
c0029f6d:	57                   	push   edi
c0029f6e:	56                   	push   esi
c0029f6f:	53                   	push   ebx
c0029f70:	83 ec 0c             	sub    esp,0xc
c0029f73:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029f77:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029f7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029f7f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0029f83:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029f89:	39 03                	cmp    DWORD PTR [ebx],eax
c0029f8b:	74 13                	je     c0029fa0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0029f8d:	83 ec 0c             	sub    esp,0xc
c0029f90:	68 e8 36 03 c0       	push   0xc00336e8
c0029f95:	e8 d0 62 ff ff       	call   c002026a <KePanic(char const*)>
c0029f9a:	83 c4 10             	add    esp,0x10
c0029f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0029fa0:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029fa6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029fa9:	74 11                	je     c0029fbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0029fab:	83 ec 0c             	sub    esp,0xc
c0029fae:	68 27 37 03 c0       	push   0xc0033727
c0029fb3:	e8 b2 62 ff ff       	call   c002026a <KePanic(char const*)>
c0029fb8:	83 c4 10             	add    esp,0x10
c0029fbb:	90                   	nop
c0029fbc:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029fc2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029fc5:	74 11                	je     c0029fd8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0029fc7:	83 ec 0c             	sub    esp,0xc
c0029fca:	68 27 37 03 c0       	push   0xc0033727
c0029fcf:	e8 96 62 ff ff       	call   c002026a <KePanic(char const*)>
c0029fd4:	83 c4 10             	add    esp,0x10
c0029fd7:	90                   	nop
c0029fd8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0029fdb:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0029fdf:	85 f6                	test   esi,esi
c0029fe1:	7e 2d                	jle    c002a010 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0029fe3:	31 c0                	xor    eax,eax
c0029fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0029fe8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029feb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0029fee:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0029ff4:	85 c9                	test   ecx,ecx
c0029ff6:	0f 49 d1             	cmovns edx,ecx
c0029ff9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0029ffd:	c1 fa 0f             	sar    edx,0xf
c002a000:	01 d1                	add    ecx,edx
c002a002:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c002a006:	83 c0 01             	add    eax,0x1
c002a009:	39 f0                	cmp    eax,esi
c002a00b:	75 db                	jne    c0029fe8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c002a00d:	8d 76 00             	lea    esi,[esi+0x0]
c002a010:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a013:	83 ec 04             	sub    esp,0x4
c002a016:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a019:	29 f0                	sub    eax,esi
c002a01b:	c1 e0 02             	shl    eax,0x2
c002a01e:	50                   	push   eax
c002a01f:	8d 04 b2             	lea    eax,[edx+esi*4]
c002a022:	50                   	push   eax
c002a023:	52                   	push   edx
c002a024:	e8 a7 63 fd ff       	call   c00003d0 <memmove>
c002a029:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a02c:	29 f0                	sub    eax,esi
c002a02e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a031:	83 c4 1c             	add    esp,0x1c
c002a034:	89 f0                	mov    eax,esi
c002a036:	5b                   	pop    ebx
c002a037:	5e                   	pop    esi
c002a038:	5f                   	pop    edi
c002a039:	5d                   	pop    ebp
c002a03a:	c3                   	ret    
c002a03b:	90                   	nop

c002a03c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c002a03c:	55                   	push   ebp
c002a03d:	57                   	push   edi
c002a03e:	56                   	push   esi
c002a03f:	53                   	push   ebx
c002a040:	83 ec 0c             	sub    esp,0xc
c002a043:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c002a047:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a04b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a04f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002a053:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c002a059:	39 03                	cmp    DWORD PTR [ebx],eax
c002a05b:	74 13                	je     c002a070 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c002a05d:	83 ec 0c             	sub    esp,0xc
c002a060:	68 08 37 03 c0       	push   0xc0033708
c002a065:	e8 00 62 ff ff       	call   c002026a <KePanic(char const*)>
c002a06a:	83 c4 10             	add    esp,0x10
c002a06d:	8d 76 00             	lea    esi,[esi+0x0]
c002a070:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c002a076:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c002a079:	74 11                	je     c002a08c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c002a07b:	83 ec 0c             	sub    esp,0xc
c002a07e:	68 43 37 03 c0       	push   0xc0033743
c002a083:	e8 e2 61 ff ff       	call   c002026a <KePanic(char const*)>
c002a088:	83 c4 10             	add    esp,0x10
c002a08b:	90                   	nop
c002a08c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c002a092:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c002a095:	74 11                	je     c002a0a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c002a097:	83 ec 0c             	sub    esp,0xc
c002a09a:	68 43 37 03 c0       	push   0xc0033743
c002a09f:	e8 c6 61 ff ff       	call   c002026a <KePanic(char const*)>
c002a0a4:	83 c4 10             	add    esp,0x10
c002a0a7:	90                   	nop
c002a0a8:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c002a0ab:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c002a0af:	85 ff                	test   edi,edi
c002a0b1:	7e 21                	jle    c002a0d4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c002a0b3:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c002a0ba:	31 c0                	xor    eax,eax
c002a0bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a0bf:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c002a0c2:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c002a0c5:	01 d5                	add    ebp,edx
c002a0c7:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c002a0ca:	83 c0 04             	add    eax,0x4
c002a0cd:	39 c1                	cmp    ecx,eax
c002a0cf:	75 eb                	jne    c002a0bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c002a0d1:	8d 76 00             	lea    esi,[esi+0x0]
c002a0d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002a0d7:	83 ec 04             	sub    esp,0x4
c002a0da:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c002a0dd:	29 f8                	sub    eax,edi
c002a0df:	c1 e0 02             	shl    eax,0x2
c002a0e2:	50                   	push   eax
c002a0e3:	8d 04 ba             	lea    eax,[edx+edi*4]
c002a0e6:	50                   	push   eax
c002a0e7:	52                   	push   edx
c002a0e8:	e8 e3 62 fd ff       	call   c00003d0 <memmove>
c002a0ed:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002a0f0:	29 f8                	sub    eax,edi
c002a0f2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c002a0f5:	83 c4 1c             	add    esp,0x1c
c002a0f8:	89 f8                	mov    eax,edi
c002a0fa:	5b                   	pop    ebx
c002a0fb:	5e                   	pop    esi
c002a0fc:	5f                   	pop    edi
c002a0fd:	5d                   	pop    ebp
c002a0fe:	c3                   	ret    
c002a0ff:	90                   	nop

c002a100 <PCI::open(int, int, void*)>:
c002a100:	83 ec 18             	sub    esp,0x18
c002a103:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002a107:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002a10b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002a111:	8b 10                	mov    edx,DWORD PTR [eax]
c002a113:	50                   	push   eax
c002a114:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002a117:	31 c0                	xor    eax,eax
c002a119:	83 c4 1c             	add    esp,0x1c
c002a11c:	c3                   	ret    
c002a11d:	90                   	nop

c002a11e <PCI::close(int, int, void*)>:
c002a11e:	31 c0                	xor    eax,eax
c002a120:	c3                   	ret    
c002a121:	90                   	nop

c002a122 <PCI::PCI()>:
c002a122:	83 ec 0c             	sub    esp,0xc
c002a125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a129:	83 ec 08             	sub    esp,0x8
c002a12c:	68 5f 37 03 c0       	push   0xc003375f
c002a131:	50                   	push   eax
c002a132:	e8 9d 0b ff ff       	call   c001acd4 <Bus::Bus(char const*)>
c002a137:	83 c4 10             	add    esp,0x10
c002a13a:	ba 08 38 03 c0       	mov    edx,0xc0033808
c002a13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a143:	89 10                	mov    DWORD PTR [eax],edx
c002a145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a149:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a157:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a160:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a166:	0f b6 d0             	movzx  edx,al
c002a169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a16d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a178:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a17e:	0f b6 d0             	movzx  edx,al
c002a181:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a185:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a18e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a194:	8d 50 01             	lea    edx,[eax+0x1]
c002a197:	88 d1                	mov    cl,dl
c002a199:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a19d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a1a3:	0f b6 d0             	movzx  edx,al
c002a1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a1aa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a1ae:	83 c9 c0             	or     ecx,0xffffffc0
c002a1b1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a1b5:	90                   	nop
c002a1b6:	83 c4 0c             	add    esp,0xc
c002a1b9:	c3                   	ret    

c002a1ba <PCI::readBAR8(unsigned int, int)>:
c002a1ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1c2:	f6 c2 01             	test   dl,0x1
c002a1c5:	74 07                	je     c002a1ce <PCI::readBAR8(unsigned int, int)+0x14>
c002a1c7:	83 e2 fc             	and    edx,0xfffffffc
c002a1ca:	01 c2                	add    edx,eax
c002a1cc:	ec                   	in     al,dx
c002a1cd:	c3                   	ret    
c002a1ce:	83 e2 f0             	and    edx,0xfffffff0
c002a1d1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a1d4:	c3                   	ret    
c002a1d5:	90                   	nop

c002a1d6 <PCI::readBAR16(unsigned int, int)>:
c002a1d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1de:	f6 c2 01             	test   dl,0x1
c002a1e1:	74 08                	je     c002a1eb <PCI::readBAR16(unsigned int, int)+0x15>
c002a1e3:	83 e2 fc             	and    edx,0xfffffffc
c002a1e6:	01 c2                	add    edx,eax
c002a1e8:	66 ed                	in     ax,dx
c002a1ea:	c3                   	ret    
c002a1eb:	83 e2 f0             	and    edx,0xfffffff0
c002a1ee:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a1f2:	c3                   	ret    
c002a1f3:	90                   	nop

c002a1f4 <PCI::readBAR32(unsigned int, int)>:
c002a1f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a1f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a1fc:	f6 c2 01             	test   dl,0x1
c002a1ff:	74 07                	je     c002a208 <PCI::readBAR32(unsigned int, int)+0x14>
c002a201:	83 e2 fc             	and    edx,0xfffffffc
c002a204:	01 c2                	add    edx,eax
c002a206:	ed                   	in     eax,dx
c002a207:	c3                   	ret    
c002a208:	83 e2 f0             	and    edx,0xfffffff0
c002a20b:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a20e:	c3                   	ret    
c002a20f:	90                   	nop

c002a210 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a214:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a218:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a21c:	f6 c2 01             	test   dl,0x1
c002a21f:	74 07                	je     c002a228 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a221:	83 e2 fc             	and    edx,0xfffffffc
c002a224:	01 ca                	add    edx,ecx
c002a226:	ee                   	out    dx,al
c002a227:	c3                   	ret    
c002a228:	83 e2 f0             	and    edx,0xfffffff0
c002a22b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a22e:	c3                   	ret    
c002a22f:	90                   	nop

c002a230 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a230:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a234:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a238:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a23c:	f6 c2 01             	test   dl,0x1
c002a23f:	74 08                	je     c002a249 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a241:	83 e2 fc             	and    edx,0xfffffffc
c002a244:	01 ca                	add    edx,ecx
c002a246:	66 ef                	out    dx,ax
c002a248:	c3                   	ret    
c002a249:	83 e2 f0             	and    edx,0xfffffff0
c002a24c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a250:	c3                   	ret    
c002a251:	90                   	nop

c002a252 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a252:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a25a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a25e:	f6 c2 01             	test   dl,0x1
c002a261:	74 07                	je     c002a26a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a263:	83 e2 fc             	and    edx,0xfffffffc
c002a266:	01 ca                	add    edx,ecx
c002a268:	ef                   	out    dx,eax
c002a269:	c3                   	ret    
c002a26a:	83 e2 f0             	and    edx,0xfffffff0
c002a26d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a270:	c3                   	ret    
c002a271:	90                   	nop

c002a272 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a272:	55                   	push   ebp
c002a273:	57                   	push   edi
c002a274:	56                   	push   esi
c002a275:	53                   	push   ebx
c002a276:	83 ec 0c             	sub    esp,0xc
c002a279:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a27e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a282:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a286:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a28a:	83 fe 07             	cmp    esi,0x7
c002a28d:	76 10                	jbe    c002a29f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a28f:	83 ec 0c             	sub    esp,0xc
c002a292:	68 67 37 03 c0       	push   0xc0033767
c002a297:	e8 ce 5f ff ff       	call   c002026a <KePanic(char const*)>
c002a29c:	83 c4 10             	add    esp,0x10
c002a29f:	0f b6 db             	movzx  ebx,bl
c002a2a2:	83 fb 0f             	cmp    ebx,0xf
c002a2a5:	76 10                	jbe    c002a2b7 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a2a7:	83 ec 0c             	sub    esp,0xc
c002a2aa:	68 97 37 03 c0       	push   0xc0033797
c002a2af:	e8 b6 5f ff ff       	call   c002026a <KePanic(char const*)>
c002a2b4:	83 c4 10             	add    esp,0x10
c002a2b7:	8d 04 36             	lea    eax,[esi+esi*1]
c002a2ba:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a2bf:	83 c8 f0             	or     eax,0xfffffff0
c002a2c2:	ee                   	out    dx,al
c002a2c3:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a2c8:	89 e8                	mov    eax,ebp
c002a2ca:	ee                   	out    dx,al
c002a2cb:	89 f9                	mov    ecx,edi
c002a2cd:	89 d8                	mov    eax,ebx
c002a2cf:	0f b6 d9             	movzx  ebx,cl
c002a2d2:	83 c4 0c             	add    esp,0xc
c002a2d5:	c1 e0 08             	shl    eax,0x8
c002a2d8:	83 e3 fc             	and    ebx,0xfffffffc
c002a2db:	09 d8                	or     eax,ebx
c002a2dd:	5b                   	pop    ebx
c002a2de:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a2e3:	5e                   	pop    esi
c002a2e4:	5f                   	pop    edi
c002a2e5:	5d                   	pop    ebp
c002a2e6:	c3                   	ret    
c002a2e7:	90                   	nop

c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a2e8:	57                   	push   edi
c002a2e9:	56                   	push   esi
c002a2ea:	53                   	push   ebx
c002a2eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a2ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a2f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a2f7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a2fb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a301:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a305:	83 ff 01             	cmp    edi,0x1
c002a308:	75 3f                	jne    c002a349 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a30a:	89 de                	mov    esi,ebx
c002a30c:	0f b6 c0             	movzx  eax,al
c002a30f:	c1 e0 10             	shl    eax,0x10
c002a312:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a318:	0f b6 c9             	movzx  ecx,cl
c002a31b:	09 f0                	or     eax,esi
c002a31d:	c1 e1 08             	shl    ecx,0x8
c002a320:	0f b6 d2             	movzx  edx,dl
c002a323:	c1 e2 0b             	shl    edx,0xb
c002a326:	09 c8                	or     eax,ecx
c002a328:	09 d0                	or     eax,edx
c002a32a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a32f:	0d 00 00 00 80       	or     eax,0x80000000
c002a334:	ef                   	out    dx,eax
c002a335:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a33a:	ed                   	in     eax,dx
c002a33b:	83 e3 02             	and    ebx,0x2
c002a33e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a345:	d3 e8                	shr    eax,cl
c002a347:	eb 44                	jmp    c002a38d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a349:	83 ff 02             	cmp    edi,0x2
c002a34c:	75 2d                	jne    c002a37b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a34e:	83 ec 0c             	sub    esp,0xc
c002a351:	0f b6 fb             	movzx  edi,bl
c002a354:	57                   	push   edi
c002a355:	0f b6 c9             	movzx  ecx,cl
c002a358:	51                   	push   ecx
c002a359:	0f b6 d2             	movzx  edx,dl
c002a35c:	52                   	push   edx
c002a35d:	0f b6 c0             	movzx  eax,al
c002a360:	50                   	push   eax
c002a361:	56                   	push   esi
c002a362:	e8 0b ff ff ff       	call   c002a272 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a367:	89 c2                	mov    edx,eax
c002a369:	ed                   	in     eax,dx
c002a36a:	83 e3 02             	and    ebx,0x2
c002a36d:	83 c4 20             	add    esp,0x20
c002a370:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a377:	d3 e8                	shr    eax,cl
c002a379:	eb 12                	jmp    c002a38d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a37b:	83 ec 0c             	sub    esp,0xc
c002a37e:	68 c7 37 03 c0       	push   0xc00337c7
c002a383:	e8 e2 5e ff ff       	call   c002026a <KePanic(char const*)>
c002a388:	83 c4 10             	add    esp,0x10
c002a38b:	31 c0                	xor    eax,eax
c002a38d:	5b                   	pop    ebx
c002a38e:	5e                   	pop    esi
c002a38f:	5f                   	pop    edi
c002a390:	c3                   	ret    
c002a391:	90                   	nop

c002a392 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a392:	83 ec 18             	sub    esp,0x18
c002a395:	6a 00                	push   0x0
c002a397:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a39c:	50                   	push   eax
c002a39d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3a2:	50                   	push   eax
c002a3a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3a8:	50                   	push   eax
c002a3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3ad:	e8 36 ff ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3b2:	83 c4 2c             	add    esp,0x2c
c002a3b5:	c3                   	ret    

c002a3b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a3b6:	83 ec 18             	sub    esp,0x18
c002a3b9:	6a 0e                	push   0xe
c002a3bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c0:	50                   	push   eax
c002a3c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3c6:	50                   	push   eax
c002a3c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a3cc:	50                   	push   eax
c002a3cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a3d1:	e8 12 ff ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3d6:	83 c4 2c             	add    esp,0x2c
c002a3d9:	0f b6 c0             	movzx  eax,al
c002a3dc:	c3                   	ret    
c002a3dd:	90                   	nop

c002a3de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a3de:	55                   	push   ebp
c002a3df:	57                   	push   edi
c002a3e0:	56                   	push   esi
c002a3e1:	53                   	push   ebx
c002a3e2:	83 ec 18             	sub    esp,0x18
c002a3e5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a3ea:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a3ef:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a3f4:	6a 0a                	push   0xa
c002a3f6:	56                   	push   esi
c002a3f7:	55                   	push   ebp
c002a3f8:	57                   	push   edi
c002a3f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a3fd:	e8 e6 fe ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a402:	83 c4 14             	add    esp,0x14
c002a405:	6a 0a                	push   0xa
c002a407:	56                   	push   esi
c002a408:	55                   	push   ebp
c002a409:	57                   	push   edi
c002a40a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a40e:	89 c3                	mov    ebx,eax
c002a410:	0f b6 db             	movzx  ebx,bl
c002a413:	e8 d0 fe ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a418:	83 c4 2c             	add    esp,0x2c
c002a41b:	25 00 ff 00 00       	and    eax,0xff00
c002a420:	09 d8                	or     eax,ebx
c002a422:	5b                   	pop    ebx
c002a423:	5e                   	pop    esi
c002a424:	5f                   	pop    edi
c002a425:	5d                   	pop    ebp
c002a426:	c3                   	ret    
c002a427:	90                   	nop

c002a428 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a428:	83 ec 18             	sub    esp,0x18
c002a42b:	6a 08                	push   0x8
c002a42d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a432:	50                   	push   eax
c002a433:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a438:	50                   	push   eax
c002a439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a43e:	50                   	push   eax
c002a43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a443:	e8 a0 fe ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a448:	83 c4 2c             	add    esp,0x2c
c002a44b:	0f b6 c4             	movzx  eax,ah
c002a44e:	c3                   	ret    
c002a44f:	90                   	nop

c002a450 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a450:	83 ec 18             	sub    esp,0x18
c002a453:	6a 08                	push   0x8
c002a455:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a45a:	50                   	push   eax
c002a45b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a460:	50                   	push   eax
c002a461:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a466:	50                   	push   eax
c002a467:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a46b:	e8 78 fe ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a470:	83 c4 2c             	add    esp,0x2c
c002a473:	c3                   	ret    

c002a474 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a474:	83 ec 18             	sub    esp,0x18
c002a477:	6a 3c                	push   0x3c
c002a479:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a47e:	50                   	push   eax
c002a47f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a484:	50                   	push   eax
c002a485:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a48a:	50                   	push   eax
c002a48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a48f:	e8 54 fe ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a494:	83 c4 2c             	add    esp,0x2c
c002a497:	c3                   	ret    

c002a498 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a498:	83 ec 18             	sub    esp,0x18
c002a49b:	6a 18                	push   0x18
c002a49d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a4a2:	50                   	push   eax
c002a4a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a4a8:	50                   	push   eax
c002a4a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a4ae:	50                   	push   eax
c002a4af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a4b3:	e8 30 fe ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a4b8:	83 c4 2c             	add    esp,0x2c
c002a4bb:	0f b6 c4             	movzx  eax,ah
c002a4be:	c3                   	ret    
c002a4bf:	90                   	nop

c002a4c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a4c0:	55                   	push   ebp
c002a4c1:	57                   	push   edi
c002a4c2:	56                   	push   esi
c002a4c3:	53                   	push   ebx
c002a4c4:	83 ec 28             	sub    esp,0x28
c002a4c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a4cb:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a4d0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a4d5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a4da:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a4e1:	8d 43 12             	lea    eax,[ebx+0x12]
c002a4e4:	83 c3 10             	add    ebx,0x10
c002a4e7:	0f b6 c0             	movzx  eax,al
c002a4ea:	0f b6 db             	movzx  ebx,bl
c002a4ed:	50                   	push   eax
c002a4ee:	51                   	push   ecx
c002a4ef:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a4f3:	57                   	push   edi
c002a4f4:	55                   	push   ebp
c002a4f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a4f9:	e8 ea fd ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a4fe:	83 c4 14             	add    esp,0x14
c002a501:	53                   	push   ebx
c002a502:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a506:	51                   	push   ecx
c002a507:	89 c6                	mov    esi,eax
c002a509:	57                   	push   edi
c002a50a:	55                   	push   ebp
c002a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a50f:	c1 e6 10             	shl    esi,0x10
c002a512:	e8 d1 fd ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a517:	83 c4 3c             	add    esp,0x3c
c002a51a:	5b                   	pop    ebx
c002a51b:	0f b7 c0             	movzx  eax,ax
c002a51e:	09 f0                	or     eax,esi
c002a520:	5e                   	pop    esi
c002a521:	5f                   	pop    edi
c002a522:	5d                   	pop    ebp
c002a523:	c3                   	ret    

c002a524 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a524:	55                   	push   ebp
c002a525:	57                   	push   edi
c002a526:	56                   	push   esi
c002a527:	53                   	push   ebx
c002a528:	83 ec 0c             	sub    esp,0xc
c002a52b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a52f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a533:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a537:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a53b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a541:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a545:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a549:	83 f9 01             	cmp    ecx,0x1
c002a54c:	75 5d                	jne    c002a5ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a54e:	0f b6 c8             	movzx  ecx,al
c002a551:	89 f0                	mov    eax,esi
c002a553:	25 fc 00 00 00       	and    eax,0xfc
c002a558:	0f b6 d2             	movzx  edx,dl
c002a55b:	c1 e1 10             	shl    ecx,0x10
c002a55e:	c1 e2 0b             	shl    edx,0xb
c002a561:	09 c1                	or     ecx,eax
c002a563:	89 f8                	mov    eax,edi
c002a565:	0f b6 f8             	movzx  edi,al
c002a568:	c1 e7 08             	shl    edi,0x8
c002a56b:	09 f9                	or     ecx,edi
c002a56d:	09 d1                	or     ecx,edx
c002a56f:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a574:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a57a:	89 c8                	mov    eax,ecx
c002a57c:	ef                   	out    dx,eax
c002a57d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a582:	ed                   	in     eax,dx
c002a583:	83 e6 02             	and    esi,0x2
c002a586:	0f b7 db             	movzx  ebx,bx
c002a589:	74 0a                	je     c002a595 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a58b:	c1 e3 10             	shl    ebx,0x10
c002a58e:	0f b7 d0             	movzx  edx,ax
c002a591:	09 d3                	or     ebx,edx
c002a593:	eb 05                	jmp    c002a59a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a595:	66 31 c0             	xor    ax,ax
c002a598:	09 c3                	or     ebx,eax
c002a59a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a59f:	89 c8                	mov    eax,ecx
c002a5a1:	ef                   	out    dx,eax
c002a5a2:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a5a7:	89 d8                	mov    eax,ebx
c002a5a9:	eb 41                	jmp    c002a5ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a5ab:	83 f9 02             	cmp    ecx,0x2
c002a5ae:	75 45                	jne    c002a5f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a5b0:	89 f1                	mov    ecx,esi
c002a5b2:	83 ec 0c             	sub    esp,0xc
c002a5b5:	0f b6 f1             	movzx  esi,cl
c002a5b8:	89 f9                	mov    ecx,edi
c002a5ba:	56                   	push   esi
c002a5bb:	0f b6 f9             	movzx  edi,cl
c002a5be:	57                   	push   edi
c002a5bf:	0f b6 d2             	movzx  edx,dl
c002a5c2:	52                   	push   edx
c002a5c3:	0f b6 c0             	movzx  eax,al
c002a5c6:	50                   	push   eax
c002a5c7:	55                   	push   ebp
c002a5c8:	e8 a5 fc ff ff       	call   c002a272 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a5cd:	89 c2                	mov    edx,eax
c002a5cf:	ed                   	in     eax,dx
c002a5d0:	83 c4 20             	add    esp,0x20
c002a5d3:	f6 c2 02             	test   dl,0x2
c002a5d6:	0f b7 db             	movzx  ebx,bx
c002a5d9:	74 0c                	je     c002a5e7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a5db:	0f b7 c8             	movzx  ecx,ax
c002a5de:	89 d8                	mov    eax,ebx
c002a5e0:	c1 e0 10             	shl    eax,0x10
c002a5e3:	09 c8                	or     eax,ecx
c002a5e5:	eb 05                	jmp    c002a5ec <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a5e7:	66 31 c0             	xor    ax,ax
c002a5ea:	09 d8                	or     eax,ebx
c002a5ec:	ef                   	out    dx,eax
c002a5ed:	83 c4 0c             	add    esp,0xc
c002a5f0:	5b                   	pop    ebx
c002a5f1:	5e                   	pop    esi
c002a5f2:	5f                   	pop    edi
c002a5f3:	5d                   	pop    ebp
c002a5f4:	c3                   	ret    
c002a5f5:	c7 44 24 20 c7 37 03 c0 	mov    DWORD PTR [esp+0x20],0xc00337c7
c002a5fd:	83 c4 0c             	add    esp,0xc
c002a600:	5b                   	pop    ebx
c002a601:	5e                   	pop    esi
c002a602:	5f                   	pop    edi
c002a603:	5d                   	pop    ebp
c002a604:	e9 61 5c ff ff       	jmp    c002026a <KePanic(char const*)>
c002a609:	90                   	nop

c002a60a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a60a:	55                   	push   ebp
c002a60b:	57                   	push   edi
c002a60c:	56                   	push   esi
c002a60d:	53                   	push   ebx
c002a60e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a614:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a61b:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002a622:	0f 85 bd 00 00 00    	jne    c002a6e5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a628:	83 ec 0c             	sub    esp,0xc
c002a62b:	68 14 01 00 00       	push   0x114
c002a630:	e8 66 be fe ff       	call   c001649b <malloc>
c002a635:	83 c4 0c             	add    esp,0xc
c002a638:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a63e:	68 cd 37 03 c0       	push   0xc00337cd
c002a643:	50                   	push   eax
c002a644:	89 c3                	mov    ebx,eax
c002a646:	e8 af fe fe ff       	call   c001a4fa <File::File(char const*, Process*)>
c002a64b:	83 c4 10             	add    esp,0x10
c002a64e:	85 db                	test   ebx,ebx
c002a650:	0f 84 6b 02 00 00    	je     c002a8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a656:	57                   	push   edi
c002a657:	57                   	push   edi
c002a658:	6a 01                	push   0x1
c002a65a:	53                   	push   ebx
c002a65b:	e8 b8 fe fe ff       	call   c001a518 <File::open(FileOpenMode)>
c002a660:	83 c4 10             	add    esp,0x10
c002a663:	85 c0                	test   eax,eax
c002a665:	0f 85 56 02 00 00    	jne    c002a8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a66b:	52                   	push   edx
c002a66c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a670:	50                   	push   eax
c002a671:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a675:	50                   	push   eax
c002a676:	53                   	push   ebx
c002a677:	e8 9e 01 ff ff       	call   c001a81a <File::stat(unsigned long long*, bool*)>
c002a67c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a680:	40                   	inc    eax
c002a681:	89 04 24             	mov    DWORD PTR [esp],eax
c002a684:	e8 12 be fe ff       	call   c001649b <malloc>
c002a689:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a68d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a691:	59                   	pop    ecx
c002a692:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a697:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a699:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a69d:	51                   	push   ecx
c002a69e:	50                   	push   eax
c002a69f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a6a3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a6a7:	53                   	push   ebx
c002a6a8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a6ab:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a6af:	83 c4 20             	add    esp,0x20
c002a6b2:	89 c8                	mov    eax,ecx
c002a6b4:	99                   	cdq    
c002a6b5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a6b9:	0f 85 02 02 00 00    	jne    c002a8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a6bf:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a6c3:	0f 85 f8 01 00 00    	jne    c002a8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a6c9:	83 ec 0c             	sub    esp,0xc
c002a6cc:	53                   	push   ebx
c002a6cd:	e8 a4 fe fe ff       	call   c001a576 <File::close()>
c002a6d2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a6d6:	83 c4 10             	add    esp,0x10
c002a6d9:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a6e0:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a6e5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a6ed:	31 c9                	xor    ecx,ecx
c002a6ef:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002a6f6:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002a6fc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a703:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002a709:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a70e:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a716:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a71b:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a723:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a727:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a72f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a733:	39 cd                	cmp    ebp,ecx
c002a735:	0f 8e 86 01 00 00    	jle    c002a8c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a73b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002a73e:	d4 40                	aam    0x40
c002a740:	d5 39                	aad    0x39
c002a742:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a746:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002a74a:	d4 40                	aam    0x40
c002a74c:	d5 39                	aad    0x39
c002a74e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a752:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002a756:	d4 40                	aam    0x40
c002a758:	d5 39                	aad    0x39
c002a75a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a75e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002a762:	d4 40                	aam    0x40
c002a764:	d5 39                	aad    0x39
c002a766:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a76a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002a76e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a772:	3c 56                	cmp    al,0x56
c002a774:	74 47                	je     c002a7bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002a776:	d4 40                	aam    0x40
c002a778:	d5 39                	aad    0x39
c002a77a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002a77d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002a781:	0f b6 db             	movzx  ebx,bl
c002a784:	c1 e3 04             	shl    ebx,0x4
c002a787:	d4 40                	aam    0x40
c002a789:	d5 39                	aad    0x39
c002a78b:	83 e8 30             	sub    eax,0x30
c002a78e:	0f b6 c0             	movzx  eax,al
c002a791:	09 c3                	or     ebx,eax
c002a793:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002a797:	c1 e3 04             	shl    ebx,0x4
c002a79a:	d4 40                	aam    0x40
c002a79c:	d5 39                	aad    0x39
c002a79e:	83 e8 30             	sub    eax,0x30
c002a7a1:	0f b6 c0             	movzx  eax,al
c002a7a4:	09 c3                	or     ebx,eax
c002a7a6:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002a7aa:	c1 e3 04             	shl    ebx,0x4
c002a7ad:	d4 40                	aam    0x40
c002a7af:	d5 39                	aad    0x39
c002a7b1:	83 e8 30             	sub    eax,0x30
c002a7b4:	0f b6 c0             	movzx  eax,al
c002a7b7:	09 c3                	or     ebx,eax
c002a7b9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002a7bd:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002a7c1:	80 fb 58             	cmp    bl,0x58
c002a7c4:	74 49                	je     c002a80f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002a7c6:	88 d8                	mov    al,bl
c002a7c8:	d4 40                	aam    0x40
c002a7ca:	d5 39                	aad    0x39
c002a7cc:	83 e8 30             	sub    eax,0x30
c002a7cf:	0f b6 f8             	movzx  edi,al
c002a7d2:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002a7d6:	c1 e7 04             	shl    edi,0x4
c002a7d9:	d4 40                	aam    0x40
c002a7db:	d5 39                	aad    0x39
c002a7dd:	83 e8 30             	sub    eax,0x30
c002a7e0:	0f b6 c0             	movzx  eax,al
c002a7e3:	09 c7                	or     edi,eax
c002a7e5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002a7e9:	c1 e7 04             	shl    edi,0x4
c002a7ec:	d4 40                	aam    0x40
c002a7ee:	d5 39                	aad    0x39
c002a7f0:	83 e8 30             	sub    eax,0x30
c002a7f3:	0f b6 c0             	movzx  eax,al
c002a7f6:	09 c7                	or     edi,eax
c002a7f8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002a7fc:	c1 e7 04             	shl    edi,0x4
c002a7ff:	d4 40                	aam    0x40
c002a801:	d5 39                	aad    0x39
c002a803:	83 e8 30             	sub    eax,0x30
c002a806:	0f b6 c0             	movzx  eax,al
c002a809:	09 c7                	or     edi,eax
c002a80b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002a80f:	8d 41 10             	lea    eax,[ecx+0x10]
c002a812:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a816:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002a81a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a81e:	83 f9 0a             	cmp    ecx,0xa
c002a821:	74 07                	je     c002a82a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002a823:	47                   	inc    edi
c002a824:	39 c5                	cmp    ebp,eax
c002a826:	75 16                	jne    c002a83e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002a828:	89 e8                	mov    eax,ebp
c002a82a:	83 f9 0a             	cmp    ecx,0xa
c002a82d:	0f 94 c1             	sete   cl
c002a830:	0f b6 c9             	movzx  ecx,cl
c002a833:	01 c1                	add    ecx,eax
c002a835:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a83a:	75 0f                	jne    c002a84b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002a83c:	eb 1c                	jmp    c002a85a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002a83e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a841:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002a845:	40                   	inc    eax
c002a846:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002a849:	eb cb                	jmp    c002a816 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002a84b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a84f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a854:	0f 85 d9 fe ff ff    	jne    c002a733 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a85a:	80 fb 58             	cmp    bl,0x58
c002a85d:	74 10                	je     c002a86f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002a85f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a864:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002a869:	0f 85 c4 fe ff ff    	jne    c002a733 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a86f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a873:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002a877:	83 e8 30             	sub    eax,0x30
c002a87a:	c1 e0 04             	shl    eax,0x4
c002a87d:	83 eb 30             	sub    ebx,0x30
c002a880:	09 d8                	or     eax,ebx
c002a882:	0f b6 c0             	movzx  eax,al
c002a885:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a889:	0f 85 a4 fe ff ff    	jne    c002a733 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a88f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a893:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a897:	83 e8 30             	sub    eax,0x30
c002a89a:	c1 e0 04             	shl    eax,0x4
c002a89d:	83 eb 30             	sub    ebx,0x30
c002a8a0:	09 d8                	or     eax,ebx
c002a8a2:	0f b6 c0             	movzx  eax,al
c002a8a5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a8a9:	0f 85 84 fe ff ff    	jne    c002a733 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a8af:	50                   	push   eax
c002a8b0:	50                   	push   eax
c002a8b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a8b5:	50                   	push   eax
c002a8b6:	56                   	push   esi
c002a8b7:	e8 94 5d fd ff       	call   c0000650 <strcpy>
c002a8bc:	83 c4 10             	add    esp,0x10
c002a8bf:	eb 05                	jmp    c002a8c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002a8c1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002a8c4:	31 f6                	xor    esi,esi
c002a8c6:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a8cc:	89 f0                	mov    eax,esi
c002a8ce:	5b                   	pop    ebx
c002a8cf:	5e                   	pop    esi
c002a8d0:	5f                   	pop    edi
c002a8d1:	5d                   	pop    ebp
c002a8d2:	c3                   	ret    
c002a8d3:	90                   	nop

c002a8d4 <PCI::checkBus(unsigned char)>:
c002a8d4:	56                   	push   esi
c002a8d5:	53                   	push   ebx
c002a8d6:	31 db                	xor    ebx,ebx
c002a8d8:	51                   	push   ecx
c002a8d9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a8de:	52                   	push   edx
c002a8df:	53                   	push   ebx
c002a8e0:	43                   	inc    ebx
c002a8e1:	56                   	push   esi
c002a8e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a8e6:	e8 0f 03 00 00       	call   c002abfa <PCI::checkDevice(unsigned char, unsigned char)>
c002a8eb:	83 c4 10             	add    esp,0x10
c002a8ee:	83 fb 20             	cmp    ebx,0x20
c002a8f1:	75 eb                	jne    c002a8de <PCI::checkBus(unsigned char)+0xa>
c002a8f3:	58                   	pop    eax
c002a8f4:	5b                   	pop    ebx
c002a8f5:	5e                   	pop    esi
c002a8f6:	c3                   	ret    
c002a8f7:	90                   	nop

c002a8f8 <PCI::foundDevice(PCIDeviceInfo)>:
c002a8f8:	55                   	push   ebp
c002a8f9:	57                   	push   edi
c002a8fa:	56                   	push   esi
c002a8fb:	53                   	push   ebx
c002a8fc:	83 ec 1c             	sub    esp,0x1c
c002a8ff:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a904:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a908:	3d ff ff 00 00       	cmp    eax,0xffff
c002a90d:	0f 84 63 01 00 00    	je     c002aa76 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a913:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a918:	66 3d 06 04          	cmp    ax,0x406
c002a91c:	75 2c                	jne    c002a94a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a91e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a923:	50                   	push   eax
c002a924:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a929:	50                   	push   eax
c002a92a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a92f:	50                   	push   eax
c002a930:	53                   	push   ebx
c002a931:	e8 62 fb ff ff       	call   c002a498 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a936:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a93a:	0f b6 c0             	movzx  eax,al
c002a93d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a941:	83 c4 2c             	add    esp,0x2c
c002a944:	5b                   	pop    ebx
c002a945:	5e                   	pop    esi
c002a946:	5f                   	pop    edi
c002a947:	5d                   	pop    ebp
c002a948:	eb 8a                	jmp    c002a8d4 <PCI::checkBus(unsigned char)>
c002a94a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c002a94f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a955:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002a959:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a95d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002a961:	85 d2                	test   edx,edx
c002a963:	74 34                	je     c002a999 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c002a965:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a968:	85 c9                	test   ecx,ecx
c002a96a:	74 29                	je     c002a995 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a96c:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c002a972:	31 f5                	xor    ebp,esi
c002a974:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c002a97a:	75 19                	jne    c002a995 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a97c:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c002a982:	75 11                	jne    c002a995 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a984:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a98b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c002a98f:	0f 84 e1 00 00 00    	je     c002aa76 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a995:	8b 12                	mov    edx,DWORD PTR [edx]
c002a997:	eb c8                	jmp    c002a961 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a999:	3d 01 06 00 00       	cmp    eax,0x601
c002a99e:	75 19                	jne    c002a9b9 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002a9a0:	83 ec 0c             	sub    esp,0xc
c002a9a3:	68 64 01 00 00       	push   0x164
c002a9a8:	e8 ee ba fe ff       	call   c001649b <malloc>
c002a9ad:	89 04 24             	mov    DWORD PTR [esp],eax
c002a9b0:	89 c5                	mov    ebp,eax
c002a9b2:	e8 ab 0e 00 00       	call   c002b862 <SATABus::SATABus()>
c002a9b7:	eb 1e                	jmp    c002a9d7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002a9b9:	3d 01 01 00 00       	cmp    eax,0x101
c002a9be:	75 62                	jne    c002aa22 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c002a9c0:	83 ec 0c             	sub    esp,0xc
c002a9c3:	68 70 02 00 00       	push   0x270
c002a9c8:	e8 ce ba fe ff       	call   c001649b <malloc>
c002a9cd:	89 04 24             	mov    DWORD PTR [esp],eax
c002a9d0:	89 c5                	mov    ebp,eax
c002a9d2:	e8 f3 02 00 00       	call   c002acca <IDE::IDE()>
c002a9d7:	58                   	pop    eax
c002a9d8:	5a                   	pop    edx
c002a9d9:	55                   	push   ebp
c002a9da:	53                   	push   ebx
c002a9db:	e8 98 09 ff ff       	call   c001b378 <Device::addChild(Device*)>
c002a9e0:	83 ec 1c             	sub    esp,0x1c
c002a9e3:	b9 09 00 00 00       	mov    ecx,0x9
c002a9e8:	fc                   	cld    
c002a9e9:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a9ed:	89 e7                	mov    edi,esp
c002a9ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a9f1:	55                   	push   ebp
c002a9f2:	e8 c7 08 ff ff       	call   c001b2be <Device::preOpenPCI(PCIDeviceInfo)>
c002a9f7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a9fa:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a9fe:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002aa06:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002aa0e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002aa16:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002aa19:	83 c4 4c             	add    esp,0x4c
c002aa1c:	5b                   	pop    ebx
c002aa1d:	5e                   	pop    esi
c002aa1e:	5f                   	pop    edi
c002aa1f:	5d                   	pop    ebp
c002aa20:	ff e0                	jmp    eax
c002aa22:	83 ec 0c             	sub    esp,0xc
c002aa25:	68 58 01 00 00       	push   0x158
c002aa2a:	e8 6c ba fe ff       	call   c001649b <malloc>
c002aa2f:	5a                   	pop    edx
c002aa30:	59                   	pop    ecx
c002aa31:	68 e6 37 03 c0       	push   0xc00337e6
c002aa36:	50                   	push   eax
c002aa37:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002aa3b:	e8 ec 0b ff ff       	call   c001b62c <DriverlessDevice::DriverlessDevice(char const*)>
c002aa40:	5e                   	pop    esi
c002aa41:	5f                   	pop    edi
c002aa42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002aa46:	50                   	push   eax
c002aa47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002aa4b:	53                   	push   ebx
c002aa4c:	e8 27 09 ff ff       	call   c001b378 <Device::addChild(Device*)>
c002aa51:	83 c4 10             	add    esp,0x10
c002aa54:	b9 09 00 00 00       	mov    ecx,0x9
c002aa59:	fc                   	cld    
c002aa5a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002aa5e:	89 fe                	mov    esi,edi
c002aa60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aa62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002aa66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aa6a:	83 c4 1c             	add    esp,0x1c
c002aa6d:	5b                   	pop    ebx
c002aa6e:	5e                   	pop    esi
c002aa6f:	5f                   	pop    edi
c002aa70:	5d                   	pop    ebp
c002aa71:	e9 48 08 ff ff       	jmp    c001b2be <Device::preOpenPCI(PCIDeviceInfo)>
c002aa76:	83 c4 1c             	add    esp,0x1c
c002aa79:	5b                   	pop    ebx
c002aa7a:	5e                   	pop    esi
c002aa7b:	5f                   	pop    edi
c002aa7c:	5d                   	pop    ebp
c002aa7d:	c3                   	ret    

c002aa7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002aa7e:	55                   	push   ebp
c002aa7f:	57                   	push   edi
c002aa80:	56                   	push   esi
c002aa81:	53                   	push   ebx
c002aa82:	83 ec 68             	sub    esp,0x68
c002aa85:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002aa8c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002aa90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002aa94:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002aa9b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002aaa0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002aaa4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002aaab:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002aab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002aab4:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002aab9:	6a 0c                	push   0xc
c002aabb:	57                   	push   edi
c002aabc:	53                   	push   ebx
c002aabd:	56                   	push   esi
c002aabe:	55                   	push   ebp
c002aabf:	e8 24 f8 ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aac4:	83 c4 20             	add    esp,0x20
c002aac7:	57                   	push   edi
c002aac8:	53                   	push   ebx
c002aac9:	56                   	push   esi
c002aaca:	55                   	push   ebp
c002aacb:	e8 0e f9 ff ff       	call   c002a3de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002aad0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002aad5:	57                   	push   edi
c002aad6:	53                   	push   ebx
c002aad7:	56                   	push   esi
c002aad8:	55                   	push   ebp
c002aad9:	e8 96 f9 ff ff       	call   c002a474 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002aade:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002aae2:	83 c4 14             	add    esp,0x14
c002aae5:	6a 3c                	push   0x3c
c002aae7:	57                   	push   edi
c002aae8:	53                   	push   ebx
c002aae9:	56                   	push   esi
c002aaea:	55                   	push   ebp
c002aaeb:	e8 f8 f7 ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aaf0:	0f b6 c4             	movzx  eax,ah
c002aaf3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002aaf7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002aafb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002aaff:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002ab04:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002ab0a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002ab10:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002ab14:	83 c4 20             	add    esp,0x20
c002ab17:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002ab1c:	74 30                	je     c002ab4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ab1e:	31 c0                	xor    eax,eax
c002ab20:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002ab24:	7e 28                	jle    c002ab4e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002ab26:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002ab2e:	39 cb                	cmp    ebx,ecx
c002ab30:	75 19                	jne    c002ab4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ab32:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002ab3a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002ab3e:	75 0b                	jne    c002ab4b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002ab40:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002ab47:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002ab4b:	40                   	inc    eax
c002ab4c:	eb d2                	jmp    c002ab20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002ab4e:	31 d2                	xor    edx,edx
c002ab50:	83 ec 0c             	sub    esp,0xc
c002ab53:	57                   	push   edi
c002ab54:	53                   	push   ebx
c002ab55:	56                   	push   esi
c002ab56:	52                   	push   edx
c002ab57:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002ab5b:	55                   	push   ebp
c002ab5c:	e8 5f f9 ff ff       	call   c002a4c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab61:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002ab65:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002ab69:	42                   	inc    edx
c002ab6a:	83 c4 20             	add    esp,0x20
c002ab6d:	83 fa 06             	cmp    edx,0x6
c002ab70:	75 de                	jne    c002ab50 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002ab72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002ab76:	83 ec 0c             	sub    esp,0xc
c002ab79:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ab7d:	c1 e2 08             	shl    edx,0x8
c002ab80:	0f b6 c4             	movzx  eax,ah
c002ab83:	09 d0                	or     eax,edx
c002ab85:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002ab8a:	6a 02                	push   0x2
c002ab8c:	57                   	push   edi
c002ab8d:	53                   	push   ebx
c002ab8e:	56                   	push   esi
c002ab8f:	55                   	push   ebp
c002ab90:	e8 53 f7 ff ff       	call   c002a2e8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002ab95:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002ab9a:	83 c4 20             	add    esp,0x20
c002ab9d:	57                   	push   edi
c002ab9e:	53                   	push   ebx
c002ab9f:	56                   	push   esi
c002aba0:	55                   	push   ebp
c002aba1:	e8 82 f8 ff ff       	call   c002a428 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002aba6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002abaa:	57                   	push   edi
c002abab:	53                   	push   ebx
c002abac:	56                   	push   esi
c002abad:	55                   	push   ebp
c002abae:	e8 df f7 ff ff       	call   c002a392 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002abb3:	b9 09 00 00 00       	mov    ecx,0x9
c002abb8:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002abbd:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002abc1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002abc5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002abc9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002abcd:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002abd1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002abd5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002abd9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002abdd:	83 ec 0c             	sub    esp,0xc
c002abe0:	fc                   	cld    
c002abe1:	8d 74 24 58          	lea    esi,[esp+0x58]
c002abe5:	89 e7                	mov    edi,esp
c002abe7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002abe9:	55                   	push   ebp
c002abea:	e8 09 fd ff ff       	call   c002a8f8 <PCI::foundDevice(PCIDeviceInfo)>
c002abef:	81 c4 8c 00 00 00    	add    esp,0x8c
c002abf5:	5b                   	pop    ebx
c002abf6:	5e                   	pop    esi
c002abf7:	5f                   	pop    edi
c002abf8:	5d                   	pop    ebp
c002abf9:	c3                   	ret    

c002abfa <PCI::checkDevice(unsigned char, unsigned char)>:
c002abfa:	55                   	push   ebp
c002abfb:	57                   	push   edi
c002abfc:	56                   	push   esi
c002abfd:	53                   	push   ebx
c002abfe:	83 ec 0c             	sub    esp,0xc
c002ac01:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002ac06:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002ac0b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002ac0f:	6a 00                	push   0x0
c002ac11:	56                   	push   esi
c002ac12:	57                   	push   edi
c002ac13:	55                   	push   ebp
c002ac14:	e8 79 f7 ff ff       	call   c002a392 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac19:	6a 00                	push   0x0
c002ac1b:	56                   	push   esi
c002ac1c:	57                   	push   edi
c002ac1d:	55                   	push   ebp
c002ac1e:	e8 5b fe ff ff       	call   c002aa7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ac23:	83 c4 20             	add    esp,0x20
c002ac26:	6a 00                	push   0x0
c002ac28:	56                   	push   esi
c002ac29:	57                   	push   edi
c002ac2a:	55                   	push   ebp
c002ac2b:	e8 86 f7 ff ff       	call   c002a3b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ac30:	83 c4 10             	add    esp,0x10
c002ac33:	a8 80                	test   al,0x80
c002ac35:	74 2d                	je     c002ac64 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ac37:	bb 01 00 00 00       	mov    ebx,0x1
c002ac3c:	53                   	push   ebx
c002ac3d:	56                   	push   esi
c002ac3e:	57                   	push   edi
c002ac3f:	55                   	push   ebp
c002ac40:	e8 4d f7 ff ff       	call   c002a392 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ac45:	83 c4 10             	add    esp,0x10
c002ac48:	0f b7 c0             	movzx  eax,ax
c002ac4b:	3d ff ff 00 00       	cmp    eax,0xffff
c002ac50:	74 0c                	je     c002ac5e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002ac52:	53                   	push   ebx
c002ac53:	56                   	push   esi
c002ac54:	57                   	push   edi
c002ac55:	55                   	push   ebp
c002ac56:	e8 23 fe ff ff       	call   c002aa7e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ac5b:	83 c4 10             	add    esp,0x10
c002ac5e:	43                   	inc    ebx
c002ac5f:	83 fb 08             	cmp    ebx,0x8
c002ac62:	75 d8                	jne    c002ac3c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002ac64:	83 c4 0c             	add    esp,0xc
c002ac67:	5b                   	pop    ebx
c002ac68:	5e                   	pop    esi
c002ac69:	5f                   	pop    edi
c002ac6a:	5d                   	pop    ebp
c002ac6b:	c3                   	ret    

c002ac6c <PCI::detect()>:
c002ac6c:	56                   	push   esi
c002ac6d:	53                   	push   ebx
c002ac6e:	53                   	push   ebx
c002ac6f:	31 db                	xor    ebx,ebx
c002ac71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ac75:	6a 00                	push   0x0
c002ac77:	6a 00                	push   0x0
c002ac79:	6a 00                	push   0x0
c002ac7b:	56                   	push   esi
c002ac7c:	e8 35 f7 ff ff       	call   c002a3b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ac81:	83 c4 10             	add    esp,0x10
c002ac84:	a8 80                	test   al,0x80
c002ac86:	75 21                	jne    c002aca9 <PCI::detect()+0x3d>
c002ac88:	51                   	push   ecx
c002ac89:	51                   	push   ecx
c002ac8a:	6a 00                	push   0x0
c002ac8c:	56                   	push   esi
c002ac8d:	e8 42 fc ff ff       	call   c002a8d4 <PCI::checkBus(unsigned char)>
c002ac92:	83 c4 10             	add    esp,0x10
c002ac95:	eb 2a                	jmp    c002acc1 <PCI::detect()+0x55>
c002ac97:	52                   	push   edx
c002ac98:	52                   	push   edx
c002ac99:	53                   	push   ebx
c002ac9a:	43                   	inc    ebx
c002ac9b:	56                   	push   esi
c002ac9c:	e8 33 fc ff ff       	call   c002a8d4 <PCI::checkBus(unsigned char)>
c002aca1:	83 c4 10             	add    esp,0x10
c002aca4:	83 fb 08             	cmp    ebx,0x8
c002aca7:	74 18                	je     c002acc1 <PCI::detect()+0x55>
c002aca9:	53                   	push   ebx
c002acaa:	6a 00                	push   0x0
c002acac:	6a 00                	push   0x0
c002acae:	56                   	push   esi
c002acaf:	e8 de f6 ff ff       	call   c002a392 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002acb4:	83 c4 10             	add    esp,0x10
c002acb7:	0f b7 c0             	movzx  eax,ax
c002acba:	3d ff ff 00 00       	cmp    eax,0xffff
c002acbf:	74 d6                	je     c002ac97 <PCI::detect()+0x2b>
c002acc1:	58                   	pop    eax
c002acc2:	5b                   	pop    ebx
c002acc3:	5e                   	pop    esi
c002acc4:	c3                   	ret    
c002acc5:	90                   	nop

c002acc6 <IDE::close(int, int, void*)>:
c002acc6:	83 c8 ff             	or     eax,0xffffffff
c002acc9:	c3                   	ret    

c002acca <IDE::IDE()>:
c002acca:	83 ec 0c             	sub    esp,0xc
c002accd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002acd1:	83 ec 08             	sub    esp,0x8
c002acd4:	68 2c 38 03 c0       	push   0xc003382c
c002acd9:	50                   	push   eax
c002acda:	e8 f1 09 ff ff       	call   c001b6d0 <HardDiskController::HardDiskController(char const*)>
c002acdf:	83 c4 10             	add    esp,0x10
c002ace2:	ba bc 38 03 c0       	mov    edx,0xc00338bc
c002ace7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aceb:	89 10                	mov    DWORD PTR [eax],edx
c002aced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002acf1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002acf8:	90                   	nop
c002acf9:	83 c4 0c             	add    esp,0xc
c002acfc:	c3                   	ret    
c002acfd:	90                   	nop

c002acfe <IDE::prepareInterrupt(unsigned char)>:
c002acfe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ad03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ad07:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ad0f:	c3                   	ret    

c002ad10 <selectDrive(unsigned char, unsigned char)>:
c002ad10:	c3                   	ret    
c002ad11:	90                   	nop

c002ad12 <IDE::getBase(unsigned char)>:
c002ad12:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ad17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ad1b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002ad23:	c3                   	ret    

c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002ad24:	55                   	push   ebp
c002ad25:	57                   	push   edi
c002ad26:	56                   	push   esi
c002ad27:	53                   	push   ebx
c002ad28:	83 ec 1c             	sub    esp,0x1c
c002ad2b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ad2f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002ad33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002ad37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ad3b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ad3e:	80 f9 03             	cmp    cl,0x3
c002ad41:	77 4f                	ja     c002ad92 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ad43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ad47:	0f b6 f2             	movzx  esi,dl
c002ad4a:	0f b6 db             	movzx  ebx,bl
c002ad4d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002ad50:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002ad55:	80 ca 80             	or     dl,0x80
c002ad58:	52                   	push   edx
c002ad59:	6a 0c                	push   0xc
c002ad5b:	56                   	push   esi
c002ad5c:	57                   	push   edi
c002ad5d:	e8 c2 ff ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad62:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002ad67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002ad6b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002ad6f:	ee                   	out    dx,al
c002ad70:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002ad75:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002ad79:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002ad7d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ad85:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002ad89:	83 c4 2c             	add    esp,0x2c
c002ad8c:	5b                   	pop    ebx
c002ad8d:	5e                   	pop    esi
c002ad8e:	5f                   	pop    edi
c002ad8f:	5d                   	pop    ebp
c002ad90:	eb 92                	jmp    c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad92:	0f b6 cb             	movzx  ecx,bl
c002ad95:	83 f9 07             	cmp    ecx,0x7
c002ad98:	77 12                	ja     c002adac <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002ad9a:	0f b6 d2             	movzx  edx,dl
c002ad9d:	0f b6 db             	movzx  ebx,bl
c002ada0:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002ada8:	01 da                	add    edx,ebx
c002adaa:	eb 2f                	jmp    c002addb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002adac:	83 f9 0d             	cmp    ecx,0xd
c002adaf:	77 13                	ja     c002adc4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002adb1:	0f b6 d2             	movzx  edx,dl
c002adb4:	0f b6 db             	movzx  ebx,bl
c002adb7:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002adbe:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002adc2:	eb 17                	jmp    c002addb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002adc4:	83 f9 15             	cmp    ecx,0x15
c002adc7:	77 13                	ja     c002addc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002adc9:	0f b6 d2             	movzx  edx,dl
c002adcc:	0f b6 db             	movzx  ebx,bl
c002adcf:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002add7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002addb:	ee                   	out    dx,al
c002addc:	83 c4 1c             	add    esp,0x1c
c002addf:	5b                   	pop    ebx
c002ade0:	5e                   	pop    esi
c002ade1:	5f                   	pop    edi
c002ade2:	5d                   	pop    ebp
c002ade3:	c3                   	ret    

c002ade4 <IDE::read(unsigned char, unsigned char)>:
c002ade4:	57                   	push   edi
c002ade5:	56                   	push   esi
c002ade6:	53                   	push   ebx
c002ade7:	83 ec 10             	sub    esp,0x10
c002adea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002adee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002adf2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002adf6:	8d 42 f8             	lea    eax,[edx-0x8]
c002adf9:	3c 03                	cmp    al,0x3
c002adfb:	77 48                	ja     c002ae45 <IDE::read(unsigned char, unsigned char)+0x61>
c002adfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ae01:	0f b6 f1             	movzx  esi,cl
c002ae04:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002ae07:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002ae0c:	0c 80                	or     al,0x80
c002ae0e:	50                   	push   eax
c002ae0f:	6a 0c                	push   0xc
c002ae11:	56                   	push   esi
c002ae12:	53                   	push   ebx
c002ae13:	e8 0c ff ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ae18:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ae1c:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002ae21:	0f b6 d2             	movzx  edx,dl
c002ae24:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002ae28:	ec                   	in     al,dx
c002ae29:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002ae2d:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002ae32:	52                   	push   edx
c002ae33:	6a 0c                	push   0xc
c002ae35:	56                   	push   esi
c002ae36:	53                   	push   ebx
c002ae37:	e8 e8 fe ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ae3c:	83 c4 20             	add    esp,0x20
c002ae3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002ae43:	eb 4c                	jmp    c002ae91 <IDE::read(unsigned char, unsigned char)+0xad>
c002ae45:	0f b6 f2             	movzx  esi,dl
c002ae48:	83 fe 07             	cmp    esi,0x7
c002ae4b:	77 12                	ja     c002ae5f <IDE::read(unsigned char, unsigned char)+0x7b>
c002ae4d:	0f b6 c9             	movzx  ecx,cl
c002ae50:	0f b6 d2             	movzx  edx,dl
c002ae53:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002ae5b:	01 c2                	add    edx,eax
c002ae5d:	eb 31                	jmp    c002ae90 <IDE::read(unsigned char, unsigned char)+0xac>
c002ae5f:	83 fe 0d             	cmp    esi,0xd
c002ae62:	77 13                	ja     c002ae77 <IDE::read(unsigned char, unsigned char)+0x93>
c002ae64:	0f b6 c9             	movzx  ecx,cl
c002ae67:	0f b6 d2             	movzx  edx,dl
c002ae6a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002ae71:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ae75:	eb 19                	jmp    c002ae90 <IDE::read(unsigned char, unsigned char)+0xac>
c002ae77:	31 c0                	xor    eax,eax
c002ae79:	83 fe 15             	cmp    esi,0x15
c002ae7c:	77 13                	ja     c002ae91 <IDE::read(unsigned char, unsigned char)+0xad>
c002ae7e:	0f b6 c9             	movzx  ecx,cl
c002ae81:	0f b6 d2             	movzx  edx,dl
c002ae84:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002ae8c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ae90:	ec                   	in     al,dx
c002ae91:	83 c4 10             	add    esp,0x10
c002ae94:	5b                   	pop    ebx
c002ae95:	5e                   	pop    esi
c002ae96:	5f                   	pop    edi
c002ae97:	c3                   	ret    

c002ae98 <IDE::waitInterrupt(unsigned char)>:
c002ae98:	55                   	push   ebp
c002ae99:	57                   	push   edi
c002ae9a:	56                   	push   esi
c002ae9b:	53                   	push   ebx
c002ae9c:	31 db                	xor    ebx,ebx
c002ae9e:	83 ec 0c             	sub    esp,0xc
c002aea1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002aea5:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002aeaa:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002aeb2:	89 e8                	mov    eax,ebp
c002aeb4:	84 c0                	test   al,al
c002aeb6:	75 30                	jne    c002aee8 <IDE::waitInterrupt(unsigned char)+0x50>
c002aeb8:	50                   	push   eax
c002aeb9:	6a 0c                	push   0xc
c002aebb:	56                   	push   esi
c002aebc:	57                   	push   edi
c002aebd:	e8 22 ff ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002aec2:	83 c4 10             	add    esp,0x10
c002aec5:	a8 01                	test   al,0x1
c002aec7:	75 27                	jne    c002aef0 <IDE::waitInterrupt(unsigned char)+0x58>
c002aec9:	f6 c3 04             	test   bl,0x4
c002aecc:	75 12                	jne    c002aee0 <IDE::waitInterrupt(unsigned char)+0x48>
c002aece:	83 fb 32             	cmp    ebx,0x32
c002aed1:	7e 0d                	jle    c002aee0 <IDE::waitInterrupt(unsigned char)+0x48>
c002aed3:	83 ec 0c             	sub    esp,0xc
c002aed6:	6a 64                	push   0x64
c002aed8:	e8 c7 a5 ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002aedd:	83 c4 10             	add    esp,0x10
c002aee0:	83 fb 3c             	cmp    ebx,0x3c
c002aee3:	74 0b                	je     c002aef0 <IDE::waitInterrupt(unsigned char)+0x58>
c002aee5:	43                   	inc    ebx
c002aee6:	eb c2                	jmp    c002aeaa <IDE::waitInterrupt(unsigned char)+0x12>
c002aee8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002aef0:	83 c4 0c             	add    esp,0xc
c002aef3:	89 e8                	mov    eax,ebp
c002aef5:	5b                   	pop    ebx
c002aef6:	5e                   	pop    esi
c002aef7:	5f                   	pop    edi
c002aef8:	5d                   	pop    ebp
c002aef9:	c3                   	ret    

c002aefa <ideChannel0IRQHandler(regs*, void*)>:
c002aefa:	83 ec 10             	sub    esp,0x10
c002aefd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002af01:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002af08:	6a 07                	push   0x7
c002af0a:	6a 00                	push   0x0
c002af0c:	50                   	push   eax
c002af0d:	e8 d2 fe ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002af12:	83 c4 1c             	add    esp,0x1c
c002af15:	c3                   	ret    

c002af16 <ideChannel1IRQHandler(regs*, void*)>:
c002af16:	83 ec 10             	sub    esp,0x10
c002af19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002af1d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002af24:	6a 07                	push   0x7
c002af26:	6a 01                	push   0x1
c002af28:	50                   	push   eax
c002af29:	e8 b6 fe ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002af2e:	83 c4 1c             	add    esp,0x1c
c002af31:	c3                   	ret    

c002af32 <IDE::enableIRQs(unsigned char, bool)>:
c002af32:	57                   	push   edi
c002af33:	b8 02 00 00 00       	mov    eax,0x2
c002af38:	56                   	push   esi
c002af39:	53                   	push   ebx
c002af3a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002af3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002af43:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002af47:	74 02                	je     c002af4b <IDE::enableIRQs(unsigned char, bool)+0x19>
c002af49:	31 c0                	xor    eax,eax
c002af4b:	0f b6 db             	movzx  ebx,bl
c002af4e:	bf 04 00 00 00       	mov    edi,0x4
c002af53:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002af5a:	50                   	push   eax
c002af5b:	6a 0c                	push   0xc
c002af5d:	53                   	push   ebx
c002af5e:	56                   	push   esi
c002af5f:	e8 c0 fd ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002af64:	83 c4 10             	add    esp,0x10
c002af67:	50                   	push   eax
c002af68:	6a 0c                	push   0xc
c002af6a:	53                   	push   ebx
c002af6b:	56                   	push   esi
c002af6c:	e8 73 fe ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002af71:	83 c4 10             	add    esp,0x10
c002af74:	4f                   	dec    edi
c002af75:	75 f0                	jne    c002af67 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002af77:	5b                   	pop    ebx
c002af78:	5e                   	pop    esi
c002af79:	5f                   	pop    edi
c002af7a:	c3                   	ret    
c002af7b:	90                   	nop

c002af7c <IDE::open(int, int, void*)>:
c002af7c:	55                   	push   ebp
c002af7d:	57                   	push   edi
c002af7e:	56                   	push   esi
c002af7f:	53                   	push   ebx
c002af80:	83 ec 1c             	sub    esp,0x1c
c002af83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002af87:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002af8e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002af97:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002afa0:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002afa7:	0f 85 da 02 00 00    	jne    c002b287 <IDE::open(int, int, void*)+0x30b>
c002afad:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002afb3:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002afb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002afbb:	83 e0 7f             	and    eax,0x7f
c002afbe:	83 f8 05             	cmp    eax,0x5
c002afc1:	74 05                	je     c002afc8 <IDE::open(int, int, void*)+0x4c>
c002afc3:	83 f8 0f             	cmp    eax,0xf
c002afc6:	75 32                	jne    c002affa <IDE::open(int, int, void*)+0x7e>
c002afc8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002afce:	83 e0 fc             	and    eax,0xfffffffc
c002afd1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002afd8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002afde:	83 e0 fc             	and    eax,0xfffffffc
c002afe1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002afe8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002afee:	83 e0 fc             	and    eax,0xfffffffc
c002aff1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002aff8:	eb 14                	jmp    c002b00e <IDE::open(int, int, void*)+0x92>
c002affa:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002b004:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002b00e:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002b015:	bf f8 0c 00 00       	mov    edi,0xcf8
c002b01a:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002b021:	89 fa                	mov    edx,edi
c002b023:	89 f1                	mov    ecx,esi
c002b025:	c1 e1 10             	shl    ecx,0x10
c002b028:	89 e8                	mov    eax,ebp
c002b02a:	c1 e0 0b             	shl    eax,0xb
c002b02d:	09 c1                	or     ecx,eax
c002b02f:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b036:	c1 e0 08             	shl    eax,0x8
c002b039:	09 c1                	or     ecx,eax
c002b03b:	89 c8                	mov    eax,ecx
c002b03d:	0d 08 00 00 80       	or     eax,0x80000008
c002b042:	ef                   	out    dx,eax
c002b043:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b048:	ed                   	in     eax,dx
c002b049:	c1 e8 10             	shr    eax,0x10
c002b04c:	3d ff ff 00 00       	cmp    eax,0xffff
c002b051:	0f 84 f9 00 00 00    	je     c002b150 <IDE::open(int, int, void*)+0x1d4>
c002b057:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b05d:	89 fa                	mov    edx,edi
c002b05f:	89 c8                	mov    eax,ecx
c002b061:	ef                   	out    dx,eax
c002b062:	b0 fe                	mov    al,0xfe
c002b064:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b069:	ee                   	out    dx,al
c002b06a:	89 c8                	mov    eax,ecx
c002b06c:	89 fa                	mov    edx,edi
c002b06e:	ef                   	out    dx,eax
c002b06f:	ba fc 0c 00 00       	mov    edx,0xcfc
c002b074:	ed                   	in     eax,dx
c002b075:	3c fe                	cmp    al,0xfe
c002b077:	0f 85 a4 00 00 00    	jne    c002b121 <IDE::open(int, int, void*)+0x1a5>
c002b07d:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002b083:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002b08a:	74 30                	je     c002b0bc <IDE::open(int, int, void*)+0x140>
c002b08c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002b092:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002b096:	83 ec 0c             	sub    esp,0xc
c002b099:	40                   	inc    eax
c002b09a:	0f b6 c0             	movzx  eax,al
c002b09d:	50                   	push   eax
c002b09e:	55                   	push   ebp
c002b09f:	56                   	push   esi
c002b0a0:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002b0a6:	51                   	push   ecx
c002b0a7:	e8 30 35 ff ff       	call   c001e5dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002b0ac:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002b0b1:	83 c4 1c             	add    esp,0x1c
c002b0b4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b0ba:	eb 0a                	jmp    c002b0c6 <IDE::open(int, int, void*)+0x14a>
c002b0bc:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002b0c6:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002b0cd:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002b0d2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002b0d9:	89 ea                	mov    edx,ebp
c002b0db:	c1 e1 10             	shl    ecx,0x10
c002b0de:	c1 e0 08             	shl    eax,0x8
c002b0e1:	09 c1                	or     ecx,eax
c002b0e3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002b0ea:	c1 e0 0b             	shl    eax,0xb
c002b0ed:	09 c1                	or     ecx,eax
c002b0ef:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002b0f5:	89 c8                	mov    eax,ecx
c002b0f7:	ef                   	out    dx,eax
c002b0f8:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002b0fe:	be fc 0c 00 00       	mov    esi,0xcfc
c002b103:	89 f2                	mov    edx,esi
c002b105:	89 f8                	mov    eax,edi
c002b107:	ee                   	out    dx,al
c002b108:	89 c8                	mov    eax,ecx
c002b10a:	89 ea                	mov    edx,ebp
c002b10c:	ef                   	out    dx,eax
c002b10d:	89 f2                	mov    edx,esi
c002b10f:	ed                   	in     eax,dx
c002b110:	0f b6 c0             	movzx  eax,al
c002b113:	39 f8                	cmp    eax,edi
c002b115:	74 49                	je     c002b160 <IDE::open(int, int, void*)+0x1e4>
c002b117:	83 ec 0c             	sub    esp,0xc
c002b11a:	68 44 38 03 c0       	push   0xc0033844
c002b11f:	eb 37                	jmp    c002b158 <IDE::open(int, int, void*)+0x1dc>
c002b121:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002b12a:	75 1a                	jne    c002b146 <IDE::open(int, int, void*)+0x1ca>
c002b12c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002b131:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b136:	74 05                	je     c002b13d <IDE::open(int, int, void*)+0x1c1>
c002b138:	83 c0 80             	add    eax,0xffffff80
c002b13b:	75 09                	jne    c002b146 <IDE::open(int, int, void*)+0x1ca>
c002b13d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b144:	eb 1a                	jmp    c002b160 <IDE::open(int, int, void*)+0x1e4>
c002b146:	83 ec 0c             	sub    esp,0xc
c002b149:	68 4c 38 03 c0       	push   0xc003384c
c002b14e:	eb 08                	jmp    c002b158 <IDE::open(int, int, void*)+0x1dc>
c002b150:	83 ec 0c             	sub    esp,0xc
c002b153:	68 7d 38 03 c0       	push   0xc003387d
c002b158:	e8 0d 51 ff ff       	call   c002026a <KePanic(char const*)>
c002b15d:	83 c4 10             	add    esp,0x10
c002b160:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b167:	74 1a                	je     c002b183 <IDE::open(int, int, void*)+0x207>
c002b169:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b16f:	83 e0 fc             	and    eax,0xfffffffc
c002b172:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b179:	83 c0 08             	add    eax,0x8
c002b17c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b183:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b189:	89 c2                	mov    edx,eax
c002b18b:	83 e2 0f             	and    edx,0xf
c002b18e:	83 fa 08             	cmp    edx,0x8
c002b191:	75 0a                	jne    c002b19d <IDE::open(int, int, void*)+0x221>
c002b193:	83 e8 02             	sub    eax,0x2
c002b196:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b19d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b1a3:	89 c2                	mov    edx,eax
c002b1a5:	83 e2 0f             	and    edx,0xf
c002b1a8:	83 fa 08             	cmp    edx,0x8
c002b1ab:	75 0a                	jne    c002b1b7 <IDE::open(int, int, void*)+0x23b>
c002b1ad:	83 e8 02             	sub    eax,0x2
c002b1b0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b1b7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b1be:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b1c5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b1c8:	89 d0                	mov    eax,edx
c002b1ca:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b1ce:	8d 7a 01             	lea    edi,[edx+0x1]
c002b1d1:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b1d5:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b1d9:	83 e1 3f             	and    ecx,0x3f
c002b1dc:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b1e0:	89 f9                	mov    ecx,edi
c002b1e2:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b1e9:	8d 78 02             	lea    edi,[eax+0x2]
c002b1ec:	0f b6 c9             	movzx  ecx,cl
c002b1ef:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b1f2:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b1f6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b1fa:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b1fe:	83 e2 3f             	and    edx,0x3f
c002b201:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b205:	89 f9                	mov    ecx,edi
c002b207:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b20d:	8d 78 03             	lea    edi,[eax+0x3]
c002b210:	0f b6 d1             	movzx  edx,cl
c002b213:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b216:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b21a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b21e:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b222:	83 e1 3f             	and    ecx,0x3f
c002b225:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b229:	89 f9                	mov    ecx,edi
c002b22b:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b231:	8d 78 04             	lea    edi,[eax+0x4]
c002b234:	0f b6 c9             	movzx  ecx,cl
c002b237:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b23a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b23e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b242:	89 fa                	mov    edx,edi
c002b244:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b24a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b24e:	83 e2 3f             	and    edx,0x3f
c002b251:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b255:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b25c:	66 85 f6             	test   si,si
c002b25f:	74 65                	je     c002b2c6 <IDE::open(int, int, void*)+0x34a>
c002b261:	89 f9                	mov    ecx,edi
c002b263:	83 c0 05             	add    eax,0x5
c002b266:	0f b6 d1             	movzx  edx,cl
c002b269:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b26c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b270:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b274:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b27a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b27e:	83 e0 3f             	and    eax,0x3f
c002b281:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b285:	eb 3f                	jmp    c002b2c6 <IDE::open(int, int, void*)+0x34a>
c002b287:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b28e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b294:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b29b:	05 06 02 00 00       	add    eax,0x206
c002b2a0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b2a7:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b2ae:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b2b5:	05 06 02 00 00       	add    eax,0x206
c002b2ba:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b2c1:	e9 bd fe ff ff       	jmp    c002b183 <IDE::open(int, int, void*)+0x207>
c002b2c6:	50                   	push   eax
c002b2c7:	50                   	push   eax
c002b2c8:	6a 00                	push   0x0
c002b2ca:	53                   	push   ebx
c002b2cb:	e8 2e fa ff ff       	call   c002acfe <IDE::prepareInterrupt(unsigned char)>
c002b2d0:	5a                   	pop    edx
c002b2d1:	59                   	pop    ecx
c002b2d2:	6a 01                	push   0x1
c002b2d4:	53                   	push   ebx
c002b2d5:	e8 24 fa ff ff       	call   c002acfe <IDE::prepareInterrupt(unsigned char)>
c002b2da:	83 c4 0c             	add    esp,0xc
c002b2dd:	6a 00                	push   0x0
c002b2df:	6a 00                	push   0x0
c002b2e1:	53                   	push   ebx
c002b2e2:	e8 4b fc ff ff       	call   c002af32 <IDE::enableIRQs(unsigned char, bool)>
c002b2e7:	83 c4 0c             	add    esp,0xc
c002b2ea:	6a 00                	push   0x0
c002b2ec:	6a 01                	push   0x1
c002b2ee:	53                   	push   ebx
c002b2ef:	e8 3e fc ff ff       	call   c002af32 <IDE::enableIRQs(unsigned char, bool)>
c002b2f4:	83 c4 10             	add    esp,0x10
c002b2f7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b2fe:	74 34                	je     c002b334 <IDE::open(int, int, void*)+0x3b8>
c002b300:	83 ec 0c             	sub    esp,0xc
c002b303:	53                   	push   ebx
c002b304:	6a 01                	push   0x1
c002b306:	68 fa ae 02 c0       	push   0xc002aefa
c002b30b:	6a 0e                	push   0xe
c002b30d:	53                   	push   ebx
c002b30e:	e8 11 00 ff ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b313:	83 c4 14             	add    esp,0x14
c002b316:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b31c:	53                   	push   ebx
c002b31d:	6a 01                	push   0x1
c002b31f:	68 16 af 02 c0       	push   0xc002af16
c002b324:	6a 0f                	push   0xf
c002b326:	53                   	push   ebx
c002b327:	e8 f8 ff fe ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b32c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b332:	eb 38                	jmp    c002b36c <IDE::open(int, int, void*)+0x3f0>
c002b334:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b33e:	83 ec 0c             	sub    esp,0xc
c002b341:	53                   	push   ebx
c002b342:	6a 00                	push   0x0
c002b344:	68 fa ae 02 c0       	push   0xc002aefa
c002b349:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b34f:	53                   	push   ebx
c002b350:	e8 cf ff fe ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b355:	83 c4 14             	add    esp,0x14
c002b358:	53                   	push   ebx
c002b359:	6a 00                	push   0x0
c002b35b:	68 16 af 02 c0       	push   0xc002af16
c002b360:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b366:	53                   	push   ebx
c002b367:	e8 b8 ff fe ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b36c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b36e:	83 c4 20             	add    esp,0x20
c002b371:	83 ec 0c             	sub    esp,0xc
c002b374:	53                   	push   ebx
c002b375:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b378:	83 c4 0c             	add    esp,0xc
c002b37b:	6a 07                	push   0x7
c002b37d:	6a 00                	push   0x0
c002b37f:	53                   	push   ebx
c002b380:	e8 5f fa ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b385:	83 c4 0c             	add    esp,0xc
c002b388:	6a 07                	push   0x7
c002b38a:	6a 01                	push   0x1
c002b38c:	53                   	push   ebx
c002b38d:	e8 52 fa ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b392:	83 c4 0c             	add    esp,0xc
c002b395:	6a 01                	push   0x1
c002b397:	6a 00                	push   0x0
c002b399:	53                   	push   ebx
c002b39a:	e8 93 fb ff ff       	call   c002af32 <IDE::enableIRQs(unsigned char, bool)>
c002b39f:	83 c4 0c             	add    esp,0xc
c002b3a2:	6a 01                	push   0x1
c002b3a4:	6a 01                	push   0x1
c002b3a6:	53                   	push   ebx
c002b3a7:	e8 86 fb ff ff       	call   c002af32 <IDE::enableIRQs(unsigned char, bool)>
c002b3ac:	83 c4 2c             	add    esp,0x2c
c002b3af:	31 c0                	xor    eax,eax
c002b3b1:	5b                   	pop    ebx
c002b3b2:	5e                   	pop    esi
c002b3b3:	5f                   	pop    edi
c002b3b4:	5d                   	pop    ebp
c002b3b5:	c3                   	ret    

c002b3b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b3b6:	55                   	push   ebp
c002b3b7:	57                   	push   edi
c002b3b8:	56                   	push   esi
c002b3b9:	53                   	push   ebx
c002b3ba:	83 ec 1c             	sub    esp,0x1c
c002b3bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b3c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b3c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b3c9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b3cd:	8d 42 f8             	lea    eax,[edx-0x8]
c002b3d0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b3d4:	3c 03                	cmp    al,0x3
c002b3d6:	77 5a                	ja     c002b432 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b3d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b3dc:	0f b6 db             	movzx  ebx,bl
c002b3df:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b3e3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b3e6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b3eb:	0c 80                	or     al,0x80
c002b3ed:	50                   	push   eax
c002b3ee:	6a 0c                	push   0xc
c002b3f0:	53                   	push   ebx
c002b3f1:	56                   	push   esi
c002b3f2:	e8 2d f9 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b3fb:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b400:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b404:	0f b6 d2             	movzx  edx,dl
c002b407:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b40b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b40d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b412:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b416:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b41a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b422:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b426:	83 c4 2c             	add    esp,0x2c
c002b429:	5b                   	pop    ebx
c002b42a:	5e                   	pop    esi
c002b42b:	5f                   	pop    edi
c002b42c:	5d                   	pop    ebp
c002b42d:	e9 f2 f8 ff ff       	jmp    c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b432:	0f b6 c2             	movzx  eax,dl
c002b435:	83 f8 07             	cmp    eax,0x7
c002b438:	77 12                	ja     c002b44c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b43a:	0f b6 db             	movzx  ebx,bl
c002b43d:	0f b6 c2             	movzx  eax,dl
c002b440:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b448:	01 c2                	add    edx,eax
c002b44a:	eb 2f                	jmp    c002b47b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b44c:	83 f8 0d             	cmp    eax,0xd
c002b44f:	77 13                	ja     c002b464 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b451:	0f b6 db             	movzx  ebx,bl
c002b454:	0f b6 d2             	movzx  edx,dl
c002b457:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b45e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b462:	eb 17                	jmp    c002b47b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b464:	83 f8 15             	cmp    eax,0x15
c002b467:	77 14                	ja     c002b47d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b469:	0f b6 db             	movzx  ebx,bl
c002b46c:	0f b6 d2             	movzx  edx,dl
c002b46f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b477:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b47b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b47d:	83 c4 1c             	add    esp,0x1c
c002b480:	5b                   	pop    ebx
c002b481:	5e                   	pop    esi
c002b482:	5f                   	pop    edi
c002b483:	5d                   	pop    ebp
c002b484:	c3                   	ret    
c002b485:	90                   	nop

c002b486 <IDE::detect()>:
c002b486:	55                   	push   ebp
c002b487:	57                   	push   edi
c002b488:	56                   	push   esi
c002b489:	53                   	push   ebx
c002b48a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b490:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b497:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b49e:	0f 85 9e 02 00 00    	jne    c002b742 <IDE::detect()+0x2bc>
c002b4a4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b4ab:	31 f6                	xor    esi,esi
c002b4ad:	31 ff                	xor    edi,edi
c002b4af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b4b7:	89 f8                	mov    eax,edi
c002b4b9:	c1 e0 06             	shl    eax,0x6
c002b4bc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b4c4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b4c8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b4d0:	c1 e0 04             	shl    eax,0x4
c002b4d3:	83 c8 a0             	or     eax,0xffffffa0
c002b4d6:	0f b6 c0             	movzx  eax,al
c002b4d9:	50                   	push   eax
c002b4da:	6a 06                	push   0x6
c002b4dc:	56                   	push   esi
c002b4dd:	53                   	push   ebx
c002b4de:	e8 41 f8 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b4e3:	83 c4 0c             	add    esp,0xc
c002b4e6:	6a 0c                	push   0xc
c002b4e8:	56                   	push   esi
c002b4e9:	53                   	push   ebx
c002b4ea:	e8 f5 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b4ef:	83 c4 0c             	add    esp,0xc
c002b4f2:	6a 0c                	push   0xc
c002b4f4:	56                   	push   esi
c002b4f5:	53                   	push   ebx
c002b4f6:	e8 e9 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b4fb:	83 c4 0c             	add    esp,0xc
c002b4fe:	6a 0c                	push   0xc
c002b500:	56                   	push   esi
c002b501:	53                   	push   ebx
c002b502:	e8 dd f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b507:	83 c4 0c             	add    esp,0xc
c002b50a:	6a 0c                	push   0xc
c002b50c:	56                   	push   esi
c002b50d:	53                   	push   ebx
c002b50e:	e8 d1 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b513:	68 ec 00 00 00       	push   0xec
c002b518:	6a 07                	push   0x7
c002b51a:	56                   	push   esi
c002b51b:	53                   	push   ebx
c002b51c:	e8 03 f8 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b521:	83 c4 1c             	add    esp,0x1c
c002b524:	6a 0c                	push   0xc
c002b526:	56                   	push   esi
c002b527:	53                   	push   ebx
c002b528:	e8 b7 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b52d:	83 c4 0c             	add    esp,0xc
c002b530:	6a 0c                	push   0xc
c002b532:	56                   	push   esi
c002b533:	53                   	push   ebx
c002b534:	e8 ab f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b539:	83 c4 0c             	add    esp,0xc
c002b53c:	6a 0c                	push   0xc
c002b53e:	56                   	push   esi
c002b53f:	53                   	push   ebx
c002b540:	e8 9f f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b545:	83 c4 0c             	add    esp,0xc
c002b548:	6a 0c                	push   0xc
c002b54a:	56                   	push   esi
c002b54b:	53                   	push   ebx
c002b54c:	e8 93 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b551:	83 c4 0c             	add    esp,0xc
c002b554:	6a 0c                	push   0xc
c002b556:	56                   	push   esi
c002b557:	53                   	push   ebx
c002b558:	e8 87 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b55d:	83 c4 10             	add    esp,0x10
c002b560:	84 c0                	test   al,al
c002b562:	0f 84 61 01 00 00    	je     c002b6c9 <IDE::detect()+0x243>
c002b568:	31 ed                	xor    ebp,ebp
c002b56a:	50                   	push   eax
c002b56b:	6a 0c                	push   0xc
c002b56d:	56                   	push   esi
c002b56e:	53                   	push   ebx
c002b56f:	e8 70 f8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b574:	83 c4 10             	add    esp,0x10
c002b577:	a8 01                	test   al,0x1
c002b579:	0f 85 6b 01 00 00    	jne    c002b6ea <IDE::detect()+0x264>
c002b57f:	a8 80                	test   al,0x80
c002b581:	75 04                	jne    c002b587 <IDE::detect()+0x101>
c002b583:	a8 08                	test   al,0x8
c002b585:	75 23                	jne    c002b5aa <IDE::detect()+0x124>
c002b587:	45                   	inc    ebp
c002b588:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b58e:	7e da                	jle    c002b56a <IDE::detect()+0xe4>
c002b590:	83 ec 0c             	sub    esp,0xc
c002b593:	6a 32                	push   0x32
c002b595:	e8 0a 9f ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002b59a:	83 c4 10             	add    esp,0x10
c002b59d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b5a3:	75 c5                	jne    c002b56a <IDE::detect()+0xe4>
c002b5a5:	e9 40 01 00 00       	jmp    c002b6ea <IDE::detect()+0x264>
c002b5aa:	31 c9                	xor    ecx,ecx
c002b5ac:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b5b0:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002b5b4:	83 ec 0c             	sub    esp,0xc
c002b5b7:	68 80 00 00 00       	push   0x80
c002b5bc:	55                   	push   ebp
c002b5bd:	6a 00                	push   0x0
c002b5bf:	56                   	push   esi
c002b5c0:	53                   	push   ebx
c002b5c1:	e8 f0 fd ff ff       	call   c002b3b6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b5c6:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b5cb:	89 f8                	mov    eax,edi
c002b5cd:	c1 e0 06             	shl    eax,0x6
c002b5d0:	01 d8                	add    eax,ebx
c002b5d2:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b5d9:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b5e0:	89 d1                	mov    ecx,edx
c002b5e2:	89 f2                	mov    edx,esi
c002b5e4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b5ea:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b5ee:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b5f4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b5f8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b5ff:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b607:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b60e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b616:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b61c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b623:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b629:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b62d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b631:	83 c4 20             	add    esp,0x20
c002b634:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002b637:	83 c5 02             	add    ebp,0x2
c002b63a:	83 c0 02             	add    eax,0x2
c002b63d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b643:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002b646:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b64c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002b650:	75 e2                	jne    c002b634 <IDE::detect()+0x1ae>
c002b652:	89 f8                	mov    eax,edi
c002b654:	c1 e0 06             	shl    eax,0x6
c002b657:	01 d8                	add    eax,ebx
c002b659:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b660:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b667:	c1 ea 09             	shr    edx,0x9
c002b66a:	83 e2 01             	and    edx,0x1
c002b66d:	80 e1 01             	and    cl,0x1
c002b670:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b676:	75 22                	jne    c002b69a <IDE::detect()+0x214>
c002b678:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b67f:	74 47                	je     c002b6c8 <IDE::detect()+0x242>
c002b681:	83 ec 0c             	sub    esp,0xc
c002b684:	68 7c 01 00 00       	push   0x17c
c002b689:	e8 0d ae fe ff       	call   c001649b <malloc>
c002b68e:	89 04 24             	mov    DWORD PTR [esp],eax
c002b691:	89 c5                	mov    ebp,eax
c002b693:	e8 2a 05 00 00       	call   c002bbc2 <ATA::ATA()>
c002b698:	eb 17                	jmp    c002b6b1 <IDE::detect()+0x22b>
c002b69a:	83 ec 0c             	sub    esp,0xc
c002b69d:	68 84 01 00 00       	push   0x184
c002b6a2:	e8 f4 ad fe ff       	call   c001649b <malloc>
c002b6a7:	89 04 24             	mov    DWORD PTR [esp],eax
c002b6aa:	89 c5                	mov    ebp,eax
c002b6ac:	e8 83 0e 00 00       	call   c002c534 <ATAPI::ATAPI()>
c002b6b1:	5a                   	pop    edx
c002b6b2:	59                   	pop    ecx
c002b6b3:	55                   	push   ebp
c002b6b4:	53                   	push   ebx
c002b6b5:	e8 be fc fe ff       	call   c001b378 <Device::addChild(Device*)>
c002b6ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002b6bd:	53                   	push   ebx
c002b6be:	57                   	push   edi
c002b6bf:	6a 00                	push   0x0
c002b6c1:	55                   	push   ebp
c002b6c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b6c5:	83 c4 20             	add    esp,0x20
c002b6c8:	47                   	inc    edi
c002b6c9:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b6ce:	74 0d                	je     c002b6dd <IDE::detect()+0x257>
c002b6d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b6d8:	e9 da fd ff ff       	jmp    c002b4b7 <IDE::detect()+0x31>
c002b6dd:	4e                   	dec    esi
c002b6de:	74 62                	je     c002b742 <IDE::detect()+0x2bc>
c002b6e0:	be 01 00 00 00       	mov    esi,0x1
c002b6e5:	e9 c5 fd ff ff       	jmp    c002b4af <IDE::detect()+0x29>
c002b6ea:	50                   	push   eax
c002b6eb:	6a 04                	push   0x4
c002b6ed:	56                   	push   esi
c002b6ee:	53                   	push   ebx
c002b6ef:	e8 f0 f6 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b6f4:	83 c4 0c             	add    esp,0xc
c002b6f7:	6a 05                	push   0x5
c002b6f9:	56                   	push   esi
c002b6fa:	53                   	push   ebx
c002b6fb:	89 c5                	mov    ebp,eax
c002b6fd:	e8 e2 f6 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b702:	89 e9                	mov    ecx,ebp
c002b704:	83 c4 10             	add    esp,0x10
c002b707:	0f b6 e9             	movzx  ebp,cl
c002b70a:	83 fd 14             	cmp    ebp,0x14
c002b70d:	74 2d                	je     c002b73c <IDE::detect()+0x2b6>
c002b70f:	83 fd 69             	cmp    ebp,0x69
c002b712:	75 b5                	jne    c002b6c9 <IDE::detect()+0x243>
c002b714:	3c 96                	cmp    al,0x96
c002b716:	75 b1                	jne    c002b6c9 <IDE::detect()+0x243>
c002b718:	68 a1 00 00 00       	push   0xa1
c002b71d:	6a 07                	push   0x7
c002b71f:	56                   	push   esi
c002b720:	53                   	push   ebx
c002b721:	e8 fe f5 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b726:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b72d:	e8 72 9d ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002b732:	83 c4 10             	add    esp,0x10
c002b735:	b1 01                	mov    cl,0x1
c002b737:	e9 70 fe ff ff       	jmp    c002b5ac <IDE::detect()+0x126>
c002b73c:	3c eb                	cmp    al,0xeb
c002b73e:	75 cf                	jne    c002b70f <IDE::detect()+0x289>
c002b740:	eb d6                	jmp    c002b718 <IDE::detect()+0x292>
c002b742:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b748:	5b                   	pop    ebx
c002b749:	5e                   	pop    esi
c002b74a:	5f                   	pop    edi
c002b74b:	5d                   	pop    ebp
c002b74c:	c3                   	ret    
c002b74d:	90                   	nop

c002b74e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b74e:	55                   	push   ebp
c002b74f:	57                   	push   edi
c002b750:	56                   	push   esi
c002b751:	53                   	push   ebx
c002b752:	83 ec 1c             	sub    esp,0x1c
c002b755:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b759:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b75d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b761:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b765:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b769:	88 c3                	mov    bl,al
c002b76b:	25 ff 00 00 00       	and    eax,0xff
c002b770:	0f 84 88 00 00 00    	je     c002b7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b776:	83 ec 0c             	sub    esp,0xc
c002b779:	89 c7                	mov    edi,eax
c002b77b:	68 a7 38 03 c0       	push   0xc00338a7
c002b780:	e8 5d db fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002b785:	83 c4 10             	add    esp,0x10
c002b788:	83 ff 01             	cmp    edi,0x1
c002b78b:	74 6b                	je     c002b7f8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b78d:	83 ff 02             	cmp    edi,0x2
c002b790:	75 58                	jne    c002b7ea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b792:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b797:	50                   	push   eax
c002b798:	6a 01                	push   0x1
c002b79a:	01 ff                	add    edi,edi
c002b79c:	09 fe                	or     esi,edi
c002b79e:	89 f0                	mov    eax,esi
c002b7a0:	0f b6 f0             	movzx  esi,al
c002b7a3:	c1 e6 06             	shl    esi,0x6
c002b7a6:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b7ae:	50                   	push   eax
c002b7af:	55                   	push   ebp
c002b7b0:	e8 2f f6 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b7b5:	83 c4 10             	add    esp,0x10
c002b7b8:	a8 01                	test   al,0x1
c002b7ba:	74 02                	je     c002b7be <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b7bc:	b3 07                	mov    bl,0x7
c002b7be:	a8 02                	test   al,0x2
c002b7c0:	74 02                	je     c002b7c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b7c2:	b3 03                	mov    bl,0x3
c002b7c4:	a8 04                	test   al,0x4
c002b7c6:	74 02                	je     c002b7ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b7c8:	b3 14                	mov    bl,0x14
c002b7ca:	a8 08                	test   al,0x8
c002b7cc:	74 02                	je     c002b7d0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b7ce:	b3 03                	mov    bl,0x3
c002b7d0:	a8 10                	test   al,0x10
c002b7d2:	74 02                	je     c002b7d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b7d4:	b3 15                	mov    bl,0x15
c002b7d6:	a8 20                	test   al,0x20
c002b7d8:	74 02                	je     c002b7dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b7da:	b3 03                	mov    bl,0x3
c002b7dc:	a8 40                	test   al,0x40
c002b7de:	74 02                	je     c002b7e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b7e0:	b3 16                	mov    bl,0x16
c002b7e2:	a8 80                	test   al,0x80
c002b7e4:	74 18                	je     c002b7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7e6:	b3 0d                	mov    bl,0xd
c002b7e8:	eb 14                	jmp    c002b7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7ea:	83 ff 03             	cmp    edi,0x3
c002b7ed:	74 0d                	je     c002b7fc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b7ef:	83 ff 04             	cmp    edi,0x4
c002b7f2:	75 0a                	jne    c002b7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7f4:	b3 08                	mov    bl,0x8
c002b7f6:	eb 06                	jmp    c002b7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7f8:	b3 13                	mov    bl,0x13
c002b7fa:	eb 02                	jmp    c002b7fe <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b7fc:	b3 17                	mov    bl,0x17
c002b7fe:	83 c4 1c             	add    esp,0x1c
c002b801:	88 d8                	mov    al,bl
c002b803:	5b                   	pop    ebx
c002b804:	5e                   	pop    esi
c002b805:	5f                   	pop    edi
c002b806:	5d                   	pop    ebp
c002b807:	c3                   	ret    

c002b808 <IDE::polling(unsigned char, unsigned int)>:
c002b808:	57                   	push   edi
c002b809:	56                   	push   esi
c002b80a:	53                   	push   ebx
c002b80b:	bb 04 00 00 00       	mov    ebx,0x4
c002b810:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b814:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b819:	52                   	push   edx
c002b81a:	6a 0c                	push   0xc
c002b81c:	56                   	push   esi
c002b81d:	57                   	push   edi
c002b81e:	e8 c1 f5 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b823:	83 c4 10             	add    esp,0x10
c002b826:	4b                   	dec    ebx
c002b827:	75 f0                	jne    c002b819 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b829:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b82e:	50                   	push   eax
c002b82f:	6a 0c                	push   0xc
c002b831:	56                   	push   esi
c002b832:	57                   	push   edi
c002b833:	e8 ac f5 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002b838:	83 c4 10             	add    esp,0x10
c002b83b:	a8 01                	test   al,0x1
c002b83d:	75 17                	jne    c002b856 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b83f:	a8 20                	test   al,0x20
c002b841:	75 0f                	jne    c002b852 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b843:	4b                   	dec    ebx
c002b844:	74 10                	je     c002b856 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b846:	a8 80                	test   al,0x80
c002b848:	75 e4                	jne    c002b82e <IDE::polling(unsigned char, unsigned int)+0x26>
c002b84a:	a8 08                	test   al,0x8
c002b84c:	74 e0                	je     c002b82e <IDE::polling(unsigned char, unsigned int)+0x26>
c002b84e:	31 c0                	xor    eax,eax
c002b850:	eb 06                	jmp    c002b858 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b852:	b0 01                	mov    al,0x1
c002b854:	eb 02                	jmp    c002b858 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b856:	b0 02                	mov    al,0x2
c002b858:	5b                   	pop    ebx
c002b859:	5e                   	pop    esi
c002b85a:	5f                   	pop    edi
c002b85b:	c3                   	ret    

c002b85c <SATABus::close(int, int, void*)>:
c002b85c:	31 c0                	xor    eax,eax
c002b85e:	c3                   	ret    
c002b85f:	90                   	nop

c002b860 <SATABus::detect()>:
c002b860:	c3                   	ret    
c002b861:	90                   	nop

c002b862 <SATABus::SATABus()>:
c002b862:	83 ec 0c             	sub    esp,0xc
c002b865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b869:	83 ec 08             	sub    esp,0x8
c002b86c:	68 e0 38 03 c0       	push   0xc00338e0
c002b871:	50                   	push   eax
c002b872:	e8 59 fe fe ff       	call   c001b6d0 <HardDiskController::HardDiskController(char const*)>
c002b877:	83 c4 10             	add    esp,0x10
c002b87a:	ba 0c 39 03 c0       	mov    edx,0xc003390c
c002b87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b883:	89 10                	mov    DWORD PTR [eax],edx
c002b885:	83 ec 0c             	sub    esp,0xc
c002b888:	6a 50                	push   0x50
c002b88a:	e8 fa af fe ff       	call   c0016889 <Phys::allocateContiguousPages(int)>
c002b88f:	83 c4 10             	add    esp,0x10
c002b892:	89 c2                	mov    edx,eax
c002b894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b898:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b89e:	83 ec 0c             	sub    esp,0xc
c002b8a1:	6a 50                	push   0x50
c002b8a3:	e8 25 c7 fe ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c002b8a8:	83 c4 10             	add    esp,0x10
c002b8ab:	89 c2                	mov    edx,eax
c002b8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b8b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b8b7:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b8bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b8c0:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b8c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b8ca:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b8d0:	83 ec 0c             	sub    esp,0xc
c002b8d3:	6a 03                	push   0x3
c002b8d5:	6a 50                	push   0x50
c002b8d7:	51                   	push   ecx
c002b8d8:	52                   	push   edx
c002b8d9:	50                   	push   eax
c002b8da:	e8 01 d0 fe ff       	call   c00188e0 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b8df:	83 c4 20             	add    esp,0x20
c002b8e2:	90                   	nop
c002b8e3:	83 c4 0c             	add    esp,0xc
c002b8e6:	c3                   	ret    
c002b8e7:	90                   	nop

c002b8e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b8e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b8ec:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b8ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b8f2:	09 c2                	or     edx,eax
c002b8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b8f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b8fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b900:	31 c0                	xor    eax,eax
c002b902:	c1 e9 08             	shr    ecx,0x8
c002b905:	83 e1 0f             	and    ecx,0xf
c002b908:	39 c8                	cmp    eax,ecx
c002b90a:	74 0a                	je     c002b916 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b90c:	f6 c2 01             	test   dl,0x1
c002b90f:	74 08                	je     c002b919 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b911:	d1 ea                	shr    edx,1
c002b913:	40                   	inc    eax
c002b914:	eb f2                	jmp    c002b908 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b916:	83 c8 ff             	or     eax,0xffffffff
c002b919:	c3                   	ret    

c002b91a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b91a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b91e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b921:	89 c2                	mov    edx,eax
c002b923:	c1 ea 08             	shr    edx,0x8
c002b926:	83 e2 0f             	and    edx,0xf
c002b929:	4a                   	dec    edx
c002b92a:	75 32                	jne    c002b95e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b92c:	83 e0 0f             	and    eax,0xf
c002b92f:	83 f8 03             	cmp    eax,0x3
c002b932:	75 2a                	jne    c002b95e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b934:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b937:	b8 02 00 00 00       	mov    eax,0x2
c002b93c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b942:	74 1c                	je     c002b960 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b944:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b94a:	b8 04 00 00 00       	mov    eax,0x4
c002b94f:	74 0f                	je     c002b960 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b951:	31 c0                	xor    eax,eax
c002b953:	83 fa 03             	cmp    edx,0x3
c002b956:	0f 94 c0             	sete   al
c002b959:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b95d:	c3                   	ret    
c002b95e:	31 c0                	xor    eax,eax
c002b960:	c3                   	ret    
c002b961:	90                   	nop

c002b962 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b966:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b969:	0f ba e2 0f          	bt     edx,0xf
c002b96d:	72 f7                	jb     c002b966 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b96f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b972:	83 ca 10             	or     edx,0x10
c002b975:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b978:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b97b:	83 ca 01             	or     edx,0x1
c002b97e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b981:	c3                   	ret    

c002b982 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b986:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b989:	83 e2 fe             	and    edx,0xfffffffe
c002b98c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b98f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b992:	83 e2 ef             	and    edx,0xffffffef
c002b995:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b998:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b99b:	0f ba e2 0e          	bt     edx,0xe
c002b99f:	72 f7                	jb     c002b998 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b9a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b9a4:	0f ba e2 0f          	bt     edx,0xf
c002b9a8:	72 ee                	jb     c002b998 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b9aa:	c3                   	ret    
c002b9ab:	90                   	nop

c002b9ac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b9ac:	55                   	push   ebp
c002b9ad:	57                   	push   edi
c002b9ae:	56                   	push   esi
c002b9af:	53                   	push   ebx
c002b9b0:	83 ec 1c             	sub    esp,0x1c
c002b9b3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b9b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b9bb:	53                   	push   ebx
c002b9bc:	57                   	push   edi
c002b9bd:	e8 c0 ff ff ff       	call   c002b982 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b9c2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b9c6:	83 ec 0c             	sub    esp,0xc
c002b9c9:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b9cf:	c1 e5 0a             	shl    ebp,0xa
c002b9d2:	01 e8                	add    eax,ebp
c002b9d4:	89 03                	mov    DWORD PTR [ebx],eax
c002b9d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b9d8:	68 00 04 00 00       	push   0x400
c002b9dd:	6a 00                	push   0x0
c002b9df:	50                   	push   eax
c002b9e0:	e8 0b 4b fd ff       	call   c00004f0 <memset>
c002b9e5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b9eb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002b9ef:	83 c4 1c             	add    esp,0x1c
c002b9f2:	01 e8                	add    eax,ebp
c002b9f4:	89 03                	mov    DWORD PTR [ebx],eax
c002b9f6:	c1 e6 08             	shl    esi,0x8
c002b9f9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002ba00:	81 c6 00 80 00 00    	add    esi,0x8000
c002ba06:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002ba0c:	01 f0                	add    eax,esi
c002ba0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002ba11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002ba14:	68 00 01 00 00       	push   0x100
c002ba19:	6a 00                	push   0x0
c002ba1b:	50                   	push   eax
c002ba1c:	e8 cf 4a fd ff       	call   c00004f0 <memset>
c002ba21:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002ba27:	31 d2                	xor    edx,edx
c002ba29:	01 f0                	add    eax,esi
c002ba2b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002ba2e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002ba35:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002ba3b:	01 ee                	add    esi,ebp
c002ba3d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002ba41:	83 c4 10             	add    esp,0x10
c002ba44:	c1 e5 0d             	shl    ebp,0xd
c002ba47:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002ba4d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002ba53:	83 c6 20             	add    esi,0x20
c002ba56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002ba5a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002ba60:	01 e8                	add    eax,ebp
c002ba62:	01 d0                	add    eax,edx
c002ba64:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002ba67:	52                   	push   edx
c002ba68:	68 00 01 00 00       	push   0x100
c002ba6d:	6a 00                	push   0x0
c002ba6f:	50                   	push   eax
c002ba70:	e8 7b 4a fd ff       	call   c00004f0 <memset>
c002ba75:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002ba7b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002ba82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002ba86:	83 c4 10             	add    esp,0x10
c002ba89:	01 e8                	add    eax,ebp
c002ba8b:	01 d0                	add    eax,edx
c002ba8d:	81 c2 00 01 00 00    	add    edx,0x100
c002ba93:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002ba96:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002ba9c:	75 af                	jne    c002ba4d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002ba9e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002baa5:	50                   	push   eax
c002baa6:	50                   	push   eax
c002baa7:	53                   	push   ebx
c002baa8:	57                   	push   edi
c002baa9:	e8 b4 fe ff ff       	call   c002b962 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002baae:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002bab5:	83 c4 2c             	add    esp,0x2c
c002bab8:	5b                   	pop    ebx
c002bab9:	5e                   	pop    esi
c002baba:	5f                   	pop    edi
c002babb:	5d                   	pop    ebp
c002babc:	c3                   	ret    
c002babd:	90                   	nop

c002babe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002babe:	55                   	push   ebp
c002babf:	57                   	push   edi
c002bac0:	56                   	push   esi
c002bac1:	53                   	push   ebx
c002bac2:	31 db                	xor    ebx,ebx
c002bac4:	83 ec 0c             	sub    esp,0xc
c002bac7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bacb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002bacf:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002bad2:	f7 c7 01 00 00 00    	test   edi,0x1
c002bad8:	74 7a                	je     c002bb54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bada:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002bade:	89 d8                	mov    eax,ebx
c002bae0:	c1 e0 07             	shl    eax,0x7
c002bae3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002baea:	55                   	push   ebp
c002baeb:	56                   	push   esi
c002baec:	e8 29 fe ff ff       	call   c002b91a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002baf1:	5a                   	pop    edx
c002baf2:	59                   	pop    ecx
c002baf3:	83 f8 01             	cmp    eax,0x1
c002baf6:	75 21                	jne    c002bb19 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002baf8:	50                   	push   eax
c002baf9:	53                   	push   ebx
c002bafa:	55                   	push   ebp
c002bafb:	56                   	push   esi
c002bafc:	e8 ab fe ff ff       	call   c002b9ac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bb01:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002bb08:	e8 8e a9 fe ff       	call   c001649b <malloc>
c002bb0d:	89 04 24             	mov    DWORD PTR [esp],eax
c002bb10:	89 c5                	mov    ebp,eax
c002bb12:	e8 e3 10 00 00       	call   c002cbfa <SATA::SATA()>
c002bb17:	eb 24                	jmp    c002bb3d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002bb19:	83 f8 04             	cmp    eax,0x4
c002bb1c:	75 36                	jne    c002bb54 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002bb1e:	51                   	push   ecx
c002bb1f:	53                   	push   ebx
c002bb20:	55                   	push   ebp
c002bb21:	56                   	push   esi
c002bb22:	e8 85 fe ff ff       	call   c002b9ac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002bb27:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002bb2e:	e8 68 a9 fe ff       	call   c001649b <malloc>
c002bb33:	89 04 24             	mov    DWORD PTR [esp],eax
c002bb36:	89 c5                	mov    ebp,eax
c002bb38:	e8 4b 18 00 00       	call   c002d388 <SATAPI::SATAPI()>
c002bb3d:	58                   	pop    eax
c002bb3e:	5a                   	pop    edx
c002bb3f:	55                   	push   ebp
c002bb40:	56                   	push   esi
c002bb41:	e8 32 f8 fe ff       	call   c001b378 <Device::addChild(Device*)>
c002bb46:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002bb49:	56                   	push   esi
c002bb4a:	6a 00                	push   0x0
c002bb4c:	53                   	push   ebx
c002bb4d:	55                   	push   ebp
c002bb4e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002bb51:	83 c4 20             	add    esp,0x20
c002bb54:	d1 ef                	shr    edi,1
c002bb56:	43                   	inc    ebx
c002bb57:	83 fb 20             	cmp    ebx,0x20
c002bb5a:	0f 85 72 ff ff ff    	jne    c002bad2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002bb60:	83 c4 0c             	add    esp,0xc
c002bb63:	5b                   	pop    ebx
c002bb64:	5e                   	pop    esi
c002bb65:	5f                   	pop    edi
c002bb66:	5d                   	pop    ebp
c002bb67:	c3                   	ret    

c002bb68 <SATABus::open(int, int, void*)>:
c002bb68:	53                   	push   ebx
c002bb69:	83 ec 08             	sub    esp,0x8
c002bb6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bb70:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002bb76:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bb7c:	e8 b7 94 ff ff       	call   c0025038 <KeDisablePreemption()>
c002bb81:	52                   	push   edx
c002bb82:	52                   	push   edx
c002bb83:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002bb89:	53                   	push   ebx
c002bb8a:	e8 2f ff ff ff       	call   c002babe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002bb8f:	e8 cc 94 ff ff       	call   c0025060 <KeRestorePreemption()>
c002bb94:	83 c4 18             	add    esp,0x18
c002bb97:	31 c0                	xor    eax,eax
c002bb99:	5b                   	pop    ebx
c002bb9a:	c3                   	ret    
c002bb9b:	90                   	nop

c002bb9c <ATA::close(int, int, void*)>:
c002bb9c:	83 ec 0c             	sub    esp,0xc
c002bb9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bba3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002bba9:	85 c0                	test   eax,eax
c002bbab:	74 0c                	je     c002bbb9 <ATA::close(int, int, void*)+0x1d>
c002bbad:	8b 10                	mov    edx,DWORD PTR [eax]
c002bbaf:	83 ec 0c             	sub    esp,0xc
c002bbb2:	50                   	push   eax
c002bbb3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002bbb6:	83 c4 10             	add    esp,0x10
c002bbb9:	31 c0                	xor    eax,eax
c002bbbb:	83 c4 0c             	add    esp,0xc
c002bbbe:	c3                   	ret    
c002bbbf:	90                   	nop

c002bbc0 <ATA::powerSaving(PowerSavingLevel)>:
c002bbc0:	c3                   	ret    
c002bbc1:	90                   	nop

c002bbc2 <ATA::ATA()>:
c002bbc2:	83 ec 0c             	sub    esp,0xc
c002bbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bbc9:	83 ec 04             	sub    esp,0x4
c002bbcc:	68 00 02 00 00       	push   0x200
c002bbd1:	68 e5 39 03 c0       	push   0xc00339e5
c002bbd6:	50                   	push   eax
c002bbd7:	e8 7e fb fe ff       	call   c001b75a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002bbdc:	83 c4 10             	add    esp,0x10
c002bbdf:	ba 4c 39 03 c0       	mov    edx,0xc003394c
c002bbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bbe8:	89 10                	mov    DWORD PTR [eax],edx
c002bbea:	90                   	nop
c002bbeb:	83 c4 0c             	add    esp,0xc
c002bbee:	c3                   	ret    
c002bbef:	90                   	nop

c002bbf0 <ATA::flush(bool)>:
c002bbf0:	53                   	push   ebx
c002bbf1:	83 ec 08             	sub    esp,0x8
c002bbf4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bbf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bbfd:	83 f8 01             	cmp    eax,0x1
c002bc00:	19 c0                	sbb    eax,eax
c002bc02:	83 e0 fd             	and    eax,0xfffffffd
c002bc05:	05 ea 00 00 00       	add    eax,0xea
c002bc0a:	50                   	push   eax
c002bc0b:	6a 07                	push   0x7
c002bc0d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc14:	50                   	push   eax
c002bc15:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc1b:	e8 04 f1 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc20:	83 c4 0c             	add    esp,0xc
c002bc23:	6a 00                	push   0x0
c002bc25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc2c:	50                   	push   eax
c002bc2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc33:	e8 d0 fb ff ff       	call   c002b808 <IDE::polling(unsigned char, unsigned int)>
c002bc38:	83 c4 18             	add    esp,0x18
c002bc3b:	5b                   	pop    ebx
c002bc3c:	c3                   	ret    
c002bc3d:	90                   	nop

c002bc3e <ATA::readyForCommand()>:
c002bc3e:	56                   	push   esi
c002bc3f:	53                   	push   ebx
c002bc40:	53                   	push   ebx
c002bc41:	31 db                	xor    ebx,ebx
c002bc43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bc47:	51                   	push   ecx
c002bc48:	6a 0c                	push   0xc
c002bc4a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bc51:	50                   	push   eax
c002bc52:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bc58:	e8 87 f1 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002bc5d:	83 c4 10             	add    esp,0x10
c002bc60:	a8 88                	test   al,0x88
c002bc62:	74 1f                	je     c002bc83 <ATA::readyForCommand()+0x45>
c002bc64:	43                   	inc    ebx
c002bc65:	83 fb 63             	cmp    ebx,0x63
c002bc68:	7e dd                	jle    c002bc47 <ATA::readyForCommand()+0x9>
c002bc6a:	83 ec 0c             	sub    esp,0xc
c002bc6d:	6a 0a                	push   0xa
c002bc6f:	e8 30 98 ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002bc74:	83 c4 10             	add    esp,0x10
c002bc77:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bc7d:	75 c8                	jne    c002bc47 <ATA::readyForCommand()+0x9>
c002bc7f:	31 c0                	xor    eax,eax
c002bc81:	eb 02                	jmp    c002bc85 <ATA::readyForCommand()+0x47>
c002bc83:	b0 01                	mov    al,0x1
c002bc85:	5a                   	pop    edx
c002bc86:	5b                   	pop    ebx
c002bc87:	5e                   	pop    esi
c002bc88:	c3                   	ret    
c002bc89:	90                   	nop

c002bc8a <ATA::access(unsigned long long, int, void*, bool)>:
c002bc8a:	55                   	push   ebp
c002bc8b:	57                   	push   edi
c002bc8c:	56                   	push   esi
c002bc8d:	53                   	push   ebx
c002bc8e:	83 ec 2c             	sub    esp,0x2c
c002bc91:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bc95:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bc99:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bc9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bca1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bca5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bca9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002bcad:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bcb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bcb7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bcbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bcc1:	c1 e0 06             	shl    eax,0x6
c002bcc4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bccc:	74 5b                	je     c002bd29 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002bcce:	89 fa                	mov    edx,edi
c002bcd0:	89 f0                	mov    eax,esi
c002bcd2:	c1 ea 1c             	shr    edx,0x1c
c002bcd5:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002bcd9:	89 d1                	mov    ecx,edx
c002bcdb:	09 c1                	or     ecx,eax
c002bcdd:	74 25                	je     c002bd04 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bcdf:	31 ed                	xor    ebp,ebp
c002bce1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bce8:	89 fa                	mov    edx,edi
c002bcea:	89 f0                	mov    eax,esi
c002bcec:	0f ad d0             	shrd   eax,edx,cl
c002bcef:	d3 ea                	shr    edx,cl
c002bcf1:	f6 c1 20             	test   cl,0x20
c002bcf4:	74 02                	je     c002bcf8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bcf6:	89 d0                	mov    eax,edx
c002bcf8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bcfc:	45                   	inc    ebp
c002bcfd:	83 fd 06             	cmp    ebp,0x6
c002bd00:	75 df                	jne    c002bce1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bd02:	eb 71                	jmp    c002bd75 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002bd04:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bd09:	89 f0                	mov    eax,esi
c002bd0b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bd12:	0f ac f8 10          	shrd   eax,edi,0x10
c002bd16:	bf 01 00 00 00       	mov    edi,0x1
c002bd1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bd1f:	c1 ee 18             	shr    esi,0x18
c002bd22:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bd27:	eb 53                	jmp    c002bd7c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bd29:	6a 00                	push   0x0
c002bd2b:	6a 3f                	push   0x3f
c002bd2d:	57                   	push   edi
c002bd2e:	56                   	push   esi
c002bd2f:	e8 fc 2a 00 00       	call   c002e830 <__umoddi3>
c002bd34:	83 c4 10             	add    esp,0x10
c002bd37:	40                   	inc    eax
c002bd38:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bd3c:	6a 00                	push   0x0
c002bd3e:	68 f0 03 00 00       	push   0x3f0
c002bd43:	57                   	push   edi
c002bd44:	56                   	push   esi
c002bd45:	e8 e6 29 00 00       	call   c002e730 <__udivdi3>
c002bd4a:	83 c4 10             	add    esp,0x10
c002bd4d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bd52:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bd59:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bd5e:	6a 00                	push   0x0
c002bd60:	6a 3f                	push   0x3f
c002bd62:	57                   	push   edi
c002bd63:	31 ff                	xor    edi,edi
c002bd65:	56                   	push   esi
c002bd66:	e8 c5 29 00 00       	call   c002e730 <__udivdi3>
c002bd6b:	83 c4 10             	add    esp,0x10
c002bd6e:	83 e0 0f             	and    eax,0xf
c002bd71:	89 c6                	mov    esi,eax
c002bd73:	eb 07                	jmp    c002bd7c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bd75:	31 f6                	xor    esi,esi
c002bd77:	bf 02 00 00 00       	mov    edi,0x2
c002bd7c:	50                   	push   eax
c002bd7d:	6a 00                	push   0x0
c002bd7f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd86:	50                   	push   eax
c002bd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bd8b:	e8 a2 f1 ff ff       	call   c002af32 <IDE::enableIRQs(unsigned char, bool)>
c002bd90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bd93:	e8 a6 fe ff ff       	call   c002bc3e <ATA::readyForCommand()>
c002bd98:	83 c4 10             	add    esp,0x10
c002bd9b:	84 c0                	test   al,al
c002bd9d:	75 0a                	jne    c002bda9 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002bd9f:	be 01 00 00 00       	mov    esi,0x1
c002bda4:	e9 9b 02 00 00       	jmp    c002c044 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002bda9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bdaf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bdb5:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bdbc:	c1 e0 04             	shl    eax,0x4
c002bdbf:	09 c6                	or     esi,eax
c002bdc1:	f7 c7 03 00 00 00    	test   edi,0x3
c002bdc7:	75 05                	jne    c002bdce <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002bdc9:	83 ce a0             	or     esi,0xffffffa0
c002bdcc:	eb 03                	jmp    c002bdd1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bdce:	83 ce e0             	or     esi,0xffffffe0
c002bdd1:	89 f0                	mov    eax,esi
c002bdd3:	0f b6 f0             	movzx  esi,al
c002bdd6:	56                   	push   esi
c002bdd7:	6a 06                	push   0x6
c002bdd9:	51                   	push   ecx
c002bdda:	52                   	push   edx
c002bddb:	e8 44 ef ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bde0:	83 c4 10             	add    esp,0x10
c002bde3:	6a 00                	push   0x0
c002bde5:	6a 01                	push   0x1
c002bde7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdee:	50                   	push   eax
c002bdef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdf5:	e8 2a ef ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdfa:	89 f8                	mov    eax,edi
c002bdfc:	83 c4 10             	add    esp,0x10
c002bdff:	0f b6 f0             	movzx  esi,al
c002be02:	83 fe 02             	cmp    esi,0x2
c002be05:	75 6e                	jne    c002be75 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002be07:	6a 00                	push   0x0
c002be09:	6a 08                	push   0x8
c002be0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be12:	50                   	push   eax
c002be13:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be19:	e8 06 ef ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be1e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002be23:	50                   	push   eax
c002be24:	6a 09                	push   0x9
c002be26:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be2d:	50                   	push   eax
c002be2e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be34:	e8 eb ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be39:	83 c4 20             	add    esp,0x20
c002be3c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002be41:	50                   	push   eax
c002be42:	6a 0a                	push   0xa
c002be44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be4b:	50                   	push   eax
c002be4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be52:	e8 cd ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be57:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002be5c:	50                   	push   eax
c002be5d:	6a 0b                	push   0xb
c002be5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be66:	50                   	push   eax
c002be67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be6d:	e8 b2 ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be72:	83 c4 20             	add    esp,0x20
c002be75:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002be7a:	50                   	push   eax
c002be7b:	6a 02                	push   0x2
c002be7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be84:	50                   	push   eax
c002be85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be8b:	e8 94 ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be90:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002be95:	50                   	push   eax
c002be96:	6a 03                	push   0x3
c002be98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be9f:	50                   	push   eax
c002bea0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bea6:	e8 79 ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002beab:	83 c4 20             	add    esp,0x20
c002beae:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002beb3:	50                   	push   eax
c002beb4:	6a 04                	push   0x4
c002beb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bebd:	50                   	push   eax
c002bebe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bec4:	e8 5b ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bec9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002bece:	50                   	push   eax
c002becf:	6a 05                	push   0x5
c002bed1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bed8:	50                   	push   eax
c002bed9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bedf:	e8 40 ee ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bee4:	83 c4 20             	add    esp,0x20
c002bee7:	83 fe 02             	cmp    esi,0x2
c002beea:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002beef:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002bef4:	85 c9                	test   ecx,ecx
c002bef6:	74 07                	je     c002beff <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002bef8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002befd:	75 47                	jne    c002bf46 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002beff:	89 f8                	mov    eax,edi
c002bf01:	0f b6 f8             	movzx  edi,al
c002bf04:	31 c0                	xor    eax,eax
c002bf06:	83 ff 02             	cmp    edi,0x2
c002bf09:	0f 95 c0             	setne  al
c002bf0c:	89 c6                	mov    esi,eax
c002bf0e:	74 0c                	je     c002bf1c <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002bf10:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bf15:	b8 30 00 00 00       	mov    eax,0x30
c002bf1a:	75 2f                	jne    c002bf4b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bf1c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bf20:	83 f2 01             	xor    edx,0x1
c002bf23:	85 c9                	test   ecx,ecx
c002bf25:	74 09                	je     c002bf30 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002bf27:	84 d2                	test   dl,dl
c002bf29:	b8 24 00 00 00       	mov    eax,0x24
c002bf2e:	75 1b                	jne    c002bf4b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bf30:	85 f6                	test   esi,esi
c002bf32:	0f 84 67 fe ff ff    	je     c002bd9f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002bf38:	84 d2                	test   dl,dl
c002bf3a:	b8 20 00 00 00       	mov    eax,0x20
c002bf3f:	75 0a                	jne    c002bf4b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bf41:	e9 59 fe ff ff       	jmp    c002bd9f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002bf46:	b8 34 00 00 00       	mov    eax,0x34
c002bf4b:	50                   	push   eax
c002bf4c:	6a 07                	push   0x7
c002bf4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf55:	50                   	push   eax
c002bf56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf5c:	e8 c3 ed ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf61:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002bf65:	83 c4 10             	add    esp,0x10
c002bf68:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002bf6d:	85 f6                	test   esi,esi
c002bf6f:	0f 84 b5 00 00 00    	je     c002c02a <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002bf75:	50                   	push   eax
c002bf76:	6a 01                	push   0x1
c002bf78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf7f:	50                   	push   eax
c002bf80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf86:	e8 7d f8 ff ff       	call   c002b808 <IDE::polling(unsigned char, unsigned int)>
c002bf8b:	83 c4 10             	add    esp,0x10
c002bf8e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002bf94:	0f b6 c0             	movzx  eax,al
c002bf97:	85 c0                	test   eax,eax
c002bf99:	74 1f                	je     c002bfba <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002bf9b:	50                   	push   eax
c002bf9c:	89 c6                	mov    esi,eax
c002bf9e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bfa5:	0f b6 d2             	movzx  edx,dl
c002bfa8:	50                   	push   eax
c002bfa9:	52                   	push   edx
c002bfaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfb0:	e8 99 f7 ff ff       	call   c002b74e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002bfb5:	e9 87 00 00 00       	jmp    c002c041 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002bfba:	85 ed                	test   ebp,ebp
c002bfbc:	74 3b                	je     c002bff9 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002bfbe:	31 ff                	xor    edi,edi
c002bfc0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002bfc4:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002bfc8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002bfcd:	50                   	push   eax
c002bfce:	50                   	push   eax
c002bfcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfd6:	50                   	push   eax
c002bfd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bfdd:	e8 30 ed ff ff       	call   c002ad12 <IDE::getBase(unsigned char)>
c002bfe2:	89 c2                	mov    edx,eax
c002bfe4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002bfe9:	66 ef                	out    dx,ax
c002bfeb:	47                   	inc    edi
c002bfec:	83 c4 10             	add    esp,0x10
c002bfef:	81 ff 00 01 00 00    	cmp    edi,0x100
c002bff5:	75 c9                	jne    c002bfc0 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002bff7:	eb 23                	jmp    c002c01c <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002bff9:	51                   	push   ecx
c002bffa:	0f b6 d2             	movzx  edx,dl
c002bffd:	51                   	push   ecx
c002bffe:	52                   	push   edx
c002bfff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c005:	e8 08 ed ff ff       	call   c002ad12 <IDE::getBase(unsigned char)>
c002c00a:	b9 00 01 00 00       	mov    ecx,0x100
c002c00f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002c013:	89 c2                	mov    edx,eax
c002c015:	fc                   	cld    
c002c016:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002c019:	83 c4 10             	add    esp,0x10
c002c01c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002c024:	4e                   	dec    esi
c002c025:	e9 43 ff ff ff       	jmp    c002bf6d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002c02a:	31 f6                	xor    esi,esi
c002c02c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002c031:	74 11                	je     c002c044 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002c033:	50                   	push   eax
c002c034:	50                   	push   eax
c002c035:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002c03a:	50                   	push   eax
c002c03b:	53                   	push   ebx
c002c03c:	e8 af fb ff ff       	call   c002bbf0 <ATA::flush(bool)>
c002c041:	83 c4 10             	add    esp,0x10
c002c044:	83 c4 2c             	add    esp,0x2c
c002c047:	89 f0                	mov    eax,esi
c002c049:	5b                   	pop    ebx
c002c04a:	5e                   	pop    esi
c002c04b:	5f                   	pop    edi
c002c04c:	5d                   	pop    ebp
c002c04d:	c3                   	ret    

c002c04e <ATA::detectCHS()>:
c002c04e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002c052:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002c058:	c1 e0 06             	shl    eax,0x6
c002c05b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002c061:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002c06b:	c7 44 24 04 30 39 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033930
c002c073:	e9 f2 41 ff ff       	jmp    c002026a <KePanic(char const*)>

c002c078 <ATA::open(int, int, void*)>:
c002c078:	53                   	push   ebx
c002c079:	83 ec 08             	sub    esp,0x8
c002c07c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c080:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c084:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c088:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c08e:	c1 e0 06             	shl    eax,0x6
c002c091:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c097:	01 d0                	add    eax,edx
c002c099:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002c0a0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002c0a6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002c0ad:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c0b7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c0be:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002c0c4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002c0cb:	75 0c                	jne    c002c0d9 <ATA::open(int, int, void*)+0x61>
c002c0cd:	83 ec 0c             	sub    esp,0xc
c002c0d0:	53                   	push   ebx
c002c0d1:	e8 78 ff ff ff       	call   c002c04e <ATA::detectCHS()>
c002c0d6:	83 c4 10             	add    esp,0x10
c002c0d9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002c0df:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002c0e5:	c1 e0 06             	shl    eax,0x6
c002c0e8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002c0ef:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c0f9:	d1 e8                	shr    eax,1
c002c0fb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002c101:	6a 04                	push   0x4
c002c103:	6a 0c                	push   0xc
c002c105:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c10c:	50                   	push   eax
c002c10d:	52                   	push   edx
c002c10e:	e8 11 ec ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c113:	90                   	nop
c002c114:	90                   	nop
c002c115:	6a 00                	push   0x0
c002c117:	6a 0c                	push   0xc
c002c119:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c120:	50                   	push   eax
c002c121:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c127:	e8 f8 eb ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c12c:	83 c4 14             	add    esp,0x14
c002c12f:	53                   	push   ebx
c002c130:	e8 8d f6 fe ff       	call   c001b7c2 <PhysicalDisk::startCache()>
c002c135:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c138:	e8 c9 08 ff ff       	call   c001ca06 <createPartitionsForDisk(PhysicalDisk*)>
c002c13d:	83 c4 18             	add    esp,0x18
c002c140:	31 c0                	xor    eax,eax
c002c142:	5b                   	pop    ebx
c002c143:	c3                   	ret    

c002c144 <combineCharAndColour(char, unsigned char)>:
c002c144:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c149:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c14f:	c1 e0 08             	shl    eax,0x8
c002c152:	09 d0                	or     eax,edx
c002c154:	c3                   	ret    

c002c155 <combineColours(unsigned char, unsigned char)>:
c002c155:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c15a:	c1 e0 04             	shl    eax,0x4
c002c15d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c161:	c3                   	ret    

c002c162 <ATA::read(unsigned long long, int, void*)>:
c002c162:	55                   	push   ebp
c002c163:	57                   	push   edi
c002c164:	56                   	push   esi
c002c165:	be 04 00 00 00       	mov    esi,0x4
c002c16a:	53                   	push   ebx
c002c16b:	83 ec 0c             	sub    esp,0xc
c002c16e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c172:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c176:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c17a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c17e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c181:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c187:	0f 87 a1 01 00 00    	ja     c002c32e <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c18d:	85 c9                	test   ecx,ecx
c002c18f:	be 06 00 00 00       	mov    esi,0x6
c002c194:	0f 84 94 01 00 00    	je     c002c32e <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c19a:	55                   	push   ebp
c002c19b:	55                   	push   ebp
c002c19c:	6a 00                	push   0x0
c002c19e:	51                   	push   ecx
c002c19f:	53                   	push   ebx
c002c1a0:	52                   	push   edx
c002c1a1:	50                   	push   eax
c002c1a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c1a6:	e8 df fa ff ff       	call   c002bc8a <ATA::access(unsigned long long, int, void*, bool)>
c002c1ab:	83 c4 20             	add    esp,0x20
c002c1ae:	85 c0                	test   eax,eax
c002c1b0:	89 c6                	mov    esi,eax
c002c1b2:	0f 85 71 01 00 00    	jne    c002c329 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c1b8:	50                   	push   eax
c002c1b9:	bd 10 27 00 00       	mov    ebp,0x2710
c002c1be:	50                   	push   eax
c002c1bf:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c1c5:	6a 0f                	push   0xf
c002c1c7:	6a 00                	push   0x0
c002c1c9:	89 da                	mov    edx,ebx
c002c1cb:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c1d1:	e8 7f ff ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002c1d6:	59                   	pop    ecx
c002c1d7:	b9 0a 00 00 00       	mov    ecx,0xa
c002c1dc:	5b                   	pop    ebx
c002c1dd:	0f b6 d8             	movzx  ebx,al
c002c1e0:	89 d0                	mov    eax,edx
c002c1e2:	53                   	push   ebx
c002c1e3:	99                   	cdq    
c002c1e4:	f7 fd                	idiv   ebp
c002c1e6:	99                   	cdq    
c002c1e7:	f7 f9                	idiv   ecx
c002c1e9:	83 c2 30             	add    edx,0x30
c002c1ec:	0f b6 d2             	movzx  edx,dl
c002c1ef:	52                   	push   edx
c002c1f0:	e8 4f ff ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c1f5:	5f                   	pop    edi
c002c1f6:	bf e8 03 00 00       	mov    edi,0x3e8
c002c1fb:	5a                   	pop    edx
c002c1fc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c202:	53                   	push   ebx
c002c203:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c208:	99                   	cdq    
c002c209:	f7 ff                	idiv   edi
c002c20b:	99                   	cdq    
c002c20c:	f7 f9                	idiv   ecx
c002c20e:	8d 42 30             	lea    eax,[edx+0x30]
c002c211:	0f b6 c0             	movzx  eax,al
c002c214:	50                   	push   eax
c002c215:	e8 2a ff ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c21a:	5f                   	pop    edi
c002c21b:	bf 64 00 00 00       	mov    edi,0x64
c002c220:	5a                   	pop    edx
c002c221:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c227:	53                   	push   ebx
c002c228:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c22d:	99                   	cdq    
c002c22e:	f7 ff                	idiv   edi
c002c230:	99                   	cdq    
c002c231:	f7 f9                	idiv   ecx
c002c233:	8d 42 30             	lea    eax,[edx+0x30]
c002c236:	0f b6 c0             	movzx  eax,al
c002c239:	50                   	push   eax
c002c23a:	e8 05 ff ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c23f:	5a                   	pop    edx
c002c240:	5a                   	pop    edx
c002c241:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c247:	53                   	push   ebx
c002c248:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c24d:	99                   	cdq    
c002c24e:	f7 f9                	idiv   ecx
c002c250:	99                   	cdq    
c002c251:	f7 f9                	idiv   ecx
c002c253:	8d 42 30             	lea    eax,[edx+0x30]
c002c256:	0f b6 c0             	movzx  eax,al
c002c259:	50                   	push   eax
c002c25a:	e8 e5 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c25f:	5a                   	pop    edx
c002c260:	5a                   	pop    edx
c002c261:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c267:	53                   	push   ebx
c002c268:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c26d:	99                   	cdq    
c002c26e:	f7 f9                	idiv   ecx
c002c270:	83 c2 30             	add    edx,0x30
c002c273:	0f b6 d2             	movzx  edx,dl
c002c276:	52                   	push   edx
c002c277:	e8 c8 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c27c:	5a                   	pop    edx
c002c27d:	5a                   	pop    edx
c002c27e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c284:	53                   	push   ebx
c002c285:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c28a:	99                   	cdq    
c002c28b:	f7 fd                	idiv   ebp
c002c28d:	99                   	cdq    
c002c28e:	f7 f9                	idiv   ecx
c002c290:	8d 42 30             	lea    eax,[edx+0x30]
c002c293:	0f b6 c0             	movzx  eax,al
c002c296:	50                   	push   eax
c002c297:	e8 a8 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c29c:	5d                   	pop    ebp
c002c29d:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c2a2:	5a                   	pop    edx
c002c2a3:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c2a9:	53                   	push   ebx
c002c2aa:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2af:	99                   	cdq    
c002c2b0:	f7 fd                	idiv   ebp
c002c2b2:	99                   	cdq    
c002c2b3:	f7 f9                	idiv   ecx
c002c2b5:	8d 42 30             	lea    eax,[edx+0x30]
c002c2b8:	0f b6 c0             	movzx  eax,al
c002c2bb:	50                   	push   eax
c002c2bc:	e8 83 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c2c1:	5d                   	pop    ebp
c002c2c2:	5a                   	pop    edx
c002c2c3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c2c9:	53                   	push   ebx
c002c2ca:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2cf:	99                   	cdq    
c002c2d0:	f7 ff                	idiv   edi
c002c2d2:	99                   	cdq    
c002c2d3:	f7 f9                	idiv   ecx
c002c2d5:	8d 42 30             	lea    eax,[edx+0x30]
c002c2d8:	0f b6 c0             	movzx  eax,al
c002c2db:	50                   	push   eax
c002c2dc:	e8 63 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c2e1:	5f                   	pop    edi
c002c2e2:	5d                   	pop    ebp
c002c2e3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c2e9:	53                   	push   ebx
c002c2ea:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2ef:	99                   	cdq    
c002c2f0:	f7 f9                	idiv   ecx
c002c2f2:	99                   	cdq    
c002c2f3:	f7 f9                	idiv   ecx
c002c2f5:	8d 42 30             	lea    eax,[edx+0x30]
c002c2f8:	0f b6 c0             	movzx  eax,al
c002c2fb:	50                   	push   eax
c002c2fc:	e8 43 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c301:	5a                   	pop    edx
c002c302:	5f                   	pop    edi
c002c303:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c309:	53                   	push   ebx
c002c30a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c30f:	99                   	cdq    
c002c310:	f7 f9                	idiv   ecx
c002c312:	83 c2 30             	add    edx,0x30
c002c315:	0f b6 d2             	movzx  edx,dl
c002c318:	52                   	push   edx
c002c319:	e8 26 fe ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c31e:	83 c4 10             	add    esp,0x10
c002c321:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c327:	eb 05                	jmp    c002c32e <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c329:	be 01 00 00 00       	mov    esi,0x1
c002c32e:	83 c4 0c             	add    esp,0xc
c002c331:	89 f0                	mov    eax,esi
c002c333:	5b                   	pop    ebx
c002c334:	5e                   	pop    esi
c002c335:	5f                   	pop    edi
c002c336:	5d                   	pop    ebp
c002c337:	c3                   	ret    

c002c338 <ATA::write(unsigned long long, int, void*)>:
c002c338:	55                   	push   ebp
c002c339:	57                   	push   edi
c002c33a:	56                   	push   esi
c002c33b:	be 04 00 00 00       	mov    esi,0x4
c002c340:	53                   	push   ebx
c002c341:	83 ec 0c             	sub    esp,0xc
c002c344:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c34c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c350:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c354:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c357:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c35d:	0f 87 9c 01 00 00    	ja     c002c4ff <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c363:	85 c9                	test   ecx,ecx
c002c365:	be 06 00 00 00       	mov    esi,0x6
c002c36a:	0f 84 8f 01 00 00    	je     c002c4ff <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c370:	55                   	push   ebp
c002c371:	55                   	push   ebp
c002c372:	6a 01                	push   0x1
c002c374:	51                   	push   ecx
c002c375:	53                   	push   ebx
c002c376:	52                   	push   edx
c002c377:	50                   	push   eax
c002c378:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c37c:	e8 09 f9 ff ff       	call   c002bc8a <ATA::access(unsigned long long, int, void*, bool)>
c002c381:	83 c4 20             	add    esp,0x20
c002c384:	85 c0                	test   eax,eax
c002c386:	89 c6                	mov    esi,eax
c002c388:	0f 85 6c 01 00 00    	jne    c002c4fa <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c38e:	50                   	push   eax
c002c38f:	bd 10 27 00 00       	mov    ebp,0x2710
c002c394:	50                   	push   eax
c002c395:	6a 0f                	push   0xf
c002c397:	6a 00                	push   0x0
c002c399:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c39f:	e8 b1 fd ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002c3a4:	5a                   	pop    edx
c002c3a5:	59                   	pop    ecx
c002c3a6:	b9 0a 00 00 00       	mov    ecx,0xa
c002c3ab:	0f b6 d8             	movzx  ebx,al
c002c3ae:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3b3:	53                   	push   ebx
c002c3b4:	99                   	cdq    
c002c3b5:	f7 fd                	idiv   ebp
c002c3b7:	99                   	cdq    
c002c3b8:	f7 f9                	idiv   ecx
c002c3ba:	8d 42 30             	lea    eax,[edx+0x30]
c002c3bd:	0f b6 c0             	movzx  eax,al
c002c3c0:	50                   	push   eax
c002c3c1:	e8 7e fd ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c3c6:	5f                   	pop    edi
c002c3c7:	bf e8 03 00 00       	mov    edi,0x3e8
c002c3cc:	5a                   	pop    edx
c002c3cd:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c3d3:	53                   	push   ebx
c002c3d4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3d9:	99                   	cdq    
c002c3da:	f7 ff                	idiv   edi
c002c3dc:	99                   	cdq    
c002c3dd:	f7 f9                	idiv   ecx
c002c3df:	8d 42 30             	lea    eax,[edx+0x30]
c002c3e2:	0f b6 c0             	movzx  eax,al
c002c3e5:	50                   	push   eax
c002c3e6:	e8 59 fd ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c3eb:	5f                   	pop    edi
c002c3ec:	bf 64 00 00 00       	mov    edi,0x64
c002c3f1:	5a                   	pop    edx
c002c3f2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c3f8:	53                   	push   ebx
c002c3f9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c3fe:	99                   	cdq    
c002c3ff:	f7 ff                	idiv   edi
c002c401:	99                   	cdq    
c002c402:	f7 f9                	idiv   ecx
c002c404:	8d 42 30             	lea    eax,[edx+0x30]
c002c407:	0f b6 c0             	movzx  eax,al
c002c40a:	50                   	push   eax
c002c40b:	e8 34 fd ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c410:	5a                   	pop    edx
c002c411:	5a                   	pop    edx
c002c412:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c418:	53                   	push   ebx
c002c419:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c41e:	99                   	cdq    
c002c41f:	f7 f9                	idiv   ecx
c002c421:	99                   	cdq    
c002c422:	f7 f9                	idiv   ecx
c002c424:	8d 42 30             	lea    eax,[edx+0x30]
c002c427:	0f b6 c0             	movzx  eax,al
c002c42a:	50                   	push   eax
c002c42b:	e8 14 fd ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c430:	5a                   	pop    edx
c002c431:	5a                   	pop    edx
c002c432:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c438:	53                   	push   ebx
c002c439:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c43e:	99                   	cdq    
c002c43f:	f7 f9                	idiv   ecx
c002c441:	83 c2 30             	add    edx,0x30
c002c444:	0f b6 d2             	movzx  edx,dl
c002c447:	52                   	push   edx
c002c448:	e8 f7 fc ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c44d:	5a                   	pop    edx
c002c44e:	5a                   	pop    edx
c002c44f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c455:	53                   	push   ebx
c002c456:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c45b:	99                   	cdq    
c002c45c:	f7 fd                	idiv   ebp
c002c45e:	99                   	cdq    
c002c45f:	f7 f9                	idiv   ecx
c002c461:	8d 42 30             	lea    eax,[edx+0x30]
c002c464:	0f b6 c0             	movzx  eax,al
c002c467:	50                   	push   eax
c002c468:	e8 d7 fc ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c46d:	5d                   	pop    ebp
c002c46e:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c473:	5a                   	pop    edx
c002c474:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c47a:	53                   	push   ebx
c002c47b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c480:	99                   	cdq    
c002c481:	f7 fd                	idiv   ebp
c002c483:	99                   	cdq    
c002c484:	f7 f9                	idiv   ecx
c002c486:	8d 42 30             	lea    eax,[edx+0x30]
c002c489:	0f b6 c0             	movzx  eax,al
c002c48c:	50                   	push   eax
c002c48d:	e8 b2 fc ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c492:	5d                   	pop    ebp
c002c493:	5a                   	pop    edx
c002c494:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c49a:	53                   	push   ebx
c002c49b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4a0:	99                   	cdq    
c002c4a1:	f7 ff                	idiv   edi
c002c4a3:	99                   	cdq    
c002c4a4:	f7 f9                	idiv   ecx
c002c4a6:	8d 42 30             	lea    eax,[edx+0x30]
c002c4a9:	0f b6 c0             	movzx  eax,al
c002c4ac:	50                   	push   eax
c002c4ad:	e8 92 fc ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c4b2:	5f                   	pop    edi
c002c4b3:	5d                   	pop    ebp
c002c4b4:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c4ba:	53                   	push   ebx
c002c4bb:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4c0:	99                   	cdq    
c002c4c1:	f7 f9                	idiv   ecx
c002c4c3:	99                   	cdq    
c002c4c4:	f7 f9                	idiv   ecx
c002c4c6:	8d 42 30             	lea    eax,[edx+0x30]
c002c4c9:	0f b6 c0             	movzx  eax,al
c002c4cc:	50                   	push   eax
c002c4cd:	e8 72 fc ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c4d2:	5a                   	pop    edx
c002c4d3:	5f                   	pop    edi
c002c4d4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c4da:	53                   	push   ebx
c002c4db:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c4e0:	99                   	cdq    
c002c4e1:	f7 f9                	idiv   ecx
c002c4e3:	83 c2 30             	add    edx,0x30
c002c4e6:	0f b6 d2             	movzx  edx,dl
c002c4e9:	52                   	push   edx
c002c4ea:	e8 55 fc ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002c4ef:	83 c4 10             	add    esp,0x10
c002c4f2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c4f8:	eb 05                	jmp    c002c4ff <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c4fa:	be 01 00 00 00       	mov    esi,0x1
c002c4ff:	83 c4 0c             	add    esp,0xc
c002c502:	89 f0                	mov    eax,esi
c002c504:	5b                   	pop    ebx
c002c505:	5e                   	pop    esi
c002c506:	5f                   	pop    edi
c002c507:	5d                   	pop    ebp
c002c508:	c3                   	ret    
c002c509:	90                   	nop

c002c50a <ATAPI::write(unsigned long long, int, void*)>:
c002c50a:	b8 03 00 00 00       	mov    eax,0x3
c002c50f:	c3                   	ret    

c002c510 <ATAPI::close(int, int, void*)>:
c002c510:	83 ec 0c             	sub    esp,0xc
c002c513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c517:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c51d:	85 c0                	test   eax,eax
c002c51f:	74 0c                	je     c002c52d <ATAPI::close(int, int, void*)+0x1d>
c002c521:	8b 10                	mov    edx,DWORD PTR [eax]
c002c523:	83 ec 0c             	sub    esp,0xc
c002c526:	50                   	push   eax
c002c527:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c52a:	83 c4 10             	add    esp,0x10
c002c52d:	31 c0                	xor    eax,eax
c002c52f:	83 c4 0c             	add    esp,0xc
c002c532:	c3                   	ret    
c002c533:	90                   	nop

c002c534 <ATAPI::ATAPI()>:
c002c534:	83 ec 0c             	sub    esp,0xc
c002c537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c53b:	83 ec 04             	sub    esp,0x4
c002c53e:	68 00 08 00 00       	push   0x800
c002c543:	68 85 3a 03 c0       	push   0xc0033a85
c002c548:	50                   	push   eax
c002c549:	e8 0c f2 fe ff       	call   c001b75a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c54e:	83 c4 10             	add    esp,0x10
c002c551:	ba 94 39 03 c0       	mov    edx,0xc0033994
c002c556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c55a:	89 10                	mov    DWORD PTR [eax],edx
c002c55c:	90                   	nop
c002c55d:	83 c4 0c             	add    esp,0xc
c002c560:	c3                   	ret    
c002c561:	90                   	nop

c002c562 <ATAPI::readyForCommand()>:
c002c562:	56                   	push   esi
c002c563:	53                   	push   ebx
c002c564:	53                   	push   ebx
c002c565:	31 db                	xor    ebx,ebx
c002c567:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c56b:	51                   	push   ecx
c002c56c:	6a 0c                	push   0xc
c002c56e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c575:	50                   	push   eax
c002c576:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c57c:	e8 63 e8 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002c581:	83 c4 10             	add    esp,0x10
c002c584:	a8 88                	test   al,0x88
c002c586:	74 25                	je     c002c5ad <ATAPI::readyForCommand()+0x4b>
c002c588:	43                   	inc    ebx
c002c589:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c58f:	7e da                	jle    c002c56b <ATAPI::readyForCommand()+0x9>
c002c591:	83 ec 0c             	sub    esp,0xc
c002c594:	68 5e 01 00 00       	push   0x15e
c002c599:	e8 06 8f ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002c59e:	83 c4 10             	add    esp,0x10
c002c5a1:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c5a7:	75 c2                	jne    c002c56b <ATAPI::readyForCommand()+0x9>
c002c5a9:	31 c0                	xor    eax,eax
c002c5ab:	eb 02                	jmp    c002c5af <ATAPI::readyForCommand()+0x4d>
c002c5ad:	b0 01                	mov    al,0x1
c002c5af:	5a                   	pop    edx
c002c5b0:	5b                   	pop    ebx
c002c5b1:	5e                   	pop    esi
c002c5b2:	c3                   	ret    
c002c5b3:	90                   	nop

c002c5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c5b4:	55                   	push   ebp
c002c5b5:	57                   	push   edi
c002c5b6:	56                   	push   esi
c002c5b7:	53                   	push   ebx
c002c5b8:	83 ec 20             	sub    esp,0x20
c002c5bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c5bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c5c3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c5c7:	6a 01                	push   0x1
c002c5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5d0:	50                   	push   eax
c002c5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5d7:	e8 56 e9 ff ff       	call   c002af32 <IDE::enableIRQs(unsigned char, bool)>
c002c5dc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5e3:	59                   	pop    ecx
c002c5e4:	5e                   	pop    esi
c002c5e5:	50                   	push   eax
c002c5e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5ec:	e8 0d e7 ff ff       	call   c002acfe <IDE::prepareInterrupt(unsigned char)>
c002c5f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c5f4:	e8 69 ff ff ff       	call   c002c562 <ATAPI::readyForCommand()>
c002c5f9:	83 c4 10             	add    esp,0x10
c002c5fc:	84 c0                	test   al,al
c002c5fe:	75 0a                	jne    c002c60a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002c600:	bb 01 00 00 00       	mov    ebx,0x1
c002c605:	e9 5f 02 00 00       	jmp    c002c869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c60a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c610:	c1 e0 04             	shl    eax,0x4
c002c613:	0f b6 c0             	movzx  eax,al
c002c616:	50                   	push   eax
c002c617:	6a 06                	push   0x6
c002c619:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c620:	50                   	push   eax
c002c621:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c627:	e8 f8 e6 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c62c:	6a 00                	push   0x0
c002c62e:	6a 01                	push   0x1
c002c630:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c637:	50                   	push   eax
c002c638:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c63e:	e8 e1 e6 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c643:	83 c4 20             	add    esp,0x20
c002c646:	0f b6 c3             	movzx  eax,bl
c002c649:	50                   	push   eax
c002c64a:	0f b6 df             	movzx  ebx,bh
c002c64d:	6a 04                	push   0x4
c002c64f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c656:	50                   	push   eax
c002c657:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c65d:	e8 c2 e6 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c662:	53                   	push   ebx
c002c663:	6a 05                	push   0x5
c002c665:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c66c:	50                   	push   eax
c002c66d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c673:	e8 ac e6 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c678:	83 c4 20             	add    esp,0x20
c002c67b:	68 a0 00 00 00       	push   0xa0
c002c680:	6a 07                	push   0x7
c002c682:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c689:	50                   	push   eax
c002c68a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c690:	e8 8f e6 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c695:	83 c4 0c             	add    esp,0xc
c002c698:	6a 01                	push   0x1
c002c69a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6a1:	50                   	push   eax
c002c6a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6a8:	e8 5b f1 ff ff       	call   c002b808 <IDE::polling(unsigned char, unsigned int)>
c002c6ad:	83 c4 10             	add    esp,0x10
c002c6b0:	0f b6 d8             	movzx  ebx,al
c002c6b3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c6b9:	85 db                	test   ebx,ebx
c002c6bb:	74 20                	je     c002c6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002c6bd:	53                   	push   ebx
c002c6be:	0f b6 c0             	movzx  eax,al
c002c6c1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c6c8:	52                   	push   edx
c002c6c9:	50                   	push   eax
c002c6ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6d0:	e8 79 f0 ff ff       	call   c002b74e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c6d5:	83 c4 10             	add    esp,0x10
c002c6d8:	e9 8c 01 00 00       	jmp    c002c869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c6dd:	52                   	push   edx
c002c6de:	0f b6 c0             	movzx  eax,al
c002c6e1:	52                   	push   edx
c002c6e2:	50                   	push   eax
c002c6e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6e9:	e8 24 e6 ff ff       	call   c002ad12 <IDE::getBase(unsigned char)>
c002c6ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c6f2:	b9 06 00 00 00       	mov    ecx,0x6
c002c6f7:	89 c2                	mov    edx,eax
c002c6f9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c6fc:	89 e8                	mov    eax,ebp
c002c6fe:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c702:	83 c4 10             	add    esp,0x10
c002c705:	0f b6 c0             	movzx  eax,al
c002c708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c70c:	85 db                	test   ebx,ebx
c002c70e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c714:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c71b:	0f 84 eb 00 00 00    	je     c002c80c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002c721:	55                   	push   ebp
c002c722:	55                   	push   ebp
c002c723:	52                   	push   edx
c002c724:	50                   	push   eax
c002c725:	e8 6e e7 ff ff       	call   c002ae98 <IDE::waitInterrupt(unsigned char)>
c002c72a:	83 c4 10             	add    esp,0x10
c002c72d:	84 c0                	test   al,al
c002c72f:	0f 84 cb fe ff ff    	je     c002c600 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c735:	56                   	push   esi
c002c736:	56                   	push   esi
c002c737:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c73e:	50                   	push   eax
c002c73f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c745:	e8 b4 e5 ff ff       	call   c002acfe <IDE::prepareInterrupt(unsigned char)>
c002c74a:	83 c4 0c             	add    esp,0xc
c002c74d:	6a 04                	push   0x4
c002c74f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c756:	50                   	push   eax
c002c757:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c75d:	e8 82 e6 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002c762:	83 c4 0c             	add    esp,0xc
c002c765:	6a 05                	push   0x5
c002c767:	89 c6                	mov    esi,eax
c002c769:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c770:	50                   	push   eax
c002c771:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c777:	e8 68 e6 ff ff       	call   c002ade4 <IDE::read(unsigned char, unsigned char)>
c002c77c:	83 c4 10             	add    esp,0x10
c002c77f:	0f b6 e8             	movzx  ebp,al
c002c782:	89 f0                	mov    eax,esi
c002c784:	c1 e5 08             	shl    ebp,0x8
c002c787:	0f b6 f0             	movzx  esi,al
c002c78a:	09 f5                	or     ebp,esi
c002c78c:	31 f6                	xor    esi,esi
c002c78e:	d1 fd                	sar    ebp,1
c002c790:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002c795:	74 5c                	je     c002c7f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002c797:	39 ee                	cmp    esi,ebp
c002c799:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c79f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c7a6:	75 0d                	jne    c002c7b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002c7a8:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002c7ab:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002c7af:	4b                   	dec    ebx
c002c7b0:	e9 57 ff ff ff       	jmp    c002c70c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002c7b5:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002c7b9:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002c7bd:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002c7c2:	51                   	push   ecx
c002c7c3:	51                   	push   ecx
c002c7c4:	52                   	push   edx
c002c7c5:	50                   	push   eax
c002c7c6:	e8 47 e5 ff ff       	call   c002ad12 <IDE::getBase(unsigned char)>
c002c7cb:	89 c2                	mov    edx,eax
c002c7cd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002c7d2:	66 ef                	out    dx,ax
c002c7d4:	46                   	inc    esi
c002c7d5:	83 c4 10             	add    esp,0x10
c002c7d8:	eb bd                	jmp    c002c797 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002c7da:	51                   	push   ecx
c002c7db:	51                   	push   ecx
c002c7dc:	52                   	push   edx
c002c7dd:	50                   	push   eax
c002c7de:	e8 2f e5 ff ff       	call   c002ad12 <IDE::getBase(unsigned char)>
c002c7e3:	89 c2                	mov    edx,eax
c002c7e5:	66 ed                	in     ax,dx
c002c7e7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002c7eb:	83 c4 10             	add    esp,0x10
c002c7ee:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002c7f2:	46                   	inc    esi
c002c7f3:	39 ee                	cmp    esi,ebp
c002c7f5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c7fb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c802:	75 d6                	jne    c002c7da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002c804:	01 f6                	add    esi,esi
c002c806:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002c80a:	eb a3                	jmp    c002c7af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002c80c:	51                   	push   ecx
c002c80d:	51                   	push   ecx
c002c80e:	52                   	push   edx
c002c80f:	50                   	push   eax
c002c810:	e8 83 e6 ff ff       	call   c002ae98 <IDE::waitInterrupt(unsigned char)>
c002c815:	83 c4 10             	add    esp,0x10
c002c818:	84 c0                	test   al,al
c002c81a:	0f 84 e0 fd ff ff    	je     c002c600 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c820:	52                   	push   edx
c002c821:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c826:	52                   	push   edx
c002c827:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c82e:	50                   	push   eax
c002c82f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c835:	e8 c4 e4 ff ff       	call   c002acfe <IDE::prepareInterrupt(unsigned char)>
c002c83a:	83 c4 10             	add    esp,0x10
c002c83d:	50                   	push   eax
c002c83e:	50                   	push   eax
c002c83f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c846:	50                   	push   eax
c002c847:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c84d:	e8 c0 e4 ff ff       	call   c002ad12 <IDE::getBase(unsigned char)>
c002c852:	8d 50 07             	lea    edx,[eax+0x7]
c002c855:	ec                   	in     al,dx
c002c856:	83 c4 10             	add    esp,0x10
c002c859:	a8 88                	test   al,0x88
c002c85b:	74 0a                	je     c002c867 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002c85d:	4b                   	dec    ebx
c002c85e:	75 dd                	jne    c002c83d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002c860:	bb 02 00 00 00       	mov    ebx,0x2
c002c865:	eb 02                	jmp    c002c869 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c867:	31 db                	xor    ebx,ebx
c002c869:	83 c4 1c             	add    esp,0x1c
c002c86c:	89 d8                	mov    eax,ebx
c002c86e:	5b                   	pop    ebx
c002c86f:	5e                   	pop    esi
c002c870:	5f                   	pop    edi
c002c871:	5d                   	pop    ebp
c002c872:	c3                   	ret    
c002c873:	90                   	nop

c002c874 <ATAPI::diskRemoved()>:
c002c874:	53                   	push   ebx
c002c875:	83 ec 14             	sub    esp,0x14
c002c878:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c87c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c883:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c889:	e8 66 fe fe ff       	call   c001c6f4 <LogicalDisk::unmount()>
c002c88e:	58                   	pop    eax
c002c88f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c895:	e8 3a 08 ff ff       	call   c001d0d4 <VCache::writeWriteBuffer()>
c002c89a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c8a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c8a4:	83 c4 18             	add    esp,0x18
c002c8a7:	5b                   	pop    ebx
c002c8a8:	e9 17 08 ff ff       	jmp    c001d0c4 <VCache::invalidateReadBuffer()>
c002c8ad:	90                   	nop

c002c8ae <ATAPI::eject()>:
c002c8ae:	57                   	push   edi
c002c8af:	b9 03 00 00 00       	mov    ecx,0x3
c002c8b4:	53                   	push   ebx
c002c8b5:	83 ec 14             	sub    esp,0x14
c002c8b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c8bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c8c0:	fc                   	cld    
c002c8c1:	31 c0                	xor    eax,eax
c002c8c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c8c5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c8ca:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c8cf:	50                   	push   eax
c002c8d0:	50                   	push   eax
c002c8d1:	6a 00                	push   0x0
c002c8d3:	6a 00                	push   0x0
c002c8d5:	6a 00                	push   0x0
c002c8d7:	6a 02                	push   0x2
c002c8d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c8dd:	50                   	push   eax
c002c8de:	53                   	push   ebx
c002c8df:	e8 d0 fc ff ff       	call   c002c5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c8e4:	83 c4 14             	add    esp,0x14
c002c8e7:	53                   	push   ebx
c002c8e8:	e8 87 ff ff ff       	call   c002c874 <ATAPI::diskRemoved()>
c002c8ed:	83 c4 24             	add    esp,0x24
c002c8f0:	31 c0                	xor    eax,eax
c002c8f2:	5b                   	pop    ebx
c002c8f3:	5f                   	pop    edi
c002c8f4:	c3                   	ret    
c002c8f5:	90                   	nop

c002c8f6 <ATAPI::diskInserted()>:
c002c8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c8fa:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c901:	c3                   	ret    

c002c902 <ATAPI::detectMedia()>:
c002c902:	56                   	push   esi
c002c903:	53                   	push   ebx
c002c904:	83 ec 28             	sub    esp,0x28
c002c907:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c90b:	6a 0c                	push   0xc
c002c90d:	6a 00                	push   0x0
c002c90f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c913:	56                   	push   esi
c002c914:	e8 d7 3b fd ff       	call   c00004f0 <memset>
c002c919:	58                   	pop    eax
c002c91a:	5a                   	pop    edx
c002c91b:	6a 00                	push   0x0
c002c91d:	6a 00                	push   0x0
c002c91f:	6a 00                	push   0x0
c002c921:	6a 00                	push   0x0
c002c923:	56                   	push   esi
c002c924:	53                   	push   ebx
c002c925:	e8 8a fc ff ff       	call   c002c5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c92a:	83 c4 1c             	add    esp,0x1c
c002c92d:	6a 0c                	push   0xc
c002c92f:	6a 00                	push   0x0
c002c931:	56                   	push   esi
c002c932:	e8 b9 3b fd ff       	call   c00004f0 <memset>
c002c937:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c93c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c941:	59                   	pop    ecx
c002c942:	58                   	pop    eax
c002c943:	6a 01                	push   0x1
c002c945:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c949:	50                   	push   eax
c002c94a:	6a 00                	push   0x0
c002c94c:	6a 12                	push   0x12
c002c94e:	56                   	push   esi
c002c94f:	53                   	push   ebx
c002c950:	e8 5f fc ff ff       	call   c002c5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c955:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c959:	83 c4 20             	add    esp,0x20
c002c95c:	83 e0 7f             	and    eax,0x7f
c002c95f:	83 f8 70             	cmp    eax,0x70
c002c962:	74 15                	je     c002c979 <ATAPI::detectMedia()+0x77>
c002c964:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c96b:	75 0c                	jne    c002c979 <ATAPI::detectMedia()+0x77>
c002c96d:	83 ec 0c             	sub    esp,0xc
c002c970:	53                   	push   ebx
c002c971:	e8 80 ff ff ff       	call   c002c8f6 <ATAPI::diskInserted()>
c002c976:	83 c4 10             	add    esp,0x10
c002c979:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c97d:	83 e0 0f             	and    eax,0xf
c002c980:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c985:	0f b6 c0             	movzx  eax,al
c002c988:	75 19                	jne    c002c9a3 <ATAPI::detectMedia()+0xa1>
c002c98a:	83 f8 02             	cmp    eax,0x2
c002c98d:	75 14                	jne    c002c9a3 <ATAPI::detectMedia()+0xa1>
c002c98f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c996:	74 24                	je     c002c9bc <ATAPI::detectMedia()+0xba>
c002c998:	83 ec 0c             	sub    esp,0xc
c002c99b:	53                   	push   ebx
c002c99c:	e8 d3 fe ff ff       	call   c002c874 <ATAPI::diskRemoved()>
c002c9a1:	eb 16                	jmp    c002c9b9 <ATAPI::detectMedia()+0xb7>
c002c9a3:	85 c0                	test   eax,eax
c002c9a5:	75 15                	jne    c002c9bc <ATAPI::detectMedia()+0xba>
c002c9a7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c9ae:	75 0c                	jne    c002c9bc <ATAPI::detectMedia()+0xba>
c002c9b0:	83 ec 0c             	sub    esp,0xc
c002c9b3:	53                   	push   ebx
c002c9b4:	e8 3d ff ff ff       	call   c002c8f6 <ATAPI::diskInserted()>
c002c9b9:	83 c4 10             	add    esp,0x10
c002c9bc:	83 c4 24             	add    esp,0x24
c002c9bf:	5b                   	pop    ebx
c002c9c0:	5e                   	pop    esi
c002c9c1:	c3                   	ret    

c002c9c2 <ATAPI::open(int, int, void*)>:
c002c9c2:	56                   	push   esi
c002c9c3:	53                   	push   ebx
c002c9c4:	50                   	push   eax
c002c9c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c9c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c9cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c9d1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c9d7:	c1 e0 06             	shl    eax,0x6
c002c9da:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c9e0:	01 d0                	add    eax,edx
c002c9e2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c9e9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c9ef:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c9f6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002ca00:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002ca07:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002ca0d:	6a 04                	push   0x4
c002ca0f:	6a 0c                	push   0xc
c002ca11:	51                   	push   ecx
c002ca12:	52                   	push   edx
c002ca13:	e8 0c e3 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ca18:	90                   	nop
c002ca19:	90                   	nop
c002ca1a:	6a 00                	push   0x0
c002ca1c:	6a 0c                	push   0xc
c002ca1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ca25:	50                   	push   eax
c002ca26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ca2c:	e8 f3 e2 ff ff       	call   c002ad24 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ca31:	83 c4 14             	add    esp,0x14
c002ca34:	68 78 01 00 00       	push   0x178
c002ca39:	e8 5d 9a fe ff       	call   c001649b <malloc>
c002ca3e:	83 c4 0c             	add    esp,0xc
c002ca41:	6a 00                	push   0x0
c002ca43:	68 ff ff ff 7f       	push   0x7fffffff
c002ca48:	6a 00                	push   0x0
c002ca4a:	6a 00                	push   0x0
c002ca4c:	53                   	push   ebx
c002ca4d:	68 37 3b 03 c0       	push   0xc0033b37
c002ca52:	89 c6                	mov    esi,eax
c002ca54:	50                   	push   eax
c002ca55:	e8 d8 fa fe ff       	call   c001c532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002ca5a:	83 c4 14             	add    esp,0x14
c002ca5d:	56                   	push   esi
c002ca5e:	e8 8f fb fe ff       	call   c001c5f2 <LogicalDisk::assignDriveLetter()>
c002ca63:	5a                   	pop    edx
c002ca64:	59                   	pop    ecx
c002ca65:	0f be c0             	movsx  eax,al
c002ca68:	50                   	push   eax
c002ca69:	68 7c 39 03 c0       	push   0xc003397c
c002ca6e:	e8 6f c8 fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002ca73:	58                   	pop    eax
c002ca74:	5a                   	pop    edx
c002ca75:	56                   	push   esi
c002ca76:	53                   	push   ebx
c002ca77:	e8 fc e8 fe ff       	call   c001b378 <Device::addChild(Device*)>
c002ca7c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002ca82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ca85:	e8 38 ed fe ff       	call   c001b7c2 <PhysicalDisk::startCache()>
c002ca8a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002ca91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ca94:	e8 69 fe ff ff       	call   c002c902 <ATAPI::detectMedia()>
c002ca99:	83 c4 14             	add    esp,0x14
c002ca9c:	31 c0                	xor    eax,eax
c002ca9e:	5b                   	pop    ebx
c002ca9f:	5e                   	pop    esi
c002caa0:	c3                   	ret    
c002caa1:	90                   	nop

c002caa2 <ATAPI::read(unsigned long long, int, void*)>:
c002caa2:	55                   	push   ebp
c002caa3:	57                   	push   edi
c002caa4:	56                   	push   esi
c002caa5:	53                   	push   ebx
c002caa6:	83 ec 1c             	sub    esp,0x1c
c002caa9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002caad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002cab1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cab5:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cabc:	74 3c                	je     c002cafa <ATAPI::read(unsigned long long, int, void*)+0x58>
c002cabe:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002cac2:	b9 03 00 00 00       	mov    ecx,0x3
c002cac7:	fc                   	cld    
c002cac8:	31 c0                	xor    eax,eax
c002caca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002cacc:	89 e8                	mov    eax,ebp
c002cace:	0f ce                	bswap  esi
c002cad0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002cad4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002cad9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002cadd:	50                   	push   eax
c002cade:	50                   	push   eax
c002cadf:	55                   	push   ebp
c002cae0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cae4:	c1 e5 0b             	shl    ebp,0xb
c002cae7:	6a 00                	push   0x0
c002cae9:	55                   	push   ebp
c002caea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002caee:	50                   	push   eax
c002caef:	53                   	push   ebx
c002caf0:	e8 bf fa ff ff       	call   c002c5b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002caf5:	83 c4 20             	add    esp,0x20
c002caf8:	eb 1a                	jmp    c002cb14 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002cafa:	83 ec 0c             	sub    esp,0xc
c002cafd:	53                   	push   ebx
c002cafe:	e8 ff fd ff ff       	call   c002c902 <ATAPI::detectMedia()>
c002cb03:	83 c4 10             	add    esp,0x10
c002cb06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002cb0d:	75 af                	jne    c002cabe <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002cb0f:	b8 02 00 00 00       	mov    eax,0x2
c002cb14:	83 c4 1c             	add    esp,0x1c
c002cb17:	5b                   	pop    ebx
c002cb18:	5e                   	pop    esi
c002cb19:	5f                   	pop    edi
c002cb1a:	5d                   	pop    ebp
c002cb1b:	c3                   	ret    

c002cb1c <SATA::close(int, int, void*)>:
c002cb1c:	83 ec 0c             	sub    esp,0xc
c002cb1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cb23:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002cb29:	85 c0                	test   eax,eax
c002cb2b:	74 0c                	je     c002cb39 <SATA::close(int, int, void*)+0x1d>
c002cb2d:	8b 10                	mov    edx,DWORD PTR [eax]
c002cb2f:	83 ec 0c             	sub    esp,0xc
c002cb32:	50                   	push   eax
c002cb33:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002cb36:	83 c4 10             	add    esp,0x10
c002cb39:	31 c0                	xor    eax,eax
c002cb3b:	83 c4 0c             	add    esp,0xc
c002cb3e:	c3                   	ret    
c002cb3f:	90                   	nop

c002cb40 <SATA::powerSaving(PowerSavingLevel)>:
c002cb40:	c3                   	ret    
c002cb41:	90                   	nop

c002cb42 <SATA::open(int, int, void*)>:
c002cb42:	56                   	push   esi
c002cb43:	53                   	push   ebx
c002cb44:	83 ec 10             	sub    esp,0x10
c002cb47:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002cb4b:	68 c4 39 03 c0       	push   0xc00339c4
c002cb50:	e8 8d c7 fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002cb55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cb59:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002cb63:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002cb6d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002cb73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cb77:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002cb81:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002cb88:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002cb8e:	e8 27 9c fe ff       	call   c00167ba <Phys::allocatePage()>
c002cb93:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002cb99:	89 c6                	mov    esi,eax
c002cb9b:	e8 1a 9c fe ff       	call   c00167ba <Phys::allocatePage()>
c002cba0:	81 c6 00 10 00 00    	add    esi,0x1000
c002cba6:	83 c4 10             	add    esp,0x10
c002cba9:	39 c6                	cmp    esi,eax
c002cbab:	74 10                	je     c002cbbd <SATA::open(int, int, void*)+0x7b>
c002cbad:	83 ec 0c             	sub    esp,0xc
c002cbb0:	68 d0 39 03 c0       	push   0xc00339d0
c002cbb5:	e8 b0 36 ff ff       	call   c002026a <KePanic(char const*)>
c002cbba:	83 c4 10             	add    esp,0x10
c002cbbd:	83 ec 0c             	sub    esp,0xc
c002cbc0:	6a 02                	push   0x2
c002cbc2:	e8 06 b4 fe ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c002cbc7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002cbcd:	6a 03                	push   0x3
c002cbcf:	50                   	push   eax
c002cbd0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002cbd6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002cbdc:	e8 f5 ba fe ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c002cbe1:	83 c4 14             	add    esp,0x14
c002cbe4:	53                   	push   ebx
c002cbe5:	e8 d8 eb fe ff       	call   c001b7c2 <PhysicalDisk::startCache()>
c002cbea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cbed:	e8 14 fe fe ff       	call   c001ca06 <createPartitionsForDisk(PhysicalDisk*)>
c002cbf2:	83 c4 14             	add    esp,0x14
c002cbf5:	31 c0                	xor    eax,eax
c002cbf7:	5b                   	pop    ebx
c002cbf8:	5e                   	pop    esi
c002cbf9:	c3                   	ret    

c002cbfa <SATA::SATA()>:
c002cbfa:	83 ec 0c             	sub    esp,0xc
c002cbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cc01:	83 ec 04             	sub    esp,0x4
c002cc04:	68 00 02 00 00       	push   0x200
c002cc09:	68 e4 39 03 c0       	push   0xc00339e4
c002cc0e:	50                   	push   eax
c002cc0f:	e8 46 eb fe ff       	call   c001b75a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cc14:	83 c4 10             	add    esp,0x10
c002cc17:	ba 54 3a 03 c0       	mov    edx,0xc0033a54
c002cc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cc20:	89 10                	mov    DWORD PTR [eax],edx
c002cc22:	90                   	nop
c002cc23:	83 c4 0c             	add    esp,0xc
c002cc26:	c3                   	ret    
c002cc27:	90                   	nop

c002cc28 <SATA::access(unsigned long long, int, void*, bool)>:
c002cc28:	55                   	push   ebp
c002cc29:	57                   	push   edi
c002cc2a:	56                   	push   esi
c002cc2b:	53                   	push   ebx
c002cc2c:	83 ec 2c             	sub    esp,0x2c
c002cc2f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002cc33:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cc37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cc3b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cc3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cc43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cc47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cc4b:	fa                   	cli    
c002cc4c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cc52:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cc57:	7e 10                	jle    c002cc69 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002cc59:	83 ec 0c             	sub    esp,0xc
c002cc5c:	68 f4 39 03 c0       	push   0xc00339f4
c002cc61:	e8 04 36 ff ff       	call   c002026a <KePanic(char const*)>
c002cc66:	83 c4 10             	add    esp,0x10
c002cc69:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cc6f:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002cc75:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002cc7b:	89 e8                	mov    eax,ebp
c002cc7d:	c1 e0 07             	shl    eax,0x7
c002cc80:	01 d0                	add    eax,edx
c002cc82:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cc8c:	8d 45 02             	lea    eax,[ebp+0x2]
c002cc8f:	51                   	push   ecx
c002cc90:	c1 e0 07             	shl    eax,0x7
c002cc93:	51                   	push   ecx
c002cc94:	01 d0                	add    eax,edx
c002cc96:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002cc9a:	50                   	push   eax
c002cc9b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cca1:	e8 42 ec ff ff       	call   c002b8e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cca6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002ccaa:	83 c4 10             	add    esp,0x10
c002ccad:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002ccb2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ccb6:	0f 84 ac 01 00 00    	je     c002ce68 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002ccbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002ccc0:	c1 e0 09             	shl    eax,0x9
c002ccc3:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002ccc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cccc:	74 0e                	je     c002ccdc <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002ccce:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002ccd4:	89 c1                	mov    ecx,eax
c002ccd6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002ccda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ccdc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cce0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cce6:	8d 45 02             	lea    eax,[ebp+0x2]
c002cce9:	c1 e0 07             	shl    eax,0x7
c002ccec:	01 d0                	add    eax,edx
c002ccee:	8b 00                	mov    eax,DWORD PTR [eax]
c002ccf0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002ccf6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002ccfc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cd00:	c1 e1 05             	shl    ecx,0x5
c002cd03:	01 c8                	add    eax,ecx
c002cd05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002cd09:	83 e1 01             	and    ecx,0x1
c002cd0c:	89 ce                	mov    esi,ecx
c002cd0e:	8a 08                	mov    cl,BYTE PTR [eax]
c002cd10:	c1 e6 06             	shl    esi,0x6
c002cd13:	83 e1 bf             	and    ecx,0xffffffbf
c002cd16:	09 f1                	or     ecx,esi
c002cd18:	88 08                	mov    BYTE PTR [eax],cl
c002cd1a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cd1c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cd22:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cd28:	89 08                	mov    DWORD PTR [eax],ecx
c002cd2a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cd30:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cd36:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cd3c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cd3f:	50                   	push   eax
c002cd40:	68 90 00 00 00       	push   0x90
c002cd45:	6a 00                	push   0x0
c002cd47:	56                   	push   esi
c002cd48:	e8 a3 37 fd ff       	call   c00004f0 <memset>
c002cd4d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cd53:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cd59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002cd5d:	83 c4 10             	add    esp,0x10
c002cd60:	48                   	dec    eax
c002cd61:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cd66:	89 c1                	mov    ecx,eax
c002cd68:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cd6e:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cd73:	09 c8                	or     eax,ecx
c002cd75:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cd7b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cd81:	83 c8 80             	or     eax,0xffffff80
c002cd84:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cd8a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cd8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cd91:	25 00 7f 00 00       	and    eax,0x7f00
c002cd96:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cd9b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cda0:	66 89 06             	mov    WORD PTR [esi],ax
c002cda3:	b0 35                	mov    al,0x35
c002cda5:	75 02                	jne    c002cda9 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002cda7:	b0 25                	mov    al,0x25
c002cda9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cdac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cdb0:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cdb4:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002cdb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cdbc:	c1 e8 10             	shr    eax,0x10
c002cdbf:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cdc2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cdc6:	c1 e8 18             	shr    eax,0x18
c002cdc9:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cdcc:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cdd0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cdd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cdd7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cdda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cdde:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cde2:	89 ee                	mov    esi,ebp
c002cde4:	31 c0                	xor    eax,eax
c002cde6:	c1 e6 07             	shl    esi,0x7
c002cde9:	01 d6                	add    esi,edx
c002cdeb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cdf1:	80 e1 88             	and    cl,0x88
c002cdf4:	74 0a                	je     c002ce00 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cdf6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cdfb:	74 0a                	je     c002ce07 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cdfd:	40                   	inc    eax
c002cdfe:	eb eb                	jmp    c002cdeb <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002ce00:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002ce05:	75 0a                	jne    c002ce11 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002ce07:	83 ec 0c             	sub    esp,0xc
c002ce0a:	68 2d 3a 03 c0       	push   0xc0033a2d
c002ce0f:	eb 34                	jmp    c002ce45 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002ce11:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002ce15:	c1 e5 07             	shl    ebp,0x7
c002ce18:	b8 01 00 00 00       	mov    eax,0x1
c002ce1d:	01 ea                	add    edx,ebp
c002ce1f:	d3 e0                	shl    eax,cl
c002ce21:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002ce27:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002ce2d:	85 c8                	test   eax,ecx
c002ce2f:	74 2b                	je     c002ce5c <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002ce31:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002ce37:	0f ba e1 1e          	bt     ecx,0x1e
c002ce3b:	73 ea                	jae    c002ce27 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002ce3d:	83 ec 0c             	sub    esp,0xc
c002ce40:	68 3b 3a 03 c0       	push   0xc0033a3b
c002ce45:	e8 98 c4 fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002ce4a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ce4f:	83 c4 10             	add    esp,0x10
c002ce52:	48                   	dec    eax
c002ce53:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce58:	85 c0                	test   eax,eax
c002ce5a:	eb 17                	jmp    c002ce73 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002ce5c:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002ce62:	0f ba e0 1e          	bt     eax,0x1e
c002ce66:	73 15                	jae    c002ce7d <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002ce68:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ce6d:	48                   	dec    eax
c002ce6e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce73:	75 01                	jne    c002ce76 <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002ce75:	fb                   	sti    
c002ce76:	b8 01 00 00 00       	mov    eax,0x1
c002ce7b:	eb 29                	jmp    c002cea6 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ce7d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002ce82:	75 10                	jne    c002ce94 <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002ce84:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002ce8a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002ce8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002ce92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ce94:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ce99:	48                   	dec    eax
c002ce9a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ce9f:	75 03                	jne    c002cea4 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002cea1:	fb                   	sti    
c002cea2:	eb 02                	jmp    c002cea6 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cea4:	31 c0                	xor    eax,eax
c002cea6:	83 c4 2c             	add    esp,0x2c
c002cea9:	5b                   	pop    ebx
c002ceaa:	5e                   	pop    esi
c002ceab:	5f                   	pop    edi
c002ceac:	5d                   	pop    ebp
c002cead:	c3                   	ret    

c002ceae <SATA::read(unsigned long long, int, void*)>:
c002ceae:	55                   	push   ebp
c002ceaf:	57                   	push   edi
c002ceb0:	56                   	push   esi
c002ceb1:	be 04 00 00 00       	mov    esi,0x4
c002ceb6:	53                   	push   ebx
c002ceb7:	83 ec 0c             	sub    esp,0xc
c002ceba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cebe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cec2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cec6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002ceca:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cecd:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002ced3:	0f 87 1a 02 00 00    	ja     c002d0f3 <SATA::read(unsigned long long, int, void*)+0x245>
c002ced9:	85 c9                	test   ecx,ecx
c002cedb:	be 06 00 00 00       	mov    esi,0x6
c002cee0:	0f 84 0d 02 00 00    	je     c002d0f3 <SATA::read(unsigned long long, int, void*)+0x245>
c002cee6:	56                   	push   esi
c002cee7:	56                   	push   esi
c002cee8:	6a 00                	push   0x0
c002ceea:	51                   	push   ecx
c002ceeb:	53                   	push   ebx
c002ceec:	52                   	push   edx
c002ceed:	50                   	push   eax
c002ceee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cef2:	e8 31 fd ff ff       	call   c002cc28 <SATA::access(unsigned long long, int, void*, bool)>
c002cef7:	83 c4 20             	add    esp,0x20
c002cefa:	85 c0                	test   eax,eax
c002cefc:	89 c6                	mov    esi,eax
c002cefe:	0f 85 ea 01 00 00    	jne    c002d0ee <SATA::read(unsigned long long, int, void*)+0x240>
c002cf04:	50                   	push   eax
c002cf05:	50                   	push   eax
c002cf06:	6a 0f                	push   0xf
c002cf08:	6a 00                	push   0x0
c002cf0a:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cf10:	bb 0a 00 00 00       	mov    ebx,0xa
c002cf15:	e8 3b f2 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002cf1a:	5a                   	pop    edx
c002cf1b:	59                   	pop    ecx
c002cf1c:	b9 10 27 00 00       	mov    ecx,0x2710
c002cf21:	0f b6 c0             	movzx  eax,al
c002cf24:	50                   	push   eax
c002cf25:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf2a:	99                   	cdq    
c002cf2b:	f7 f9                	idiv   ecx
c002cf2d:	99                   	cdq    
c002cf2e:	f7 fb                	idiv   ebx
c002cf30:	8d 42 30             	lea    eax,[edx+0x30]
c002cf33:	0f b6 c0             	movzx  eax,al
c002cf36:	50                   	push   eax
c002cf37:	e8 08 f2 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002cf3c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cf42:	5f                   	pop    edi
c002cf43:	5d                   	pop    ebp
c002cf44:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cf49:	6a 0f                	push   0xf
c002cf4b:	6a 00                	push   0x0
c002cf4d:	e8 03 f2 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002cf52:	5a                   	pop    edx
c002cf53:	59                   	pop    ecx
c002cf54:	0f b6 c0             	movzx  eax,al
c002cf57:	50                   	push   eax
c002cf58:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf5d:	99                   	cdq    
c002cf5e:	f7 fd                	idiv   ebp
c002cf60:	99                   	cdq    
c002cf61:	f7 fb                	idiv   ebx
c002cf63:	8d 42 30             	lea    eax,[edx+0x30]
c002cf66:	0f b6 c0             	movzx  eax,al
c002cf69:	50                   	push   eax
c002cf6a:	e8 d5 f1 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002cf6f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cf75:	5f                   	pop    edi
c002cf76:	bf 64 00 00 00       	mov    edi,0x64
c002cf7b:	58                   	pop    eax
c002cf7c:	6a 0f                	push   0xf
c002cf7e:	6a 00                	push   0x0
c002cf80:	e8 d0 f1 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002cf85:	5a                   	pop    edx
c002cf86:	59                   	pop    ecx
c002cf87:	0f b6 c0             	movzx  eax,al
c002cf8a:	50                   	push   eax
c002cf8b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cf90:	99                   	cdq    
c002cf91:	f7 ff                	idiv   edi
c002cf93:	99                   	cdq    
c002cf94:	f7 fb                	idiv   ebx
c002cf96:	8d 42 30             	lea    eax,[edx+0x30]
c002cf99:	0f b6 c0             	movzx  eax,al
c002cf9c:	50                   	push   eax
c002cf9d:	e8 a2 f1 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002cfa2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002cfa8:	58                   	pop    eax
c002cfa9:	5a                   	pop    edx
c002cfaa:	6a 0f                	push   0xf
c002cfac:	6a 00                	push   0x0
c002cfae:	e8 a2 f1 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002cfb3:	59                   	pop    ecx
c002cfb4:	5a                   	pop    edx
c002cfb5:	0f b6 c0             	movzx  eax,al
c002cfb8:	50                   	push   eax
c002cfb9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cfbe:	99                   	cdq    
c002cfbf:	f7 fb                	idiv   ebx
c002cfc1:	99                   	cdq    
c002cfc2:	f7 fb                	idiv   ebx
c002cfc4:	8d 42 30             	lea    eax,[edx+0x30]
c002cfc7:	0f b6 c0             	movzx  eax,al
c002cfca:	50                   	push   eax
c002cfcb:	e8 74 f1 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002cfd0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cfd6:	59                   	pop    ecx
c002cfd7:	58                   	pop    eax
c002cfd8:	6a 0f                	push   0xf
c002cfda:	6a 00                	push   0x0
c002cfdc:	e8 74 f1 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002cfe1:	5a                   	pop    edx
c002cfe2:	59                   	pop    ecx
c002cfe3:	0f b6 c0             	movzx  eax,al
c002cfe6:	50                   	push   eax
c002cfe7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cfec:	99                   	cdq    
c002cfed:	f7 fb                	idiv   ebx
c002cfef:	83 c2 30             	add    edx,0x30
c002cff2:	0f b6 d2             	movzx  edx,dl
c002cff5:	52                   	push   edx
c002cff6:	e8 49 f1 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002cffb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d001:	58                   	pop    eax
c002d002:	5a                   	pop    edx
c002d003:	6a 0f                	push   0xf
c002d005:	6a 00                	push   0x0
c002d007:	e8 49 f1 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d00c:	59                   	pop    ecx
c002d00d:	b9 10 27 00 00       	mov    ecx,0x2710
c002d012:	5a                   	pop    edx
c002d013:	0f b6 c0             	movzx  eax,al
c002d016:	50                   	push   eax
c002d017:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d01c:	99                   	cdq    
c002d01d:	f7 f9                	idiv   ecx
c002d01f:	99                   	cdq    
c002d020:	f7 fb                	idiv   ebx
c002d022:	8d 42 30             	lea    eax,[edx+0x30]
c002d025:	0f b6 c0             	movzx  eax,al
c002d028:	50                   	push   eax
c002d029:	e8 16 f1 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d02e:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d034:	59                   	pop    ecx
c002d035:	58                   	pop    eax
c002d036:	6a 0f                	push   0xf
c002d038:	6a 00                	push   0x0
c002d03a:	e8 16 f1 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d03f:	5a                   	pop    edx
c002d040:	59                   	pop    ecx
c002d041:	0f b6 c0             	movzx  eax,al
c002d044:	50                   	push   eax
c002d045:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d04a:	99                   	cdq    
c002d04b:	f7 fd                	idiv   ebp
c002d04d:	99                   	cdq    
c002d04e:	f7 fb                	idiv   ebx
c002d050:	8d 42 30             	lea    eax,[edx+0x30]
c002d053:	0f b6 c0             	movzx  eax,al
c002d056:	50                   	push   eax
c002d057:	e8 e8 f0 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d05c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d062:	5d                   	pop    ebp
c002d063:	58                   	pop    eax
c002d064:	6a 0f                	push   0xf
c002d066:	6a 00                	push   0x0
c002d068:	e8 e8 f0 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d06d:	5a                   	pop    edx
c002d06e:	59                   	pop    ecx
c002d06f:	0f b6 c0             	movzx  eax,al
c002d072:	50                   	push   eax
c002d073:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d078:	99                   	cdq    
c002d079:	f7 ff                	idiv   edi
c002d07b:	99                   	cdq    
c002d07c:	f7 fb                	idiv   ebx
c002d07e:	8d 42 30             	lea    eax,[edx+0x30]
c002d081:	0f b6 c0             	movzx  eax,al
c002d084:	50                   	push   eax
c002d085:	e8 ba f0 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d08a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d090:	5f                   	pop    edi
c002d091:	5d                   	pop    ebp
c002d092:	6a 0f                	push   0xf
c002d094:	6a 00                	push   0x0
c002d096:	e8 ba f0 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d09b:	5a                   	pop    edx
c002d09c:	59                   	pop    ecx
c002d09d:	0f b6 c0             	movzx  eax,al
c002d0a0:	50                   	push   eax
c002d0a1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d0a6:	99                   	cdq    
c002d0a7:	f7 fb                	idiv   ebx
c002d0a9:	99                   	cdq    
c002d0aa:	f7 fb                	idiv   ebx
c002d0ac:	8d 42 30             	lea    eax,[edx+0x30]
c002d0af:	0f b6 c0             	movzx  eax,al
c002d0b2:	50                   	push   eax
c002d0b3:	e8 8c f0 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d0b8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d0be:	5f                   	pop    edi
c002d0bf:	5d                   	pop    ebp
c002d0c0:	6a 0f                	push   0xf
c002d0c2:	6a 00                	push   0x0
c002d0c4:	e8 8c f0 ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d0c9:	5a                   	pop    edx
c002d0ca:	59                   	pop    ecx
c002d0cb:	0f b6 c0             	movzx  eax,al
c002d0ce:	50                   	push   eax
c002d0cf:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d0d4:	99                   	cdq    
c002d0d5:	f7 fb                	idiv   ebx
c002d0d7:	83 c2 30             	add    edx,0x30
c002d0da:	0f b6 d2             	movzx  edx,dl
c002d0dd:	52                   	push   edx
c002d0de:	e8 61 f0 ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d0e3:	83 c4 10             	add    esp,0x10
c002d0e6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d0ec:	eb 05                	jmp    c002d0f3 <SATA::read(unsigned long long, int, void*)+0x245>
c002d0ee:	be 01 00 00 00       	mov    esi,0x1
c002d0f3:	83 c4 0c             	add    esp,0xc
c002d0f6:	89 f0                	mov    eax,esi
c002d0f8:	5b                   	pop    ebx
c002d0f9:	5e                   	pop    esi
c002d0fa:	5f                   	pop    edi
c002d0fb:	5d                   	pop    ebp
c002d0fc:	c3                   	ret    
c002d0fd:	90                   	nop

c002d0fe <SATA::write(unsigned long long, int, void*)>:
c002d0fe:	55                   	push   ebp
c002d0ff:	57                   	push   edi
c002d100:	56                   	push   esi
c002d101:	53                   	push   ebx
c002d102:	83 ec 0c             	sub    esp,0xc
c002d105:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d109:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002d10d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002d111:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002d115:	8d 70 ff             	lea    esi,[eax-0x1]
c002d118:	b8 04 00 00 00       	mov    eax,0x4
c002d11d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002d123:	0f 87 2c 02 00 00    	ja     c002d355 <SATA::write(unsigned long long, int, void*)+0x257>
c002d129:	85 db                	test   ebx,ebx
c002d12b:	b8 06 00 00 00       	mov    eax,0x6
c002d130:	0f 84 1f 02 00 00    	je     c002d355 <SATA::write(unsigned long long, int, void*)+0x257>
c002d136:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d13a:	c1 e6 09             	shl    esi,0x9
c002d13d:	01 de                	add    esi,ebx
c002d13f:	50                   	push   eax
c002d140:	89 d7                	mov    edi,edx
c002d142:	50                   	push   eax
c002d143:	83 c7 01             	add    edi,0x1
c002d146:	6a 01                	push   0x1
c002d148:	89 cd                	mov    ebp,ecx
c002d14a:	53                   	push   ebx
c002d14b:	83 d5 00             	adc    ebp,0x0
c002d14e:	6a 01                	push   0x1
c002d150:	81 c3 00 02 00 00    	add    ebx,0x200
c002d156:	51                   	push   ecx
c002d157:	52                   	push   edx
c002d158:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d15c:	e8 c7 fa ff ff       	call   c002cc28 <SATA::access(unsigned long long, int, void*, bool)>
c002d161:	83 c4 20             	add    esp,0x20
c002d164:	39 f3                	cmp    ebx,esi
c002d166:	89 fa                	mov    edx,edi
c002d168:	89 e9                	mov    ecx,ebp
c002d16a:	75 d3                	jne    c002d13f <SATA::write(unsigned long long, int, void*)+0x41>
c002d16c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d170:	bd 10 27 00 00       	mov    ebp,0x2710
c002d175:	bb 0a 00 00 00       	mov    ebx,0xa
c002d17a:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002d180:	50                   	push   eax
c002d181:	50                   	push   eax
c002d182:	6a 0f                	push   0xf
c002d184:	6a 00                	push   0x0
c002d186:	e8 ca ef ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d18b:	5a                   	pop    edx
c002d18c:	59                   	pop    ecx
c002d18d:	0f b6 c0             	movzx  eax,al
c002d190:	50                   	push   eax
c002d191:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d196:	99                   	cdq    
c002d197:	f7 fd                	idiv   ebp
c002d199:	99                   	cdq    
c002d19a:	f7 fb                	idiv   ebx
c002d19c:	8d 42 30             	lea    eax,[edx+0x30]
c002d19f:	0f b6 c0             	movzx  eax,al
c002d1a2:	50                   	push   eax
c002d1a3:	e8 9c ef ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d1a8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d1ae:	5e                   	pop    esi
c002d1af:	5f                   	pop    edi
c002d1b0:	bf e8 03 00 00       	mov    edi,0x3e8
c002d1b5:	6a 0f                	push   0xf
c002d1b7:	6a 00                	push   0x0
c002d1b9:	e8 97 ef ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d1be:	5a                   	pop    edx
c002d1bf:	59                   	pop    ecx
c002d1c0:	0f b6 c0             	movzx  eax,al
c002d1c3:	50                   	push   eax
c002d1c4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1c9:	99                   	cdq    
c002d1ca:	f7 ff                	idiv   edi
c002d1cc:	99                   	cdq    
c002d1cd:	f7 fb                	idiv   ebx
c002d1cf:	8d 42 30             	lea    eax,[edx+0x30]
c002d1d2:	0f b6 c0             	movzx  eax,al
c002d1d5:	50                   	push   eax
c002d1d6:	e8 69 ef ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d1db:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d1e1:	5e                   	pop    esi
c002d1e2:	be 64 00 00 00       	mov    esi,0x64
c002d1e7:	58                   	pop    eax
c002d1e8:	6a 0f                	push   0xf
c002d1ea:	6a 00                	push   0x0
c002d1ec:	e8 64 ef ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d1f1:	5a                   	pop    edx
c002d1f2:	59                   	pop    ecx
c002d1f3:	0f b6 c0             	movzx  eax,al
c002d1f6:	50                   	push   eax
c002d1f7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d1fc:	99                   	cdq    
c002d1fd:	f7 fe                	idiv   esi
c002d1ff:	99                   	cdq    
c002d200:	f7 fb                	idiv   ebx
c002d202:	8d 42 30             	lea    eax,[edx+0x30]
c002d205:	0f b6 c0             	movzx  eax,al
c002d208:	50                   	push   eax
c002d209:	e8 36 ef ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d20e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d214:	58                   	pop    eax
c002d215:	5a                   	pop    edx
c002d216:	6a 0f                	push   0xf
c002d218:	6a 00                	push   0x0
c002d21a:	e8 36 ef ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d21f:	59                   	pop    ecx
c002d220:	5a                   	pop    edx
c002d221:	0f b6 c0             	movzx  eax,al
c002d224:	50                   	push   eax
c002d225:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d22a:	99                   	cdq    
c002d22b:	f7 fb                	idiv   ebx
c002d22d:	99                   	cdq    
c002d22e:	f7 fb                	idiv   ebx
c002d230:	8d 42 30             	lea    eax,[edx+0x30]
c002d233:	0f b6 c0             	movzx  eax,al
c002d236:	50                   	push   eax
c002d237:	e8 08 ef ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d23c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d242:	59                   	pop    ecx
c002d243:	58                   	pop    eax
c002d244:	6a 0f                	push   0xf
c002d246:	6a 00                	push   0x0
c002d248:	e8 08 ef ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d24d:	5a                   	pop    edx
c002d24e:	59                   	pop    ecx
c002d24f:	0f b6 c0             	movzx  eax,al
c002d252:	50                   	push   eax
c002d253:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d258:	99                   	cdq    
c002d259:	f7 fb                	idiv   ebx
c002d25b:	83 c2 30             	add    edx,0x30
c002d25e:	0f b6 d2             	movzx  edx,dl
c002d261:	52                   	push   edx
c002d262:	e8 dd ee ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d267:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d26d:	58                   	pop    eax
c002d26e:	5a                   	pop    edx
c002d26f:	6a 0f                	push   0xf
c002d271:	6a 00                	push   0x0
c002d273:	e8 dd ee ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d278:	59                   	pop    ecx
c002d279:	5a                   	pop    edx
c002d27a:	0f b6 c0             	movzx  eax,al
c002d27d:	50                   	push   eax
c002d27e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d283:	99                   	cdq    
c002d284:	f7 fd                	idiv   ebp
c002d286:	99                   	cdq    
c002d287:	f7 fb                	idiv   ebx
c002d289:	8d 42 30             	lea    eax,[edx+0x30]
c002d28c:	0f b6 c0             	movzx  eax,al
c002d28f:	50                   	push   eax
c002d290:	e8 af ee ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d295:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d29b:	59                   	pop    ecx
c002d29c:	5d                   	pop    ebp
c002d29d:	6a 0f                	push   0xf
c002d29f:	6a 00                	push   0x0
c002d2a1:	e8 af ee ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d2a6:	5a                   	pop    edx
c002d2a7:	59                   	pop    ecx
c002d2a8:	0f b6 c0             	movzx  eax,al
c002d2ab:	50                   	push   eax
c002d2ac:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2b1:	99                   	cdq    
c002d2b2:	f7 ff                	idiv   edi
c002d2b4:	99                   	cdq    
c002d2b5:	f7 fb                	idiv   ebx
c002d2b7:	8d 42 30             	lea    eax,[edx+0x30]
c002d2ba:	0f b6 c0             	movzx  eax,al
c002d2bd:	50                   	push   eax
c002d2be:	e8 81 ee ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d2c3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d2c9:	5f                   	pop    edi
c002d2ca:	5d                   	pop    ebp
c002d2cb:	6a 0f                	push   0xf
c002d2cd:	6a 00                	push   0x0
c002d2cf:	e8 81 ee ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d2d4:	5a                   	pop    edx
c002d2d5:	59                   	pop    ecx
c002d2d6:	0f b6 c0             	movzx  eax,al
c002d2d9:	50                   	push   eax
c002d2da:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d2df:	99                   	cdq    
c002d2e0:	f7 fe                	idiv   esi
c002d2e2:	99                   	cdq    
c002d2e3:	f7 fb                	idiv   ebx
c002d2e5:	8d 42 30             	lea    eax,[edx+0x30]
c002d2e8:	0f b6 c0             	movzx  eax,al
c002d2eb:	50                   	push   eax
c002d2ec:	e8 53 ee ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d2f1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d2f7:	5e                   	pop    esi
c002d2f8:	5f                   	pop    edi
c002d2f9:	6a 0f                	push   0xf
c002d2fb:	6a 00                	push   0x0
c002d2fd:	e8 53 ee ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d302:	5d                   	pop    ebp
c002d303:	5a                   	pop    edx
c002d304:	0f b6 c0             	movzx  eax,al
c002d307:	50                   	push   eax
c002d308:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d30d:	99                   	cdq    
c002d30e:	f7 fb                	idiv   ebx
c002d310:	99                   	cdq    
c002d311:	f7 fb                	idiv   ebx
c002d313:	8d 42 30             	lea    eax,[edx+0x30]
c002d316:	0f b6 c0             	movzx  eax,al
c002d319:	50                   	push   eax
c002d31a:	e8 25 ee ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d31f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d325:	59                   	pop    ecx
c002d326:	5e                   	pop    esi
c002d327:	6a 0f                	push   0xf
c002d329:	6a 00                	push   0x0
c002d32b:	e8 25 ee ff ff       	call   c002c155 <combineColours(unsigned char, unsigned char)>
c002d330:	5f                   	pop    edi
c002d331:	5d                   	pop    ebp
c002d332:	0f b6 c0             	movzx  eax,al
c002d335:	50                   	push   eax
c002d336:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d33b:	99                   	cdq    
c002d33c:	f7 fb                	idiv   ebx
c002d33e:	83 c2 30             	add    edx,0x30
c002d341:	0f b6 d2             	movzx  edx,dl
c002d344:	52                   	push   edx
c002d345:	e8 fa ed ff ff       	call   c002c144 <combineCharAndColour(char, unsigned char)>
c002d34a:	83 c4 10             	add    esp,0x10
c002d34d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d353:	31 c0                	xor    eax,eax
c002d355:	83 c4 0c             	add    esp,0xc
c002d358:	5b                   	pop    ebx
c002d359:	5e                   	pop    esi
c002d35a:	5f                   	pop    edi
c002d35b:	5d                   	pop    ebp
c002d35c:	c3                   	ret    
c002d35d:	90                   	nop

c002d35e <SATAPI::write(unsigned long long, int, void*)>:
c002d35e:	b8 03 00 00 00       	mov    eax,0x3
c002d363:	c3                   	ret    

c002d364 <SATAPI::close(int, int, void*)>:
c002d364:	83 ec 0c             	sub    esp,0xc
c002d367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d36b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d371:	85 c0                	test   eax,eax
c002d373:	74 0c                	je     c002d381 <SATAPI::close(int, int, void*)+0x1d>
c002d375:	8b 10                	mov    edx,DWORD PTR [eax]
c002d377:	83 ec 0c             	sub    esp,0xc
c002d37a:	50                   	push   eax
c002d37b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d37e:	83 c4 10             	add    esp,0x10
c002d381:	31 c0                	xor    eax,eax
c002d383:	83 c4 0c             	add    esp,0xc
c002d386:	c3                   	ret    
c002d387:	90                   	nop

c002d388 <SATAPI::SATAPI()>:
c002d388:	83 ec 0c             	sub    esp,0xc
c002d38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d38f:	83 ec 04             	sub    esp,0x4
c002d392:	68 00 08 00 00       	push   0x800
c002d397:	68 84 3a 03 c0       	push   0xc0033a84
c002d39c:	50                   	push   eax
c002d39d:	e8 b8 e3 fe ff       	call   c001b75a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d3a2:	83 c4 10             	add    esp,0x10
c002d3a5:	ba 78 3b 03 c0       	mov    edx,0xc0033b78
c002d3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d3ae:	89 10                	mov    DWORD PTR [eax],edx
c002d3b0:	90                   	nop
c002d3b1:	83 c4 0c             	add    esp,0xc
c002d3b4:	c3                   	ret    
c002d3b5:	90                   	nop

c002d3b6 <SATAPI::diskRemoved()>:
c002d3b6:	c3                   	ret    
c002d3b7:	90                   	nop

c002d3b8 <SATAPI::diskInserted()>:
c002d3b8:	83 ec 18             	sub    esp,0x18
c002d3bb:	68 90 3a 03 c0       	push   0xc0033a90
c002d3c0:	e8 1d bf fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002d3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3c9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d3d0:	83 c4 1c             	add    esp,0x1c
c002d3d3:	c3                   	ret    

c002d3d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d3d4:	55                   	push   ebp
c002d3d5:	57                   	push   edi
c002d3d6:	56                   	push   esi
c002d3d7:	53                   	push   ebx
c002d3d8:	83 ec 34             	sub    esp,0x34
c002d3db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d3df:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d3e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d3e7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d3eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d3ef:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d3f5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d3fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d3ff:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d409:	83 c0 02             	add    eax,0x2
c002d40c:	c1 e0 07             	shl    eax,0x7
c002d40f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d413:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d417:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d41b:	c1 e0 07             	shl    eax,0x7
c002d41e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d422:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d426:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d430:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d434:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d43a:	e8 a9 e4 ff ff       	call   c002b8e8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d43f:	83 c4 10             	add    esp,0x10
c002d442:	89 c2                	mov    edx,eax
c002d444:	b8 01 00 00 00       	mov    eax,0x1
c002d449:	83 fa ff             	cmp    edx,0xffffffff
c002d44c:	0f 84 5f 02 00 00    	je     c002d6b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d452:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d45a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d460:	8b 00                	mov    eax,DWORD PTR [eax]
c002d462:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d468:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d46e:	89 d1                	mov    ecx,edx
c002d470:	c1 e1 05             	shl    ecx,0x5
c002d473:	01 c8                	add    eax,ecx
c002d475:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d477:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d47d:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d483:	89 08                	mov    DWORD PTR [eax],ecx
c002d485:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d48b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d491:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d497:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d49a:	50                   	push   eax
c002d49b:	68 90 00 00 00       	push   0x90
c002d4a0:	6a 00                	push   0x0
c002d4a2:	53                   	push   ebx
c002d4a3:	e8 48 30 fd ff       	call   c00004f0 <memset>
c002d4a8:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d4ab:	b9 0c 00 00 00       	mov    ecx,0xc
c002d4b0:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d4b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d4b6:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d4bc:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d4c0:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d4c4:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d4ca:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d4ce:	48                   	dec    eax
c002d4cf:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d4d4:	89 c1                	mov    ecx,eax
c002d4d6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d4dc:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d4e1:	09 c8                	or     eax,ecx
c002d4e3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d4e9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d4ef:	83 c8 80             	or     eax,0xffffff80
c002d4f2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d4f8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d4fb:	25 00 7f 00 00       	and    eax,0x7f00
c002d500:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d505:	66 89 03             	mov    WORD PTR [ebx],ax
c002d508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d50c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d514:	c1 e8 10             	shr    eax,0x10
c002d517:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d51e:	c1 e8 18             	shr    eax,0x18
c002d521:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d524:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d528:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d52b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d52f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d532:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d536:	83 c4 10             	add    esp,0x10
c002d539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d53d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d541:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d545:	31 c0                	xor    eax,eax
c002d547:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d54d:	80 e1 88             	and    cl,0x88
c002d550:	74 0a                	je     c002d55c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d552:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d557:	74 0a                	je     c002d563 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d559:	40                   	inc    eax
c002d55a:	eb eb                	jmp    c002d547 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d55c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d561:	75 43                	jne    c002d5a6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d563:	83 ec 0c             	sub    esp,0xc
c002d566:	68 a8 3a 03 c0       	push   0xc0033aa8
c002d56b:	e8 72 bd fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002d570:	58                   	pop    eax
c002d571:	5a                   	pop    edx
c002d572:	68 bd 3a 03 c0       	push   0xc0033abd
c002d577:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d57d:	e8 02 9f fe ff       	call   c0017484 <VgaText::puts(char const*)>
c002d582:	59                   	pop    ecx
c002d583:	5b                   	pop    ebx
c002d584:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d588:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d58e:	e8 ef e3 ff ff       	call   c002b982 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d593:	5e                   	pop    esi
c002d594:	5f                   	pop    edi
c002d595:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d599:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d59f:	e8 be e3 ff ff       	call   c002b962 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d5a4:	eb 48                	jmp    c002d5ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d5a6:	b8 01 00 00 00       	mov    eax,0x1
c002d5ab:	88 d1                	mov    cl,dl
c002d5ad:	d3 e0                	shl    eax,cl
c002d5af:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002d5b4:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002d5ba:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002d5be:	89 c7                	mov    edi,eax
c002d5c0:	c1 e3 07             	shl    ebx,0x7
c002d5c3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002d5c7:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002d5cd:	85 c7                	test   edi,eax
c002d5cf:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002d5d5:	0f 84 a3 00 00 00    	je     c002d67e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002d5db:	0f ba e0 1e          	bt     eax,0x1e
c002d5df:	73 1a                	jae    c002d5fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002d5e1:	83 ec 0c             	sub    esp,0xc
c002d5e4:	68 cf 3a 03 c0       	push   0xc0033acf
c002d5e9:	e8 f4 bc fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002d5ee:	83 c4 10             	add    esp,0x10
c002d5f1:	b8 01 00 00 00       	mov    eax,0x1
c002d5f6:	e9 b6 00 00 00       	jmp    c002d6b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d5fb:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002d601:	83 f8 0d             	cmp    eax,0xd
c002d604:	77 0a                	ja     c002d610 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002d606:	83 ec 0c             	sub    esp,0xc
c002d609:	68 c8 00 00 00       	push   0xc8
c002d60e:	eb 28                	jmp    c002d638 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d610:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002d616:	83 f8 0d             	cmp    eax,0xd
c002d619:	77 0a                	ja     c002d625 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002d61b:	83 ec 0c             	sub    esp,0xc
c002d61e:	68 58 02 00 00       	push   0x258
c002d623:	eb 13                	jmp    c002d638 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d625:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002d62b:	83 f8 06             	cmp    eax,0x6
c002d62e:	77 10                	ja     c002d640 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002d630:	83 ec 0c             	sub    esp,0xc
c002d633:	68 dc 05 00 00       	push   0x5dc
c002d638:	e8 67 7e ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002d63d:	83 c4 10             	add    esp,0x10
c002d640:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d644:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d647:	75 06                	jne    c002d64f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002d649:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d64d:	74 15                	je     c002d664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d64f:	83 fe 06             	cmp    esi,0x6
c002d652:	77 10                	ja     c002d664 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d654:	83 ec 0c             	sub    esp,0xc
c002d657:	68 c4 09 00 00       	push   0x9c4
c002d65c:	e8 43 7e ff ff       	call   c00254a4 <milliTenthSleep(unsigned int)>
c002d661:	83 c4 10             	add    esp,0x10
c002d664:	46                   	inc    esi
c002d665:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002d66b:	0f 85 56 ff ff ff    	jne    c002d5c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002d671:	83 ec 0c             	sub    esp,0xc
c002d674:	68 e2 3a 03 c0       	push   0xc0033ae2
c002d679:	e9 6b ff ff ff       	jmp    c002d5e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d67e:	0f ba e0 1e          	bt     eax,0x1e
c002d682:	73 0d                	jae    c002d691 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002d684:	83 ec 0c             	sub    esp,0xc
c002d687:	68 f6 3a 03 c0       	push   0xc0033af6
c002d68c:	e9 58 ff ff ff       	jmp    c002d5e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d691:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d696:	74 17                	je     c002d6af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d698:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d69d:	74 10                	je     c002d6af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d69f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d6a5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d6a9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d6ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d6af:	31 c0                	xor    eax,eax
c002d6b1:	83 c4 2c             	add    esp,0x2c
c002d6b4:	5b                   	pop    ebx
c002d6b5:	5e                   	pop    esi
c002d6b6:	5f                   	pop    edi
c002d6b7:	5d                   	pop    ebp
c002d6b8:	c3                   	ret    
c002d6b9:	90                   	nop

c002d6ba <SATAPI::eject()>:
c002d6ba:	57                   	push   edi
c002d6bb:	b9 03 00 00 00       	mov    ecx,0x3
c002d6c0:	83 ec 18             	sub    esp,0x18
c002d6c3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d6c7:	fc                   	cld    
c002d6c8:	31 c0                	xor    eax,eax
c002d6ca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d6cc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d6d1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d6d6:	50                   	push   eax
c002d6d7:	6a 00                	push   0x0
c002d6d9:	6a 00                	push   0x0
c002d6db:	6a 00                	push   0x0
c002d6dd:	6a 00                	push   0x0
c002d6df:	6a 02                	push   0x2
c002d6e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d6e5:	50                   	push   eax
c002d6e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d6ea:	e8 e5 fc ff ff       	call   c002d3d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d6ef:	83 c4 38             	add    esp,0x38
c002d6f2:	31 c0                	xor    eax,eax
c002d6f4:	5f                   	pop    edi
c002d6f5:	c3                   	ret    

c002d6f6 <SATAPI::detectMedia()>:
c002d6f6:	53                   	push   ebx
c002d6f7:	83 ec 14             	sub    esp,0x14
c002d6fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d6fe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d704:	e8 cb f9 fe ff       	call   c001d0d4 <VCache::writeWriteBuffer()>
c002d709:	59                   	pop    ecx
c002d70a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d710:	e8 af f9 fe ff       	call   c001d0c4 <VCache::invalidateReadBuffer()>
c002d715:	c7 04 24 0b 3b 03 c0 	mov    DWORD PTR [esp],0xc0033b0b
c002d71c:	e8 c1 bb fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002d721:	83 c4 10             	add    esp,0x10
c002d724:	31 c0                	xor    eax,eax
c002d726:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d72d:	85 d2                	test   edx,edx
c002d72f:	74 0f                	je     c002d740 <SATAPI::detectMedia()+0x4a>
c002d731:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d737:	75 07                	jne    c002d740 <SATAPI::detectMedia()+0x4a>
c002d739:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d740:	40                   	inc    eax
c002d741:	83 f8 1a             	cmp    eax,0x1a
c002d744:	75 e0                	jne    c002d726 <SATAPI::detectMedia()+0x30>
c002d746:	83 c4 08             	add    esp,0x8
c002d749:	5b                   	pop    ebx
c002d74a:	c3                   	ret    
c002d74b:	90                   	nop

c002d74c <SATAPI::open(int, int, void*)>:
c002d74c:	56                   	push   esi
c002d74d:	53                   	push   ebx
c002d74e:	51                   	push   ecx
c002d74f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d757:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d761:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d767:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d76b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d775:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d77f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d786:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d78c:	e8 29 90 fe ff       	call   c00167ba <Phys::allocatePage()>
c002d791:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d797:	89 c6                	mov    esi,eax
c002d799:	e8 1c 90 fe ff       	call   c00167ba <Phys::allocatePage()>
c002d79e:	81 c6 00 10 00 00    	add    esi,0x1000
c002d7a4:	39 c6                	cmp    esi,eax
c002d7a6:	74 10                	je     c002d7b8 <SATAPI::open(int, int, void*)+0x6c>
c002d7a8:	83 ec 0c             	sub    esp,0xc
c002d7ab:	68 20 3b 03 c0       	push   0xc0033b20
c002d7b0:	e8 b5 2a ff ff       	call   c002026a <KePanic(char const*)>
c002d7b5:	83 c4 10             	add    esp,0x10
c002d7b8:	83 ec 0c             	sub    esp,0xc
c002d7bb:	6a 02                	push   0x2
c002d7bd:	e8 0b a8 fe ff       	call   c0017fcd <Virt::allocateKernelVirtualPages(int)>
c002d7c2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d7c8:	6a 03                	push   0x3
c002d7ca:	50                   	push   eax
c002d7cb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d7d1:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d7d7:	e8 fa ae fe ff       	call   c00186d6 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d7dc:	83 c4 14             	add    esp,0x14
c002d7df:	68 78 01 00 00       	push   0x178
c002d7e4:	e8 b2 8c fe ff       	call   c001649b <malloc>
c002d7e9:	83 c4 0c             	add    esp,0xc
c002d7ec:	6a 00                	push   0x0
c002d7ee:	68 ff ff ff 7f       	push   0x7fffffff
c002d7f3:	6a 00                	push   0x0
c002d7f5:	6a 00                	push   0x0
c002d7f7:	53                   	push   ebx
c002d7f8:	68 36 3b 03 c0       	push   0xc0033b36
c002d7fd:	89 c6                	mov    esi,eax
c002d7ff:	50                   	push   eax
c002d800:	e8 2d ed fe ff       	call   c001c532 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d805:	83 c4 14             	add    esp,0x14
c002d808:	56                   	push   esi
c002d809:	e8 e4 ed fe ff       	call   c001c5f2 <LogicalDisk::assignDriveLetter()>
c002d80e:	5a                   	pop    edx
c002d80f:	59                   	pop    ecx
c002d810:	0f be c0             	movsx  eax,al
c002d813:	50                   	push   eax
c002d814:	68 7c 39 03 c0       	push   0xc003397c
c002d819:	e8 c4 ba fe ff       	call   c00192e2 <Dbg::kprintf(char const*, ...)>
c002d81e:	58                   	pop    eax
c002d81f:	5a                   	pop    edx
c002d820:	56                   	push   esi
c002d821:	53                   	push   ebx
c002d822:	e8 51 db fe ff       	call   c001b378 <Device::addChild(Device*)>
c002d827:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d82d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d830:	e8 8d df fe ff       	call   c001b7c2 <PhysicalDisk::startCache()>
c002d835:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d83c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d83f:	e8 b2 fe ff ff       	call   c002d6f6 <SATAPI::detectMedia()>
c002d844:	83 c4 14             	add    esp,0x14
c002d847:	31 c0                	xor    eax,eax
c002d849:	5b                   	pop    ebx
c002d84a:	5e                   	pop    esi
c002d84b:	c3                   	ret    

c002d84c <SATAPI::read(unsigned long long, int, void*)>:
c002d84c:	55                   	push   ebp
c002d84d:	57                   	push   edi
c002d84e:	56                   	push   esi
c002d84f:	53                   	push   ebx
c002d850:	83 ec 3c             	sub    esp,0x3c
c002d853:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002d857:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d85b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002d85f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002d863:	83 fd 04             	cmp    ebp,0x4
c002d866:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d86a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d86e:	7e 10                	jle    c002d880 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002d870:	83 ec 0c             	sub    esp,0xc
c002d873:	68 44 3b 03 c0       	push   0xc0033b44
c002d878:	e8 ed 29 ff ff       	call   c002026a <KePanic(char const*)>
c002d87d:	83 c4 10             	add    esp,0x10
c002d880:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d886:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d88c:	51                   	push   ecx
c002d88d:	50                   	push   eax
c002d88e:	83 c0 02             	add    eax,0x2
c002d891:	c1 e0 07             	shl    eax,0x7
c002d894:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d89a:	50                   	push   eax
c002d89b:	52                   	push   edx
c002d89c:	e8 0b e1 ff ff       	call   c002b9ac <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d8a1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d8a5:	b9 03 00 00 00       	mov    ecx,0x3
c002d8aa:	fc                   	cld    
c002d8ab:	31 c0                	xor    eax,eax
c002d8ad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d8af:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d8b4:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d8b9:	83 c4 0c             	add    esp,0xc
c002d8bc:	6a 00                	push   0x0
c002d8be:	6a 00                	push   0x0
c002d8c0:	6a 00                	push   0x0
c002d8c2:	6a 00                	push   0x0
c002d8c4:	6a 02                	push   0x2
c002d8c6:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d8ca:	50                   	push   eax
c002d8cb:	53                   	push   ebx
c002d8cc:	e8 03 fb ff ff       	call   c002d3d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d8d1:	83 c4 20             	add    esp,0x20
c002d8d4:	85 c0                	test   eax,eax
c002d8d6:	89 c6                	mov    esi,eax
c002d8d8:	75 46                	jne    c002d920 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002d8da:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d8de:	b9 03 00 00 00       	mov    ecx,0x3
c002d8e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d8e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d8e9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d8ee:	0f c8                	bswap  eax
c002d8f0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d8f4:	89 e8                	mov    eax,ebp
c002d8f6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d8fa:	50                   	push   eax
c002d8fb:	55                   	push   ebp
c002d8fc:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002d900:	c1 e5 0b             	shl    ebp,0xb
c002d903:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d907:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d90b:	55                   	push   ebp
c002d90c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d910:	50                   	push   eax
c002d911:	53                   	push   ebx
c002d912:	e8 bd fa ff ff       	call   c002d3d4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d917:	83 c4 20             	add    esp,0x20
c002d91a:	85 c0                	test   eax,eax
c002d91c:	89 c6                	mov    esi,eax
c002d91e:	74 0c                	je     c002d92c <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002d920:	83 ec 0c             	sub    esp,0xc
c002d923:	53                   	push   ebx
c002d924:	e8 cd fd ff ff       	call   c002d6f6 <SATAPI::detectMedia()>
c002d929:	83 c4 10             	add    esp,0x10
c002d92c:	83 c4 3c             	add    esp,0x3c
c002d92f:	89 f0                	mov    eax,esi
c002d931:	5b                   	pop    ebx
c002d932:	5e                   	pop    esi
c002d933:	5f                   	pop    edi
c002d934:	5d                   	pop    ebp
c002d935:	c3                   	ret    

c002d936 <IOAPIC::close(int, int, void*)>:
c002d936:	b8 00 00 00 00       	mov    eax,0x0
c002d93b:	c3                   	ret    

c002d93c <apicGetBase()>:
c002d93c:	55                   	push   ebp
c002d93d:	89 e5                	mov    ebp,esp
c002d93f:	83 ec 18             	sub    esp,0x18
c002d942:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d947:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d94d:	83 e0 08             	and    eax,0x8
c002d950:	0f b6 c0             	movzx  eax,al
c002d953:	85 c0                	test   eax,eax
c002d955:	75 07                	jne    c002d95e <apicGetBase()+0x22>
c002d957:	b8 00 00 00 00       	mov    eax,0x0
c002d95c:	eb 21                	jmp    c002d97f <apicGetBase()+0x43>
c002d95e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d963:	83 ec 08             	sub    esp,0x8
c002d966:	6a 1b                	push   0x1b
c002d968:	50                   	push   eax
c002d969:	e8 3e 81 fe ff       	call   c0015aac <Computer::rdmsr(unsigned int)>
c002d96e:	83 c4 10             	add    esp,0x10
c002d971:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d974:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d977:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d97a:	25 00 00 ff ff       	and    eax,0xffff0000
c002d97f:	c9                   	leave  
c002d980:	c3                   	ret    
c002d981:	90                   	nop

c002d982 <IOAPIC::IOAPIC()>:
c002d982:	83 ec 0c             	sub    esp,0xc
c002d985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d989:	83 ec 08             	sub    esp,0x8
c002d98c:	68 a8 3b 03 c0       	push   0xc0033ba8
c002d991:	50                   	push   eax
c002d992:	e8 43 db fe ff       	call   c001b4da <Device::Device(char const*)>
c002d997:	83 c4 10             	add    esp,0x10
c002d99a:	ba b8 3b 03 c0       	mov    edx,0xc0033bb8
c002d99f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d9a3:	89 10                	mov    DWORD PTR [eax],edx
c002d9a5:	90                   	nop
c002d9a6:	83 c4 0c             	add    esp,0xc
c002d9a9:	c3                   	ret    

c002d9aa <apicOpen()>:
c002d9aa:	55                   	push   ebp
c002d9ab:	89 e5                	mov    ebp,esp
c002d9ad:	53                   	push   ebx
c002d9ae:	83 ec 34             	sub    esp,0x34
c002d9b1:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d9b6:	83 f0 01             	xor    eax,0x1
c002d9b9:	0f b6 c0             	movzx  eax,al
c002d9bc:	85 c0                	test   eax,eax
c002d9be:	0f 84 a3 00 00 00    	je     c002da67 <apicOpen()+0xbd>
c002d9c4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d9c8:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d9cd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d9d1:	0f b6 c0             	movzx  eax,al
c002d9d4:	39 c2                	cmp    edx,eax
c002d9d6:	0f 83 84 00 00 00    	jae    c002da60 <apicOpen()+0xb6>
c002d9dc:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d9e3:	83 ec 0c             	sub    esp,0xc
c002d9e6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d9e9:	e8 ad 8a fe ff       	call   c001649b <malloc>
c002d9ee:	83 c4 10             	add    esp,0x10
c002d9f1:	89 c3                	mov    ebx,eax
c002d9f3:	83 ec 0c             	sub    esp,0xc
c002d9f6:	53                   	push   ebx
c002d9f7:	e8 86 ff ff ff       	call   c002d982 <IOAPIC::IOAPIC()>
c002d9fc:	83 c4 10             	add    esp,0x10
c002d9ff:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002da02:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002da06:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002da09:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002da10:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002da15:	83 c0 01             	add    eax,0x1
c002da18:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002da1d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002da22:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002da28:	83 ec 08             	sub    esp,0x8
c002da2b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002da2e:	50                   	push   eax
c002da2f:	e8 44 d9 fe ff       	call   c001b378 <Device::addChild(Device*)>
c002da34:	83 c4 10             	add    esp,0x10
c002da37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002da3a:	8b 00                	mov    eax,DWORD PTR [eax]
c002da3c:	83 c0 08             	add    eax,0x8
c002da3f:	8b 00                	mov    eax,DWORD PTR [eax]
c002da41:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002da45:	6a 00                	push   0x0
c002da47:	6a 00                	push   0x0
c002da49:	52                   	push   edx
c002da4a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002da4d:	ff d0                	call   eax
c002da4f:	83 c4 10             	add    esp,0x10
c002da52:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002da55:	83 c0 01             	add    eax,0x1
c002da58:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002da5b:	e9 68 ff ff ff       	jmp    c002d9c8 <apicOpen()+0x1e>
c002da60:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002da67:	e8 d0 fe ff ff       	call   c002d93c <apicGetBase()>
c002da6c:	05 f0 00 00 00       	add    eax,0xf0
c002da71:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002da74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002da77:	8b 00                	mov    eax,DWORD PTR [eax]
c002da79:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002da7c:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002da83:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002da8a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002da8d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002da90:	89 10                	mov    DWORD PTR [eax],edx
c002da92:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002da99:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002da9e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002daa1:	7d 7c                	jge    c002db1f <apicOpen()+0x175>
c002daa3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002daa6:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002daad:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002dab0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dab3:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002daba:	c1 e8 08             	shr    eax,0x8
c002dabd:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002dac1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dac4:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002dacb:	c1 e8 18             	shr    eax,0x18
c002dace:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002dad1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002dad5:	3d ff 00 00 00       	cmp    eax,0xff
c002dada:	75 3a                	jne    c002db16 <apicOpen()+0x16c>
c002dadc:	e8 5b fe ff ff       	call   c002d93c <apicGetBase()>
c002dae1:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002dae5:	83 fa 01             	cmp    edx,0x1
c002dae8:	75 07                	jne    c002daf1 <apicOpen()+0x147>
c002daea:	ba 60 03 00 00       	mov    edx,0x360
c002daef:	eb 05                	jmp    c002daf6 <apicOpen()+0x14c>
c002daf1:	ba 50 03 00 00       	mov    edx,0x350
c002daf6:	01 d0                	add    eax,edx
c002daf8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dafb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dafe:	8b 00                	mov    eax,DWORD PTR [eax]
c002db00:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002db03:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002db0a:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002db0e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002db11:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002db14:	89 10                	mov    DWORD PTR [eax],edx
c002db16:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002db1a:	e9 7a ff ff ff       	jmp    c002da99 <apicOpen()+0xef>
c002db1f:	90                   	nop
c002db20:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002db23:	c9                   	leave  
c002db24:	c3                   	ret    
c002db25:	90                   	nop

c002db26 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002db26:	55                   	push   ebp
c002db27:	89 e5                	mov    ebp,esp
c002db29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002db32:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002db35:	72 1d                	jb     c002db54 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002db37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db3a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db43:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002db49:	01 d0                	add    eax,edx
c002db4b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002db4e:	73 04                	jae    c002db54 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002db50:	b0 01                	mov    al,0x1
c002db52:	eb 02                	jmp    c002db56 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002db54:	b0 00                	mov    al,0x0
c002db56:	5d                   	pop    ebp
c002db57:	c3                   	ret    

c002db58 <IOAPIC::read(int)>:
c002db58:	55                   	push   ebp
c002db59:	89 e5                	mov    ebp,esp
c002db5b:	83 ec 10             	sub    esp,0x10
c002db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002db67:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002db6a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002db6d:	0f b6 d0             	movzx  edx,al
c002db70:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db73:	89 10                	mov    DWORD PTR [eax],edx
c002db75:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db78:	83 c0 10             	add    eax,0x10
c002db7b:	8b 00                	mov    eax,DWORD PTR [eax]
c002db7d:	c9                   	leave  
c002db7e:	c3                   	ret    
c002db7f:	90                   	nop

c002db80 <IOAPIC::open(int, int, void*)>:
c002db80:	55                   	push   ebp
c002db81:	89 e5                	mov    ebp,esp
c002db83:	57                   	push   edi
c002db84:	56                   	push   esi
c002db85:	53                   	push   ebx
c002db86:	83 ec 04             	sub    esp,0x4
c002db89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db8c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002db8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002db95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002db9e:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002dba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dba8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dbae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002dbb7:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002dbbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbc1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002dbc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002dbd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dbd3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dbd9:	0f b6 f0             	movzx  esi,al
c002dbdc:	89 d0                	mov    eax,edx
c002dbde:	ba 00 00 00 00       	mov    edx,0x0
c002dbe3:	89 c7                	mov    edi,eax
c002dbe5:	83 e7 ff             	and    edi,0xffffffff
c002dbe8:	89 f9                	mov    ecx,edi
c002dbea:	0f b6 da             	movzx  ebx,dl
c002dbed:	89 c8                	mov    eax,ecx
c002dbef:	89 da                	mov    edx,ebx
c002dbf1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002dbf4:	8d 5e 08             	lea    ebx,[esi+0x8]
c002dbf7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002dbfb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002dbff:	83 e0 00             	and    eax,0x0
c002dc02:	09 d0                	or     eax,edx
c002dc04:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002dc08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc0b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dc11:	8d 50 01             	lea    edx,[eax+0x1]
c002dc14:	88 d1                	mov    cl,dl
c002dc16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002dc19:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002dc1f:	0f b6 d0             	movzx  edx,al
c002dc22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc25:	83 c2 08             	add    edx,0x8
c002dc28:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002dc2c:	0f b6 c9             	movzx  ecx,cl
c002dc2f:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002dc35:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002dc39:	6a 01                	push   0x1
c002dc3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc3e:	e8 15 ff ff ff       	call   c002db58 <IOAPIC::read(int)>
c002dc43:	83 c4 08             	add    esp,0x8
c002dc46:	c1 f8 10             	sar    eax,0x10
c002dc49:	0f b6 c0             	movzx  eax,al
c002dc4c:	8d 50 01             	lea    edx,[eax+0x1]
c002dc4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc52:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dc58:	b8 00 00 00 00       	mov    eax,0x0
c002dc5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c002dc60:	5b                   	pop    ebx
c002dc61:	5e                   	pop    esi
c002dc62:	5f                   	pop    edi
c002dc63:	5d                   	pop    ebp
c002dc64:	c3                   	ret    
c002dc65:	90                   	nop

c002dc66 <IOAPIC::write(int, int)>:
c002dc66:	55                   	push   ebp
c002dc67:	89 e5                	mov    ebp,esp
c002dc69:	83 ec 10             	sub    esp,0x10
c002dc6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dc6f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dc75:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dc78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dc7b:	0f b6 d0             	movzx  edx,al
c002dc7e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dc81:	89 10                	mov    DWORD PTR [eax],edx
c002dc83:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dc86:	8d 50 10             	lea    edx,[eax+0x10]
c002dc89:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dc8c:	89 02                	mov    DWORD PTR [edx],eax
c002dc8e:	90                   	nop
c002dc8f:	c9                   	leave  
c002dc90:	c3                   	ret    
c002dc91:	90                   	nop

c002dc92 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002dc92:	55                   	push   ebp
c002dc93:	89 e5                	mov    ebp,esp
c002dc95:	53                   	push   ebx
c002dc96:	83 ec 2c             	sub    esp,0x2c
c002dc99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dc9c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002dc9f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dca2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002dca5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002dca8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dcab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002dcae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002dcb1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002dcb4:	88 d8                	mov    al,bl
c002dcb6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002dcb9:	88 c8                	mov    al,cl
c002dcbb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002dcbe:	88 d0                	mov    al,dl
c002dcc0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002dcc3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dcc7:	83 c0 08             	add    eax,0x8
c002dcca:	d1 e0                	shl    eax,1
c002dccc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002dccf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dcd3:	83 c0 08             	add    eax,0x8
c002dcd6:	d1 e0                	shl    eax,1
c002dcd8:	83 c0 01             	add    eax,0x1
c002dcdb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dcde:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dce1:	50                   	push   eax
c002dce2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dce5:	e8 6e fe ff ff       	call   c002db58 <IOAPIC::read(int)>
c002dcea:	83 c4 08             	add    esp,0x8
c002dced:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dcf0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dcf7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dcfa:	c1 e0 18             	shl    eax,0x18
c002dcfd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dd00:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dd03:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dd06:	52                   	push   edx
c002dd07:	50                   	push   eax
c002dd08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dd0b:	e8 56 ff ff ff       	call   c002dc66 <IOAPIC::write(int, int)>
c002dd10:	83 c4 0c             	add    esp,0xc
c002dd13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dd16:	50                   	push   eax
c002dd17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dd1a:	e8 39 fe ff ff       	call   c002db58 <IOAPIC::read(int)>
c002dd1f:	83 c4 08             	add    esp,0x8
c002dd22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dd25:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dd2c:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dd33:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dd3a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dd3e:	85 c0                	test   eax,eax
c002dd40:	74 09                	je     c002dd4b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dd42:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dd49:	eb 07                	jmp    c002dd52 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dd4b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dd52:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dd56:	85 c0                	test   eax,eax
c002dd58:	74 09                	je     c002dd63 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dd5a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dd61:	eb 07                	jmp    c002dd6a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dd63:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dd6a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dd71:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dd75:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dd78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dd7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dd7e:	52                   	push   edx
c002dd7f:	50                   	push   eax
c002dd80:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dd83:	e8 de fe ff ff       	call   c002dc66 <IOAPIC::write(int, int)>
c002dd88:	83 c4 0c             	add    esp,0xc
c002dd8b:	90                   	nop
c002dd8c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dd8f:	c9                   	leave  
c002dd90:	c3                   	ret    
c002dd91:	66 90                	xchg   ax,ax
c002dd93:	90                   	nop

c002dd94 <APICTimer::close(int, int, void*)>:
c002dd94:	b8 00 00 00 00       	mov    eax,0x0
c002dd99:	c3                   	ret    
c002dd9a:	66 90                	xchg   ax,ax

c002dd9c <apicTimerHandler(regs*, void*)>:
c002dd9c:	83 ec 0c             	sub    esp,0xc
c002dd9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dda3:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dda5:	b8 10 27 00 00       	mov    eax,0x2710
c002ddaa:	ba 00 00 00 00       	mov    edx,0x0
c002ddaf:	f7 f1                	div    ecx
c002ddb1:	83 ec 0c             	sub    esp,0xc
c002ddb4:	50                   	push   eax
c002ddb5:	e8 36 f0 fe ff       	call   c001cdf0 <timerHandler(unsigned int)>
c002ddba:	83 c4 10             	add    esp,0x10
c002ddbd:	90                   	nop
c002ddbe:	83 c4 0c             	add    esp,0xc
c002ddc1:	c3                   	ret    
c002ddc2:	66 90                	xchg   ax,ax

c002ddc4 <APICTimer::open(int, int, void*)>:
c002ddc4:	83 ec 0c             	sub    esp,0xc
c002ddc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddcb:	8b 00                	mov    eax,DWORD PTR [eax]
c002ddcd:	83 c0 24             	add    eax,0x24
c002ddd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ddd2:	83 ec 08             	sub    esp,0x8
c002ddd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ddd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dddd:	ff d0                	call   eax
c002dddf:	83 c4 10             	add    esp,0x10
c002dde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dde6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002ddea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002ddf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002ddf8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002ddfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002de02:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002de08:	83 ec 0c             	sub    esp,0xc
c002de0b:	51                   	push   ecx
c002de0c:	6a 01                	push   0x1
c002de0e:	68 9c dd 02 c0       	push   0xc002dd9c
c002de13:	52                   	push   edx
c002de14:	50                   	push   eax
c002de15:	e8 0a d5 fe ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002de1a:	83 c4 20             	add    esp,0x20
c002de1d:	89 c2                	mov    edx,eax
c002de1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de23:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002de29:	b8 00 00 00 00       	mov    eax,0x0
c002de2e:	83 c4 0c             	add    esp,0xc
c002de31:	c3                   	ret    
c002de32:	66 90                	xchg   ax,ax

c002de34 <APICTimer::write(int)>:
c002de34:	83 ec 0c             	sub    esp,0xc
c002de37:	83 ec 0c             	sub    esp,0xc
c002de3a:	68 dc 3b 03 c0       	push   0xc0033bdc
c002de3f:	e8 26 24 ff ff       	call   c002026a <KePanic(char const*)>
c002de44:	83 c4 10             	add    esp,0x10
c002de47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de4b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002de4f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002de55:	90                   	nop
c002de56:	83 c4 0c             	add    esp,0xc
c002de59:	c3                   	ret    
c002de5a:	66 90                	xchg   ax,ax

c002de5c <APICTimer::APICTimer()>:
c002de5c:	83 ec 0c             	sub    esp,0xc
c002de5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de63:	83 ec 08             	sub    esp,0x8
c002de66:	68 ec 3b 03 c0       	push   0xc0033bec
c002de6b:	50                   	push   eax
c002de6c:	e8 b3 ee fe ff       	call   c001cd24 <Timer::Timer(char const*)>
c002de71:	83 c4 10             	add    esp,0x10
c002de74:	ba 00 3c 03 c0       	mov    edx,0xc0033c00
c002de79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de7d:	89 10                	mov    DWORD PTR [eax],edx
c002de7f:	90                   	nop
c002de80:	83 c4 0c             	add    esp,0xc
c002de83:	c3                   	ret    

c002de84 <PIT::write(int)>:
c002de84:	83 ec 10             	sub    esp,0x10
c002de87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002de8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002de8f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002de95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002de99:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002de9e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002dea3:	89 c2                	mov    edx,eax
c002dea5:	c1 fa 1f             	sar    edx,0x1f
c002dea8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002deac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002deb0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002deb7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002debc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002dec0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002dec5:	ee                   	out    dx,al
c002dec6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002deca:	0f b6 c0             	movzx  eax,al
c002decd:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002ded4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002ded8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002dedc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002dee1:	ee                   	out    dx,al
c002dee2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dee6:	c1 f8 08             	sar    eax,0x8
c002dee9:	0f b6 c0             	movzx  eax,al
c002deec:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002def3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002def7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002defb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002df00:	ee                   	out    dx,al
c002df01:	90                   	nop
c002df02:	83 c4 10             	add    esp,0x10
c002df05:	c3                   	ret    
c002df06:	66 90                	xchg   ax,ax

c002df08 <pitHandler(regs*, void*)>:
c002df08:	83 ec 0c             	sub    esp,0xc
c002df0b:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002df11:	b8 10 27 00 00       	mov    eax,0x2710
c002df16:	89 c2                	mov    edx,eax
c002df18:	c1 fa 1f             	sar    edx,0x1f
c002df1b:	f7 f9                	idiv   ecx
c002df1d:	83 ec 0c             	sub    esp,0xc
c002df20:	50                   	push   eax
c002df21:	e8 ca ee fe ff       	call   c001cdf0 <timerHandler(unsigned int)>
c002df26:	83 c4 10             	add    esp,0x10
c002df29:	90                   	nop
c002df2a:	83 c4 0c             	add    esp,0xc
c002df2d:	c3                   	ret    
c002df2e:	66 90                	xchg   ax,ax

c002df30 <PIT::open(int, int, void*)>:
c002df30:	83 ec 0c             	sub    esp,0xc
c002df33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df37:	8b 00                	mov    eax,DWORD PTR [eax]
c002df39:	83 c0 24             	add    eax,0x24
c002df3c:	8b 00                	mov    eax,DWORD PTR [eax]
c002df3e:	83 ec 08             	sub    esp,0x8
c002df41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002df49:	ff d0                	call   eax
c002df4b:	83 c4 10             	add    esp,0x10
c002df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df52:	83 ec 0c             	sub    esp,0xc
c002df55:	6a 00                	push   0x0
c002df57:	6a 01                	push   0x1
c002df59:	68 08 df 02 c0       	push   0xc002df08
c002df5e:	6a 00                	push   0x0
c002df60:	50                   	push   eax
c002df61:	e8 be d3 fe ff       	call   c001b324 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002df66:	83 c4 20             	add    esp,0x20
c002df69:	89 c2                	mov    edx,eax
c002df6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df6f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002df75:	b8 00 00 00 00       	mov    eax,0x0
c002df7a:	83 c4 0c             	add    esp,0xc
c002df7d:	c3                   	ret    
c002df7e:	66 90                	xchg   ax,ax

c002df80 <PIT::close(int, int, void*)>:
c002df80:	83 ec 0c             	sub    esp,0xc
c002df83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df87:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002df91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002df95:	6a 01                	push   0x1
c002df97:	68 08 df 02 c0       	push   0xc002df08
c002df9c:	6a 00                	push   0x0
c002df9e:	50                   	push   eax
c002df9f:	e8 b6 d3 fe ff       	call   c001b35a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002dfa4:	83 c4 10             	add    esp,0x10
c002dfa7:	b8 00 00 00 00       	mov    eax,0x0
c002dfac:	83 c4 0c             	add    esp,0xc
c002dfaf:	c3                   	ret    

c002dfb0 <PIT::PIT()>:
c002dfb0:	83 ec 0c             	sub    esp,0xc
c002dfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfb7:	83 ec 08             	sub    esp,0x8
c002dfba:	68 28 3c 03 c0       	push   0xc0033c28
c002dfbf:	50                   	push   eax
c002dfc0:	e8 5f ed fe ff       	call   c001cd24 <Timer::Timer(char const*)>
c002dfc5:	83 c4 10             	add    esp,0x10
c002dfc8:	ba 50 3c 03 c0       	mov    edx,0xc0033c50
c002dfcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfd1:	89 10                	mov    DWORD PTR [eax],edx
c002dfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfd7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dfdd:	0f b6 d0             	movzx  edx,al
c002dfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfe4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002dfeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dfef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dff5:	0f b6 d0             	movzx  edx,al
c002dff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dffc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002e001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e005:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002e00b:	8d 50 01             	lea    edx,[eax+0x1]
c002e00e:	88 d1                	mov    cl,dl
c002e010:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002e014:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002e01a:	0f b6 d0             	movzx  edx,al
c002e01d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e021:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002e025:	83 e1 3f             	and    ecx,0x3f
c002e028:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002e02c:	90                   	nop
c002e02d:	83 c4 0c             	add    esp,0xc
c002e030:	c3                   	ret    
c002e031:	66 90                	xchg   ax,ax
c002e033:	66 90                	xchg   ax,ax
c002e035:	66 90                	xchg   ax,ax
c002e037:	66 90                	xchg   ax,ax
c002e039:	66 90                	xchg   ax,ax
c002e03b:	66 90                	xchg   ax,ax
c002e03d:	66 90                	xchg   ax,ax
c002e03f:	90                   	nop

c002e040 <avxDetect>:
c002e040:	b8 01 00 00 00       	mov    eax,0x1
c002e045:	0f a2                	cpuid  
c002e047:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002e04d:	74 15                	je     c002e064 <avxDetect.noAVX>
c002e04f:	b8 01 00 00 00       	mov    eax,0x1
c002e054:	0f a2                	cpuid  
c002e056:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002e05c:	74 06                	je     c002e064 <avxDetect.noAVX>
c002e05e:	b8 01 00 00 00       	mov    eax,0x1
c002e063:	c3                   	ret    

c002e064 <avxDetect.noAVX>:
c002e064:	b8 00 00 00 00       	mov    eax,0x0
c002e069:	c3                   	ret    

c002e06a <avxSave>:
c002e06a:	53                   	push   ebx
c002e06b:	52                   	push   edx
c002e06c:	31 c0                	xor    eax,eax
c002e06e:	48                   	dec    eax
c002e06f:	89 c2                	mov    edx,eax
c002e071:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e075:	0f ae 23             	xsave  [ebx]
c002e078:	5a                   	pop    edx
c002e079:	5b                   	pop    ebx
c002e07a:	c3                   	ret    

c002e07b <avxLoad>:
c002e07b:	53                   	push   ebx
c002e07c:	52                   	push   edx
c002e07d:	31 c0                	xor    eax,eax
c002e07f:	48                   	dec    eax
c002e080:	89 c2                	mov    edx,eax
c002e082:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e086:	0f ae 2b             	xrstor [ebx]
c002e089:	5a                   	pop    edx
c002e08a:	5b                   	pop    ebx
c002e08b:	c3                   	ret    

c002e08c <avxInit>:
c002e08c:	e8 47 03 00 00       	call   c002e3d8 <sseInit>
c002e091:	50                   	push   eax
c002e092:	51                   	push   ecx
c002e093:	0f 20 e0             	mov    eax,cr4
c002e096:	0d 00 00 04 00       	or     eax,0x40000
c002e09b:	0f 22 e0             	mov    cr4,eax
c002e09e:	31 c9                	xor    ecx,ecx
c002e0a0:	0f 01 d0             	xgetbv 
c002e0a3:	0d 07 00 00 00       	or     eax,0x7
c002e0a8:	0f 01 d1             	xsetbv 
c002e0ab:	59                   	pop    ecx
c002e0ac:	58                   	pop    eax
c002e0ad:	c3                   	ret    

c002e0ae <avxClose>:
c002e0ae:	c3                   	ret    
c002e0af:	90                   	nop

c002e0b0 <isr0>:
c002e0b0:	fa                   	cli    
c002e0b1:	68 00 00 00 00       	push   0x0
c002e0b6:	68 00 00 00 00       	push   0x0
c002e0bb:	e9 56 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0c0 <isr1>:
c002e0c0:	fa                   	cli    
c002e0c1:	6a 00                	push   0x0
c002e0c3:	6a 01                	push   0x1
c002e0c5:	e9 4c 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0ca <isr2>:
c002e0ca:	fa                   	cli    
c002e0cb:	6a 00                	push   0x0
c002e0cd:	6a 02                	push   0x2
c002e0cf:	e9 42 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0d4 <isr3>:
c002e0d4:	fa                   	cli    
c002e0d5:	6a 00                	push   0x0
c002e0d7:	6a 03                	push   0x3
c002e0d9:	e9 38 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0de <isr4>:
c002e0de:	fa                   	cli    
c002e0df:	6a 00                	push   0x0
c002e0e1:	6a 04                	push   0x4
c002e0e3:	e9 2e 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0e8 <isr5>:
c002e0e8:	fa                   	cli    
c002e0e9:	6a 00                	push   0x0
c002e0eb:	6a 05                	push   0x5
c002e0ed:	e9 24 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0f2 <isr6>:
c002e0f2:	fa                   	cli    
c002e0f3:	6a 00                	push   0x0
c002e0f5:	6a 06                	push   0x6
c002e0f7:	e9 1a 01 00 00       	jmp    c002e216 <int_common_stub>

c002e0fc <isr7>:
c002e0fc:	fa                   	cli    
c002e0fd:	6a 00                	push   0x0
c002e0ff:	6a 07                	push   0x7
c002e101:	e9 10 01 00 00       	jmp    c002e216 <int_common_stub>

c002e106 <isr8>:
c002e106:	fa                   	cli    
c002e107:	6a 08                	push   0x8
c002e109:	e9 08 01 00 00       	jmp    c002e216 <int_common_stub>

c002e10e <isr9>:
c002e10e:	fa                   	cli    
c002e10f:	6a 00                	push   0x0
c002e111:	6a 09                	push   0x9
c002e113:	e9 fe 00 00 00       	jmp    c002e216 <int_common_stub>

c002e118 <isr10>:
c002e118:	fa                   	cli    
c002e119:	6a 0a                	push   0xa
c002e11b:	e9 f6 00 00 00       	jmp    c002e216 <int_common_stub>

c002e120 <isr11>:
c002e120:	fa                   	cli    
c002e121:	6a 0b                	push   0xb
c002e123:	e9 ee 00 00 00       	jmp    c002e216 <int_common_stub>

c002e128 <isr12>:
c002e128:	fa                   	cli    
c002e129:	6a 0c                	push   0xc
c002e12b:	e9 e6 00 00 00       	jmp    c002e216 <int_common_stub>

c002e130 <isr13>:
c002e130:	fa                   	cli    
c002e131:	6a 0d                	push   0xd
c002e133:	53                   	push   ebx
c002e134:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e138:	81 fb 06 e3 02 c0    	cmp    ebx,0xc002e306
c002e13e:	5b                   	pop    ebx
c002e13f:	0f 84 c3 01 00 00    	je     c002e308 <finishSignal2>
c002e145:	e9 cc 00 00 00       	jmp    c002e216 <int_common_stub>

c002e14a <isr14>:
c002e14a:	fa                   	cli    
c002e14b:	6a 0e                	push   0xe
c002e14d:	e9 c4 00 00 00       	jmp    c002e216 <int_common_stub>

c002e152 <isr15>:
c002e152:	fa                   	cli    
c002e153:	6a 00                	push   0x0
c002e155:	6a 0f                	push   0xf
c002e157:	e9 ba 00 00 00       	jmp    c002e216 <int_common_stub>

c002e15c <isr16>:
c002e15c:	fa                   	cli    
c002e15d:	6a 00                	push   0x0
c002e15f:	6a 10                	push   0x10
c002e161:	e9 b0 00 00 00       	jmp    c002e216 <int_common_stub>

c002e166 <isr17>:
c002e166:	fa                   	cli    
c002e167:	6a 00                	push   0x0
c002e169:	6a 11                	push   0x11
c002e16b:	e9 a6 00 00 00       	jmp    c002e216 <int_common_stub>

c002e170 <isr18>:
c002e170:	fa                   	cli    
c002e171:	6a 00                	push   0x0
c002e173:	6a 12                	push   0x12
c002e175:	e9 9c 00 00 00       	jmp    c002e216 <int_common_stub>

c002e17a <irq3>:
c002e17a:	fa                   	cli    
c002e17b:	6a 00                	push   0x0
c002e17d:	6a 23                	push   0x23
c002e17f:	e9 92 00 00 00       	jmp    c002e216 <int_common_stub>

c002e184 <irq4>:
c002e184:	fa                   	cli    
c002e185:	6a 00                	push   0x0
c002e187:	6a 24                	push   0x24
c002e189:	e9 88 00 00 00       	jmp    c002e216 <int_common_stub>

c002e18e <irq5>:
c002e18e:	fa                   	cli    
c002e18f:	6a 00                	push   0x0
c002e191:	6a 25                	push   0x25
c002e193:	e9 7e 00 00 00       	jmp    c002e216 <int_common_stub>

c002e198 <irq6>:
c002e198:	fa                   	cli    
c002e199:	6a 00                	push   0x0
c002e19b:	6a 26                	push   0x26
c002e19d:	e9 74 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1a2 <irq7>:
c002e1a2:	fa                   	cli    
c002e1a3:	6a 00                	push   0x0
c002e1a5:	6a 27                	push   0x27
c002e1a7:	e9 6a 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1ac <irq8>:
c002e1ac:	fa                   	cli    
c002e1ad:	6a 00                	push   0x0
c002e1af:	6a 28                	push   0x28
c002e1b1:	e9 60 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1b6 <irq9>:
c002e1b6:	fa                   	cli    
c002e1b7:	6a 00                	push   0x0
c002e1b9:	6a 29                	push   0x29
c002e1bb:	e9 56 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1c0 <irq10>:
c002e1c0:	fa                   	cli    
c002e1c1:	6a 00                	push   0x0
c002e1c3:	6a 2a                	push   0x2a
c002e1c5:	e9 4c 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1ca <irq11>:
c002e1ca:	fa                   	cli    
c002e1cb:	6a 00                	push   0x0
c002e1cd:	6a 2b                	push   0x2b
c002e1cf:	e9 42 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1d4 <irq12>:
c002e1d4:	fa                   	cli    
c002e1d5:	6a 00                	push   0x0
c002e1d7:	6a 2c                	push   0x2c
c002e1d9:	e9 38 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1de <irq13>:
c002e1de:	fa                   	cli    
c002e1df:	6a 00                	push   0x0
c002e1e1:	6a 2d                	push   0x2d
c002e1e3:	e9 2e 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1e8 <irq14>:
c002e1e8:	fa                   	cli    
c002e1e9:	6a 00                	push   0x0
c002e1eb:	6a 2e                	push   0x2e
c002e1ed:	e9 24 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1f2 <irq15>:
c002e1f2:	fa                   	cli    
c002e1f3:	6a 00                	push   0x0
c002e1f5:	6a 2f                	push   0x2f
c002e1f7:	e9 1a 00 00 00       	jmp    c002e216 <int_common_stub>

c002e1fc <irq1>:
c002e1fc:	fa                   	cli    
c002e1fd:	6a 00                	push   0x0
c002e1ff:	6a 21                	push   0x21
c002e201:	eb 13                	jmp    c002e216 <int_common_stub>

c002e203 <irq2>:
c002e203:	fa                   	cli    
c002e204:	6a 00                	push   0x0
c002e206:	6a 22                	push   0x22
c002e208:	eb 0c                	jmp    c002e216 <int_common_stub>

c002e20a <isr96>:
c002e20a:	6a 00                	push   0x0
c002e20c:	6a 60                	push   0x60
c002e20e:	fb                   	sti    
c002e20f:	eb 37                	jmp    c002e248 <syscall_common_stub>

c002e211 <irq0>:
c002e211:	fa                   	cli    
c002e212:	6a 00                	push   0x0
c002e214:	6a 20                	push   0x20

c002e216 <int_common_stub>:
c002e216:	60                   	pusha  
c002e217:	1e                   	push   ds
c002e218:	06                   	push   es
c002e219:	0f a0                	push   fs
c002e21b:	0f a8                	push   gs
c002e21d:	66 b8 10 00          	mov    ax,0x10
c002e221:	66 8e d8             	mov    ds,ax
c002e224:	66 8e c0             	mov    es,ax
c002e227:	66 8e e0             	mov    fs,ax
c002e22a:	66 8e e8             	mov    gs,ax
c002e22d:	54                   	push   esp
c002e22e:	fc                   	cld    
c002e22f:	e8 04 d6 fe ff       	call   c001b838 <int_handler>
c002e234:	81 c4 04 00 00 00    	add    esp,0x4
c002e23a:	0f a9                	pop    gs
c002e23c:	0f a1                	pop    fs
c002e23e:	07                   	pop    es
c002e23f:	1f                   	pop    ds
c002e240:	61                   	popa   
c002e241:	81 c4 08 00 00 00    	add    esp,0x8
c002e247:	cf                   	iret   

c002e248 <syscall_common_stub>:
c002e248:	60                   	pusha  
c002e249:	1e                   	push   ds
c002e24a:	06                   	push   es
c002e24b:	0f a0                	push   fs
c002e24d:	0f a8                	push   gs
c002e24f:	66 b8 10 00          	mov    ax,0x10
c002e253:	66 8e d8             	mov    ds,ax
c002e256:	66 8e c0             	mov    es,ax
c002e259:	66 8e e0             	mov    fs,ax
c002e25c:	66 8e e8             	mov    gs,ax
c002e25f:	54                   	push   esp
c002e260:	fc                   	cld    
c002e261:	e8 d2 d5 fe ff       	call   c001b838 <int_handler>
c002e266:	81 c4 04 00 00 00    	add    esp,0x4
c002e26c:	0f a9                	pop    gs
c002e26e:	0f a1                	pop    fs
c002e270:	07                   	pop    es
c002e271:	1f                   	pop    ds
c002e272:	e8 19 2a ff ff       	call   c0020c90 <KiCheckSignalZ>
c002e277:	3d 00 00 00 00       	cmp    eax,0x0
c002e27c:	0f 84 c0 00 00 00    	je     c002e342 <skipSignals>
c002e282:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e287:	61                   	popa   
c002e288:	53                   	push   ebx
c002e289:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e28f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e292:	5b                   	pop    ebx
c002e293:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e298:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e29b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e29e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e2a1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e2a4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e2a7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e2aa:	81 c4 08 00 00 00    	add    esp,0x8
c002e2b0:	5e                   	pop    esi
c002e2b1:	5b                   	pop    ebx
c002e2b2:	59                   	pop    ecx
c002e2b3:	5a                   	pop    edx
c002e2b4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e2b7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e2ba:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e2bd:	52                   	push   edx
c002e2be:	51                   	push   ecx
c002e2bf:	53                   	push   ebx
c002e2c0:	56                   	push   esi
c002e2c1:	81 ec 08 00 00 00    	sub    esp,0x8
c002e2c7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e2ca:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e2cd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e2d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e2d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e2d6:	60                   	pusha  
c002e2d7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e2dd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e2e0:	89 e3                	mov    ebx,esp
c002e2e2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e2e5:	52                   	push   edx
c002e2e6:	68 06 e3 02 c0       	push   0xc002e306
c002e2eb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e2ee:	89 dc                	mov    esp,ebx
c002e2f0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e2f3:	68 23 00 00 00       	push   0x23
c002e2f8:	51                   	push   ecx
c002e2f9:	68 02 02 00 00       	push   0x202
c002e2fe:	68 1b 00 00 00       	push   0x1b
c002e303:	ff 36                	push   DWORD PTR [esi]
c002e305:	cf                   	iret   

c002e306 <finishSignal>:
c002e306:	cd 0f                	int    0xf

c002e308 <finishSignal2>:
c002e308:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e30e:	e8 fa 29 ff ff       	call   c0020d0d <KiFinishSignalZ>
c002e313:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e319:	68 23 00 00 00       	push   0x23
c002e31e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e321:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e324:	68 1b 00 00 00       	push   0x1b
c002e329:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e32c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e32f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e332:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e335:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e338:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e33b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e33e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e341:	cf                   	iret   

c002e342 <skipSignals>:
c002e342:	61                   	popa   
c002e343:	81 c4 08 00 00 00    	add    esp,0x8
c002e349:	cf                   	iret   
c002e34a:	90                   	nop
c002e34b:	90                   	nop

c002e34c <irq16>:
c002e34c:	fa                   	cli    
c002e34d:	6a 00                	push   0x0
c002e34f:	6a 30                	push   0x30
c002e351:	e9 c0 fe ff ff       	jmp    c002e216 <int_common_stub>

c002e356 <irq17>:
c002e356:	fa                   	cli    
c002e357:	6a 00                	push   0x0
c002e359:	6a 31                	push   0x31
c002e35b:	e9 b6 fe ff ff       	jmp    c002e216 <int_common_stub>

c002e360 <irq18>:
c002e360:	fa                   	cli    
c002e361:	6a 00                	push   0x0
c002e363:	6a 32                	push   0x32
c002e365:	e9 ac fe ff ff       	jmp    c002e216 <int_common_stub>

c002e36a <irq19>:
c002e36a:	fa                   	cli    
c002e36b:	6a 00                	push   0x0
c002e36d:	6a 33                	push   0x33
c002e36f:	e9 a2 fe ff ff       	jmp    c002e216 <int_common_stub>

c002e374 <irq20>:
c002e374:	fa                   	cli    
c002e375:	6a 00                	push   0x0
c002e377:	6a 34                	push   0x34
c002e379:	e9 98 fe ff ff       	jmp    c002e216 <int_common_stub>

c002e37e <irq21>:
c002e37e:	fa                   	cli    
c002e37f:	6a 00                	push   0x0
c002e381:	6a 35                	push   0x35
c002e383:	e9 8e fe ff ff       	jmp    c002e216 <int_common_stub>

c002e388 <irq22>:
c002e388:	fa                   	cli    
c002e389:	6a 00                	push   0x0
c002e38b:	6a 36                	push   0x36
c002e38d:	e9 84 fe ff ff       	jmp    c002e216 <int_common_stub>

c002e392 <irq23>:
c002e392:	fa                   	cli    
c002e393:	6a 00                	push   0x0
c002e395:	6a 37                	push   0x37
c002e397:	e9 7a fe ff ff       	jmp    c002e216 <int_common_stub>
c002e39c:	66 90                	xchg   ax,ax
c002e39e:	66 90                	xchg   ax,ax

c002e3a0 <i386GetRDRAND>:
c002e3a0:	b9 64 00 00 00       	mov    ecx,0x64

c002e3a5 <retry>:
c002e3a5:	0f c7 f0             	rdrand eax
c002e3a8:	72 05                	jb     c002e3af <retry.done>
c002e3aa:	e2 f9                	loop   c002e3a5 <retry>

c002e3ac <retry.fail>:
c002e3ac:	31 c0                	xor    eax,eax
c002e3ae:	c3                   	ret    

c002e3af <retry.done>:
c002e3af:	c3                   	ret    

c002e3b0 <sseDetect>:
c002e3b0:	b8 01 00 00 00       	mov    eax,0x1
c002e3b5:	0f a2                	cpuid  
c002e3b7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e3bd:	74 06                	je     c002e3c5 <sseDetect.noSSE>
c002e3bf:	b8 01 00 00 00       	mov    eax,0x1
c002e3c4:	c3                   	ret    

c002e3c5 <sseDetect.noSSE>:
c002e3c5:	31 c0                	xor    eax,eax
c002e3c7:	c3                   	ret    

c002e3c8 <sseSave>:
c002e3c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e3cc:	0f ae 00             	fxsave [eax]
c002e3cf:	c3                   	ret    

c002e3d0 <sseLoad>:
c002e3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e3d4:	0f ae 08             	fxrstor [eax]
c002e3d7:	c3                   	ret    

c002e3d8 <sseInit>:
c002e3d8:	e8 42 00 00 00       	call   c002e41f <x87Init>
c002e3dd:	0f 20 e0             	mov    eax,cr4
c002e3e0:	66 0d 00 06          	or     ax,0x600
c002e3e4:	0f 22 e0             	mov    cr4,eax
c002e3e7:	c3                   	ret    

c002e3e8 <sseClose>:
c002e3e8:	c3                   	ret    
c002e3e9:	66 90                	xchg   ax,ax
c002e3eb:	66 90                	xchg   ax,ax
c002e3ed:	66 90                	xchg   ax,ax
c002e3ef:	90                   	nop

c002e3f0 <value_37F>:
c002e3f0:	7f 03                	jg     c002e3f5 <value_37A+0x1>

c002e3f2 <value_37E>:
c002e3f2:	7e 03                	jle    c002e3f7 <x87Detect+0x1>

c002e3f4 <value_37A>:
c002e3f4:	7a 03                	jp     c002e3f9 <x87Detect+0x3>

c002e3f6 <x87Detect>:
c002e3f6:	b8 01 00 00 00       	mov    eax,0x1
c002e3fb:	0f a2                	cpuid  
c002e3fd:	f7 c2 01 00 00 00    	test   edx,0x1
c002e403:	74 06                	je     c002e40b <x87Detect.nox87>
c002e405:	b8 01 00 00 00       	mov    eax,0x1
c002e40a:	c3                   	ret    

c002e40b <x87Detect.nox87>:
c002e40b:	b8 00 00 00 00       	mov    eax,0x0
c002e410:	c3                   	ret    

c002e411 <x87Save>:
c002e411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e415:	dd 30                	fnsave [eax]
c002e417:	c3                   	ret    

c002e418 <x87Load>:
c002e418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e41c:	dd 20                	frstor [eax]
c002e41e:	c3                   	ret    

c002e41f <x87Init>:
c002e41f:	0f 20 c0             	mov    eax,cr0
c002e422:	66 25 fb ff          	and    ax,0xfffb
c002e426:	66 0d 22 00          	or     ax,0x22
c002e42a:	0f 22 c0             	mov    cr0,eax
c002e42d:	db e3                	fninit 
c002e42f:	0f 06                	clts   
c002e431:	d9 2d f4 e3 02 c0    	fldcw  WORD PTR ds:0xc002e3f4
c002e437:	c3                   	ret    

c002e438 <x87Close>:
c002e438:	c3                   	ret    
c002e439:	66 90                	xchg   ax,ax
c002e43b:	90                   	nop

c002e43c <__do_global_ctors_aux>:
c002e43c:	a1 f0 f3 02 c0       	mov    eax,ds:0xc002f3f0
c002e441:	83 f8 ff             	cmp    eax,0xffffffff
c002e444:	74 1a                	je     c002e460 <__do_global_ctors_aux+0x24>
c002e446:	55                   	push   ebp
c002e447:	89 e5                	mov    ebp,esp
c002e449:	53                   	push   ebx
c002e44a:	52                   	push   edx
c002e44b:	bb f0 f3 02 c0       	mov    ebx,0xc002f3f0
c002e450:	ff d0                	call   eax
c002e452:	83 eb 04             	sub    ebx,0x4
c002e455:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e457:	83 f8 ff             	cmp    eax,0xffffffff
c002e45a:	75 f4                	jne    c002e450 <__do_global_ctors_aux+0x14>
c002e45c:	58                   	pop    eax
c002e45d:	5b                   	pop    ebx
c002e45e:	5d                   	pop    ebp
c002e45f:	c3                   	ret    
c002e460:	c3                   	ret    
c002e461:	66 90                	xchg   ax,ax
c002e463:	90                   	nop

c002e464 <__divdi3>:
c002e464:	55                   	push   ebp
c002e465:	57                   	push   edi
c002e466:	56                   	push   esi
c002e467:	53                   	push   ebx
c002e468:	83 ec 1c             	sub    esp,0x1c
c002e46b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e46f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e473:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e476:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e47a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e47e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e482:	85 db                	test   ebx,ebx
c002e484:	0f 88 8e 00 00 00    	js     c002e518 <__divdi3+0xb4>
c002e48a:	89 dd                	mov    ebp,ebx
c002e48c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e494:	89 d3                	mov    ebx,edx
c002e496:	85 d2                	test   edx,edx
c002e498:	79 0d                	jns    c002e4a7 <__divdi3+0x43>
c002e49a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e49e:	f7 d8                	neg    eax
c002e4a0:	83 d2 00             	adc    edx,0x0
c002e4a3:	f7 da                	neg    edx
c002e4a5:	89 d3                	mov    ebx,edx
c002e4a7:	89 c7                	mov    edi,eax
c002e4a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e4ac:	85 db                	test   ebx,ebx
c002e4ae:	75 48                	jne    c002e4f8 <__divdi3+0x94>
c002e4b0:	39 ef                	cmp    edi,ebp
c002e4b2:	76 24                	jbe    c002e4d8 <__divdi3+0x74>
c002e4b4:	89 ea                	mov    edx,ebp
c002e4b6:	f7 f7                	div    edi
c002e4b8:	89 c1                	mov    ecx,eax
c002e4ba:	31 f6                	xor    esi,esi
c002e4bc:	89 c8                	mov    eax,ecx
c002e4be:	89 f2                	mov    edx,esi
c002e4c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e4c4:	85 c9                	test   ecx,ecx
c002e4c6:	74 07                	je     c002e4cf <__divdi3+0x6b>
c002e4c8:	f7 d8                	neg    eax
c002e4ca:	83 d2 00             	adc    edx,0x0
c002e4cd:	f7 da                	neg    edx
c002e4cf:	83 c4 1c             	add    esp,0x1c
c002e4d2:	5b                   	pop    ebx
c002e4d3:	5e                   	pop    esi
c002e4d4:	5f                   	pop    edi
c002e4d5:	5d                   	pop    ebp
c002e4d6:	c3                   	ret    
c002e4d7:	90                   	nop
c002e4d8:	85 ff                	test   edi,edi
c002e4da:	75 0b                	jne    c002e4e7 <__divdi3+0x83>
c002e4dc:	b8 01 00 00 00       	mov    eax,0x1
c002e4e1:	31 d2                	xor    edx,edx
c002e4e3:	f7 f3                	div    ebx
c002e4e5:	89 c7                	mov    edi,eax
c002e4e7:	31 d2                	xor    edx,edx
c002e4e9:	89 e8                	mov    eax,ebp
c002e4eb:	f7 f7                	div    edi
c002e4ed:	89 c6                	mov    esi,eax
c002e4ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e4f2:	f7 f7                	div    edi
c002e4f4:	89 c1                	mov    ecx,eax
c002e4f6:	eb c4                	jmp    c002e4bc <__divdi3+0x58>
c002e4f8:	39 eb                	cmp    ebx,ebp
c002e4fa:	77 3c                	ja     c002e538 <__divdi3+0xd4>
c002e4fc:	0f bd f3             	bsr    esi,ebx
c002e4ff:	83 f6 1f             	xor    esi,0x1f
c002e502:	75 40                	jne    c002e544 <__divdi3+0xe0>
c002e504:	39 eb                	cmp    ebx,ebp
c002e506:	72 09                	jb     c002e511 <__divdi3+0xad>
c002e508:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e50b:	0f 87 97 00 00 00    	ja     c002e5a8 <__divdi3+0x144>
c002e511:	b9 01 00 00 00       	mov    ecx,0x1
c002e516:	eb a4                	jmp    c002e4bc <__divdi3+0x58>
c002e518:	f7 d9                	neg    ecx
c002e51a:	83 d3 00             	adc    ebx,0x0
c002e51d:	f7 db                	neg    ebx
c002e51f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e522:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e526:	89 dd                	mov    ebp,ebx
c002e528:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e530:	e9 5f ff ff ff       	jmp    c002e494 <__divdi3+0x30>
c002e535:	8d 76 00             	lea    esi,[esi+0x0]
c002e538:	31 f6                	xor    esi,esi
c002e53a:	31 c9                	xor    ecx,ecx
c002e53c:	e9 7b ff ff ff       	jmp    c002e4bc <__divdi3+0x58>
c002e541:	8d 76 00             	lea    esi,[esi+0x0]
c002e544:	b8 20 00 00 00       	mov    eax,0x20
c002e549:	29 f0                	sub    eax,esi
c002e54b:	89 f1                	mov    ecx,esi
c002e54d:	d3 e3                	shl    ebx,cl
c002e54f:	89 fa                	mov    edx,edi
c002e551:	88 c1                	mov    cl,al
c002e553:	d3 ea                	shr    edx,cl
c002e555:	09 da                	or     edx,ebx
c002e557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e55b:	89 f1                	mov    ecx,esi
c002e55d:	d3 e7                	shl    edi,cl
c002e55f:	89 eb                	mov    ebx,ebp
c002e561:	88 c1                	mov    cl,al
c002e563:	d3 eb                	shr    ebx,cl
c002e565:	89 f1                	mov    ecx,esi
c002e567:	d3 e5                	shl    ebp,cl
c002e569:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e56c:	88 c1                	mov    cl,al
c002e56e:	d3 ea                	shr    edx,cl
c002e570:	09 d5                	or     ebp,edx
c002e572:	89 e8                	mov    eax,ebp
c002e574:	89 da                	mov    edx,ebx
c002e576:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e57a:	89 d3                	mov    ebx,edx
c002e57c:	89 c5                	mov    ebp,eax
c002e57e:	f7 e7                	mul    edi
c002e580:	39 d3                	cmp    ebx,edx
c002e582:	72 18                	jb     c002e59c <__divdi3+0x138>
c002e584:	74 0a                	je     c002e590 <__divdi3+0x12c>
c002e586:	89 e9                	mov    ecx,ebp
c002e588:	31 f6                	xor    esi,esi
c002e58a:	e9 2d ff ff ff       	jmp    c002e4bc <__divdi3+0x58>
c002e58f:	90                   	nop
c002e590:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e593:	89 f1                	mov    ecx,esi
c002e595:	d3 e7                	shl    edi,cl
c002e597:	39 c7                	cmp    edi,eax
c002e599:	73 eb                	jae    c002e586 <__divdi3+0x122>
c002e59b:	90                   	nop
c002e59c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e59f:	31 f6                	xor    esi,esi
c002e5a1:	e9 16 ff ff ff       	jmp    c002e4bc <__divdi3+0x58>
c002e5a6:	66 90                	xchg   ax,ax
c002e5a8:	31 c9                	xor    ecx,ecx
c002e5aa:	e9 0d ff ff ff       	jmp    c002e4bc <__divdi3+0x58>
c002e5af:	90                   	nop

c002e5b0 <__moddi3>:
c002e5b0:	55                   	push   ebp
c002e5b1:	57                   	push   edi
c002e5b2:	56                   	push   esi
c002e5b3:	53                   	push   ebx
c002e5b4:	83 ec 2c             	sub    esp,0x2c
c002e5b7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e5bb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e5bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e5c3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e5c7:	85 db                	test   ebx,ebx
c002e5c9:	0f 88 85 00 00 00    	js     c002e654 <__moddi3+0xa4>
c002e5cf:	89 de                	mov    esi,ebx
c002e5d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e5d9:	89 d7                	mov    edi,edx
c002e5db:	85 d2                	test   edx,edx
c002e5dd:	79 09                	jns    c002e5e8 <__moddi3+0x38>
c002e5df:	f7 d8                	neg    eax
c002e5e1:	83 d2 00             	adc    edx,0x0
c002e5e4:	f7 da                	neg    edx
c002e5e6:	89 d7                	mov    edi,edx
c002e5e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e5ec:	89 cd                	mov    ebp,ecx
c002e5ee:	85 ff                	test   edi,edi
c002e5f0:	75 52                	jne    c002e644 <__moddi3+0x94>
c002e5f2:	89 c3                	mov    ebx,eax
c002e5f4:	39 f0                	cmp    eax,esi
c002e5f6:	76 24                	jbe    c002e61c <__moddi3+0x6c>
c002e5f8:	89 c8                	mov    eax,ecx
c002e5fa:	89 f2                	mov    edx,esi
c002e5fc:	f7 f3                	div    ebx
c002e5fe:	89 d6                	mov    esi,edx
c002e600:	89 f0                	mov    eax,esi
c002e602:	31 d2                	xor    edx,edx
c002e604:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e608:	85 c9                	test   ecx,ecx
c002e60a:	74 07                	je     c002e613 <__moddi3+0x63>
c002e60c:	f7 d8                	neg    eax
c002e60e:	83 d2 00             	adc    edx,0x0
c002e611:	f7 da                	neg    edx
c002e613:	83 c4 2c             	add    esp,0x2c
c002e616:	5b                   	pop    ebx
c002e617:	5e                   	pop    esi
c002e618:	5f                   	pop    edi
c002e619:	5d                   	pop    ebp
c002e61a:	c3                   	ret    
c002e61b:	90                   	nop
c002e61c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e620:	85 db                	test   ebx,ebx
c002e622:	75 0d                	jne    c002e631 <__moddi3+0x81>
c002e624:	b8 01 00 00 00       	mov    eax,0x1
c002e629:	31 d2                	xor    edx,edx
c002e62b:	f7 f7                	div    edi
c002e62d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e631:	89 f0                	mov    eax,esi
c002e633:	31 d2                	xor    edx,edx
c002e635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e639:	f7 f7                	div    edi
c002e63b:	89 e8                	mov    eax,ebp
c002e63d:	f7 f7                	div    edi
c002e63f:	89 d6                	mov    esi,edx
c002e641:	eb bd                	jmp    c002e600 <__moddi3+0x50>
c002e643:	90                   	nop
c002e644:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e648:	39 f7                	cmp    edi,esi
c002e64a:	76 20                	jbe    c002e66c <__moddi3+0xbc>
c002e64c:	89 c8                	mov    eax,ecx
c002e64e:	89 f2                	mov    edx,esi
c002e650:	eb b2                	jmp    c002e604 <__moddi3+0x54>
c002e652:	66 90                	xchg   ax,ax
c002e654:	f7 d9                	neg    ecx
c002e656:	83 d3 00             	adc    ebx,0x0
c002e659:	f7 db                	neg    ebx
c002e65b:	89 de                	mov    esi,ebx
c002e65d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e665:	e9 6f ff ff ff       	jmp    c002e5d9 <__moddi3+0x29>
c002e66a:	66 90                	xchg   ax,ax
c002e66c:	0f bd c7             	bsr    eax,edi
c002e66f:	83 f0 1f             	xor    eax,0x1f
c002e672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e676:	75 24                	jne    c002e69c <__moddi3+0xec>
c002e678:	39 f7                	cmp    edi,esi
c002e67a:	72 06                	jb     c002e682 <__moddi3+0xd2>
c002e67c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e680:	77 0c                	ja     c002e68e <__moddi3+0xde>
c002e682:	89 e9                	mov    ecx,ebp
c002e684:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e688:	19 fe                	sbb    esi,edi
c002e68a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e68e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e692:	89 f2                	mov    edx,esi
c002e694:	e9 6b ff ff ff       	jmp    c002e604 <__moddi3+0x54>
c002e699:	8d 76 00             	lea    esi,[esi+0x0]
c002e69c:	b8 20 00 00 00       	mov    eax,0x20
c002e6a1:	89 c2                	mov    edx,eax
c002e6a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e6a7:	29 da                	sub    edx,ebx
c002e6a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e6ad:	88 d9                	mov    cl,bl
c002e6af:	d3 e7                	shl    edi,cl
c002e6b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e6b5:	88 d1                	mov    cl,dl
c002e6b7:	d3 e8                	shr    eax,cl
c002e6b9:	09 c7                	or     edi,eax
c002e6bb:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e6bf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e6c3:	89 d8                	mov    eax,ebx
c002e6c5:	88 d9                	mov    cl,bl
c002e6c7:	d3 e7                	shl    edi,cl
c002e6c9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e6cd:	89 f3                	mov    ebx,esi
c002e6cf:	88 d1                	mov    cl,dl
c002e6d1:	d3 eb                	shr    ebx,cl
c002e6d3:	89 c7                	mov    edi,eax
c002e6d5:	88 c1                	mov    cl,al
c002e6d7:	d3 e6                	shl    esi,cl
c002e6d9:	89 e8                	mov    eax,ebp
c002e6db:	88 d1                	mov    cl,dl
c002e6dd:	d3 e8                	shr    eax,cl
c002e6df:	09 f0                	or     eax,esi
c002e6e1:	89 f9                	mov    ecx,edi
c002e6e3:	d3 e5                	shl    ebp,cl
c002e6e5:	89 da                	mov    edx,ebx
c002e6e7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e6eb:	89 d3                	mov    ebx,edx
c002e6ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e6f1:	89 c6                	mov    esi,eax
c002e6f3:	89 d1                	mov    ecx,edx
c002e6f5:	39 d3                	cmp    ebx,edx
c002e6f7:	72 27                	jb     c002e720 <__moddi3+0x170>
c002e6f9:	74 21                	je     c002e71c <__moddi3+0x16c>
c002e6fb:	29 f5                	sub    ebp,esi
c002e6fd:	19 cb                	sbb    ebx,ecx
c002e6ff:	89 de                	mov    esi,ebx
c002e701:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e705:	d3 e6                	shl    esi,cl
c002e707:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e70b:	89 f9                	mov    ecx,edi
c002e70d:	d3 ed                	shr    ebp,cl
c002e70f:	09 ee                	or     esi,ebp
c002e711:	89 f0                	mov    eax,esi
c002e713:	d3 eb                	shr    ebx,cl
c002e715:	89 da                	mov    edx,ebx
c002e717:	e9 e8 fe ff ff       	jmp    c002e604 <__moddi3+0x54>
c002e71c:	39 c5                	cmp    ebp,eax
c002e71e:	73 db                	jae    c002e6fb <__moddi3+0x14b>
c002e720:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e724:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e728:	89 d1                	mov    ecx,edx
c002e72a:	89 c6                	mov    esi,eax
c002e72c:	eb cd                	jmp    c002e6fb <__moddi3+0x14b>
c002e72e:	66 90                	xchg   ax,ax

c002e730 <__udivdi3>:
c002e730:	55                   	push   ebp
c002e731:	57                   	push   edi
c002e732:	56                   	push   esi
c002e733:	53                   	push   ebx
c002e734:	83 ec 1c             	sub    esp,0x1c
c002e737:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e73b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e73f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e743:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e747:	85 d2                	test   edx,edx
c002e749:	75 41                	jne    c002e78c <__udivdi3+0x5c>
c002e74b:	39 f7                	cmp    edi,esi
c002e74d:	76 15                	jbe    c002e764 <__udivdi3+0x34>
c002e74f:	89 e8                	mov    eax,ebp
c002e751:	89 f2                	mov    edx,esi
c002e753:	f7 f7                	div    edi
c002e755:	31 db                	xor    ebx,ebx
c002e757:	89 da                	mov    edx,ebx
c002e759:	83 c4 1c             	add    esp,0x1c
c002e75c:	5b                   	pop    ebx
c002e75d:	5e                   	pop    esi
c002e75e:	5f                   	pop    edi
c002e75f:	5d                   	pop    ebp
c002e760:	c3                   	ret    
c002e761:	8d 76 00             	lea    esi,[esi+0x0]
c002e764:	89 f9                	mov    ecx,edi
c002e766:	85 ff                	test   edi,edi
c002e768:	75 0b                	jne    c002e775 <__udivdi3+0x45>
c002e76a:	b8 01 00 00 00       	mov    eax,0x1
c002e76f:	31 d2                	xor    edx,edx
c002e771:	f7 f7                	div    edi
c002e773:	89 c1                	mov    ecx,eax
c002e775:	31 d2                	xor    edx,edx
c002e777:	89 f0                	mov    eax,esi
c002e779:	f7 f1                	div    ecx
c002e77b:	89 c3                	mov    ebx,eax
c002e77d:	89 e8                	mov    eax,ebp
c002e77f:	f7 f1                	div    ecx
c002e781:	89 da                	mov    edx,ebx
c002e783:	83 c4 1c             	add    esp,0x1c
c002e786:	5b                   	pop    ebx
c002e787:	5e                   	pop    esi
c002e788:	5f                   	pop    edi
c002e789:	5d                   	pop    ebp
c002e78a:	c3                   	ret    
c002e78b:	90                   	nop
c002e78c:	39 f2                	cmp    edx,esi
c002e78e:	77 1c                	ja     c002e7ac <__udivdi3+0x7c>
c002e790:	0f bd da             	bsr    ebx,edx
c002e793:	83 f3 1f             	xor    ebx,0x1f
c002e796:	75 24                	jne    c002e7bc <__udivdi3+0x8c>
c002e798:	39 f2                	cmp    edx,esi
c002e79a:	72 08                	jb     c002e7a4 <__udivdi3+0x74>
c002e79c:	39 ef                	cmp    edi,ebp
c002e79e:	0f 87 84 00 00 00    	ja     c002e828 <__udivdi3+0xf8>
c002e7a4:	b8 01 00 00 00       	mov    eax,0x1
c002e7a9:	eb ac                	jmp    c002e757 <__udivdi3+0x27>
c002e7ab:	90                   	nop
c002e7ac:	31 db                	xor    ebx,ebx
c002e7ae:	31 c0                	xor    eax,eax
c002e7b0:	89 da                	mov    edx,ebx
c002e7b2:	83 c4 1c             	add    esp,0x1c
c002e7b5:	5b                   	pop    ebx
c002e7b6:	5e                   	pop    esi
c002e7b7:	5f                   	pop    edi
c002e7b8:	5d                   	pop    ebp
c002e7b9:	c3                   	ret    
c002e7ba:	66 90                	xchg   ax,ax
c002e7bc:	b8 20 00 00 00       	mov    eax,0x20
c002e7c1:	29 d8                	sub    eax,ebx
c002e7c3:	88 d9                	mov    cl,bl
c002e7c5:	d3 e2                	shl    edx,cl
c002e7c7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e7cb:	89 fa                	mov    edx,edi
c002e7cd:	88 c1                	mov    cl,al
c002e7cf:	d3 ea                	shr    edx,cl
c002e7d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e7d5:	09 d1                	or     ecx,edx
c002e7d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e7db:	88 d9                	mov    cl,bl
c002e7dd:	d3 e7                	shl    edi,cl
c002e7df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e7e3:	89 f7                	mov    edi,esi
c002e7e5:	88 c1                	mov    cl,al
c002e7e7:	d3 ef                	shr    edi,cl
c002e7e9:	88 d9                	mov    cl,bl
c002e7eb:	d3 e6                	shl    esi,cl
c002e7ed:	89 ea                	mov    edx,ebp
c002e7ef:	88 c1                	mov    cl,al
c002e7f1:	d3 ea                	shr    edx,cl
c002e7f3:	09 d6                	or     esi,edx
c002e7f5:	89 f0                	mov    eax,esi
c002e7f7:	89 fa                	mov    edx,edi
c002e7f9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e7fd:	89 d7                	mov    edi,edx
c002e7ff:	89 c6                	mov    esi,eax
c002e801:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e805:	39 d7                	cmp    edi,edx
c002e807:	72 13                	jb     c002e81c <__udivdi3+0xec>
c002e809:	74 09                	je     c002e814 <__udivdi3+0xe4>
c002e80b:	89 f0                	mov    eax,esi
c002e80d:	31 db                	xor    ebx,ebx
c002e80f:	e9 43 ff ff ff       	jmp    c002e757 <__udivdi3+0x27>
c002e814:	88 d9                	mov    cl,bl
c002e816:	d3 e5                	shl    ebp,cl
c002e818:	39 c5                	cmp    ebp,eax
c002e81a:	73 ef                	jae    c002e80b <__udivdi3+0xdb>
c002e81c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e81f:	31 db                	xor    ebx,ebx
c002e821:	e9 31 ff ff ff       	jmp    c002e757 <__udivdi3+0x27>
c002e826:	66 90                	xchg   ax,ax
c002e828:	31 c0                	xor    eax,eax
c002e82a:	e9 28 ff ff ff       	jmp    c002e757 <__udivdi3+0x27>
c002e82f:	90                   	nop

c002e830 <__umoddi3>:
c002e830:	55                   	push   ebp
c002e831:	57                   	push   edi
c002e832:	56                   	push   esi
c002e833:	53                   	push   ebx
c002e834:	83 ec 1c             	sub    esp,0x1c
c002e837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e83f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e843:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e847:	89 da                	mov    edx,ebx
c002e849:	85 c0                	test   eax,eax
c002e84b:	75 37                	jne    c002e884 <__umoddi3+0x54>
c002e84d:	39 df                	cmp    edi,ebx
c002e84f:	76 13                	jbe    c002e864 <__umoddi3+0x34>
c002e851:	89 f0                	mov    eax,esi
c002e853:	f7 f7                	div    edi
c002e855:	89 d0                	mov    eax,edx
c002e857:	31 d2                	xor    edx,edx
c002e859:	83 c4 1c             	add    esp,0x1c
c002e85c:	5b                   	pop    ebx
c002e85d:	5e                   	pop    esi
c002e85e:	5f                   	pop    edi
c002e85f:	5d                   	pop    ebp
c002e860:	c3                   	ret    
c002e861:	8d 76 00             	lea    esi,[esi+0x0]
c002e864:	89 fd                	mov    ebp,edi
c002e866:	85 ff                	test   edi,edi
c002e868:	75 0b                	jne    c002e875 <__umoddi3+0x45>
c002e86a:	b8 01 00 00 00       	mov    eax,0x1
c002e86f:	31 d2                	xor    edx,edx
c002e871:	f7 f7                	div    edi
c002e873:	89 c5                	mov    ebp,eax
c002e875:	89 d8                	mov    eax,ebx
c002e877:	31 d2                	xor    edx,edx
c002e879:	f7 f5                	div    ebp
c002e87b:	89 f0                	mov    eax,esi
c002e87d:	f7 f5                	div    ebp
c002e87f:	89 d0                	mov    eax,edx
c002e881:	eb d4                	jmp    c002e857 <__umoddi3+0x27>
c002e883:	90                   	nop
c002e884:	89 f1                	mov    ecx,esi
c002e886:	39 d8                	cmp    eax,ebx
c002e888:	76 0a                	jbe    c002e894 <__umoddi3+0x64>
c002e88a:	89 f0                	mov    eax,esi
c002e88c:	83 c4 1c             	add    esp,0x1c
c002e88f:	5b                   	pop    ebx
c002e890:	5e                   	pop    esi
c002e891:	5f                   	pop    edi
c002e892:	5d                   	pop    ebp
c002e893:	c3                   	ret    
c002e894:	0f bd e8             	bsr    ebp,eax
c002e897:	83 f5 1f             	xor    ebp,0x1f
c002e89a:	75 1c                	jne    c002e8b8 <__umoddi3+0x88>
c002e89c:	39 d8                	cmp    eax,ebx
c002e89e:	72 04                	jb     c002e8a4 <__umoddi3+0x74>
c002e8a0:	39 f7                	cmp    edi,esi
c002e8a2:	77 08                	ja     c002e8ac <__umoddi3+0x7c>
c002e8a4:	89 da                	mov    edx,ebx
c002e8a6:	29 fe                	sub    esi,edi
c002e8a8:	19 c2                	sbb    edx,eax
c002e8aa:	89 f1                	mov    ecx,esi
c002e8ac:	89 c8                	mov    eax,ecx
c002e8ae:	83 c4 1c             	add    esp,0x1c
c002e8b1:	5b                   	pop    ebx
c002e8b2:	5e                   	pop    esi
c002e8b3:	5f                   	pop    edi
c002e8b4:	5d                   	pop    ebp
c002e8b5:	c3                   	ret    
c002e8b6:	66 90                	xchg   ax,ax
c002e8b8:	ba 20 00 00 00       	mov    edx,0x20
c002e8bd:	29 ea                	sub    edx,ebp
c002e8bf:	89 e9                	mov    ecx,ebp
c002e8c1:	d3 e0                	shl    eax,cl
c002e8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e8c7:	89 f8                	mov    eax,edi
c002e8c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e8cd:	88 d1                	mov    cl,dl
c002e8cf:	d3 e8                	shr    eax,cl
c002e8d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e8d5:	09 c1                	or     ecx,eax
c002e8d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e8db:	89 e9                	mov    ecx,ebp
c002e8dd:	d3 e7                	shl    edi,cl
c002e8df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e8e3:	89 d8                	mov    eax,ebx
c002e8e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e8e9:	88 d1                	mov    cl,dl
c002e8eb:	d3 e8                	shr    eax,cl
c002e8ed:	89 c7                	mov    edi,eax
c002e8ef:	89 e9                	mov    ecx,ebp
c002e8f1:	d3 e3                	shl    ebx,cl
c002e8f3:	89 f0                	mov    eax,esi
c002e8f5:	88 d1                	mov    cl,dl
c002e8f7:	d3 e8                	shr    eax,cl
c002e8f9:	09 d8                	or     eax,ebx
c002e8fb:	89 e9                	mov    ecx,ebp
c002e8fd:	d3 e6                	shl    esi,cl
c002e8ff:	89 f3                	mov    ebx,esi
c002e901:	89 fa                	mov    edx,edi
c002e903:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e907:	89 d1                	mov    ecx,edx
c002e909:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e90d:	89 c6                	mov    esi,eax
c002e90f:	89 d7                	mov    edi,edx
c002e911:	39 d1                	cmp    ecx,edx
c002e913:	72 27                	jb     c002e93c <__umoddi3+0x10c>
c002e915:	74 21                	je     c002e938 <__umoddi3+0x108>
c002e917:	89 ca                	mov    edx,ecx
c002e919:	29 f3                	sub    ebx,esi
c002e91b:	19 fa                	sbb    edx,edi
c002e91d:	89 d0                	mov    eax,edx
c002e91f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e923:	d3 e0                	shl    eax,cl
c002e925:	89 e9                	mov    ecx,ebp
c002e927:	d3 eb                	shr    ebx,cl
c002e929:	09 d8                	or     eax,ebx
c002e92b:	d3 ea                	shr    edx,cl
c002e92d:	83 c4 1c             	add    esp,0x1c
c002e930:	5b                   	pop    ebx
c002e931:	5e                   	pop    esi
c002e932:	5f                   	pop    edi
c002e933:	5d                   	pop    ebp
c002e934:	c3                   	ret    
c002e935:	8d 76 00             	lea    esi,[esi+0x0]
c002e938:	39 c3                	cmp    ebx,eax
c002e93a:	73 db                	jae    c002e917 <__umoddi3+0xe7>
c002e93c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e940:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e944:	89 d7                	mov    edi,edx
c002e946:	89 c6                	mov    esi,eax
c002e948:	eb cd                	jmp    c002e917 <__umoddi3+0xe7>

Disassembly of section .init:

c002e94a <_init>:
c002e94a:	55                   	push   ebp
c002e94b:	89 e5                	mov    ebp,esp
c002e94d:	e8 a2 17 fd ff       	call   c00000f4 <frame_dummy>
c002e952:	e8 e5 fa ff ff       	call   c002e43c <__do_global_ctors_aux>
c002e957:	5d                   	pop    ebp
c002e958:	c3                   	ret    

Disassembly of section .fini:

c002e959 <_fini>:
c002e959:	55                   	push   ebp
c002e95a:	89 e5                	mov    ebp,esp
c002e95c:	e8 23 17 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e961:	5d                   	pop    ebp
c002e962:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e964 <Computer::~Computer()>:
c002e964:	83 ec 0c             	sub    esp,0xc
c002e967:	ba c4 11 03 c0       	mov    edx,0xc00311c4
c002e96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e970:	89 10                	mov    DWORD PTR [eax],edx
c002e972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e976:	83 ec 0c             	sub    esp,0xc
c002e979:	50                   	push   eax
c002e97a:	e8 fb c8 fe ff       	call   c001b27a <Device::~Device()>
c002e97f:	83 c4 10             	add    esp,0x10
c002e982:	90                   	nop
c002e983:	83 c4 0c             	add    esp,0xc
c002e986:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e988 <Computer::~Computer()>:
c002e988:	83 ec 0c             	sub    esp,0xc
c002e98b:	83 ec 0c             	sub    esp,0xc
c002e98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e992:	e8 cd ff ff ff       	call   c002e964 <Computer::~Computer()>
c002e997:	83 c4 10             	add    esp,0x10
c002e99a:	83 ec 08             	sub    esp,0x8
c002e99d:	68 70 01 00 00       	push   0x170
c002e9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e9a6:	e8 39 a8 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002e9ab:	83 c4 10             	add    esp,0x10
c002e9ae:	83 c4 0c             	add    esp,0xc
c002e9b1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e9b2 <idleCommon()>:
c002e9b2:	83 ec 0c             	sub    esp,0xc
c002e9b5:	fa                   	cli    
c002e9b6:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e9bc:	e8 0b 69 ff ff       	call   c00252cc <schedule()>
c002e9c1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e9c6:	48                   	dec    eax
c002e9c7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e9cc:	75 01                	jne    c002e9cf <idleCommon()+0x1d>
c002e9ce:	fb                   	sti    
c002e9cf:	83 c4 0c             	add    esp,0xc
c002e9d2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e9d4 <LinkedList<UnixFile>::~LinkedList()>:
c002e9d4:	90                   	nop
c002e9d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e9d6 <LinkedList<UnixFile>::LinkedList()>:
c002e9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e9f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ea00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ea0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea0f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ea16:	90                   	nop
c002ea17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002ea18 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002ea18:	83 ec 0c             	sub    esp,0xc
c002ea1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ea20:	75 10                	jne    c002ea32 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002ea22:	83 ec 0c             	sub    esp,0xc
c002ea25:	68 e4 13 03 c0       	push   0xc00313e4
c002ea2a:	e8 3b 18 ff ff       	call   c002026a <KePanic(char const*)>
c002ea2f:	83 c4 10             	add    esp,0x10
c002ea32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea36:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea38:	85 c0                	test   eax,eax
c002ea3a:	74 34                	je     c002ea70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ea3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea43:	85 c0                	test   eax,eax
c002ea45:	74 29                	je     c002ea70 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002ea47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea4e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea67:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ea6e:	eb 65                	jmp    c002ead5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002ea70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea74:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea76:	85 c0                	test   eax,eax
c002ea78:	75 4b                	jne    c002eac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ea7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea81:	85 c0                	test   eax,eax
c002ea83:	75 40                	jne    c002eac5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002ea85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea8d:	89 10                	mov    DWORD PTR [eax],edx
c002ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eaa1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaaf:	85 c0                	test   eax,eax
c002eab1:	74 22                	je     c002ead5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002eab3:	83 ec 0c             	sub    esp,0xc
c002eab6:	68 06 14 03 c0       	push   0xc0031406
c002eabb:	e8 aa 17 ff ff       	call   c002026a <KePanic(char const*)>
c002eac0:	83 c4 10             	add    esp,0x10
c002eac3:	eb 10                	jmp    c002ead5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002eac5:	83 ec 0c             	sub    esp,0xc
c002eac8:	68 10 14 03 c0       	push   0xc0031410
c002eacd:	e8 98 17 ff ff       	call   c002026a <KePanic(char const*)>
c002ead2:	83 c4 10             	add    esp,0x10
c002ead5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ead9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eadc:	8d 50 01             	lea    edx,[eax+0x1]
c002eadf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eae6:	90                   	nop
c002eae7:	83 c4 0c             	add    esp,0xc
c002eaea:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002eaec <LinkedList<UnixFile>::getFirstElement()>:
c002eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eaf0:	8b 00                	mov    eax,DWORD PTR [eax]
c002eaf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002eaf4 <LinkedList<UnixFile>::removeFirst()>:
c002eaf4:	83 ec 0c             	sub    esp,0xc
c002eaf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eafb:	8b 00                	mov    eax,DWORD PTR [eax]
c002eafd:	85 c0                	test   eax,eax
c002eaff:	75 12                	jne    c002eb13 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002eb01:	83 ec 0c             	sub    esp,0xc
c002eb04:	68 1c 14 03 c0       	push   0xc003141c
c002eb09:	e8 5c 17 ff ff       	call   c002026a <KePanic(char const*)>
c002eb0e:	83 c4 10             	add    esp,0x10
c002eb11:	eb 7e                	jmp    c002eb91 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002eb13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb17:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb1d:	85 c0                	test   eax,eax
c002eb1f:	74 10                	je     c002eb31 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002eb21:	83 ec 0c             	sub    esp,0xc
c002eb24:	68 67 14 03 c0       	push   0xc0031467
c002eb29:	e8 3c 17 ff ff       	call   c002026a <KePanic(char const*)>
c002eb2e:	83 c4 10             	add    esp,0x10
c002eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb35:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb3a:	85 c0                	test   eax,eax
c002eb3c:	75 33                	jne    c002eb71 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002eb3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb5a:	83 f8 01             	cmp    eax,0x1
c002eb5d:	74 21                	je     c002eb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002eb5f:	83 ec 0c             	sub    esp,0xc
c002eb62:	68 40 14 03 c0       	push   0xc0031440
c002eb67:	e8 fe 16 ff ff       	call   c002026a <KePanic(char const*)>
c002eb6c:	83 c4 10             	add    esp,0x10
c002eb6f:	eb 0f                	jmp    c002eb80 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002eb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb75:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb77:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002eb7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb7e:	89 10                	mov    DWORD PTR [eax],edx
c002eb80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb84:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb87:	8d 50 ff             	lea    edx,[eax-0x1]
c002eb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb8e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eb91:	83 c4 0c             	add    esp,0xc
c002eb94:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002eb96 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002eb96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002eb9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb9d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002eb9e <DriverlessDevice::~DriverlessDevice()>:
c002eb9e:	ba 88 20 03 c0       	mov    edx,0xc0032088
c002eba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eba7:	89 10                	mov    DWORD PTR [eax],edx
c002eba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebad:	50                   	push   eax
c002ebae:	e8 c7 c6 fe ff       	call   c001b27a <Device::~Device()>
c002ebb3:	83 c4 04             	add    esp,0x4
c002ebb6:	90                   	nop
c002ebb7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ebb8 <DriverlessDevice::~DriverlessDevice()>:
c002ebb8:	83 ec 0c             	sub    esp,0xc
c002ebbb:	83 ec 0c             	sub    esp,0xc
c002ebbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ebc2:	e8 d7 ff ff ff       	call   c002eb9e <DriverlessDevice::~DriverlessDevice()>
c002ebc7:	83 c4 10             	add    esp,0x10
c002ebca:	83 ec 08             	sub    esp,0x8
c002ebcd:	68 58 01 00 00       	push   0x158
c002ebd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ebd6:	e8 09 a6 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002ebdb:	83 c4 10             	add    esp,0x10
c002ebde:	83 c4 0c             	add    esp,0xc
c002ebe1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ebe2 <LinkedList<Device>::addElement(Device*)>:
c002ebe2:	83 ec 0c             	sub    esp,0xc
c002ebe5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ebea:	75 10                	jne    c002ebfc <LinkedList<Device>::addElement(Device*)+0x1a>
c002ebec:	83 ec 0c             	sub    esp,0xc
c002ebef:	68 e4 13 03 c0       	push   0xc00313e4
c002ebf4:	e8 71 16 ff ff       	call   c002026a <KePanic(char const*)>
c002ebf9:	83 c4 10             	add    esp,0x10
c002ebfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec00:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec02:	85 c0                	test   eax,eax
c002ec04:	74 3a                	je     c002ec40 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ec06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec0d:	85 c0                	test   eax,eax
c002ec0f:	74 2f                	je     c002ec40 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec1c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002ec22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec2a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec34:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ec3e:	eb 68                	jmp    c002eca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ec40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec46:	85 c0                	test   eax,eax
c002ec48:	75 4e                	jne    c002ec98 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ec4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec51:	85 c0                	test   eax,eax
c002ec53:	75 43                	jne    c002ec98 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ec55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec5d:	89 10                	mov    DWORD PTR [eax],edx
c002ec5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec71:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ec7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec82:	85 c0                	test   eax,eax
c002ec84:	74 22                	je     c002eca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ec86:	83 ec 0c             	sub    esp,0xc
c002ec89:	68 06 14 03 c0       	push   0xc0031406
c002ec8e:	e8 d7 15 ff ff       	call   c002026a <KePanic(char const*)>
c002ec93:	83 c4 10             	add    esp,0x10
c002ec96:	eb 10                	jmp    c002eca8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ec98:	83 ec 0c             	sub    esp,0xc
c002ec9b:	68 10 14 03 c0       	push   0xc0031410
c002eca0:	e8 c5 15 ff ff       	call   c002026a <KePanic(char const*)>
c002eca5:	83 c4 10             	add    esp,0x10
c002eca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecaf:	8d 50 01             	lea    edx,[eax+0x1]
c002ecb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ecb9:	90                   	nop
c002ecba:	83 c4 0c             	add    esp,0xc
c002ecbd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002ecbe <LinkedList<Device>::LinkedList()>:
c002ecbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecc2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ecc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eccc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecd7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ecde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ece2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ece8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ecf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ecf7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ecfe:	90                   	nop
c002ecff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ed00 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ed00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed04:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed06:	85 c0                	test   eax,eax
c002ed08:	75 0e                	jne    c002ed18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ed0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed11:	85 c0                	test   eax,eax
c002ed13:	75 03                	jne    c002ed18 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ed15:	b0 01                	mov    al,0x1
c002ed17:	c3                   	ret    
c002ed18:	b0 00                	mov    al,0x0
c002ed1a:	90                   	nop
c002ed1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ed1c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ed1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed20:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ed24 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ed24:	83 ec 0c             	sub    esp,0xc
c002ed27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed2b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed2d:	85 c0                	test   eax,eax
c002ed2f:	75 17                	jne    c002ed48 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ed31:	83 ec 0c             	sub    esp,0xc
c002ed34:	68 1c 14 03 c0       	push   0xc003141c
c002ed39:	e8 2c 15 ff ff       	call   c002026a <KePanic(char const*)>
c002ed3e:	83 c4 10             	add    esp,0x10
c002ed41:	e9 96 00 00 00       	jmp    c002eddc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ed46:	66 90                	xchg   ax,ax
c002ed48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ed52:	85 c0                	test   eax,eax
c002ed54:	0f 95 c0             	setne  al
c002ed57:	0f b6 c0             	movzx  eax,al
c002ed5a:	85 c0                	test   eax,eax
c002ed5c:	74 12                	je     c002ed70 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ed5e:	83 ec 0c             	sub    esp,0xc
c002ed61:	68 67 14 03 c0       	push   0xc0031467
c002ed66:	e8 ff 14 ff ff       	call   c002026a <KePanic(char const*)>
c002ed6b:	83 c4 10             	add    esp,0x10
c002ed6e:	66 90                	xchg   ax,ax
c002ed70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed74:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed76:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ed79:	85 c0                	test   eax,eax
c002ed7b:	0f 94 c0             	sete   al
c002ed7e:	0f b6 c0             	movzx  eax,al
c002ed81:	85 c0                	test   eax,eax
c002ed83:	74 33                	je     c002edb8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ed85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed89:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ed8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ed9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed9e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eda1:	83 f8 01             	cmp    eax,0x1
c002eda4:	74 22                	je     c002edc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002eda6:	83 ec 0c             	sub    esp,0xc
c002eda9:	68 40 14 03 c0       	push   0xc0031440
c002edae:	e8 b7 14 ff ff       	call   c002026a <KePanic(char const*)>
c002edb3:	83 c4 10             	add    esp,0x10
c002edb6:	eb 10                	jmp    c002edc8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002edb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edbc:	8b 00                	mov    eax,DWORD PTR [eax]
c002edbe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002edc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edc5:	89 10                	mov    DWORD PTR [eax],edx
c002edc7:	90                   	nop
c002edc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edcc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edcf:	8d 50 ff             	lea    edx,[eax-0x1]
c002edd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002edd9:	8d 76 00             	lea    esi,[esi+0x0]
c002eddc:	83 c4 0c             	add    esp,0xc
c002eddf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ede0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ede0:	83 ec 0c             	sub    esp,0xc
c002ede3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ede8:	75 12                	jne    c002edfc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002edea:	83 ec 0c             	sub    esp,0xc
c002eded:	68 e4 13 03 c0       	push   0xc00313e4
c002edf2:	e8 73 14 ff ff       	call   c002026a <KePanic(char const*)>
c002edf7:	83 c4 10             	add    esp,0x10
c002edfa:	66 90                	xchg   ax,ax
c002edfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee00:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee02:	85 c0                	test   eax,eax
c002ee04:	74 36                	je     c002ee3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ee06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee0d:	85 c0                	test   eax,eax
c002ee0f:	74 2b                	je     c002ee3c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ee11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee1c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ee1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ee2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee31:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ee38:	eb 6a                	jmp    c002eea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ee3a:	66 90                	xchg   ax,ax
c002ee3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee40:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee42:	85 c0                	test   eax,eax
c002ee44:	75 4e                	jne    c002ee94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ee46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee4d:	85 c0                	test   eax,eax
c002ee4f:	75 43                	jne    c002ee94 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee59:	89 10                	mov    DWORD PTR [eax],edx
c002ee5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ee63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ee74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee7b:	85 c0                	test   eax,eax
c002ee7d:	74 25                	je     c002eea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ee7f:	83 ec 0c             	sub    esp,0xc
c002ee82:	68 06 14 03 c0       	push   0xc0031406
c002ee87:	e8 de 13 ff ff       	call   c002026a <KePanic(char const*)>
c002ee8c:	83 c4 10             	add    esp,0x10
c002ee8f:	eb 13                	jmp    c002eea4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ee91:	8d 76 00             	lea    esi,[esi+0x0]
c002ee94:	83 ec 0c             	sub    esp,0xc
c002ee97:	68 10 14 03 c0       	push   0xc0031410
c002ee9c:	e8 c9 13 ff ff       	call   c002026a <KePanic(char const*)>
c002eea1:	83 c4 10             	add    esp,0x10
c002eea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eeab:	8d 50 01             	lea    edx,[eax+0x1]
c002eeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eeb5:	90                   	nop
c002eeb6:	83 c4 0c             	add    esp,0xc
c002eeb9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002eebc <ACPI::~ACPI()>:
c002eebc:	83 ec 0c             	sub    esp,0xc
c002eebf:	ba 40 27 03 c0       	mov    edx,0xc0032740
c002eec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec8:	89 10                	mov    DWORD PTR [eax],edx
c002eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eece:	83 ec 0c             	sub    esp,0xc
c002eed1:	50                   	push   eax
c002eed2:	e8 a3 c3 fe ff       	call   c001b27a <Device::~Device()>
c002eed7:	83 c4 10             	add    esp,0x10
c002eeda:	90                   	nop
c002eedb:	83 c4 0c             	add    esp,0xc
c002eede:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002eee0 <ACPI::~ACPI()>:
c002eee0:	83 ec 0c             	sub    esp,0xc
c002eee3:	83 ec 0c             	sub    esp,0xc
c002eee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eeea:	e8 cd ff ff ff       	call   c002eebc <ACPI::~ACPI()>
c002eeef:	83 c4 10             	add    esp,0x10
c002eef2:	83 ec 08             	sub    esp,0x8
c002eef5:	68 64 12 00 00       	push   0x1264
c002eefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eefe:	e8 e1 a2 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002ef03:	83 c4 10             	add    esp,0x10
c002ef06:	83 c4 0c             	add    esp,0xc
c002ef09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ef0c <LinkedList<Device>::~LinkedList()>:
c002ef0c:	90                   	nop
c002ef0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ef10 <LinkedList<Device>::isEmpty()>:
c002ef10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef14:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef16:	85 c0                	test   eax,eax
c002ef18:	75 0e                	jne    c002ef28 <LinkedList<Device>::isEmpty()+0x18>
c002ef1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef21:	85 c0                	test   eax,eax
c002ef23:	75 03                	jne    c002ef28 <LinkedList<Device>::isEmpty()+0x18>
c002ef25:	b0 01                	mov    al,0x1
c002ef27:	c3                   	ret    
c002ef28:	b0 00                	mov    al,0x0
c002ef2a:	90                   	nop
c002ef2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ef2c <LinkedList<Device>::getFirstElement()>:
c002ef2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef30:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef32:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ef34 <LinkedList<Device>::removeFirst()>:
c002ef34:	83 ec 0c             	sub    esp,0xc
c002ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef3b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef3d:	85 c0                	test   eax,eax
c002ef3f:	75 17                	jne    c002ef58 <LinkedList<Device>::removeFirst()+0x24>
c002ef41:	83 ec 0c             	sub    esp,0xc
c002ef44:	68 1c 14 03 c0       	push   0xc003141c
c002ef49:	e8 1c 13 ff ff       	call   c002026a <KePanic(char const*)>
c002ef4e:	83 c4 10             	add    esp,0x10
c002ef51:	e9 92 00 00 00       	jmp    c002efe8 <LinkedList<Device>::removeFirst()+0xb4>
c002ef56:	66 90                	xchg   ax,ax
c002ef58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ef5f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ef65:	85 c0                	test   eax,eax
c002ef67:	74 13                	je     c002ef7c <LinkedList<Device>::removeFirst()+0x48>
c002ef69:	83 ec 0c             	sub    esp,0xc
c002ef6c:	68 67 14 03 c0       	push   0xc0031467
c002ef71:	e8 f4 12 ff ff       	call   c002026a <KePanic(char const*)>
c002ef76:	83 c4 10             	add    esp,0x10
c002ef79:	8d 76 00             	lea    esi,[esi+0x0]
c002ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ef82:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ef88:	85 c0                	test   eax,eax
c002ef8a:	75 34                	jne    c002efc0 <LinkedList<Device>::removeFirst()+0x8c>
c002ef8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002efa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efa5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efa8:	83 f8 01             	cmp    eax,0x1
c002efab:	74 27                	je     c002efd4 <LinkedList<Device>::removeFirst()+0xa0>
c002efad:	83 ec 0c             	sub    esp,0xc
c002efb0:	68 40 14 03 c0       	push   0xc0031440
c002efb5:	e8 b0 12 ff ff       	call   c002026a <KePanic(char const*)>
c002efba:	83 c4 10             	add    esp,0x10
c002efbd:	eb 15                	jmp    c002efd4 <LinkedList<Device>::removeFirst()+0xa0>
c002efbf:	90                   	nop
c002efc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efc4:	8b 00                	mov    eax,DWORD PTR [eax]
c002efc6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002efcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd0:	89 10                	mov    DWORD PTR [eax],edx
c002efd2:	66 90                	xchg   ax,ax
c002efd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002efdb:	8d 50 ff             	lea    edx,[eax-0x1]
c002efde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efe2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002efe5:	8d 76 00             	lea    esi,[esi+0x0]
c002efe8:	83 c4 0c             	add    esp,0xc
c002efeb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002efec <CPU::~CPU()>:
c002efec:	83 ec 0c             	sub    esp,0xc
c002efef:	ba e8 28 03 c0       	mov    edx,0xc00328e8
c002eff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eff8:	89 10                	mov    DWORD PTR [eax],edx
c002effa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002effe:	83 ec 0c             	sub    esp,0xc
c002f001:	50                   	push   eax
c002f002:	e8 73 c2 fe ff       	call   c001b27a <Device::~Device()>
c002f007:	83 c4 10             	add    esp,0x10
c002f00a:	90                   	nop
c002f00b:	83 c4 0c             	add    esp,0xc
c002f00e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002f010 <CPU::~CPU()>:
c002f010:	83 ec 0c             	sub    esp,0xc
c002f013:	83 ec 0c             	sub    esp,0xc
c002f016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f01a:	e8 cd ff ff ff       	call   c002efec <CPU::~CPU()>
c002f01f:	83 c4 10             	add    esp,0x10
c002f022:	83 ec 08             	sub    esp,0x8
c002f025:	68 94 11 00 00       	push   0x1194
c002f02a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f02e:	e8 b1 a1 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f033:	83 c4 10             	add    esp,0x10
c002f036:	83 c4 0c             	add    esp,0xc
c002f039:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002f03c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002f03c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002f040:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002f043:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002f044 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002f044:	90                   	nop
c002f045:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002f048 <ThreadControlBlock::ThreadControlBlock()>:
c002f048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f04c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002f053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f057:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002f05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f062:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002f069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f06d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002f074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f078:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002f07f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f083:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002f087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f08b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002f08f:	90                   	nop
c002f090:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002f094 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002f094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f09e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f0a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f0b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002f0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002f0c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002f0cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002f0d4:	90                   	nop
c002f0d5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002f0d6 <PCI::~PCI()>:
c002f0d6:	83 ec 0c             	sub    esp,0xc
c002f0d9:	ba 08 38 03 c0       	mov    edx,0xc0033808
c002f0de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e2:	89 10                	mov    DWORD PTR [eax],edx
c002f0e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0e8:	83 ec 0c             	sub    esp,0xc
c002f0eb:	50                   	push   eax
c002f0ec:	e8 1b bc fe ff       	call   c001ad0c <Bus::~Bus()>
c002f0f1:	83 c4 10             	add    esp,0x10
c002f0f4:	90                   	nop
c002f0f5:	83 c4 0c             	add    esp,0xc
c002f0f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002f0fa <PCI::~PCI()>:
c002f0fa:	83 ec 0c             	sub    esp,0xc
c002f0fd:	83 ec 0c             	sub    esp,0xc
c002f100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f104:	e8 cd ff ff ff       	call   c002f0d6 <PCI::~PCI()>
c002f109:	83 c4 10             	add    esp,0x10
c002f10c:	83 ec 08             	sub    esp,0x8
c002f10f:	68 5c 01 00 00       	push   0x15c
c002f114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f118:	e8 c7 a0 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f11d:	83 c4 10             	add    esp,0x10
c002f120:	83 c4 0c             	add    esp,0xc
c002f123:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002f124 <IDE::~IDE()>:
c002f124:	83 ec 0c             	sub    esp,0xc
c002f127:	ba bc 38 03 c0       	mov    edx,0xc00338bc
c002f12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f130:	89 10                	mov    DWORD PTR [eax],edx
c002f132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f136:	83 ec 0c             	sub    esp,0xc
c002f139:	50                   	push   eax
c002f13a:	e8 c9 c5 fe ff       	call   c001b708 <HardDiskController::~HardDiskController()>
c002f13f:	83 c4 10             	add    esp,0x10
c002f142:	90                   	nop
c002f143:	83 c4 0c             	add    esp,0xc
c002f146:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f148 <IDE::~IDE()>:
c002f148:	83 ec 0c             	sub    esp,0xc
c002f14b:	83 ec 0c             	sub    esp,0xc
c002f14e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f152:	e8 cd ff ff ff       	call   c002f124 <IDE::~IDE()>
c002f157:	83 c4 10             	add    esp,0x10
c002f15a:	83 ec 08             	sub    esp,0x8
c002f15d:	68 70 02 00 00       	push   0x270
c002f162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f166:	e8 79 a0 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f16b:	83 c4 10             	add    esp,0x10
c002f16e:	83 c4 0c             	add    esp,0xc
c002f171:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f172 <SATABus::~SATABus()>:
c002f172:	83 ec 0c             	sub    esp,0xc
c002f175:	ba 0c 39 03 c0       	mov    edx,0xc003390c
c002f17a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f17e:	89 10                	mov    DWORD PTR [eax],edx
c002f180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f184:	83 ec 0c             	sub    esp,0xc
c002f187:	50                   	push   eax
c002f188:	e8 7b c5 fe ff       	call   c001b708 <HardDiskController::~HardDiskController()>
c002f18d:	83 c4 10             	add    esp,0x10
c002f190:	90                   	nop
c002f191:	83 c4 0c             	add    esp,0xc
c002f194:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f196 <SATABus::~SATABus()>:
c002f196:	83 ec 0c             	sub    esp,0xc
c002f199:	83 ec 0c             	sub    esp,0xc
c002f19c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1a0:	e8 cd ff ff ff       	call   c002f172 <SATABus::~SATABus()>
c002f1a5:	83 c4 10             	add    esp,0x10
c002f1a8:	83 ec 08             	sub    esp,0x8
c002f1ab:	68 64 01 00 00       	push   0x164
c002f1b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1b4:	e8 2b a0 fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f1b9:	83 c4 10             	add    esp,0x10
c002f1bc:	83 c4 0c             	add    esp,0xc
c002f1bf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f1c0 <ATA::~ATA()>:
c002f1c0:	83 ec 0c             	sub    esp,0xc
c002f1c3:	ba 4c 39 03 c0       	mov    edx,0xc003394c
c002f1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1cc:	89 10                	mov    DWORD PTR [eax],edx
c002f1ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d2:	83 ec 0c             	sub    esp,0xc
c002f1d5:	50                   	push   eax
c002f1d6:	e8 0f c6 fe ff       	call   c001b7ea <PhysicalDisk::~PhysicalDisk()>
c002f1db:	83 c4 10             	add    esp,0x10
c002f1de:	90                   	nop
c002f1df:	83 c4 0c             	add    esp,0xc
c002f1e2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f1e4 <ATA::~ATA()>:
c002f1e4:	83 ec 0c             	sub    esp,0xc
c002f1e7:	83 ec 0c             	sub    esp,0xc
c002f1ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1ee:	e8 cd ff ff ff       	call   c002f1c0 <ATA::~ATA()>
c002f1f3:	83 c4 10             	add    esp,0x10
c002f1f6:	83 ec 08             	sub    esp,0x8
c002f1f9:	68 7c 01 00 00       	push   0x17c
c002f1fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f202:	e8 dd 9f fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f207:	83 c4 10             	add    esp,0x10
c002f20a:	83 c4 0c             	add    esp,0xc
c002f20d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f20e <ATAPI::~ATAPI()>:
c002f20e:	83 ec 0c             	sub    esp,0xc
c002f211:	ba 94 39 03 c0       	mov    edx,0xc0033994
c002f216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f21a:	89 10                	mov    DWORD PTR [eax],edx
c002f21c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f220:	83 ec 0c             	sub    esp,0xc
c002f223:	50                   	push   eax
c002f224:	e8 c1 c5 fe ff       	call   c001b7ea <PhysicalDisk::~PhysicalDisk()>
c002f229:	83 c4 10             	add    esp,0x10
c002f22c:	90                   	nop
c002f22d:	83 c4 0c             	add    esp,0xc
c002f230:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f232 <ATAPI::~ATAPI()>:
c002f232:	83 ec 0c             	sub    esp,0xc
c002f235:	83 ec 0c             	sub    esp,0xc
c002f238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f23c:	e8 cd ff ff ff       	call   c002f20e <ATAPI::~ATAPI()>
c002f241:	83 c4 10             	add    esp,0x10
c002f244:	83 ec 08             	sub    esp,0x8
c002f247:	68 84 01 00 00       	push   0x184
c002f24c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f250:	e8 8f 9f fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f255:	83 c4 10             	add    esp,0x10
c002f258:	83 c4 0c             	add    esp,0xc
c002f25b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f25c <SATA::~SATA()>:
c002f25c:	83 ec 0c             	sub    esp,0xc
c002f25f:	ba 54 3a 03 c0       	mov    edx,0xc0033a54
c002f264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f268:	89 10                	mov    DWORD PTR [eax],edx
c002f26a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f26e:	83 ec 0c             	sub    esp,0xc
c002f271:	50                   	push   eax
c002f272:	e8 73 c5 fe ff       	call   c001b7ea <PhysicalDisk::~PhysicalDisk()>
c002f277:	83 c4 10             	add    esp,0x10
c002f27a:	90                   	nop
c002f27b:	83 c4 0c             	add    esp,0xc
c002f27e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f280 <SATA::~SATA()>:
c002f280:	83 ec 0c             	sub    esp,0xc
c002f283:	83 ec 0c             	sub    esp,0xc
c002f286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f28a:	e8 cd ff ff ff       	call   c002f25c <SATA::~SATA()>
c002f28f:	83 c4 10             	add    esp,0x10
c002f292:	83 ec 08             	sub    esp,0x8
c002f295:	68 7c 01 00 00       	push   0x17c
c002f29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f29e:	e8 41 9f fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f2a3:	83 c4 10             	add    esp,0x10
c002f2a6:	83 c4 0c             	add    esp,0xc
c002f2a9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f2aa <SATAPI::~SATAPI()>:
c002f2aa:	83 ec 0c             	sub    esp,0xc
c002f2ad:	ba 78 3b 03 c0       	mov    edx,0xc0033b78
c002f2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2b6:	89 10                	mov    DWORD PTR [eax],edx
c002f2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f2bc:	83 ec 0c             	sub    esp,0xc
c002f2bf:	50                   	push   eax
c002f2c0:	e8 25 c5 fe ff       	call   c001b7ea <PhysicalDisk::~PhysicalDisk()>
c002f2c5:	83 c4 10             	add    esp,0x10
c002f2c8:	90                   	nop
c002f2c9:	83 c4 0c             	add    esp,0xc
c002f2cc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f2ce <SATAPI::~SATAPI()>:
c002f2ce:	83 ec 0c             	sub    esp,0xc
c002f2d1:	83 ec 0c             	sub    esp,0xc
c002f2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2d8:	e8 cd ff ff ff       	call   c002f2aa <SATAPI::~SATAPI()>
c002f2dd:	83 c4 10             	add    esp,0x10
c002f2e0:	83 ec 08             	sub    esp,0x8
c002f2e3:	68 84 01 00 00       	push   0x184
c002f2e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2ec:	e8 f3 9e fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f2f1:	83 c4 10             	add    esp,0x10
c002f2f4:	83 c4 0c             	add    esp,0xc
c002f2f7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f2f8 <IOAPIC::~IOAPIC()>:
c002f2f8:	83 ec 0c             	sub    esp,0xc
c002f2fb:	ba b8 3b 03 c0       	mov    edx,0xc0033bb8
c002f300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f304:	89 10                	mov    DWORD PTR [eax],edx
c002f306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f30a:	83 ec 0c             	sub    esp,0xc
c002f30d:	50                   	push   eax
c002f30e:	e8 67 bf fe ff       	call   c001b27a <Device::~Device()>
c002f313:	83 c4 10             	add    esp,0x10
c002f316:	90                   	nop
c002f317:	83 c4 0c             	add    esp,0xc
c002f31a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f31c <IOAPIC::~IOAPIC()>:
c002f31c:	83 ec 0c             	sub    esp,0xc
c002f31f:	83 ec 0c             	sub    esp,0xc
c002f322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f326:	e8 cd ff ff ff       	call   c002f2f8 <IOAPIC::~IOAPIC()>
c002f32b:	83 c4 10             	add    esp,0x10
c002f32e:	83 ec 08             	sub    esp,0x8
c002f331:	68 68 01 00 00       	push   0x168
c002f336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f33a:	e8 a5 9e fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f33f:	83 c4 10             	add    esp,0x10
c002f342:	83 c4 0c             	add    esp,0xc
c002f345:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f348 <APICTimer::~APICTimer()>:
c002f348:	83 ec 0c             	sub    esp,0xc
c002f34b:	ba 00 3c 03 c0       	mov    edx,0xc0033c00
c002f350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f354:	89 10                	mov    DWORD PTR [eax],edx
c002f356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f35a:	83 ec 0c             	sub    esp,0xc
c002f35d:	50                   	push   eax
c002f35e:	e8 f9 d9 fe ff       	call   c001cd5c <Timer::~Timer()>
c002f363:	83 c4 10             	add    esp,0x10
c002f366:	90                   	nop
c002f367:	83 c4 0c             	add    esp,0xc
c002f36a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f36c <APICTimer::~APICTimer()>:
c002f36c:	83 ec 0c             	sub    esp,0xc
c002f36f:	83 ec 0c             	sub    esp,0xc
c002f372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f376:	e8 cd ff ff ff       	call   c002f348 <APICTimer::~APICTimer()>
c002f37b:	83 c4 10             	add    esp,0x10
c002f37e:	83 ec 08             	sub    esp,0x8
c002f381:	68 60 01 00 00       	push   0x160
c002f386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f38a:	e8 55 9e fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f38f:	83 c4 10             	add    esp,0x10
c002f392:	83 c4 0c             	add    esp,0xc
c002f395:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f398 <PIT::~PIT()>:
c002f398:	83 ec 0c             	sub    esp,0xc
c002f39b:	ba 50 3c 03 c0       	mov    edx,0xc0033c50
c002f3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3a4:	89 10                	mov    DWORD PTR [eax],edx
c002f3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f3aa:	83 ec 0c             	sub    esp,0xc
c002f3ad:	50                   	push   eax
c002f3ae:	e8 a9 d9 fe ff       	call   c001cd5c <Timer::~Timer()>
c002f3b3:	83 c4 10             	add    esp,0x10
c002f3b6:	90                   	nop
c002f3b7:	83 c4 0c             	add    esp,0xc
c002f3ba:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f3bc <PIT::~PIT()>:
c002f3bc:	83 ec 0c             	sub    esp,0xc
c002f3bf:	83 ec 0c             	sub    esp,0xc
c002f3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3c6:	e8 cd ff ff ff       	call   c002f398 <PIT::~PIT()>
c002f3cb:	83 c4 10             	add    esp,0x10
c002f3ce:	83 ec 08             	sub    esp,0x8
c002f3d1:	68 5c 01 00 00       	push   0x15c
c002f3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f3da:	e8 05 9e fe ff       	call   c00191e4 <operator delete(void*, unsigned long)>
c002f3df:	83 c4 10             	add    esp,0x10
c002f3e2:	83 c4 0c             	add    esp,0xc
c002f3e5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 3b 2a 03 c0       	mov    esi,0xc0032a3b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 57 2a 03 c0       	mov    esi,0xc0032a57
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
