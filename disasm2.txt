
kernel/KRNLP2.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 1d 64 01 00       	call   c001643d <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 46 03 c0       	mov    eax,0xc0034664
c0000025:	3d 64 46 03 c0       	cmp    eax,0xc0034664
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 46 03 c0       	push   0xc0034664
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 46 03 c0       	mov    eax,0xc0034664
c0000051:	2d 64 46 03 c0       	sub    eax,0xc0034664
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 46 03 c0       	push   0xc0034664
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc f2 02 c0       	mov    ebx,0xc002f2cc
c0000097:	81 eb c8 f2 02 c0    	sub    ebx,0xc002f2c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 f2 02 c0       	mov    esi,0xc002f2c8
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 46 03 c0       	push   0xc0034664
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 64 46 03 c0       	push   0xc0034664
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 23 47 02 00       	call   c00249d0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 0c 8d 01 00       	call   c0018fd1 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 01 47 02 00       	call   c00249d0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 0e 4c 02 00       	call   c0024efc <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a1 50 02 00       	call   c0025398 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 f3 fd 01 00       	jmp    c0020172 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	5b                   	pop    ebx
c00003b4:	31 c0                	xor    eax,eax
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 06             	cmp    esi,0x6
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c1 04             	add    ecx,0x4
c0000445:	83 c6 04             	add    esi,0x4
c0000448:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000499:	83 eb 01             	sub    ebx,0x1
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	83 c3 01             	add    ebx,0x1
c00004d8:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	83 fa 08             	cmp    edx,0x8
c0000502:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000507:	89 f7                	mov    edi,esi
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 07             	and    edx,0x7
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	5b                   	pop    ebx
c000051d:	89 f0                	mov    eax,esi
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 1d                	jne    c0000561 <memset+0x71>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 1f                	jne    c000056b <memset+0x7b>
c000054c:	f7 c7 04 00 00 00    	test   edi,0x4
c0000552:	75 22                	jne    c0000576 <memset+0x86>
c0000554:	89 d1                	mov    ecx,edx
c0000556:	c1 e9 02             	shr    ecx,0x2
c0000559:	fc                   	cld    
c000055a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000055c:	83 e2 03             	and    edx,0x3
c000055f:	eb aa                	jmp    c000050b <memset+0x1b>
c0000561:	88 06                	mov    BYTE PTR [esi],al
c0000563:	8d 7e 01             	lea    edi,[esi+0x1]
c0000566:	83 ea 01             	sub    edx,0x1
c0000569:	eb d9                	jmp    c0000544 <memset+0x54>
c000056b:	66 89 07             	mov    WORD PTR [edi],ax
c000056e:	83 ea 02             	sub    edx,0x2
c0000571:	83 c7 02             	add    edi,0x2
c0000574:	eb d6                	jmp    c000054c <memset+0x5c>
c0000576:	89 07                	mov    DWORD PTR [edi],eax
c0000578:	83 ea 04             	sub    edx,0x4
c000057b:	83 c7 04             	add    edi,0x4
c000057e:	eb d4                	jmp    c0000554 <memset+0x64>

c0000580 <strlen>:
c0000580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000584:	31 c0                	xor    eax,eax
c0000586:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000589:	74 15                	je     c00005a0 <strlen+0x20>
c000058b:	90                   	nop
c000058c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000590:	83 c0 01             	add    eax,0x1
c0000593:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000597:	75 f7                	jne    c0000590 <strlen+0x10>
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00005a0:	c3                   	ret    
c00005a1:	eb 0d                	jmp    c00005b0 <strpbrk>
c00005a3:	90                   	nop
c00005a4:	90                   	nop
c00005a5:	90                   	nop
c00005a6:	90                   	nop
c00005a7:	90                   	nop
c00005a8:	90                   	nop
c00005a9:	90                   	nop
c00005aa:	90                   	nop
c00005ab:	90                   	nop
c00005ac:	90                   	nop
c00005ad:	90                   	nop
c00005ae:	90                   	nop
c00005af:	90                   	nop

c00005b0 <strpbrk>:
c00005b0:	57                   	push   edi
c00005b1:	56                   	push   esi
c00005b2:	53                   	push   ebx
c00005b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005bb:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005be:	85 db                	test   ebx,ebx
c00005c0:	74 36                	je     c00005f8 <strpbrk+0x48>
c00005c2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005c5:	85 f6                	test   esi,esi
c00005c7:	74 25                	je     c00005ee <strpbrk+0x3e>
c00005c9:	39 de                	cmp    esi,ebx
c00005cb:	74 2d                	je     c00005fa <strpbrk+0x4a>
c00005cd:	89 fa                	mov    edx,edi
c00005cf:	eb 13                	jmp    c00005e4 <strpbrk+0x34>
c00005d1:	eb 0d                	jmp    c00005e0 <strpbrk+0x30>
c00005d3:	90                   	nop
c00005d4:	90                   	nop
c00005d5:	90                   	nop
c00005d6:	90                   	nop
c00005d7:	90                   	nop
c00005d8:	90                   	nop
c00005d9:	90                   	nop
c00005da:	90                   	nop
c00005db:	90                   	nop
c00005dc:	90                   	nop
c00005dd:	90                   	nop
c00005de:	90                   	nop
c00005df:	90                   	nop
c00005e0:	39 d9                	cmp    ecx,ebx
c00005e2:	74 16                	je     c00005fa <strpbrk+0x4a>
c00005e4:	83 c2 01             	add    edx,0x1
c00005e7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005ea:	85 c9                	test   ecx,ecx
c00005ec:	75 f2                	jne    c00005e0 <strpbrk+0x30>
c00005ee:	83 c0 01             	add    eax,0x1
c00005f1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005f4:	85 db                	test   ebx,ebx
c00005f6:	75 cd                	jne    c00005c5 <strpbrk+0x15>
c00005f8:	31 c0                	xor    eax,eax
c00005fa:	5b                   	pop    ebx
c00005fb:	5e                   	pop    esi
c00005fc:	5f                   	pop    edi
c00005fd:	c3                   	ret    
c00005fe:	66 90                	xchg   ax,ax

c0000600 <strtok>:
c0000600:	56                   	push   esi
c0000601:	53                   	push   ebx
c0000602:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000606:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000060a:	85 db                	test   ebx,ebx
c000060c:	75 08                	jne    c0000616 <strtok+0x16>
c000060e:	eb 30                	jmp    c0000640 <strtok+0x40>
c0000610:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000613:	83 c3 01             	add    ebx,0x1
c0000616:	56                   	push   esi
c0000617:	53                   	push   ebx
c0000618:	e8 93 ff ff ff       	call   c00005b0 <strpbrk>
c000061d:	5a                   	pop    edx
c000061e:	59                   	pop    ecx
c000061f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000624:	39 d8                	cmp    eax,ebx
c0000626:	74 e8                	je     c0000610 <strtok+0x10>
c0000628:	85 c0                	test   eax,eax
c000062a:	74 1e                	je     c000064a <strtok+0x4a>
c000062c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000062f:	8d 50 01             	lea    edx,[eax+0x1]
c0000632:	89 d8                	mov    eax,ebx
c0000634:	5b                   	pop    ebx
c0000635:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000063b:	5e                   	pop    esi
c000063c:	c3                   	ret    
c000063d:	8d 76 00             	lea    esi,[esi+0x0]
c0000640:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000646:	85 db                	test   ebx,ebx
c0000648:	75 cc                	jne    c0000616 <strtok+0x16>
c000064a:	5b                   	pop    ebx
c000064b:	31 c0                	xor    eax,eax
c000064d:	5e                   	pop    esi
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strcpy>:
c0000650:	53                   	push   ebx
c0000651:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000655:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000659:	8a 11                	mov    dl,BYTE PTR [ecx]
c000065b:	89 c3                	mov    ebx,eax
c000065d:	84 d2                	test   dl,dl
c000065f:	74 1d                	je     c000067e <strcpy+0x2e>
c0000661:	eb 0d                	jmp    c0000670 <strcpy+0x20>
c0000663:	90                   	nop
c0000664:	90                   	nop
c0000665:	90                   	nop
c0000666:	90                   	nop
c0000667:	90                   	nop
c0000668:	90                   	nop
c0000669:	90                   	nop
c000066a:	90                   	nop
c000066b:	90                   	nop
c000066c:	90                   	nop
c000066d:	90                   	nop
c000066e:	90                   	nop
c000066f:	90                   	nop
c0000670:	88 13                	mov    BYTE PTR [ebx],dl
c0000672:	83 c1 01             	add    ecx,0x1
c0000675:	83 c3 01             	add    ebx,0x1
c0000678:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067a:	84 d2                	test   dl,dl
c000067c:	75 f2                	jne    c0000670 <strcpy+0x20>
c000067e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000681:	5b                   	pop    ebx
c0000682:	c3                   	ret    
c0000683:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000690 <strncpy>:
c0000690:	55                   	push   ebp
c0000691:	57                   	push   edi
c0000692:	56                   	push   esi
c0000693:	53                   	push   ebx
c0000694:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000069c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00006a0:	85 c9                	test   ecx,ecx
c00006a2:	74 43                	je     c00006e7 <strncpy+0x57>
c00006a4:	0f b6 75 00          	movzx  esi,BYTE PTR [ebp+0x0]
c00006a8:	8d 41 ff             	lea    eax,[ecx-0x1]
c00006ab:	8d 7a 01             	lea    edi,[edx+0x1]
c00006ae:	89 f3                	mov    ebx,esi
c00006b0:	88 1a                	mov    BYTE PTR [edx],bl
c00006b2:	84 db                	test   bl,bl
c00006b4:	74 3a                	je     c00006f0 <strncpy+0x60>
c00006b6:	85 c0                	test   eax,eax
c00006b8:	74 2d                	je     c00006e7 <strncpy+0x57>
c00006ba:	8a 5d 01             	mov    bl,BYTE PTR [ebp+0x1]
c00006bd:	8d 41 fe             	lea    eax,[ecx-0x2]
c00006c0:	8d 7a 02             	lea    edi,[edx+0x2]
c00006c3:	8d 4d 02             	lea    ecx,[ebp+0x2]
c00006c6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006c9:	84 db                	test   bl,bl
c00006cb:	75 16                	jne    c00006e3 <strncpy+0x53>
c00006cd:	eb 21                	jmp    c00006f0 <strncpy+0x60>
c00006cf:	90                   	nop
c00006d0:	83 c1 01             	add    ecx,0x1
c00006d3:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006d6:	83 c7 01             	add    edi,0x1
c00006d9:	83 e8 01             	sub    eax,0x1
c00006dc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006df:	84 db                	test   bl,bl
c00006e1:	74 0d                	je     c00006f0 <strncpy+0x60>
c00006e3:	85 c0                	test   eax,eax
c00006e5:	75 e9                	jne    c00006d0 <strncpy+0x40>
c00006e7:	5b                   	pop    ebx
c00006e8:	89 d0                	mov    eax,edx
c00006ea:	5e                   	pop    esi
c00006eb:	5f                   	pop    edi
c00006ec:	5d                   	pop    ebp
c00006ed:	c3                   	ret    
c00006ee:	66 90                	xchg   ax,ax
c00006f0:	85 c0                	test   eax,eax
c00006f2:	74 f3                	je     c00006e7 <strncpy+0x57>
c00006f4:	83 f8 08             	cmp    eax,0x8
c00006f7:	89 c3                	mov    ebx,eax
c00006f9:	73 35                	jae    c0000730 <strncpy+0xa0>
c00006fb:	f6 c3 04             	test   bl,0x4
c00006fe:	74 09                	je     c0000709 <strncpy+0x79>
c0000700:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000706:	83 c7 04             	add    edi,0x4
c0000709:	f6 c3 02             	test   bl,0x2
c000070c:	74 08                	je     c0000716 <strncpy+0x86>
c000070e:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000713:	83 c7 02             	add    edi,0x2
c0000716:	80 e3 01             	and    bl,0x1
c0000719:	74 cc                	je     c00006e7 <strncpy+0x57>
c000071b:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000071e:	89 d0                	mov    eax,edx
c0000720:	5b                   	pop    ebx
c0000721:	5e                   	pop    esi
c0000722:	5f                   	pop    edi
c0000723:	5d                   	pop    ebp
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000730:	f7 c7 01 00 00 00    	test   edi,0x1
c0000736:	75 1f                	jne    c0000757 <strncpy+0xc7>
c0000738:	f7 c7 02 00 00 00    	test   edi,0x2
c000073e:	75 30                	jne    c0000770 <strncpy+0xe0>
c0000740:	f7 c7 04 00 00 00    	test   edi,0x4
c0000746:	75 1a                	jne    c0000762 <strncpy+0xd2>
c0000748:	89 d9                	mov    ecx,ebx
c000074a:	c1 e9 02             	shr    ecx,0x2
c000074d:	fc                   	cld    
c000074e:	31 c0                	xor    eax,eax
c0000750:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000752:	83 e3 03             	and    ebx,0x3
c0000755:	eb a4                	jmp    c00006fb <strncpy+0x6b>
c0000757:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000075a:	83 eb 01             	sub    ebx,0x1
c000075d:	83 c7 01             	add    edi,0x1
c0000760:	eb d6                	jmp    c0000738 <strncpy+0xa8>
c0000762:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0000768:	83 eb 04             	sub    ebx,0x4
c000076b:	83 c7 04             	add    edi,0x4
c000076e:	eb d8                	jmp    c0000748 <strncpy+0xb8>
c0000770:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000775:	83 eb 02             	sub    ebx,0x2
c0000778:	83 c7 02             	add    edi,0x2
c000077b:	eb c3                	jmp    c0000740 <strncpy+0xb0>
c000077d:	8d 76 00             	lea    esi,[esi+0x0]

c0000780 <strcmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000787:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000078b:	8a 17                	mov    dl,BYTE PTR [edi]
c000078d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000790:	38 c2                	cmp    dl,al
c0000792:	75 32                	jne    c00007c6 <strcmp+0x46>
c0000794:	85 c0                	test   eax,eax
c0000796:	74 28                	je     c00007c0 <strcmp+0x40>
c0000798:	b8 01 00 00 00       	mov    eax,0x1
c000079d:	eb 08                	jmp    c00007a7 <strcmp+0x27>
c000079f:	90                   	nop
c00007a0:	83 c0 01             	add    eax,0x1
c00007a3:	85 db                	test   ebx,ebx
c00007a5:	74 19                	je     c00007c0 <strcmp+0x40>
c00007a7:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c00007ab:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c00007ae:	89 da                	mov    edx,ebx
c00007b0:	38 d9                	cmp    cl,bl
c00007b2:	74 ec                	je     c00007a0 <strcmp+0x20>
c00007b4:	5b                   	pop    ebx
c00007b5:	0f b6 c2             	movzx  eax,dl
c00007b8:	0f b6 c9             	movzx  ecx,cl
c00007bb:	29 c8                	sub    eax,ecx
c00007bd:	5e                   	pop    esi
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	5e                   	pop    esi
c00007c4:	5f                   	pop    edi
c00007c5:	c3                   	ret    
c00007c6:	89 c1                	mov    ecx,eax
c00007c8:	eb ea                	jmp    c00007b4 <strcmp+0x34>
c00007ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007d0 <strchr>:
c00007d0:	53                   	push   ebx
c00007d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007d5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007d8:	85 db                	test   ebx,ebx
c00007da:	74 22                	je     c00007fe <strchr+0x2e>
c00007dc:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007e1:	39 d3                	cmp    ebx,edx
c00007e3:	74 1b                	je     c0000800 <strchr+0x30>
c00007e5:	89 d1                	mov    ecx,edx
c00007e7:	eb 0b                	jmp    c00007f4 <strchr+0x24>
c00007e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007f0:	39 ca                	cmp    edx,ecx
c00007f2:	74 0c                	je     c0000800 <strchr+0x30>
c00007f4:	83 c0 01             	add    eax,0x1
c00007f7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007fa:	85 d2                	test   edx,edx
c00007fc:	75 f2                	jne    c00007f0 <strchr+0x20>
c00007fe:	31 c0                	xor    eax,eax
c0000800:	5b                   	pop    ebx
c0000801:	c3                   	ret    
c0000802:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000809:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000810 <strncmp>:
c0000810:	55                   	push   ebp
c0000811:	57                   	push   edi
c0000812:	56                   	push   esi
c0000813:	53                   	push   ebx
c0000814:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000818:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000081c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000820:	85 f6                	test   esi,esi
c0000822:	74 35                	je     c0000859 <strncmp+0x49>
c0000824:	0f be 29             	movsx  ebp,BYTE PTR [ecx]
c0000827:	8a 17                	mov    dl,BYTE PTR [edi]
c0000829:	89 eb                	mov    ebx,ebp
c000082b:	38 da                	cmp    dl,bl
c000082d:	75 31                	jne    c0000860 <strncmp+0x50>
c000082f:	8d 47 01             	lea    eax,[edi+0x1]
c0000832:	85 ed                	test   ebp,ebp
c0000834:	74 23                	je     c0000859 <strncmp+0x49>
c0000836:	01 f7                	add    edi,esi
c0000838:	eb 18                	jmp    c0000852 <strncmp+0x42>
c000083a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000840:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000843:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000845:	89 f2                	mov    edx,esi
c0000847:	38 d3                	cmp    bl,dl
c0000849:	75 15                	jne    c0000860 <strncmp+0x50>
c000084b:	83 c0 01             	add    eax,0x1
c000084e:	85 f6                	test   esi,esi
c0000850:	74 07                	je     c0000859 <strncmp+0x49>
c0000852:	83 c1 01             	add    ecx,0x1
c0000855:	39 c7                	cmp    edi,eax
c0000857:	75 e7                	jne    c0000840 <strncmp+0x30>
c0000859:	5b                   	pop    ebx
c000085a:	31 c0                	xor    eax,eax
c000085c:	5e                   	pop    esi
c000085d:	5f                   	pop    edi
c000085e:	5d                   	pop    ebp
c000085f:	c3                   	ret    
c0000860:	0f b6 db             	movzx  ebx,bl
c0000863:	0f b6 c2             	movzx  eax,dl
c0000866:	29 d8                	sub    eax,ebx
c0000868:	5b                   	pop    ebx
c0000869:	5e                   	pop    esi
c000086a:	5f                   	pop    edi
c000086b:	5d                   	pop    ebp
c000086c:	c3                   	ret    
c000086d:	8d 76 00             	lea    esi,[esi+0x0]

c0000870 <strcat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000876:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000087a:	89 c3                	mov    ebx,eax
c000087c:	eb 04                	jmp    c0000882 <strcat+0x12>
c000087e:	66 90                	xchg   ax,ax
c0000880:	89 d3                	mov    ebx,edx
c0000882:	8d 53 01             	lea    edx,[ebx+0x1]
c0000885:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000889:	75 f5                	jne    c0000880 <strcat+0x10>
c000088b:	31 d2                	xor    edx,edx
c000088d:	8d 76 00             	lea    esi,[esi+0x0]
c0000890:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000893:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000896:	83 c2 01             	add    edx,0x1
c0000899:	84 c9                	test   cl,cl
c000089b:	75 f3                	jne    c0000890 <strcat+0x20>
c000089d:	5b                   	pop    ebx
c000089e:	5e                   	pop    esi
c000089f:	c3                   	ret    

c00008a0 <strncat>:
c00008a0:	56                   	push   esi
c00008a1:	53                   	push   ebx
c00008a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ae:	85 f6                	test   esi,esi
c00008b0:	74 32                	je     c00008e4 <strncat+0x44>
c00008b2:	89 c2                	mov    edx,eax
c00008b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00008c0:	83 c2 01             	add    edx,0x1
c00008c3:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c7:	75 f7                	jne    c00008c0 <strncat+0x20>
c00008c9:	01 ce                	add    esi,ecx
c00008cb:	eb 0a                	jmp    c00008d7 <strncat+0x37>
c00008cd:	8d 76 00             	lea    esi,[esi+0x0]
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 1c                	je     c00008f0 <strncat+0x50>
c00008d4:	83 c2 01             	add    edx,0x1
c00008d7:	83 c1 01             	add    ecx,0x1
c00008da:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008dd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008e0:	84 db                	test   bl,bl
c00008e2:	75 ec                	jne    c00008d0 <strncat+0x30>
c00008e4:	5b                   	pop    ebx
c00008e5:	5e                   	pop    esi
c00008e6:	c3                   	ret    
c00008e7:	89 f6                	mov    esi,esi
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f3:	5b                   	pop    ebx
c00008f4:	5e                   	pop    esi
c00008f5:	c3                   	ret    
c00008f6:	8d 76 00             	lea    esi,[esi+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <strstr>:
c0000900:	57                   	push   edi
c0000901:	56                   	push   esi
c0000902:	53                   	push   ebx
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000090b:	57                   	push   edi
c000090c:	e8 6f fc ff ff       	call   c0000580 <strlen>
c0000911:	59                   	pop    ecx
c0000912:	85 c0                	test   eax,eax
c0000914:	89 c6                	mov    esi,eax
c0000916:	75 1a                	jne    c0000932 <strstr+0x32>
c0000918:	eb 36                	jmp    c0000950 <strstr+0x50>
c000091a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000920:	56                   	push   esi
c0000921:	57                   	push   edi
c0000922:	53                   	push   ebx
c0000923:	e8 58 fa ff ff       	call   c0000380 <memcmp>
c0000928:	83 c4 0c             	add    esp,0xc
c000092b:	85 c0                	test   eax,eax
c000092d:	74 21                	je     c0000950 <strstr+0x50>
c000092f:	83 c3 01             	add    ebx,0x1
c0000932:	53                   	push   ebx
c0000933:	e8 48 fc ff ff       	call   c0000580 <strlen>
c0000938:	5a                   	pop    edx
c0000939:	39 f0                	cmp    eax,esi
c000093b:	73 e3                	jae    c0000920 <strstr+0x20>
c000093d:	5b                   	pop    ebx
c000093e:	31 c0                	xor    eax,eax
c0000940:	5e                   	pop    esi
c0000941:	5f                   	pop    edi
c0000942:	c3                   	ret    
c0000943:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000949:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000950:	89 d8                	mov    eax,ebx
c0000952:	5b                   	pop    ebx
c0000953:	5e                   	pop    esi
c0000954:	5f                   	pop    edi
c0000955:	c3                   	ret    
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000960 <toupper>:
c0000960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000964:	0f b6 d0             	movzx  edx,al
c0000967:	f6 82 e0 f2 02 c0 02 	test   BYTE PTR [edx-0x3ffd0d20],0x2
c000096e:	74 03                	je     c0000973 <toupper+0x13>
c0000970:	83 e8 20             	sub    eax,0x20
c0000973:	c3                   	ret    
c0000974:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000097a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000980 <tolower>:
c0000980:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000984:	0f b6 d0             	movzx  edx,al
c0000987:	f6 82 e0 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0d20],0x1
c000098e:	74 03                	je     c0000993 <tolower+0x13>
c0000990:	83 c0 20             	add    eax,0x20
c0000993:	c3                   	ret    
c0000994:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000099a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c00009a0 <simple_strtoul>:
c00009a0:	55                   	push   ebp
c00009a1:	57                   	push   edi
c00009a2:	56                   	push   esi
c00009a3:	53                   	push   ebx
c00009a4:	83 ec 08             	sub    esp,0x8
c00009a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00009ab:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00009af:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00009b3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00009b6:	f6 82 e0 f2 02 c0 08 	test   BYTE PTR [edx-0x3ffd0d20],0x8
c00009bd:	75 11                	jne    c00009d0 <simple_strtoul+0x30>
c00009bf:	89 d0                	mov    eax,edx
c00009c1:	eb 1e                	jmp    c00009e1 <simple_strtoul+0x41>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	83 c3 01             	add    ebx,0x1
c00009d3:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c00009d6:	f6 82 e0 f2 02 c0 08 	test   BYTE PTR [edx-0x3ffd0d20],0x8
c00009dd:	89 d0                	mov    eax,edx
c00009df:	75 ef                	jne    c00009d0 <simple_strtoul+0x30>
c00009e1:	0f be c0             	movsx  eax,al
c00009e4:	83 f8 09             	cmp    eax,0x9
c00009e7:	74 e7                	je     c00009d0 <simple_strtoul+0x30>
c00009e9:	83 f8 2d             	cmp    eax,0x2d
c00009ec:	0f 84 5e 01 00 00    	je     c0000b50 <simple_strtoul+0x1b0>
c00009f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009fa:	83 f8 2b             	cmp    eax,0x2b
c00009fd:	0f 94 c0             	sete   al
c0000a00:	0f b6 c0             	movzx  eax,al
c0000a03:	01 c3                	add    ebx,eax
c0000a05:	85 ff                	test   edi,edi
c0000a07:	0f 85 d3 00 00 00    	jne    c0000ae0 <simple_strtoul+0x140>
c0000a0d:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a10:	bf 0a 00 00 00       	mov    edi,0xa
c0000a15:	83 fa 30             	cmp    edx,0x30
c0000a18:	89 d1                	mov    ecx,edx
c0000a1a:	0f 84 8b 01 00 00    	je     c0000bab <simple_strtoul+0x20b>
c0000a20:	85 d2                	test   edx,edx
c0000a22:	0f 84 58 01 00 00    	je     c0000b80 <simple_strtoul+0x1e0>
c0000a28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a2f:	31 ed                	xor    ebp,ebp
c0000a31:	31 f6                	xor    esi,esi
c0000a33:	eb 3a                	jmp    c0000a6f <simple_strtoul+0xcf>
c0000a35:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a40:	83 e9 30             	sub    ecx,0x30
c0000a43:	39 f9                	cmp    ecx,edi
c0000a45:	73 59                	jae    c0000aa0 <simple_strtoul+0x100>
c0000a47:	89 c8                	mov    eax,ecx
c0000a49:	31 d2                	xor    edx,edx
c0000a4b:	f7 d0                	not    eax
c0000a4d:	f7 f7                	div    edi
c0000a4f:	39 f0                	cmp    eax,esi
c0000a51:	0f 82 e9 00 00 00    	jb     c0000b40 <simple_strtoul+0x1a0>
c0000a57:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a5e:	0f af f7             	imul   esi,edi
c0000a61:	01 ce                	add    esi,ecx
c0000a63:	83 c3 01             	add    ebx,0x1
c0000a66:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a69:	85 d2                	test   edx,edx
c0000a6b:	89 d1                	mov    ecx,edx
c0000a6d:	74 31                	je     c0000aa0 <simple_strtoul+0x100>
c0000a6f:	0f b6 c9             	movzx  ecx,cl
c0000a72:	f6 81 e0 f2 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0d20],0x4
c0000a79:	75 c5                	jne    c0000a40 <simple_strtoul+0xa0>
c0000a7b:	52                   	push   edx
c0000a7c:	e8 df fe ff ff       	call   c0000960 <toupper>
c0000a81:	59                   	pop    ecx
c0000a82:	0f b6 d0             	movzx  edx,al
c0000a85:	f6 82 e0 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0d20],0x1
c0000a8c:	74 12                	je     c0000aa0 <simple_strtoul+0x100>
c0000a8e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a91:	39 f9                	cmp    ecx,edi
c0000a93:	72 b2                	jb     c0000a47 <simple_strtoul+0xa7>
c0000a95:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a99:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000aa0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aa4:	85 d2                	test   edx,edx
c0000aa6:	74 11                	je     c0000ab9 <simple_strtoul+0x119>
c0000aa8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000aab:	09 f0                	or     eax,esi
c0000aad:	0f 84 ad 00 00 00    	je     c0000b60 <simple_strtoul+0x1c0>
c0000ab3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab7:	89 18                	mov    DWORD PTR [eax],ebx
c0000ab9:	83 fd 01             	cmp    ebp,0x1
c0000abc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0000ac1:	0f 44 f0             	cmove  esi,eax
c0000ac4:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000ac9:	75 02                	jne    c0000acd <simple_strtoul+0x12d>
c0000acb:	f7 de                	neg    esi
c0000acd:	83 c4 08             	add    esp,0x8
c0000ad0:	89 f0                	mov    eax,esi
c0000ad2:	5b                   	pop    ebx
c0000ad3:	5e                   	pop    esi
c0000ad4:	5f                   	pop    edi
c0000ad5:	5d                   	pop    ebp
c0000ad6:	c3                   	ret    
c0000ad7:	89 f6                	mov    esi,esi
c0000ad9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ae0:	8d 47 fe             	lea    eax,[edi-0x2]
c0000ae3:	83 f8 22             	cmp    eax,0x22
c0000ae6:	0f 87 94 00 00 00    	ja     c0000b80 <simple_strtoul+0x1e0>
c0000aec:	83 ff 08             	cmp    edi,0x8
c0000aef:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000af1:	0f 84 df 00 00 00    	je     c0000bd6 <simple_strtoul+0x236>
c0000af7:	83 ff 10             	cmp    edi,0x10
c0000afa:	0f 85 13 01 00 00    	jne    c0000c13 <simple_strtoul+0x273>
c0000b00:	0f be d1             	movsx  edx,cl
c0000b03:	bf 10 00 00 00       	mov    edi,0x10
c0000b08:	83 fa 30             	cmp    edx,0x30
c0000b0b:	0f 85 0f ff ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000b11:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b15:	52                   	push   edx
c0000b16:	89 d1                	mov    ecx,edx
c0000b18:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b1c:	e8 5f fe ff ff       	call   c0000980 <tolower>
c0000b21:	5e                   	pop    esi
c0000b22:	83 f8 78             	cmp    eax,0x78
c0000b25:	0f 84 da 00 00 00    	je     c0000c05 <simple_strtoul+0x265>
c0000b2b:	83 c3 01             	add    ebx,0x1
c0000b2e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b31:	e9 ea fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000b36:	8d 76 00             	lea    esi,[esi+0x0]
c0000b39:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b40:	bd 01 00 00 00       	mov    ebp,0x1
c0000b45:	31 f6                	xor    esi,esi
c0000b47:	e9 17 ff ff ff       	jmp    c0000a63 <simple_strtoul+0xc3>
c0000b4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b50:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b58:	83 c3 01             	add    ebx,0x1
c0000b5b:	e9 a5 fe ff ff       	jmp    c0000a05 <simple_strtoul+0x65>
c0000b60:	85 db                	test   ebx,ebx
c0000b62:	74 39                	je     c0000b9d <simple_strtoul+0x1fd>
c0000b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b68:	31 f6                	xor    esi,esi
c0000b6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b6e:	89 38                	mov    DWORD PTR [eax],edi
c0000b70:	e9 44 ff ff ff       	jmp    c0000ab9 <simple_strtoul+0x119>
c0000b75:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b79:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b84:	85 c0                	test   eax,eax
c0000b86:	74 1c                	je     c0000ba4 <simple_strtoul+0x204>
c0000b88:	85 db                	test   ebx,ebx
c0000b8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b8e:	74 68                	je     c0000bf8 <simple_strtoul+0x258>
c0000b90:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000b94:	31 f6                	xor    esi,esi
c0000b96:	89 38                	mov    DWORD PTR [eax],edi
c0000b98:	e9 27 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000b9d:	31 f6                	xor    esi,esi
c0000b9f:	e9 0f ff ff ff       	jmp    c0000ab3 <simple_strtoul+0x113>
c0000ba4:	31 f6                	xor    esi,esi
c0000ba6:	e9 19 ff ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000bab:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000baf:	52                   	push   edx
c0000bb0:	89 d1                	mov    ecx,edx
c0000bb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000bb6:	e8 c5 fd ff ff       	call   c0000980 <tolower>
c0000bbb:	5f                   	pop    edi
c0000bbc:	83 f8 78             	cmp    eax,0x78
c0000bbf:	74 2c                	je     c0000bed <simple_strtoul+0x24d>
c0000bc1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000bc4:	83 c3 01             	add    ebx,0x1
c0000bc7:	83 fa 30             	cmp    edx,0x30
c0000bca:	74 16                	je     c0000be2 <simple_strtoul+0x242>
c0000bcc:	bf 08 00 00 00       	mov    edi,0x8
c0000bd1:	e9 4a fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000bd6:	0f be d1             	movsx  edx,cl
c0000bd9:	83 fa 30             	cmp    edx,0x30
c0000bdc:	0f 85 3e fe ff ff    	jne    c0000a20 <simple_strtoul+0x80>
c0000be2:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000be6:	83 c3 01             	add    ebx,0x1
c0000be9:	89 d1                	mov    ecx,edx
c0000beb:	eb df                	jmp    c0000bcc <simple_strtoul+0x22c>
c0000bed:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bf0:	83 c3 02             	add    ebx,0x2
c0000bf3:	e9 08 ff ff ff       	jmp    c0000b00 <simple_strtoul+0x160>
c0000bf8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bfe:	31 f6                	xor    esi,esi
c0000c00:	e9 bf fe ff ff       	jmp    c0000ac4 <simple_strtoul+0x124>
c0000c05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000c09:	83 c3 02             	add    ebx,0x2
c0000c0c:	89 d1                	mov    ecx,edx
c0000c0e:	e9 0d fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c13:	0f be d1             	movsx  edx,cl
c0000c16:	e9 05 fe ff ff       	jmp    c0000a20 <simple_strtoul+0x80>
c0000c1b:	90                   	nop

c0000c1c <LWIP_PLATFORM_HTONS>:
c0000c1c:	83 ec 04             	sub    esp,0x4
c0000c1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000c27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c2b:	c1 e8 08             	shr    eax,0x8
c0000c2e:	89 c2                	mov    edx,eax
c0000c30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c34:	c1 e0 08             	shl    eax,0x8
c0000c37:	09 d0                	or     eax,edx
c0000c39:	83 c4 04             	add    esp,0x4
c0000c3c:	c3                   	ret    
c0000c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0000c40 <LWIP_PLATFORM_HTONL>:
c0000c40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c44:	c1 e8 18             	shr    eax,0x18
c0000c47:	89 c2                	mov    edx,eax
c0000c49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c4d:	c1 e8 08             	shr    eax,0x8
c0000c50:	25 00 ff 00 00       	and    eax,0xff00
c0000c55:	09 c2                	or     edx,eax
c0000c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c5b:	c1 e0 08             	shl    eax,0x8
c0000c5e:	25 00 00 ff 00       	and    eax,0xff0000
c0000c63:	09 c2                	or     edx,eax
c0000c65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c69:	c1 e0 18             	shl    eax,0x18
c0000c6c:	09 d0                	or     eax,edx
c0000c6e:	c3                   	ret    
c0000c6f:	90                   	nop

c0000c70 <lwip_socket_init>:
c0000c70:	90                   	nop
c0000c71:	c3                   	ret    
c0000c72:	66 90                	xchg   ax,ax

c0000c74 <sys_mutex_new>:
c0000c74:	90                   	nop
c0000c75:	c3                   	ret    
c0000c76:	66 90                	xchg   ax,ax

c0000c78 <sys_mutex_lock>:
c0000c78:	90                   	nop
c0000c79:	c3                   	ret    
c0000c7a:	66 90                	xchg   ax,ax

c0000c7c <sys_mutex_unlock>:
c0000c7c:	90                   	nop
c0000c7d:	c3                   	ret    
c0000c7e:	66 90                	xchg   ax,ax

c0000c80 <tcpip_callback_with_block>:
c0000c80:	90                   	nop
c0000c81:	c3                   	ret    
c0000c82:	66 90                	xchg   ax,ax

c0000c84 <sys_sem_new>:
c0000c84:	83 ec 1c             	sub    esp,0x1c
c0000c87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c94:	83 ec 08             	sub    esp,0x8
c0000c97:	50                   	push   eax
c0000c98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c9c:	e8 6b 0f 02 00       	call   c0021c0c <KeNetCreateSemaphore>
c0000ca1:	83 c4 10             	add    esp,0x10
c0000ca4:	b0 00                	mov    al,0x0
c0000ca6:	83 c4 1c             	add    esp,0x1c
c0000ca9:	c3                   	ret    
c0000caa:	66 90                	xchg   ax,ax

c0000cac <sys_sem_free>:
c0000cac:	83 ec 0c             	sub    esp,0xc
c0000caf:	83 ec 0c             	sub    esp,0xc
c0000cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cb6:	e8 89 0f 02 00       	call   c0021c44 <KeNetFreeSemaphore>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	90                   	nop
c0000cbf:	83 c4 0c             	add    esp,0xc
c0000cc2:	c3                   	ret    
c0000cc3:	90                   	nop

c0000cc4 <sys_sem_signal>:
c0000cc4:	83 ec 0c             	sub    esp,0xc
c0000cc7:	83 ec 0c             	sub    esp,0xc
c0000cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cce:	e8 8d 0f 02 00       	call   c0021c60 <KeNetSignalSemaphore>
c0000cd3:	83 c4 10             	add    esp,0x10
c0000cd6:	90                   	nop
c0000cd7:	83 c4 0c             	add    esp,0xc
c0000cda:	c3                   	ret    
c0000cdb:	90                   	nop

c0000cdc <sys_arch_sem_wait>:
c0000cdc:	83 ec 0c             	sub    esp,0xc
c0000cdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ce3:	83 ec 08             	sub    esp,0x8
c0000ce6:	50                   	push   eax
c0000ce7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000ceb:	e8 8c 0f 02 00       	call   c0021c7c <KeNetWaitSemaphore>
c0000cf0:	83 c4 10             	add    esp,0x10
c0000cf3:	83 c4 0c             	add    esp,0xc
c0000cf6:	c3                   	ret    
c0000cf7:	90                   	nop

c0000cf8 <sys_mbox_new>:
c0000cf8:	b0 00                	mov    al,0x0
c0000cfa:	c3                   	ret    
c0000cfb:	90                   	nop

c0000cfc <sys_mbox_free>:
c0000cfc:	90                   	nop
c0000cfd:	c3                   	ret    
c0000cfe:	66 90                	xchg   ax,ax

c0000d00 <sys_mbox_post>:
c0000d00:	90                   	nop
c0000d01:	c3                   	ret    
c0000d02:	66 90                	xchg   ax,ax

c0000d04 <sys_arch_mbox_fetch>:
c0000d04:	b8 00 00 00 00       	mov    eax,0x0
c0000d09:	c3                   	ret    
c0000d0a:	66 90                	xchg   ax,ax

c0000d0c <sys_arch_mbox_tryfetch>:
c0000d0c:	b8 00 00 00 00       	mov    eax,0x0
c0000d11:	c3                   	ret    
c0000d12:	66 90                	xchg   ax,ax

c0000d14 <sys_mbox_trypost>:
c0000d14:	90                   	nop
c0000d15:	c3                   	ret    
c0000d16:	66 90                	xchg   ax,ax

c0000d18 <sys_thread_new>:
c0000d18:	b8 00 00 00 00       	mov    eax,0x0
c0000d1d:	c3                   	ret    
c0000d1e:	66 90                	xchg   ax,ax

c0000d20 <sys_init>:
c0000d20:	90                   	nop
c0000d21:	c3                   	ret    

c0000d22 <largebin_index>:
c0000d22:	89 c2                	mov    edx,eax
c0000d24:	c1 ea 08             	shr    edx,0x8
c0000d27:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000d2d:	77 10                	ja     c0000d3f <largebin_index+0x1d>
c0000d2f:	0f bd d2             	bsr    edx,edx
c0000d32:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000d35:	d3 e8                	shr    eax,cl
c0000d37:	83 e0 03             	and    eax,0x3
c0000d3a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000d3e:	c3                   	ret    
c0000d3f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000d44:	c3                   	ret    

c0000d45 <malloc_init_state>:
c0000d45:	8d 50 34             	lea    edx,[eax+0x34]
c0000d48:	53                   	push   ebx
c0000d49:	89 d1                	mov    ecx,edx
c0000d4b:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000d51:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000d54:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000d57:	83 c2 08             	add    edx,0x8
c0000d5a:	39 da                	cmp    edx,ebx
c0000d5c:	75 f3                	jne    c0000d51 <malloc_init_state+0xc>
c0000d5e:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d6a:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000d74:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000d7e:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d88:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d8f:	83 e2 03             	and    edx,0x3
c0000d92:	5b                   	pop    ebx
c0000d93:	83 ca 48             	or     edx,0x48
c0000d96:	89 10                	mov    DWORD PTR [eax],edx
c0000d98:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d9b:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000da5:	c3                   	ret    

c0000da6 <malloc_consolidate>:
c0000da6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000da8:	85 d2                	test   edx,edx
c0000daa:	0f 84 d8 00 00 00    	je     c0000e88 <malloc_consolidate+0xe2>
c0000db0:	55                   	push   ebp
c0000db1:	83 e2 fd             	and    edx,0xfffffffd
c0000db4:	57                   	push   edi
c0000db5:	89 c5                	mov    ebp,eax
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	8d 78 34             	lea    edi,[eax+0x34]
c0000dbc:	83 ec 10             	sub    esp,0x10
c0000dbf:	89 10                	mov    DWORD PTR [eax],edx
c0000dc1:	c1 ea 03             	shr    edx,0x3
c0000dc4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000dc8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000dcc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000dd0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000dd3:	85 d2                	test   edx,edx
c0000dd5:	0f 84 98 00 00 00    	je     c0000e73 <malloc_consolidate+0xcd>
c0000ddb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000de2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000de5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000de8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000dec:	89 f9                	mov    ecx,edi
c0000dee:	83 e1 fe             	and    ecx,0xfffffffe
c0000df1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000df4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000df7:	83 e3 fc             	and    ebx,0xfffffffc
c0000dfa:	83 e7 01             	and    edi,0x1
c0000dfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000e00:	75 14                	jne    c0000e16 <malloc_consolidate+0x70>
c0000e02:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000e04:	29 fa                	sub    edx,edi
c0000e06:	01 f9                	add    ecx,edi
c0000e08:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e0b:	89 fb                	mov    ebx,edi
c0000e0d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000e10:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000e13:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000e16:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000e19:	74 40                	je     c0000e5b <malloc_consolidate+0xb5>
c0000e1b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000e1e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000e21:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000e25:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000e28:	83 e7 01             	and    edi,0x1
c0000e2b:	75 0e                	jne    c0000e3b <malloc_consolidate+0x95>
c0000e2d:	01 d9                	add    ecx,ebx
c0000e2f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000e32:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000e35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000e38:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000e3b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000e3e:	89 ce                	mov    esi,ecx
c0000e40:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000e43:	83 ce 01             	or     esi,0x1
c0000e46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000e49:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000e4c:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000e50:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000e53:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000e56:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000e59:	eb 0c                	jmp    c0000e67 <malloc_consolidate+0xc1>
c0000e5b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000e5e:	83 c9 01             	or     ecx,0x1
c0000e61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e64:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000e67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000e6b:	85 d2                	test   edx,edx
c0000e6d:	0f 85 6f ff ff ff    	jne    c0000de2 <malloc_consolidate+0x3c>
c0000e73:	83 c5 04             	add    ebp,0x4
c0000e76:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000e7a:	0f 85 50 ff ff ff    	jne    c0000dd0 <malloc_consolidate+0x2a>
c0000e80:	83 c4 10             	add    esp,0x10
c0000e83:	5b                   	pop    ebx
c0000e84:	5e                   	pop    esi
c0000e85:	5f                   	pop    edi
c0000e86:	5d                   	pop    ebp
c0000e87:	c3                   	ret    
c0000e88:	e9 b8 fe ff ff       	jmp    c0000d45 <malloc_init_state>

c0000e8d <dlfree>:
c0000e8d:	57                   	push   edi
c0000e8e:	56                   	push   esi
c0000e8f:	53                   	push   ebx
c0000e90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e94:	85 db                	test   ebx,ebx
c0000e96:	0f 84 e2 00 00 00    	je     c0000f7e <dlfree+0xf1>
c0000e9c:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e9f:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ea2:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000ea8:	89 f0                	mov    eax,esi
c0000eaa:	83 e0 fc             	and    eax,0xfffffffc
c0000ead:	39 c1                	cmp    ecx,eax
c0000eaf:	72 24                	jb     c0000ed5 <dlfree+0x48>
c0000eb1:	c1 e8 03             	shr    eax,0x3
c0000eb4:	83 c9 03             	or     ecx,0x3
c0000eb7:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000ebd:	83 e8 02             	sub    eax,0x2
c0000ec0:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000ec7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ec9:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000ed0:	e9 a9 00 00 00       	jmp    c0000f7e <dlfree+0xf1>
c0000ed5:	83 e6 02             	and    esi,0x2
c0000ed8:	0f 85 a0 00 00 00    	jne    c0000f7e <dlfree+0xf1>
c0000ede:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ee1:	83 c9 01             	or     ecx,0x1
c0000ee4:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000eea:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000eed:	83 e1 fc             	and    ecx,0xfffffffc
c0000ef0:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000ef4:	75 13                	jne    c0000f09 <dlfree+0x7c>
c0000ef6:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000ef9:	29 da                	sub    edx,ebx
c0000efb:	01 d8                	add    eax,ebx
c0000efd:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000f00:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000f03:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000f06:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000f09:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000f0f:	74 40                	je     c0000f51 <dlfree+0xc4>
c0000f11:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000f15:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000f18:	80 e3 01             	and    bl,0x1
c0000f1b:	75 0e                	jne    c0000f2b <dlfree+0x9e>
c0000f1d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000f20:	01 c8                	add    eax,ecx
c0000f22:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000f25:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000f28:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000f2b:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000f31:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000f38:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000f3b:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000f41:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000f44:	89 c1                	mov    ecx,eax
c0000f46:	83 c9 01             	or     ecx,0x1
c0000f49:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f4c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000f4f:	eb 10                	jmp    c0000f61 <dlfree+0xd4>
c0000f51:	01 c8                	add    eax,ecx
c0000f53:	89 c1                	mov    ecx,eax
c0000f55:	83 c9 01             	or     ecx,0x1
c0000f58:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f5b:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000f61:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000f66:	76 16                	jbe    c0000f7e <dlfree+0xf1>
c0000f68:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000f6f:	74 0d                	je     c0000f7e <dlfree+0xf1>
c0000f71:	5b                   	pop    ebx
c0000f72:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000f77:	5e                   	pop    esi
c0000f78:	5f                   	pop    edi
c0000f79:	e9 28 fe ff ff       	jmp    c0000da6 <malloc_consolidate>
c0000f7e:	5b                   	pop    ebx
c0000f7f:	5e                   	pop    esi
c0000f80:	5f                   	pop    edi
c0000f81:	c3                   	ret    

c0000f82 <sYSMALLOc>:
c0000f82:	55                   	push   ebp
c0000f83:	57                   	push   edi
c0000f84:	56                   	push   esi
c0000f85:	53                   	push   ebx
c0000f86:	89 d3                	mov    ebx,edx
c0000f88:	83 ec 2c             	sub    esp,0x2c
c0000f8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f8f:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000f95:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000f98:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000f9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f9f:	74 1f                	je     c0000fc0 <sYSMALLOc+0x3e>
c0000fa1:	89 d0                	mov    eax,edx
c0000fa3:	e8 fe fd ff ff       	call   c0000da6 <malloc_consolidate>
c0000fa8:	83 ec 0c             	sub    esp,0xc
c0000fab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000faf:	83 e8 07             	sub    eax,0x7
c0000fb2:	50                   	push   eax
c0000fb3:	e8 33 02 00 00       	call   c00011eb <dlmalloc>
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	e9 23 02 00 00       	jmp    c00011e3 <sYSMALLOc+0x261>
c0000fc0:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000fc7:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000fcd:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000fd0:	83 c0 10             	add    eax,0x10
c0000fd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000fd7:	01 c2                	add    edx,eax
c0000fd9:	83 e5 fc             	and    ebp,0xfffffffc
c0000fdc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fe3:	74 02                	je     c0000fe7 <sYSMALLOc+0x65>
c0000fe5:	29 ea                	sub    edx,ebp
c0000fe7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000feb:	f7 d9                	neg    ecx
c0000fed:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000ff1:	21 ca                	and    edx,ecx
c0000ff3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000ff7:	7f 07                	jg     c0001000 <sYSMALLOc+0x7e>
c0000ff9:	31 c0                	xor    eax,eax
c0000ffb:	e9 e3 01 00 00       	jmp    c00011e3 <sYSMALLOc+0x261>
c0001000:	83 ec 0c             	sub    esp,0xc
c0001003:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0001007:	e8 ac 52 01 00       	call   c00162b8 <sbrk>
c000100c:	83 c4 10             	add    esp,0x10
c000100f:	83 f8 ff             	cmp    eax,0xffffffff
c0001012:	89 c6                	mov    esi,eax
c0001014:	74 e3                	je     c0000ff9 <sYSMALLOc+0x77>
c0001016:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000101a:	8d 14 2f             	lea    edx,[edi+ebp*1]
c000101d:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0001023:	39 c2                	cmp    edx,eax
c0001025:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c000102b:	75 11                	jne    c000103e <sYSMALLOc+0xbc>
c000102d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001031:	01 e8                	add    eax,ebp
c0001033:	83 c8 01             	or     eax,0x1
c0001036:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001039:	e9 93 00 00 00       	jmp    c00010d1 <sYSMALLOc+0x14f>
c000103e:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0001044:	a8 01                	test   al,0x1
c0001046:	0f 84 73 01 00 00    	je     c00011bf <sYSMALLOc+0x23d>
c000104c:	85 ed                	test   ebp,ebp
c000104e:	74 12                	je     c0001062 <sYSMALLOc+0xe0>
c0001050:	39 f2                	cmp    edx,esi
c0001052:	76 0e                	jbe    c0001062 <sYSMALLOc+0xe0>
c0001054:	83 e0 fe             	and    eax,0xfffffffe
c0001057:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c000105d:	e9 5d 01 00 00       	jmp    c00011bf <sYSMALLOc+0x23d>
c0001062:	85 ed                	test   ebp,ebp
c0001064:	74 0c                	je     c0001072 <sYSMALLOc+0xf0>
c0001066:	89 f0                	mov    eax,esi
c0001068:	29 d0                	sub    eax,edx
c000106a:	01 c1                	add    ecx,eax
c000106c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0001072:	89 f2                	mov    edx,esi
c0001074:	83 e2 07             	and    edx,0x7
c0001077:	0f 84 b1 00 00 00    	je     c000112e <sYSMALLOc+0x1ac>
c000107d:	b8 08 00 00 00       	mov    eax,0x8
c0001082:	29 d0                	sub    eax,edx
c0001084:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001087:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000108b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000108f:	01 e8                	add    eax,ebp
c0001091:	83 ec 0c             	sub    esp,0xc
c0001094:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001097:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000109b:	01 f2                	add    edx,esi
c000109d:	29 d0                	sub    eax,edx
c000109f:	01 d1                	add    ecx,edx
c00010a1:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c00010a5:	01 c1                	add    ecx,eax
c00010a7:	51                   	push   ecx
c00010a8:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00010ac:	e8 07 52 01 00       	call   c00162b8 <sbrk>
c00010b1:	83 c4 10             	add    esp,0x10
c00010b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00010b8:	83 f8 ff             	cmp    eax,0xffffffff
c00010bb:	75 7c                	jne    c0001139 <sYSMALLOc+0x1b7>
c00010bd:	83 ec 0c             	sub    esp,0xc
c00010c0:	6a 00                	push   0x0
c00010c2:	e8 f1 51 01 00       	call   c00162b8 <sbrk>
c00010c7:	83 c4 10             	add    esp,0x10
c00010ca:	31 c9                	xor    ecx,ecx
c00010cc:	83 f8 ff             	cmp    eax,0xffffffff
c00010cf:	75 7e                	jne    c000114f <sYSMALLOc+0x1cd>
c00010d1:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010d7:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010dd:	73 06                	jae    c00010e5 <sYSMALLOc+0x163>
c00010df:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010e5:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010eb:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010f1:	73 06                	jae    c00010f9 <sYSMALLOc+0x177>
c00010f3:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010f9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010fc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ff:	83 e2 fc             	and    edx,0xfffffffc
c0001102:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0001106:	0f 87 ed fe ff ff    	ja     c0000ff9 <sYSMALLOc+0x77>
c000110c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0001110:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001113:	29 fa                	sub    edx,edi
c0001115:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001118:	89 fb                	mov    ebx,edi
c000111a:	83 ca 01             	or     edx,0x1
c000111d:	83 cb 01             	or     ebx,0x1
c0001120:	83 c0 08             	add    eax,0x8
c0001123:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001126:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001129:	e9 b5 00 00 00       	jmp    c00011e3 <sYSMALLOc+0x261>
c000112e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0001132:	31 c0                	xor    eax,eax
c0001134:	e9 52 ff ff ff       	jmp    c000108b <sYSMALLOc+0x109>
c0001139:	39 c6                	cmp    esi,eax
c000113b:	76 12                	jbe    c000114f <sYSMALLOc+0x1cd>
c000113d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001141:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001148:	01 f0                	add    eax,esi
c000114a:	e9 7b ff ff ff       	jmp    c00010ca <sYSMALLOc+0x148>
c000114f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001153:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0001156:	29 f0                	sub    eax,esi
c0001158:	01 c8                	add    eax,ecx
c000115a:	83 c8 01             	or     eax,0x1
c000115d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0001160:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0001166:	85 ed                	test   ebp,ebp
c0001168:	0f 84 63 ff ff ff    	je     c00010d1 <sYSMALLOc+0x14f>
c000116e:	8d 45 f4             	lea    eax,[ebp-0xc]
c0001171:	83 e0 f8             	and    eax,0xfffffff8
c0001174:	89 c2                	mov    edx,eax
c0001176:	83 ca 01             	or     edx,0x1
c0001179:	83 f8 0f             	cmp    eax,0xf
c000117c:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000117f:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001187:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000118f:	0f 86 3c ff ff ff    	jbe    c00010d1 <sYSMALLOc+0x14f>
c0001195:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000119b:	83 ec 0c             	sub    esp,0xc
c000119e:	83 c7 08             	add    edi,0x8
c00011a1:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011ab:	57                   	push   edi
c00011ac:	e8 dc fc ff ff       	call   c0000e8d <dlfree>
c00011b1:	83 c4 10             	add    esp,0x10
c00011b4:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00011ba:	e9 12 ff ff ff       	jmp    c00010d1 <sYSMALLOc+0x14f>
c00011bf:	83 ec 0c             	sub    esp,0xc
c00011c2:	6a 00                	push   0x0
c00011c4:	e8 ef 50 01 00       	call   c00162b8 <sbrk>
c00011c9:	89 c2                	mov    edx,eax
c00011cb:	29 f2                	sub    edx,esi
c00011cd:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00011d1:	83 c4 10             	add    esp,0x10
c00011d4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00011da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00011de:	e9 e7 fe ff ff       	jmp    c00010ca <sYSMALLOc+0x148>
c00011e3:	83 c4 2c             	add    esp,0x2c
c00011e6:	5b                   	pop    ebx
c00011e7:	5e                   	pop    esi
c00011e8:	5f                   	pop    edi
c00011e9:	5d                   	pop    ebp
c00011ea:	c3                   	ret    

c00011eb <dlmalloc>:
c00011eb:	55                   	push   ebp
c00011ec:	57                   	push   edi
c00011ed:	56                   	push   esi
c00011ee:	53                   	push   ebx
c00011ef:	83 ec 1c             	sub    esp,0x1c
c00011f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00011f6:	83 f8 df             	cmp    eax,0xffffffdf
c00011f9:	0f 87 70 03 00 00    	ja     c000156f <dlmalloc+0x384>
c00011ff:	83 c0 0b             	add    eax,0xb
c0001202:	be 10 00 00 00       	mov    esi,0x10
c0001207:	83 f8 0f             	cmp    eax,0xf
c000120a:	76 05                	jbe    c0001211 <dlmalloc+0x26>
c000120c:	83 e0 f8             	and    eax,0xfffffff8
c000120f:	89 c6                	mov    esi,eax
c0001211:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c0001217:	f7 c7 01 00 00 00    	test   edi,0x1
c000121d:	75 17                	jne    c0001236 <dlmalloc+0x4b>
c000121f:	85 ff                	test   edi,edi
c0001221:	0f 85 05 03 00 00    	jne    c000152c <dlmalloc+0x341>
c0001227:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000122c:	e8 75 fb ff ff       	call   c0000da6 <malloc_consolidate>
c0001231:	e9 f6 02 00 00       	jmp    c000152c <dlmalloc+0x341>
c0001236:	39 f7                	cmp    edi,esi
c0001238:	72 1f                	jb     c0001259 <dlmalloc+0x6e>
c000123a:	89 f2                	mov    edx,esi
c000123c:	c1 ea 03             	shr    edx,0x3
c000123f:	83 ea 02             	sub    edx,0x2
c0001242:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c0001249:	85 c0                	test   eax,eax
c000124b:	74 0c                	je     c0001259 <dlmalloc+0x6e>
c000124d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001250:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c0001257:	eb 30                	jmp    c0001289 <dlmalloc+0x9e>
c0001259:	81 fe ff 00 00 00    	cmp    esi,0xff
c000125f:	89 f0                	mov    eax,esi
c0001261:	77 2e                	ja     c0001291 <dlmalloc+0xa6>
c0001263:	c1 e8 03             	shr    eax,0x3
c0001266:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000126a:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001271:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001274:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001277:	39 c3                	cmp    ebx,eax
c0001279:	74 2e                	je     c00012a9 <dlmalloc+0xbe>
c000127b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000127e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001283:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001286:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001289:	83 c0 08             	add    eax,0x8
c000128c:	e9 e0 02 00 00       	jmp    c0001571 <dlmalloc+0x386>
c0001291:	e8 8c fa ff ff       	call   c0000d22 <largebin_index>
c0001296:	83 e7 02             	and    edi,0x2
c0001299:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000129d:	74 0a                	je     c00012a9 <dlmalloc+0xbe>
c000129f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00012a4:	e8 fd fa ff ff       	call   c0000da6 <malloc_consolidate>
c00012a9:	8d 46 10             	lea    eax,[esi+0x10]
c00012ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012b0:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c00012b6:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c00012bc:	0f 84 13 01 00 00    	je     c00013d5 <dlmalloc+0x1ea>
c00012c2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012c8:	83 e7 fc             	and    edi,0xfffffffc
c00012cb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012d1:	77 4c                	ja     c000131f <dlmalloc+0x134>
c00012d3:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c00012d8:	75 45                	jne    c000131f <dlmalloc+0x134>
c00012da:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c00012e0:	75 3d                	jne    c000131f <dlmalloc+0x134>
c00012e2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00012e6:	73 37                	jae    c000131f <dlmalloc+0x134>
c00012e8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00012eb:	89 fa                	mov    edx,edi
c00012ed:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00012f2:	29 f2                	sub    edx,esi
c00012f4:	83 ce 01             	or     esi,0x1
c00012f7:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012fc:	89 d1                	mov    ecx,edx
c00012fe:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c0001303:	83 c9 01             	or     ecx,0x1
c0001306:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c000130d:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c0001314:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001317:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000131a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000131d:	eb 15                	jmp    c0001334 <dlmalloc+0x149>
c000131f:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c0001324:	39 fe                	cmp    esi,edi
c0001326:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c000132d:	75 0d                	jne    c000133c <dlmalloc+0x151>
c000132f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001334:	8d 43 08             	lea    eax,[ebx+0x8]
c0001337:	e9 35 02 00 00       	jmp    c0001571 <dlmalloc+0x386>
c000133c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001342:	89 f8                	mov    eax,edi
c0001344:	77 19                	ja     c000135f <dlmalloc+0x174>
c0001346:	c1 e8 03             	shr    eax,0x3
c0001349:	8d 14 00             	lea    edx,[eax+eax*1]
c000134c:	83 c2 0d             	add    edx,0xd
c000134f:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c0001356:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c000135d:	eb 46                	jmp    c00013a5 <dlmalloc+0x1ba>
c000135f:	e8 be f9 ff ff       	call   c0000d22 <largebin_index>
c0001364:	8d 14 00             	lea    edx,[eax+eax*1]
c0001367:	83 c2 0d             	add    edx,0xd
c000136a:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c0001371:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001378:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000137b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000137f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001383:	89 d5                	mov    ebp,edx
c0001385:	74 1e                	je     c00013a5 <dlmalloc+0x1ba>
c0001387:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000138a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000138d:	77 12                	ja     c00013a1 <dlmalloc+0x1b6>
c000138f:	83 cf 01             	or     edi,0x1
c0001392:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001395:	76 05                	jbe    c000139c <dlmalloc+0x1b1>
c0001397:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000139a:	eb f6                	jmp    c0001392 <dlmalloc+0x1a7>
c000139c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000139f:	eb 04                	jmp    c00013a5 <dlmalloc+0x1ba>
c00013a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013a5:	89 c7                	mov    edi,eax
c00013a7:	88 c1                	mov    cl,al
c00013a9:	c1 ff 05             	sar    edi,0x5
c00013ac:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013b0:	bf 01 00 00 00       	mov    edi,0x1
c00013b5:	d3 e7                	shl    edi,cl
c00013b7:	89 f8                	mov    eax,edi
c00013b9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013bd:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c00013c4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013c7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013ca:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013cd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013d0:	e9 db fe ff ff       	jmp    c00012b0 <dlmalloc+0xc5>
c00013d5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013db:	76 78                	jbe    c0001455 <dlmalloc+0x26a>
c00013dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00013e1:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00013e8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013eb:	8d 48 f8             	lea    ecx,[eax-0x8]
c00013ee:	39 ca                	cmp    edx,ecx
c00013f0:	74 63                	je     c0001455 <dlmalloc+0x26a>
c00013f2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00013f5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00013f8:	83 e3 fc             	and    ebx,0xfffffffc
c00013fb:	39 de                	cmp    esi,ebx
c00013fd:	77 52                	ja     c0001451 <dlmalloc+0x266>
c00013ff:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001402:	89 df                	mov    edi,ebx
c0001404:	01 d3                	add    ebx,edx
c0001406:	29 f7                	sub    edi,esi
c0001408:	83 ff 0f             	cmp    edi,0xf
c000140b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000140e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001411:	8d 42 08             	lea    eax,[edx+0x8]
c0001414:	77 09                	ja     c000141f <dlmalloc+0x234>
c0001416:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000141a:	e9 52 01 00 00       	jmp    c0001571 <dlmalloc+0x386>
c000141f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001422:	83 ce 01             	or     esi,0x1
c0001425:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c000142b:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c0001431:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c0001438:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c000143f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001442:	89 fa                	mov    edx,edi
c0001444:	83 ca 01             	or     edx,0x1
c0001447:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000144a:	89 3b                	mov    DWORD PTR [ebx],edi
c000144c:	e9 20 01 00 00       	jmp    c0001571 <dlmalloc+0x386>
c0001451:	89 c2                	mov    edx,eax
c0001453:	eb 99                	jmp    c00013ee <dlmalloc+0x203>
c0001455:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001459:	b8 01 00 00 00       	mov    eax,0x1
c000145e:	41                   	inc    ecx
c000145f:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c0001466:	89 cb                	mov    ebx,ecx
c0001468:	c1 eb 05             	shr    ebx,0x5
c000146b:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001472:	d3 e0                	shl    eax,cl
c0001474:	39 f8                	cmp    eax,edi
c0001476:	77 04                	ja     c000147c <dlmalloc+0x291>
c0001478:	85 c0                	test   eax,eax
c000147a:	75 26                	jne    c00014a2 <dlmalloc+0x2b7>
c000147c:	43                   	inc    ebx
c000147d:	83 fb 02             	cmp    ebx,0x2
c0001480:	0f 87 a6 00 00 00    	ja     c000152c <dlmalloc+0x341>
c0001486:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c000148d:	85 ff                	test   edi,edi
c000148f:	74 eb                	je     c000147c <dlmalloc+0x291>
c0001491:	89 d8                	mov    eax,ebx
c0001493:	c1 e0 06             	shl    eax,0x6
c0001496:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c000149d:	b8 01 00 00 00       	mov    eax,0x1
c00014a2:	85 f8                	test   eax,edi
c00014a4:	75 07                	jne    c00014ad <dlmalloc+0x2c2>
c00014a6:	83 c2 08             	add    edx,0x8
c00014a9:	01 c0                	add    eax,eax
c00014ab:	eb f5                	jmp    c00014a2 <dlmalloc+0x2b7>
c00014ad:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014b0:	39 ca                	cmp    edx,ecx
c00014b2:	75 14                	jne    c00014c8 <dlmalloc+0x2dd>
c00014b4:	89 c1                	mov    ecx,eax
c00014b6:	83 c2 08             	add    edx,0x8
c00014b9:	f7 d1                	not    ecx
c00014bb:	01 c0                	add    eax,eax
c00014bd:	21 cf                	and    edi,ecx
c00014bf:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c00014c6:	eb ac                	jmp    c0001474 <dlmalloc+0x289>
c00014c8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014cb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014ce:	83 e0 fc             	and    eax,0xfffffffc
c00014d1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00014d4:	89 c3                	mov    ebx,eax
c00014d6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00014d9:	8d 14 01             	lea    edx,[ecx+eax*1]
c00014dc:	29 f3                	sub    ebx,esi
c00014de:	8d 41 08             	lea    eax,[ecx+0x8]
c00014e1:	83 fb 0f             	cmp    ebx,0xf
c00014e4:	77 09                	ja     c00014ef <dlmalloc+0x304>
c00014e6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00014ea:	e9 82 00 00 00       	jmp    c0001571 <dlmalloc+0x386>
c00014ef:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00014f2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014f8:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00014fe:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c0001504:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c000150b:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c0001512:	77 06                	ja     c000151a <dlmalloc+0x32f>
c0001514:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c000151a:	83 ce 01             	or     esi,0x1
c000151d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001520:	89 d9                	mov    ecx,ebx
c0001522:	83 c9 01             	or     ecx,0x1
c0001525:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001528:	89 1a                	mov    DWORD PTR [edx],ebx
c000152a:	eb 45                	jmp    c0001571 <dlmalloc+0x386>
c000152c:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001531:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001534:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001537:	83 e2 fc             	and    edx,0xfffffffc
c000153a:	39 d1                	cmp    ecx,edx
c000153c:	77 1e                	ja     c000155c <dlmalloc+0x371>
c000153e:	89 f3                	mov    ebx,esi
c0001540:	29 f2                	sub    edx,esi
c0001542:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001545:	83 cb 01             	or     ebx,0x1
c0001548:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c000154e:	83 ca 01             	or     edx,0x1
c0001551:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001554:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001557:	e9 2d fd ff ff       	jmp    c0001289 <dlmalloc+0x9e>
c000155c:	83 c4 1c             	add    esp,0x1c
c000155f:	89 f0                	mov    eax,esi
c0001561:	5b                   	pop    ebx
c0001562:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c0001567:	5e                   	pop    esi
c0001568:	5f                   	pop    edi
c0001569:	5d                   	pop    ebp
c000156a:	e9 13 fa ff ff       	jmp    c0000f82 <sYSMALLOc>
c000156f:	31 c0                	xor    eax,eax
c0001571:	83 c4 1c             	add    esp,0x1c
c0001574:	5b                   	pop    ebx
c0001575:	5e                   	pop    esi
c0001576:	5f                   	pop    edi
c0001577:	5d                   	pop    ebp
c0001578:	c3                   	ret    

c0001579 <iALLOc>:
c0001579:	55                   	push   ebp
c000157a:	89 c5                	mov    ebp,eax
c000157c:	57                   	push   edi
c000157d:	56                   	push   esi
c000157e:	53                   	push   ebx
c000157f:	83 ec 2c             	sub    esp,0x2c
c0001582:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001586:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000158a:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001595:	75 12                	jne    c00015a9 <iALLOc+0x30>
c0001597:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000159b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00015a0:	e8 01 f8 ff ff       	call   c0000da6 <malloc_consolidate>
c00015a5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015ae:	74 12                	je     c00015c2 <iALLOc+0x49>
c00015b0:	85 ed                	test   ebp,ebp
c00015b2:	0f 84 64 01 00 00    	je     c000171c <iALLOc+0x1a3>
c00015b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015c0:	eb 33                	jmp    c00015f5 <iALLOc+0x7c>
c00015c2:	85 ed                	test   ebp,ebp
c00015c4:	75 14                	jne    c00015da <iALLOc+0x61>
c00015c6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015ce:	83 c4 2c             	add    esp,0x2c
c00015d1:	5b                   	pop    ebx
c00015d2:	5e                   	pop    esi
c00015d3:	5f                   	pop    edi
c00015d4:	5d                   	pop    ebp
c00015d5:	e9 11 fc ff ff       	jmp    c00011eb <dlmalloc>
c00015da:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00015e2:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00015e9:	83 f8 0f             	cmp    eax,0xf
c00015ec:	76 07                	jbe    c00015f5 <iALLOc+0x7c>
c00015ee:	83 e0 f8             	and    eax,0xfffffff8
c00015f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00015f5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00015fa:	75 09                	jne    c0001605 <iALLOc+0x8c>
c00015fc:	89 d0                	mov    eax,edx
c00015fe:	31 f6                	xor    esi,esi
c0001600:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001603:	eb 3b                	jmp    c0001640 <iALLOc+0xc7>
c0001605:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000160d:	8b 02                	mov    eax,DWORD PTR [edx]
c000160f:	83 c0 0b             	add    eax,0xb
c0001612:	83 f8 0f             	cmp    eax,0xf
c0001615:	76 07                	jbe    c000161e <iALLOc+0xa5>
c0001617:	83 e0 f8             	and    eax,0xfffffff8
c000161a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000161e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001622:	0f af f5             	imul   esi,ebp
c0001625:	eb 25                	jmp    c000164c <iALLOc+0xd3>
c0001627:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001629:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000162c:	bb 10 00 00 00       	mov    ebx,0x10
c0001631:	83 f9 0f             	cmp    ecx,0xf
c0001634:	76 05                	jbe    c000163b <iALLOc+0xc2>
c0001636:	83 e1 f8             	and    ecx,0xfffffff8
c0001639:	89 cb                	mov    ebx,ecx
c000163b:	01 de                	add    esi,ebx
c000163d:	83 c0 04             	add    eax,0x4
c0001640:	39 c7                	cmp    edi,eax
c0001642:	75 e3                	jne    c0001627 <iALLOc+0xae>
c0001644:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000164c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001650:	83 ec 0c             	sub    esp,0xc
c0001653:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c0001659:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001667:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000166b:	50                   	push   eax
c000166c:	e8 7a fb ff ff       	call   c00011eb <dlmalloc>
c0001671:	83 c4 10             	add    esp,0x10
c0001674:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c000167a:	85 c0                	test   eax,eax
c000167c:	0f 84 92 00 00 00    	je     c0001714 <iALLOc+0x19b>
c0001682:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001685:	8d 78 f8             	lea    edi,[eax-0x8]
c0001688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000168c:	83 e3 fc             	and    ebx,0xfffffffc
c000168f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001694:	74 1e                	je     c00016b4 <iALLOc+0x13b>
c0001696:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000169a:	89 d9                	mov    ecx,ebx
c000169c:	52                   	push   edx
c000169d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016a1:	83 e9 04             	sub    ecx,0x4
c00016a4:	51                   	push   ecx
c00016a5:	6a 00                	push   0x0
c00016a7:	50                   	push   eax
c00016a8:	e8 43 ee ff ff       	call   c00004f0 <memset>
c00016ad:	83 c4 10             	add    esp,0x10
c00016b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016b9:	75 14                	jne    c00016cf <iALLOc+0x156>
c00016bb:	8d 04 37             	lea    eax,[edi+esi*1]
c00016be:	29 f3                	sub    ebx,esi
c00016c0:	8d 48 08             	lea    ecx,[eax+0x8]
c00016c3:	83 cb 01             	or     ebx,0x1
c00016c6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016c9:	89 f3                	mov    ebx,esi
c00016cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016cf:	31 c0                	xor    eax,eax
c00016d1:	4d                   	dec    ebp
c00016d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00016d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00016d9:	39 c5                	cmp    ebp,eax
c00016db:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00016de:	74 2c                	je     c000170c <iALLOc+0x193>
c00016e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00016e4:	85 c9                	test   ecx,ecx
c00016e6:	75 15                	jne    c00016fd <iALLOc+0x184>
c00016e8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00016eb:	8d 71 0b             	lea    esi,[ecx+0xb]
c00016ee:	b9 10 00 00 00       	mov    ecx,0x10
c00016f3:	83 fe 0f             	cmp    esi,0xf
c00016f6:	76 05                	jbe    c00016fd <iALLOc+0x184>
c00016f8:	83 e6 f8             	and    esi,0xfffffff8
c00016fb:	89 f1                	mov    ecx,esi
c00016fd:	89 ce                	mov    esi,ecx
c00016ff:	29 cb                	sub    ebx,ecx
c0001701:	83 ce 01             	or     esi,0x1
c0001704:	40                   	inc    eax
c0001705:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001708:	01 cf                	add    edi,ecx
c000170a:	eb c6                	jmp    c00016d2 <iALLOc+0x159>
c000170c:	83 cb 01             	or     ebx,0x1
c000170f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001712:	eb 08                	jmp    c000171c <iALLOc+0x1a3>
c0001714:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000171c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001720:	83 c4 2c             	add    esp,0x2c
c0001723:	5b                   	pop    ebx
c0001724:	5e                   	pop    esi
c0001725:	5f                   	pop    edi
c0001726:	5d                   	pop    ebp
c0001727:	c3                   	ret    

c0001728 <dlrealloc>:
c0001728:	55                   	push   ebp
c0001729:	57                   	push   edi
c000172a:	56                   	push   esi
c000172b:	53                   	push   ebx
c000172c:	83 ec 1c             	sub    esp,0x1c
c000172f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001733:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001737:	85 db                	test   ebx,ebx
c0001739:	75 10                	jne    c000174b <dlrealloc+0x23>
c000173b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000173f:	83 c4 1c             	add    esp,0x1c
c0001742:	5b                   	pop    ebx
c0001743:	5e                   	pop    esi
c0001744:	5f                   	pop    edi
c0001745:	5d                   	pop    ebp
c0001746:	e9 a0 fa ff ff       	jmp    c00011eb <dlmalloc>
c000174b:	83 f8 df             	cmp    eax,0xffffffdf
c000174e:	76 07                	jbe    c0001757 <dlrealloc+0x2f>
c0001750:	31 db                	xor    ebx,ebx
c0001752:	e9 6b 01 00 00       	jmp    c00018c2 <dlrealloc+0x19a>
c0001757:	83 c0 0b             	add    eax,0xb
c000175a:	bd 10 00 00 00       	mov    ebp,0x10
c000175f:	83 f8 0f             	cmp    eax,0xf
c0001762:	76 05                	jbe    c0001769 <dlrealloc+0x41>
c0001764:	83 e0 f8             	and    eax,0xfffffff8
c0001767:	89 c5                	mov    ebp,eax
c0001769:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000176c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000176f:	89 ce                	mov    esi,ecx
c0001771:	83 e6 fc             	and    esi,0xfffffffc
c0001774:	f6 c1 02             	test   cl,0x2
c0001777:	75 d7                	jne    c0001750 <dlrealloc+0x28>
c0001779:	39 f5                	cmp    ebp,esi
c000177b:	0f 86 04 01 00 00    	jbe    c0001885 <dlrealloc+0x15d>
c0001781:	8d 14 37             	lea    edx,[edi+esi*1]
c0001784:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c000178a:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000178d:	75 33                	jne    c00017c2 <dlrealloc+0x9a>
c000178f:	83 e0 fc             	and    eax,0xfffffffc
c0001792:	01 f0                	add    eax,esi
c0001794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001798:	8d 45 10             	lea    eax,[ebp+0x10]
c000179b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000179f:	77 49                	ja     c00017ea <dlrealloc+0xc2>
c00017a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017a5:	83 e1 01             	and    ecx,0x1
c00017a8:	01 ef                	add    edi,ebp
c00017aa:	09 e9                	or     ecx,ebp
c00017ac:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00017af:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c00017b5:	29 e8                	sub    eax,ebp
c00017b7:	83 c8 01             	or     eax,0x1
c00017ba:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017bd:	e9 00 01 00 00       	jmp    c00018c2 <dlrealloc+0x19a>
c00017c2:	89 c1                	mov    ecx,eax
c00017c4:	83 e1 fe             	and    ecx,0xfffffffe
c00017c7:	f6 44 0a 04 01       	test   BYTE PTR [edx+ecx*1+0x4],0x1
c00017cc:	75 1c                	jne    c00017ea <dlrealloc+0xc2>
c00017ce:	83 e0 fc             	and    eax,0xfffffffc
c00017d1:	01 f0                	add    eax,esi
c00017d3:	39 c5                	cmp    ebp,eax
c00017d5:	77 13                	ja     c00017ea <dlrealloc+0xc2>
c00017d7:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00017da:	89 c6                	mov    esi,eax
c00017dc:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00017df:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00017e2:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00017e5:	e9 9b 00 00 00       	jmp    c0001885 <dlrealloc+0x15d>
c00017ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00017ee:	8d 45 f9             	lea    eax,[ebp-0x7]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	50                   	push   eax
c00017f5:	e8 f1 f9 ff ff       	call   c00011eb <dlmalloc>
c00017fa:	83 c4 10             	add    esp,0x10
c00017fd:	85 c0                	test   eax,eax
c00017ff:	0f 84 4b ff ff ff    	je     c0001750 <dlrealloc+0x28>
c0001805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001809:	8d 48 f8             	lea    ecx,[eax-0x8]
c000180c:	39 ca                	cmp    edx,ecx
c000180e:	75 0a                	jne    c000181a <dlrealloc+0xf2>
c0001810:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001813:	83 e0 fc             	and    eax,0xfffffffc
c0001816:	01 c6                	add    esi,eax
c0001818:	eb 6b                	jmp    c0001885 <dlrealloc+0x15d>
c000181a:	8d 4e fc             	lea    ecx,[esi-0x4]
c000181d:	83 f9 27             	cmp    ecx,0x27
c0001820:	76 08                	jbe    c000182a <dlrealloc+0x102>
c0001822:	89 de                	mov    esi,ebx
c0001824:	89 c7                	mov    edi,eax
c0001826:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001828:	eb 43                	jmp    c000186d <dlrealloc+0x145>
c000182a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000182c:	83 f9 13             	cmp    ecx,0x13
c000182f:	89 10                	mov    DWORD PTR [eax],edx
c0001831:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001834:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001837:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000183a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000183d:	76 2e                	jbe    c000186d <dlrealloc+0x145>
c000183f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001842:	83 f9 1b             	cmp    ecx,0x1b
c0001845:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001848:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000184b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000184e:	76 1d                	jbe    c000186d <dlrealloc+0x145>
c0001850:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001853:	83 f9 23             	cmp    ecx,0x23
c0001856:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001859:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000185c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000185f:	76 0c                	jbe    c000186d <dlrealloc+0x145>
c0001861:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001864:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001867:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000186a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000186d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001871:	83 ec 0c             	sub    esp,0xc
c0001874:	53                   	push   ebx
c0001875:	e8 13 f6 ff ff       	call   c0000e8d <dlfree>
c000187a:	83 c4 10             	add    esp,0x10
c000187d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001881:	89 c3                	mov    ebx,eax
c0001883:	eb 3d                	jmp    c00018c2 <dlrealloc+0x19a>
c0001885:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001888:	8d 04 37             	lea    eax,[edi+esi*1]
c000188b:	89 f2                	mov    edx,esi
c000188d:	29 ea                	sub    edx,ebp
c000188f:	83 e1 01             	and    ecx,0x1
c0001892:	83 fa 0f             	cmp    edx,0xf
c0001895:	77 0b                	ja     c00018a2 <dlrealloc+0x17a>
c0001897:	09 ce                	or     esi,ecx
c0001899:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000189c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018a0:	eb 20                	jmp    c00018c2 <dlrealloc+0x19a>
c00018a2:	01 ef                	add    edi,ebp
c00018a4:	83 ca 01             	or     edx,0x1
c00018a7:	09 cd                	or     ebp,ecx
c00018a9:	83 ec 0c             	sub    esp,0xc
c00018ac:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018af:	83 c7 08             	add    edi,0x8
c00018b2:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018b5:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018b9:	57                   	push   edi
c00018ba:	e8 ce f5 ff ff       	call   c0000e8d <dlfree>
c00018bf:	83 c4 10             	add    esp,0x10
c00018c2:	83 c4 1c             	add    esp,0x1c
c00018c5:	89 d8                	mov    eax,ebx
c00018c7:	5b                   	pop    ebx
c00018c8:	5e                   	pop    esi
c00018c9:	5f                   	pop    edi
c00018ca:	5d                   	pop    ebp
c00018cb:	c3                   	ret    

c00018cc <dlmemalign>:
c00018cc:	55                   	push   ebp
c00018cd:	57                   	push   edi
c00018ce:	56                   	push   esi
c00018cf:	53                   	push   ebx
c00018d0:	83 ec 0c             	sub    esp,0xc
c00018d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00018d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00018db:	83 fa 08             	cmp    edx,0x8
c00018de:	77 10                	ja     c00018f0 <dlmemalign+0x24>
c00018e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00018e4:	83 c4 0c             	add    esp,0xc
c00018e7:	5b                   	pop    ebx
c00018e8:	5e                   	pop    esi
c00018e9:	5f                   	pop    edi
c00018ea:	5d                   	pop    ebp
c00018eb:	e9 fb f8 ff ff       	jmp    c00011eb <dlmalloc>
c00018f0:	83 fa 0f             	cmp    edx,0xf
c00018f3:	bf 10 00 00 00       	mov    edi,0x10
c00018f8:	76 13                	jbe    c000190d <dlmemalign+0x41>
c00018fa:	8d 4a ff             	lea    ecx,[edx-0x1]
c00018fd:	85 d1                	test   ecx,edx
c00018ff:	75 04                	jne    c0001905 <dlmemalign+0x39>
c0001901:	89 d7                	mov    edi,edx
c0001903:	eb 08                	jmp    c000190d <dlmemalign+0x41>
c0001905:	39 d7                	cmp    edi,edx
c0001907:	73 04                	jae    c000190d <dlmemalign+0x41>
c0001909:	01 ff                	add    edi,edi
c000190b:	eb f8                	jmp    c0001905 <dlmemalign+0x39>
c000190d:	83 f8 df             	cmp    eax,0xffffffdf
c0001910:	76 07                	jbe    c0001919 <dlmemalign+0x4d>
c0001912:	31 c0                	xor    eax,eax
c0001914:	e9 ce 00 00 00       	jmp    c00019e7 <dlmemalign+0x11b>
c0001919:	83 c0 0b             	add    eax,0xb
c000191c:	bd 10 00 00 00       	mov    ebp,0x10
c0001921:	83 f8 0f             	cmp    eax,0xf
c0001924:	76 05                	jbe    c000192b <dlmemalign+0x5f>
c0001926:	83 e0 f8             	and    eax,0xfffffff8
c0001929:	89 c5                	mov    ebp,eax
c000192b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000192f:	83 ec 0c             	sub    esp,0xc
c0001932:	50                   	push   eax
c0001933:	e8 b3 f8 ff ff       	call   c00011eb <dlmalloc>
c0001938:	83 c4 10             	add    esp,0x10
c000193b:	85 c0                	test   eax,eax
c000193d:	89 c1                	mov    ecx,eax
c000193f:	74 d1                	je     c0001912 <dlmemalign+0x46>
c0001941:	8d 70 f8             	lea    esi,[eax-0x8]
c0001944:	31 d2                	xor    edx,edx
c0001946:	f7 f7                	div    edi
c0001948:	85 d2                	test   edx,edx
c000194a:	74 62                	je     c00019ae <dlmemalign+0xe2>
c000194c:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001950:	89 f8                	mov    eax,edi
c0001952:	f7 d8                	neg    eax
c0001954:	21 c3                	and    ebx,eax
c0001956:	83 eb 08             	sub    ebx,0x8
c0001959:	89 d8                	mov    eax,ebx
c000195b:	29 f0                	sub    eax,esi
c000195d:	83 f8 0f             	cmp    eax,0xf
c0001960:	77 02                	ja     c0001964 <dlmemalign+0x98>
c0001962:	01 fb                	add    ebx,edi
c0001964:	89 d8                	mov    eax,ebx
c0001966:	29 f0                	sub    eax,esi
c0001968:	89 c6                	mov    esi,eax
c000196a:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000196d:	89 c2                	mov    edx,eax
c000196f:	83 e2 fc             	and    edx,0xfffffffc
c0001972:	29 f2                	sub    edx,esi
c0001974:	a8 02                	test   al,0x2
c0001976:	74 10                	je     c0001988 <dlmemalign+0xbc>
c0001978:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000197b:	83 ca 02             	or     edx,0x2
c000197e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001981:	8d 43 08             	lea    eax,[ebx+0x8]
c0001984:	89 33                	mov    DWORD PTR [ebx],esi
c0001986:	eb 5f                	jmp    c00019e7 <dlmemalign+0x11b>
c0001988:	89 d0                	mov    eax,edx
c000198a:	83 ec 0c             	sub    esp,0xc
c000198d:	83 c8 01             	or     eax,0x1
c0001990:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001993:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001998:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000199b:	83 e0 01             	and    eax,0x1
c000199e:	09 f0                	or     eax,esi
c00019a0:	89 de                	mov    esi,ebx
c00019a2:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00019a5:	51                   	push   ecx
c00019a6:	e8 e2 f4 ff ff       	call   c0000e8d <dlfree>
c00019ab:	83 c4 10             	add    esp,0x10
c00019ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00019b1:	a8 02                	test   al,0x2
c00019b3:	75 2f                	jne    c00019e4 <dlmemalign+0x118>
c00019b5:	8d 55 10             	lea    edx,[ebp+0x10]
c00019b8:	83 e0 fc             	and    eax,0xfffffffc
c00019bb:	39 c2                	cmp    edx,eax
c00019bd:	73 25                	jae    c00019e4 <dlmemalign+0x118>
c00019bf:	29 e8                	sub    eax,ebp
c00019c1:	83 ec 0c             	sub    esp,0xc
c00019c4:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00019c7:	83 c8 01             	or     eax,0x1
c00019ca:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00019cd:	83 c2 08             	add    edx,0x8
c00019d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00019d3:	83 e0 01             	and    eax,0x1
c00019d6:	09 c5                	or     ebp,eax
c00019d8:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00019db:	52                   	push   edx
c00019dc:	e8 ac f4 ff ff       	call   c0000e8d <dlfree>
c00019e1:	83 c4 10             	add    esp,0x10
c00019e4:	8d 46 08             	lea    eax,[esi+0x8]
c00019e7:	83 c4 0c             	add    esp,0xc
c00019ea:	5b                   	pop    ebx
c00019eb:	5e                   	pop    esi
c00019ec:	5f                   	pop    edi
c00019ed:	5d                   	pop    ebp
c00019ee:	c3                   	ret    

c00019ef <dlcalloc>:
c00019ef:	53                   	push   ebx
c00019f0:	83 ec 14             	sub    esp,0x14
c00019f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00019f7:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00019fc:	50                   	push   eax
c00019fd:	e8 e9 f7 ff ff       	call   c00011eb <dlmalloc>
c0001a02:	83 c4 10             	add    esp,0x10
c0001a05:	85 c0                	test   eax,eax
c0001a07:	89 c3                	mov    ebx,eax
c0001a09:	74 77                	je     c0001a82 <dlcalloc+0x93>
c0001a0b:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001a0e:	89 d0                	mov    eax,edx
c0001a10:	83 e0 fc             	and    eax,0xfffffffc
c0001a13:	80 e2 02             	and    dl,0x2
c0001a16:	75 5a                	jne    c0001a72 <dlcalloc+0x83>
c0001a18:	83 e8 04             	sub    eax,0x4
c0001a1b:	83 f8 27             	cmp    eax,0x27
c0001a1e:	76 03                	jbe    c0001a23 <dlcalloc+0x34>
c0001a20:	51                   	push   ecx
c0001a21:	eb 53                	jmp    c0001a76 <dlcalloc+0x87>
c0001a23:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a29:	83 f8 13             	cmp    eax,0x13
c0001a2c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001a33:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001a3a:	76 46                	jbe    c0001a82 <dlcalloc+0x93>
c0001a3c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001a43:	83 f8 1b             	cmp    eax,0x1b
c0001a46:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001a4d:	76 33                	jbe    c0001a82 <dlcalloc+0x93>
c0001a4f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001a56:	83 f8 23             	cmp    eax,0x23
c0001a59:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001a60:	76 20                	jbe    c0001a82 <dlcalloc+0x93>
c0001a62:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001a69:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001a70:	eb 10                	jmp    c0001a82 <dlcalloc+0x93>
c0001a72:	52                   	push   edx
c0001a73:	83 e8 08             	sub    eax,0x8
c0001a76:	50                   	push   eax
c0001a77:	6a 00                	push   0x0
c0001a79:	53                   	push   ebx
c0001a7a:	e8 71 ea ff ff       	call   c00004f0 <memset>
c0001a7f:	83 c4 10             	add    esp,0x10
c0001a82:	83 c4 08             	add    esp,0x8
c0001a85:	89 d8                	mov    eax,ebx
c0001a87:	5b                   	pop    ebx
c0001a88:	c3                   	ret    

c0001a89 <dlcfree>:
c0001a89:	e9 ff f3 ff ff       	jmp    c0000e8d <dlfree>

c0001a8e <dlindependent_calloc>:
c0001a8e:	83 ec 28             	sub    esp,0x28
c0001a91:	b9 03 00 00 00       	mov    ecx,0x3
c0001a96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001aa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001aa6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001aaa:	e8 ca fa ff ff       	call   c0001579 <iALLOc>
c0001aaf:	83 c4 2c             	add    esp,0x2c
c0001ab2:	c3                   	ret    

c0001ab3 <dlindependent_comalloc>:
c0001ab3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001ab7:	31 c9                	xor    ecx,ecx
c0001ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001abd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001ac1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001ac5:	e9 af fa ff ff       	jmp    c0001579 <iALLOc>

c0001aca <dlvalloc>:
c0001aca:	83 ec 0c             	sub    esp,0xc
c0001acd:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ad4:	75 0a                	jne    c0001ae0 <dlvalloc+0x16>
c0001ad6:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001adb:	e8 c6 f2 ff ff       	call   c0000da6 <malloc_consolidate>
c0001ae0:	50                   	push   eax
c0001ae1:	50                   	push   eax
c0001ae2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001ae6:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001aec:	e8 db fd ff ff       	call   c00018cc <dlmemalign>
c0001af1:	83 c4 1c             	add    esp,0x1c
c0001af4:	c3                   	ret    

c0001af5 <dlpvalloc>:
c0001af5:	83 ec 0c             	sub    esp,0xc
c0001af8:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001aff:	75 0a                	jne    c0001b0b <dlpvalloc+0x16>
c0001b01:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b06:	e8 9b f2 ff ff       	call   c0000da6 <malloc_consolidate>
c0001b0b:	52                   	push   edx
c0001b0c:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001b11:	52                   	push   edx
c0001b12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b16:	89 c1                	mov    ecx,eax
c0001b18:	f7 d9                	neg    ecx
c0001b1a:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b1e:	21 ca                	and    edx,ecx
c0001b20:	52                   	push   edx
c0001b21:	50                   	push   eax
c0001b22:	e8 a5 fd ff ff       	call   c00018cc <dlmemalign>
c0001b27:	83 c4 1c             	add    esp,0x1c
c0001b2a:	c3                   	ret    

c0001b2b <dlmalloc_trim>:
c0001b2b:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b30:	e8 71 f2 ff ff       	call   c0000da6 <malloc_consolidate>
c0001b35:	31 c0                	xor    eax,eax
c0001b37:	c3                   	ret    

c0001b38 <dlmalloc_usable_size>:
c0001b38:	53                   	push   ebx
c0001b39:	31 c0                	xor    eax,eax
c0001b3b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b3f:	85 c9                	test   ecx,ecx
c0001b41:	74 24                	je     c0001b67 <dlmalloc_usable_size+0x2f>
c0001b43:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001b46:	f6 c2 02             	test   dl,0x2
c0001b49:	74 08                	je     c0001b53 <dlmalloc_usable_size+0x1b>
c0001b4b:	83 e2 fc             	and    edx,0xfffffffc
c0001b4e:	8d 42 f8             	lea    eax,[edx-0x8]
c0001b51:	eb 14                	jmp    c0001b67 <dlmalloc_usable_size+0x2f>
c0001b53:	89 d3                	mov    ebx,edx
c0001b55:	31 c0                	xor    eax,eax
c0001b57:	83 e3 fe             	and    ebx,0xfffffffe
c0001b5a:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001b5f:	74 06                	je     c0001b67 <dlmalloc_usable_size+0x2f>
c0001b61:	83 e2 fc             	and    edx,0xfffffffc
c0001b64:	8d 42 fc             	lea    eax,[edx-0x4]
c0001b67:	5b                   	pop    ebx
c0001b68:	c3                   	ret    

c0001b69 <dlmallinfo>:
c0001b69:	55                   	push   ebp
c0001b6a:	57                   	push   edi
c0001b6b:	56                   	push   esi
c0001b6c:	53                   	push   ebx
c0001b6d:	83 ec 08             	sub    esp,0x8
c0001b70:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001b77:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001b7b:	75 0a                	jne    c0001b87 <dlmallinfo+0x1e>
c0001b7d:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b82:	e8 1f f2 ff ff       	call   c0000da6 <malloc_consolidate>
c0001b87:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001b8c:	31 ed                	xor    ebp,ebp
c0001b8e:	31 c9                	xor    ecx,ecx
c0001b90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b93:	83 e0 fc             	and    eax,0xfffffffc
c0001b96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b9a:	31 c0                	xor    eax,eax
c0001b9c:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001ba3:	85 d2                	test   edx,edx
c0001ba5:	74 0e                	je     c0001bb5 <dlmallinfo+0x4c>
c0001ba7:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001baa:	45                   	inc    ebp
c0001bab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001bae:	83 e6 fc             	and    esi,0xfffffffc
c0001bb1:	01 f1                	add    ecx,esi
c0001bb3:	eb ee                	jmp    c0001ba3 <dlmallinfo+0x3a>
c0001bb5:	40                   	inc    eax
c0001bb6:	83 f8 0a             	cmp    eax,0xa
c0001bb9:	75 e1                	jne    c0001b9c <dlmallinfo+0x33>
c0001bbb:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001bc6:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001bc9:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001bce:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001bd1:	39 f0                	cmp    eax,esi
c0001bd3:	74 10                	je     c0001be5 <dlmallinfo+0x7c>
c0001bd5:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001bd8:	ff 04 24             	inc    DWORD PTR [esp]
c0001bdb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001bde:	83 e7 fc             	and    edi,0xfffffffc
c0001be1:	01 fa                	add    edx,edi
c0001be3:	eb ec                	jmp    c0001bd1 <dlmallinfo+0x68>
c0001be5:	83 c0 08             	add    eax,0x8
c0001be8:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001bed:	75 df                	jne    c0001bce <dlmallinfo+0x65>
c0001bef:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001bf5:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001bf8:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001bfd:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c03:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c06:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c09:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001c0f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c11:	29 d0                	sub    eax,edx
c0001c13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c1d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c20:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001c26:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c29:	89 d8                	mov    eax,ebx
c0001c2b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c2e:	83 c4 08             	add    esp,0x8
c0001c31:	5b                   	pop    ebx
c0001c32:	5e                   	pop    esi
c0001c33:	5f                   	pop    edi
c0001c34:	5d                   	pop    ebp
c0001c35:	c2 04 00             	ret    0x4

c0001c38 <dlmalloc_stats>:
c0001c38:	83 ec 30             	sub    esp,0x30
c0001c3b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c3f:	50                   	push   eax
c0001c40:	e8 24 ff ff ff       	call   c0001b69 <dlmallinfo>
c0001c45:	83 c4 30             	add    esp,0x30
c0001c48:	c3                   	ret    

c0001c49 <dlmallopt>:
c0001c49:	56                   	push   esi
c0001c4a:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001c4f:	53                   	push   ebx
c0001c50:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001c54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001c58:	e8 49 f1 ff ff       	call   c0000da6 <malloc_consolidate>
c0001c5d:	8d 46 04             	lea    eax,[esi+0x4]
c0001c60:	83 f8 05             	cmp    eax,0x5
c0001c63:	77 67                	ja     c0001ccc <dlmallopt+0x83>
c0001c65:	ff 24 85 e4 f3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0c1c]
c0001c6c:	83 fb 50             	cmp    ebx,0x50
c0001c6f:	77 5b                	ja     c0001ccc <dlmallopt+0x83>
c0001c71:	85 db                	test   ebx,ebx
c0001c73:	ba 08 00 00 00       	mov    edx,0x8
c0001c78:	74 12                	je     c0001c8c <dlmallopt+0x43>
c0001c7a:	83 c3 0b             	add    ebx,0xb
c0001c7d:	ba 10 00 00 00       	mov    edx,0x10
c0001c82:	83 fb 0f             	cmp    ebx,0xf
c0001c85:	76 05                	jbe    c0001c8c <dlmallopt+0x43>
c0001c87:	89 da                	mov    edx,ebx
c0001c89:	83 e2 f8             	and    edx,0xfffffff8
c0001c8c:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001c91:	83 e0 03             	and    eax,0x3
c0001c94:	09 d0                	or     eax,edx
c0001c96:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001c9b:	eb 31                	jmp    c0001cce <dlmallopt+0x85>
c0001c9d:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001ca3:	eb 06                	jmp    c0001cab <dlmallopt+0x62>
c0001ca5:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001cab:	be 01 00 00 00       	mov    esi,0x1
c0001cb0:	eb 1c                	jmp    c0001cce <dlmallopt+0x85>
c0001cb2:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001cb8:	eb f1                	jmp    c0001cab <dlmallopt+0x62>
c0001cba:	31 f6                	xor    esi,esi
c0001cbc:	85 db                	test   ebx,ebx
c0001cbe:	75 0e                	jne    c0001cce <dlmallopt+0x85>
c0001cc0:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001cca:	eb df                	jmp    c0001cab <dlmallopt+0x62>
c0001ccc:	31 f6                	xor    esi,esi
c0001cce:	5b                   	pop    ebx
c0001ccf:	89 f0                	mov    eax,esi
c0001cd1:	5e                   	pop    esi
c0001cd2:	c3                   	ret    
c0001cd3:	90                   	nop

c0001cd4 <isblank>:
c0001cd4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001cd9:	74 09                	je     c0001ce4 <isblank+0x10>
c0001cdb:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ce0:	75 0a                	jne    c0001cec <isblank+0x18>
c0001ce2:	66 90                	xchg   ax,ax
c0001ce4:	b8 01 00 00 00       	mov    eax,0x1
c0001ce9:	c3                   	ret    
c0001cea:	66 90                	xchg   ax,ax
c0001cec:	b8 00 00 00 00       	mov    eax,0x0
c0001cf1:	c3                   	ret    
c0001cf2:	66 90                	xchg   ax,ax

c0001cf4 <iscntrl>:
c0001cf4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001cf9:	7e 09                	jle    c0001d04 <iscntrl+0x10>
c0001cfb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d00:	75 0a                	jne    c0001d0c <iscntrl+0x18>
c0001d02:	66 90                	xchg   ax,ax
c0001d04:	b8 01 00 00 00       	mov    eax,0x1
c0001d09:	c3                   	ret    
c0001d0a:	66 90                	xchg   ax,ax
c0001d0c:	b8 00 00 00 00       	mov    eax,0x0
c0001d11:	c3                   	ret    
c0001d12:	66 90                	xchg   ax,ax

c0001d14 <isdigit>:
c0001d14:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d19:	7e 0d                	jle    c0001d28 <isdigit+0x14>
c0001d1b:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d20:	7f 06                	jg     c0001d28 <isdigit+0x14>
c0001d22:	b8 01 00 00 00       	mov    eax,0x1
c0001d27:	c3                   	ret    
c0001d28:	b8 00 00 00 00       	mov    eax,0x0
c0001d2d:	c3                   	ret    
c0001d2e:	66 90                	xchg   ax,ax

c0001d30 <islower>:
c0001d30:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d35:	7e 0d                	jle    c0001d44 <islower+0x14>
c0001d37:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d3c:	7f 06                	jg     c0001d44 <islower+0x14>
c0001d3e:	b8 01 00 00 00       	mov    eax,0x1
c0001d43:	c3                   	ret    
c0001d44:	b8 00 00 00 00       	mov    eax,0x0
c0001d49:	c3                   	ret    
c0001d4a:	66 90                	xchg   ax,ax

c0001d4c <isspace>:
c0001d4c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d51:	7c 19                	jl     c0001d6c <isspace+0x20>
c0001d53:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001d58:	7e 0a                	jle    c0001d64 <isspace+0x18>
c0001d5a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d5f:	75 0b                	jne    c0001d6c <isspace+0x20>
c0001d61:	8d 76 00             	lea    esi,[esi+0x0]
c0001d64:	b8 01 00 00 00       	mov    eax,0x1
c0001d69:	c3                   	ret    
c0001d6a:	66 90                	xchg   ax,ax
c0001d6c:	b8 00 00 00 00       	mov    eax,0x0
c0001d71:	c3                   	ret    
c0001d72:	66 90                	xchg   ax,ax

c0001d74 <isupper>:
c0001d74:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d79:	7e 0d                	jle    c0001d88 <isupper+0x14>
c0001d7b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d80:	7f 06                	jg     c0001d88 <isupper+0x14>
c0001d82:	b8 01 00 00 00       	mov    eax,0x1
c0001d87:	c3                   	ret    
c0001d88:	b8 00 00 00 00       	mov    eax,0x0
c0001d8d:	c3                   	ret    
c0001d8e:	66 90                	xchg   ax,ax

c0001d90 <isalpha>:
c0001d90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d94:	e8 db ff ff ff       	call   c0001d74 <isupper>
c0001d99:	83 c4 04             	add    esp,0x4
c0001d9c:	85 c0                	test   eax,eax
c0001d9e:	75 10                	jne    c0001db0 <isalpha+0x20>
c0001da0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001da4:	e8 87 ff ff ff       	call   c0001d30 <islower>
c0001da9:	83 c4 04             	add    esp,0x4
c0001dac:	85 c0                	test   eax,eax
c0001dae:	74 08                	je     c0001db8 <isalpha+0x28>
c0001db0:	b8 01 00 00 00       	mov    eax,0x1
c0001db5:	c3                   	ret    
c0001db6:	66 90                	xchg   ax,ax
c0001db8:	b8 00 00 00 00       	mov    eax,0x0
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax

c0001dc0 <isalnum>:
c0001dc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dc4:	e8 c7 ff ff ff       	call   c0001d90 <isalpha>
c0001dc9:	83 c4 04             	add    esp,0x4
c0001dcc:	85 c0                	test   eax,eax
c0001dce:	75 10                	jne    c0001de0 <isalnum+0x20>
c0001dd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dd4:	e8 3b ff ff ff       	call   c0001d14 <isdigit>
c0001dd9:	83 c4 04             	add    esp,0x4
c0001ddc:	85 c0                	test   eax,eax
c0001dde:	74 08                	je     c0001de8 <isalnum+0x28>
c0001de0:	b8 01 00 00 00       	mov    eax,0x1
c0001de5:	c3                   	ret    
c0001de6:	66 90                	xchg   ax,ax
c0001de8:	b8 00 00 00 00       	mov    eax,0x0
c0001ded:	c3                   	ret    
c0001dee:	66 90                	xchg   ax,ax

c0001df0 <ispunct>:
c0001df0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df4:	e8 c7 ff ff ff       	call   c0001dc0 <isalnum>
c0001df9:	83 c4 04             	add    esp,0x4
c0001dfc:	85 c0                	test   eax,eax
c0001dfe:	75 28                	jne    c0001e28 <ispunct+0x38>
c0001e00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e04:	e8 43 ff ff ff       	call   c0001d4c <isspace>
c0001e09:	83 c4 04             	add    esp,0x4
c0001e0c:	85 c0                	test   eax,eax
c0001e0e:	75 18                	jne    c0001e28 <ispunct+0x38>
c0001e10:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e14:	e8 db fe ff ff       	call   c0001cf4 <iscntrl>
c0001e19:	83 c4 04             	add    esp,0x4
c0001e1c:	85 c0                	test   eax,eax
c0001e1e:	75 08                	jne    c0001e28 <ispunct+0x38>
c0001e20:	b8 01 00 00 00       	mov    eax,0x1
c0001e25:	c3                   	ret    
c0001e26:	66 90                	xchg   ax,ax
c0001e28:	b8 00 00 00 00       	mov    eax,0x0
c0001e2d:	c3                   	ret    
c0001e2e:	66 90                	xchg   ax,ax

c0001e30 <isgraph>:
c0001e30:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e34:	e8 87 ff ff ff       	call   c0001dc0 <isalnum>
c0001e39:	83 c4 04             	add    esp,0x4
c0001e3c:	85 c0                	test   eax,eax
c0001e3e:	75 10                	jne    c0001e50 <isgraph+0x20>
c0001e40:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e44:	e8 a7 ff ff ff       	call   c0001df0 <ispunct>
c0001e49:	83 c4 04             	add    esp,0x4
c0001e4c:	85 c0                	test   eax,eax
c0001e4e:	74 08                	je     c0001e58 <isgraph+0x28>
c0001e50:	b8 01 00 00 00       	mov    eax,0x1
c0001e55:	c3                   	ret    
c0001e56:	66 90                	xchg   ax,ax
c0001e58:	b8 00 00 00 00       	mov    eax,0x0
c0001e5d:	c3                   	ret    
c0001e5e:	66 90                	xchg   ax,ax

c0001e60 <isprint>:
c0001e60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e64:	e8 c7 ff ff ff       	call   c0001e30 <isgraph>
c0001e69:	83 c4 04             	add    esp,0x4
c0001e6c:	85 c0                	test   eax,eax
c0001e6e:	75 08                	jne    c0001e78 <isprint+0x18>
c0001e70:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e75:	75 09                	jne    c0001e80 <isprint+0x20>
c0001e77:	90                   	nop
c0001e78:	b8 01 00 00 00       	mov    eax,0x1
c0001e7d:	c3                   	ret    
c0001e7e:	66 90                	xchg   ax,ax
c0001e80:	b8 00 00 00 00       	mov    eax,0x0
c0001e85:	c3                   	ret    
c0001e86:	66 90                	xchg   ax,ax

c0001e88 <isxdigit>:
c0001e88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e8c:	e8 83 fe ff ff       	call   c0001d14 <isdigit>
c0001e91:	83 c4 04             	add    esp,0x4
c0001e94:	85 c0                	test   eax,eax
c0001e96:	75 20                	jne    c0001eb8 <isxdigit+0x30>
c0001e98:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e9d:	7e 09                	jle    c0001ea8 <isxdigit+0x20>
c0001e9f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ea4:	7e 12                	jle    c0001eb8 <isxdigit+0x30>
c0001ea6:	66 90                	xchg   ax,ax
c0001ea8:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ead:	7e 11                	jle    c0001ec0 <isxdigit+0x38>
c0001eaf:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001eb4:	7f 0a                	jg     c0001ec0 <isxdigit+0x38>
c0001eb6:	66 90                	xchg   ax,ax
c0001eb8:	b8 01 00 00 00       	mov    eax,0x1
c0001ebd:	c3                   	ret    
c0001ebe:	66 90                	xchg   ax,ax
c0001ec0:	b8 00 00 00 00       	mov    eax,0x0
c0001ec5:	c3                   	ret    

c0001ec6 <disk_status>:
c0001ec6:	31 c0                	xor    eax,eax
c0001ec8:	c3                   	ret    

c0001ec9 <disk_initialize>:
c0001ec9:	31 c0                	xor    eax,eax
c0001ecb:	c3                   	ret    

c0001ecc <disk_read>:
c0001ecc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ed1:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001ed9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001edd:	e9 f6 69 02 00       	jmp    c00288d8 <fatWrapperReadDisk>

c0001ee2 <disk_write>:
c0001ee2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ee7:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001eef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ef3:	e9 20 6a 02 00       	jmp    c0028918 <fatWrapperWriteDisk>

c0001ef8 <disk_ioctl>:
c0001ef8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001efd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001f01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f06:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001f0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f12:	e9 41 6a 02 00       	jmp    c0028958 <fatWrapperIoctl>

c0001f17 <ld_word>:
c0001f17:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f1b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f1e:	c1 e2 08             	shl    edx,0x8
c0001f21:	09 d0                	or     eax,edx
c0001f23:	c3                   	ret    

c0001f24 <ld_dword>:
c0001f24:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001f28:	89 d1                	mov    ecx,edx
c0001f2a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001f2e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001f31:	c1 e1 08             	shl    ecx,0x8
c0001f34:	09 ca                	or     edx,ecx
c0001f36:	c1 e2 08             	shl    edx,0x8
c0001f39:	09 d0                	or     eax,edx
c0001f3b:	c3                   	ret    

c0001f3c <st_word>:
c0001f3c:	66 89 10             	mov    WORD PTR [eax],dx
c0001f3f:	c3                   	ret    

c0001f40 <st_dword>:
c0001f40:	89 10                	mov    DWORD PTR [eax],edx
c0001f42:	c3                   	ret    

c0001f43 <mem_cpy>:
c0001f43:	85 c9                	test   ecx,ecx
c0001f45:	74 10                	je     c0001f57 <mem_cpy+0x14>
c0001f47:	57                   	push   edi
c0001f48:	01 c1                	add    ecx,eax
c0001f4a:	56                   	push   esi
c0001f4b:	89 c7                	mov    edi,eax
c0001f4d:	89 d6                	mov    esi,edx
c0001f4f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f50:	39 f9                	cmp    ecx,edi
c0001f52:	75 fb                	jne    c0001f4f <mem_cpy+0xc>
c0001f54:	5e                   	pop    esi
c0001f55:	5f                   	pop    edi
c0001f56:	c3                   	ret    
c0001f57:	c3                   	ret    

c0001f58 <mem_set>:
c0001f58:	01 c1                	add    ecx,eax
c0001f5a:	88 10                	mov    BYTE PTR [eax],dl
c0001f5c:	40                   	inc    eax
c0001f5d:	39 c8                	cmp    eax,ecx
c0001f5f:	75 f9                	jne    c0001f5a <mem_set+0x2>
c0001f61:	c3                   	ret    

c0001f62 <mem_cmp>:
c0001f62:	57                   	push   edi
c0001f63:	56                   	push   esi
c0001f64:	89 c6                	mov    esi,eax
c0001f66:	53                   	push   ebx
c0001f67:	46                   	inc    esi
c0001f68:	42                   	inc    edx
c0001f69:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f6d:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f71:	29 fb                	sub    ebx,edi
c0001f73:	89 cf                	mov    edi,ecx
c0001f75:	29 f7                	sub    edi,esi
c0001f77:	01 c7                	add    edi,eax
c0001f79:	74 04                	je     c0001f7f <mem_cmp+0x1d>
c0001f7b:	85 db                	test   ebx,ebx
c0001f7d:	74 e8                	je     c0001f67 <mem_cmp+0x5>
c0001f7f:	89 d8                	mov    eax,ebx
c0001f81:	5b                   	pop    ebx
c0001f82:	5e                   	pop    esi
c0001f83:	5f                   	pop    edi
c0001f84:	c3                   	ret    

c0001f85 <chk_chr>:
c0001f85:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f88:	85 c9                	test   ecx,ecx
c0001f8a:	74 07                	je     c0001f93 <chk_chr+0xe>
c0001f8c:	39 d1                	cmp    ecx,edx
c0001f8e:	74 03                	je     c0001f93 <chk_chr+0xe>
c0001f90:	40                   	inc    eax
c0001f91:	eb f2                	jmp    c0001f85 <chk_chr>
c0001f93:	89 c8                	mov    eax,ecx
c0001f95:	c3                   	ret    

c0001f96 <dbc_1st>:
c0001f96:	31 c0                	xor    eax,eax
c0001f98:	c3                   	ret    

c0001f99 <dbc_2nd>:
c0001f99:	31 c0                	xor    eax,eax
c0001f9b:	c3                   	ret    

c0001f9c <tchar2uni>:
c0001f9c:	57                   	push   edi
c0001f9d:	56                   	push   esi
c0001f9e:	53                   	push   ebx
c0001f9f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001fa1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001fa3:	8d 73 01             	lea    esi,[ebx+0x1]
c0001fa6:	f6 c1 80             	test   cl,0x80
c0001fa9:	75 0a                	jne    c0001fb5 <tchar2uni+0x19>
c0001fab:	0f b6 d1             	movzx  edx,cl
c0001fae:	89 f3                	mov    ebx,esi
c0001fb0:	e9 b2 00 00 00       	jmp    c0002067 <tchar2uni+0xcb>
c0001fb5:	89 ca                	mov    edx,ecx
c0001fb7:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001fbd:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001fc3:	89 ca                	mov    edx,ecx
c0001fc5:	75 0a                	jne    c0001fd1 <tchar2uni+0x35>
c0001fc7:	83 e2 1f             	and    edx,0x1f
c0001fca:	b9 01 00 00 00       	mov    ecx,0x1
c0001fcf:	eb 37                	jmp    c0002008 <tchar2uni+0x6c>
c0001fd1:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001fd7:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001fdd:	75 0c                	jne    c0001feb <tchar2uni+0x4f>
c0001fdf:	89 ca                	mov    edx,ecx
c0001fe1:	b9 02 00 00 00       	mov    ecx,0x2
c0001fe6:	83 e2 0f             	and    edx,0xf
c0001fe9:	eb 1d                	jmp    c0002008 <tchar2uni+0x6c>
c0001feb:	89 cf                	mov    edi,ecx
c0001fed:	83 ca ff             	or     edx,0xffffffff
c0001ff0:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001ff6:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ffc:	75 70                	jne    c000206e <tchar2uni+0xd2>
c0001ffe:	89 ca                	mov    edx,ecx
c0002000:	b9 03 00 00 00       	mov    ecx,0x3
c0002005:	83 e2 07             	and    edx,0x7
c0002008:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c000200c:	46                   	inc    esi
c000200d:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0002010:	89 cf                	mov    edi,ecx
c0002012:	81 e7 c0 00 00 00    	and    edi,0xc0
c0002018:	83 c7 80             	add    edi,0xffffff80
c000201b:	75 4e                	jne    c000206b <tchar2uni+0xcf>
c000201d:	c1 e2 06             	shl    edx,0x6
c0002020:	83 e1 3f             	and    ecx,0x3f
c0002023:	09 ca                	or     edx,ecx
c0002025:	39 de                	cmp    esi,ebx
c0002027:	75 e3                	jne    c000200c <tchar2uni+0x70>
c0002029:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c000202f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002035:	76 34                	jbe    c000206b <tchar2uni+0xcf>
c0002037:	8d 4a 80             	lea    ecx,[edx-0x80]
c000203a:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0002040:	77 29                	ja     c000206b <tchar2uni+0xcf>
c0002042:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002048:	76 1d                	jbe    c0002067 <tchar2uni+0xcb>
c000204a:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002050:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002056:	c1 e1 06             	shl    ecx,0x6
c0002059:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c000205f:	09 ca                	or     edx,ecx
c0002061:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	eb 03                	jmp    c000206e <tchar2uni+0xd2>
c000206b:	83 ca ff             	or     edx,0xffffffff
c000206e:	5b                   	pop    ebx
c000206f:	89 d0                	mov    eax,edx
c0002071:	5e                   	pop    esi
c0002072:	5f                   	pop    edi
c0002073:	c3                   	ret    

c0002074 <put_utf>:
c0002074:	53                   	push   ebx
c0002075:	83 f8 7f             	cmp    eax,0x7f
c0002078:	89 c3                	mov    ebx,eax
c000207a:	b0 00                	mov    al,0x0
c000207c:	77 11                	ja     c000208f <put_utf+0x1b>
c000207e:	85 c9                	test   ecx,ecx
c0002080:	0f 84 e5 00 00 00    	je     c000216b <put_utf+0xf7>
c0002086:	88 1a                	mov    BYTE PTR [edx],bl
c0002088:	b0 01                	mov    al,0x1
c000208a:	e9 dc 00 00 00       	jmp    c000216b <put_utf+0xf7>
c000208f:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0002095:	77 23                	ja     c00020ba <put_utf+0x46>
c0002097:	83 f9 01             	cmp    ecx,0x1
c000209a:	0f 86 cb 00 00 00    	jbe    c000216b <put_utf+0xf7>
c00020a0:	89 d8                	mov    eax,ebx
c00020a2:	83 e3 3f             	and    ebx,0x3f
c00020a5:	c1 e8 06             	shr    eax,0x6
c00020a8:	83 cb 80             	or     ebx,0xffffff80
c00020ab:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00020ae:	83 c8 c0             	or     eax,0xffffffc0
c00020b1:	88 02                	mov    BYTE PTR [edx],al
c00020b3:	b0 02                	mov    al,0x2
c00020b5:	e9 b1 00 00 00       	jmp    c000216b <put_utf+0xf7>
c00020ba:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c00020c0:	77 40                	ja     c0002102 <put_utf+0x8e>
c00020c2:	83 f9 02             	cmp    ecx,0x2
c00020c5:	0f 86 a0 00 00 00    	jbe    c000216b <put_utf+0xf7>
c00020cb:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c00020d1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020d7:	0f 86 8e 00 00 00    	jbe    c000216b <put_utf+0xf7>
c00020dd:	89 d8                	mov    eax,ebx
c00020df:	c1 e8 0c             	shr    eax,0xc
c00020e2:	83 c8 e0             	or     eax,0xffffffe0
c00020e5:	88 02                	mov    BYTE PTR [edx],al
c00020e7:	89 d8                	mov    eax,ebx
c00020e9:	83 e3 3f             	and    ebx,0x3f
c00020ec:	c1 e8 06             	shr    eax,0x6
c00020ef:	83 cb 80             	or     ebx,0xffffff80
c00020f2:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00020f5:	83 e0 3f             	and    eax,0x3f
c00020f8:	83 c8 80             	or     eax,0xffffff80
c00020fb:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020fe:	b0 03                	mov    al,0x3
c0002100:	eb 69                	jmp    c000216b <put_utf+0xf7>
c0002102:	83 f9 03             	cmp    ecx,0x3
c0002105:	76 64                	jbe    c000216b <put_utf+0xf7>
c0002107:	89 d9                	mov    ecx,ebx
c0002109:	0f b7 c3             	movzx  eax,bx
c000210c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0002112:	66 31 c9             	xor    cx,cx
c0002115:	81 c1 00 00 00 28    	add    ecx,0x28000000
c000211b:	c1 e9 06             	shr    ecx,0x6
c000211e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0002124:	77 43                	ja     c0002169 <put_utf+0xf5>
c0002126:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c000212c:	77 3b                	ja     c0002169 <put_utf+0xf5>
c000212e:	09 cb                	or     ebx,ecx
c0002130:	81 c3 00 00 01 00    	add    ebx,0x10000
c0002136:	89 d8                	mov    eax,ebx
c0002138:	c1 e8 12             	shr    eax,0x12
c000213b:	83 c8 f0             	or     eax,0xfffffff0
c000213e:	88 02                	mov    BYTE PTR [edx],al
c0002140:	89 d8                	mov    eax,ebx
c0002142:	c1 e8 0c             	shr    eax,0xc
c0002145:	83 e0 3f             	and    eax,0x3f
c0002148:	83 c8 80             	or     eax,0xffffff80
c000214b:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000214e:	89 d8                	mov    eax,ebx
c0002150:	83 e3 3f             	and    ebx,0x3f
c0002153:	c1 e8 06             	shr    eax,0x6
c0002156:	83 cb 80             	or     ebx,0xffffff80
c0002159:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c000215c:	83 e0 3f             	and    eax,0x3f
c000215f:	83 c8 80             	or     eax,0xffffff80
c0002162:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002165:	b0 04                	mov    al,0x4
c0002167:	eb 02                	jmp    c000216b <put_utf+0xf7>
c0002169:	31 c0                	xor    eax,eax
c000216b:	5b                   	pop    ebx
c000216c:	c3                   	ret    

c000216d <clst2sect>:
c000216d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002170:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002173:	83 ea 02             	sub    edx,0x2
c0002176:	39 ca                	cmp    edx,ecx
c0002178:	76 0d                	jbe    c0002187 <clst2sect+0x1a>
c000217a:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000217e:	0f af d1             	imul   edx,ecx
c0002181:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002184:	89 d0                	mov    eax,edx
c0002186:	c3                   	ret    
c0002187:	31 c0                	xor    eax,eax
c0002189:	c3                   	ret    

c000218a <pick_lfn>:
c000218a:	55                   	push   ebp
c000218b:	57                   	push   edi
c000218c:	89 c7                	mov    edi,eax
c000218e:	56                   	push   esi
c000218f:	53                   	push   ebx
c0002190:	89 d3                	mov    ebx,edx
c0002192:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002195:	e8 7d fd ff ff       	call   c0001f17 <ld_word>
c000219a:	66 85 c0             	test   ax,ax
c000219d:	74 04                	je     c00021a3 <pick_lfn+0x19>
c000219f:	31 c0                	xor    eax,eax
c00021a1:	eb 62                	jmp    c0002205 <pick_lfn+0x7b>
c00021a3:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00021a6:	bd 01 00 00 00       	mov    ebp,0x1
c00021ab:	31 f6                	xor    esi,esi
c00021ad:	83 e1 bf             	and    ecx,0xffffffbf
c00021b0:	49                   	dec    ecx
c00021b1:	6b c9 0d             	imul   ecx,ecx,0xd
c00021b4:	0f b6 86 40 f5 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0ac0]
c00021bb:	01 d8                	add    eax,ebx
c00021bd:	e8 55 fd ff ff       	call   c0001f17 <ld_word>
c00021c2:	66 85 ed             	test   bp,bp
c00021c5:	74 11                	je     c00021d8 <pick_lfn+0x4e>
c00021c7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021cd:	77 d0                	ja     c000219f <pick_lfn+0x15>
c00021cf:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c00021d3:	89 c5                	mov    ebp,eax
c00021d5:	41                   	inc    ecx
c00021d6:	eb 0a                	jmp    c00021e2 <pick_lfn+0x58>
c00021d8:	0f b7 c0             	movzx  eax,ax
c00021db:	3d ff ff 00 00       	cmp    eax,0xffff
c00021e0:	75 bd                	jne    c000219f <pick_lfn+0x15>
c00021e2:	46                   	inc    esi
c00021e3:	83 fe 0d             	cmp    esi,0xd
c00021e6:	75 cc                	jne    c00021b4 <pick_lfn+0x2a>
c00021e8:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00021eb:	74 13                	je     c0002200 <pick_lfn+0x76>
c00021ed:	66 85 ed             	test   bp,bp
c00021f0:	74 0e                	je     c0002200 <pick_lfn+0x76>
c00021f2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021f8:	77 a5                	ja     c000219f <pick_lfn+0x15>
c00021fa:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c0002200:	b8 01 00 00 00       	mov    eax,0x1
c0002205:	5b                   	pop    ebx
c0002206:	5e                   	pop    esi
c0002207:	5f                   	pop    edi
c0002208:	5d                   	pop    ebp
c0002209:	c3                   	ret    

c000220a <put_lfn>:
c000220a:	55                   	push   ebp
c000220b:	57                   	push   edi
c000220c:	89 d7                	mov    edi,edx
c000220e:	56                   	push   esi
c000220f:	31 f6                	xor    esi,esi
c0002211:	53                   	push   ebx
c0002212:	83 ec 0c             	sub    esp,0xc
c0002215:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002219:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000221d:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002223:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0002227:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000222a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000222d:	31 d2                	xor    edx,edx
c000222f:	e8 08 fd ff ff       	call   c0001f3c <st_word>
c0002234:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000223b:	0f b6 d9             	movzx  ebx,cl
c000223e:	4b                   	dec    ebx
c000223f:	6b db 0d             	imul   ebx,ebx,0xd
c0002242:	0f b7 c6             	movzx  eax,si
c0002245:	3d ff ff 00 00       	cmp    eax,0xffff
c000224a:	74 09                	je     c0002255 <put_lfn+0x4b>
c000224c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002250:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002254:	43                   	inc    ebx
c0002255:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002258:	0f b7 ee             	movzx  ebp,si
c000225b:	89 ea                	mov    edx,ebp
c000225d:	0f b6 80 40 f5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0ac0]
c0002264:	01 f8                	add    eax,edi
c0002266:	e8 d1 fc ff ff       	call   c0001f3c <st_word>
c000226b:	85 ed                	test   ebp,ebp
c000226d:	75 05                	jne    c0002274 <put_lfn+0x6a>
c000226f:	be ff ff 00 00       	mov    esi,0xffff
c0002274:	ff 04 24             	inc    DWORD PTR [esp]
c0002277:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000227b:	75 c5                	jne    c0002242 <put_lfn+0x38>
c000227d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002283:	74 0b                	je     c0002290 <put_lfn+0x86>
c0002285:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002289:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000228e:	75 07                	jne    c0002297 <put_lfn+0x8d>
c0002290:	83 c9 40             	or     ecx,0x40
c0002293:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002297:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000229b:	88 07                	mov    BYTE PTR [edi],al
c000229d:	83 c4 0c             	add    esp,0xc
c00022a0:	5b                   	pop    ebx
c00022a1:	5e                   	pop    esi
c00022a2:	5f                   	pop    edi
c00022a3:	5d                   	pop    ebp
c00022a4:	c3                   	ret    

c00022a5 <gen_numname>:
c00022a5:	57                   	push   edi
c00022a6:	89 cf                	mov    edi,ecx
c00022a8:	56                   	push   esi
c00022a9:	b9 0b 00 00 00       	mov    ecx,0xb
c00022ae:	53                   	push   ebx
c00022af:	89 c6                	mov    esi,eax
c00022b1:	83 ec 10             	sub    esp,0x10
c00022b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00022b8:	e8 86 fc ff ff       	call   c0001f43 <mem_cpy>
c00022bd:	83 fb 05             	cmp    ebx,0x5
c00022c0:	76 30                	jbe    c00022f2 <gen_numname+0x4d>
c00022c2:	66 8b 07             	mov    ax,WORD PTR [edi]
c00022c5:	66 85 c0             	test   ax,ax
c00022c8:	74 28                	je     c00022f2 <gen_numname+0x4d>
c00022ca:	83 c7 02             	add    edi,0x2
c00022cd:	ba 10 00 00 00       	mov    edx,0x10
c00022d2:	89 c1                	mov    ecx,eax
c00022d4:	01 db                	add    ebx,ebx
c00022d6:	c1 e0 10             	shl    eax,0x10
c00022d9:	83 e1 01             	and    ecx,0x1
c00022dc:	c1 e8 11             	shr    eax,0x11
c00022df:	01 cb                	add    ebx,ecx
c00022e1:	0f ba e3 10          	bt     ebx,0x10
c00022e5:	73 06                	jae    c00022ed <gen_numname+0x48>
c00022e7:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00022ed:	4a                   	dec    edx
c00022ee:	75 e2                	jne    c00022d2 <gen_numname+0x2d>
c00022f0:	eb d0                	jmp    c00022c2 <gen_numname+0x1d>
c00022f2:	b8 07 00 00 00       	mov    eax,0x7
c00022f7:	89 d9                	mov    ecx,ebx
c00022f9:	83 e1 0f             	and    ecx,0xf
c00022fc:	8d 79 30             	lea    edi,[ecx+0x30]
c00022ff:	83 ff 39             	cmp    edi,0x39
c0002302:	89 fa                	mov    edx,edi
c0002304:	76 03                	jbe    c0002309 <gen_numname+0x64>
c0002306:	8d 51 37             	lea    edx,[ecx+0x37]
c0002309:	8d 48 ff             	lea    ecx,[eax-0x1]
c000230c:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002310:	89 da                	mov    edx,ebx
c0002312:	c1 ea 04             	shr    edx,0x4
c0002315:	83 fb 0f             	cmp    ebx,0xf
c0002318:	76 06                	jbe    c0002320 <gen_numname+0x7b>
c000231a:	89 c8                	mov    eax,ecx
c000231c:	89 d3                	mov    ebx,edx
c000231e:	eb d7                	jmp    c00022f7 <gen_numname+0x52>
c0002320:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002325:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002328:	31 d2                	xor    edx,edx
c000232a:	8d 04 16             	lea    eax,[esi+edx*1]
c000232d:	39 ca                	cmp    edx,ecx
c000232f:	73 19                	jae    c000234a <gen_numname+0xa5>
c0002331:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002334:	83 f8 20             	cmp    eax,0x20
c0002337:	74 11                	je     c000234a <gen_numname+0xa5>
c0002339:	e8 58 fc ff ff       	call   c0001f96 <dbc_1st>
c000233e:	85 c0                	test   eax,eax
c0002340:	74 05                	je     c0002347 <gen_numname+0xa2>
c0002342:	39 d3                	cmp    ebx,edx
c0002344:	74 04                	je     c000234a <gen_numname+0xa5>
c0002346:	42                   	inc    edx
c0002347:	42                   	inc    edx
c0002348:	eb e0                	jmp    c000232a <gen_numname+0x85>
c000234a:	83 f9 07             	cmp    ecx,0x7
c000234d:	b0 20                	mov    al,0x20
c000234f:	77 05                	ja     c0002356 <gen_numname+0xb1>
c0002351:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002355:	41                   	inc    ecx
c0002356:	42                   	inc    edx
c0002357:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000235b:	83 fa 07             	cmp    edx,0x7
c000235e:	76 ea                	jbe    c000234a <gen_numname+0xa5>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	5b                   	pop    ebx
c0002364:	5e                   	pop    esi
c0002365:	5f                   	pop    edi
c0002366:	c3                   	ret    

c0002367 <sum_sfn>:
c0002367:	53                   	push   ebx
c0002368:	31 c9                	xor    ecx,ecx
c000236a:	31 db                	xor    ebx,ebx
c000236c:	0f b6 d1             	movzx  edx,cl
c000236f:	d1 ea                	shr    edx,1
c0002371:	c1 e1 07             	shl    ecx,0x7
c0002374:	09 ca                	or     edx,ecx
c0002376:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002379:	43                   	inc    ebx
c000237a:	01 ca                	add    edx,ecx
c000237c:	83 fb 0b             	cmp    ebx,0xb
c000237f:	88 d1                	mov    cl,dl
c0002381:	75 e9                	jne    c000236c <sum_sfn+0x5>
c0002383:	5b                   	pop    ebx
c0002384:	88 d0                	mov    al,dl
c0002386:	c3                   	ret    

c0002387 <get_ldnumber>:
c0002387:	55                   	push   ebp
c0002388:	57                   	push   edi
c0002389:	56                   	push   esi
c000238a:	83 ce ff             	or     esi,0xffffffff
c000238d:	53                   	push   ebx
c000238e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002390:	85 d2                	test   edx,edx
c0002392:	74 38                	je     c00023cc <get_ldnumber+0x45>
c0002394:	89 c5                	mov    ebp,eax
c0002396:	89 d1                	mov    ecx,edx
c0002398:	41                   	inc    ecx
c0002399:	0f be 59 ff          	movsx  ebx,BYTE PTR [ecx-0x1]
c000239d:	80 fb 1f             	cmp    bl,0x1f
c00023a0:	76 05                	jbe    c00023a7 <get_ldnumber+0x20>
c00023a2:	83 fb 3a             	cmp    ebx,0x3a
c00023a5:	75 f1                	jne    c0002398 <get_ldnumber+0x11>
c00023a7:	31 f6                	xor    esi,esi
c00023a9:	83 fb 3a             	cmp    ebx,0x3a
c00023ac:	75 1e                	jne    c00023cc <get_ldnumber+0x45>
c00023ae:	8a 1a                	mov    bl,BYTE PTR [edx]
c00023b0:	83 ce ff             	or     esi,0xffffffff
c00023b3:	8d 7b d0             	lea    edi,[ebx-0x30]
c00023b6:	89 f8                	mov    eax,edi
c00023b8:	3c 09                	cmp    al,0x9
c00023ba:	77 10                	ja     c00023cc <get_ldnumber+0x45>
c00023bc:	83 c2 02             	add    edx,0x2
c00023bf:	39 d1                	cmp    ecx,edx
c00023c1:	75 09                	jne    c00023cc <get_ldnumber+0x45>
c00023c3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00023c6:	0f be f3             	movsx  esi,bl
c00023c9:	83 ee 30             	sub    esi,0x30
c00023cc:	5b                   	pop    ebx
c00023cd:	89 f0                	mov    eax,esi
c00023cf:	5e                   	pop    esi
c00023d0:	5f                   	pop    edi
c00023d1:	5d                   	pop    ebp
c00023d2:	c3                   	ret    

c00023d3 <validate>:
c00023d3:	56                   	push   esi
c00023d4:	85 c0                	test   eax,eax
c00023d6:	53                   	push   ebx
c00023d7:	89 d6                	mov    esi,edx
c00023d9:	51                   	push   ecx
c00023da:	75 09                	jne    c00023e5 <validate+0x12>
c00023dc:	b8 09 00 00 00       	mov    eax,0x9
c00023e1:	31 c9                	xor    ecx,ecx
c00023e3:	eb 2e                	jmp    c0002413 <validate+0x40>
c00023e5:	89 c3                	mov    ebx,eax
c00023e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00023e9:	85 c0                	test   eax,eax
c00023eb:	74 ef                	je     c00023dc <validate+0x9>
c00023ed:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023f0:	74 ea                	je     c00023dc <validate+0x9>
c00023f2:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00023f5:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00023f9:	75 e1                	jne    c00023dc <validate+0x9>
c00023fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ff:	83 ec 0c             	sub    esp,0xc
c0002402:	50                   	push   eax
c0002403:	e8 be fa ff ff       	call   c0001ec6 <disk_status>
c0002408:	83 c4 10             	add    esp,0x10
c000240b:	a8 01                	test   al,0x1
c000240d:	75 cd                	jne    c00023dc <validate+0x9>
c000240f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002411:	31 c0                	xor    eax,eax
c0002413:	89 0e                	mov    DWORD PTR [esi],ecx
c0002415:	5a                   	pop    edx
c0002416:	5b                   	pop    ebx
c0002417:	5e                   	pop    esi
c0002418:	c3                   	ret    

c0002419 <sync_window>:
c0002419:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000241d:	74 58                	je     c0002477 <sync_window+0x5e>
c000241f:	56                   	push   esi
c0002420:	53                   	push   ebx
c0002421:	89 c3                	mov    ebx,eax
c0002423:	51                   	push   ecx
c0002424:	6a 01                	push   0x1
c0002426:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002429:	8d 70 34             	lea    esi,[eax+0x34]
c000242c:	56                   	push   esi
c000242d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002431:	50                   	push   eax
c0002432:	e8 ab fa ff ff       	call   c0001ee2 <disk_write>
c0002437:	83 c4 10             	add    esp,0x10
c000243a:	ba 01 00 00 00       	mov    edx,0x1
c000243f:	85 c0                	test   eax,eax
c0002441:	75 2e                	jne    c0002471 <sync_window+0x58>
c0002443:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002447:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000244a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000244d:	89 c1                	mov    ecx,eax
c000244f:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002452:	39 d1                	cmp    ecx,edx
c0002454:	73 19                	jae    c000246f <sync_window+0x56>
c0002456:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000245a:	75 13                	jne    c000246f <sync_window+0x56>
c000245c:	6a 01                	push   0x1
c000245e:	01 d0                	add    eax,edx
c0002460:	50                   	push   eax
c0002461:	56                   	push   esi
c0002462:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002466:	50                   	push   eax
c0002467:	e8 76 fa ff ff       	call   c0001ee2 <disk_write>
c000246c:	83 c4 10             	add    esp,0x10
c000246f:	31 d2                	xor    edx,edx
c0002471:	89 d0                	mov    eax,edx
c0002473:	5a                   	pop    edx
c0002474:	5b                   	pop    ebx
c0002475:	5e                   	pop    esi
c0002476:	c3                   	ret    
c0002477:	31 d2                	xor    edx,edx
c0002479:	89 d0                	mov    eax,edx
c000247b:	c3                   	ret    

c000247c <move_window>:
c000247c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000247f:	74 3a                	je     c00024bb <move_window+0x3f>
c0002481:	56                   	push   esi
c0002482:	89 d6                	mov    esi,edx
c0002484:	53                   	push   ebx
c0002485:	89 c3                	mov    ebx,eax
c0002487:	51                   	push   ecx
c0002488:	e8 8c ff ff ff       	call   c0002419 <sync_window>
c000248d:	85 c0                	test   eax,eax
c000248f:	75 2d                	jne    c00024be <move_window+0x42>
c0002491:	6a 01                	push   0x1
c0002493:	56                   	push   esi
c0002494:	8d 43 34             	lea    eax,[ebx+0x34]
c0002497:	50                   	push   eax
c0002498:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000249c:	50                   	push   eax
c000249d:	e8 2a fa ff ff       	call   c0001ecc <disk_read>
c00024a2:	83 c4 10             	add    esp,0x10
c00024a5:	89 c2                	mov    edx,eax
c00024a7:	31 c0                	xor    eax,eax
c00024a9:	85 d2                	test   edx,edx
c00024ab:	ba ff ff ff ff       	mov    edx,0xffffffff
c00024b0:	0f 45 f2             	cmovne esi,edx
c00024b3:	0f 95 c0             	setne  al
c00024b6:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00024b9:	eb 03                	jmp    c00024be <move_window+0x42>
c00024bb:	31 c0                	xor    eax,eax
c00024bd:	c3                   	ret    
c00024be:	5a                   	pop    edx
c00024bf:	5b                   	pop    ebx
c00024c0:	5e                   	pop    esi
c00024c1:	c3                   	ret    

c00024c2 <check_fs>:
c00024c2:	53                   	push   ebx
c00024c3:	89 c3                	mov    ebx,eax
c00024c5:	83 ec 08             	sub    esp,0x8
c00024c8:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024cc:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00024d3:	e8 a4 ff ff ff       	call   c000247c <move_window>
c00024d8:	ba 04 00 00 00       	mov    edx,0x4
c00024dd:	85 c0                	test   eax,eax
c00024df:	75 68                	jne    c0002549 <check_fs+0x87>
c00024e1:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00024e7:	e8 2b fa ff ff       	call   c0001f17 <ld_word>
c00024ec:	ba 03 00 00 00       	mov    edx,0x3
c00024f1:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f5:	75 52                	jne    c0002549 <check_fs+0x87>
c00024f7:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00024fa:	8d 50 18             	lea    edx,[eax+0x18]
c00024fd:	80 fa 01             	cmp    dl,0x1
c0002500:	76 09                	jbe    c000250b <check_fs+0x49>
c0002502:	3c eb                	cmp    al,0xeb
c0002504:	ba 02 00 00 00       	mov    edx,0x2
c0002509:	75 3e                	jne    c0002549 <check_fs+0x87>
c000250b:	ba 60 32 03 c0       	mov    edx,0xc0033260
c0002510:	b9 03 00 00 00       	mov    ecx,0x3
c0002515:	8d 43 6a             	lea    eax,[ebx+0x6a]
c0002518:	e8 45 fa ff ff       	call   c0001f62 <mem_cmp>
c000251d:	31 d2                	xor    edx,edx
c000251f:	85 c0                	test   eax,eax
c0002521:	74 26                	je     c0002549 <check_fs+0x87>
c0002523:	ba fc f3 02 c0       	mov    edx,0xc002f3fc
c0002528:	b9 05 00 00 00       	mov    ecx,0x5
c000252d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002533:	e8 2a fa ff ff       	call   c0001f62 <mem_cmp>
c0002538:	31 d2                	xor    edx,edx
c000253a:	85 c0                	test   eax,eax
c000253c:	74 0b                	je     c0002549 <check_fs+0x87>
c000253e:	31 d2                	xor    edx,edx
c0002540:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002544:	0f 95 c2             	setne  dl
c0002547:	01 d2                	add    edx,edx
c0002549:	83 c4 08             	add    esp,0x8
c000254c:	89 d0                	mov    eax,edx
c000254e:	5b                   	pop    ebx
c000254f:	c3                   	ret    

c0002550 <find_volume>:
c0002550:	55                   	push   ebp
c0002551:	57                   	push   edi
c0002552:	56                   	push   esi
c0002553:	89 c6                	mov    esi,eax
c0002555:	53                   	push   ebx
c0002556:	89 d3                	mov    ebx,edx
c0002558:	83 ec 2c             	sub    esp,0x2c
c000255b:	31 d2                	xor    edx,edx
c000255d:	e8 60 ff ff ff       	call   c00024c2 <check_fs>
c0002562:	85 db                	test   ebx,ebx
c0002564:	0f 94 c2             	sete   dl
c0002567:	83 f8 02             	cmp    eax,0x2
c000256a:	74 07                	je     c0002573 <find_volume+0x23>
c000256c:	77 63                	ja     c00025d1 <find_volume+0x81>
c000256e:	f6 c2 01             	test   dl,0x1
c0002571:	75 5e                	jne    c00025d1 <find_volume+0x81>
c0002573:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	8d be fa 01 00 00    	lea    edi,[esi+0x1fa]
c0002583:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0002587:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000258b:	89 f8                	mov    eax,edi
c000258d:	83 c7 10             	add    edi,0x10
c0002590:	e8 8f f9 ff ff       	call   c0001f24 <ld_dword>
c0002595:	83 c5 04             	add    ebp,0x4
c0002598:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000259c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000259f:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00025a3:	75 e2                	jne    c0002587 <find_volume+0x37>
c00025a5:	83 fb 01             	cmp    ebx,0x1
c00025a8:	0f b6 fa             	movzx  edi,dl
c00025ab:	83 d3 ff             	adc    ebx,0xffffffff
c00025ae:	8b 54 9c 10          	mov    edx,DWORD PTR [esp+ebx*4+0x10]
c00025b2:	b8 03 00 00 00       	mov    eax,0x3
c00025b7:	85 d2                	test   edx,edx
c00025b9:	74 07                	je     c00025c2 <find_volume+0x72>
c00025bb:	89 f0                	mov    eax,esi
c00025bd:	e8 00 ff ff ff       	call   c00024c2 <check_fs>
c00025c2:	83 f8 01             	cmp    eax,0x1
c00025c5:	76 0a                	jbe    c00025d1 <find_volume+0x81>
c00025c7:	85 ff                	test   edi,edi
c00025c9:	74 06                	je     c00025d1 <find_volume+0x81>
c00025cb:	43                   	inc    ebx
c00025cc:	83 fb 03             	cmp    ebx,0x3
c00025cf:	76 dd                	jbe    c00025ae <find_volume+0x5e>
c00025d1:	83 c4 2c             	add    esp,0x2c
c00025d4:	5b                   	pop    ebx
c00025d5:	5e                   	pop    esi
c00025d6:	5f                   	pop    edi
c00025d7:	5d                   	pop    ebp
c00025d8:	c3                   	ret    

c00025d9 <mount_volume>:
c00025d9:	55                   	push   ebp
c00025da:	89 d5                	mov    ebp,edx
c00025dc:	57                   	push   edi
c00025dd:	89 cf                	mov    edi,ecx
c00025df:	56                   	push   esi
c00025e0:	53                   	push   ebx
c00025e1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025e6:	83 ec 2c             	sub    esp,0x2c
c00025e9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ef:	e8 93 fd ff ff       	call   c0002387 <get_ldnumber>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	0f 88 d0 02 00 00    	js     c00028cc <mount_volume+0x2f3>
c00025fc:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c0002603:	89 c2                	mov    edx,eax
c0002605:	bb 0c 00 00 00       	mov    ebx,0xc
c000260a:	85 f6                	test   esi,esi
c000260c:	0f 84 ba 02 00 00    	je     c00028cc <mount_volume+0x2f3>
c0002612:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c0002615:	83 e7 fe             	and    edi,0xfffffffe
c0002618:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000261b:	74 3c                	je     c0002659 <mount_volume+0x80>
c000261d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002621:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002625:	83 ec 0c             	sub    esp,0xc
c0002628:	50                   	push   eax
c0002629:	e8 98 f8 ff ff       	call   c0001ec6 <disk_status>
c000262e:	83 c4 10             	add    esp,0x10
c0002631:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002635:	a8 01                	test   al,0x1
c0002637:	75 20                	jne    c0002659 <mount_volume+0x80>
c0002639:	31 db                	xor    ebx,ebx
c000263b:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002641:	0f 84 85 02 00 00    	je     c00028cc <mount_volume+0x2f3>
c0002647:	a8 04                	test   al,0x4
c0002649:	0f 84 7d 02 00 00    	je     c00028cc <mount_volume+0x2f3>
c000264f:	bb 0a 00 00 00       	mov    ebx,0xa
c0002654:	e9 73 02 00 00       	jmp    c00028cc <mount_volume+0x2f3>
c0002659:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000265c:	83 ec 0c             	sub    esp,0xc
c000265f:	0f b6 c2             	movzx  eax,dl
c0002662:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002665:	bb 03 00 00 00       	mov    ebx,0x3
c000266a:	50                   	push   eax
c000266b:	e8 59 f8 ff ff       	call   c0001ec9 <disk_initialize>
c0002670:	83 c4 10             	add    esp,0x10
c0002673:	a8 01                	test   al,0x1
c0002675:	0f 85 51 02 00 00    	jne    c00028cc <mount_volume+0x2f3>
c000267b:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002681:	74 04                	je     c0002687 <mount_volume+0xae>
c0002683:	a8 04                	test   al,0x4
c0002685:	75 c8                	jne    c000264f <mount_volume+0x76>
c0002687:	31 d2                	xor    edx,edx
c0002689:	89 f0                	mov    eax,esi
c000268b:	e8 c0 fe ff ff       	call   c0002550 <find_volume>
c0002690:	bb 01 00 00 00       	mov    ebx,0x1
c0002695:	83 f8 04             	cmp    eax,0x4
c0002698:	0f 84 2e 02 00 00    	je     c00028cc <mount_volume+0x2f3>
c000269e:	83 f8 01             	cmp    eax,0x1
c00026a1:	76 0a                	jbe    c00026ad <mount_volume+0xd4>
c00026a3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026a8:	e9 1f 02 00 00       	jmp    c00028cc <mount_volume+0x2f3>
c00026ad:	8d 46 3f             	lea    eax,[esi+0x3f]
c00026b0:	e8 62 f8 ff ff       	call   c0001f17 <ld_word>
c00026b5:	66 3d 00 02          	cmp    ax,0x200
c00026b9:	75 e8                	jne    c00026a3 <mount_volume+0xca>
c00026bb:	8d 46 4a             	lea    eax,[esi+0x4a]
c00026be:	e8 54 f8 ff ff       	call   c0001f17 <ld_word>
c00026c3:	0f b7 c0             	movzx  eax,ax
c00026c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026ca:	85 c0                	test   eax,eax
c00026cc:	75 0c                	jne    c00026da <mount_volume+0x101>
c00026ce:	8d 46 58             	lea    eax,[esi+0x58]
c00026d1:	e8 4e f8 ff ff       	call   c0001f24 <ld_dword>
c00026d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026da:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00026dd:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00026e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00026e8:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00026eb:	89 e8                	mov    eax,ebp
c00026ed:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00026f0:	8d 45 ff             	lea    eax,[ebp-0x1]
c00026f3:	3c 01                	cmp    al,0x1
c00026f5:	77 ac                	ja     c00026a3 <mount_volume+0xca>
c00026f7:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00026fb:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00026ff:	66 85 c0             	test   ax,ax
c0002702:	89 c3                	mov    ebx,eax
c0002704:	74 9d                	je     c00026a3 <mount_volume+0xca>
c0002706:	8d 40 ff             	lea    eax,[eax-0x1]
c0002709:	85 d8                	test   eax,ebx
c000270b:	75 96                	jne    c00026a3 <mount_volume+0xca>
c000270d:	8d 46 45             	lea    eax,[esi+0x45]
c0002710:	e8 02 f8 ff ff       	call   c0001f17 <ld_word>
c0002715:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c0002719:	a8 0f                	test   al,0xf
c000271b:	89 c7                	mov    edi,eax
c000271d:	75 84                	jne    c00026a3 <mount_volume+0xca>
c000271f:	8d 46 47             	lea    eax,[esi+0x47]
c0002722:	e8 f0 f7 ff ff       	call   c0001f17 <ld_word>
c0002727:	0f b7 d0             	movzx  edx,ax
c000272a:	85 d2                	test   edx,edx
c000272c:	75 0a                	jne    c0002738 <mount_volume+0x15f>
c000272e:	8d 46 54             	lea    eax,[esi+0x54]
c0002731:	e8 ee f7 ff ff       	call   c0001f24 <ld_dword>
c0002736:	89 c2                	mov    edx,eax
c0002738:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000273c:	8d 46 42             	lea    eax,[esi+0x42]
c000273f:	e8 d3 f7 ff ff       	call   c0001f17 <ld_word>
c0002744:	0f b7 c8             	movzx  ecx,ax
c0002747:	85 c9                	test   ecx,ecx
c0002749:	0f 84 54 ff ff ff    	je     c00026a3 <mount_volume+0xca>
c000274f:	89 e8                	mov    eax,ebp
c0002751:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002755:	0f b6 e8             	movzx  ebp,al
c0002758:	0f b7 c7             	movzx  eax,di
c000275b:	0f af 6c 24 0c       	imul   ebp,DWORD PTR [esp+0xc]
c0002760:	c1 e8 04             	shr    eax,0x4
c0002763:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0002767:	01 e8                	add    eax,ebp
c0002769:	01 c8                	add    eax,ecx
c000276b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000276f:	39 c2                	cmp    edx,eax
c0002771:	0f 82 2c ff ff ff    	jb     c00026a3 <mount_volume+0xca>
c0002777:	29 c2                	sub    edx,eax
c0002779:	89 d5                	mov    ebp,edx
c000277b:	89 d0                	mov    eax,edx
c000277d:	31 d2                	xor    edx,edx
c000277f:	f7 f3                	div    ebx
c0002781:	39 dd                	cmp    ebp,ebx
c0002783:	0f 82 1a ff ff ff    	jb     c00026a3 <mount_volume+0xca>
c0002789:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000278e:	0f 87 0f ff ff ff    	ja     c00026a3 <mount_volume+0xca>
c0002794:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002799:	0f 86 1e 01 00 00    	jbe    c00028bd <mount_volume+0x2e4>
c000279f:	bb 03 00 00 00       	mov    ebx,0x3
c00027a4:	8d 68 02             	lea    ebp,[eax+0x2]
c00027a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027ab:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c00027ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00027b2:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c00027b6:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c00027b9:	01 c8                	add    eax,ecx
c00027bb:	83 fb 03             	cmp    ebx,0x3
c00027be:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00027c1:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00027c4:	75 23                	jne    c00027e9 <mount_volume+0x210>
c00027c6:	8d 46 5e             	lea    eax,[esi+0x5e]
c00027c9:	e8 49 f7 ff ff       	call   c0001f17 <ld_word>
c00027ce:	09 c7                	or     edi,eax
c00027d0:	66 85 ff             	test   di,di
c00027d3:	0f 85 ca fe ff ff    	jne    c00026a3 <mount_volume+0xca>
c00027d9:	8d 46 60             	lea    eax,[esi+0x60]
c00027dc:	e8 43 f7 ff ff       	call   c0001f24 <ld_dword>
c00027e1:	c1 e5 02             	shl    ebp,0x2
c00027e4:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00027e7:	eb 25                	jmp    c000280e <mount_volume+0x235>
c00027e9:	66 85 ff             	test   di,di
c00027ec:	0f 84 b1 fe ff ff    	je     c00026a3 <mount_volume+0xca>
c00027f2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00027f6:	8d 54 6d 00          	lea    edx,[ebp+ebp*2+0x0]
c00027fa:	8d 7c 2d 00          	lea    edi,[ebp+ebp*1+0x0]
c00027fe:	83 e5 01             	and    ebp,0x1
c0002801:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002804:	d1 ea                	shr    edx,1
c0002806:	01 d5                	add    ebp,edx
c0002808:	83 fb 02             	cmp    ebx,0x2
c000280b:	0f 44 ef             	cmove  ebp,edi
c000280e:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c0002814:	c1 ed 09             	shr    ebp,0x9
c0002817:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000281b:	0f 87 82 fe ff ff    	ja     c00026a3 <mount_volume+0xca>
c0002821:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c0002828:	83 fb 03             	cmp    ebx,0x3
c000282b:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002832:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002836:	75 6e                	jne    c00028a6 <mount_volume+0x2cd>
c0002838:	8d 46 64             	lea    eax,[esi+0x64]
c000283b:	e8 d7 f6 ff ff       	call   c0001f17 <ld_word>
c0002840:	66 48                	dec    ax
c0002842:	75 62                	jne    c00028a6 <mount_volume+0x2cd>
c0002844:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002848:	89 f0                	mov    eax,esi
c000284a:	42                   	inc    edx
c000284b:	e8 2c fc ff ff       	call   c000247c <move_window>
c0002850:	85 c0                	test   eax,eax
c0002852:	75 52                	jne    c00028a6 <mount_volume+0x2cd>
c0002854:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002858:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000285e:	e8 b4 f6 ff ff       	call   c0001f17 <ld_word>
c0002863:	66 3d 55 aa          	cmp    ax,0xaa55
c0002867:	75 3d                	jne    c00028a6 <mount_volume+0x2cd>
c0002869:	8d 46 34             	lea    eax,[esi+0x34]
c000286c:	e8 b3 f6 ff ff       	call   c0001f24 <ld_dword>
c0002871:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002876:	75 2e                	jne    c00028a6 <mount_volume+0x2cd>
c0002878:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000287e:	e8 a1 f6 ff ff       	call   c0001f24 <ld_dword>
c0002883:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002888:	75 1c                	jne    c00028a6 <mount_volume+0x2cd>
c000288a:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002890:	e8 8f f6 ff ff       	call   c0001f24 <ld_dword>
c0002895:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002898:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000289e:	e8 81 f6 ff ff       	call   c0001f24 <ld_dword>
c00028a3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00028a6:	88 1e                	mov    BYTE PTR [esi],bl
c00028a8:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c00028ae:	31 db                	xor    ebx,ebx
c00028b0:	40                   	inc    eax
c00028b1:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c00028b7:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c00028bb:	eb 0f                	jmp    c00028cc <mount_volume+0x2f3>
c00028bd:	3d f6 0f 00 00       	cmp    eax,0xff6
c00028c2:	19 db                	sbb    ebx,ebx
c00028c4:	83 c3 02             	add    ebx,0x2
c00028c7:	e9 d8 fe ff ff       	jmp    c00027a4 <mount_volume+0x1cb>
c00028cc:	83 c4 2c             	add    esp,0x2c
c00028cf:	89 d8                	mov    eax,ebx
c00028d1:	5b                   	pop    ebx
c00028d2:	5e                   	pop    esi
c00028d3:	5f                   	pop    edi
c00028d4:	5d                   	pop    ebp
c00028d5:	c3                   	ret    

c00028d6 <put_fat>:
c00028d6:	55                   	push   ebp
c00028d7:	bd 02 00 00 00       	mov    ebp,0x2
c00028dc:	57                   	push   edi
c00028dd:	56                   	push   esi
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	83 fa 01             	cmp    edx,0x1
c00028e5:	0f 86 38 01 00 00    	jbe    c0002a23 <put_fat+0x14d>
c00028eb:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00028ee:	0f 86 2f 01 00 00    	jbe    c0002a23 <put_fat+0x14d>
c00028f4:	89 c6                	mov    esi,eax
c00028f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00028f9:	89 cf                	mov    edi,ecx
c00028fb:	89 d3                	mov    ebx,edx
c00028fd:	83 f8 02             	cmp    eax,0x2
c0002900:	0f 84 b1 00 00 00    	je     c00029b7 <put_fat+0xe1>
c0002906:	83 f8 03             	cmp    eax,0x3
c0002909:	0f 84 d5 00 00 00    	je     c00029e4 <put_fat+0x10e>
c000290f:	48                   	dec    eax
c0002910:	0f 85 0d 01 00 00    	jne    c0002a23 <put_fat+0x14d>
c0002916:	89 d1                	mov    ecx,edx
c0002918:	89 f0                	mov    eax,esi
c000291a:	d1 e9                	shr    ecx,1
c000291c:	01 d1                	add    ecx,edx
c000291e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002922:	89 ca                	mov    edx,ecx
c0002924:	c1 ea 09             	shr    edx,0x9
c0002927:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000292a:	e8 4d fb ff ff       	call   c000247c <move_window>
c000292f:	85 c0                	test   eax,eax
c0002931:	89 c5                	mov    ebp,eax
c0002933:	0f 85 ea 00 00 00    	jne    c0002a23 <put_fat+0x14d>
c0002939:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000293d:	8d 46 34             	lea    eax,[esi+0x34]
c0002940:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002944:	8d 41 01             	lea    eax,[ecx+0x1]
c0002947:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000294d:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002951:	83 e3 01             	and    ebx,0x1
c0002954:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002958:	89 f8                	mov    eax,edi
c000295a:	74 11                	je     c000296d <put_fat+0x97>
c000295c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000295e:	89 f8                	mov    eax,edi
c0002960:	c1 e0 04             	shl    eax,0x4
c0002963:	25 f0 0f 00 00       	and    eax,0xff0
c0002968:	83 e2 0f             	and    edx,0xf
c000296b:	09 d0                	or     eax,edx
c000296d:	88 01                	mov    BYTE PTR [ecx],al
c000296f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002973:	89 f0                	mov    eax,esi
c0002975:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002979:	c1 ea 09             	shr    edx,0x9
c000297c:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000297f:	e8 f8 fa ff ff       	call   c000247c <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	89 c5                	mov    ebp,eax
c0002988:	0f 85 95 00 00 00    	jne    c0002a23 <put_fat+0x14d>
c000298e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002992:	25 ff 01 00 00       	and    eax,0x1ff
c0002997:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000299b:	85 db                	test   ebx,ebx
c000299d:	74 07                	je     c00029a6 <put_fat+0xd0>
c000299f:	c1 ef 04             	shr    edi,0x4
c00029a2:	89 f9                	mov    ecx,edi
c00029a4:	eb 0d                	jmp    c00029b3 <put_fat+0xdd>
c00029a6:	8a 08                	mov    cl,BYTE PTR [eax]
c00029a8:	c1 ef 08             	shr    edi,0x8
c00029ab:	83 e7 0f             	and    edi,0xf
c00029ae:	83 e1 f0             	and    ecx,0xfffffff0
c00029b1:	09 f9                	or     ecx,edi
c00029b3:	88 08                	mov    BYTE PTR [eax],cl
c00029b5:	eb 27                	jmp    c00029de <put_fat+0x108>
c00029b7:	c1 ea 08             	shr    edx,0x8
c00029ba:	89 f0                	mov    eax,esi
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 b8 fa ff ff       	call   c000247c <move_window>
c00029c4:	85 c0                	test   eax,eax
c00029c6:	89 c5                	mov    ebp,eax
c00029c8:	75 59                	jne    c0002a23 <put_fat+0x14d>
c00029ca:	01 db                	add    ebx,ebx
c00029cc:	0f b7 d7             	movzx  edx,di
c00029cf:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00029d5:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00029d9:	e8 5e f5 ff ff       	call   c0001f3c <st_word>
c00029de:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00029e2:	eb 3f                	jmp    c0002a23 <put_fat+0x14d>
c00029e4:	c1 ea 07             	shr    edx,0x7
c00029e7:	89 f0                	mov    eax,esi
c00029e9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029ec:	e8 8b fa ff ff       	call   c000247c <move_window>
c00029f1:	85 c0                	test   eax,eax
c00029f3:	89 c5                	mov    ebp,eax
c00029f5:	75 2c                	jne    c0002a23 <put_fat+0x14d>
c00029f7:	c1 e3 02             	shl    ebx,0x2
c00029fa:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a00:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a06:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a0a:	89 d8                	mov    eax,ebx
c0002a0c:	e8 13 f5 ff ff       	call   c0001f24 <ld_dword>
c0002a11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002a16:	09 f8                	or     eax,edi
c0002a18:	89 c2                	mov    edx,eax
c0002a1a:	89 d8                	mov    eax,ebx
c0002a1c:	e8 1f f5 ff ff       	call   c0001f40 <st_dword>
c0002a21:	eb bb                	jmp    c00029de <put_fat+0x108>
c0002a23:	83 c4 1c             	add    esp,0x1c
c0002a26:	89 e8                	mov    eax,ebp
c0002a28:	5b                   	pop    ebx
c0002a29:	5e                   	pop    esi
c0002a2a:	5f                   	pop    edi
c0002a2b:	5d                   	pop    ebp
c0002a2c:	c3                   	ret    

c0002a2d <dir_clear>:
c0002a2d:	55                   	push   ebp
c0002a2e:	57                   	push   edi
c0002a2f:	56                   	push   esi
c0002a30:	89 c6                	mov    esi,eax
c0002a32:	53                   	push   ebx
c0002a33:	83 ec 1c             	sub    esp,0x1c
c0002a36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002a3a:	e8 da f9 ff ff       	call   c0002419 <sync_window>
c0002a3f:	85 c0                	test   eax,eax
c0002a41:	0f 85 c1 00 00 00    	jne    c0002b08 <dir_clear+0xdb>
c0002a47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a4b:	89 f0                	mov    eax,esi
c0002a4d:	e8 1b f7 ff ff       	call   c000216d <clst2sect>
c0002a52:	31 d2                	xor    edx,edx
c0002a54:	b9 00 02 00 00       	mov    ecx,0x200
c0002a59:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002a5c:	89 c5                	mov    ebp,eax
c0002a5e:	8d 46 34             	lea    eax,[esi+0x34]
c0002a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a65:	e8 ee f4 ff ff       	call   c0001f58 <mem_set>
c0002a6a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002a6e:	b8 00 80 00 00       	mov    eax,0x8000
c0002a73:	c1 e3 09             	shl    ebx,0x9
c0002a76:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002a7c:	0f 47 d8             	cmova  ebx,eax
c0002a7f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002a85:	76 16                	jbe    c0002a9d <dir_clear+0x70>
c0002a87:	83 ec 0c             	sub    esp,0xc
c0002a8a:	53                   	push   ebx
c0002a8b:	e8 cc 32 00 00       	call   c0005d5c <ff_memalloc>
c0002a90:	83 c4 10             	add    esp,0x10
c0002a93:	85 c0                	test   eax,eax
c0002a95:	89 c7                	mov    edi,eax
c0002a97:	75 76                	jne    c0002b0f <dir_clear+0xe2>
c0002a99:	d1 eb                	shr    ebx,1
c0002a9b:	eb e2                	jmp    c0002a7f <dir_clear+0x52>
c0002a9d:	31 db                	xor    ebx,ebx
c0002a9f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002aa3:	39 d8                	cmp    eax,ebx
c0002aa5:	76 53                	jbe    c0002afa <dir_clear+0xcd>
c0002aa7:	6a 01                	push   0x1
c0002aa9:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002aac:	50                   	push   eax
c0002aad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002ab5:	50                   	push   eax
c0002ab6:	e8 27 f4 ff ff       	call   c0001ee2 <disk_write>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	85 c0                	test   eax,eax
c0002ac0:	75 38                	jne    c0002afa <dir_clear+0xcd>
c0002ac2:	43                   	inc    ebx
c0002ac3:	eb da                	jmp    c0002a9f <dir_clear+0x72>
c0002ac5:	52                   	push   edx
c0002ac6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002ac9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002acd:	50                   	push   eax
c0002ace:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002ad2:	57                   	push   edi
c0002ad3:	50                   	push   eax
c0002ad4:	e8 09 f4 ff ff       	call   c0001ee2 <disk_write>
c0002ad9:	83 c4 10             	add    esp,0x10
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	85 c0                	test   eax,eax
c0002ae2:	75 0a                	jne    c0002aee <dir_clear+0xc1>
c0002ae4:	01 d3                	add    ebx,edx
c0002ae6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002aea:	39 d8                	cmp    eax,ebx
c0002aec:	77 d7                	ja     c0002ac5 <dir_clear+0x98>
c0002aee:	83 ec 0c             	sub    esp,0xc
c0002af1:	57                   	push   edi
c0002af2:	e8 7d 32 00 00       	call   c0005d74 <ff_memfree>
c0002af7:	83 c4 10             	add    esp,0x10
c0002afa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002afe:	39 d8                	cmp    eax,ebx
c0002b00:	0f 95 c0             	setne  al
c0002b03:	0f b6 c0             	movzx  eax,al
c0002b06:	eb 19                	jmp    c0002b21 <dir_clear+0xf4>
c0002b08:	b8 01 00 00 00       	mov    eax,0x1
c0002b0d:	eb 12                	jmp    c0002b21 <dir_clear+0xf4>
c0002b0f:	89 d9                	mov    ecx,ebx
c0002b11:	31 d2                	xor    edx,edx
c0002b13:	e8 40 f4 ff ff       	call   c0001f58 <mem_set>
c0002b18:	89 da                	mov    edx,ebx
c0002b1a:	31 db                	xor    ebx,ebx
c0002b1c:	c1 ea 09             	shr    edx,0x9
c0002b1f:	eb c5                	jmp    c0002ae6 <dir_clear+0xb9>
c0002b21:	83 c4 1c             	add    esp,0x1c
c0002b24:	5b                   	pop    ebx
c0002b25:	5e                   	pop    esi
c0002b26:	5f                   	pop    edi
c0002b27:	5d                   	pop    ebp
c0002b28:	c3                   	ret    

c0002b29 <create_name>:
c0002b29:	55                   	push   ebp
c0002b2a:	89 c5                	mov    ebp,eax
c0002b2c:	57                   	push   edi
c0002b2d:	89 d7                	mov    edi,edx
c0002b2f:	56                   	push   esi
c0002b30:	31 f6                	xor    esi,esi
c0002b32:	53                   	push   ebx
c0002b33:	83 ec 3c             	sub    esp,0x3c
c0002b36:	8b 02                	mov    eax,DWORD PTR [edx]
c0002b38:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b3c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0002b3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002b42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b46:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002b4a:	e8 4d f4 ff ff       	call   c0001f9c <tchar2uni>
c0002b4f:	83 f8 ff             	cmp    eax,0xffffffff
c0002b52:	89 c3                	mov    ebx,eax
c0002b54:	75 0a                	jne    c0002b60 <create_name+0x37>
c0002b56:	b8 06 00 00 00       	mov    eax,0x6
c0002b5b:	e9 7c 02 00 00       	jmp    c0002ddc <create_name+0x2b3>
c0002b60:	3d ff ff 00 00       	cmp    eax,0xffff
c0002b65:	76 0c                	jbe    c0002b73 <create_name+0x4a>
c0002b67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002b6b:	c1 e8 10             	shr    eax,0x10
c0002b6e:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002b72:	46                   	inc    esi
c0002b73:	0f b7 d3             	movzx  edx,bx
c0002b76:	89 d8                	mov    eax,ebx
c0002b78:	83 fa 1f             	cmp    edx,0x1f
c0002b7b:	76 30                	jbe    c0002bad <create_name+0x84>
c0002b7d:	83 fa 2f             	cmp    edx,0x2f
c0002b80:	74 2b                	je     c0002bad <create_name+0x84>
c0002b82:	83 fa 5c             	cmp    edx,0x5c
c0002b85:	74 35                	je     c0002bbc <create_name+0x93>
c0002b87:	83 fa 7f             	cmp    edx,0x7f
c0002b8a:	77 0e                	ja     c0002b9a <create_name+0x71>
c0002b8c:	b8 02 f4 02 c0       	mov    eax,0xc002f402
c0002b91:	e8 ef f3 ff ff       	call   c0001f85 <chk_chr>
c0002b96:	85 c0                	test   eax,eax
c0002b98:	75 bc                	jne    c0002b56 <create_name+0x2d>
c0002b9a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002ba0:	77 b4                	ja     c0002b56 <create_name+0x2d>
c0002ba2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ba6:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002baa:	46                   	inc    esi
c0002bab:	eb 99                	jmp    c0002b46 <create_name+0x1d>
c0002bad:	66 83 f8 1f          	cmp    ax,0x1f
c0002bb1:	b3 04                	mov    bl,0x4
c0002bb3:	76 1a                	jbe    c0002bcf <create_name+0xa6>
c0002bb5:	eb 05                	jmp    c0002bbc <create_name+0x93>
c0002bb7:	40                   	inc    eax
c0002bb8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002bc0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002bc3:	83 fa 2f             	cmp    edx,0x2f
c0002bc6:	74 ef                	je     c0002bb7 <create_name+0x8e>
c0002bc8:	83 fa 5c             	cmp    edx,0x5c
c0002bcb:	74 ea                	je     c0002bb7 <create_name+0x8e>
c0002bcd:	31 db                	xor    ebx,ebx
c0002bcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002bd3:	89 07                	mov    DWORD PTR [edi],eax
c0002bd5:	85 f6                	test   esi,esi
c0002bd7:	74 16                	je     c0002bef <create_name+0xc6>
c0002bd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bdd:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002be2:	83 f8 20             	cmp    eax,0x20
c0002be5:	74 05                	je     c0002bec <create_name+0xc3>
c0002be7:	83 f8 2e             	cmp    eax,0x2e
c0002bea:	75 03                	jne    c0002bef <create_name+0xc6>
c0002bec:	4e                   	dec    esi
c0002bed:	eb e6                	jmp    c0002bd5 <create_name+0xac>
c0002bef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bf3:	31 ff                	xor    edi,edi
c0002bf5:	85 f6                	test   esi,esi
c0002bf7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002bfd:	0f 84 53 ff ff ff    	je     c0002b56 <create_name+0x2d>
c0002c03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c07:	8d 57 01             	lea    edx,[edi+0x1]
c0002c0a:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c0e:	83 f8 20             	cmp    eax,0x20
c0002c11:	75 04                	jne    c0002c17 <create_name+0xee>
c0002c13:	89 d7                	mov    edi,edx
c0002c15:	eb ec                	jmp    c0002c03 <create_name+0xda>
c0002c17:	85 ff                	test   edi,edi
c0002c19:	75 05                	jne    c0002c20 <create_name+0xf7>
c0002c1b:	83 f8 2e             	cmp    eax,0x2e
c0002c1e:	75 08                	jne    c0002c28 <create_name+0xff>
c0002c20:	83 cb 03             	or     ebx,0x3
c0002c23:	eb 03                	jmp    c0002c28 <create_name+0xff>
c0002c25:	4e                   	dec    esi
c0002c26:	74 0c                	je     c0002c34 <create_name+0x10b>
c0002c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c2c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002c32:	75 f1                	jne    c0002c25 <create_name+0xfc>
c0002c34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c39:	ba 20 00 00 00       	mov    edx,0x20
c0002c3e:	8d 45 20             	lea    eax,[ebp+0x20]
c0002c41:	e8 12 f3 ff ff       	call   c0001f58 <mem_set>
c0002c46:	31 c9                	xor    ecx,ecx
c0002c48:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002c50:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002c55:	8d 47 01             	lea    eax,[edi+0x1]
c0002c58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c60:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c64:	85 c0                	test   eax,eax
c0002c66:	89 c7                	mov    edi,eax
c0002c68:	0f 84 1d 01 00 00    	je     c0002d8b <create_name+0x262>
c0002c6e:	83 f8 20             	cmp    eax,0x20
c0002c71:	74 0b                	je     c0002c7e <create_name+0x155>
c0002c73:	83 f8 2e             	cmp    eax,0x2e
c0002c76:	75 0f                	jne    c0002c87 <create_name+0x15e>
c0002c78:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c7c:	74 09                	je     c0002c87 <create_name+0x15e>
c0002c7e:	83 cb 03             	or     ebx,0x3
c0002c81:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0002c85:	eb ce                	jmp    c0002c55 <create_name+0x12c>
c0002c87:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002c8b:	73 06                	jae    c0002c93 <create_name+0x16a>
c0002c8d:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002c91:	75 3a                	jne    c0002ccd <create_name+0x1a4>
c0002c93:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002c98:	75 08                	jne    c0002ca2 <create_name+0x179>
c0002c9a:	83 cb 03             	or     ebx,0x3
c0002c9d:	e9 e9 00 00 00       	jmp    c0002d8b <create_name+0x262>
c0002ca2:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002ca6:	74 0d                	je     c0002cb5 <create_name+0x18c>
c0002ca8:	83 cb 03             	or     ebx,0x3
c0002cab:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002caf:	0f 87 d6 00 00 00    	ja     c0002d8b <create_name+0x262>
c0002cb5:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002cba:	b9 08 00 00 00       	mov    ecx,0x8
c0002cbf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002cc3:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002ccb:	eb b4                	jmp    c0002c81 <create_name+0x158>
c0002ccd:	0f b7 c7             	movzx  eax,di
c0002cd0:	83 f8 7f             	cmp    eax,0x7f
c0002cd3:	76 66                	jbe    c0002d3b <create_name+0x212>
c0002cd5:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002cd9:	89 d9                	mov    ecx,ebx
c0002cdb:	83 c9 02             	or     ecx,0x2
c0002cde:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002ce2:	52                   	push   edx
c0002ce3:	52                   	push   edx
c0002ce4:	68 b5 01 00 00       	push   0x1b5
c0002ce9:	50                   	push   eax
c0002cea:	e8 9d 30 00 00       	call   c0005d8c <ff_uni2oem>
c0002cef:	83 c4 10             	add    esp,0x10
c0002cf2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002cf6:	a8 80                	test   al,0x80
c0002cf8:	89 c7                	mov    edi,eax
c0002cfa:	74 0c                	je     c0002d08 <create_name+0x1df>
c0002cfc:	83 e7 7f             	and    edi,0x7f
c0002cff:	0f b6 bf c0 f4 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0b40]
c0002d06:	eb 2a                	jmp    c0002d32 <create_name+0x209>
c0002d08:	0f b7 c0             	movzx  eax,ax
c0002d0b:	3d ff 00 00 00       	cmp    eax,0xff
c0002d10:	76 20                	jbe    c0002d32 <create_name+0x209>
c0002d12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0002d16:	4a                   	dec    edx
c0002d17:	39 ca                	cmp    edx,ecx
c0002d19:	77 0c                	ja     c0002d27 <create_name+0x1fe>
c0002d1b:	83 cb 03             	or     ebx,0x3
c0002d1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002d22:	e9 5a ff ff ff       	jmp    c0002c81 <create_name+0x158>
c0002d27:	88 64 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],ah
c0002d2b:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d2f:	41                   	inc    ecx
c0002d30:	eb 4d                	jmp    c0002d7f <create_name+0x256>
c0002d32:	66 85 ff             	test   di,di
c0002d35:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002d39:	74 19                	je     c0002d54 <create_name+0x22b>
c0002d3b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d3f:	0f b7 d7             	movzx  edx,di
c0002d42:	b8 0b f4 02 c0       	mov    eax,0xc002f40b
c0002d47:	e8 39 f2 ff ff       	call   c0001f85 <chk_chr>
c0002d4c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002d50:	85 c0                	test   eax,eax
c0002d52:	74 0a                	je     c0002d5e <create_name+0x235>
c0002d54:	83 cb 03             	or     ebx,0x3
c0002d57:	bf 5f 00 00 00       	mov    edi,0x5f
c0002d5c:	eb 21                	jmp    c0002d7f <create_name+0x256>
c0002d5e:	8d 47 bf             	lea    eax,[edi-0x41]
c0002d61:	66 83 f8 19          	cmp    ax,0x19
c0002d65:	77 07                	ja     c0002d6e <create_name+0x245>
c0002d67:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002d6c:	eb 11                	jmp    c0002d7f <create_name+0x256>
c0002d6e:	8d 47 9f             	lea    eax,[edi-0x61]
c0002d71:	66 83 f8 19          	cmp    ax,0x19
c0002d75:	77 08                	ja     c0002d7f <create_name+0x256>
c0002d77:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002d7c:	83 ef 20             	sub    edi,0x20
c0002d7f:	89 f8                	mov    eax,edi
c0002d81:	88 44 0d 20          	mov    BYTE PTR [ebp+ecx*1+0x20],al
c0002d85:	41                   	inc    ecx
c0002d86:	e9 f6 fe ff ff       	jmp    c0002c81 <create_name+0x158>
c0002d8b:	80 7d 20 e5          	cmp    BYTE PTR [ebp+0x20],0xe5
c0002d8f:	75 04                	jne    c0002d95 <create_name+0x26c>
c0002d91:	c6 45 20 05          	mov    BYTE PTR [ebp+0x20],0x5
c0002d95:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002d9a:	75 05                	jne    c0002da1 <create_name+0x278>
c0002d9c:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002da1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002da5:	83 e0 0c             	and    eax,0xc
c0002da8:	83 f8 0c             	cmp    eax,0xc
c0002dab:	74 0c                	je     c0002db9 <create_name+0x290>
c0002dad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002db1:	83 e0 03             	and    eax,0x3
c0002db4:	83 f8 03             	cmp    eax,0x3
c0002db7:	75 05                	jne    c0002dbe <create_name+0x295>
c0002db9:	83 cb 02             	or     ebx,0x2
c0002dbc:	eb 19                	jmp    c0002dd7 <create_name+0x2ae>
c0002dbe:	f6 c3 02             	test   bl,0x2
c0002dc1:	75 14                	jne    c0002dd7 <create_name+0x2ae>
c0002dc3:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002dc8:	74 03                	je     c0002dcd <create_name+0x2a4>
c0002dca:	83 cb 10             	or     ebx,0x10
c0002dcd:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002dd2:	74 03                	je     c0002dd7 <create_name+0x2ae>
c0002dd4:	83 cb 08             	or     ebx,0x8
c0002dd7:	88 5d 2b             	mov    BYTE PTR [ebp+0x2b],bl
c0002dda:	31 c0                	xor    eax,eax
c0002ddc:	83 c4 3c             	add    esp,0x3c
c0002ddf:	5b                   	pop    ebx
c0002de0:	5e                   	pop    esi
c0002de1:	5f                   	pop    edi
c0002de2:	5d                   	pop    ebp
c0002de3:	c3                   	ret    

c0002de4 <cmp_lfn>:
c0002de4:	55                   	push   ebp
c0002de5:	57                   	push   edi
c0002de6:	89 d7                	mov    edi,edx
c0002de8:	56                   	push   esi
c0002de9:	53                   	push   ebx
c0002dea:	83 ec 1c             	sub    esp,0x1c
c0002ded:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002df1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002df4:	e8 1e f1 ff ff       	call   c0001f17 <ld_word>
c0002df9:	66 85 c0             	test   ax,ax
c0002dfc:	74 07                	je     c0002e05 <cmp_lfn+0x21>
c0002dfe:	31 c0                	xor    eax,eax
c0002e00:	e9 a4 00 00 00       	jmp    c0002ea9 <cmp_lfn+0xc5>
c0002e05:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002e07:	bd 01 00 00 00       	mov    ebp,0x1
c0002e0c:	31 c9                	xor    ecx,ecx
c0002e0e:	83 e3 3f             	and    ebx,0x3f
c0002e11:	4b                   	dec    ebx
c0002e12:	6b db 0d             	imul   ebx,ebx,0xd
c0002e15:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e19:	0f b6 81 40 f5 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd0ac0]
c0002e20:	01 f8                	add    eax,edi
c0002e22:	e8 f0 f0 ff ff       	call   c0001f17 <ld_word>
c0002e27:	66 85 ed             	test   bp,bp
c0002e2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e2e:	0f b7 f0             	movzx  esi,ax
c0002e31:	74 44                	je     c0002e77 <cmp_lfn+0x93>
c0002e33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002e37:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002e3d:	77 bf                	ja     c0002dfe <cmp_lfn+0x1a>
c0002e3f:	83 ec 0c             	sub    esp,0xc
c0002e42:	0f b7 c6             	movzx  eax,si
c0002e45:	50                   	push   eax
c0002e46:	e8 55 30 00 00       	call   c0005ea0 <ff_wtoupper>
c0002e4b:	89 c5                	mov    ebp,eax
c0002e4d:	8d 43 01             	lea    eax,[ebx+0x1]
c0002e50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002e54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e58:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002e5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0002e5f:	e8 3c 30 00 00       	call   c0005ea0 <ff_wtoupper>
c0002e64:	83 c4 10             	add    esp,0x10
c0002e67:	39 c5                	cmp    ebp,eax
c0002e69:	75 93                	jne    c0002dfe <cmp_lfn+0x1a>
c0002e6b:	89 f5                	mov    ebp,esi
c0002e6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0002e71:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002e75:	eb 0c                	jmp    c0002e83 <cmp_lfn+0x9f>
c0002e77:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002e7d:	0f 85 7b ff ff ff    	jne    c0002dfe <cmp_lfn+0x1a>
c0002e83:	41                   	inc    ecx
c0002e84:	83 f9 0d             	cmp    ecx,0xd
c0002e87:	75 8c                	jne    c0002e15 <cmp_lfn+0x31>
c0002e89:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002e8c:	74 16                	je     c0002ea4 <cmp_lfn+0xc0>
c0002e8e:	66 85 ed             	test   bp,bp
c0002e91:	74 11                	je     c0002ea4 <cmp_lfn+0xc0>
c0002e93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e97:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e9c:	0f 94 c0             	sete   al
c0002e9f:	0f b6 c0             	movzx  eax,al
c0002ea2:	eb 05                	jmp    c0002ea9 <cmp_lfn+0xc5>
c0002ea4:	b8 01 00 00 00       	mov    eax,0x1
c0002ea9:	83 c4 1c             	add    esp,0x1c
c0002eac:	5b                   	pop    ebx
c0002ead:	5e                   	pop    esi
c0002eae:	5f                   	pop    edi
c0002eaf:	5d                   	pop    ebp
c0002eb0:	c3                   	ret    

c0002eb1 <sync_fs>:
c0002eb1:	56                   	push   esi
c0002eb2:	53                   	push   ebx
c0002eb3:	53                   	push   ebx
c0002eb4:	89 c3                	mov    ebx,eax
c0002eb6:	e8 5e f5 ff ff       	call   c0002419 <sync_window>
c0002ebb:	85 c0                	test   eax,eax
c0002ebd:	0f 85 9a 00 00 00    	jne    c0002f5d <sync_fs+0xac>
c0002ec3:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002ec6:	75 7b                	jne    c0002f43 <sync_fs+0x92>
c0002ec8:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ecc:	75 75                	jne    c0002f43 <sync_fs+0x92>
c0002ece:	8d 73 34             	lea    esi,[ebx+0x34]
c0002ed1:	b9 00 02 00 00       	mov    ecx,0x200
c0002ed6:	31 d2                	xor    edx,edx
c0002ed8:	89 f0                	mov    eax,esi
c0002eda:	e8 79 f0 ff ff       	call   c0001f58 <mem_set>
c0002edf:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ee5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002eea:	e8 4d f0 ff ff       	call   c0001f3c <st_word>
c0002eef:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ef4:	89 f0                	mov    eax,esi
c0002ef6:	e8 45 f0 ff ff       	call   c0001f40 <st_dword>
c0002efb:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002f01:	ba 72 72 41 61       	mov    edx,0x61417272
c0002f06:	e8 35 f0 ff ff       	call   c0001f40 <st_dword>
c0002f0b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002f0e:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002f14:	e8 27 f0 ff ff       	call   c0001f40 <st_dword>
c0002f19:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002f1c:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002f22:	e8 19 f0 ff ff       	call   c0001f40 <st_dword>
c0002f27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002f2a:	6a 01                	push   0x1
c0002f2c:	40                   	inc    eax
c0002f2d:	50                   	push   eax
c0002f2e:	56                   	push   esi
c0002f2f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f32:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002f36:	50                   	push   eax
c0002f37:	e8 a6 ef ff ff       	call   c0001ee2 <disk_write>
c0002f3c:	83 c4 10             	add    esp,0x10
c0002f3f:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002f43:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002f47:	51                   	push   ecx
c0002f48:	6a 00                	push   0x0
c0002f4a:	6a 00                	push   0x0
c0002f4c:	50                   	push   eax
c0002f4d:	e8 a6 ef ff ff       	call   c0001ef8 <disk_ioctl>
c0002f52:	83 c4 10             	add    esp,0x10
c0002f55:	85 c0                	test   eax,eax
c0002f57:	0f 95 c0             	setne  al
c0002f5a:	0f b6 c0             	movzx  eax,al
c0002f5d:	5a                   	pop    edx
c0002f5e:	5b                   	pop    ebx
c0002f5f:	5e                   	pop    esi
c0002f60:	c3                   	ret    

c0002f61 <create_partition>:
c0002f61:	55                   	push   ebp
c0002f62:	0f b6 c0             	movzx  eax,al
c0002f65:	57                   	push   edi
c0002f66:	56                   	push   esi
c0002f67:	53                   	push   ebx
c0002f68:	83 ec 40             	sub    esp,0x40
c0002f6b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002f6f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002f73:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002f77:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f7b:	50                   	push   eax
c0002f7c:	6a 01                	push   0x1
c0002f7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f82:	e8 71 ef ff ff       	call   c0001ef8 <disk_ioctl>
c0002f87:	83 c4 10             	add    esp,0x10
c0002f8a:	85 c0                	test   eax,eax
c0002f8c:	0f 85 68 01 00 00    	jne    c00030fa <create_partition+0x199>
c0002f92:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0002f96:	b9 05 00 00 00       	mov    ecx,0x5
c0002f9b:	be 08 00 00 00       	mov    esi,0x8
c0002fa0:	89 f0                	mov    eax,esi
c0002fa2:	31 d2                	xor    edx,edx
c0002fa4:	0f b6 d8             	movzx  ebx,al
c0002fa7:	89 e8                	mov    eax,ebp
c0002fa9:	f7 f3                	div    ebx
c0002fab:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002fb0:	76 0a                	jbe    c0002fbc <create_partition+0x5b>
c0002fb2:	d1 e6                	shl    esi,1
c0002fb4:	49                   	dec    ecx
c0002fb5:	75 e9                	jne    c0002fa0 <create_partition+0x3f>
c0002fb7:	be ff ff ff ff       	mov    esi,0xffffffff
c0002fbc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc0:	b9 00 02 00 00       	mov    ecx,0x200
c0002fc5:	31 d2                	xor    edx,edx
c0002fc7:	e8 8c ef ff ff       	call   c0001f58 <mem_set>
c0002fcc:	b9 64 00 00 00       	mov    ecx,0x64
c0002fd1:	89 e8                	mov    eax,ebp
c0002fd3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002fdb:	31 d2                	xor    edx,edx
c0002fdd:	f7 f1                	div    ecx
c0002fdf:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002fe4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002fe8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fec:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ff2:	89 f0                	mov    eax,esi
c0002ff4:	0f b6 c0             	movzx  eax,al
c0002ff7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ffb:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0003000:	0f 96 c0             	setbe  al
c0003003:	31 d2                	xor    edx,edx
c0003005:	85 c9                	test   ecx,ecx
c0003007:	0f 95 c2             	setne  dl
c000300a:	85 c2                	test   edx,eax
c000300c:	0f 84 b7 00 00 00    	je     c00030c9 <create_partition+0x168>
c0003012:	39 e9                	cmp    ecx,ebp
c0003014:	0f 83 af 00 00 00    	jae    c00030c9 <create_partition+0x168>
c000301a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000301e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003022:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003025:	83 fe 64             	cmp    esi,0x64
c0003028:	77 0b                	ja     c0003035 <create_partition+0xd4>
c000302a:	74 07                	je     c0003033 <create_partition+0xd2>
c000302c:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003031:	eb 02                	jmp    c0003035 <create_partition+0xd4>
c0003033:	89 ee                	mov    esi,ebp
c0003035:	89 ca                	mov    edx,ecx
c0003037:	31 c0                	xor    eax,eax
c0003039:	01 f2                	add    edx,esi
c000303b:	0f 92 c0             	setb   al
c000303e:	39 ea                	cmp    edx,ebp
c0003040:	77 04                	ja     c0003046 <create_partition+0xe5>
c0003042:	85 c0                	test   eax,eax
c0003044:	74 06                	je     c000304c <create_partition+0xeb>
c0003046:	89 ee                	mov    esi,ebp
c0003048:	29 ce                	sub    esi,ecx
c000304a:	eb 04                	jmp    c0003050 <create_partition+0xef>
c000304c:	85 f6                	test   esi,esi
c000304e:	74 79                	je     c00030c9 <create_partition+0x168>
c0003050:	89 ca                	mov    edx,ecx
c0003052:	89 d8                	mov    eax,ebx
c0003054:	e8 e7 ee ff ff       	call   c0001f40 <st_dword>
c0003059:	8d 43 04             	lea    eax,[ebx+0x4]
c000305c:	89 f2                	mov    edx,esi
c000305e:	e8 dd ee ff ff       	call   c0001f40 <st_dword>
c0003063:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003067:	bf 3f 00 00 00       	mov    edi,0x3f
c000306c:	31 d2                	xor    edx,edx
c000306e:	83 c3 10             	add    ebx,0x10
c0003071:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003075:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0003078:	89 c8                	mov    eax,ecx
c000307a:	01 f1                	add    ecx,esi
c000307c:	f7 f7                	div    edi
c000307e:	89 d7                	mov    edi,edx
c0003080:	31 d2                	xor    edx,edx
c0003082:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003086:	47                   	inc    edi
c0003087:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c000308a:	89 c2                	mov    edx,eax
c000308c:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c000308f:	c1 ea 02             	shr    edx,0x2
c0003092:	8d 41 ff             	lea    eax,[ecx-0x1]
c0003095:	83 e2 c0             	and    edx,0xffffffc0
c0003098:	09 fa                	or     edx,edi
c000309a:	bf 3f 00 00 00       	mov    edi,0x3f
c000309f:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c00030a2:	31 d2                	xor    edx,edx
c00030a4:	f7 f7                	div    edi
c00030a6:	89 d6                	mov    esi,edx
c00030a8:	31 d2                	xor    edx,edx
c00030aa:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c00030ae:	46                   	inc    esi
c00030af:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c00030b2:	89 c7                	mov    edi,eax
c00030b4:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c00030b7:	c1 ef 02             	shr    edi,0x2
c00030ba:	83 e7 c0             	and    edi,0xffffffc0
c00030bd:	09 fe                	or     esi,edi
c00030bf:	89 f2                	mov    edx,esi
c00030c1:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00030c4:	e9 32 ff ff ff       	jmp    c0002ffb <create_partition+0x9a>
c00030c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030d2:	05 fe 01 00 00       	add    eax,0x1fe
c00030d7:	e8 60 ee ff ff       	call   c0001f3c <st_word>
c00030dc:	6a 01                	push   0x1
c00030de:	6a 00                	push   0x0
c00030e0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030e8:	e8 f5 ed ff ff       	call   c0001ee2 <disk_write>
c00030ed:	83 c4 10             	add    esp,0x10
c00030f0:	85 c0                	test   eax,eax
c00030f2:	0f 95 c0             	setne  al
c00030f5:	0f b6 c0             	movzx  eax,al
c00030f8:	eb 05                	jmp    c00030ff <create_partition+0x19e>
c00030fa:	b8 01 00 00 00       	mov    eax,0x1
c00030ff:	83 c4 3c             	add    esp,0x3c
c0003102:	5b                   	pop    ebx
c0003103:	5e                   	pop    esi
c0003104:	5f                   	pop    edi
c0003105:	5d                   	pop    ebp
c0003106:	c3                   	ret    

c0003107 <get_fileinfo>:
c0003107:	55                   	push   ebp
c0003108:	57                   	push   edi
c0003109:	56                   	push   esi
c000310a:	53                   	push   ebx
c000310b:	83 ec 1c             	sub    esp,0x1c
c000310e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003110:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0003114:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0003118:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000311c:	0f 84 de 01 00 00    	je     c0003300 <get_fileinfo+0x1f9>
c0003122:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0003126:	89 d3                	mov    ebx,edx
c0003128:	89 c6                	mov    esi,eax
c000312a:	74 7d                	je     c00031a9 <get_fileinfo+0xa2>
c000312c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003134:	31 ff                	xor    edi,edi
c0003136:	66 c7 44 24 06 00 00 	mov    WORD PTR [esp+0x6],0x0
c000313d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003141:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003145:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003148:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000314c:	85 c0                	test   eax,eax
c000314e:	89 c2                	mov    edx,eax
c0003150:	74 44                	je     c0003196 <get_fileinfo+0x8f>
c0003152:	0f b7 6c 24 06       	movzx  ebp,WORD PTR [esp+0x6]
c0003157:	85 ed                	test   ebp,ebp
c0003159:	75 0d                	jne    c0003168 <get_fileinfo+0x61>
c000315b:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003161:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003166:	76 20                	jbe    c0003188 <get_fileinfo+0x81>
c0003168:	c1 e5 10             	shl    ebp,0x10
c000316b:	b9 ff 00 00 00       	mov    ecx,0xff
c0003170:	29 f9                	sub    ecx,edi
c0003172:	09 e8                	or     eax,ebp
c0003174:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003178:	e8 f7 ee ff ff       	call   c0002074 <put_utf>
c000317d:	0f b6 c0             	movzx  eax,al
c0003180:	85 c0                	test   eax,eax
c0003182:	74 10                	je     c0003194 <get_fileinfo+0x8d>
c0003184:	01 c7                	add    edi,eax
c0003186:	31 d2                	xor    edx,edx
c0003188:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c000318d:	66 89 54 24 06       	mov    WORD PTR [esp+0x6],dx
c0003192:	eb a9                	jmp    c000313d <get_fileinfo+0x36>
c0003194:	31 ff                	xor    edi,edi
c0003196:	66 83 7c 24 06 00    	cmp    WORD PTR [esp+0x6],0x0
c000319c:	b8 00 00 00 00       	mov    eax,0x0
c00031a1:	0f 45 f8             	cmovne edi,eax
c00031a4:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c00031a9:	31 ff                	xor    edi,edi
c00031ab:	31 c9                	xor    ecx,ecx
c00031ad:	83 f9 0a             	cmp    ecx,0xa
c00031b0:	0f 87 ac 00 00 00    	ja     c0003262 <get_fileinfo+0x15b>
c00031b6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031b9:	8d 69 01             	lea    ebp,[ecx+0x1]
c00031bc:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00031c0:	83 f8 20             	cmp    eax,0x20
c00031c3:	89 c2                	mov    edx,eax
c00031c5:	0f 84 90 00 00 00    	je     c000325b <get_fileinfo+0x154>
c00031cb:	83 f8 05             	cmp    eax,0x5
c00031ce:	75 05                	jne    c00031d5 <get_fileinfo+0xce>
c00031d0:	ba e5 00 00 00       	mov    edx,0xe5
c00031d5:	83 fd 09             	cmp    ebp,0x9
c00031d8:	75 0b                	jne    c00031e5 <get_fileinfo+0xde>
c00031da:	83 ff 0b             	cmp    edi,0xb
c00031dd:	77 06                	ja     c00031e5 <get_fileinfo+0xde>
c00031df:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c00031e4:	47                   	inc    edi
c00031e5:	0f b7 c2             	movzx  eax,dx
c00031e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031ec:	e8 a5 ed ff ff       	call   c0001f96 <dbc_1st>
c00031f1:	85 c0                	test   eax,eax
c00031f3:	74 2f                	je     c0003224 <get_fileinfo+0x11d>
c00031f5:	83 fd 08             	cmp    ebp,0x8
c00031f8:	74 2a                	je     c0003224 <get_fileinfo+0x11d>
c00031fa:	83 fd 0b             	cmp    ebp,0xb
c00031fd:	74 25                	je     c0003224 <get_fileinfo+0x11d>
c00031ff:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003202:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0003206:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000320a:	e8 8a ed ff ff       	call   c0001f99 <dbc_2nd>
c000320f:	85 c0                	test   eax,eax
c0003211:	74 11                	je     c0003224 <get_fileinfo+0x11d>
c0003213:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003217:	8d 69 02             	lea    ebp,[ecx+0x2]
c000321a:	0f b6 54 24 06       	movzx  edx,BYTE PTR [esp+0x6]
c000321f:	c1 e0 08             	shl    eax,0x8
c0003222:	09 c2                	or     edx,eax
c0003224:	50                   	push   eax
c0003225:	0f b7 d2             	movzx  edx,dx
c0003228:	50                   	push   eax
c0003229:	68 b5 01 00 00       	push   0x1b5
c000322e:	52                   	push   edx
c000322f:	e8 f4 2b 00 00       	call   c0005e28 <ff_oem2uni>
c0003234:	83 c4 10             	add    esp,0x10
c0003237:	0f b7 c0             	movzx  eax,ax
c000323a:	85 c0                	test   eax,eax
c000323c:	75 04                	jne    c0003242 <get_fileinfo+0x13b>
c000323e:	31 ff                	xor    edi,edi
c0003240:	eb 20                	jmp    c0003262 <get_fileinfo+0x15b>
c0003242:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003246:	b9 0c 00 00 00       	mov    ecx,0xc
c000324b:	29 f9                	sub    ecx,edi
c000324d:	e8 22 ee ff ff       	call   c0002074 <put_utf>
c0003252:	0f b6 c0             	movzx  eax,al
c0003255:	85 c0                	test   eax,eax
c0003257:	74 e5                	je     c000323e <get_fileinfo+0x137>
c0003259:	01 c7                	add    edi,eax
c000325b:	89 e9                	mov    ecx,ebp
c000325d:	e9 4b ff ff ff       	jmp    c00031ad <get_fileinfo+0xa6>
c0003262:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003267:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000326b:	75 5f                	jne    c00032cc <get_fileinfo+0x1c5>
c000326d:	85 ff                	test   edi,edi
c000326f:	75 0b                	jne    c000327c <get_fileinfo+0x175>
c0003271:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003275:	ba 01 00 00 00       	mov    edx,0x1
c000327a:	eb 3e                	jmp    c00032ba <get_fileinfo+0x1b3>
c000327c:	bf 08 00 00 00       	mov    edi,0x8
c0003281:	31 d2                	xor    edx,edx
c0003283:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003289:	84 c0                	test   al,al
c000328b:	74 2d                	je     c00032ba <get_fileinfo+0x1b3>
c000328d:	66 83 f8 2e          	cmp    ax,0x2e
c0003291:	74 1b                	je     c00032ae <get_fileinfo+0x1a7>
c0003293:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003296:	66 83 f9 19          	cmp    cx,0x19
c000329a:	77 17                	ja     c00032b3 <get_fileinfo+0x1ac>
c000329c:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000329f:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c00032a2:	21 f9                	and    ecx,edi
c00032a4:	80 e1 18             	and    cl,0x18
c00032a7:	74 0a                	je     c00032b3 <get_fileinfo+0x1ac>
c00032a9:	83 c0 20             	add    eax,0x20
c00032ac:	eb 05                	jmp    c00032b3 <get_fileinfo+0x1ac>
c00032ae:	bf 10 00 00 00       	mov    edi,0x10
c00032b3:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c00032b7:	42                   	inc    edx
c00032b8:	eb c9                	jmp    c0003283 <get_fileinfo+0x17c>
c00032ba:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c00032bf:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032c2:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c00032c6:	75 04                	jne    c00032cc <get_fileinfo+0x1c5>
c00032c8:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00032cc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032cf:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00032d2:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00032d5:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032d8:	83 c0 1c             	add    eax,0x1c
c00032db:	e8 44 ec ff ff       	call   c0001f24 <ld_dword>
c00032e0:	89 03                	mov    DWORD PTR [ebx],eax
c00032e2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032e5:	83 c0 16             	add    eax,0x16
c00032e8:	e8 2a ec ff ff       	call   c0001f17 <ld_word>
c00032ed:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00032f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032f4:	83 c0 18             	add    eax,0x18
c00032f7:	e8 1b ec ff ff       	call   c0001f17 <ld_word>
c00032fc:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003300:	83 c4 1c             	add    esp,0x1c
c0003303:	5b                   	pop    ebx
c0003304:	5e                   	pop    esi
c0003305:	5f                   	pop    edi
c0003306:	5d                   	pop    ebp
c0003307:	c3                   	ret    

c0003308 <ld_clust.isra.0>:
c0003308:	56                   	push   esi
c0003309:	89 c6                	mov    esi,eax
c000330b:	53                   	push   ebx
c000330c:	89 d3                	mov    ebx,edx
c000330e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003311:	e8 01 ec ff ff       	call   c0001f17 <ld_word>
c0003316:	0f b7 c8             	movzx  ecx,ax
c0003319:	89 f0                	mov    eax,esi
c000331b:	3c 03                	cmp    al,0x3
c000331d:	75 0d                	jne    c000332c <ld_clust.isra.0+0x24>
c000331f:	8d 43 14             	lea    eax,[ebx+0x14]
c0003322:	e8 f0 eb ff ff       	call   c0001f17 <ld_word>
c0003327:	c1 e0 10             	shl    eax,0x10
c000332a:	09 c1                	or     ecx,eax
c000332c:	5b                   	pop    ebx
c000332d:	89 c8                	mov    eax,ecx
c000332f:	5e                   	pop    esi
c0003330:	c3                   	ret    

c0003331 <st_clust.isra.1>:
c0003331:	56                   	push   esi
c0003332:	89 c6                	mov    esi,eax
c0003334:	53                   	push   ebx
c0003335:	89 d3                	mov    ebx,edx
c0003337:	8d 43 1a             	lea    eax,[ebx+0x1a]
c000333a:	0f b7 d1             	movzx  edx,cx
c000333d:	e8 fa eb ff ff       	call   c0001f3c <st_word>
c0003342:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003345:	75 0f                	jne    c0003356 <st_clust.isra.1+0x25>
c0003347:	8d 43 14             	lea    eax,[ebx+0x14]
c000334a:	5b                   	pop    ebx
c000334b:	c1 e9 10             	shr    ecx,0x10
c000334e:	89 ca                	mov    edx,ecx
c0003350:	5e                   	pop    esi
c0003351:	e9 e6 eb ff ff       	jmp    c0001f3c <st_word>
c0003356:	5b                   	pop    ebx
c0003357:	5e                   	pop    esi
c0003358:	c3                   	ret    

c0003359 <get_fat.isra.2>:
c0003359:	83 fa 01             	cmp    edx,0x1
c000335c:	b9 01 00 00 00       	mov    ecx,0x1
c0003361:	0f 86 f4 00 00 00    	jbe    c000345b <get_fat.isra.2+0x102>
c0003367:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000336a:	0f 83 eb 00 00 00    	jae    c000345b <get_fat.isra.2+0x102>
c0003370:	55                   	push   ebp
c0003371:	57                   	push   edi
c0003372:	56                   	push   esi
c0003373:	89 c6                	mov    esi,eax
c0003375:	53                   	push   ebx
c0003376:	89 d3                	mov    ebx,edx
c0003378:	83 ec 0c             	sub    esp,0xc
c000337b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000337e:	83 f8 02             	cmp    eax,0x2
c0003381:	74 79                	je     c00033fc <get_fat.isra.2+0xa3>
c0003383:	83 f8 03             	cmp    eax,0x3
c0003386:	0f 84 97 00 00 00    	je     c0003423 <get_fat.isra.2+0xca>
c000338c:	48                   	dec    eax
c000338d:	0f 85 be 00 00 00    	jne    c0003451 <get_fat.isra.2+0xf8>
c0003393:	89 d7                	mov    edi,edx
c0003395:	89 f0                	mov    eax,esi
c0003397:	d1 ef                	shr    edi,1
c0003399:	01 d7                	add    edi,edx
c000339b:	89 fa                	mov    edx,edi
c000339d:	c1 ea 09             	shr    edx,0x9
c00033a0:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00033a3:	e8 d4 f0 ff ff       	call   c000247c <move_window>
c00033a8:	85 c0                	test   eax,eax
c00033aa:	74 08                	je     c00033b4 <get_fat.isra.2+0x5b>
c00033ac:	83 c9 ff             	or     ecx,0xffffffff
c00033af:	e9 9d 00 00 00       	jmp    c0003451 <get_fat.isra.2+0xf8>
c00033b4:	8d 6f 01             	lea    ebp,[edi+0x1]
c00033b7:	89 f0                	mov    eax,esi
c00033b9:	89 ea                	mov    edx,ebp
c00033bb:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00033c1:	c1 ea 09             	shr    edx,0x9
c00033c4:	0f b6 7c 3e 34       	movzx  edi,BYTE PTR [esi+edi*1+0x34]
c00033c9:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00033cc:	e8 ab f0 ff ff       	call   c000247c <move_window>
c00033d1:	85 c0                	test   eax,eax
c00033d3:	75 d7                	jne    c00033ac <get_fat.isra.2+0x53>
c00033d5:	89 f8                	mov    eax,edi
c00033d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00033dd:	0f b6 f8             	movzx  edi,al
c00033e0:	0f b6 44 2e 34       	movzx  eax,BYTE PTR [esi+ebp*1+0x34]
c00033e5:	c1 e0 08             	shl    eax,0x8
c00033e8:	09 f8                	or     eax,edi
c00033ea:	89 c1                	mov    ecx,eax
c00033ec:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00033f2:	80 e3 01             	and    bl,0x1
c00033f5:	74 5a                	je     c0003451 <get_fat.isra.2+0xf8>
c00033f7:	c1 e8 04             	shr    eax,0x4
c00033fa:	eb 53                	jmp    c000344f <get_fat.isra.2+0xf6>
c00033fc:	c1 ea 08             	shr    edx,0x8
c00033ff:	89 f0                	mov    eax,esi
c0003401:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0003404:	e8 73 f0 ff ff       	call   c000247c <move_window>
c0003409:	85 c0                	test   eax,eax
c000340b:	75 9f                	jne    c00033ac <get_fat.isra.2+0x53>
c000340d:	01 db                	add    ebx,ebx
c000340f:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0003415:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003419:	e8 f9 ea ff ff       	call   c0001f17 <ld_word>
c000341e:	0f b7 c8             	movzx  ecx,ax
c0003421:	eb 2e                	jmp    c0003451 <get_fat.isra.2+0xf8>
c0003423:	c1 ea 07             	shr    edx,0x7
c0003426:	89 f0                	mov    eax,esi
c0003428:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000342b:	e8 4c f0 ff ff       	call   c000247c <move_window>
c0003430:	85 c0                	test   eax,eax
c0003432:	0f 85 74 ff ff ff    	jne    c00033ac <get_fat.isra.2+0x53>
c0003438:	c1 e3 02             	shl    ebx,0x2
c000343b:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0003441:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0003445:	e8 da ea ff ff       	call   c0001f24 <ld_dword>
c000344a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000344f:	89 c1                	mov    ecx,eax
c0003451:	83 c4 0c             	add    esp,0xc
c0003454:	89 c8                	mov    eax,ecx
c0003456:	5b                   	pop    ebx
c0003457:	5e                   	pop    esi
c0003458:	5f                   	pop    edi
c0003459:	5d                   	pop    ebp
c000345a:	c3                   	ret    
c000345b:	89 c8                	mov    eax,ecx
c000345d:	c3                   	ret    

c000345e <dir_sdi>:
c000345e:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003464:	0f 87 b6 00 00 00    	ja     c0003520 <dir_sdi+0xc2>
c000346a:	55                   	push   ebp
c000346b:	57                   	push   edi
c000346c:	56                   	push   esi
c000346d:	53                   	push   ebx
c000346e:	89 d3                	mov    ebx,edx
c0003470:	83 ec 1c             	sub    esp,0x1c
c0003473:	f6 c2 1f             	test   dl,0x1f
c0003476:	74 0a                	je     c0003482 <dir_sdi+0x24>
c0003478:	b8 02 00 00 00       	mov    eax,0x2
c000347d:	e9 96 00 00 00       	jmp    c0003518 <dir_sdi+0xba>
c0003482:	89 c6                	mov    esi,eax
c0003484:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003486:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003489:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
c000348c:	85 ff                	test   edi,edi
c000348e:	75 21                	jne    c00034b1 <dir_sdi+0x53>
c0003490:	80 7d 00 02          	cmp    BYTE PTR [ebp+0x0],0x2
c0003494:	76 07                	jbe    c000349d <dir_sdi+0x3f>
c0003496:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c0003499:	85 c0                	test   eax,eax
c000349b:	75 12                	jne    c00034af <dir_sdi+0x51>
c000349d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034a1:	89 da                	mov    edx,ebx
c00034a3:	c1 ea 05             	shr    edx,0x5
c00034a6:	39 c2                	cmp    edx,eax
c00034a8:	73 ce                	jae    c0003478 <dir_sdi+0x1a>
c00034aa:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
c00034ad:	eb 3c                	jmp    c00034eb <dir_sdi+0x8d>
c00034af:	89 c7                	mov    edi,eax
c00034b1:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00034b5:	c1 e1 09             	shl    ecx,0x9
c00034b8:	39 cb                	cmp    ebx,ecx
c00034ba:	72 26                	jb     c00034e2 <dir_sdi+0x84>
c00034bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00034c0:	8b 06                	mov    eax,DWORD PTR [esi]
c00034c2:	89 fa                	mov    edx,edi
c00034c4:	e8 90 fe ff ff       	call   c0003359 <get_fat.isra.2>
c00034c9:	83 f8 ff             	cmp    eax,0xffffffff
c00034cc:	89 c7                	mov    edi,eax
c00034ce:	74 43                	je     c0003513 <dir_sdi+0xb5>
c00034d0:	83 f8 01             	cmp    eax,0x1
c00034d3:	76 a3                	jbe    c0003478 <dir_sdi+0x1a>
c00034d5:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c00034d8:	76 9e                	jbe    c0003478 <dir_sdi+0x1a>
c00034da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034de:	29 cb                	sub    ebx,ecx
c00034e0:	eb d6                	jmp    c00034b8 <dir_sdi+0x5a>
c00034e2:	89 fa                	mov    edx,edi
c00034e4:	89 e8                	mov    eax,ebp
c00034e6:	e8 82 ec ff ff       	call   c000216d <clst2sect>
c00034eb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034ee:	89 7e 14             	mov    DWORD PTR [esi+0x14],edi
c00034f1:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00034f4:	85 d2                	test   edx,edx
c00034f6:	74 80                	je     c0003478 <dir_sdi+0x1a>
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003500:	c1 e8 09             	shr    eax,0x9
c0003503:	01 d0                	add    eax,edx
c0003505:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003508:	8d 44 1d 34          	lea    eax,[ebp+ebx*1+0x34]
c000350c:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000350f:	31 c0                	xor    eax,eax
c0003511:	eb 05                	jmp    c0003518 <dir_sdi+0xba>
c0003513:	b8 01 00 00 00       	mov    eax,0x1
c0003518:	83 c4 1c             	add    esp,0x1c
c000351b:	5b                   	pop    ebx
c000351c:	5e                   	pop    esi
c000351d:	5f                   	pop    edi
c000351e:	5d                   	pop    ebp
c000351f:	c3                   	ret    
c0003520:	b8 02 00 00 00       	mov    eax,0x2
c0003525:	c3                   	ret    

c0003526 <create_chain>:
c0003526:	55                   	push   ebp
c0003527:	89 c5                	mov    ebp,eax
c0003529:	57                   	push   edi
c000352a:	89 d7                	mov    edi,edx
c000352c:	56                   	push   esi
c000352d:	53                   	push   ebx
c000352e:	83 ec 1c             	sub    esp,0x1c
c0003531:	85 d2                	test   edx,edx
c0003533:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003535:	75 0e                	jne    c0003545 <create_chain+0x1f>
c0003537:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000353a:	85 c9                	test   ecx,ecx
c000353c:	74 32                	je     c0003570 <create_chain+0x4a>
c000353e:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0003541:	77 32                	ja     c0003575 <create_chain+0x4f>
c0003543:	eb 2b                	jmp    c0003570 <create_chain+0x4a>
c0003545:	89 d8                	mov    eax,ebx
c0003547:	e8 0d fe ff ff       	call   c0003359 <get_fat.isra.2>
c000354c:	83 f8 01             	cmp    eax,0x1
c000354f:	77 0a                	ja     c000355b <create_chain+0x35>
c0003551:	b8 01 00 00 00       	mov    eax,0x1
c0003556:	e9 fd 00 00 00       	jmp    c0003658 <create_chain+0x132>
c000355b:	83 f8 ff             	cmp    eax,0xffffffff
c000355e:	0f 84 f1 00 00 00    	je     c0003655 <create_chain+0x12f>
c0003564:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003567:	89 f9                	mov    ecx,edi
c0003569:	76 0a                	jbe    c0003575 <create_chain+0x4f>
c000356b:	e9 e8 00 00 00       	jmp    c0003658 <create_chain+0x132>
c0003570:	b9 01 00 00 00       	mov    ecx,0x1
c0003575:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003579:	75 07                	jne    c0003582 <create_chain+0x5c>
c000357b:	31 c0                	xor    eax,eax
c000357d:	e9 d6 00 00 00       	jmp    c0003658 <create_chain+0x132>
c0003582:	39 f9                	cmp    ecx,edi
c0003584:	75 49                	jne    c00035cf <create_chain+0xa9>
c0003586:	8d 71 01             	lea    esi,[ecx+0x1]
c0003589:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000358c:	77 05                	ja     c0003593 <create_chain+0x6d>
c000358e:	be 02 00 00 00       	mov    esi,0x2
c0003593:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003597:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000359a:	89 f2                	mov    edx,esi
c000359c:	e8 b8 fd ff ff       	call   c0003359 <get_fat.isra.2>
c00035a1:	83 f8 01             	cmp    eax,0x1
c00035a4:	0f 84 ae 00 00 00    	je     c0003658 <create_chain+0x132>
c00035aa:	83 f8 ff             	cmp    eax,0xffffffff
c00035ad:	0f 84 a5 00 00 00    	je     c0003658 <create_chain+0x132>
c00035b3:	85 c0                	test   eax,eax
c00035b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b9:	74 10                	je     c00035cb <create_chain+0xa5>
c00035bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00035be:	83 f8 01             	cmp    eax,0x1
c00035c1:	76 0c                	jbe    c00035cf <create_chain+0xa9>
c00035c3:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c00035c6:	0f 47 c8             	cmova  ecx,eax
c00035c9:	eb 04                	jmp    c00035cf <create_chain+0xa9>
c00035cb:	85 f6                	test   esi,esi
c00035cd:	75 3b                	jne    c000360a <create_chain+0xe4>
c00035cf:	89 ce                	mov    esi,ecx
c00035d1:	46                   	inc    esi
c00035d2:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c00035d5:	77 0a                	ja     c00035e1 <create_chain+0xbb>
c00035d7:	83 f9 01             	cmp    ecx,0x1
c00035da:	76 9f                	jbe    c000357b <create_chain+0x55>
c00035dc:	be 02 00 00 00       	mov    esi,0x2
c00035e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00035e5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00035e8:	89 f2                	mov    edx,esi
c00035ea:	e8 6a fd ff ff       	call   c0003359 <get_fat.isra.2>
c00035ef:	85 c0                	test   eax,eax
c00035f1:	74 17                	je     c000360a <create_chain+0xe4>
c00035f3:	83 f8 01             	cmp    eax,0x1
c00035f6:	74 60                	je     c0003658 <create_chain+0x132>
c00035f8:	83 f8 ff             	cmp    eax,0xffffffff
c00035fb:	74 5b                	je     c0003658 <create_chain+0x132>
c00035fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003601:	39 ce                	cmp    esi,ecx
c0003603:	75 cc                	jne    c00035d1 <create_chain+0xab>
c0003605:	e9 71 ff ff ff       	jmp    c000357b <create_chain+0x55>
c000360a:	83 c9 ff             	or     ecx,0xffffffff
c000360d:	89 f2                	mov    edx,esi
c000360f:	89 d8                	mov    eax,ebx
c0003611:	e8 c0 f2 ff ff       	call   c00028d6 <put_fat>
c0003616:	85 c0                	test   eax,eax
c0003618:	75 0f                	jne    c0003629 <create_chain+0x103>
c000361a:	85 ff                	test   edi,edi
c000361c:	74 0b                	je     c0003629 <create_chain+0x103>
c000361e:	89 f1                	mov    ecx,esi
c0003620:	89 fa                	mov    edx,edi
c0003622:	89 d8                	mov    eax,ebx
c0003624:	e8 ad f2 ff ff       	call   c00028d6 <put_fat>
c0003629:	85 c0                	test   eax,eax
c000362b:	75 21                	jne    c000364e <create_chain+0x128>
c000362d:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0003630:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0003633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003636:	8d 57 fe             	lea    edx,[edi-0x2]
c0003639:	39 d0                	cmp    eax,edx
c000363b:	77 04                	ja     c0003641 <create_chain+0x11b>
c000363d:	48                   	dec    eax
c000363e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003641:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003644:	83 c8 01             	or     eax,0x1
c0003647:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000364a:	89 f0                	mov    eax,esi
c000364c:	eb 0a                	jmp    c0003658 <create_chain+0x132>
c000364e:	48                   	dec    eax
c000364f:	0f 85 fc fe ff ff    	jne    c0003551 <create_chain+0x2b>
c0003655:	83 c8 ff             	or     eax,0xffffffff
c0003658:	83 c4 1c             	add    esp,0x1c
c000365b:	5b                   	pop    ebx
c000365c:	5e                   	pop    esi
c000365d:	5f                   	pop    edi
c000365e:	5d                   	pop    ebp
c000365f:	c3                   	ret    

c0003660 <remove_chain>:
c0003660:	55                   	push   ebp
c0003661:	57                   	push   edi
c0003662:	56                   	push   esi
c0003663:	89 d6                	mov    esi,edx
c0003665:	53                   	push   ebx
c0003666:	83 ec 0c             	sub    esp,0xc
c0003669:	83 fa 01             	cmp    edx,0x1
c000366c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000366e:	76 6a                	jbe    c00036da <remove_chain+0x7a>
c0003670:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003673:	76 65                	jbe    c00036da <remove_chain+0x7a>
c0003675:	85 c9                	test   ecx,ecx
c0003677:	89 c5                	mov    ebp,eax
c0003679:	89 ca                	mov    edx,ecx
c000367b:	74 0e                	je     c000368b <remove_chain+0x2b>
c000367d:	83 c9 ff             	or     ecx,0xffffffff
c0003680:	89 d8                	mov    eax,ebx
c0003682:	e8 4f f2 ff ff       	call   c00028d6 <put_fat>
c0003687:	85 c0                	test   eax,eax
c0003689:	75 5b                	jne    c00036e6 <remove_chain+0x86>
c000368b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368e:	89 f2                	mov    edx,esi
c0003690:	e8 c4 fc ff ff       	call   c0003359 <get_fat.isra.2>
c0003695:	85 c0                	test   eax,eax
c0003697:	89 c7                	mov    edi,eax
c0003699:	75 04                	jne    c000369f <remove_chain+0x3f>
c000369b:	31 c0                	xor    eax,eax
c000369d:	eb 47                	jmp    c00036e6 <remove_chain+0x86>
c000369f:	83 f8 01             	cmp    eax,0x1
c00036a2:	74 36                	je     c00036da <remove_chain+0x7a>
c00036a4:	83 f8 ff             	cmp    eax,0xffffffff
c00036a7:	74 38                	je     c00036e1 <remove_chain+0x81>
c00036a9:	31 c9                	xor    ecx,ecx
c00036ab:	89 f2                	mov    edx,esi
c00036ad:	89 d8                	mov    eax,ebx
c00036af:	e8 22 f2 ff ff       	call   c00028d6 <put_fat>
c00036b4:	85 c0                	test   eax,eax
c00036b6:	75 2e                	jne    c00036e6 <remove_chain+0x86>
c00036b8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00036bb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00036be:	8d 4a fe             	lea    ecx,[edx-0x2]
c00036c1:	39 c8                	cmp    eax,ecx
c00036c3:	73 0d                	jae    c00036d2 <remove_chain+0x72>
c00036c5:	40                   	inc    eax
c00036c6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00036c9:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c00036cc:	83 c8 01             	or     eax,0x1
c00036cf:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c00036d2:	39 fa                	cmp    edx,edi
c00036d4:	89 fe                	mov    esi,edi
c00036d6:	77 b3                	ja     c000368b <remove_chain+0x2b>
c00036d8:	eb c1                	jmp    c000369b <remove_chain+0x3b>
c00036da:	b8 02 00 00 00       	mov    eax,0x2
c00036df:	eb 05                	jmp    c00036e6 <remove_chain+0x86>
c00036e1:	b8 01 00 00 00       	mov    eax,0x1
c00036e6:	83 c4 0c             	add    esp,0xc
c00036e9:	5b                   	pop    ebx
c00036ea:	5e                   	pop    esi
c00036eb:	5f                   	pop    edi
c00036ec:	5d                   	pop    ebp
c00036ed:	c3                   	ret    

c00036ee <dir_next>:
c00036ee:	55                   	push   ebp
c00036ef:	57                   	push   edi
c00036f0:	56                   	push   esi
c00036f1:	53                   	push   ebx
c00036f2:	83 ec 1c             	sub    esp,0x1c
c00036f5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00036f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036fa:	83 c7 20             	add    edi,0x20
c00036fd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c0003703:	76 07                	jbe    c000370c <dir_next+0x1e>
c0003705:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000370c:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c000370f:	b9 04 00 00 00       	mov    ecx,0x4
c0003714:	85 f6                	test   esi,esi
c0003716:	0f 84 cd 00 00 00    	je     c00037e9 <dir_next+0xfb>
c000371c:	89 c3                	mov    ebx,eax
c000371e:	89 f8                	mov    eax,edi
c0003720:	25 ff 01 00 00       	and    eax,0x1ff
c0003725:	89 d1                	mov    ecx,edx
c0003727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000372b:	0f 85 a8 00 00 00    	jne    c00037d9 <dir_next+0xeb>
c0003731:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003734:	46                   	inc    esi
c0003735:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003738:	85 d2                	test   edx,edx
c000373a:	75 22                	jne    c000375e <dir_next+0x70>
c000373c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003740:	89 fa                	mov    edx,edi
c0003742:	c1 ea 05             	shr    edx,0x5
c0003745:	39 c2                	cmp    edx,eax
c0003747:	0f 82 8c 00 00 00    	jb     c00037d9 <dir_next+0xeb>
c000374d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003754:	b9 04 00 00 00       	mov    ecx,0x4
c0003759:	e9 8b 00 00 00       	jmp    c00037e9 <dir_next+0xfb>
c000375e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003762:	89 fe                	mov    esi,edi
c0003764:	c1 ee 09             	shr    esi,0x9
c0003767:	48                   	dec    eax
c0003768:	85 f0                	test   eax,esi
c000376a:	75 6d                	jne    c00037d9 <dir_next+0xeb>
c000376c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003770:	89 e8                	mov    eax,ebp
c0003772:	e8 e2 fb ff ff       	call   c0003359 <get_fat.isra.2>
c0003777:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000377b:	83 f8 01             	cmp    eax,0x1
c000377e:	89 c6                	mov    esi,eax
c0003780:	77 07                	ja     c0003789 <dir_next+0x9b>
c0003782:	b9 02 00 00 00       	mov    ecx,0x2
c0003787:	eb 60                	jmp    c00037e9 <dir_next+0xfb>
c0003789:	83 f8 ff             	cmp    eax,0xffffffff
c000378c:	75 07                	jne    c0003795 <dir_next+0xa7>
c000378e:	b9 01 00 00 00       	mov    ecx,0x1
c0003793:	eb 54                	jmp    c00037e9 <dir_next+0xfb>
c0003795:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003798:	77 30                	ja     c00037ca <dir_next+0xdc>
c000379a:	85 c9                	test   ecx,ecx
c000379c:	74 af                	je     c000374d <dir_next+0x5f>
c000379e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037a1:	89 d8                	mov    eax,ebx
c00037a3:	e8 7e fd ff ff       	call   c0003526 <create_chain>
c00037a8:	b9 07 00 00 00       	mov    ecx,0x7
c00037ad:	85 c0                	test   eax,eax
c00037af:	89 c6                	mov    esi,eax
c00037b1:	74 36                	je     c00037e9 <dir_next+0xfb>
c00037b3:	83 f8 01             	cmp    eax,0x1
c00037b6:	74 ca                	je     c0003782 <dir_next+0x94>
c00037b8:	83 f8 ff             	cmp    eax,0xffffffff
c00037bb:	74 d1                	je     c000378e <dir_next+0xa0>
c00037bd:	89 c2                	mov    edx,eax
c00037bf:	89 e8                	mov    eax,ebp
c00037c1:	e8 67 f2 ff ff       	call   c0002a2d <dir_clear>
c00037c6:	85 c0                	test   eax,eax
c00037c8:	75 c4                	jne    c000378e <dir_next+0xa0>
c00037ca:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00037cd:	89 f2                	mov    edx,esi
c00037cf:	89 e8                	mov    eax,ebp
c00037d1:	e8 97 e9 ff ff       	call   c000216d <clst2sect>
c00037d6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00037d9:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00037dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037e0:	31 c9                	xor    ecx,ecx
c00037e2:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00037e6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00037e9:	83 c4 1c             	add    esp,0x1c
c00037ec:	89 c8                	mov    eax,ecx
c00037ee:	5b                   	pop    ebx
c00037ef:	5e                   	pop    esi
c00037f0:	5f                   	pop    edi
c00037f1:	5d                   	pop    ebp
c00037f2:	c3                   	ret    

c00037f3 <dir_alloc>:
c00037f3:	55                   	push   ebp
c00037f4:	89 c5                	mov    ebp,eax
c00037f6:	57                   	push   edi
c00037f7:	89 d7                	mov    edi,edx
c00037f9:	56                   	push   esi
c00037fa:	31 d2                	xor    edx,edx
c00037fc:	53                   	push   ebx
c00037fd:	83 ec 0c             	sub    esp,0xc
c0003800:	8b 30                	mov    esi,DWORD PTR [eax]
c0003802:	e8 57 fc ff ff       	call   c000345e <dir_sdi>
c0003807:	85 c0                	test   eax,eax
c0003809:	75 3b                	jne    c0003846 <dir_alloc+0x53>
c000380b:	31 db                	xor    ebx,ebx
c000380d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003810:	89 f0                	mov    eax,esi
c0003812:	e8 65 ec ff ff       	call   c000247c <move_window>
c0003817:	85 c0                	test   eax,eax
c0003819:	75 2b                	jne    c0003846 <dir_alloc+0x53>
c000381b:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c000381e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c0003821:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003827:	74 04                	je     c000382d <dir_alloc+0x3a>
c0003829:	85 d2                	test   edx,edx
c000382b:	75 07                	jne    c0003834 <dir_alloc+0x41>
c000382d:	43                   	inc    ebx
c000382e:	39 fb                	cmp    ebx,edi
c0003830:	75 04                	jne    c0003836 <dir_alloc+0x43>
c0003832:	eb 1c                	jmp    c0003850 <dir_alloc+0x5d>
c0003834:	31 db                	xor    ebx,ebx
c0003836:	ba 01 00 00 00       	mov    edx,0x1
c000383b:	89 e8                	mov    eax,ebp
c000383d:	e8 ac fe ff ff       	call   c00036ee <dir_next>
c0003842:	85 c0                	test   eax,eax
c0003844:	74 c7                	je     c000380d <dir_alloc+0x1a>
c0003846:	83 f8 04             	cmp    eax,0x4
c0003849:	75 05                	jne    c0003850 <dir_alloc+0x5d>
c000384b:	b8 07 00 00 00       	mov    eax,0x7
c0003850:	83 c4 0c             	add    esp,0xc
c0003853:	5b                   	pop    ebx
c0003854:	5e                   	pop    esi
c0003855:	5f                   	pop    edi
c0003856:	5d                   	pop    ebp
c0003857:	c3                   	ret    

c0003858 <dir_read>:
c0003858:	55                   	push   ebp
c0003859:	57                   	push   edi
c000385a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000385f:	56                   	push   esi
c0003860:	be 04 00 00 00       	mov    esi,0x4
c0003865:	53                   	push   ebx
c0003866:	89 c3                	mov    ebx,eax
c0003868:	83 ec 1c             	sub    esp,0x1c
c000386b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000386f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003871:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003876:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003879:	85 d2                	test   edx,edx
c000387b:	0f 84 e3 00 00 00    	je     c0003964 <dir_read+0x10c>
c0003881:	89 e8                	mov    eax,ebp
c0003883:	e8 f4 eb ff ff       	call   c000247c <move_window>
c0003888:	85 c0                	test   eax,eax
c000388a:	89 c6                	mov    esi,eax
c000388c:	0f 85 dd 00 00 00    	jne    c000396f <dir_read+0x117>
c0003892:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003895:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003898:	88 04 24             	mov    BYTE PTR [esp],al
c000389b:	85 c0                	test   eax,eax
c000389d:	0f 84 c7 00 00 00    	je     c000396a <dir_read+0x112>
c00038a3:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c00038a6:	83 e1 3f             	and    ecx,0x3f
c00038a9:	3d e5 00 00 00       	cmp    eax,0xe5
c00038ae:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c00038b1:	0f 84 93 00 00 00    	je     c000394a <dir_read+0xf2>
c00038b7:	83 f8 2e             	cmp    eax,0x2e
c00038ba:	0f 84 8a 00 00 00    	je     c000394a <dir_read+0xf2>
c00038c0:	0f b6 c9             	movzx  ecx,cl
c00038c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00038c7:	83 e1 df             	and    ecx,0xffffffdf
c00038ca:	83 f9 08             	cmp    ecx,0x8
c00038cd:	0f 94 c1             	sete   cl
c00038d0:	0f b6 c9             	movzx  ecx,cl
c00038d3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00038d7:	75 71                	jne    c000394a <dir_read+0xf2>
c00038d9:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c00038de:	75 4a                	jne    c000392a <dir_read+0xd2>
c00038e0:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00038e4:	74 16                	je     c00038fc <dir_read+0xa4>
c00038e6:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038e9:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00038f0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038f4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038f7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00038fa:	eb 0e                	jmp    c000390a <dir_read+0xb2>
c00038fc:	89 f9                	mov    ecx,edi
c00038fe:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003903:	0f b6 c9             	movzx  ecx,cl
c0003906:	39 c1                	cmp    ecx,eax
c0003908:	75 45                	jne    c000394f <dir_read+0xf7>
c000390a:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000390e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003913:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c0003916:	75 37                	jne    c000394f <dir_read+0xf7>
c0003918:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000391b:	e8 6a e8 ff ff       	call   c000218a <pick_lfn>
c0003920:	85 c0                	test   eax,eax
c0003922:	74 2b                	je     c000394f <dir_read+0xf7>
c0003924:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0003927:	4f                   	dec    edi
c0003928:	eb 25                	jmp    c000394f <dir_read+0xf7>
c000392a:	89 f8                	mov    eax,edi
c000392c:	84 c0                	test   al,al
c000392e:	75 11                	jne    c0003941 <dir_read+0xe9>
c0003930:	89 d0                	mov    eax,edx
c0003932:	e8 30 ea ff ff       	call   c0002367 <sum_sfn>
c0003937:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c000393b:	75 04                	jne    c0003941 <dir_read+0xe9>
c000393d:	31 f6                	xor    esi,esi
c000393f:	eb 35                	jmp    c0003976 <dir_read+0x11e>
c0003941:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003948:	eb 2c                	jmp    c0003976 <dir_read+0x11e>
c000394a:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394f:	31 d2                	xor    edx,edx
c0003951:	89 d8                	mov    eax,ebx
c0003953:	e8 96 fd ff ff       	call   c00036ee <dir_next>
c0003958:	85 c0                	test   eax,eax
c000395a:	89 c6                	mov    esi,eax
c000395c:	0f 84 14 ff ff ff    	je     c0003876 <dir_read+0x1e>
c0003962:	eb 0b                	jmp    c000396f <dir_read+0x117>
c0003964:	85 f6                	test   esi,esi
c0003966:	74 d5                	je     c000393d <dir_read+0xe5>
c0003968:	eb 05                	jmp    c000396f <dir_read+0x117>
c000396a:	be 04 00 00 00       	mov    esi,0x4
c000396f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 f0                	mov    eax,esi
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <dir_remove>:
c0003980:	57                   	push   edi
c0003981:	56                   	push   esi
c0003982:	53                   	push   ebx
c0003983:	89 c3                	mov    ebx,eax
c0003985:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003988:	8b 30                	mov    esi,DWORD PTR [eax]
c000398a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000398d:	83 fa ff             	cmp    edx,0xffffffff
c0003990:	74 09                	je     c000399b <dir_remove+0x1b>
c0003992:	e8 c7 fa ff ff       	call   c000345e <dir_sdi>
c0003997:	85 c0                	test   eax,eax
c0003999:	75 34                	jne    c00039cf <dir_remove+0x4f>
c000399b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000399e:	89 f0                	mov    eax,esi
c00039a0:	e8 d7 ea ff ff       	call   c000247c <move_window>
c00039a5:	85 c0                	test   eax,eax
c00039a7:	75 1c                	jne    c00039c5 <dir_remove+0x45>
c00039a9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00039ac:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039af:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b3:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c00039b6:	73 17                	jae    c00039cf <dir_remove+0x4f>
c00039b8:	31 d2                	xor    edx,edx
c00039ba:	89 d8                	mov    eax,ebx
c00039bc:	e8 2d fd ff ff       	call   c00036ee <dir_next>
c00039c1:	85 c0                	test   eax,eax
c00039c3:	74 d6                	je     c000399b <dir_remove+0x1b>
c00039c5:	83 f8 04             	cmp    eax,0x4
c00039c8:	75 05                	jne    c00039cf <dir_remove+0x4f>
c00039ca:	b8 02 00 00 00       	mov    eax,0x2
c00039cf:	5b                   	pop    ebx
c00039d0:	5e                   	pop    esi
c00039d1:	5f                   	pop    edi
c00039d2:	c3                   	ret    

c00039d3 <dir_find>:
c00039d3:	55                   	push   ebp
c00039d4:	31 d2                	xor    edx,edx
c00039d6:	57                   	push   edi
c00039d7:	56                   	push   esi
c00039d8:	53                   	push   ebx
c00039d9:	89 c3                	mov    ebx,eax
c00039db:	83 ec 1c             	sub    esp,0x1c
c00039de:	8b 00                	mov    eax,DWORD PTR [eax]
c00039e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039e4:	89 d8                	mov    eax,ebx
c00039e6:	e8 73 fa ff ff       	call   c000345e <dir_sdi>
c00039eb:	85 c0                	test   eax,eax
c00039ed:	89 c6                	mov    esi,eax
c00039ef:	0f 85 22 01 00 00    	jne    c0003b17 <dir_find+0x144>
c00039f5:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039fc:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003a01:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a06:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a0d:	e8 6a ea ff ff       	call   c000247c <move_window>
c0003a12:	85 c0                	test   eax,eax
c0003a14:	89 c6                	mov    esi,eax
c0003a16:	0f 85 fb 00 00 00    	jne    c0003b17 <dir_find+0x144>
c0003a1c:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0003a1f:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0003a22:	85 d2                	test   edx,edx
c0003a24:	89 d1                	mov    ecx,edx
c0003a26:	0f 84 e6 00 00 00    	je     c0003b12 <dir_find+0x13f>
c0003a2c:	8a 47 0b             	mov    al,BYTE PTR [edi+0xb]
c0003a2f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a37:	83 e0 3f             	and    eax,0x3f
c0003a3a:	81 fa e5 00 00 00    	cmp    edx,0xe5
c0003a40:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a43:	0f 84 a8 00 00 00    	je     c0003af1 <dir_find+0x11e>
c0003a49:	f6 44 24 08 08       	test   BYTE PTR [esp+0x8],0x8
c0003a4e:	0f b6 c0             	movzx  eax,al
c0003a51:	74 0b                	je     c0003a5e <dir_find+0x8b>
c0003a53:	83 f8 0f             	cmp    eax,0xf
c0003a56:	0f 85 95 00 00 00    	jne    c0003af1 <dir_find+0x11e>
c0003a5c:	eb 05                	jmp    c0003a63 <dir_find+0x90>
c0003a5e:	83 f8 0f             	cmp    eax,0xf
c0003a61:	75 62                	jne    c0003ac5 <dir_find+0xf2>
c0003a63:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003a67:	0f 85 90 00 00 00    	jne    c0003afd <dir_find+0x12a>
c0003a6d:	f6 c1 40             	test   cl,0x40
c0003a70:	74 15                	je     c0003a87 <dir_find+0xb4>
c0003a72:	8a 47 0d             	mov    al,BYTE PTR [edi+0xd]
c0003a75:	81 e1 bf 00 00 00    	and    ecx,0xbf
c0003a7b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a7f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a82:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003a85:	eb 11                	jmp    c0003a98 <dir_find+0xc5>
c0003a87:	89 e8                	mov    eax,ebp
c0003a89:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003a8e:	0f b6 d0             	movzx  edx,al
c0003a91:	0f b6 c1             	movzx  eax,cl
c0003a94:	39 c2                	cmp    edx,eax
c0003a96:	75 65                	jne    c0003afd <dir_find+0x12a>
c0003a98:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a9c:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003aa1:	3a 47 0d             	cmp    al,BYTE PTR [edi+0xd]
c0003aa4:	75 57                	jne    c0003afd <dir_find+0x12a>
c0003aa6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003aae:	89 fa                	mov    edx,edi
c0003ab0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ab3:	e8 2c f3 ff ff       	call   c0002de4 <cmp_lfn>
c0003ab8:	85 c0                	test   eax,eax
c0003aba:	74 41                	je     c0003afd <dir_find+0x12a>
c0003abc:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac0:	8d 69 ff             	lea    ebp,[ecx-0x1]
c0003ac3:	eb 38                	jmp    c0003afd <dir_find+0x12a>
c0003ac5:	89 e8                	mov    eax,ebp
c0003ac7:	84 c0                	test   al,al
c0003ac9:	75 0d                	jne    c0003ad8 <dir_find+0x105>
c0003acb:	89 f8                	mov    eax,edi
c0003acd:	e8 95 e8 ff ff       	call   c0002367 <sum_sfn>
c0003ad2:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c0003ad6:	74 3f                	je     c0003b17 <dir_find+0x144>
c0003ad8:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003adc:	75 13                	jne    c0003af1 <dir_find+0x11e>
c0003ade:	8d 53 20             	lea    edx,[ebx+0x20]
c0003ae1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae6:	89 f8                	mov    eax,edi
c0003ae8:	e8 75 e4 ff ff       	call   c0001f62 <mem_cmp>
c0003aed:	85 c0                	test   eax,eax
c0003aef:	74 26                	je     c0003b17 <dir_find+0x144>
c0003af1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003af8:	bd ff ff ff ff       	mov    ebp,0xffffffff
c0003afd:	31 d2                	xor    edx,edx
c0003aff:	89 d8                	mov    eax,ebx
c0003b01:	e8 e8 fb ff ff       	call   c00036ee <dir_next>
c0003b06:	85 c0                	test   eax,eax
c0003b08:	89 c6                	mov    esi,eax
c0003b0a:	0f 84 f6 fe ff ff    	je     c0003a06 <dir_find+0x33>
c0003b10:	eb 05                	jmp    c0003b17 <dir_find+0x144>
c0003b12:	be 04 00 00 00       	mov    esi,0x4
c0003b17:	83 c4 1c             	add    esp,0x1c
c0003b1a:	89 f0                	mov    eax,esi
c0003b1c:	5b                   	pop    ebx
c0003b1d:	5e                   	pop    esi
c0003b1e:	5f                   	pop    edi
c0003b1f:	5d                   	pop    ebp
c0003b20:	c3                   	ret    

c0003b21 <follow_path>:
c0003b21:	56                   	push   esi
c0003b22:	53                   	push   ebx
c0003b23:	89 c3                	mov    ebx,eax
c0003b25:	83 ec 14             	sub    esp,0x14
c0003b28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003b2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b32:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003b35:	83 fa 2f             	cmp    edx,0x2f
c0003b38:	75 07                	jne    c0003b41 <follow_path+0x20>
c0003b3a:	40                   	inc    eax
c0003b3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003b3f:	eb ed                	jmp    c0003b2e <follow_path+0xd>
c0003b41:	83 fa 5c             	cmp    edx,0x5c
c0003b44:	74 f4                	je     c0003b3a <follow_path+0x19>
c0003b46:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003b4d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003b50:	77 3e                	ja     c0003b90 <follow_path+0x6f>
c0003b52:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003b56:	31 d2                	xor    edx,edx
c0003b58:	89 d8                	mov    eax,ebx
c0003b5a:	e8 ff f8 ff ff       	call   c000345e <dir_sdi>
c0003b5f:	eb 57                	jmp    c0003bb8 <follow_path+0x97>
c0003b61:	89 d8                	mov    eax,ebx
c0003b63:	e8 6b fe ff ff       	call   c00039d3 <dir_find>
c0003b68:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003b6b:	85 c0                	test   eax,eax
c0003b6d:	75 32                	jne    c0003ba1 <follow_path+0x80>
c0003b6f:	80 e2 04             	and    dl,0x4
c0003b72:	75 44                	jne    c0003bb8 <follow_path+0x97>
c0003b74:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003b78:	74 39                	je     c0003bb3 <follow_path+0x92>
c0003b7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b7d:	25 ff 01 00 00       	and    eax,0x1ff
c0003b82:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003b86:	8a 06                	mov    al,BYTE PTR [esi]
c0003b88:	e8 7b f7 ff ff       	call   c0003308 <ld_clust.isra.0>
c0003b8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b90:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003b94:	89 d8                	mov    eax,ebx
c0003b96:	e8 8e ef ff ff       	call   c0002b29 <create_name>
c0003b9b:	85 c0                	test   eax,eax
c0003b9d:	74 c2                	je     c0003b61 <follow_path+0x40>
c0003b9f:	eb 17                	jmp    c0003bb8 <follow_path+0x97>
c0003ba1:	83 f8 04             	cmp    eax,0x4
c0003ba4:	75 12                	jne    c0003bb8 <follow_path+0x97>
c0003ba6:	80 e2 04             	and    dl,0x4
c0003ba9:	ba 05 00 00 00       	mov    edx,0x5
c0003bae:	0f 44 c2             	cmove  eax,edx
c0003bb1:	eb 05                	jmp    c0003bb8 <follow_path+0x97>
c0003bb3:	b8 05 00 00 00       	mov    eax,0x5
c0003bb8:	83 c4 14             	add    esp,0x14
c0003bbb:	5b                   	pop    ebx
c0003bbc:	5e                   	pop    esi
c0003bbd:	c3                   	ret    

c0003bbe <dir_register>:
c0003bbe:	55                   	push   ebp
c0003bbf:	57                   	push   edi
c0003bc0:	56                   	push   esi
c0003bc1:	be 06 00 00 00       	mov    esi,0x6
c0003bc6:	53                   	push   ebx
c0003bc7:	83 ec 2c             	sub    esp,0x2c
c0003bca:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003bcd:	80 e2 a0             	and    dl,0xa0
c0003bd0:	0f 85 66 01 00 00    	jne    c0003d3c <dir_register+0x17e>
c0003bd6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003bde:	8b 38                	mov    edi,DWORD PTR [eax]
c0003be0:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003be3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003be7:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003bec:	74 06                	je     c0003bf4 <dir_register+0x36>
c0003bee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003bf2:	eb ef                	jmp    c0003be3 <dir_register+0x25>
c0003bf4:	89 c3                	mov    ebx,eax
c0003bf6:	b9 0c 00 00 00       	mov    ecx,0xc
c0003bfb:	8d 40 20             	lea    eax,[eax+0x20]
c0003bfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c02:	89 c2                	mov    edx,eax
c0003c04:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003c08:	e8 36 e3 ff ff       	call   c0001f43 <mem_cpy>
c0003c0d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003c12:	74 48                	je     c0003c5c <dir_register+0x9e>
c0003c14:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003c18:	bd 01 00 00 00       	mov    ebp,0x1
c0003c1d:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003c20:	55                   	push   ebp
c0003c21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c25:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003c29:	e8 77 e6 ff ff       	call   c00022a5 <gen_numname>
c0003c2e:	58                   	pop    eax
c0003c2f:	89 d8                	mov    eax,ebx
c0003c31:	e8 9d fd ff ff       	call   c00039d3 <dir_find>
c0003c36:	85 c0                	test   eax,eax
c0003c38:	89 c6                	mov    esi,eax
c0003c3a:	75 10                	jne    c0003c4c <dir_register+0x8e>
c0003c3c:	45                   	inc    ebp
c0003c3d:	83 fd 64             	cmp    ebp,0x64
c0003c40:	75 db                	jne    c0003c1d <dir_register+0x5f>
c0003c42:	be 07 00 00 00       	mov    esi,0x7
c0003c47:	e9 f0 00 00 00       	jmp    c0003d3c <dir_register+0x17e>
c0003c4c:	83 f8 04             	cmp    eax,0x4
c0003c4f:	0f 85 e7 00 00 00    	jne    c0003d3c <dir_register+0x17e>
c0003c55:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003c59:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003c5c:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003c61:	bd 01 00 00 00       	mov    ebp,0x1
c0003c66:	74 13                	je     c0003c7b <dir_register+0xbd>
c0003c68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c6c:	b9 0d 00 00 00       	mov    ecx,0xd
c0003c71:	31 d2                	xor    edx,edx
c0003c73:	83 c0 0c             	add    eax,0xc
c0003c76:	f7 f1                	div    ecx
c0003c78:	8d 68 01             	lea    ebp,[eax+0x1]
c0003c7b:	89 ea                	mov    edx,ebp
c0003c7d:	89 d8                	mov    eax,ebx
c0003c7f:	e8 6f fb ff ff       	call   c00037f3 <dir_alloc>
c0003c84:	85 c0                	test   eax,eax
c0003c86:	89 c6                	mov    esi,eax
c0003c88:	0f 85 ae 00 00 00    	jne    c0003d3c <dir_register+0x17e>
c0003c8e:	4d                   	dec    ebp
c0003c8f:	74 6b                	je     c0003cfc <dir_register+0x13e>
c0003c91:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003c94:	89 e8                	mov    eax,ebp
c0003c96:	c1 e0 05             	shl    eax,0x5
c0003c99:	29 c2                	sub    edx,eax
c0003c9b:	89 d8                	mov    eax,ebx
c0003c9d:	e8 bc f7 ff ff       	call   c000345e <dir_sdi>
c0003ca2:	85 c0                	test   eax,eax
c0003ca4:	89 c6                	mov    esi,eax
c0003ca6:	0f 85 90 00 00 00    	jne    c0003d3c <dir_register+0x17e>
c0003cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003cb0:	e8 b2 e6 ff ff       	call   c0002367 <sum_sfn>
c0003cb5:	0f b6 c0             	movzx  eax,al
c0003cb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003cbc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cbf:	89 f8                	mov    eax,edi
c0003cc1:	e8 b6 e7 ff ff       	call   c000247c <move_window>
c0003cc6:	85 c0                	test   eax,eax
c0003cc8:	89 c6                	mov    esi,eax
c0003cca:	75 70                	jne    c0003d3c <dir_register+0x17e>
c0003ccc:	83 ec 0c             	sub    esp,0xc
c0003ccf:	89 e8                	mov    eax,ebp
c0003cd1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003cd4:	0f b6 c8             	movzx  ecx,al
c0003cd7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003cda:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0003cde:	e8 27 e5 ff ff       	call   c000220a <put_lfn>
c0003ce3:	31 d2                	xor    edx,edx
c0003ce5:	89 d8                	mov    eax,ebx
c0003ce7:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ceb:	e8 fe f9 ff ff       	call   c00036ee <dir_next>
c0003cf0:	83 c4 10             	add    esp,0x10
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	89 c6                	mov    esi,eax
c0003cf7:	75 43                	jne    c0003d3c <dir_register+0x17e>
c0003cf9:	4d                   	dec    ebp
c0003cfa:	75 c0                	jne    c0003cbc <dir_register+0xfe>
c0003cfc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003cff:	89 f8                	mov    eax,edi
c0003d01:	e8 76 e7 ff ff       	call   c000247c <move_window>
c0003d06:	85 c0                	test   eax,eax
c0003d08:	89 c6                	mov    esi,eax
c0003d0a:	75 30                	jne    c0003d3c <dir_register+0x17e>
c0003d0c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d0f:	b9 20 00 00 00       	mov    ecx,0x20
c0003d14:	31 d2                	xor    edx,edx
c0003d16:	e8 3d e2 ff ff       	call   c0001f58 <mem_set>
c0003d1b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003d1e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d23:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d27:	e8 17 e2 ff ff       	call   c0001f43 <mem_cpy>
c0003d2c:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003d2f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d32:	83 e0 18             	and    eax,0x18
c0003d35:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003d38:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d3c:	83 c4 2c             	add    esp,0x2c
c0003d3f:	89 f0                	mov    eax,esi
c0003d41:	5b                   	pop    ebx
c0003d42:	5e                   	pop    esi
c0003d43:	5f                   	pop    edi
c0003d44:	5d                   	pop    ebp
c0003d45:	c3                   	ret    

c0003d46 <f_mount>:
c0003d46:	53                   	push   ebx
c0003d47:	83 ec 18             	sub    esp,0x18
c0003d4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003d4e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003d52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d56:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003d5a:	e8 28 e6 ff ff       	call   c0002387 <get_ldnumber>
c0003d5f:	89 c2                	mov    edx,eax
c0003d61:	b8 0b 00 00 00       	mov    eax,0xb
c0003d66:	85 d2                	test   edx,edx
c0003d68:	78 39                	js     c0003da3 <f_mount+0x5d>
c0003d6a:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003d71:	85 c0                	test   eax,eax
c0003d73:	74 03                	je     c0003d78 <f_mount+0x32>
c0003d75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d7c:	85 c0                	test   eax,eax
c0003d7e:	74 03                	je     c0003d83 <f_mount+0x3d>
c0003d80:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d87:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003d8e:	31 c0                	xor    eax,eax
c0003d90:	84 db                	test   bl,bl
c0003d92:	74 0f                	je     c0003da3 <f_mount+0x5d>
c0003d94:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003d98:	31 c9                	xor    ecx,ecx
c0003d9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003d9e:	e8 36 e8 ff ff       	call   c00025d9 <mount_volume>
c0003da3:	83 c4 18             	add    esp,0x18
c0003da6:	5b                   	pop    ebx
c0003da7:	c3                   	ret    

c0003da8 <f_open>:
c0003da8:	55                   	push   ebp
c0003da9:	b8 09 00 00 00       	mov    eax,0x9
c0003dae:	57                   	push   edi
c0003daf:	56                   	push   esi
c0003db0:	53                   	push   ebx
c0003db1:	83 ec 5c             	sub    esp,0x5c
c0003db4:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003db8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003dbc:	85 db                	test   ebx,ebx
c0003dbe:	0f 84 9f 02 00 00    	je     c0004063 <f_open+0x2bb>
c0003dc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003dc8:	89 fd                	mov    ebp,edi
c0003dca:	83 e5 3f             	and    ebp,0x3f
c0003dcd:	89 e8                	mov    eax,ebp
c0003dcf:	89 ee                	mov    esi,ebp
c0003dd1:	0f b6 c8             	movzx  ecx,al
c0003dd4:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003dd8:	e8 fc e7 ff ff       	call   c00025d9 <mount_volume>
c0003ddd:	85 c0                	test   eax,eax
c0003ddf:	0f 85 78 02 00 00    	jne    c000405d <f_open+0x2b5>
c0003de5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003de9:	83 ec 0c             	sub    esp,0xc
c0003dec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003df0:	68 00 02 00 00       	push   0x200
c0003df5:	e8 62 1f 00 00       	call   c0005d5c <ff_memalloc>
c0003dfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003dfe:	83 c4 10             	add    esp,0x10
c0003e01:	b8 11 00 00 00       	mov    eax,0x11
c0003e06:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003e0b:	0f 84 52 02 00 00    	je     c0004063 <f_open+0x2bb>
c0003e11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e19:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003e1d:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003e20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e24:	e8 f8 fc ff ff       	call   c0003b21 <follow_path>
c0003e29:	85 c0                	test   eax,eax
c0003e2b:	75 0d                	jne    c0003e3a <f_open+0x92>
c0003e2d:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003e32:	ba 06 00 00 00       	mov    edx,0x6
c0003e37:	0f 45 c2             	cmovne eax,edx
c0003e3a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003e40:	0f 84 d5 00 00 00    	je     c0003f1b <f_open+0x173>
c0003e46:	85 c0                	test   eax,eax
c0003e48:	74 21                	je     c0003e6b <f_open+0xc3>
c0003e4a:	83 f8 04             	cmp    eax,0x4
c0003e4d:	0f 85 ef 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003e53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e57:	e8 62 fd ff ff       	call   c0003bbe <dir_register>
c0003e5c:	85 c0                	test   eax,eax
c0003e5e:	0f 85 de 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003e64:	83 cd 08             	or     ebp,0x8
c0003e67:	89 ee                	mov    esi,ebp
c0003e69:	eb 2c                	jmp    c0003e97 <f_open+0xef>
c0003e6b:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e6f:	b8 07 00 00 00       	mov    eax,0x7
c0003e74:	80 e2 11             	and    dl,0x11
c0003e77:	0f 85 c5 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003e7d:	f7 c7 04 00 00 00    	test   edi,0x4
c0003e83:	b8 08 00 00 00       	mov    eax,0x8
c0003e88:	0f 85 b4 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003e8e:	83 e7 08             	and    edi,0x8
c0003e91:	0f 84 b1 00 00 00    	je     c0003f48 <f_open+0x1a0>
c0003e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e9b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003e9f:	8a 00                	mov    al,BYTE PTR [eax]
c0003ea1:	89 ea                	mov    edx,ebp
c0003ea3:	e8 60 f4 ff ff       	call   c0003308 <ld_clust.isra.0>
c0003ea8:	ba 00 00 21 50       	mov    edx,0x50210000
c0003ead:	89 c7                	mov    edi,eax
c0003eaf:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003eb2:	e8 89 e0 ff ff       	call   c0001f40 <st_dword>
c0003eb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003ebb:	31 c9                	xor    ecx,ecx
c0003ebd:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003ec1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ec5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003ec9:	e8 63 f4 ff ff       	call   c0003331 <st_clust.isra.1>
c0003ece:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003ed2:	31 d2                	xor    edx,edx
c0003ed4:	83 c0 1c             	add    eax,0x1c
c0003ed7:	e8 64 e0 ff ff       	call   c0001f40 <st_dword>
c0003edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ee0:	85 ff                	test   edi,edi
c0003ee2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003ee6:	74 60                	je     c0003f48 <f_open+0x1a0>
c0003ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eec:	31 c9                	xor    ecx,ecx
c0003eee:	89 fa                	mov    edx,edi
c0003ef0:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003ef3:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef7:	e8 64 f7 ff ff       	call   c0003660 <remove_chain>
c0003efc:	85 c0                	test   eax,eax
c0003efe:	0f 85 3e 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003f04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f08:	89 ea                	mov    edx,ebp
c0003f0a:	4f                   	dec    edi
c0003f0b:	e8 6c e5 ff ff       	call   c000247c <move_window>
c0003f10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f14:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003f17:	85 c0                	test   eax,eax
c0003f19:	eb 27                	jmp    c0003f42 <f_open+0x19a>
c0003f1b:	85 c0                	test   eax,eax
c0003f1d:	0f 85 1f 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003f23:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f27:	b8 04 00 00 00       	mov    eax,0x4
c0003f2c:	f6 c2 10             	test   dl,0x10
c0003f2f:	0f 85 0d 01 00 00    	jne    c0004042 <f_open+0x29a>
c0003f35:	83 e7 02             	and    edi,0x2
c0003f38:	74 0e                	je     c0003f48 <f_open+0x1a0>
c0003f3a:	b8 07 00 00 00       	mov    eax,0x7
c0003f3f:	80 e2 01             	and    dl,0x1
c0003f42:	0f 85 fa 00 00 00    	jne    c0004042 <f_open+0x29a>
c0003f48:	f7 c6 08 00 00 00    	test   esi,0x8
c0003f4e:	74 03                	je     c0003f53 <f_open+0x1ab>
c0003f50:	83 ce 40             	or     esi,0x40
c0003f53:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f57:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003f5b:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003f5e:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003f61:	89 fa                	mov    edx,edi
c0003f63:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003f66:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003f69:	e8 9a f3 ff ff       	call   c0003308 <ld_clust.isra.0>
c0003f6e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003f71:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003f74:	e8 ab df ff ff       	call   c0001f24 <ld_dword>
c0003f79:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003f7c:	31 d2                	xor    edx,edx
c0003f7e:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003f80:	b9 00 02 00 00       	mov    ecx,0x200
c0003f85:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f88:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003f8c:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003f90:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003f97:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f9e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003fa2:	89 f0                	mov    eax,esi
c0003fa4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003fa7:	89 f8                	mov    eax,edi
c0003fa9:	e8 aa df ff ff       	call   c0001f58 <mem_set>
c0003fae:	83 e6 20             	and    esi,0x20
c0003fb1:	75 07                	jne    c0003fba <f_open+0x212>
c0003fb3:	31 c0                	xor    eax,eax
c0003fb5:	e9 88 00 00 00       	jmp    c0004042 <f_open+0x29a>
c0003fba:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0003fbd:	85 f6                	test   esi,esi
c0003fbf:	74 f2                	je     c0003fb3 <f_open+0x20b>
c0003fc1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003fc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fc8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003fcb:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0003fcf:	31 c0                	xor    eax,eax
c0003fd1:	c1 e5 09             	shl    ebp,0x9
c0003fd4:	85 c0                	test   eax,eax
c0003fd6:	75 23                	jne    c0003ffb <f_open+0x253>
c0003fd8:	39 ee                	cmp    esi,ebp
c0003fda:	76 1f                	jbe    c0003ffb <f_open+0x253>
c0003fdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003fde:	e8 76 f3 ff ff       	call   c0003359 <get_fat.isra.2>
c0003fe3:	89 c2                	mov    edx,eax
c0003fe5:	b8 02 00 00 00       	mov    eax,0x2
c0003fea:	83 fa 01             	cmp    edx,0x1
c0003fed:	76 08                	jbe    c0003ff7 <f_open+0x24f>
c0003fef:	31 c0                	xor    eax,eax
c0003ff1:	83 fa ff             	cmp    edx,0xffffffff
c0003ff4:	0f 94 c0             	sete   al
c0003ff7:	29 ee                	sub    esi,ebp
c0003ff9:	eb d9                	jmp    c0003fd4 <f_open+0x22c>
c0003ffb:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003ffe:	85 c0                	test   eax,eax
c0004000:	75 40                	jne    c0004042 <f_open+0x29a>
c0004002:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004008:	74 a9                	je     c0003fb3 <f_open+0x20b>
c000400a:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000400e:	89 e8                	mov    eax,ebp
c0004010:	e8 58 e1 ff ff       	call   c000216d <clst2sect>
c0004015:	89 c2                	mov    edx,eax
c0004017:	b8 02 00 00 00       	mov    eax,0x2
c000401c:	85 d2                	test   edx,edx
c000401e:	74 22                	je     c0004042 <f_open+0x29a>
c0004020:	c1 ee 09             	shr    esi,0x9
c0004023:	8d 04 16             	lea    eax,[esi+edx*1]
c0004026:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004029:	6a 01                	push   0x1
c000402b:	50                   	push   eax
c000402c:	57                   	push   edi
c000402d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0004031:	50                   	push   eax
c0004032:	e8 95 de ff ff       	call   c0001ecc <disk_read>
c0004037:	83 c4 10             	add    esp,0x10
c000403a:	85 c0                	test   eax,eax
c000403c:	0f 95 c0             	setne  al
c000403f:	0f b6 c0             	movzx  eax,al
c0004042:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004046:	83 ec 0c             	sub    esp,0xc
c0004049:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000404d:	e8 22 1d 00 00       	call   c0005d74 <ff_memfree>
c0004052:	83 c4 10             	add    esp,0x10
c0004055:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004059:	85 c0                	test   eax,eax
c000405b:	74 06                	je     c0004063 <f_open+0x2bb>
c000405d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004063:	83 c4 5c             	add    esp,0x5c
c0004066:	5b                   	pop    ebx
c0004067:	5e                   	pop    esi
c0004068:	5f                   	pop    edi
c0004069:	5d                   	pop    ebp
c000406a:	c3                   	ret    

c000406b <f_read>:
c000406b:	55                   	push   ebp
c000406c:	57                   	push   edi
c000406d:	56                   	push   esi
c000406e:	53                   	push   ebx
c000406f:	83 ec 2c             	sub    esp,0x2c
c0004072:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004076:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000407a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000407e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004082:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004088:	89 d8                	mov    eax,ebx
c000408a:	e8 44 e3 ff ff       	call   c00023d3 <validate>
c000408f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004093:	85 c0                	test   eax,eax
c0004095:	0f 85 a5 01 00 00    	jne    c0004240 <f_read+0x1d5>
c000409b:	0f b6 43 11          	movzx  eax,BYTE PTR [ebx+0x11]
c000409f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 85 95 01 00 00    	jne    c0004240 <f_read+0x1d5>
c00040ab:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c00040af:	0f 84 83 01 00 00    	je     c0004238 <f_read+0x1cd>
c00040b5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00040b8:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c00040bb:	39 f8                	cmp    eax,edi
c00040bd:	0f 46 f8             	cmovbe edi,eax
c00040c0:	85 ff                	test   edi,edi
c00040c2:	0f 84 78 01 00 00    	je     c0004240 <f_read+0x1d5>
c00040c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040cb:	a9 ff 01 00 00       	test   eax,0x1ff
c00040d0:	0f 85 2b 01 00 00    	jne    c0004201 <f_read+0x196>
c00040d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00040da:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00040de:	89 c2                	mov    edx,eax
c00040e0:	c1 ea 09             	shr    edx,0x9
c00040e3:	4d                   	dec    ebp
c00040e4:	21 d5                	and    ebp,edx
c00040e6:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00040ea:	75 42                	jne    c000412e <f_read+0xc3>
c00040ec:	85 c0                	test   eax,eax
c00040ee:	75 05                	jne    c00040f5 <f_read+0x8a>
c00040f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00040f3:	eb 0a                	jmp    c00040ff <f_read+0x94>
c00040f5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00040fa:	e8 5a f2 ff ff       	call   c0003359 <get_fat.isra.2>
c00040ff:	83 f8 01             	cmp    eax,0x1
c0004102:	77 11                	ja     c0004115 <f_read+0xaa>
c0004104:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004108:	c7 44 24 04 02 00 00 00 	mov    DWORD PTR [esp+0x4],0x2
c0004110:	e9 2b 01 00 00       	jmp    c0004240 <f_read+0x1d5>
c0004115:	83 f8 ff             	cmp    eax,0xffffffff
c0004118:	75 11                	jne    c000412b <f_read+0xc0>
c000411a:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000411e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0004126:	e9 15 01 00 00       	jmp    c0004240 <f_read+0x1d5>
c000412b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000412e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004132:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004135:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004139:	89 c8                	mov    eax,ecx
c000413b:	e8 2d e0 ff ff       	call   c000216d <clst2sect>
c0004140:	85 c0                	test   eax,eax
c0004142:	74 c0                	je     c0004104 <f_read+0x99>
c0004144:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0004148:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c000414e:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004151:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004155:	76 58                	jbe    c00041af <f_read+0x144>
c0004157:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000415b:	89 fe                	mov    esi,edi
c000415d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004161:	c1 ee 09             	shr    esi,0x9
c0004164:	01 f2                	add    edx,esi
c0004166:	39 c2                	cmp    edx,eax
c0004168:	76 06                	jbe    c0004170 <f_read+0x105>
c000416a:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000416e:	89 c6                	mov    esi,eax
c0004170:	56                   	push   esi
c0004171:	55                   	push   ebp
c0004172:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0004176:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000417a:	50                   	push   eax
c000417b:	e8 4c dd ff ff       	call   c0001ecc <disk_read>
c0004180:	83 c4 10             	add    esp,0x10
c0004183:	85 c0                	test   eax,eax
c0004185:	75 93                	jne    c000411a <f_read+0xaf>
c0004187:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000418b:	74 1d                	je     c00041aa <f_read+0x13f>
c000418d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004190:	29 e8                	sub    eax,ebp
c0004192:	39 f0                	cmp    eax,esi
c0004194:	73 14                	jae    c00041aa <f_read+0x13f>
c0004196:	c1 e0 09             	shl    eax,0x9
c0004199:	b9 00 02 00 00       	mov    ecx,0x200
c000419e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00041a2:	8d 53 28             	lea    edx,[ebx+0x28]
c00041a5:	e8 99 dd ff ff       	call   c0001f43 <mem_cpy>
c00041aa:	c1 e6 09             	shl    esi,0x9
c00041ad:	eb 75                	jmp    c0004224 <f_read+0x1b9>
c00041af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00041b2:	39 e8                	cmp    eax,ebp
c00041b4:	74 48                	je     c00041fe <f_read+0x193>
c00041b6:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041ba:	8d 73 28             	lea    esi,[ebx+0x28]
c00041bd:	74 22                	je     c00041e1 <f_read+0x176>
c00041bf:	6a 01                	push   0x1
c00041c1:	50                   	push   eax
c00041c2:	56                   	push   esi
c00041c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041c7:	50                   	push   eax
c00041c8:	e8 15 dd ff ff       	call   c0001ee2 <disk_write>
c00041cd:	83 c4 10             	add    esp,0x10
c00041d0:	85 c0                	test   eax,eax
c00041d2:	0f 85 42 ff ff ff    	jne    c000411a <f_read+0xaf>
c00041d8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00041db:	83 e0 7f             	and    eax,0x7f
c00041de:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041e1:	6a 01                	push   0x1
c00041e3:	55                   	push   ebp
c00041e4:	56                   	push   esi
c00041e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041e9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041ed:	50                   	push   eax
c00041ee:	e8 d9 dc ff ff       	call   c0001ecc <disk_read>
c00041f3:	83 c4 10             	add    esp,0x10
c00041f6:	85 c0                	test   eax,eax
c00041f8:	0f 85 1c ff ff ff    	jne    c000411a <f_read+0xaf>
c00041fe:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c0004201:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004204:	be 00 02 00 00       	mov    esi,0x200
c0004209:	25 ff 01 00 00       	and    eax,0x1ff
c000420e:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0004212:	29 c6                	sub    esi,eax
c0004214:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004218:	39 f7                	cmp    edi,esi
c000421a:	0f 46 f7             	cmovbe esi,edi
c000421d:	89 f1                	mov    ecx,esi
c000421f:	e8 1f dd ff ff       	call   c0001f43 <mem_cpy>
c0004224:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004228:	29 f7                	sub    edi,esi
c000422a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000422e:	01 30                	add    DWORD PTR [eax],esi
c0004230:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004233:	e9 88 fe ff ff       	jmp    c00040c0 <f_read+0x55>
c0004238:	c7 44 24 04 07 00 00 00 	mov    DWORD PTR [esp+0x4],0x7
c0004240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004244:	83 c4 2c             	add    esp,0x2c
c0004247:	5b                   	pop    ebx
c0004248:	5e                   	pop    esi
c0004249:	5f                   	pop    edi
c000424a:	5d                   	pop    ebp
c000424b:	c3                   	ret    

c000424c <f_write>:
c000424c:	55                   	push   ebp
c000424d:	57                   	push   edi
c000424e:	56                   	push   esi
c000424f:	53                   	push   ebx
c0004250:	83 ec 2c             	sub    esp,0x2c
c0004253:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004257:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000425b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000425f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004265:	89 d8                	mov    eax,ebx
c0004267:	e8 67 e1 ff ff       	call   c00023d3 <validate>
c000426c:	85 c0                	test   eax,eax
c000426e:	89 c7                	mov    edi,eax
c0004270:	0f 85 13 02 00 00    	jne    c0004489 <f_write+0x23d>
c0004276:	0f b6 7b 11          	movzx  edi,BYTE PTR [ebx+0x11]
c000427a:	85 ff                	test   edi,edi
c000427c:	0f 85 07 02 00 00    	jne    c0004489 <f_write+0x23d>
c0004282:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004286:	0f 84 f8 01 00 00    	je     c0004484 <f_write+0x238>
c000428c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000428f:	89 c1                	mov    ecx,eax
c0004291:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0004295:	0f 83 ed 00 00 00    	jae    c0004388 <f_write+0x13c>
c000429b:	f7 d0                	not    eax
c000429d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00042a1:	e9 e2 00 00 00       	jmp    c0004388 <f_write+0x13c>
c00042a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042a9:	a9 ff 01 00 00       	test   eax,0x1ff
c00042ae:	0f 85 9b 01 00 00    	jne    c000444f <f_write+0x203>
c00042b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00042b8:	0f b7 6a 0a          	movzx  ebp,WORD PTR [edx+0xa]
c00042bc:	89 c2                	mov    edx,eax
c00042be:	c1 ea 09             	shr    edx,0x9
c00042c1:	4d                   	dec    ebp
c00042c2:	21 d5                	and    ebp,edx
c00042c4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00042c8:	0f 84 c7 00 00 00    	je     c0004395 <f_write+0x149>
c00042ce:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00042d2:	0f 85 23 01 00 00    	jne    c00043fb <f_write+0x1af>
c00042d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042dc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042e3:	89 c8                	mov    eax,ecx
c00042e5:	e8 83 de ff ff       	call   c000216d <clst2sect>
c00042ea:	85 c0                	test   eax,eax
c00042ec:	0f 84 d3 00 00 00    	je     c00043c5 <f_write+0x179>
c00042f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00042f6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00042fe:	8d 2c 01             	lea    ebp,[ecx+eax*1]
c0004301:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004305:	0f 86 1c 01 00 00    	jbe    c0004427 <f_write+0x1db>
c000430b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000430f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004313:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0004317:	c1 ee 09             	shr    esi,0x9
c000431a:	01 f2                	add    edx,esi
c000431c:	39 c2                	cmp    edx,eax
c000431e:	76 06                	jbe    c0004326 <f_write+0xda>
c0004320:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0004324:	89 c6                	mov    esi,eax
c0004326:	56                   	push   esi
c0004327:	55                   	push   ebp
c0004328:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000432c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004330:	50                   	push   eax
c0004331:	e8 ac db ff ff       	call   c0001ee2 <disk_write>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	85 c0                	test   eax,eax
c000433b:	0f 85 97 00 00 00    	jne    c00043d8 <f_write+0x18c>
c0004341:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004344:	29 ea                	sub    edx,ebp
c0004346:	39 f2                	cmp    edx,esi
c0004348:	73 1d                	jae    c0004367 <f_write+0x11b>
c000434a:	c1 e2 09             	shl    edx,0x9
c000434d:	b9 00 02 00 00       	mov    ecx,0x200
c0004352:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004356:	8d 43 28             	lea    eax,[ebx+0x28]
c0004359:	e8 e5 db ff ff       	call   c0001f43 <mem_cpy>
c000435e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004361:	83 e0 7f             	and    eax,0x7f
c0004364:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004367:	c1 e6 09             	shl    esi,0x9
c000436a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000436e:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004372:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004376:	01 30                	add    DWORD PTR [eax],esi
c0004378:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000437b:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c000437e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004381:	0f 43 73 0c          	cmovae esi,DWORD PTR [ebx+0xc]
c0004385:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0004388:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000438d:	0f 85 13 ff ff ff    	jne    c00042a6 <f_write+0x5a>
c0004393:	eb 1d                	jmp    c00043b2 <f_write+0x166>
c0004395:	85 c0                	test   eax,eax
c0004397:	75 0b                	jne    c00043a4 <f_write+0x158>
c0004399:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000439c:	31 d2                	xor    edx,edx
c000439e:	85 c0                	test   eax,eax
c00043a0:	75 1e                	jne    c00043c0 <f_write+0x174>
c00043a2:	eb 03                	jmp    c00043a7 <f_write+0x15b>
c00043a4:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043a7:	89 d8                	mov    eax,ebx
c00043a9:	e8 78 f1 ff ff       	call   c0003526 <create_chain>
c00043ae:	85 c0                	test   eax,eax
c00043b0:	75 0e                	jne    c00043c0 <f_write+0x174>
c00043b2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b5:	83 c8 40             	or     eax,0x40
c00043b8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bb:	e9 c9 00 00 00       	jmp    c0004489 <f_write+0x23d>
c00043c0:	83 f8 01             	cmp    eax,0x1
c00043c3:	75 0e                	jne    c00043d3 <f_write+0x187>
c00043c5:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c9:	bf 02 00 00 00       	mov    edi,0x2
c00043ce:	e9 b6 00 00 00       	jmp    c0004489 <f_write+0x23d>
c00043d3:	83 f8 ff             	cmp    eax,0xffffffff
c00043d6:	75 0e                	jne    c00043e6 <f_write+0x19a>
c00043d8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043dc:	bf 01 00 00 00       	mov    edi,0x1
c00043e1:	e9 a3 00 00 00       	jmp    c0004489 <f_write+0x23d>
c00043e6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043ea:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043ed:	0f 85 db fe ff ff    	jne    c00042ce <f_write+0x82>
c00043f3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043f6:	e9 d3 fe ff ff       	jmp    c00042ce <f_write+0x82>
c00043fb:	6a 01                	push   0x1
c00043fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004400:	8d 43 28             	lea    eax,[ebx+0x28]
c0004403:	50                   	push   eax
c0004404:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004408:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000440c:	50                   	push   eax
c000440d:	e8 d0 da ff ff       	call   c0001ee2 <disk_write>
c0004412:	83 c4 10             	add    esp,0x10
c0004415:	85 c0                	test   eax,eax
c0004417:	75 bf                	jne    c00043d8 <f_write+0x18c>
c0004419:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441c:	83 e0 7f             	and    eax,0x7f
c000441f:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004422:	e9 b1 fe ff ff       	jmp    c00042d8 <f_write+0x8c>
c0004427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000442a:	74 20                	je     c000444c <f_write+0x200>
c000442c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000442f:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004432:	76 18                	jbe    c000444c <f_write+0x200>
c0004434:	6a 01                	push   0x1
c0004436:	55                   	push   ebp
c0004437:	8d 43 28             	lea    eax,[ebx+0x28]
c000443a:	50                   	push   eax
c000443b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000443f:	50                   	push   eax
c0004440:	e8 87 da ff ff       	call   c0001ecc <disk_read>
c0004445:	83 c4 10             	add    esp,0x10
c0004448:	85 c0                	test   eax,eax
c000444a:	75 8c                	jne    c00043d8 <f_write+0x18c>
c000444c:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000444f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004452:	be 00 02 00 00       	mov    esi,0x200
c0004457:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000445b:	25 ff 01 00 00       	and    eax,0x1ff
c0004460:	29 c6                	sub    esi,eax
c0004462:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
c0004466:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000446a:	0f 46 74 24 48       	cmovbe esi,DWORD PTR [esp+0x48]
c000446f:	89 f1                	mov    ecx,esi
c0004471:	e8 cd da ff ff       	call   c0001f43 <mem_cpy>
c0004476:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004479:	83 c8 80             	or     eax,0xffffff80
c000447c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000447f:	e9 e6 fe ff ff       	jmp    c000436a <f_write+0x11e>
c0004484:	bf 07 00 00 00       	mov    edi,0x7
c0004489:	83 c4 2c             	add    esp,0x2c
c000448c:	89 f8                	mov    eax,edi
c000448e:	5b                   	pop    ebx
c000448f:	5e                   	pop    esi
c0004490:	5f                   	pop    edi
c0004491:	5d                   	pop    ebp
c0004492:	c3                   	ret    

c0004493 <f_sync>:
c0004493:	56                   	push   esi
c0004494:	53                   	push   ebx
c0004495:	83 ec 14             	sub    esp,0x14
c0004498:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000449c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00044a0:	89 d8                	mov    eax,ebx
c00044a2:	e8 2c df ff ff       	call   c00023d3 <validate>
c00044a7:	85 c0                	test   eax,eax
c00044a9:	0f 85 a3 00 00 00    	jne    c0004552 <f_sync+0xbf>
c00044af:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00044b2:	f6 c2 40             	test   dl,0x40
c00044b5:	0f 84 97 00 00 00    	je     c0004552 <f_sync+0xbf>
c00044bb:	80 e2 80             	and    dl,0x80
c00044be:	74 2e                	je     c00044ee <f_sync+0x5b>
c00044c0:	6a 01                	push   0x1
c00044c2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044c5:	8d 43 28             	lea    eax,[ebx+0x28]
c00044c8:	50                   	push   eax
c00044c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00044cd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044d1:	50                   	push   eax
c00044d2:	e8 0b da ff ff       	call   c0001ee2 <disk_write>
c00044d7:	83 c4 10             	add    esp,0x10
c00044da:	89 c2                	mov    edx,eax
c00044dc:	b8 01 00 00 00       	mov    eax,0x1
c00044e1:	85 d2                	test   edx,edx
c00044e3:	75 6d                	jne    c0004552 <f_sync+0xbf>
c00044e5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044e8:	83 e0 7f             	and    eax,0x7f
c00044eb:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044ee:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00044f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044f5:	e8 82 df ff ff       	call   c000247c <move_window>
c00044fa:	85 c0                	test   eax,eax
c00044fc:	75 54                	jne    c0004552 <f_sync+0xbf>
c00044fe:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004501:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c0004504:	89 f2                	mov    edx,esi
c0004506:	83 c8 20             	or     eax,0x20
c0004509:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000450c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000450f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004511:	e8 1b ee ff ff       	call   c0003331 <st_clust.isra.1>
c0004516:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004519:	8d 46 1c             	lea    eax,[esi+0x1c]
c000451c:	e8 1f da ff ff       	call   c0001f40 <st_dword>
c0004521:	8d 46 16             	lea    eax,[esi+0x16]
c0004524:	ba 00 00 21 50       	mov    edx,0x50210000
c0004529:	e8 12 da ff ff       	call   c0001f40 <st_dword>
c000452e:	8d 46 12             	lea    eax,[esi+0x12]
c0004531:	31 d2                	xor    edx,edx
c0004533:	e8 04 da ff ff       	call   c0001f3c <st_word>
c0004538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000453c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004544:	e8 68 e9 ff ff       	call   c0002eb1 <sync_fs>
c0004549:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000454c:	83 e2 bf             	and    edx,0xffffffbf
c000454f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004552:	83 c4 14             	add    esp,0x14
c0004555:	5b                   	pop    ebx
c0004556:	5e                   	pop    esi
c0004557:	c3                   	ret    

c0004558 <f_close>:
c0004558:	53                   	push   ebx
c0004559:	83 ec 24             	sub    esp,0x24
c000455c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004560:	53                   	push   ebx
c0004561:	e8 2d ff ff ff       	call   c0004493 <f_sync>
c0004566:	83 c4 10             	add    esp,0x10
c0004569:	85 c0                	test   eax,eax
c000456b:	75 15                	jne    c0004582 <f_close+0x2a>
c000456d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004571:	89 d8                	mov    eax,ebx
c0004573:	e8 5b de ff ff       	call   c00023d3 <validate>
c0004578:	85 c0                	test   eax,eax
c000457a:	75 06                	jne    c0004582 <f_close+0x2a>
c000457c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004582:	83 c4 18             	add    esp,0x18
c0004585:	5b                   	pop    ebx
c0004586:	c3                   	ret    

c0004587 <f_lseek>:
c0004587:	55                   	push   ebp
c0004588:	57                   	push   edi
c0004589:	56                   	push   esi
c000458a:	53                   	push   ebx
c000458b:	83 ec 2c             	sub    esp,0x2c
c000458e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004592:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004596:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000459a:	89 d8                	mov    eax,ebx
c000459c:	e8 32 de ff ff       	call   c00023d3 <validate>
c00045a1:	85 c0                	test   eax,eax
c00045a3:	89 c5                	mov    ebp,eax
c00045a5:	0f 85 82 01 00 00    	jne    c000472d <f_lseek+0x1a6>
c00045ab:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c00045af:	85 ed                	test   ebp,ebp
c00045b1:	0f 85 76 01 00 00    	jne    c000472d <f_lseek+0x1a6>
c00045b7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00045ba:	39 f0                	cmp    eax,esi
c00045bc:	73 07                	jae    c00045c5 <f_lseek+0x3e>
c00045be:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00045c2:	0f 44 f0             	cmove  esi,eax
c00045c5:	85 f6                	test   esi,esi
c00045c7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00045ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00045d1:	75 07                	jne    c00045da <f_lseek+0x53>
c00045d3:	31 f6                	xor    esi,esi
c00045d5:	e9 e2 00 00 00       	jmp    c00046bc <f_lseek+0x135>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00045e2:	c1 e7 09             	shl    edi,0x9
c00045e5:	85 c9                	test   ecx,ecx
c00045e7:	74 28                	je     c0004611 <f_lseek+0x8a>
c00045e9:	31 d2                	xor    edx,edx
c00045eb:	49                   	dec    ecx
c00045ec:	8d 46 ff             	lea    eax,[esi-0x1]
c00045ef:	f7 f7                	div    edi
c00045f1:	31 d2                	xor    edx,edx
c00045f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045f7:	89 c8                	mov    eax,ecx
c00045f9:	f7 f7                	div    edi
c00045fb:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00045ff:	72 10                	jb     c0004611 <f_lseek+0x8a>
c0004601:	89 f8                	mov    eax,edi
c0004603:	f7 d8                	neg    eax
c0004605:	21 c1                	and    ecx,eax
c0004607:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000460a:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c000460d:	29 ce                	sub    esi,ecx
c000460f:	eb 3c                	jmp    c000464d <f_lseek+0xc6>
c0004611:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004614:	85 c0                	test   eax,eax
c0004616:	75 32                	jne    c000464a <f_lseek+0xc3>
c0004618:	31 d2                	xor    edx,edx
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 05 ef ff ff       	call   c0003526 <create_chain>
c0004621:	83 f8 01             	cmp    eax,0x1
c0004624:	75 0e                	jne    c0004634 <f_lseek+0xad>
c0004626:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000462a:	bd 02 00 00 00       	mov    ebp,0x2
c000462f:	e9 f9 00 00 00       	jmp    c000472d <f_lseek+0x1a6>
c0004634:	83 f8 ff             	cmp    eax,0xffffffff
c0004637:	75 0e                	jne    c0004647 <f_lseek+0xc0>
c0004639:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000463d:	bd 01 00 00 00       	mov    ebp,0x1
c0004642:	e9 e6 00 00 00       	jmp    c000472d <f_lseek+0x1a6>
c0004647:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000464a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000464d:	85 c0                	test   eax,eax
c000464f:	74 82                	je     c00045d3 <f_lseek+0x4c>
c0004651:	39 fe                	cmp    esi,edi
c0004653:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004656:	76 3d                	jbe    c0004695 <f_lseek+0x10e>
c0004658:	01 fa                	add    edx,edi
c000465a:	29 fe                	sub    esi,edi
c000465c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004660:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004663:	89 c2                	mov    edx,eax
c0004665:	74 0d                	je     c0004674 <f_lseek+0xed>
c0004667:	89 d8                	mov    eax,ebx
c0004669:	e8 b8 ee ff ff       	call   c0003526 <create_chain>
c000466e:	85 c0                	test   eax,eax
c0004670:	75 09                	jne    c000467b <f_lseek+0xf4>
c0004672:	eb 1f                	jmp    c0004693 <f_lseek+0x10c>
c0004674:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004676:	e8 de ec ff ff       	call   c0003359 <get_fat.isra.2>
c000467b:	83 f8 ff             	cmp    eax,0xffffffff
c000467e:	74 b9                	je     c0004639 <f_lseek+0xb2>
c0004680:	83 f8 01             	cmp    eax,0x1
c0004683:	76 a1                	jbe    c0004626 <f_lseek+0x9f>
c0004685:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004689:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000468c:	76 98                	jbe    c0004626 <f_lseek+0x9f>
c000468e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004691:	eb be                	jmp    c0004651 <f_lseek+0xca>
c0004693:	31 f6                	xor    esi,esi
c0004695:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004698:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c000469e:	0f 84 2f ff ff ff    	je     c00045d3 <f_lseek+0x4c>
c00046a4:	89 c2                	mov    edx,eax
c00046a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046aa:	e8 be da ff ff       	call   c000216d <clst2sect>
c00046af:	85 c0                	test   eax,eax
c00046b1:	0f 84 6f ff ff ff    	je     c0004626 <f_lseek+0x9f>
c00046b7:	c1 ee 09             	shr    esi,0x9
c00046ba:	01 c6                	add    esi,eax
c00046bc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00046bf:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00046c2:	76 0c                	jbe    c00046d0 <f_lseek+0x149>
c00046c4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00046c7:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00046ca:	83 ca 40             	or     edx,0x40
c00046cd:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00046d0:	a9 ff 01 00 00       	test   eax,0x1ff
c00046d5:	74 56                	je     c000472d <f_lseek+0x1a6>
c00046d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00046da:	39 f0                	cmp    eax,esi
c00046dc:	74 4f                	je     c000472d <f_lseek+0x1a6>
c00046de:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00046e2:	8d 7b 28             	lea    edi,[ebx+0x28]
c00046e5:	74 26                	je     c000470d <f_lseek+0x186>
c00046e7:	6a 01                	push   0x1
c00046e9:	50                   	push   eax
c00046ea:	57                   	push   edi
c00046eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046f3:	50                   	push   eax
c00046f4:	e8 e9 d7 ff ff       	call   c0001ee2 <disk_write>
c00046f9:	83 c4 10             	add    esp,0x10
c00046fc:	85 c0                	test   eax,eax
c00046fe:	0f 85 35 ff ff ff    	jne    c0004639 <f_lseek+0xb2>
c0004704:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004707:	83 e0 7f             	and    eax,0x7f
c000470a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000470d:	6a 01                	push   0x1
c000470f:	56                   	push   esi
c0004710:	57                   	push   edi
c0004711:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004715:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004719:	50                   	push   eax
c000471a:	e8 ad d7 ff ff       	call   c0001ecc <disk_read>
c000471f:	83 c4 10             	add    esp,0x10
c0004722:	85 c0                	test   eax,eax
c0004724:	0f 85 0f ff ff ff    	jne    c0004639 <f_lseek+0xb2>
c000472a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000472d:	83 c4 2c             	add    esp,0x2c
c0004730:	89 e8                	mov    eax,ebp
c0004732:	5b                   	pop    ebx
c0004733:	5e                   	pop    esi
c0004734:	5f                   	pop    edi
c0004735:	5d                   	pop    ebp
c0004736:	c3                   	ret    

c0004737 <f_opendir>:
c0004737:	56                   	push   esi
c0004738:	b8 09 00 00 00       	mov    eax,0x9
c000473d:	53                   	push   ebx
c000473e:	83 ec 24             	sub    esp,0x24
c0004741:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004745:	85 db                	test   ebx,ebx
c0004747:	0f 84 af 00 00 00    	je     c00047fc <f_opendir+0xc5>
c000474d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004751:	31 c9                	xor    ecx,ecx
c0004753:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004757:	e8 7d de ff ff       	call   c00025d9 <mount_volume>
c000475c:	85 c0                	test   eax,eax
c000475e:	0f 85 92 00 00 00    	jne    c00047f6 <f_opendir+0xbf>
c0004764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004768:	83 ec 0c             	sub    esp,0xc
c000476b:	89 03                	mov    DWORD PTR [ebx],eax
c000476d:	68 00 02 00 00       	push   0x200
c0004772:	e8 e5 15 00 00       	call   c0005d5c <ff_memalloc>
c0004777:	83 c4 10             	add    esp,0x10
c000477a:	89 c6                	mov    esi,eax
c000477c:	b8 11 00 00 00       	mov    eax,0x11
c0004781:	85 f6                	test   esi,esi
c0004783:	74 77                	je     c00047fc <f_opendir+0xc5>
c0004785:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004789:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000478d:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004790:	89 d8                	mov    eax,ebx
c0004792:	e8 8a f3 ff ff       	call   c0003b21 <follow_path>
c0004797:	85 c0                	test   eax,eax
c0004799:	75 37                	jne    c00047d2 <f_opendir+0x9b>
c000479b:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000479f:	75 1c                	jne    c00047bd <f_opendir+0x86>
c00047a1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00047a5:	b8 05 00 00 00       	mov    eax,0x5
c00047aa:	74 26                	je     c00047d2 <f_opendir+0x9b>
c00047ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b0:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00047b3:	8a 00                	mov    al,BYTE PTR [eax]
c00047b5:	e8 4e eb ff ff       	call   c0003308 <ld_clust.isra.0>
c00047ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00047bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00047c7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00047cb:	89 d8                	mov    eax,ebx
c00047cd:	e8 8c ec ff ff       	call   c000345e <dir_sdi>
c00047d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047d6:	83 ec 0c             	sub    esp,0xc
c00047d9:	56                   	push   esi
c00047da:	e8 95 15 00 00       	call   c0005d74 <ff_memfree>
c00047df:	83 c4 10             	add    esp,0x10
c00047e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047e6:	83 f8 04             	cmp    eax,0x4
c00047e9:	74 06                	je     c00047f1 <f_opendir+0xba>
c00047eb:	85 c0                	test   eax,eax
c00047ed:	74 0d                	je     c00047fc <f_opendir+0xc5>
c00047ef:	eb 05                	jmp    c00047f6 <f_opendir+0xbf>
c00047f1:	b8 05 00 00 00       	mov    eax,0x5
c00047f6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047fc:	83 c4 24             	add    esp,0x24
c00047ff:	5b                   	pop    ebx
c0004800:	5e                   	pop    esi
c0004801:	c3                   	ret    

c0004802 <f_closedir>:
c0004802:	53                   	push   ebx
c0004803:	83 ec 18             	sub    esp,0x18
c0004806:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000480a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000480e:	89 d8                	mov    eax,ebx
c0004810:	e8 be db ff ff       	call   c00023d3 <validate>
c0004815:	85 c0                	test   eax,eax
c0004817:	75 06                	jne    c000481f <f_closedir+0x1d>
c0004819:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000481f:	83 c4 18             	add    esp,0x18
c0004822:	5b                   	pop    ebx
c0004823:	c3                   	ret    

c0004824 <f_readdir>:
c0004824:	57                   	push   edi
c0004825:	56                   	push   esi
c0004826:	53                   	push   ebx
c0004827:	83 ec 20             	sub    esp,0x20
c000482a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000482e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004832:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004836:	89 d8                	mov    eax,ebx
c0004838:	e8 96 db ff ff       	call   c00023d3 <validate>
c000483d:	85 c0                	test   eax,eax
c000483f:	75 6e                	jne    c00048af <f_readdir+0x8b>
c0004841:	85 ff                	test   edi,edi
c0004843:	75 0b                	jne    c0004850 <f_readdir+0x2c>
c0004845:	31 d2                	xor    edx,edx
c0004847:	89 d8                	mov    eax,ebx
c0004849:	e8 10 ec ff ff       	call   c000345e <dir_sdi>
c000484e:	eb 5f                	jmp    c00048af <f_readdir+0x8b>
c0004850:	83 ec 0c             	sub    esp,0xc
c0004853:	68 00 02 00 00       	push   0x200
c0004858:	e8 ff 14 00 00       	call   c0005d5c <ff_memalloc>
c000485d:	83 c4 10             	add    esp,0x10
c0004860:	89 c6                	mov    esi,eax
c0004862:	b8 11 00 00 00       	mov    eax,0x11
c0004867:	85 f6                	test   esi,esi
c0004869:	74 44                	je     c00048af <f_readdir+0x8b>
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	31 d2                	xor    edx,edx
c0004871:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004874:	89 d8                	mov    eax,ebx
c0004876:	e8 dd ef ff ff       	call   c0003858 <dir_read>
c000487b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004880:	75 19                	jne    c000489b <f_readdir+0x77>
c0004882:	89 fa                	mov    edx,edi
c0004884:	89 d8                	mov    eax,ebx
c0004886:	e8 7c e8 ff ff       	call   c0003107 <get_fileinfo>
c000488b:	31 d2                	xor    edx,edx
c000488d:	89 d8                	mov    eax,ebx
c000488f:	e8 5a ee ff ff       	call   c00036ee <dir_next>
c0004894:	83 f8 04             	cmp    eax,0x4
c0004897:	75 02                	jne    c000489b <f_readdir+0x77>
c0004899:	31 c0                	xor    eax,eax
c000489b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000489f:	83 ec 0c             	sub    esp,0xc
c00048a2:	56                   	push   esi
c00048a3:	e8 cc 14 00 00       	call   c0005d74 <ff_memfree>
c00048a8:	83 c4 10             	add    esp,0x10
c00048ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048af:	83 c4 20             	add    esp,0x20
c00048b2:	5b                   	pop    ebx
c00048b3:	5e                   	pop    esi
c00048b4:	5f                   	pop    edi
c00048b5:	c3                   	ret    

c00048b6 <f_stat>:
c00048b6:	57                   	push   edi
c00048b7:	31 c9                	xor    ecx,ecx
c00048b9:	56                   	push   esi
c00048ba:	53                   	push   ebx
c00048bb:	83 ec 30             	sub    esp,0x30
c00048be:	8d 44 24 40          	lea    eax,[esp+0x40]
c00048c2:	89 e2                	mov    edx,esp
c00048c4:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00048c8:	e8 0c dd ff ff       	call   c00025d9 <mount_volume>
c00048cd:	85 c0                	test   eax,eax
c00048cf:	89 c3                	mov    ebx,eax
c00048d1:	75 59                	jne    c000492c <f_stat+0x76>
c00048d3:	83 ec 0c             	sub    esp,0xc
c00048d6:	bb 11 00 00 00       	mov    ebx,0x11
c00048db:	68 00 02 00 00       	push   0x200
c00048e0:	e8 77 14 00 00       	call   c0005d5c <ff_memalloc>
c00048e5:	83 c4 10             	add    esp,0x10
c00048e8:	85 c0                	test   eax,eax
c00048ea:	89 c6                	mov    esi,eax
c00048ec:	74 3e                	je     c000492c <f_stat+0x76>
c00048ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048f1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00048f5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048f8:	89 e0                	mov    eax,esp
c00048fa:	e8 22 f2 ff ff       	call   c0003b21 <follow_path>
c00048ff:	85 c0                	test   eax,eax
c0004901:	89 c3                	mov    ebx,eax
c0004903:	75 1b                	jne    c0004920 <f_stat+0x6a>
c0004905:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c000490a:	75 0f                	jne    c000491b <f_stat+0x65>
c000490c:	85 ff                	test   edi,edi
c000490e:	74 10                	je     c0004920 <f_stat+0x6a>
c0004910:	89 fa                	mov    edx,edi
c0004912:	89 e0                	mov    eax,esp
c0004914:	e8 ee e7 ff ff       	call   c0003107 <get_fileinfo>
c0004919:	eb 05                	jmp    c0004920 <f_stat+0x6a>
c000491b:	bb 06 00 00 00       	mov    ebx,0x6
c0004920:	83 ec 0c             	sub    esp,0xc
c0004923:	56                   	push   esi
c0004924:	e8 4b 14 00 00       	call   c0005d74 <ff_memfree>
c0004929:	83 c4 10             	add    esp,0x10
c000492c:	83 c4 30             	add    esp,0x30
c000492f:	89 d8                	mov    eax,ebx
c0004931:	5b                   	pop    ebx
c0004932:	5e                   	pop    esi
c0004933:	5f                   	pop    edi
c0004934:	c3                   	ret    

c0004935 <f_getfree>:
c0004935:	55                   	push   ebp
c0004936:	31 c9                	xor    ecx,ecx
c0004938:	57                   	push   edi
c0004939:	56                   	push   esi
c000493a:	53                   	push   ebx
c000493b:	83 ec 2c             	sub    esp,0x2c
c000493e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004942:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004946:	e8 8e dc ff ff       	call   c00025d9 <mount_volume>
c000494b:	85 c0                	test   eax,eax
c000494d:	89 c6                	mov    esi,eax
c000494f:	0f 85 df 00 00 00    	jne    c0004a34 <f_getfree+0xff>
c0004955:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0004959:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000495d:	89 18                	mov    DWORD PTR [eax],ebx
c000495f:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0004962:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004965:	8d 57 fe             	lea    edx,[edi-0x2]
c0004968:	39 d0                	cmp    eax,edx
c000496a:	77 0b                	ja     c0004977 <f_getfree+0x42>
c000496c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004970:	89 01                	mov    DWORD PTR [ecx],eax
c0004972:	e9 bd 00 00 00       	jmp    c0004a34 <f_getfree+0xff>
c0004977:	80 3b 01             	cmp    BYTE PTR [ebx],0x1
c000497a:	75 29                	jne    c00049a5 <f_getfree+0x70>
c000497c:	bf 02 00 00 00       	mov    edi,0x2
c0004981:	31 ed                	xor    ebp,ebp
c0004983:	89 fa                	mov    edx,edi
c0004985:	89 d8                	mov    eax,ebx
c0004987:	e8 cd e9 ff ff       	call   c0003359 <get_fat.isra.2>
c000498c:	83 f8 ff             	cmp    eax,0xffffffff
c000498f:	74 7d                	je     c0004a0e <f_getfree+0xd9>
c0004991:	83 f8 01             	cmp    eax,0x1
c0004994:	74 7f                	je     c0004a15 <f_getfree+0xe0>
c0004996:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000499a:	83 d5 00             	adc    ebp,0x0
c000499d:	47                   	inc    edi
c000499e:	39 78 18             	cmp    DWORD PTR [eax+0x18],edi
c00049a1:	77 e0                	ja     c0004983 <f_getfree+0x4e>
c00049a3:	eb 79                	jmp    c0004a1e <f_getfree+0xe9>
c00049a5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00049a8:	31 ed                	xor    ebp,ebp
c00049aa:	31 db                	xor    ebx,ebx
c00049ac:	85 db                	test   ebx,ebx
c00049ae:	75 18                	jne    c00049c8 <f_getfree+0x93>
c00049b0:	8d 42 01             	lea    eax,[edx+0x1]
c00049b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049bb:	e8 bc da ff ff       	call   c000247c <move_window>
c00049c0:	85 c0                	test   eax,eax
c00049c2:	75 58                	jne    c0004a1c <f_getfree+0xe7>
c00049c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00049c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00049cc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00049d0:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00049d3:	8d 44 19 34          	lea    eax,[ecx+ebx*1+0x34]
c00049d7:	75 13                	jne    c00049ec <f_getfree+0xb7>
c00049d9:	e8 39 d5 ff ff       	call   c0001f17 <ld_word>
c00049de:	0f b7 c0             	movzx  eax,ax
c00049e1:	83 f8 01             	cmp    eax,0x1
c00049e4:	83 d5 00             	adc    ebp,0x0
c00049e7:	83 c3 02             	add    ebx,0x2
c00049ea:	eb 13                	jmp    c00049ff <f_getfree+0xca>
c00049ec:	e8 33 d5 ff ff       	call   c0001f24 <ld_dword>
c00049f1:	25 ff ff ff 0f       	and    eax,0xfffffff
c00049f6:	83 f8 01             	cmp    eax,0x1
c00049f9:	83 d5 00             	adc    ebp,0x0
c00049fc:	83 c3 04             	add    ebx,0x4
c00049ff:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0004a05:	4f                   	dec    edi
c0004a06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a0a:	75 a0                	jne    c00049ac <f_getfree+0x77>
c0004a0c:	eb 10                	jmp    c0004a1e <f_getfree+0xe9>
c0004a0e:	be 01 00 00 00       	mov    esi,0x1
c0004a13:	eb 09                	jmp    c0004a1e <f_getfree+0xe9>
c0004a15:	be 02 00 00 00       	mov    esi,0x2
c0004a1a:	eb 02                	jmp    c0004a1e <f_getfree+0xe9>
c0004a1c:	89 c6                	mov    esi,eax
c0004a1e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004a22:	89 28                	mov    DWORD PTR [eax],ebp
c0004a24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a28:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
c0004a2b:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004a2e:	83 ca 01             	or     edx,0x1
c0004a31:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004a34:	83 c4 2c             	add    esp,0x2c
c0004a37:	89 f0                	mov    eax,esi
c0004a39:	5b                   	pop    ebx
c0004a3a:	5e                   	pop    esi
c0004a3b:	5f                   	pop    edi
c0004a3c:	5d                   	pop    ebp
c0004a3d:	c3                   	ret    

c0004a3e <f_truncate>:
c0004a3e:	56                   	push   esi
c0004a3f:	53                   	push   ebx
c0004a40:	83 ec 14             	sub    esp,0x14
c0004a43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a47:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a4b:	89 d8                	mov    eax,ebx
c0004a4d:	e8 81 d9 ff ff       	call   c00023d3 <validate>
c0004a52:	85 c0                	test   eax,eax
c0004a54:	89 c6                	mov    esi,eax
c0004a56:	0f 85 c4 00 00 00    	jne    c0004b20 <f_truncate+0xe2>
c0004a5c:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004a60:	85 f6                	test   esi,esi
c0004a62:	0f 85 b8 00 00 00    	jne    c0004b20 <f_truncate+0xe2>
c0004a68:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004a6c:	0f 84 a9 00 00 00    	je     c0004b1b <f_truncate+0xdd>
c0004a72:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a75:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004a78:	0f 83 a2 00 00 00    	jae    c0004b20 <f_truncate+0xe2>
c0004a7e:	85 c0                	test   eax,eax
c0004a80:	75 15                	jne    c0004a97 <f_truncate+0x59>
c0004a82:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004a85:	31 c9                	xor    ecx,ecx
c0004a87:	89 d8                	mov    eax,ebx
c0004a89:	e8 d2 eb ff ff       	call   c0003660 <remove_chain>
c0004a8e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004a95:	eb 35                	jmp    c0004acc <f_truncate+0x8e>
c0004a97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004a9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004a9c:	e8 b8 e8 ff ff       	call   c0003359 <get_fat.isra.2>
c0004aa1:	89 c2                	mov    edx,eax
c0004aa3:	b8 01 00 00 00       	mov    eax,0x1
c0004aa8:	83 fa ff             	cmp    edx,0xffffffff
c0004aab:	74 1f                	je     c0004acc <f_truncate+0x8e>
c0004aad:	83 fa 01             	cmp    edx,0x1
c0004ab0:	b8 02 00 00 00       	mov    eax,0x2
c0004ab5:	74 15                	je     c0004acc <f_truncate+0x8e>
c0004ab7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004abb:	31 c0                	xor    eax,eax
c0004abd:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004ac0:	76 0a                	jbe    c0004acc <f_truncate+0x8e>
c0004ac2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004ac5:	89 d8                	mov    eax,ebx
c0004ac7:	e8 94 eb ff ff       	call   c0003660 <remove_chain>
c0004acc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004acf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004ad2:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004ad5:	83 ca 40             	or     edx,0x40
c0004ad8:	85 c0                	test   eax,eax
c0004ada:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004add:	75 35                	jne    c0004b14 <f_truncate+0xd6>
c0004adf:	80 e2 80             	and    dl,0x80
c0004ae2:	74 3c                	je     c0004b20 <f_truncate+0xe2>
c0004ae4:	6a 01                	push   0x1
c0004ae6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ae9:	8d 43 28             	lea    eax,[ebx+0x28]
c0004aec:	50                   	push   eax
c0004aed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004af1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004af5:	50                   	push   eax
c0004af6:	e8 e7 d3 ff ff       	call   c0001ee2 <disk_write>
c0004afb:	83 c4 10             	add    esp,0x10
c0004afe:	85 c0                	test   eax,eax
c0004b00:	75 0d                	jne    c0004b0f <f_truncate+0xd1>
c0004b02:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004b05:	31 f6                	xor    esi,esi
c0004b07:	83 e0 7f             	and    eax,0x7f
c0004b0a:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004b0d:	eb 11                	jmp    c0004b20 <f_truncate+0xe2>
c0004b0f:	b8 01 00 00 00       	mov    eax,0x1
c0004b14:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004b17:	89 c6                	mov    esi,eax
c0004b19:	eb 05                	jmp    c0004b20 <f_truncate+0xe2>
c0004b1b:	be 07 00 00 00       	mov    esi,0x7
c0004b20:	83 c4 14             	add    esp,0x14
c0004b23:	89 f0                	mov    eax,esi
c0004b25:	5b                   	pop    ebx
c0004b26:	5e                   	pop    esi
c0004b27:	c3                   	ret    

c0004b28 <f_unlink>:
c0004b28:	55                   	push   ebp
c0004b29:	b9 02 00 00 00       	mov    ecx,0x2
c0004b2e:	57                   	push   edi
c0004b2f:	56                   	push   esi
c0004b30:	53                   	push   ebx
c0004b31:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004b37:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b3b:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004b42:	e8 92 da ff ff       	call   c00025d9 <mount_volume>
c0004b47:	85 c0                	test   eax,eax
c0004b49:	0f 85 ee 00 00 00    	jne    c0004c3d <f_unlink+0x115>
c0004b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b53:	83 ec 0c             	sub    esp,0xc
c0004b56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b5a:	68 00 02 00 00       	push   0x200
c0004b5f:	e8 f8 11 00 00       	call   c0005d5c <ff_memalloc>
c0004b64:	83 c4 10             	add    esp,0x10
c0004b67:	89 c3                	mov    ebx,eax
c0004b69:	b8 11 00 00 00       	mov    eax,0x11
c0004b6e:	85 db                	test   ebx,ebx
c0004b70:	0f 84 c7 00 00 00    	je     c0004c3d <f_unlink+0x115>
c0004b76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7a:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004b81:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004b84:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b88:	e8 94 ef ff ff       	call   c0003b21 <follow_path>
c0004b8d:	85 c0                	test   eax,eax
c0004b8f:	0f 85 94 00 00 00    	jne    c0004c29 <f_unlink+0x101>
c0004b95:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004b9a:	b8 06 00 00 00       	mov    eax,0x6
c0004b9f:	0f 85 84 00 00 00    	jne    c0004c29 <f_unlink+0x101>
c0004ba5:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004baa:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004bb0:	74 07                	je     c0004bb9 <f_unlink+0x91>
c0004bb2:	b8 07 00 00 00       	mov    eax,0x7
c0004bb7:	eb 70                	jmp    c0004c29 <f_unlink+0x101>
c0004bb9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004bbd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004bc1:	8a 07                	mov    al,BYTE PTR [edi]
c0004bc3:	e8 40 e7 ff ff       	call   c0003308 <ld_clust.isra.0>
c0004bc8:	83 e5 10             	and    ebp,0x10
c0004bcb:	89 c6                	mov    esi,eax
c0004bcd:	75 20                	jne    c0004bef <f_unlink+0xc7>
c0004bcf:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bd3:	e8 a8 ed ff ff       	call   c0003980 <dir_remove>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	75 40                	jne    c0004c1c <f_unlink+0xf4>
c0004bdc:	85 f6                	test   esi,esi
c0004bde:	74 3c                	je     c0004c1c <f_unlink+0xf4>
c0004be0:	31 c9                	xor    ecx,ecx
c0004be2:	89 f2                	mov    edx,esi
c0004be4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004be8:	e8 73 ea ff ff       	call   c0003660 <remove_chain>
c0004bed:	eb 2d                	jmp    c0004c1c <f_unlink+0xf4>
c0004bef:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004bf3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bf7:	31 d2                	xor    edx,edx
c0004bf9:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004bfd:	e8 5c e8 ff ff       	call   c000345e <dir_sdi>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	75 23                	jne    c0004c29 <f_unlink+0x101>
c0004c06:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004c0a:	31 d2                	xor    edx,edx
c0004c0c:	e8 47 ec ff ff       	call   c0003858 <dir_read>
c0004c11:	85 c0                	test   eax,eax
c0004c13:	74 9d                	je     c0004bb2 <f_unlink+0x8a>
c0004c15:	83 f8 04             	cmp    eax,0x4
c0004c18:	75 0f                	jne    c0004c29 <f_unlink+0x101>
c0004c1a:	eb b3                	jmp    c0004bcf <f_unlink+0xa7>
c0004c1c:	85 c0                	test   eax,eax
c0004c1e:	75 09                	jne    c0004c29 <f_unlink+0x101>
c0004c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c24:	e8 88 e2 ff ff       	call   c0002eb1 <sync_fs>
c0004c29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c2d:	83 ec 0c             	sub    esp,0xc
c0004c30:	53                   	push   ebx
c0004c31:	e8 3e 11 00 00       	call   c0005d74 <ff_memfree>
c0004c36:	83 c4 10             	add    esp,0x10
c0004c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3d:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004c43:	5b                   	pop    ebx
c0004c44:	5e                   	pop    esi
c0004c45:	5f                   	pop    edi
c0004c46:	5d                   	pop    ebp
c0004c47:	c3                   	ret    

c0004c48 <f_mkdir>:
c0004c48:	57                   	push   edi
c0004c49:	b9 02 00 00 00       	mov    ecx,0x2
c0004c4e:	56                   	push   esi
c0004c4f:	53                   	push   ebx
c0004c50:	83 ec 50             	sub    esp,0x50
c0004c53:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c57:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c5b:	e8 79 d9 ff ff       	call   c00025d9 <mount_volume>
c0004c60:	85 c0                	test   eax,eax
c0004c62:	89 c3                	mov    ebx,eax
c0004c64:	0f 85 70 01 00 00    	jne    c0004dda <f_mkdir+0x192>
c0004c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c6e:	83 ec 0c             	sub    esp,0xc
c0004c71:	bb 11 00 00 00       	mov    ebx,0x11
c0004c76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c7a:	68 00 02 00 00       	push   0x200
c0004c7f:	e8 d8 10 00 00       	call   c0005d5c <ff_memalloc>
c0004c84:	83 c4 10             	add    esp,0x10
c0004c87:	85 c0                	test   eax,eax
c0004c89:	89 c7                	mov    edi,eax
c0004c8b:	0f 84 49 01 00 00    	je     c0004dda <f_mkdir+0x192>
c0004c91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c95:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c99:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004c9c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ca0:	e8 7c ee ff ff       	call   c0003b21 <follow_path>
c0004ca5:	85 c0                	test   eax,eax
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	74 3e                	je     c0004ce9 <f_mkdir+0xa1>
c0004cab:	83 f8 04             	cmp    eax,0x4
c0004cae:	75 3e                	jne    c0004cee <f_mkdir+0xa6>
c0004cb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cb4:	31 d2                	xor    edx,edx
c0004cb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004cba:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004cbe:	e8 63 e8 ff ff       	call   c0003526 <create_chain>
c0004cc3:	85 c0                	test   eax,eax
c0004cc5:	89 c6                	mov    esi,eax
c0004cc7:	74 0c                	je     c0004cd5 <f_mkdir+0x8d>
c0004cc9:	83 f8 01             	cmp    eax,0x1
c0004ccc:	bb 02 00 00 00       	mov    ebx,0x2
c0004cd1:	74 07                	je     c0004cda <f_mkdir+0x92>
c0004cd3:	eb 2a                	jmp    c0004cff <f_mkdir+0xb7>
c0004cd5:	bb 07 00 00 00       	mov    ebx,0x7
c0004cda:	31 c9                	xor    ecx,ecx
c0004cdc:	89 f2                	mov    edx,esi
c0004cde:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004ce2:	e8 79 e9 ff ff       	call   c0003660 <remove_chain>
c0004ce7:	eb 05                	jmp    c0004cee <f_mkdir+0xa6>
c0004ce9:	bb 08 00 00 00       	mov    ebx,0x8
c0004cee:	83 ec 0c             	sub    esp,0xc
c0004cf1:	57                   	push   edi
c0004cf2:	e8 7d 10 00 00       	call   c0005d74 <ff_memfree>
c0004cf7:	83 c4 10             	add    esp,0x10
c0004cfa:	e9 db 00 00 00       	jmp    c0004dda <f_mkdir+0x192>
c0004cff:	83 f8 ff             	cmp    eax,0xffffffff
c0004d02:	bb 01 00 00 00       	mov    ebx,0x1
c0004d07:	74 d1                	je     c0004cda <f_mkdir+0x92>
c0004d09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d0d:	89 f2                	mov    edx,esi
c0004d0f:	e8 19 dd ff ff       	call   c0002a2d <dir_clear>
c0004d14:	85 c0                	test   eax,eax
c0004d16:	89 c3                	mov    ebx,eax
c0004d18:	75 c0                	jne    c0004cda <f_mkdir+0x92>
c0004d1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d1e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004d23:	ba 20 00 00 00       	mov    edx,0x20
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 28 d2 ff ff       	call   c0001f58 <mem_set>
c0004d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d34:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d39:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004d3d:	83 c0 4a             	add    eax,0x4a
c0004d40:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004d44:	e8 f7 d1 ff ff       	call   c0001f40 <st_dword>
c0004d49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d4d:	89 f1                	mov    ecx,esi
c0004d4f:	8d 50 34             	lea    edx,[eax+0x34]
c0004d52:	e8 da e5 ff ff       	call   c0003331 <st_clust.isra.1>
c0004d57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d5b:	b9 20 00 00 00       	mov    ecx,0x20
c0004d60:	8d 50 34             	lea    edx,[eax+0x34]
c0004d63:	83 c0 54             	add    eax,0x54
c0004d66:	e8 d8 d1 ff ff       	call   c0001f43 <mem_cpy>
c0004d6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004d73:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004d77:	8d 50 54             	lea    edx,[eax+0x54]
c0004d7a:	e8 b2 e5 ff ff       	call   c0003331 <st_clust.isra.1>
c0004d7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d87:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d8b:	e8 2e ee ff ff       	call   c0003bbe <dir_register>
c0004d90:	85 c0                	test   eax,eax
c0004d92:	89 c3                	mov    ebx,eax
c0004d94:	0f 85 40 ff ff ff    	jne    c0004cda <f_mkdir+0x92>
c0004d9a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d9e:	ba 00 00 21 50       	mov    edx,0x50210000
c0004da3:	83 c0 16             	add    eax,0x16
c0004da6:	e8 95 d1 ff ff       	call   c0001f40 <st_dword>
c0004dab:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004daf:	89 f1                	mov    ecx,esi
c0004db1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004db5:	e8 77 e5 ff ff       	call   c0003331 <st_clust.isra.1>
c0004dba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004dbe:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004dca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dce:	e8 de e0 ff ff       	call   c0002eb1 <sync_fs>
c0004dd3:	89 c3                	mov    ebx,eax
c0004dd5:	e9 14 ff ff ff       	jmp    c0004cee <f_mkdir+0xa6>
c0004dda:	83 c4 50             	add    esp,0x50
c0004ddd:	89 d8                	mov    eax,ebx
c0004ddf:	5b                   	pop    ebx
c0004de0:	5e                   	pop    esi
c0004de1:	5f                   	pop    edi
c0004de2:	c3                   	ret    

c0004de3 <f_rename>:
c0004de3:	57                   	push   edi
c0004de4:	56                   	push   esi
c0004de5:	53                   	push   ebx
c0004de6:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004dec:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004df3:	e8 8f d5 ff ff       	call   c0002387 <get_ldnumber>
c0004df8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dfc:	b9 02 00 00 00       	mov    ecx,0x2
c0004e01:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004e08:	e8 cc d7 ff ff       	call   c00025d9 <mount_volume>
c0004e0d:	85 c0                	test   eax,eax
c0004e0f:	0f 85 7c 01 00 00    	jne    c0004f91 <f_rename+0x1ae>
c0004e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e19:	83 ec 0c             	sub    esp,0xc
c0004e1c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004e20:	68 00 02 00 00       	push   0x200
c0004e25:	e8 32 0f 00 00       	call   c0005d5c <ff_memalloc>
c0004e2a:	83 c4 10             	add    esp,0x10
c0004e2d:	89 c6                	mov    esi,eax
c0004e2f:	b8 11 00 00 00       	mov    eax,0x11
c0004e34:	85 f6                	test   esi,esi
c0004e36:	0f 84 55 01 00 00    	je     c0004f91 <f_rename+0x1ae>
c0004e3c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e40:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004e47:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e4a:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e4e:	e8 ce ec ff ff       	call   c0003b21 <follow_path>
c0004e53:	85 c0                	test   eax,eax
c0004e55:	0f 85 22 01 00 00    	jne    c0004f7d <f_rename+0x19a>
c0004e5b:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004e5f:	b8 06 00 00 00       	mov    eax,0x6
c0004e64:	80 e2 a0             	and    dl,0xa0
c0004e67:	0f 85 10 01 00 00    	jne    c0004f7d <f_rename+0x19a>
c0004e6d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e71:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e75:	b9 20 00 00 00       	mov    ecx,0x20
c0004e7a:	e8 c4 d0 ff ff       	call   c0001f43 <mem_cpy>
c0004e7f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004e83:	b9 30 00 00 00       	mov    ecx,0x30
c0004e88:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e8c:	e8 b2 d0 ff ff       	call   c0001f43 <mem_cpy>
c0004e91:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004e98:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e9c:	e8 80 ec ff ff       	call   c0003b21 <follow_path>
c0004ea1:	85 c0                	test   eax,eax
c0004ea3:	75 20                	jne    c0004ec5 <f_rename+0xe2>
c0004ea5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004ea9:	b8 08 00 00 00       	mov    eax,0x8
c0004eae:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004eb2:	0f 85 c5 00 00 00    	jne    c0004f7d <f_rename+0x19a>
c0004eb8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004ebc:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004ec3:	eb 03                	jmp    c0004ec8 <f_rename+0xe5>
c0004ec5:	83 f8 04             	cmp    eax,0x4
c0004ec8:	0f 85 af 00 00 00    	jne    c0004f7d <f_rename+0x19a>
c0004ece:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004ed2:	e8 e7 ec ff ff       	call   c0003bbe <dir_register>
c0004ed7:	85 c0                	test   eax,eax
c0004ed9:	0f 85 9e 00 00 00    	jne    c0004f7d <f_rename+0x19a>
c0004edf:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004ee6:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004eea:	b9 13 00 00 00       	mov    ecx,0x13
c0004eef:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004ef2:	e8 4c d0 ff ff       	call   c0001f43 <mem_cpy>
c0004ef7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004efb:	a8 10                	test   al,0x10
c0004efd:	75 03                	jne    c0004f02 <f_rename+0x11f>
c0004eff:	83 c8 20             	or     eax,0x20
c0004f02:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004f05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f0d:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004f11:	74 54                	je     c0004f67 <f_rename+0x184>
c0004f13:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004f17:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004f1b:	74 4a                	je     c0004f67 <f_rename+0x184>
c0004f1d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004f21:	89 da                	mov    edx,ebx
c0004f23:	8a 07                	mov    al,BYTE PTR [edi]
c0004f25:	e8 de e3 ff ff       	call   c0003308 <ld_clust.isra.0>
c0004f2a:	89 c2                	mov    edx,eax
c0004f2c:	89 f8                	mov    eax,edi
c0004f2e:	e8 3a d2 ff ff       	call   c000216d <clst2sect>
c0004f33:	89 c2                	mov    edx,eax
c0004f35:	b8 02 00 00 00       	mov    eax,0x2
c0004f3a:	85 d2                	test   edx,edx
c0004f3c:	74 3f                	je     c0004f7d <f_rename+0x19a>
c0004f3e:	89 f8                	mov    eax,edi
c0004f40:	e8 37 d5 ff ff       	call   c000247c <move_window>
c0004f45:	85 c0                	test   eax,eax
c0004f47:	75 34                	jne    c0004f7d <f_rename+0x19a>
c0004f49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4d:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004f51:	75 14                	jne    c0004f67 <f_rename+0x184>
c0004f53:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004f57:	8d 50 54             	lea    edx,[eax+0x54]
c0004f5a:	e8 d2 e3 ff ff       	call   c0003331 <st_clust.isra.1>
c0004f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f63:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f67:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f6b:	e8 10 ea ff ff       	call   c0003980 <dir_remove>
c0004f70:	85 c0                	test   eax,eax
c0004f72:	75 09                	jne    c0004f7d <f_rename+0x19a>
c0004f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f78:	e8 34 df ff ff       	call   c0002eb1 <sync_fs>
c0004f7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f81:	83 ec 0c             	sub    esp,0xc
c0004f84:	56                   	push   esi
c0004f85:	e8 ea 0d 00 00       	call   c0005d74 <ff_memfree>
c0004f8a:	83 c4 10             	add    esp,0x10
c0004f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f91:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004f97:	5b                   	pop    ebx
c0004f98:	5e                   	pop    esi
c0004f99:	5f                   	pop    edi
c0004f9a:	c3                   	ret    

c0004f9b <f_chmod>:
c0004f9b:	57                   	push   edi
c0004f9c:	b9 02 00 00 00       	mov    ecx,0x2
c0004fa1:	56                   	push   esi
c0004fa2:	53                   	push   ebx
c0004fa3:	83 ec 50             	sub    esp,0x50
c0004fa6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004faa:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004fae:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb2:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004fb6:	e8 1e d6 ff ff       	call   c00025d9 <mount_volume>
c0004fbb:	85 c0                	test   eax,eax
c0004fbd:	0f 85 81 00 00 00    	jne    c0005044 <f_chmod+0xa9>
c0004fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc7:	83 ec 0c             	sub    esp,0xc
c0004fca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004fce:	68 00 02 00 00       	push   0x200
c0004fd3:	e8 84 0d 00 00       	call   c0005d5c <ff_memalloc>
c0004fd8:	83 c4 10             	add    esp,0x10
c0004fdb:	89 c6                	mov    esi,eax
c0004fdd:	b8 11 00 00 00       	mov    eax,0x11
c0004fe2:	85 f6                	test   esi,esi
c0004fe4:	74 5e                	je     c0005044 <f_chmod+0xa9>
c0004fe6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fea:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004fee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ff1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ff5:	e8 27 eb ff ff       	call   c0003b21 <follow_path>
c0004ffa:	85 c0                	test   eax,eax
c0004ffc:	75 32                	jne    c0005030 <f_chmod+0x95>
c0004ffe:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005002:	b8 06 00 00 00       	mov    eax,0x6
c0005007:	80 e2 a0             	and    dl,0xa0
c000500a:	75 24                	jne    c0005030 <f_chmod+0x95>
c000500c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005010:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0005013:	31 d7                	xor    edi,edx
c0005015:	21 fb                	and    ebx,edi
c0005017:	83 e3 27             	and    ebx,0x27
c000501a:	31 d3                	xor    ebx,edx
c000501c:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c000501f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005023:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005027:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000502b:	e8 81 de ff ff       	call   c0002eb1 <sync_fs>
c0005030:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005034:	83 ec 0c             	sub    esp,0xc
c0005037:	56                   	push   esi
c0005038:	e8 37 0d 00 00       	call   c0005d74 <ff_memfree>
c000503d:	83 c4 10             	add    esp,0x10
c0005040:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005044:	83 c4 50             	add    esp,0x50
c0005047:	5b                   	pop    ebx
c0005048:	5e                   	pop    esi
c0005049:	5f                   	pop    edi
c000504a:	c3                   	ret    

c000504b <f_utime>:
c000504b:	56                   	push   esi
c000504c:	b9 02 00 00 00       	mov    ecx,0x2
c0005051:	53                   	push   ebx
c0005052:	83 ec 54             	sub    esp,0x54
c0005055:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005059:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000505d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005061:	e8 73 d5 ff ff       	call   c00025d9 <mount_volume>
c0005066:	85 c0                	test   eax,eax
c0005068:	0f 85 87 00 00 00    	jne    c00050f5 <f_utime+0xaa>
c000506e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005072:	83 ec 0c             	sub    esp,0xc
c0005075:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005079:	68 00 02 00 00       	push   0x200
c000507e:	e8 d9 0c 00 00       	call   c0005d5c <ff_memalloc>
c0005083:	83 c4 10             	add    esp,0x10
c0005086:	89 c3                	mov    ebx,eax
c0005088:	b8 11 00 00 00       	mov    eax,0x11
c000508d:	85 db                	test   ebx,ebx
c000508f:	74 64                	je     c00050f5 <f_utime+0xaa>
c0005091:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005095:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005099:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000509c:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a0:	e8 7c ea ff ff       	call   c0003b21 <follow_path>
c00050a5:	85 c0                	test   eax,eax
c00050a7:	75 38                	jne    c00050e1 <f_utime+0x96>
c00050a9:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050ad:	b8 06 00 00 00       	mov    eax,0x6
c00050b2:	80 e2 a0             	and    dl,0xa0
c00050b5:	75 2a                	jne    c00050e1 <f_utime+0x96>
c00050b7:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c00050bb:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c00050bf:	c1 e2 10             	shl    edx,0x10
c00050c2:	09 c2                	or     edx,eax
c00050c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c8:	83 c0 16             	add    eax,0x16
c00050cb:	e8 70 ce ff ff       	call   c0001f40 <st_dword>
c00050d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050dc:	e8 d0 dd ff ff       	call   c0002eb1 <sync_fs>
c00050e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050e5:	83 ec 0c             	sub    esp,0xc
c00050e8:	53                   	push   ebx
c00050e9:	e8 86 0c 00 00       	call   c0005d74 <ff_memfree>
c00050ee:	83 c4 10             	add    esp,0x10
c00050f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050f5:	83 c4 54             	add    esp,0x54
c00050f8:	5b                   	pop    ebx
c00050f9:	5e                   	pop    esi
c00050fa:	c3                   	ret    

c00050fb <f_getlabel>:
c00050fb:	55                   	push   ebp
c00050fc:	31 c9                	xor    ecx,ecx
c00050fe:	57                   	push   edi
c00050ff:	56                   	push   esi
c0005100:	53                   	push   ebx
c0005101:	83 ec 5c             	sub    esp,0x5c
c0005104:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005108:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
c000510c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005110:	e8 c4 d4 ff ff       	call   c00025d9 <mount_volume>
c0005115:	85 c0                	test   eax,eax
c0005117:	89 c3                	mov    ebx,eax
c0005119:	0f 85 d9 00 00 00    	jne    c00051f8 <f_getlabel+0xfd>
c000511f:	85 ff                	test   edi,edi
c0005121:	0f 84 d1 00 00 00    	je     c00051f8 <f_getlabel+0xfd>
c0005127:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000512f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005139:	8d 44 24 20          	lea    eax,[esp+0x20]
c000513d:	e8 1c e3 ff ff       	call   c000345e <dir_sdi>
c0005142:	85 c0                	test   eax,eax
c0005144:	89 c3                	mov    ebx,eax
c0005146:	0f 85 a2 00 00 00    	jne    c00051ee <f_getlabel+0xf3>
c000514c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005150:	ba 01 00 00 00       	mov    edx,0x1
c0005155:	e8 fe e6 ff ff       	call   c0003858 <dir_read>
c000515a:	85 c0                	test   eax,eax
c000515c:	89 c3                	mov    ebx,eax
c000515e:	0f 85 8a 00 00 00    	jne    c00051ee <f_getlabel+0xf3>
c0005164:	31 f6                	xor    esi,esi
c0005166:	31 d2                	xor    edx,edx
c0005168:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000516c:	8d 6a 01             	lea    ebp,[edx+0x1]
c000516f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005173:	0f b6 0c 10          	movzx  ecx,BYTE PTR [eax+edx*1]
c0005177:	66 89 4c 24 0c       	mov    WORD PTR [esp+0xc],cx
c000517c:	89 c8                	mov    eax,ecx
c000517e:	e8 13 ce ff ff       	call   c0001f96 <dbc_1st>
c0005183:	85 c0                	test   eax,eax
c0005185:	74 19                	je     c00051a0 <f_getlabel+0xa5>
c0005187:	83 fd 0b             	cmp    ebp,0xb
c000518a:	74 14                	je     c00051a0 <f_getlabel+0xa5>
c000518c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005190:	c1 e1 08             	shl    ecx,0x8
c0005193:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0005197:	8d 6a 02             	lea    ebp,[edx+0x2]
c000519a:	09 c1                	or     ecx,eax
c000519c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051a0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00051a5:	52                   	push   edx
c00051a6:	52                   	push   edx
c00051a7:	68 b5 01 00 00       	push   0x1b5
c00051ac:	50                   	push   eax
c00051ad:	e8 76 0c 00 00       	call   c0005e28 <ff_oem2uni>
c00051b2:	83 c4 10             	add    esp,0x10
c00051b5:	0f b7 c0             	movzx  eax,ax
c00051b8:	85 c0                	test   eax,eax
c00051ba:	74 1f                	je     c00051db <f_getlabel+0xe0>
c00051bc:	8d 14 37             	lea    edx,[edi+esi*1]
c00051bf:	b9 04 00 00 00       	mov    ecx,0x4
c00051c4:	e8 ab ce ff ff       	call   c0002074 <put_utf>
c00051c9:	0f b6 c0             	movzx  eax,al
c00051cc:	85 c0                	test   eax,eax
c00051ce:	74 0b                	je     c00051db <f_getlabel+0xe0>
c00051d0:	01 c6                	add    esi,eax
c00051d2:	83 fd 0b             	cmp    ebp,0xb
c00051d5:	74 06                	je     c00051dd <f_getlabel+0xe2>
c00051d7:	89 ea                	mov    edx,ebp
c00051d9:	eb 8d                	jmp    c0005168 <f_getlabel+0x6d>
c00051db:	31 f6                	xor    esi,esi
c00051dd:	01 fe                	add    esi,edi
c00051df:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00051e2:	39 f7                	cmp    edi,esi
c00051e4:	74 12                	je     c00051f8 <f_getlabel+0xfd>
c00051e6:	4e                   	dec    esi
c00051e7:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c00051ea:	74 f3                	je     c00051df <f_getlabel+0xe4>
c00051ec:	eb 0a                	jmp    c00051f8 <f_getlabel+0xfd>
c00051ee:	83 fb 04             	cmp    ebx,0x4
c00051f1:	75 05                	jne    c00051f8 <f_getlabel+0xfd>
c00051f3:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00051f6:	31 db                	xor    ebx,ebx
c00051f8:	85 db                	test   ebx,ebx
c00051fa:	75 49                	jne    c0005245 <f_getlabel+0x14a>
c00051fc:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0005201:	74 42                	je     c0005245 <f_getlabel+0x14a>
c0005203:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005207:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000520a:	e8 6d d2 ff ff       	call   c000247c <move_window>
c000520f:	85 c0                	test   eax,eax
c0005211:	89 c3                	mov    ebx,eax
c0005213:	75 30                	jne    c0005245 <f_getlabel+0x14a>
c0005215:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005219:	b8 43 00 00 00       	mov    eax,0x43
c000521e:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c0005221:	83 f9 03             	cmp    ecx,0x3
c0005224:	74 10                	je     c0005236 <f_getlabel+0x13b>
c0005226:	83 f9 04             	cmp    ecx,0x4
c0005229:	b8 64 00 00 00       	mov    eax,0x64
c000522e:	b9 27 00 00 00       	mov    ecx,0x27
c0005233:	0f 45 c1             	cmovne eax,ecx
c0005236:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c000523a:	e8 e5 cc ff ff       	call   c0001f24 <ld_dword>
c000523f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005243:	89 07                	mov    DWORD PTR [edi],eax
c0005245:	83 c4 5c             	add    esp,0x5c
c0005248:	89 d8                	mov    eax,ebx
c000524a:	5b                   	pop    ebx
c000524b:	5e                   	pop    esi
c000524c:	5f                   	pop    edi
c000524d:	5d                   	pop    ebp
c000524e:	c3                   	ret    

c000524f <f_setlabel>:
c000524f:	57                   	push   edi
c0005250:	b9 02 00 00 00       	mov    ecx,0x2
c0005255:	56                   	push   esi
c0005256:	53                   	push   ebx
c0005257:	83 ec 50             	sub    esp,0x50
c000525a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000525e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005262:	e8 72 d3 ff ff       	call   c00025d9 <mount_volume>
c0005267:	85 c0                	test   eax,eax
c0005269:	89 c6                	mov    esi,eax
c000526b:	0f 85 65 01 00 00    	jne    c00053d6 <f_setlabel+0x187>
c0005271:	b9 0b 00 00 00       	mov    ecx,0xb
c0005276:	ba 20 00 00 00       	mov    edx,0x20
c000527b:	8d 44 24 0a          	lea    eax,[esp+0xa]
c000527f:	31 db                	xor    ebx,ebx
c0005281:	e8 d2 cc ff ff       	call   c0001f58 <mem_set>
c0005286:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000528a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000528d:	76 5d                	jbe    c00052ec <f_setlabel+0x9d>
c000528f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005293:	e8 04 cd ff ff       	call   c0001f9c <tchar2uni>
c0005298:	3d ff ff 00 00       	cmp    eax,0xffff
c000529d:	76 0a                	jbe    c00052a9 <f_setlabel+0x5a>
c000529f:	be 06 00 00 00       	mov    esi,0x6
c00052a4:	e9 2d 01 00 00       	jmp    c00053d6 <f_setlabel+0x187>
c00052a9:	83 ec 0c             	sub    esp,0xc
c00052ac:	50                   	push   eax
c00052ad:	e8 ee 0b 00 00       	call   c0005ea0 <ff_wtoupper>
c00052b2:	5a                   	pop    edx
c00052b3:	59                   	pop    ecx
c00052b4:	68 b5 01 00 00       	push   0x1b5
c00052b9:	50                   	push   eax
c00052ba:	e8 cd 0a 00 00       	call   c0005d8c <ff_uni2oem>
c00052bf:	83 c4 10             	add    esp,0x10
c00052c2:	0f b7 f0             	movzx  esi,ax
c00052c5:	85 f6                	test   esi,esi
c00052c7:	89 f7                	mov    edi,esi
c00052c9:	74 d4                	je     c000529f <f_setlabel+0x50>
c00052cb:	89 f2                	mov    edx,esi
c00052cd:	b8 90 f4 02 c0       	mov    eax,0xc002f490
c00052d2:	e8 ae cc ff ff       	call   c0001f85 <chk_chr>
c00052d7:	85 c0                	test   eax,eax
c00052d9:	75 c4                	jne    c000529f <f_setlabel+0x50>
c00052db:	81 fe ff 00 00 00    	cmp    esi,0xff
c00052e1:	0f 87 c9 00 00 00    	ja     c00053b0 <f_setlabel+0x161>
c00052e7:	e9 e0 00 00 00       	jmp    c00053cc <f_setlabel+0x17d>
c00052ec:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00052f1:	74 ac                	je     c000529f <f_setlabel+0x50>
c00052f3:	85 db                	test   ebx,ebx
c00052f5:	74 0e                	je     c0005305 <f_setlabel+0xb6>
c00052f7:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00052fc:	8d 43 ff             	lea    eax,[ebx-0x1]
c00052ff:	75 04                	jne    c0005305 <f_setlabel+0xb6>
c0005301:	89 c3                	mov    ebx,eax
c0005303:	eb ee                	jmp    c00052f3 <f_setlabel+0xa4>
c0005305:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000530d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005311:	31 d2                	xor    edx,edx
c0005313:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005317:	8d 44 24 20          	lea    eax,[esp+0x20]
c000531b:	e8 3e e1 ff ff       	call   c000345e <dir_sdi>
c0005320:	85 c0                	test   eax,eax
c0005322:	89 c6                	mov    esi,eax
c0005324:	0f 85 ac 00 00 00    	jne    c00053d6 <f_setlabel+0x187>
c000532a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000532e:	ba 01 00 00 00       	mov    edx,0x1
c0005333:	e8 20 e5 ff ff       	call   c0003858 <dir_read>
c0005338:	85 c0                	test   eax,eax
c000533a:	75 18                	jne    c0005354 <f_setlabel+0x105>
c000533c:	85 db                	test   ebx,ebx
c000533e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005342:	74 0b                	je     c000534f <f_setlabel+0x100>
c0005344:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005348:	b9 0b 00 00 00       	mov    ecx,0xb
c000534d:	eb 47                	jmp    c0005396 <f_setlabel+0x147>
c000534f:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005352:	eb 47                	jmp    c000539b <f_setlabel+0x14c>
c0005354:	83 f8 04             	cmp    eax,0x4
c0005357:	75 53                	jne    c00053ac <f_setlabel+0x15d>
c0005359:	85 db                	test   ebx,ebx
c000535b:	74 79                	je     c00053d6 <f_setlabel+0x187>
c000535d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005361:	ba 01 00 00 00       	mov    edx,0x1
c0005366:	e8 88 e4 ff ff       	call   c00037f3 <dir_alloc>
c000536b:	85 c0                	test   eax,eax
c000536d:	89 c6                	mov    esi,eax
c000536f:	75 65                	jne    c00053d6 <f_setlabel+0x187>
c0005371:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005375:	b9 20 00 00 00       	mov    ecx,0x20
c000537a:	31 d2                	xor    edx,edx
c000537c:	e8 d7 cb ff ff       	call   c0001f58 <mem_set>
c0005381:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005385:	b9 0b 00 00 00       	mov    ecx,0xb
c000538a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000538e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005392:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005396:	e8 a8 cb ff ff       	call   c0001f43 <mem_cpy>
c000539b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000539f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00053a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053a7:	e8 05 db ff ff       	call   c0002eb1 <sync_fs>
c00053ac:	89 c6                	mov    esi,eax
c00053ae:	eb 26                	jmp    c00053d6 <f_setlabel+0x187>
c00053b0:	83 fb 09             	cmp    ebx,0x9
c00053b3:	0f 87 e6 fe ff ff    	ja     c000529f <f_setlabel+0x50>
c00053b9:	89 f0                	mov    eax,esi
c00053bb:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c00053bf:	43                   	inc    ebx
c00053c0:	89 f8                	mov    eax,edi
c00053c2:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c00053c6:	43                   	inc    ebx
c00053c7:	e9 ba fe ff ff       	jmp    c0005286 <f_setlabel+0x37>
c00053cc:	83 fb 0a             	cmp    ebx,0xa
c00053cf:	76 ef                	jbe    c00053c0 <f_setlabel+0x171>
c00053d1:	e9 c9 fe ff ff       	jmp    c000529f <f_setlabel+0x50>
c00053d6:	83 c4 50             	add    esp,0x50
c00053d9:	89 f0                	mov    eax,esi
c00053db:	5b                   	pop    ebx
c00053dc:	5e                   	pop    esi
c00053dd:	5f                   	pop    edi
c00053de:	c3                   	ret    

c00053df <f_expand>:
c00053df:	55                   	push   ebp
c00053e0:	57                   	push   edi
c00053e1:	56                   	push   esi
c00053e2:	53                   	push   ebx
c00053e3:	83 ec 2c             	sub    esp,0x2c
c00053e6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053ea:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053f6:	89 d8                	mov    eax,ebx
c00053f8:	e8 d6 cf ff ff       	call   c00023d3 <validate>
c00053fd:	85 c0                	test   eax,eax
c00053ff:	89 c6                	mov    esi,eax
c0005401:	0f 85 3b 01 00 00    	jne    c0005542 <f_expand+0x163>
c0005407:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c000540b:	85 f6                	test   esi,esi
c000540d:	0f 85 2f 01 00 00    	jne    c0005542 <f_expand+0x163>
c0005413:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005418:	75 0a                	jne    c0005424 <f_expand+0x45>
c000541a:	be 07 00 00 00       	mov    esi,0x7
c000541f:	e9 1e 01 00 00       	jmp    c0005542 <f_expand+0x163>
c0005424:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005428:	75 f0                	jne    c000541a <f_expand+0x3b>
c000542a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000542e:	74 ea                	je     c000541a <f_expand+0x3b>
c0005430:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005434:	0f b7 79 0a          	movzx  edi,WORD PTR [ecx+0xa]
c0005438:	c1 e7 09             	shl    edi,0x9
c000543b:	8d 47 ff             	lea    eax,[edi-0x1]
c000543e:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005442:	0f 95 c0             	setne  al
c0005445:	31 d2                	xor    edx,edx
c0005447:	0f b6 c0             	movzx  eax,al
c000544a:	89 c5                	mov    ebp,eax
c000544c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005450:	f7 f7                	div    edi
c0005452:	8b 79 10             	mov    edi,DWORD PTR [ecx+0x10]
c0005455:	01 e8                	add    eax,ebp
c0005457:	83 ff 01             	cmp    edi,0x1
c000545a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000545e:	76 05                	jbe    c0005465 <f_expand+0x86>
c0005460:	39 79 18             	cmp    DWORD PTR [ecx+0x18],edi
c0005463:	77 05                	ja     c000546a <f_expand+0x8b>
c0005465:	bf 02 00 00 00       	mov    edi,0x2
c000546a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000546d:	89 fd                	mov    ebp,edi
c000546f:	31 c9                	xor    ecx,ecx
c0005471:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005475:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005477:	89 ea                	mov    edx,ebp
c0005479:	45                   	inc    ebp
c000547a:	e8 da de ff ff       	call   c0003359 <get_fat.isra.2>
c000547f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005483:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005487:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000548a:	77 05                	ja     c0005491 <f_expand+0xb2>
c000548c:	bd 02 00 00 00       	mov    ebp,0x2
c0005491:	83 f8 01             	cmp    eax,0x1
c0005494:	74 20                	je     c00054b6 <f_expand+0xd7>
c0005496:	83 f8 ff             	cmp    eax,0xffffffff
c0005499:	74 25                	je     c00054c0 <f_expand+0xe1>
c000549b:	85 c0                	test   eax,eax
c000549d:	75 09                	jne    c00054a8 <f_expand+0xc9>
c000549f:	41                   	inc    ecx
c00054a0:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00054a4:	75 07                	jne    c00054ad <f_expand+0xce>
c00054a6:	eb 1f                	jmp    c00054c7 <f_expand+0xe8>
c00054a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00054ab:	31 c9                	xor    ecx,ecx
c00054ad:	39 fd                	cmp    ebp,edi
c00054af:	75 c0                	jne    c0005471 <f_expand+0x92>
c00054b1:	e9 64 ff ff ff       	jmp    c000541a <f_expand+0x3b>
c00054b6:	be 02 00 00 00       	mov    esi,0x2
c00054bb:	e9 82 00 00 00       	jmp    c0005542 <f_expand+0x163>
c00054c0:	be 01 00 00 00       	mov    esi,0x1
c00054c5:	eb 7b                	jmp    c0005542 <f_expand+0x163>
c00054c7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054cc:	74 2b                	je     c00054f9 <f_expand+0x11a>
c00054ce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00054d1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00054d5:	85 ed                	test   ebp,ebp
c00054d7:	74 24                	je     c00054fd <f_expand+0x11e>
c00054d9:	83 c9 ff             	or     ecx,0xffffffff
c00054dc:	83 fd 01             	cmp    ebp,0x1
c00054df:	74 03                	je     c00054e4 <f_expand+0x105>
c00054e1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00054e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054e8:	89 fa                	mov    edx,edi
c00054ea:	e8 e7 d3 ff ff       	call   c00028d6 <put_fat>
c00054ef:	85 c0                	test   eax,eax
c00054f1:	75 4d                	jne    c0005540 <f_expand+0x161>
c00054f3:	89 f8                	mov    eax,edi
c00054f5:	4d                   	dec    ebp
c00054f6:	47                   	inc    edi
c00054f7:	eb dc                	jmp    c00054d5 <f_expand+0xf6>
c00054f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054fc:	48                   	dec    eax
c00054fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005501:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005506:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c0005509:	74 37                	je     c0005542 <f_expand+0x163>
c000550b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000550e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005511:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005515:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005518:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000551b:	83 c8 40             	or     eax,0x40
c000551e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005521:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005524:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005527:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000552a:	39 c8                	cmp    eax,ecx
c000552c:	77 14                	ja     c0005542 <f_expand+0x163>
c000552e:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005532:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005535:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005538:	83 c8 01             	or     eax,0x1
c000553b:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000553e:	eb 02                	jmp    c0005542 <f_expand+0x163>
c0005540:	89 c6                	mov    esi,eax
c0005542:	83 c4 2c             	add    esp,0x2c
c0005545:	89 f0                	mov    eax,esi
c0005547:	5b                   	pop    ebx
c0005548:	5e                   	pop    esi
c0005549:	5f                   	pop    edi
c000554a:	5d                   	pop    ebp
c000554b:	c3                   	ret    

c000554c <f_mkfs>:
c000554c:	55                   	push   ebp
c000554d:	57                   	push   edi
c000554e:	56                   	push   esi
c000554f:	be 0b 00 00 00       	mov    esi,0xb
c0005554:	53                   	push   ebx
c0005555:	83 ec 5c             	sub    esp,0x5c
c0005558:	8d 44 24 70          	lea    eax,[esp+0x70]
c000555c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005560:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005564:	e8 1e ce ff ff       	call   c0002387 <get_ldnumber>
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 88 e0 07 00 00    	js     c0005d51 <f_mkfs+0x805>
c0005571:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005578:	85 d2                	test   edx,edx
c000557a:	74 03                	je     c000557f <f_mkfs+0x33>
c000557c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000557f:	85 db                	test   ebx,ebx
c0005581:	75 05                	jne    c0005588 <f_mkfs+0x3c>
c0005583:	bb 80 f4 02 c0       	mov    ebx,0xc002f480
c0005588:	0f b6 c0             	movzx  eax,al
c000558b:	83 ec 0c             	sub    esp,0xc
c000558e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005592:	be 03 00 00 00       	mov    esi,0x3
c0005597:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000559b:	e8 29 c9 ff ff       	call   c0001ec9 <disk_initialize>
c00055a0:	83 c4 10             	add    esp,0x10
c00055a3:	a8 01                	test   al,0x1
c00055a5:	0f 85 a6 07 00 00    	jne    c0005d51 <f_mkfs+0x805>
c00055ab:	a8 04                	test   al,0x4
c00055ad:	be 0a 00 00 00       	mov    esi,0xa
c00055b2:	0f 85 99 07 00 00    	jne    c0005d51 <f_mkfs+0x805>
c00055b8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00055bb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00055bf:	85 c0                	test   eax,eax
c00055c1:	75 20                	jne    c00055e3 <f_mkfs+0x97>
c00055c3:	51                   	push   ecx
c00055c4:	8d 44 24 44          	lea    eax,[esp+0x44]
c00055c8:	50                   	push   eax
c00055c9:	6a 03                	push   0x3
c00055cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00055cf:	e8 24 c9 ff ff       	call   c0001ef8 <disk_ioctl>
c00055d4:	83 c4 10             	add    esp,0x10
c00055d7:	85 c0                	test   eax,eax
c00055d9:	74 08                	je     c00055e3 <f_mkfs+0x97>
c00055db:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055e3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00055e7:	8d 42 ff             	lea    eax,[edx-0x1]
c00055ea:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055ef:	77 04                	ja     c00055f5 <f_mkfs+0xa9>
c00055f1:	85 c2                	test   edx,eax
c00055f3:	74 08                	je     c00055fd <f_mkfs+0xb1>
c00055f5:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055fd:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005600:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0005604:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005608:	48                   	dec    eax
c0005609:	3c 01                	cmp    al,0x1
c000560b:	76 05                	jbe    c0005612 <f_mkfs+0xc6>
c000560d:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005612:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005619:	48                   	dec    eax
c000561a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000561f:	77 15                	ja     c0005636 <f_mkfs+0xea>
c0005621:	f6 44 24 10 0f       	test   BYTE PTR [esp+0x10],0xf
c0005626:	b8 00 02 00 00       	mov    eax,0x200
c000562b:	0f 44 44 24 10       	cmove  eax,DWORD PTR [esp+0x10]
c0005630:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005634:	eb 08                	jmp    c000563e <f_mkfs+0xf2>
c0005636:	c7 44 24 10 00 02 00 00 	mov    DWORD PTR [esp+0x10],0x200
c000563e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005641:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005647:	77 0f                	ja     c0005658 <f_mkfs+0x10c>
c0005649:	8d 47 ff             	lea    eax,[edi-0x1]
c000564c:	85 f8                	test   eax,edi
c000564e:	b8 00 00 00 00       	mov    eax,0x0
c0005653:	0f 45 f8             	cmovne edi,eax
c0005656:	eb 02                	jmp    c000565a <f_mkfs+0x10e>
c0005658:	31 ff                	xor    edi,edi
c000565a:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005662:	77 0a                	ja     c000566e <f_mkfs+0x122>
c0005664:	be 11 00 00 00       	mov    esi,0x11
c0005669:	e9 e3 06 00 00       	jmp    c0005d51 <f_mkfs+0x805>
c000566e:	85 ed                	test   ebp,ebp
c0005670:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005672:	89 eb                	mov    ebx,ebp
c0005674:	75 1e                	jne    c0005694 <f_mkfs+0x148>
c0005676:	83 ec 0c             	sub    esp,0xc
c0005679:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005680:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005685:	50                   	push   eax
c0005686:	e8 d1 06 00 00       	call   c0005d5c <ff_memalloc>
c000568b:	83 c4 10             	add    esp,0x10
c000568e:	85 c0                	test   eax,eax
c0005690:	89 c3                	mov    ebx,eax
c0005692:	74 d0                	je     c0005664 <f_mkfs+0x118>
c0005694:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000569c:	52                   	push   edx
c000569d:	8d 44 24 48          	lea    eax,[esp+0x48]
c00056a1:	50                   	push   eax
c00056a2:	6a 01                	push   0x1
c00056a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00056a8:	e8 4b c8 ff ff       	call   c0001ef8 <disk_ioctl>
c00056ad:	83 c4 10             	add    esp,0x10
c00056b0:	85 c0                	test   eax,eax
c00056b2:	0f 85 42 06 00 00    	jne    c0005cfa <f_mkfs+0x7ae>
c00056b8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00056c0:	89 f0                	mov    eax,esi
c00056c2:	83 e0 08             	and    eax,0x8
c00056c5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00056c9:	75 18                	jne    c00056e3 <f_mkfs+0x197>
c00056cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00056cf:	83 f8 3f             	cmp    eax,0x3f
c00056d2:	76 0f                	jbe    c00056e3 <f_mkfs+0x197>
c00056d4:	c7 44 24 14 3f 00 00 00 	mov    DWORD PTR [esp+0x14],0x3f
c00056dc:	83 e8 3f             	sub    eax,0x3f
c00056df:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00056e3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00056e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00056eb:	83 f8 7f             	cmp    eax,0x7f
c00056ee:	0f 86 5f 02 00 00    	jbe    c0005953 <f_mkfs+0x407>
c00056f4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00056fa:	b9 80 00 00 00       	mov    ecx,0x80
c00056ff:	77 05                	ja     c0005706 <f_mkfs+0x1ba>
c0005701:	c1 ef 09             	shr    edi,0x9
c0005704:	89 f9                	mov    ecx,edi
c0005706:	89 f0                	mov    eax,esi
c0005708:	89 f7                	mov    edi,esi
c000570a:	83 e0 01             	and    eax,0x1
c000570d:	83 e7 02             	and    edi,0x2
c0005710:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c0005714:	0f b6 c0             	movzx  eax,al
c0005717:	74 0a                	je     c0005723 <f_mkfs+0x1d7>
c0005719:	85 c0                	test   eax,eax
c000571b:	0f 84 53 01 00 00    	je     c0005874 <f_mkfs+0x328>
c0005721:	eb 37                	jmp    c000575a <f_mkfs+0x20e>
c0005723:	85 c0                	test   eax,eax
c0005725:	be 13 00 00 00       	mov    esi,0x13
c000572a:	75 2e                	jne    c000575a <f_mkfs+0x20e>
c000572c:	e9 e0 05 00 00       	jmp    c0005d11 <f_mkfs+0x7c5>
c0005731:	83 f8 02             	cmp    eax,0x2
c0005734:	0f 85 11 02 00 00    	jne    c000594b <f_mkfs+0x3ff>
c000573a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005740:	0f 86 e8 01 00 00    	jbe    c000592e <f_mkfs+0x3e2>
c0005746:	85 c9                	test   ecx,ecx
c0005748:	0f 85 d5 05 00 00    	jne    c0005d23 <f_mkfs+0x7d7>
c000574e:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005751:	83 f9 40             	cmp    ecx,0x40
c0005754:	0f 87 d9 05 00 00    	ja     c0005d33 <f_mkfs+0x7e7>
c000575a:	85 c9                	test   ecx,ecx
c000575c:	89 cf                	mov    edi,ecx
c000575e:	75 1c                	jne    c000577c <f_mkfs+0x230>
c0005760:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005764:	b8 60 f4 02 c0       	mov    eax,0xc002f460
c0005769:	bf 01 00 00 00       	mov    edi,0x1
c000576e:	c1 ee 0c             	shr    esi,0xc
c0005771:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005774:	85 d2                	test   edx,edx
c0005776:	0f 85 67 01 00 00    	jne    c00058e3 <f_mkfs+0x397>
c000577c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005780:	31 d2                	xor    edx,edx
c0005782:	f7 f7                	div    edi
c0005784:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005789:	0f 86 66 01 00 00    	jbe    c00058f5 <f_mkfs+0x3a9>
c000578f:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005794:	83 c0 02             	add    eax,0x2
c0005797:	01 c0                	add    eax,eax
c0005799:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00057a1:	05 ff 01 00 00       	add    eax,0x1ff
c00057a6:	c1 e8 09             	shr    eax,0x9
c00057a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00057ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b1:	c1 e0 05             	shl    eax,0x5
c00057b4:	c1 e8 09             	shr    eax,0x9
c00057b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00057bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00057c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00057c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00057c8:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00057cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00057d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00057d4:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c00057d9:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00057dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00057e1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00057e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00057e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00057ed:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00057f1:	f7 d8                	neg    eax
c00057f3:	21 c6                	and    esi,eax
c00057f5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057fa:	29 d6                	sub    esi,edx
c00057fc:	83 f8 03             	cmp    eax,0x3
c00057ff:	0f 85 03 01 00 00    	jne    c0005908 <f_mkfs+0x3bc>
c0005805:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c0005809:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c000580d:	89 f8                	mov    eax,edi
c000580f:	c1 e0 04             	shl    eax,0x4
c0005812:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c0005816:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c000581a:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000581e:	0f 82 2f 01 00 00    	jb     c0005953 <f_mkfs+0x407>
c0005824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005828:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c000582c:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005830:	89 c2                	mov    edx,eax
c0005832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005836:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000583b:	29 c2                	sub    edx,eax
c000583d:	89 d0                	mov    eax,edx
c000583f:	31 d2                	xor    edx,edx
c0005841:	f7 f7                	div    edi
c0005843:	89 c6                	mov    esi,eax
c0005845:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000584a:	83 f8 03             	cmp    eax,0x3
c000584d:	0f 85 de fe ff ff    	jne    c0005731 <f_mkfs+0x1e5>
c0005853:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005859:	0f 87 03 01 00 00    	ja     c0005962 <f_mkfs+0x416>
c000585f:	85 c9                	test   ecx,ecx
c0005861:	0f 85 ec 00 00 00    	jne    c0005953 <f_mkfs+0x407>
c0005867:	83 ff 01             	cmp    edi,0x1
c000586a:	0f 86 e3 00 00 00    	jbe    c0005953 <f_mkfs+0x407>
c0005870:	d1 ef                	shr    edi,1
c0005872:	89 f9                	mov    ecx,edi
c0005874:	85 c9                	test   ecx,ecx
c0005876:	89 ce                	mov    esi,ecx
c0005878:	75 25                	jne    c000589f <f_mkfs+0x353>
c000587a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000587e:	b8 70 f4 02 c0       	mov    eax,0xc002f470
c0005883:	b9 01 00 00 00       	mov    ecx,0x1
c0005888:	c1 ee 11             	shr    esi,0x11
c000588b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000588e:	85 d2                	test   edx,edx
c0005890:	74 0b                	je     c000589d <f_mkfs+0x351>
c0005892:	83 c0 02             	add    eax,0x2
c0005895:	39 f2                	cmp    edx,esi
c0005897:	77 04                	ja     c000589d <f_mkfs+0x351>
c0005899:	01 c9                	add    ecx,ecx
c000589b:	eb ee                	jmp    c000588b <f_mkfs+0x33f>
c000589d:	31 f6                	xor    esi,esi
c000589f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058a3:	31 d2                	xor    edx,edx
c00058a5:	f7 f1                	div    ecx
c00058a7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00058ae:	2d f6 ff 00 00       	sub    eax,0xfff6
c00058b3:	c1 ea 09             	shr    edx,0x9
c00058b6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00058bb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00058bf:	0f 87 8e 00 00 00    	ja     c0005953 <f_mkfs+0x407>
c00058c5:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00058cd:	89 cf                	mov    edi,ecx
c00058cf:	89 f1                	mov    ecx,esi
c00058d1:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c00058d9:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c00058de:	e9 d8 fe ff ff       	jmp    c00057bb <f_mkfs+0x26f>
c00058e3:	83 c0 02             	add    eax,0x2
c00058e6:	39 f2                	cmp    edx,esi
c00058e8:	0f 87 8e fe ff ff    	ja     c000577c <f_mkfs+0x230>
c00058ee:	01 ff                	add    edi,edi
c00058f0:	e9 7c fe ff ff       	jmp    c0005771 <f_mkfs+0x225>
c00058f5:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00058fa:	8d 04 40             	lea    eax,[eax+eax*2]
c00058fd:	40                   	inc    eax
c00058fe:	d1 e8                	shr    eax,1
c0005900:	83 c0 03             	add    eax,0x3
c0005903:	e9 91 fe ff ff       	jmp    c0005799 <f_mkfs+0x24d>
c0005908:	31 d2                	xor    edx,edx
c000590a:	89 f0                	mov    eax,esi
c000590c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005910:	85 d2                	test   edx,edx
c0005912:	74 09                	je     c000591d <f_mkfs+0x3d1>
c0005914:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0005918:	4e                   	dec    esi
c0005919:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c000591d:	89 f0                	mov    eax,esi
c000591f:	31 d2                	xor    edx,edx
c0005921:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0005925:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c0005929:	e9 df fe ff ff       	jmp    c000580d <f_mkfs+0x2c1>
c000592e:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005934:	77 2c                	ja     c0005962 <f_mkfs+0x416>
c0005936:	85 c9                	test   ecx,ecx
c0005938:	75 19                	jne    c0005953 <f_mkfs+0x407>
c000593a:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000593d:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005943:	0f 86 11 fe ff ff    	jbe    c000575a <f_mkfs+0x20e>
c0005949:	eb 08                	jmp    c0005953 <f_mkfs+0x407>
c000594b:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005951:	76 0a                	jbe    c000595d <f_mkfs+0x411>
c0005953:	be 0e 00 00 00       	mov    esi,0xe
c0005958:	e9 b4 03 00 00       	jmp    c0005d11 <f_mkfs+0x7c5>
c000595d:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005962:	31 d2                	xor    edx,edx
c0005964:	b9 00 02 00 00       	mov    ecx,0x200
c0005969:	89 d8                	mov    eax,ebx
c000596b:	e8 e8 c5 ff ff       	call   c0001f58 <mem_set>
c0005970:	b9 0b 00 00 00       	mov    ecx,0xb
c0005975:	ba 12 f4 02 c0       	mov    edx,0xc002f412
c000597a:	89 d8                	mov    eax,ebx
c000597c:	e8 c2 c5 ff ff       	call   c0001f43 <mem_cpy>
c0005981:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005984:	ba 00 02 00 00       	mov    edx,0x200
c0005989:	e8 ae c5 ff ff       	call   c0001f3c <st_word>
c000598e:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005993:	89 f8                	mov    eax,edi
c0005995:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005998:	8d 43 0e             	lea    eax,[ebx+0xe]
c000599b:	e8 9c c5 ff ff       	call   c0001f3c <st_word>
c00059a0:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00059a4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00059a7:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059ac:	83 f8 03             	cmp    eax,0x3
c00059af:	b8 00 00 00 00       	mov    eax,0x0
c00059b4:	0f 45 44 24 10       	cmovne eax,DWORD PTR [esp+0x10]
c00059b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00059bd:	8d 43 11             	lea    eax,[ebx+0x11]
c00059c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00059c4:	e8 73 c5 ff ff       	call   c0001f3c <st_word>
c00059c9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00059cd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00059d3:	77 0a                	ja     c00059df <f_mkfs+0x493>
c00059d5:	8d 43 13             	lea    eax,[ebx+0x13]
c00059d8:	e8 5f c5 ff ff       	call   c0001f3c <st_word>
c00059dd:	eb 08                	jmp    c00059e7 <f_mkfs+0x49b>
c00059df:	8d 43 20             	lea    eax,[ebx+0x20]
c00059e2:	e8 59 c5 ff ff       	call   c0001f40 <st_dword>
c00059e7:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00059eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00059ee:	ba 3f 00 00 00       	mov    edx,0x3f
c00059f3:	e8 44 c5 ff ff       	call   c0001f3c <st_word>
c00059f8:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00059fb:	ba ff 00 00 00       	mov    edx,0xff
c0005a00:	e8 37 c5 ff ff       	call   c0001f3c <st_word>
c0005a05:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a09:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005a0c:	e8 2f c5 ff ff       	call   c0001f40 <st_dword>
c0005a11:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a16:	83 f8 03             	cmp    eax,0x3
c0005a19:	75 57                	jne    c0005a72 <f_mkfs+0x526>
c0005a1b:	8d 43 43             	lea    eax,[ebx+0x43]
c0005a1e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a23:	e8 18 c5 ff ff       	call   c0001f40 <st_dword>
c0005a28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005a2c:	8d 43 24             	lea    eax,[ebx+0x24]
c0005a2f:	e8 0c c5 ff ff       	call   c0001f40 <st_dword>
c0005a34:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005a37:	ba 02 00 00 00       	mov    edx,0x2
c0005a3c:	e8 ff c4 ff ff       	call   c0001f40 <st_dword>
c0005a41:	8d 43 30             	lea    eax,[ebx+0x30]
c0005a44:	ba 01 00 00 00       	mov    edx,0x1
c0005a49:	e8 ee c4 ff ff       	call   c0001f3c <st_word>
c0005a4e:	8d 43 32             	lea    eax,[ebx+0x32]
c0005a51:	ba 06 00 00 00       	mov    edx,0x6
c0005a56:	e8 e1 c4 ff ff       	call   c0001f3c <st_word>
c0005a5b:	8d 43 47             	lea    eax,[ebx+0x47]
c0005a5e:	b9 13 00 00 00       	mov    ecx,0x13
c0005a63:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005a67:	ba 1e f4 02 c0       	mov    edx,0xc002f41e
c0005a6c:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005a70:	eb 2f                	jmp    c0005aa1 <f_mkfs+0x555>
c0005a72:	8d 43 27             	lea    eax,[ebx+0x27]
c0005a75:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7a:	e8 c1 c4 ff ff       	call   c0001f40 <st_dword>
c0005a7f:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005a84:	8d 43 16             	lea    eax,[ebx+0x16]
c0005a87:	e8 b0 c4 ff ff       	call   c0001f3c <st_word>
c0005a8c:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005a8f:	b9 13 00 00 00       	mov    ecx,0x13
c0005a94:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005a98:	ba 32 f4 02 c0       	mov    edx,0xc002f432
c0005a9d:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005aa1:	e8 9d c4 ff ff       	call   c0001f43 <mem_cpy>
c0005aa6:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005aac:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005ab1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ab5:	e8 82 c4 ff ff       	call   c0001f3c <st_word>
c0005aba:	6a 01                	push   0x1
c0005abc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ac0:	53                   	push   ebx
c0005ac1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ac5:	e8 18 c4 ff ff       	call   c0001ee2 <disk_write>
c0005aca:	83 c4 10             	add    esp,0x10
c0005acd:	85 c0                	test   eax,eax
c0005acf:	0f 85 25 02 00 00    	jne    c0005cfa <f_mkfs+0x7ae>
c0005ad5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ada:	83 f8 03             	cmp    eax,0x3
c0005add:	0f 85 98 00 00 00    	jne    c0005b7b <f_mkfs+0x62f>
c0005ae3:	6a 01                	push   0x1
c0005ae5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae9:	83 c0 06             	add    eax,0x6
c0005aec:	50                   	push   eax
c0005aed:	53                   	push   ebx
c0005aee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005af2:	e8 eb c3 ff ff       	call   c0001ee2 <disk_write>
c0005af7:	b9 00 02 00 00       	mov    ecx,0x200
c0005afc:	31 d2                	xor    edx,edx
c0005afe:	89 d8                	mov    eax,ebx
c0005b00:	e8 53 c4 ff ff       	call   c0001f58 <mem_set>
c0005b05:	ba 52 52 61 41       	mov    edx,0x41615252
c0005b0a:	89 d8                	mov    eax,ebx
c0005b0c:	e8 2f c4 ff ff       	call   c0001f40 <st_dword>
c0005b11:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005b17:	ba 72 72 41 61       	mov    edx,0x61417272
c0005b1c:	e8 1f c4 ff ff       	call   c0001f40 <st_dword>
c0005b21:	8d 56 ff             	lea    edx,[esi-0x1]
c0005b24:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005b2a:	e8 11 c4 ff ff       	call   c0001f40 <st_dword>
c0005b2f:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005b35:	ba 02 00 00 00       	mov    edx,0x2
c0005b3a:	e8 01 c4 ff ff       	call   c0001f40 <st_dword>
c0005b3f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b45:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4a:	e8 ed c3 ff ff       	call   c0001f3c <st_word>
c0005b4f:	6a 01                	push   0x1
c0005b51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0005b55:	83 c0 07             	add    eax,0x7
c0005b58:	50                   	push   eax
c0005b59:	53                   	push   ebx
c0005b5a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005b5e:	e8 7f c3 ff ff       	call   c0001ee2 <disk_write>
c0005b63:	83 c4 20             	add    esp,0x20
c0005b66:	6a 01                	push   0x1
c0005b68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005b6c:	40                   	inc    eax
c0005b6d:	50                   	push   eax
c0005b6e:	53                   	push   ebx
c0005b6f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b73:	e8 6a c3 ff ff       	call   c0001ee2 <disk_write>
c0005b78:	83 c4 10             	add    esp,0x10
c0005b7b:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005b7f:	31 d2                	xor    edx,edx
c0005b81:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005b85:	c1 e8 09             	shr    eax,0x9
c0005b88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b8c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005b92:	89 d8                	mov    eax,ebx
c0005b94:	e8 bf c3 ff ff       	call   c0001f58 <mem_set>
c0005b99:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b9e:	b9 f8 ff ff 00       	mov    ecx,0xfffff8
c0005ba3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0005bab:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005bb0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005bb4:	83 f8 01             	cmp    eax,0x1
c0005bb7:	0f 44 d1             	cmove  edx,ecx
c0005bba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0005bbe:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005bc3:	75 21                	jne    c0005be6 <f_mkfs+0x69a>
c0005bc5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005bca:	89 d8                	mov    eax,ebx
c0005bcc:	e8 6f c3 ff ff       	call   c0001f40 <st_dword>
c0005bd1:	8d 43 04             	lea    eax,[ebx+0x4]
c0005bd4:	83 ca ff             	or     edx,0xffffffff
c0005bd7:	e8 64 c3 ff ff       	call   c0001f40 <st_dword>
c0005bdc:	8d 43 08             	lea    eax,[ebx+0x8]
c0005bdf:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005be4:	eb 06                	jmp    c0005bec <f_mkfs+0x6a0>
c0005be6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0005bea:	89 d8                	mov    eax,ebx
c0005bec:	e8 4f c3 ff ff       	call   c0001f40 <st_dword>
c0005bf1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bf9:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0005bfd:	0f 46 c6             	cmovbe eax,esi
c0005c00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005c04:	50                   	push   eax
c0005c05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c09:	53                   	push   ebx
c0005c0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0e:	e8 cf c2 ff ff       	call   c0001ee2 <disk_write>
c0005c13:	83 c4 10             	add    esp,0x10
c0005c16:	85 c0                	test   eax,eax
c0005c18:	0f 85 dc 00 00 00    	jne    c0005cfa <f_mkfs+0x7ae>
c0005c1e:	b9 00 02 00 00       	mov    ecx,0x200
c0005c23:	31 d2                	xor    edx,edx
c0005c25:	89 d8                	mov    eax,ebx
c0005c27:	e8 2c c3 ff ff       	call   c0001f58 <mem_set>
c0005c2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005c30:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
c0005c34:	29 ce                	sub    esi,ecx
c0005c36:	75 bd                	jne    c0005bf5 <f_mkfs+0x6a9>
c0005c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c3c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005c44:	40                   	inc    eax
c0005c45:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005c49:	0f 87 6f ff ff ff    	ja     c0005bbe <f_mkfs+0x672>
c0005c4f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c54:	83 f8 03             	cmp    eax,0x3
c0005c57:	0f 45 7c 24 30       	cmovne edi,DWORD PTR [esp+0x30]
c0005c5c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c60:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005c64:	0f 46 f7             	cmovbe esi,edi
c0005c67:	56                   	push   esi
c0005c68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c6c:	53                   	push   ebx
c0005c6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c71:	e8 6c c2 ff ff       	call   c0001ee2 <disk_write>
c0005c76:	83 c4 10             	add    esp,0x10
c0005c79:	85 c0                	test   eax,eax
c0005c7b:	75 7d                	jne    c0005cfa <f_mkfs+0x7ae>
c0005c7d:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005c81:	29 f7                	sub    edi,esi
c0005c83:	75 d7                	jne    c0005c5c <f_mkfs+0x710>
c0005c85:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c8a:	b9 0c 00 00 00       	mov    ecx,0xc
c0005c8f:	83 f8 03             	cmp    eax,0x3
c0005c92:	74 1e                	je     c0005cb2 <f_mkfs+0x766>
c0005c94:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005c9c:	b9 06 00 00 00       	mov    ecx,0x6
c0005ca1:	77 0f                	ja     c0005cb2 <f_mkfs+0x766>
c0005ca3:	83 f8 02             	cmp    eax,0x2
c0005ca6:	b9 04 00 00 00       	mov    ecx,0x4
c0005cab:	74 05                	je     c0005cb2 <f_mkfs+0x766>
c0005cad:	b9 01 00 00 00       	mov    ecx,0x1
c0005cb2:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005cb7:	75 2a                	jne    c0005ce3 <f_mkfs+0x797>
c0005cb9:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005cc1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005cc5:	83 ec 0c             	sub    esp,0xc
c0005cc8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0005ccc:	53                   	push   ebx
c0005ccd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cd1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005cd5:	e8 87 d2 ff ff       	call   c0002f61 <create_partition>
c0005cda:	83 c4 10             	add    esp,0x10
c0005cdd:	85 c0                	test   eax,eax
c0005cdf:	89 c6                	mov    esi,eax
c0005ce1:	75 2e                	jne    c0005d11 <f_mkfs+0x7c5>
c0005ce3:	50                   	push   eax
c0005ce4:	31 f6                	xor    esi,esi
c0005ce6:	6a 00                	push   0x0
c0005ce8:	6a 00                	push   0x0
c0005cea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cee:	e8 05 c2 ff ff       	call   c0001ef8 <disk_ioctl>
c0005cf3:	83 c4 10             	add    esp,0x10
c0005cf6:	85 c0                	test   eax,eax
c0005cf8:	74 17                	je     c0005d11 <f_mkfs+0x7c5>
c0005cfa:	85 ed                	test   ebp,ebp
c0005cfc:	75 0c                	jne    c0005d0a <f_mkfs+0x7be>
c0005cfe:	83 ec 0c             	sub    esp,0xc
c0005d01:	53                   	push   ebx
c0005d02:	e8 6d 00 00 00       	call   c0005d74 <ff_memfree>
c0005d07:	83 c4 10             	add    esp,0x10
c0005d0a:	be 01 00 00 00       	mov    esi,0x1
c0005d0f:	eb 40                	jmp    c0005d51 <f_mkfs+0x805>
c0005d11:	85 ed                	test   ebp,ebp
c0005d13:	75 3c                	jne    c0005d51 <f_mkfs+0x805>
c0005d15:	83 ec 0c             	sub    esp,0xc
c0005d18:	53                   	push   ebx
c0005d19:	e8 56 00 00 00       	call   c0005d74 <ff_memfree>
c0005d1e:	83 c4 10             	add    esp,0x10
c0005d21:	eb 2e                	jmp    c0005d51 <f_mkfs+0x805>
c0005d23:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d28:	0f 85 46 fb ff ff    	jne    c0005874 <f_mkfs+0x328>
c0005d2e:	e9 20 fc ff ff       	jmp    c0005953 <f_mkfs+0x407>
c0005d33:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005d38:	0f 85 3c fb ff ff    	jne    c000587a <f_mkfs+0x32e>
c0005d3e:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005d44:	89 cf                	mov    edi,ecx
c0005d46:	0f 86 30 fa ff ff    	jbe    c000577c <f_mkfs+0x230>
c0005d4c:	e9 02 fc ff ff       	jmp    c0005953 <f_mkfs+0x407>
c0005d51:	83 c4 5c             	add    esp,0x5c
c0005d54:	89 f0                	mov    eax,esi
c0005d56:	5b                   	pop    ebx
c0005d57:	5e                   	pop    esi
c0005d58:	5f                   	pop    edi
c0005d59:	5d                   	pop    ebp
c0005d5a:	c3                   	ret    
c0005d5b:	90                   	nop

c0005d5c <ff_memalloc>:
c0005d5c:	83 ec 0c             	sub    esp,0xc
c0005d5f:	83 ec 0c             	sub    esp,0xc
c0005d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d66:	e8 78 06 01 00       	call   c00163e3 <malloc>
c0005d6b:	83 c4 10             	add    esp,0x10
c0005d6e:	83 c4 0c             	add    esp,0xc
c0005d71:	c3                   	ret    
c0005d72:	66 90                	xchg   ax,ax

c0005d74 <ff_memfree>:
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	83 ec 0c             	sub    esp,0xc
c0005d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d7e:	e8 70 06 01 00       	call   c00163f3 <free>
c0005d83:	83 c4 10             	add    esp,0x10
c0005d86:	90                   	nop
c0005d87:	83 c4 0c             	add    esp,0xc
c0005d8a:	c3                   	ret    
c0005d8b:	90                   	nop

c0005d8c <ff_uni2oem>:
c0005d8c:	83 ec 14             	sub    esp,0x14
c0005d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d97:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d9e:	c7 44 24 0c 60 f8 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f860
c0005da6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005dab:	77 0b                	ja     c0005db8 <ff_uni2oem+0x2c>
c0005dad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005db1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005db6:	eb 64                	jmp    c0005e1c <ff_uni2oem+0x90>
c0005db8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005dc0:	77 5a                	ja     c0005e1c <ff_uni2oem+0x90>
c0005dc2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005dc6:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005dcb:	75 4f                	jne    c0005e1c <ff_uni2oem+0x90>
c0005dcd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005dd4:	eb 12                	jmp    c0005de8 <ff_uni2oem+0x5c>
c0005dd6:	66 90                	xchg   ax,ax
c0005dd8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ddd:	83 c0 01             	add    eax,0x1
c0005de0:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005de5:	8d 76 00             	lea    esi,[esi+0x0]
c0005de8:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ded:	83 f8 7f             	cmp    eax,0x7f
c0005df0:	77 1a                	ja     c0005e0c <ff_uni2oem+0x80>
c0005df2:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005df7:	8d 14 00             	lea    edx,[eax+eax*1]
c0005dfa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dfe:	01 d0                	add    eax,edx
c0005e00:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e03:	0f b7 c0             	movzx  eax,ax
c0005e06:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005e0a:	75 cc                	jne    c0005dd8 <ff_uni2oem+0x4c>
c0005e0c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e11:	83 e8 80             	sub    eax,0xffffff80
c0005e14:	0f b6 c0             	movzx  eax,al
c0005e17:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e21:	83 c4 14             	add    esp,0x14
c0005e24:	c3                   	ret    
c0005e25:	8d 76 00             	lea    esi,[esi+0x0]

c0005e28 <ff_oem2uni>:
c0005e28:	83 ec 18             	sub    esp,0x18
c0005e2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005e2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005e33:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005e38:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e3c:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005e43:	c7 44 24 10 60 f8 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f860
c0005e4b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e50:	83 f8 7f             	cmp    eax,0x7f
c0005e53:	77 0b                	ja     c0005e60 <ff_oem2uni+0x38>
c0005e55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e59:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e5e:	eb 34                	jmp    c0005e94 <ff_oem2uni+0x6c>
c0005e60:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e64:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e69:	75 29                	jne    c0005e94 <ff_oem2uni+0x6c>
c0005e6b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e70:	3d ff 00 00 00       	cmp    eax,0xff
c0005e75:	77 1d                	ja     c0005e94 <ff_oem2uni+0x6c>
c0005e77:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e7c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005e81:	8d 14 00             	lea    edx,[eax+eax*1]
c0005e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e88:	01 d0                	add    eax,edx
c0005e8a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e8d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e92:	66 90                	xchg   ax,ax
c0005e94:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005e99:	83 c4 18             	add    esp,0x18
c0005e9c:	c3                   	ret    
c0005e9d:	8d 76 00             	lea    esi,[esi+0x0]

c0005ea0 <ff_wtoupper>:
c0005ea0:	83 ec 10             	sub    esp,0x10
c0005ea3:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005eab:	0f 87 a7 01 00 00    	ja     c0006058 <ff_wtoupper+0x1b8>
c0005eb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005eb5:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eba:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ebf:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005ec4:	77 0a                	ja     c0005ed0 <ff_wtoupper+0x30>
c0005ec6:	b8 60 f6 02 c0       	mov    eax,0xc002f660
c0005ecb:	eb 0b                	jmp    c0005ed8 <ff_wtoupper+0x38>
c0005ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0005ed0:	b8 a0 f5 02 c0       	mov    eax,0xc002f5a0
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ed8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005edc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ee0:	8d 50 02             	lea    edx,[eax+0x2]
c0005ee3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ee7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005eef:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ef4:	85 c0                	test   eax,eax
c0005ef6:	0f 84 50 01 00 00    	je     c000604c <ff_wtoupper+0x1ac>
c0005efc:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f01:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f06:	39 c2                	cmp    edx,eax
c0005f08:	0f 82 3e 01 00 00    	jb     c000604c <ff_wtoupper+0x1ac>
c0005f0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f12:	8d 50 02             	lea    edx,[eax+0x2]
c0005f15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f19:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f1c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f21:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f26:	c1 e8 08             	shr    eax,0x8
c0005f29:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005f2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005f33:	0f b6 c0             	movzx  eax,al
c0005f36:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005f3b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f40:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005f45:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005f4a:	01 ca                	add    edx,ecx
c0005f4c:	39 d0                	cmp    eax,edx
c0005f4e:	0f 8d d4 00 00 00    	jge    c0006028 <ff_wtoupper+0x188>
c0005f54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f59:	83 f8 08             	cmp    eax,0x8
c0005f5c:	0f 87 e6 00 00 00    	ja     c0006048 <ff_wtoupper+0x1a8>
c0005f62:	8b 04 85 60 f5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0aa0]
c0005f69:	ff e0                	jmp    eax
c0005f6b:	90                   	nop
c0005f6c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f71:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f76:	29 c2                	sub    edx,eax
c0005f78:	89 d0                	mov    eax,edx
c0005f7a:	8d 14 00             	lea    edx,[eax+eax*1]
c0005f7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f81:	01 d0                	add    eax,edx
c0005f83:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f86:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f8b:	e9 94 00 00 00       	jmp    c0006024 <ff_wtoupper+0x184>
c0005f90:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005f95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f99:	89 d1                	mov    ecx,edx
c0005f9b:	29 c1                	sub    ecx,eax
c0005f9d:	89 c8                	mov    eax,ecx
c0005f9f:	83 e0 01             	and    eax,0x1
c0005fa2:	89 c2                	mov    edx,eax
c0005fa4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fa9:	29 d0                	sub    eax,edx
c0005fab:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fb0:	eb 72                	jmp    c0006024 <ff_wtoupper+0x184>
c0005fb2:	66 90                	xchg   ax,ax
c0005fb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fb9:	83 e8 10             	sub    eax,0x10
c0005fbc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fc1:	eb 61                	jmp    c0006024 <ff_wtoupper+0x184>
c0005fc3:	90                   	nop
c0005fc4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fc9:	83 e8 20             	sub    eax,0x20
c0005fcc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fd1:	eb 51                	jmp    c0006024 <ff_wtoupper+0x184>
c0005fd3:	90                   	nop
c0005fd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fd9:	83 e8 30             	sub    eax,0x30
c0005fdc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fe1:	eb 41                	jmp    c0006024 <ff_wtoupper+0x184>
c0005fe3:	90                   	nop
c0005fe4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fe9:	83 e8 1a             	sub    eax,0x1a
c0005fec:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ff1:	eb 31                	jmp    c0006024 <ff_wtoupper+0x184>
c0005ff3:	90                   	nop
c0005ff4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ff9:	83 c0 08             	add    eax,0x8
c0005ffc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006001:	eb 21                	jmp    c0006024 <ff_wtoupper+0x184>
c0006003:	90                   	nop
c0006004:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006009:	83 e8 50             	sub    eax,0x50
c000600c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006011:	eb 11                	jmp    c0006024 <ff_wtoupper+0x184>
c0006013:	90                   	nop
c0006014:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0006019:	2d 60 1c 00 00       	sub    eax,0x1c60
c000601e:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006023:	90                   	nop
c0006024:	eb 22                	jmp    c0006048 <ff_wtoupper+0x1a8>
c0006026:	66 90                	xchg   ax,ax
c0006028:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000602d:	85 c0                	test   eax,eax
c000602f:	0f 85 a7 fe ff ff    	jne    c0005edc <ff_wtoupper+0x3c>
c0006035:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000603a:	d1 e0                	shl    eax,1
c000603c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006040:	e9 97 fe ff ff       	jmp    c0005edc <ff_wtoupper+0x3c>
c0006045:	8d 76 00             	lea    esi,[esi+0x0]
c0006048:	90                   	nop
c0006049:	8d 76 00             	lea    esi,[esi+0x0]
c000604c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006051:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006055:	8d 76 00             	lea    esi,[esi+0x0]
c0006058:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000605c:	83 c4 10             	add    esp,0x10
c000605f:	c3                   	ret    

c0006060 <utf2ucs>:
c0006060:	57                   	push   edi
c0006061:	31 c9                	xor    ecx,ecx
c0006063:	56                   	push   esi
c0006064:	89 d7                	mov    edi,edx
c0006066:	53                   	push   ebx
c0006067:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000606b:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c000606f:	89 de                	mov    esi,ebx
c0006071:	c1 fe 08             	sar    esi,0x8
c0006074:	89 f2                	mov    edx,esi
c0006076:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0006079:	41                   	inc    ecx
c000607a:	85 db                	test   ebx,ebx
c000607c:	75 e9                	jne    c0006067 <utf2ucs+0x7>
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <ucs2utfn>:
c0006082:	83 e1 fe             	and    ecx,0xfffffffe
c0006085:	01 d1                	add    ecx,edx
c0006087:	39 d1                	cmp    ecx,edx
c0006089:	75 04                	jne    c000608f <ucs2utfn+0xd>
c000608b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000608e:	c3                   	ret    
c000608f:	57                   	push   edi
c0006090:	56                   	push   esi
c0006091:	53                   	push   ebx
c0006092:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006095:	83 c2 02             	add    edx,0x2
c0006098:	89 de                	mov    esi,ebx
c000609a:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c000609e:	c1 e6 08             	shl    esi,0x8
c00060a1:	09 f3                	or     ebx,esi
c00060a3:	83 fb 3b             	cmp    ebx,0x3b
c00060a6:	74 50                	je     c00060f8 <ucs2utfn+0x76>
c00060a8:	83 fb 7f             	cmp    ebx,0x7f
c00060ab:	7f 05                	jg     c00060b2 <ucs2utfn+0x30>
c00060ad:	88 18                	mov    BYTE PTR [eax],bl
c00060af:	40                   	inc    eax
c00060b0:	eb 42                	jmp    c00060f4 <ucs2utfn+0x72>
c00060b2:	89 df                	mov    edi,ebx
c00060b4:	89 de                	mov    esi,ebx
c00060b6:	c1 fe 06             	sar    esi,0x6
c00060b9:	83 e7 3f             	and    edi,0x3f
c00060bc:	83 cf 80             	or     edi,0xffffff80
c00060bf:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00060c5:	7f 12                	jg     c00060d9 <ucs2utfn+0x57>
c00060c7:	83 ce c0             	or     esi,0xffffffc0
c00060ca:	83 c0 02             	add    eax,0x2
c00060cd:	89 f3                	mov    ebx,esi
c00060cf:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060d2:	89 fb                	mov    ebx,edi
c00060d4:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060d7:	eb 1b                	jmp    c00060f4 <ucs2utfn+0x72>
c00060d9:	c1 fb 0c             	sar    ebx,0xc
c00060dc:	83 e6 3f             	and    esi,0x3f
c00060df:	83 cb e0             	or     ebx,0xffffffe0
c00060e2:	83 ce 80             	or     esi,0xffffff80
c00060e5:	88 18                	mov    BYTE PTR [eax],bl
c00060e7:	89 f3                	mov    ebx,esi
c00060e9:	83 c0 03             	add    eax,0x3
c00060ec:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060ef:	89 fb                	mov    ebx,edi
c00060f1:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060f4:	39 d1                	cmp    ecx,edx
c00060f6:	75 9a                	jne    c0006092 <ucs2utfn+0x10>
c00060f8:	5b                   	pop    ebx
c00060f9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00060fc:	5e                   	pop    esi
c00060fd:	5f                   	pop    edi
c00060fe:	c3                   	ret    

c00060ff <isjoliet>:
c00060ff:	31 d2                	xor    edx,edx
c0006101:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0006104:	75 26                	jne    c000612c <isjoliet+0x2d>
c0006106:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c000610a:	75 20                	jne    c000612c <isjoliet+0x2d>
c000610c:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0006110:	ba 02 00 00 00       	mov    edx,0x2
c0006115:	83 f8 43             	cmp    eax,0x43
c0006118:	74 12                	je     c000612c <isjoliet+0x2d>
c000611a:	83 f8 45             	cmp    eax,0x45
c000611d:	ba 03 00 00 00       	mov    edx,0x3
c0006122:	74 08                	je     c000612c <isjoliet+0x2d>
c0006124:	31 d2                	xor    edx,edx
c0006126:	83 f8 40             	cmp    eax,0x40
c0006129:	0f 94 c2             	sete   dl
c000612c:	89 d0                	mov    eax,edx
c000612e:	c3                   	ret    

c000612f <htohl_32>:
c000612f:	8b 00                	mov    eax,DWORD PTR [eax]
c0006131:	c3                   	ret    

c0006132 <iso_733>:
c0006132:	eb fb                	jmp    c000612f <htohl_32>

c0006134 <bgrad_cache>:
c0006134:	83 fa 0e             	cmp    edx,0xe
c0006137:	77 16                	ja     c000614f <bgrad_cache+0x1b>
c0006139:	53                   	push   ebx
c000613a:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c000613d:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006141:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006144:	42                   	inc    edx
c0006145:	83 fa 0f             	cmp    edx,0xf
c0006148:	75 f3                	jne    c000613d <bgrad_cache+0x9>
c000614a:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c000614d:	5b                   	pop    ebx
c000614e:	c3                   	ret    
c000614f:	c3                   	ret    

c0006150 <ucscompare>:
c0006150:	55                   	push   ebp
c0006151:	57                   	push   edi
c0006152:	89 c7                	mov    edi,eax
c0006154:	56                   	push   esi
c0006155:	89 d6                	mov    esi,edx
c0006157:	53                   	push   ebx
c0006158:	31 d2                	xor    edx,edx
c000615a:	83 ec 1c             	sub    esp,0x1c
c000615d:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006161:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006166:	c1 e3 08             	shl    ebx,0x8
c0006169:	09 c3                	or     ebx,eax
c000616b:	39 ca                	cmp    edx,ecx
c000616d:	7d 42                	jge    c00061b1 <ucscompare+0x61>
c000616f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006173:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006177:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000617b:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006180:	c1 e0 08             	shl    eax,0x8
c0006183:	09 e8                	or     eax,ebp
c0006185:	83 f8 3b             	cmp    eax,0x3b
c0006188:	74 27                	je     c00061b1 <ucscompare+0x61>
c000618a:	83 ec 0c             	sub    esp,0xc
c000618d:	50                   	push   eax
c000618e:	e8 ed a7 ff ff       	call   c0000980 <tolower>
c0006193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006196:	89 c5                	mov    ebp,eax
c0006198:	e8 e3 a7 ff ff       	call   c0000980 <tolower>
c000619d:	83 c4 10             	add    esp,0x10
c00061a0:	39 c5                	cmp    ebp,eax
c00061a2:	75 20                	jne    c00061c4 <ucscompare+0x74>
c00061a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00061a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00061ac:	83 c2 02             	add    edx,0x2
c00061af:	eb ac                	jmp    c000615d <ucscompare+0xd>
c00061b1:	83 fb 2f             	cmp    ebx,0x2f
c00061b4:	0f 95 c2             	setne  dl
c00061b7:	31 c0                	xor    eax,eax
c00061b9:	85 db                	test   ebx,ebx
c00061bb:	0f 95 c0             	setne  al
c00061be:	21 d0                	and    eax,edx
c00061c0:	f7 d8                	neg    eax
c00061c2:	eb 03                	jmp    c00061c7 <ucscompare+0x77>
c00061c4:	83 c8 ff             	or     eax,0xffffffff
c00061c7:	83 c4 1c             	add    esp,0x1c
c00061ca:	5b                   	pop    ebx
c00061cb:	5e                   	pop    esi
c00061cc:	5f                   	pop    edi
c00061cd:	5d                   	pop    ebp
c00061ce:	c3                   	ret    

c00061cf <fncompare>:
c00061cf:	55                   	push   ebp
c00061d0:	57                   	push   edi
c00061d1:	89 c7                	mov    edi,eax
c00061d3:	56                   	push   esi
c00061d4:	89 ce                	mov    esi,ecx
c00061d6:	53                   	push   ebx
c00061d7:	31 db                	xor    ebx,ebx
c00061d9:	83 ec 1c             	sub    esp,0x1c
c00061dc:	39 d3                	cmp    ebx,edx
c00061de:	7d 45                	jge    c0006225 <fncompare+0x56>
c00061e0:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00061e4:	83 f8 3b             	cmp    eax,0x3b
c00061e7:	74 3c                	je     c0006225 <fncompare+0x56>
c00061e9:	83 f8 2e             	cmp    eax,0x2e
c00061ec:	75 0e                	jne    c00061fc <fncompare+0x2d>
c00061ee:	8d 4a ff             	lea    ecx,[edx-0x1]
c00061f1:	39 d9                	cmp    ecx,ebx
c00061f3:	74 30                	je     c0006225 <fncompare+0x56>
c00061f5:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00061fa:	74 29                	je     c0006225 <fncompare+0x56>
c00061fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006200:	83 ec 0c             	sub    esp,0xc
c0006203:	50                   	push   eax
c0006204:	e8 77 a7 ff ff       	call   c0000980 <tolower>
c0006209:	89 c5                	mov    ebp,eax
c000620b:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c000620f:	89 04 24             	mov    DWORD PTR [esp],eax
c0006212:	e8 69 a7 ff ff       	call   c0000980 <tolower>
c0006217:	83 c4 10             	add    esp,0x10
c000621a:	39 c5                	cmp    ebp,eax
c000621c:	75 1e                	jne    c000623c <fncompare+0x6d>
c000621e:	43                   	inc    ebx
c000621f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006223:	eb b7                	jmp    c00061dc <fncompare+0xd>
c0006225:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c0006229:	83 fa 2f             	cmp    edx,0x2f
c000622c:	0f 95 c1             	setne  cl
c000622f:	31 c0                	xor    eax,eax
c0006231:	85 d2                	test   edx,edx
c0006233:	0f 95 c0             	setne  al
c0006236:	21 c8                	and    eax,ecx
c0006238:	f7 d8                	neg    eax
c000623a:	eb 03                	jmp    c000623f <fncompare+0x70>
c000623c:	83 c8 ff             	or     eax,0xffffffff
c000623f:	83 c4 1c             	add    esp,0x1c
c0006242:	5b                   	pop    ebx
c0006243:	5e                   	pop    esi
c0006244:	5f                   	pop    edi
c0006245:	5d                   	pop    ebp
c0006246:	c3                   	ret    

c0006247 <bclear_cache>:
c0006247:	83 ec 18             	sub    esp,0x18
c000624a:	68 60 f9 02 c0       	push   0xc002f960
c000624f:	e8 28 30 02 00       	call   c002927c <iso_kprintf>
c0006254:	83 c4 10             	add    esp,0x10
c0006257:	31 c0                	xor    eax,eax
c0006259:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006260:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006266:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c000626d:	40                   	inc    eax
c000626e:	83 f8 10             	cmp    eax,0x10
c0006271:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006277:	75 e0                	jne    c0006259 <bclear_cache+0x12>
c0006279:	83 c4 0c             	add    esp,0xc
c000627c:	c3                   	ret    

c000627d <bclear>:
c000627d:	eb c8                	jmp    c0006247 <bclear_cache>

c000627f <iso_break_all>:
c000627f:	83 ec 18             	sub    esp,0x18
c0006282:	68 6e f9 02 c0       	push   0xc002f96e
c0006287:	e8 f0 2f 02 00       	call   c002927c <iso_kprintf>
c000628c:	83 c4 10             	add    esp,0x10
c000628f:	31 c0                	xor    eax,eax
c0006291:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000629b:	05 94 00 00 00       	add    eax,0x94
c00062a0:	3d 40 09 00 00       	cmp    eax,0x940
c00062a5:	75 ea                	jne    c0006291 <iso_break_all+0x12>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	c3                   	ret    

c00062ab <isoReadDiscSector>:
c00062ab:	83 ec 0c             	sub    esp,0xc
c00062ae:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c00062b5:	50                   	push   eax
c00062b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00062c2:	e8 59 2f 02 00       	call   c0029220 <isoReadDiscSectorHelper>
c00062c7:	83 c4 1c             	add    esp,0x1c
c00062ca:	c3                   	ret    

c00062cb <bread_cache>:
c00062cb:	55                   	push   ebp
c00062cc:	57                   	push   edi
c00062cd:	89 d7                	mov    edi,edx
c00062cf:	56                   	push   esi
c00062d0:	ba 0f 00 00 00       	mov    edx,0xf
c00062d5:	53                   	push   ebx
c00062d6:	89 c6                	mov    esi,eax
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00062de:	39 38                	cmp    DWORD PTR [eax],edi
c00062e0:	74 3c                	je     c000631e <bread_cache+0x53>
c00062e2:	4a                   	dec    edx
c00062e3:	83 fa ff             	cmp    edx,0xffffffff
c00062e6:	75 f3                	jne    c00062db <bread_cache+0x10>
c00062e8:	31 db                	xor    ebx,ebx
c00062ea:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00062ed:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00062f0:	74 08                	je     c00062fa <bread_cache+0x2f>
c00062f2:	43                   	inc    ebx
c00062f3:	83 fb 10             	cmp    ebx,0x10
c00062f6:	75 f2                	jne    c00062ea <bread_cache+0x1f>
c00062f8:	31 db                	xor    ebx,ebx
c00062fa:	50                   	push   eax
c00062fb:	6a 01                	push   0x1
c00062fd:	57                   	push   edi
c00062fe:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0006301:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0006304:	83 c0 04             	add    eax,0x4
c0006307:	50                   	push   eax
c0006308:	e8 9e ff ff ff       	call   c00062ab <isoReadDiscSector>
c000630d:	83 c4 10             	add    esp,0x10
c0006310:	83 c9 ff             	or     ecx,0xffffffff
c0006313:	85 c0                	test   eax,eax
c0006315:	78 13                	js     c000632a <bread_cache+0x5f>
c0006317:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000631a:	89 da                	mov    edx,ebx
c000631c:	89 38                	mov    DWORD PTR [eax],edi
c000631e:	89 f0                	mov    eax,esi
c0006320:	e8 0f fe ff ff       	call   c0006134 <bgrad_cache>
c0006325:	b9 0f 00 00 00       	mov    ecx,0xf
c000632a:	83 c4 0c             	add    esp,0xc
c000632d:	89 c8                	mov    eax,ecx
c000632f:	5b                   	pop    ebx
c0006330:	5e                   	pop    esi
c0006331:	5f                   	pop    edi
c0006332:	5d                   	pop    ebp
c0006333:	c3                   	ret    

c0006334 <biread>:
c0006334:	89 c2                	mov    edx,eax
c0006336:	b8 80 60 03 c0       	mov    eax,0xc0036080
c000633b:	eb 8e                	jmp    c00062cb <bread_cache>

c000633d <bdread>:
c000633d:	89 c2                	mov    edx,eax
c000633f:	b8 20 60 03 c0       	mov    eax,0xc0036020
c0006344:	eb 85                	jmp    c00062cb <bread_cache>

c0006346 <strnicmp>:
c0006346:	55                   	push   ebp
c0006347:	57                   	push   edi
c0006348:	31 ff                	xor    edi,edi
c000634a:	56                   	push   esi
c000634b:	53                   	push   ebx
c000634c:	83 ec 0c             	sub    esp,0xc
c000634f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006353:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006357:	74 43                	je     c000639c <strnicmp+0x56>
c0006359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000635d:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006361:	85 c0                	test   eax,eax
c0006363:	74 37                	je     c000639c <strnicmp+0x56>
c0006365:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006369:	85 d2                	test   edx,edx
c000636b:	74 2f                	je     c000639c <strnicmp+0x56>
c000636d:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006370:	39 d0                	cmp    eax,edx
c0006372:	75 04                	jne    c0006378 <strnicmp+0x32>
c0006374:	89 ef                	mov    edi,ebp
c0006376:	eb db                	jmp    c0006353 <strnicmp+0xd>
c0006378:	83 ec 0c             	sub    esp,0xc
c000637b:	50                   	push   eax
c000637c:	e8 ff a5 ff ff       	call   c0000980 <tolower>
c0006381:	89 c3                	mov    ebx,eax
c0006383:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006387:	89 ef                	mov    edi,ebp
c0006389:	89 04 24             	mov    DWORD PTR [esp],eax
c000638c:	e8 ef a5 ff ff       	call   c0000980 <tolower>
c0006391:	83 c4 10             	add    esp,0x10
c0006394:	29 c3                	sub    ebx,eax
c0006396:	89 d8                	mov    eax,ebx
c0006398:	74 b9                	je     c0006353 <strnicmp+0xd>
c000639a:	eb 02                	jmp    c000639e <strnicmp+0x58>
c000639c:	31 c0                	xor    eax,eax
c000639e:	83 c4 0c             	add    esp,0xc
c00063a1:	5b                   	pop    ebx
c00063a2:	5e                   	pop    esi
c00063a3:	5f                   	pop    edi
c00063a4:	5d                   	pop    ebp
c00063a5:	c3                   	ret    

c00063a6 <find_object>:
c00063a6:	55                   	push   ebp
c00063a7:	57                   	push   edi
c00063a8:	89 c7                	mov    edi,eax
c00063aa:	56                   	push   esi
c00063ab:	53                   	push   ebx
c00063ac:	89 d3                	mov    ebx,edx
c00063ae:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00063b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00063b8:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00063bf:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c00063c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00063ca:	74 0b                	je     c00063d7 <find_object+0x31>
c00063cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063d0:	89 fa                	mov    edx,edi
c00063d2:	e8 89 fc ff ff       	call   c0006060 <utf2ucs>
c00063d7:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00063da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00063e3:	7e 11                	jle    c00063f6 <find_object+0x50>
c00063e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00063e9:	e8 46 ff ff ff       	call   c0006334 <biread>
c00063ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063f2:	85 c0                	test   eax,eax
c00063f4:	79 07                	jns    c00063fd <find_object+0x57>
c00063f6:	31 db                	xor    ebx,ebx
c00063f8:	e9 47 01 00 00       	jmp    c0006544 <find_object+0x19e>
c00063fd:	31 ed                	xor    ebp,ebp
c00063ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006403:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c000640a:	8d 5c 28 04          	lea    ebx,[eax+ebp*1+0x4]
c000640e:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006411:	85 f6                	test   esi,esi
c0006413:	75 0e                	jne    c0006423 <find_object+0x7d>
c0006415:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0006419:	81 6c 24 08 00 08 00 00 	sub    DWORD PTR [esp+0x8],0x800
c0006421:	eb bb                	jmp    c00063de <find_object+0x38>
c0006423:	8b 0d 94 76 03 c0    	mov    ecx,DWORD PTR ds:0xc0037694
c0006429:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c000642d:	85 c9                	test   ecx,ecx
c000642f:	89 d0                	mov    eax,edx
c0006431:	74 2b                	je     c000645e <find_object+0xb8>
c0006433:	8d 43 21             	lea    eax,[ebx+0x21]
c0006436:	89 d1                	mov    ecx,edx
c0006438:	8d 54 24 20          	lea    edx,[esp+0x20]
c000643c:	e8 0f fd ff ff       	call   c0006150 <ucscompare>
c0006441:	85 c0                	test   eax,eax
c0006443:	0f 84 cd 00 00 00    	je     c0006516 <find_object+0x170>
c0006449:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000644c:	01 c5                	add    ebp,eax
c000644e:	81 fd ff 07 00 00    	cmp    ebp,0x7ff
c0006454:	7f bf                	jg     c0006415 <find_object+0x6f>
c0006456:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c000645a:	7f a3                	jg     c00063ff <find_object+0x59>
c000645c:	eb b7                	jmp    c0006415 <find_object+0x6f>
c000645e:	29 d6                	sub    esi,edx
c0006460:	a8 01                	test   al,0x1
c0006462:	8d 54 13 21          	lea    edx,[ebx+edx*1+0x21]
c0006466:	74 05                	je     c000646d <find_object+0xc7>
c0006468:	83 ee 21             	sub    esi,0x21
c000646b:	eb 6a                	jmp    c00064d7 <find_object+0x131>
c000646d:	42                   	inc    edx
c000646e:	83 ee 22             	sub    esi,0x22
c0006471:	eb 64                	jmp    c00064d7 <find_object+0x131>
c0006473:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006476:	48                   	dec    eax
c0006477:	3c 01                	cmp    al,0x1
c0006479:	77 61                	ja     c00064dc <find_object+0x136>
c000647b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000647f:	50                   	push   eax
c0006480:	6a 02                	push   0x2
c0006482:	68 7d f9 02 c0       	push   0xc002f97d
c0006487:	52                   	push   edx
c0006488:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000648c:	e8 7f a3 ff ff       	call   c0000810 <strncmp>
c0006491:	83 c4 10             	add    esp,0x10
c0006494:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006498:	85 c0                	test   eax,eax
c000649a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000649e:	75 2f                	jne    c00064cf <find_object+0x129>
c00064a0:	0f be 4a 02          	movsx  ecx,BYTE PTR [edx+0x2]
c00064a4:	50                   	push   eax
c00064a5:	8d 42 05             	lea    eax,[edx+0x5]
c00064a8:	83 e9 05             	sub    ecx,0x5
c00064ab:	51                   	push   ecx
c00064ac:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00064b0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00064b4:	50                   	push   eax
c00064b5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064b9:	50                   	push   eax
c00064ba:	e8 d1 a1 ff ff       	call   c0000690 <strncpy>
c00064bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00064c3:	c6 44 0c 30 00       	mov    BYTE PTR [esp+ecx*1+0x30],0x0
c00064c8:	83 c4 10             	add    esp,0x10
c00064cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00064cf:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c00064d3:	29 c6                	sub    esi,eax
c00064d5:	01 c2                	add    edx,eax
c00064d7:	83 fe 03             	cmp    esi,0x3
c00064da:	7f 97                	jg     c0006473 <find_object+0xcd>
c00064dc:	85 c9                	test   ecx,ecx
c00064de:	7e 40                	jle    c0006520 <find_object+0x17a>
c00064e0:	51                   	push   ecx
c00064e1:	51                   	push   ecx
c00064e2:	6a 2f                	push   0x2f
c00064e4:	57                   	push   edi
c00064e5:	e8 e6 a2 ff ff       	call   c00007d0 <strchr>
c00064ea:	83 c4 10             	add    esp,0x10
c00064ed:	85 c0                	test   eax,eax
c00064ef:	74 04                	je     c00064f5 <find_object+0x14f>
c00064f1:	29 f8                	sub    eax,edi
c00064f3:	eb 0c                	jmp    c0006501 <find_object+0x15b>
c00064f5:	83 ec 0c             	sub    esp,0xc
c00064f8:	57                   	push   edi
c00064f9:	e8 82 a0 ff ff       	call   c0000580 <strlen>
c00064fe:	83 c4 10             	add    esp,0x10
c0006501:	52                   	push   edx
c0006502:	50                   	push   eax
c0006503:	57                   	push   edi
c0006504:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006508:	50                   	push   eax
c0006509:	e8 38 fe ff ff       	call   c0006346 <strnicmp>
c000650e:	83 c4 10             	add    esp,0x10
c0006511:	e9 2b ff ff ff       	jmp    c0006441 <find_object+0x9b>
c0006516:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000651a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000651e:	eb 1e                	jmp    c000653e <find_object+0x198>
c0006520:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c0006524:	8d 43 21             	lea    eax,[ebx+0x21]
c0006527:	89 f9                	mov    ecx,edi
c0006529:	e8 a1 fc ff ff       	call   c00061cf <fncompare>
c000652e:	85 c0                	test   eax,eax
c0006530:	0f 85 13 ff ff ff    	jne    c0006449 <find_object+0xa3>
c0006536:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000653a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000653e:	0f 85 05 ff ff ff    	jne    c0006449 <find_object+0xa3>
c0006544:	81 c4 2c 01 00 00    	add    esp,0x12c
c000654a:	89 d8                	mov    eax,ebx
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	5f                   	pop    edi
c000654f:	5d                   	pop    ebp
c0006550:	c3                   	ret    

c0006551 <find_object_path>:
c0006551:	55                   	push   ebp
c0006552:	57                   	push   edi
c0006553:	89 d7                	mov    edi,edx
c0006555:	56                   	push   esi
c0006556:	89 c6                	mov    esi,eax
c0006558:	53                   	push   ebx
c0006559:	89 cb                	mov    ebx,ecx
c000655b:	83 ec 0c             	sub    esp,0xc
c000655e:	50                   	push   eax
c000655f:	50                   	push   eax
c0006560:	6a 2f                	push   0x2f
c0006562:	56                   	push   esi
c0006563:	e8 68 a2 ff ff       	call   c00007d0 <strchr>
c0006568:	83 c4 10             	add    esp,0x10
c000656b:	85 c0                	test   eax,eax
c000656d:	89 c5                	mov    ebp,eax
c000656f:	74 3a                	je     c00065ab <find_object_path+0x5a>
c0006571:	39 ee                	cmp    esi,ebp
c0006573:	74 31                	je     c00065a6 <find_object_path+0x55>
c0006575:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006578:	e8 b5 fb ff ff       	call   c0006132 <iso_733>
c000657d:	89 c2                	mov    edx,eax
c000657f:	8d 43 02             	lea    eax,[ebx+0x2]
c0006582:	e8 ab fb ff ff       	call   c0006132 <iso_733>
c0006587:	83 ec 0c             	sub    esp,0xc
c000658a:	52                   	push   edx
c000658b:	89 c1                	mov    ecx,eax
c000658d:	ba 01 00 00 00       	mov    edx,0x1
c0006592:	89 f0                	mov    eax,esi
c0006594:	e8 0d fe ff ff       	call   c00063a6 <find_object>
c0006599:	83 c4 10             	add    esp,0x10
c000659c:	85 c0                	test   eax,eax
c000659e:	89 c3                	mov    ebx,eax
c00065a0:	75 04                	jne    c00065a6 <find_object_path+0x55>
c00065a2:	31 db                	xor    ebx,ebx
c00065a4:	eb 36                	jmp    c00065dc <find_object_path+0x8b>
c00065a6:	8d 75 01             	lea    esi,[ebp+0x1]
c00065a9:	eb b3                	jmp    c000655e <find_object_path+0xd>
c00065ab:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00065ae:	74 28                	je     c00065d8 <find_object_path+0x87>
c00065b0:	8d 43 0a             	lea    eax,[ebx+0xa]
c00065b3:	e8 7a fb ff ff       	call   c0006132 <iso_733>
c00065b8:	89 c2                	mov    edx,eax
c00065ba:	8d 43 02             	lea    eax,[ebx+0x2]
c00065bd:	e8 70 fb ff ff       	call   c0006132 <iso_733>
c00065c2:	83 ec 0c             	sub    esp,0xc
c00065c5:	52                   	push   edx
c00065c6:	89 c1                	mov    ecx,eax
c00065c8:	89 fa                	mov    edx,edi
c00065ca:	89 f0                	mov    eax,esi
c00065cc:	e8 d5 fd ff ff       	call   c00063a6 <find_object>
c00065d1:	83 c4 10             	add    esp,0x10
c00065d4:	89 c3                	mov    ebx,eax
c00065d6:	eb 04                	jmp    c00065dc <find_object_path+0x8b>
c00065d8:	85 ff                	test   edi,edi
c00065da:	74 c6                	je     c00065a2 <find_object_path+0x51>
c00065dc:	83 c4 0c             	add    esp,0xc
c00065df:	89 d8                	mov    eax,ebx
c00065e1:	5b                   	pop    ebx
c00065e2:	5e                   	pop    esi
c00065e3:	5f                   	pop    edi
c00065e4:	5d                   	pop    ebp
c00065e5:	c3                   	ret    

c00065e6 <stricmp>:
c00065e6:	57                   	push   edi
c00065e7:	56                   	push   esi
c00065e8:	31 f6                	xor    esi,esi
c00065ea:	53                   	push   ebx
c00065eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ef:	83 ec 0c             	sub    esp,0xc
c00065f2:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00065f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065fa:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00065fe:	46                   	inc    esi
c00065ff:	50                   	push   eax
c0006600:	e8 5b a3 ff ff       	call   c0000960 <toupper>
c0006605:	89 04 24             	mov    DWORD PTR [esp],eax
c0006608:	e8 73 a3 ff ff       	call   c0000980 <tolower>
c000660d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0006610:	89 c3                	mov    ebx,eax
c0006612:	e8 49 a3 ff ff       	call   c0000960 <toupper>
c0006617:	89 04 24             	mov    DWORD PTR [esp],eax
c000661a:	e8 61 a3 ff ff       	call   c0000980 <tolower>
c000661f:	83 c4 10             	add    esp,0x10
c0006622:	39 c3                	cmp    ebx,eax
c0006624:	75 04                	jne    c000662a <stricmp+0x44>
c0006626:	85 db                	test   ebx,ebx
c0006628:	75 c1                	jne    c00065eb <stricmp+0x5>
c000662a:	29 c3                	sub    ebx,eax
c000662c:	89 d8                	mov    eax,ebx
c000662e:	5b                   	pop    ebx
c000662f:	5e                   	pop    esi
c0006630:	5f                   	pop    edi
c0006631:	c3                   	ret    

c0006632 <iso_open>:
c0006632:	57                   	push   edi
c0006633:	31 c0                	xor    eax,eax
c0006635:	56                   	push   esi
c0006636:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c000663b:	53                   	push   ebx
c000663c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006641:	0f 95 c0             	setne  al
c0006644:	89 c2                	mov    edx,eax
c0006646:	89 c6                	mov    esi,eax
c0006648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000664c:	e8 00 ff ff ff       	call   c0006551 <find_object_path>
c0006651:	83 ca ff             	or     edx,0xffffffff
c0006654:	85 c0                	test   eax,eax
c0006656:	74 5e                	je     c00066b6 <iso_open+0x84>
c0006658:	89 c1                	mov    ecx,eax
c000665a:	31 d2                	xor    edx,edx
c000665c:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006662:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c0006669:	75 42                	jne    c00066ad <iso_open+0x7b>
c000666b:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c0006675:	8d 41 02             	lea    eax,[ecx+0x2]
c0006678:	e8 b5 fa ff ff       	call   c0006132 <iso_733>
c000667d:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006683:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c000668d:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c0006693:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006696:	e8 97 fa ff ff       	call   c0006132 <iso_733>
c000669b:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c00066a5:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c00066ab:	eb 09                	jmp    c00066b6 <iso_open+0x84>
c00066ad:	42                   	inc    edx
c00066ae:	83 fa 10             	cmp    edx,0x10
c00066b1:	75 a9                	jne    c000665c <iso_open+0x2a>
c00066b3:	83 ca ff             	or     edx,0xffffffff
c00066b6:	5b                   	pop    ebx
c00066b7:	89 d0                	mov    eax,edx
c00066b9:	5e                   	pop    esi
c00066ba:	5f                   	pop    edi
c00066bb:	c3                   	ret    

c00066bc <iso_close>:
c00066bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00066c0:	83 f8 0f             	cmp    eax,0xf
c00066c3:	7f 10                	jg     c00066d5 <iso_close+0x19>
c00066c5:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00066cb:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00066d5:	e9 6d fb ff ff       	jmp    c0006247 <bclear_cache>

c00066da <iso_read>:
c00066da:	55                   	push   ebp
c00066db:	57                   	push   edi
c00066dc:	56                   	push   esi
c00066dd:	53                   	push   ebx
c00066de:	83 ec 1c             	sub    esp,0x1c
c00066e1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00066e5:	83 fd 0f             	cmp    ebp,0xf
c00066e8:	7e 0a                	jle    c00066f4 <iso_read+0x1a>
c00066ea:	83 c8 ff             	or     eax,0xffffffff
c00066ed:	89 c2                	mov    edx,eax
c00066ef:	e9 f4 00 00 00       	jmp    c00067e8 <iso_read+0x10e>
c00066f4:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00066fa:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006701:	74 e7                	je     c00066ea <iso_read+0x10>
c0006703:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c0006709:	85 d2                	test   edx,edx
c000670b:	75 dd                	jne    c00066ea <iso_read+0x10>
c000670d:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0006712:	0f 84 cd 00 00 00    	je     c00067e5 <iso_read+0x10b>
c0006718:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c000671e:	8b 9d 2c 6d 03 c0    	mov    ebx,DWORD PTR [ebp-0x3ffc92d4]
c0006724:	29 c3                	sub    ebx,eax
c0006726:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c000672a:	89 d9                	mov    ecx,ebx
c000672c:	0f 47 4c 24 38       	cmova  ecx,DWORD PTR [esp+0x38]
c0006731:	85 c9                	test   ecx,ecx
c0006733:	0f 84 ac 00 00 00    	je     c00067e5 <iso_read+0x10b>
c0006739:	89 c6                	mov    esi,eax
c000673b:	bb 00 08 00 00       	mov    ebx,0x800
c0006740:	c1 e8 0b             	shr    eax,0xb
c0006743:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006749:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c000674f:	29 f3                	sub    ebx,esi
c0006751:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006757:	75 3f                	jne    c0006798 <iso_read+0xbe>
c0006759:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c000675f:	7e 37                	jle    c0006798 <iso_read+0xbe>
c0006761:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006767:	be 20 00 00 00       	mov    esi,0x20
c000676c:	7f 05                	jg     c0006773 <iso_read+0x99>
c000676e:	89 ce                	mov    esi,ecx
c0006770:	c1 fe 0b             	sar    esi,0xb
c0006773:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006777:	89 f3                	mov    ebx,esi
c0006779:	52                   	push   edx
c000677a:	56                   	push   esi
c000677b:	50                   	push   eax
c000677c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006780:	c1 e3 0b             	shl    ebx,0xb
c0006783:	e8 23 fb ff ff       	call   c00062ab <isoReadDiscSector>
c0006788:	83 c4 10             	add    esp,0x10
c000678b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000678f:	85 c0                	test   eax,eax
c0006791:	7f 3d                	jg     c00067d0 <iso_read+0xf6>
c0006793:	e9 52 ff ff ff       	jmp    c00066ea <iso_read+0x10>
c0006798:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000679c:	39 d9                	cmp    ecx,ebx
c000679e:	0f 4e d9             	cmovle ebx,ecx
c00067a1:	e8 97 fb ff ff       	call   c000633d <bdread>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 88 3c ff ff ff    	js     c00066ea <iso_read+0x10>
c00067ae:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c00067b5:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00067bb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00067bf:	25 ff 07 00 00       	and    eax,0x7ff
c00067c4:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00067c8:	89 d9                	mov    ecx,ebx
c00067ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00067cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00067d0:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00067d4:	01 da                	add    edx,ebx
c00067d6:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c00067dc:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00067e0:	e9 28 ff ff ff       	jmp    c000670d <iso_read+0x33>
c00067e5:	89 d0                	mov    eax,edx
c00067e7:	99                   	cdq    
c00067e8:	83 c4 1c             	add    esp,0x1c
c00067eb:	5b                   	pop    ebx
c00067ec:	5e                   	pop    esi
c00067ed:	5f                   	pop    edi
c00067ee:	5d                   	pop    ebp
c00067ef:	c3                   	ret    

c00067f0 <iso_seek>:
c00067f0:	55                   	push   ebp
c00067f1:	83 c8 ff             	or     eax,0xffffffff
c00067f4:	57                   	push   edi
c00067f5:	89 c2                	mov    edx,eax
c00067f7:	56                   	push   esi
c00067f8:	53                   	push   ebx
c00067f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00067fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006801:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006805:	83 fe 0f             	cmp    esi,0xf
c0006808:	7f 65                	jg     c000686f <iso_seek+0x7f>
c000680a:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c0006810:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c0006817:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c000681d:	74 50                	je     c000686f <iso_seek+0x7f>
c000681f:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006826:	75 47                	jne    c000686f <iso_seek+0x7f>
c0006828:	83 fb 01             	cmp    ebx,0x1
c000682b:	74 0e                	je     c000683b <iso_seek+0x4b>
c000682d:	83 fb 02             	cmp    ebx,0x2
c0006830:	74 0e                	je     c0006840 <iso_seek+0x50>
c0006832:	85 db                	test   ebx,ebx
c0006834:	75 39                	jne    c000686f <iso_seek+0x7f>
c0006836:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006839:	eb 0d                	jmp    c0006848 <iso_seek+0x58>
c000683b:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000683e:	eb 08                	jmp    c0006848 <iso_seek+0x58>
c0006840:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006843:	01 f8                	add    eax,edi
c0006845:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006848:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000684e:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006854:	05 20 6d 03 c0       	add    eax,0xc0036d20
c0006859:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000685c:	76 03                	jbe    c0006861 <iso_seek+0x71>
c000685e:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006861:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006867:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c000686d:	31 d2                	xor    edx,edx
c000686f:	5b                   	pop    ebx
c0006870:	5e                   	pop    esi
c0006871:	5f                   	pop    edi
c0006872:	5d                   	pop    ebp
c0006873:	c3                   	ret    

c0006874 <iso_tell>:
c0006874:	53                   	push   ebx
c0006875:	83 c8 ff             	or     eax,0xffffffff
c0006878:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000687c:	89 c2                	mov    edx,eax
c000687e:	83 f9 0f             	cmp    ecx,0xf
c0006881:	7f 20                	jg     c00068a3 <iso_tell+0x2f>
c0006883:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006889:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006890:	74 11                	je     c00068a3 <iso_tell+0x2f>
c0006892:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c0006899:	75 08                	jne    c00068a3 <iso_tell+0x2f>
c000689b:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c00068a1:	31 d2                	xor    edx,edx
c00068a3:	5b                   	pop    ebx
c00068a4:	c3                   	ret    

c00068a5 <iso_total>:
c00068a5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00068a9:	83 c8 ff             	or     eax,0xffffffff
c00068ac:	83 fa 0f             	cmp    edx,0xf
c00068af:	7f 1e                	jg     c00068cf <iso_total+0x2a>
c00068b1:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c00068b7:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c00068be:	74 0f                	je     c00068cf <iso_total+0x2a>
c00068c0:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c00068c7:	75 06                	jne    c00068cf <iso_total+0x2a>
c00068c9:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c00068cf:	c3                   	ret    

c00068d0 <fn_postprocess>:
c00068d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00068d4:	89 d0                	mov    eax,edx
c00068d6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00068d9:	85 c9                	test   ecx,ecx
c00068db:	74 08                	je     c00068e5 <fn_postprocess+0x15>
c00068dd:	83 f9 3b             	cmp    ecx,0x3b
c00068e0:	74 03                	je     c00068e5 <fn_postprocess+0x15>
c00068e2:	40                   	inc    eax
c00068e3:	eb f1                	jmp    c00068d6 <fn_postprocess+0x6>
c00068e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00068e8:	39 d0                	cmp    eax,edx
c00068ea:	76 0a                	jbe    c00068f6 <fn_postprocess+0x26>
c00068ec:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00068f0:	75 04                	jne    c00068f6 <fn_postprocess+0x26>
c00068f2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00068f6:	c3                   	ret    

c00068f7 <iso_readdir>:
c00068f7:	55                   	push   ebp
c00068f8:	57                   	push   edi
c00068f9:	56                   	push   esi
c00068fa:	53                   	push   ebx
c00068fb:	83 ec 1c             	sub    esp,0x1c
c00068fe:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006902:	83 fb 0f             	cmp    ebx,0xf
c0006905:	7f 28                	jg     c000692f <iso_readdir+0x38>
c0006907:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000690d:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c0006914:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c000691a:	74 13                	je     c000692f <iso_readdir+0x38>
c000691c:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006920:	74 0d                	je     c000692f <iso_readdir+0x38>
c0006922:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006929:	0f 84 b1 00 00 00    	je     c00069e0 <iso_readdir+0xe9>
c000692f:	83 ec 0c             	sub    esp,0xc
c0006932:	68 80 f9 02 c0       	push   0xc002f980
c0006937:	e8 40 29 02 00       	call   c002927c <iso_kprintf>
c000693c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000693f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006945:	e8 4e 29 02 00       	call   c0029298 <iso_kprintfd>
c000694a:	c7 04 24 85 f9 02 c0 	mov    DWORD PTR [esp],0xc002f985
c0006951:	e8 26 29 02 00       	call   c002927c <iso_kprintf>
c0006956:	58                   	pop    eax
c0006957:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c000695d:	e8 36 29 02 00       	call   c0029298 <iso_kprintfd>
c0006962:	c7 04 24 8b f9 02 c0 	mov    DWORD PTR [esp],0xc002f98b
c0006969:	e8 0e 29 02 00       	call   c002927c <iso_kprintf>
c000696e:	58                   	pop    eax
c000696f:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006975:	e8 1e 29 02 00       	call   c0029298 <iso_kprintfd>
c000697a:	c7 04 24 91 f9 02 c0 	mov    DWORD PTR [esp],0xc002f991
c0006981:	e8 f6 28 02 00       	call   c002927c <iso_kprintf>
c0006986:	58                   	pop    eax
c0006987:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c000698d:	e8 06 29 02 00       	call   c0029298 <iso_kprintfd>
c0006992:	83 c4 10             	add    esp,0x10
c0006995:	eb 42                	jmp    c00069d9 <iso_readdir+0xe2>
c0006997:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000699a:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c00069a1:	89 d1                	mov    ecx,edx
c00069a3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00069a9:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c00069ad:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00069b0:	75 35                	jne    c00069e7 <iso_readdir+0xf0>
c00069b2:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c00069b8:	81 c2 00 08 00 00    	add    edx,0x800
c00069be:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00069c1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00069c4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00069c7:	73 1e                	jae    c00069e7 <iso_readdir+0xf0>
c00069c9:	8b 07                	mov    eax,DWORD PTR [edi]
c00069cb:	c1 ea 0b             	shr    edx,0xb
c00069ce:	01 d0                	add    eax,edx
c00069d0:	e8 5f f9 ff ff       	call   c0006334 <biread>
c00069d5:	85 c0                	test   eax,eax
c00069d7:	79 be                	jns    c0006997 <iso_readdir+0xa0>
c00069d9:	31 c0                	xor    eax,eax
c00069db:	e9 6a 01 00 00       	jmp    c0006b4a <iso_readdir+0x253>
c00069e0:	31 f6                	xor    esi,esi
c00069e2:	83 c8 ff             	or     eax,0xffffffff
c00069e5:	eb da                	jmp    c00069c1 <iso_readdir+0xca>
c00069e7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00069ed:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c00069f3:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c00069f9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00069fc:	73 db                	jae    c00069d9 <iso_readdir+0xe2>
c00069fe:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006a02:	75 34                	jne    c0006a38 <iso_readdir+0x141>
c0006a04:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006a08:	75 2e                	jne    c0006a38 <iso_readdir+0x141>
c0006a0a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006a0d:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006a14:	01 f9                	add    ecx,edi
c0006a16:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006a19:	89 c8                	mov    eax,ecx
c0006a1b:	25 ff 07 00 00       	and    eax,0x7ff
c0006a20:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006a25:	01 c8                	add    eax,ecx
c0006a27:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006a2a:	25 ff 07 00 00       	and    eax,0x7ff
c0006a2f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006a33:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a36:	74 a1                	je     c00069d9 <iso_readdir+0xe2>
c0006a38:	69 fb 94 00 00 00    	imul   edi,ebx,0x94
c0006a3e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006a42:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006a49:	8d 56 21             	lea    edx,[esi+0x21]
c0006a4c:	8d af 38 6d 03 c0    	lea    ebp,[edi-0x3ffc92c8]
c0006a52:	74 0c                	je     c0006a60 <iso_readdir+0x169>
c0006a54:	89 e8                	mov    eax,ebp
c0006a56:	e8 27 f6 ff ff       	call   c0006082 <ucs2utfn>
c0006a5b:	e9 b1 00 00 00       	jmp    c0006b11 <iso_readdir+0x21a>
c0006a60:	50                   	push   eax
c0006a61:	51                   	push   ecx
c0006a62:	52                   	push   edx
c0006a63:	55                   	push   ebp
c0006a64:	e8 27 9c ff ff       	call   c0000690 <strncpy>
c0006a69:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006a6d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006a70:	c6 84 07 38 6d 03 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffc92c8],0x0
c0006a78:	e8 53 fe ff ff       	call   c00068d0 <fn_postprocess>
c0006a7d:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006a81:	83 c4 10             	add    esp,0x10
c0006a84:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a87:	89 d1                	mov    ecx,edx
c0006a89:	29 d0                	sub    eax,edx
c0006a8b:	80 e1 01             	and    cl,0x1
c0006a8e:	8d 54 16 21          	lea    edx,[esi+edx*1+0x21]
c0006a92:	74 05                	je     c0006a99 <iso_readdir+0x1a2>
c0006a94:	83 e8 21             	sub    eax,0x21
c0006a97:	eb 04                	jmp    c0006a9d <iso_readdir+0x1a6>
c0006a99:	42                   	inc    edx
c0006a9a:	83 e8 22             	sub    eax,0x22
c0006a9d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006aa1:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006aa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006aab:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006ab0:	7e 5f                	jle    c0006b11 <iso_readdir+0x21a>
c0006ab2:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006ab5:	48                   	dec    eax
c0006ab6:	3c 01                	cmp    al,0x1
c0006ab8:	77 57                	ja     c0006b11 <iso_readdir+0x21a>
c0006aba:	51                   	push   ecx
c0006abb:	6a 02                	push   0x2
c0006abd:	68 7d f9 02 c0       	push   0xc002f97d
c0006ac2:	52                   	push   edx
c0006ac3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006ac7:	e8 44 9d ff ff       	call   c0000810 <strncmp>
c0006acc:	83 c4 10             	add    esp,0x10
c0006acf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006ad3:	85 c0                	test   eax,eax
c0006ad5:	75 2e                	jne    c0006b05 <iso_readdir+0x20e>
c0006ad7:	50                   	push   eax
c0006ad8:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006adc:	83 e8 05             	sub    eax,0x5
c0006adf:	50                   	push   eax
c0006ae0:	8d 42 05             	lea    eax,[edx+0x5]
c0006ae3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006ae7:	50                   	push   eax
c0006ae8:	55                   	push   ebp
c0006ae9:	e8 a2 9b ff ff       	call   c0000690 <strncpy>
c0006aee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006af2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006afd:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006b05:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006b09:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006b0d:	01 c2                	add    edx,eax
c0006b0f:	eb 9a                	jmp    c0006aab <iso_readdir+0x1b4>
c0006b11:	83 c8 ff             	or     eax,0xffffffff
c0006b14:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006b18:	89 c2                	mov    edx,eax
c0006b1a:	75 0a                	jne    c0006b26 <iso_readdir+0x22f>
c0006b1c:	8d 46 0a             	lea    eax,[esi+0xa]
c0006b1f:	e8 0e f6 ff ff       	call   c0006132 <iso_733>
c0006b24:	31 d2                	xor    edx,edx
c0006b26:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006b2c:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006b32:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006b38:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006b3e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b41:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006b44:	8d 87 30 6d 03 c0    	lea    eax,[edi-0x3ffc92d0]
c0006b4a:	83 c4 1c             	add    esp,0x1c
c0006b4d:	5b                   	pop    ebx
c0006b4e:	5e                   	pop    esi
c0006b4f:	5f                   	pop    edi
c0006b50:	5d                   	pop    ebp
c0006b51:	c3                   	ret    

c0006b52 <iso_reset>:
c0006b52:	83 ec 18             	sub    esp,0x18
c0006b55:	68 9a f9 02 c0       	push   0xc002f99a
c0006b5a:	e8 1d 27 02 00       	call   c002927c <iso_kprintf>
c0006b5f:	e8 1b f7 ff ff       	call   c000627f <iso_break_all>
c0006b64:	e8 14 f7 ff ff       	call   c000627d <bclear>
c0006b69:	31 c0                	xor    eax,eax
c0006b6b:	83 c4 1c             	add    esp,0x1c
c0006b6e:	c3                   	ret    

c0006b6f <init_percd>:
c0006b6f:	57                   	push   edi
c0006b70:	56                   	push   esi
c0006b71:	53                   	push   ebx
c0006b72:	bb 01 00 00 00       	mov    ebx,0x1
c0006b77:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0006b7b:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006b80:	e8 cd ff ff ff       	call   c0006b52 <iso_reset>
c0006b85:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006b8f:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b94:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006b98:	e8 97 f7 ff ff       	call   c0006334 <biread>
c0006b9d:	85 c0                	test   eax,eax
c0006b9f:	89 c6                	mov    esi,eax
c0006ba1:	0f 88 ba 00 00 00    	js     c0006c61 <init_percd+0xf2>
c0006ba7:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006bae:	52                   	push   edx
c0006baf:	6a 06                	push   0x6
c0006bb1:	68 a5 f9 02 c0       	push   0xc002f9a5
c0006bb6:	83 c0 04             	add    eax,0x4
c0006bb9:	50                   	push   eax
c0006bba:	e8 c1 97 ff ff       	call   c0000380 <memcmp>
c0006bbf:	83 c4 10             	add    esp,0x10
c0006bc2:	85 c0                	test   eax,eax
c0006bc4:	74 08                	je     c0006bce <init_percd+0x5f>
c0006bc6:	43                   	inc    ebx
c0006bc7:	83 fb 04             	cmp    ebx,0x4
c0006bca:	75 c3                	jne    c0006b8f <init_percd+0x20>
c0006bcc:	eb 1a                	jmp    c0006be8 <init_percd+0x79>
c0006bce:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006bd5:	83 c0 5c             	add    eax,0x5c
c0006bd8:	e8 22 f5 ff ff       	call   c00060ff <isjoliet>
c0006bdd:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006be2:	85 c0                	test   eax,eax
c0006be4:	74 e0                	je     c0006bc6 <init_percd+0x57>
c0006be6:	eb 3e                	jmp    c0006c26 <init_percd+0xb7>
c0006be8:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006bef:	75 35                	jne    c0006c26 <init_percd+0xb7>
c0006bf1:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006bf6:	83 c0 10             	add    eax,0x10
c0006bf9:	e8 36 f7 ff ff       	call   c0006334 <biread>
c0006bfe:	85 c0                	test   eax,eax
c0006c00:	89 c6                	mov    esi,eax
c0006c02:	78 5f                	js     c0006c63 <init_percd+0xf4>
c0006c04:	50                   	push   eax
c0006c05:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006c0c:	83 cb ff             	or     ebx,0xffffffff
c0006c0f:	6a 06                	push   0x6
c0006c11:	68 ac f9 02 c0       	push   0xc002f9ac
c0006c16:	83 c0 04             	add    eax,0x4
c0006c19:	50                   	push   eax
c0006c1a:	e8 61 97 ff ff       	call   c0000380 <memcmp>
c0006c1f:	83 c4 10             	add    esp,0x10
c0006c22:	85 c0                	test   eax,eax
c0006c24:	75 3d                	jne    c0006c63 <init_percd+0xf4>
c0006c26:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006c2d:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006c32:	b9 22 00 00 00       	mov    ecx,0x22
c0006c37:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006c3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c3f:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006c44:	31 db                	xor    ebx,ebx
c0006c46:	e8 e7 f4 ff ff       	call   c0006132 <iso_733>
c0006c4b:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006c50:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006c55:	e8 d8 f4 ff ff       	call   c0006132 <iso_733>
c0006c5a:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006c5f:	eb 02                	jmp    c0006c63 <init_percd+0xf4>
c0006c61:	89 c3                	mov    ebx,eax
c0006c63:	89 d8                	mov    eax,ebx
c0006c65:	5b                   	pop    ebx
c0006c66:	5e                   	pop    esi
c0006c67:	5f                   	pop    edi
c0006c68:	c3                   	ret    

c0006c69 <iso_ioctl>:
c0006c69:	83 ec 18             	sub    esp,0x18
c0006c6c:	68 b3 f9 02 c0       	push   0xc002f9b3
c0006c71:	e8 06 26 02 00       	call   c002927c <iso_kprintf>
c0006c76:	e8 d7 fe ff ff       	call   c0006b52 <iso_reset>
c0006c7b:	31 c0                	xor    eax,eax
c0006c7d:	83 c4 1c             	add    esp,0x1c
c0006c80:	c3                   	ret    

c0006c81 <fs_iso9660_init>:
c0006c81:	53                   	push   ebx
c0006c82:	31 db                	xor    ebx,ebx
c0006c84:	83 ec 14             	sub    esp,0x14
c0006c87:	68 be f9 02 c0       	push   0xc002f9be
c0006c8c:	e8 eb 25 02 00       	call   c002927c <iso_kprintf>
c0006c91:	83 c4 0c             	add    esp,0xc
c0006c94:	68 40 09 00 00       	push   0x940
c0006c99:	6a 00                	push   0x0
c0006c9b:	68 20 6d 03 c0       	push   0xc0036d20
c0006ca0:	e8 4b 98 ff ff       	call   c00004f0 <memset>
c0006ca5:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006caf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006cb6:	e8 28 f7 00 00       	call   c00163e3 <malloc>
c0006cbb:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006cc2:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006cc7:	e8 17 f7 00 00       	call   c00163e3 <malloc>
c0006ccc:	83 c4 10             	add    esp,0x10
c0006ccf:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006cd4:	83 ec 0c             	sub    esp,0xc
c0006cd7:	68 04 08 00 00       	push   0x804
c0006cdc:	e8 02 f7 00 00       	call   c00163e3 <malloc>
c0006ce1:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006ce8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006cee:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006cf5:	e8 e9 f6 00 00       	call   c00163e3 <malloc>
c0006cfa:	83 c4 10             	add    esp,0x10
c0006cfd:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006d04:	43                   	inc    ebx
c0006d05:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006d0b:	83 fb 10             	cmp    ebx,0x10
c0006d0e:	75 c4                	jne    c0006cd4 <fs_iso9660_init+0x53>
c0006d10:	83 c4 08             	add    esp,0x8
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	5b                   	pop    ebx
c0006d16:	c3                   	ret    

c0006d17 <fs_iso9660_shutdown>:
c0006d17:	53                   	push   ebx
c0006d18:	31 db                	xor    ebx,ebx
c0006d1a:	83 ec 08             	sub    esp,0x8
c0006d1d:	83 ec 0c             	sub    esp,0xc
c0006d20:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006d27:	e8 c7 f6 00 00       	call   c00163f3 <free>
c0006d2c:	58                   	pop    eax
c0006d2d:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006d34:	43                   	inc    ebx
c0006d35:	e8 b9 f6 00 00       	call   c00163f3 <free>
c0006d3a:	83 c4 10             	add    esp,0x10
c0006d3d:	83 fb 10             	cmp    ebx,0x10
c0006d40:	75 db                	jne    c0006d1d <fs_iso9660_shutdown+0x6>
c0006d42:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006d47:	85 c0                	test   eax,eax
c0006d49:	74 0c                	je     c0006d57 <fs_iso9660_shutdown+0x40>
c0006d4b:	83 ec 0c             	sub    esp,0xc
c0006d4e:	50                   	push   eax
c0006d4f:	e8 9f f6 00 00       	call   c00163f3 <free>
c0006d54:	83 c4 10             	add    esp,0x10
c0006d57:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006d5c:	85 c0                	test   eax,eax
c0006d5e:	74 0c                	je     c0006d6c <fs_iso9660_shutdown+0x55>
c0006d60:	83 ec 0c             	sub    esp,0xc
c0006d63:	50                   	push   eax
c0006d64:	e8 8a f6 00 00       	call   c00163f3 <free>
c0006d69:	83 c4 10             	add    esp,0x10
c0006d6c:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006d76:	31 c0                	xor    eax,eax
c0006d78:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006d82:	83 c4 08             	add    esp,0x8
c0006d85:	5b                   	pop    ebx
c0006d86:	c3                   	ret    
c0006d87:	90                   	nop

c0006d88 <lwip_init>:
c0006d88:	83 ec 0c             	sub    esp,0xc
c0006d8b:	e8 58 2c 00 00       	call   c00099e8 <stats_init>
c0006d90:	e8 8b 9f ff ff       	call   c0000d20 <sys_init>
c0006d95:	e8 ae 01 00 00       	call   c0006f48 <mem_init>
c0006d9a:	e8 05 0a 00 00       	call   c00077a4 <memp_init>
c0006d9f:	e8 e8 0c 00 00       	call   c0007a8c <netif_init>
c0006da4:	e8 c7 9e ff ff       	call   c0000c70 <lwip_socket_init>
c0006da9:	e8 02 9e 00 00       	call   c0010bb0 <sys_timeouts_init>
c0006dae:	90                   	nop
c0006daf:	83 c4 0c             	add    esp,0xc
c0006db2:	c3                   	ret    
c0006db3:	90                   	nop

c0006db4 <plug_holes>:
c0006db4:	83 ec 1c             	sub    esp,0x1c
c0006db7:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006dbc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006dc0:	73 16                	jae    c0006dd8 <plug_holes+0x24>
c0006dc2:	83 ec 08             	sub    esp,0x8
c0006dc5:	68 cf f9 02 c0       	push   0xc002f9cf
c0006dca:	68 e6 f9 02 c0       	push   0xc002f9e6
c0006dcf:	e8 fc 8c 01 00       	call   c001fad0 <CPrintf>
c0006dd4:	83 c4 10             	add    esp,0x10
c0006dd7:	90                   	nop
c0006dd8:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006ddd:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006de1:	72 15                	jb     c0006df8 <plug_holes+0x44>
c0006de3:	83 ec 08             	sub    esp,0x8
c0006de6:	68 f3 f9 02 c0       	push   0xc002f9f3
c0006deb:	68 e6 f9 02 c0       	push   0xc002f9e6
c0006df0:	e8 db 8c 01 00       	call   c001fad0 <CPrintf>
c0006df5:	83 c4 10             	add    esp,0x10
c0006df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dfc:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006dff:	0f b6 c0             	movzx  eax,al
c0006e02:	85 c0                	test   eax,eax
c0006e04:	74 16                	je     c0006e1c <plug_holes+0x68>
c0006e06:	83 ec 08             	sub    esp,0x8
c0006e09:	68 0d fa 02 c0       	push   0xc002fa0d
c0006e0e:	68 e6 f9 02 c0       	push   0xc002f9e6
c0006e13:	e8 b8 8c 01 00       	call   c001fad0 <CPrintf>
c0006e18:	83 c4 10             	add    esp,0x10
c0006e1b:	90                   	nop
c0006e1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e20:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	3d 40 06 00 00       	cmp    eax,0x640
c0006e2b:	76 17                	jbe    c0006e44 <plug_holes+0x90>
c0006e2d:	83 ec 08             	sub    esp,0x8
c0006e30:	68 a0 fa 02 c0       	push   0xc002faa0
c0006e35:	68 e6 f9 02 c0       	push   0xc002f9e6
c0006e3a:	e8 91 8c 01 00       	call   c001fad0 <CPrintf>
c0006e3f:	83 c4 10             	add    esp,0x10
c0006e42:	66 90                	xchg   ax,ax
c0006e44:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e4e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e51:	0f b7 c0             	movzx  eax,ax
c0006e54:	01 d0                	add    eax,edx
c0006e56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006e62:	74 64                	je     c0006ec8 <plug_holes+0x114>
c0006e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e68:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e6b:	0f b6 c0             	movzx  eax,al
c0006e6e:	85 c0                	test   eax,eax
c0006e70:	75 56                	jne    c0006ec8 <plug_holes+0x114>
c0006e72:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e77:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e7b:	74 4b                	je     c0006ec8 <plug_holes+0x114>
c0006e7d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e82:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e86:	75 0c                	jne    c0006e94 <plug_holes+0xe0>
c0006e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e8c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e91:	8d 76 00             	lea    esi,[esi+0x0]
c0006e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e98:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e9f:	66 89 10             	mov    WORD PTR [eax],dx
c0006ea2:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006ea7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006eab:	89 d1                	mov    ecx,edx
c0006ead:	29 c1                	sub    ecx,eax
c0006eaf:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006eb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006eb9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006ebc:	0f b7 c0             	movzx  eax,ax
c0006ebf:	01 d0                	add    eax,edx
c0006ec1:	89 ca                	mov    edx,ecx
c0006ec3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006ec7:	90                   	nop
c0006ec8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ed2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006ed6:	0f b7 c0             	movzx  eax,ax
c0006ed9:	01 d0                	add    eax,edx
c0006edb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006edf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ee3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006ee7:	74 57                	je     c0006f40 <plug_holes+0x18c>
c0006ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eed:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ef0:	0f b6 c0             	movzx  eax,al
c0006ef3:	85 c0                	test   eax,eax
c0006ef5:	75 49                	jne    c0006f40 <plug_holes+0x18c>
c0006ef7:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006efc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006f00:	75 0a                	jne    c0006f0c <plug_holes+0x158>
c0006f02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f06:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f0b:	90                   	nop
c0006f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f10:	66 8b 10             	mov    dx,WORD PTR [eax]
c0006f13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f17:	66 89 10             	mov    WORD PTR [eax],dx
c0006f1a:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f23:	89 d1                	mov    ecx,edx
c0006f25:	29 c1                	sub    ecx,eax
c0006f27:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006f31:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f34:	0f b7 c0             	movzx  eax,ax
c0006f37:	01 d0                	add    eax,edx
c0006f39:	89 ca                	mov    edx,ecx
c0006f3b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0006f3f:	90                   	nop
c0006f40:	90                   	nop
c0006f41:	83 c4 1c             	add    esp,0x1c
c0006f44:	c3                   	ret    
c0006f45:	8d 76 00             	lea    esi,[esi+0x0]

c0006f48 <mem_init>:
c0006f48:	83 ec 1c             	sub    esp,0x1c
c0006f4b:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006f55:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f62:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f6b:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006f71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f75:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0006f79:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f7e:	05 40 06 00 00       	add    eax,0x640
c0006f83:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0006f88:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f8d:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0006f91:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f96:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f9b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006fa0:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0006fa6:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fab:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006fb0:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0006fb9:	83 ec 0c             	sub    esp,0xc
c0006fbc:	68 98 76 03 c0       	push   0xc0037698
c0006fc1:	e8 ae 9c ff ff       	call   c0000c74 <sys_mutex_new>
c0006fc6:	83 c4 10             	add    esp,0x10
c0006fc9:	0f be c0             	movsx  eax,al
c0006fcc:	85 c0                	test   eax,eax
c0006fce:	74 18                	je     c0006fe8 <mem_init+0xa0>
c0006fd0:	83 ec 08             	sub    esp,0x8
c0006fd3:	68 28 fa 02 c0       	push   0xc002fa28
c0006fd8:	68 e6 f9 02 c0       	push   0xc002f9e6
c0006fdd:	e8 ee 8a 01 00       	call   c001fad0 <CPrintf>
c0006fe2:	83 c4 10             	add    esp,0x10
c0006fe5:	8d 76 00             	lea    esi,[esi+0x0]
c0006fe8:	90                   	nop
c0006fe9:	83 c4 1c             	add    esp,0x1c
c0006fec:	c3                   	ret    
c0006fed:	8d 76 00             	lea    esi,[esi+0x0]

c0006ff0 <mem_free>:
c0006ff0:	83 ec 1c             	sub    esp,0x1c
c0006ff3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0006ff8:	0f 84 0e 01 00 00    	je     c000710c <mem_free+0x11c>
c0006ffe:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007003:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007007:	72 0b                	jb     c0007014 <mem_free+0x24>
c0007009:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000700e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007012:	72 18                	jb     c000702c <mem_free+0x3c>
c0007014:	83 ec 08             	sub    esp,0x8
c0007017:	68 43 fa 02 c0       	push   0xc002fa43
c000701c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0007021:	e8 aa 8a 01 00       	call   c001fad0 <CPrintf>
c0007026:	83 c4 10             	add    esp,0x10
c0007029:	8d 76 00             	lea    esi,[esi+0x0]
c000702c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007031:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007035:	72 0d                	jb     c0007044 <mem_free+0x54>
c0007037:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000703c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007040:	72 22                	jb     c0007064 <mem_free+0x74>
c0007042:	66 90                	xchg   ax,ax
c0007044:	e8 77 8a 01 00       	call   c001fac0 <CLockScheduler>
c0007049:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000704f:	83 c0 01             	add    eax,0x1
c0007052:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007058:	e8 47 8a 01 00       	call   c001faa4 <CUnlockScheduler>
c000705d:	e9 ae 00 00 00       	jmp    c0007110 <mem_free+0x120>
c0007062:	66 90                	xchg   ax,ax
c0007064:	83 ec 0c             	sub    esp,0xc
c0007067:	68 98 76 03 c0       	push   0xc0037698
c000706c:	e8 07 9c ff ff       	call   c0000c78 <sys_mutex_lock>
c0007071:	83 c4 10             	add    esp,0x10
c0007074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007078:	83 e8 06             	sub    eax,0x6
c000707b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000707f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007083:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007086:	0f b6 c0             	movzx  eax,al
c0007089:	85 c0                	test   eax,eax
c000708b:	75 17                	jne    c00070a4 <mem_free+0xb4>
c000708d:	83 ec 08             	sub    esp,0x8
c0007090:	68 5a fa 02 c0       	push   0xc002fa5a
c0007095:	68 e6 f9 02 c0       	push   0xc002f9e6
c000709a:	e8 31 8a 01 00       	call   c001fad0 <CPrintf>
c000709f:	83 c4 10             	add    esp,0x10
c00070a2:	66 90                	xchg   ax,ax
c00070a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070a8:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00070ac:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00070b1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00070b5:	73 09                	jae    c00070c0 <mem_free+0xd0>
c00070b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bb:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00070c0:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c00070c7:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00070cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070d0:	29 c1                	sub    ecx,eax
c00070d2:	89 c8                	mov    eax,ecx
c00070d4:	89 c1                	mov    ecx,eax
c00070d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00070dd:	29 c1                	sub    ecx,eax
c00070df:	89 c8                	mov    eax,ecx
c00070e1:	01 d0                	add    eax,edx
c00070e3:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00070e9:	83 ec 0c             	sub    esp,0xc
c00070ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f0:	e8 bf fc ff ff       	call   c0006db4 <plug_holes>
c00070f5:	83 c4 10             	add    esp,0x10
c00070f8:	83 ec 0c             	sub    esp,0xc
c00070fb:	68 98 76 03 c0       	push   0xc0037698
c0007100:	e8 77 9b ff ff       	call   c0000c7c <sys_mutex_unlock>
c0007105:	83 c4 10             	add    esp,0x10
c0007108:	eb 06                	jmp    c0007110 <mem_free+0x120>
c000710a:	66 90                	xchg   ax,ax
c000710c:	90                   	nop
c000710d:	8d 76 00             	lea    esi,[esi+0x0]
c0007110:	83 c4 1c             	add    esp,0x1c
c0007113:	c3                   	ret    

c0007114 <mem_trim>:
c0007114:	83 ec 2c             	sub    esp,0x2c
c0007117:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000711b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007120:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007125:	83 f8 0b             	cmp    eax,0xb
c0007128:	77 0a                	ja     c0007134 <mem_trim+0x20>
c000712a:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007131:	8d 76 00             	lea    esi,[esi+0x0]
c0007134:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007139:	3d 40 06 00 00       	cmp    eax,0x640
c000713e:	76 0c                	jbe    c000714c <mem_trim+0x38>
c0007140:	b8 00 00 00 00       	mov    eax,0x0
c0007145:	e9 d2 02 00 00       	jmp    c000741c <mem_trim+0x308>
c000714a:	66 90                	xchg   ax,ax
c000714c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007151:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007155:	72 0d                	jb     c0007164 <mem_trim+0x50>
c0007157:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000715c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007160:	72 1a                	jb     c000717c <mem_trim+0x68>
c0007162:	66 90                	xchg   ax,ax
c0007164:	83 ec 08             	sub    esp,0x8
c0007167:	68 6e fa 02 c0       	push   0xc002fa6e
c000716c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0007171:	e8 5a 89 01 00       	call   c001fad0 <CPrintf>
c0007176:	83 c4 10             	add    esp,0x10
c0007179:	8d 76 00             	lea    esi,[esi+0x0]
c000717c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007181:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007185:	72 0d                	jb     c0007194 <mem_trim+0x80>
c0007187:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000718c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007190:	72 26                	jb     c00071b8 <mem_trim+0xa4>
c0007192:	66 90                	xchg   ax,ax
c0007194:	e8 27 89 01 00       	call   c001fac0 <CLockScheduler>
c0007199:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000719f:	83 c0 01             	add    eax,0x1
c00071a2:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c00071a8:	e8 f7 88 01 00       	call   c001faa4 <CUnlockScheduler>
c00071ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00071b1:	e9 66 02 00 00       	jmp    c000741c <mem_trim+0x308>
c00071b6:	66 90                	xchg   ax,ax
c00071b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00071bc:	83 e8 06             	sub    eax,0x6
c00071bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00071c3:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c00071c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00071cc:	29 c2                	sub    edx,eax
c00071ce:	89 d0                	mov    eax,edx
c00071d0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00071d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00071d9:	66 8b 10             	mov    dx,WORD PTR [eax]
c00071dc:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00071e1:	89 d1                	mov    ecx,edx
c00071e3:	29 c1                	sub    ecx,eax
c00071e5:	89 c8                	mov    eax,ecx
c00071e7:	83 e8 06             	sub    eax,0x6
c00071ea:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00071ef:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071f4:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071f9:	39 c2                	cmp    edx,eax
c00071fb:	76 17                	jbe    c0007214 <mem_trim+0x100>
c00071fd:	83 ec 08             	sub    esp,0x8
c0007200:	68 cc fa 02 c0       	push   0xc002facc
c0007205:	68 e6 f9 02 c0       	push   0xc002f9e6
c000720a:	e8 c1 88 01 00       	call   c001fad0 <CPrintf>
c000720f:	83 c4 10             	add    esp,0x10
c0007212:	66 90                	xchg   ax,ax
c0007214:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007219:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000721e:	39 c2                	cmp    edx,eax
c0007220:	76 0a                	jbe    c000722c <mem_trim+0x118>
c0007222:	b8 00 00 00 00       	mov    eax,0x0
c0007227:	e9 f0 01 00 00       	jmp    c000741c <mem_trim+0x308>
c000722c:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007231:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007236:	39 c2                	cmp    edx,eax
c0007238:	75 0a                	jne    c0007244 <mem_trim+0x130>
c000723a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000723e:	e9 d9 01 00 00       	jmp    c000741c <mem_trim+0x308>
c0007243:	90                   	nop
c0007244:	83 ec 0c             	sub    esp,0xc
c0007247:	68 98 76 03 c0       	push   0xc0037698
c000724c:	e8 27 9a ff ff       	call   c0000c78 <sys_mutex_lock>
c0007251:	83 c4 10             	add    esp,0x10
c0007254:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000725a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000725e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007261:	0f b7 c0             	movzx  eax,ax
c0007264:	01 d0                	add    eax,edx
c0007266:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000726a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000726e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007271:	0f b6 c0             	movzx  eax,al
c0007274:	85 c0                	test   eax,eax
c0007276:	0f 85 c4 00 00 00    	jne    c0007340 <mem_trim+0x22c>
c000727c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007280:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007283:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0007288:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000728d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007291:	01 d0                	add    eax,edx
c0007293:	83 c0 06             	add    eax,0x6
c0007296:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000729b:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00072a0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00072a4:	75 12                	jne    c00072b8 <mem_trim+0x1a4>
c00072a6:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072ac:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00072b1:	01 d0                	add    eax,edx
c00072b3:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c00072b8:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072be:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00072c3:	01 d0                	add    eax,edx
c00072c5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072cd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072d5:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00072da:	66 89 10             	mov    WORD PTR [eax],dx
c00072dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072e1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00072e6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00072ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00072ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00072f2:	66 89 10             	mov    WORD PTR [eax],dx
c00072f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072fc:	0f b7 c0             	movzx  eax,ax
c00072ff:	3d 40 06 00 00       	cmp    eax,0x640
c0007304:	74 1a                	je     c0007320 <mem_trim+0x20c>
c0007306:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000730c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007310:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007313:	0f b7 c0             	movzx  eax,ax
c0007316:	01 c2                	add    edx,eax
c0007318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000731c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007320:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007326:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000732a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000732e:	29 d1                	sub    ecx,edx
c0007330:	89 ca                	mov    edx,ecx
c0007332:	01 d0                	add    eax,edx
c0007334:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000733a:	e9 c9 00 00 00       	jmp    c0007408 <mem_trim+0x2f4>
c000733f:	90                   	nop
c0007340:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007345:	8d 50 12             	lea    edx,[eax+0x12]
c0007348:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c000734d:	39 c2                	cmp    edx,eax
c000734f:	0f 87 b3 00 00 00    	ja     c0007408 <mem_trim+0x2f4>
c0007355:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000735a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000735e:	01 d0                	add    eax,edx
c0007360:	83 c0 06             	add    eax,0x6
c0007363:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c0007368:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000736e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007373:	01 d0                	add    eax,edx
c0007375:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007379:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c000737e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007382:	73 0c                	jae    c0007390 <mem_trim+0x27c>
c0007384:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007388:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000738d:	8d 76 00             	lea    esi,[esi+0x0]
c0007390:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007394:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007398:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000739c:	66 8b 10             	mov    dx,WORD PTR [eax]
c000739f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073a3:	66 89 10             	mov    WORD PTR [eax],dx
c00073a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073aa:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00073af:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00073b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00073b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00073bb:	66 89 10             	mov    WORD PTR [eax],dx
c00073be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073c2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073c5:	0f b7 c0             	movzx  eax,ax
c00073c8:	3d 40 06 00 00       	cmp    eax,0x640
c00073cd:	74 1d                	je     c00073ec <mem_trim+0x2d8>
c00073cf:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073dc:	0f b7 c0             	movzx  eax,ax
c00073df:	01 c2                	add    edx,eax
c00073e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073e5:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073e9:	8d 76 00             	lea    esi,[esi+0x0]
c00073ec:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073fa:	29 d1                	sub    ecx,edx
c00073fc:	89 ca                	mov    edx,ecx
c00073fe:	01 d0                	add    eax,edx
c0007400:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007406:	66 90                	xchg   ax,ax
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 98 76 03 c0       	push   0xc0037698
c0007410:	e8 67 98 ff ff       	call   c0000c7c <sys_mutex_unlock>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000741c:	83 c4 2c             	add    esp,0x2c
c000741f:	c3                   	ret    

c0007420 <mem_malloc>:
c0007420:	53                   	push   ebx
c0007421:	83 ec 28             	sub    esp,0x28
c0007424:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007428:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000742d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007432:	85 c0                	test   eax,eax
c0007434:	75 0a                	jne    c0007440 <mem_malloc+0x20>
c0007436:	b8 00 00 00 00       	mov    eax,0x0
c000743b:	e9 f8 02 00 00       	jmp    c0007738 <mem_malloc+0x318>
c0007440:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007445:	83 f8 0b             	cmp    eax,0xb
c0007448:	77 0a                	ja     c0007454 <mem_malloc+0x34>
c000744a:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007451:	8d 76 00             	lea    esi,[esi+0x0]
c0007454:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007459:	3d 40 06 00 00       	cmp    eax,0x640
c000745e:	76 0c                	jbe    c000746c <mem_malloc+0x4c>
c0007460:	b8 00 00 00 00       	mov    eax,0x0
c0007465:	e9 ce 02 00 00       	jmp    c0007738 <mem_malloc+0x318>
c000746a:	66 90                	xchg   ax,ax
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	68 98 76 03 c0       	push   0xc0037698
c0007474:	e8 ff 97 ff ff       	call   c0000c78 <sys_mutex_lock>
c0007479:	83 c4 10             	add    esp,0x10
c000747c:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007482:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007487:	29 c2                	sub    edx,eax
c0007489:	89 d0                	mov    eax,edx
c000748b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007490:	e9 63 02 00 00       	jmp    c00076f8 <mem_malloc+0x2d8>
c0007495:	8d 76 00             	lea    esi,[esi+0x0]
c0007498:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000749e:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074a3:	01 d0                	add    eax,edx
c00074a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ad:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c00074b0:	0f b6 c0             	movzx  eax,al
c00074b3:	85 c0                	test   eax,eax
c00074b5:	0f 85 25 02 00 00    	jne    c00076e0 <mem_malloc+0x2c0>
c00074bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074bf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074c2:	0f b7 d0             	movzx  edx,ax
c00074c5:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074ca:	29 c2                	sub    edx,eax
c00074cc:	89 d0                	mov    eax,edx
c00074ce:	8d 50 fa             	lea    edx,[eax-0x6]
c00074d1:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074d6:	39 c2                	cmp    edx,eax
c00074d8:	0f 82 02 02 00 00    	jb     c00076e0 <mem_malloc+0x2c0>
c00074de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074e2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074e5:	0f b7 d0             	movzx  edx,ax
c00074e8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074ed:	29 c2                	sub    edx,eax
c00074ef:	89 d0                	mov    eax,edx
c00074f1:	8d 50 fa             	lea    edx,[eax-0x6]
c00074f4:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074f9:	83 c0 12             	add    eax,0x12
c00074fc:	39 c2                	cmp    edx,eax
c00074fe:	0f 82 c4 00 00 00    	jb     c00075c8 <mem_malloc+0x1a8>
c0007504:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007509:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000750d:	01 d0                	add    eax,edx
c000750f:	83 c0 06             	add    eax,0x6
c0007512:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0007517:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000751d:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0007522:	01 d0                	add    eax,edx
c0007524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000752c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007530:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007534:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000753b:	66 89 10             	mov    WORD PTR [eax],dx
c000753e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007542:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0007547:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000754b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000754f:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0007554:	66 89 10             	mov    WORD PTR [eax],dx
c0007557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000755b:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c000755f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007563:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007566:	0f b7 c0             	movzx  eax,ax
c0007569:	3d 40 06 00 00       	cmp    eax,0x640
c000756e:	74 1c                	je     c000758c <mem_malloc+0x16c>
c0007570:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000757a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000757d:	0f b7 c0             	movzx  eax,ax
c0007580:	01 c2                	add    edx,eax
c0007582:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007587:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000758b:	90                   	nop
c000758c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007592:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007596:	01 d0                	add    eax,edx
c0007598:	83 c0 06             	add    eax,0x6
c000759b:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00075a1:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075a8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075ae:	0f b7 d2             	movzx  edx,dx
c00075b1:	0f b7 c0             	movzx  eax,ax
c00075b4:	39 c2                	cmp    edx,eax
c00075b6:	73 64                	jae    c000761c <mem_malloc+0x1fc>
c00075b8:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075be:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075c4:	eb 56                	jmp    c000761c <mem_malloc+0x1fc>
c00075c6:	66 90                	xchg   ax,ax
c00075c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075cc:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075d0:	66 8b 15 ca 67 03 c0 	mov    dx,WORD PTR ds:0xc00367ca
c00075d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075db:	66 8b 00             	mov    ax,WORD PTR [eax]
c00075de:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00075e4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00075e8:	29 cb                	sub    ebx,ecx
c00075ea:	89 d9                	mov    ecx,ebx
c00075ec:	29 c8                	sub    eax,ecx
c00075ee:	01 d0                	add    eax,edx
c00075f0:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00075f6:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075fd:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007603:	0f b7 d2             	movzx  edx,dx
c0007606:	0f b7 c0             	movzx  eax,ax
c0007609:	39 c2                	cmp    edx,eax
c000760b:	73 0f                	jae    c000761c <mem_malloc+0x1fc>
c000760d:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007613:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007619:	8d 76 00             	lea    esi,[esi+0x0]
c000761c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007621:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0007625:	75 71                	jne    c0007698 <mem_malloc+0x278>
c0007627:	eb 1b                	jmp    c0007644 <mem_malloc+0x224>
c0007629:	8d 76 00             	lea    esi,[esi+0x0]
c000762c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007632:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007637:	66 8b 00             	mov    ax,WORD PTR [eax]
c000763a:	0f b7 c0             	movzx  eax,ax
c000763d:	01 d0                	add    eax,edx
c000763f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007644:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007649:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000764c:	0f b6 c0             	movzx  eax,al
c000764f:	85 c0                	test   eax,eax
c0007651:	74 11                	je     c0007664 <mem_malloc+0x244>
c0007653:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007659:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000765e:	39 c2                	cmp    edx,eax
c0007660:	75 ca                	jne    c000762c <mem_malloc+0x20c>
c0007662:	66 90                	xchg   ax,ax
c0007664:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000766a:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000766f:	39 c2                	cmp    edx,eax
c0007671:	74 25                	je     c0007698 <mem_malloc+0x278>
c0007673:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007678:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000767b:	0f b6 c0             	movzx  eax,al
c000767e:	85 c0                	test   eax,eax
c0007680:	74 16                	je     c0007698 <mem_malloc+0x278>
c0007682:	83 ec 08             	sub    esp,0x8
c0007685:	68 85 fa 02 c0       	push   0xc002fa85
c000768a:	68 e6 f9 02 c0       	push   0xc002f9e6
c000768f:	e8 3c 84 01 00       	call   c001fad0 <CPrintf>
c0007694:	83 c4 10             	add    esp,0x10
c0007697:	90                   	nop
c0007698:	83 ec 0c             	sub    esp,0xc
c000769b:	68 98 76 03 c0       	push   0xc0037698
c00076a0:	e8 d7 95 ff ff       	call   c0000c7c <sys_mutex_unlock>
c00076a5:	83 c4 10             	add    esp,0x10
c00076a8:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00076ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076b1:	01 d0                	add    eax,edx
c00076b3:	8d 50 06             	lea    edx,[eax+0x6]
c00076b6:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c00076bb:	39 c2                	cmp    edx,eax
c00076bd:	76 15                	jbe    c00076d4 <mem_malloc+0x2b4>
c00076bf:	83 ec 08             	sub    esp,0x8
c00076c2:	68 ec fa 02 c0       	push   0xc002faec
c00076c7:	68 e6 f9 02 c0       	push   0xc002f9e6
c00076cc:	e8 ff 83 01 00       	call   c001fad0 <CPrintf>
c00076d1:	83 c4 10             	add    esp,0x10
c00076d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d8:	83 c0 06             	add    eax,0x6
c00076db:	eb 5b                	jmp    c0007738 <mem_malloc+0x318>
c00076dd:	8d 76 00             	lea    esi,[esi+0x0]
c00076e0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076e6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076eb:	01 d0                	add    eax,edx
c00076ed:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076f0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076f5:	8d 76 00             	lea    esi,[esi+0x0]
c00076f8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076fd:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007702:	b9 40 06 00 00       	mov    ecx,0x640
c0007707:	29 d1                	sub    ecx,edx
c0007709:	89 ca                	mov    edx,ecx
c000770b:	39 d0                	cmp    eax,edx
c000770d:	0f 8c 85 fd ff ff    	jl     c0007498 <mem_malloc+0x78>
c0007713:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c0007719:	83 c0 01             	add    eax,0x1
c000771c:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c0007722:	83 ec 0c             	sub    esp,0xc
c0007725:	68 98 76 03 c0       	push   0xc0037698
c000772a:	e8 4d 95 ff ff       	call   c0000c7c <sys_mutex_unlock>
c000772f:	83 c4 10             	add    esp,0x10
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	90                   	nop
c0007738:	83 c4 28             	add    esp,0x28
c000773b:	5b                   	pop    ebx
c000773c:	c3                   	ret    
c000773d:	8d 76 00             	lea    esi,[esi+0x0]

c0007740 <mem_calloc>:
c0007740:	83 ec 2c             	sub    esp,0x2c
c0007743:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007747:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000774b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007750:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007755:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775d:	0f af c2             	imul   eax,edx
c0007760:	0f b7 c0             	movzx  eax,ax
c0007763:	83 ec 0c             	sub    esp,0xc
c0007766:	50                   	push   eax
c0007767:	e8 b4 fc ff ff       	call   c0007420 <mem_malloc>
c000776c:	83 c4 10             	add    esp,0x10
c000776f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007773:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007778:	74 22                	je     c000779c <mem_calloc+0x5c>
c000777a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000777f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007784:	0f af c2             	imul   eax,edx
c0007787:	83 ec 04             	sub    esp,0x4
c000778a:	50                   	push   eax
c000778b:	6a 00                	push   0x0
c000778d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007791:	e8 5a 8d ff ff       	call   c00004f0 <memset>
c0007796:	83 c4 10             	add    esp,0x10
c0007799:	8d 76 00             	lea    esi,[esi+0x0]
c000779c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00077a0:	83 c4 2c             	add    esp,0x2c
c00077a3:	c3                   	ret    

c00077a4 <memp_init>:
c00077a4:	83 ec 10             	sub    esp,0x10
c00077a7:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c00077ae:	eb 78                	jmp    c0007828 <memp_init+0x84>
c00077b0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077b5:	89 d0                	mov    eax,edx
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	01 d0                	add    eax,edx
c00077bc:	d1 e0                	shl    eax,1
c00077be:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00077c3:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077c8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077cd:	89 d0                	mov    eax,edx
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	01 d0                	add    eax,edx
c00077d4:	d1 e0                	shl    eax,1
c00077d6:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00077db:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077e0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077e5:	89 d0                	mov    eax,edx
c00077e7:	c1 e0 02             	shl    eax,0x2
c00077ea:	01 d0                	add    eax,edx
c00077ec:	d1 e0                	shl    eax,1
c00077ee:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00077f3:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077f8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077fd:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007802:	66 8b 8c 00 3c fb 02 c0 	mov    cx,WORD PTR [eax+eax*1-0x3ffd04c4]
c000780a:	89 d0                	mov    eax,edx
c000780c:	c1 e0 02             	shl    eax,0x2
c000780f:	01 d0                	add    eax,edx
c0007811:	d1 e0                	shl    eax,1
c0007813:	05 d2 67 03 c0       	add    eax,0xc00367d2
c0007818:	66 89 08             	mov    WORD PTR [eax],cx
c000781b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0007820:	83 c0 01             	add    eax,0x1
c0007823:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0007828:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000782d:	83 f8 0d             	cmp    eax,0xd
c0007830:	0f 86 7a ff ff ff    	jbe    c00077b0 <memp_init+0xc>
c0007836:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c000783e:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007845:	e9 8a 00 00 00       	jmp    c00078d4 <memp_init+0x130>
c000784a:	66 90                	xchg   ax,ax
c000784c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007851:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c000785c:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007863:	eb 47                	jmp    c00078ac <memp_init+0x108>
c0007865:	8d 76 00             	lea    esi,[esi+0x0]
c0007868:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000786d:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007874:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007878:	89 10                	mov    DWORD PTR [eax],edx
c000787a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000787f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007883:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000788a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000788f:	66 8b 84 00 58 fb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd04a8]
c0007897:	0f b7 c0             	movzx  eax,ax
c000789a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000789e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078a2:	83 c0 01             	add    eax,0x1
c00078a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00078aa:	66 90                	xchg   ax,ax
c00078ac:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078b1:	66 8b 84 00 3c fb 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd04c4]
c00078b9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00078be:	0f b7 c0             	movzx  eax,ax
c00078c1:	39 c2                	cmp    edx,eax
c00078c3:	72 a3                	jb     c0007868 <memp_init+0xc4>
c00078c5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00078ca:	83 c0 01             	add    eax,0x1
c00078cd:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078d2:	66 90                	xchg   ax,ax
c00078d4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078d9:	83 f8 0d             	cmp    eax,0xd
c00078dc:	0f 86 6a ff ff ff    	jbe    c000784c <memp_init+0xa8>
c00078e2:	90                   	nop
c00078e3:	83 c4 10             	add    esp,0x10
c00078e6:	c3                   	ret    
c00078e7:	90                   	nop

c00078e8 <memp_malloc>:
c00078e8:	83 ec 1c             	sub    esp,0x1c
c00078eb:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c00078f0:	76 22                	jbe    c0007914 <memp_malloc+0x2c>
c00078f2:	83 ec 08             	sub    esp,0x8
c00078f5:	68 1c fb 02 c0       	push   0xc002fb1c
c00078fa:	68 e6 f9 02 c0       	push   0xc002f9e6
c00078ff:	e8 cc 81 01 00       	call   c001fad0 <CPrintf>
c0007904:	83 c4 10             	add    esp,0x10
c0007907:	b8 00 00 00 00       	mov    eax,0x0
c000790c:	e9 ff 00 00 00       	jmp    c0007a10 <memp_malloc+0x128>
c0007911:	8d 76 00             	lea    esi,[esi+0x0]
c0007914:	e8 a7 81 01 00       	call   c001fac0 <CLockScheduler>
c0007919:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000791d:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c0007924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000792d:	0f 84 a1 00 00 00    	je     c00079d4 <memp_malloc+0xec>
c0007933:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007937:	8b 10                	mov    edx,DWORD PTR [eax]
c0007939:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000793d:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007944:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007948:	89 d0                	mov    eax,edx
c000794a:	c1 e0 02             	shl    eax,0x2
c000794d:	01 d0                	add    eax,edx
c000794f:	d1 e0                	shl    eax,1
c0007951:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007956:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007959:	83 c0 01             	add    eax,0x1
c000795c:	89 c1                	mov    ecx,eax
c000795e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007962:	89 d0                	mov    eax,edx
c0007964:	c1 e0 02             	shl    eax,0x2
c0007967:	01 d0                	add    eax,edx
c0007969:	d1 e0                	shl    eax,1
c000796b:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007970:	66 89 08             	mov    WORD PTR [eax],cx
c0007973:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007977:	89 d0                	mov    eax,edx
c0007979:	c1 e0 02             	shl    eax,0x2
c000797c:	01 d0                	add    eax,edx
c000797e:	d1 e0                	shl    eax,1
c0007980:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007985:	66 8b 08             	mov    cx,WORD PTR [eax]
c0007988:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000798c:	89 d0                	mov    eax,edx
c000798e:	c1 e0 02             	shl    eax,0x2
c0007991:	01 d0                	add    eax,edx
c0007993:	d1 e0                	shl    eax,1
c0007995:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000799a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000799d:	0f b7 d1             	movzx  edx,cx
c00079a0:	0f b7 c0             	movzx  eax,ax
c00079a3:	39 c2                	cmp    edx,eax
c00079a5:	73 5d                	jae    c0007a04 <memp_malloc+0x11c>
c00079a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079ab:	89 d0                	mov    eax,edx
c00079ad:	c1 e0 02             	shl    eax,0x2
c00079b0:	01 d0                	add    eax,edx
c00079b2:	d1 e0                	shl    eax,1
c00079b4:	05 d4 67 03 c0       	add    eax,0xc00367d4
c00079b9:	66 8b 08             	mov    cx,WORD PTR [eax]
c00079bc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079c0:	89 d0                	mov    eax,edx
c00079c2:	c1 e0 02             	shl    eax,0x2
c00079c5:	01 d0                	add    eax,edx
c00079c7:	d1 e0                	shl    eax,1
c00079c9:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00079ce:	66 89 08             	mov    WORD PTR [eax],cx
c00079d1:	eb 31                	jmp    c0007a04 <memp_malloc+0x11c>
c00079d3:	90                   	nop
c00079d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079d8:	89 d0                	mov    eax,edx
c00079da:	c1 e0 02             	shl    eax,0x2
c00079dd:	01 d0                	add    eax,edx
c00079df:	d1 e0                	shl    eax,1
c00079e1:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079e6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079e9:	83 c0 01             	add    eax,0x1
c00079ec:	89 c1                	mov    ecx,eax
c00079ee:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079f2:	89 d0                	mov    eax,edx
c00079f4:	c1 e0 02             	shl    eax,0x2
c00079f7:	01 d0                	add    eax,edx
c00079f9:	d1 e0                	shl    eax,1
c00079fb:	05 d8 67 03 c0       	add    eax,0xc00367d8
c0007a00:	66 89 08             	mov    WORD PTR [eax],cx
c0007a03:	90                   	nop
c0007a04:	e8 9b 80 01 00       	call   c001faa4 <CUnlockScheduler>
c0007a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0007a10:	83 c4 1c             	add    esp,0x1c
c0007a13:	c3                   	ret    

c0007a14 <memp_free>:
c0007a14:	83 ec 1c             	sub    esp,0x1c
c0007a17:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007a1c:	74 66                	je     c0007a84 <memp_free+0x70>
c0007a1e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007a22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a26:	e8 95 80 01 00       	call   c001fac0 <CLockScheduler>
c0007a2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a2f:	89 d0                	mov    eax,edx
c0007a31:	c1 e0 02             	shl    eax,0x2
c0007a34:	01 d0                	add    eax,edx
c0007a36:	d1 e0                	shl    eax,1
c0007a38:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a3d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a40:	83 e8 01             	sub    eax,0x1
c0007a43:	89 c1                	mov    ecx,eax
c0007a45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007a49:	89 d0                	mov    eax,edx
c0007a4b:	c1 e0 02             	shl    eax,0x2
c0007a4e:	01 d0                	add    eax,edx
c0007a50:	d1 e0                	shl    eax,1
c0007a52:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a57:	66 89 08             	mov    WORD PTR [eax],cx
c0007a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a5e:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a69:	89 10                	mov    DWORD PTR [eax],edx
c0007a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a6f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a73:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007a7a:	e8 25 80 01 00       	call   c001faa4 <CUnlockScheduler>
c0007a7f:	eb 07                	jmp    c0007a88 <memp_free+0x74>
c0007a81:	8d 76 00             	lea    esi,[esi+0x0]
c0007a84:	90                   	nop
c0007a85:	8d 76 00             	lea    esi,[esi+0x0]
c0007a88:	83 c4 1c             	add    esp,0x1c
c0007a8b:	c3                   	ret    

c0007a8c <netif_init>:
c0007a8c:	90                   	nop
c0007a8d:	c3                   	ret    
c0007a8e:	66 90                	xchg   ax,ax

c0007a90 <netif_find>:
c0007a90:	83 ec 10             	sub    esp,0x10
c0007a93:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007a98:	75 0a                	jne    c0007aa4 <netif_find+0x14>
c0007a9a:	b8 00 00 00 00       	mov    eax,0x0
c0007a9f:	e9 80 00 00 00       	jmp    c0007b24 <netif_find+0x94>
c0007aa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007aa8:	83 c0 02             	add    eax,0x2
c0007aab:	8a 00                	mov    al,BYTE PTR [eax]
c0007aad:	83 e8 30             	sub    eax,0x30
c0007ab0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007ab4:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007ab9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007abd:	eb 59                	jmp    c0007b18 <netif_find+0x88>
c0007abf:	90                   	nop
c0007ac0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ac4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007ac7:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007acc:	0f b6 c0             	movzx  eax,al
c0007acf:	39 c2                	cmp    edx,eax
c0007ad1:	75 39                	jne    c0007b0c <netif_find+0x7c>
c0007ad3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007ad7:	8a 10                	mov    dl,BYTE PTR [eax]
c0007ad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007add:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007ae0:	0f be d2             	movsx  edx,dl
c0007ae3:	0f be c0             	movsx  eax,al
c0007ae6:	39 c2                	cmp    edx,eax
c0007ae8:	75 22                	jne    c0007b0c <netif_find+0x7c>
c0007aea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007aee:	83 c0 01             	add    eax,0x1
c0007af1:	8a 10                	mov    dl,BYTE PTR [eax]
c0007af3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007af7:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007afa:	0f be d2             	movsx  edx,dl
c0007afd:	0f be c0             	movsx  eax,al
c0007b00:	39 c2                	cmp    edx,eax
c0007b02:	75 08                	jne    c0007b0c <netif_find+0x7c>
c0007b04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b08:	eb 1a                	jmp    c0007b24 <netif_find+0x94>
c0007b0a:	66 90                	xchg   ax,ax
c0007b0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b10:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b16:	66 90                	xchg   ax,ax
c0007b18:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b1d:	75 a1                	jne    c0007ac0 <netif_find+0x30>
c0007b1f:	b8 00 00 00 00       	mov    eax,0x0
c0007b24:	83 c4 10             	add    esp,0x10
c0007b27:	c3                   	ret    

c0007b28 <netif_set_ipaddr>:
c0007b28:	83 ec 1c             	sub    esp,0x1c
c0007b2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007b2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b38:	39 c2                	cmp    edx,eax
c0007b3a:	0f 84 bc 00 00 00    	je     c0007bfc <netif_set_ipaddr+0xd4>
c0007b40:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007b45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b49:	eb 45                	jmp    c0007b90 <netif_set_ipaddr+0x68>
c0007b4b:	90                   	nop
c0007b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b50:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b59:	39 c2                	cmp    edx,eax
c0007b5b:	75 27                	jne    c0007b84 <netif_set_ipaddr+0x5c>
c0007b5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007b68:	83 ec 0c             	sub    esp,0xc
c0007b6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b6f:	e8 8c 36 00 00       	call   c000b200 <tcp_abort>
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007b7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b7f:	eb 0f                	jmp    c0007b90 <netif_set_ipaddr+0x68>
c0007b81:	8d 76 00             	lea    esi,[esi+0x0]
c0007b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b88:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b8f:	90                   	nop
c0007b90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b95:	75 b5                	jne    c0007b4c <netif_set_ipaddr+0x24>
c0007b97:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ba0:	eb 52                	jmp    c0007bf4 <netif_set_ipaddr+0xcc>
c0007ba2:	66 90                	xchg   ax,ax
c0007ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba8:	85 c0                	test   eax,eax
c0007baa:	74 3c                	je     c0007be8 <netif_set_ipaddr+0xc0>
c0007bac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bb2:	85 c0                	test   eax,eax
c0007bb4:	74 32                	je     c0007be8 <netif_set_ipaddr+0xc0>
c0007bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bba:	8b 10                	mov    edx,DWORD PTR [eax]
c0007bbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007bc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007bc3:	39 c2                	cmp    edx,eax
c0007bc5:	75 21                	jne    c0007be8 <netif_set_ipaddr+0xc0>
c0007bc7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007bcc:	74 0a                	je     c0007bd8 <netif_set_ipaddr+0xb0>
c0007bce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bd2:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bd4:	eb 0a                	jmp    c0007be0 <netif_set_ipaddr+0xb8>
c0007bd6:	66 90                	xchg   ax,ax
c0007bd8:	b8 00 00 00 00       	mov    eax,0x0
c0007bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0007be0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be4:	89 02                	mov    DWORD PTR [edx],eax
c0007be6:	66 90                	xchg   ax,ax
c0007be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bf3:	90                   	nop
c0007bf4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bf9:	75 a9                	jne    c0007ba4 <netif_set_ipaddr+0x7c>
c0007bfb:	90                   	nop
c0007bfc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c01:	74 09                	je     c0007c0c <netif_set_ipaddr+0xe4>
c0007c03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c09:	eb 09                	jmp    c0007c14 <netif_set_ipaddr+0xec>
c0007c0b:	90                   	nop
c0007c0c:	b8 00 00 00 00       	mov    eax,0x0
c0007c11:	8d 76 00             	lea    esi,[esi+0x0]
c0007c14:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007c18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007c1b:	90                   	nop
c0007c1c:	83 c4 1c             	add    esp,0x1c
c0007c1f:	c3                   	ret    

c0007c20 <netif_set_gw>:
c0007c20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c25:	74 09                	je     c0007c30 <netif_set_gw+0x10>
c0007c27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c2d:	eb 09                	jmp    c0007c38 <netif_set_gw+0x18>
c0007c2f:	90                   	nop
c0007c30:	b8 00 00 00 00       	mov    eax,0x0
c0007c35:	8d 76 00             	lea    esi,[esi+0x0]
c0007c38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c3c:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007c3f:	90                   	nop
c0007c40:	c3                   	ret    
c0007c41:	8d 76 00             	lea    esi,[esi+0x0]

c0007c44 <netif_set_netmask>:
c0007c44:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c49:	74 09                	je     c0007c54 <netif_set_netmask+0x10>
c0007c4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c51:	eb 09                	jmp    c0007c5c <netif_set_netmask+0x18>
c0007c53:	90                   	nop
c0007c54:	b8 00 00 00 00       	mov    eax,0x0
c0007c59:	8d 76 00             	lea    esi,[esi+0x0]
c0007c5c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c60:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007c63:	90                   	nop
c0007c64:	c3                   	ret    
c0007c65:	8d 76 00             	lea    esi,[esi+0x0]

c0007c68 <netif_set_addr>:
c0007c68:	83 ec 0c             	sub    esp,0xc
c0007c6b:	83 ec 08             	sub    esp,0x8
c0007c6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c76:	e8 ad fe ff ff       	call   c0007b28 <netif_set_ipaddr>
c0007c7b:	83 c4 10             	add    esp,0x10
c0007c7e:	83 ec 08             	sub    esp,0x8
c0007c81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c89:	e8 b6 ff ff ff       	call   c0007c44 <netif_set_netmask>
c0007c8e:	83 c4 10             	add    esp,0x10
c0007c91:	83 ec 08             	sub    esp,0x8
c0007c94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c9c:	e8 7f ff ff ff       	call   c0007c20 <netif_set_gw>
c0007ca1:	83 c4 10             	add    esp,0x10
c0007ca4:	90                   	nop
c0007ca5:	83 c4 0c             	add    esp,0xc
c0007ca8:	c3                   	ret    
c0007ca9:	8d 76 00             	lea    esi,[esi+0x0]

c0007cac <netif_add>:
c0007cac:	83 ec 0c             	sub    esp,0xc
c0007caf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007cb4:	75 16                	jne    c0007ccc <netif_add+0x20>
c0007cb6:	83 ec 08             	sub    esp,0x8
c0007cb9:	68 74 fb 02 c0       	push   0xc002fb74
c0007cbe:	68 e6 f9 02 c0       	push   0xc002f9e6
c0007cc3:	e8 08 7e 01 00       	call   c001fad0 <CPrintf>
c0007cc8:	83 c4 10             	add    esp,0x10
c0007ccb:	90                   	nop
c0007ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cdb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007ced:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cf1:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cf9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007cfd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007d00:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007d05:	8d 50 01             	lea    edx,[eax+0x1]
c0007d08:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007d0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007d12:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007d1d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d30:	e8 33 ff ff ff       	call   c0007c68 <netif_set_addr>
c0007d35:	83 c4 10             	add    esp,0x10
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007d43:	ff d0                	call   eax
c0007d45:	83 c4 10             	add    esp,0x10
c0007d48:	0f be c0             	movsx  eax,al
c0007d4b:	85 c0                	test   eax,eax
c0007d4d:	74 09                	je     c0007d58 <netif_add+0xac>
c0007d4f:	b8 00 00 00 00       	mov    eax,0x0
c0007d54:	eb 1e                	jmp    c0007d74 <netif_add+0xc8>
c0007d56:	66 90                	xchg   ax,ax
c0007d58:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d62:	89 10                	mov    DWORD PTR [eax],edx
c0007d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d68:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d71:	8d 76 00             	lea    esi,[esi+0x0]
c0007d74:	83 c4 0c             	add    esp,0xc
c0007d77:	c3                   	ret    

c0007d78 <netif_set_default>:
c0007d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d7c:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007d81:	90                   	nop
c0007d82:	c3                   	ret    
c0007d83:	90                   	nop

c0007d84 <netif_set_up>:
c0007d84:	83 ec 0c             	sub    esp,0xc
c0007d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d8e:	0f b6 c0             	movzx  eax,al
c0007d91:	83 e0 01             	and    eax,0x1
c0007d94:	75 4a                	jne    c0007de0 <netif_set_up+0x5c>
c0007d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9a:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d9d:	83 c8 01             	or     eax,0x1
c0007da0:	88 c2                	mov    dl,al
c0007da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007da6:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dad:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007db0:	0f b6 c0             	movzx  eax,al
c0007db3:	83 e0 10             	and    eax,0x10
c0007db6:	74 28                	je     c0007de0 <netif_set_up+0x5c>
c0007db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dbc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dbf:	0f b6 c0             	movzx  eax,al
c0007dc2:	83 e0 20             	and    eax,0x20
c0007dc5:	74 19                	je     c0007de0 <netif_set_up+0x5c>
c0007dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007dcb:	83 c0 04             	add    eax,0x4
c0007dce:	83 ec 08             	sub    esp,0x8
c0007dd1:	50                   	push   eax
c0007dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dd6:	e8 55 a6 00 00       	call   c0012430 <etharp_request>
c0007ddb:	83 c4 10             	add    esp,0x10
c0007dde:	66 90                	xchg   ax,ax
c0007de0:	90                   	nop
c0007de1:	83 c4 0c             	add    esp,0xc
c0007de4:	c3                   	ret    
c0007de5:	8d 76 00             	lea    esi,[esi+0x0]

c0007de8 <netif_set_down>:
c0007de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dec:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007def:	0f b6 c0             	movzx  eax,al
c0007df2:	83 e0 01             	and    eax,0x1
c0007df5:	74 15                	je     c0007e0c <netif_set_down+0x24>
c0007df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfb:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dfe:	83 e0 fe             	and    eax,0xfffffffe
c0007e01:	88 c2                	mov    dl,al
c0007e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e07:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007e0a:	66 90                	xchg   ax,ax
c0007e0c:	90                   	nop
c0007e0d:	c3                   	ret    
c0007e0e:	66 90                	xchg   ax,ax

c0007e10 <netif_remove>:
c0007e10:	83 ec 10             	sub    esp,0x10
c0007e13:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007e18:	0f 84 92 00 00 00    	je     c0007eb0 <netif_remove+0xa0>
c0007e1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e22:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e25:	83 e0 01             	and    eax,0x1
c0007e28:	0f b6 c0             	movzx  eax,al
c0007e2b:	85 c0                	test   eax,eax
c0007e2d:	74 0d                	je     c0007e3c <netif_remove+0x2c>
c0007e2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e33:	e8 b0 ff ff ff       	call   c0007de8 <netif_set_down>
c0007e38:	83 c4 04             	add    esp,0x4
c0007e3b:	90                   	nop
c0007e3c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e41:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e45:	75 0d                	jne    c0007e54 <netif_remove+0x44>
c0007e47:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e4d:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007e52:	eb 44                	jmp    c0007e98 <netif_remove+0x88>
c0007e54:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e5d:	eb 29                	jmp    c0007e88 <netif_remove+0x78>
c0007e5f:	90                   	nop
c0007e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e64:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e66:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e6a:	75 10                	jne    c0007e7c <netif_remove+0x6c>
c0007e6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e70:	8b 10                	mov    edx,DWORD PTR [eax]
c0007e72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e76:	89 10                	mov    DWORD PTR [eax],edx
c0007e78:	eb 16                	jmp    c0007e90 <netif_remove+0x80>
c0007e7a:	66 90                	xchg   ax,ax
c0007e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e80:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e86:	66 90                	xchg   ax,ax
c0007e88:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e8d:	75 d1                	jne    c0007e60 <netif_remove+0x50>
c0007e8f:	90                   	nop
c0007e90:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e95:	74 1d                	je     c0007eb4 <netif_remove+0xa4>
c0007e97:	90                   	nop
c0007e98:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007e9d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007ea1:	75 15                	jne    c0007eb8 <netif_remove+0xa8>
c0007ea3:	6a 00                	push   0x0
c0007ea5:	e8 ce fe ff ff       	call   c0007d78 <netif_set_default>
c0007eaa:	83 c4 04             	add    esp,0x4
c0007ead:	eb 09                	jmp    c0007eb8 <netif_remove+0xa8>
c0007eaf:	90                   	nop
c0007eb0:	90                   	nop
c0007eb1:	eb 05                	jmp    c0007eb8 <netif_remove+0xa8>
c0007eb3:	90                   	nop
c0007eb4:	90                   	nop
c0007eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0007eb8:	83 c4 10             	add    esp,0x10
c0007ebb:	c3                   	ret    

c0007ebc <netif_set_link_up>:
c0007ebc:	83 ec 0c             	sub    esp,0xc
c0007ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec3:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ec6:	0f b6 c0             	movzx  eax,al
c0007ec9:	83 e0 10             	and    eax,0x10
c0007ecc:	75 4a                	jne    c0007f18 <netif_set_link_up+0x5c>
c0007ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed2:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ed5:	83 c8 10             	or     eax,0x10
c0007ed8:	88 c2                	mov    dl,al
c0007eda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ede:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ee5:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ee8:	0f b6 c0             	movzx  eax,al
c0007eeb:	83 e0 01             	and    eax,0x1
c0007eee:	74 28                	je     c0007f18 <netif_set_link_up+0x5c>
c0007ef0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ef4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ef7:	0f b6 c0             	movzx  eax,al
c0007efa:	83 e0 20             	and    eax,0x20
c0007efd:	74 19                	je     c0007f18 <netif_set_link_up+0x5c>
c0007eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f03:	83 c0 04             	add    eax,0x4
c0007f06:	83 ec 08             	sub    esp,0x8
c0007f09:	50                   	push   eax
c0007f0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f0e:	e8 1d a5 00 00       	call   c0012430 <etharp_request>
c0007f13:	83 c4 10             	add    esp,0x10
c0007f16:	66 90                	xchg   ax,ax
c0007f18:	90                   	nop
c0007f19:	83 c4 0c             	add    esp,0xc
c0007f1c:	c3                   	ret    
c0007f1d:	8d 76 00             	lea    esi,[esi+0x0]

c0007f20 <netif_set_link_down>:
c0007f20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f24:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f27:	0f b6 c0             	movzx  eax,al
c0007f2a:	83 e0 10             	and    eax,0x10
c0007f2d:	74 15                	je     c0007f44 <netif_set_link_down+0x24>
c0007f2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f33:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f36:	83 e0 ef             	and    eax,0xffffffef
c0007f39:	88 c2                	mov    dl,al
c0007f3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f3f:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f42:	66 90                	xchg   ax,ax
c0007f44:	90                   	nop
c0007f45:	c3                   	ret    
c0007f46:	66 90                	xchg   ax,ax

c0007f48 <pbuf_free_ooseq>:
c0007f48:	83 ec 1c             	sub    esp,0x1c
c0007f4b:	e8 70 7b 01 00       	call   c001fac0 <CLockScheduler>
c0007f50:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007f57:	e8 48 7b 01 00       	call   c001faa4 <CUnlockScheduler>
c0007f5c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007f61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f65:	eb 41                	jmp    c0007fa8 <pbuf_free_ooseq+0x60>
c0007f67:	90                   	nop
c0007f68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f6c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f72:	85 c0                	test   eax,eax
c0007f74:	74 26                	je     c0007f9c <pbuf_free_ooseq+0x54>
c0007f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f7a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f80:	83 ec 0c             	sub    esp,0xc
c0007f83:	50                   	push   eax
c0007f84:	e8 1b 20 00 00       	call   c0009fa4 <tcp_segs_free>
c0007f89:	83 c4 10             	add    esp,0x10
c0007f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f90:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0007f9a:	eb 14                	jmp    c0007fb0 <pbuf_free_ooseq+0x68>
c0007f9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fa0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007fa3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fa7:	90                   	nop
c0007fa8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007fad:	75 b9                	jne    c0007f68 <pbuf_free_ooseq+0x20>
c0007faf:	90                   	nop
c0007fb0:	83 c4 1c             	add    esp,0x1c
c0007fb3:	c3                   	ret    

c0007fb4 <pbuf_pool_is_empty>:
c0007fb4:	83 ec 1c             	sub    esp,0x1c
c0007fb7:	e8 04 7b 01 00       	call   c001fac0 <CLockScheduler>
c0007fbc:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0007fc1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007fc5:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0007fcc:	e8 d3 7a 01 00       	call   c001faa4 <CUnlockScheduler>
c0007fd1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0007fd6:	85 c0                	test   eax,eax
c0007fd8:	75 2e                	jne    c0008008 <pbuf_pool_is_empty+0x54>
c0007fda:	83 ec 04             	sub    esp,0x4
c0007fdd:	6a 00                	push   0x0
c0007fdf:	6a 00                	push   0x0
c0007fe1:	68 48 7f 00 c0       	push   0xc0007f48
c0007fe6:	e8 95 8c ff ff       	call   c0000c80 <tcpip_callback_with_block>
c0007feb:	83 c4 10             	add    esp,0x10
c0007fee:	0f be c0             	movsx  eax,al
c0007ff1:	85 c0                	test   eax,eax
c0007ff3:	74 13                	je     c0008008 <pbuf_pool_is_empty+0x54>
c0007ff5:	e8 c6 7a 01 00       	call   c001fac0 <CLockScheduler>
c0007ffa:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0008001:	e8 9e 7a 01 00       	call   c001faa4 <CUnlockScheduler>
c0008006:	66 90                	xchg   ax,ax
c0008008:	90                   	nop
c0008009:	83 c4 1c             	add    esp,0x1c
c000800c:	c3                   	ret    
c000800d:	8d 76 00             	lea    esi,[esi+0x0]

c0008010 <pbuf_alloced_custom>:
c0008010:	83 ec 2c             	sub    esp,0x2c
c0008013:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0008017:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000801b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008020:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008025:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c000802c:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008031:	74 29                	je     c000805c <pbuf_alloced_custom+0x4c>
c0008033:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008038:	74 12                	je     c000804c <pbuf_alloced_custom+0x3c>
c000803a:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c000803f:	74 2b                	je     c000806c <pbuf_alloced_custom+0x5c>
c0008041:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0008046:	74 54                	je     c000809c <pbuf_alloced_custom+0x8c>
c0008048:	eb 32                	jmp    c000807c <pbuf_alloced_custom+0x6c>
c000804a:	66 90                	xchg   ax,ax
c000804c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008051:	83 c0 14             	add    eax,0x14
c0008054:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008059:	8d 76 00             	lea    esi,[esi+0x0]
c000805c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008061:	83 c0 14             	add    eax,0x14
c0008064:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008069:	8d 76 00             	lea    esi,[esi+0x0]
c000806c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008071:	83 c0 0e             	add    eax,0xe
c0008074:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008079:	eb 25                	jmp    c00080a0 <pbuf_alloced_custom+0x90>
c000807b:	90                   	nop
c000807c:	83 ec 08             	sub    esp,0x8
c000807f:	68 8c fb 02 c0       	push   0xc002fb8c
c0008084:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008089:	e8 42 7a 01 00       	call   c001fad0 <CPrintf>
c000808e:	83 c4 10             	add    esp,0x10
c0008091:	b8 00 00 00 00       	mov    eax,0x0
c0008096:	e9 95 00 00 00       	jmp    c0008130 <pbuf_alloced_custom+0x120>
c000809b:	90                   	nop
c000809c:	90                   	nop
c000809d:	8d 76 00             	lea    esi,[esi+0x0]
c00080a0:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00080a5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00080aa:	01 c2                	add    edx,eax
c00080ac:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00080b1:	39 c2                	cmp    edx,eax
c00080b3:	7d 07                	jge    c00080bc <pbuf_alloced_custom+0xac>
c00080b5:	b8 00 00 00 00       	mov    eax,0x0
c00080ba:	eb 74                	jmp    c0008130 <pbuf_alloced_custom+0x120>
c00080bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00080c6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080cb:	74 17                	je     c00080e4 <pbuf_alloced_custom+0xd4>
c00080cd:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00080d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080d6:	01 c2                	add    edx,eax
c00080d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080dc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080df:	eb 0f                	jmp    c00080f0 <pbuf_alloced_custom+0xe0>
c00080e1:	8d 76 00             	lea    esi,[esi+0x0]
c00080e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00080ef:	90                   	nop
c00080f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080f4:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00080f8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008100:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008104:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008108:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000810b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000810f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008113:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008117:	88 c2                	mov    dl,al
c0008119:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000811d:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008120:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008124:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000812a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000812e:	66 90                	xchg   ax,ax
c0008130:	83 c4 2c             	add    esp,0x2c
c0008133:	c3                   	ret    

c0008134 <pbuf_header>:
c0008134:	83 ec 2c             	sub    esp,0x2c
c0008137:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000813b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008140:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008145:	75 15                	jne    c000815c <pbuf_header+0x28>
c0008147:	83 ec 08             	sub    esp,0x8
c000814a:	68 16 fe 02 c0       	push   0xc002fe16
c000814f:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008154:	e8 77 79 01 00       	call   c001fad0 <CPrintf>
c0008159:	83 c4 10             	add    esp,0x10
c000815c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008161:	85 c0                	test   eax,eax
c0008163:	74 07                	je     c000816c <pbuf_header+0x38>
c0008165:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000816a:	75 08                	jne    c0008174 <pbuf_header+0x40>
c000816c:	b0 00                	mov    al,0x0
c000816e:	e9 5d 01 00 00       	jmp    c00082d0 <pbuf_header+0x19c>
c0008173:	90                   	nop
c0008174:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008179:	85 c0                	test   eax,eax
c000817b:	79 3b                	jns    c00081b8 <pbuf_header+0x84>
c000817d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008181:	f7 d8                	neg    eax
c0008183:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000818c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008190:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008195:	0f b7 c0             	movzx  eax,ax
c0008198:	39 c2                	cmp    edx,eax
c000819a:	76 28                	jbe    c00081c4 <pbuf_header+0x90>
c000819c:	83 ec 08             	sub    esp,0x8
c000819f:	68 67 fd 02 c0       	push   0xc002fd67
c00081a4:	68 e6 f9 02 c0       	push   0xc002f9e6
c00081a9:	e8 22 79 01 00       	call   c001fad0 <CPrintf>
c00081ae:	83 c4 10             	add    esp,0x10
c00081b1:	b0 01                	mov    al,0x1
c00081b3:	e9 18 01 00 00       	jmp    c00082d0 <pbuf_header+0x19c>
c00081b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00081bc:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00081c1:	8d 76 00             	lea    esi,[esi+0x0]
c00081c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081c8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00081cb:	0f b6 c0             	movzx  eax,al
c00081ce:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00081d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00081de:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081e3:	85 c0                	test   eax,eax
c00081e5:	74 0d                	je     c00081f4 <pbuf_header+0xc0>
c00081e7:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081ec:	83 f8 03             	cmp    eax,0x3
c00081ef:	75 3f                	jne    c0008230 <pbuf_header+0xfc>
c00081f1:	8d 76 00             	lea    esi,[esi+0x0]
c00081f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081fb:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c0008200:	f7 da                	neg    edx
c0008202:	01 c2                	add    edx,eax
c0008204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008208:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000820b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000820f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008212:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008216:	83 c2 10             	add    edx,0x10
c0008219:	39 d0                	cmp    eax,edx
c000821b:	73 7f                	jae    c000829c <pbuf_header+0x168>
c000821d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008221:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008225:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008228:	b0 01                	mov    al,0x1
c000822a:	e9 a1 00 00 00       	jmp    c00082d0 <pbuf_header+0x19c>
c000822f:	90                   	nop
c0008230:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008235:	83 f8 02             	cmp    eax,0x2
c0008238:	74 0a                	je     c0008244 <pbuf_header+0x110>
c000823a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000823f:	83 f8 01             	cmp    eax,0x1
c0008242:	75 3c                	jne    c0008280 <pbuf_header+0x14c>
c0008244:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008249:	85 c0                	test   eax,eax
c000824b:	79 2f                	jns    c000827c <pbuf_header+0x148>
c000824d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008251:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008255:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 c2                	cmp    edx,eax
c000825f:	77 1b                	ja     c000827c <pbuf_header+0x148>
c0008261:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008265:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008268:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c000826d:	f7 da                	neg    edx
c000826f:	01 c2                	add    edx,eax
c0008271:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008275:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008278:	eb 22                	jmp    c000829c <pbuf_header+0x168>
c000827a:	66 90                	xchg   ax,ax
c000827c:	b0 01                	mov    al,0x1
c000827e:	eb 50                	jmp    c00082d0 <pbuf_header+0x19c>
c0008280:	83 ec 08             	sub    esp,0x8
c0008283:	68 85 fd 02 c0       	push   0xc002fd85
c0008288:	68 e6 f9 02 c0       	push   0xc002f9e6
c000828d:	e8 3e 78 01 00       	call   c001fad0 <CPrintf>
c0008292:	83 c4 10             	add    esp,0x10
c0008295:	b0 01                	mov    al,0x1
c0008297:	eb 37                	jmp    c00082d0 <pbuf_header+0x19c>
c0008299:	8d 76 00             	lea    esi,[esi+0x0]
c000829c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082a0:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00082a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082a8:	01 d0                	add    eax,edx
c00082aa:	89 c2                	mov    edx,eax
c00082ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082b0:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00082b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082b8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00082bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082bf:	01 d0                	add    eax,edx
c00082c1:	89 c2                	mov    edx,eax
c00082c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00082c7:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00082cb:	b0 00                	mov    al,0x0
c00082cd:	8d 76 00             	lea    esi,[esi+0x0]
c00082d0:	83 c4 2c             	add    esp,0x2c
c00082d3:	c3                   	ret    

c00082d4 <pbuf_free>:
c00082d4:	83 ec 1c             	sub    esp,0x1c
c00082d7:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082dc:	75 26                	jne    c0008304 <pbuf_free+0x30>
c00082de:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082e3:	75 17                	jne    c00082fc <pbuf_free+0x28>
c00082e5:	83 ec 08             	sub    esp,0x8
c00082e8:	68 16 fe 02 c0       	push   0xc002fe16
c00082ed:	68 e6 f9 02 c0       	push   0xc002f9e6
c00082f2:	e8 d9 77 01 00       	call   c001fad0 <CPrintf>
c00082f7:	83 c4 10             	add    esp,0x10
c00082fa:	66 90                	xchg   ax,ax
c00082fc:	b0 00                	mov    al,0x0
c00082fe:	e9 a9 01 00 00       	jmp    c00084ac <pbuf_free+0x1d8>
c0008303:	90                   	nop
c0008304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008308:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000830b:	0f b6 c0             	movzx  eax,al
c000830e:	85 c0                	test   eax,eax
c0008310:	74 42                	je     c0008354 <pbuf_free+0x80>
c0008312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008316:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008319:	0f b6 c0             	movzx  eax,al
c000831c:	83 f8 01             	cmp    eax,0x1
c000831f:	74 33                	je     c0008354 <pbuf_free+0x80>
c0008321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008325:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008328:	0f b6 c0             	movzx  eax,al
c000832b:	83 f8 02             	cmp    eax,0x2
c000832e:	74 24                	je     c0008354 <pbuf_free+0x80>
c0008330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008334:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008337:	0f b6 c0             	movzx  eax,al
c000833a:	83 f8 03             	cmp    eax,0x3
c000833d:	74 15                	je     c0008354 <pbuf_free+0x80>
c000833f:	83 ec 08             	sub    esp,0x8
c0008342:	68 93 fd 02 c0       	push   0xc002fd93
c0008347:	68 e6 f9 02 c0       	push   0xc002f9e6
c000834c:	e8 7f 77 01 00       	call   c001fad0 <CPrintf>
c0008351:	83 c4 10             	add    esp,0x10
c0008354:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008359:	e9 3e 01 00 00       	jmp    c000849c <pbuf_free+0x1c8>
c000835e:	66 90                	xchg   ax,ax
c0008360:	e8 5b 77 01 00       	call   c001fac0 <CLockScheduler>
c0008365:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008369:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000836d:	0f b7 c0             	movzx  eax,ax
c0008370:	85 c0                	test   eax,eax
c0008372:	75 18                	jne    c000838c <pbuf_free+0xb8>
c0008374:	83 ec 08             	sub    esp,0x8
c0008377:	68 a8 fd 02 c0       	push   0xc002fda8
c000837c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008381:	e8 4a 77 01 00       	call   c001fad0 <CPrintf>
c0008386:	83 c4 10             	add    esp,0x10
c0008389:	8d 76 00             	lea    esi,[esi+0x0]
c000838c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008390:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008394:	83 e8 01             	sub    eax,0x1
c0008397:	89 c2                	mov    edx,eax
c0008399:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000839d:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c00083a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a5:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c00083a9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00083ae:	e8 f1 76 01 00       	call   c001faa4 <CUnlockScheduler>
c00083b3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00083b8:	85 c0                	test   eax,eax
c00083ba:	0f 85 d4 00 00 00    	jne    c0008494 <pbuf_free+0x1c0>
c00083c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00083c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00083ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ce:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00083d1:	0f b6 c0             	movzx  eax,al
c00083d4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083dd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00083e0:	0f b6 c0             	movzx  eax,al
c00083e3:	83 e0 02             	and    eax,0x2
c00083e6:	74 3c                	je     c0008424 <pbuf_free+0x150>
c00083e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00083ef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083f5:	85 c0                	test   eax,eax
c00083f7:	75 17                	jne    c0008410 <pbuf_free+0x13c>
c00083f9:	83 ec 08             	sub    esp,0x8
c00083fc:	68 b0 fb 02 c0       	push   0xc002fbb0
c0008401:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008406:	e8 c5 76 01 00       	call   c001fad0 <CPrintf>
c000840b:	83 c4 10             	add    esp,0x10
c000840e:	66 90                	xchg   ax,ax
c0008410:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008413:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0008416:	83 ec 0c             	sub    esp,0xc
c0008419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000841d:	ff d0                	call   eax
c000841f:	83 c4 10             	add    esp,0x10
c0008422:	eb 58                	jmp    c000847c <pbuf_free+0x1a8>
c0008424:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008429:	83 f8 03             	cmp    eax,0x3
c000842c:	75 16                	jne    c0008444 <pbuf_free+0x170>
c000842e:	83 ec 08             	sub    esp,0x8
c0008431:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008435:	6a 0d                	push   0xd
c0008437:	e8 d8 f5 ff ff       	call   c0007a14 <memp_free>
c000843c:	83 c4 10             	add    esp,0x10
c000843f:	eb 3b                	jmp    c000847c <pbuf_free+0x1a8>
c0008441:	8d 76 00             	lea    esi,[esi+0x0]
c0008444:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008449:	83 f8 01             	cmp    eax,0x1
c000844c:	74 0a                	je     c0008458 <pbuf_free+0x184>
c000844e:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008453:	83 f8 02             	cmp    eax,0x2
c0008456:	75 14                	jne    c000846c <pbuf_free+0x198>
c0008458:	83 ec 08             	sub    esp,0x8
c000845b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000845f:	6a 0c                	push   0xc
c0008461:	e8 ae f5 ff ff       	call   c0007a14 <memp_free>
c0008466:	83 c4 10             	add    esp,0x10
c0008469:	eb 11                	jmp    c000847c <pbuf_free+0x1a8>
c000846b:	90                   	nop
c000846c:	83 ec 0c             	sub    esp,0xc
c000846f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008473:	e8 78 eb ff ff       	call   c0006ff0 <mem_free>
c0008478:	83 c4 10             	add    esp,0x10
c000847b:	90                   	nop
c000847c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008480:	83 c0 01             	add    eax,0x1
c0008483:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000848b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000848f:	eb 0b                	jmp    c000849c <pbuf_free+0x1c8>
c0008491:	8d 76 00             	lea    esi,[esi+0x0]
c0008494:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000849c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00084a1:	0f 85 b9 fe ff ff    	jne    c0008360 <pbuf_free+0x8c>
c00084a7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00084ab:	90                   	nop
c00084ac:	83 c4 1c             	add    esp,0x1c
c00084af:	c3                   	ret    

c00084b0 <pbuf_alloc>:
c00084b0:	83 ec 3c             	sub    esp,0x3c
c00084b3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00084b7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00084bc:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00084c3:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c00084c8:	74 2a                	je     c00084f4 <pbuf_alloc+0x44>
c00084ca:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00084cf:	74 13                	je     c00084e4 <pbuf_alloc+0x34>
c00084d1:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c00084d6:	74 2c                	je     c0008504 <pbuf_alloc+0x54>
c00084d8:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00084dd:	74 55                	je     c0008534 <pbuf_alloc+0x84>
c00084df:	eb 33                	jmp    c0008514 <pbuf_alloc+0x64>
c00084e1:	8d 76 00             	lea    esi,[esi+0x0]
c00084e4:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084e9:	83 c0 14             	add    eax,0x14
c00084ec:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084f1:	8d 76 00             	lea    esi,[esi+0x0]
c00084f4:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084f9:	83 c0 14             	add    eax,0x14
c00084fc:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008501:	8d 76 00             	lea    esi,[esi+0x0]
c0008504:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0008509:	83 c0 0e             	add    eax,0xe
c000850c:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c0008511:	eb 25                	jmp    c0008538 <pbuf_alloc+0x88>
c0008513:	90                   	nop
c0008514:	83 ec 08             	sub    esp,0x8
c0008517:	68 be fd 02 c0       	push   0xc002fdbe
c000851c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008521:	e8 aa 75 01 00       	call   c001fad0 <CPrintf>
c0008526:	83 c4 10             	add    esp,0x10
c0008529:	b8 00 00 00 00       	mov    eax,0x0
c000852e:	e9 71 03 00 00       	jmp    c00088a4 <pbuf_alloc+0x3f4>
c0008533:	90                   	nop
c0008534:	90                   	nop
c0008535:	8d 76 00             	lea    esi,[esi+0x0]
c0008538:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c000853d:	77 11                	ja     c0008550 <pbuf_alloc+0xa0>
c000853f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0008544:	0f 85 c6 02 00 00    	jne    c0008810 <pbuf_alloc+0x360>
c000854a:	e9 41 02 00 00       	jmp    c0008790 <pbuf_alloc+0x2e0>
c000854f:	90                   	nop
c0008550:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c0008555:	0f 85 15 03 00 00    	jne    c0008870 <pbuf_alloc+0x3c0>
c000855b:	83 ec 0c             	sub    esp,0xc
c000855e:	6a 0d                	push   0xd
c0008560:	e8 83 f3 ff ff       	call   c00078e8 <memp_malloc>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000856c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008571:	75 11                	jne    c0008584 <pbuf_alloc+0xd4>
c0008573:	e8 3c fa ff ff       	call   c0007fb4 <pbuf_pool_is_empty>
c0008578:	b8 00 00 00 00       	mov    eax,0x0
c000857d:	e9 22 03 00 00       	jmp    c00088a4 <pbuf_alloc+0x3f4>
c0008582:	66 90                	xchg   ax,ax
c0008584:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008588:	88 c2                	mov    dl,al
c000858a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000858e:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008591:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008595:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000859b:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00085a0:	8d 50 10             	lea    edx,[eax+0x10]
c00085a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085a7:	01 c2                	add    edx,eax
c00085a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00085b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00085b8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00085bc:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00085c1:	ba 4e 02 00 00       	mov    edx,0x24e
c00085c6:	29 c2                	sub    edx,eax
c00085c8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00085cd:	39 c2                	cmp    edx,eax
c00085cf:	0f 4e c2             	cmovle eax,edx
c00085d2:	89 c2                	mov    edx,eax
c00085d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085d8:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00085dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085e0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00085e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085e7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00085eb:	0f b7 c0             	movzx  eax,ax
c00085ee:	01 c2                	add    edx,eax
c00085f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085f4:	05 5e 02 00 00       	add    eax,0x25e
c00085f9:	39 c2                	cmp    edx,eax
c00085fb:	76 17                	jbe    c0008614 <pbuf_alloc+0x164>
c00085fd:	83 ec 08             	sub    esp,0x8
c0008600:	68 d4 fb 02 c0       	push   0xc002fbd4
c0008605:	68 e6 f9 02 c0       	push   0xc002f9e6
c000860a:	e8 c1 74 01 00       	call   c001fad0 <CPrintf>
c000860f:	83 c4 10             	add    esp,0x10
c0008612:	66 90                	xchg   ax,ax
c0008614:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008619:	ba 4e 02 00 00       	mov    edx,0x24e
c000861e:	29 c2                	sub    edx,eax
c0008620:	89 d0                	mov    eax,edx
c0008622:	85 c0                	test   eax,eax
c0008624:	7f 16                	jg     c000863c <pbuf_alloc+0x18c>
c0008626:	83 ec 08             	sub    esp,0x8
c0008629:	68 08 fc 02 c0       	push   0xc002fc08
c000862e:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008633:	e8 98 74 01 00       	call   c001fad0 <CPrintf>
c0008638:	83 c4 10             	add    esp,0x10
c000863b:	90                   	nop
c000863c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008640:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008646:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000864a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000864e:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008653:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008657:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000865b:	0f b7 c0             	movzx  eax,ax
c000865e:	29 c2                	sub    edx,eax
c0008660:	89 d0                	mov    eax,edx
c0008662:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008666:	e9 15 01 00 00       	jmp    c0008780 <pbuf_alloc+0x2d0>
c000866b:	90                   	nop
c000866c:	83 ec 0c             	sub    esp,0xc
c000866f:	6a 0d                	push   0xd
c0008671:	e8 72 f2 ff ff       	call   c00078e8 <memp_malloc>
c0008676:	83 c4 10             	add    esp,0x10
c0008679:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000867d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008682:	75 20                	jne    c00086a4 <pbuf_alloc+0x1f4>
c0008684:	e8 2b f9 ff ff       	call   c0007fb4 <pbuf_pool_is_empty>
c0008689:	83 ec 0c             	sub    esp,0xc
c000868c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008690:	e8 3f fc ff ff       	call   c00082d4 <pbuf_free>
c0008695:	83 c4 10             	add    esp,0x10
c0008698:	b8 00 00 00 00       	mov    eax,0x0
c000869d:	e9 02 02 00 00       	jmp    c00088a4 <pbuf_alloc+0x3f4>
c00086a2:	66 90                	xchg   ax,ax
c00086a4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00086a8:	88 c2                	mov    dl,al
c00086aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086ae:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00086b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086b5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c00086b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00086c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00086c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086cb:	89 10                	mov    DWORD PTR [eax],edx
c00086cd:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00086d5:	7e 15                	jle    c00086ec <pbuf_alloc+0x23c>
c00086d7:	83 ec 08             	sub    esp,0x8
c00086da:	68 d9 fd 02 c0       	push   0xc002fdd9
c00086df:	68 e6 f9 02 c0       	push   0xc002f9e6
c00086e4:	e8 e7 73 01 00       	call   c001fad0 <CPrintf>
c00086e9:	83 c4 10             	add    esp,0x10
c00086ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086f0:	89 c2                	mov    edx,eax
c00086f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086f6:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00086fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086fe:	0f b7 d0             	movzx  edx,ax
c0008701:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c0008707:	76 07                	jbe    c0008710 <pbuf_alloc+0x260>
c0008709:	b8 4e 02 00 00       	mov    eax,0x24e
c000870e:	66 90                	xchg   ax,ax
c0008710:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008714:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000871c:	8d 50 10             	lea    edx,[eax+0x10]
c000871f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008723:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008726:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000872a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000872d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008731:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008735:	0f b7 c0             	movzx  eax,ax
c0008738:	01 c2                	add    edx,eax
c000873a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000873e:	05 5e 02 00 00       	add    eax,0x25e
c0008743:	39 c2                	cmp    edx,eax
c0008745:	76 15                	jbe    c000875c <pbuf_alloc+0x2ac>
c0008747:	83 ec 08             	sub    esp,0x8
c000874a:	68 d4 fb 02 c0       	push   0xc002fbd4
c000874f:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008754:	e8 77 73 01 00       	call   c001fad0 <CPrintf>
c0008759:	83 c4 10             	add    esp,0x10
c000875c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008760:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008766:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000876a:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000876e:	0f b7 c0             	movzx  eax,ax
c0008771:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c0008775:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008779:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000877d:	8d 76 00             	lea    esi,[esi+0x0]
c0008780:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008785:	0f 8f e1 fe ff ff    	jg     c000866c <pbuf_alloc+0x1bc>
c000878b:	e9 fc 00 00 00       	jmp    c000888c <pbuf_alloc+0x3dc>
c0008790:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c0008795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008799:	01 d0                	add    eax,edx
c000879b:	83 c0 10             	add    eax,0x10
c000879e:	0f b7 c0             	movzx  eax,ax
c00087a1:	83 ec 0c             	sub    esp,0xc
c00087a4:	50                   	push   eax
c00087a5:	e8 76 ec ff ff       	call   c0007420 <mem_malloc>
c00087aa:	83 c4 10             	add    esp,0x10
c00087ad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087b1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087b6:	75 0c                	jne    c00087c4 <pbuf_alloc+0x314>
c00087b8:	b8 00 00 00 00       	mov    eax,0x0
c00087bd:	e9 e2 00 00 00       	jmp    c00088a4 <pbuf_alloc+0x3f4>
c00087c2:	66 90                	xchg   ax,ax
c00087c4:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00087c9:	8d 50 10             	lea    edx,[eax+0x10]
c00087cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d0:	01 c2                	add    edx,eax
c00087d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00087e1:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00087e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087e9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00087ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f0:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c00087f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087fe:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008802:	88 c2                	mov    dl,al
c0008804:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008808:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000880b:	eb 7f                	jmp    c000888c <pbuf_alloc+0x3dc>
c000880d:	8d 76 00             	lea    esi,[esi+0x0]
c0008810:	83 ec 0c             	sub    esp,0xc
c0008813:	6a 0c                	push   0xc
c0008815:	e8 ce f0 ff ff       	call   c00078e8 <memp_malloc>
c000881a:	83 c4 10             	add    esp,0x10
c000881d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008821:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008826:	75 08                	jne    c0008830 <pbuf_alloc+0x380>
c0008828:	b8 00 00 00 00       	mov    eax,0x0
c000882d:	eb 75                	jmp    c00088a4 <pbuf_alloc+0x3f4>
c000882f:	90                   	nop
c0008830:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000883b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000883f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008843:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008847:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000884b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000884e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008852:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008856:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000885a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008860:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008864:	88 c2                	mov    dl,al
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000886d:	eb 1d                	jmp    c000888c <pbuf_alloc+0x3dc>
c000886f:	90                   	nop
c0008870:	83 ec 08             	sub    esp,0x8
c0008873:	68 ed fd 02 c0       	push   0xc002fded
c0008878:	68 e6 f9 02 c0       	push   0xc002f9e6
c000887d:	e8 4e 72 01 00       	call   c001fad0 <CPrintf>
c0008882:	83 c4 10             	add    esp,0x10
c0008885:	b8 00 00 00 00       	mov    eax,0x0
c000888a:	eb 18                	jmp    c00088a4 <pbuf_alloc+0x3f4>
c000888c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008890:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008896:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000889a:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c000889e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00088a2:	66 90                	xchg   ax,ax
c00088a4:	83 c4 3c             	add    esp,0x3c
c00088a7:	c3                   	ret    

c00088a8 <pbuf_realloc>:
c00088a8:	83 ec 2c             	sub    esp,0x2c
c00088ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00088af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00088b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00088b9:	75 15                	jne    c00088d0 <pbuf_realloc+0x28>
c00088bb:	83 ec 08             	sub    esp,0x8
c00088be:	68 08 fe 02 c0       	push   0xc002fe08
c00088c3:	68 e6 f9 02 c0       	push   0xc002f9e6
c00088c8:	e8 03 72 01 00       	call   c001fad0 <CPrintf>
c00088cd:	83 c4 10             	add    esp,0x10
c00088d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088d4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088d7:	0f b6 c0             	movzx  eax,al
c00088da:	83 f8 03             	cmp    eax,0x3
c00088dd:	74 41                	je     c0008920 <pbuf_realloc+0x78>
c00088df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088e3:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088e6:	0f b6 c0             	movzx  eax,al
c00088e9:	83 f8 01             	cmp    eax,0x1
c00088ec:	74 32                	je     c0008920 <pbuf_realloc+0x78>
c00088ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088f2:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088f5:	0f b6 c0             	movzx  eax,al
c00088f8:	85 c0                	test   eax,eax
c00088fa:	74 24                	je     c0008920 <pbuf_realloc+0x78>
c00088fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008900:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008903:	0f b6 c0             	movzx  eax,al
c0008906:	83 f8 02             	cmp    eax,0x2
c0008909:	74 15                	je     c0008920 <pbuf_realloc+0x78>
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 20 fe 02 c0       	push   0xc002fe20
c0008913:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008918:	e8 b3 71 01 00       	call   c001fad0 <CPrintf>
c000891d:	83 c4 10             	add    esp,0x10
c0008920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008924:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008927:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000892c:	0f b7 c0             	movzx  eax,ax
c000892f:	39 c2                	cmp    edx,eax
c0008931:	0f 83 71 01 00 00    	jae    c0008aa8 <pbuf_realloc+0x200>
c0008937:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000893c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008940:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008943:	0f b7 c0             	movzx  eax,ax
c0008946:	29 c2                	sub    edx,eax
c0008948:	89 d0                	mov    eax,edx
c000894a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000894e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008952:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008957:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000895b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000895f:	eb 7b                	jmp    c00089dc <pbuf_realloc+0x134>
c0008961:	8d 76 00             	lea    esi,[esi+0x0]
c0008964:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008968:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000896c:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008971:	89 d1                	mov    ecx,edx
c0008973:	29 c1                	sub    ecx,eax
c0008975:	89 c8                	mov    eax,ecx
c0008977:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000897c:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c0008984:	7e 16                	jle    c000899c <pbuf_realloc+0xf4>
c0008986:	83 ec 08             	sub    esp,0x8
c0008989:	68 3b fe 02 c0       	push   0xc002fe3b
c000898e:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008993:	e8 38 71 01 00       	call   c001fad0 <CPrintf>
c0008998:	83 c4 10             	add    esp,0x10
c000899b:	90                   	nop
c000899c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00089a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00089a7:	01 d0                	add    eax,edx
c00089a9:	89 c2                	mov    edx,eax
c00089ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089af:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c00089b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00089b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00089c2:	75 18                	jne    c00089dc <pbuf_realloc+0x134>
c00089c4:	83 ec 08             	sub    esp,0x8
c00089c7:	68 4c fe 02 c0       	push   0xc002fe4c
c00089cc:	68 e6 f9 02 c0       	push   0xc002f9e6
c00089d1:	e8 fa 70 01 00       	call   c001fad0 <CPrintf>
c00089d6:	83 c4 10             	add    esp,0x10
c00089d9:	8d 76 00             	lea    esi,[esi+0x0]
c00089dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089e4:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089e9:	0f b7 c0             	movzx  eax,ax
c00089ec:	39 c2                	cmp    edx,eax
c00089ee:	0f 87 70 ff ff ff    	ja     c0008964 <pbuf_realloc+0xbc>
c00089f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089f8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089fb:	0f b6 c0             	movzx  eax,al
c00089fe:	85 c0                	test   eax,eax
c0008a00:	75 5e                	jne    c0008a60 <pbuf_realloc+0x1b8>
c0008a02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a06:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a0a:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0008a0f:	0f b7 c0             	movzx  eax,ax
c0008a12:	39 c2                	cmp    edx,eax
c0008a14:	74 4a                	je     c0008a60 <pbuf_realloc+0x1b8>
c0008a16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008a1d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0008a21:	89 c2                	mov    edx,eax
c0008a23:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008a28:	01 d0                	add    eax,edx
c0008a2a:	0f b7 c0             	movzx  eax,ax
c0008a2d:	83 ec 08             	sub    esp,0x8
c0008a30:	50                   	push   eax
c0008a31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008a35:	e8 da e6 ff ff       	call   c0007114 <mem_trim>
c0008a3a:	83 c4 10             	add    esp,0x10
c0008a3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a41:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a46:	75 18                	jne    c0008a60 <pbuf_realloc+0x1b8>
c0008a48:	83 ec 08             	sub    esp,0x8
c0008a4b:	68 64 fe 02 c0       	push   0xc002fe64
c0008a50:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008a55:	e8 76 70 01 00       	call   c001fad0 <CPrintf>
c0008a5a:	83 c4 10             	add    esp,0x10
c0008a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a64:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008a69:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0008a6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a71:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008a75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a79:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008a7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a83:	85 c0                	test   eax,eax
c0008a85:	74 15                	je     c0008a9c <pbuf_realloc+0x1f4>
c0008a87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	50                   	push   eax
c0008a91:	e8 3e f8 ff ff       	call   c00082d4 <pbuf_free>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	8d 76 00             	lea    esi,[esi+0x0]
c0008a9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008aa0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008aa6:	eb 04                	jmp    c0008aac <pbuf_realloc+0x204>
c0008aa8:	90                   	nop
c0008aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0008aac:	83 c4 2c             	add    esp,0x2c
c0008aaf:	c3                   	ret    

c0008ab0 <pbuf_clen>:
c0008ab0:	83 ec 10             	sub    esp,0x10
c0008ab3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008ab8:	eb 1a                	jmp    c0008ad4 <pbuf_clen+0x24>
c0008aba:	66 90                	xchg   ax,ax
c0008abc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008ac0:	83 c0 01             	add    eax,0x1
c0008ac3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008acb:	8b 00                	mov    eax,DWORD PTR [eax]
c0008acd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0008ad4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008ad9:	75 e1                	jne    c0008abc <pbuf_clen+0xc>
c0008adb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	c3                   	ret    
c0008ae3:	90                   	nop

c0008ae4 <pbuf_ref>:
c0008ae4:	83 ec 0c             	sub    esp,0xc
c0008ae7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008aec:	74 22                	je     c0008b10 <pbuf_ref+0x2c>
c0008aee:	e8 cd 6f 01 00       	call   c001fac0 <CLockScheduler>
c0008af3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008af7:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008afb:	83 c0 01             	add    eax,0x1
c0008afe:	89 c2                	mov    edx,eax
c0008b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b04:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c0008b08:	e8 97 6f 01 00       	call   c001faa4 <CUnlockScheduler>
c0008b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0008b10:	90                   	nop
c0008b11:	83 c4 0c             	add    esp,0xc
c0008b14:	c3                   	ret    
c0008b15:	8d 76 00             	lea    esi,[esi+0x0]

c0008b18 <pbuf_cat>:
c0008b18:	83 ec 1c             	sub    esp,0x1c
c0008b1b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008b20:	74 0a                	je     c0008b2c <pbuf_cat+0x14>
c0008b22:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008b27:	75 1f                	jne    c0008b48 <pbuf_cat+0x30>
c0008b29:	8d 76 00             	lea    esi,[esi+0x0]
c0008b2c:	83 ec 08             	sub    esp,0x8
c0008b2f:	68 3c fc 02 c0       	push   0xc002fc3c
c0008b34:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008b39:	e8 92 6f 01 00       	call   c001fad0 <CPrintf>
c0008b3e:	83 c4 10             	add    esp,0x10
c0008b41:	e9 ae 00 00 00       	jmp    c0008bf4 <pbuf_cat+0xdc>
c0008b46:	66 90                	xchg   ax,ax
c0008b48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b50:	eb 26                	jmp    c0008b78 <pbuf_cat+0x60>
c0008b52:	66 90                	xchg   ax,ax
c0008b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b58:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b5f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b62:	01 d0                	add    eax,edx
c0008b64:	89 c2                	mov    edx,eax
c0008b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b6a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b72:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b7e:	85 c0                	test   eax,eax
c0008b80:	75 d2                	jne    c0008b54 <pbuf_cat+0x3c>
c0008b82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b86:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b8d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b91:	0f b7 d2             	movzx  edx,dx
c0008b94:	0f b7 c0             	movzx  eax,ax
c0008b97:	39 c2                	cmp    edx,eax
c0008b99:	74 15                	je     c0008bb0 <pbuf_cat+0x98>
c0008b9b:	83 ec 08             	sub    esp,0x8
c0008b9e:	68 74 fc 02 c0       	push   0xc002fc74
c0008ba3:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008ba8:	e8 23 6f 01 00       	call   c001fad0 <CPrintf>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bb6:	85 c0                	test   eax,eax
c0008bb8:	74 16                	je     c0008bd0 <pbuf_cat+0xb8>
c0008bba:	83 ec 08             	sub    esp,0x8
c0008bbd:	68 80 fe 02 c0       	push   0xc002fe80
c0008bc2:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008bc7:	e8 04 6f 01 00       	call   c001fad0 <CPrintf>
c0008bcc:	83 c4 10             	add    esp,0x10
c0008bcf:	90                   	nop
c0008bd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bd4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008bdb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008bde:	01 d0                	add    eax,edx
c0008be0:	89 c2                	mov    edx,eax
c0008be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008be6:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008bea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bee:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bf2:	89 10                	mov    DWORD PTR [eax],edx
c0008bf4:	83 c4 1c             	add    esp,0x1c
c0008bf7:	c3                   	ret    

c0008bf8 <pbuf_chain>:
c0008bf8:	83 ec 0c             	sub    esp,0xc
c0008bfb:	83 ec 08             	sub    esp,0x8
c0008bfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008c06:	e8 0d ff ff ff       	call   c0008b18 <pbuf_cat>
c0008c0b:	83 c4 10             	add    esp,0x10
c0008c0e:	83 ec 0c             	sub    esp,0xc
c0008c11:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c15:	e8 ca fe ff ff       	call   c0008ae4 <pbuf_ref>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	90                   	nop
c0008c1e:	83 c4 0c             	add    esp,0xc
c0008c21:	c3                   	ret    
c0008c22:	66 90                	xchg   ax,ax

c0008c24 <pbuf_dechain>:
c0008c24:	83 ec 1c             	sub    esp,0x1c
c0008c27:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c36:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008c3b:	0f 84 8b 00 00 00    	je     c0008ccc <pbuf_dechain+0xa8>
c0008c41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c45:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c48:	0f b7 d0             	movzx  edx,ax
c0008c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c52:	0f b7 c8             	movzx  ecx,ax
c0008c55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c59:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c5d:	0f b7 c0             	movzx  eax,ax
c0008c60:	29 c1                	sub    ecx,eax
c0008c62:	89 c8                	mov    eax,ecx
c0008c64:	39 c2                	cmp    edx,eax
c0008c66:	74 18                	je     c0008c80 <pbuf_dechain+0x5c>
c0008c68:	83 ec 08             	sub    esp,0x8
c0008c6b:	68 a4 fc 02 c0       	push   0xc002fca4
c0008c70:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008c75:	e8 56 6e 01 00       	call   c001fad0 <CPrintf>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0008c80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c84:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c8b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c8f:	89 d1                	mov    ecx,edx
c0008c91:	29 c1                	sub    ecx,eax
c0008c93:	89 c8                	mov    eax,ecx
c0008c95:	89 c2                	mov    edx,eax
c0008c97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c9b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ca3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008ca9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cad:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008cb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cb5:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c0008cb9:	83 ec 0c             	sub    esp,0xc
c0008cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cc0:	e8 0f f6 ff ff       	call   c00082d4 <pbuf_free>
c0008cc5:	83 c4 10             	add    esp,0x10
c0008cc8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008cd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008cdb:	0f b7 d2             	movzx  edx,dx
c0008cde:	0f b7 c0             	movzx  eax,ax
c0008ce1:	39 c2                	cmp    edx,eax
c0008ce3:	74 17                	je     c0008cfc <pbuf_dechain+0xd8>
c0008ce5:	83 ec 08             	sub    esp,0x8
c0008ce8:	68 90 fe 02 c0       	push   0xc002fe90
c0008ced:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008cf2:	e8 d9 6d 01 00       	call   c001fad0 <CPrintf>
c0008cf7:	83 c4 10             	add    esp,0x10
c0008cfa:	66 90                	xchg   ax,ax
c0008cfc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008d01:	85 c0                	test   eax,eax
c0008d03:	75 07                	jne    c0008d0c <pbuf_dechain+0xe8>
c0008d05:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008d09:	eb 09                	jmp    c0008d14 <pbuf_dechain+0xf0>
c0008d0b:	90                   	nop
c0008d0c:	b8 00 00 00 00       	mov    eax,0x0
c0008d11:	8d 76 00             	lea    esi,[esi+0x0]
c0008d14:	83 c4 1c             	add    esp,0x1c
c0008d17:	c3                   	ret    

c0008d18 <pbuf_copy>:
c0008d18:	53                   	push   ebx
c0008d19:	83 ec 18             	sub    esp,0x18
c0008d1c:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008d23:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008d2a:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d2f:	74 1f                	je     c0008d50 <pbuf_copy+0x38>
c0008d31:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008d36:	74 18                	je     c0008d50 <pbuf_copy+0x38>
c0008d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d3c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008d3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d46:	0f b7 d2             	movzx  edx,dx
c0008d49:	0f b7 c0             	movzx  eax,ax
c0008d4c:	39 c2                	cmp    edx,eax
c0008d4e:	73 1c                	jae    c0008d6c <pbuf_copy+0x54>
c0008d50:	83 ec 08             	sub    esp,0x8
c0008d53:	68 c8 fc 02 c0       	push   0xc002fcc8
c0008d58:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008d5d:	e8 6e 6d 01 00       	call   c001fad0 <CPrintf>
c0008d62:	83 c4 10             	add    esp,0x10
c0008d65:	b0 f2                	mov    al,0xf2
c0008d67:	e9 0c 02 00 00       	jmp    c0008f78 <pbuf_copy+0x260>
c0008d6c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d71:	75 15                	jne    c0008d88 <pbuf_copy+0x70>
c0008d73:	83 ec 08             	sub    esp,0x8
c0008d76:	68 a5 fe 02 c0       	push   0xc002fea5
c0008d7b:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008d80:	e8 4b 6d 01 00       	call   c001fad0 <CPrintf>
c0008d85:	83 c4 10             	add    esp,0x10
c0008d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d8c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d90:	0f b7 d0             	movzx  edx,ax
c0008d93:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008d98:	89 d1                	mov    ecx,edx
c0008d9a:	29 c1                	sub    ecx,eax
c0008d9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008da0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008da4:	0f b7 d0             	movzx  edx,ax
c0008da7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008dac:	29 c2                	sub    edx,eax
c0008dae:	89 d0                	mov    eax,edx
c0008db0:	39 c1                	cmp    ecx,eax
c0008db2:	7c 1c                	jl     c0008dd0 <pbuf_copy+0xb8>
c0008db4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008db8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008dbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc0:	89 d3                	mov    ebx,edx
c0008dc2:	29 c3                	sub    ebx,eax
c0008dc4:	89 d8                	mov    eax,ebx
c0008dc6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008dcb:	eb 1b                	jmp    c0008de8 <pbuf_copy+0xd0>
c0008dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0008dd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dd4:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008dd8:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008ddd:	89 d3                	mov    ebx,edx
c0008ddf:	29 c3                	sub    ebx,eax
c0008de1:	89 d8                	mov    eax,ebx
c0008de3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008de8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008ded:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008df1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008df4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008df9:	01 d1                	add    ecx,edx
c0008dfb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008dff:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008e02:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e07:	01 da                	add    edx,ebx
c0008e09:	83 ec 04             	sub    esp,0x4
c0008e0c:	50                   	push   eax
c0008e0d:	51                   	push   ecx
c0008e0e:	52                   	push   edx
c0008e0f:	e8 66 75 ff ff       	call   c000037a <memcpy>
c0008e14:	83 c4 10             	add    esp,0x10
c0008e17:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008e1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e21:	01 d0                	add    eax,edx
c0008e23:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008e2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008e31:	01 d0                	add    eax,edx
c0008e33:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008e38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e3c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e40:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e45:	0f b7 c0             	movzx  eax,ax
c0008e48:	39 c2                	cmp    edx,eax
c0008e4a:	76 18                	jbe    c0008e64 <pbuf_copy+0x14c>
c0008e4c:	83 ec 08             	sub    esp,0x8
c0008e4f:	68 b2 fe 02 c0       	push   0xc002feb2
c0008e54:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008e59:	e8 72 6c 01 00       	call   c001fad0 <CPrintf>
c0008e5e:	83 c4 10             	add    esp,0x10
c0008e61:	8d 76 00             	lea    esi,[esi+0x0]
c0008e64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e68:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e6c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e71:	0f b7 c0             	movzx  eax,ax
c0008e74:	39 c2                	cmp    edx,eax
c0008e76:	75 14                	jne    c0008e8c <pbuf_copy+0x174>
c0008e78:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e83:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008e89:	8d 76 00             	lea    esi,[esi+0x0]
c0008e8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e90:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e94:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e99:	0f b7 c0             	movzx  eax,ax
c0008e9c:	39 c2                	cmp    edx,eax
c0008e9e:	76 18                	jbe    c0008eb8 <pbuf_copy+0x1a0>
c0008ea0:	83 ec 08             	sub    esp,0x8
c0008ea3:	68 c9 fe 02 c0       	push   0xc002fec9
c0008ea8:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008ead:	e8 1e 6c 01 00       	call   c001fad0 <CPrintf>
c0008eb2:	83 c4 10             	add    esp,0x10
c0008eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0008eb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ebc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ec0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008ec5:	0f b7 c0             	movzx  eax,ax
c0008ec8:	39 c2                	cmp    edx,eax
c0008eca:	72 14                	jb     c0008ee0 <pbuf_copy+0x1c8>
c0008ecc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008ed3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ed9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008edd:	8d 76 00             	lea    esi,[esi+0x0]
c0008ee0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ee5:	74 3d                	je     c0008f24 <pbuf_copy+0x20c>
c0008ee7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eeb:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008eef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ef3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ef6:	0f b7 d2             	movzx  edx,dx
c0008ef9:	0f b7 c0             	movzx  eax,ax
c0008efc:	39 c2                	cmp    edx,eax
c0008efe:	75 24                	jne    c0008f24 <pbuf_copy+0x20c>
c0008f00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008f04:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f06:	85 c0                	test   eax,eax
c0008f08:	74 1a                	je     c0008f24 <pbuf_copy+0x20c>
c0008f0a:	83 ec 08             	sub    esp,0x8
c0008f0d:	68 f8 fc 02 c0       	push   0xc002fcf8
c0008f12:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008f17:	e8 b4 6b 01 00       	call   c001fad0 <CPrintf>
c0008f1c:	83 c4 10             	add    esp,0x10
c0008f1f:	b0 fa                	mov    al,0xfa
c0008f21:	eb 55                	jmp    c0008f78 <pbuf_copy+0x260>
c0008f23:	90                   	nop
c0008f24:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008f29:	74 3d                	je     c0008f68 <pbuf_copy+0x250>
c0008f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f2f:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f3a:	0f b7 d2             	movzx  edx,dx
c0008f3d:	0f b7 c0             	movzx  eax,ax
c0008f40:	39 c2                	cmp    edx,eax
c0008f42:	75 24                	jne    c0008f68 <pbuf_copy+0x250>
c0008f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f48:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f4a:	85 c0                	test   eax,eax
c0008f4c:	74 1a                	je     c0008f68 <pbuf_copy+0x250>
c0008f4e:	83 ec 08             	sub    esp,0x8
c0008f51:	68 f8 fc 02 c0       	push   0xc002fcf8
c0008f56:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008f5b:	e8 70 6b 01 00       	call   c001fad0 <CPrintf>
c0008f60:	83 c4 10             	add    esp,0x10
c0008f63:	b0 fa                	mov    al,0xfa
c0008f65:	eb 11                	jmp    c0008f78 <pbuf_copy+0x260>
c0008f67:	90                   	nop
c0008f68:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f6d:	0f 85 f9 fd ff ff    	jne    c0008d6c <pbuf_copy+0x54>
c0008f73:	b0 00                	mov    al,0x0
c0008f75:	8d 76 00             	lea    esi,[esi+0x0]
c0008f78:	83 c4 18             	add    esp,0x18
c0008f7b:	5b                   	pop    ebx
c0008f7c:	c3                   	ret    
c0008f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0008f80 <pbuf_copy_partial>:
c0008f80:	53                   	push   ebx
c0008f81:	83 ec 28             	sub    esp,0x28
c0008f84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008f88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f8c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008f91:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008f96:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008f9d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008fa2:	75 20                	jne    c0008fc4 <pbuf_copy_partial+0x44>
c0008fa4:	83 ec 08             	sub    esp,0x8
c0008fa7:	68 24 fd 02 c0       	push   0xc002fd24
c0008fac:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008fb1:	e8 1a 6b 01 00       	call   c001fad0 <CPrintf>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	b8 00 00 00 00       	mov    eax,0x0
c0008fbe:	e9 59 01 00 00       	jmp    c000911c <pbuf_copy_partial+0x19c>
c0008fc3:	90                   	nop
c0008fc4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008fc9:	75 21                	jne    c0008fec <pbuf_copy_partial+0x6c>
c0008fcb:	83 ec 08             	sub    esp,0x8
c0008fce:	68 44 fd 02 c0       	push   0xc002fd44
c0008fd3:	68 e6 f9 02 c0       	push   0xc002f9e6
c0008fd8:	e8 f3 6a 01 00       	call   c001fad0 <CPrintf>
c0008fdd:	83 c4 10             	add    esp,0x10
c0008fe0:	b8 00 00 00 00       	mov    eax,0x0
c0008fe5:	e9 32 01 00 00       	jmp    c000911c <pbuf_copy_partial+0x19c>
c0008fea:	66 90                	xchg   ax,ax
c0008fec:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0008ff3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008ff8:	74 0a                	je     c0009004 <pbuf_copy_partial+0x84>
c0008ffa:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008fff:	75 0f                	jne    c0009010 <pbuf_copy_partial+0x90>
c0009001:	8d 76 00             	lea    esi,[esi+0x0]
c0009004:	b8 00 00 00 00       	mov    eax,0x0
c0009009:	e9 0e 01 00 00       	jmp    c000911c <pbuf_copy_partial+0x19c>
c000900e:	66 90                	xchg   ax,ax
c0009010:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009014:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009018:	e9 e3 00 00 00       	jmp    c0009100 <pbuf_copy_partial+0x180>
c000901d:	8d 76 00             	lea    esi,[esi+0x0]
c0009020:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0009025:	85 c0                	test   eax,eax
c0009027:	74 33                	je     c000905c <pbuf_copy_partial+0xdc>
c0009029:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000902d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009031:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0009036:	0f b7 c0             	movzx  eax,ax
c0009039:	39 c2                	cmp    edx,eax
c000903b:	72 1f                	jb     c000905c <pbuf_copy_partial+0xdc>
c000903d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009041:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009045:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009049:	89 d3                	mov    ebx,edx
c000904b:	29 c3                	sub    ebx,eax
c000904d:	89 d8                	mov    eax,ebx
c000904f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009054:	e9 9b 00 00 00       	jmp    c00090f4 <pbuf_copy_partial+0x174>
c0009059:	8d 76 00             	lea    esi,[esi+0x0]
c000905c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009060:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009068:	89 d1                	mov    ecx,edx
c000906a:	29 c1                	sub    ecx,eax
c000906c:	89 c8                	mov    eax,ecx
c000906e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009073:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0009078:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000907d:	39 c2                	cmp    edx,eax
c000907f:	76 0b                	jbe    c000908c <pbuf_copy_partial+0x10c>
c0009081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009085:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000908a:	66 90                	xchg   ax,ax
c000908c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009091:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009095:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009098:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000909d:	01 d1                	add    ecx,edx
c000909f:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c00090a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00090a8:	01 da                	add    edx,ebx
c00090aa:	83 ec 04             	sub    esp,0x4
c00090ad:	50                   	push   eax
c00090ae:	51                   	push   ecx
c00090af:	52                   	push   edx
c00090b0:	e8 c5 72 ff ff       	call   c000037a <memcpy>
c00090b5:	83 c4 10             	add    esp,0x10
c00090b8:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00090bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090c1:	01 d0                	add    eax,edx
c00090c3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00090c8:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c00090cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090d1:	01 d0                	add    eax,edx
c00090d3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00090d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00090dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090e0:	89 d3                	mov    ebx,edx
c00090e2:	29 c3                	sub    ebx,eax
c00090e4:	89 d8                	mov    eax,ebx
c00090e6:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090eb:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00090f2:	66 90                	xchg   ax,ax
c00090f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00090fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090fe:	66 90                	xchg   ax,ax
c0009100:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009105:	85 c0                	test   eax,eax
c0009107:	74 0b                	je     c0009114 <pbuf_copy_partial+0x194>
c0009109:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000910e:	0f 85 0c ff ff ff    	jne    c0009020 <pbuf_copy_partial+0xa0>
c0009114:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0009119:	8d 76 00             	lea    esi,[esi+0x0]
c000911c:	83 c4 28             	add    esp,0x28
c000911f:	5b                   	pop    ebx
c0009120:	c3                   	ret    
c0009121:	8d 76 00             	lea    esi,[esi+0x0]

c0009124 <pbuf_take>:
c0009124:	83 ec 2c             	sub    esp,0x2c
c0009127:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000912b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009134:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009139:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009140:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009145:	75 1d                	jne    c0009164 <pbuf_take+0x40>
c0009147:	83 ec 08             	sub    esp,0x8
c000914a:	68 e4 fe 02 c0       	push   0xc002fee4
c000914f:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009154:	e8 77 69 01 00       	call   c001fad0 <CPrintf>
c0009159:	83 c4 10             	add    esp,0x10
c000915c:	b0 00                	mov    al,0x0
c000915e:	e9 3d 01 00 00       	jmp    c00092a0 <pbuf_take+0x17c>
c0009163:	90                   	nop
c0009164:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009169:	75 1d                	jne    c0009188 <pbuf_take+0x64>
c000916b:	83 ec 08             	sub    esp,0x8
c000916e:	68 fb fe 02 c0       	push   0xc002fefb
c0009173:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009178:	e8 53 69 01 00       	call   c001fad0 <CPrintf>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	b0 00                	mov    al,0x0
c0009182:	e9 19 01 00 00       	jmp    c00092a0 <pbuf_take+0x17c>
c0009187:	90                   	nop
c0009188:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000918d:	74 1d                	je     c00091ac <pbuf_take+0x88>
c000918f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009194:	74 16                	je     c00091ac <pbuf_take+0x88>
c0009196:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000919a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000919d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00091a2:	0f b7 c0             	movzx  eax,ax
c00091a5:	39 c2                	cmp    edx,eax
c00091a7:	76 0b                	jbe    c00091b4 <pbuf_take+0x90>
c00091a9:	8d 76 00             	lea    esi,[esi+0x0]
c00091ac:	b0 f2                	mov    al,0xf2
c00091ae:	e9 ed 00 00 00       	jmp    c00092a0 <pbuf_take+0x17c>
c00091b3:	90                   	nop
c00091b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091bc:	e9 9f 00 00 00       	jmp    c0009260 <pbuf_take+0x13c>
c00091c1:	8d 76 00             	lea    esi,[esi+0x0]
c00091c4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00091c9:	75 15                	jne    c00091e0 <pbuf_take+0xbc>
c00091cb:	83 ec 08             	sub    esp,0x8
c00091ce:	68 16 ff 02 c0       	push   0xc002ff16
c00091d3:	68 e6 f9 02 c0       	push   0xc002f9e6
c00091d8:	e8 f3 68 01 00       	call   c001fad0 <CPrintf>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00091e4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ed:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091f1:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091f6:	0f b7 c0             	movzx  eax,ax
c00091f9:	39 c2                	cmp    edx,eax
c00091fb:	76 0f                	jbe    c000920c <pbuf_take+0xe8>
c00091fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009201:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009205:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000920a:	66 90                	xchg   ax,ax
c000920c:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c0009211:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c0009216:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000921a:	01 c1                	add    ecx,eax
c000921c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009220:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009223:	83 ec 04             	sub    esp,0x4
c0009226:	52                   	push   edx
c0009227:	51                   	push   ecx
c0009228:	50                   	push   eax
c0009229:	e8 4c 71 ff ff       	call   c000037a <memcpy>
c000922e:	83 c4 10             	add    esp,0x10
c0009231:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009235:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000923a:	89 d1                	mov    ecx,edx
c000923c:	29 c1                	sub    ecx,eax
c000923e:	89 c8                	mov    eax,ecx
c0009240:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009245:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000924a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000924f:	01 d0                	add    eax,edx
c0009251:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009256:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000925a:	8b 00                	mov    eax,DWORD PTR [eax]
c000925c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009260:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009265:	85 c0                	test   eax,eax
c0009267:	0f 85 57 ff ff ff    	jne    c00091c4 <pbuf_take+0xa0>
c000926d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009272:	85 c0                	test   eax,eax
c0009274:	75 0e                	jne    c0009284 <pbuf_take+0x160>
c0009276:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000927b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009280:	39 c2                	cmp    edx,eax
c0009282:	74 18                	je     c000929c <pbuf_take+0x178>
c0009284:	83 ec 08             	sub    esp,0x8
c0009287:	68 2e ff 02 c0       	push   0xc002ff2e
c000928c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009291:	e8 3a 68 01 00       	call   c001fad0 <CPrintf>
c0009296:	83 c4 10             	add    esp,0x10
c0009299:	8d 76 00             	lea    esi,[esi+0x0]
c000929c:	b0 00                	mov    al,0x0
c000929e:	66 90                	xchg   ax,ax
c00092a0:	83 c4 2c             	add    esp,0x2c
c00092a3:	c3                   	ret    

c00092a4 <pbuf_coalesce>:
c00092a4:	83 ec 1c             	sub    esp,0x1c
c00092a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00092ad:	85 c0                	test   eax,eax
c00092af:	75 07                	jne    c00092b8 <pbuf_coalesce+0x14>
c00092b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b5:	eb 7d                	jmp    c0009334 <pbuf_coalesce+0x90>
c00092b7:	90                   	nop
c00092b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00092bf:	0f b7 c0             	movzx  eax,ax
c00092c2:	83 ec 04             	sub    esp,0x4
c00092c5:	6a 00                	push   0x0
c00092c7:	50                   	push   eax
c00092c8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00092cc:	e8 df f1 ff ff       	call   c00084b0 <pbuf_alloc>
c00092d1:	83 c4 10             	add    esp,0x10
c00092d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00092d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00092dd:	75 09                	jne    c00092e8 <pbuf_coalesce+0x44>
c00092df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e3:	eb 4f                	jmp    c0009334 <pbuf_coalesce+0x90>
c00092e5:	8d 76 00             	lea    esi,[esi+0x0]
c00092e8:	83 ec 08             	sub    esp,0x8
c00092eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092f3:	e8 20 fa ff ff       	call   c0008d18 <pbuf_copy>
c00092f8:	83 c4 10             	add    esp,0x10
c00092fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00092ff:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c0009304:	85 c0                	test   eax,eax
c0009306:	74 18                	je     c0009320 <pbuf_coalesce+0x7c>
c0009308:	83 ec 08             	sub    esp,0x8
c000930b:	68 44 ff 02 c0       	push   0xc002ff44
c0009310:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009315:	e8 b6 67 01 00       	call   c001fad0 <CPrintf>
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	8d 76 00             	lea    esi,[esi+0x0]
c0009320:	83 ec 0c             	sub    esp,0xc
c0009323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009327:	e8 a8 ef ff ff       	call   c00082d4 <pbuf_free>
c000932c:	83 c4 10             	add    esp,0x10
c000932f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009333:	90                   	nop
c0009334:	83 c4 1c             	add    esp,0x1c
c0009337:	c3                   	ret    

c0009338 <pbuf_get_at>:
c0009338:	83 ec 14             	sub    esp,0x14
c000933b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000933f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009343:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009346:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000934b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000934f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009353:	eb 27                	jmp    c000937c <pbuf_get_at+0x44>
c0009355:	8d 76 00             	lea    esi,[esi+0x0]
c0009358:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000935c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009360:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009365:	89 d1                	mov    ecx,edx
c0009367:	29 c1                	sub    ecx,eax
c0009369:	89 c8                	mov    eax,ecx
c000936b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009370:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009374:	8b 00                	mov    eax,DWORD PTR [eax]
c0009376:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000937a:	66 90                	xchg   ax,ax
c000937c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009381:	74 15                	je     c0009398 <pbuf_get_at+0x60>
c0009383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009387:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000938b:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009390:	0f b7 c0             	movzx  eax,ax
c0009393:	39 c2                	cmp    edx,eax
c0009395:	73 c1                	jae    c0009358 <pbuf_get_at+0x20>
c0009397:	90                   	nop
c0009398:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000939d:	74 29                	je     c00093c8 <pbuf_get_at+0x90>
c000939f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093a3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093a7:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c00093ac:	0f b7 c0             	movzx  eax,ax
c00093af:	39 c2                	cmp    edx,eax
c00093b1:	73 15                	jae    c00093c8 <pbuf_get_at+0x90>
c00093b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00093b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00093ba:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00093bf:	01 d0                	add    eax,edx
c00093c1:	8a 00                	mov    al,BYTE PTR [eax]
c00093c3:	eb 07                	jmp    c00093cc <pbuf_get_at+0x94>
c00093c5:	8d 76 00             	lea    esi,[esi+0x0]
c00093c8:	b0 00                	mov    al,0x0
c00093ca:	66 90                	xchg   ax,ax
c00093cc:	83 c4 14             	add    esp,0x14
c00093cf:	c3                   	ret    

c00093d0 <pbuf_memcmp>:
c00093d0:	83 ec 18             	sub    esp,0x18
c00093d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00093d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00093db:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00093e0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093e8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093f5:	eb 25                	jmp    c000941c <pbuf_memcmp+0x4c>
c00093f7:	90                   	nop
c00093f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093fc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009400:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009405:	89 d1                	mov    ecx,edx
c0009407:	29 c1                	sub    ecx,eax
c0009409:	89 c8                	mov    eax,ecx
c000940b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009414:	8b 00                	mov    eax,DWORD PTR [eax]
c0009416:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000941a:	66 90                	xchg   ax,ax
c000941c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009421:	74 15                	je     c0009438 <pbuf_memcmp+0x68>
c0009423:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009427:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000942b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009430:	0f b7 c0             	movzx  eax,ax
c0009433:	39 c2                	cmp    edx,eax
c0009435:	73 c1                	jae    c00093f8 <pbuf_memcmp+0x28>
c0009437:	90                   	nop
c0009438:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000943d:	0f 84 8d 00 00 00    	je     c00094d0 <pbuf_memcmp+0x100>
c0009443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009447:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000944b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009450:	0f b7 c0             	movzx  eax,ax
c0009453:	39 c2                	cmp    edx,eax
c0009455:	73 79                	jae    c00094d0 <pbuf_memcmp+0x100>
c0009457:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000945e:	eb 5c                	jmp    c00094bc <pbuf_memcmp+0xec>
c0009460:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009465:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000946a:	01 d0                	add    eax,edx
c000946c:	0f b7 c0             	movzx  eax,ax
c000946f:	50                   	push   eax
c0009470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009474:	e8 bf fe ff ff       	call   c0009338 <pbuf_get_at>
c0009479:	83 c4 08             	add    esp,0x8
c000947c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009480:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009485:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009489:	01 d0                	add    eax,edx
c000948b:	8a 00                	mov    al,BYTE PTR [eax]
c000948d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009491:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c0009496:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000949b:	39 c2                	cmp    edx,eax
c000949d:	74 0d                	je     c00094ac <pbuf_memcmp+0xdc>
c000949f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00094a4:	83 c0 01             	add    eax,0x1
c00094a7:	eb 2f                	jmp    c00094d8 <pbuf_memcmp+0x108>
c00094a9:	8d 76 00             	lea    esi,[esi+0x0]
c00094ac:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00094b1:	83 c0 01             	add    eax,0x1
c00094b4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00094b9:	8d 76 00             	lea    esi,[esi+0x0]
c00094bc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c00094c1:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00094c5:	39 c2                	cmp    edx,eax
c00094c7:	72 97                	jb     c0009460 <pbuf_memcmp+0x90>
c00094c9:	b8 00 00 00 00       	mov    eax,0x0
c00094ce:	eb 08                	jmp    c00094d8 <pbuf_memcmp+0x108>
c00094d0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00094d5:	8d 76 00             	lea    esi,[esi+0x0]
c00094d8:	83 c4 18             	add    esp,0x18
c00094db:	c3                   	ret    

c00094dc <pbuf_memfind>:
c00094dc:	83 ec 18             	sub    esp,0x18
c00094df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00094e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00094e7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00094ec:	66 89 04 24          	mov    WORD PTR [esp],ax
c00094f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094f4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00094f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094fb:	89 d1                	mov    ecx,edx
c00094fd:	29 c1                	sub    ecx,eax
c00094ff:	89 c8                	mov    eax,ecx
c0009501:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0009506:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000950a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000950d:	0f b7 c0             	movzx  eax,ax
c0009510:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0009515:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0009519:	01 ca                	add    edx,ecx
c000951b:	39 d0                	cmp    eax,edx
c000951d:	7c 65                	jl     c0009584 <pbuf_memfind+0xa8>
c000951f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009522:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009527:	eb 4b                	jmp    c0009574 <pbuf_memfind+0x98>
c0009529:	8d 76 00             	lea    esi,[esi+0x0]
c000952c:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0009531:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c0009536:	52                   	push   edx
c0009537:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953b:	50                   	push   eax
c000953c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009540:	e8 8b fe ff ff       	call   c00093d0 <pbuf_memcmp>
c0009545:	83 c4 10             	add    esp,0x10
c0009548:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000954d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009552:	85 c0                	test   eax,eax
c0009554:	75 0a                	jne    c0009560 <pbuf_memfind+0x84>
c0009556:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000955b:	eb 2f                	jmp    c000958c <pbuf_memfind+0xb0>
c000955d:	8d 76 00             	lea    esi,[esi+0x0]
c0009560:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009565:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000956a:	01 d0                	add    eax,edx
c000956c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009571:	8d 76 00             	lea    esi,[esi+0x0]
c0009574:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009579:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c000957e:	39 c2                	cmp    edx,eax
c0009580:	76 aa                	jbe    c000952c <pbuf_memfind+0x50>
c0009582:	66 90                	xchg   ax,ax
c0009584:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009589:	8d 76 00             	lea    esi,[esi+0x0]
c000958c:	83 c4 18             	add    esp,0x18
c000958f:	c3                   	ret    

c0009590 <pbuf_strstr>:
c0009590:	83 ec 1c             	sub    esp,0x1c
c0009593:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009598:	74 1e                	je     c00095b8 <pbuf_strstr+0x28>
c000959a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000959e:	8a 00                	mov    al,BYTE PTR [eax]
c00095a0:	0f be c0             	movsx  eax,al
c00095a3:	85 c0                	test   eax,eax
c00095a5:	74 11                	je     c00095b8 <pbuf_strstr+0x28>
c00095a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00095ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00095ae:	0f b7 c0             	movzx  eax,ax
c00095b1:	3d ff ff 00 00       	cmp    eax,0xffff
c00095b6:	75 08                	jne    c00095c0 <pbuf_strstr+0x30>
c00095b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00095bd:	eb 41                	jmp    c0009600 <pbuf_strstr+0x70>
c00095bf:	90                   	nop
c00095c0:	83 ec 0c             	sub    esp,0xc
c00095c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00095c7:	e8 b4 6f ff ff       	call   c0000580 <strlen>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00095d3:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c00095db:	76 07                	jbe    c00095e4 <pbuf_strstr+0x54>
c00095dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00095e2:	eb 1c                	jmp    c0009600 <pbuf_strstr+0x70>
c00095e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095e8:	0f b7 c0             	movzx  eax,ax
c00095eb:	6a 00                	push   0x0
c00095ed:	50                   	push   eax
c00095ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095f6:	e8 e1 fe ff ff       	call   c00094dc <pbuf_memfind>
c00095fb:	83 c4 10             	add    esp,0x10
c00095fe:	66 90                	xchg   ax,ax
c0009600:	83 c4 1c             	add    esp,0x1c
c0009603:	c3                   	ret    

c0009604 <raw_input>:
c0009604:	83 ec 2c             	sub    esp,0x2c
c0009607:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000960c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009610:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009613:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000961b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000961e:	0f b6 c0             	movzx  eax,al
c0009621:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009626:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000962e:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009633:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009637:	e9 b8 00 00 00       	jmp    c00096f4 <raw_input+0xf0>
c000963c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009640:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009643:	0f b6 d0             	movzx  edx,al
c0009646:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000964b:	39 c2                	cmp    edx,eax
c000964d:	0f 85 8d 00 00 00    	jne    c00096e0 <raw_input+0xdc>
c0009653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009657:	85 c0                	test   eax,eax
c0009659:	74 19                	je     c0009674 <raw_input+0x70>
c000965b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000965f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009661:	85 c0                	test   eax,eax
c0009663:	74 0f                	je     c0009674 <raw_input+0x70>
c0009665:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009669:	8b 10                	mov    edx,DWORD PTR [eax]
c000966b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009670:	39 c2                	cmp    edx,eax
c0009672:	75 6c                	jne    c00096e0 <raw_input+0xdc>
c0009674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009678:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000967b:	85 c0                	test   eax,eax
c000967d:	74 61                	je     c00096e0 <raw_input+0xdc>
c000967f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009683:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009686:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000968a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000968d:	68 90 68 03 c0       	push   0xc0036890
c0009692:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009696:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000969a:	52                   	push   edx
c000969b:	ff d0                	call   eax
c000969d:	83 c4 10             	add    esp,0x10
c00096a0:	0f b6 c0             	movzx  eax,al
c00096a3:	85 c0                	test   eax,eax
c00096a5:	74 39                	je     c00096e0 <raw_input+0xdc>
c00096a7:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c00096af:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c00096b4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00096b9:	74 25                	je     c00096e0 <raw_input+0xdc>
c00096bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096bf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00096c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00096c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00096c9:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00096cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00096d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096da:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00096df:	90                   	nop
c00096e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00096ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096f3:	90                   	nop
c00096f4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00096f9:	85 c0                	test   eax,eax
c00096fb:	75 0b                	jne    c0009708 <raw_input+0x104>
c00096fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009702:	0f 85 34 ff ff ff    	jne    c000963c <raw_input+0x38>
c0009708:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000970c:	83 c4 2c             	add    esp,0x2c
c000970f:	c3                   	ret    

c0009710 <raw_bind>:
c0009710:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009715:	74 09                	je     c0009720 <raw_bind+0x10>
c0009717:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000971b:	8b 00                	mov    eax,DWORD PTR [eax]
c000971d:	eb 09                	jmp    c0009728 <raw_bind+0x18>
c000971f:	90                   	nop
c0009720:	b8 00 00 00 00       	mov    eax,0x0
c0009725:	8d 76 00             	lea    esi,[esi+0x0]
c0009728:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000972c:	89 02                	mov    DWORD PTR [edx],eax
c000972e:	b0 00                	mov    al,0x0
c0009730:	c3                   	ret    
c0009731:	8d 76 00             	lea    esi,[esi+0x0]

c0009734 <raw_connect>:
c0009734:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009739:	74 09                	je     c0009744 <raw_connect+0x10>
c000973b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009741:	eb 09                	jmp    c000974c <raw_connect+0x18>
c0009743:	90                   	nop
c0009744:	b8 00 00 00 00       	mov    eax,0x0
c0009749:	8d 76 00             	lea    esi,[esi+0x0]
c000974c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009750:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009753:	b0 00                	mov    al,0x0
c0009755:	c3                   	ret    
c0009756:	66 90                	xchg   ax,ax

c0009758 <raw_recv>:
c0009758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009760:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009767:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000976b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000976e:	90                   	nop
c000976f:	c3                   	ret    

c0009770 <raw_sendto>:
c0009770:	83 ec 1c             	sub    esp,0x1c
c0009773:	83 ec 08             	sub    esp,0x8
c0009776:	6a 14                	push   0x14
c0009778:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000977c:	e8 b3 e9 ff ff       	call   c0008134 <pbuf_header>
c0009781:	83 c4 10             	add    esp,0x10
c0009784:	0f b6 c0             	movzx  eax,al
c0009787:	85 c0                	test   eax,eax
c0009789:	74 49                	je     c00097d4 <raw_sendto+0x64>
c000978b:	83 ec 04             	sub    esp,0x4
c000978e:	6a 00                	push   0x0
c0009790:	6a 00                	push   0x0
c0009792:	6a 01                	push   0x1
c0009794:	e8 17 ed ff ff       	call   c00084b0 <pbuf_alloc>
c0009799:	83 c4 10             	add    esp,0x10
c000979c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00097a5:	75 09                	jne    c00097b0 <raw_sendto+0x40>
c00097a7:	b0 ff                	mov    al,0xff
c00097a9:	e9 2a 01 00 00       	jmp    c00098d8 <raw_sendto+0x168>
c00097ae:	66 90                	xchg   ax,ax
c00097b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00097b7:	0f b7 c0             	movzx  eax,ax
c00097ba:	85 c0                	test   eax,eax
c00097bc:	74 52                	je     c0009810 <raw_sendto+0xa0>
c00097be:	83 ec 08             	sub    esp,0x8
c00097c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097c9:	e8 2a f4 ff ff       	call   c0008bf8 <pbuf_chain>
c00097ce:	83 c4 10             	add    esp,0x10
c00097d1:	eb 3d                	jmp    c0009810 <raw_sendto+0xa0>
c00097d3:	90                   	nop
c00097d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00097d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097dc:	83 ec 08             	sub    esp,0x8
c00097df:	6a ec                	push   0xffffffec
c00097e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e5:	e8 4a e9 ff ff       	call   c0008134 <pbuf_header>
c00097ea:	83 c4 10             	add    esp,0x10
c00097ed:	0f b6 c0             	movzx  eax,al
c00097f0:	85 c0                	test   eax,eax
c00097f2:	74 1c                	je     c0009810 <raw_sendto+0xa0>
c00097f4:	83 ec 08             	sub    esp,0x8
c00097f7:	68 58 ff 02 c0       	push   0xc002ff58
c00097fc:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009801:	e8 ca 62 01 00       	call   c001fad0 <CPrintf>
c0009806:	83 c4 10             	add    esp,0x10
c0009809:	b0 ff                	mov    al,0xff
c000980b:	e9 c8 00 00 00       	jmp    c00098d8 <raw_sendto+0x168>
c0009810:	83 ec 0c             	sub    esp,0xc
c0009813:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009817:	e8 00 9e 00 00       	call   c001361c <ip_route>
c000981c:	83 c4 10             	add    esp,0x10
c000981f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009823:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0009828:	75 22                	jne    c000984c <raw_sendto+0xdc>
c000982a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000982e:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009832:	74 10                	je     c0009844 <raw_sendto+0xd4>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000983b:	e8 94 ea ff ff       	call   c00082d4 <pbuf_free>
c0009840:	83 c4 10             	add    esp,0x10
c0009843:	90                   	nop
c0009844:	b0 fc                	mov    al,0xfc
c0009846:	e9 8d 00 00 00       	jmp    c00098d8 <raw_sendto+0x168>
c000984b:	90                   	nop
c000984c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009850:	85 c0                	test   eax,eax
c0009852:	74 0c                	je     c0009860 <raw_sendto+0xf0>
c0009854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009858:	8b 00                	mov    eax,DWORD PTR [eax]
c000985a:	85 c0                	test   eax,eax
c000985c:	75 12                	jne    c0009870 <raw_sendto+0x100>
c000985e:	66 90                	xchg   ax,ax
c0009860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009864:	83 c0 04             	add    eax,0x4
c0009867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000986b:	eb 0b                	jmp    c0009878 <raw_sendto+0x108>
c000986d:	8d 76 00             	lea    esi,[esi+0x0]
c0009870:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009878:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000987c:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c000987f:	0f b6 c8             	movzx  ecx,al
c0009882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009886:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009889:	0f b6 d0             	movzx  edx,al
c000988c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009890:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009893:	0f b6 c0             	movzx  eax,al
c0009896:	83 ec 04             	sub    esp,0x4
c0009899:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000989d:	51                   	push   ecx
c000989e:	52                   	push   edx
c000989f:	50                   	push   eax
c00098a0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00098a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ac:	e8 43 a2 00 00       	call   c0013af4 <ip_output_if>
c00098b1:	83 c4 20             	add    esp,0x20
c00098b4:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00098b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098bc:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00098c0:	74 12                	je     c00098d4 <raw_sendto+0x164>
c00098c2:	83 ec 0c             	sub    esp,0xc
c00098c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098c9:	e8 06 ea ff ff       	call   c00082d4 <pbuf_free>
c00098ce:	83 c4 10             	add    esp,0x10
c00098d1:	8d 76 00             	lea    esi,[esi+0x0]
c00098d4:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c00098d8:	83 c4 1c             	add    esp,0x1c
c00098db:	c3                   	ret    

c00098dc <raw_send>:
c00098dc:	83 ec 0c             	sub    esp,0xc
c00098df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098e3:	83 c0 04             	add    eax,0x4
c00098e6:	83 ec 04             	sub    esp,0x4
c00098e9:	50                   	push   eax
c00098ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f2:	e8 79 fe ff ff       	call   c0009770 <raw_sendto>
c00098f7:	83 c4 10             	add    esp,0x10
c00098fa:	83 c4 0c             	add    esp,0xc
c00098fd:	c3                   	ret    
c00098fe:	66 90                	xchg   ax,ax

c0009900 <raw_remove>:
c0009900:	83 ec 1c             	sub    esp,0x1c
c0009903:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009908:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000990c:	75 12                	jne    c0009920 <raw_remove+0x20>
c000990e:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009913:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009916:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000991b:	eb 4b                	jmp    c0009968 <raw_remove+0x68>
c000991d:	8d 76 00             	lea    esi,[esi+0x0]
c0009920:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c0009925:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009929:	eb 35                	jmp    c0009960 <raw_remove+0x60>
c000992b:	90                   	nop
c000992c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009930:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009933:	85 c0                	test   eax,eax
c0009935:	74 1d                	je     c0009954 <raw_remove+0x54>
c0009937:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000993b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000993e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009942:	75 10                	jne    c0009954 <raw_remove+0x54>
c0009944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009948:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000994b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009952:	66 90                	xchg   ax,ax
c0009954:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009958:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000995b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000995f:	90                   	nop
c0009960:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009965:	75 c5                	jne    c000992c <raw_remove+0x2c>
c0009967:	90                   	nop
c0009968:	83 ec 08             	sub    esp,0x8
c000996b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000996f:	6a 00                	push   0x0
c0009971:	e8 9e e0 ff ff       	call   c0007a14 <memp_free>
c0009976:	83 c4 10             	add    esp,0x10
c0009979:	90                   	nop
c000997a:	83 c4 1c             	add    esp,0x1c
c000997d:	c3                   	ret    
c000997e:	66 90                	xchg   ax,ax

c0009980 <raw_new>:
c0009980:	83 ec 2c             	sub    esp,0x2c
c0009983:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009987:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000998b:	83 ec 0c             	sub    esp,0xc
c000998e:	6a 00                	push   0x0
c0009990:	e8 53 df ff ff       	call   c00078e8 <memp_malloc>
c0009995:	83 c4 10             	add    esp,0x10
c0009998:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000999c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00099a1:	74 3d                	je     c00099e0 <raw_new+0x60>
c00099a3:	83 ec 04             	sub    esp,0x4
c00099a6:	6a 1c                	push   0x1c
c00099a8:	6a 00                	push   0x0
c00099aa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099ae:	e8 3d 6b ff ff       	call   c00004f0 <memset>
c00099b3:	83 c4 10             	add    esp,0x10
c00099b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099ba:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00099be:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00099c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099c5:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c00099c9:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c00099cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00099d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099da:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00099df:	90                   	nop
c00099e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099e4:	83 c4 2c             	add    esp,0x2c
c00099e7:	c3                   	ret    

c00099e8 <stats_init>:
c00099e8:	90                   	nop
c00099e9:	c3                   	ret    
c00099ea:	66 90                	xchg   ax,ax

c00099ec <sys_msleep>:
c00099ec:	83 ec 1c             	sub    esp,0x1c
c00099ef:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00099f4:	74 46                	je     c0009a3c <sys_msleep+0x50>
c00099f6:	83 ec 08             	sub    esp,0x8
c00099f9:	6a 00                	push   0x0
c00099fb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099ff:	50                   	push   eax
c0009a00:	e8 7f 72 ff ff       	call   c0000c84 <sys_sem_new>
c0009a05:	83 c4 10             	add    esp,0x10
c0009a08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009a0c:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0009a11:	85 c0                	test   eax,eax
c0009a13:	75 27                	jne    c0009a3c <sys_msleep+0x50>
c0009a15:	83 ec 08             	sub    esp,0x8
c0009a18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009a1c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a20:	50                   	push   eax
c0009a21:	e8 b6 72 ff ff       	call   c0000cdc <sys_arch_sem_wait>
c0009a26:	83 c4 10             	add    esp,0x10
c0009a29:	83 ec 0c             	sub    esp,0xc
c0009a2c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009a30:	50                   	push   eax
c0009a31:	e8 76 72 ff ff       	call   c0000cac <sys_sem_free>
c0009a36:	83 c4 10             	add    esp,0x10
c0009a39:	8d 76 00             	lea    esi,[esi+0x0]
c0009a3c:	90                   	nop
c0009a3d:	83 c4 1c             	add    esp,0x1c
c0009a40:	c3                   	ret    
c0009a41:	66 90                	xchg   ax,ax
c0009a43:	90                   	nop

c0009a44 <tcp_accept_null>:
c0009a44:	83 ec 04             	sub    esp,0x4
c0009a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a4b:	88 04 24             	mov    BYTE PTR [esp],al
c0009a4e:	b0 f6                	mov    al,0xf6
c0009a50:	83 c4 04             	add    esp,0x4
c0009a53:	c3                   	ret    

c0009a54 <tcp_listen_with_backlog>:
c0009a54:	83 ec 2c             	sub    esp,0x2c
c0009a57:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a5b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a63:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a66:	85 c0                	test   eax,eax
c0009a68:	74 22                	je     c0009a8c <tcp_listen_with_backlog+0x38>
c0009a6a:	83 ec 08             	sub    esp,0x8
c0009a6d:	68 80 ff 02 c0       	push   0xc002ff80
c0009a72:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009a77:	e8 54 60 01 00       	call   c001fad0 <CPrintf>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	b8 00 00 00 00       	mov    eax,0x0
c0009a84:	e9 77 01 00 00       	jmp    c0009c00 <tcp_listen_with_backlog+0x1ac>
c0009a89:	8d 76 00             	lea    esi,[esi+0x0]
c0009a8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a90:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a93:	83 f8 01             	cmp    eax,0x1
c0009a96:	75 0c                	jne    c0009aa4 <tcp_listen_with_backlog+0x50>
c0009a98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a9c:	e9 5f 01 00 00       	jmp    c0009c00 <tcp_listen_with_backlog+0x1ac>
c0009aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0009aa4:	83 ec 0c             	sub    esp,0xc
c0009aa7:	6a 03                	push   0x3
c0009aa9:	e8 3a de ff ff       	call   c00078e8 <memp_malloc>
c0009aae:	83 c4 10             	add    esp,0x10
c0009ab1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ab5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009aba:	75 0c                	jne    c0009ac8 <tcp_listen_with_backlog+0x74>
c0009abc:	b8 00 00 00 00       	mov    eax,0x0
c0009ac1:	e9 3a 01 00 00       	jmp    c0009c00 <tcp_listen_with_backlog+0x1ac>
c0009ac6:	66 90                	xchg   ax,ax
c0009ac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009acc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009acf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ad3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009ad6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ada:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009add:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ae1:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009ae5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ae9:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009af0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009af4:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009af7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009afb:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009afe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b02:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009b05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b09:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b10:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009b13:	83 c8 02             	or     eax,0x2
c0009b16:	88 c2                	mov    dl,al
c0009b18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b1c:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009b1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b23:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009b26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b2a:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009b2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b31:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009b34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b38:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009b3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009b41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b45:	89 10                	mov    DWORD PTR [eax],edx
c0009b47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b4b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b4e:	0f b7 c0             	movzx  eax,ax
c0009b51:	85 c0                	test   eax,eax
c0009b53:	74 6f                	je     c0009bc4 <tcp_listen_with_backlog+0x170>
c0009b55:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b5a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b5e:	75 10                	jne    c0009b70 <tcp_listen_with_backlog+0x11c>
c0009b60:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b68:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009b6d:	eb 49                	jmp    c0009bb8 <tcp_listen_with_backlog+0x164>
c0009b6f:	90                   	nop
c0009b70:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b75:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b7a:	eb 30                	jmp    c0009bac <tcp_listen_with_backlog+0x158>
c0009b7c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b84:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b88:	75 12                	jne    c0009b9c <tcp_listen_with_backlog+0x148>
c0009b8a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b8f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009b93:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009b96:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b99:	eb 1d                	jmp    c0009bb8 <tcp_listen_with_backlog+0x164>
c0009b9b:	90                   	nop
c0009b9c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009ba1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ba4:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0009bac:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009bb1:	85 c0                	test   eax,eax
c0009bb3:	75 c7                	jne    c0009b7c <tcp_listen_with_backlog+0x128>
c0009bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0009bb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bbc:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009bc3:	90                   	nop
c0009bc4:	83 ec 08             	sub    esp,0x8
c0009bc7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009bcb:	6a 02                	push   0x2
c0009bcd:	e8 42 de ff ff       	call   c0007a14 <memp_free>
c0009bd2:	83 c4 10             	add    esp,0x10
c0009bd5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bd9:	c7 40 1c 44 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009a44
c0009be0:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009be6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bf1:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009bf6:	e8 21 6f 00 00       	call   c0010b1c <tcp_timer_needed>
c0009bfb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bff:	90                   	nop
c0009c00:	83 c4 2c             	add    esp,0x2c
c0009c03:	c3                   	ret    

c0009c04 <tcp_update_rcv_ann_wnd>:
c0009c04:	83 ec 1c             	sub    esp,0x1c
c0009c07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c12:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c15:	0f b7 c0             	movzx  eax,ax
c0009c18:	01 d0                	add    eax,edx
c0009c1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c22:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c2c:	0f b7 c8             	movzx  ecx,ax
c0009c2f:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009c35:	76 05                	jbe    c0009c3c <tcp_update_rcv_ann_wnd+0x38>
c0009c37:	b8 30 04 00 00       	mov    eax,0x430
c0009c3c:	0f b7 c0             	movzx  eax,ax
c0009c3f:	01 c2                	add    edx,eax
c0009c41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c45:	29 d0                	sub    eax,edx
c0009c47:	78 23                	js     c0009c6c <tcp_update_rcv_ann_wnd+0x68>
c0009c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0009c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c54:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009c58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c5c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c63:	29 c2                	sub    edx,eax
c0009c65:	89 d0                	mov    eax,edx
c0009c67:	eb 77                	jmp    c0009ce0 <tcp_update_rcv_ann_wnd+0xdc>
c0009c69:	8d 76 00             	lea    esi,[esi+0x0]
c0009c6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c70:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c77:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c7a:	29 c2                	sub    edx,eax
c0009c7c:	89 d0                	mov    eax,edx
c0009c7e:	85 c0                	test   eax,eax
c0009c80:	7e 0e                	jle    c0009c90 <tcp_update_rcv_ann_wnd+0x8c>
c0009c82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c86:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009c8c:	eb 4a                	jmp    c0009cd8 <tcp_update_rcv_ann_wnd+0xd4>
c0009c8e:	66 90                	xchg   ax,ax
c0009c90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c94:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c9b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009c9e:	29 c2                	sub    edx,eax
c0009ca0:	89 d0                	mov    eax,edx
c0009ca2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca6:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009cae:	76 18                	jbe    c0009cc8 <tcp_update_rcv_ann_wnd+0xc4>
c0009cb0:	83 ec 08             	sub    esp,0x8
c0009cb3:	68 b4 01 03 c0       	push   0xc00301b4
c0009cb8:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009cbd:	e8 0e 5e 01 00       	call   c001fad0 <CPrintf>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	8d 76 00             	lea    esi,[esi+0x0]
c0009cc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ccc:	89 c2                	mov    edx,eax
c0009cce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cd2:	66 89 50 2e          	mov    WORD PTR [eax+0x2e],dx
c0009cd6:	66 90                	xchg   ax,ax
c0009cd8:	b8 00 00 00 00       	mov    eax,0x0
c0009cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce0:	83 c4 1c             	add    esp,0x1c
c0009ce3:	c3                   	ret    

c0009ce4 <tcp_recved>:
c0009ce4:	83 ec 2c             	sub    esp,0x2c
c0009ce7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ceb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009cf0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cf9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cfc:	0f b7 c0             	movzx  eax,ax
c0009cff:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009d04:	29 c1                	sub    ecx,eax
c0009d06:	89 c8                	mov    eax,ecx
c0009d08:	39 c2                	cmp    edx,eax
c0009d0a:	7e 18                	jle    c0009d24 <tcp_recved+0x40>
c0009d0c:	83 ec 08             	sub    esp,0x8
c0009d0f:	68 a4 ff 02 c0       	push   0xc002ffa4
c0009d14:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009d19:	e8 b2 5d 01 00       	call   c001fad0 <CPrintf>
c0009d1e:	83 c4 10             	add    esp,0x10
c0009d21:	8d 76 00             	lea    esi,[esi+0x0]
c0009d24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d28:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009d2f:	01 d0                	add    eax,edx
c0009d31:	89 c2                	mov    edx,eax
c0009d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d37:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c0009d3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d3f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009d42:	0f b7 c0             	movzx  eax,ax
c0009d45:	3d 60 08 00 00       	cmp    eax,0x860
c0009d4a:	76 0c                	jbe    c0009d58 <tcp_recved+0x74>
c0009d4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d50:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009d56:	66 90                	xchg   ax,ax
c0009d58:	83 ec 0c             	sub    esp,0xc
c0009d5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d5f:	e8 a0 fe ff ff       	call   c0009c04 <tcp_update_rcv_ann_wnd>
c0009d64:	83 c4 10             	add    esp,0x10
c0009d67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d6b:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009d73:	7e 23                	jle    c0009d98 <tcp_recved+0xb4>
c0009d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d79:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009d7c:	83 c8 02             	or     eax,0x2
c0009d7f:	88 c2                	mov    dl,al
c0009d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d85:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d8f:	e8 e0 60 00 00       	call   c000fe74 <tcp_output>
c0009d94:	83 c4 10             	add    esp,0x10
c0009d97:	90                   	nop
c0009d98:	90                   	nop
c0009d99:	83 c4 2c             	add    esp,0x2c
c0009d9c:	c3                   	ret    
c0009d9d:	8d 76 00             	lea    esi,[esi+0x0]

c0009da0 <tcp_new_port>:
c0009da0:	83 ec 10             	sub    esp,0x10
c0009da3:	90                   	nop
c0009da4:	66 a1 a0 3a 03 c0    	mov    ax,ds:0xc0033aa0
c0009daa:	8d 50 01             	lea    edx,[eax+0x1]
c0009dad:	66 89 15 a0 3a 03 c0 	mov    WORD PTR ds:0xc0033aa0,dx
c0009db4:	0f b7 c0             	movzx  eax,ax
c0009db7:	3d ff ff 00 00       	cmp    eax,0xffff
c0009dbc:	75 0a                	jne    c0009dc8 <tcp_new_port+0x28>
c0009dbe:	66 c7 05 a0 3a 03 c0 00 c0 	mov    WORD PTR ds:0xc0033aa0,0xc000
c0009dc7:	90                   	nop
c0009dc8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009dd0:	eb 4a                	jmp    c0009e1c <tcp_new_port+0x7c>
c0009dd2:	66 90                	xchg   ax,ax
c0009dd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009dd8:	8b 04 85 c0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd40]
c0009ddf:	8b 00                	mov    eax,DWORD PTR [eax]
c0009de1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009de5:	eb 29                	jmp    c0009e10 <tcp_new_port+0x70>
c0009de7:	90                   	nop
c0009de8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009dec:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009def:	66 a1 a0 3a 03 c0    	mov    ax,ds:0xc0033aa0
c0009df5:	0f b7 d2             	movzx  edx,dx
c0009df8:	0f b7 c0             	movzx  eax,ax
c0009dfb:	39 c2                	cmp    edx,eax
c0009dfd:	75 05                	jne    c0009e04 <tcp_new_port+0x64>
c0009dff:	eb a3                	jmp    c0009da4 <tcp_new_port+0x4>
c0009e01:	8d 76 00             	lea    esi,[esi+0x0]
c0009e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e0f:	90                   	nop
c0009e10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009e15:	75 d1                	jne    c0009de8 <tcp_new_port+0x48>
c0009e17:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009e1c:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009e21:	7e b1                	jle    c0009dd4 <tcp_new_port+0x34>
c0009e23:	66 a1 a0 3a 03 c0    	mov    ax,ds:0xc0033aa0
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	c3                   	ret    
c0009e2d:	8d 76 00             	lea    esi,[esi+0x0]

c0009e30 <tcp_bind>:
c0009e30:	83 ec 2c             	sub    esp,0x2c
c0009e33:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e3c:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009e44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e48:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e4b:	85 c0                	test   eax,eax
c0009e4d:	74 1d                	je     c0009e6c <tcp_bind+0x3c>
c0009e4f:	83 ec 08             	sub    esp,0x8
c0009e52:	68 c8 ff 02 c0       	push   0xc002ffc8
c0009e57:	68 e6 f9 02 c0       	push   0xc002f9e6
c0009e5c:	e8 6f 5c 01 00       	call   c001fad0 <CPrintf>
c0009e61:	83 c4 10             	add    esp,0x10
c0009e64:	b0 fa                	mov    al,0xfa
c0009e66:	e9 f1 00 00 00       	jmp    c0009f5c <tcp_bind+0x12c>
c0009e6b:	90                   	nop
c0009e6c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009e71:	85 c0                	test   eax,eax
c0009e73:	75 0b                	jne    c0009e80 <tcp_bind+0x50>
c0009e75:	e8 26 ff ff ff       	call   c0009da0 <tcp_new_port>
c0009e7a:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e7f:	90                   	nop
c0009e80:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e88:	eb 7a                	jmp    c0009f04 <tcp_bind+0xd4>
c0009e8a:	66 90                	xchg   ax,ax
c0009e8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e90:	8b 04 85 c0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd40]
c0009e97:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e9d:	eb 59                	jmp    c0009ef8 <tcp_bind+0xc8>
c0009e9f:	90                   	nop
c0009ea0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ea4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009ea7:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009eac:	0f b7 c0             	movzx  eax,ax
c0009eaf:	39 c2                	cmp    edx,eax
c0009eb1:	75 39                	jne    c0009eec <tcp_bind+0xbc>
c0009eb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eb7:	85 c0                	test   eax,eax
c0009eb9:	74 2d                	je     c0009ee8 <tcp_bind+0xb8>
c0009ebb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ec1:	85 c0                	test   eax,eax
c0009ec3:	74 23                	je     c0009ee8 <tcp_bind+0xb8>
c0009ec5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009eca:	74 1c                	je     c0009ee8 <tcp_bind+0xb8>
c0009ecc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ed0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ed2:	85 c0                	test   eax,eax
c0009ed4:	74 12                	je     c0009ee8 <tcp_bind+0xb8>
c0009ed6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eda:	8b 10                	mov    edx,DWORD PTR [eax]
c0009edc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ee2:	39 c2                	cmp    edx,eax
c0009ee4:	75 06                	jne    c0009eec <tcp_bind+0xbc>
c0009ee6:	66 90                	xchg   ax,ax
c0009ee8:	b0 f8                	mov    al,0xf8
c0009eea:	eb 70                	jmp    c0009f5c <tcp_bind+0x12c>
c0009eec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ef0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ef7:	90                   	nop
c0009ef8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009efd:	75 a1                	jne    c0009ea0 <tcp_bind+0x70>
c0009eff:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009f04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009f08:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009f0c:	0f 8c 7a ff ff ff    	jl     c0009e8c <tcp_bind+0x5c>
c0009f12:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009f17:	74 17                	je     c0009f30 <tcp_bind+0x100>
c0009f19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f1f:	85 c0                	test   eax,eax
c0009f21:	74 0d                	je     c0009f30 <tcp_bind+0x100>
c0009f23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f2b:	8b 12                	mov    edx,DWORD PTR [edx]
c0009f2d:	89 10                	mov    DWORD PTR [eax],edx
c0009f2f:	90                   	nop
c0009f30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f38:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c0009f3c:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009f42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f46:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f4d:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009f52:	e8 c5 6b 00 00       	call   c0010b1c <tcp_timer_needed>
c0009f57:	b0 00                	mov    al,0x0
c0009f59:	8d 76 00             	lea    esi,[esi+0x0]
c0009f5c:	83 c4 2c             	add    esp,0x2c
c0009f5f:	c3                   	ret    

c0009f60 <tcp_seg_free>:
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009f68:	74 32                	je     c0009f9c <tcp_seg_free+0x3c>
c0009f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f71:	85 c0                	test   eax,eax
c0009f73:	74 13                	je     c0009f88 <tcp_seg_free+0x28>
c0009f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f7c:	83 ec 0c             	sub    esp,0xc
c0009f7f:	50                   	push   eax
c0009f80:	e8 4f e3 ff ff       	call   c00082d4 <pbuf_free>
c0009f85:	83 c4 10             	add    esp,0x10
c0009f88:	83 ec 08             	sub    esp,0x8
c0009f8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f8f:	6a 04                	push   0x4
c0009f91:	e8 7e da ff ff       	call   c0007a14 <memp_free>
c0009f96:	83 c4 10             	add    esp,0x10
c0009f99:	8d 76 00             	lea    esi,[esi+0x0]
c0009f9c:	90                   	nop
c0009f9d:	83 c4 0c             	add    esp,0xc
c0009fa0:	c3                   	ret    
c0009fa1:	8d 76 00             	lea    esi,[esi+0x0]

c0009fa4 <tcp_segs_free>:
c0009fa4:	83 ec 1c             	sub    esp,0x1c
c0009fa7:	eb 27                	jmp    c0009fd0 <tcp_segs_free+0x2c>
c0009fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0009fac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009fb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fb6:	83 ec 0c             	sub    esp,0xc
c0009fb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009fbd:	e8 9e ff ff ff       	call   c0009f60 <tcp_seg_free>
c0009fc2:	83 c4 10             	add    esp,0x10
c0009fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0009fd0:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009fd5:	75 d5                	jne    c0009fac <tcp_segs_free+0x8>
c0009fd7:	90                   	nop
c0009fd8:	83 c4 1c             	add    esp,0x1c
c0009fdb:	c3                   	ret    

c0009fdc <tcp_setprio>:
c0009fdc:	83 ec 04             	sub    esp,0x4
c0009fdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fe3:	88 04 24             	mov    BYTE PTR [esp],al
c0009fe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fea:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0009fed:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009ff0:	90                   	nop
c0009ff1:	83 c4 04             	add    esp,0x4
c0009ff4:	c3                   	ret    
c0009ff5:	8d 76 00             	lea    esi,[esi+0x0]

c0009ff8 <tcp_seg_copy>:
c0009ff8:	83 ec 1c             	sub    esp,0x1c
c0009ffb:	83 ec 0c             	sub    esp,0xc
c0009ffe:	6a 04                	push   0x4
c000a000:	e8 e3 d8 ff ff       	call   c00078e8 <memp_malloc>
c000a005:	83 c4 10             	add    esp,0x10
c000a008:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a00c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a011:	75 09                	jne    c000a01c <tcp_seg_copy+0x24>
c000a013:	b8 00 00 00 00       	mov    eax,0x0
c000a018:	eb 2e                	jmp    c000a048 <tcp_seg_copy+0x50>
c000a01a:	66 90                	xchg   ax,ax
c000a01c:	83 ec 04             	sub    esp,0x4
c000a01f:	6a 10                	push   0x10
c000a021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a025:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a029:	e8 4c 63 ff ff       	call   c000037a <memcpy>
c000a02e:	83 c4 10             	add    esp,0x10
c000a031:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a035:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000a038:	83 ec 0c             	sub    esp,0xc
c000a03b:	50                   	push   eax
c000a03c:	e8 a3 ea ff ff       	call   c0008ae4 <pbuf_ref>
c000a041:	83 c4 10             	add    esp,0x10
c000a044:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a048:	83 c4 1c             	add    esp,0x1c
c000a04b:	c3                   	ret    

c000a04c <tcp_arg>:
c000a04c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a054:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a057:	90                   	nop
c000a058:	c3                   	ret    
c000a059:	8d 76 00             	lea    esi,[esi+0x0]

c000a05c <tcp_recv>:
c000a05c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a060:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a064:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a06a:	90                   	nop
c000a06b:	c3                   	ret    

c000a06c <tcp_sent>:
c000a06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a074:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a07a:	90                   	nop
c000a07b:	c3                   	ret    

c000a07c <tcp_err>:
c000a07c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a084:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a08a:	90                   	nop
c000a08b:	c3                   	ret    

c000a08c <tcp_accept>:
c000a08c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a094:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a097:	90                   	nop
c000a098:	c3                   	ret    
c000a099:	8d 76 00             	lea    esi,[esi+0x0]

c000a09c <tcp_poll>:
c000a09c:	83 ec 04             	sub    esp,0x4
c000a09f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0a3:	88 04 24             	mov    BYTE PTR [esp],al
c000a0a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a0aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a0ae:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a0b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a0b8:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a0bb:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a0be:	90                   	nop
c000a0bf:	83 c4 04             	add    esp,0x4
c000a0c2:	c3                   	ret    
c000a0c3:	90                   	nop

c000a0c4 <tcp_pcb_purge>:
c000a0c4:	83 ec 0c             	sub    esp,0xc
c000a0c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ce:	85 c0                	test   eax,eax
c000a0d0:	0f 84 ca 00 00 00    	je     c000a1a0 <tcp_pcb_purge+0xdc>
c000a0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0dd:	83 f8 0a             	cmp    eax,0xa
c000a0e0:	0f 84 ba 00 00 00    	je     c000a1a0 <tcp_pcb_purge+0xdc>
c000a0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ed:	83 f8 01             	cmp    eax,0x1
c000a0f0:	0f 84 aa 00 00 00    	je     c000a1a0 <tcp_pcb_purge+0xdc>
c000a0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0fa:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a100:	85 c0                	test   eax,eax
c000a102:	74 24                	je     c000a128 <tcp_pcb_purge+0x64>
c000a104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a108:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a10e:	83 ec 0c             	sub    esp,0xc
c000a111:	50                   	push   eax
c000a112:	e8 bd e1 ff ff       	call   c00082d4 <pbuf_free>
c000a117:	83 c4 10             	add    esp,0x10
c000a11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a11e:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a12c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	50                   	push   eax
c000a136:	e8 69 fe ff ff       	call   c0009fa4 <tcp_segs_free>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a142:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a150:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a15a:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a15d:	83 ec 0c             	sub    esp,0xc
c000a160:	50                   	push   eax
c000a161:	e8 3e fe ff ff       	call   c0009fa4 <tcp_segs_free>
c000a166:	83 c4 10             	add    esp,0x10
c000a169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a16d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a170:	83 ec 0c             	sub    esp,0xc
c000a173:	50                   	push   eax
c000a174:	e8 2b fe ff ff       	call   c0009fa4 <tcp_segs_free>
c000a179:	83 c4 10             	add    esp,0x10
c000a17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a180:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a18b:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a18e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a192:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a199:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a19f:	90                   	nop
c000a1a0:	90                   	nop
c000a1a1:	83 c4 0c             	add    esp,0xc
c000a1a4:	c3                   	ret    
c000a1a5:	8d 76 00             	lea    esi,[esi+0x0]

c000a1a8 <tcp_slowtmr>:
c000a1a8:	57                   	push   edi
c000a1a9:	56                   	push   esi
c000a1aa:	53                   	push   ebx
c000a1ab:	83 ec 20             	sub    esp,0x20
c000a1ae:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a1b3:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a1b8:	83 c0 01             	add    eax,0x1
c000a1bb:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a1c0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a1c8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a1cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a1d1:	e9 0e 06 00 00       	jmp    c000a7e4 <tcp_slowtmr+0x63c>
c000a1d6:	66 90                	xchg   ax,ax
c000a1d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1df:	85 c0                	test   eax,eax
c000a1e1:	75 15                	jne    c000a1f8 <tcp_slowtmr+0x50>
c000a1e3:	83 ec 08             	sub    esp,0x8
c000a1e6:	68 f0 ff 02 c0       	push   0xc002fff0
c000a1eb:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a1f0:	e8 db 58 01 00       	call   c001fad0 <CPrintf>
c000a1f5:	83 c4 10             	add    esp,0x10
c000a1f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1ff:	83 f8 01             	cmp    eax,0x1
c000a202:	75 18                	jne    c000a21c <tcp_slowtmr+0x74>
c000a204:	83 ec 08             	sub    esp,0x8
c000a207:	68 1c 00 03 c0       	push   0xc003001c
c000a20c:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a211:	e8 ba 58 01 00       	call   c001fad0 <CPrintf>
c000a216:	83 c4 10             	add    esp,0x10
c000a219:	8d 76 00             	lea    esi,[esi+0x0]
c000a21c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a220:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a223:	83 f8 0a             	cmp    eax,0xa
c000a226:	75 18                	jne    c000a240 <tcp_slowtmr+0x98>
c000a228:	83 ec 08             	sub    esp,0x8
c000a22b:	68 48 00 03 c0       	push   0xc0030048
c000a230:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a235:	e8 96 58 01 00       	call   c001fad0 <CPrintf>
c000a23a:	83 c4 10             	add    esp,0x10
c000a23d:	8d 76 00             	lea    esi,[esi+0x0]
c000a240:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a245:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a24a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a24e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a251:	83 f8 02             	cmp    eax,0x2
c000a254:	75 22                	jne    c000a278 <tcp_slowtmr+0xd0>
c000a256:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a25a:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a25d:	0f b6 c0             	movzx  eax,al
c000a260:	83 f8 06             	cmp    eax,0x6
c000a263:	75 13                	jne    c000a278 <tcp_slowtmr+0xd0>
c000a265:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a269:	83 c0 01             	add    eax,0x1
c000a26c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a270:	e9 eb 01 00 00       	jmp    c000a460 <tcp_slowtmr+0x2b8>
c000a275:	8d 76 00             	lea    esi,[esi+0x0]
c000a278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a27c:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a27f:	0f b6 c0             	movzx  eax,al
c000a282:	83 f8 0c             	cmp    eax,0xc
c000a285:	75 11                	jne    c000a298 <tcp_slowtmr+0xf0>
c000a287:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a28b:	83 c0 01             	add    eax,0x1
c000a28e:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a292:	e9 c9 01 00 00       	jmp    c000a460 <tcp_slowtmr+0x2b8>
c000a297:	90                   	nop
c000a298:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a29c:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2a2:	0f b6 c0             	movzx  eax,al
c000a2a5:	85 c0                	test   eax,eax
c000a2a7:	0f 84 8f 00 00 00    	je     c000a33c <tcp_slowtmr+0x194>
c000a2ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b1:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a2b7:	8d 50 01             	lea    edx,[eax+0x1]
c000a2ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2be:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a2c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2c8:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a2ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2d2:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2d8:	0f b6 c0             	movzx  eax,al
c000a2db:	83 e8 01             	sub    eax,0x1
c000a2de:	8a 80 d0 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfd30]
c000a2e4:	0f b6 c0             	movzx  eax,al
c000a2e7:	39 c2                	cmp    edx,eax
c000a2e9:	0f 82 71 01 00 00    	jb     c000a460 <tcp_slowtmr+0x2b8>
c000a2ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f3:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a2fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a301:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a307:	0f b6 c0             	movzx  eax,al
c000a30a:	83 f8 06             	cmp    eax,0x6
c000a30d:	77 19                	ja     c000a328 <tcp_slowtmr+0x180>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a319:	83 c0 01             	add    eax,0x1
c000a31c:	88 c2                	mov    dl,al
c000a31e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a322:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a328:	83 ec 0c             	sub    esp,0xc
c000a32b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a32f:	e8 58 64 00 00       	call   c001078c <tcp_zero_window_probe>
c000a334:	83 c4 10             	add    esp,0x10
c000a337:	e9 24 01 00 00       	jmp    c000a460 <tcp_slowtmr+0x2b8>
c000a33c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a340:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a344:	98                   	cwde   
c000a345:	85 c0                	test   eax,eax
c000a347:	78 17                	js     c000a360 <tcp_slowtmr+0x1b8>
c000a349:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a34d:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a351:	83 c0 01             	add    eax,0x1
c000a354:	89 c2                	mov    edx,eax
c000a356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a35a:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
c000a35e:	66 90                	xchg   ax,ax
c000a360:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a364:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a367:	85 c0                	test   eax,eax
c000a369:	0f 84 f1 00 00 00    	je     c000a460 <tcp_slowtmr+0x2b8>
c000a36f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a373:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a377:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a37b:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a37e:	0f bf d2             	movsx  edx,dx
c000a381:	98                   	cwde   
c000a382:	39 c2                	cmp    edx,eax
c000a384:	0f 8c d6 00 00 00    	jl     c000a460 <tcp_slowtmr+0x2b8>
c000a38a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a38e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a391:	83 f8 02             	cmp    eax,0x2
c000a394:	74 3e                	je     c000a3d4 <tcp_slowtmr+0x22c>
c000a396:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a39a:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a39d:	98                   	cwde   
c000a39e:	c1 f8 03             	sar    eax,0x3
c000a3a1:	0f bf d0             	movsx  edx,ax
c000a3a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3a8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a3ac:	98                   	cwde   
c000a3ad:	01 c2                	add    edx,eax
c000a3af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3b3:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a3b6:	0f b6 c0             	movzx  eax,al
c000a3b9:	8a 80 d8 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfd28]
c000a3bf:	0f b6 c0             	movzx  eax,al
c000a3c2:	88 c1                	mov    cl,al
c000a3c4:	d3 e2                	shl    edx,cl
c000a3c6:	89 d0                	mov    eax,edx
c000a3c8:	89 c2                	mov    edx,eax
c000a3ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3ce:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000a3d2:	66 90                	xchg   ax,ax
c000a3d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3d8:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a3de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e2:	8b 48 60             	mov    ecx,DWORD PTR [eax+0x60]
c000a3e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3e9:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000a3ed:	89 c8                	mov    eax,ecx
c000a3ef:	0f b7 d8             	movzx  ebx,ax
c000a3f2:	0f b7 ca             	movzx  ecx,dx
c000a3f5:	39 cb                	cmp    ebx,ecx
c000a3f7:	76 03                	jbe    c000a3fc <tcp_slowtmr+0x254>
c000a3f9:	89 d0                	mov    eax,edx
c000a3fb:	90                   	nop
c000a3fc:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a401:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a406:	d1 e8                	shr    eax,1
c000a408:	89 c2                	mov    edx,eax
c000a40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a40e:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a412:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a416:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a419:	0f b7 d0             	movzx  edx,ax
c000a41c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a420:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a423:	0f b7 c0             	movzx  eax,ax
c000a426:	d1 e0                	shl    eax,1
c000a428:	39 c2                	cmp    edx,eax
c000a42a:	7d 14                	jge    c000a440 <tcp_slowtmr+0x298>
c000a42c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a430:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a433:	d1 e0                	shl    eax,1
c000a435:	89 c2                	mov    edx,eax
c000a437:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a43b:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000a43f:	90                   	nop
c000a440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a444:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a447:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a44b:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000a44f:	83 ec 0c             	sub    esp,0xc
c000a452:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a456:	e8 21 60 00 00       	call   c001047c <tcp_rexmit_rto>
c000a45b:	83 c4 10             	add    esp,0x10
c000a45e:	66 90                	xchg   ax,ax
c000a460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a464:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a467:	83 f8 06             	cmp    eax,0x6
c000a46a:	75 24                	jne    c000a490 <tcp_slowtmr+0x2e8>
c000a46c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a476:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a479:	29 c2                	sub    edx,eax
c000a47b:	89 d0                	mov    eax,edx
c000a47d:	83 f8 28             	cmp    eax,0x28
c000a480:	76 0e                	jbe    c000a490 <tcp_slowtmr+0x2e8>
c000a482:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a486:	83 c0 01             	add    eax,0x1
c000a489:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a48d:	8d 76 00             	lea    esi,[esi+0x0]
c000a490:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a494:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a497:	0f b6 c0             	movzx  eax,al
c000a49a:	83 e0 08             	and    eax,0x8
c000a49d:	0f 84 cd 00 00 00    	je     c000a570 <tcp_slowtmr+0x3c8>
c000a4a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4aa:	83 f8 04             	cmp    eax,0x4
c000a4ad:	74 11                	je     c000a4c0 <tcp_slowtmr+0x318>
c000a4af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a4b6:	83 f8 07             	cmp    eax,0x7
c000a4b9:	0f 85 b1 00 00 00    	jne    c000a570 <tcp_slowtmr+0x3c8>
c000a4bf:	90                   	nop
c000a4c0:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4ca:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4cd:	89 d1                	mov    ecx,edx
c000a4cf:	29 c1                	sub    ecx,eax
c000a4d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d5:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a4db:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a4e0:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a4e5:	f7 e2                	mul    edx
c000a4e7:	89 d0                	mov    eax,edx
c000a4e9:	c1 e8 05             	shr    eax,0x5
c000a4ec:	39 c1                	cmp    ecx,eax
c000a4ee:	76 18                	jbe    c000a508 <tcp_slowtmr+0x360>
c000a4f0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4f4:	83 c0 01             	add    eax,0x1
c000a4f7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4fb:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a4ff:	83 c0 01             	add    eax,0x1
c000a502:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a506:	eb 68                	jmp    c000a570 <tcp_slowtmr+0x3c8>
c000a508:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a50e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a512:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a515:	89 d1                	mov    ecx,edx
c000a517:	29 c1                	sub    ecx,eax
c000a519:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51d:	8b 90 9c 00 00 00    	mov    edx,DWORD PTR [eax+0x9c]
c000a523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a527:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a52d:	0f b6 c0             	movzx  eax,al
c000a530:	69 c0 f8 24 01 00    	imul   eax,eax,0x124f8
c000a536:	01 d0                	add    eax,edx
c000a538:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a53d:	f7 e2                	mul    edx
c000a53f:	89 d0                	mov    eax,edx
c000a541:	c1 e8 05             	shr    eax,0x5
c000a544:	39 c1                	cmp    ecx,eax
c000a546:	76 28                	jbe    c000a570 <tcp_slowtmr+0x3c8>
c000a548:	83 ec 0c             	sub    esp,0xc
c000a54b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a54f:	e8 6c 61 00 00       	call   c00106c0 <tcp_keepalive>
c000a554:	83 c4 10             	add    esp,0x10
c000a557:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a55b:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a561:	83 c0 01             	add    eax,0x1
c000a564:	88 c2                	mov    dl,al
c000a566:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a56a:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a574:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a57a:	85 c0                	test   eax,eax
c000a57c:	74 4e                	je     c000a5cc <tcp_slowtmr+0x424>
c000a57e:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a584:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a588:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a58b:	89 d1                	mov    ecx,edx
c000a58d:	29 c1                	sub    ecx,eax
c000a58f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a593:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a596:	0f bf d0             	movsx  edx,ax
c000a599:	89 d0                	mov    eax,edx
c000a59b:	d1 e0                	shl    eax,1
c000a59d:	01 d0                	add    eax,edx
c000a59f:	d1 e0                	shl    eax,1
c000a5a1:	39 c1                	cmp    ecx,eax
c000a5a3:	72 27                	jb     c000a5cc <tcp_slowtmr+0x424>
c000a5a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a9:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a5af:	83 ec 0c             	sub    esp,0xc
c000a5b2:	50                   	push   eax
c000a5b3:	e8 ec f9 ff ff       	call   c0009fa4 <tcp_segs_free>
c000a5b8:	83 c4 10             	add    esp,0x10
c000a5bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bf:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000a5cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5d3:	83 f8 03             	cmp    eax,0x3
c000a5d6:	75 24                	jne    c000a5fc <tcp_slowtmr+0x454>
c000a5d8:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5e2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5e5:	29 c2                	sub    edx,eax
c000a5e7:	89 d0                	mov    eax,edx
c000a5e9:	83 f8 28             	cmp    eax,0x28
c000a5ec:	76 0e                	jbe    c000a5fc <tcp_slowtmr+0x454>
c000a5ee:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5f2:	83 c0 01             	add    eax,0x1
c000a5f5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5f9:	8d 76 00             	lea    esi,[esi+0x0]
c000a5fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a600:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a603:	83 f8 09             	cmp    eax,0x9
c000a606:	75 24                	jne    c000a62c <tcp_slowtmr+0x484>
c000a608:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a60e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a612:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a615:	29 c2                	sub    edx,eax
c000a617:	89 d0                	mov    eax,edx
c000a619:	3d f0 00 00 00       	cmp    eax,0xf0
c000a61e:	76 0c                	jbe    c000a62c <tcp_slowtmr+0x484>
c000a620:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a624:	83 c0 01             	add    eax,0x1
c000a627:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a62b:	90                   	nop
c000a62c:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a631:	85 c0                	test   eax,eax
c000a633:	0f 84 13 01 00 00    	je     c000a74c <tcp_slowtmr+0x5a4>
c000a639:	83 ec 0c             	sub    esp,0xc
c000a63c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a640:	e8 7f fa ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000a645:	83 c4 10             	add    esp,0x10
c000a648:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a64d:	74 31                	je     c000a680 <tcp_slowtmr+0x4d8>
c000a64f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a654:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a658:	75 16                	jne    c000a670 <tcp_slowtmr+0x4c8>
c000a65a:	83 ec 08             	sub    esp,0x8
c000a65d:	68 78 00 03 c0       	push   0xc0030078
c000a662:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a667:	e8 64 54 01 00       	call   c001fad0 <CPrintf>
c000a66c:	83 c4 10             	add    esp,0x10
c000a66f:	90                   	nop
c000a670:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a674:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a677:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a67b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a67e:	eb 2c                	jmp    c000a6ac <tcp_slowtmr+0x504>
c000a680:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a685:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a689:	74 15                	je     c000a6a0 <tcp_slowtmr+0x4f8>
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	68 a4 00 03 c0       	push   0xc00300a4
c000a693:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a698:	e8 33 54 01 00       	call   c001fad0 <CPrintf>
c000a69d:	83 c4 10             	add    esp,0x10
c000a6a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6a7:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a6ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b0:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a6b6:	85 c0                	test   eax,eax
c000a6b8:	74 1e                	je     c000a6d8 <tcp_slowtmr+0x530>
c000a6ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6be:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a6c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a6c8:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a6cb:	83 ec 08             	sub    esp,0x8
c000a6ce:	6a f6                	push   0xfffffff6
c000a6d0:	52                   	push   edx
c000a6d1:	ff d0                	call   eax
c000a6d3:	83 c4 10             	add    esp,0x10
c000a6d6:	66 90                	xchg   ax,ax
c000a6d8:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a6dd:	85 c0                	test   eax,eax
c000a6df:	74 3f                	je     c000a720 <tcp_slowtmr+0x578>
c000a6e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6e5:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a6e9:	0f b7 f0             	movzx  esi,ax
c000a6ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a6f3:	0f b7 d8             	movzx  ebx,ax
c000a6f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6fa:	8d 78 04             	lea    edi,[eax+0x4]
c000a6fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a701:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a705:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a70c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a70f:	83 ec 08             	sub    esp,0x8
c000a712:	56                   	push   esi
c000a713:	53                   	push   ebx
c000a714:	57                   	push   edi
c000a715:	51                   	push   ecx
c000a716:	52                   	push   edx
c000a717:	50                   	push   eax
c000a718:	e8 e3 5b 00 00       	call   c0010300 <tcp_rst>
c000a71d:	83 c4 20             	add    esp,0x20
c000a720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a72c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a72f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a733:	83 ec 08             	sub    esp,0x8
c000a736:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73a:	6a 02                	push   0x2
c000a73c:	e8 d3 d2 ff ff       	call   c0007a14 <memp_free>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	e9 9b 00 00 00       	jmp    c000a7e4 <tcp_slowtmr+0x63c>
c000a749:	8d 76 00             	lea    esi,[esi+0x0]
c000a74c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a750:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a758:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a75b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a75f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a763:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a766:	83 c0 01             	add    eax,0x1
c000a769:	88 c2                	mov    dl,al
c000a76b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a76f:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a772:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a776:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a779:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a77d:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a780:	0f b6 d2             	movzx  edx,dl
c000a783:	0f b6 c0             	movzx  eax,al
c000a786:	39 c2                	cmp    edx,eax
c000a788:	72 5a                	jb     c000a7e4 <tcp_slowtmr+0x63c>
c000a78a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a78e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a796:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a79c:	85 c0                	test   eax,eax
c000a79e:	74 24                	je     c000a7c4 <tcp_slowtmr+0x61c>
c000a7a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a7a4:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a7aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a7ae:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a7b1:	83 ec 08             	sub    esp,0x8
c000a7b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a7b8:	52                   	push   edx
c000a7b9:	ff d0                	call   eax
c000a7bb:	83 c4 10             	add    esp,0x10
c000a7be:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a7c2:	eb 08                	jmp    c000a7cc <tcp_slowtmr+0x624>
c000a7c4:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a7c9:	8d 76 00             	lea    esi,[esi+0x0]
c000a7cc:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a7d1:	85 c0                	test   eax,eax
c000a7d3:	75 0f                	jne    c000a7e4 <tcp_slowtmr+0x63c>
c000a7d5:	83 ec 0c             	sub    esp,0xc
c000a7d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7dc:	e8 93 56 00 00       	call   c000fe74 <tcp_output>
c000a7e1:	83 c4 10             	add    esp,0x10
c000a7e4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a7e9:	0f 85 e9 f9 ff ff    	jne    c000a1d8 <tcp_slowtmr+0x30>
c000a7ef:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a7f7:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a7fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a800:	e9 0b 01 00 00       	jmp    c000a910 <tcp_slowtmr+0x768>
c000a805:	8d 76 00             	lea    esi,[esi+0x0]
c000a808:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a80c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a80f:	83 f8 0a             	cmp    eax,0xa
c000a812:	74 18                	je     c000a82c <tcp_slowtmr+0x684>
c000a814:	83 ec 08             	sub    esp,0x8
c000a817:	68 d0 00 03 c0       	push   0xc00300d0
c000a81c:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a821:	e8 aa 52 01 00       	call   c001fad0 <CPrintf>
c000a826:	83 c4 10             	add    esp,0x10
c000a829:	8d 76 00             	lea    esi,[esi+0x0]
c000a82c:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a831:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a837:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a83b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a83e:	29 c2                	sub    edx,eax
c000a840:	89 d0                	mov    eax,edx
c000a842:	3d f0 00 00 00       	cmp    eax,0xf0
c000a847:	76 0b                	jbe    c000a854 <tcp_slowtmr+0x6ac>
c000a849:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a84d:	83 c0 01             	add    eax,0x1
c000a850:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a854:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a859:	85 c0                	test   eax,eax
c000a85b:	0f 84 9b 00 00 00    	je     c000a8fc <tcp_slowtmr+0x754>
c000a861:	83 ec 0c             	sub    esp,0xc
c000a864:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a868:	e8 57 f8 ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000a86d:	83 c4 10             	add    esp,0x10
c000a870:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a875:	74 31                	je     c000a8a8 <tcp_slowtmr+0x700>
c000a877:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a87c:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a880:	75 16                	jne    c000a898 <tcp_slowtmr+0x6f0>
c000a882:	83 ec 08             	sub    esp,0x8
c000a885:	68 00 01 03 c0       	push   0xc0030100
c000a88a:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a88f:	e8 3c 52 01 00       	call   c001fad0 <CPrintf>
c000a894:	83 c4 10             	add    esp,0x10
c000a897:	90                   	nop
c000a898:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a89c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a89f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a8a3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a8a6:	eb 2c                	jmp    c000a8d4 <tcp_slowtmr+0x72c>
c000a8a8:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a8ad:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a8b1:	74 15                	je     c000a8c8 <tcp_slowtmr+0x720>
c000a8b3:	83 ec 08             	sub    esp,0x8
c000a8b6:	68 28 01 03 c0       	push   0xc0030128
c000a8bb:	68 e6 f9 02 c0       	push   0xc002f9e6
c000a8c0:	e8 0b 52 01 00       	call   c001fad0 <CPrintf>
c000a8c5:	83 c4 10             	add    esp,0x10
c000a8c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8cf:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a8d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8e3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8e7:	83 ec 08             	sub    esp,0x8
c000a8ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8ee:	6a 02                	push   0x2
c000a8f0:	e8 1f d1 ff ff       	call   c0007a14 <memp_free>
c000a8f5:	83 c4 10             	add    esp,0x10
c000a8f8:	eb 16                	jmp    c000a910 <tcp_slowtmr+0x768>
c000a8fa:	66 90                	xchg   ax,ax
c000a8fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a900:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a904:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a908:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a90b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a90f:	90                   	nop
c000a910:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a915:	0f 85 ed fe ff ff    	jne    c000a808 <tcp_slowtmr+0x660>
c000a91b:	90                   	nop
c000a91c:	83 c4 20             	add    esp,0x20
c000a91f:	5b                   	pop    ebx
c000a920:	5e                   	pop    esi
c000a921:	5f                   	pop    edi
c000a922:	c3                   	ret    
c000a923:	90                   	nop

c000a924 <tcp_pcb_remove>:
c000a924:	83 ec 0c             	sub    esp,0xc
c000a927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a92b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a92d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a931:	75 11                	jne    c000a944 <tcp_pcb_remove+0x20>
c000a933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a937:	8b 00                	mov    eax,DWORD PTR [eax]
c000a939:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a940:	89 10                	mov    DWORD PTR [eax],edx
c000a942:	eb 4c                	jmp    c000a990 <tcp_pcb_remove+0x6c>
c000a944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a948:	8b 00                	mov    eax,DWORD PTR [eax]
c000a94a:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a94f:	eb 33                	jmp    c000a984 <tcp_pcb_remove+0x60>
c000a951:	8d 76 00             	lea    esi,[esi+0x0]
c000a954:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a959:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a95c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a960:	75 12                	jne    c000a974 <tcp_pcb_remove+0x50>
c000a962:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a967:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a96b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a96e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a971:	eb 1d                	jmp    c000a990 <tcp_pcb_remove+0x6c>
c000a973:	90                   	nop
c000a974:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a979:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a97c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a981:	8d 76 00             	lea    esi,[esi+0x0]
c000a984:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a989:	85 c0                	test   eax,eax
c000a98b:	75 c7                	jne    c000a954 <tcp_pcb_remove+0x30>
c000a98d:	8d 76 00             	lea    esi,[esi+0x0]
c000a990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a994:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000a99b:	83 ec 0c             	sub    esp,0xc
c000a99e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9a2:	e8 1d f7 ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000a9a7:	83 c4 10             	add    esp,0x10
c000a9aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9b1:	83 f8 0a             	cmp    eax,0xa
c000a9b4:	74 3e                	je     c000a9f4 <tcp_pcb_remove+0xd0>
c000a9b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9bd:	83 f8 01             	cmp    eax,0x1
c000a9c0:	74 32                	je     c000a9f4 <tcp_pcb_remove+0xd0>
c000a9c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9c6:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a9c9:	0f b6 c0             	movzx  eax,al
c000a9cc:	83 e0 01             	and    eax,0x1
c000a9cf:	74 23                	je     c000a9f4 <tcp_pcb_remove+0xd0>
c000a9d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9d5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a9d8:	83 c8 02             	or     eax,0x2
c000a9db:	88 c2                	mov    dl,al
c000a9dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9e1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000a9e4:	83 ec 0c             	sub    esp,0xc
c000a9e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9eb:	e8 84 54 00 00       	call   c000fe74 <tcp_output>
c000a9f0:	83 c4 10             	add    esp,0x10
c000a9f3:	90                   	nop
c000a9f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9fb:	83 f8 01             	cmp    eax,0x1
c000a9fe:	74 64                	je     c000aa64 <tcp_pcb_remove+0x140>
c000aa00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa04:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000aa07:	85 c0                	test   eax,eax
c000aa09:	74 15                	je     c000aa20 <tcp_pcb_remove+0xfc>
c000aa0b:	83 ec 08             	sub    esp,0x8
c000aa0e:	68 ce 01 03 c0       	push   0xc00301ce
c000aa13:	68 e6 f9 02 c0       	push   0xc002f9e6
c000aa18:	e8 b3 50 01 00       	call   c001fad0 <CPrintf>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa24:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000aa27:	85 c0                	test   eax,eax
c000aa29:	74 15                	je     c000aa40 <tcp_pcb_remove+0x11c>
c000aa2b:	83 ec 08             	sub    esp,0x8
c000aa2e:	68 e6 01 03 c0       	push   0xc00301e6
c000aa33:	68 e6 f9 02 c0       	push   0xc002f9e6
c000aa38:	e8 93 50 01 00       	call   c001fad0 <CPrintf>
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa44:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aa4a:	85 c0                	test   eax,eax
c000aa4c:	74 16                	je     c000aa64 <tcp_pcb_remove+0x140>
c000aa4e:	83 ec 08             	sub    esp,0x8
c000aa51:	68 ff 01 03 c0       	push   0xc00301ff
c000aa56:	68 e6 f9 02 c0       	push   0xc002f9e6
c000aa5b:	e8 70 50 01 00       	call   c001fad0 <CPrintf>
c000aa60:	83 c4 10             	add    esp,0x10
c000aa63:	90                   	nop
c000aa64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa68:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa6f:	90                   	nop
c000aa70:	83 c4 0c             	add    esp,0xc
c000aa73:	c3                   	ret    

c000aa74 <tcp_close_shutdown>:
c000aa74:	57                   	push   edi
c000aa75:	56                   	push   esi
c000aa76:	53                   	push   ebx
c000aa77:	83 ec 20             	sub    esp,0x20
c000aa7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aa82:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000aa87:	85 c0                	test   eax,eax
c000aa89:	0f 84 41 01 00 00    	je     c000abd0 <tcp_close_shutdown+0x15c>
c000aa8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa96:	83 f8 01             	cmp    eax,0x1
c000aa99:	0f 84 31 01 00 00    	je     c000abd0 <tcp_close_shutdown+0x15c>
c000aa9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaa3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aaa9:	85 c0                	test   eax,eax
c000aaab:	75 17                	jne    c000aac4 <tcp_close_shutdown+0x50>
c000aaad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aab1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000aab4:	0f b7 c0             	movzx  eax,ax
c000aab7:	3d 60 08 00 00       	cmp    eax,0x860
c000aabc:	0f 84 0e 01 00 00    	je     c000abd0 <tcp_close_shutdown+0x15c>
c000aac2:	66 90                	xchg   ax,ax
c000aac4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aac8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aacb:	0f b6 c0             	movzx  eax,al
c000aace:	83 e0 10             	and    eax,0x10
c000aad1:	75 15                	jne    c000aae8 <tcp_close_shutdown+0x74>
c000aad3:	83 ec 08             	sub    esp,0x8
c000aad6:	68 16 02 03 c0       	push   0xc0030216
c000aadb:	68 e6 f9 02 c0       	push   0xc002f9e6
c000aae0:	e8 eb 4f 01 00       	call   c001fad0 <CPrintf>
c000aae5:	83 c4 10             	add    esp,0x10
c000aae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaec:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aaf0:	0f b7 f0             	movzx  esi,ax
c000aaf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aafa:	0f b7 d8             	movzx  ebx,ax
c000aafd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab01:	8d 78 04             	lea    edi,[eax+0x4]
c000ab04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ab08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab0c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab13:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000ab16:	83 ec 08             	sub    esp,0x8
c000ab19:	56                   	push   esi
c000ab1a:	53                   	push   ebx
c000ab1b:	57                   	push   edi
c000ab1c:	51                   	push   ecx
c000ab1d:	52                   	push   edx
c000ab1e:	50                   	push   eax
c000ab1f:	e8 dc 57 00 00       	call   c0010300 <tcp_rst>
c000ab24:	83 c4 20             	add    esp,0x20
c000ab27:	83 ec 0c             	sub    esp,0xc
c000ab2a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ab2e:	e8 91 f5 ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab3b:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab3f:	75 0f                	jne    c000ab50 <tcp_close_shutdown+0xdc>
c000ab41:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab49:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ab4e:	eb 48                	jmp    c000ab98 <tcp_close_shutdown+0x124>
c000ab50:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab55:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab5a:	eb 30                	jmp    c000ab8c <tcp_close_shutdown+0x118>
c000ab5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab64:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab68:	75 12                	jne    c000ab7c <tcp_close_shutdown+0x108>
c000ab6a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab6f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab73:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab79:	eb 1d                	jmp    c000ab98 <tcp_close_shutdown+0x124>
c000ab7b:	90                   	nop
c000ab7c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab84:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab89:	8d 76 00             	lea    esi,[esi+0x0]
c000ab8c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab91:	85 c0                	test   eax,eax
c000ab93:	75 c7                	jne    c000ab5c <tcp_close_shutdown+0xe8>
c000ab95:	8d 76 00             	lea    esi,[esi+0x0]
c000ab98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab9c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000aba3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aba7:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000abae:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000abb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abb8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000abbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abbf:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000abc4:	e8 53 5f 00 00       	call   c0010b1c <tcp_timer_needed>
c000abc9:	b0 00                	mov    al,0x0
c000abcb:	e9 f4 01 00 00       	jmp    c000adc4 <tcp_close_shutdown+0x350>
c000abd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abd4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000abd7:	83 f8 07             	cmp    eax,0x7
c000abda:	0f 87 a4 01 00 00    	ja     c000ad84 <tcp_close_shutdown+0x310>
c000abe0:	8b 04 85 a0 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd60]
c000abe7:	ff e0                	jmp    eax
c000abe9:	8d 76 00             	lea    esi,[esi+0x0]
c000abec:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000abf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abf5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000abf8:	0f b7 c0             	movzx  eax,ax
c000abfb:	85 c0                	test   eax,eax
c000abfd:	74 71                	je     c000ac70 <tcp_close_shutdown+0x1fc>
c000abff:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac04:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac08:	75 12                	jne    c000ac1c <tcp_close_shutdown+0x1a8>
c000ac0a:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac0f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac12:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000ac17:	eb 4b                	jmp    c000ac64 <tcp_close_shutdown+0x1f0>
c000ac19:	8d 76 00             	lea    esi,[esi+0x0]
c000ac1c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000ac21:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac26:	eb 30                	jmp    c000ac58 <tcp_close_shutdown+0x1e4>
c000ac28:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac2d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac30:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ac34:	75 12                	jne    c000ac48 <tcp_close_shutdown+0x1d4>
c000ac36:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ac3f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ac42:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac45:	eb 1d                	jmp    c000ac64 <tcp_close_shutdown+0x1f0>
c000ac47:	90                   	nop
c000ac48:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac4d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac50:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac55:	8d 76 00             	lea    esi,[esi+0x0]
c000ac58:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac5d:	85 c0                	test   eax,eax
c000ac5f:	75 c7                	jne    c000ac28 <tcp_close_shutdown+0x1b4>
c000ac61:	8d 76 00             	lea    esi,[esi+0x0]
c000ac64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac68:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac6f:	90                   	nop
c000ac70:	83 ec 08             	sub    esp,0x8
c000ac73:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac77:	6a 02                	push   0x2
c000ac79:	e8 96 cd ff ff       	call   c0007a14 <memp_free>
c000ac7e:	83 c4 10             	add    esp,0x10
c000ac81:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac89:	e9 12 01 00 00       	jmp    c000ada0 <tcp_close_shutdown+0x32c>
c000ac8e:	66 90                	xchg   ax,ax
c000ac90:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac95:	83 ec 08             	sub    esp,0x8
c000ac98:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac9c:	68 78 68 03 c0       	push   0xc0036878
c000aca1:	e8 7e fc ff ff       	call   c000a924 <tcp_pcb_remove>
c000aca6:	83 c4 10             	add    esp,0x10
c000aca9:	83 ec 08             	sub    esp,0x8
c000acac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000acb0:	6a 03                	push   0x3
c000acb2:	e8 5d cd ff ff       	call   c0007a14 <memp_free>
c000acb7:	83 c4 10             	add    esp,0x10
c000acba:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000acc2:	e9 d9 00 00 00       	jmp    c000ada0 <tcp_close_shutdown+0x32c>
c000acc7:	90                   	nop
c000acc8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000accd:	83 ec 08             	sub    esp,0x8
c000acd0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000acd4:	68 70 68 03 c0       	push   0xc0036870
c000acd9:	e8 46 fc ff ff       	call   c000a924 <tcp_pcb_remove>
c000acde:	83 c4 10             	add    esp,0x10
c000ace1:	83 ec 08             	sub    esp,0x8
c000ace4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ace8:	6a 02                	push   0x2
c000acea:	e8 25 cd ff ff       	call   c0007a14 <memp_free>
c000acef:	83 c4 10             	add    esp,0x10
c000acf2:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000acfa:	e9 a1 00 00 00       	jmp    c000ada0 <tcp_close_shutdown+0x32c>
c000acff:	90                   	nop
c000ad00:	83 ec 0c             	sub    esp,0xc
c000ad03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad07:	e8 b8 4d 00 00       	call   c000fac4 <tcp_send_fin>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad13:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad18:	85 c0                	test   eax,eax
c000ad1a:	75 78                	jne    c000ad94 <tcp_close_shutdown+0x320>
c000ad1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad20:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ad27:	eb 6b                	jmp    c000ad94 <tcp_close_shutdown+0x320>
c000ad29:	8d 76 00             	lea    esi,[esi+0x0]
c000ad2c:	83 ec 0c             	sub    esp,0xc
c000ad2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad33:	e8 8c 4d 00 00       	call   c000fac4 <tcp_send_fin>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad3f:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad44:	85 c0                	test   eax,eax
c000ad46:	75 50                	jne    c000ad98 <tcp_close_shutdown+0x324>
c000ad48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad4c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ad53:	eb 43                	jmp    c000ad98 <tcp_close_shutdown+0x324>
c000ad55:	8d 76 00             	lea    esi,[esi+0x0]
c000ad58:	83 ec 0c             	sub    esp,0xc
c000ad5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad5f:	e8 60 4d 00 00       	call   c000fac4 <tcp_send_fin>
c000ad64:	83 c4 10             	add    esp,0x10
c000ad67:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad6b:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad70:	85 c0                	test   eax,eax
c000ad72:	75 28                	jne    c000ad9c <tcp_close_shutdown+0x328>
c000ad74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad78:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ad7f:	eb 1b                	jmp    c000ad9c <tcp_close_shutdown+0x328>
c000ad81:	8d 76 00             	lea    esi,[esi+0x0]
c000ad84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad89:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad91:	eb 0d                	jmp    c000ada0 <tcp_close_shutdown+0x32c>
c000ad93:	90                   	nop
c000ad94:	90                   	nop
c000ad95:	eb 09                	jmp    c000ada0 <tcp_close_shutdown+0x32c>
c000ad97:	90                   	nop
c000ad98:	90                   	nop
c000ad99:	eb 05                	jmp    c000ada0 <tcp_close_shutdown+0x32c>
c000ad9b:	90                   	nop
c000ad9c:	90                   	nop
c000ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c000ada0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ada5:	74 19                	je     c000adc0 <tcp_close_shutdown+0x34c>
c000ada7:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000adac:	85 c0                	test   eax,eax
c000adae:	75 10                	jne    c000adc0 <tcp_close_shutdown+0x34c>
c000adb0:	83 ec 0c             	sub    esp,0xc
c000adb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000adb7:	e8 b8 50 00 00       	call   c000fe74 <tcp_output>
c000adbc:	83 c4 10             	add    esp,0x10
c000adbf:	90                   	nop
c000adc0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000adc4:	83 c4 20             	add    esp,0x20
c000adc7:	5b                   	pop    ebx
c000adc8:	5e                   	pop    esi
c000adc9:	5f                   	pop    edi
c000adca:	c3                   	ret    
c000adcb:	90                   	nop

c000adcc <tcp_close>:
c000adcc:	83 ec 0c             	sub    esp,0xc
c000adcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000add6:	83 f8 01             	cmp    eax,0x1
c000add9:	74 15                	je     c000adf0 <tcp_close+0x24>
c000addb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000addf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ade2:	83 c8 10             	or     eax,0x10
c000ade5:	88 c2                	mov    dl,al
c000ade7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adeb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000adee:	66 90                	xchg   ax,ax
c000adf0:	83 ec 08             	sub    esp,0x8
c000adf3:	6a 01                	push   0x1
c000adf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adf9:	e8 76 fc ff ff       	call   c000aa74 <tcp_close_shutdown>
c000adfe:	83 c4 10             	add    esp,0x10
c000ae01:	83 c4 0c             	add    esp,0xc
c000ae04:	c3                   	ret    
c000ae05:	8d 76 00             	lea    esi,[esi+0x0]

c000ae08 <tcp_recv_null>:
c000ae08:	83 ec 1c             	sub    esp,0x1c
c000ae0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ae0f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ae13:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ae18:	74 2e                	je     c000ae48 <tcp_recv_null+0x40>
c000ae1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ae1e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ae21:	0f b7 c0             	movzx  eax,ax
c000ae24:	83 ec 08             	sub    esp,0x8
c000ae27:	50                   	push   eax
c000ae28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae2c:	e8 b3 ee ff ff       	call   c0009ce4 <tcp_recved>
c000ae31:	83 c4 10             	add    esp,0x10
c000ae34:	83 ec 0c             	sub    esp,0xc
c000ae37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae3b:	e8 94 d4 ff ff       	call   c00082d4 <pbuf_free>
c000ae40:	83 c4 10             	add    esp,0x10
c000ae43:	eb 1f                	jmp    c000ae64 <tcp_recv_null+0x5c>
c000ae45:	8d 76 00             	lea    esi,[esi+0x0]
c000ae48:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000ae4d:	85 c0                	test   eax,eax
c000ae4f:	75 13                	jne    c000ae64 <tcp_recv_null+0x5c>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae58:	e8 6f ff ff ff       	call   c000adcc <tcp_close>
c000ae5d:	83 c4 10             	add    esp,0x10
c000ae60:	eb 06                	jmp    c000ae68 <tcp_recv_null+0x60>
c000ae62:	66 90                	xchg   ax,ax
c000ae64:	b0 00                	mov    al,0x0
c000ae66:	66 90                	xchg   ax,ax
c000ae68:	83 c4 1c             	add    esp,0x1c
c000ae6b:	c3                   	ret    

c000ae6c <tcp_fasttmr>:
c000ae6c:	83 ec 1c             	sub    esp,0x1c
c000ae6f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ae74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae78:	e9 03 01 00 00       	jmp    c000af80 <tcp_fasttmr+0x114>
c000ae7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae8f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae95:	85 c0                	test   eax,eax
c000ae97:	0f 84 8f 00 00 00    	je     c000af2c <tcp_fasttmr+0xc0>
c000ae9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aea1:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000aea7:	85 c0                	test   eax,eax
c000aea9:	74 31                	je     c000aedc <tcp_fasttmr+0x70>
c000aeab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aeaf:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000aeb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aeb9:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000aebf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aec3:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000aec6:	6a 00                	push   0x0
c000aec8:	51                   	push   ecx
c000aec9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aecd:	52                   	push   edx
c000aece:	ff d0                	call   eax
c000aed0:	83 c4 10             	add    esp,0x10
c000aed3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aed7:	eb 23                	jmp    c000aefc <tcp_fasttmr+0x90>
c000aed9:	8d 76 00             	lea    esi,[esi+0x0]
c000aedc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aee0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aee6:	6a 00                	push   0x0
c000aee8:	50                   	push   eax
c000aee9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeed:	6a 00                	push   0x0
c000aeef:	e8 14 ff ff ff       	call   c000ae08 <tcp_recv_null>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aefb:	90                   	nop
c000aefc:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af01:	85 c0                	test   eax,eax
c000af03:	75 13                	jne    c000af18 <tcp_fasttmr+0xac>
c000af05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af09:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000af13:	eb 17                	jmp    c000af2c <tcp_fasttmr+0xc0>
c000af15:	8d 76 00             	lea    esi,[esi+0x0]
c000af18:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000af1d:	83 f8 f6             	cmp    eax,0xfffffff6
c000af20:	75 0a                	jne    c000af2c <tcp_fasttmr+0xc0>
c000af22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000af2a:	66 90                	xchg   ax,ax
c000af2c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af31:	74 45                	je     c000af78 <tcp_fasttmr+0x10c>
c000af33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af37:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af3a:	0f b6 c0             	movzx  eax,al
c000af3d:	83 e0 01             	and    eax,0x1
c000af40:	74 36                	je     c000af78 <tcp_fasttmr+0x10c>
c000af42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af46:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af49:	83 c8 02             	or     eax,0x2
c000af4c:	88 c2                	mov    dl,al
c000af4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af52:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af55:	83 ec 0c             	sub    esp,0xc
c000af58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af5c:	e8 13 4f 00 00       	call   c000fe74 <tcp_output>
c000af61:	83 c4 10             	add    esp,0x10
c000af64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af68:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af6b:	83 e0 fc             	and    eax,0xfffffffc
c000af6e:	88 c2                	mov    dl,al
c000af70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af74:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af77:	90                   	nop
c000af78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af85:	0f 85 f5 fe ff ff    	jne    c000ae80 <tcp_fasttmr+0x14>
c000af8b:	90                   	nop
c000af8c:	83 c4 1c             	add    esp,0x1c
c000af8f:	c3                   	ret    

c000af90 <tcp_tmr>:
c000af90:	83 ec 0c             	sub    esp,0xc
c000af93:	e8 d4 fe ff ff       	call   c000ae6c <tcp_fasttmr>
c000af98:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af9d:	83 c0 01             	add    eax,0x1
c000afa0:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000afa5:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000afaa:	0f b6 c0             	movzx  eax,al
c000afad:	83 e0 01             	and    eax,0x1
c000afb0:	74 06                	je     c000afb8 <tcp_tmr+0x28>
c000afb2:	e8 f1 f1 ff ff       	call   c000a1a8 <tcp_slowtmr>
c000afb7:	90                   	nop
c000afb8:	90                   	nop
c000afb9:	83 c4 0c             	add    esp,0xc
c000afbc:	c3                   	ret    
c000afbd:	8d 76 00             	lea    esi,[esi+0x0]

c000afc0 <tcp_shutdown>:
c000afc0:	83 ec 0c             	sub    esp,0xc
c000afc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000afca:	83 f8 01             	cmp    eax,0x1
c000afcd:	75 09                	jne    c000afd8 <tcp_shutdown+0x18>
c000afcf:	b0 f3                	mov    al,0xf3
c000afd1:	e9 92 00 00 00       	jmp    c000b068 <tcp_shutdown+0xa8>
c000afd6:	66 90                	xchg   ax,ax
c000afd8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000afdd:	74 49                	je     c000b028 <tcp_shutdown+0x68>
c000afdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afe9:	85 c0                	test   eax,eax
c000afeb:	74 27                	je     c000b014 <tcp_shutdown+0x54>
c000afed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff1:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aff7:	83 ec 0c             	sub    esp,0xc
c000affa:	50                   	push   eax
c000affb:	e8 d4 d2 ff ff       	call   c00082d4 <pbuf_free>
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b007:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000b011:	8d 76 00             	lea    esi,[esi+0x0]
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b01b:	83 c8 10             	or     eax,0x10
c000b01e:	88 c2                	mov    dl,al
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b027:	90                   	nop
c000b028:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b02d:	74 2d                	je     c000b05c <tcp_shutdown+0x9c>
c000b02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b033:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b036:	83 f8 03             	cmp    eax,0x3
c000b039:	72 25                	jb     c000b060 <tcp_shutdown+0xa0>
c000b03b:	83 f8 04             	cmp    eax,0x4
c000b03e:	76 08                	jbe    c000b048 <tcp_shutdown+0x88>
c000b040:	83 f8 07             	cmp    eax,0x7
c000b043:	75 1b                	jne    c000b060 <tcp_shutdown+0xa0>
c000b045:	8d 76 00             	lea    esi,[esi+0x0]
c000b048:	83 ec 08             	sub    esp,0x8
c000b04b:	6a 00                	push   0x0
c000b04d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b051:	e8 1e fa ff ff       	call   c000aa74 <tcp_close_shutdown>
c000b056:	83 c4 10             	add    esp,0x10
c000b059:	eb 0d                	jmp    c000b068 <tcp_shutdown+0xa8>
c000b05b:	90                   	nop
c000b05c:	90                   	nop
c000b05d:	eb 05                	jmp    c000b064 <tcp_shutdown+0xa4>
c000b05f:	90                   	nop
c000b060:	90                   	nop
c000b061:	8d 76 00             	lea    esi,[esi+0x0]
c000b064:	b0 00                	mov    al,0x0
c000b066:	66 90                	xchg   ax,ax
c000b068:	83 c4 0c             	add    esp,0xc
c000b06b:	c3                   	ret    

c000b06c <tcp_abandon>:
c000b06c:	83 ec 2c             	sub    esp,0x2c
c000b06f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b073:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b076:	83 f8 01             	cmp    eax,0x1
c000b079:	75 15                	jne    c000b090 <tcp_abandon+0x24>
c000b07b:	83 ec 08             	sub    esp,0x8
c000b07e:	68 50 01 03 c0       	push   0xc0030150
c000b083:	68 e6 f9 02 c0       	push   0xc002f9e6
c000b088:	e8 43 4a 01 00       	call   c001fad0 <CPrintf>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b097:	83 f8 0a             	cmp    eax,0xa
c000b09a:	75 2c                	jne    c000b0c8 <tcp_abandon+0x5c>
c000b09c:	83 ec 08             	sub    esp,0x8
c000b09f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0a3:	68 84 68 03 c0       	push   0xc0036884
c000b0a8:	e8 77 f8 ff ff       	call   c000a924 <tcp_pcb_remove>
c000b0ad:	83 c4 10             	add    esp,0x10
c000b0b0:	83 ec 08             	sub    esp,0x8
c000b0b3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0b7:	6a 02                	push   0x2
c000b0b9:	e8 56 c9 ff ff       	call   c0007a14 <memp_free>
c000b0be:	83 c4 10             	add    esp,0x10
c000b0c1:	e9 32 01 00 00       	jmp    c000b1f8 <tcp_abandon+0x18c>
c000b0c6:	66 90                	xchg   ax,ax
c000b0c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0cc:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b0cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0d7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b0da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000b0e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b0f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b0fa:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b0ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b103:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b107:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b10c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b110:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b11a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b11e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b125:	83 ec 08             	sub    esp,0x8
c000b128:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b12c:	68 70 68 03 c0       	push   0xc0036870
c000b131:	e8 ee f7 ff ff       	call   c000a924 <tcp_pcb_remove>
c000b136:	83 c4 10             	add    esp,0x10
c000b139:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b13d:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b140:	85 c0                	test   eax,eax
c000b142:	74 14                	je     c000b158 <tcp_abandon+0xec>
c000b144:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b148:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b14b:	83 ec 0c             	sub    esp,0xc
c000b14e:	50                   	push   eax
c000b14f:	e8 50 ee ff ff       	call   c0009fa4 <tcp_segs_free>
c000b154:	83 c4 10             	add    esp,0x10
c000b157:	90                   	nop
c000b158:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b15c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b15f:	85 c0                	test   eax,eax
c000b161:	74 15                	je     c000b178 <tcp_abandon+0x10c>
c000b163:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b167:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b16a:	83 ec 0c             	sub    esp,0xc
c000b16d:	50                   	push   eax
c000b16e:	e8 31 ee ff ff       	call   c0009fa4 <tcp_segs_free>
c000b173:	83 c4 10             	add    esp,0x10
c000b176:	66 90                	xchg   ax,ax
c000b178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b17c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b182:	85 c0                	test   eax,eax
c000b184:	74 16                	je     c000b19c <tcp_abandon+0x130>
c000b186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b18a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b190:	83 ec 0c             	sub    esp,0xc
c000b193:	50                   	push   eax
c000b194:	e8 0b ee ff ff       	call   c0009fa4 <tcp_segs_free>
c000b199:	83 c4 10             	add    esp,0x10
c000b19c:	83 ec 08             	sub    esp,0x8
c000b19f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1a3:	6a 02                	push   0x2
c000b1a5:	e8 6a c8 ff ff       	call   c0007a14 <memp_free>
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b1b2:	74 14                	je     c000b1c8 <tcp_abandon+0x15c>
c000b1b4:	83 ec 08             	sub    esp,0x8
c000b1b7:	6a f6                	push   0xfffffff6
c000b1b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b1c1:	ff d0                	call   eax
c000b1c3:	83 c4 10             	add    esp,0x10
c000b1c6:	66 90                	xchg   ax,ax
c000b1c8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b1cd:	74 29                	je     c000b1f8 <tcp_abandon+0x18c>
c000b1cf:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b1d4:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b1d9:	83 ec 08             	sub    esp,0x8
c000b1dc:	52                   	push   edx
c000b1dd:	50                   	push   eax
c000b1de:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e2:	50                   	push   eax
c000b1e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e7:	50                   	push   eax
c000b1e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b1ec:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1f0:	e8 0b 51 00 00       	call   c0010300 <tcp_rst>
c000b1f5:	83 c4 20             	add    esp,0x20
c000b1f8:	90                   	nop
c000b1f9:	83 c4 2c             	add    esp,0x2c
c000b1fc:	c3                   	ret    
c000b1fd:	8d 76 00             	lea    esi,[esi+0x0]

c000b200 <tcp_abort>:
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	83 ec 08             	sub    esp,0x8
c000b206:	6a 01                	push   0x1
c000b208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b20c:	e8 5b fe ff ff       	call   c000b06c <tcp_abandon>
c000b211:	83 c4 10             	add    esp,0x10
c000b214:	90                   	nop
c000b215:	83 c4 0c             	add    esp,0xc
c000b218:	c3                   	ret    
c000b219:	8d 76 00             	lea    esi,[esi+0x0]

c000b21c <tcp_kill_prio>:
c000b21c:	83 ec 2c             	sub    esp,0x2c
c000b21f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b223:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b227:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b22c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b234:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b23c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b241:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b245:	eb 75                	jmp    c000b2bc <tcp_kill_prio+0xa0>
c000b247:	90                   	nop
c000b248:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b24c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b24f:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b254:	0f b6 c0             	movzx  eax,al
c000b257:	39 c2                	cmp    edx,eax
c000b259:	72 55                	jb     c000b2b0 <tcp_kill_prio+0x94>
c000b25b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b25f:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b262:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b267:	0f b6 c0             	movzx  eax,al
c000b26a:	39 c2                	cmp    edx,eax
c000b26c:	72 42                	jb     c000b2b0 <tcp_kill_prio+0x94>
c000b26e:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b278:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b27b:	29 c2                	sub    edx,eax
c000b27d:	89 d0                	mov    eax,edx
c000b27f:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b283:	77 2b                	ja     c000b2b0 <tcp_kill_prio+0x94>
c000b285:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b28b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b28f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b292:	29 c2                	sub    edx,eax
c000b294:	89 d0                	mov    eax,edx
c000b296:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b29a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b29e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2a6:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b2a9:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000b2b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b2b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b2bb:	90                   	nop
c000b2bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b2c1:	75 85                	jne    c000b248 <tcp_kill_prio+0x2c>
c000b2c3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b2c8:	74 12                	je     c000b2dc <tcp_kill_prio+0xc0>
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b2d1:	e8 2a ff ff ff       	call   c000b200 <tcp_abort>
c000b2d6:	83 c4 10             	add    esp,0x10
c000b2d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b2dc:	90                   	nop
c000b2dd:	83 c4 2c             	add    esp,0x2c
c000b2e0:	c3                   	ret    
c000b2e1:	8d 76 00             	lea    esi,[esi+0x0]

c000b2e4 <tcp_kill_timewait>:
c000b2e4:	83 ec 1c             	sub    esp,0x1c
c000b2e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b2ef:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b2f7:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b2fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b300:	eb 42                	jmp    c000b344 <tcp_kill_timewait+0x60>
c000b302:	66 90                	xchg   ax,ax
c000b304:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b30a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b30e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b311:	29 c2                	sub    edx,eax
c000b313:	89 d0                	mov    eax,edx
c000b315:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b319:	77 1d                	ja     c000b338 <tcp_kill_timewait+0x54>
c000b31b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b325:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b328:	29 c2                	sub    edx,eax
c000b32a:	89 d0                	mov    eax,edx
c000b32c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b334:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b338:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b33c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b33f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b343:	90                   	nop
c000b344:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b349:	75 b9                	jne    c000b304 <tcp_kill_timewait+0x20>
c000b34b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b350:	74 12                	je     c000b364 <tcp_kill_timewait+0x80>
c000b352:	83 ec 0c             	sub    esp,0xc
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	e8 a2 fe ff ff       	call   c000b200 <tcp_abort>
c000b35e:	83 c4 10             	add    esp,0x10
c000b361:	8d 76 00             	lea    esi,[esi+0x0]
c000b364:	90                   	nop
c000b365:	83 c4 1c             	add    esp,0x1c
c000b368:	c3                   	ret    
c000b369:	8d 76 00             	lea    esi,[esi+0x0]

c000b36c <tcp_next_iss>:
c000b36c:	8b 15 9c 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a9c
c000b372:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b377:	01 d0                	add    eax,edx
c000b379:	a3 9c 3a 03 c0       	mov    ds:0xc0033a9c,eax
c000b37e:	a1 9c 3a 03 c0       	mov    eax,ds:0xc0033a9c
c000b383:	c3                   	ret    

c000b384 <tcp_alloc>:
c000b384:	83 ec 2c             	sub    esp,0x2c
c000b387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b38b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b38f:	83 ec 0c             	sub    esp,0xc
c000b392:	6a 02                	push   0x2
c000b394:	e8 4f c5 ff ff       	call   c00078e8 <memp_malloc>
c000b399:	83 c4 10             	add    esp,0x10
c000b39c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3a5:	75 6d                	jne    c000b414 <tcp_alloc+0x90>
c000b3a7:	e8 38 ff ff ff       	call   c000b2e4 <tcp_kill_timewait>
c000b3ac:	83 ec 0c             	sub    esp,0xc
c000b3af:	6a 02                	push   0x2
c000b3b1:	e8 32 c5 ff ff       	call   c00078e8 <memp_malloc>
c000b3b6:	83 c4 10             	add    esp,0x10
c000b3b9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3c2:	75 38                	jne    c000b3fc <tcp_alloc+0x78>
c000b3c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b3c9:	83 ec 0c             	sub    esp,0xc
c000b3cc:	50                   	push   eax
c000b3cd:	e8 4a fe ff ff       	call   c000b21c <tcp_kill_prio>
c000b3d2:	83 c4 10             	add    esp,0x10
c000b3d5:	83 ec 0c             	sub    esp,0xc
c000b3d8:	6a 02                	push   0x2
c000b3da:	e8 09 c5 ff ff       	call   c00078e8 <memp_malloc>
c000b3df:	83 c4 10             	add    esp,0x10
c000b3e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3e6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3eb:	74 0f                	je     c000b3fc <tcp_alloc+0x78>
c000b3ed:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3f3:	83 e8 01             	sub    eax,0x1
c000b3f6:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b401:	74 11                	je     c000b414 <tcp_alloc+0x90>
c000b403:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b409:	83 e8 01             	sub    eax,0x1
c000b40c:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b412:	66 90                	xchg   ax,ax
c000b414:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b419:	0f 84 09 01 00 00    	je     c000b528 <tcp_alloc+0x1a4>
c000b41f:	83 ec 04             	sub    esp,0x4
c000b422:	68 a8 00 00 00       	push   0xa8
c000b427:	6a 00                	push   0x0
c000b429:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b42d:	e8 be 50 ff ff       	call   c00004f0 <memset>
c000b432:	83 c4 10             	add    esp,0x10
c000b435:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b439:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b43d:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b440:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b444:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b44a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b44e:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b458:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b45e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b462:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b468:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46c:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b470:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b474:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b478:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b47c:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b482:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b486:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b48c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b490:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b49a:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b4a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a4:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b4aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ae:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b4b4:	e8 b3 fe ff ff       	call   c000b36c <tcp_next_iss>
c000b4b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b4bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4c5:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b4c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4d0:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b4d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4db:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b4de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4e6:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b4e9:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4f3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b4f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4fa:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b4fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b502:	c7 80 8c 00 00 00 08 ae 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000ae08
c000b50c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b510:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b51a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b51e:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b525:	8d 76 00             	lea    esi,[esi+0x0]
c000b528:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b52c:	83 c4 2c             	add    esp,0x2c
c000b52f:	c3                   	ret    

c000b530 <tcp_new>:
c000b530:	83 ec 0c             	sub    esp,0xc
c000b533:	83 ec 0c             	sub    esp,0xc
c000b536:	6a 40                	push   0x40
c000b538:	e8 47 fe ff ff       	call   c000b384 <tcp_alloc>
c000b53d:	83 c4 10             	add    esp,0x10
c000b540:	83 c4 0c             	add    esp,0xc
c000b543:	c3                   	ret    

c000b544 <tcp_eff_send_mss>:
c000b544:	53                   	push   ebx
c000b545:	83 ec 28             	sub    esp,0x28
c000b548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b54c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b551:	83 ec 0c             	sub    esp,0xc
c000b554:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b558:	e8 bf 80 00 00       	call   c001361c <ip_route>
c000b55d:	83 c4 10             	add    esp,0x10
c000b560:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b564:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b569:	74 3d                	je     c000b5a8 <tcp_eff_send_mss+0x64>
c000b56b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b56f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b572:	0f b7 c0             	movzx  eax,ax
c000b575:	85 c0                	test   eax,eax
c000b577:	74 2f                	je     c000b5a8 <tcp_eff_send_mss+0x64>
c000b579:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b57d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b580:	83 e8 28             	sub    eax,0x28
c000b583:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b588:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b58c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b591:	0f b7 d8             	movzx  ebx,ax
c000b594:	0f b7 ca             	movzx  ecx,dx
c000b597:	39 cb                	cmp    ebx,ecx
c000b599:	76 05                	jbe    c000b5a0 <tcp_eff_send_mss+0x5c>
c000b59b:	89 d0                	mov    eax,edx
c000b59d:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a0:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000b5a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b5ac:	83 c4 28             	add    esp,0x28
c000b5af:	5b                   	pop    ebx
c000b5b0:	c3                   	ret    
c000b5b1:	8d 76 00             	lea    esi,[esi+0x0]

c000b5b4 <tcp_connect>:
c000b5b4:	83 ec 2c             	sub    esp,0x2c
c000b5b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b5bb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b5c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5c4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b5c7:	85 c0                	test   eax,eax
c000b5c9:	74 1d                	je     c000b5e8 <tcp_connect+0x34>
c000b5cb:	83 ec 08             	sub    esp,0x8
c000b5ce:	68 84 01 03 c0       	push   0xc0030184
c000b5d3:	68 e6 f9 02 c0       	push   0xc002f9e6
c000b5d8:	e8 f3 44 01 00       	call   c001fad0 <CPrintf>
c000b5dd:	83 c4 10             	add    esp,0x10
c000b5e0:	b0 f7                	mov    al,0xf7
c000b5e2:	e9 41 02 00 00       	jmp    c000b828 <tcp_connect+0x274>
c000b5e7:	90                   	nop
c000b5e8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b5ed:	74 25                	je     c000b614 <tcp_connect+0x60>
c000b5ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5f3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b5f7:	8b 12                	mov    edx,DWORD PTR [edx]
c000b5f9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b604:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000b608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b60c:	85 c0                	test   eax,eax
c000b60e:	74 18                	je     c000b628 <tcp_connect+0x74>
c000b610:	eb 0a                	jmp    c000b61c <tcp_connect+0x68>
c000b612:	66 90                	xchg   ax,ax
c000b614:	b0 fa                	mov    al,0xfa
c000b616:	e9 0d 02 00 00       	jmp    c000b828 <tcp_connect+0x274>
c000b61b:	90                   	nop
c000b61c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b620:	8b 00                	mov    eax,DWORD PTR [eax]
c000b622:	85 c0                	test   eax,eax
c000b624:	75 3a                	jne    c000b660 <tcp_connect+0xac>
c000b626:	66 90                	xchg   ax,ax
c000b628:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b62c:	83 c0 04             	add    eax,0x4
c000b62f:	83 ec 0c             	sub    esp,0xc
c000b632:	50                   	push   eax
c000b633:	e8 e4 7f 00 00       	call   c001361c <ip_route>
c000b638:	83 c4 10             	add    esp,0x10
c000b63b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b63f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b644:	75 0a                	jne    c000b650 <tcp_connect+0x9c>
c000b646:	b0 fc                	mov    al,0xfc
c000b648:	e9 db 01 00 00       	jmp    c000b828 <tcp_connect+0x274>
c000b64d:	8d 76 00             	lea    esi,[esi+0x0]
c000b650:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b654:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b657:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b65b:	89 10                	mov    DWORD PTR [eax],edx
c000b65d:	8d 76 00             	lea    esi,[esi+0x0]
c000b660:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b664:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b667:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b66c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b670:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b673:	0f b7 c0             	movzx  eax,ax
c000b676:	85 c0                	test   eax,eax
c000b678:	75 12                	jne    c000b68c <tcp_connect+0xd8>
c000b67a:	e8 21 e7 ff ff       	call   c0009da0 <tcp_new_port>
c000b67f:	89 c2                	mov    edx,eax
c000b681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b685:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000b689:	8d 76 00             	lea    esi,[esi+0x0]
c000b68c:	e8 db fc ff ff       	call   c000b36c <tcp_next_iss>
c000b691:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b695:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b699:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b6a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b6a8:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b6ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6af:	8d 50 ff             	lea    edx,[eax-0x1]
c000b6b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6b6:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b6b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b6bd:	8d 50 ff             	lea    edx,[eax-0x1]
c000b6c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6c4:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b6c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6cb:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b6d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6d5:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b6db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6df:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b6e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b6e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ed:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b6f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6f7:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b701:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b704:	0f b7 c0             	movzx  eax,ax
c000b707:	83 ec 08             	sub    esp,0x8
c000b70a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b70e:	50                   	push   eax
c000b70f:	e8 30 fe ff ff       	call   c000b544 <tcp_eff_send_mss>
c000b714:	83 c4 10             	add    esp,0x10
c000b717:	89 c2                	mov    edx,eax
c000b719:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71d:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000b721:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b725:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b72b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b72f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b732:	89 c2                	mov    edx,eax
c000b734:	c1 e2 02             	shl    edx,0x2
c000b737:	01 d0                	add    eax,edx
c000b739:	d1 e0                	shl    eax,1
c000b73b:	89 c2                	mov    edx,eax
c000b73d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b741:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000b745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b749:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b74d:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b753:	83 ec 08             	sub    esp,0x8
c000b756:	6a 02                	push   0x2
c000b758:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b75c:	e8 73 40 00 00       	call   c000f7d4 <tcp_enqueue_flags>
c000b761:	83 c4 10             	add    esp,0x10
c000b764:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b768:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b76d:	85 c0                	test   eax,eax
c000b76f:	0f 85 af 00 00 00    	jne    c000b824 <tcp_connect+0x270>
c000b775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b779:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b780:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b785:	85 c0                	test   eax,eax
c000b787:	74 6f                	je     c000b7f8 <tcp_connect+0x244>
c000b789:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b78e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b792:	75 10                	jne    c000b7a4 <tcp_connect+0x1f0>
c000b794:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b799:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b79c:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b7a1:	eb 49                	jmp    c000b7ec <tcp_connect+0x238>
c000b7a3:	90                   	nop
c000b7a4:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b7a9:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b7ae:	eb 30                	jmp    c000b7e0 <tcp_connect+0x22c>
c000b7b0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b7b8:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b7bc:	75 12                	jne    c000b7d0 <tcp_connect+0x21c>
c000b7be:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7c7:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b7ca:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7cd:	eb 1d                	jmp    c000b7ec <tcp_connect+0x238>
c000b7cf:	90                   	nop
c000b7d0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7d5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b7d8:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b7dd:	8d 76 00             	lea    esi,[esi+0x0]
c000b7e0:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b7e5:	85 c0                	test   eax,eax
c000b7e7:	75 c7                	jne    c000b7b0 <tcp_connect+0x1fc>
c000b7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7f0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b7f7:	90                   	nop
c000b7f8:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b7fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b802:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b805:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b809:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b80e:	e8 09 53 00 00       	call   c0010b1c <tcp_timer_needed>
c000b813:	83 ec 0c             	sub    esp,0xc
c000b816:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b81a:	e8 55 46 00 00       	call   c000fe74 <tcp_output>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	66 90                	xchg   ax,ax
c000b824:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b828:	83 c4 2c             	add    esp,0x2c
c000b82b:	c3                   	ret    

c000b82c <tcp_debug_state_str>:
c000b82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b830:	8b 04 85 00 03 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd00]
c000b837:	c3                   	ret    

c000b838 <tcp_timewait_input>:
c000b838:	53                   	push   ebx
c000b839:	83 ec 08             	sub    esp,0x8
c000b83c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b841:	0f b6 c0             	movzx  eax,al
c000b844:	83 e0 04             	and    eax,0x4
c000b847:	74 07                	je     c000b850 <tcp_timewait_input+0x18>
c000b849:	b0 00                	mov    al,0x0
c000b84b:	e9 e8 00 00 00       	jmp    c000b938 <tcp_timewait_input+0x100>
c000b850:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b855:	0f b6 c0             	movzx  eax,al
c000b858:	83 e0 02             	and    eax,0x2
c000b85b:	0f 84 83 00 00 00    	je     c000b8e4 <tcp_timewait_input+0xac>
c000b861:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b86b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b86e:	29 c2                	sub    edx,eax
c000b870:	89 d0                	mov    eax,edx
c000b872:	0f 88 88 00 00 00    	js     c000b900 <tcp_timewait_input+0xc8>
c000b878:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b882:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b889:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b88c:	0f b7 c0             	movzx  eax,ax
c000b88f:	01 c8                	add    eax,ecx
c000b891:	29 c2                	sub    edx,eax
c000b893:	89 d0                	mov    eax,edx
c000b895:	85 c0                	test   eax,eax
c000b897:	7f 67                	jg     c000b900 <tcp_timewait_input+0xc8>
c000b899:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b89e:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b8a1:	0f b7 c8             	movzx  ecx,ax
c000b8a4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b8a9:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b8ad:	0f b7 d0             	movzx  edx,ax
c000b8b0:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b8b6:	0f b7 d8             	movzx  ebx,ax
c000b8b9:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b8be:	01 c3                	add    ebx,eax
c000b8c0:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b8c5:	83 ec 08             	sub    esp,0x8
c000b8c8:	51                   	push   ecx
c000b8c9:	52                   	push   edx
c000b8ca:	68 90 68 03 c0       	push   0xc0036890
c000b8cf:	68 98 68 03 c0       	push   0xc0036898
c000b8d4:	53                   	push   ebx
c000b8d5:	50                   	push   eax
c000b8d6:	e8 25 4a 00 00       	call   c0010300 <tcp_rst>
c000b8db:	83 c4 20             	add    esp,0x20
c000b8de:	b0 00                	mov    al,0x0
c000b8e0:	eb 56                	jmp    c000b938 <tcp_timewait_input+0x100>
c000b8e2:	66 90                	xchg   ax,ax
c000b8e4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8e9:	0f b6 c0             	movzx  eax,al
c000b8ec:	83 e0 01             	and    eax,0x1
c000b8ef:	74 0f                	je     c000b900 <tcp_timewait_input+0xc8>
c000b8f1:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8fb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b8fe:	66 90                	xchg   ax,ax
c000b900:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b906:	0f b7 c0             	movzx  eax,ax
c000b909:	85 c0                	test   eax,eax
c000b90b:	74 27                	je     c000b934 <tcp_timewait_input+0xfc>
c000b90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b911:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b914:	83 c8 02             	or     eax,0x2
c000b917:	88 c2                	mov    dl,al
c000b919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b91d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b927:	e8 48 45 00 00       	call   c000fe74 <tcp_output>
c000b92c:	83 c4 10             	add    esp,0x10
c000b92f:	eb 07                	jmp    c000b938 <tcp_timewait_input+0x100>
c000b931:	8d 76 00             	lea    esi,[esi+0x0]
c000b934:	b0 00                	mov    al,0x0
c000b936:	66 90                	xchg   ax,ax
c000b938:	83 c4 08             	add    esp,0x8
c000b93b:	5b                   	pop    ebx
c000b93c:	c3                   	ret    
c000b93d:	8d 76 00             	lea    esi,[esi+0x0]

c000b940 <tcp_oos_insert_segment>:
c000b940:	53                   	push   ebx
c000b941:	83 ec 18             	sub    esp,0x18
c000b944:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b948:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b94b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b94f:	0f b7 c0             	movzx  eax,ax
c000b952:	83 ec 0c             	sub    esp,0xc
c000b955:	50                   	push   eax
c000b956:	e8 c1 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b95b:	83 c4 10             	add    esp,0x10
c000b95e:	0f b7 c0             	movzx  eax,ax
c000b961:	83 e0 01             	and    eax,0x1
c000b964:	0f 84 8e 00 00 00    	je     c000b9f8 <tcp_oos_insert_segment+0xb8>
c000b96a:	83 ec 0c             	sub    esp,0xc
c000b96d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b971:	e8 2e e6 ff ff       	call   c0009fa4 <tcp_segs_free>
c000b976:	83 c4 10             	add    esp,0x10
c000b979:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b981:	e9 1a 01 00 00       	jmp    c000baa0 <tcp_oos_insert_segment+0x160>
c000b986:	66 90                	xchg   ax,ax
c000b988:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b98c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b98f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b993:	0f b7 c0             	movzx  eax,ax
c000b996:	83 ec 0c             	sub    esp,0xc
c000b999:	50                   	push   eax
c000b99a:	e8 7d 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	0f b7 c0             	movzx  eax,ax
c000b9a5:	83 e0 01             	and    eax,0x1
c000b9a8:	74 2a                	je     c000b9d4 <tcp_oos_insert_segment+0x94>
c000b9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9b1:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000b9b5:	83 ec 0c             	sub    esp,0xc
c000b9b8:	6a 01                	push   0x1
c000b9ba:	e8 5d 52 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000b9bf:	83 c4 10             	add    esp,0x10
c000b9c2:	89 c2                	mov    edx,eax
c000b9c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9cb:	09 da                	or     edx,ebx
c000b9cd:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000b9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000b9d4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9e2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b9e6:	83 ec 0c             	sub    esp,0xc
c000b9e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9ed:	e8 6e e5 ff ff       	call   c0009f60 <tcp_seg_free>
c000b9f2:	83 c4 10             	add    esp,0x10
c000b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b9f8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9fd:	74 35                	je     c000ba34 <tcp_oos_insert_segment+0xf4>
c000b9ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba06:	0f b7 d0             	movzx  edx,ax
c000ba09:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba0e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ba11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba18:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ba1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba22:	0f b7 c0             	movzx  eax,ax
c000ba25:	01 d0                	add    eax,edx
c000ba27:	29 c1                	sub    ecx,eax
c000ba29:	89 c8                	mov    eax,ecx
c000ba2b:	0f 89 57 ff ff ff    	jns    c000b988 <tcp_oos_insert_segment+0x48>
c000ba31:	8d 76 00             	lea    esi,[esi+0x0]
c000ba34:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ba39:	74 65                	je     c000baa0 <tcp_oos_insert_segment+0x160>
c000ba3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba3f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba42:	0f b7 d0             	movzx  edx,ax
c000ba45:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba4a:	01 c2                	add    edx,eax
c000ba4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba56:	29 c2                	sub    edx,eax
c000ba58:	89 d0                	mov    eax,edx
c000ba5a:	85 c0                	test   eax,eax
c000ba5c:	7e 42                	jle    c000baa0 <tcp_oos_insert_segment+0x160>
c000ba5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba62:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba68:	89 c2                	mov    edx,eax
c000ba6a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba6f:	89 d3                	mov    ebx,edx
c000ba71:	29 c3                	sub    ebx,eax
c000ba73:	89 d8                	mov    eax,ebx
c000ba75:	89 c2                	mov    edx,eax
c000ba77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba7b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ba7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba83:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba86:	0f b7 d0             	movzx  edx,ax
c000ba89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba8d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba90:	83 ec 08             	sub    esp,0x8
c000ba93:	52                   	push   edx
c000ba94:	50                   	push   eax
c000ba95:	e8 0e ce ff ff       	call   c00088a8 <pbuf_realloc>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	8d 76 00             	lea    esi,[esi+0x0]
c000baa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000baa8:	89 10                	mov    DWORD PTR [eax],edx
c000baaa:	90                   	nop
c000baab:	83 c4 18             	add    esp,0x18
c000baae:	5b                   	pop    ebx
c000baaf:	c3                   	ret    

c000bab0 <tcp_receive>:
c000bab0:	57                   	push   edi
c000bab1:	56                   	push   esi
c000bab2:	53                   	push   ebx
c000bab3:	83 ec 30             	sub    esp,0x30
c000bab6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000babe:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000bac3:	0f b6 c0             	movzx  eax,al
c000bac6:	83 e0 10             	and    eax,0x10
c000bac9:	0f 84 f5 07 00 00    	je     c000c2c4 <tcp_receive+0x814>
c000bacf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bad3:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bad6:	0f b7 d0             	movzx  edx,ax
c000bad9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000badd:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000bae0:	01 d0                	add    eax,edx
c000bae2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bae6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baea:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000baed:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baf2:	29 c2                	sub    edx,eax
c000baf4:	89 d0                	mov    eax,edx
c000baf6:	78 50                	js     c000bb48 <tcp_receive+0x98>
c000baf8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bafc:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000baff:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bb04:	39 c2                	cmp    edx,eax
c000bb06:	75 14                	jne    c000bb1c <tcp_receive+0x6c>
c000bb08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb0c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb0f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb14:	29 c2                	sub    edx,eax
c000bb16:	89 d0                	mov    eax,edx
c000bb18:	78 2e                	js     c000bb48 <tcp_receive+0x98>
c000bb1a:	66 90                	xchg   ax,ax
c000bb1c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb20:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb23:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bb28:	39 c2                	cmp    edx,eax
c000bb2a:	75 74                	jne    c000bba0 <tcp_receive+0xf0>
c000bb2c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bb31:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bb35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb39:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb3c:	0f b7 d2             	movzx  edx,dx
c000bb3f:	0f b7 c0             	movzx  eax,ax
c000bb42:	39 c2                	cmp    edx,eax
c000bb44:	76 5a                	jbe    c000bba0 <tcp_receive+0xf0>
c000bb46:	66 90                	xchg   ax,ax
c000bb48:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bb4d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bb51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb55:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000bb59:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bb5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb63:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bb66:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb70:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bb73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb77:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb7a:	0f b7 c0             	movzx  eax,ax
c000bb7d:	85 c0                	test   eax,eax
c000bb7f:	74 1f                	je     c000bba0 <tcp_receive+0xf0>
c000bb81:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb85:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bb8b:	0f b6 c0             	movzx  eax,al
c000bb8e:	85 c0                	test   eax,eax
c000bb90:	74 0e                	je     c000bba0 <tcp_receive+0xf0>
c000bb92:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb96:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000bba0:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bba6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbaa:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bbad:	29 c2                	sub    edx,eax
c000bbaf:	89 d0                	mov    eax,edx
c000bbb1:	85 c0                	test   eax,eax
c000bbb3:	0f 8f 03 01 00 00    	jg     c000bcbc <tcp_receive+0x20c>
c000bbb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbbd:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bbc3:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bbc9:	0f b7 c0             	movzx  eax,ax
c000bbcc:	85 c0                	test   eax,eax
c000bbce:	0f 85 d0 00 00 00    	jne    c000bca4 <tcp_receive+0x1f4>
c000bbd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd8:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bbdb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbdf:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bbe2:	0f b7 c0             	movzx  eax,ax
c000bbe5:	01 d0                	add    eax,edx
c000bbe7:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bbeb:	0f 85 b3 00 00 00    	jne    c000bca4 <tcp_receive+0x1f4>
c000bbf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf5:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bbf9:	98                   	cwde   
c000bbfa:	85 c0                	test   eax,eax
c000bbfc:	0f 88 a2 00 00 00    	js     c000bca4 <tcp_receive+0x1f4>
c000bc02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc06:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bc09:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bc0e:	39 c2                	cmp    edx,eax
c000bc10:	0f 85 8e 00 00 00    	jne    c000bca4 <tcp_receive+0x1f4>
c000bc16:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bc1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc22:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc25:	83 c0 01             	add    eax,0x1
c000bc28:	88 c2                	mov    dl,al
c000bc2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc2e:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bc31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc35:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc38:	0f b6 c0             	movzx  eax,al
c000bc3b:	83 f8 03             	cmp    eax,0x3
c000bc3e:	76 44                	jbe    c000bc84 <tcp_receive+0x1d4>
c000bc40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc44:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc4f:	01 d0                	add    eax,edx
c000bc51:	89 c2                	mov    edx,eax
c000bc53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc57:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bc5b:	0f b7 d2             	movzx  edx,dx
c000bc5e:	0f b7 c0             	movzx  eax,ax
c000bc61:	39 c2                	cmp    edx,eax
c000bc63:	76 3f                	jbe    c000bca4 <tcp_receive+0x1f4>
c000bc65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc69:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc71:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc74:	01 d0                	add    eax,edx
c000bc76:	89 c2                	mov    edx,eax
c000bc78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc7c:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bc80:	eb 22                	jmp    c000bca4 <tcp_receive+0x1f4>
c000bc82:	66 90                	xchg   ax,ax
c000bc84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc88:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc8b:	0f b6 c0             	movzx  eax,al
c000bc8e:	83 f8 03             	cmp    eax,0x3
c000bc91:	75 11                	jne    c000bca4 <tcp_receive+0x1f4>
c000bc93:	83 ec 0c             	sub    esp,0xc
c000bc96:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bc9a:	e8 35 49 00 00       	call   c00105d4 <tcp_rexmit_fast>
c000bc9f:	83 c4 10             	add    esp,0x10
c000bca2:	66 90                	xchg   ax,ax
c000bca4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bca9:	0f 85 a1 04 00 00    	jne    c000c150 <tcp_receive+0x6a0>
c000bcaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb3:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bcb7:	e9 94 04 00 00       	jmp    c000c150 <tcp_receive+0x6a0>
c000bcbc:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bcc2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc6:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bcc9:	29 c2                	sub    edx,eax
c000bccb:	89 d0                	mov    eax,edx
c000bccd:	83 e8 01             	sub    eax,0x1
c000bcd0:	0f 88 52 03 00 00    	js     c000c028 <tcp_receive+0x578>
c000bcd6:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bcdc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce0:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bce3:	29 c2                	sub    edx,eax
c000bce5:	89 d0                	mov    eax,edx
c000bce7:	85 c0                	test   eax,eax
c000bce9:	0f 8f 39 03 00 00    	jg     c000c028 <tcp_receive+0x578>
c000bcef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcf3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcf6:	0f b6 c0             	movzx  eax,al
c000bcf9:	83 e0 04             	and    eax,0x4
c000bcfc:	74 22                	je     c000bd20 <tcp_receive+0x270>
c000bcfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd02:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bd05:	83 e0 fb             	and    eax,0xfffffffb
c000bd08:	88 c2                	mov    dl,al
c000bd0a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd0e:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bd11:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd15:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c000bd18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1c:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000bd20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd24:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bd28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd2c:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bd2f:	98                   	cwde   
c000bd30:	c1 f8 03             	sar    eax,0x3
c000bd33:	89 c2                	mov    edx,eax
c000bd35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd39:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bd3d:	01 d0                	add    eax,edx
c000bd3f:	89 c2                	mov    edx,eax
c000bd41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd45:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000bd49:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bd4e:	89 c2                	mov    edx,eax
c000bd50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd54:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd57:	89 d7                	mov    edi,edx
c000bd59:	29 c7                	sub    edi,eax
c000bd5b:	89 f8                	mov    eax,edi
c000bd5d:	89 c2                	mov    edx,eax
c000bd5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd63:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bd67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6b:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bd6f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd73:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bd76:	01 d0                	add    eax,edx
c000bd78:	89 c2                	mov    edx,eax
c000bd7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd7e:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000bd82:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd86:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd8a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd94:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bd97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd9e:	83 f8 03             	cmp    eax,0x3
c000bda1:	0f 86 dd 01 00 00    	jbe    c000bf84 <tcp_receive+0x4d4>
c000bda7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdab:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bdaf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb3:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bdb6:	0f b7 d2             	movzx  edx,dx
c000bdb9:	0f b7 c0             	movzx  eax,ax
c000bdbc:	39 c2                	cmp    edx,eax
c000bdbe:	73 4c                	jae    c000be0c <tcp_receive+0x35c>
c000bdc0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc4:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bdc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdcc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdcf:	01 d0                	add    eax,edx
c000bdd1:	89 c2                	mov    edx,eax
c000bdd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bddb:	0f b7 d2             	movzx  edx,dx
c000bdde:	0f b7 c0             	movzx  eax,ax
c000bde1:	39 c2                	cmp    edx,eax
c000bde3:	0f 86 9b 01 00 00    	jbe    c000bf84 <tcp_receive+0x4d4>
c000bde9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bded:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bdf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdf8:	01 d0                	add    eax,edx
c000bdfa:	89 c2                	mov    edx,eax
c000bdfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be00:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000be04:	e9 7b 01 00 00       	jmp    c000bf84 <tcp_receive+0x4d4>
c000be09:	8d 76 00             	lea    esi,[esi+0x0]
c000be0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be10:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000be14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be1b:	0f b7 d0             	movzx  edx,ax
c000be1e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000be25:	0f b7 c0             	movzx  eax,ax
c000be28:	0f af c2             	imul   eax,edx
c000be2b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be2f:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000be33:	0f b7 f2             	movzx  esi,dx
c000be36:	89 c2                	mov    edx,eax
c000be38:	c1 fa 1f             	sar    edx,0x1f
c000be3b:	f7 fe                	idiv   esi
c000be3d:	01 c8                	add    eax,ecx
c000be3f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000be44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be48:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000be4c:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000be51:	0f b7 c0             	movzx  eax,ax
c000be54:	39 c2                	cmp    edx,eax
c000be56:	0f 86 28 01 00 00    	jbe    c000bf84 <tcp_receive+0x4d4>
c000be5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be60:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c000be65:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c000be69:	e9 16 01 00 00       	jmp    c000bf84 <tcp_receive+0x4d4>
c000be6e:	66 90                	xchg   ax,ax
c000be70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be74:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be77:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be7f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be82:	8b 10                	mov    edx,DWORD PTR [eax]
c000be84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be88:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000be8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be8f:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000be92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000be99:	83 ec 0c             	sub    esp,0xc
c000be9c:	50                   	push   eax
c000be9d:	e8 0e cc ff ff       	call   c0008ab0 <pbuf_clen>
c000bea2:	83 c4 10             	add    esp,0x10
c000bea5:	0f b6 c0             	movzx  eax,al
c000bea8:	0f b7 d3             	movzx  edx,bx
c000beab:	0f b7 c0             	movzx  eax,ax
c000beae:	39 c2                	cmp    edx,eax
c000beb0:	73 16                	jae    c000bec8 <tcp_receive+0x418>
c000beb2:	83 ec 08             	sub    esp,0x8
c000beb5:	68 2c 03 03 c0       	push   0xc003032c
c000beba:	68 e6 f9 02 c0       	push   0xc002f9e6
c000bebf:	e8 0c 3c 01 00       	call   c001fad0 <CPrintf>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	90                   	nop
c000bec8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000becc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000becf:	0f b7 c0             	movzx  eax,ax
c000bed2:	85 c0                	test   eax,eax
c000bed4:	74 36                	je     c000bf0c <tcp_receive+0x45c>
c000bed6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000beda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bedd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bee1:	0f b7 c0             	movzx  eax,ax
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	50                   	push   eax
c000bee8:	e8 2f 4d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	0f b7 c0             	movzx  eax,ax
c000bef3:	83 e0 01             	and    eax,0x1
c000bef6:	74 14                	je     c000bf0c <tcp_receive+0x45c>
c000bef8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000befc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000beff:	83 e8 01             	sub    eax,0x1
c000bf02:	89 c2                	mov    edx,eax
c000bf04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf08:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000bf0c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf13:	83 ec 0c             	sub    esp,0xc
c000bf16:	50                   	push   eax
c000bf17:	e8 94 cb ff ff       	call   c0008ab0 <pbuf_clen>
c000bf1c:	83 c4 10             	add    esp,0x10
c000bf1f:	88 c1                	mov    cl,al
c000bf21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf25:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bf28:	0f b6 c1             	movzx  eax,cl
c000bf2b:	89 d7                	mov    edi,edx
c000bf2d:	29 c7                	sub    edi,eax
c000bf2f:	89 f8                	mov    eax,edi
c000bf31:	89 c2                	mov    edx,eax
c000bf33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf37:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000bf3b:	83 ec 0c             	sub    esp,0xc
c000bf3e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bf42:	e8 19 e0 ff ff       	call   c0009f60 <tcp_seg_free>
c000bf47:	83 c4 10             	add    esp,0x10
c000bf4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf4e:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000bf51:	0f b7 c0             	movzx  eax,ax
c000bf54:	85 c0                	test   eax,eax
c000bf56:	74 2c                	je     c000bf84 <tcp_receive+0x4d4>
c000bf58:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf5c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf5f:	85 c0                	test   eax,eax
c000bf61:	75 21                	jne    c000bf84 <tcp_receive+0x4d4>
c000bf63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf67:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bf6a:	85 c0                	test   eax,eax
c000bf6c:	75 16                	jne    c000bf84 <tcp_receive+0x4d4>
c000bf6e:	83 ec 08             	sub    esp,0x8
c000bf71:	68 54 03 03 c0       	push   0xc0030354
c000bf76:	68 e6 f9 02 c0       	push   0xc002f9e6
c000bf7b:	e8 50 3b 01 00       	call   c001fad0 <CPrintf>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	90                   	nop
c000bf84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf88:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf8b:	85 c0                	test   eax,eax
c000bf8d:	74 69                	je     c000bff8 <tcp_receive+0x548>
c000bf8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf93:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf9c:	83 ec 0c             	sub    esp,0xc
c000bf9f:	50                   	push   eax
c000bfa0:	e8 9b 4c ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	89 c3                	mov    ebx,eax
c000bfaa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfae:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bfb4:	0f b7 f0             	movzx  esi,ax
c000bfb7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbb:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfbe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bfc1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bfc5:	0f b7 c0             	movzx  eax,ax
c000bfc8:	83 ec 0c             	sub    esp,0xc
c000bfcb:	50                   	push   eax
c000bfcc:	e8 4b 4c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	0f b7 c0             	movzx  eax,ax
c000bfd7:	83 e0 03             	and    eax,0x3
c000bfda:	0f 95 c0             	setne  al
c000bfdd:	0f b6 c0             	movzx  eax,al
c000bfe0:	01 f0                	add    eax,esi
c000bfe2:	8d 14 03             	lea    edx,[ebx+eax*1]
c000bfe5:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bfea:	29 c2                	sub    edx,eax
c000bfec:	89 d0                	mov    eax,edx
c000bfee:	85 c0                	test   eax,eax
c000bff0:	0f 8e 7a fe ff ff    	jle    c000be70 <tcp_receive+0x3c0>
c000bff6:	66 90                	xchg   ax,ax
c000bff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bffc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfff:	85 c0                	test   eax,eax
c000c001:	75 0d                	jne    c000c010 <tcp_receive+0x560>
c000c003:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c007:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000c00d:	eb 0d                	jmp    c000c01c <tcp_receive+0x56c>
c000c00f:	90                   	nop
c000c010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c014:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000c01a:	66 90                	xchg   ax,ax
c000c01c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c020:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000c024:	eb 0e                	jmp    c000c034 <tcp_receive+0x584>
c000c026:	66 90                	xchg   ax,ax
c000c028:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c02c:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000c032:	66 90                	xchg   ax,ax
c000c034:	e9 17 01 00 00       	jmp    c000c150 <tcp_receive+0x6a0>
c000c039:	8d 76 00             	lea    esi,[esi+0x0]
c000c03c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c040:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c043:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c047:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c04b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c04e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c050:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c054:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000c057:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c05b:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c05e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c062:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c065:	83 ec 0c             	sub    esp,0xc
c000c068:	50                   	push   eax
c000c069:	e8 42 ca ff ff       	call   c0008ab0 <pbuf_clen>
c000c06e:	83 c4 10             	add    esp,0x10
c000c071:	0f b6 c0             	movzx  eax,al
c000c074:	0f b7 d3             	movzx  edx,bx
c000c077:	0f b7 c0             	movzx  eax,ax
c000c07a:	39 c2                	cmp    edx,eax
c000c07c:	73 16                	jae    c000c094 <tcp_receive+0x5e4>
c000c07e:	83 ec 08             	sub    esp,0x8
c000c081:	68 2c 03 03 c0       	push   0xc003032c
c000c086:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c08b:	e8 40 3a 01 00       	call   c001fad0 <CPrintf>
c000c090:	83 c4 10             	add    esp,0x10
c000c093:	90                   	nop
c000c094:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c098:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c09b:	0f b7 c0             	movzx  eax,ax
c000c09e:	85 c0                	test   eax,eax
c000c0a0:	74 36                	je     c000c0d8 <tcp_receive+0x628>
c000c0a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0a6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c0a9:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c0ad:	0f b7 c0             	movzx  eax,ax
c000c0b0:	83 ec 0c             	sub    esp,0xc
c000c0b3:	50                   	push   eax
c000c0b4:	e8 63 4b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c0b9:	83 c4 10             	add    esp,0x10
c000c0bc:	0f b7 c0             	movzx  eax,ax
c000c0bf:	83 e0 01             	and    eax,0x1
c000c0c2:	74 14                	je     c000c0d8 <tcp_receive+0x628>
c000c0c4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c8:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c0cb:	83 e8 01             	sub    eax,0x1
c000c0ce:	89 c2                	mov    edx,eax
c000c0d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0d4:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000c0d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c0dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0df:	83 ec 0c             	sub    esp,0xc
c000c0e2:	50                   	push   eax
c000c0e3:	e8 c8 c9 ff ff       	call   c0008ab0 <pbuf_clen>
c000c0e8:	83 c4 10             	add    esp,0x10
c000c0eb:	88 c1                	mov    cl,al
c000c0ed:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0f1:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c0f4:	0f b6 c1             	movzx  eax,cl
c000c0f7:	89 d6                	mov    esi,edx
c000c0f9:	29 c6                	sub    esi,eax
c000c0fb:	89 f0                	mov    eax,esi
c000c0fd:	89 c2                	mov    edx,eax
c000c0ff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c103:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000c107:	83 ec 0c             	sub    esp,0xc
c000c10a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c10e:	e8 4d de ff ff       	call   c0009f60 <tcp_seg_free>
c000c113:	83 c4 10             	add    esp,0x10
c000c116:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c11a:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c11d:	0f b7 c0             	movzx  eax,ax
c000c120:	85 c0                	test   eax,eax
c000c122:	74 2c                	je     c000c150 <tcp_receive+0x6a0>
c000c124:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c128:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c12b:	85 c0                	test   eax,eax
c000c12d:	75 21                	jne    c000c150 <tcp_receive+0x6a0>
c000c12f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c133:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c136:	85 c0                	test   eax,eax
c000c138:	75 16                	jne    c000c150 <tcp_receive+0x6a0>
c000c13a:	83 ec 08             	sub    esp,0x8
c000c13d:	68 54 03 03 c0       	push   0xc0030354
c000c142:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c147:	e8 84 39 01 00       	call   c001fad0 <CPrintf>
c000c14c:	83 c4 10             	add    esp,0x10
c000c14f:	90                   	nop
c000c150:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c154:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c157:	85 c0                	test   eax,eax
c000c159:	74 7d                	je     c000c1d8 <tcp_receive+0x728>
c000c15b:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c161:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c165:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c168:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c16b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c16e:	83 ec 0c             	sub    esp,0xc
c000c171:	50                   	push   eax
c000c172:	e8 c9 4a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000c177:	83 c4 10             	add    esp,0x10
c000c17a:	89 c6                	mov    esi,eax
c000c17c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c180:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c183:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c186:	0f b7 f8             	movzx  edi,ax
c000c189:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c18d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c193:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c197:	0f b7 c0             	movzx  eax,ax
c000c19a:	83 ec 0c             	sub    esp,0xc
c000c19d:	50                   	push   eax
c000c19e:	e8 79 4a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	0f b7 c0             	movzx  eax,ax
c000c1a9:	83 e0 03             	and    eax,0x3
c000c1ac:	0f 95 c0             	setne  al
c000c1af:	0f b6 c0             	movzx  eax,al
c000c1b2:	01 f8                	add    eax,edi
c000c1b4:	01 f0                	add    eax,esi
c000c1b6:	29 c3                	sub    ebx,eax
c000c1b8:	89 d8                	mov    eax,ebx
c000c1ba:	78 1c                	js     c000c1d8 <tcp_receive+0x728>
c000c1bc:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c1c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c6:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c1c9:	29 c2                	sub    edx,eax
c000c1cb:	89 d0                	mov    eax,edx
c000c1cd:	85 c0                	test   eax,eax
c000c1cf:	0f 8e 67 fe ff ff    	jle    c000c03c <tcp_receive+0x58c>
c000c1d5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c1df:	85 c0                	test   eax,eax
c000c1e1:	0f 84 dd 00 00 00    	je     c000c2c4 <tcp_receive+0x814>
c000c1e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1eb:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c1ee:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c1f3:	29 c2                	sub    edx,eax
c000c1f5:	89 d0                	mov    eax,edx
c000c1f7:	0f 89 c7 00 00 00    	jns    c000c2c4 <tcp_receive+0x814>
c000c1fd:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c202:	89 c2                	mov    edx,eax
c000c204:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c208:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c20b:	89 d7                	mov    edi,edx
c000c20d:	29 c7                	sub    edi,eax
c000c20f:	89 f8                	mov    eax,edi
c000c211:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c216:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c21b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c21f:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c222:	98                   	cwde   
c000c223:	c1 f8 03             	sar    eax,0x3
c000c226:	89 d6                	mov    esi,edx
c000c228:	29 c6                	sub    esi,eax
c000c22a:	89 f0                	mov    eax,esi
c000c22c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c231:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c235:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c238:	89 c2                	mov    edx,eax
c000c23a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c23f:	01 d0                	add    eax,edx
c000c241:	89 c2                	mov    edx,eax
c000c243:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c247:	66 89 50 48          	mov    WORD PTR [eax+0x48],dx
c000c24b:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c250:	85 c0                	test   eax,eax
c000c252:	79 0c                	jns    c000c260 <tcp_receive+0x7b0>
c000c254:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c259:	f7 d8                	neg    eax
c000c25b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c260:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c265:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c269:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c26d:	98                   	cwde   
c000c26e:	c1 f8 02             	sar    eax,0x2
c000c271:	89 d7                	mov    edi,edx
c000c273:	29 c7                	sub    edi,eax
c000c275:	89 f8                	mov    eax,edi
c000c277:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c27c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c280:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c284:	89 c2                	mov    edx,eax
c000c286:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c28b:	01 d0                	add    eax,edx
c000c28d:	89 c2                	mov    edx,eax
c000c28f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c293:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
c000c297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c29b:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c29e:	98                   	cwde   
c000c29f:	c1 f8 03             	sar    eax,0x3
c000c2a2:	89 c2                	mov    edx,eax
c000c2a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2a8:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c2ac:	01 d0                	add    eax,edx
c000c2ae:	89 c2                	mov    edx,eax
c000c2b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2b4:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
c000c2b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2bc:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c2c3:	90                   	nop
c000c2c4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c2ca:	0f b7 c0             	movzx  eax,ax
c000c2cd:	85 c0                	test   eax,eax
c000c2cf:	0f 84 43 0e 00 00    	je     c000d118 <tcp_receive+0x1668>
c000c2d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2d9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c2dc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2e1:	29 c2                	sub    edx,eax
c000c2e3:	89 d0                	mov    eax,edx
c000c2e5:	83 e8 01             	sub    eax,0x1
c000c2e8:	0f 88 c6 01 00 00    	js     c000c4b4 <tcp_receive+0xa04>
c000c2ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2f2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c2f5:	66 8b 15 aa a8 03 c0 	mov    dx,WORD PTR ds:0xc003a8aa
c000c2fc:	0f b7 ca             	movzx  ecx,dx
c000c2ff:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c305:	01 ca                	add    edx,ecx
c000c307:	29 d0                	sub    eax,edx
c000c309:	83 c0 01             	add    eax,0x1
c000c30c:	85 c0                	test   eax,eax
c000c30e:	0f 8f a0 01 00 00    	jg     c000c4b4 <tcp_receive+0xa04>
c000c314:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c318:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c31b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c320:	29 c2                	sub    edx,eax
c000c322:	89 d0                	mov    eax,edx
c000c324:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c328:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c32d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c331:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c336:	85 c0                	test   eax,eax
c000c338:	75 16                	jne    c000c350 <tcp_receive+0x8a0>
c000c33a:	83 ec 08             	sub    esp,0x8
c000c33d:	68 51 05 03 c0       	push   0xc0030551
c000c342:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c347:	e8 84 37 01 00       	call   c001fad0 <CPrintf>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	90                   	nop
c000c350:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c358:	7e 16                	jle    c000c370 <tcp_receive+0x8c0>
c000c35a:	83 ec 08             	sub    esp,0x8
c000c35d:	68 61 05 03 c0       	push   0xc0030561
c000c362:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c367:	e8 64 37 01 00       	call   c001fad0 <CPrintf>
c000c36c:	83 c4 10             	add    esp,0x10
c000c36f:	90                   	nop
c000c370:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c375:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c379:	0f b7 c0             	movzx  eax,ax
c000c37c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c380:	0f 8e b6 00 00 00    	jle    c000c43c <tcp_receive+0x98c>
c000c386:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c38b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c38e:	0f b7 c0             	movzx  eax,ax
c000c391:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c395:	7e 15                	jle    c000c3ac <tcp_receive+0x8fc>
c000c397:	83 ec 08             	sub    esp,0x8
c000c39a:	68 70 05 03 c0       	push   0xc0030570
c000c39f:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c3a4:	e8 27 37 01 00       	call   c001fad0 <CPrintf>
c000c3a9:	83 c4 10             	add    esp,0x10
c000c3ac:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c3b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c3b8:	29 d0                	sub    eax,edx
c000c3ba:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c3bf:	eb 33                	jmp    c000c3f4 <tcp_receive+0x944>
c000c3c1:	8d 76 00             	lea    esi,[esi+0x0]
c000c3c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3c8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3cc:	0f b7 c0             	movzx  eax,ax
c000c3cf:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c3d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3db:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000c3df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3e3:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c3e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3ed:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3f3:	90                   	nop
c000c3f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3f8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3fc:	0f b7 c0             	movzx  eax,ax
c000c3ff:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c403:	7f bf                	jg     c000c3c4 <tcp_receive+0x914>
c000c405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c409:	f7 d8                	neg    eax
c000c40b:	98                   	cwde   
c000c40c:	83 ec 08             	sub    esp,0x8
c000c40f:	50                   	push   eax
c000c410:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c414:	e8 1b bd ff ff       	call   c0008134 <pbuf_header>
c000c419:	83 c4 10             	add    esp,0x10
c000c41c:	0f b6 c0             	movzx  eax,al
c000c41f:	85 c0                	test   eax,eax
c000c421:	74 51                	je     c000c474 <tcp_receive+0x9c4>
c000c423:	83 ec 08             	sub    esp,0x8
c000c426:	68 80 05 03 c0       	push   0xc0030580
c000c42b:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c430:	e8 9b 36 01 00       	call   c001fad0 <CPrintf>
c000c435:	83 c4 10             	add    esp,0x10
c000c438:	eb 3a                	jmp    c000c474 <tcp_receive+0x9c4>
c000c43a:	66 90                	xchg   ax,ax
c000c43c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c440:	f7 d8                	neg    eax
c000c442:	0f bf d0             	movsx  edx,ax
c000c445:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c44a:	83 ec 08             	sub    esp,0x8
c000c44d:	52                   	push   edx
c000c44e:	50                   	push   eax
c000c44f:	e8 e0 bc ff ff       	call   c0008134 <pbuf_header>
c000c454:	83 c4 10             	add    esp,0x10
c000c457:	0f b6 c0             	movzx  eax,al
c000c45a:	85 c0                	test   eax,eax
c000c45c:	74 16                	je     c000c474 <tcp_receive+0x9c4>
c000c45e:	83 ec 08             	sub    esp,0x8
c000c461:	68 80 05 03 c0       	push   0xc0030580
c000c466:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c46b:	e8 60 36 01 00       	call   c001fad0 <CPrintf>
c000c470:	83 c4 10             	add    esp,0x10
c000c473:	90                   	nop
c000c474:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000c47a:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c47f:	89 c1                	mov    ecx,eax
c000c481:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c485:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c488:	89 ce                	mov    esi,ecx
c000c48a:	29 c6                	sub    esi,eax
c000c48c:	89 f0                	mov    eax,esi
c000c48e:	01 d0                	add    eax,edx
c000c490:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c496:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c49a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c49d:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c4a2:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c4a7:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c4b0:	eb 2a                	jmp    c000c4dc <tcp_receive+0xa2c>
c000c4b2:	66 90                	xchg   ax,ax
c000c4b4:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4c1:	29 c2                	sub    edx,eax
c000c4c3:	89 d0                	mov    eax,edx
c000c4c5:	79 15                	jns    c000c4dc <tcp_receive+0xa2c>
c000c4c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4cb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c4ce:	83 c8 02             	or     eax,0x2
c000c4d1:	88 c2                	mov    dl,al
c000c4d3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4d7:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c4da:	66 90                	xchg   ax,ax
c000c4dc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4e6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c4e9:	29 c2                	sub    edx,eax
c000c4eb:	89 d0                	mov    eax,edx
c000c4ed:	0f 88 11 0c 00 00    	js     c000d104 <tcp_receive+0x1654>
c000c4f3:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c4f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4fd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c500:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c504:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c507:	0f b7 c0             	movzx  eax,ax
c000c50a:	01 c8                	add    eax,ecx
c000c50c:	29 c2                	sub    edx,eax
c000c50e:	89 d0                	mov    eax,edx
c000c510:	83 c0 01             	add    eax,0x1
c000c513:	85 c0                	test   eax,eax
c000c515:	0f 8f e9 0b 00 00    	jg     c000d104 <tcp_receive+0x1654>
c000c51b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c51f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c522:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c527:	39 c2                	cmp    edx,eax
c000c529:	0f 85 25 07 00 00    	jne    c000cc54 <tcp_receive+0x11a4>
c000c52f:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c535:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c53a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c53e:	0f b7 c0             	movzx  eax,ax
c000c541:	83 ec 0c             	sub    esp,0xc
c000c544:	50                   	push   eax
c000c545:	e8 d2 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	0f b7 c0             	movzx  eax,ax
c000c550:	83 e0 03             	and    eax,0x3
c000c553:	0f 95 c0             	setne  al
c000c556:	0f b6 c0             	movzx  eax,al
c000c559:	01 d8                	add    eax,ebx
c000c55b:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c561:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c565:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c568:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c56e:	0f b7 d2             	movzx  edx,dx
c000c571:	0f b7 c0             	movzx  eax,ax
c000c574:	39 c2                	cmp    edx,eax
c000c576:	0f 83 30 01 00 00    	jae    c000c6ac <tcp_receive+0xbfc>
c000c57c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c581:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c585:	0f b7 c0             	movzx  eax,ax
c000c588:	83 ec 0c             	sub    esp,0xc
c000c58b:	50                   	push   eax
c000c58c:	e8 8b 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c591:	83 c4 10             	add    esp,0x10
c000c594:	0f b7 c0             	movzx  eax,ax
c000c597:	83 e0 01             	and    eax,0x1
c000c59a:	74 48                	je     c000c5e4 <tcp_receive+0xb34>
c000c59c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5a1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5a5:	80 e4 c0             	and    ah,0xc0
c000c5a8:	89 c3                	mov    ebx,eax
c000c5aa:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5af:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5b3:	0f b7 c0             	movzx  eax,ax
c000c5b6:	83 ec 0c             	sub    esp,0xc
c000c5b9:	50                   	push   eax
c000c5ba:	e8 5d 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5bf:	83 c4 10             	add    esp,0x10
c000c5c2:	0f b7 c0             	movzx  eax,ax
c000c5c5:	83 e0 3e             	and    eax,0x3e
c000c5c8:	83 ec 0c             	sub    esp,0xc
c000c5cb:	50                   	push   eax
c000c5cc:	e8 4b 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c5d1:	83 c4 10             	add    esp,0x10
c000c5d4:	09 d8                	or     eax,ebx
c000c5d6:	89 c2                	mov    edx,eax
c000c5d8:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5dd:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c5e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c5e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c5e8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c5eb:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c5f1:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5f6:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5fa:	0f b7 c0             	movzx  eax,ax
c000c5fd:	83 ec 0c             	sub    esp,0xc
c000c600:	50                   	push   eax
c000c601:	e8 16 46 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c606:	83 c4 10             	add    esp,0x10
c000c609:	0f b7 c0             	movzx  eax,ax
c000c60c:	83 e0 02             	and    eax,0x2
c000c60f:	74 0f                	je     c000c620 <tcp_receive+0xb70>
c000c611:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c616:	83 e8 01             	sub    eax,0x1
c000c619:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c61f:	90                   	nop
c000c620:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c625:	0f b7 d0             	movzx  edx,ax
c000c628:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c62d:	83 ec 08             	sub    esp,0x8
c000c630:	52                   	push   edx
c000c631:	50                   	push   eax
c000c632:	e8 71 c2 ff ff       	call   c00088a8 <pbuf_realloc>
c000c637:	83 c4 10             	add    esp,0x10
c000c63a:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c640:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c645:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c649:	0f b7 c0             	movzx  eax,ax
c000c64c:	83 ec 0c             	sub    esp,0xc
c000c64f:	50                   	push   eax
c000c650:	e8 c7 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c655:	83 c4 10             	add    esp,0x10
c000c658:	0f b7 c0             	movzx  eax,ax
c000c65b:	83 e0 03             	and    eax,0x3
c000c65e:	0f 95 c0             	setne  al
c000c661:	0f b6 c0             	movzx  eax,al
c000c664:	01 d8                	add    eax,ebx
c000c666:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c66c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c672:	0f b7 d0             	movzx  edx,ax
c000c675:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c67a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c67d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c681:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c684:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c688:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c68b:	0f b7 c0             	movzx  eax,ax
c000c68e:	01 d0                	add    eax,edx
c000c690:	39 c1                	cmp    ecx,eax
c000c692:	74 18                	je     c000c6ac <tcp_receive+0xbfc>
c000c694:	83 ec 08             	sub    esp,0x8
c000c697:	68 74 03 03 c0       	push   0xc0030374
c000c69c:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c6a1:	e8 2a 34 01 00       	call   c001fad0 <CPrintf>
c000c6a6:	83 c4 10             	add    esp,0x10
c000c6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c6ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6b6:	85 c0                	test   eax,eax
c000c6b8:	0f 84 7e 02 00 00    	je     c000c93c <tcp_receive+0xe8c>
c000c6be:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c6c3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6c7:	0f b7 c0             	movzx  eax,ax
c000c6ca:	83 ec 0c             	sub    esp,0xc
c000c6cd:	50                   	push   eax
c000c6ce:	e8 49 45 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c6d3:	83 c4 10             	add    esp,0x10
c000c6d6:	0f b7 c0             	movzx  eax,ax
c000c6d9:	83 e0 01             	and    eax,0x1
c000c6dc:	74 4a                	je     c000c728 <tcp_receive+0xc78>
c000c6de:	eb 34                	jmp    c000c714 <tcp_receive+0xc64>
c000c6e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6e4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c6ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6f2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6f8:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6fe:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c704:	83 ec 0c             	sub    esp,0xc
c000c707:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c70b:	e8 50 d8 ff ff       	call   c0009f60 <tcp_seg_free>
c000c710:	83 c4 10             	add    esp,0x10
c000c713:	90                   	nop
c000c714:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c718:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c71e:	85 c0                	test   eax,eax
c000c720:	75 be                	jne    c000c6e0 <tcp_receive+0xc30>
c000c722:	e9 15 02 00 00       	jmp    c000c93c <tcp_receive+0xe8c>
c000c727:	90                   	nop
c000c728:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c72c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c732:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c736:	e9 bd 00 00 00       	jmp    c000c7f8 <tcp_receive+0xd48>
c000c73b:	90                   	nop
c000c73c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c740:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c743:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c747:	0f b7 c0             	movzx  eax,ax
c000c74a:	83 ec 0c             	sub    esp,0xc
c000c74d:	50                   	push   eax
c000c74e:	e8 c9 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c753:	83 c4 10             	add    esp,0x10
c000c756:	0f b7 c0             	movzx  eax,ax
c000c759:	83 e0 01             	and    eax,0x1
c000c75c:	74 76                	je     c000c7d4 <tcp_receive+0xd24>
c000c75e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c763:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c767:	0f b7 c0             	movzx  eax,ax
c000c76a:	83 ec 0c             	sub    esp,0xc
c000c76d:	50                   	push   eax
c000c76e:	e8 a9 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c773:	83 c4 10             	add    esp,0x10
c000c776:	0f b7 c0             	movzx  eax,ax
c000c779:	83 e0 02             	and    eax,0x2
c000c77c:	75 56                	jne    c000c7d4 <tcp_receive+0xd24>
c000c77e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c783:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c787:	83 ec 0c             	sub    esp,0xc
c000c78a:	6a 01                	push   0x1
c000c78c:	e8 8b 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c791:	83 c4 10             	add    esp,0x10
c000c794:	89 c2                	mov    edx,eax
c000c796:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c79b:	09 da                	or     edx,ebx
c000c79d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000c7a1:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c7a7:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c7ac:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c7b0:	0f b7 c0             	movzx  eax,ax
c000c7b3:	83 ec 0c             	sub    esp,0xc
c000c7b6:	50                   	push   eax
c000c7b7:	e8 60 44 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	0f b7 c0             	movzx  eax,ax
c000c7c2:	83 e0 03             	and    eax,0x3
c000c7c5:	0f 95 c0             	setne  al
c000c7c8:	0f b6 c0             	movzx  eax,al
c000c7cb:	01 d8                	add    eax,ebx
c000c7cd:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c7d3:	90                   	nop
c000c7d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c7e2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7e6:	83 ec 0c             	sub    esp,0xc
c000c7e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ed:	e8 6e d7 ff ff       	call   c0009f60 <tcp_seg_free>
c000c7f2:	83 c4 10             	add    esp,0x10
c000c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7f8:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7fd:	74 31                	je     c000c830 <tcp_receive+0xd80>
c000c7ff:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c805:	0f b7 d0             	movzx  edx,ax
c000c808:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c80d:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c810:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c814:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c817:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c81a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c81e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c821:	0f b7 c0             	movzx  eax,ax
c000c824:	01 d0                	add    eax,edx
c000c826:	29 c1                	sub    ecx,eax
c000c828:	89 c8                	mov    eax,ecx
c000c82a:	0f 89 0c ff ff ff    	jns    c000c73c <tcp_receive+0xc8c>
c000c830:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c835:	0f 84 f1 00 00 00    	je     c000c92c <tcp_receive+0xe7c>
c000c83b:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c841:	0f b7 d0             	movzx  edx,ax
c000c844:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c849:	01 c2                	add    edx,eax
c000c84b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c84f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c852:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c855:	29 c2                	sub    edx,eax
c000c857:	89 d0                	mov    eax,edx
c000c859:	85 c0                	test   eax,eax
c000c85b:	0f 8e cb 00 00 00    	jle    c000c92c <tcp_receive+0xe7c>
c000c861:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c865:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c868:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c86b:	89 c2                	mov    edx,eax
c000c86d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c872:	89 d7                	mov    edi,edx
c000c874:	29 c7                	sub    edi,eax
c000c876:	89 f8                	mov    eax,edi
c000c878:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c87e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c883:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c887:	0f b7 c0             	movzx  eax,ax
c000c88a:	83 ec 0c             	sub    esp,0xc
c000c88d:	50                   	push   eax
c000c88e:	e8 89 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c893:	83 c4 10             	add    esp,0x10
c000c896:	0f b7 c0             	movzx  eax,ax
c000c899:	83 e0 02             	and    eax,0x2
c000c89c:	74 0e                	je     c000c8ac <tcp_receive+0xdfc>
c000c89e:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c8a3:	83 e8 01             	sub    eax,0x1
c000c8a6:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c8ac:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c8b1:	0f b7 d0             	movzx  edx,ax
c000c8b4:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c8b9:	83 ec 08             	sub    esp,0x8
c000c8bc:	52                   	push   edx
c000c8bd:	50                   	push   eax
c000c8be:	e8 e5 bf ff ff       	call   c00088a8 <pbuf_realloc>
c000c8c3:	83 c4 10             	add    esp,0x10
c000c8c6:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c8cc:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c8d1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c8d5:	0f b7 c0             	movzx  eax,ax
c000c8d8:	83 ec 0c             	sub    esp,0xc
c000c8db:	50                   	push   eax
c000c8dc:	e8 3b 43 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c8e1:	83 c4 10             	add    esp,0x10
c000c8e4:	0f b7 c0             	movzx  eax,ax
c000c8e7:	83 e0 03             	and    eax,0x3
c000c8ea:	0f 95 c0             	setne  al
c000c8ed:	0f b6 c0             	movzx  eax,al
c000c8f0:	01 d8                	add    eax,ebx
c000c8f2:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c8f8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8fe:	0f b7 d0             	movzx  edx,ax
c000c901:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c906:	01 c2                	add    edx,eax
c000c908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c90c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c90f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c912:	39 c2                	cmp    edx,eax
c000c914:	74 16                	je     c000c92c <tcp_receive+0xe7c>
c000c916:	83 ec 08             	sub    esp,0x8
c000c919:	68 ac 03 03 c0       	push   0xc00303ac
c000c91e:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c923:	e8 a8 31 01 00       	call   c001fad0 <CPrintf>
c000c928:	83 c4 10             	add    esp,0x10
c000c92b:	90                   	nop
c000c92c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c930:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c934:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c93a:	66 90                	xchg   ax,ax
c000c93c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c942:	0f b7 d0             	movzx  edx,ax
c000c945:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c94a:	01 c2                	add    edx,eax
c000c94c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c953:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c957:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c95a:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c960:	0f b7 d2             	movzx  edx,dx
c000c963:	0f b7 c0             	movzx  eax,ax
c000c966:	39 c2                	cmp    edx,eax
c000c968:	73 16                	jae    c000c980 <tcp_receive+0xed0>
c000c96a:	83 ec 08             	sub    esp,0x8
c000c96d:	68 e8 03 03 c0       	push   0xc00303e8
c000c972:	68 e6 f9 02 c0       	push   0xc002f9e6
c000c977:	e8 54 31 01 00       	call   c001fad0 <CPrintf>
c000c97c:	83 c4 10             	add    esp,0x10
c000c97f:	90                   	nop
c000c980:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c984:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c987:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c98d:	89 d6                	mov    esi,edx
c000c98f:	29 c6                	sub    esi,eax
c000c991:	89 f0                	mov    eax,esi
c000c993:	89 c2                	mov    edx,eax
c000c995:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c999:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000c99d:	83 ec 0c             	sub    esp,0xc
c000c9a0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c9a4:	e8 5b d2 ff ff       	call   c0009c04 <tcp_update_rcv_ann_wnd>
c000c9a9:	83 c4 10             	add    esp,0x10
c000c9ac:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c9b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c9b4:	0f b7 c0             	movzx  eax,ax
c000c9b7:	85 c0                	test   eax,eax
c000c9b9:	74 15                	je     c000c9d0 <tcp_receive+0xf20>
c000c9bb:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c9c0:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000c9c5:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000c9cf:	90                   	nop
c000c9d0:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c9d5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9d9:	0f b7 c0             	movzx  eax,ax
c000c9dc:	83 ec 0c             	sub    esp,0xc
c000c9df:	50                   	push   eax
c000c9e0:	e8 37 42 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000c9e5:	83 c4 10             	add    esp,0x10
c000c9e8:	0f b7 c0             	movzx  eax,ax
c000c9eb:	83 e0 01             	and    eax,0x1
c000c9ee:	0f 84 dc 01 00 00    	je     c000cbd0 <tcp_receive+0x1120>
c000c9f4:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000c9f9:	83 c8 20             	or     eax,0x20
c000c9fc:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000ca01:	e9 ca 01 00 00       	jmp    c000cbd0 <tcp_receive+0x1120>
c000ca06:	66 90                	xchg   ax,ax
c000ca08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca1a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000ca20:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ca26:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000ca2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca32:	0f b7 d8             	movzx  ebx,ax
c000ca35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca39:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca3c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca40:	0f b7 c0             	movzx  eax,ax
c000ca43:	83 ec 0c             	sub    esp,0xc
c000ca46:	50                   	push   eax
c000ca47:	e8 d0 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	0f b7 c0             	movzx  eax,ax
c000ca52:	83 e0 03             	and    eax,0x3
c000ca55:	0f 95 c0             	setne  al
c000ca58:	0f b6 c0             	movzx  eax,al
c000ca5b:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca5e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca62:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca65:	01 c2                	add    edx,eax
c000ca67:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca6b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca72:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca75:	0f b7 d8             	movzx  ebx,ax
c000ca78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca7f:	0f b7 f0             	movzx  esi,ax
c000ca82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca89:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca8d:	0f b7 c0             	movzx  eax,ax
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	50                   	push   eax
c000ca94:	e8 83 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ca99:	83 c4 10             	add    esp,0x10
c000ca9c:	0f b7 c0             	movzx  eax,ax
c000ca9f:	83 e0 03             	and    eax,0x3
c000caa2:	0f 95 c0             	setne  al
c000caa5:	0f b6 c0             	movzx  eax,al
c000caa8:	01 f0                	add    eax,esi
c000caaa:	39 c3                	cmp    ebx,eax
c000caac:	7d 16                	jge    c000cac4 <tcp_receive+0x1014>
c000caae:	83 ec 08             	sub    esp,0x8
c000cab1:	68 08 04 03 c0       	push   0xc0030408
c000cab6:	68 e6 f9 02 c0       	push   0xc002f9e6
c000cabb:	e8 10 30 01 00       	call   c001fad0 <CPrintf>
c000cac0:	83 c4 10             	add    esp,0x10
c000cac3:	90                   	nop
c000cac4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cac8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cacb:	0f b7 d8             	movzx  ebx,ax
c000cace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cad5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cad9:	0f b7 c0             	movzx  eax,ax
c000cadc:	83 ec 0c             	sub    esp,0xc
c000cadf:	50                   	push   eax
c000cae0:	e8 37 41 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	0f b7 c0             	movzx  eax,ax
c000caeb:	83 e0 03             	and    eax,0x3
c000caee:	0f 95 c0             	setne  al
c000caf1:	0f b6 c0             	movzx  eax,al
c000caf4:	8d 14 03             	lea    edx,[ebx+eax*1]
c000caf7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cafb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cafe:	29 d0                	sub    eax,edx
c000cb00:	89 c2                	mov    edx,eax
c000cb02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb06:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000cb0a:	83 ec 0c             	sub    esp,0xc
c000cb0d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cb11:	e8 ee d0 ff ff       	call   c0009c04 <tcp_update_rcv_ann_wnd>
c000cb16:	83 c4 10             	add    esp,0x10
c000cb19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb20:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cb23:	0f b7 c0             	movzx  eax,ax
c000cb26:	85 c0                	test   eax,eax
c000cb28:	74 3e                	je     c000cb68 <tcp_receive+0x10b8>
c000cb2a:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb2f:	85 c0                	test   eax,eax
c000cb31:	74 1d                	je     c000cb50 <tcp_receive+0x10a0>
c000cb33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb37:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb3a:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cb3f:	83 ec 08             	sub    esp,0x8
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 cf bf ff ff       	call   c0008b18 <pbuf_cat>
c000cb49:	83 c4 10             	add    esp,0x10
c000cb4c:	eb 0e                	jmp    c000cb5c <tcp_receive+0x10ac>
c000cb4e:	66 90                	xchg   ax,ax
c000cb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cb57:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000cb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb60:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb67:	90                   	nop
c000cb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb6f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb73:	0f b7 c0             	movzx  eax,ax
c000cb76:	83 ec 0c             	sub    esp,0xc
c000cb79:	50                   	push   eax
c000cb7a:	e8 9d 40 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cb7f:	83 c4 10             	add    esp,0x10
c000cb82:	0f b7 c0             	movzx  eax,ax
c000cb85:	83 e0 01             	and    eax,0x1
c000cb88:	74 26                	je     c000cbb0 <tcp_receive+0x1100>
c000cb8a:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cb8f:	83 c8 20             	or     eax,0x20
c000cb92:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cb97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb9b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cb9e:	83 f8 04             	cmp    eax,0x4
c000cba1:	75 0d                	jne    c000cbb0 <tcp_receive+0x1100>
c000cba3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cba7:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cbae:	66 90                	xchg   ax,ax
c000cbb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbb4:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbba:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cbc0:	83 ec 0c             	sub    esp,0xc
c000cbc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbc7:	e8 94 d3 ff ff       	call   c0009f60 <tcp_seg_free>
c000cbcc:	83 c4 10             	add    esp,0x10
c000cbcf:	90                   	nop
c000cbd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbd4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cbda:	85 c0                	test   eax,eax
c000cbdc:	74 22                	je     c000cc00 <tcp_receive+0x1150>
c000cbde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbe2:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cbe8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cbeb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cbee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbf2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cbf5:	39 c2                	cmp    edx,eax
c000cbf7:	0f 84 0b fe ff ff    	je     c000ca08 <tcp_receive+0xf58>
c000cbfd:	8d 76 00             	lea    esi,[esi+0x0]
c000cc00:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc04:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc07:	0f b6 c0             	movzx  eax,al
c000cc0a:	83 e0 01             	and    eax,0x1
c000cc0d:	74 2d                	je     c000cc3c <tcp_receive+0x118c>
c000cc0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc13:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc16:	83 e0 fe             	and    eax,0xfffffffe
c000cc19:	88 c2                	mov    dl,al
c000cc1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc1f:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc22:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc26:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc29:	83 c8 02             	or     eax,0x2
c000cc2c:	88 c2                	mov    dl,al
c000cc2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc32:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc35:	e9 2e 05 00 00       	jmp    c000d168 <tcp_receive+0x16b8>
c000cc3a:	66 90                	xchg   ax,ax
c000cc3c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc40:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cc43:	83 c8 01             	or     eax,0x1
c000cc46:	88 c2                	mov    dl,al
c000cc48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc4c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cc4f:	e9 14 05 00 00       	jmp    c000d168 <tcp_receive+0x16b8>
c000cc54:	83 ec 0c             	sub    esp,0xc
c000cc57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc5b:	e8 00 2f 00 00       	call   c000fb60 <tcp_send_empty_ack>
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc67:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc6d:	85 c0                	test   eax,eax
c000cc6f:	75 23                	jne    c000cc94 <tcp_receive+0x11e4>
c000cc71:	83 ec 0c             	sub    esp,0xc
c000cc74:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc79:	e8 7a d3 ff ff       	call   c0009ff8 <tcp_seg_copy>
c000cc7e:	83 c4 10             	add    esp,0x10
c000cc81:	89 c2                	mov    edx,eax
c000cc83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc87:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc8d:	e9 d6 04 00 00       	jmp    c000d168 <tcp_receive+0x16b8>
c000cc92:	66 90                	xchg   ax,ax
c000cc94:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cc9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cca0:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cca6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ccaa:	e9 2d 04 00 00       	jmp    c000d0dc <tcp_receive+0x162c>
c000ccaf:	90                   	nop
c000ccb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ccb4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ccb7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ccba:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ccbf:	39 c2                	cmp    edx,eax
c000ccc1:	75 75                	jne    c000cd38 <tcp_receive+0x1288>
c000ccc3:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000ccc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cccd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ccd0:	0f b7 d2             	movzx  edx,dx
c000ccd3:	0f b7 c0             	movzx  eax,ax
c000ccd6:	39 c2                	cmp    edx,eax
c000ccd8:	0f 86 0e 04 00 00    	jbe    c000d0ec <tcp_receive+0x163c>
c000ccde:	83 ec 0c             	sub    esp,0xc
c000cce1:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cce6:	e8 0d d3 ff ff       	call   c0009ff8 <tcp_seg_copy>
c000cceb:	83 c4 10             	add    esp,0x10
c000ccee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccf2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ccf7:	0f 84 f3 03 00 00    	je     c000d0f0 <tcp_receive+0x1640>
c000ccfd:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd02:	74 0c                	je     c000cd10 <tcp_receive+0x1260>
c000cd04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd0c:	89 10                	mov    DWORD PTR [eax],edx
c000cd0e:	eb 10                	jmp    c000cd20 <tcp_receive+0x1270>
c000cd10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd18:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd1e:	66 90                	xchg   ax,ax
c000cd20:	83 ec 08             	sub    esp,0x8
c000cd23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 10 ec ff ff       	call   c000b940 <tcp_oos_insert_segment>
c000cd30:	83 c4 10             	add    esp,0x10
c000cd33:	e9 b8 03 00 00       	jmp    c000d0f0 <tcp_receive+0x1640>
c000cd38:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cd3d:	75 61                	jne    c000cda0 <tcp_receive+0x12f0>
c000cd3f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd49:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd4f:	29 c2                	sub    edx,eax
c000cd51:	89 d0                	mov    eax,edx
c000cd53:	0f 89 2b 01 00 00    	jns    c000ce84 <tcp_receive+0x13d4>
c000cd59:	83 ec 0c             	sub    esp,0xc
c000cd5c:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd61:	e8 92 d2 ff ff       	call   c0009ff8 <tcp_seg_copy>
c000cd66:	83 c4 10             	add    esp,0x10
c000cd69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd6d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd72:	0f 84 7c 03 00 00    	je     c000d0f4 <tcp_receive+0x1644>
c000cd78:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd80:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd86:	83 ec 08             	sub    esp,0x8
c000cd89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd91:	e8 aa eb ff ff       	call   c000b940 <tcp_oos_insert_segment>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	e9 56 03 00 00       	jmp    c000d0f4 <tcp_receive+0x1644>
c000cd9e:	66 90                	xchg   ax,ax
c000cda0:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cda6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdb0:	29 c2                	sub    edx,eax
c000cdb2:	89 d0                	mov    eax,edx
c000cdb4:	83 e8 01             	sub    eax,0x1
c000cdb7:	0f 88 c7 00 00 00    	js     c000ce84 <tcp_receive+0x13d4>
c000cdbd:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cdc3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cdc7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdcd:	29 c2                	sub    edx,eax
c000cdcf:	89 d0                	mov    eax,edx
c000cdd1:	83 c0 01             	add    eax,0x1
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	0f 8f a8 00 00 00    	jg     c000ce84 <tcp_receive+0x13d4>
c000cddc:	83 ec 0c             	sub    esp,0xc
c000cddf:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cde4:	e8 0f d2 ff ff       	call   c0009ff8 <tcp_seg_copy>
c000cde9:	83 c4 10             	add    esp,0x10
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cdf5:	0f 84 fd 02 00 00    	je     c000d0f8 <tcp_receive+0x1648>
c000cdfb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce02:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce05:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce0c:	0f b7 c0             	movzx  eax,ax
c000ce0f:	01 c2                	add    edx,eax
c000ce11:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce16:	29 c2                	sub    edx,eax
c000ce18:	89 d0                	mov    eax,edx
c000ce1a:	85 c0                	test   eax,eax
c000ce1c:	7e 42                	jle    c000ce60 <tcp_receive+0x13b0>
c000ce1e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ce23:	89 c2                	mov    edx,eax
c000ce25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce29:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce2f:	89 d7                	mov    edi,edx
c000ce31:	29 c7                	sub    edi,eax
c000ce33:	89 f8                	mov    eax,edi
c000ce35:	89 c2                	mov    edx,eax
c000ce37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce3b:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ce3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce43:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ce46:	0f b7 d0             	movzx  edx,ax
c000ce49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce50:	83 ec 08             	sub    esp,0x8
c000ce53:	52                   	push   edx
c000ce54:	50                   	push   eax
c000ce55:	e8 4e ba ff ff       	call   c00088a8 <pbuf_realloc>
c000ce5a:	83 c4 10             	add    esp,0x10
c000ce5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ce60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ce64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce68:	89 10                	mov    DWORD PTR [eax],edx
c000ce6a:	83 ec 08             	sub    esp,0x8
c000ce6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce75:	e8 c6 ea ff ff       	call   c000b940 <tcp_oos_insert_segment>
c000ce7a:	83 c4 10             	add    esp,0x10
c000ce7d:	e9 76 02 00 00       	jmp    c000d0f8 <tcp_receive+0x1648>
c000ce82:	66 90                	xchg   ax,ax
c000ce84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce8a:	85 c0                	test   eax,eax
c000ce8c:	0f 85 36 02 00 00    	jne    c000d0c8 <tcp_receive+0x1618>
c000ce92:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce98:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce9c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cea2:	29 c2                	sub    edx,eax
c000cea4:	89 d0                	mov    eax,edx
c000cea6:	85 c0                	test   eax,eax
c000cea8:	0f 8e 1a 02 00 00    	jle    c000d0c8 <tcp_receive+0x1618>
c000ceae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ceb5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ceb9:	0f b7 c0             	movzx  eax,ax
c000cebc:	83 ec 0c             	sub    esp,0xc
c000cebf:	50                   	push   eax
c000cec0:	e8 57 3d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cec5:	83 c4 10             	add    esp,0x10
c000cec8:	0f b7 c0             	movzx  eax,ax
c000cecb:	83 e0 01             	and    eax,0x1
c000cece:	0f 85 28 02 00 00    	jne    c000d0fc <tcp_receive+0x164c>
c000ced4:	83 ec 0c             	sub    esp,0xc
c000ced7:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cedc:	e8 17 d1 ff ff       	call   c0009ff8 <tcp_seg_copy>
c000cee1:	83 c4 10             	add    esp,0x10
c000cee4:	89 c2                	mov    edx,eax
c000cee6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ceea:	89 10                	mov    DWORD PTR [eax],edx
c000ceec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cef0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cef2:	85 c0                	test   eax,eax
c000cef4:	0f 84 06 02 00 00    	je     c000d100 <tcp_receive+0x1650>
c000cefa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cefe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf01:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cf04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf0b:	0f b7 c0             	movzx  eax,ax
c000cf0e:	01 c2                	add    edx,eax
c000cf10:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf15:	29 c2                	sub    edx,eax
c000cf17:	89 d0                	mov    eax,edx
c000cf19:	85 c0                	test   eax,eax
c000cf1b:	7e 3f                	jle    c000cf5c <tcp_receive+0x14ac>
c000cf1d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf22:	89 c2                	mov    edx,eax
c000cf24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf28:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf2e:	89 d6                	mov    esi,edx
c000cf30:	29 c6                	sub    esi,eax
c000cf32:	89 f0                	mov    eax,esi
c000cf34:	89 c2                	mov    edx,eax
c000cf36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf3a:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000cf3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf42:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cf45:	0f b7 d0             	movzx  edx,ax
c000cf48:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cf4f:	83 ec 08             	sub    esp,0x8
c000cf52:	52                   	push   edx
c000cf53:	50                   	push   eax
c000cf54:	e8 4f b9 ff ff       	call   c00088a8 <pbuf_realloc>
c000cf59:	83 c4 10             	add    esp,0x10
c000cf5c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cf62:	0f b7 d0             	movzx  edx,ax
c000cf65:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf6a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cf6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf71:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cf74:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf78:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cf7b:	0f b7 c0             	movzx  eax,ax
c000cf7e:	01 d0                	add    eax,edx
c000cf80:	39 c1                	cmp    ecx,eax
c000cf82:	0f 86 78 01 00 00    	jbe    c000d100 <tcp_receive+0x1650>
c000cf88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf8e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf91:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf95:	0f b7 c0             	movzx  eax,ax
c000cf98:	83 ec 0c             	sub    esp,0xc
c000cf9b:	50                   	push   eax
c000cf9c:	e8 7b 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cfa1:	83 c4 10             	add    esp,0x10
c000cfa4:	0f b7 c0             	movzx  eax,ax
c000cfa7:	83 e0 01             	and    eax,0x1
c000cfaa:	74 54                	je     c000d000 <tcp_receive+0x1550>
c000cfac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfb2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfb5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfb9:	80 e4 c0             	and    ah,0xc0
c000cfbc:	89 c3                	mov    ebx,eax
c000cfbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfc2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfc4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cfc7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cfcb:	0f b7 c0             	movzx  eax,ax
c000cfce:	83 ec 0c             	sub    esp,0xc
c000cfd1:	50                   	push   eax
c000cfd2:	e8 45 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cfd7:	83 c4 10             	add    esp,0x10
c000cfda:	0f b7 c0             	movzx  eax,ax
c000cfdd:	83 e0 3e             	and    eax,0x3e
c000cfe0:	83 ec 0c             	sub    esp,0xc
c000cfe3:	50                   	push   eax
c000cfe4:	e8 33 3c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000cfe9:	83 c4 10             	add    esp,0x10
c000cfec:	09 d8                	or     eax,ebx
c000cfee:	89 c2                	mov    edx,eax
c000cff0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cff4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff9:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000cffd:	8d 76 00             	lea    esi,[esi+0x0]
c000d000:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d004:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d007:	89 c2                	mov    edx,eax
c000d009:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d00d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d010:	01 d0                	add    eax,edx
c000d012:	89 c1                	mov    ecx,eax
c000d014:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d019:	89 c2                	mov    edx,eax
c000d01b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d01f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d021:	89 cf                	mov    edi,ecx
c000d023:	29 d7                	sub    edi,edx
c000d025:	89 fa                	mov    edx,edi
c000d027:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000d02b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d02f:	8b 00                	mov    eax,DWORD PTR [eax]
c000d031:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d034:	0f b7 d0             	movzx  edx,ax
c000d037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d03b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d03d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d040:	83 ec 08             	sub    esp,0x8
c000d043:	52                   	push   edx
c000d044:	50                   	push   eax
c000d045:	e8 5e b8 ff ff       	call   c00088a8 <pbuf_realloc>
c000d04a:	83 c4 10             	add    esp,0x10
c000d04d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d051:	8b 00                	mov    eax,DWORD PTR [eax]
c000d053:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000d056:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d05a:	8b 00                	mov    eax,DWORD PTR [eax]
c000d05c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d05f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d063:	0f b7 c0             	movzx  eax,ax
c000d066:	83 ec 0c             	sub    esp,0xc
c000d069:	50                   	push   eax
c000d06a:	e8 ad 3b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d06f:	83 c4 10             	add    esp,0x10
c000d072:	0f b7 c0             	movzx  eax,ax
c000d075:	83 e0 03             	and    eax,0x3
c000d078:	0f 95 c0             	setne  al
c000d07b:	0f b6 c0             	movzx  eax,al
c000d07e:	01 d8                	add    eax,ebx
c000d080:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d086:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d08c:	0f b7 d0             	movzx  edx,ax
c000d08f:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d094:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d097:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d09b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d09e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0a2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	01 d0                	add    eax,edx
c000d0aa:	39 c1                	cmp    ecx,eax
c000d0ac:	74 52                	je     c000d100 <tcp_receive+0x1650>
c000d0ae:	83 ec 08             	sub    esp,0x8
c000d0b1:	68 74 03 03 c0       	push   0xc0030374
c000d0b6:	68 e6 f9 02 c0       	push   0xc002f9e6
c000d0bb:	e8 10 2a 01 00       	call   c001fad0 <CPrintf>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	eb 3b                	jmp    c000d100 <tcp_receive+0x1650>
c000d0c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d0c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000d0d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0da:	66 90                	xchg   ax,ax
c000d0dc:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d0e1:	0f 85 c9 fb ff ff    	jne    c000ccb0 <tcp_receive+0x1200>
c000d0e7:	eb 7f                	jmp    c000d168 <tcp_receive+0x16b8>
c000d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d0ec:	90                   	nop
c000d0ed:	eb 79                	jmp    c000d168 <tcp_receive+0x16b8>
c000d0ef:	90                   	nop
c000d0f0:	90                   	nop
c000d0f1:	eb 75                	jmp    c000d168 <tcp_receive+0x16b8>
c000d0f3:	90                   	nop
c000d0f4:	90                   	nop
c000d0f5:	eb 71                	jmp    c000d168 <tcp_receive+0x16b8>
c000d0f7:	90                   	nop
c000d0f8:	90                   	nop
c000d0f9:	eb 6d                	jmp    c000d168 <tcp_receive+0x16b8>
c000d0fb:	90                   	nop
c000d0fc:	90                   	nop
c000d0fd:	eb 69                	jmp    c000d168 <tcp_receive+0x16b8>
c000d0ff:	90                   	nop
c000d100:	90                   	nop
c000d101:	eb 65                	jmp    c000d168 <tcp_receive+0x16b8>
c000d103:	90                   	nop
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d10b:	e8 50 2a 00 00       	call   c000fb60 <tcp_send_empty_ack>
c000d110:	83 c4 10             	add    esp,0x10
c000d113:	eb 53                	jmp    c000d168 <tcp_receive+0x16b8>
c000d115:	8d 76 00             	lea    esi,[esi+0x0]
c000d118:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d11e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d122:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d125:	29 c2                	sub    edx,eax
c000d127:	89 d0                	mov    eax,edx
c000d129:	78 25                	js     c000d150 <tcp_receive+0x16a0>
c000d12b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d131:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d135:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d138:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d13c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d13f:	0f b7 c0             	movzx  eax,ax
c000d142:	01 c8                	add    eax,ecx
c000d144:	29 c2                	sub    edx,eax
c000d146:	89 d0                	mov    eax,edx
c000d148:	83 c0 01             	add    eax,0x1
c000d14b:	85 c0                	test   eax,eax
c000d14d:	7e 19                	jle    c000d168 <tcp_receive+0x16b8>
c000d14f:	90                   	nop
c000d150:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d154:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d157:	83 c8 02             	or     eax,0x2
c000d15a:	88 c2                	mov    dl,al
c000d15c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d160:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d163:	eb 03                	jmp    c000d168 <tcp_receive+0x16b8>
c000d165:	8d 76 00             	lea    esi,[esi+0x0]
c000d168:	90                   	nop
c000d169:	83 c4 30             	add    esp,0x30
c000d16c:	5b                   	pop    ebx
c000d16d:	5e                   	pop    esi
c000d16e:	5f                   	pop    edi
c000d16f:	c3                   	ret    

c000d170 <tcp_parseopt>:
c000d170:	83 ec 1c             	sub    esp,0x1c
c000d173:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d178:	83 c0 14             	add    eax,0x14
c000d17b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d17f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d184:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d188:	0f b7 c0             	movzx  eax,ax
c000d18b:	83 ec 0c             	sub    esp,0xc
c000d18e:	50                   	push   eax
c000d18f:	e8 88 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d194:	83 c4 10             	add    esp,0x10
c000d197:	0f b7 c0             	movzx  eax,ax
c000d19a:	c1 e8 0c             	shr    eax,0xc
c000d19d:	0f b7 c0             	movzx  eax,ax
c000d1a0:	83 f8 05             	cmp    eax,0x5
c000d1a3:	0f 86 6f 01 00 00    	jbe    c000d318 <tcp_parseopt+0x1a8>
c000d1a9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d1ae:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d1b2:	0f b7 c0             	movzx  eax,ax
c000d1b5:	83 ec 0c             	sub    esp,0xc
c000d1b8:	50                   	push   eax
c000d1b9:	e8 5e 3a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000d1be:	83 c4 10             	add    esp,0x10
c000d1c1:	0f b7 c0             	movzx  eax,ax
c000d1c4:	c1 e8 0c             	shr    eax,0xc
c000d1c7:	83 e8 05             	sub    eax,0x5
c000d1ca:	c1 e0 02             	shl    eax,0x2
c000d1cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d1d2:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d1d9:	e9 1e 01 00 00       	jmp    c000d2fc <tcp_parseopt+0x18c>
c000d1de:	66 90                	xchg   ax,ax
c000d1e0:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d1e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1e9:	01 d0                	add    eax,edx
c000d1eb:	8a 00                	mov    al,BYTE PTR [eax]
c000d1ed:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d1f1:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d1f6:	83 f8 01             	cmp    eax,0x1
c000d1f9:	74 15                	je     c000d210 <tcp_parseopt+0xa0>
c000d1fb:	83 f8 02             	cmp    eax,0x2
c000d1fe:	74 24                	je     c000d224 <tcp_parseopt+0xb4>
c000d200:	85 c0                	test   eax,eax
c000d202:	0f 85 bc 00 00 00    	jne    c000d2c4 <tcp_parseopt+0x154>
c000d208:	e9 0b 01 00 00       	jmp    c000d318 <tcp_parseopt+0x1a8>
c000d20d:	8d 76 00             	lea    esi,[esi+0x0]
c000d210:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d215:	83 c0 01             	add    eax,0x1
c000d218:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d21d:	e9 da 00 00 00       	jmp    c000d2fc <tcp_parseopt+0x18c>
c000d222:	66 90                	xchg   ax,ax
c000d224:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d229:	8d 50 01             	lea    edx,[eax+0x1]
c000d22c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d230:	01 d0                	add    eax,edx
c000d232:	8a 00                	mov    al,BYTE PTR [eax]
c000d234:	0f b6 c0             	movzx  eax,al
c000d237:	83 f8 04             	cmp    eax,0x4
c000d23a:	0f 85 d0 00 00 00    	jne    c000d310 <tcp_parseopt+0x1a0>
c000d240:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d245:	8d 50 03             	lea    edx,[eax+0x3]
c000d248:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d24d:	39 c2                	cmp    edx,eax
c000d24f:	0f 8d bb 00 00 00    	jge    c000d310 <tcp_parseopt+0x1a0>
c000d255:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d25a:	8d 50 02             	lea    edx,[eax+0x2]
c000d25d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d261:	01 d0                	add    eax,edx
c000d263:	8a 00                	mov    al,BYTE PTR [eax]
c000d265:	0f b6 c0             	movzx  eax,al
c000d268:	c1 e0 08             	shl    eax,0x8
c000d26b:	89 c2                	mov    edx,eax
c000d26d:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d272:	8d 48 03             	lea    ecx,[eax+0x3]
c000d275:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d279:	01 c8                	add    eax,ecx
c000d27b:	8a 00                	mov    al,BYTE PTR [eax]
c000d27d:	0f b6 c0             	movzx  eax,al
c000d280:	09 d0                	or     eax,edx
c000d282:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d287:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d28c:	3d 18 02 00 00       	cmp    eax,0x218
c000d291:	77 11                	ja     c000d2a4 <tcp_parseopt+0x134>
c000d293:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d298:	85 c0                	test   eax,eax
c000d29a:	74 08                	je     c000d2a4 <tcp_parseopt+0x134>
c000d29c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d2a1:	eb 09                	jmp    c000d2ac <tcp_parseopt+0x13c>
c000d2a3:	90                   	nop
c000d2a4:	b8 18 02 00 00       	mov    eax,0x218
c000d2a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d2b0:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d2b4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d2b9:	83 c0 04             	add    eax,0x4
c000d2bc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2c1:	eb 39                	jmp    c000d2fc <tcp_parseopt+0x18c>
c000d2c3:	90                   	nop
c000d2c4:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2c9:	8d 50 01             	lea    edx,[eax+0x1]
c000d2cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2d0:	01 d0                	add    eax,edx
c000d2d2:	8a 00                	mov    al,BYTE PTR [eax]
c000d2d4:	0f b6 c0             	movzx  eax,al
c000d2d7:	85 c0                	test   eax,eax
c000d2d9:	74 39                	je     c000d314 <tcp_parseopt+0x1a4>
c000d2db:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d2e0:	8d 50 01             	lea    edx,[eax+0x1]
c000d2e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d2e7:	01 d0                	add    eax,edx
c000d2e9:	8a 00                	mov    al,BYTE PTR [eax]
c000d2eb:	0f b6 c0             	movzx  eax,al
c000d2ee:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d2f3:	01 d0                	add    eax,edx
c000d2f5:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d2fa:	66 90                	xchg   ax,ax
c000d2fc:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d301:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d306:	39 c2                	cmp    edx,eax
c000d308:	0f 82 d2 fe ff ff    	jb     c000d1e0 <tcp_parseopt+0x70>
c000d30e:	eb 08                	jmp    c000d318 <tcp_parseopt+0x1a8>
c000d310:	90                   	nop
c000d311:	eb 05                	jmp    c000d318 <tcp_parseopt+0x1a8>
c000d313:	90                   	nop
c000d314:	90                   	nop
c000d315:	8d 76 00             	lea    esi,[esi+0x0]
c000d318:	83 c4 1c             	add    esp,0x1c
c000d31b:	c3                   	ret    

c000d31c <tcp_listen_input>:
c000d31c:	53                   	push   ebx
c000d31d:	83 ec 18             	sub    esp,0x18
c000d320:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d325:	0f b6 c0             	movzx  eax,al
c000d328:	83 e0 10             	and    eax,0x10
c000d32b:	74 53                	je     c000d380 <tcp_listen_input+0x64>
c000d32d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d332:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d335:	0f b7 d0             	movzx  edx,ax
c000d338:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d33d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d341:	0f b7 c0             	movzx  eax,ax
c000d344:	66 8b 0d aa a8 03 c0 	mov    cx,WORD PTR ds:0xc003a8aa
c000d34b:	0f b7 d9             	movzx  ebx,cx
c000d34e:	8b 0d b4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b4
c000d354:	01 cb                	add    ebx,ecx
c000d356:	8b 0d b0 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8b0
c000d35c:	83 c1 01             	add    ecx,0x1
c000d35f:	83 ec 08             	sub    esp,0x8
c000d362:	52                   	push   edx
c000d363:	50                   	push   eax
c000d364:	68 90 68 03 c0       	push   0xc0036890
c000d369:	68 98 68 03 c0       	push   0xc0036898
c000d36e:	53                   	push   ebx
c000d36f:	51                   	push   ecx
c000d370:	e8 8b 2f 00 00       	call   c0010300 <tcp_rst>
c000d375:	83 c4 20             	add    esp,0x20
c000d378:	e9 a7 01 00 00       	jmp    c000d524 <tcp_listen_input+0x208>
c000d37d:	8d 76 00             	lea    esi,[esi+0x0]
c000d380:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d385:	0f b6 c0             	movzx  eax,al
c000d388:	83 e0 02             	and    eax,0x2
c000d38b:	0f 84 93 01 00 00    	je     c000d524 <tcp_listen_input+0x208>
c000d391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d395:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d398:	0f b6 c0             	movzx  eax,al
c000d39b:	83 ec 0c             	sub    esp,0xc
c000d39e:	50                   	push   eax
c000d39f:	e8 e0 df ff ff       	call   c000b384 <tcp_alloc>
c000d3a4:	83 c4 10             	add    esp,0x10
c000d3a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d3ab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d3b0:	75 16                	jne    c000d3c8 <tcp_listen_input+0xac>
c000d3b2:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d3b8:	83 c0 01             	add    eax,0x1
c000d3bb:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d3c1:	b0 ff                	mov    al,0xff
c000d3c3:	e9 60 01 00 00       	jmp    c000d528 <tcp_listen_input+0x20c>
c000d3c8:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d3ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3d2:	89 10                	mov    DWORD PTR [eax],edx
c000d3d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000d3db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3df:	66 89 50 20          	mov    WORD PTR [eax+0x20],dx
c000d3e3:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d3e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d3f0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3f5:	66 8b 10             	mov    dx,WORD PTR [eax]
c000d3f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3fc:	66 89 50 22          	mov    WORD PTR [eax+0x22],dx
c000d400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d404:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d40b:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d410:	8d 50 01             	lea    edx,[eax+0x1]
c000d413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d417:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d41a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d421:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d425:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d428:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d42d:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d435:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d43d:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000d440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d444:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d448:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d44d:	8d 50 ff             	lea    edx,[eax-0x1]
c000d450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d454:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d45e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d462:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d469:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d46c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d470:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d477:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d47a:	83 e0 8c             	and    eax,0xffffff8c
c000d47d:	88 c2                	mov    dl,al
c000d47f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d483:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d486:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d48c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d490:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d493:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d497:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d49c:	e8 7b 36 00 00       	call   c0010b1c <tcp_timer_needed>
c000d4a1:	83 ec 0c             	sub    esp,0xc
c000d4a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4a8:	e8 c3 fc ff ff       	call   c000d170 <tcp_parseopt>
c000d4ad:	83 c4 10             	add    esp,0x10
c000d4b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4b4:	8d 50 04             	lea    edx,[eax+0x4]
c000d4b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4bb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d4be:	0f b7 c0             	movzx  eax,ax
c000d4c1:	83 ec 08             	sub    esp,0x8
c000d4c4:	52                   	push   edx
c000d4c5:	50                   	push   eax
c000d4c6:	e8 79 e0 ff ff       	call   c000b544 <tcp_eff_send_mss>
c000d4cb:	83 c4 10             	add    esp,0x10
c000d4ce:	89 c2                	mov    edx,eax
c000d4d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d4d4:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d4d8:	83 ec 08             	sub    esp,0x8
c000d4db:	6a 12                	push   0x12
c000d4dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4e1:	e8 ee 22 00 00       	call   c000f7d4 <tcp_enqueue_flags>
c000d4e6:	83 c4 10             	add    esp,0x10
c000d4e9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d4ed:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d4f2:	85 c0                	test   eax,eax
c000d4f4:	74 1a                	je     c000d510 <tcp_listen_input+0x1f4>
c000d4f6:	83 ec 08             	sub    esp,0x8
c000d4f9:	6a 00                	push   0x0
c000d4fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4ff:	e8 68 db ff ff       	call   c000b06c <tcp_abandon>
c000d504:	83 c4 10             	add    esp,0x10
c000d507:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d50b:	eb 1b                	jmp    c000d528 <tcp_listen_input+0x20c>
c000d50d:	8d 76 00             	lea    esi,[esi+0x0]
c000d510:	83 ec 0c             	sub    esp,0xc
c000d513:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d517:	e8 58 29 00 00       	call   c000fe74 <tcp_output>
c000d51c:	83 c4 10             	add    esp,0x10
c000d51f:	eb 07                	jmp    c000d528 <tcp_listen_input+0x20c>
c000d521:	8d 76 00             	lea    esi,[esi+0x0]
c000d524:	b0 00                	mov    al,0x0
c000d526:	66 90                	xchg   ax,ax
c000d528:	83 c4 18             	add    esp,0x18
c000d52b:	5b                   	pop    ebx
c000d52c:	c3                   	ret    
c000d52d:	8d 76 00             	lea    esi,[esi+0x0]

c000d530 <tcp_process>:
c000d530:	53                   	push   ebx
c000d531:	83 ec 18             	sub    esp,0x18
c000d534:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d539:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d53e:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d543:	0f b6 c0             	movzx  eax,al
c000d546:	83 e0 04             	and    eax,0x4
c000d549:	0f 84 bd 00 00 00    	je     c000d60c <tcp_process+0xdc>
c000d54f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d553:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d556:	83 f8 02             	cmp    eax,0x2
c000d559:	75 19                	jne    c000d574 <tcp_process+0x44>
c000d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55f:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d562:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d567:	39 c2                	cmp    edx,eax
c000d569:	75 45                	jne    c000d5b0 <tcp_process+0x80>
c000d56b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d570:	eb 3e                	jmp    c000d5b0 <tcp_process+0x80>
c000d572:	66 90                	xchg   ax,ax
c000d574:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d57a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d581:	29 c2                	sub    edx,eax
c000d583:	89 d0                	mov    eax,edx
c000d585:	78 29                	js     c000d5b0 <tcp_process+0x80>
c000d587:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d58d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d591:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d598:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d59b:	0f b7 c0             	movzx  eax,ax
c000d59e:	01 c8                	add    eax,ecx
c000d5a0:	29 c2                	sub    edx,eax
c000d5a2:	89 d0                	mov    eax,edx
c000d5a4:	85 c0                	test   eax,eax
c000d5a6:	7f 08                	jg     c000d5b0 <tcp_process+0x80>
c000d5a8:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d5ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d5b0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d5b5:	85 c0                	test   eax,eax
c000d5b7:	74 4b                	je     c000d604 <tcp_process+0xd4>
c000d5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5c0:	85 c0                	test   eax,eax
c000d5c2:	75 18                	jne    c000d5dc <tcp_process+0xac>
c000d5c4:	83 ec 08             	sub    esp,0x8
c000d5c7:	68 30 04 03 c0       	push   0xc0030430
c000d5cc:	68 e6 f9 02 c0       	push   0xc002f9e6
c000d5d1:	e8 fa 24 01 00       	call   c001fad0 <CPrintf>
c000d5d6:	83 c4 10             	add    esp,0x10
c000d5d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d5dc:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d5e1:	83 c8 08             	or     eax,0x8
c000d5e4:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ed:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5f0:	83 e0 fe             	and    eax,0xfffffffe
c000d5f3:	88 c2                	mov    dl,al
c000d5f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d5fc:	b0 f5                	mov    al,0xf5
c000d5fe:	e9 c9 08 00 00       	jmp    c000decc <tcp_process+0x99c>
c000d603:	90                   	nop
c000d604:	b0 00                	mov    al,0x0
c000d606:	e9 c1 08 00 00       	jmp    c000decc <tcp_process+0x99c>
c000d60b:	90                   	nop
c000d60c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d611:	0f b6 c0             	movzx  eax,al
c000d614:	83 e0 02             	and    eax,0x2
c000d617:	74 33                	je     c000d64c <tcp_process+0x11c>
c000d619:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d61d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d620:	83 f8 02             	cmp    eax,0x2
c000d623:	74 27                	je     c000d64c <tcp_process+0x11c>
c000d625:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d629:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d62c:	83 f8 03             	cmp    eax,0x3
c000d62f:	74 1b                	je     c000d64c <tcp_process+0x11c>
c000d631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d635:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d638:	83 c8 02             	or     eax,0x2
c000d63b:	88 c2                	mov    dl,al
c000d63d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d641:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d644:	b0 00                	mov    al,0x0
c000d646:	e9 81 08 00 00       	jmp    c000decc <tcp_process+0x99c>
c000d64b:	90                   	nop
c000d64c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d650:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d653:	0f b6 c0             	movzx  eax,al
c000d656:	83 e0 10             	and    eax,0x10
c000d659:	75 0d                	jne    c000d668 <tcp_process+0x138>
c000d65b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d665:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d668:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d66c:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d673:	83 ec 0c             	sub    esp,0xc
c000d676:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d67a:	e8 f1 fa ff ff       	call   c000d170 <tcp_parseopt>
c000d67f:	83 c4 10             	add    esp,0x10
c000d682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d686:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d689:	83 f8 09             	cmp    eax,0x9
c000d68c:	0f 87 16 08 00 00    	ja     c000dea8 <tcp_process+0x978>
c000d692:	8b 04 85 d8 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfa28]
c000d699:	ff e0                	jmp    eax
c000d69b:	90                   	nop
c000d69c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6a1:	0f b6 c0             	movzx  eax,al
c000d6a4:	83 e0 10             	and    eax,0x10
c000d6a7:	0f 84 07 02 00 00    	je     c000d8b4 <tcp_process+0x384>
c000d6ad:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d6b2:	0f b6 c0             	movzx  eax,al
c000d6b5:	83 e0 02             	and    eax,0x2
c000d6b8:	0f 84 f6 01 00 00    	je     c000d8b4 <tcp_process+0x384>
c000d6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c2:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d6c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d6c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d6cb:	83 ec 0c             	sub    esp,0xc
c000d6ce:	50                   	push   eax
c000d6cf:	e8 6c 35 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000d6d4:	83 c4 10             	add    esp,0x10
c000d6d7:	8d 50 01             	lea    edx,[eax+0x1]
c000d6da:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d6df:	39 c2                	cmp    edx,eax
c000d6e1:	0f 85 cd 01 00 00    	jne    c000d8b4 <tcp_process+0x384>
c000d6e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6eb:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d6ef:	83 c0 01             	add    eax,0x1
c000d6f2:	89 c2                	mov    edx,eax
c000d6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6f8:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000d6fc:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d701:	8d 50 01             	lea    edx,[eax+0x1]
c000d704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d708:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d70f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d716:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d719:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d71f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d723:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d726:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d72b:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000d72f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d733:	66 89 50 60          	mov    WORD PTR [eax+0x60],dx
c000d737:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d73c:	8d 50 ff             	lea    edx,[eax-0x1]
c000d73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d743:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d74a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d751:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d755:	8d 50 04             	lea    edx,[eax+0x4]
c000d758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d75c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d75f:	0f b7 c0             	movzx  eax,ax
c000d762:	83 ec 08             	sub    esp,0x8
c000d765:	52                   	push   edx
c000d766:	50                   	push   eax
c000d767:	e8 d8 dd ff ff       	call   c000b544 <tcp_eff_send_mss>
c000d76c:	83 c4 10             	add    esp,0x10
c000d76f:	89 c2                	mov    edx,eax
c000d771:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d775:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
c000d779:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d77d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d780:	89 c2                	mov    edx,eax
c000d782:	c1 e2 02             	shl    edx,0x2
c000d785:	01 d0                	add    eax,edx
c000d787:	d1 e0                	shl    eax,1
c000d789:	89 c2                	mov    edx,eax
c000d78b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78f:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c000d793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d797:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d79b:	0f b7 c0             	movzx  eax,ax
c000d79e:	83 f8 01             	cmp    eax,0x1
c000d7a1:	75 0d                	jne    c000d7b0 <tcp_process+0x280>
c000d7a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7aa:	d1 e0                	shl    eax,1
c000d7ac:	eb 0a                	jmp    c000d7b8 <tcp_process+0x288>
c000d7ae:	66 90                	xchg   ax,ax
c000d7b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d7b7:	90                   	nop
c000d7b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7bc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d7c7:	0f b7 c0             	movzx  eax,ax
c000d7ca:	85 c0                	test   eax,eax
c000d7cc:	75 16                	jne    c000d7e4 <tcp_process+0x2b4>
c000d7ce:	83 ec 08             	sub    esp,0x8
c000d7d1:	68 93 05 03 c0       	push   0xc0030593
c000d7d6:	68 e6 f9 02 c0       	push   0xc002f9e6
c000d7db:	e8 f0 22 01 00       	call   c001fad0 <CPrintf>
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	90                   	nop
c000d7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e8:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d7eb:	83 e8 01             	sub    eax,0x1
c000d7ee:	89 c2                	mov    edx,eax
c000d7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7f4:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000d7f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7fc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d7ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d807:	8b 10                	mov    edx,DWORD PTR [eax]
c000d809:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d80d:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d814:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d817:	85 c0                	test   eax,eax
c000d819:	75 0d                	jne    c000d828 <tcp_process+0x2f8>
c000d81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d81f:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d825:	eb 15                	jmp    c000d83c <tcp_process+0x30c>
c000d827:	90                   	nop
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d836:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d83a:	66 90                	xchg   ax,ax
c000d83c:	83 ec 0c             	sub    esp,0xc
c000d83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d843:	e8 18 c7 ff ff       	call   c0009f60 <tcp_seg_free>
c000d848:	83 c4 10             	add    esp,0x10
c000d84b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84f:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d855:	85 c0                	test   eax,eax
c000d857:	74 27                	je     c000d880 <tcp_process+0x350>
c000d859:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d85d:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d863:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d867:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d86a:	83 ec 04             	sub    esp,0x4
c000d86d:	6a 00                	push   0x0
c000d86f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d873:	52                   	push   edx
c000d874:	ff d0                	call   eax
c000d876:	83 c4 10             	add    esp,0x10
c000d879:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d87d:	eb 09                	jmp    c000d888 <tcp_process+0x358>
c000d87f:	90                   	nop
c000d880:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d885:	8d 76 00             	lea    esi,[esi+0x0]
c000d888:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d88d:	83 f8 f6             	cmp    eax,0xfffffff6
c000d890:	75 0a                	jne    c000d89c <tcp_process+0x36c>
c000d892:	b0 f6                	mov    al,0xf6
c000d894:	e9 33 06 00 00       	jmp    c000decc <tcp_process+0x99c>
c000d899:	8d 76 00             	lea    esi,[esi+0x0]
c000d89c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d8a3:	83 c8 02             	or     eax,0x2
c000d8a6:	88 c2                	mov    dl,al
c000d8a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ac:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d8af:	e9 f8 05 00 00       	jmp    c000deac <tcp_process+0x97c>
c000d8b4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d8b9:	0f b6 c0             	movzx  eax,al
c000d8bc:	83 e0 10             	and    eax,0x10
c000d8bf:	0f 84 e7 05 00 00    	je     c000deac <tcp_process+0x97c>
c000d8c5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d8ca:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d8cd:	0f b7 c8             	movzx  ecx,ax
c000d8d0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d8d5:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d8d9:	0f b7 d0             	movzx  edx,ax
c000d8dc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d8e2:	0f b7 d8             	movzx  ebx,ax
c000d8e5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d8ea:	01 c3                	add    ebx,eax
c000d8ec:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d8f1:	83 ec 08             	sub    esp,0x8
c000d8f4:	51                   	push   ecx
c000d8f5:	52                   	push   edx
c000d8f6:	68 90 68 03 c0       	push   0xc0036890
c000d8fb:	68 98 68 03 c0       	push   0xc0036898
c000d900:	53                   	push   ebx
c000d901:	50                   	push   eax
c000d902:	e8 f9 29 00 00       	call   c0010300 <tcp_rst>
c000d907:	83 c4 20             	add    esp,0x20
c000d90a:	e9 9d 05 00 00       	jmp    c000deac <tcp_process+0x97c>
c000d90f:	90                   	nop
c000d910:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d915:	0f b6 c0             	movzx  eax,al
c000d918:	83 e0 10             	and    eax,0x10
c000d91b:	0f 84 ab 01 00 00    	je     c000dacc <tcp_process+0x59c>
c000d921:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d92b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d92e:	29 c2                	sub    edx,eax
c000d930:	89 d0                	mov    eax,edx
c000d932:	83 e8 01             	sub    eax,0x1
c000d935:	0f 88 45 01 00 00    	js     c000da80 <tcp_process+0x550>
c000d93b:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d941:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d945:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d948:	29 c2                	sub    edx,eax
c000d94a:	89 d0                	mov    eax,edx
c000d94c:	85 c0                	test   eax,eax
c000d94e:	0f 8f 2c 01 00 00    	jg     c000da80 <tcp_process+0x550>
c000d954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d958:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d95f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d963:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d966:	85 c0                	test   eax,eax
c000d968:	75 16                	jne    c000d980 <tcp_process+0x450>
c000d96a:	83 ec 08             	sub    esp,0x8
c000d96d:	68 a9 05 03 c0       	push   0xc00305a9
c000d972:	68 e6 f9 02 c0       	push   0xc002f9e6
c000d977:	e8 54 21 01 00       	call   c001fad0 <CPrintf>
c000d97c:	83 c4 10             	add    esp,0x10
c000d97f:	90                   	nop
c000d980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d984:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d987:	85 c0                	test   eax,eax
c000d989:	74 25                	je     c000d9b0 <tcp_process+0x480>
c000d98b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d992:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d996:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d999:	83 ec 04             	sub    esp,0x4
c000d99c:	6a 00                	push   0x0
c000d99e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9a2:	52                   	push   edx
c000d9a3:	ff d0                	call   eax
c000d9a5:	83 c4 10             	add    esp,0x10
c000d9a8:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d9ac:	eb 0a                	jmp    c000d9b8 <tcp_process+0x488>
c000d9ae:	66 90                	xchg   ax,ax
c000d9b0:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9b8:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9bd:	85 c0                	test   eax,eax
c000d9bf:	74 23                	je     c000d9e4 <tcp_process+0x4b4>
c000d9c1:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d9c6:	83 f8 f6             	cmp    eax,0xfffffff6
c000d9c9:	74 11                	je     c000d9dc <tcp_process+0x4ac>
c000d9cb:	83 ec 0c             	sub    esp,0xc
c000d9ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d9d2:	e8 29 d8 ff ff       	call   c000b200 <tcp_abort>
c000d9d7:	83 c4 10             	add    esp,0x10
c000d9da:	66 90                	xchg   ax,ax
c000d9dc:	b0 f6                	mov    al,0xf6
c000d9de:	e9 e9 04 00 00       	jmp    c000decc <tcp_process+0x99c>
c000d9e3:	90                   	nop
c000d9e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e8:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d9ec:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d9f1:	83 ec 0c             	sub    esp,0xc
c000d9f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d9f8:	e8 b3 e0 ff ff       	call   c000bab0 <tcp_receive>
c000d9fd:	83 c4 10             	add    esp,0x10
c000da00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da04:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da07:	0f b7 c0             	movzx  eax,ax
c000da0a:	85 c0                	test   eax,eax
c000da0c:	74 16                	je     c000da24 <tcp_process+0x4f4>
c000da0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da12:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000da15:	83 e8 01             	sub    eax,0x1
c000da18:	89 c2                	mov    edx,eax
c000da1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da1e:	66 89 50 70          	mov    WORD PTR [eax+0x70],dx
c000da22:	66 90                	xchg   ax,ax
c000da24:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000da29:	83 f8 01             	cmp    eax,0x1
c000da2c:	75 0e                	jne    c000da3c <tcp_process+0x50c>
c000da2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da32:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da35:	d1 e0                	shl    eax,1
c000da37:	eb 0b                	jmp    c000da44 <tcp_process+0x514>
c000da39:	8d 76 00             	lea    esi,[esi+0x0]
c000da3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000da43:	90                   	nop
c000da44:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000da48:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000da4c:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000da51:	0f b6 c0             	movzx  eax,al
c000da54:	83 e0 20             	and    eax,0x20
c000da57:	0f 84 ab 00 00 00    	je     c000db08 <tcp_process+0x5d8>
c000da5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da61:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000da64:	83 c8 02             	or     eax,0x2
c000da67:	88 c2                	mov    dl,al
c000da69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da6d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000da70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da74:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000da7b:	e9 88 00 00 00       	jmp    c000db08 <tcp_process+0x5d8>
c000da80:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da85:	66 8b 00             	mov    ax,WORD PTR [eax]
c000da88:	0f b7 c8             	movzx  ecx,ax
c000da8b:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da90:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000da94:	0f b7 d0             	movzx  edx,ax
c000da97:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000da9d:	0f b7 d8             	movzx  ebx,ax
c000daa0:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000daa5:	01 c3                	add    ebx,eax
c000daa7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000daac:	83 ec 08             	sub    esp,0x8
c000daaf:	51                   	push   ecx
c000dab0:	52                   	push   edx
c000dab1:	68 90 68 03 c0       	push   0xc0036890
c000dab6:	68 98 68 03 c0       	push   0xc0036898
c000dabb:	53                   	push   ebx
c000dabc:	50                   	push   eax
c000dabd:	e8 3e 28 00 00       	call   c0010300 <tcp_rst>
c000dac2:	83 c4 20             	add    esp,0x20
c000dac5:	e9 e6 03 00 00       	jmp    c000deb0 <tcp_process+0x980>
c000daca:	66 90                	xchg   ax,ax
c000dacc:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dad1:	0f b6 c0             	movzx  eax,al
c000dad4:	83 e0 02             	and    eax,0x2
c000dad7:	0f 84 d3 03 00 00    	je     c000deb0 <tcp_process+0x980>
c000dadd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000dae4:	8d 50 ff             	lea    edx,[eax-0x1]
c000dae7:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000daec:	39 c2                	cmp    edx,eax
c000daee:	0f 85 bc 03 00 00    	jne    c000deb0 <tcp_process+0x980>
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dafb:	e8 0c 2a 00 00       	call   c001050c <tcp_rexmit>
c000db00:	83 c4 10             	add    esp,0x10
c000db03:	e9 a8 03 00 00       	jmp    c000deb0 <tcp_process+0x980>
c000db08:	90                   	nop
c000db09:	e9 a2 03 00 00       	jmp    c000deb0 <tcp_process+0x980>
c000db0e:	66 90                	xchg   ax,ax
c000db10:	83 ec 0c             	sub    esp,0xc
c000db13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db17:	e8 94 df ff ff       	call   c000bab0 <tcp_receive>
c000db1c:	83 c4 10             	add    esp,0x10
c000db1f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db24:	0f b6 c0             	movzx  eax,al
c000db27:	83 e0 20             	and    eax,0x20
c000db2a:	0f 84 84 03 00 00    	je     c000deb4 <tcp_process+0x984>
c000db30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db34:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db37:	83 c8 02             	or     eax,0x2
c000db3a:	88 c2                	mov    dl,al
c000db3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db40:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db47:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000db4e:	e9 61 03 00 00       	jmp    c000deb4 <tcp_process+0x984>
c000db53:	90                   	nop
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db5b:	e8 50 df ff ff       	call   c000bab0 <tcp_receive>
c000db60:	83 c4 10             	add    esp,0x10
c000db63:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000db68:	0f b6 c0             	movzx  eax,al
c000db6b:	83 e0 20             	and    eax,0x20
c000db6e:	0f 84 08 01 00 00    	je     c000dc7c <tcp_process+0x74c>
c000db74:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000db79:	0f b6 c0             	movzx  eax,al
c000db7c:	83 e0 10             	and    eax,0x10
c000db7f:	0f 84 d3 00 00 00    	je     c000dc58 <tcp_process+0x728>
c000db85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db89:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000db8c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db91:	39 c2                	cmp    edx,eax
c000db93:	0f 85 bf 00 00 00    	jne    c000dc58 <tcp_process+0x728>
c000db99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dba0:	83 c8 02             	or     eax,0x2
c000dba3:	88 c2                	mov    dl,al
c000dba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbac:	83 ec 0c             	sub    esp,0xc
c000dbaf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dbb3:	e8 0c c5 ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000dbb8:	83 c4 10             	add    esp,0x10
c000dbbb:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbc0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbc4:	75 12                	jne    c000dbd8 <tcp_process+0x6a8>
c000dbc6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dbce:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dbd3:	eb 4b                	jmp    c000dc20 <tcp_process+0x6f0>
c000dbd5:	8d 76 00             	lea    esi,[esi+0x0]
c000dbd8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dbdd:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dbe2:	eb 30                	jmp    c000dc14 <tcp_process+0x6e4>
c000dbe4:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dbe9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dbec:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dbf0:	75 12                	jne    c000dc04 <tcp_process+0x6d4>
c000dbf2:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dbf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dbfb:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dbfe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc01:	eb 1d                	jmp    c000dc20 <tcp_process+0x6f0>
c000dc03:	90                   	nop
c000dc04:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc09:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc0c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc11:	8d 76 00             	lea    esi,[esi+0x0]
c000dc14:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc19:	85 c0                	test   eax,eax
c000dc1b:	75 c7                	jne    c000dbe4 <tcp_process+0x6b4>
c000dc1d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc24:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dc2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc2f:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dc36:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dc3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc40:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc47:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dc4c:	e8 cb 2e 00 00       	call   c0010b1c <tcp_timer_needed>
c000dc51:	e9 62 02 00 00       	jmp    c000deb8 <tcp_process+0x988>
c000dc56:	66 90                	xchg   ax,ax
c000dc58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5c:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc5f:	83 c8 02             	or     eax,0x2
c000dc62:	88 c2                	mov    dl,al
c000dc64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc68:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc6f:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dc76:	e9 3d 02 00 00       	jmp    c000deb8 <tcp_process+0x988>
c000dc7b:	90                   	nop
c000dc7c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dc81:	0f b6 c0             	movzx  eax,al
c000dc84:	83 e0 10             	and    eax,0x10
c000dc87:	0f 84 2b 02 00 00    	je     c000deb8 <tcp_process+0x988>
c000dc8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc91:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc94:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc99:	39 c2                	cmp    edx,eax
c000dc9b:	0f 85 17 02 00 00    	jne    c000deb8 <tcp_process+0x988>
c000dca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dca5:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dcac:	e9 07 02 00 00       	jmp    c000deb8 <tcp_process+0x988>
c000dcb1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb4:	83 ec 0c             	sub    esp,0xc
c000dcb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcbb:	e8 f0 dd ff ff       	call   c000bab0 <tcp_receive>
c000dcc0:	83 c4 10             	add    esp,0x10
c000dcc3:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dcc8:	0f b6 c0             	movzx  eax,al
c000dccb:	83 e0 20             	and    eax,0x20
c000dcce:	0f 84 e8 01 00 00    	je     c000debc <tcp_process+0x98c>
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dcdb:	83 c8 02             	or     eax,0x2
c000dcde:	88 c2                	mov    dl,al
c000dce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dce7:	83 ec 0c             	sub    esp,0xc
c000dcea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dcee:	e8 d1 c3 ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000dcf3:	83 c4 10             	add    esp,0x10
c000dcf6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dcfb:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dcff:	75 0f                	jne    c000dd10 <tcp_process+0x7e0>
c000dd01:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd09:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd0e:	eb 48                	jmp    c000dd58 <tcp_process+0x828>
c000dd10:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd15:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd1a:	eb 30                	jmp    c000dd4c <tcp_process+0x81c>
c000dd1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd24:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd28:	75 12                	jne    c000dd3c <tcp_process+0x80c>
c000dd2a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd2f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd33:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd39:	eb 1d                	jmp    c000dd58 <tcp_process+0x828>
c000dd3b:	90                   	nop
c000dd3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd44:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd49:	8d 76 00             	lea    esi,[esi+0x0]
c000dd4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd51:	85 c0                	test   eax,eax
c000dd53:	75 c7                	jne    c000dd1c <tcp_process+0x7ec>
c000dd55:	8d 76 00             	lea    esi,[esi+0x0]
c000dd58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd5c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dd63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd67:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dd6e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dd74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd78:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd7f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd84:	e8 93 2d 00 00       	call   c0010b1c <tcp_timer_needed>
c000dd89:	e9 2e 01 00 00       	jmp    c000debc <tcp_process+0x98c>
c000dd8e:	66 90                	xchg   ax,ax
c000dd90:	83 ec 0c             	sub    esp,0xc
c000dd93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd97:	e8 14 dd ff ff       	call   c000bab0 <tcp_receive>
c000dd9c:	83 c4 10             	add    esp,0x10
c000dd9f:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dda4:	0f b6 c0             	movzx  eax,al
c000dda7:	83 e0 10             	and    eax,0x10
c000ddaa:	0f 84 10 01 00 00    	je     c000dec0 <tcp_process+0x990>
c000ddb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb4:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000ddb7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000ddbc:	39 c2                	cmp    edx,eax
c000ddbe:	0f 85 fc 00 00 00    	jne    c000dec0 <tcp_process+0x990>
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddcb:	e8 f4 c2 ff ff       	call   c000a0c4 <tcp_pcb_purge>
c000ddd0:	83 c4 10             	add    esp,0x10
c000ddd3:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddd8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dddc:	75 12                	jne    c000ddf0 <tcp_process+0x8c0>
c000ddde:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dde3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dde6:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ddeb:	eb 4b                	jmp    c000de38 <tcp_process+0x908>
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ddf5:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ddfa:	eb 30                	jmp    c000de2c <tcp_process+0x8fc>
c000ddfc:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de01:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de04:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000de08:	75 12                	jne    c000de1c <tcp_process+0x8ec>
c000de0a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000de13:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000de16:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de19:	eb 1d                	jmp    c000de38 <tcp_process+0x908>
c000de1b:	90                   	nop
c000de1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000de24:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000de29:	8d 76 00             	lea    esi,[esi+0x0]
c000de2c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000de31:	85 c0                	test   eax,eax
c000de33:	75 c7                	jne    c000ddfc <tcp_process+0x8cc>
c000de35:	8d 76 00             	lea    esi,[esi+0x0]
c000de38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de3c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000de43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de47:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000de4e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000de54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de58:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000de5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de5f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000de64:	e8 b3 2c 00 00       	call   c0010b1c <tcp_timer_needed>
c000de69:	eb 55                	jmp    c000dec0 <tcp_process+0x990>
c000de6b:	90                   	nop
c000de6c:	83 ec 0c             	sub    esp,0xc
c000de6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de73:	e8 38 dc ff ff       	call   c000bab0 <tcp_receive>
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000de80:	0f b6 c0             	movzx  eax,al
c000de83:	83 e0 10             	and    eax,0x10
c000de86:	74 3c                	je     c000dec4 <tcp_process+0x994>
c000de88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de8c:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de8f:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de94:	39 c2                	cmp    edx,eax
c000de96:	75 2c                	jne    c000dec4 <tcp_process+0x994>
c000de98:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de9d:	83 c8 10             	or     eax,0x10
c000dea0:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000dea5:	eb 1d                	jmp    c000dec4 <tcp_process+0x994>
c000dea7:	90                   	nop
c000dea8:	90                   	nop
c000dea9:	eb 1d                	jmp    c000dec8 <tcp_process+0x998>
c000deab:	90                   	nop
c000deac:	90                   	nop
c000dead:	eb 19                	jmp    c000dec8 <tcp_process+0x998>
c000deaf:	90                   	nop
c000deb0:	90                   	nop
c000deb1:	eb 15                	jmp    c000dec8 <tcp_process+0x998>
c000deb3:	90                   	nop
c000deb4:	90                   	nop
c000deb5:	eb 11                	jmp    c000dec8 <tcp_process+0x998>
c000deb7:	90                   	nop
c000deb8:	90                   	nop
c000deb9:	eb 0d                	jmp    c000dec8 <tcp_process+0x998>
c000debb:	90                   	nop
c000debc:	90                   	nop
c000debd:	eb 09                	jmp    c000dec8 <tcp_process+0x998>
c000debf:	90                   	nop
c000dec0:	90                   	nop
c000dec1:	eb 05                	jmp    c000dec8 <tcp_process+0x998>
c000dec3:	90                   	nop
c000dec4:	90                   	nop
c000dec5:	8d 76 00             	lea    esi,[esi+0x0]
c000dec8:	b0 00                	mov    al,0x0
c000deca:	66 90                	xchg   ax,ax
c000decc:	83 c4 18             	add    esp,0x18
c000decf:	5b                   	pop    ebx
c000ded0:	c3                   	ret    
c000ded1:	8d 76 00             	lea    esi,[esi+0x0]

c000ded4 <tcp_input>:
c000ded4:	53                   	push   ebx
c000ded5:	83 ec 18             	sub    esp,0x18
c000ded8:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000dede:	83 c0 01             	add    eax,0x1
c000dee1:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000dee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deee:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000def3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000def7:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000defa:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000deff:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df02:	0f b7 c0             	movzx  eax,ax
c000df05:	83 ec 0c             	sub    esp,0xc
c000df08:	50                   	push   eax
c000df09:	e8 0e 2d ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000df0e:	83 c4 10             	add    esp,0x10
c000df11:	0f b7 c0             	movzx  eax,ax
c000df14:	c1 e8 08             	shr    eax,0x8
c000df17:	0f b7 c0             	movzx  eax,ax
c000df1a:	83 e0 0f             	and    eax,0xf
c000df1d:	c1 e0 02             	shl    eax,0x2
c000df20:	01 d8                	add    eax,ebx
c000df22:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000df27:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000df2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000df2f:	0f b7 c0             	movzx  eax,ax
c000df32:	83 ec 0c             	sub    esp,0xc
c000df35:	50                   	push   eax
c000df36:	e8 e1 2c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	0f b7 c0             	movzx  eax,ax
c000df41:	c1 e8 08             	shr    eax,0x8
c000df44:	83 e0 0f             	and    eax,0xf
c000df47:	c1 e0 02             	shl    eax,0x2
c000df4a:	f7 d8                	neg    eax
c000df4c:	98                   	cwde   
c000df4d:	83 ec 08             	sub    esp,0x8
c000df50:	50                   	push   eax
c000df51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df55:	e8 da a1 ff ff       	call   c0008134 <pbuf_header>
c000df5a:	83 c4 10             	add    esp,0x10
c000df5d:	0f b6 c0             	movzx  eax,al
c000df60:	85 c0                	test   eax,eax
c000df62:	75 10                	jne    c000df74 <tcp_input+0xa0>
c000df64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df6b:	0f b7 c0             	movzx  eax,ax
c000df6e:	83 f8 13             	cmp    eax,0x13
c000df71:	77 35                	ja     c000dfa8 <tcp_input+0xd4>
c000df73:	90                   	nop
c000df74:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000df7a:	83 c0 01             	add    eax,0x1
c000df7d:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000df83:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df89:	83 c0 01             	add    eax,0x1
c000df8c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df99:	e8 36 a3 ff ff       	call   c00082d4 <pbuf_free>
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	e9 fe 09 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000dfa6:	66 90                	xchg   ax,ax
c000dfa8:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfad:	83 ec 08             	sub    esp,0x8
c000dfb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfb4:	50                   	push   eax
c000dfb5:	e8 be 5e 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c000dfba:	83 c4 10             	add    esp,0x10
c000dfbd:	0f b6 c0             	movzx  eax,al
c000dfc0:	85 c0                	test   eax,eax
c000dfc2:	75 14                	jne    c000dfd8 <tcp_input+0x104>
c000dfc4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000dfc9:	25 f0 00 00 00       	and    eax,0xf0
c000dfce:	3d e0 00 00 00       	cmp    eax,0xe0
c000dfd3:	75 37                	jne    c000e00c <tcp_input+0x138>
c000dfd5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfd8:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000dfde:	83 c0 01             	add    eax,0x1
c000dfe1:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000dfe7:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfed:	83 c0 01             	add    eax,0x1
c000dff0:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dff6:	83 ec 0c             	sub    esp,0xc
c000dff9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dffd:	e8 d2 a2 ff ff       	call   c00082d4 <pbuf_free>
c000e002:	83 c4 10             	add    esp,0x10
c000e005:	e9 9a 09 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e00a:	66 90                	xchg   ax,ax
c000e00c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e010:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e013:	0f b7 c0             	movzx  eax,ax
c000e016:	83 ec 0c             	sub    esp,0xc
c000e019:	50                   	push   eax
c000e01a:	6a 06                	push   0x6
c000e01c:	68 98 68 03 c0       	push   0xc0036898
c000e021:	68 90 68 03 c0       	push   0xc0036890
c000e026:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e02a:	e8 61 51 00 00       	call   c0013190 <inet_chksum_pseudo>
c000e02f:	83 c4 20             	add    esp,0x20
c000e032:	0f b7 c0             	movzx  eax,ax
c000e035:	85 c0                	test   eax,eax
c000e037:	74 33                	je     c000e06c <tcp_input+0x198>
c000e039:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000e03f:	83 c0 01             	add    eax,0x1
c000e042:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000e048:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e04e:	83 c0 01             	add    eax,0x1
c000e051:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e057:	83 ec 0c             	sub    esp,0xc
c000e05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e05e:	e8 71 a2 ff ff       	call   c00082d4 <pbuf_free>
c000e063:	83 c4 10             	add    esp,0x10
c000e066:	e9 39 09 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e06b:	90                   	nop
c000e06c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e071:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e075:	0f b7 c0             	movzx  eax,ax
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	50                   	push   eax
c000e07c:	e8 9b 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e081:	83 c4 10             	add    esp,0x10
c000e084:	0f b7 c0             	movzx  eax,ax
c000e087:	c1 e8 0c             	shr    eax,0xc
c000e08a:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e08e:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e093:	ba 00 00 00 00       	mov    edx,0x0
c000e098:	89 d1                	mov    ecx,edx
c000e09a:	29 c1                	sub    ecx,eax
c000e09c:	89 c8                	mov    eax,ecx
c000e09e:	c1 e0 02             	shl    eax,0x2
c000e0a1:	98                   	cwde   
c000e0a2:	83 ec 08             	sub    esp,0x8
c000e0a5:	50                   	push   eax
c000e0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0aa:	e8 85 a0 ff ff       	call   c0008134 <pbuf_header>
c000e0af:	83 c4 10             	add    esp,0x10
c000e0b2:	0f b6 c0             	movzx  eax,al
c000e0b5:	85 c0                	test   eax,eax
c000e0b7:	74 33                	je     c000e0ec <tcp_input+0x218>
c000e0b9:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e0bf:	83 c0 01             	add    eax,0x1
c000e0c2:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e0c8:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e0ce:	83 c0 01             	add    eax,0x1
c000e0d1:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e0d7:	83 ec 0c             	sub    esp,0xc
c000e0da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0de:	e8 f1 a1 ff ff       	call   c00082d4 <pbuf_free>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	e9 b9 08 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e0eb:	90                   	nop
c000e0ec:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0f1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e0f4:	0f b7 c0             	movzx  eax,ax
c000e0f7:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0fd:	83 ec 0c             	sub    esp,0xc
c000e100:	50                   	push   eax
c000e101:	e8 16 2b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e106:	83 c4 10             	add    esp,0x10
c000e109:	66 89 03             	mov    WORD PTR [ebx],ax
c000e10c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e111:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e115:	0f b7 c0             	movzx  eax,ax
c000e118:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e11e:	83 ec 0c             	sub    esp,0xc
c000e121:	50                   	push   eax
c000e122:	e8 f5 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e12e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e133:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e136:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e13c:	83 ec 0c             	sub    esp,0xc
c000e13f:	50                   	push   eax
c000e140:	e8 fb 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e145:	83 c4 10             	add    esp,0x10
c000e148:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e14b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e14e:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e153:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e158:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e15b:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e161:	83 ec 0c             	sub    esp,0xc
c000e164:	50                   	push   eax
c000e165:	e8 d6 2a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e170:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e173:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e178:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e17d:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e181:	0f b7 c0             	movzx  eax,ax
c000e184:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e18a:	83 ec 0c             	sub    esp,0xc
c000e18d:	50                   	push   eax
c000e18e:	e8 89 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e193:	83 c4 10             	add    esp,0x10
c000e196:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e19a:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e19f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e1a3:	0f b7 c0             	movzx  eax,ax
c000e1a6:	83 ec 0c             	sub    esp,0xc
c000e1a9:	50                   	push   eax
c000e1aa:	e8 6d 2a ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e1af:	83 c4 10             	add    esp,0x10
c000e1b2:	83 e0 3f             	and    eax,0x3f
c000e1b5:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e1ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1be:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e1c1:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e1c6:	0f b6 c0             	movzx  eax,al
c000e1c9:	83 e0 03             	and    eax,0x3
c000e1cc:	0f 95 c0             	setne  al
c000e1cf:	0f b6 c0             	movzx  eax,al
c000e1d2:	01 d0                	add    eax,edx
c000e1d4:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e1da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e1e2:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e1e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e1eb:	e9 50 01 00 00       	jmp    c000e340 <tcp_input+0x46c>
c000e1f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1f7:	85 c0                	test   eax,eax
c000e1f9:	75 15                	jne    c000e210 <tcp_input+0x33c>
c000e1fb:	83 ec 08             	sub    esp,0x8
c000e1fe:	68 50 04 03 c0       	push   0xc0030450
c000e203:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e208:	e8 c3 18 01 00       	call   c001fad0 <CPrintf>
c000e20d:	83 c4 10             	add    esp,0x10
c000e210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e214:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e217:	83 f8 0a             	cmp    eax,0xa
c000e21a:	75 18                	jne    c000e234 <tcp_input+0x360>
c000e21c:	83 ec 08             	sub    esp,0x8
c000e21f:	68 78 04 03 c0       	push   0xc0030478
c000e224:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e229:	e8 a2 18 01 00       	call   c001fad0 <CPrintf>
c000e22e:	83 c4 10             	add    esp,0x10
c000e231:	8d 76 00             	lea    esi,[esi+0x0]
c000e234:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e238:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e23b:	83 f8 01             	cmp    eax,0x1
c000e23e:	75 18                	jne    c000e258 <tcp_input+0x384>
c000e240:	83 ec 08             	sub    esp,0x8
c000e243:	68 a4 04 03 c0       	push   0xc00304a4
c000e248:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e24d:	e8 7e 18 01 00       	call   c001fad0 <CPrintf>
c000e252:	83 c4 10             	add    esp,0x10
c000e255:	8d 76 00             	lea    esi,[esi+0x0]
c000e258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e25c:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e260:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e265:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e268:	0f b7 d2             	movzx  edx,dx
c000e26b:	0f b7 c0             	movzx  eax,ax
c000e26e:	39 c2                	cmp    edx,eax
c000e270:	0f 85 b6 00 00 00    	jne    c000e32c <tcp_input+0x458>
c000e276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e27a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e27d:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e282:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e286:	0f b7 d2             	movzx  edx,dx
c000e289:	0f b7 c0             	movzx  eax,ax
c000e28c:	39 c2                	cmp    edx,eax
c000e28e:	0f 85 98 00 00 00    	jne    c000e32c <tcp_input+0x458>
c000e294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e298:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e29b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e2a0:	39 c2                	cmp    edx,eax
c000e2a2:	0f 85 84 00 00 00    	jne    c000e32c <tcp_input+0x458>
c000e2a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ae:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e2b3:	39 c2                	cmp    edx,eax
c000e2b5:	75 75                	jne    c000e32c <tcp_input+0x458>
c000e2b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2be:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e2c2:	75 18                	jne    c000e2dc <tcp_input+0x408>
c000e2c4:	83 ec 08             	sub    esp,0x8
c000e2c7:	68 cc 04 03 c0       	push   0xc00304cc
c000e2cc:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e2d1:	e8 fa 17 01 00       	call   c001fad0 <CPrintf>
c000e2d6:	83 c4 10             	add    esp,0x10
c000e2d9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e2e1:	74 25                	je     c000e308 <tcp_input+0x434>
c000e2e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e2ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e2ee:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2f1:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e2f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2fb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e302:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e307:	90                   	nop
c000e308:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e30c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e30f:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e313:	75 3b                	jne    c000e350 <tcp_input+0x47c>
c000e315:	83 ec 08             	sub    esp,0x8
c000e318:	68 f8 04 03 c0       	push   0xc00304f8
c000e31d:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e322:	e8 a9 17 01 00       	call   c001fad0 <CPrintf>
c000e327:	83 c4 10             	add    esp,0x10
c000e32a:	eb 24                	jmp    c000e350 <tcp_input+0x47c>
c000e32c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e334:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e338:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e33b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e33f:	90                   	nop
c000e340:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e345:	0f 85 a5 fe ff ff    	jne    c000e1f0 <tcp_input+0x31c>
c000e34b:	eb 07                	jmp    c000e354 <tcp_input+0x480>
c000e34d:	8d 76 00             	lea    esi,[esi+0x0]
c000e350:	90                   	nop
c000e351:	8d 76 00             	lea    esi,[esi+0x0]
c000e354:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e359:	0f 85 89 01 00 00    	jne    c000e4e8 <tcp_input+0x614>
c000e35f:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e364:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e368:	e9 ab 00 00 00       	jmp    c000e418 <tcp_input+0x544>
c000e36d:	8d 76 00             	lea    esi,[esi+0x0]
c000e370:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e374:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e377:	83 f8 0a             	cmp    eax,0xa
c000e37a:	74 18                	je     c000e394 <tcp_input+0x4c0>
c000e37c:	83 ec 08             	sub    esp,0x8
c000e37f:	68 24 05 03 c0       	push   0xc0030524
c000e384:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e389:	e8 42 17 01 00       	call   c001fad0 <CPrintf>
c000e38e:	83 c4 10             	add    esp,0x10
c000e391:	8d 76 00             	lea    esi,[esi+0x0]
c000e394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e398:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e39c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3a1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e3a4:	0f b7 d2             	movzx  edx,dx
c000e3a7:	0f b7 c0             	movzx  eax,ax
c000e3aa:	39 c2                	cmp    edx,eax
c000e3ac:	75 5e                	jne    c000e40c <tcp_input+0x538>
c000e3ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3b5:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3ba:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3be:	0f b7 d2             	movzx  edx,dx
c000e3c1:	0f b7 c0             	movzx  eax,ax
c000e3c4:	39 c2                	cmp    edx,eax
c000e3c6:	75 44                	jne    c000e40c <tcp_input+0x538>
c000e3c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e3cf:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e3d4:	39 c2                	cmp    edx,eax
c000e3d6:	75 34                	jne    c000e40c <tcp_input+0x538>
c000e3d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3dc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3de:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e3e3:	39 c2                	cmp    edx,eax
c000e3e5:	75 25                	jne    c000e40c <tcp_input+0x538>
c000e3e7:	83 ec 0c             	sub    esp,0xc
c000e3ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3ee:	e8 45 d4 ff ff       	call   c000b838 <tcp_timewait_input>
c000e3f3:	83 c4 10             	add    esp,0x10
c000e3f6:	83 ec 0c             	sub    esp,0xc
c000e3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3fd:	e8 d2 9e ff ff       	call   c00082d4 <pbuf_free>
c000e402:	83 c4 10             	add    esp,0x10
c000e405:	e9 9a 05 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e40a:	66 90                	xchg   ax,ax
c000e40c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e410:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e413:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e417:	90                   	nop
c000e418:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e41d:	0f 85 4d ff ff ff    	jne    c000e370 <tcp_input+0x49c>
c000e423:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e42b:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e430:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e434:	eb 52                	jmp    c000e488 <tcp_input+0x5b4>
c000e436:	66 90                	xchg   ax,ax
c000e438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e43c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e43f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e444:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e448:	0f b7 d2             	movzx  edx,dx
c000e44b:	0f b7 c0             	movzx  eax,ax
c000e44e:	39 c2                	cmp    edx,eax
c000e450:	75 22                	jne    c000e474 <tcp_input+0x5a0>
c000e452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e456:	8b 10                	mov    edx,DWORD PTR [eax]
c000e458:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e45d:	39 c2                	cmp    edx,eax
c000e45f:	74 2f                	je     c000e490 <tcp_input+0x5bc>
c000e461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e465:	85 c0                	test   eax,eax
c000e467:	74 27                	je     c000e490 <tcp_input+0x5bc>
c000e469:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e46d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e46f:	85 c0                	test   eax,eax
c000e471:	74 1d                	je     c000e490 <tcp_input+0x5bc>
c000e473:	90                   	nop
c000e474:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e478:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e47c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e480:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e483:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e487:	90                   	nop
c000e488:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e48d:	75 a9                	jne    c000e438 <tcp_input+0x564>
c000e48f:	90                   	nop
c000e490:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e495:	74 51                	je     c000e4e8 <tcp_input+0x614>
c000e497:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e49c:	74 26                	je     c000e4c4 <tcp_input+0x5f0>
c000e49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e4a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e4a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4ac:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e4b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e4b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4bd:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e4c2:	66 90                	xchg   ax,ax
c000e4c4:	83 ec 0c             	sub    esp,0xc
c000e4c7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e4cb:	e8 4c ee ff ff       	call   c000d31c <tcp_listen_input>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4da:	e8 f5 9d ff ff       	call   c00082d4 <pbuf_free>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	e9 bd 04 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e4e7:	90                   	nop
c000e4e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e4ed:	0f 84 1d 04 00 00    	je     c000e910 <tcp_input+0xa3c>
c000e4f3:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e4fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e501:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e504:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e50a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e50e:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e513:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e518:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e51d:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e527:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e52e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e532:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e538:	85 c0                	test   eax,eax
c000e53a:	0f 84 b4 00 00 00    	je     c000e5f4 <tcp_input+0x720>
c000e540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e544:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e54a:	85 c0                	test   eax,eax
c000e54c:	74 2e                	je     c000e57c <tcp_input+0x6a8>
c000e54e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e552:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e558:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e55c:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e562:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e566:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e569:	6a 00                	push   0x0
c000e56b:	51                   	push   ecx
c000e56c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e570:	52                   	push   edx
c000e571:	ff d0                	call   eax
c000e573:	83 c4 10             	add    esp,0x10
c000e576:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e57a:	eb 20                	jmp    c000e59c <tcp_input+0x6c8>
c000e57c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e580:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e586:	6a 00                	push   0x0
c000e588:	50                   	push   eax
c000e589:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e58d:	6a 00                	push   0x0
c000e58f:	e8 74 c8 ff ff       	call   c000ae08 <tcp_recv_null>
c000e594:	83 c4 10             	add    esp,0x10
c000e597:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e59b:	90                   	nop
c000e59c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5a1:	85 c0                	test   eax,eax
c000e5a3:	75 13                	jne    c000e5b8 <tcp_input+0x6e4>
c000e5a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a9:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e5b3:	eb 3f                	jmp    c000e5f4 <tcp_input+0x720>
c000e5b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b8:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e5bd:	83 f8 f6             	cmp    eax,0xfffffff6
c000e5c0:	74 0e                	je     c000e5d0 <tcp_input+0x6fc>
c000e5c2:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e5c8:	0f b7 c0             	movzx  eax,ax
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	74 25                	je     c000e5f4 <tcp_input+0x720>
c000e5cf:	90                   	nop
c000e5d0:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e5d6:	83 c0 01             	add    eax,0x1
c000e5d9:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e5df:	83 ec 0c             	sub    esp,0xc
c000e5e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e5e6:	e8 e9 9c ff ff       	call   c00082d4 <pbuf_free>
c000e5eb:	83 c4 10             	add    esp,0x10
c000e5ee:	e9 b1 03 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e5f3:	90                   	nop
c000e5f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5f8:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e5fd:	83 ec 0c             	sub    esp,0xc
c000e600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e604:	e8 27 ef ff ff       	call   c000d530 <tcp_process>
c000e609:	83 c4 10             	add    esp,0x10
c000e60c:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e610:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e615:	83 f8 f6             	cmp    eax,0xfffffff6
c000e618:	0f 84 9e 02 00 00    	je     c000e8bc <tcp_input+0x9e8>
c000e61e:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e623:	0f b6 c0             	movzx  eax,al
c000e626:	83 e0 08             	and    eax,0x8
c000e629:	74 59                	je     c000e684 <tcp_input+0x7b0>
c000e62b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e62f:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e635:	85 c0                	test   eax,eax
c000e637:	74 1f                	je     c000e658 <tcp_input+0x784>
c000e639:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e63d:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e647:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e64a:	83 ec 08             	sub    esp,0x8
c000e64d:	6a f5                	push   0xfffffff5
c000e64f:	52                   	push   edx
c000e650:	ff d0                	call   eax
c000e652:	83 c4 10             	add    esp,0x10
c000e655:	8d 76 00             	lea    esi,[esi+0x0]
c000e658:	83 ec 08             	sub    esp,0x8
c000e65b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e65f:	68 70 68 03 c0       	push   0xc0036870
c000e664:	e8 bb c2 ff ff       	call   c000a924 <tcp_pcb_remove>
c000e669:	83 c4 10             	add    esp,0x10
c000e66c:	83 ec 08             	sub    esp,0x8
c000e66f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e673:	6a 02                	push   0x2
c000e675:	e8 9a 93 ff ff       	call   c0007a14 <memp_free>
c000e67a:	83 c4 10             	add    esp,0x10
c000e67d:	e9 4a 02 00 00       	jmp    c000e8cc <tcp_input+0x9f8>
c000e682:	66 90                	xchg   ax,ax
c000e684:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e689:	0f b6 c0             	movzx  eax,al
c000e68c:	83 e0 10             	and    eax,0x10
c000e68f:	74 2b                	je     c000e6bc <tcp_input+0x7e8>
c000e691:	83 ec 08             	sub    esp,0x8
c000e694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e698:	68 70 68 03 c0       	push   0xc0036870
c000e69d:	e8 82 c2 ff ff       	call   c000a924 <tcp_pcb_remove>
c000e6a2:	83 c4 10             	add    esp,0x10
c000e6a5:	83 ec 08             	sub    esp,0x8
c000e6a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e6ac:	6a 02                	push   0x2
c000e6ae:	e8 61 93 ff ff       	call   c0007a14 <memp_free>
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	e9 11 02 00 00       	jmp    c000e8cc <tcp_input+0x9f8>
c000e6bb:	90                   	nop
c000e6bc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e6c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6c5:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e6c8:	0f b7 c0             	movzx  eax,ax
c000e6cb:	85 c0                	test   eax,eax
c000e6cd:	74 55                	je     c000e724 <tcp_input+0x850>
c000e6cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6d3:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e6d9:	85 c0                	test   eax,eax
c000e6db:	74 2f                	je     c000e70c <tcp_input+0x838>
c000e6dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6e1:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e6e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6eb:	8b 52 70             	mov    edx,DWORD PTR [edx+0x70]
c000e6ee:	0f b7 ca             	movzx  ecx,dx
c000e6f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e6f5:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e6f8:	83 ec 04             	sub    esp,0x4
c000e6fb:	51                   	push   ecx
c000e6fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e700:	52                   	push   edx
c000e701:	ff d0                	call   eax
c000e703:	83 c4 10             	add    esp,0x10
c000e706:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e70a:	eb 08                	jmp    c000e714 <tcp_input+0x840>
c000e70c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e711:	8d 76 00             	lea    esi,[esi+0x0]
c000e714:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e719:	83 f8 f6             	cmp    eax,0xfffffff6
c000e71c:	0f 84 9e 01 00 00    	je     c000e8c0 <tcp_input+0x9ec>
c000e722:	66 90                	xchg   ax,ax
c000e724:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e729:	85 c0                	test   eax,eax
c000e72b:	0f 84 f3 00 00 00    	je     c000e824 <tcp_input+0x950>
c000e731:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e735:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e73b:	85 c0                	test   eax,eax
c000e73d:	74 15                	je     c000e754 <tcp_input+0x880>
c000e73f:	83 ec 08             	sub    esp,0x8
c000e742:	68 bd 05 03 c0       	push   0xc00305bd
c000e747:	68 e6 f9 02 c0       	push   0xc002f9e6
c000e74c:	e8 7f 13 01 00       	call   c001fad0 <CPrintf>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e758:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e75b:	0f b6 c0             	movzx  eax,al
c000e75e:	83 e0 10             	and    eax,0x10
c000e761:	74 25                	je     c000e788 <tcp_input+0x8b4>
c000e763:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e768:	83 ec 0c             	sub    esp,0xc
c000e76b:	50                   	push   eax
c000e76c:	e8 63 9b ff ff       	call   c00082d4 <pbuf_free>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e77b:	e8 80 ca ff ff       	call   c000b200 <tcp_abort>
c000e780:	83 c4 10             	add    esp,0x10
c000e783:	e9 44 01 00 00       	jmp    c000e8cc <tcp_input+0x9f8>
c000e788:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e78d:	0f b6 c0             	movzx  eax,al
c000e790:	83 e0 08             	and    eax,0x8
c000e793:	74 13                	je     c000e7a8 <tcp_input+0x8d4>
c000e795:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e79a:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e79d:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7a2:	83 ca 01             	or     edx,0x1
c000e7a5:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e7a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ac:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7b2:	85 c0                	test   eax,eax
c000e7b4:	74 2a                	je     c000e7e0 <tcp_input+0x90c>
c000e7b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ba:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7c0:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e7c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7ca:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7cd:	6a 00                	push   0x0
c000e7cf:	51                   	push   ecx
c000e7d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7d4:	52                   	push   edx
c000e7d5:	ff d0                	call   eax
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7de:	eb 1c                	jmp    c000e7fc <tcp_input+0x928>
c000e7e0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e7e5:	6a 00                	push   0x0
c000e7e7:	50                   	push   eax
c000e7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7ec:	6a 00                	push   0x0
c000e7ee:	e8 15 c6 ff ff       	call   c000ae08 <tcp_recv_null>
c000e7f3:	83 c4 10             	add    esp,0x10
c000e7f6:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e7fa:	66 90                	xchg   ax,ax
c000e7fc:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e801:	83 f8 f6             	cmp    eax,0xfffffff6
c000e804:	0f 84 ba 00 00 00    	je     c000e8c4 <tcp_input+0x9f0>
c000e80a:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e80f:	85 c0                	test   eax,eax
c000e811:	74 11                	je     c000e824 <tcp_input+0x950>
c000e813:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e81d:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e823:	90                   	nop
c000e824:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e829:	0f b6 c0             	movzx  eax,al
c000e82c:	83 e0 20             	and    eax,0x20
c000e82f:	74 6f                	je     c000e8a0 <tcp_input+0x9cc>
c000e831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e835:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e838:	0f b7 c0             	movzx  eax,ax
c000e83b:	3d 60 08 00 00       	cmp    eax,0x860
c000e840:	74 16                	je     c000e858 <tcp_input+0x984>
c000e842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e846:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e849:	83 c0 01             	add    eax,0x1
c000e84c:	89 c2                	mov    edx,eax
c000e84e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e852:	66 89 50 2c          	mov    WORD PTR [eax+0x2c],dx
c000e856:	66 90                	xchg   ax,ax
c000e858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e85c:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e862:	85 c0                	test   eax,eax
c000e864:	74 26                	je     c000e88c <tcp_input+0x9b8>
c000e866:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86a:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e870:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e874:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e877:	6a 00                	push   0x0
c000e879:	6a 00                	push   0x0
c000e87b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e87f:	52                   	push   edx
c000e880:	ff d0                	call   eax
c000e882:	83 c4 10             	add    esp,0x10
c000e885:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e889:	eb 09                	jmp    c000e894 <tcp_input+0x9c0>
c000e88b:	90                   	nop
c000e88c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e891:	8d 76 00             	lea    esi,[esi+0x0]
c000e894:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e899:	83 f8 f6             	cmp    eax,0xfffffff6
c000e89c:	74 2a                	je     c000e8c8 <tcp_input+0x9f4>
c000e89e:	66 90                	xchg   ax,ax
c000e8a0:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8aa:	83 ec 0c             	sub    esp,0xc
c000e8ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8b1:	e8 be 15 00 00       	call   c000fe74 <tcp_output>
c000e8b6:	83 c4 10             	add    esp,0x10
c000e8b9:	eb 11                	jmp    c000e8cc <tcp_input+0x9f8>
c000e8bb:	90                   	nop
c000e8bc:	90                   	nop
c000e8bd:	eb 0d                	jmp    c000e8cc <tcp_input+0x9f8>
c000e8bf:	90                   	nop
c000e8c0:	90                   	nop
c000e8c1:	eb 09                	jmp    c000e8cc <tcp_input+0x9f8>
c000e8c3:	90                   	nop
c000e8c4:	90                   	nop
c000e8c5:	eb 05                	jmp    c000e8cc <tcp_input+0x9f8>
c000e8c7:	90                   	nop
c000e8c8:	90                   	nop
c000e8c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e8cc:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e8d6:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e8e0:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e8e5:	85 c0                	test   eax,eax
c000e8e7:	0f 84 b7 00 00 00    	je     c000e9a4 <tcp_input+0xad0>
c000e8ed:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e8f2:	83 ec 0c             	sub    esp,0xc
c000e8f5:	50                   	push   eax
c000e8f6:	e8 d9 99 ff ff       	call   c00082d4 <pbuf_free>
c000e8fb:	83 c4 10             	add    esp,0x10
c000e8fe:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e908:	e9 97 00 00 00       	jmp    c000e9a4 <tcp_input+0xad0>
c000e90d:	8d 76 00             	lea    esi,[esi+0x0]
c000e910:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e915:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e919:	0f b7 c0             	movzx  eax,ax
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	50                   	push   eax
c000e920:	e8 f7 22 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000e925:	83 c4 10             	add    esp,0x10
c000e928:	0f b7 c0             	movzx  eax,ax
c000e92b:	83 e0 04             	and    eax,0x4
c000e92e:	75 64                	jne    c000e994 <tcp_input+0xac0>
c000e930:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e936:	83 c0 01             	add    eax,0x1
c000e939:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e93f:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e945:	83 c0 01             	add    eax,0x1
c000e948:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e94e:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e953:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e956:	0f b7 c8             	movzx  ecx,ax
c000e959:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e95e:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e962:	0f b7 d0             	movzx  edx,ax
c000e965:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e96b:	0f b7 d8             	movzx  ebx,ax
c000e96e:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e973:	01 c3                	add    ebx,eax
c000e975:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e97a:	83 ec 08             	sub    esp,0x8
c000e97d:	51                   	push   ecx
c000e97e:	52                   	push   edx
c000e97f:	68 90 68 03 c0       	push   0xc0036890
c000e984:	68 98 68 03 c0       	push   0xc0036898
c000e989:	53                   	push   ebx
c000e98a:	50                   	push   eax
c000e98b:	e8 70 19 00 00       	call   c0010300 <tcp_rst>
c000e990:	83 c4 20             	add    esp,0x20
c000e993:	90                   	nop
c000e994:	83 ec 0c             	sub    esp,0xc
c000e997:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e99b:	e8 34 99 ff ff       	call   c00082d4 <pbuf_free>
c000e9a0:	83 c4 10             	add    esp,0x10
c000e9a3:	90                   	nop
c000e9a4:	83 c4 18             	add    esp,0x18
c000e9a7:	5b                   	pop    ebx
c000e9a8:	c3                   	ret    
c000e9a9:	66 90                	xchg   ax,ax
c000e9ab:	90                   	nop

c000e9ac <tcp_output_alloc_header>:
c000e9ac:	83 ec 2c             	sub    esp,0x2c
c000e9af:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e9b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e9b7:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e9bc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e9c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e9c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9c9:	01 d0                	add    eax,edx
c000e9cb:	83 c0 14             	add    eax,0x14
c000e9ce:	0f b7 c0             	movzx  eax,ax
c000e9d1:	83 ec 04             	sub    esp,0x4
c000e9d4:	6a 00                	push   0x0
c000e9d6:	50                   	push   eax
c000e9d7:	6a 01                	push   0x1
c000e9d9:	e8 d2 9a ff ff       	call   c00084b0 <pbuf_alloc>
c000e9de:	83 c4 10             	add    esp,0x10
c000e9e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e9e5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000e9ea:	0f 84 18 01 00 00    	je     c000eb08 <tcp_output_alloc_header+0x15c>
c000e9f0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e9f5:	8d 50 13             	lea    edx,[eax+0x13]
c000e9f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e9fc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000ea00:	0f b7 c0             	movzx  eax,ax
c000ea03:	39 c2                	cmp    edx,eax
c000ea05:	7c 15                	jl     c000ea1c <tcp_output_alloc_header+0x70>
c000ea07:	83 ec 08             	sub    esp,0x8
c000ea0a:	68 00 06 03 c0       	push   0xc0030600
c000ea0f:	68 e6 f9 02 c0       	push   0xc002f9e6
c000ea14:	e8 b7 10 01 00       	call   c001fad0 <CPrintf>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea20:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ea2e:	0f b7 c0             	movzx  eax,ax
c000ea31:	83 ec 0c             	sub    esp,0xc
c000ea34:	50                   	push   eax
c000ea35:	e8 e2 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea3a:	83 c4 10             	add    esp,0x10
c000ea3d:	89 c2                	mov    edx,eax
c000ea3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea43:	66 89 10             	mov    WORD PTR [eax],dx
c000ea46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea4a:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ea4e:	0f b7 c0             	movzx  eax,ax
c000ea51:	83 ec 0c             	sub    esp,0xc
c000ea54:	50                   	push   eax
c000ea55:	e8 c2 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ea5a:	83 c4 10             	add    esp,0x10
c000ea5d:	89 c2                	mov    edx,eax
c000ea5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea63:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c000ea67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea6b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ea6f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea76:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ea79:	83 ec 0c             	sub    esp,0xc
c000ea7c:	50                   	push   eax
c000ea7d:	e8 be 21 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	89 c2                	mov    edx,eax
c000ea87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea8e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea93:	c1 e8 02             	shr    eax,0x2
c000ea96:	83 c0 05             	add    eax,0x5
c000ea99:	c1 e0 0c             	shl    eax,0xc
c000ea9c:	83 c8 10             	or     eax,0x10
c000ea9f:	0f b7 c0             	movzx  eax,ax
c000eaa2:	83 ec 0c             	sub    esp,0xc
c000eaa5:	50                   	push   eax
c000eaa6:	e8 71 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eaab:	83 c4 10             	add    esp,0x10
c000eaae:	89 c2                	mov    edx,eax
c000eab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eab4:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000eab8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eabc:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eac0:	0f b7 c0             	movzx  eax,ax
c000eac3:	83 ec 0c             	sub    esp,0xc
c000eac6:	50                   	push   eax
c000eac7:	e8 50 21 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000eacc:	83 c4 10             	add    esp,0x10
c000eacf:	89 c2                	mov    edx,eax
c000ead1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ead5:	66 89 50 0e          	mov    WORD PTR [eax+0xe],dx
c000ead9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eadd:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000eae3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eae7:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eaed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaf1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000eaf4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaf8:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000eafc:	0f b7 c0             	movzx  eax,ax
c000eaff:	01 c2                	add    edx,eax
c000eb01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb05:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000eb08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb0c:	83 c4 2c             	add    esp,0x2c
c000eb0f:	c3                   	ret    

c000eb10 <tcp_create_segment>:
c000eb10:	53                   	push   ebx
c000eb11:	83 ec 28             	sub    esp,0x28
c000eb14:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb18:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000eb1c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eb20:	88 d0                	mov    al,dl
c000eb22:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eb26:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb2b:	c1 e0 02             	shl    eax,0x2
c000eb2e:	83 e0 04             	and    eax,0x4
c000eb31:	88 c2                	mov    dl,al
c000eb33:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eb38:	83 e0 02             	and    eax,0x2
c000eb3b:	74 07                	je     c000eb44 <tcp_create_segment+0x34>
c000eb3d:	b0 0c                	mov    al,0xc
c000eb3f:	eb 07                	jmp    c000eb48 <tcp_create_segment+0x38>
c000eb41:	8d 76 00             	lea    esi,[esi+0x0]
c000eb44:	b0 00                	mov    al,0x0
c000eb46:	66 90                	xchg   ax,ax
c000eb48:	01 d0                	add    eax,edx
c000eb4a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eb4e:	83 ec 0c             	sub    esp,0xc
c000eb51:	6a 04                	push   0x4
c000eb53:	e8 90 8d ff ff       	call   c00078e8 <memp_malloc>
c000eb58:	83 c4 10             	add    esp,0x10
c000eb5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb5f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb64:	75 1a                	jne    c000eb80 <tcp_create_segment+0x70>
c000eb66:	83 ec 0c             	sub    esp,0xc
c000eb69:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb6d:	e8 62 97 ff ff       	call   c00082d4 <pbuf_free>
c000eb72:	83 c4 10             	add    esp,0x10
c000eb75:	b8 00 00 00 00       	mov    eax,0x0
c000eb7a:	e9 31 01 00 00       	jmp    c000ecb0 <tcp_create_segment+0x1a0>
c000eb7f:	90                   	nop
c000eb80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb84:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000eb88:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000eb8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb99:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eba0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eba4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eba7:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ebac:	89 d1                	mov    ecx,edx
c000ebae:	29 c1                	sub    ecx,eax
c000ebb0:	89 c8                	mov    eax,ecx
c000ebb2:	89 c2                	mov    edx,eax
c000ebb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebb8:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000ebbc:	83 ec 08             	sub    esp,0x8
c000ebbf:	6a 14                	push   0x14
c000ebc1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ebc5:	e8 6a 95 ff ff       	call   c0008134 <pbuf_header>
c000ebca:	83 c4 10             	add    esp,0x10
c000ebcd:	0f b6 c0             	movzx  eax,al
c000ebd0:	85 c0                	test   eax,eax
c000ebd2:	74 28                	je     c000ebfc <tcp_create_segment+0xec>
c000ebd4:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000ebda:	83 c0 01             	add    eax,0x1
c000ebdd:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000ebe3:	83 ec 0c             	sub    esp,0xc
c000ebe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ebea:	e8 71 b3 ff ff       	call   c0009f60 <tcp_seg_free>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	b8 00 00 00 00       	mov    eax,0x0
c000ebf7:	e9 b4 00 00 00       	jmp    c000ecb0 <tcp_create_segment+0x1a0>
c000ebfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec03:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ec0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec11:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ec14:	0f b7 c0             	movzx  eax,ax
c000ec17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec1b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	50                   	push   eax
c000ec22:	e8 f5 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec27:	83 c4 10             	add    esp,0x10
c000ec2a:	66 89 03             	mov    WORD PTR [ebx],ax
c000ec2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec31:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000ec35:	0f b7 c0             	movzx  eax,ax
c000ec38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec3c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec3f:	83 ec 0c             	sub    esp,0xc
c000ec42:	50                   	push   eax
c000ec43:	e8 d4 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec48:	83 c4 10             	add    esp,0x10
c000ec4b:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ec4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec53:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ec56:	83 ec 0c             	sub    esp,0xc
c000ec59:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ec5d:	e8 de 1f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000ec62:	83 c4 10             	add    esp,0x10
c000ec65:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ec68:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ec6d:	c1 e8 02             	shr    eax,0x2
c000ec70:	0f b6 c0             	movzx  eax,al
c000ec73:	83 c0 05             	add    eax,0x5
c000ec76:	c1 e0 0c             	shl    eax,0xc
c000ec79:	89 c2                	mov    edx,eax
c000ec7b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ec80:	09 d0                	or     eax,edx
c000ec82:	0f b7 c0             	movzx  eax,ax
c000ec85:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ec89:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	50                   	push   eax
c000ec90:	e8 87 1f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ec95:	83 c4 10             	add    esp,0x10
c000ec98:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ec9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eca0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eca3:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000eca9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecad:	8d 76 00             	lea    esi,[esi+0x0]
c000ecb0:	83 c4 28             	add    esp,0x28
c000ecb3:	5b                   	pop    ebx
c000ecb4:	c3                   	ret    
c000ecb5:	8d 76 00             	lea    esi,[esi+0x0]

c000ecb8 <tcp_pbuf_prealloc>:
c000ecb8:	53                   	push   ebx
c000ecb9:	83 ec 28             	sub    esp,0x28
c000ecbc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ecc0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ecc4:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ecc8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000eccc:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ecd1:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ecd6:	88 d8                	mov    al,bl
c000ecd8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ecdc:	88 c8                	mov    al,cl
c000ecde:	88 04 24             	mov    BYTE PTR [esp],al
c000ece1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ece5:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ecea:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ecef:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ecf4:	39 c2                	cmp    edx,eax
c000ecf6:	73 64                	jae    c000ed5c <tcp_pbuf_prealloc+0xa4>
c000ecf8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ecfd:	83 e0 02             	and    eax,0x2
c000ed00:	75 2e                	jne    c000ed30 <tcp_pbuf_prealloc+0x78>
c000ed02:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ed09:	0f b6 c0             	movzx  eax,al
c000ed0c:	83 e0 40             	and    eax,0x40
c000ed0f:	75 4b                	jne    c000ed5c <tcp_pbuf_prealloc+0xa4>
c000ed11:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ed15:	85 c0                	test   eax,eax
c000ed17:	74 17                	je     c000ed30 <tcp_pbuf_prealloc+0x78>
c000ed19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed1d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ed20:	85 c0                	test   eax,eax
c000ed22:	75 0c                	jne    c000ed30 <tcp_pbuf_prealloc+0x78>
c000ed24:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed28:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ed2b:	85 c0                	test   eax,eax
c000ed2d:	74 2d                	je     c000ed5c <tcp_pbuf_prealloc+0xa4>
c000ed2f:	90                   	nop
c000ed30:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed35:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000ed3b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ed40:	39 c2                	cmp    edx,eax
c000ed42:	7d 0c                	jge    c000ed50 <tcp_pbuf_prealloc+0x98>
c000ed44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed48:	05 18 02 00 00       	add    eax,0x218
c000ed4d:	eb 05                	jmp    c000ed54 <tcp_pbuf_prealloc+0x9c>
c000ed4f:	90                   	nop
c000ed50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed54:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ed59:	8d 76 00             	lea    esi,[esi+0x0]
c000ed5c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000ed61:	83 ec 04             	sub    esp,0x4
c000ed64:	6a 00                	push   0x0
c000ed66:	50                   	push   eax
c000ed67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ed6b:	e8 40 97 ff ff       	call   c00084b0 <pbuf_alloc>
c000ed70:	83 c4 10             	add    esp,0x10
c000ed73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed77:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ed7c:	75 0a                	jne    c000ed88 <tcp_pbuf_prealloc+0xd0>
c000ed7e:	b8 00 00 00 00       	mov    eax,0x0
c000ed83:	eb 5f                	jmp    c000ede4 <tcp_pbuf_prealloc+0x12c>
c000ed85:	8d 76 00             	lea    esi,[esi+0x0]
c000ed88:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed8e:	85 c0                	test   eax,eax
c000ed90:	74 16                	je     c000eda8 <tcp_pbuf_prealloc+0xf0>
c000ed92:	83 ec 08             	sub    esp,0x8
c000ed95:	68 84 08 03 c0       	push   0xc0030884
c000ed9a:	68 e6 f9 02 c0       	push   0xc002f9e6
c000ed9f:	e8 2c 0d 01 00       	call   c001fad0 <CPrintf>
c000eda4:	83 c4 10             	add    esp,0x10
c000eda7:	90                   	nop
c000eda8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edac:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000edb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000edb4:	89 d1                	mov    ecx,edx
c000edb6:	29 c1                	sub    ecx,eax
c000edb8:	89 c8                	mov    eax,ecx
c000edba:	89 c2                	mov    edx,eax
c000edbc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edc0:	66 89 10             	mov    WORD PTR [eax],dx
c000edc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000edcb:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000edcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edd3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000edd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edda:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000edde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ede2:	66 90                	xchg   ax,ax
c000ede4:	83 c4 28             	add    esp,0x28
c000ede7:	5b                   	pop    ebx
c000ede8:	c3                   	ret    
c000ede9:	8d 76 00             	lea    esi,[esi+0x0]

c000edec <tcp_write_checks>:
c000edec:	83 ec 1c             	sub    esp,0x1c
c000edef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000edf3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000edf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edfc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000edff:	83 f8 04             	cmp    eax,0x4
c000ee02:	74 2c                	je     c000ee30 <tcp_write_checks+0x44>
c000ee04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee08:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee0b:	83 f8 07             	cmp    eax,0x7
c000ee0e:	74 20                	je     c000ee30 <tcp_write_checks+0x44>
c000ee10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee17:	83 f8 02             	cmp    eax,0x2
c000ee1a:	74 14                	je     c000ee30 <tcp_write_checks+0x44>
c000ee1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ee23:	83 f8 03             	cmp    eax,0x3
c000ee26:	74 08                	je     c000ee30 <tcp_write_checks+0x44>
c000ee28:	b0 f3                	mov    al,0xf3
c000ee2a:	e9 f9 00 00 00       	jmp    c000ef28 <tcp_write_checks+0x13c>
c000ee2f:	90                   	nop
c000ee30:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ee35:	85 c0                	test   eax,eax
c000ee37:	75 07                	jne    c000ee40 <tcp_write_checks+0x54>
c000ee39:	b0 00                	mov    al,0x0
c000ee3b:	e9 e8 00 00 00       	jmp    c000ef28 <tcp_write_checks+0x13c>
c000ee40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee44:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000ee48:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ee4d:	0f b7 c0             	movzx  eax,ax
c000ee50:	39 c2                	cmp    edx,eax
c000ee52:	76 1c                	jbe    c000ee70 <tcp_write_checks+0x84>
c000ee54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee58:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee5b:	83 c8 80             	or     eax,0xffffff80
c000ee5e:	88 c2                	mov    dl,al
c000ee60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee64:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee67:	b0 ff                	mov    al,0xff
c000ee69:	e9 ba 00 00 00       	jmp    c000ef28 <tcp_write_checks+0x13c>
c000ee6e:	66 90                	xchg   ax,ax
c000ee70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee74:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee77:	0f b7 c0             	movzx  eax,ax
c000ee7a:	83 f8 01             	cmp    eax,0x1
c000ee7d:	77 11                	ja     c000ee90 <tcp_write_checks+0xa4>
c000ee7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee83:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee86:	0f b7 c0             	movzx  eax,ax
c000ee89:	3d fc ff 00 00       	cmp    eax,0xfffc
c000ee8e:	76 28                	jbe    c000eeb8 <tcp_write_checks+0xcc>
c000ee90:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000ee96:	83 c0 01             	add    eax,0x1
c000ee99:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ee9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eea6:	83 c8 80             	or     eax,0xffffff80
c000eea9:	88 c2                	mov    dl,al
c000eeab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeaf:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000eeb2:	b0 ff                	mov    al,0xff
c000eeb4:	eb 72                	jmp    c000ef28 <tcp_write_checks+0x13c>
c000eeb6:	66 90                	xchg   ax,ax
c000eeb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eebf:	0f b7 c0             	movzx  eax,ax
c000eec2:	85 c0                	test   eax,eax
c000eec4:	74 2e                	je     c000eef4 <tcp_write_checks+0x108>
c000eec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeca:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eecd:	85 c0                	test   eax,eax
c000eecf:	75 53                	jne    c000ef24 <tcp_write_checks+0x138>
c000eed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eed5:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000eed8:	85 c0                	test   eax,eax
c000eeda:	75 48                	jne    c000ef24 <tcp_write_checks+0x138>
c000eedc:	83 ec 08             	sub    esp,0x8
c000eedf:	68 30 06 03 c0       	push   0xc0030630
c000eee4:	68 e6 f9 02 c0       	push   0xc002f9e6
c000eee9:	e8 e2 0b 01 00       	call   c001fad0 <CPrintf>
c000eeee:	83 c4 10             	add    esp,0x10
c000eef1:	eb 31                	jmp    c000ef24 <tcp_write_checks+0x138>
c000eef3:	90                   	nop
c000eef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eef8:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000eefb:	85 c0                	test   eax,eax
c000eefd:	75 0d                	jne    c000ef0c <tcp_write_checks+0x120>
c000eeff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef03:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef06:	85 c0                	test   eax,eax
c000ef08:	74 1a                	je     c000ef24 <tcp_write_checks+0x138>
c000ef0a:	66 90                	xchg   ax,ax
c000ef0c:	83 ec 08             	sub    esp,0x8
c000ef0f:	68 6c 06 03 c0       	push   0xc003066c
c000ef14:	68 e6 f9 02 c0       	push   0xc002f9e6
c000ef19:	e8 b2 0b 01 00       	call   c001fad0 <CPrintf>
c000ef1e:	83 c4 10             	add    esp,0x10
c000ef21:	8d 76 00             	lea    esi,[esi+0x0]
c000ef24:	b0 00                	mov    al,0x0
c000ef26:	66 90                	xchg   ax,ax
c000ef28:	83 c4 1c             	add    esp,0x1c
c000ef2b:	c3                   	ret    

c000ef2c <tcp_write>:
c000ef2c:	56                   	push   esi
c000ef2d:	53                   	push   ebx
c000ef2e:	83 ec 54             	sub    esp,0x54
c000ef31:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ef35:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000ef39:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ef3e:	88 d0                	mov    al,dl
c000ef40:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ef44:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef4c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000ef54:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000ef5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000ef64:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000ef6c:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000ef73:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000ef78:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000ef7d:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000ef84:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000ef8b:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000ef90:	75 1e                	jne    c000efb0 <tcp_write+0x84>
c000ef92:	83 ec 08             	sub    esp,0x8
c000ef95:	68 a0 06 03 c0       	push   0xc00306a0
c000ef9a:	68 e6 f9 02 c0       	push   0xc002f9e6
c000ef9f:	e8 2c 0b 01 00       	call   c001fad0 <CPrintf>
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	b0 f2                	mov    al,0xf2
c000efa9:	e9 1e 08 00 00       	jmp    c000f7cc <tcp_write+0x8a0>
c000efae:	66 90                	xchg   ax,ax
c000efb0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000efb5:	83 ec 08             	sub    esp,0x8
c000efb8:	50                   	push   eax
c000efb9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000efbd:	e8 2a fe ff ff       	call   c000edec <tcp_write_checks>
c000efc2:	83 c4 10             	add    esp,0x10
c000efc5:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000efc9:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000efce:	85 c0                	test   eax,eax
c000efd0:	74 0a                	je     c000efdc <tcp_write+0xb0>
c000efd2:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000efd6:	e9 f1 07 00 00       	jmp    c000f7cc <tcp_write+0x8a0>
c000efdb:	90                   	nop
c000efdc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efe0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000efe3:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000efe8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efec:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000efef:	85 c0                	test   eax,eax
c000eff1:	0f 84 79 02 00 00    	je     c000f270 <tcp_write+0x344>
c000eff7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000effb:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000effe:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f002:	eb 0c                	jmp    c000f010 <tcp_write+0xe4>
c000f004:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f008:	8b 00                	mov    eax,DWORD PTR [eax]
c000f00a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f00e:	66 90                	xchg   ax,ax
c000f010:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f014:	8b 00                	mov    eax,DWORD PTR [eax]
c000f016:	85 c0                	test   eax,eax
c000f018:	75 ea                	jne    c000f004 <tcp_write+0xd8>
c000f01a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f01e:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f021:	0f b6 c0             	movzx  eax,al
c000f024:	c1 e0 02             	shl    eax,0x2
c000f027:	83 e0 04             	and    eax,0x4
c000f02a:	89 c2                	mov    edx,eax
c000f02c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f030:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000f033:	0f b6 c0             	movzx  eax,al
c000f036:	83 e0 02             	and    eax,0x2
c000f039:	74 09                	je     c000f044 <tcp_write+0x118>
c000f03b:	b8 0c 00 00 00       	mov    eax,0xc
c000f040:	eb 0a                	jmp    c000f04c <tcp_write+0x120>
c000f042:	66 90                	xchg   ax,ax
c000f044:	b8 00 00 00 00       	mov    eax,0x0
c000f049:	8d 76 00             	lea    esi,[esi+0x0]
c000f04c:	01 d0                	add    eax,edx
c000f04e:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000f053:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f057:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f05a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f05e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f061:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000f066:	01 c8                	add    eax,ecx
c000f068:	89 d6                	mov    esi,edx
c000f06a:	29 c6                	sub    esi,eax
c000f06c:	89 f0                	mov    eax,esi
c000f06e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f073:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f077:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f07b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f080:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f085:	0f b7 c0             	movzx  eax,ax
c000f088:	85 c0                	test   eax,eax
c000f08a:	0f 84 84 00 00 00    	je     c000f114 <tcp_write+0x1e8>
c000f090:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f095:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f09a:	39 c2                	cmp    edx,eax
c000f09c:	76 16                	jbe    c000f0b4 <tcp_write+0x188>
c000f09e:	83 ec 08             	sub    esp,0x8
c000f0a1:	68 d4 06 03 c0       	push   0xc00306d4
c000f0a6:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f0ab:	e8 20 0a 01 00       	call   c001fad0 <CPrintf>
c000f0b0:	83 c4 10             	add    esp,0x10
c000f0b3:	90                   	nop
c000f0b4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f0bc:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0c5:	0f b7 d8             	movzx  ebx,ax
c000f0c8:	0f b7 ca             	movzx  ecx,dx
c000f0cb:	39 cb                	cmp    ebx,ecx
c000f0cd:	76 05                	jbe    c000f0d4 <tcp_write+0x1a8>
c000f0cf:	89 d0                	mov    eax,edx
c000f0d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0d4:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f0d9:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f0de:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f0e3:	01 d0                	add    eax,edx
c000f0e5:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f0ea:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f0ef:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f0f4:	89 d6                	mov    esi,edx
c000f0f6:	29 c6                	sub    esi,eax
c000f0f8:	89 f0                	mov    eax,esi
c000f0fa:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f0ff:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f103:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f108:	89 d6                	mov    esi,edx
c000f10a:	29 c6                	sub    esi,eax
c000f10c:	89 f0                	mov    eax,esi
c000f10e:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f113:	90                   	nop
c000f114:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f119:	0f b7 c0             	movzx  eax,ax
c000f11c:	85 c0                	test   eax,eax
c000f11e:	74 24                	je     c000f144 <tcp_write+0x218>
c000f120:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f125:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f12a:	39 c2                	cmp    edx,eax
c000f12c:	74 16                	je     c000f144 <tcp_write+0x218>
c000f12e:	83 ec 08             	sub    esp,0x8
c000f131:	68 98 08 03 c0       	push   0xc0030898
c000f136:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f13b:	e8 90 09 01 00       	call   c001fad0 <CPrintf>
c000f140:	83 c4 10             	add    esp,0x10
c000f143:	90                   	nop
c000f144:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f149:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f14e:	39 c2                	cmp    edx,eax
c000f150:	0f 83 ca 03 00 00    	jae    c000f520 <tcp_write+0x5f4>
c000f156:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f15b:	85 c0                	test   eax,eax
c000f15d:	0f 84 bd 03 00 00    	je     c000f520 <tcp_write+0x5f4>
c000f163:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f167:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f16a:	0f b7 c0             	movzx  eax,ax
c000f16d:	85 c0                	test   eax,eax
c000f16f:	0f 84 ab 03 00 00    	je     c000f520 <tcp_write+0x5f4>
c000f175:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f17a:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f17f:	29 c2                	sub    edx,eax
c000f181:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f186:	39 c2                	cmp    edx,eax
c000f188:	0f 4e c2             	cmovle eax,edx
c000f18b:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f190:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f194:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f198:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f19d:	83 e0 01             	and    eax,0x1
c000f1a0:	74 62                	je     c000f204 <tcp_write+0x2d8>
c000f1a2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f1a7:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f1ac:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f1b1:	83 ec 04             	sub    esp,0x4
c000f1b4:	6a 01                	push   0x1
c000f1b6:	51                   	push   ecx
c000f1b7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f1bb:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f1bf:	51                   	push   ecx
c000f1c0:	52                   	push   edx
c000f1c1:	50                   	push   eax
c000f1c2:	6a 03                	push   0x3
c000f1c4:	e8 ef fa ff ff       	call   c000ecb8 <tcp_pbuf_prealloc>
c000f1c9:	83 c4 20             	add    esp,0x20
c000f1cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f1d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f1d5:	0f 84 4d 05 00 00    	je     c000f728 <tcp_write+0x7fc>
c000f1db:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f1e0:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f1e5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f1e9:	01 c1                	add    ecx,eax
c000f1eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f1ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1f2:	83 ec 04             	sub    esp,0x4
c000f1f5:	52                   	push   edx
c000f1f6:	51                   	push   ecx
c000f1f7:	50                   	push   eax
c000f1f8:	e8 7d 11 ff ff       	call   c000037a <memcpy>
c000f1fd:	83 c4 10             	add    esp,0x10
c000f200:	eb 3a                	jmp    c000f23c <tcp_write+0x310>
c000f202:	66 90                	xchg   ax,ax
c000f204:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f209:	83 ec 04             	sub    esp,0x4
c000f20c:	6a 01                	push   0x1
c000f20e:	50                   	push   eax
c000f20f:	6a 03                	push   0x3
c000f211:	e8 9a 92 ff ff       	call   c00084b0 <pbuf_alloc>
c000f216:	83 c4 10             	add    esp,0x10
c000f219:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f21d:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f222:	0f 84 04 05 00 00    	je     c000f72c <tcp_write+0x800>
c000f228:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f22d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f231:	01 c2                	add    edx,eax
c000f233:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f237:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f23a:	66 90                	xchg   ax,ax
c000f23c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f241:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f245:	01 d0                	add    eax,edx
c000f247:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f24c:	83 ec 0c             	sub    esp,0xc
c000f24f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f253:	e8 58 98 ff ff       	call   c0008ab0 <pbuf_clen>
c000f258:	83 c4 10             	add    esp,0x10
c000f25b:	0f b6 c0             	movzx  eax,al
c000f25e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f262:	01 d0                	add    eax,edx
c000f264:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f269:	e9 b2 02 00 00       	jmp    c000f520 <tcp_write+0x5f4>
c000f26e:	66 90                	xchg   ax,ax
c000f270:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f274:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f278:	0f b7 c0             	movzx  eax,ax
c000f27b:	85 c0                	test   eax,eax
c000f27d:	0f 84 9d 02 00 00    	je     c000f520 <tcp_write+0x5f4>
c000f283:	83 ec 08             	sub    esp,0x8
c000f286:	68 f4 06 03 c0       	push   0xc00306f4
c000f28b:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f290:	e8 3b 08 01 00       	call   c001fad0 <CPrintf>
c000f295:	83 c4 10             	add    esp,0x10
c000f298:	e9 83 02 00 00       	jmp    c000f520 <tcp_write+0x5f4>
c000f29d:	8d 76 00             	lea    esi,[esi+0x0]
c000f2a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f2a4:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f2a9:	89 d3                	mov    ebx,edx
c000f2ab:	29 c3                	sub    ebx,eax
c000f2ad:	89 d8                	mov    eax,ebx
c000f2af:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f2b4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f2b8:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f2bb:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f2c0:	89 d6                	mov    esi,edx
c000f2c2:	29 c6                	sub    esi,eax
c000f2c4:	89 f0                	mov    eax,esi
c000f2c6:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f2cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f2cf:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f2d4:	0f b7 d8             	movzx  ebx,ax
c000f2d7:	0f b7 ca             	movzx  ecx,dx
c000f2da:	39 cb                	cmp    ebx,ecx
c000f2dc:	76 02                	jbe    c000f2e0 <tcp_write+0x3b4>
c000f2de:	89 d0                	mov    eax,edx
c000f2e0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f2e5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f2ea:	83 e0 01             	and    eax,0x1
c000f2ed:	0f 84 b1 00 00 00    	je     c000f3a4 <tcp_write+0x478>
c000f2f3:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f2f8:	0f 94 c0             	sete   al
c000f2fb:	0f b6 d8             	movzx  ebx,al
c000f2fe:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f303:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f307:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f30a:	0f b7 d0             	movzx  edx,ax
c000f30d:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f312:	66 8b 74 24 1e       	mov    si,WORD PTR [esp+0x1e]
c000f317:	01 f0                	add    eax,esi
c000f319:	0f b7 c0             	movzx  eax,ax
c000f31c:	83 ec 04             	sub    esp,0x4
c000f31f:	53                   	push   ebx
c000f320:	51                   	push   ecx
c000f321:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f325:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f329:	51                   	push   ecx
c000f32a:	52                   	push   edx
c000f32b:	50                   	push   eax
c000f32c:	6a 00                	push   0x0
c000f32e:	e8 85 f9 ff ff       	call   c000ecb8 <tcp_pbuf_prealloc>
c000f333:	83 c4 20             	add    esp,0x20
c000f336:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f33a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f33f:	0f 84 eb 03 00 00    	je     c000f730 <tcp_write+0x804>
c000f345:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f349:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f34d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f352:	0f b7 c0             	movzx  eax,ax
c000f355:	39 c2                	cmp    edx,eax
c000f357:	76 17                	jbe    c000f370 <tcp_write+0x444>
c000f359:	83 ec 08             	sub    esp,0x8
c000f35c:	68 24 07 03 c0       	push   0xc0030724
c000f361:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f366:	e8 65 07 01 00       	call   c001fad0 <CPrintf>
c000f36b:	83 c4 10             	add    esp,0x10
c000f36e:	66 90                	xchg   ax,ax
c000f370:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f375:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f37a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f37e:	01 d1                	add    ecx,edx
c000f380:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f384:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f387:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f38c:	01 da                	add    edx,ebx
c000f38e:	83 ec 04             	sub    esp,0x4
c000f391:	50                   	push   eax
c000f392:	51                   	push   ecx
c000f393:	52                   	push   edx
c000f394:	e8 e1 0f ff ff       	call   c000037a <memcpy>
c000f399:	83 c4 10             	add    esp,0x10
c000f39c:	e9 a7 00 00 00       	jmp    c000f448 <tcp_write+0x51c>
c000f3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f3a4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f3a9:	0f b7 c0             	movzx  eax,ax
c000f3ac:	85 c0                	test   eax,eax
c000f3ae:	74 18                	je     c000f3c8 <tcp_write+0x49c>
c000f3b0:	83 ec 08             	sub    esp,0x8
c000f3b3:	68 b6 08 03 c0       	push   0xc00308b6
c000f3b8:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f3bd:	e8 0e 07 01 00       	call   c001fad0 <CPrintf>
c000f3c2:	83 c4 10             	add    esp,0x10
c000f3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f3c8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f3cd:	83 ec 04             	sub    esp,0x4
c000f3d0:	6a 01                	push   0x1
c000f3d2:	50                   	push   eax
c000f3d3:	6a 00                	push   0x0
c000f3d5:	e8 d6 90 ff ff       	call   c00084b0 <pbuf_alloc>
c000f3da:	83 c4 10             	add    esp,0x10
c000f3dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f3e1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f3e6:	0f 84 48 03 00 00    	je     c000f734 <tcp_write+0x808>
c000f3ec:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f3f1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f3f5:	01 c2                	add    edx,eax
c000f3f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3fe:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f403:	83 ec 04             	sub    esp,0x4
c000f406:	6a 00                	push   0x0
c000f408:	50                   	push   eax
c000f409:	6a 00                	push   0x0
c000f40b:	e8 a0 90 ff ff       	call   c00084b0 <pbuf_alloc>
c000f410:	83 c4 10             	add    esp,0x10
c000f413:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f417:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f41c:	75 16                	jne    c000f434 <tcp_write+0x508>
c000f41e:	83 ec 0c             	sub    esp,0xc
c000f421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f425:	e8 aa 8e ff ff       	call   c00082d4 <pbuf_free>
c000f42a:	83 c4 10             	add    esp,0x10
c000f42d:	e9 0a 03 00 00       	jmp    c000f73c <tcp_write+0x810>
c000f432:	66 90                	xchg   ax,ax
c000f434:	83 ec 08             	sub    esp,0x8
c000f437:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f43b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f43f:	e8 d4 96 ff ff       	call   c0008b18 <pbuf_cat>
c000f444:	83 c4 10             	add    esp,0x10
c000f447:	90                   	nop
c000f448:	83 ec 0c             	sub    esp,0xc
c000f44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f44f:	e8 5c 96 ff ff       	call   c0008ab0 <pbuf_clen>
c000f454:	83 c4 10             	add    esp,0x10
c000f457:	0f b6 c0             	movzx  eax,al
c000f45a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f45e:	01 d0                	add    eax,edx
c000f460:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f465:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f46a:	83 f8 02             	cmp    eax,0x2
c000f46d:	77 0d                	ja     c000f47c <tcp_write+0x550>
c000f46f:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f474:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f479:	76 15                	jbe    c000f490 <tcp_write+0x564>
c000f47b:	90                   	nop
c000f47c:	83 ec 0c             	sub    esp,0xc
c000f47f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f483:	e8 4c 8e ff ff       	call   c00082d4 <pbuf_free>
c000f488:	83 c4 10             	add    esp,0x10
c000f48b:	e9 ac 02 00 00       	jmp    c000f73c <tcp_write+0x810>
c000f490:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f495:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f499:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f49c:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f4a1:	01 ca                	add    edx,ecx
c000f4a3:	83 ec 0c             	sub    esp,0xc
c000f4a6:	50                   	push   eax
c000f4a7:	52                   	push   edx
c000f4a8:	6a 00                	push   0x0
c000f4aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f4ae:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f4b2:	e8 59 f6 ff ff       	call   c000eb10 <tcp_create_segment>
c000f4b7:	83 c4 20             	add    esp,0x20
c000f4ba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f4be:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f4c3:	0f 84 6f 02 00 00    	je     c000f738 <tcp_write+0x80c>
c000f4c9:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f4ce:	75 0c                	jne    c000f4dc <tcp_write+0x5b0>
c000f4d0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f4d4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f4d8:	eb 2a                	jmp    c000f504 <tcp_write+0x5d8>
c000f4da:	66 90                	xchg   ax,ax
c000f4dc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f4e1:	75 15                	jne    c000f4f8 <tcp_write+0x5cc>
c000f4e3:	83 ec 08             	sub    esp,0x8
c000f4e6:	68 c4 08 03 c0       	push   0xc00308c4
c000f4eb:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f4f0:	e8 db 05 01 00       	call   c001fad0 <CPrintf>
c000f4f5:	83 c4 10             	add    esp,0x10
c000f4f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f4fc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f500:	89 10                	mov    DWORD PTR [eax],edx
c000f502:	66 90                	xchg   ax,ax
c000f504:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f508:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f50c:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f511:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f516:	01 d0                	add    eax,edx
c000f518:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f51d:	8d 76 00             	lea    esi,[esi+0x0]
c000f520:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f525:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f52a:	39 c2                	cmp    edx,eax
c000f52c:	0f 82 6e fd ff ff    	jb     c000f2a0 <tcp_write+0x374>
c000f532:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f537:	85 c0                	test   eax,eax
c000f539:	0f 84 a1 00 00 00    	je     c000f5e0 <tcp_write+0x6b4>
c000f53f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f543:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f546:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f54a:	eb 74                	jmp    c000f5c0 <tcp_write+0x694>
c000f54c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f550:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f553:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f558:	01 d0                	add    eax,edx
c000f55a:	89 c2                	mov    edx,eax
c000f55c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f560:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f564:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f568:	8b 00                	mov    eax,DWORD PTR [eax]
c000f56a:	85 c0                	test   eax,eax
c000f56c:	75 46                	jne    c000f5b4 <tcp_write+0x688>
c000f56e:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f573:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f577:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000f57a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f57e:	66 8b 52 0a          	mov    dx,WORD PTR [edx+0xa]
c000f582:	0f b7 d2             	movzx  edx,dx
c000f585:	01 ca                	add    edx,ecx
c000f587:	83 ec 04             	sub    esp,0x4
c000f58a:	50                   	push   eax
c000f58b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f58f:	52                   	push   edx
c000f590:	e8 e5 0d ff ff       	call   c000037a <memcpy>
c000f595:	83 c4 10             	add    esp,0x10
c000f598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f59c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f5a0:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5a5:	01 d0                	add    eax,edx
c000f5a7:	89 c2                	mov    edx,eax
c000f5a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5ad:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000f5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f5b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ba:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5be:	66 90                	xchg   ax,ax
c000f5c0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f5c5:	75 85                	jne    c000f54c <tcp_write+0x620>
c000f5c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f5ce:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f5d3:	01 d0                	add    eax,edx
c000f5d5:	89 c2                	mov    edx,eax
c000f5d7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5db:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f5df:	90                   	nop
c000f5e0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f5e5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5e9:	66 89 50 76          	mov    WORD PTR [eax+0x76],dx
c000f5ed:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f5f2:	74 50                	je     c000f644 <tcp_write+0x718>
c000f5f4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f5f9:	75 15                	jne    c000f610 <tcp_write+0x6e4>
c000f5fb:	83 ec 08             	sub    esp,0x8
c000f5fe:	68 64 07 03 c0       	push   0xc0030764
c000f603:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f608:	e8 c3 04 01 00       	call   c001fad0 <CPrintf>
c000f60d:	83 c4 10             	add    esp,0x10
c000f610:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f614:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f617:	83 ec 08             	sub    esp,0x8
c000f61a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f61e:	50                   	push   eax
c000f61f:	e8 f4 94 ff ff       	call   c0008b18 <pbuf_cat>
c000f624:	83 c4 10             	add    esp,0x10
c000f627:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f62b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f62e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f632:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f635:	01 d0                	add    eax,edx
c000f637:	89 c2                	mov    edx,eax
c000f639:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f63d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000f641:	8d 76 00             	lea    esi,[esi+0x0]
c000f644:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f649:	75 0d                	jne    c000f658 <tcp_write+0x72c>
c000f64b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f64f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f653:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f656:	eb 0c                	jmp    c000f664 <tcp_write+0x738>
c000f658:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f65c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f660:	89 10                	mov    DWORD PTR [eax],edx
c000f662:	66 90                	xchg   ax,ax
c000f664:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f668:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f66b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f670:	01 c2                	add    edx,eax
c000f672:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f676:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f679:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f67d:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f685:	89 d3                	mov    ebx,edx
c000f687:	29 c3                	sub    ebx,eax
c000f689:	89 d8                	mov    eax,ebx
c000f68b:	89 c2                	mov    edx,eax
c000f68d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f691:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000f695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f699:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f69d:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000f6a1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6a5:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6a8:	0f b7 c0             	movzx  eax,ax
c000f6ab:	85 c0                	test   eax,eax
c000f6ad:	74 2d                	je     c000f6dc <tcp_write+0x7b0>
c000f6af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6b3:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f6b6:	85 c0                	test   eax,eax
c000f6b8:	75 22                	jne    c000f6dc <tcp_write+0x7b0>
c000f6ba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6be:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f6c1:	85 c0                	test   eax,eax
c000f6c3:	75 17                	jne    c000f6dc <tcp_write+0x7b0>
c000f6c5:	83 ec 08             	sub    esp,0x8
c000f6c8:	68 d5 08 03 c0       	push   0xc00308d5
c000f6cd:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f6d2:	e8 f9 03 01 00       	call   c001fad0 <CPrintf>
c000f6d7:	83 c4 10             	add    esp,0x10
c000f6da:	66 90                	xchg   ax,ax
c000f6dc:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f6e1:	74 3d                	je     c000f720 <tcp_write+0x7f4>
c000f6e3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f6ea:	85 c0                	test   eax,eax
c000f6ec:	74 32                	je     c000f720 <tcp_write+0x7f4>
c000f6ee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f6f3:	83 e0 02             	and    eax,0x2
c000f6f6:	75 28                	jne    c000f720 <tcp_write+0x7f4>
c000f6f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f6fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f6ff:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f703:	83 ec 0c             	sub    esp,0xc
c000f706:	6a 08                	push   0x8
c000f708:	e8 0f 15 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000f70d:	83 c4 10             	add    esp,0x10
c000f710:	89 c2                	mov    edx,eax
c000f712:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f716:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f719:	09 da                	or     edx,ebx
c000f71b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000f71f:	90                   	nop
c000f720:	b0 00                	mov    al,0x0
c000f722:	e9 a5 00 00 00       	jmp    c000f7cc <tcp_write+0x8a0>
c000f727:	90                   	nop
c000f728:	90                   	nop
c000f729:	eb 11                	jmp    c000f73c <tcp_write+0x810>
c000f72b:	90                   	nop
c000f72c:	90                   	nop
c000f72d:	eb 0d                	jmp    c000f73c <tcp_write+0x810>
c000f72f:	90                   	nop
c000f730:	90                   	nop
c000f731:	eb 09                	jmp    c000f73c <tcp_write+0x810>
c000f733:	90                   	nop
c000f734:	90                   	nop
c000f735:	eb 05                	jmp    c000f73c <tcp_write+0x810>
c000f737:	90                   	nop
c000f738:	90                   	nop
c000f739:	8d 76 00             	lea    esi,[esi+0x0]
c000f73c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f740:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f743:	83 c8 80             	or     eax,0xffffff80
c000f746:	88 c2                	mov    dl,al
c000f748:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f74c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f74f:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f755:	83 c0 01             	add    eax,0x1
c000f758:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f75e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f763:	74 0f                	je     c000f774 <tcp_write+0x848>
c000f765:	83 ec 0c             	sub    esp,0xc
c000f768:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f76c:	e8 63 8b ff ff       	call   c00082d4 <pbuf_free>
c000f771:	83 c4 10             	add    esp,0x10
c000f774:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f779:	74 11                	je     c000f78c <tcp_write+0x860>
c000f77b:	83 ec 0c             	sub    esp,0xc
c000f77e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f782:	e8 1d a8 ff ff       	call   c0009fa4 <tcp_segs_free>
c000f787:	83 c4 10             	add    esp,0x10
c000f78a:	66 90                	xchg   ax,ax
c000f78c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f790:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f793:	0f b7 c0             	movzx  eax,ax
c000f796:	85 c0                	test   eax,eax
c000f798:	74 2e                	je     c000f7c8 <tcp_write+0x89c>
c000f79a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f79e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f7a1:	85 c0                	test   eax,eax
c000f7a3:	75 23                	jne    c000f7c8 <tcp_write+0x89c>
c000f7a5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f7a9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f7ac:	85 c0                	test   eax,eax
c000f7ae:	75 18                	jne    c000f7c8 <tcp_write+0x89c>
c000f7b0:	83 ec 08             	sub    esp,0x8
c000f7b3:	68 d5 08 03 c0       	push   0xc00308d5
c000f7b8:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f7bd:	e8 0e 03 01 00       	call   c001fad0 <CPrintf>
c000f7c2:	83 c4 10             	add    esp,0x10
c000f7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000f7c8:	b0 ff                	mov    al,0xff
c000f7ca:	66 90                	xchg   ax,ax
c000f7cc:	83 c4 54             	add    esp,0x54
c000f7cf:	5b                   	pop    ebx
c000f7d0:	5e                   	pop    esi
c000f7d1:	c3                   	ret    
c000f7d2:	66 90                	xchg   ax,ax

c000f7d4 <tcp_enqueue_flags>:
c000f7d4:	83 ec 3c             	sub    esp,0x3c
c000f7d7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7db:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f7df:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f7e4:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f7e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f7ee:	83 e0 03             	and    eax,0x3
c000f7f1:	75 15                	jne    c000f808 <tcp_enqueue_flags+0x34>
c000f7f3:	83 ec 08             	sub    esp,0x8
c000f7f6:	68 9c 07 03 c0       	push   0xc003079c
c000f7fb:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f800:	e8 cb 02 01 00       	call   c001fad0 <CPrintf>
c000f805:	83 c4 10             	add    esp,0x10
c000f808:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f80c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f80f:	0f b7 c0             	movzx  eax,ax
c000f812:	83 f8 01             	cmp    eax,0x1
c000f815:	77 11                	ja     c000f828 <tcp_enqueue_flags+0x54>
c000f817:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f81b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f81e:	0f b7 c0             	movzx  eax,ax
c000f821:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f826:	76 2c                	jbe    c000f854 <tcp_enqueue_flags+0x80>
c000f828:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f82e:	83 c0 01             	add    eax,0x1
c000f831:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f837:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f83b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f83e:	83 c8 80             	or     eax,0xffffff80
c000f841:	88 c2                	mov    dl,al
c000f843:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f847:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f84a:	b0 ff                	mov    al,0xff
c000f84c:	e9 6f 02 00 00       	jmp    c000fac0 <tcp_enqueue_flags+0x2ec>
c000f851:	8d 76 00             	lea    esi,[esi+0x0]
c000f854:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f859:	83 e0 02             	and    eax,0x2
c000f85c:	74 06                	je     c000f864 <tcp_enqueue_flags+0x90>
c000f85e:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f863:	90                   	nop
c000f864:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f869:	c1 e0 02             	shl    eax,0x2
c000f86c:	83 e0 04             	and    eax,0x4
c000f86f:	88 c2                	mov    dl,al
c000f871:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f876:	83 e0 02             	and    eax,0x2
c000f879:	74 05                	je     c000f880 <tcp_enqueue_flags+0xac>
c000f87b:	b0 0c                	mov    al,0xc
c000f87d:	eb 05                	jmp    c000f884 <tcp_enqueue_flags+0xb0>
c000f87f:	90                   	nop
c000f880:	b0 00                	mov    al,0x0
c000f882:	66 90                	xchg   ax,ax
c000f884:	01 d0                	add    eax,edx
c000f886:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f88a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f88e:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f892:	0f b7 c0             	movzx  eax,ax
c000f895:	85 c0                	test   eax,eax
c000f897:	75 17                	jne    c000f8b0 <tcp_enqueue_flags+0xdc>
c000f899:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f89f:	83 c0 01             	add    eax,0x1
c000f8a2:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8a8:	b0 ff                	mov    al,0xff
c000f8aa:	e9 11 02 00 00       	jmp    c000fac0 <tcp_enqueue_flags+0x2ec>
c000f8af:	90                   	nop
c000f8b0:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f8b5:	83 ec 04             	sub    esp,0x4
c000f8b8:	6a 00                	push   0x0
c000f8ba:	50                   	push   eax
c000f8bb:	6a 00                	push   0x0
c000f8bd:	e8 ee 8b ff ff       	call   c00084b0 <pbuf_alloc>
c000f8c2:	83 c4 10             	add    esp,0x10
c000f8c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f8c9:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f8ce:	75 2c                	jne    c000f8fc <tcp_enqueue_flags+0x128>
c000f8d0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8d4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8d7:	83 c8 80             	or     eax,0xffffff80
c000f8da:	88 c2                	mov    dl,al
c000f8dc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8e0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8e3:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8e9:	83 c0 01             	add    eax,0x1
c000f8ec:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8f2:	b0 ff                	mov    al,0xff
c000f8f4:	e9 c7 01 00 00       	jmp    c000fac0 <tcp_enqueue_flags+0x2ec>
c000f8f9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f900:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f904:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f909:	0f b7 d2             	movzx  edx,dx
c000f90c:	0f b7 c0             	movzx  eax,ax
c000f90f:	39 c2                	cmp    edx,eax
c000f911:	73 15                	jae    c000f928 <tcp_enqueue_flags+0x154>
c000f913:	83 ec 08             	sub    esp,0x8
c000f916:	68 f4 07 03 c0       	push   0xc00307f4
c000f91b:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f920:	e8 ab 01 01 00       	call   c001fad0 <CPrintf>
c000f925:	83 c4 10             	add    esp,0x10
c000f928:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f92d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f931:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f934:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f939:	83 ec 0c             	sub    esp,0xc
c000f93c:	51                   	push   ecx
c000f93d:	52                   	push   edx
c000f93e:	50                   	push   eax
c000f93f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f943:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f947:	e8 c4 f1 ff ff       	call   c000eb10 <tcp_create_segment>
c000f94c:	83 c4 20             	add    esp,0x20
c000f94f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f953:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f958:	75 2a                	jne    c000f984 <tcp_enqueue_flags+0x1b0>
c000f95a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f95e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f961:	83 c8 80             	or     eax,0xffffff80
c000f964:	88 c2                	mov    dl,al
c000f966:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f96a:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f96d:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f973:	83 c0 01             	add    eax,0x1
c000f976:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f97c:	b0 ff                	mov    al,0xff
c000f97e:	e9 3d 01 00 00       	jmp    c000fac0 <tcp_enqueue_flags+0x2ec>
c000f983:	90                   	nop
c000f984:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f988:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f98b:	0f b7 c0             	movzx  eax,ax
c000f98e:	85 c0                	test   eax,eax
c000f990:	74 16                	je     c000f9a8 <tcp_enqueue_flags+0x1d4>
c000f992:	83 ec 08             	sub    esp,0x8
c000f995:	68 30 08 03 c0       	push   0xc0030830
c000f99a:	68 e6 f9 02 c0       	push   0xc002f9e6
c000f99f:	e8 2c 01 01 00       	call   c001fad0 <CPrintf>
c000f9a4:	83 c4 10             	add    esp,0x10
c000f9a7:	90                   	nop
c000f9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ac:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9af:	85 c0                	test   eax,eax
c000f9b1:	75 0d                	jne    c000f9c0 <tcp_enqueue_flags+0x1ec>
c000f9b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9bb:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f9be:	eb 30                	jmp    c000f9f0 <tcp_enqueue_flags+0x21c>
c000f9c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9c4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9cb:	eb 0f                	jmp    c000f9dc <tcp_enqueue_flags+0x208>
c000f9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9d4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f9da:	66 90                	xchg   ax,ax
c000f9dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e2:	85 c0                	test   eax,eax
c000f9e4:	75 ea                	jne    c000f9d0 <tcp_enqueue_flags+0x1fc>
c000f9e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f9ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9ee:	89 10                	mov    DWORD PTR [eax],edx
c000f9f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9f4:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000f9fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f9ff:	83 e0 02             	and    eax,0x2
c000fa02:	75 0c                	jne    c000fa10 <tcp_enqueue_flags+0x23c>
c000fa04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa09:	83 e0 01             	and    eax,0x1
c000fa0c:	74 2a                	je     c000fa38 <tcp_enqueue_flags+0x264>
c000fa0e:	66 90                	xchg   ax,ax
c000fa10:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa14:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000fa17:	8d 50 01             	lea    edx,[eax+0x1]
c000fa1a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa1e:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000fa21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa25:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000fa29:	83 e8 01             	sub    eax,0x1
c000fa2c:	89 c2                	mov    edx,eax
c000fa2e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa32:	66 89 50 72          	mov    WORD PTR [eax+0x72],dx
c000fa36:	66 90                	xchg   ax,ax
c000fa38:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000fa3d:	83 e0 01             	and    eax,0x1
c000fa40:	74 16                	je     c000fa58 <tcp_enqueue_flags+0x284>
c000fa42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa46:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa49:	83 c8 20             	or     eax,0x20
c000fa4c:	88 c2                	mov    dl,al
c000fa4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa52:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fa55:	8d 76 00             	lea    esi,[esi+0x0]
c000fa58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fa5f:	83 ec 0c             	sub    esp,0xc
c000fa62:	50                   	push   eax
c000fa63:	e8 48 90 ff ff       	call   c0008ab0 <pbuf_clen>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	88 c1                	mov    cl,al
c000fa6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa71:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000fa74:	0f b6 c1             	movzx  eax,cl
c000fa77:	01 d0                	add    eax,edx
c000fa79:	89 c2                	mov    edx,eax
c000fa7b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa7f:	66 89 50 74          	mov    WORD PTR [eax+0x74],dx
c000fa83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa87:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000fa8a:	0f b7 c0             	movzx  eax,ax
c000fa8d:	85 c0                	test   eax,eax
c000fa8f:	74 2b                	je     c000fabc <tcp_enqueue_flags+0x2e8>
c000fa91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fa95:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fa98:	85 c0                	test   eax,eax
c000fa9a:	75 20                	jne    c000fabc <tcp_enqueue_flags+0x2e8>
c000fa9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000faa0:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000faa3:	85 c0                	test   eax,eax
c000faa5:	75 15                	jne    c000fabc <tcp_enqueue_flags+0x2e8>
c000faa7:	83 ec 08             	sub    esp,0x8
c000faaa:	68 5c 08 03 c0       	push   0xc003085c
c000faaf:	68 e6 f9 02 c0       	push   0xc002f9e6
c000fab4:	e8 17 00 01 00       	call   c001fad0 <CPrintf>
c000fab9:	83 c4 10             	add    esp,0x10
c000fabc:	b0 00                	mov    al,0x0
c000fabe:	66 90                	xchg   ax,ax
c000fac0:	83 c4 3c             	add    esp,0x3c
c000fac3:	c3                   	ret    

c000fac4 <tcp_send_fin>:
c000fac4:	53                   	push   ebx
c000fac5:	83 ec 18             	sub    esp,0x18
c000fac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000facf:	85 c0                	test   eax,eax
c000fad1:	74 71                	je     c000fb44 <tcp_send_fin+0x80>
c000fad3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fad7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fada:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fade:	eb 0c                	jmp    c000faec <tcp_send_fin+0x28>
c000fae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fae4:	8b 00                	mov    eax,DWORD PTR [eax]
c000fae6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faea:	66 90                	xchg   ax,ax
c000faec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000faf0:	8b 00                	mov    eax,DWORD PTR [eax]
c000faf2:	85 c0                	test   eax,eax
c000faf4:	75 ea                	jne    c000fae0 <tcp_send_fin+0x1c>
c000faf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fafa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fafd:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fb01:	0f b7 c0             	movzx  eax,ax
c000fb04:	83 ec 0c             	sub    esp,0xc
c000fb07:	50                   	push   eax
c000fb08:	e8 0f 11 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fb0d:	83 c4 10             	add    esp,0x10
c000fb10:	0f b7 c0             	movzx  eax,ax
c000fb13:	83 e0 07             	and    eax,0x7
c000fb16:	75 2c                	jne    c000fb44 <tcp_send_fin+0x80>
c000fb18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb1f:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fb23:	83 ec 0c             	sub    esp,0xc
c000fb26:	6a 01                	push   0x1
c000fb28:	e8 ef 10 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fb2d:	83 c4 10             	add    esp,0x10
c000fb30:	89 c2                	mov    edx,eax
c000fb32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb39:	09 da                	or     edx,ebx
c000fb3b:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c000fb3f:	b0 00                	mov    al,0x0
c000fb41:	eb 15                	jmp    c000fb58 <tcp_send_fin+0x94>
c000fb43:	90                   	nop
c000fb44:	83 ec 08             	sub    esp,0x8
c000fb47:	6a 01                	push   0x1
c000fb49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb4d:	e8 82 fc ff ff       	call   c000f7d4 <tcp_enqueue_flags>
c000fb52:	83 c4 10             	add    esp,0x10
c000fb55:	8d 76 00             	lea    esi,[esi+0x0]
c000fb58:	83 c4 18             	add    esp,0x18
c000fb5b:	5b                   	pop    ebx
c000fb5c:	c3                   	ret    
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]

c000fb60 <tcp_send_empty_ack>:
c000fb60:	53                   	push   ebx
c000fb61:	83 ec 18             	sub    esp,0x18
c000fb64:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fb69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6d:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fb70:	83 ec 0c             	sub    esp,0xc
c000fb73:	50                   	push   eax
c000fb74:	e8 c7 10 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fb79:	83 c4 10             	add    esp,0x10
c000fb7c:	89 c2                	mov    edx,eax
c000fb7e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fb83:	52                   	push   edx
c000fb84:	6a 00                	push   0x0
c000fb86:	50                   	push   eax
c000fb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb8b:	e8 1c ee ff ff       	call   c000e9ac <tcp_output_alloc_header>
c000fb90:	83 c4 10             	add    esp,0x10
c000fb93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb97:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fb9c:	75 0a                	jne    c000fba8 <tcp_send_empty_ack+0x48>
c000fb9e:	b0 fe                	mov    al,0xfe
c000fba0:	e9 9b 00 00 00       	jmp    c000fc40 <tcp_send_empty_ack+0xe0>
c000fba5:	8d 76 00             	lea    esi,[esi+0x0]
c000fba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fbaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fbba:	83 e0 fc             	and    eax,0xfffffffc
c000fbbd:	88 c2                	mov    dl,al
c000fbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc3:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fbc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbcd:	0f b7 d0             	movzx  edx,ax
c000fbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbd4:	8d 48 04             	lea    ecx,[eax+0x4]
c000fbd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbdb:	83 ec 0c             	sub    esp,0xc
c000fbde:	52                   	push   edx
c000fbdf:	6a 06                	push   0x6
c000fbe1:	51                   	push   ecx
c000fbe2:	50                   	push   eax
c000fbe3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fbe7:	e8 a4 35 00 00       	call   c0013190 <inet_chksum_pseudo>
c000fbec:	83 c4 20             	add    esp,0x20
c000fbef:	89 c2                	mov    edx,eax
c000fbf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fbf5:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c000fbf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbfd:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fc00:	0f b6 c8             	movzx  ecx,al
c000fc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc07:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc0a:	0f b6 d0             	movzx  edx,al
c000fc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc11:	8d 58 04             	lea    ebx,[eax+0x4]
c000fc14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc18:	83 ec 08             	sub    esp,0x8
c000fc1b:	6a 06                	push   0x6
c000fc1d:	51                   	push   ecx
c000fc1e:	52                   	push   edx
c000fc1f:	53                   	push   ebx
c000fc20:	50                   	push   eax
c000fc21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fc25:	e8 a6 41 00 00       	call   c0013dd0 <ip_output>
c000fc2a:	83 c4 20             	add    esp,0x20
c000fc2d:	83 ec 0c             	sub    esp,0xc
c000fc30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc34:	e8 9b 86 ff ff       	call   c00082d4 <pbuf_free>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	b0 00                	mov    al,0x0
c000fc3e:	66 90                	xchg   ax,ax
c000fc40:	83 c4 18             	add    esp,0x18
c000fc43:	5b                   	pop    ebx
c000fc44:	c3                   	ret    
c000fc45:	8d 76 00             	lea    esi,[esi+0x0]

c000fc48 <tcp_output_segment>:
c000fc48:	56                   	push   esi
c000fc49:	53                   	push   ebx
c000fc4a:	83 ec 14             	sub    esp,0x14
c000fc4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc51:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fc54:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc58:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc5b:	83 ec 0c             	sub    esp,0xc
c000fc5e:	50                   	push   eax
c000fc5f:	e8 dc 0f ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fc64:	83 c4 10             	add    esp,0x10
c000fc67:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fc6a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc6e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc72:	0f b7 c0             	movzx  eax,ax
c000fc75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fc79:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fc7c:	83 ec 0c             	sub    esp,0xc
c000fc7f:	50                   	push   eax
c000fc80:	e8 97 0f ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000fc85:	83 c4 10             	add    esp,0x10
c000fc88:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fc8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc90:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fc93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc97:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fc9b:	0f b7 c0             	movzx  eax,ax
c000fc9e:	01 c2                	add    edx,eax
c000fca0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcae:	83 c0 14             	add    eax,0x14
c000fcb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb9:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fcbc:	0f b6 c0             	movzx  eax,al
c000fcbf:	83 e0 01             	and    eax,0x1
c000fcc2:	74 10                	je     c000fcd4 <tcp_output_segment+0x8c>
c000fcc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcc8:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fcce:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fcd3:	90                   	nop
c000fcd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcd8:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fcdc:	98                   	cwde   
c000fcdd:	83 f8 ff             	cmp    eax,0xffffffff
c000fce0:	75 0a                	jne    c000fcec <tcp_output_segment+0xa4>
c000fce2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fce6:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fcec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf0:	85 c0                	test   eax,eax
c000fcf2:	74 0c                	je     c000fd00 <tcp_output_segment+0xb8>
c000fcf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcf8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcfa:	85 c0                	test   eax,eax
c000fcfc:	75 32                	jne    c000fd30 <tcp_output_segment+0xe8>
c000fcfe:	66 90                	xchg   ax,ax
c000fd00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd04:	83 c0 04             	add    eax,0x4
c000fd07:	83 ec 0c             	sub    esp,0xc
c000fd0a:	50                   	push   eax
c000fd0b:	e8 0c 39 00 00       	call   c001361c <ip_route>
c000fd10:	83 c4 10             	add    esp,0x10
c000fd13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fd17:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd1c:	0f 84 46 01 00 00    	je     c000fe68 <tcp_output_segment+0x220>
c000fd22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd26:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fd29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd2d:	89 10                	mov    DWORD PTR [eax],edx
c000fd2f:	90                   	nop
c000fd30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd34:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fd37:	85 c0                	test   eax,eax
c000fd39:	75 2d                	jne    c000fd68 <tcp_output_segment+0x120>
c000fd3b:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fd41:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd45:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fd48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd4c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd52:	83 ec 0c             	sub    esp,0xc
c000fd55:	50                   	push   eax
c000fd56:	e8 e5 0e ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fd5b:	83 c4 10             	add    esp,0x10
c000fd5e:	89 c2                	mov    edx,eax
c000fd60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd64:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fd67:	90                   	nop
c000fd68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd6c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fd6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd79:	29 c2                	sub    edx,eax
c000fd7b:	89 d0                	mov    eax,edx
c000fd7d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fd82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd89:	66 8b 48 0a          	mov    cx,WORD PTR [eax+0xa]
c000fd8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd94:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fd99:	89 ce                	mov    esi,ecx
c000fd9b:	29 d6                	sub    esi,edx
c000fd9d:	89 f2                	mov    edx,esi
c000fd9f:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c000fda3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fda7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdaa:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000fdad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdb4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c000fdb9:	89 ce                	mov    esi,ecx
c000fdbb:	29 d6                	sub    esi,edx
c000fdbd:	89 f2                	mov    edx,esi
c000fdbf:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
c000fdc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdca:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fdce:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fdd1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fddb:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fde1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fde5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fde8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fdeb:	0f b7 c8             	movzx  ecx,ax
c000fdee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fdf2:	8d 70 04             	lea    esi,[eax+0x4]
c000fdf5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fdf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdfd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fe04:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fe07:	83 ec 0c             	sub    esp,0xc
c000fe0a:	51                   	push   ecx
c000fe0b:	6a 06                	push   0x6
c000fe0d:	56                   	push   esi
c000fe0e:	52                   	push   edx
c000fe0f:	50                   	push   eax
c000fe10:	e8 7b 33 00 00       	call   c0013190 <inet_chksum_pseudo>
c000fe15:	83 c4 20             	add    esp,0x20
c000fe18:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fe1c:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fe22:	83 c0 01             	add    eax,0x1
c000fe25:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fe2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe2f:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fe32:	0f b6 d8             	movzx  ebx,al
c000fe35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe39:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fe3c:	0f b6 c8             	movzx  ecx,al
c000fe3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe43:	8d 70 04             	lea    esi,[eax+0x4]
c000fe46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fe4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe51:	83 ec 08             	sub    esp,0x8
c000fe54:	6a 06                	push   0x6
c000fe56:	53                   	push   ebx
c000fe57:	51                   	push   ecx
c000fe58:	56                   	push   esi
c000fe59:	52                   	push   edx
c000fe5a:	50                   	push   eax
c000fe5b:	e8 70 3f 00 00       	call   c0013dd0 <ip_output>
c000fe60:	83 c4 20             	add    esp,0x20
c000fe63:	eb 07                	jmp    c000fe6c <tcp_output_segment+0x224>
c000fe65:	8d 76 00             	lea    esi,[esi+0x0]
c000fe68:	90                   	nop
c000fe69:	8d 76 00             	lea    esi,[esi+0x0]
c000fe6c:	83 c4 14             	add    esp,0x14
c000fe6f:	5b                   	pop    ebx
c000fe70:	5e                   	pop    esi
c000fe71:	c3                   	ret    
c000fe72:	66 90                	xchg   ax,ax

c000fe74 <tcp_output>:
c000fe74:	56                   	push   esi
c000fe75:	53                   	push   ebx
c000fe76:	83 ec 24             	sub    esp,0x24
c000fe79:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fe7e:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fe82:	75 08                	jne    c000fe8c <tcp_output+0x18>
c000fe84:	b0 00                	mov    al,0x0
c000fe86:	e9 6d 04 00 00       	jmp    c00102f8 <tcp_output+0x484>
c000fe8b:	90                   	nop
c000fe8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe90:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000fe94:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe98:	8b 50 60             	mov    edx,DWORD PTR [eax+0x60]
c000fe9b:	89 c8                	mov    eax,ecx
c000fe9d:	0f b7 d8             	movzx  ebx,ax
c000fea0:	0f b7 ca             	movzx  ecx,dx
c000fea3:	39 cb                	cmp    ebx,ecx
c000fea5:	76 05                	jbe    c000feac <tcp_output+0x38>
c000fea7:	89 d0                	mov    eax,edx
c000fea9:	8d 76 00             	lea    esi,[esi+0x0]
c000feac:	0f b7 c0             	movzx  eax,ax
c000feaf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000feb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feb7:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000feba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000febe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fec2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fec5:	0f b6 c0             	movzx  eax,al
c000fec8:	83 e0 02             	and    eax,0x2
c000fecb:	74 4f                	je     c000ff1c <tcp_output+0xa8>
c000fecd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fed2:	74 34                	je     c000ff08 <tcp_output+0x94>
c000fed4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fed8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fedb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	50                   	push   eax
c000fee2:	e8 59 0d ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	89 c2                	mov    edx,eax
c000feec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fef0:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000fef3:	29 c2                	sub    edx,eax
c000fef5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fef9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fefc:	0f b7 c0             	movzx  eax,ax
c000feff:	01 d0                	add    eax,edx
c000ff01:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000ff05:	73 15                	jae    c000ff1c <tcp_output+0xa8>
c000ff07:	90                   	nop
c000ff08:	83 ec 0c             	sub    esp,0xc
c000ff0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ff0f:	e8 4c fc ff ff       	call   c000fb60 <tcp_send_empty_ack>
c000ff14:	83 c4 10             	add    esp,0x10
c000ff17:	e9 dc 03 00 00       	jmp    c00102f8 <tcp_output+0x484>
c000ff1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff20:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff27:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ff2c:	0f 84 e6 02 00 00    	je     c0010218 <tcp_output+0x3a4>
c000ff32:	eb 0c                	jmp    c000ff40 <tcp_output+0xcc>
c000ff34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff38:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff3a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ff3e:	66 90                	xchg   ax,ax
c000ff40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff44:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff46:	85 c0                	test   eax,eax
c000ff48:	75 ea                	jne    c000ff34 <tcp_output+0xc0>
c000ff4a:	e9 c9 02 00 00       	jmp    c0010218 <tcp_output+0x3a4>
c000ff4f:	90                   	nop
c000ff50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff57:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ff5b:	0f b7 c0             	movzx  eax,ax
c000ff5e:	83 ec 0c             	sub    esp,0xc
c000ff61:	50                   	push   eax
c000ff62:	e8 b5 0c ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c000ff67:	83 c4 10             	add    esp,0x10
c000ff6a:	0f b7 c0             	movzx  eax,ax
c000ff6d:	83 e0 04             	and    eax,0x4
c000ff70:	74 16                	je     c000ff88 <tcp_output+0x114>
c000ff72:	83 ec 08             	sub    esp,0x8
c000ff75:	68 f3 08 03 c0       	push   0xc00308f3
c000ff7a:	68 e6 f9 02 c0       	push   0xc002f9e6
c000ff7f:	e8 4c fb 00 00       	call   c001fad0 <CPrintf>
c000ff84:	83 c4 10             	add    esp,0x10
c000ff87:	90                   	nop
c000ff88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff8c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ff8f:	85 c0                	test   eax,eax
c000ff91:	74 45                	je     c000ffd8 <tcp_output+0x164>
c000ff93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff97:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff9a:	0f b6 c0             	movzx  eax,al
c000ff9d:	83 e0 44             	and    eax,0x44
c000ffa0:	75 36                	jne    c000ffd8 <tcp_output+0x164>
c000ffa2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffa9:	85 c0                	test   eax,eax
c000ffab:	74 33                	je     c000ffe0 <tcp_output+0x16c>
c000ffad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffb1:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffb6:	85 c0                	test   eax,eax
c000ffb8:	75 1e                	jne    c000ffd8 <tcp_output+0x164>
c000ffba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffbe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ffc1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ffc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffc8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ffcb:	0f b7 d2             	movzx  edx,dx
c000ffce:	0f b7 c0             	movzx  eax,ax
c000ffd1:	39 c2                	cmp    edx,eax
c000ffd3:	72 0b                	jb     c000ffe0 <tcp_output+0x16c>
c000ffd5:	8d 76 00             	lea    esi,[esi+0x0]
c000ffd8:	b8 01 00 00 00       	mov    eax,0x1
c000ffdd:	eb 09                	jmp    c000ffe8 <tcp_output+0x174>
c000ffdf:	90                   	nop
c000ffe0:	b8 00 00 00 00       	mov    eax,0x0
c000ffe5:	8d 76 00             	lea    esi,[esi+0x0]
c000ffe8:	85 c0                	test   eax,eax
c000ffea:	75 18                	jne    c0010004 <tcp_output+0x190>
c000ffec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fff0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fff3:	0f b6 c0             	movzx  eax,al
c000fff6:	25 a0 00 00 00       	and    eax,0xa0
c000fffb:	0f 84 57 02 00 00    	je     c0010258 <tcp_output+0x3e4>
c0010001:	8d 76 00             	lea    esi,[esi+0x0]
c0010004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010008:	8b 10                	mov    edx,DWORD PTR [eax]
c001000a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001000e:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c0010011:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010015:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0010018:	83 f8 02             	cmp    eax,0x2
c001001b:	74 3b                	je     c0010058 <tcp_output+0x1e4>
c001001d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010021:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010024:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c0010028:	83 ec 0c             	sub    esp,0xc
c001002b:	6a 10                	push   0x10
c001002d:	e8 ea 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010032:	83 c4 10             	add    esp,0x10
c0010035:	89 c2                	mov    edx,eax
c0010037:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001003b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001003e:	09 da                	or     edx,ebx
c0010040:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c0010044:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010048:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001004b:	83 e0 fc             	and    eax,0xfffffffc
c001004e:	88 c2                	mov    dl,al
c0010050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010054:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010057:	90                   	nop
c0010058:	83 ec 08             	sub    esp,0x8
c001005b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001005f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010063:	e8 e0 fb ff ff       	call   c000fc48 <tcp_output_segment>
c0010068:	83 c4 10             	add    esp,0x10
c001006b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001006f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010072:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010075:	83 ec 0c             	sub    esp,0xc
c0010078:	50                   	push   eax
c0010079:	e8 c2 0b ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	89 c3                	mov    ebx,eax
c0010083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010087:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001008a:	0f b7 f0             	movzx  esi,ax
c001008d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010091:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010094:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010098:	0f b7 c0             	movzx  eax,ax
c001009b:	83 ec 0c             	sub    esp,0xc
c001009e:	50                   	push   eax
c001009f:	e8 78 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00100a4:	83 c4 10             	add    esp,0x10
c00100a7:	0f b7 c0             	movzx  eax,ax
c00100aa:	83 e0 03             	and    eax,0x3
c00100ad:	0f 95 c0             	setne  al
c00100b0:	0f b6 c0             	movzx  eax,al
c00100b3:	01 f0                	add    eax,esi
c00100b5:	01 d8                	add    eax,ebx
c00100b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00100bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100bf:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00100c2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00100c6:	79 0c                	jns    c00100d4 <tcp_output+0x260>
c00100c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100d0:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c00100d3:	90                   	nop
c00100d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00100db:	0f b7 d8             	movzx  ebx,ax
c00100de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00100e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100e5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00100e9:	0f b7 c0             	movzx  eax,ax
c00100ec:	83 ec 0c             	sub    esp,0xc
c00100ef:	50                   	push   eax
c00100f0:	e8 27 0b ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	0f b7 c0             	movzx  eax,ax
c00100fb:	83 e0 03             	and    eax,0x3
c00100fe:	0f 95 c0             	setne  al
c0010101:	0f b6 c0             	movzx  eax,al
c0010104:	01 d8                	add    eax,ebx
c0010106:	85 c0                	test   eax,eax
c0010108:	0f 8e ee 00 00 00    	jle    c00101fc <tcp_output+0x388>
c001010e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010112:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001011c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001011f:	85 c0                	test   eax,eax
c0010121:	75 19                	jne    c001013c <tcp_output+0x2c8>
c0010123:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010127:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001012b:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001012e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010132:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010136:	e9 d1 00 00 00       	jmp    c001020c <tcp_output+0x398>
c001013b:	90                   	nop
c001013c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010140:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010143:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010146:	83 ec 0c             	sub    esp,0xc
c0010149:	50                   	push   eax
c001014a:	e8 f1 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001014f:	83 c4 10             	add    esp,0x10
c0010152:	89 c3                	mov    ebx,eax
c0010154:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010158:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001015b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001015e:	83 ec 0c             	sub    esp,0xc
c0010161:	50                   	push   eax
c0010162:	e8 d9 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010167:	83 c4 10             	add    esp,0x10
c001016a:	29 c3                	sub    ebx,eax
c001016c:	89 d8                	mov    eax,ebx
c001016e:	79 74                	jns    c00101e4 <tcp_output+0x370>
c0010170:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010174:	83 c0 7c             	add    eax,0x7c
c0010177:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001017b:	eb 0f                	jmp    c001018c <tcp_output+0x318>
c001017d:	8d 76 00             	lea    esi,[esi+0x0]
c0010180:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010184:	8b 00                	mov    eax,DWORD PTR [eax]
c0010186:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001018a:	66 90                	xchg   ax,ax
c001018c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010190:	8b 00                	mov    eax,DWORD PTR [eax]
c0010192:	85 c0                	test   eax,eax
c0010194:	74 36                	je     c00101cc <tcp_output+0x358>
c0010196:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001019a:	8b 00                	mov    eax,DWORD PTR [eax]
c001019c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001019f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101a2:	83 ec 0c             	sub    esp,0xc
c00101a5:	50                   	push   eax
c00101a6:	e8 95 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00101ab:	83 c4 10             	add    esp,0x10
c00101ae:	89 c3                	mov    ebx,eax
c00101b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101ba:	83 ec 0c             	sub    esp,0xc
c00101bd:	50                   	push   eax
c00101be:	e8 7d 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00101c3:	83 c4 10             	add    esp,0x10
c00101c6:	29 c3                	sub    ebx,eax
c00101c8:	89 d8                	mov    eax,ebx
c00101ca:	78 b4                	js     c0010180 <tcp_output+0x30c>
c00101cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00101d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101d6:	89 10                	mov    DWORD PTR [eax],edx
c00101d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101e0:	89 10                	mov    DWORD PTR [eax],edx
c00101e2:	eb 28                	jmp    c001020c <tcp_output+0x398>
c00101e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00101e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00101ec:	89 10                	mov    DWORD PTR [eax],edx
c00101ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00101f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00101f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101f8:	eb 12                	jmp    c001020c <tcp_output+0x398>
c00101fa:	66 90                	xchg   ax,ax
c00101fc:	83 ec 0c             	sub    esp,0xc
c00101ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010203:	e8 58 9d ff ff       	call   c0009f60 <tcp_seg_free>
c0010208:	83 c4 10             	add    esp,0x10
c001020b:	90                   	nop
c001020c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010210:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010213:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010217:	90                   	nop
c0010218:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001021d:	74 3d                	je     c001025c <tcp_output+0x3e8>
c001021f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010223:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010226:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010229:	83 ec 0c             	sub    esp,0xc
c001022c:	50                   	push   eax
c001022d:	e8 0e 0a ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010232:	83 c4 10             	add    esp,0x10
c0010235:	89 c2                	mov    edx,eax
c0010237:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001023b:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001023e:	29 c2                	sub    edx,eax
c0010240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010244:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010247:	0f b7 c0             	movzx  eax,ax
c001024a:	01 d0                	add    eax,edx
c001024c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0010250:	0f 83 fa fc ff ff    	jae    c000ff50 <tcp_output+0xdc>
c0010256:	eb 04                	jmp    c001025c <tcp_output+0x3e8>
c0010258:	90                   	nop
c0010259:	8d 76 00             	lea    esi,[esi+0x0]
c001025c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010260:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c0010263:	85 c0                	test   eax,eax
c0010265:	75 0d                	jne    c0010274 <tcp_output+0x400>
c0010267:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001026b:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c0010271:	8d 76 00             	lea    esi,[esi+0x0]
c0010274:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010279:	74 65                	je     c00102e0 <tcp_output+0x46c>
c001027b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001027f:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c0010285:	0f b6 c0             	movzx  eax,al
c0010288:	85 c0                	test   eax,eax
c001028a:	75 54                	jne    c00102e0 <tcp_output+0x46c>
c001028c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010290:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010296:	83 ec 0c             	sub    esp,0xc
c0010299:	50                   	push   eax
c001029a:	e8 a1 09 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001029f:	83 c4 10             	add    esp,0x10
c00102a2:	89 c2                	mov    edx,eax
c00102a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102a8:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c00102ab:	29 c2                	sub    edx,eax
c00102ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00102b4:	0f b7 c0             	movzx  eax,ax
c00102b7:	01 c2                	add    edx,eax
c00102b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102bd:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c00102c0:	0f b7 c0             	movzx  eax,ax
c00102c3:	39 c2                	cmp    edx,eax
c00102c5:	76 19                	jbe    c00102e0 <tcp_output+0x46c>
c00102c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102cb:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c00102d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102d9:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c00102e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102e4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00102e7:	83 e0 7f             	and    eax,0x7f
c00102ea:	88 c2                	mov    dl,al
c00102ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102f0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00102f3:	b0 00                	mov    al,0x0
c00102f5:	8d 76 00             	lea    esi,[esi+0x0]
c00102f8:	83 c4 24             	add    esp,0x24
c00102fb:	5b                   	pop    ebx
c00102fc:	5e                   	pop    esi
c00102fd:	c3                   	ret    
c00102fe:	66 90                	xchg   ax,ax

c0010300 <tcp_rst>:
c0010300:	83 ec 2c             	sub    esp,0x2c
c0010303:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010307:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001030b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0010310:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010315:	83 ec 04             	sub    esp,0x4
c0010318:	6a 00                	push   0x0
c001031a:	6a 14                	push   0x14
c001031c:	6a 01                	push   0x1
c001031e:	e8 8d 81 ff ff       	call   c00084b0 <pbuf_alloc>
c0010323:	83 c4 10             	add    esp,0x10
c0010326:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001032a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001032f:	0f 84 3f 01 00 00    	je     c0010474 <tcp_rst+0x174>
c0010335:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010339:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001033d:	0f b7 c0             	movzx  eax,ax
c0010340:	83 f8 13             	cmp    eax,0x13
c0010343:	77 17                	ja     c001035c <tcp_rst+0x5c>
c0010345:	83 ec 08             	sub    esp,0x8
c0010348:	68 00 06 03 c0       	push   0xc0030600
c001034d:	68 e6 f9 02 c0       	push   0xc002f9e6
c0010352:	e8 79 f7 00 00       	call   c001fad0 <CPrintf>
c0010357:	83 c4 10             	add    esp,0x10
c001035a:	66 90                	xchg   ax,ax
c001035c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010363:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010367:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001036c:	83 ec 0c             	sub    esp,0xc
c001036f:	50                   	push   eax
c0010370:	e8 a7 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010375:	83 c4 10             	add    esp,0x10
c0010378:	89 c2                	mov    edx,eax
c001037a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001037e:	66 89 10             	mov    WORD PTR [eax],dx
c0010381:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	50                   	push   eax
c001038a:	e8 8d 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001038f:	83 c4 10             	add    esp,0x10
c0010392:	89 c2                	mov    edx,eax
c0010394:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010398:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001039c:	83 ec 0c             	sub    esp,0xc
c001039f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00103a3:	e8 98 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103a8:	83 c4 10             	add    esp,0x10
c00103ab:	89 c2                	mov    edx,eax
c00103ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00103b4:	83 ec 0c             	sub    esp,0xc
c00103b7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00103bb:	e8 80 08 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00103c0:	83 c4 10             	add    esp,0x10
c00103c3:	89 c2                	mov    edx,eax
c00103c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00103cc:	83 ec 0c             	sub    esp,0xc
c00103cf:	68 14 50 00 00       	push   0x5014
c00103d4:	e8 43 08 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	89 c2                	mov    edx,eax
c00103de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103e2:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c00103e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103ea:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c00103f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103f4:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c00103fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00103fe:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c0010404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010408:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001040b:	0f b7 c0             	movzx  eax,ax
c001040e:	83 ec 0c             	sub    esp,0xc
c0010411:	50                   	push   eax
c0010412:	6a 06                	push   0x6
c0010414:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010418:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001041c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010420:	e8 6b 2d 00 00       	call   c0013190 <inet_chksum_pseudo>
c0010425:	83 c4 20             	add    esp,0x20
c0010428:	89 c2                	mov    edx,eax
c001042a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001042e:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010432:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010438:	83 c0 01             	add    eax,0x1
c001043b:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010441:	83 ec 08             	sub    esp,0x8
c0010444:	6a 06                	push   0x6
c0010446:	6a 00                	push   0x0
c0010448:	68 ff 00 00 00       	push   0xff
c001044d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010451:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010455:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010459:	e8 72 39 00 00       	call   c0013dd0 <ip_output>
c001045e:	83 c4 20             	add    esp,0x20
c0010461:	83 ec 0c             	sub    esp,0xc
c0010464:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010468:	e8 67 7e ff ff       	call   c00082d4 <pbuf_free>
c001046d:	83 c4 10             	add    esp,0x10
c0010470:	eb 06                	jmp    c0010478 <tcp_rst+0x178>
c0010472:	66 90                	xchg   ax,ax
c0010474:	90                   	nop
c0010475:	8d 76 00             	lea    esi,[esi+0x0]
c0010478:	83 c4 2c             	add    esp,0x2c
c001047b:	c3                   	ret    

c001047c <tcp_rexmit_rto>:
c001047c:	83 ec 1c             	sub    esp,0x1c
c001047f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010483:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010486:	85 c0                	test   eax,eax
c0010488:	74 7a                	je     c0010504 <tcp_rexmit_rto+0x88>
c001048a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001048e:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010495:	eb 0d                	jmp    c00104a4 <tcp_rexmit_rto+0x28>
c0010497:	90                   	nop
c0010498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001049c:	8b 00                	mov    eax,DWORD PTR [eax]
c001049e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104a2:	66 90                	xchg   ax,ax
c00104a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00104aa:	85 c0                	test   eax,eax
c00104ac:	75 ea                	jne    c0010498 <tcp_rexmit_rto+0x1c>
c00104ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104b2:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c00104b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b9:	89 10                	mov    DWORD PTR [eax],edx
c00104bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104bf:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c00104c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104c6:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c00104c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cd:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c00104d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104d8:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00104db:	83 c0 01             	add    eax,0x1
c00104de:	88 c2                	mov    dl,al
c00104e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104e4:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00104e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104eb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00104f2:	83 ec 0c             	sub    esp,0xc
c00104f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00104f9:	e8 76 f9 ff ff       	call   c000fe74 <tcp_output>
c00104fe:	83 c4 10             	add    esp,0x10
c0010501:	eb 05                	jmp    c0010508 <tcp_rexmit_rto+0x8c>
c0010503:	90                   	nop
c0010504:	90                   	nop
c0010505:	8d 76 00             	lea    esi,[esi+0x0]
c0010508:	83 c4 1c             	add    esp,0x1c
c001050b:	c3                   	ret    

c001050c <tcp_rexmit>:
c001050c:	53                   	push   ebx
c001050d:	83 ec 18             	sub    esp,0x18
c0010510:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010514:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010517:	85 c0                	test   eax,eax
c0010519:	0f 84 a9 00 00 00    	je     c00105c8 <tcp_rexmit+0xbc>
c001051f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010523:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001052a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001052e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010534:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c0010537:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001053b:	83 c0 78             	add    eax,0x78
c001053e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010542:	eb 0c                	jmp    c0010550 <tcp_rexmit+0x44>
c0010544:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010548:	8b 00                	mov    eax,DWORD PTR [eax]
c001054a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001054e:	66 90                	xchg   ax,ax
c0010550:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010554:	8b 00                	mov    eax,DWORD PTR [eax]
c0010556:	85 c0                	test   eax,eax
c0010558:	74 36                	je     c0010590 <tcp_rexmit+0x84>
c001055a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001055e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010560:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010563:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	50                   	push   eax
c001056a:	e8 d1 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001056f:	83 c4 10             	add    esp,0x10
c0010572:	89 c3                	mov    ebx,eax
c0010574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010578:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001057b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001057e:	83 ec 0c             	sub    esp,0xc
c0010581:	50                   	push   eax
c0010582:	e8 b9 06 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0010587:	83 c4 10             	add    esp,0x10
c001058a:	29 c3                	sub    ebx,eax
c001058c:	89 d8                	mov    eax,ebx
c001058e:	78 b4                	js     c0010544 <tcp_rexmit+0x38>
c0010590:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010594:	8b 10                	mov    edx,DWORD PTR [eax]
c0010596:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001059a:	89 10                	mov    DWORD PTR [eax],edx
c001059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00105a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00105a4:	89 10                	mov    DWORD PTR [eax],edx
c00105a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105aa:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c00105ad:	83 c0 01             	add    eax,0x1
c00105b0:	88 c2                	mov    dl,al
c00105b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105b6:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c00105b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00105bd:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00105c4:	eb 06                	jmp    c00105cc <tcp_rexmit+0xc0>
c00105c6:	66 90                	xchg   ax,ax
c00105c8:	90                   	nop
c00105c9:	8d 76 00             	lea    esi,[esi+0x0]
c00105cc:	83 c4 18             	add    esp,0x18
c00105cf:	5b                   	pop    ebx
c00105d0:	c3                   	ret    
c00105d1:	8d 76 00             	lea    esi,[esi+0x0]

c00105d4 <tcp_rexmit_fast>:
c00105d4:	83 ec 0c             	sub    esp,0xc
c00105d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105db:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00105de:	85 c0                	test   eax,eax
c00105e0:	0f 84 d2 00 00 00    	je     c00106b8 <tcp_rexmit_fast+0xe4>
c00105e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105ea:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105ed:	0f b6 c0             	movzx  eax,al
c00105f0:	83 e0 04             	and    eax,0x4
c00105f3:	0f 85 bf 00 00 00    	jne    c00106b8 <tcp_rexmit_fast+0xe4>
c00105f9:	83 ec 0c             	sub    esp,0xc
c00105fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010600:	e8 07 ff ff ff       	call   c001050c <tcp_rexmit>
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001060c:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010614:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010617:	0f b7 d2             	movzx  edx,dx
c001061a:	0f b7 c0             	movzx  eax,ax
c001061d:	39 c2                	cmp    edx,eax
c001061f:	76 1b                	jbe    c001063c <tcp_rexmit_fast+0x68>
c0010621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010625:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c0010628:	0f b7 c0             	movzx  eax,ax
c001062b:	d1 e8                	shr    eax,1
c001062d:	89 c2                	mov    edx,eax
c001062f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010633:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010637:	eb 1b                	jmp    c0010654 <tcp_rexmit_fast+0x80>
c0010639:	8d 76 00             	lea    esi,[esi+0x0]
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010644:	0f b7 c0             	movzx  eax,ax
c0010647:	d1 e8                	shr    eax,1
c0010649:	89 c2                	mov    edx,eax
c001064b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001064f:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010653:	90                   	nop
c0010654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010658:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c001065b:	0f b7 d0             	movzx  edx,ax
c001065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010662:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010665:	0f b7 c0             	movzx  eax,ax
c0010668:	d1 e0                	shl    eax,1
c001066a:	39 c2                	cmp    edx,eax
c001066c:	7d 16                	jge    c0010684 <tcp_rexmit_fast+0xb0>
c001066e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010672:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010675:	d1 e0                	shl    eax,1
c0010677:	89 c2                	mov    edx,eax
c0010679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067d:	66 89 50 58          	mov    WORD PTR [eax+0x58],dx
c0010681:	8d 76 00             	lea    esi,[esi+0x0]
c0010684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010688:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c001068b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001068f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010692:	89 c1                	mov    ecx,eax
c0010694:	d1 e1                	shl    ecx,1
c0010696:	01 c8                	add    eax,ecx
c0010698:	01 d0                	add    eax,edx
c001069a:	89 c2                	mov    edx,eax
c001069c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a0:	66 89 50 56          	mov    WORD PTR [eax+0x56],dx
c00106a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00106ab:	83 c8 04             	or     eax,0x4
c00106ae:	88 c2                	mov    dl,al
c00106b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c00106b7:	90                   	nop
c00106b8:	90                   	nop
c00106b9:	83 c4 0c             	add    esp,0xc
c00106bc:	c3                   	ret    
c00106bd:	8d 76 00             	lea    esi,[esi+0x0]

c00106c0 <tcp_keepalive>:
c00106c0:	83 ec 1c             	sub    esp,0x1c
c00106c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106c7:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c00106ca:	83 e8 01             	sub    eax,0x1
c00106cd:	83 ec 0c             	sub    esp,0xc
c00106d0:	50                   	push   eax
c00106d1:	e8 6a 05 ff ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c00106d6:	83 c4 10             	add    esp,0x10
c00106d9:	50                   	push   eax
c00106da:	6a 00                	push   0x0
c00106dc:	6a 00                	push   0x0
c00106de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00106e2:	e8 c5 e2 ff ff       	call   c000e9ac <tcp_output_alloc_header>
c00106e7:	83 c4 10             	add    esp,0x10
c00106ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106ee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00106f3:	0f 84 8b 00 00 00    	je     c0010784 <tcp_keepalive+0xc4>
c00106f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010700:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010704:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010708:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001070b:	0f b7 d0             	movzx  edx,ax
c001070e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010712:	8d 48 04             	lea    ecx,[eax+0x4]
c0010715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010719:	83 ec 0c             	sub    esp,0xc
c001071c:	52                   	push   edx
c001071d:	6a 06                	push   0x6
c001071f:	51                   	push   ecx
c0010720:	50                   	push   eax
c0010721:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010725:	e8 66 2a 00 00       	call   c0013190 <inet_chksum_pseudo>
c001072a:	83 c4 20             	add    esp,0x20
c001072d:	89 c2                	mov    edx,eax
c001072f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010733:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010737:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001073d:	83 c0 01             	add    eax,0x1
c0010740:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010746:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001074a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001074d:	0f b6 d0             	movzx  edx,al
c0010750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010754:	8d 48 04             	lea    ecx,[eax+0x4]
c0010757:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001075b:	83 ec 08             	sub    esp,0x8
c001075e:	6a 06                	push   0x6
c0010760:	6a 00                	push   0x0
c0010762:	52                   	push   edx
c0010763:	51                   	push   ecx
c0010764:	50                   	push   eax
c0010765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010769:	e8 62 36 00 00       	call   c0013dd0 <ip_output>
c001076e:	83 c4 20             	add    esp,0x20
c0010771:	83 ec 0c             	sub    esp,0xc
c0010774:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010778:	e8 57 7b ff ff       	call   c00082d4 <pbuf_free>
c001077d:	83 c4 10             	add    esp,0x10
c0010780:	eb 06                	jmp    c0010788 <tcp_keepalive+0xc8>
c0010782:	66 90                	xchg   ax,ax
c0010784:	90                   	nop
c0010785:	8d 76 00             	lea    esi,[esi+0x0]
c0010788:	83 c4 1c             	add    esp,0x1c
c001078b:	c3                   	ret    

c001078c <tcp_zero_window_probe>:
c001078c:	53                   	push   ebx
c001078d:	83 ec 28             	sub    esp,0x28
c0010790:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010794:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010797:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001079b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107a0:	75 0e                	jne    c00107b0 <tcp_zero_window_probe+0x24>
c00107a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00107a6:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00107a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00107ad:	8d 76 00             	lea    esi,[esi+0x0]
c00107b0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00107b5:	0f 84 99 01 00 00    	je     c0010954 <tcp_zero_window_probe+0x1c8>
c00107bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00107c2:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107c6:	0f b7 c0             	movzx  eax,ax
c00107c9:	83 ec 0c             	sub    esp,0xc
c00107cc:	50                   	push   eax
c00107cd:	e8 4a 04 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00107d2:	83 c4 10             	add    esp,0x10
c00107d5:	0f b7 c0             	movzx  eax,ax
c00107d8:	83 e0 01             	and    eax,0x1
c00107db:	74 17                	je     c00107f4 <tcp_zero_window_probe+0x68>
c00107dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00107e4:	0f b7 c0             	movzx  eax,ax
c00107e7:	85 c0                	test   eax,eax
c00107e9:	75 09                	jne    c00107f4 <tcp_zero_window_probe+0x68>
c00107eb:	b8 01 00 00 00       	mov    eax,0x1
c00107f0:	eb 0a                	jmp    c00107fc <tcp_zero_window_probe+0x70>
c00107f2:	66 90                	xchg   ax,ax
c00107f4:	b8 00 00 00 00       	mov    eax,0x0
c00107f9:	8d 76 00             	lea    esi,[esi+0x0]
c00107fc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010800:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010805:	85 c0                	test   eax,eax
c0010807:	0f 94 c0             	sete   al
c001080a:	0f b6 c0             	movzx  eax,al
c001080d:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0010812:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010816:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010819:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001081c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010821:	52                   	push   edx
c0010822:	50                   	push   eax
c0010823:	6a 00                	push   0x0
c0010825:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010829:	e8 7e e1 ff ff       	call   c000e9ac <tcp_output_alloc_header>
c001082e:	83 c4 10             	add    esp,0x10
c0010831:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010835:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001083a:	0f 84 18 01 00 00    	je     c0010958 <tcp_zero_window_probe+0x1cc>
c0010840:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010844:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010847:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001084b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010850:	85 c0                	test   eax,eax
c0010852:	74 28                	je     c001087c <tcp_zero_window_probe+0xf0>
c0010854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010858:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001085c:	80 e4 c0             	and    ah,0xc0
c001085f:	89 c3                	mov    ebx,eax
c0010861:	83 ec 0c             	sub    esp,0xc
c0010864:	6a 11                	push   0x11
c0010866:	e8 b1 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001086b:	83 c4 10             	add    esp,0x10
c001086e:	09 d8                	or     eax,ebx
c0010870:	89 c2                	mov    edx,eax
c0010872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010876:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
c001087a:	eb 58                	jmp    c00108d4 <tcp_zero_window_probe+0x148>
c001087c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010880:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010883:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010886:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001088a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001088e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010891:	83 c0 14             	add    eax,0x14
c0010894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001089c:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00108a0:	0f b7 c0             	movzx  eax,ax
c00108a3:	83 ec 0c             	sub    esp,0xc
c00108a6:	50                   	push   eax
c00108a7:	e8 70 03 ff ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00108ac:	83 c4 10             	add    esp,0x10
c00108af:	0f b7 c0             	movzx  eax,ax
c00108b2:	c1 e8 0c             	shr    eax,0xc
c00108b5:	c1 e0 02             	shl    eax,0x2
c00108b8:	0f b7 d0             	movzx  edx,ax
c00108bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00108bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00108c2:	52                   	push   edx
c00108c3:	6a 01                	push   0x1
c00108c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00108c9:	50                   	push   eax
c00108ca:	e8 b1 86 ff ff       	call   c0008f80 <pbuf_copy_partial>
c00108cf:	83 c4 10             	add    esp,0x10
c00108d2:	66 90                	xchg   ax,ax
c00108d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00108db:	0f b7 d0             	movzx  edx,ax
c00108de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108e2:	8d 48 04             	lea    ecx,[eax+0x4]
c00108e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108e9:	83 ec 0c             	sub    esp,0xc
c00108ec:	52                   	push   edx
c00108ed:	6a 06                	push   0x6
c00108ef:	51                   	push   ecx
c00108f0:	50                   	push   eax
c00108f1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00108f5:	e8 96 28 00 00       	call   c0013190 <inet_chksum_pseudo>
c00108fa:	83 c4 20             	add    esp,0x20
c00108fd:	89 c2                	mov    edx,eax
c00108ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010903:	66 89 50 10          	mov    WORD PTR [eax+0x10],dx
c0010907:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001090d:	83 c0 01             	add    eax,0x1
c0010910:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001091a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001091d:	0f b6 d0             	movzx  edx,al
c0010920:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010924:	8d 48 04             	lea    ecx,[eax+0x4]
c0010927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001092b:	83 ec 08             	sub    esp,0x8
c001092e:	6a 06                	push   0x6
c0010930:	6a 00                	push   0x0
c0010932:	52                   	push   edx
c0010933:	51                   	push   ecx
c0010934:	50                   	push   eax
c0010935:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010939:	e8 92 34 00 00       	call   c0013dd0 <ip_output>
c001093e:	83 c4 20             	add    esp,0x20
c0010941:	83 ec 0c             	sub    esp,0xc
c0010944:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010948:	e8 87 79 ff ff       	call   c00082d4 <pbuf_free>
c001094d:	83 c4 10             	add    esp,0x10
c0010950:	eb 0a                	jmp    c001095c <tcp_zero_window_probe+0x1d0>
c0010952:	66 90                	xchg   ax,ax
c0010954:	90                   	nop
c0010955:	eb 05                	jmp    c001095c <tcp_zero_window_probe+0x1d0>
c0010957:	90                   	nop
c0010958:	90                   	nop
c0010959:	8d 76 00             	lea    esi,[esi+0x0]
c001095c:	83 c4 28             	add    esp,0x28
c001095f:	5b                   	pop    ebx
c0010960:	c3                   	ret    
c0010961:	66 90                	xchg   ax,ax
c0010963:	90                   	nop

c0010964 <sys_timeout>:
c0010964:	83 ec 1c             	sub    esp,0x1c
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	6a 0b                	push   0xb
c001096c:	e8 77 6f ff ff       	call   c00078e8 <memp_malloc>
c0010971:	83 c4 10             	add    esp,0x10
c0010974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010978:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001097d:	75 25                	jne    c00109a4 <sys_timeout+0x40>
c001097f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010984:	0f 85 3e 01 00 00    	jne    c0010ac8 <sys_timeout+0x164>
c001098a:	83 ec 08             	sub    esp,0x8
c001098d:	68 0c 09 03 c0       	push   0xc003090c
c0010992:	68 e6 f9 02 c0       	push   0xc002f9e6
c0010997:	e8 34 f1 00 00       	call   c001fad0 <CPrintf>
c001099c:	83 c4 10             	add    esp,0x10
c001099f:	e9 24 01 00 00       	jmp    c0010ac8 <sys_timeout+0x164>
c00109a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00109ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00109b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00109b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00109c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00109c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00109cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109cf:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109d4:	85 c0                	test   eax,eax
c00109d6:	75 10                	jne    c00109e8 <sys_timeout+0x84>
c00109d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109dc:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c00109e1:	e9 e6 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c00109e6:	66 90                	xchg   ax,ax
c00109e8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109f0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00109f4:	73 2e                	jae    c0010a24 <sys_timeout+0xc0>
c00109f6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c00109fb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109fe:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a03:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c0010a07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a0a:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010a10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a14:	89 10                	mov    DWORD PTR [eax],edx
c0010a16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a1a:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010a1f:	e9 a8 00 00 00       	jmp    c0010acc <sys_timeout+0x168>
c0010a24:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010a29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010a2d:	e9 86 00 00 00       	jmp    c0010ab8 <sys_timeout+0x154>
c0010a32:	66 90                	xchg   ax,ax
c0010a34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a42:	29 c2                	sub    edx,eax
c0010a44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a51:	85 c0                	test   eax,eax
c0010a53:	74 17                	je     c0010a6c <sys_timeout+0x108>
c0010a55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a5b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010a65:	39 c2                	cmp    edx,eax
c0010a67:	76 43                	jbe    c0010aac <sys_timeout+0x148>
c0010a69:	8d 76 00             	lea    esi,[esi+0x0]
c0010a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a72:	85 c0                	test   eax,eax
c0010a74:	74 1e                	je     c0010a94 <sys_timeout+0x130>
c0010a76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a7c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010a7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a83:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a8c:	29 d1                	sub    ecx,edx
c0010a8e:	89 ca                	mov    edx,ecx
c0010a90:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010a93:	90                   	nop
c0010a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a98:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010a9e:	89 10                	mov    DWORD PTR [eax],edx
c0010aa0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010aa4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa8:	89 10                	mov    DWORD PTR [eax],edx
c0010aaa:	eb 20                	jmp    c0010acc <sys_timeout+0x168>
c0010aac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ab0:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ab2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ab6:	66 90                	xchg   ax,ax
c0010ab8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010abd:	0f 85 71 ff ff ff    	jne    c0010a34 <sys_timeout+0xd0>
c0010ac3:	eb 07                	jmp    c0010acc <sys_timeout+0x168>
c0010ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ac8:	90                   	nop
c0010ac9:	8d 76 00             	lea    esi,[esi+0x0]
c0010acc:	83 c4 1c             	add    esp,0x1c
c0010acf:	c3                   	ret    

c0010ad0 <tcpip_tcp_timer>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	e8 b8 a4 ff ff       	call   c000af90 <tcp_tmr>
c0010ad8:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010add:	85 c0                	test   eax,eax
c0010adf:	75 0b                	jne    c0010aec <tcpip_tcp_timer+0x1c>
c0010ae1:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010ae6:	85 c0                	test   eax,eax
c0010ae8:	74 1e                	je     c0010b08 <tcpip_tcp_timer+0x38>
c0010aea:	66 90                	xchg   ax,ax
c0010aec:	83 ec 04             	sub    esp,0x4
c0010aef:	6a 00                	push   0x0
c0010af1:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010af6:	68 fa 00 00 00       	push   0xfa
c0010afb:	e8 64 fe ff ff       	call   c0010964 <sys_timeout>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	eb 0f                	jmp    c0010b14 <tcpip_tcp_timer+0x44>
c0010b05:	8d 76 00             	lea    esi,[esi+0x0]
c0010b08:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	90                   	nop
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	8d 76 00             	lea    esi,[esi+0x0]

c0010b1c <tcp_timer_needed>:
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010b24:	85 c0                	test   eax,eax
c0010b26:	75 38                	jne    c0010b60 <tcp_timer_needed+0x44>
c0010b28:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010b2d:	85 c0                	test   eax,eax
c0010b2f:	75 0b                	jne    c0010b3c <tcp_timer_needed+0x20>
c0010b31:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010b36:	85 c0                	test   eax,eax
c0010b38:	74 26                	je     c0010b60 <tcp_timer_needed+0x44>
c0010b3a:	66 90                	xchg   ax,ax
c0010b3c:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010b46:	83 ec 04             	sub    esp,0x4
c0010b49:	6a 00                	push   0x0
c0010b4b:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010b50:	68 fa 00 00 00       	push   0xfa
c0010b55:	e8 0a fe ff ff       	call   c0010964 <sys_timeout>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0010b60:	90                   	nop
c0010b61:	83 c4 0c             	add    esp,0xc
c0010b64:	c3                   	ret    
c0010b65:	8d 76 00             	lea    esi,[esi+0x0]

c0010b68 <ip_reass_timer>:
c0010b68:	83 ec 0c             	sub    esp,0xc
c0010b6b:	e8 18 3b 00 00       	call   c0014688 <ip_reass_tmr>
c0010b70:	83 ec 04             	sub    esp,0x4
c0010b73:	6a 00                	push   0x0
c0010b75:	68 68 0b 01 c0       	push   0xc0010b68
c0010b7a:	68 e8 03 00 00       	push   0x3e8
c0010b7f:	e8 e0 fd ff ff       	call   c0010964 <sys_timeout>
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	90                   	nop
c0010b88:	83 c4 0c             	add    esp,0xc
c0010b8b:	c3                   	ret    

c0010b8c <arp_timer>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	e8 64 0d 00 00       	call   c00118f8 <etharp_tmr>
c0010b94:	83 ec 04             	sub    esp,0x4
c0010b97:	6a 00                	push   0x0
c0010b99:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010b9e:	68 88 13 00 00       	push   0x1388
c0010ba3:	e8 bc fd ff ff       	call   c0010964 <sys_timeout>
c0010ba8:	83 c4 10             	add    esp,0x10
c0010bab:	90                   	nop
c0010bac:	83 c4 0c             	add    esp,0xc
c0010baf:	c3                   	ret    

c0010bb0 <sys_timeouts_init>:
c0010bb0:	83 ec 0c             	sub    esp,0xc
c0010bb3:	83 ec 04             	sub    esp,0x4
c0010bb6:	6a 00                	push   0x0
c0010bb8:	68 68 0b 01 c0       	push   0xc0010b68
c0010bbd:	68 e8 03 00 00       	push   0x3e8
c0010bc2:	e8 9d fd ff ff       	call   c0010964 <sys_timeout>
c0010bc7:	83 c4 10             	add    esp,0x10
c0010bca:	83 ec 04             	sub    esp,0x4
c0010bcd:	6a 00                	push   0x0
c0010bcf:	68 8c 0b 01 c0       	push   0xc0010b8c
c0010bd4:	68 88 13 00 00       	push   0x1388
c0010bd9:	e8 86 fd ff ff       	call   c0010964 <sys_timeout>
c0010bde:	83 c4 10             	add    esp,0x10
c0010be1:	90                   	nop
c0010be2:	83 c4 0c             	add    esp,0xc
c0010be5:	c3                   	ret    
c0010be6:	66 90                	xchg   ax,ax

c0010be8 <sys_untimeout>:
c0010be8:	83 ec 1c             	sub    esp,0x1c
c0010beb:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 84 b4 00 00 00    	je     c0010cac <sys_untimeout+0xc4>
c0010bf8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010bfd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c01:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010c09:	e9 8e 00 00 00       	jmp    c0010c9c <sys_untimeout+0xb4>
c0010c0e:	66 90                	xchg   ax,ax
c0010c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c17:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010c1b:	75 6b                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c24:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010c28:	75 5e                	jne    c0010c88 <sys_untimeout+0xa0>
c0010c2a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010c2f:	75 0f                	jne    c0010c40 <sys_untimeout+0x58>
c0010c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c37:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c3c:	eb 0e                	jmp    c0010c4c <sys_untimeout+0x64>
c0010c3e:	66 90                	xchg   ax,ax
c0010c40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c44:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c4a:	89 10                	mov    DWORD PTR [eax],edx
c0010c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c52:	85 c0                	test   eax,eax
c0010c54:	74 1e                	je     c0010c74 <sys_untimeout+0x8c>
c0010c56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c5c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010c5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010c66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c6c:	01 ca                	add    edx,ecx
c0010c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c71:	8d 76 00             	lea    esi,[esi+0x0]
c0010c74:	83 ec 08             	sub    esp,0x8
c0010c77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c7b:	6a 0b                	push   0xb
c0010c7d:	e8 92 6d ff ff       	call   c0007a14 <memp_free>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	eb 29                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010c87:	90                   	nop
c0010c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c94:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c9a:	66 90                	xchg   ax,ax
c0010c9c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010ca1:	0f 85 69 ff ff ff    	jne    c0010c10 <sys_untimeout+0x28>
c0010ca7:	90                   	nop
c0010ca8:	eb 06                	jmp    c0010cb0 <sys_untimeout+0xc8>
c0010caa:	66 90                	xchg   ax,ax
c0010cac:	90                   	nop
c0010cad:	8d 76 00             	lea    esi,[esi+0x0]
c0010cb0:	83 c4 1c             	add    esp,0x1c
c0010cb3:	c3                   	ret    

c0010cb4 <sys_timeouts_mbox_fetch>:
c0010cb4:	83 ec 1c             	sub    esp,0x1c
c0010cb7:	90                   	nop
c0010cb8:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cbd:	85 c0                	test   eax,eax
c0010cbf:	75 1f                	jne    c0010ce0 <sys_timeouts_mbox_fetch+0x2c>
c0010cc1:	83 ec 04             	sub    esp,0x4
c0010cc4:	6a 00                	push   0x0
c0010cc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cce:	e8 31 00 ff ff       	call   c0000d04 <sys_arch_mbox_fetch>
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010cda:	e9 cd 00 00 00       	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010cdf:	90                   	nop
c0010ce0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ce8:	85 c0                	test   eax,eax
c0010cea:	74 24                	je     c0010d10 <sys_timeouts_mbox_fetch+0x5c>
c0010cec:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cf1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf4:	83 ec 04             	sub    esp,0x4
c0010cf7:	50                   	push   eax
c0010cf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010d00:	e8 ff ff fe ff       	call   c0000d04 <sys_arch_mbox_fetch>
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d0c:	eb 0a                	jmp    c0010d18 <sys_timeouts_mbox_fetch+0x64>
c0010d0e:	66 90                	xchg   ax,ax
c0010d10:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010d18:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010d1d:	75 5d                	jne    c0010d7c <sys_timeouts_mbox_fetch+0xc8>
c0010d1f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d2e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d42:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d48:	83 ec 08             	sub    esp,0x8
c0010d4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010d4f:	6a 0b                	push   0xb
c0010d51:	e8 be 6c ff ff       	call   c0007a14 <memp_free>
c0010d56:	83 c4 10             	add    esp,0x10
c0010d59:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010d5e:	0f 84 54 ff ff ff    	je     c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010d6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d6f:	ff d0                	call   eax
c0010d71:	83 c4 10             	add    esp,0x10
c0010d74:	e9 3f ff ff ff       	jmp    c0010cb8 <sys_timeouts_mbox_fetch+0x4>
c0010d79:	8d 76 00             	lea    esi,[esi+0x0]
c0010d7c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d84:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d88:	73 16                	jae    c0010da0 <sys_timeouts_mbox_fetch+0xec>
c0010d8a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d8f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d92:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010d97:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010d9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010d9e:	eb 0c                	jmp    c0010dac <sys_timeouts_mbox_fetch+0xf8>
c0010da0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010da5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dac:	90                   	nop
c0010dad:	83 c4 1c             	add    esp,0x1c
c0010db0:	c3                   	ret    
c0010db1:	66 90                	xchg   ax,ax
c0010db3:	90                   	nop

c0010db4 <udp_input>:
c0010db4:	53                   	push   ebx
c0010db5:	83 ec 28             	sub    esp,0x28
c0010db8:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010dbe:	83 c0 01             	add    eax,0x1
c0010dc1:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010dd9:	0f b7 d8             	movzx  ebx,ax
c0010ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010de0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010de3:	0f b7 c0             	movzx  eax,ax
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	50                   	push   eax
c0010dea:	e8 2d fe fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010def:	83 c4 10             	add    esp,0x10
c0010df2:	0f b7 c0             	movzx  eax,ax
c0010df5:	c1 e8 08             	shr    eax,0x8
c0010df8:	0f b7 c0             	movzx  eax,ax
c0010dfb:	83 e0 0f             	and    eax,0xf
c0010dfe:	83 c0 02             	add    eax,0x2
c0010e01:	c1 e0 02             	shl    eax,0x2
c0010e04:	39 c3                	cmp    ebx,eax
c0010e06:	7c 3c                	jl     c0010e44 <udp_input+0x90>
c0010e08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010e0f:	0f b7 c0             	movzx  eax,ax
c0010e12:	83 ec 0c             	sub    esp,0xc
c0010e15:	50                   	push   eax
c0010e16:	e8 01 fe fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	0f b7 c0             	movzx  eax,ax
c0010e21:	c1 e8 08             	shr    eax,0x8
c0010e24:	83 e0 0f             	and    eax,0xf
c0010e27:	c1 e0 02             	shl    eax,0x2
c0010e2a:	f7 d8                	neg    eax
c0010e2c:	98                   	cwde   
c0010e2d:	83 ec 08             	sub    esp,0x8
c0010e30:	50                   	push   eax
c0010e31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e35:	e8 fa 72 ff ff       	call   c0008134 <pbuf_header>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	0f b6 c0             	movzx  eax,al
c0010e40:	85 c0                	test   eax,eax
c0010e42:	74 34                	je     c0010e78 <udp_input+0xc4>
c0010e44:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010e4a:	83 c0 01             	add    eax,0x1
c0010e4d:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010e53:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010e59:	83 c0 01             	add    eax,0x1
c0010e5c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010e62:	83 ec 0c             	sub    esp,0xc
c0010e65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e69:	e8 66 74 ff ff       	call   c00082d4 <pbuf_free>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	e9 aa 03 00 00       	jmp    c0011220 <udp_input+0x46c>
c0010e76:	66 90                	xchg   ax,ax
c0010e78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010e7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e83:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e88:	83 ec 08             	sub    esp,0x8
c0010e8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010e8f:	50                   	push   eax
c0010e90:	e8 e3 2f 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010ea3:	0f b7 c0             	movzx  eax,ax
c0010ea6:	83 ec 0c             	sub    esp,0xc
c0010ea9:	50                   	push   eax
c0010eaa:	e8 6d fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010eaf:	83 c4 10             	add    esp,0x10
c0010eb2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ebb:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010ebf:	0f b7 c0             	movzx  eax,ax
c0010ec2:	83 ec 0c             	sub    esp,0xc
c0010ec5:	50                   	push   eax
c0010ec6:	e8 51 fd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010ed3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010edb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010ee0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010ee8:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010eed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ef1:	e9 0a 01 00 00       	jmp    c0011000 <udp_input+0x24c>
c0010ef6:	66 90                	xchg   ax,ax
c0010ef8:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010efd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f01:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010f05:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010f0a:	0f b7 c0             	movzx  eax,ax
c0010f0d:	39 c2                	cmp    edx,eax
c0010f0f:	75 57                	jne    c0010f68 <udp_input+0x1b4>
c0010f11:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f16:	85 c0                	test   eax,eax
c0010f18:	75 12                	jne    c0010f2c <udp_input+0x178>
c0010f1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f1e:	85 c0                	test   eax,eax
c0010f20:	74 22                	je     c0010f44 <udp_input+0x190>
c0010f22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f26:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 18                	je     c0010f44 <udp_input+0x190>
c0010f2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f32:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f37:	39 c2                	cmp    edx,eax
c0010f39:	74 09                	je     c0010f44 <udp_input+0x190>
c0010f3b:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010f40:	85 c0                	test   eax,eax
c0010f42:	74 24                	je     c0010f68 <udp_input+0x1b4>
c0010f44:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010f49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f4e:	75 18                	jne    c0010f68 <udp_input+0x1b4>
c0010f50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f54:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010f57:	0f b6 c0             	movzx  eax,al
c0010f5a:	83 e0 04             	and    eax,0x4
c0010f5d:	75 09                	jne    c0010f68 <udp_input+0x1b4>
c0010f5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f63:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010f67:	90                   	nop
c0010f68:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010f6d:	85 c0                	test   eax,eax
c0010f6f:	74 7b                	je     c0010fec <udp_input+0x238>
c0010f71:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f75:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010f78:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010f7d:	0f b7 c0             	movzx  eax,ax
c0010f80:	39 c2                	cmp    edx,eax
c0010f82:	75 68                	jne    c0010fec <udp_input+0x238>
c0010f84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f88:	83 c0 04             	add    eax,0x4
c0010f8b:	74 1b                	je     c0010fa8 <udp_input+0x1f4>
c0010f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 10                	je     c0010fa8 <udp_input+0x1f4>
c0010f98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f9f:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010fa4:	39 c2                	cmp    edx,eax
c0010fa6:	75 44                	jne    c0010fec <udp_input+0x238>
c0010fa8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010fad:	74 29                	je     c0010fd8 <udp_input+0x224>
c0010faf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fb3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010fb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010fba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fbd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010fc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010fce:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010fd3:	eb 37                	jmp    c001100c <udp_input+0x258>
c0010fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fd8:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010fde:	83 c0 01             	add    eax,0x1
c0010fe1:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010fe7:	eb 23                	jmp    c001100c <udp_input+0x258>
c0010fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0010fec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ff4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ff8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010ffb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010fff:	90                   	nop
c0011000:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011005:	0f 85 ed fe ff ff    	jne    c0010ef8 <udp_input+0x144>
c001100b:	90                   	nop
c001100c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011011:	75 09                	jne    c001101c <udp_input+0x268>
c0011013:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001101b:	90                   	nop
c001101c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011021:	75 15                	jne    c0011038 <udp_input+0x284>
c0011023:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011027:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001102a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c001102f:	39 c2                	cmp    edx,eax
c0011031:	0f 85 d9 01 00 00    	jne    c0011210 <udp_input+0x45c>
c0011037:	90                   	nop
c0011038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001103c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0011040:	0f b7 c0             	movzx  eax,ax
c0011043:	85 c0                	test   eax,eax
c0011045:	74 61                	je     c00110a8 <udp_input+0x2f4>
c0011047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001104b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001104e:	0f b7 c0             	movzx  eax,ax
c0011051:	83 ec 0c             	sub    esp,0xc
c0011054:	50                   	push   eax
c0011055:	6a 11                	push   0x11
c0011057:	68 98 68 03 c0       	push   0xc0036898
c001105c:	68 90 68 03 c0       	push   0xc0036890
c0011061:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011065:	e8 26 21 00 00       	call   c0013190 <inet_chksum_pseudo>
c001106a:	83 c4 20             	add    esp,0x20
c001106d:	0f b7 c0             	movzx  eax,ax
c0011070:	85 c0                	test   eax,eax
c0011072:	74 34                	je     c00110a8 <udp_input+0x2f4>
c0011074:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c001107a:	83 c0 01             	add    eax,0x1
c001107d:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0011083:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011089:	83 c0 01             	add    eax,0x1
c001108c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011092:	83 ec 0c             	sub    esp,0xc
c0011095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011099:	e8 36 72 ff ff       	call   c00082d4 <pbuf_free>
c001109e:	83 c4 10             	add    esp,0x10
c00110a1:	e9 7a 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110a6:	66 90                	xchg   ax,ax
c00110a8:	83 ec 08             	sub    esp,0x8
c00110ab:	6a f8                	push   0xfffffff8
c00110ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110b1:	e8 7e 70 ff ff       	call   c0008134 <pbuf_header>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	0f b6 c0             	movzx  eax,al
c00110bc:	85 c0                	test   eax,eax
c00110be:	74 38                	je     c00110f8 <udp_input+0x344>
c00110c0:	83 ec 08             	sub    esp,0x8
c00110c3:	68 49 09 03 c0       	push   0xc0030949
c00110c8:	68 e6 f9 02 c0       	push   0xc002f9e6
c00110cd:	e8 fe e9 00 00       	call   c001fad0 <CPrintf>
c00110d2:	83 c4 10             	add    esp,0x10
c00110d5:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00110db:	83 c0 01             	add    eax,0x1
c00110de:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00110e4:	83 ec 0c             	sub    esp,0xc
c00110e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110eb:	e8 e4 71 ff ff       	call   c00082d4 <pbuf_free>
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	e9 28 01 00 00       	jmp    c0011220 <udp_input+0x46c>
c00110f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00110fd:	74 51                	je     c0011150 <udp_input+0x39c>
c00110ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011103:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011106:	85 c0                	test   eax,eax
c0011108:	74 32                	je     c001113c <udp_input+0x388>
c001110a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001110e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011111:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c0011116:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001111a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001111d:	83 ec 0c             	sub    esp,0xc
c0011120:	51                   	push   ecx
c0011121:	68 90 68 03 c0       	push   0xc0036890
c0011126:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001112a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001112e:	52                   	push   edx
c001112f:	ff d0                	call   eax
c0011131:	83 c4 20             	add    esp,0x20
c0011134:	e9 e7 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011139:	8d 76 00             	lea    esi,[esi+0x0]
c001113c:	83 ec 0c             	sub    esp,0xc
c001113f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011143:	e8 8c 71 ff ff       	call   c00082d4 <pbuf_free>
c0011148:	83 c4 10             	add    esp,0x10
c001114b:	e9 d0 00 00 00       	jmp    c0011220 <udp_input+0x46c>
c0011150:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011155:	85 c0                	test   eax,eax
c0011157:	0f 85 83 00 00 00    	jne    c00111e0 <udp_input+0x42c>
c001115d:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0011162:	25 f0 00 00 00       	and    eax,0xf0
c0011167:	3d e0 00 00 00       	cmp    eax,0xe0
c001116c:	74 72                	je     c00111e0 <udp_input+0x42c>
c001116e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011172:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011175:	0f b7 c0             	movzx  eax,ax
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	50                   	push   eax
c001117c:	e8 9b fa fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011181:	83 c4 10             	add    esp,0x10
c0011184:	0f b7 c0             	movzx  eax,ax
c0011187:	c1 e8 08             	shr    eax,0x8
c001118a:	0f b7 c0             	movzx  eax,ax
c001118d:	83 e0 0f             	and    eax,0xf
c0011190:	83 c0 02             	add    eax,0x2
c0011193:	c1 e0 02             	shl    eax,0x2
c0011196:	98                   	cwde   
c0011197:	83 ec 08             	sub    esp,0x8
c001119a:	50                   	push   eax
c001119b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001119f:	e8 90 6f ff ff       	call   c0008134 <pbuf_header>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00111ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111ae:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00111b2:	74 18                	je     c00111cc <udp_input+0x418>
c00111b4:	83 ec 08             	sub    esp,0x8
c00111b7:	68 5d 09 03 c0       	push   0xc003095d
c00111bc:	68 e6 f9 02 c0       	push   0xc002f9e6
c00111c1:	e8 0a e9 00 00       	call   c001fad0 <CPrintf>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	8d 76 00             	lea    esi,[esi+0x0]
c00111cc:	83 ec 08             	sub    esp,0x8
c00111cf:	6a 03                	push   0x3
c00111d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111d5:	e8 76 1e 00 00       	call   c0013050 <icmp_dest_unreach>
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	8d 76 00             	lea    esi,[esi+0x0]
c00111e0:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c00111e6:	83 c0 01             	add    eax,0x1
c00111e9:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c00111ef:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c00111f5:	83 c0 01             	add    eax,0x1
c00111f8:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c00111fe:	83 ec 0c             	sub    esp,0xc
c0011201:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011205:	e8 ca 70 ff ff       	call   c00082d4 <pbuf_free>
c001120a:	83 c4 10             	add    esp,0x10
c001120d:	eb 11                	jmp    c0011220 <udp_input+0x46c>
c001120f:	90                   	nop
c0011210:	83 ec 0c             	sub    esp,0xc
c0011213:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011217:	e8 b8 70 ff ff       	call   c00082d4 <pbuf_free>
c001121c:	83 c4 10             	add    esp,0x10
c001121f:	90                   	nop
c0011220:	90                   	nop
c0011221:	83 c4 28             	add    esp,0x28
c0011224:	5b                   	pop    ebx
c0011225:	c3                   	ret    
c0011226:	66 90                	xchg   ax,ax

c0011228 <udp_bind>:
c0011228:	83 ec 2c             	sub    esp,0x2c
c001122b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001122f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011234:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011239:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c001123e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011242:	e9 8d 00 00 00       	jmp    c00112d4 <udp_bind+0xac>
c0011247:	90                   	nop
c0011248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001124c:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011250:	75 26                	jne    c0011278 <udp_bind+0x50>
c0011252:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011257:	85 c0                	test   eax,eax
c0011259:	74 15                	je     c0011270 <udp_bind+0x48>
c001125b:	83 ec 08             	sub    esp,0x8
c001125e:	68 71 09 03 c0       	push   0xc0030971
c0011263:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011268:	e8 63 e8 00 00       	call   c001fad0 <CPrintf>
c001126d:	83 c4 10             	add    esp,0x10
c0011270:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c0011275:	eb 51                	jmp    c00112c8 <udp_bind+0xa0>
c0011277:	90                   	nop
c0011278:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001127c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011280:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011285:	0f b7 c0             	movzx  eax,ax
c0011288:	39 c2                	cmp    edx,eax
c001128a:	75 3c                	jne    c00112c8 <udp_bind+0xa0>
c001128c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011290:	85 c0                	test   eax,eax
c0011292:	74 2c                	je     c00112c0 <udp_bind+0x98>
c0011294:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011298:	8b 00                	mov    eax,DWORD PTR [eax]
c001129a:	85 c0                	test   eax,eax
c001129c:	74 22                	je     c00112c0 <udp_bind+0x98>
c001129e:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112a3:	74 1b                	je     c00112c0 <udp_bind+0x98>
c00112a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ab:	85 c0                	test   eax,eax
c00112ad:	74 11                	je     c00112c0 <udp_bind+0x98>
c00112af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00112b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00112bb:	39 c2                	cmp    edx,eax
c00112bd:	75 09                	jne    c00112c8 <udp_bind+0xa0>
c00112bf:	90                   	nop
c00112c0:	b0 f8                	mov    al,0xf8
c00112c2:	e9 dd 00 00 00       	jmp    c00113a4 <udp_bind+0x17c>
c00112c7:	90                   	nop
c00112c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00112cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00112cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00112d3:	90                   	nop
c00112d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112d9:	0f 85 69 ff ff ff    	jne    c0011248 <udp_bind+0x20>
c00112df:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00112e4:	74 0a                	je     c00112f0 <udp_bind+0xc8>
c00112e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00112ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00112ec:	eb 0a                	jmp    c00112f8 <udp_bind+0xd0>
c00112ee:	66 90                	xchg   ax,ax
c00112f0:	b8 00 00 00 00       	mov    eax,0x0
c00112f5:	8d 76 00             	lea    esi,[esi+0x0]
c00112f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112fc:	89 02                	mov    DWORD PTR [edx],eax
c00112fe:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011303:	85 c0                	test   eax,eax
c0011305:	75 6d                	jne    c0011374 <udp_bind+0x14c>
c0011307:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c001130e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011313:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011317:	eb 3b                	jmp    c0011354 <udp_bind+0x12c>
c0011319:	8d 76 00             	lea    esi,[esi+0x0]
c001131c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011320:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011324:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0011329:	0f b7 c0             	movzx  eax,ax
c001132c:	39 c2                	cmp    edx,eax
c001132e:	75 18                	jne    c0011348 <udp_bind+0x120>
c0011330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011334:	83 c0 01             	add    eax,0x1
c0011337:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001133c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011345:	eb 0d                	jmp    c0011354 <udp_bind+0x12c>
c0011347:	90                   	nop
c0011348:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001134c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001134f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011353:	90                   	nop
c0011354:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011359:	74 0d                	je     c0011368 <udp_bind+0x140>
c001135b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011360:	3d ff ff 00 00       	cmp    eax,0xffff
c0011365:	75 b5                	jne    c001131c <udp_bind+0xf4>
c0011367:	90                   	nop
c0011368:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001136d:	74 05                	je     c0011374 <udp_bind+0x14c>
c001136f:	b0 f8                	mov    al,0xf8
c0011371:	eb 31                	jmp    c00113a4 <udp_bind+0x17c>
c0011373:	90                   	nop
c0011374:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001137c:	66 89 50 12          	mov    WORD PTR [eax+0x12],dx
c0011380:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0011385:	85 c0                	test   eax,eax
c0011387:	75 17                	jne    c00113a0 <udp_bind+0x178>
c0011389:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c001138f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011393:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011396:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001139a:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001139f:	90                   	nop
c00113a0:	b0 00                	mov    al,0x0
c00113a2:	66 90                	xchg   ax,ax
c00113a4:	83 c4 2c             	add    esp,0x2c
c00113a7:	c3                   	ret    

c00113a8 <udp_sendto_if>:
c00113a8:	83 ec 2c             	sub    esp,0x2c
c00113ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00113af:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00113b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113b8:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113bc:	0f b7 c0             	movzx  eax,ax
c00113bf:	85 c0                	test   eax,eax
c00113c1:	75 39                	jne    c00113fc <udp_sendto_if+0x54>
c00113c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113c7:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113cb:	0f b7 d0             	movzx  edx,ax
c00113ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113d2:	83 ec 04             	sub    esp,0x4
c00113d5:	52                   	push   edx
c00113d6:	50                   	push   eax
c00113d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00113db:	e8 48 fe ff ff       	call   c0011228 <udp_bind>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00113e7:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c00113ec:	85 c0                	test   eax,eax
c00113ee:	74 0c                	je     c00113fc <udp_sendto_if+0x54>
c00113f0:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00113f4:	e9 2f 02 00 00       	jmp    c0011628 <udp_sendto_if+0x280>
c00113f9:	8d 76 00             	lea    esi,[esi+0x0]
c00113fc:	83 ec 08             	sub    esp,0x8
c00113ff:	6a 08                	push   0x8
c0011401:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011405:	e8 2a 6d ff ff       	call   c0008134 <pbuf_header>
c001140a:	83 c4 10             	add    esp,0x10
c001140d:	0f b6 c0             	movzx  eax,al
c0011410:	85 c0                	test   eax,eax
c0011412:	74 48                	je     c001145c <udp_sendto_if+0xb4>
c0011414:	83 ec 04             	sub    esp,0x4
c0011417:	6a 00                	push   0x0
c0011419:	6a 08                	push   0x8
c001141b:	6a 01                	push   0x1
c001141d:	e8 8e 70 ff ff       	call   c00084b0 <pbuf_alloc>
c0011422:	83 c4 10             	add    esp,0x10
c0011425:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011429:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001142e:	75 08                	jne    c0011438 <udp_sendto_if+0x90>
c0011430:	b0 ff                	mov    al,0xff
c0011432:	e9 f1 01 00 00       	jmp    c0011628 <udp_sendto_if+0x280>
c0011437:	90                   	nop
c0011438:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001143c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001143f:	0f b7 c0             	movzx  eax,ax
c0011442:	85 c0                	test   eax,eax
c0011444:	74 1e                	je     c0011464 <udp_sendto_if+0xbc>
c0011446:	83 ec 08             	sub    esp,0x8
c0011449:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001144d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011451:	e8 a2 77 ff ff       	call   c0008bf8 <pbuf_chain>
c0011456:	83 c4 10             	add    esp,0x10
c0011459:	eb 09                	jmp    c0011464 <udp_sendto_if+0xbc>
c001145b:	90                   	nop
c001145c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011460:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011464:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011468:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001146c:	0f b7 c0             	movzx  eax,ax
c001146f:	83 f8 07             	cmp    eax,0x7
c0011472:	77 18                	ja     c001148c <udp_sendto_if+0xe4>
c0011474:	83 ec 08             	sub    esp,0x8
c0011477:	68 80 09 03 c0       	push   0xc0030980
c001147c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011481:	e8 4a e6 00 00       	call   c001fad0 <CPrintf>
c0011486:	83 c4 10             	add    esp,0x10
c0011489:	8d 76 00             	lea    esi,[esi+0x0]
c001148c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011493:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011497:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001149b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001149f:	0f b7 c0             	movzx  eax,ax
c00114a2:	83 ec 0c             	sub    esp,0xc
c00114a5:	50                   	push   eax
c00114a6:	e8 71 f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	89 c2                	mov    edx,eax
c00114b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114b4:	66 89 10             	mov    WORD PTR [eax],dx
c00114b7:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00114bc:	83 ec 0c             	sub    esp,0xc
c00114bf:	50                   	push   eax
c00114c0:	e8 57 f7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00114c5:	83 c4 10             	add    esp,0x10
c00114c8:	89 c2                	mov    edx,eax
c00114ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ce:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00114d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114d6:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c00114dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e0:	85 c0                	test   eax,eax
c00114e2:	74 0c                	je     c00114f0 <udp_sendto_if+0x148>
c00114e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114ea:	85 c0                	test   eax,eax
c00114ec:	75 12                	jne    c0011500 <udp_sendto_if+0x158>
c00114ee:	66 90                	xchg   ax,ax
c00114f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00114f4:	83 c0 04             	add    eax,0x4
c00114f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114fb:	eb 47                	jmp    c0011544 <udp_sendto_if+0x19c>
c00114fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011504:	8b 10                	mov    edx,DWORD PTR [eax]
c0011506:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001150a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001150d:	39 c2                	cmp    edx,eax
c001150f:	74 2b                	je     c001153c <udp_sendto_if+0x194>
c0011511:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011515:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011519:	74 19                	je     c0011534 <udp_sendto_if+0x18c>
c001151b:	83 ec 0c             	sub    esp,0xc
c001151e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011522:	e8 ad 6d ff ff       	call   c00082d4 <pbuf_free>
c0011527:	83 c4 10             	add    esp,0x10
c001152a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011532:	66 90                	xchg   ax,ax
c0011534:	b0 fa                	mov    al,0xfa
c0011536:	e9 ed 00 00 00       	jmp    c0011628 <udp_sendto_if+0x280>
c001153b:	90                   	nop
c001153c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011540:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011544:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011548:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001154b:	0f b7 c0             	movzx  eax,ax
c001154e:	83 ec 0c             	sub    esp,0xc
c0011551:	50                   	push   eax
c0011552:	e8 c5 f6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0011557:	83 c4 10             	add    esp,0x10
c001155a:	89 c2                	mov    edx,eax
c001155c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011560:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0011564:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011568:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c001156b:	0f b6 c0             	movzx  eax,al
c001156e:	83 e0 01             	and    eax,0x1
c0011571:	75 49                	jne    c00115bc <udp_sendto_if+0x214>
c0011573:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011577:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001157a:	0f b7 c0             	movzx  eax,ax
c001157d:	83 ec 0c             	sub    esp,0xc
c0011580:	50                   	push   eax
c0011581:	6a 11                	push   0x11
c0011583:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011587:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001158b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001158f:	e8 fc 1b 00 00       	call   c0013190 <inet_chksum_pseudo>
c0011594:	83 c4 20             	add    esp,0x20
c0011597:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001159c:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00115a1:	85 c0                	test   eax,eax
c00115a3:	75 07                	jne    c00115ac <udp_sendto_if+0x204>
c00115a5:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00115ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115b0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00115b5:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00115b9:	8d 76 00             	lea    esi,[esi+0x0]
c00115bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115c0:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00115c3:	0f b6 d0             	movzx  edx,al
c00115c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00115ca:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c00115cd:	0f b6 c0             	movzx  eax,al
c00115d0:	83 ec 04             	sub    esp,0x4
c00115d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00115d7:	6a 11                	push   0x11
c00115d9:	52                   	push   edx
c00115da:	50                   	push   eax
c00115db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00115e7:	e8 08 25 00 00       	call   c0013af4 <ip_output_if>
c00115ec:	83 c4 20             	add    esp,0x20
c00115ef:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00115f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00115f7:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00115fb:	74 17                	je     c0011614 <udp_sendto_if+0x26c>
c00115fd:	83 ec 0c             	sub    esp,0xc
c0011600:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011604:	e8 cb 6c ff ff       	call   c00082d4 <pbuf_free>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011614:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c001161a:	83 c0 01             	add    eax,0x1
c001161d:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c0011623:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011627:	90                   	nop
c0011628:	83 c4 2c             	add    esp,0x2c
c001162b:	c3                   	ret    

c001162c <udp_sendto>:
c001162c:	83 ec 2c             	sub    esp,0x2c
c001162f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011633:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011638:	83 ec 0c             	sub    esp,0xc
c001163b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001163f:	e8 d8 1f 00 00       	call   c001361c <ip_route>
c0011644:	83 c4 10             	add    esp,0x10
c0011647:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001164b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011650:	75 16                	jne    c0011668 <udp_sendto+0x3c>
c0011652:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011658:	83 c0 01             	add    eax,0x1
c001165b:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c0011661:	b0 fc                	mov    al,0xfc
c0011663:	eb 27                	jmp    c001168c <udp_sendto+0x60>
c0011665:	8d 76 00             	lea    esi,[esi+0x0]
c0011668:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001166d:	83 ec 0c             	sub    esp,0xc
c0011670:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011674:	50                   	push   eax
c0011675:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011679:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001167d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011681:	e8 22 fd ff ff       	call   c00113a8 <udp_sendto_if>
c0011686:	83 c4 20             	add    esp,0x20
c0011689:	8d 76 00             	lea    esi,[esi+0x0]
c001168c:	83 c4 2c             	add    esp,0x2c
c001168f:	c3                   	ret    

c0011690 <udp_send>:
c0011690:	83 ec 0c             	sub    esp,0xc
c0011693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011697:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001169a:	0f b7 c0             	movzx  eax,ax
c001169d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00116a1:	83 c2 04             	add    edx,0x4
c00116a4:	50                   	push   eax
c00116a5:	52                   	push   edx
c00116a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116ae:	e8 79 ff ff ff       	call   c001162c <udp_sendto>
c00116b3:	83 c4 10             	add    esp,0x10
c00116b6:	83 c4 0c             	add    esp,0xc
c00116b9:	c3                   	ret    
c00116ba:	66 90                	xchg   ax,ax

c00116bc <udp_connect>:
c00116bc:	83 ec 2c             	sub    esp,0x2c
c00116bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00116c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00116c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116cc:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116d0:	0f b7 c0             	movzx  eax,ax
c00116d3:	85 c0                	test   eax,eax
c00116d5:	75 39                	jne    c0011710 <udp_connect+0x54>
c00116d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116db:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00116df:	0f b7 d0             	movzx  edx,ax
c00116e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116e6:	83 ec 04             	sub    esp,0x4
c00116e9:	52                   	push   edx
c00116ea:	50                   	push   eax
c00116eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00116ef:	e8 34 fb ff ff       	call   c0011228 <udp_bind>
c00116f4:	83 c4 10             	add    esp,0x10
c00116f7:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00116fb:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011700:	85 c0                	test   eax,eax
c0011702:	74 0c                	je     c0011710 <udp_connect+0x54>
c0011704:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011708:	e9 8b 00 00 00       	jmp    c0011798 <udp_connect+0xdc>
c001170d:	8d 76 00             	lea    esi,[esi+0x0]
c0011710:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011715:	74 09                	je     c0011720 <udp_connect+0x64>
c0011717:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001171b:	8b 00                	mov    eax,DWORD PTR [eax]
c001171d:	eb 09                	jmp    c0011728 <udp_connect+0x6c>
c001171f:	90                   	nop
c0011720:	b8 00 00 00 00       	mov    eax,0x0
c0011725:	8d 76 00             	lea    esi,[esi+0x0]
c0011728:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001172c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001172f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011737:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
c001173b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001173f:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011742:	83 c8 04             	or     eax,0x4
c0011745:	88 c2                	mov    dl,al
c0011747:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001174b:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001174e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011753:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011757:	eb 1f                	jmp    c0011778 <udp_connect+0xbc>
c0011759:	8d 76 00             	lea    esi,[esi+0x0]
c001175c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011760:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011764:	75 06                	jne    c001176c <udp_connect+0xb0>
c0011766:	b0 00                	mov    al,0x0
c0011768:	eb 2e                	jmp    c0011798 <udp_connect+0xdc>
c001176a:	66 90                	xchg   ax,ax
c001176c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011770:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011773:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011777:	90                   	nop
c0011778:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001177d:	75 dd                	jne    c001175c <udp_connect+0xa0>
c001177f:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0011785:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011789:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001178c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011790:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0011795:	b0 00                	mov    al,0x0
c0011797:	90                   	nop
c0011798:	83 c4 2c             	add    esp,0x2c
c001179b:	c3                   	ret    

c001179c <udp_disconnect>:
c001179c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117ab:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00117b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b5:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00117b8:	83 e0 fb             	and    eax,0xfffffffb
c00117bb:	88 c2                	mov    dl,al
c00117bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c1:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c00117c4:	90                   	nop
c00117c5:	c3                   	ret    
c00117c6:	66 90                	xchg   ax,ax

c00117c8 <udp_recv>:
c00117c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00117d0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00117d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00117db:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00117de:	90                   	nop
c00117df:	c3                   	ret    

c00117e0 <udp_remove>:
c00117e0:	83 ec 1c             	sub    esp,0x1c
c00117e3:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117e8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00117ec:	75 12                	jne    c0011800 <udp_remove+0x20>
c00117ee:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c00117f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117f6:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00117fb:	eb 4b                	jmp    c0011848 <udp_remove+0x68>
c00117fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011800:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011809:	eb 35                	jmp    c0011840 <udp_remove+0x60>
c001180b:	90                   	nop
c001180c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011810:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011813:	85 c0                	test   eax,eax
c0011815:	74 1d                	je     c0011834 <udp_remove+0x54>
c0011817:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001181b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001181e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011822:	75 10                	jne    c0011834 <udp_remove+0x54>
c0011824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011828:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001182b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001182f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011832:	66 90                	xchg   ax,ax
c0011834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011838:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001183b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001183f:	90                   	nop
c0011840:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011845:	75 c5                	jne    c001180c <udp_remove+0x2c>
c0011847:	90                   	nop
c0011848:	83 ec 08             	sub    esp,0x8
c001184b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001184f:	6a 01                	push   0x1
c0011851:	e8 be 61 ff ff       	call   c0007a14 <memp_free>
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	90                   	nop
c001185a:	83 c4 1c             	add    esp,0x1c
c001185d:	c3                   	ret    
c001185e:	66 90                	xchg   ax,ax

c0011860 <udp_new>:
c0011860:	83 ec 1c             	sub    esp,0x1c
c0011863:	83 ec 0c             	sub    esp,0xc
c0011866:	6a 01                	push   0x1
c0011868:	e8 7b 60 ff ff       	call   c00078e8 <memp_malloc>
c001186d:	83 c4 10             	add    esp,0x10
c0011870:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011874:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011879:	74 1d                	je     c0011898 <udp_new+0x38>
c001187b:	83 ec 04             	sub    esp,0x4
c001187e:	6a 20                	push   0x20
c0011880:	6a 00                	push   0x0
c0011882:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011886:	e8 65 ec fe ff       	call   c00004f0 <memset>
c001188b:	83 c4 10             	add    esp,0x10
c001188e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011892:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0011896:	66 90                	xchg   ax,ax
c0011898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001189c:	83 c4 1c             	add    esp,0x1c
c001189f:	c3                   	ret    

c00118a0 <free_entry>:
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a7:	c1 e0 04             	shl    eax,0x4
c00118aa:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118af:	8b 00                	mov    eax,DWORD PTR [eax]
c00118b1:	85 c0                	test   eax,eax
c00118b3:	74 2f                	je     c00118e4 <free_entry+0x44>
c00118b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b9:	c1 e0 04             	shl    eax,0x4
c00118bc:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00118c3:	83 ec 0c             	sub    esp,0xc
c00118c6:	50                   	push   eax
c00118c7:	e8 08 6a ff ff       	call   c00082d4 <pbuf_free>
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d3:	c1 e0 04             	shl    eax,0x4
c00118d6:	05 00 a9 03 c0       	add    eax,0xc003a900
c00118db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00118e1:	8d 76 00             	lea    esi,[esi+0x0]
c00118e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e8:	c1 e0 04             	shl    eax,0x4
c00118eb:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118f0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00118f3:	90                   	nop
c00118f4:	83 c4 0c             	add    esp,0xc
c00118f7:	c3                   	ret    

c00118f8 <etharp_tmr>:
c00118f8:	83 ec 1c             	sub    esp,0x1c
c00118fb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011900:	e9 a7 00 00 00       	jmp    c00119ac <etharp_tmr+0xb4>
c0011905:	8d 76 00             	lea    esi,[esi+0x0]
c0011908:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001190d:	c1 e0 04             	shl    eax,0x4
c0011910:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011915:	8a 00                	mov    al,BYTE PTR [eax]
c0011917:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001191b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011920:	85 c0                	test   eax,eax
c0011922:	74 7c                	je     c00119a0 <etharp_tmr+0xa8>
c0011924:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011929:	89 c2                	mov    edx,eax
c001192b:	c1 e2 04             	shl    edx,0x4
c001192e:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011934:	8a 12                	mov    dl,BYTE PTR [edx]
c0011936:	83 c2 01             	add    edx,0x1
c0011939:	c1 e0 04             	shl    eax,0x4
c001193c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011941:	88 10                	mov    BYTE PTR [eax],dl
c0011943:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011948:	c1 e0 04             	shl    eax,0x4
c001194b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011950:	8a 00                	mov    al,BYTE PTR [eax]
c0011952:	0f b6 c0             	movzx  eax,al
c0011955:	3d ef 00 00 00       	cmp    eax,0xef
c001195a:	77 30                	ja     c001198c <etharp_tmr+0x94>
c001195c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011961:	c1 e0 04             	shl    eax,0x4
c0011964:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011969:	8a 00                	mov    al,BYTE PTR [eax]
c001196b:	0f b6 c0             	movzx  eax,al
c001196e:	83 f8 01             	cmp    eax,0x1
c0011971:	75 2d                	jne    c00119a0 <etharp_tmr+0xa8>
c0011973:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011978:	c1 e0 04             	shl    eax,0x4
c001197b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011980:	8a 00                	mov    al,BYTE PTR [eax]
c0011982:	0f b6 c0             	movzx  eax,al
c0011985:	83 f8 01             	cmp    eax,0x1
c0011988:	76 16                	jbe    c00119a0 <etharp_tmr+0xa8>
c001198a:	66 90                	xchg   ax,ax
c001198c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011991:	83 ec 0c             	sub    esp,0xc
c0011994:	50                   	push   eax
c0011995:	e8 06 ff ff ff       	call   c00118a0 <free_entry>
c001199a:	83 c4 10             	add    esp,0x10
c001199d:	8d 76 00             	lea    esi,[esi+0x0]
c00119a0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00119a4:	83 c0 01             	add    eax,0x1
c00119a7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119ab:	90                   	nop
c00119ac:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00119b1:	83 f8 09             	cmp    eax,0x9
c00119b4:	0f 86 4e ff ff ff    	jbe    c0011908 <etharp_tmr+0x10>
c00119ba:	90                   	nop
c00119bb:	83 c4 1c             	add    esp,0x1c
c00119be:	c3                   	ret    
c00119bf:	90                   	nop

c00119c0 <find_entry>:
c00119c0:	83 ec 2c             	sub    esp,0x2c
c00119c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00119cb:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c00119d0:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c00119d5:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c00119da:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119df:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c00119e4:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c00119e9:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c00119ee:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c00119f3:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c00119f8:	e9 7f 01 00 00       	jmp    c0011b7c <find_entry+0x1bc>
c00119fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011a00:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a05:	c1 e0 04             	shl    eax,0x4
c0011a08:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011a0d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a0f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011a13:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011a18:	83 f8 0a             	cmp    eax,0xa
c0011a1b:	75 17                	jne    c0011a34 <find_entry+0x74>
c0011a1d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a22:	85 c0                	test   eax,eax
c0011a24:	75 0e                	jne    c0011a34 <find_entry+0x74>
c0011a26:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a2a:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0011a2e:	e9 3d 01 00 00       	jmp    c0011b70 <find_entry+0x1b0>
c0011a33:	90                   	nop
c0011a34:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a39:	85 c0                	test   eax,eax
c0011a3b:	0f 84 2f 01 00 00    	je     c0011b70 <find_entry+0x1b0>
c0011a41:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a46:	83 f8 01             	cmp    eax,0x1
c0011a49:	74 21                	je     c0011a6c <find_entry+0xac>
c0011a4b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a50:	83 f8 02             	cmp    eax,0x2
c0011a53:	74 17                	je     c0011a6c <find_entry+0xac>
c0011a55:	83 ec 08             	sub    esp,0x8
c0011a58:	68 b0 09 03 c0       	push   0xc00309b0
c0011a5d:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011a62:	e8 69 e0 00 00       	call   c001fad0 <CPrintf>
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	66 90                	xchg   ax,ax
c0011a6c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011a71:	74 25                	je     c0011a98 <find_entry+0xd8>
c0011a73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011a77:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a79:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a7e:	c1 e0 04             	shl    eax,0x4
c0011a81:	05 04 a9 03 c0       	add    eax,0xc003a904
c0011a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a88:	39 c2                	cmp    edx,eax
c0011a8a:	75 0c                	jne    c0011a98 <find_entry+0xd8>
c0011a8c:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a90:	e9 53 02 00 00       	jmp    c0011ce8 <find_entry+0x328>
c0011a95:	8d 76 00             	lea    esi,[esi+0x0]
c0011a98:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a9d:	83 f8 01             	cmp    eax,0x1
c0011aa0:	0f 85 8a 00 00 00    	jne    c0011b30 <find_entry+0x170>
c0011aa6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aab:	c1 e0 04             	shl    eax,0x4
c0011aae:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ab5:	85 c0                	test   eax,eax
c0011ab7:	74 3f                	je     c0011af8 <find_entry+0x138>
c0011ab9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011abe:	c1 e0 04             	shl    eax,0x4
c0011ac1:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ac6:	8a 00                	mov    al,BYTE PTR [eax]
c0011ac8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011acd:	0f b6 c0             	movzx  eax,al
c0011ad0:	39 c2                	cmp    edx,eax
c0011ad2:	0f 87 98 00 00 00    	ja     c0011b70 <find_entry+0x1b0>
c0011ad8:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011adc:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011ae0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ae5:	c1 e0 04             	shl    eax,0x4
c0011ae8:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011aed:	8a 00                	mov    al,BYTE PTR [eax]
c0011aef:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011af3:	eb 7b                	jmp    c0011b70 <find_entry+0x1b0>
c0011af5:	8d 76 00             	lea    esi,[esi+0x0]
c0011af8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011afd:	c1 e0 04             	shl    eax,0x4
c0011b00:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b05:	8a 00                	mov    al,BYTE PTR [eax]
c0011b07:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011b0c:	0f b6 c0             	movzx  eax,al
c0011b0f:	39 c2                	cmp    edx,eax
c0011b11:	77 5d                	ja     c0011b70 <find_entry+0x1b0>
c0011b13:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b17:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011b1b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b20:	c1 e0 04             	shl    eax,0x4
c0011b23:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b28:	8a 00                	mov    al,BYTE PTR [eax]
c0011b2a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011b2e:	eb 40                	jmp    c0011b70 <find_entry+0x1b0>
c0011b30:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011b35:	83 f8 02             	cmp    eax,0x2
c0011b38:	75 36                	jne    c0011b70 <find_entry+0x1b0>
c0011b3a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b3f:	c1 e0 04             	shl    eax,0x4
c0011b42:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b47:	8a 00                	mov    al,BYTE PTR [eax]
c0011b49:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011b4e:	0f b6 c0             	movzx  eax,al
c0011b51:	39 c2                	cmp    edx,eax
c0011b53:	77 1b                	ja     c0011b70 <find_entry+0x1b0>
c0011b55:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b59:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011b5d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b62:	c1 e0 04             	shl    eax,0x4
c0011b65:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011b6a:	8a 00                	mov    al,BYTE PTR [eax]
c0011b6c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011b70:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011b74:	83 c0 01             	add    eax,0x1
c0011b77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b7b:	90                   	nop
c0011b7c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b81:	83 f8 09             	cmp    eax,0x9
c0011b84:	0f 86 76 fe ff ff    	jbe    c0011a00 <find_entry+0x40>
c0011b8a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011b8f:	83 e0 02             	and    eax,0x2
c0011b92:	75 14                	jne    c0011ba8 <find_entry+0x1e8>
c0011b94:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011b99:	83 f8 0a             	cmp    eax,0xa
c0011b9c:	75 12                	jne    c0011bb0 <find_entry+0x1f0>
c0011b9e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ba3:	83 e0 01             	and    eax,0x1
c0011ba6:	75 08                	jne    c0011bb0 <find_entry+0x1f0>
c0011ba8:	b0 ff                	mov    al,0xff
c0011baa:	e9 39 01 00 00       	jmp    c0011ce8 <find_entry+0x328>
c0011baf:	90                   	nop
c0011bb0:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011bb5:	83 f8 09             	cmp    eax,0x9
c0011bb8:	7f 0e                	jg     c0011bc8 <find_entry+0x208>
c0011bba:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011bbe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bc2:	e9 a1 00 00 00       	jmp    c0011c68 <find_entry+0x2a8>
c0011bc7:	90                   	nop
c0011bc8:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011bcd:	83 f8 09             	cmp    eax,0x9
c0011bd0:	7f 32                	jg     c0011c04 <find_entry+0x244>
c0011bd2:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011bd6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011bda:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bdf:	c1 e0 04             	shl    eax,0x4
c0011be2:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be9:	85 c0                	test   eax,eax
c0011beb:	74 47                	je     c0011c34 <find_entry+0x274>
c0011bed:	83 ec 08             	sub    esp,0x8
c0011bf0:	68 29 0b 03 c0       	push   0xc0030b29
c0011bf5:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011bfa:	e8 d1 de 00 00       	call   c001fad0 <CPrintf>
c0011bff:	83 c4 10             	add    esp,0x10
c0011c02:	eb 30                	jmp    c0011c34 <find_entry+0x274>
c0011c04:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011c09:	83 f8 09             	cmp    eax,0x9
c0011c0c:	7f 0a                	jg     c0011c18 <find_entry+0x258>
c0011c0e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011c12:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c16:	eb 1c                	jmp    c0011c34 <find_entry+0x274>
c0011c18:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011c1d:	83 f8 09             	cmp    eax,0x9
c0011c20:	7f 0a                	jg     c0011c2c <find_entry+0x26c>
c0011c22:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011c26:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011c2a:	eb 08                	jmp    c0011c34 <find_entry+0x274>
c0011c2c:	b0 ff                	mov    al,0xff
c0011c2e:	e9 b5 00 00 00       	jmp    c0011ce8 <find_entry+0x328>
c0011c33:	90                   	nop
c0011c34:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c39:	83 f8 09             	cmp    eax,0x9
c0011c3c:	76 16                	jbe    c0011c54 <find_entry+0x294>
c0011c3e:	83 ec 08             	sub    esp,0x8
c0011c41:	68 40 0b 03 c0       	push   0xc0030b40
c0011c46:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011c4b:	e8 80 de 00 00       	call   c001fad0 <CPrintf>
c0011c50:	83 c4 10             	add    esp,0x10
c0011c53:	90                   	nop
c0011c54:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c59:	83 ec 0c             	sub    esp,0xc
c0011c5c:	50                   	push   eax
c0011c5d:	e8 3e fc ff ff       	call   c00118a0 <free_entry>
c0011c62:	83 c4 10             	add    esp,0x10
c0011c65:	8d 76 00             	lea    esi,[esi+0x0]
c0011c68:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c6d:	83 f8 09             	cmp    eax,0x9
c0011c70:	76 16                	jbe    c0011c88 <find_entry+0x2c8>
c0011c72:	83 ec 08             	sub    esp,0x8
c0011c75:	68 40 0b 03 c0       	push   0xc0030b40
c0011c7a:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011c7f:	e8 4c de 00 00       	call   c001fad0 <CPrintf>
c0011c84:	83 c4 10             	add    esp,0x10
c0011c87:	90                   	nop
c0011c88:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c8d:	c1 e0 04             	shl    eax,0x4
c0011c90:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011c95:	8a 00                	mov    al,BYTE PTR [eax]
c0011c97:	0f b6 c0             	movzx  eax,al
c0011c9a:	85 c0                	test   eax,eax
c0011c9c:	74 16                	je     c0011cb4 <find_entry+0x2f4>
c0011c9e:	83 ec 08             	sub    esp,0x8
c0011ca1:	68 f0 09 03 c0       	push   0xc00309f0
c0011ca6:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011cab:	e8 20 de 00 00       	call   c001fad0 <CPrintf>
c0011cb0:	83 c4 10             	add    esp,0x10
c0011cb3:	90                   	nop
c0011cb4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011cb9:	74 19                	je     c0011cd4 <find_entry+0x314>
c0011cbb:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011cc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc6:	c1 e2 04             	shl    edx,0x4
c0011cc9:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011ccf:	89 02                	mov    DWORD PTR [edx],eax
c0011cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011cd9:	c1 e0 04             	shl    eax,0x4
c0011cdc:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011ce1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011ce4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ce8:	83 c4 2c             	add    esp,0x2c
c0011ceb:	c3                   	ret    

c0011cec <etharp_send_ip>:
c0011cec:	83 ec 1c             	sub    esp,0x1c
c0011cef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011cf6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011cfe:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d01:	0f b6 c0             	movzx  eax,al
c0011d04:	83 f8 06             	cmp    eax,0x6
c0011d07:	74 17                	je     c0011d20 <etharp_send_ip+0x34>
c0011d09:	83 ec 08             	sub    esp,0x8
c0011d0c:	68 1c 0a 03 c0       	push   0xc0030a1c
c0011d11:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011d16:	e8 b5 dd 00 00       	call   c001fad0 <CPrintf>
c0011d1b:	83 c4 10             	add    esp,0x10
c0011d1e:	66 90                	xchg   ax,ax
c0011d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d24:	83 ec 04             	sub    esp,0x4
c0011d27:	6a 06                	push   0x6
c0011d29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d2d:	50                   	push   eax
c0011d2e:	e8 47 e6 fe ff       	call   c000037a <memcpy>
c0011d33:	83 c4 10             	add    esp,0x10
c0011d36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d3a:	83 c0 06             	add    eax,0x6
c0011d3d:	83 ec 04             	sub    esp,0x4
c0011d40:	6a 06                	push   0x6
c0011d42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011d46:	50                   	push   eax
c0011d47:	e8 2e e6 fe ff       	call   c000037a <memcpy>
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d53:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011d59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011d5d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011d60:	83 ec 08             	sub    esp,0x8
c0011d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011d6b:	ff d0                	call   eax
c0011d6d:	83 c4 10             	add    esp,0x10
c0011d70:	83 c4 1c             	add    esp,0x1c
c0011d73:	c3                   	ret    

c0011d74 <update_arp_entry>:
c0011d74:	83 ec 2c             	sub    esp,0x2c
c0011d77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011d7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d83:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011d86:	0f b6 c0             	movzx  eax,al
c0011d89:	83 f8 06             	cmp    eax,0x6
c0011d8c:	74 16                	je     c0011da4 <update_arp_entry+0x30>
c0011d8e:	83 ec 08             	sub    esp,0x8
c0011d91:	68 60 0a 03 c0       	push   0xc0030a60
c0011d96:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011d9b:	e8 30 dd 00 00       	call   c001fad0 <CPrintf>
c0011da0:	83 c4 10             	add    esp,0x10
c0011da3:	90                   	nop
c0011da4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011da9:	74 39                	je     c0011de4 <update_arp_entry+0x70>
c0011dab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db1:	85 c0                	test   eax,eax
c0011db3:	74 2f                	je     c0011de4 <update_arp_entry+0x70>
c0011db5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011db9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbb:	83 ec 08             	sub    esp,0x8
c0011dbe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dc2:	50                   	push   eax
c0011dc3:	e8 b0 20 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c0011dc8:	83 c4 10             	add    esp,0x10
c0011dcb:	0f b6 c0             	movzx  eax,al
c0011dce:	85 c0                	test   eax,eax
c0011dd0:	75 12                	jne    c0011de4 <update_arp_entry+0x70>
c0011dd2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd8:	25 f0 00 00 00       	and    eax,0xf0
c0011ddd:	3d e0 00 00 00       	cmp    eax,0xe0
c0011de2:	75 08                	jne    c0011dec <update_arp_entry+0x78>
c0011de4:	b0 f2                	mov    al,0xf2
c0011de6:	e9 d9 00 00 00       	jmp    c0011ec4 <update_arp_entry+0x150>
c0011deb:	90                   	nop
c0011dec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011df1:	83 ec 08             	sub    esp,0x8
c0011df4:	50                   	push   eax
c0011df5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011df9:	e8 c2 fb ff ff       	call   c00119c0 <find_entry>
c0011dfe:	83 c4 10             	add    esp,0x10
c0011e01:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011e05:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e0a:	85 c0                	test   eax,eax
c0011e0c:	79 0a                	jns    c0011e18 <update_arp_entry+0xa4>
c0011e0e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011e12:	e9 ad 00 00 00       	jmp    c0011ec4 <update_arp_entry+0x150>
c0011e17:	90                   	nop
c0011e18:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e1d:	c1 e0 04             	shl    eax,0x4
c0011e20:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e25:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011e28:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e2d:	c1 e0 04             	shl    eax,0x4
c0011e30:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e35:	83 c0 08             	add    eax,0x8
c0011e38:	83 ec 04             	sub    esp,0x4
c0011e3b:	6a 06                	push   0x6
c0011e3d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011e41:	50                   	push   eax
c0011e42:	e8 33 e5 fe ff       	call   c000037a <memcpy>
c0011e47:	83 c4 10             	add    esp,0x10
c0011e4a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e4f:	c1 e0 04             	shl    eax,0x4
c0011e52:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011e57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011e5a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e5f:	c1 e0 04             	shl    eax,0x4
c0011e62:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e67:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e69:	85 c0                	test   eax,eax
c0011e6b:	74 53                	je     c0011ec0 <update_arp_entry+0x14c>
c0011e6d:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e72:	c1 e0 04             	shl    eax,0x4
c0011e75:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e80:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011e85:	c1 e0 04             	shl    eax,0x4
c0011e88:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011e93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e97:	83 c0 23             	add    eax,0x23
c0011e9a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e9e:	50                   	push   eax
c0011e9f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ea7:	e8 40 fe ff ff       	call   c0011cec <etharp_send_ip>
c0011eac:	83 c4 10             	add    esp,0x10
c0011eaf:	83 ec 0c             	sub    esp,0xc
c0011eb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011eb6:	e8 19 64 ff ff       	call   c00082d4 <pbuf_free>
c0011ebb:	83 c4 10             	add    esp,0x10
c0011ebe:	66 90                	xchg   ax,ax
c0011ec0:	b0 00                	mov    al,0x0
c0011ec2:	66 90                	xchg   ax,ax
c0011ec4:	83 c4 2c             	add    esp,0x2c
c0011ec7:	c3                   	ret    

c0011ec8 <etharp_find_addr>:
c0011ec8:	83 ec 1c             	sub    esp,0x1c
c0011ecb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011ed0:	74 0a                	je     c0011edc <etharp_find_addr+0x14>
c0011ed2:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011ed7:	75 1b                	jne    c0011ef4 <etharp_find_addr+0x2c>
c0011ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0011edc:	83 ec 08             	sub    esp,0x8
c0011edf:	68 88 0a 03 c0       	push   0xc0030a88
c0011ee4:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011ee9:	e8 e2 db 00 00       	call   c001fad0 <CPrintf>
c0011eee:	83 c4 10             	add    esp,0x10
c0011ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0011ef4:	83 ec 08             	sub    esp,0x8
c0011ef7:	6a 02                	push   0x2
c0011ef9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011efd:	e8 be fa ff ff       	call   c00119c0 <find_entry>
c0011f02:	83 c4 10             	add    esp,0x10
c0011f05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f09:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f0e:	85 c0                	test   eax,eax
c0011f10:	78 4a                	js     c0011f5c <etharp_find_addr+0x94>
c0011f12:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f17:	c1 e0 04             	shl    eax,0x4
c0011f1a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011f1f:	8a 00                	mov    al,BYTE PTR [eax]
c0011f21:	0f b6 c0             	movzx  eax,al
c0011f24:	83 f8 02             	cmp    eax,0x2
c0011f27:	75 33                	jne    c0011f5c <etharp_find_addr+0x94>
c0011f29:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f2e:	c1 e0 04             	shl    eax,0x4
c0011f31:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f36:	8d 50 08             	lea    edx,[eax+0x8]
c0011f39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f3d:	89 10                	mov    DWORD PTR [eax],edx
c0011f3f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011f44:	c1 e0 04             	shl    eax,0x4
c0011f47:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011f4c:	8d 50 04             	lea    edx,[eax+0x4]
c0011f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f53:	89 10                	mov    DWORD PTR [eax],edx
c0011f55:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f59:	eb 05                	jmp    c0011f60 <etharp_find_addr+0x98>
c0011f5b:	90                   	nop
c0011f5c:	b0 ff                	mov    al,0xff
c0011f5e:	66 90                	xchg   ax,ax
c0011f60:	83 c4 1c             	add    esp,0x1c
c0011f63:	c3                   	ret    

c0011f64 <etharp_arp_input>:
c0011f64:	83 ec 2c             	sub    esp,0x2c
c0011f67:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011f6c:	75 1a                	jne    c0011f88 <etharp_arp_input+0x24>
c0011f6e:	83 ec 08             	sub    esp,0x8
c0011f71:	68 53 0b 03 c0       	push   0xc0030b53
c0011f76:	68 e6 f9 02 c0       	push   0xc002f9e6
c0011f7b:	e8 50 db 00 00       	call   c001fad0 <CPrintf>
c0011f80:	83 c4 10             	add    esp,0x10
c0011f83:	e9 d4 02 00 00       	jmp    c001225c <etharp_arp_input+0x2f8>
c0011f88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f8c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011f90:	0f b7 c0             	movzx  eax,ax
c0011f93:	83 f8 29             	cmp    eax,0x29
c0011f96:	77 34                	ja     c0011fcc <etharp_arp_input+0x68>
c0011f98:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011f9e:	83 c0 01             	add    eax,0x1
c0011fa1:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011fa7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011fad:	83 c0 01             	add    eax,0x1
c0011fb0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011fb6:	83 ec 0c             	sub    esp,0xc
c0011fb9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011fbd:	e8 12 63 ff ff       	call   c00082d4 <pbuf_free>
c0011fc2:	83 c4 10             	add    esp,0x10
c0011fc5:	e9 92 02 00 00       	jmp    c001225c <etharp_arp_input+0x2f8>
c0011fca:	66 90                	xchg   ax,ax
c0011fcc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011fd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011fdb:	83 c0 0e             	add    eax,0xe
c0011fde:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011fe2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fe6:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011fe9:	0f b7 c0             	movzx  eax,ax
c0011fec:	3d 00 01 00 00       	cmp    eax,0x100
c0011ff1:	75 31                	jne    c0012024 <etharp_arp_input+0xc0>
c0011ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ff7:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011ffa:	0f b6 c0             	movzx  eax,al
c0011ffd:	83 f8 06             	cmp    eax,0x6
c0012000:	75 22                	jne    c0012024 <etharp_arp_input+0xc0>
c0012002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012006:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0012009:	0f b6 c0             	movzx  eax,al
c001200c:	83 f8 04             	cmp    eax,0x4
c001200f:	75 13                	jne    c0012024 <etharp_arp_input+0xc0>
c0012011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012015:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012019:	0f b7 c0             	movzx  eax,ax
c001201c:	83 f8 08             	cmp    eax,0x8
c001201f:	74 37                	je     c0012058 <etharp_arp_input+0xf4>
c0012021:	8d 76 00             	lea    esi,[esi+0x0]
c0012024:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c001202a:	83 c0 01             	add    eax,0x1
c001202d:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012033:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012039:	83 c0 01             	add    eax,0x1
c001203c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012042:	83 ec 0c             	sub    esp,0xc
c0012045:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012049:	e8 86 62 ff ff       	call   c00082d4 <pbuf_free>
c001204e:	83 c4 10             	add    esp,0x10
c0012051:	e9 06 02 00 00       	jmp    c001225c <etharp_arp_input+0x2f8>
c0012056:	66 90                	xchg   ax,ax
c0012058:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c001205e:	83 c0 01             	add    eax,0x1
c0012061:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0012067:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001206b:	83 c0 0e             	add    eax,0xe
c001206e:	83 ec 04             	sub    esp,0x4
c0012071:	6a 04                	push   0x4
c0012073:	50                   	push   eax
c0012074:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012078:	50                   	push   eax
c0012079:	e8 fc e2 fe ff       	call   c000037a <memcpy>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012085:	83 c0 18             	add    eax,0x18
c0012088:	83 ec 04             	sub    esp,0x4
c001208b:	6a 04                	push   0x4
c001208d:	50                   	push   eax
c001208e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012092:	50                   	push   eax
c0012093:	e8 e2 e2 fe ff       	call   c000037a <memcpy>
c0012098:	83 c4 10             	add    esp,0x10
c001209b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001209f:	83 c0 04             	add    eax,0x4
c00120a2:	74 0c                	je     c00120b0 <etharp_arp_input+0x14c>
c00120a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120ab:	85 c0                	test   eax,eax
c00120ad:	75 09                	jne    c00120b8 <etharp_arp_input+0x154>
c00120af:	90                   	nop
c00120b0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00120b5:	eb 15                	jmp    c00120cc <etharp_arp_input+0x168>
c00120b7:	90                   	nop
c00120b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00120bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00120c3:	39 c2                	cmp    edx,eax
c00120c5:	0f 94 c0             	sete   al
c00120c8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00120cc:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c00120d1:	85 c0                	test   eax,eax
c00120d3:	74 07                	je     c00120dc <etharp_arp_input+0x178>
c00120d5:	b8 01 00 00 00       	mov    eax,0x1
c00120da:	eb 08                	jmp    c00120e4 <etharp_arp_input+0x180>
c00120dc:	b8 02 00 00 00       	mov    eax,0x2
c00120e1:	8d 76 00             	lea    esi,[esi+0x0]
c00120e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00120e8:	83 c2 08             	add    edx,0x8
c00120eb:	50                   	push   eax
c00120ec:	52                   	push   edx
c00120ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00120f1:	50                   	push   eax
c00120f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120f6:	e8 79 fc ff ff       	call   c0011d74 <update_arp_entry>
c00120fb:	83 c4 10             	add    esp,0x10
c00120fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012102:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012106:	0f b7 c0             	movzx  eax,ax
c0012109:	3d 00 01 00 00       	cmp    eax,0x100
c001210e:	74 10                	je     c0012120 <etharp_arp_input+0x1bc>
c0012110:	3d 00 02 00 00       	cmp    eax,0x200
c0012115:	0f 84 2d 01 00 00    	je     c0012248 <etharp_arp_input+0x2e4>
c001211b:	e9 14 01 00 00       	jmp    c0012234 <etharp_arp_input+0x2d0>
c0012120:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012125:	85 c0                	test   eax,eax
c0012127:	0f 84 fb 00 00 00    	je     c0012228 <etharp_arp_input+0x2c4>
c001212d:	83 ec 0c             	sub    esp,0xc
c0012130:	6a 02                	push   0x2
c0012132:	e8 e5 ea fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012137:	83 c4 10             	add    esp,0x10
c001213a:	89 c2                	mov    edx,eax
c001213c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012140:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c0012144:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012148:	8d 50 0e             	lea    edx,[eax+0xe]
c001214b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001214f:	83 c0 18             	add    eax,0x18
c0012152:	83 ec 04             	sub    esp,0x4
c0012155:	6a 04                	push   0x4
c0012157:	52                   	push   edx
c0012158:	50                   	push   eax
c0012159:	e8 1c e2 fe ff       	call   c000037a <memcpy>
c001215e:	83 c4 10             	add    esp,0x10
c0012161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012165:	8d 50 04             	lea    edx,[eax+0x4]
c0012168:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001216c:	83 c0 0e             	add    eax,0xe
c001216f:	83 ec 04             	sub    esp,0x4
c0012172:	6a 04                	push   0x4
c0012174:	52                   	push   edx
c0012175:	50                   	push   eax
c0012176:	e8 ff e1 fe ff       	call   c000037a <memcpy>
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012182:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012185:	0f b6 c0             	movzx  eax,al
c0012188:	83 f8 06             	cmp    eax,0x6
c001218b:	74 17                	je     c00121a4 <etharp_arp_input+0x240>
c001218d:	83 ec 08             	sub    esp,0x8
c0012190:	68 1c 0a 03 c0       	push   0xc0030a1c
c0012195:	68 e6 f9 02 c0       	push   0xc002f9e6
c001219a:	e8 31 d9 00 00       	call   c001fad0 <CPrintf>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	66 90                	xchg   ax,ax
c00121a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a8:	8d 50 08             	lea    edx,[eax+0x8]
c00121ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121af:	83 c0 12             	add    eax,0x12
c00121b2:	83 ec 04             	sub    esp,0x4
c00121b5:	6a 06                	push   0x6
c00121b7:	52                   	push   edx
c00121b8:	50                   	push   eax
c00121b9:	e8 bc e1 fe ff       	call   c000037a <memcpy>
c00121be:	83 c4 10             	add    esp,0x10
c00121c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121c5:	8d 50 08             	lea    edx,[eax+0x8]
c00121c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121cc:	83 ec 04             	sub    esp,0x4
c00121cf:	6a 06                	push   0x6
c00121d1:	52                   	push   edx
c00121d2:	50                   	push   eax
c00121d3:	e8 a2 e1 fe ff       	call   c000037a <memcpy>
c00121d8:	83 c4 10             	add    esp,0x10
c00121db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121df:	83 c0 08             	add    eax,0x8
c00121e2:	83 ec 04             	sub    esp,0x4
c00121e5:	6a 06                	push   0x6
c00121e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121eb:	50                   	push   eax
c00121ec:	e8 89 e1 fe ff       	call   c000037a <memcpy>
c00121f1:	83 c4 10             	add    esp,0x10
c00121f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f8:	83 c0 06             	add    eax,0x6
c00121fb:	83 ec 04             	sub    esp,0x4
c00121fe:	6a 06                	push   0x6
c0012200:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012204:	50                   	push   eax
c0012205:	e8 70 e1 fe ff       	call   c000037a <memcpy>
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012211:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012214:	83 ec 08             	sub    esp,0x8
c0012217:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001221b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001221f:	ff d0                	call   eax
c0012221:	83 c4 10             	add    esp,0x10
c0012224:	eb 26                	jmp    c001224c <etharp_arp_input+0x2e8>
c0012226:	66 90                	xchg   ax,ax
c0012228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222c:	83 c0 04             	add    eax,0x4
c001222f:	eb 1b                	jmp    c001224c <etharp_arp_input+0x2e8>
c0012231:	8d 76 00             	lea    esi,[esi+0x0]
c0012234:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c001223a:	83 c0 01             	add    eax,0x1
c001223d:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c0012243:	eb 07                	jmp    c001224c <etharp_arp_input+0x2e8>
c0012245:	8d 76 00             	lea    esi,[esi+0x0]
c0012248:	90                   	nop
c0012249:	8d 76 00             	lea    esi,[esi+0x0]
c001224c:	83 ec 0c             	sub    esp,0xc
c001224f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012253:	e8 7c 60 ff ff       	call   c00082d4 <pbuf_free>
c0012258:	83 c4 10             	add    esp,0x10
c001225b:	90                   	nop
c001225c:	83 c4 2c             	add    esp,0x2c
c001225f:	c3                   	ret    

c0012260 <etharp_raw>:
c0012260:	83 ec 2c             	sub    esp,0x2c
c0012263:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012267:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001226c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012271:	83 ec 04             	sub    esp,0x4
c0012274:	6a 00                	push   0x0
c0012276:	6a 2a                	push   0x2a
c0012278:	6a 03                	push   0x3
c001227a:	e8 31 62 ff ff       	call   c00084b0 <pbuf_alloc>
c001227f:	83 c4 10             	add    esp,0x10
c0012282:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012286:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001228b:	75 17                	jne    c00122a4 <etharp_raw+0x44>
c001228d:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012293:	83 c0 01             	add    eax,0x1
c0012296:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001229c:	b0 ff                	mov    al,0xff
c001229e:	e9 89 01 00 00       	jmp    c001242c <etharp_raw+0x1cc>
c00122a3:	90                   	nop
c00122a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122a8:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00122ac:	0f b7 c0             	movzx  eax,ax
c00122af:	83 f8 29             	cmp    eax,0x29
c00122b2:	77 18                	ja     c00122cc <etharp_raw+0x6c>
c00122b4:	83 ec 08             	sub    esp,0x8
c00122b7:	68 ac 0a 03 c0       	push   0xc0030aac
c00122bc:	68 e6 f9 02 c0       	push   0xc002f9e6
c00122c1:	e8 0a d8 00 00       	call   c001fad0 <CPrintf>
c00122c6:	83 c4 10             	add    esp,0x10
c00122c9:	8d 76 00             	lea    esi,[esi+0x0]
c00122cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00122d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122db:	83 c0 0e             	add    eax,0xe
c00122de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122e2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00122e7:	83 ec 0c             	sub    esp,0xc
c00122ea:	50                   	push   eax
c00122eb:	e8 2c e9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00122f0:	83 c4 10             	add    esp,0x10
c00122f3:	89 c2                	mov    edx,eax
c00122f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f9:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00122fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012301:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0012304:	0f b6 c0             	movzx  eax,al
c0012307:	83 f8 06             	cmp    eax,0x6
c001230a:	74 18                	je     c0012324 <etharp_raw+0xc4>
c001230c:	83 ec 08             	sub    esp,0x8
c001230f:	68 1c 0a 03 c0       	push   0xc0030a1c
c0012314:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012319:	e8 b2 d7 00 00       	call   c001fad0 <CPrintf>
c001231e:	83 c4 10             	add    esp,0x10
c0012321:	8d 76 00             	lea    esi,[esi+0x0]
c0012324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012328:	83 c0 08             	add    eax,0x8
c001232b:	83 ec 04             	sub    esp,0x4
c001232e:	6a 06                	push   0x6
c0012330:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012334:	50                   	push   eax
c0012335:	e8 40 e0 fe ff       	call   c000037a <memcpy>
c001233a:	83 c4 10             	add    esp,0x10
c001233d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012341:	83 c0 12             	add    eax,0x12
c0012344:	83 ec 04             	sub    esp,0x4
c0012347:	6a 06                	push   0x6
c0012349:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001234d:	50                   	push   eax
c001234e:	e8 27 e0 fe ff       	call   c000037a <memcpy>
c0012353:	83 c4 10             	add    esp,0x10
c0012356:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001235a:	83 ec 04             	sub    esp,0x4
c001235d:	6a 06                	push   0x6
c001235f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012363:	50                   	push   eax
c0012364:	e8 11 e0 fe ff       	call   c000037a <memcpy>
c0012369:	83 c4 10             	add    esp,0x10
c001236c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012370:	83 c0 06             	add    eax,0x6
c0012373:	83 ec 04             	sub    esp,0x4
c0012376:	6a 06                	push   0x6
c0012378:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001237c:	50                   	push   eax
c001237d:	e8 f8 df fe ff       	call   c000037a <memcpy>
c0012382:	83 c4 10             	add    esp,0x10
c0012385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012389:	83 c0 0e             	add    eax,0xe
c001238c:	83 ec 04             	sub    esp,0x4
c001238f:	6a 04                	push   0x4
c0012391:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012395:	50                   	push   eax
c0012396:	e8 df df fe ff       	call   c000037a <memcpy>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123a2:	83 c0 18             	add    eax,0x18
c00123a5:	83 ec 04             	sub    esp,0x4
c00123a8:	6a 04                	push   0x4
c00123aa:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00123ae:	50                   	push   eax
c00123af:	e8 c6 df fe ff       	call   c000037a <memcpy>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123bb:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00123c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123c4:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00123ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123ce:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c00123d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123d6:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c00123da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123de:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c00123e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123eb:	83 ec 08             	sub    esp,0x8
c00123ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00123f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123f6:	ff d0                	call   eax
c00123f8:	83 c4 10             	add    esp,0x10
c00123fb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00123ff:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c0012405:	83 c0 01             	add    eax,0x1
c0012408:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c001240e:	83 ec 0c             	sub    esp,0xc
c0012411:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012415:	e8 ba 5e ff ff       	call   c00082d4 <pbuf_free>
c001241a:	83 c4 10             	add    esp,0x10
c001241d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012425:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012429:	8d 76 00             	lea    esi,[esi+0x0]
c001242c:	83 c4 2c             	add    esp,0x2c
c001242f:	c3                   	ret    

c0012430 <etharp_request>:
c0012430:	83 ec 0c             	sub    esp,0xc
c0012433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012437:	8d 48 04             	lea    ecx,[eax+0x4]
c001243a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001243e:	8d 50 23             	lea    edx,[eax+0x23]
c0012441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012445:	83 c0 23             	add    eax,0x23
c0012448:	6a 01                	push   0x1
c001244a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001244e:	68 7c 0b 03 c0       	push   0xc0030b7c
c0012453:	51                   	push   ecx
c0012454:	52                   	push   edx
c0012455:	68 84 0b 03 c0       	push   0xc0030b84
c001245a:	50                   	push   eax
c001245b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001245f:	e8 fc fd ff ff       	call   c0012260 <etharp_raw>
c0012464:	83 c4 20             	add    esp,0x20
c0012467:	83 c4 0c             	add    esp,0xc
c001246a:	c3                   	ret    
c001246b:	90                   	nop

c001246c <etharp_query>:
c001246c:	83 ec 2c             	sub    esp,0x2c
c001246f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012473:	83 c0 23             	add    eax,0x23
c0012476:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001247a:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c001247f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012483:	8b 00                	mov    eax,DWORD PTR [eax]
c0012485:	83 ec 08             	sub    esp,0x8
c0012488:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001248c:	50                   	push   eax
c001248d:	e8 e6 19 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	0f b6 c0             	movzx  eax,al
c0012498:	85 c0                	test   eax,eax
c001249a:	75 24                	jne    c00124c0 <etharp_query+0x54>
c001249c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00124a2:	25 f0 00 00 00       	and    eax,0xf0
c00124a7:	3d e0 00 00 00       	cmp    eax,0xe0
c00124ac:	74 12                	je     c00124c0 <etharp_query+0x54>
c00124ae:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00124b3:	74 0b                	je     c00124c0 <etharp_query+0x54>
c00124b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00124bb:	85 c0                	test   eax,eax
c00124bd:	75 09                	jne    c00124c8 <etharp_query+0x5c>
c00124bf:	90                   	nop
c00124c0:	b0 f2                	mov    al,0xf2
c00124c2:	e9 dd 02 00 00       	jmp    c00127a4 <etharp_query+0x338>
c00124c7:	90                   	nop
c00124c8:	83 ec 08             	sub    esp,0x8
c00124cb:	6a 01                	push   0x1
c00124cd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00124d1:	e8 ea f4 ff ff       	call   c00119c0 <find_entry>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00124dd:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124e2:	85 c0                	test   eax,eax
c00124e4:	79 22                	jns    c0012508 <etharp_query+0x9c>
c00124e6:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124eb:	74 0f                	je     c00124fc <etharp_query+0x90>
c00124ed:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00124f3:	83 c0 01             	add    eax,0x1
c00124f6:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00124fc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012500:	e9 9f 02 00 00       	jmp    c00127a4 <etharp_query+0x338>
c0012505:	8d 76 00             	lea    esi,[esi+0x0]
c0012508:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001250d:	c1 e0 04             	shl    eax,0x4
c0012510:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012515:	8a 00                	mov    al,BYTE PTR [eax]
c0012517:	0f b6 c0             	movzx  eax,al
c001251a:	85 c0                	test   eax,eax
c001251c:	75 12                	jne    c0012530 <etharp_query+0xc4>
c001251e:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012523:	c1 e0 04             	shl    eax,0x4
c0012526:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001252b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001252e:	66 90                	xchg   ax,ax
c0012530:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012535:	c1 e0 04             	shl    eax,0x4
c0012538:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001253d:	8a 00                	mov    al,BYTE PTR [eax]
c001253f:	0f b6 c0             	movzx  eax,al
c0012542:	83 f8 01             	cmp    eax,0x1
c0012545:	74 2d                	je     c0012574 <etharp_query+0x108>
c0012547:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001254c:	c1 e0 04             	shl    eax,0x4
c001254f:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012554:	8a 00                	mov    al,BYTE PTR [eax]
c0012556:	0f b6 c0             	movzx  eax,al
c0012559:	83 f8 02             	cmp    eax,0x2
c001255c:	74 16                	je     c0012574 <etharp_query+0x108>
c001255e:	83 ec 08             	sub    esp,0x8
c0012561:	68 e0 0a 03 c0       	push   0xc0030ae0
c0012566:	68 e6 f9 02 c0       	push   0xc002f9e6
c001256b:	e8 60 d5 00 00       	call   c001fad0 <CPrintf>
c0012570:	83 c4 10             	add    esp,0x10
c0012573:	90                   	nop
c0012574:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012579:	c1 e0 04             	shl    eax,0x4
c001257c:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012581:	8a 00                	mov    al,BYTE PTR [eax]
c0012583:	0f b6 c0             	movzx  eax,al
c0012586:	83 f8 01             	cmp    eax,0x1
c0012589:	74 09                	je     c0012594 <etharp_query+0x128>
c001258b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012590:	75 2a                	jne    c00125bc <etharp_query+0x150>
c0012592:	66 90                	xchg   ax,ax
c0012594:	83 ec 08             	sub    esp,0x8
c0012597:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001259b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001259f:	e8 8c fe ff ff       	call   c0012430 <etharp_request>
c00125a4:	83 c4 10             	add    esp,0x10
c00125a7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00125ab:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125b0:	75 0a                	jne    c00125bc <etharp_query+0x150>
c00125b2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00125b6:	e9 e9 01 00 00       	jmp    c00127a4 <etharp_query+0x338>
c00125bb:	90                   	nop
c00125bc:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00125c1:	75 15                	jne    c00125d8 <etharp_query+0x16c>
c00125c3:	83 ec 08             	sub    esp,0x8
c00125c6:	68 5a fe 02 c0       	push   0xc002fe5a
c00125cb:	68 e6 f9 02 c0       	push   0xc002f9e6
c00125d0:	e8 fb d4 00 00       	call   c001fad0 <CPrintf>
c00125d5:	83 c4 10             	add    esp,0x10
c00125d8:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125dd:	c1 e0 04             	shl    eax,0x4
c00125e0:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00125e5:	8a 00                	mov    al,BYTE PTR [eax]
c00125e7:	0f b6 c0             	movzx  eax,al
c00125ea:	83 f8 02             	cmp    eax,0x2
c00125ed:	75 39                	jne    c0012628 <etharp_query+0x1bc>
c00125ef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00125f3:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c00125f8:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00125fd:	c1 e0 04             	shl    eax,0x4
c0012600:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012605:	83 c0 08             	add    eax,0x8
c0012608:	50                   	push   eax
c0012609:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001260d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012611:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012615:	e8 d2 f6 ff ff       	call   c0011cec <etharp_send_ip>
c001261a:	83 c4 10             	add    esp,0x10
c001261d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012621:	e9 7a 01 00 00       	jmp    c00127a0 <etharp_query+0x334>
c0012626:	66 90                	xchg   ax,ax
c0012628:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001262d:	c1 e0 04             	shl    eax,0x4
c0012630:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012635:	8a 00                	mov    al,BYTE PTR [eax]
c0012637:	0f b6 c0             	movzx  eax,al
c001263a:	83 f8 01             	cmp    eax,0x1
c001263d:	0f 85 5d 01 00 00    	jne    c00127a0 <etharp_query+0x334>
c0012643:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001264b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001264f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012653:	eb 63                	jmp    c00126b8 <etharp_query+0x24c>
c0012655:	8d 76 00             	lea    esi,[esi+0x0]
c0012658:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001265c:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012660:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012664:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012667:	0f b7 d2             	movzx  edx,dx
c001266a:	0f b7 c0             	movzx  eax,ax
c001266d:	39 c2                	cmp    edx,eax
c001266f:	75 1f                	jne    c0012690 <etharp_query+0x224>
c0012671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012675:	8b 00                	mov    eax,DWORD PTR [eax]
c0012677:	85 c0                	test   eax,eax
c0012679:	74 15                	je     c0012690 <etharp_query+0x224>
c001267b:	83 ec 08             	sub    esp,0x8
c001267e:	68 61 0b 03 c0       	push   0xc0030b61
c0012683:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012688:	e8 43 d4 00 00       	call   c001fad0 <CPrintf>
c001268d:	83 c4 10             	add    esp,0x10
c0012690:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012694:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0012697:	0f b6 c0             	movzx  eax,al
c001269a:	83 f8 01             	cmp    eax,0x1
c001269d:	74 0d                	je     c00126ac <etharp_query+0x240>
c001269f:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c00126a7:	eb 17                	jmp    c00126c0 <etharp_query+0x254>
c00126a9:	8d 76 00             	lea    esi,[esi+0x0]
c00126ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126b6:	66 90                	xchg   ax,ax
c00126b8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126bd:	75 99                	jne    c0012658 <etharp_query+0x1ec>
c00126bf:	90                   	nop
c00126c0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00126c5:	74 59                	je     c0012720 <etharp_query+0x2b4>
c00126c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00126ce:	0f b7 c0             	movzx  eax,ax
c00126d1:	83 ec 04             	sub    esp,0x4
c00126d4:	6a 00                	push   0x0
c00126d6:	50                   	push   eax
c00126d7:	6a 03                	push   0x3
c00126d9:	e8 d2 5d ff ff       	call   c00084b0 <pbuf_alloc>
c00126de:	83 c4 10             	add    esp,0x10
c00126e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126e5:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00126ea:	74 4c                	je     c0012738 <etharp_query+0x2cc>
c00126ec:	83 ec 08             	sub    esp,0x8
c00126ef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00126f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126f7:	e8 1c 66 ff ff       	call   c0008d18 <pbuf_copy>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	0f be c0             	movsx  eax,al
c0012702:	85 c0                	test   eax,eax
c0012704:	74 32                	je     c0012738 <etharp_query+0x2cc>
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001270d:	e8 c2 5b ff ff       	call   c00082d4 <pbuf_free>
c0012712:	83 c4 10             	add    esp,0x10
c0012715:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001271d:	eb 19                	jmp    c0012738 <etharp_query+0x2cc>
c001271f:	90                   	nop
c0012720:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012724:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001272f:	e8 b0 63 ff ff       	call   c0008ae4 <pbuf_ref>
c0012734:	83 c4 10             	add    esp,0x10
c0012737:	90                   	nop
c0012738:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001273d:	74 4d                	je     c001278c <etharp_query+0x320>
c001273f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012744:	c1 e0 04             	shl    eax,0x4
c0012747:	05 00 a9 03 c0       	add    eax,0xc003a900
c001274c:	8b 00                	mov    eax,DWORD PTR [eax]
c001274e:	85 c0                	test   eax,eax
c0012750:	74 1e                	je     c0012770 <etharp_query+0x304>
c0012752:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012757:	c1 e0 04             	shl    eax,0x4
c001275a:	05 00 a9 03 c0       	add    eax,0xc003a900
c001275f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012761:	83 ec 0c             	sub    esp,0xc
c0012764:	50                   	push   eax
c0012765:	e8 6a 5b ff ff       	call   c00082d4 <pbuf_free>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	8d 76 00             	lea    esi,[esi+0x0]
c0012770:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012775:	c1 e0 04             	shl    eax,0x4
c0012778:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c001277e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012782:	89 02                	mov    DWORD PTR [edx],eax
c0012784:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012789:	eb 15                	jmp    c00127a0 <etharp_query+0x334>
c001278b:	90                   	nop
c001278c:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c0012792:	83 c0 01             	add    eax,0x1
c0012795:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c001279b:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00127a0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00127a4:	83 c4 2c             	add    esp,0x2c
c00127a7:	c3                   	ret    

c00127a8 <etharp_output>:
c00127a8:	83 ec 1c             	sub    esp,0x1c
c00127ab:	83 ec 08             	sub    esp,0x8
c00127ae:	6a 0e                	push   0xe
c00127b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127b4:	e8 7b 59 ff ff       	call   c0008134 <pbuf_header>
c00127b9:	83 c4 10             	add    esp,0x10
c00127bc:	0f b6 c0             	movzx  eax,al
c00127bf:	85 c0                	test   eax,eax
c00127c1:	74 19                	je     c00127dc <etharp_output+0x34>
c00127c3:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c00127c9:	83 c0 01             	add    eax,0x1
c00127cc:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c00127d2:	b0 fe                	mov    al,0xfe
c00127d4:	e9 8b 01 00 00       	jmp    c0012964 <etharp_output+0x1bc>
c00127d9:	8d 76 00             	lea    esi,[esi+0x0]
c00127dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00127e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00127ea:	83 ec 08             	sub    esp,0x8
c00127ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127f1:	50                   	push   eax
c00127f2:	e8 81 16 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c00127f7:	83 c4 10             	add    esp,0x10
c00127fa:	0f b6 c0             	movzx  eax,al
c00127fd:	85 c0                	test   eax,eax
c00127ff:	74 0f                	je     c0012810 <etharp_output+0x68>
c0012801:	c7 44 24 0c 84 0b 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030b84
c0012809:	e9 3a 01 00 00       	jmp    c0012948 <etharp_output+0x1a0>
c001280e:	66 90                	xchg   ax,ax
c0012810:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012814:	8b 00                	mov    eax,DWORD PTR [eax]
c0012816:	25 f0 00 00 00       	and    eax,0xf0
c001281b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012820:	75 42                	jne    c0012864 <etharp_output+0xbc>
c0012822:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c0012827:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c001282c:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012831:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012835:	83 c0 01             	add    eax,0x1
c0012838:	8a 00                	mov    al,BYTE PTR [eax]
c001283a:	83 e0 7f             	and    eax,0x7f
c001283d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012841:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012845:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012848:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001284c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012850:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c0012853:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012857:	8d 44 24 06          	lea    eax,[esp+0x6]
c001285b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001285f:	e9 e4 00 00 00       	jmp    c0012948 <etharp_output+0x1a0>
c0012864:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012868:	8b 10                	mov    edx,DWORD PTR [eax]
c001286a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001286e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012871:	31 c2                	xor    edx,eax
c0012873:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001287a:	21 d0                	and    eax,edx
c001287c:	74 3a                	je     c00128b8 <etharp_output+0x110>
c001287e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012882:	8b 00                	mov    eax,DWORD PTR [eax]
c0012884:	0f b7 c0             	movzx  eax,ax
c0012887:	3d a9 fe 00 00       	cmp    eax,0xfea9
c001288c:	74 2a                	je     c00128b8 <etharp_output+0x110>
c001288e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012892:	83 c0 0c             	add    eax,0xc
c0012895:	74 19                	je     c00128b0 <etharp_output+0x108>
c0012897:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001289b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001289e:	85 c0                	test   eax,eax
c00128a0:	74 0e                	je     c00128b0 <etharp_output+0x108>
c00128a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128a6:	83 c0 0c             	add    eax,0xc
c00128a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00128ad:	eb 09                	jmp    c00128b8 <etharp_output+0x110>
c00128af:	90                   	nop
c00128b0:	b0 fc                	mov    al,0xfc
c00128b2:	e9 ad 00 00 00       	jmp    c0012964 <etharp_output+0x1bc>
c00128b7:	90                   	nop
c00128b8:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128bd:	0f b6 c0             	movzx  eax,al
c00128c0:	c1 e0 04             	shl    eax,0x4
c00128c3:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00128c8:	8a 00                	mov    al,BYTE PTR [eax]
c00128ca:	0f b6 c0             	movzx  eax,al
c00128cd:	83 f8 02             	cmp    eax,0x2
c00128d0:	75 5a                	jne    c001292c <etharp_output+0x184>
c00128d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00128d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d8:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00128dd:	0f b6 c0             	movzx  eax,al
c00128e0:	c1 e0 04             	shl    eax,0x4
c00128e3:	05 04 a9 03 c0       	add    eax,0xc003a904
c00128e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00128ea:	39 c2                	cmp    edx,eax
c00128ec:	75 3e                	jne    c001292c <etharp_output+0x184>
c00128ee:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c00128f4:	83 c0 01             	add    eax,0x1
c00128f7:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c00128fd:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012902:	0f b6 c0             	movzx  eax,al
c0012905:	c1 e0 04             	shl    eax,0x4
c0012908:	05 00 a9 03 c0       	add    eax,0xc003a900
c001290d:	8d 50 08             	lea    edx,[eax+0x8]
c0012910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012914:	83 c0 23             	add    eax,0x23
c0012917:	52                   	push   edx
c0012918:	50                   	push   eax
c0012919:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001291d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012921:	e8 c6 f3 ff ff       	call   c0011cec <etharp_send_ip>
c0012926:	83 c4 10             	add    esp,0x10
c0012929:	eb 39                	jmp    c0012964 <etharp_output+0x1bc>
c001292b:	90                   	nop
c001292c:	83 ec 04             	sub    esp,0x4
c001292f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012933:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012937:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001293b:	e8 2c fb ff ff       	call   c001246c <etharp_query>
c0012940:	83 c4 10             	add    esp,0x10
c0012943:	eb 1f                	jmp    c0012964 <etharp_output+0x1bc>
c0012945:	8d 76 00             	lea    esi,[esi+0x0]
c0012948:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001294c:	83 c0 23             	add    eax,0x23
c001294f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012953:	50                   	push   eax
c0012954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001295c:	e8 8b f3 ff ff       	call   c0011cec <etharp_send_ip>
c0012961:	83 c4 10             	add    esp,0x10
c0012964:	83 c4 1c             	add    esp,0x1c
c0012967:	c3                   	ret    

c0012968 <ethernet_input>:
c0012968:	83 ec 1c             	sub    esp,0x1c
c001296b:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c0012972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012976:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001297a:	0f b7 c0             	movzx  eax,ax
c001297d:	83 f8 0e             	cmp    eax,0xe
c0012980:	77 26                	ja     c00129a8 <ethernet_input+0x40>
c0012982:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012988:	83 c0 01             	add    eax,0x1
c001298b:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012991:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012997:	83 c0 01             	add    eax,0x1
c001299a:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00129a0:	e9 ef 00 00 00       	jmp    c0012a94 <ethernet_input+0x12c>
c00129a5:	8d 76 00             	lea    esi,[esi+0x0]
c00129a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00129b7:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00129bb:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00129c0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00129c5:	83 f8 08             	cmp    eax,0x8
c00129c8:	74 0e                	je     c00129d8 <ethernet_input+0x70>
c00129ca:	3d 08 06 00 00       	cmp    eax,0x608
c00129cf:	74 6b                	je     c0012a3c <ethernet_input+0xd4>
c00129d1:	e9 92 00 00 00       	jmp    c0012a68 <ethernet_input+0x100>
c00129d6:	66 90                	xchg   ax,ax
c00129d8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00129dc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00129df:	0f b6 c0             	movzx  eax,al
c00129e2:	83 e0 20             	and    eax,0x20
c00129e5:	0f 84 a1 00 00 00    	je     c0012a8c <ethernet_input+0x124>
c00129eb:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00129f0:	f7 d8                	neg    eax
c00129f2:	98                   	cwde   
c00129f3:	83 ec 08             	sub    esp,0x8
c00129f6:	50                   	push   eax
c00129f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129fb:	e8 34 57 ff ff       	call   c0008134 <pbuf_header>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	0f b6 c0             	movzx  eax,al
c0012a06:	85 c0                	test   eax,eax
c0012a08:	74 1a                	je     c0012a24 <ethernet_input+0xbc>
c0012a0a:	83 ec 08             	sub    esp,0x8
c0012a0d:	68 08 0b 03 c0       	push   0xc0030b08
c0012a12:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012a17:	e8 b4 d0 00 00       	call   c001fad0 <CPrintf>
c0012a1c:	83 c4 10             	add    esp,0x10
c0012a1f:	eb 73                	jmp    c0012a94 <ethernet_input+0x12c>
c0012a21:	8d 76 00             	lea    esi,[esi+0x0]
c0012a24:	83 ec 08             	sub    esp,0x8
c0012a27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a2f:	e8 7c 0c 00 00       	call   c00136b0 <ip_input>
c0012a34:	83 c4 10             	add    esp,0x10
c0012a37:	eb 4f                	jmp    c0012a88 <ethernet_input+0x120>
c0012a39:	8d 76 00             	lea    esi,[esi+0x0]
c0012a3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a40:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012a43:	0f b6 c0             	movzx  eax,al
c0012a46:	83 e0 20             	and    eax,0x20
c0012a49:	74 45                	je     c0012a90 <ethernet_input+0x128>
c0012a4b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a4f:	83 c0 23             	add    eax,0x23
c0012a52:	83 ec 04             	sub    esp,0x4
c0012a55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a59:	50                   	push   eax
c0012a5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012a5e:	e8 01 f5 ff ff       	call   c0011f64 <etharp_arp_input>
c0012a63:	83 c4 10             	add    esp,0x10
c0012a66:	eb 20                	jmp    c0012a88 <ethernet_input+0x120>
c0012a68:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0012a6e:	83 c0 01             	add    eax,0x1
c0012a71:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0012a77:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0012a7d:	83 c0 01             	add    eax,0x1
c0012a80:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0012a86:	eb 0c                	jmp    c0012a94 <ethernet_input+0x12c>
c0012a88:	b0 00                	mov    al,0x0
c0012a8a:	eb 1c                	jmp    c0012aa8 <ethernet_input+0x140>
c0012a8c:	90                   	nop
c0012a8d:	eb 05                	jmp    c0012a94 <ethernet_input+0x12c>
c0012a8f:	90                   	nop
c0012a90:	90                   	nop
c0012a91:	8d 76 00             	lea    esi,[esi+0x0]
c0012a94:	83 ec 0c             	sub    esp,0xc
c0012a97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a9b:	e8 34 58 ff ff       	call   c00082d4 <pbuf_free>
c0012aa0:	83 c4 10             	add    esp,0x10
c0012aa3:	b0 00                	mov    al,0x0
c0012aa5:	8d 76 00             	lea    esi,[esi+0x0]
c0012aa8:	83 c4 1c             	add    esp,0x1c
c0012aab:	c3                   	ret    

c0012aac <icmp_input>:
c0012aac:	83 ec 2c             	sub    esp,0x2c
c0012aaf:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c0012ab5:	83 c0 01             	add    eax,0x1
c0012ab8:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c0012abe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ac5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ac9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012acd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012ad0:	0f b7 c0             	movzx  eax,ax
c0012ad3:	83 ec 0c             	sub    esp,0xc
c0012ad6:	50                   	push   eax
c0012ad7:	e8 40 e1 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0012adc:	83 c4 10             	add    esp,0x10
c0012adf:	0f b7 c0             	movzx  eax,ax
c0012ae2:	c1 e8 08             	shr    eax,0x8
c0012ae5:	83 e0 0f             	and    eax,0xf
c0012ae8:	c1 e0 02             	shl    eax,0x2
c0012aeb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012af0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012af5:	f7 d8                	neg    eax
c0012af7:	98                   	cwde   
c0012af8:	83 ec 08             	sub    esp,0x8
c0012afb:	50                   	push   eax
c0012afc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b00:	e8 2f 56 ff ff       	call   c0008134 <pbuf_header>
c0012b05:	83 c4 10             	add    esp,0x10
c0012b08:	0f b6 c0             	movzx  eax,al
c0012b0b:	85 c0                	test   eax,eax
c0012b0d:	0f 85 b1 03 00 00    	jne    c0012ec4 <icmp_input+0x418>
c0012b13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b17:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b1a:	0f b7 c0             	movzx  eax,ax
c0012b1d:	83 f8 03             	cmp    eax,0x3
c0012b20:	0f 86 9e 03 00 00    	jbe    c0012ec4 <icmp_input+0x418>
c0012b26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012b2d:	8a 00                	mov    al,BYTE PTR [eax]
c0012b2f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012b33:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012b38:	85 c0                	test   eax,eax
c0012b3a:	0f 84 6c 03 00 00    	je     c0012eac <icmp_input+0x400>
c0012b40:	83 f8 08             	cmp    eax,0x8
c0012b43:	0f 85 43 03 00 00    	jne    c0012e8c <icmp_input+0x3e0>
c0012b49:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012b51:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b56:	25 f0 00 00 00       	and    eax,0xf0
c0012b5b:	3d e0 00 00 00       	cmp    eax,0xe0
c0012b60:	75 0a                	jne    c0012b6c <icmp_input+0xc0>
c0012b62:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b6a:	66 90                	xchg   ax,ax
c0012b6c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012b71:	83 ec 08             	sub    esp,0x8
c0012b74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b78:	50                   	push   eax
c0012b79:	e8 fa 12 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c0012b7e:	83 c4 10             	add    esp,0x10
c0012b81:	0f b6 c0             	movzx  eax,al
c0012b84:	85 c0                	test   eax,eax
c0012b86:	74 08                	je     c0012b90 <icmp_input+0xe4>
c0012b88:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012b90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b95:	75 25                	jne    c0012bbc <icmp_input+0x110>
c0012b97:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012b9d:	83 c0 01             	add    eax,0x1
c0012ba0:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012ba6:	83 ec 0c             	sub    esp,0xc
c0012ba9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bad:	e8 22 57 ff ff       	call   c00082d4 <pbuf_free>
c0012bb2:	83 c4 10             	add    esp,0x10
c0012bb5:	e9 56 03 00 00       	jmp    c0012f10 <icmp_input+0x464>
c0012bba:	66 90                	xchg   ax,ax
c0012bbc:	90                   	nop
c0012bbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012bc4:	0f b7 c0             	movzx  eax,ax
c0012bc7:	83 f8 07             	cmp    eax,0x7
c0012bca:	0f 86 f8 02 00 00    	jbe    c0012ec8 <icmp_input+0x41c>
c0012bd0:	83 ec 0c             	sub    esp,0xc
c0012bd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bd7:	e8 5c 09 00 00       	call   c0013538 <inet_chksum_pbuf>
c0012bdc:	83 c4 10             	add    esp,0x10
c0012bdf:	0f b7 c0             	movzx  eax,ax
c0012be2:	85 c0                	test   eax,eax
c0012be4:	74 26                	je     c0012c0c <icmp_input+0x160>
c0012be6:	83 ec 0c             	sub    esp,0xc
c0012be9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012bed:	e8 e2 56 ff ff       	call   c00082d4 <pbuf_free>
c0012bf2:	83 c4 10             	add    esp,0x10
c0012bf5:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012bfb:	83 c0 01             	add    eax,0x1
c0012bfe:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012c04:	e9 07 03 00 00       	jmp    c0012f10 <icmp_input+0x464>
c0012c09:	8d 76 00             	lea    esi,[esi+0x0]
c0012c0c:	83 ec 08             	sub    esp,0x8
c0012c0f:	6a 22                	push   0x22
c0012c11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c15:	e8 1a 55 ff ff       	call   c0008134 <pbuf_header>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	0f b6 c0             	movzx  eax,al
c0012c20:	85 c0                	test   eax,eax
c0012c22:	0f 84 24 01 00 00    	je     c0012d4c <icmp_input+0x2a0>
c0012c28:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012c2d:	83 ec 08             	sub    esp,0x8
c0012c30:	50                   	push   eax
c0012c31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c35:	e8 fa 54 ff ff       	call   c0008134 <pbuf_header>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	0f b6 c0             	movzx  eax,al
c0012c40:	85 c0                	test   eax,eax
c0012c42:	74 1c                	je     c0012c60 <icmp_input+0x1b4>
c0012c44:	83 ec 08             	sub    esp,0x8
c0012c47:	68 8c 0b 03 c0       	push   0xc0030b8c
c0012c4c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012c51:	e8 7a ce 00 00       	call   c001fad0 <CPrintf>
c0012c56:	83 c4 10             	add    esp,0x10
c0012c59:	e9 92 02 00 00       	jmp    c0012ef0 <icmp_input+0x444>
c0012c5e:	66 90                	xchg   ax,ax
c0012c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012c67:	0f b7 c0             	movzx  eax,ax
c0012c6a:	83 ec 04             	sub    esp,0x4
c0012c6d:	6a 00                	push   0x0
c0012c6f:	50                   	push   eax
c0012c70:	6a 02                	push   0x2
c0012c72:	e8 39 58 ff ff       	call   c00084b0 <pbuf_alloc>
c0012c77:	83 c4 10             	add    esp,0x10
c0012c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c7e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012c83:	0f 84 63 02 00 00    	je     c0012eec <icmp_input+0x440>
c0012c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c8d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012c91:	0f b7 c0             	movzx  eax,ax
c0012c94:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012c99:	83 c2 08             	add    edx,0x8
c0012c9c:	39 d0                	cmp    eax,edx
c0012c9e:	73 18                	jae    c0012cb8 <icmp_input+0x20c>
c0012ca0:	83 ec 08             	sub    esp,0x8
c0012ca3:	68 c0 0b 03 c0       	push   0xc0030bc0
c0012ca8:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012cad:	e8 1e ce 00 00       	call   c001fad0 <CPrintf>
c0012cb2:	83 c4 10             	add    esp,0x10
c0012cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0012cb8:	83 ec 08             	sub    esp,0x8
c0012cbb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cc3:	e8 50 60 ff ff       	call   c0008d18 <pbuf_copy>
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	0f be c0             	movsx  eax,al
c0012cce:	85 c0                	test   eax,eax
c0012cd0:	74 1a                	je     c0012cec <icmp_input+0x240>
c0012cd2:	83 ec 08             	sub    esp,0x8
c0012cd5:	68 f8 0b 03 c0       	push   0xc0030bf8
c0012cda:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012cdf:	e8 ec cd 00 00       	call   c001fad0 <CPrintf>
c0012ce4:	83 c4 10             	add    esp,0x10
c0012ce7:	e9 04 02 00 00       	jmp    c0012ef0 <icmp_input+0x444>
c0012cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cf3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cf7:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012cfc:	f7 d8                	neg    eax
c0012cfe:	98                   	cwde   
c0012cff:	83 ec 08             	sub    esp,0x8
c0012d02:	50                   	push   eax
c0012d03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d07:	e8 28 54 ff ff       	call   c0008134 <pbuf_header>
c0012d0c:	83 c4 10             	add    esp,0x10
c0012d0f:	0f b6 c0             	movzx  eax,al
c0012d12:	85 c0                	test   eax,eax
c0012d14:	74 1a                	je     c0012d30 <icmp_input+0x284>
c0012d16:	83 ec 08             	sub    esp,0x8
c0012d19:	68 20 0c 03 c0       	push   0xc0030c20
c0012d1e:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012d23:	e8 a8 cd 00 00       	call   c001fad0 <CPrintf>
c0012d28:	83 c4 10             	add    esp,0x10
c0012d2b:	e9 c0 01 00 00       	jmp    c0012ef0 <icmp_input+0x444>
c0012d30:	83 ec 0c             	sub    esp,0xc
c0012d33:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d37:	e8 98 55 ff ff       	call   c00082d4 <pbuf_free>
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012d47:	eb 37                	jmp    c0012d80 <icmp_input+0x2d4>
c0012d49:	8d 76 00             	lea    esi,[esi+0x0]
c0012d4c:	83 ec 08             	sub    esp,0x8
c0012d4f:	6a de                	push   0xffffffde
c0012d51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d55:	e8 da 53 ff ff       	call   c0008134 <pbuf_header>
c0012d5a:	83 c4 10             	add    esp,0x10
c0012d5d:	0f b6 c0             	movzx  eax,al
c0012d60:	85 c0                	test   eax,eax
c0012d62:	74 1c                	je     c0012d80 <icmp_input+0x2d4>
c0012d64:	83 ec 08             	sub    esp,0x8
c0012d67:	68 20 0c 03 c0       	push   0xc0030c20
c0012d6c:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012d71:	e8 5a cd 00 00       	call   c001fad0 <CPrintf>
c0012d76:	83 c4 10             	add    esp,0x10
c0012d79:	e9 72 01 00 00       	jmp    c0012ef0 <icmp_input+0x444>
c0012d7e:	66 90                	xchg   ax,ax
c0012d80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012d8b:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012d91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d95:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012d98:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012d9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012da2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012da5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012da9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012dac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012db0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012db4:	0f b7 c0             	movzx  eax,ax
c0012db7:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012dbc:	76 1a                	jbe    c0012dd8 <icmp_input+0x32c>
c0012dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dc2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012dc6:	83 c0 09             	add    eax,0x9
c0012dc9:	89 c2                	mov    edx,eax
c0012dcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dcf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012dd3:	eb 1b                	jmp    c0012df0 <icmp_input+0x344>
c0012dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0012dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ddc:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012de0:	83 c0 08             	add    eax,0x8
c0012de3:	89 c2                	mov    edx,eax
c0012de5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012de9:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012ded:	8d 76 00             	lea    esi,[esi+0x0]
c0012df0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012df4:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012df8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012dfc:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012e02:	83 ec 08             	sub    esp,0x8
c0012e05:	6a 14                	push   0x14
c0012e07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012e0b:	e8 00 07 00 00       	call   c0013510 <inet_chksum>
c0012e10:	83 c4 10             	add    esp,0x10
c0012e13:	89 c2                	mov    edx,eax
c0012e15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e19:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0012e1d:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012e23:	83 c0 01             	add    eax,0x1
c0012e26:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012e2c:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012e31:	83 ec 08             	sub    esp,0x8
c0012e34:	50                   	push   eax
c0012e35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e39:	e8 f6 52 ff ff       	call   c0008134 <pbuf_header>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	0f b6 c0             	movzx  eax,al
c0012e44:	85 c0                	test   eax,eax
c0012e46:	74 18                	je     c0012e60 <icmp_input+0x3b4>
c0012e48:	83 ec 08             	sub    esp,0x8
c0012e4b:	68 08 0b 03 c0       	push   0xc0030b08
c0012e50:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012e55:	e8 76 cc 00 00       	call   c001fad0 <CPrintf>
c0012e5a:	83 c4 10             	add    esp,0x10
c0012e5d:	eb 51                	jmp    c0012eb0 <icmp_input+0x404>
c0012e5f:	90                   	nop
c0012e60:	83 ec 04             	sub    esp,0x4
c0012e63:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012e67:	6a 01                	push   0x1
c0012e69:	6a 00                	push   0x0
c0012e6b:	68 ff 00 00 00       	push   0xff
c0012e70:	6a 00                	push   0x0
c0012e72:	68 98 68 03 c0       	push   0xc0036898
c0012e77:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e7b:	e8 74 0c 00 00       	call   c0013af4 <ip_output_if>
c0012e80:	83 c4 20             	add    esp,0x20
c0012e83:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012e87:	eb 27                	jmp    c0012eb0 <icmp_input+0x404>
c0012e89:	8d 76 00             	lea    esi,[esi+0x0]
c0012e8c:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012e92:	83 c0 01             	add    eax,0x1
c0012e95:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012e9b:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012ea1:	83 c0 01             	add    eax,0x1
c0012ea4:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012eaa:	eb 04                	jmp    c0012eb0 <icmp_input+0x404>
c0012eac:	90                   	nop
c0012ead:	8d 76 00             	lea    esi,[esi+0x0]
c0012eb0:	83 ec 0c             	sub    esp,0xc
c0012eb3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012eb7:	e8 18 54 ff ff       	call   c00082d4 <pbuf_free>
c0012ebc:	83 c4 10             	add    esp,0x10
c0012ebf:	eb 4f                	jmp    c0012f10 <icmp_input+0x464>
c0012ec1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ec4:	90                   	nop
c0012ec5:	eb 05                	jmp    c0012ecc <icmp_input+0x420>
c0012ec7:	90                   	nop
c0012ec8:	90                   	nop
c0012ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0012ecc:	83 ec 0c             	sub    esp,0xc
c0012ecf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ed3:	e8 fc 53 ff ff       	call   c00082d4 <pbuf_free>
c0012ed8:	83 c4 10             	add    esp,0x10
c0012edb:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012ee1:	83 c0 01             	add    eax,0x1
c0012ee4:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012eea:	eb 24                	jmp    c0012f10 <icmp_input+0x464>
c0012eec:	90                   	nop
c0012eed:	8d 76 00             	lea    esi,[esi+0x0]
c0012ef0:	83 ec 0c             	sub    esp,0xc
c0012ef3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ef7:	e8 d8 53 ff ff       	call   c00082d4 <pbuf_free>
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012f05:	83 c0 01             	add    eax,0x1
c0012f08:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012f0e:	90                   	nop
c0012f0f:	90                   	nop
c0012f10:	83 c4 2c             	add    esp,0x2c
c0012f13:	c3                   	ret    

c0012f14 <icmp_send_response>:
c0012f14:	83 ec 2c             	sub    esp,0x2c
c0012f17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f1b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012f1f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f23:	88 d0                	mov    al,dl
c0012f25:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012f29:	83 ec 04             	sub    esp,0x4
c0012f2c:	6a 00                	push   0x0
c0012f2e:	6a 24                	push   0x24
c0012f30:	6a 01                	push   0x1
c0012f32:	e8 79 55 ff ff       	call   c00084b0 <pbuf_alloc>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012f3e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012f43:	0f 84 ff 00 00 00    	je     c0013048 <icmp_send_response+0x134>
c0012f49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f4d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f51:	0f b7 c0             	movzx  eax,ax
c0012f54:	83 f8 23             	cmp    eax,0x23
c0012f57:	77 17                	ja     c0012f70 <icmp_send_response+0x5c>
c0012f59:	83 ec 08             	sub    esp,0x8
c0012f5c:	68 54 0c 03 c0       	push   0xc0030c54
c0012f61:	68 e6 f9 02 c0       	push   0xc002f9e6
c0012f66:	e8 65 cb 00 00       	call   c001fad0 <CPrintf>
c0012f6b:	83 c4 10             	add    esp,0x10
c0012f6e:	66 90                	xchg   ax,ax
c0012f70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012f86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f8a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012f8e:	88 10                	mov    BYTE PTR [eax],dl
c0012f90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f94:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012f98:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012f9b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f9f:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012fa5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fa9:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012faf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fb6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012fba:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012fbd:	83 c2 08             	add    edx,0x8
c0012fc0:	83 ec 04             	sub    esp,0x4
c0012fc3:	6a 1c                	push   0x1c
c0012fc5:	50                   	push   eax
c0012fc6:	52                   	push   edx
c0012fc7:	e8 ae d3 fe ff       	call   c000037a <memcpy>
c0012fcc:	83 c4 10             	add    esp,0x10
c0012fcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fd3:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fdd:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012fe1:	0f b7 c0             	movzx  eax,ax
c0012fe4:	83 ec 08             	sub    esp,0x8
c0012fe7:	50                   	push   eax
c0012fe8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012fec:	e8 1f 05 00 00       	call   c0013510 <inet_chksum>
c0012ff1:	83 c4 10             	add    esp,0x10
c0012ff4:	89 c2                	mov    edx,eax
c0012ff6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ffa:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0012ffe:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0013004:	83 c0 01             	add    eax,0x1
c0013007:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c001300d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013011:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013014:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013018:	83 ec 08             	sub    esp,0x8
c001301b:	6a 01                	push   0x1
c001301d:	6a 00                	push   0x0
c001301f:	68 ff 00 00 00       	push   0xff
c0013024:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013028:	50                   	push   eax
c0013029:	6a 00                	push   0x0
c001302b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001302f:	e8 9c 0d 00 00       	call   c0013dd0 <ip_output>
c0013034:	83 c4 20             	add    esp,0x20
c0013037:	83 ec 0c             	sub    esp,0xc
c001303a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001303e:	e8 91 52 ff ff       	call   c00082d4 <pbuf_free>
c0013043:	83 c4 10             	add    esp,0x10
c0013046:	eb 04                	jmp    c001304c <icmp_send_response+0x138>
c0013048:	90                   	nop
c0013049:	8d 76 00             	lea    esi,[esi+0x0]
c001304c:	83 c4 2c             	add    esp,0x2c
c001304f:	c3                   	ret    

c0013050 <icmp_dest_unreach>:
c0013050:	83 ec 0c             	sub    esp,0xc
c0013053:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013057:	0f b6 c0             	movzx  eax,al
c001305a:	83 ec 04             	sub    esp,0x4
c001305d:	50                   	push   eax
c001305e:	6a 03                	push   0x3
c0013060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013064:	e8 ab fe ff ff       	call   c0012f14 <icmp_send_response>
c0013069:	83 c4 10             	add    esp,0x10
c001306c:	90                   	nop
c001306d:	83 c4 0c             	add    esp,0xc
c0013070:	c3                   	ret    
c0013071:	8d 76 00             	lea    esi,[esi+0x0]

c0013074 <icmp_time_exceeded>:
c0013074:	83 ec 0c             	sub    esp,0xc
c0013077:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001307b:	0f b6 c0             	movzx  eax,al
c001307e:	83 ec 04             	sub    esp,0x4
c0013081:	50                   	push   eax
c0013082:	6a 0b                	push   0xb
c0013084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013088:	e8 87 fe ff ff       	call   c0012f14 <icmp_send_response>
c001308d:	83 c4 10             	add    esp,0x10
c0013090:	90                   	nop
c0013091:	83 c4 0c             	add    esp,0xc
c0013094:	c3                   	ret    
c0013095:	66 90                	xchg   ax,ax
c0013097:	90                   	nop

c0013098 <lwip_standard_chksum>:
c0013098:	83 ec 2c             	sub    esp,0x2c
c001309b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001309f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130a3:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c00130aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130b6:	83 e0 01             	and    eax,0x1
c00130b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130bd:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00130c2:	74 24                	je     c00130e8 <lwip_standard_chksum+0x50>
c00130c4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00130c9:	7e 1d                	jle    c00130e8 <lwip_standard_chksum+0x50>
c00130cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00130cf:	8d 42 01             	lea    eax,[edx+0x1]
c00130d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130d6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00130da:	83 c0 01             	add    eax,0x1
c00130dd:	8a 12                	mov    dl,BYTE PTR [edx]
c00130df:	88 10                	mov    BYTE PTR [eax],dl
c00130e1:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c00130e6:	66 90                	xchg   ax,ax
c00130e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130f0:	eb 1e                	jmp    c0013110 <lwip_standard_chksum+0x78>
c00130f2:	66 90                	xchg   ax,ax
c00130f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f8:	8d 50 02             	lea    edx,[eax+0x2]
c00130fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00130ff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013102:	0f b7 c0             	movzx  eax,ax
c0013105:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013109:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001310e:	66 90                	xchg   ax,ax
c0013110:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013115:	7f dd                	jg     c00130f4 <lwip_standard_chksum+0x5c>
c0013117:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001311c:	7e 0e                	jle    c001312c <lwip_standard_chksum+0x94>
c001311e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013122:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013126:	8a 12                	mov    dl,BYTE PTR [edx]
c0013128:	88 10                	mov    BYTE PTR [eax],dl
c001312a:	66 90                	xchg   ax,ax
c001312c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0013131:	0f b7 c0             	movzx  eax,ax
c0013134:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013138:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001313c:	c1 e8 10             	shr    eax,0x10
c001313f:	89 c2                	mov    edx,eax
c0013141:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013145:	0f b7 c0             	movzx  eax,ax
c0013148:	01 d0                	add    eax,edx
c001314a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001314e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013152:	c1 e8 10             	shr    eax,0x10
c0013155:	89 c2                	mov    edx,eax
c0013157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001315b:	0f b7 c0             	movzx  eax,ax
c001315e:	01 d0                	add    eax,edx
c0013160:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013164:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013169:	74 1d                	je     c0013188 <lwip_standard_chksum+0xf0>
c001316b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001316f:	0f b7 c0             	movzx  eax,ax
c0013172:	83 ec 0c             	sub    esp,0xc
c0013175:	50                   	push   eax
c0013176:	e8 a1 da fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001317b:	83 c4 10             	add    esp,0x10
c001317e:	0f b7 c0             	movzx  eax,ax
c0013181:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013185:	8d 76 00             	lea    esi,[esi+0x0]
c0013188:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001318c:	83 c4 2c             	add    esp,0x2c
c001318f:	c3                   	ret    

c0013190 <inet_chksum_pseudo>:
c0013190:	83 ec 2c             	sub    esp,0x2c
c0013193:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013197:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001319b:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001319f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00131a4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00131ac:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131b9:	e9 8a 00 00 00       	jmp    c0013248 <inet_chksum_pseudo+0xb8>
c00131be:	66 90                	xchg   ax,ax
c00131c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131c4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00131c8:	0f b7 d0             	movzx  edx,ax
c00131cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131d2:	83 ec 08             	sub    esp,0x8
c00131d5:	52                   	push   edx
c00131d6:	50                   	push   eax
c00131d7:	e8 bc fe ff ff       	call   c0013098 <lwip_standard_chksum>
c00131dc:	83 c4 10             	add    esp,0x10
c00131df:	0f b7 c0             	movzx  eax,ax
c00131e2:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131ea:	c1 e8 10             	shr    eax,0x10
c00131ed:	89 c2                	mov    edx,eax
c00131ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131f3:	0f b7 c0             	movzx  eax,ax
c00131f6:	01 d0                	add    eax,edx
c00131f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013200:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013204:	83 e0 01             	and    eax,0x1
c0013207:	0f b7 c0             	movzx  eax,ax
c001320a:	85 c0                	test   eax,eax
c001320c:	74 2e                	je     c001323c <inet_chksum_pseudo+0xac>
c001320e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013212:	ba 01 00 00 00       	mov    edx,0x1
c0013217:	29 c2                	sub    edx,eax
c0013219:	89 d0                	mov    eax,edx
c001321b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001321f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013223:	0f b7 c0             	movzx  eax,ax
c0013226:	83 ec 0c             	sub    esp,0xc
c0013229:	50                   	push   eax
c001322a:	e8 ed d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001322f:	83 c4 10             	add    esp,0x10
c0013232:	0f b7 c0             	movzx  eax,ax
c0013235:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013239:	8d 76 00             	lea    esi,[esi+0x0]
c001323c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013240:	8b 00                	mov    eax,DWORD PTR [eax]
c0013242:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013246:	66 90                	xchg   ax,ax
c0013248:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001324d:	0f 85 6d ff ff ff    	jne    c00131c0 <inet_chksum_pseudo+0x30>
c0013253:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013258:	85 c0                	test   eax,eax
c001325a:	74 1c                	je     c0013278 <inet_chksum_pseudo+0xe8>
c001325c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013260:	0f b7 c0             	movzx  eax,ax
c0013263:	83 ec 0c             	sub    esp,0xc
c0013266:	50                   	push   eax
c0013267:	e8 b0 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001326c:	83 c4 10             	add    esp,0x10
c001326f:	0f b7 c0             	movzx  eax,ax
c0013272:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013276:	66 90                	xchg   ax,ax
c0013278:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001327c:	8b 00                	mov    eax,DWORD PTR [eax]
c001327e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013286:	0f b7 c0             	movzx  eax,ax
c0013289:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001328d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013291:	c1 e8 10             	shr    eax,0x10
c0013294:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013298:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001329c:	8b 00                	mov    eax,DWORD PTR [eax]
c001329e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00132a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a6:	0f b7 c0             	movzx  eax,ax
c00132a9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b1:	c1 e8 10             	shr    eax,0x10
c00132b4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00132bd:	83 ec 0c             	sub    esp,0xc
c00132c0:	50                   	push   eax
c00132c1:	e8 56 d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	0f b7 c0             	movzx  eax,ax
c00132cc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132d0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00132d5:	83 ec 0c             	sub    esp,0xc
c00132d8:	50                   	push   eax
c00132d9:	e8 3e d9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	0f b7 c0             	movzx  eax,ax
c00132e4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132ec:	c1 e8 10             	shr    eax,0x10
c00132ef:	89 c2                	mov    edx,eax
c00132f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f5:	0f b7 c0             	movzx  eax,ax
c00132f8:	01 d0                	add    eax,edx
c00132fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013302:	c1 e8 10             	shr    eax,0x10
c0013305:	89 c2                	mov    edx,eax
c0013307:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001330b:	0f b7 c0             	movzx  eax,ax
c001330e:	01 d0                	add    eax,edx
c0013310:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013318:	f7 d0                	not    eax
c001331a:	83 c4 2c             	add    esp,0x2c
c001331d:	c3                   	ret    
c001331e:	66 90                	xchg   ax,ax

c0013320 <inet_chksum_pseudo_partial>:
c0013320:	83 ec 2c             	sub    esp,0x2c
c0013323:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013327:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001332b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001332f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013333:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013338:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c001333d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013345:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001334a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001334e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013352:	e9 d9 00 00 00       	jmp    c0013430 <inet_chksum_pseudo_partial+0x110>
c0013357:	90                   	nop
c0013358:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001335c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013360:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013365:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c001336a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001336f:	39 c2                	cmp    edx,eax
c0013371:	76 09                	jbe    c001337c <inet_chksum_pseudo_partial+0x5c>
c0013373:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013377:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001337c:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013381:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013385:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013388:	83 ec 08             	sub    esp,0x8
c001338b:	52                   	push   edx
c001338c:	50                   	push   eax
c001338d:	e8 06 fd ff ff       	call   c0013098 <lwip_standard_chksum>
c0013392:	83 c4 10             	add    esp,0x10
c0013395:	0f b7 c0             	movzx  eax,ax
c0013398:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001339c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00133a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00133a4:	89 d1                	mov    ecx,edx
c00133a6:	29 c1                	sub    ecx,eax
c00133a8:	89 c8                	mov    eax,ecx
c00133aa:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00133af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00133b4:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00133b9:	76 15                	jbe    c00133d0 <inet_chksum_pseudo_partial+0xb0>
c00133bb:	83 ec 08             	sub    esp,0x8
c00133be:	68 80 0c 03 c0       	push   0xc0030c80
c00133c3:	68 e6 f9 02 c0       	push   0xc002f9e6
c00133c8:	e8 03 c7 00 00       	call   c001fad0 <CPrintf>
c00133cd:	83 c4 10             	add    esp,0x10
c00133d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d4:	c1 e8 10             	shr    eax,0x10
c00133d7:	89 c2                	mov    edx,eax
c00133d9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133dd:	0f b7 c0             	movzx  eax,ax
c00133e0:	01 d0                	add    eax,edx
c00133e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ea:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00133ee:	83 e0 01             	and    eax,0x1
c00133f1:	0f b7 c0             	movzx  eax,ax
c00133f4:	85 c0                	test   eax,eax
c00133f6:	74 2c                	je     c0013424 <inet_chksum_pseudo_partial+0x104>
c00133f8:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00133fc:	ba 01 00 00 00       	mov    edx,0x1
c0013401:	29 c2                	sub    edx,eax
c0013403:	89 d0                	mov    eax,edx
c0013405:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001340d:	0f b7 c0             	movzx  eax,ax
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	50                   	push   eax
c0013414:	e8 03 d8 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013419:	83 c4 10             	add    esp,0x10
c001341c:	0f b7 c0             	movzx  eax,ax
c001341f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013423:	90                   	nop
c0013424:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013428:	8b 00                	mov    eax,DWORD PTR [eax]
c001342a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001342e:	66 90                	xchg   ax,ax
c0013430:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013435:	74 0d                	je     c0013444 <inet_chksum_pseudo_partial+0x124>
c0013437:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001343c:	85 c0                	test   eax,eax
c001343e:	0f 85 14 ff ff ff    	jne    c0013358 <inet_chksum_pseudo_partial+0x38>
c0013444:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013449:	85 c0                	test   eax,eax
c001344b:	74 1b                	je     c0013468 <inet_chksum_pseudo_partial+0x148>
c001344d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013451:	0f b7 c0             	movzx  eax,ax
c0013454:	83 ec 0c             	sub    esp,0xc
c0013457:	50                   	push   eax
c0013458:	e8 bf d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001345d:	83 c4 10             	add    esp,0x10
c0013460:	0f b7 c0             	movzx  eax,ax
c0013463:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013467:	90                   	nop
c0013468:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001346c:	8b 00                	mov    eax,DWORD PTR [eax]
c001346e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013476:	0f b7 c0             	movzx  eax,ax
c0013479:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001347d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013481:	c1 e8 10             	shr    eax,0x10
c0013484:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013488:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001348c:	8b 00                	mov    eax,DWORD PTR [eax]
c001348e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013496:	0f b7 c0             	movzx  eax,ax
c0013499:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c001349d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a1:	c1 e8 10             	shr    eax,0x10
c00134a4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00134ad:	83 ec 0c             	sub    esp,0xc
c00134b0:	50                   	push   eax
c00134b1:	e8 66 d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134b6:	83 c4 10             	add    esp,0x10
c00134b9:	0f b7 c0             	movzx  eax,ax
c00134bc:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134c0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00134c5:	83 ec 0c             	sub    esp,0xc
c00134c8:	50                   	push   eax
c00134c9:	e8 4e d7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00134ce:	83 c4 10             	add    esp,0x10
c00134d1:	0f b7 c0             	movzx  eax,ax
c00134d4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00134d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134dc:	c1 e8 10             	shr    eax,0x10
c00134df:	89 c2                	mov    edx,eax
c00134e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e5:	0f b7 c0             	movzx  eax,ax
c00134e8:	01 d0                	add    eax,edx
c00134ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f2:	c1 e8 10             	shr    eax,0x10
c00134f5:	89 c2                	mov    edx,eax
c00134f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134fb:	0f b7 c0             	movzx  eax,ax
c00134fe:	01 d0                	add    eax,edx
c0013500:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013508:	f7 d0                	not    eax
c001350a:	83 c4 2c             	add    esp,0x2c
c001350d:	c3                   	ret    
c001350e:	66 90                	xchg   ax,ax

c0013510 <inet_chksum>:
c0013510:	83 ec 1c             	sub    esp,0x1c
c0013513:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013517:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001351c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0013521:	83 ec 08             	sub    esp,0x8
c0013524:	50                   	push   eax
c0013525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013529:	e8 6a fb ff ff       	call   c0013098 <lwip_standard_chksum>
c001352e:	83 c4 10             	add    esp,0x10
c0013531:	f7 d0                	not    eax
c0013533:	83 c4 1c             	add    esp,0x1c
c0013536:	c3                   	ret    
c0013537:	90                   	nop

c0013538 <inet_chksum_pbuf>:
c0013538:	83 ec 1c             	sub    esp,0x1c
c001353b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013543:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013548:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001354c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013550:	e9 8b 00 00 00       	jmp    c00135e0 <inet_chksum_pbuf+0xa8>
c0013555:	8d 76 00             	lea    esi,[esi+0x0]
c0013558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001355c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013560:	0f b7 d0             	movzx  edx,ax
c0013563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013567:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001356a:	83 ec 08             	sub    esp,0x8
c001356d:	52                   	push   edx
c001356e:	50                   	push   eax
c001356f:	e8 24 fb ff ff       	call   c0013098 <lwip_standard_chksum>
c0013574:	83 c4 10             	add    esp,0x10
c0013577:	0f b7 c0             	movzx  eax,ax
c001357a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001357e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013582:	c1 e8 10             	shr    eax,0x10
c0013585:	89 c2                	mov    edx,eax
c0013587:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001358b:	0f b7 c0             	movzx  eax,ax
c001358e:	01 d0                	add    eax,edx
c0013590:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013598:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001359c:	83 e0 01             	and    eax,0x1
c001359f:	0f b7 c0             	movzx  eax,ax
c00135a2:	85 c0                	test   eax,eax
c00135a4:	74 2e                	je     c00135d4 <inet_chksum_pbuf+0x9c>
c00135a6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135aa:	ba 01 00 00 00       	mov    edx,0x1
c00135af:	29 c2                	sub    edx,eax
c00135b1:	89 d0                	mov    eax,edx
c00135b3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00135b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135bb:	0f b7 c0             	movzx  eax,ax
c00135be:	83 ec 0c             	sub    esp,0xc
c00135c1:	50                   	push   eax
c00135c2:	e8 55 d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00135c7:	83 c4 10             	add    esp,0x10
c00135ca:	0f b7 c0             	movzx  eax,ax
c00135cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135d1:	8d 76 00             	lea    esi,[esi+0x0]
c00135d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00135da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135de:	66 90                	xchg   ax,ax
c00135e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00135e5:	0f 85 6d ff ff ff    	jne    c0013558 <inet_chksum_pbuf+0x20>
c00135eb:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c00135f0:	85 c0                	test   eax,eax
c00135f2:	74 1c                	je     c0013610 <inet_chksum_pbuf+0xd8>
c00135f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135f8:	0f b7 c0             	movzx  eax,ax
c00135fb:	83 ec 0c             	sub    esp,0xc
c00135fe:	50                   	push   eax
c00135ff:	e8 18 d6 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013604:	83 c4 10             	add    esp,0x10
c0013607:	0f b7 c0             	movzx  eax,ax
c001360a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001360e:	66 90                	xchg   ax,ax
c0013610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013614:	f7 d0                	not    eax
c0013616:	83 c4 1c             	add    esp,0x1c
c0013619:	c3                   	ret    
c001361a:	66 90                	xchg   ax,ax

c001361c <ip_route>:
c001361c:	83 ec 10             	sub    esp,0x10
c001361f:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013624:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013628:	eb 42                	jmp    c001366c <ip_route+0x50>
c001362a:	66 90                	xchg   ax,ax
c001362c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013630:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013633:	83 e0 01             	and    eax,0x1
c0013636:	0f b6 c0             	movzx  eax,al
c0013639:	85 c0                	test   eax,eax
c001363b:	74 23                	je     c0013660 <ip_route+0x44>
c001363d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013641:	8b 10                	mov    edx,DWORD PTR [eax]
c0013643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013647:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001364a:	31 c2                	xor    edx,eax
c001364c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013650:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013653:	21 d0                	and    eax,edx
c0013655:	75 09                	jne    c0013660 <ip_route+0x44>
c0013657:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001365b:	eb 4f                	jmp    c00136ac <ip_route+0x90>
c001365d:	8d 76 00             	lea    esi,[esi+0x0]
c0013660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013664:	8b 00                	mov    eax,DWORD PTR [eax]
c0013666:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001366a:	66 90                	xchg   ax,ax
c001366c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013671:	75 b9                	jne    c001362c <ip_route+0x10>
c0013673:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013678:	85 c0                	test   eax,eax
c001367a:	74 10                	je     c001368c <ip_route+0x70>
c001367c:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0013681:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013684:	0f b6 c0             	movzx  eax,al
c0013687:	83 e0 01             	and    eax,0x1
c001368a:	75 18                	jne    c00136a4 <ip_route+0x88>
c001368c:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013692:	83 c0 01             	add    eax,0x1
c0013695:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c001369b:	b8 00 00 00 00       	mov    eax,0x0
c00136a0:	eb 0a                	jmp    c00136ac <ip_route+0x90>
c00136a2:	66 90                	xchg   ax,ax
c00136a4:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]
c00136ac:	83 c4 10             	add    esp,0x10
c00136af:	c3                   	ret    

c00136b0 <ip_input>:
c00136b0:	83 ec 1c             	sub    esp,0x1c
c00136b3:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00136b9:	83 c0 01             	add    eax,0x1
c00136bc:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00136c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00136cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00136d1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00136d4:	0f b7 c0             	movzx  eax,ax
c00136d7:	83 ec 0c             	sub    esp,0xc
c00136da:	50                   	push   eax
c00136db:	e8 3c d5 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00136e0:	83 c4 10             	add    esp,0x10
c00136e3:	0f b7 c0             	movzx  eax,ax
c00136e6:	c1 e8 0c             	shr    eax,0xc
c00136e9:	0f b7 c0             	movzx  eax,ax
c00136ec:	83 f8 04             	cmp    eax,0x4
c00136ef:	74 37                	je     c0013728 <ip_input+0x78>
c00136f1:	83 ec 0c             	sub    esp,0xc
c00136f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136f8:	e8 d7 4b ff ff       	call   c00082d4 <pbuf_free>
c00136fd:	83 c4 10             	add    esp,0x10
c0013700:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013706:	83 c0 01             	add    eax,0x1
c0013709:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001370f:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013715:	83 c0 01             	add    eax,0x1
c0013718:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001371e:	b0 00                	mov    al,0x0
c0013720:	e9 cb 03 00 00       	jmp    c0013af0 <ip_input+0x440>
c0013725:	8d 76 00             	lea    esi,[esi+0x0]
c0013728:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001372c:	66 8b 00             	mov    ax,WORD PTR [eax]
c001372f:	0f b7 c0             	movzx  eax,ax
c0013732:	83 ec 0c             	sub    esp,0xc
c0013735:	50                   	push   eax
c0013736:	e8 e1 d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001373b:	83 c4 10             	add    esp,0x10
c001373e:	0f b7 c0             	movzx  eax,ax
c0013741:	c1 e8 08             	shr    eax,0x8
c0013744:	83 e0 0f             	and    eax,0xf
c0013747:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c001374c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c0013751:	c1 e0 02             	shl    eax,0x2
c0013754:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013759:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001375d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013761:	0f b7 c0             	movzx  eax,ax
c0013764:	83 ec 0c             	sub    esp,0xc
c0013767:	50                   	push   eax
c0013768:	e8 af d4 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001376d:	83 c4 10             	add    esp,0x10
c0013770:	66 89 04 24          	mov    WORD PTR [esp],ax
c0013774:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013778:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001377c:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0013781:	0f b7 c0             	movzx  eax,ax
c0013784:	39 c2                	cmp    edx,eax
c0013786:	77 14                	ja     c001379c <ip_input+0xec>
c0013788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001378c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001378f:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c0013793:	0f b7 c0             	movzx  eax,ax
c0013796:	39 c2                	cmp    edx,eax
c0013798:	76 36                	jbe    c00137d0 <ip_input+0x120>
c001379a:	66 90                	xchg   ax,ax
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137a3:	e8 2c 4b ff ff       	call   c00082d4 <pbuf_free>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c00137b1:	83 c0 01             	add    eax,0x1
c00137b4:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00137ba:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00137c0:	83 c0 01             	add    eax,0x1
c00137c3:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00137c9:	b0 00                	mov    al,0x0
c00137cb:	e9 20 03 00 00       	jmp    c0013af0 <ip_input+0x440>
c00137d0:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c00137d5:	83 ec 08             	sub    esp,0x8
c00137d8:	50                   	push   eax
c00137d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137dd:	e8 2e fd ff ff       	call   c0013510 <inet_chksum>
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	0f b7 c0             	movzx  eax,ax
c00137e8:	85 c0                	test   eax,eax
c00137ea:	74 34                	je     c0013820 <ip_input+0x170>
c00137ec:	83 ec 0c             	sub    esp,0xc
c00137ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00137f3:	e8 dc 4a ff ff       	call   c00082d4 <pbuf_free>
c00137f8:	83 c4 10             	add    esp,0x10
c00137fb:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c0013801:	83 c0 01             	add    eax,0x1
c0013804:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c001380a:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013810:	83 c0 01             	add    eax,0x1
c0013813:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013819:	b0 00                	mov    al,0x0
c001381b:	e9 d0 02 00 00       	jmp    c0013af0 <ip_input+0x440>
c0013820:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013824:	83 ec 08             	sub    esp,0x8
c0013827:	50                   	push   eax
c0013828:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001382c:	e8 77 50 ff ff       	call   c00088a8 <pbuf_realloc>
c0013831:	83 c4 10             	add    esp,0x10
c0013834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013838:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001383b:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c0013840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013844:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013847:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c001384c:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013854:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013858:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001385c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013860:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013863:	83 e0 01             	and    eax,0x1
c0013866:	0f b6 c0             	movzx  eax,al
c0013869:	85 c0                	test   eax,eax
c001386b:	74 43                	je     c00138b0 <ip_input+0x200>
c001386d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013871:	83 c0 04             	add    eax,0x4
c0013874:	74 3a                	je     c00138b0 <ip_input+0x200>
c0013876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001387a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001387d:	85 c0                	test   eax,eax
c001387f:	74 2f                	je     c00138b0 <ip_input+0x200>
c0013881:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0013887:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001388b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001388e:	39 c2                	cmp    edx,eax
c0013890:	74 66                	je     c00138f8 <ip_input+0x248>
c0013892:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013897:	83 ec 08             	sub    esp,0x8
c001389a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001389e:	50                   	push   eax
c001389f:	e8 d4 05 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	0f b6 c0             	movzx  eax,al
c00138aa:	85 c0                	test   eax,eax
c00138ac:	75 4a                	jne    c00138f8 <ip_input+0x248>
c00138ae:	66 90                	xchg   ax,ax
c00138b0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00138b5:	74 15                	je     c00138cc <ip_input+0x21c>
c00138b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00138bf:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00138c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138c8:	eb 0e                	jmp    c00138d8 <ip_input+0x228>
c00138ca:	66 90                	xchg   ax,ax
c00138cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00138d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138d6:	66 90                	xchg   ax,ax
c00138d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138dc:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00138e0:	75 0a                	jne    c00138ec <ip_input+0x23c>
c00138e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00138e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00138e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138ec:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00138f1:	0f 85 65 ff ff ff    	jne    c001385c <ip_input+0x1ac>
c00138f7:	90                   	nop
c00138f8:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c00138fd:	83 ec 08             	sub    esp,0x8
c0013900:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013904:	50                   	push   eax
c0013905:	e8 6e 05 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	0f b6 c0             	movzx  eax,al
c0013910:	85 c0                	test   eax,eax
c0013912:	75 14                	jne    c0013928 <ip_input+0x278>
c0013914:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013919:	25 f0 00 00 00       	and    eax,0xf0
c001391e:	3d e0 00 00 00       	cmp    eax,0xe0
c0013923:	75 2b                	jne    c0013950 <ip_input+0x2a0>
c0013925:	8d 76 00             	lea    esi,[esi+0x0]
c0013928:	83 ec 0c             	sub    esp,0xc
c001392b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001392f:	e8 a0 49 ff ff       	call   c00082d4 <pbuf_free>
c0013934:	83 c4 10             	add    esp,0x10
c0013937:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c001393d:	83 c0 01             	add    eax,0x1
c0013940:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013946:	b0 00                	mov    al,0x0
c0013948:	e9 a3 01 00 00       	jmp    c0013af0 <ip_input+0x440>
c001394d:	8d 76 00             	lea    esi,[esi+0x0]
c0013950:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013955:	75 19                	jne    c0013970 <ip_input+0x2c0>
c0013957:	83 ec 0c             	sub    esp,0xc
c001395a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001395e:	e8 71 49 ff ff       	call   c00082d4 <pbuf_free>
c0013963:	83 c4 10             	add    esp,0x10
c0013966:	b0 00                	mov    al,0x0
c0013968:	e9 83 01 00 00       	jmp    c0013af0 <ip_input+0x440>
c001396d:	8d 76 00             	lea    esi,[esi+0x0]
c0013970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013974:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0013978:	0f b7 c0             	movzx  eax,ax
c001397b:	25 3f ff 00 00       	and    eax,0xff3f
c0013980:	74 2e                	je     c00139b0 <ip_input+0x300>
c0013982:	83 ec 0c             	sub    esp,0xc
c0013985:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013989:	e8 8a 13 00 00       	call   c0014d18 <ip_reass>
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013995:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c001399a:	75 08                	jne    c00139a4 <ip_input+0x2f4>
c001399c:	b0 00                	mov    al,0x0
c001399e:	e9 4d 01 00 00       	jmp    c0013af0 <ip_input+0x440>
c00139a3:	90                   	nop
c00139a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00139ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139af:	90                   	nop
c00139b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00139b4:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00139b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139bd:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00139c2:	83 ec 08             	sub    esp,0x8
c00139c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139cd:	e8 32 5c ff ff       	call   c0009604 <raw_input>
c00139d2:	83 c4 10             	add    esp,0x10
c00139d5:	0f b6 c0             	movzx  eax,al
c00139d8:	85 c0                	test   eax,eax
c00139da:	0f 85 e0 00 00 00    	jne    c0013ac0 <ip_input+0x410>
c00139e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e4:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00139e7:	0f b6 c0             	movzx  eax,al
c00139ea:	83 f8 06             	cmp    eax,0x6
c00139ed:	74 25                	je     c0013a14 <ip_input+0x364>
c00139ef:	83 f8 11             	cmp    eax,0x11
c00139f2:	74 08                	je     c00139fc <ip_input+0x34c>
c00139f4:	83 f8 01             	cmp    eax,0x1
c00139f7:	74 33                	je     c0013a2c <ip_input+0x37c>
c00139f9:	eb 49                	jmp    c0013a44 <ip_input+0x394>
c00139fb:	90                   	nop
c00139fc:	83 ec 08             	sub    esp,0x8
c00139ff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a07:	e8 a8 d3 ff ff       	call   c0010db4 <udp_input>
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	e9 b0 00 00 00       	jmp    c0013ac4 <ip_input+0x414>
c0013a14:	83 ec 08             	sub    esp,0x8
c0013a17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a1f:	e8 b0 a4 ff ff       	call   c000ded4 <tcp_input>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	e9 98 00 00 00       	jmp    c0013ac4 <ip_input+0x414>
c0013a2c:	83 ec 08             	sub    esp,0x8
c0013a2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a37:	e8 70 f0 ff ff       	call   c0012aac <icmp_input>
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	e9 80 00 00 00       	jmp    c0013ac4 <ip_input+0x414>
c0013a44:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a49:	83 ec 08             	sub    esp,0x8
c0013a4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a50:	50                   	push   eax
c0013a51:	e8 22 04 00 00       	call   c0013e78 <ip4_addr_isbroadcast>
c0013a56:	83 c4 10             	add    esp,0x10
c0013a59:	0f b6 c0             	movzx  eax,al
c0013a5c:	85 c0                	test   eax,eax
c0013a5e:	75 30                	jne    c0013a90 <ip_input+0x3e0>
c0013a60:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013a65:	25 f0 00 00 00       	and    eax,0xf0
c0013a6a:	3d e0 00 00 00       	cmp    eax,0xe0
c0013a6f:	74 1f                	je     c0013a90 <ip_input+0x3e0>
c0013a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013a79:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013a7c:	83 ec 08             	sub    esp,0x8
c0013a7f:	6a 02                	push   0x2
c0013a81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a85:	e8 c6 f5 ff ff       	call   c0013050 <icmp_dest_unreach>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a97:	e8 38 48 ff ff       	call   c00082d4 <pbuf_free>
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c0013aa5:	83 c0 01             	add    eax,0x1
c0013aa8:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c0013aae:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013ab4:	83 c0 01             	add    eax,0x1
c0013ab7:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013abd:	eb 05                	jmp    c0013ac4 <ip_input+0x414>
c0013abf:	90                   	nop
c0013ac0:	90                   	nop
c0013ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0013ac4:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c0013ace:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013ad8:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013ae2:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013aec:	b0 00                	mov    al,0x0
c0013aee:	66 90                	xchg   ax,ax
c0013af0:	83 c4 1c             	add    esp,0x1c
c0013af3:	c3                   	ret    

c0013af4 <ip_output_if>:
c0013af4:	83 ec 2c             	sub    esp,0x2c
c0013af7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013afb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013aff:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013b03:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013b07:	88 c8                	mov    al,cl
c0013b09:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013b0d:	88 d0                	mov    al,dl
c0013b0f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013b13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b1f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013b23:	0f b7 c0             	movzx  eax,ax
c0013b26:	83 f8 01             	cmp    eax,0x1
c0013b29:	74 15                	je     c0013b40 <ip_output_if+0x4c>
c0013b2b:	83 ec 08             	sub    esp,0x8
c0013b2e:	68 8a 0c 03 c0       	push   0xc0030c8a
c0013b33:	68 e6 f9 02 c0       	push   0xc002f9e6
c0013b38:	e8 93 bf 00 00       	call   c001fad0 <CPrintf>
c0013b3d:	83 c4 10             	add    esp,0x10
c0013b40:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013b45:	0f 84 f5 01 00 00    	je     c0013d40 <ip_output_if+0x24c>
c0013b4b:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013b52:	83 ec 08             	sub    esp,0x8
c0013b55:	6a 14                	push   0x14
c0013b57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013b5b:	e8 d4 45 ff ff       	call   c0008134 <pbuf_header>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	0f b6 c0             	movzx  eax,al
c0013b66:	85 c0                	test   eax,eax
c0013b68:	74 16                	je     c0013b80 <ip_output_if+0x8c>
c0013b6a:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013b70:	83 c0 01             	add    eax,0x1
c0013b73:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013b79:	b0 fe                	mov    al,0xfe
c0013b7b:	e9 4c 02 00 00       	jmp    c0013dcc <ip_output_if+0x2d8>
c0013b80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b8f:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013b93:	0f b7 c0             	movzx  eax,ax
c0013b96:	83 f8 13             	cmp    eax,0x13
c0013b99:	77 15                	ja     c0013bb0 <ip_output_if+0xbc>
c0013b9b:	83 ec 08             	sub    esp,0x8
c0013b9e:	68 98 0c 03 c0       	push   0xc0030c98
c0013ba3:	68 e6 f9 02 c0       	push   0xc002f9e6
c0013ba8:	e8 23 bf 00 00       	call   c001fad0 <CPrintf>
c0013bad:	83 c4 10             	add    esp,0x10
c0013bb0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bb4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013bb8:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013bbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bbf:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013bc3:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013bc6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013bcb:	c1 e0 08             	shl    eax,0x8
c0013bce:	89 c2                	mov    edx,eax
c0013bd0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013bd5:	09 d0                	or     eax,edx
c0013bd7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013bdf:	8b 10                	mov    edx,DWORD PTR [eax]
c0013be1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013be5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013be8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bef:	0f b7 c0             	movzx  eax,ax
c0013bf2:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bfd:	c1 e8 10             	shr    eax,0x10
c0013c00:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c04:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013c09:	c1 e8 02             	shr    eax,0x2
c0013c0c:	0f b7 c0             	movzx  eax,ax
c0013c0f:	c1 e0 08             	shl    eax,0x8
c0013c12:	80 cc 40             	or     ah,0x40
c0013c15:	89 c2                	mov    edx,eax
c0013c17:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013c1c:	09 d0                	or     eax,edx
c0013c1e:	0f b7 c0             	movzx  eax,ax
c0013c21:	83 ec 0c             	sub    esp,0xc
c0013c24:	50                   	push   eax
c0013c25:	e8 f2 cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c2a:	83 c4 10             	add    esp,0x10
c0013c2d:	89 c2                	mov    edx,eax
c0013c2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c33:	66 89 10             	mov    WORD PTR [eax],dx
c0013c36:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c3a:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013c3d:	0f b7 c0             	movzx  eax,ax
c0013c40:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013c4b:	0f b7 c0             	movzx  eax,ax
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	50                   	push   eax
c0013c52:	e8 c5 cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c57:	83 c4 10             	add    esp,0x10
c0013c5a:	89 c2                	mov    edx,eax
c0013c5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c60:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0013c64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c68:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013c6c:	0f b7 c0             	movzx  eax,ax
c0013c6f:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c77:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013c7d:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013c83:	0f b7 c0             	movzx  eax,ax
c0013c86:	83 ec 0c             	sub    esp,0xc
c0013c89:	50                   	push   eax
c0013c8a:	e8 8d cf fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0013c8f:	83 c4 10             	add    esp,0x10
c0013c92:	89 c2                	mov    edx,eax
c0013c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c98:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0013c9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ca0:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013ca4:	0f b7 c0             	movzx  eax,ax
c0013ca7:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cab:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013cb1:	83 c0 01             	add    eax,0x1
c0013cb4:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013cba:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013cbf:	74 0b                	je     c0013ccc <ip_output_if+0x1d8>
c0013cc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cc7:	85 c0                	test   eax,eax
c0013cc9:	75 11                	jne    c0013cdc <ip_output_if+0x1e8>
c0013ccb:	90                   	nop
c0013ccc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cd0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013cd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cd7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013cda:	eb 10                	jmp    c0013cec <ip_output_if+0x1f8>
c0013cdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ce0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ce2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ce6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013cf3:	0f b7 c0             	movzx  eax,ax
c0013cf6:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013cfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cfe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013d01:	c1 e8 10             	shr    eax,0x10
c0013d04:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d0c:	c1 e8 10             	shr    eax,0x10
c0013d0f:	89 c2                	mov    edx,eax
c0013d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d15:	0f b7 c0             	movzx  eax,ax
c0013d18:	01 d0                	add    eax,edx
c0013d1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d22:	c1 e8 10             	shr    eax,0x10
c0013d25:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013d29:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013d2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d31:	89 c2                	mov    edx,eax
c0013d33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d37:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0013d3b:	eb 23                	jmp    c0013d60 <ip_output_if+0x26c>
c0013d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013d47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013d52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d56:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013d5a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d5e:	66 90                	xchg   ax,ax
c0013d60:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013d66:	83 c0 01             	add    eax,0x1
c0013d69:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013d6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d76:	0f b7 c0             	movzx  eax,ax
c0013d79:	85 c0                	test   eax,eax
c0013d7b:	74 33                	je     c0013db0 <ip_output_if+0x2bc>
c0013d7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013d84:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013d88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013d8b:	0f b7 d2             	movzx  edx,dx
c0013d8e:	0f b7 c0             	movzx  eax,ax
c0013d91:	39 c2                	cmp    edx,eax
c0013d93:	76 1b                	jbe    c0013db0 <ip_output_if+0x2bc>
c0013d95:	83 ec 04             	sub    esp,0x4
c0013d98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013d9c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013da0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013da4:	e8 37 14 00 00       	call   c00151e0 <ip_frag>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	eb 1e                	jmp    c0013dcc <ip_output_if+0x2d8>
c0013dae:	66 90                	xchg   ax,ax
c0013db0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013db4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013db7:	83 ec 04             	sub    esp,0x4
c0013dba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013dbe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013dc2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013dc6:	ff d0                	call   eax
c0013dc8:	83 c4 10             	add    esp,0x10
c0013dcb:	90                   	nop
c0013dcc:	83 c4 2c             	add    esp,0x2c
c0013dcf:	c3                   	ret    

c0013dd0 <ip_output>:
c0013dd0:	83 ec 2c             	sub    esp,0x2c
c0013dd3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013dd7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0013ddb:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0013ddf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013de3:	88 c8                	mov    al,cl
c0013de5:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013de9:	88 d0                	mov    al,dl
c0013deb:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013df3:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013df7:	0f b7 c0             	movzx  eax,ax
c0013dfa:	83 f8 01             	cmp    eax,0x1
c0013dfd:	74 15                	je     c0013e14 <ip_output+0x44>
c0013dff:	83 ec 08             	sub    esp,0x8
c0013e02:	68 8a 0c 03 c0       	push   0xc0030c8a
c0013e07:	68 e6 f9 02 c0       	push   0xc002f9e6
c0013e0c:	e8 bf bc 00 00       	call   c001fad0 <CPrintf>
c0013e11:	83 c4 10             	add    esp,0x10
c0013e14:	83 ec 0c             	sub    esp,0xc
c0013e17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013e1b:	e8 fc f7 ff ff       	call   c001361c <ip_route>
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e27:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e2c:	75 16                	jne    c0013e44 <ip_output+0x74>
c0013e2e:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013e34:	83 c0 01             	add    eax,0x1
c0013e37:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013e3d:	b0 fc                	mov    al,0xfc
c0013e3f:	eb 33                	jmp    c0013e74 <ip_output+0xa4>
c0013e41:	8d 76 00             	lea    esi,[esi+0x0]
c0013e44:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013e49:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013e4e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013e53:	83 ec 04             	sub    esp,0x4
c0013e56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e5a:	51                   	push   ecx
c0013e5b:	52                   	push   edx
c0013e5c:	50                   	push   eax
c0013e5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e65:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013e69:	e8 86 fc ff ff       	call   c0013af4 <ip_output_if>
c0013e6e:	83 c4 20             	add    esp,0x20
c0013e71:	8d 76 00             	lea    esi,[esi+0x0]
c0013e74:	83 c4 2c             	add    esp,0x2c
c0013e77:	c3                   	ret    

c0013e78 <ip4_addr_isbroadcast>:
c0013e78:	83 ec 10             	sub    esp,0x10
c0013e7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013e83:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013e88:	74 0a                	je     c0013e94 <ip4_addr_isbroadcast+0x1c>
c0013e8a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013e8f:	75 07                	jne    c0013e98 <ip4_addr_isbroadcast+0x20>
c0013e91:	8d 76 00             	lea    esi,[esi+0x0]
c0013e94:	b0 01                	mov    al,0x1
c0013e96:	eb 64                	jmp    c0013efc <ip4_addr_isbroadcast+0x84>
c0013e98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e9c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013e9f:	0f b6 c0             	movzx  eax,al
c0013ea2:	83 e0 02             	and    eax,0x2
c0013ea5:	75 05                	jne    c0013eac <ip4_addr_isbroadcast+0x34>
c0013ea7:	b0 00                	mov    al,0x0
c0013ea9:	eb 51                	jmp    c0013efc <ip4_addr_isbroadcast+0x84>
c0013eab:	90                   	nop
c0013eac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013eb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013eb3:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013eb7:	75 07                	jne    c0013ec0 <ip4_addr_isbroadcast+0x48>
c0013eb9:	b0 00                	mov    al,0x0
c0013ebb:	eb 3f                	jmp    c0013efc <ip4_addr_isbroadcast+0x84>
c0013ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ec0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ec8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ecb:	31 c2                	xor    edx,eax
c0013ecd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ed1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ed4:	21 d0                	and    eax,edx
c0013ed6:	75 20                	jne    c0013ef8 <ip4_addr_isbroadcast+0x80>
c0013ed8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013edc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013edf:	f7 d0                	not    eax
c0013ee1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013ee5:	89 c2                	mov    edx,eax
c0013ee7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013eeb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013eee:	f7 d0                	not    eax
c0013ef0:	39 c2                	cmp    edx,eax
c0013ef2:	75 04                	jne    c0013ef8 <ip4_addr_isbroadcast+0x80>
c0013ef4:	b0 01                	mov    al,0x1
c0013ef6:	eb 04                	jmp    c0013efc <ip4_addr_isbroadcast+0x84>
c0013ef8:	b0 00                	mov    al,0x0
c0013efa:	66 90                	xchg   ax,ax
c0013efc:	83 c4 10             	add    esp,0x10
c0013eff:	c3                   	ret    

c0013f00 <ip4_addr_netmask_valid>:
c0013f00:	83 ec 1c             	sub    esp,0x1c
c0013f03:	83 ec 0c             	sub    esp,0xc
c0013f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f0a:	e8 31 cd fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c0013f0f:	83 c4 10             	add    esp,0x10
c0013f12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013f16:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013f1e:	eb 10                	jmp    c0013f30 <ip4_addr_netmask_valid+0x30>
c0013f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f24:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f28:	74 12                	je     c0013f3c <ip4_addr_netmask_valid+0x3c>
c0013f2a:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f2e:	66 90                	xchg   ax,ax
c0013f30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f35:	75 e9                	jne    c0013f20 <ip4_addr_netmask_valid+0x20>
c0013f37:	eb 1b                	jmp    c0013f54 <ip4_addr_netmask_valid+0x54>
c0013f39:	8d 76 00             	lea    esi,[esi+0x0]
c0013f3c:	90                   	nop
c0013f3d:	eb 15                	jmp    c0013f54 <ip4_addr_netmask_valid+0x54>
c0013f3f:	90                   	nop
c0013f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f44:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013f48:	74 06                	je     c0013f50 <ip4_addr_netmask_valid+0x50>
c0013f4a:	b0 00                	mov    al,0x0
c0013f4c:	eb 12                	jmp    c0013f60 <ip4_addr_netmask_valid+0x60>
c0013f4e:	66 90                	xchg   ax,ax
c0013f50:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013f54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013f59:	75 e5                	jne    c0013f40 <ip4_addr_netmask_valid+0x40>
c0013f5b:	b0 01                	mov    al,0x1
c0013f5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013f60:	83 c4 1c             	add    esp,0x1c
c0013f63:	c3                   	ret    

c0013f64 <ipaddr_aton>:
c0013f64:	83 ec 2c             	sub    esp,0x2c
c0013f67:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013f6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013f6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f73:	8a 00                	mov    al,BYTE PTR [eax]
c0013f75:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f79:	8d 76 00             	lea    esi,[esi+0x0]
c0013f7c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f80:	0f b6 c0             	movzx  eax,al
c0013f83:	83 f8 2f             	cmp    eax,0x2f
c0013f86:	76 0c                	jbe    c0013f94 <ipaddr_aton+0x30>
c0013f88:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f8c:	0f b6 c0             	movzx  eax,al
c0013f8f:	83 f8 39             	cmp    eax,0x39
c0013f92:	76 0c                	jbe    c0013fa0 <ipaddr_aton+0x3c>
c0013f94:	b8 00 00 00 00       	mov    eax,0x0
c0013f99:	e9 f2 02 00 00       	jmp    c0014290 <ipaddr_aton+0x32c>
c0013f9e:	66 90                	xchg   ax,ax
c0013fa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013fa8:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013fad:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fb2:	83 f8 30             	cmp    eax,0x30
c0013fb5:	75 45                	jne    c0013ffc <ipaddr_aton+0x98>
c0013fb7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fc0:	8a 00                	mov    al,BYTE PTR [eax]
c0013fc2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013fc6:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fcb:	83 f8 78             	cmp    eax,0x78
c0013fce:	74 0c                	je     c0013fdc <ipaddr_aton+0x78>
c0013fd0:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fd5:	83 f8 58             	cmp    eax,0x58
c0013fd8:	75 1a                	jne    c0013ff4 <ipaddr_aton+0x90>
c0013fda:	66 90                	xchg   ax,ax
c0013fdc:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013fe1:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fe6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fea:	8a 00                	mov    al,BYTE PTR [eax]
c0013fec:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013ff0:	eb 0a                	jmp    c0013ffc <ipaddr_aton+0x98>
c0013ff2:	66 90                	xchg   ax,ax
c0013ff4:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ffc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014000:	0f b6 c0             	movzx  eax,al
c0014003:	83 f8 2f             	cmp    eax,0x2f
c0014006:	76 3c                	jbe    c0014044 <ipaddr_aton+0xe0>
c0014008:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001400c:	0f b6 c0             	movzx  eax,al
c001400f:	83 f8 39             	cmp    eax,0x39
c0014012:	77 30                	ja     c0014044 <ipaddr_aton+0xe0>
c0014014:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014019:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001401e:	89 c2                	mov    edx,eax
c0014020:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014025:	01 d0                	add    eax,edx
c0014027:	83 e8 30             	sub    eax,0x30
c001402a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001402e:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014037:	8a 00                	mov    al,BYTE PTR [eax]
c0014039:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001403d:	e9 ae 00 00 00       	jmp    c00140f0 <ipaddr_aton+0x18c>
c0014042:	66 90                	xchg   ax,ax
c0014044:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0014049:	83 f8 10             	cmp    eax,0x10
c001404c:	0f 85 a6 00 00 00    	jne    c00140f8 <ipaddr_aton+0x194>
c0014052:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014056:	0f b6 c0             	movzx  eax,al
c0014059:	83 f8 2f             	cmp    eax,0x2f
c001405c:	76 0e                	jbe    c001406c <ipaddr_aton+0x108>
c001405e:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014062:	0f b6 c0             	movzx  eax,al
c0014065:	83 f8 39             	cmp    eax,0x39
c0014068:	76 32                	jbe    c001409c <ipaddr_aton+0x138>
c001406a:	66 90                	xchg   ax,ax
c001406c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014070:	0f b6 c0             	movzx  eax,al
c0014073:	83 f8 60             	cmp    eax,0x60
c0014076:	76 0c                	jbe    c0014084 <ipaddr_aton+0x120>
c0014078:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001407c:	0f b6 c0             	movzx  eax,al
c001407f:	83 f8 66             	cmp    eax,0x66
c0014082:	76 18                	jbe    c001409c <ipaddr_aton+0x138>
c0014084:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014088:	0f b6 c0             	movzx  eax,al
c001408b:	83 f8 40             	cmp    eax,0x40
c001408e:	76 68                	jbe    c00140f8 <ipaddr_aton+0x194>
c0014090:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0014094:	0f b6 c0             	movzx  eax,al
c0014097:	83 f8 46             	cmp    eax,0x46
c001409a:	77 5c                	ja     c00140f8 <ipaddr_aton+0x194>
c001409c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00140a0:	c1 e0 04             	shl    eax,0x4
c00140a3:	89 c2                	mov    edx,eax
c00140a5:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140aa:	8d 48 0a             	lea    ecx,[eax+0xa]
c00140ad:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140b1:	0f b6 c0             	movzx  eax,al
c00140b4:	83 f8 60             	cmp    eax,0x60
c00140b7:	76 13                	jbe    c00140cc <ipaddr_aton+0x168>
c00140b9:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c00140bd:	0f b6 c0             	movzx  eax,al
c00140c0:	83 f8 7a             	cmp    eax,0x7a
c00140c3:	77 07                	ja     c00140cc <ipaddr_aton+0x168>
c00140c5:	b8 61 00 00 00       	mov    eax,0x61
c00140ca:	eb 08                	jmp    c00140d4 <ipaddr_aton+0x170>
c00140cc:	b8 41 00 00 00       	mov    eax,0x41
c00140d1:	8d 76 00             	lea    esi,[esi+0x0]
c00140d4:	29 c1                	sub    ecx,eax
c00140d6:	89 c8                	mov    eax,ecx
c00140d8:	09 d0                	or     eax,edx
c00140da:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00140de:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c00140e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00140e7:	8a 00                	mov    al,BYTE PTR [eax]
c00140e9:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]
c00140f0:	e9 07 ff ff ff       	jmp    c0013ffc <ipaddr_aton+0x98>
c00140f5:	8d 76 00             	lea    esi,[esi+0x0]
c00140f8:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140fd:	83 f8 2e             	cmp    eax,0x2e
c0014100:	75 42                	jne    c0014144 <ipaddr_aton+0x1e0>
c0014102:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014106:	83 c0 0c             	add    eax,0xc
c0014109:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c001410d:	72 0d                	jb     c001411c <ipaddr_aton+0x1b8>
c001410f:	b8 00 00 00 00       	mov    eax,0x0
c0014114:	e9 77 01 00 00       	jmp    c0014290 <ipaddr_aton+0x32c>
c0014119:	8d 76 00             	lea    esi,[esi+0x0]
c001411c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014120:	8d 50 04             	lea    edx,[eax+0x4]
c0014123:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014127:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001412b:	89 10                	mov    DWORD PTR [eax],edx
c001412d:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0014132:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014136:	8a 00                	mov    al,BYTE PTR [eax]
c0014138:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001413c:	e9 3b fe ff ff       	jmp    c0013f7c <ipaddr_aton+0x18>
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	90                   	nop
c0014145:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001414a:	85 c0                	test   eax,eax
c001414c:	74 46                	je     c0014194 <ipaddr_aton+0x230>
c001414e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014153:	83 f8 20             	cmp    eax,0x20
c0014156:	74 3c                	je     c0014194 <ipaddr_aton+0x230>
c0014158:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001415d:	83 f8 0c             	cmp    eax,0xc
c0014160:	74 32                	je     c0014194 <ipaddr_aton+0x230>
c0014162:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014167:	83 f8 0a             	cmp    eax,0xa
c001416a:	74 28                	je     c0014194 <ipaddr_aton+0x230>
c001416c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014171:	83 f8 0d             	cmp    eax,0xd
c0014174:	74 1e                	je     c0014194 <ipaddr_aton+0x230>
c0014176:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001417b:	83 f8 09             	cmp    eax,0x9
c001417e:	74 14                	je     c0014194 <ipaddr_aton+0x230>
c0014180:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014185:	83 f8 0b             	cmp    eax,0xb
c0014188:	74 0a                	je     c0014194 <ipaddr_aton+0x230>
c001418a:	b8 00 00 00 00       	mov    eax,0x0
c001418f:	e9 fc 00 00 00       	jmp    c0014290 <ipaddr_aton+0x32c>
c0014194:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014198:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001419c:	29 c2                	sub    edx,eax
c001419e:	89 d0                	mov    eax,edx
c00141a0:	c1 f8 02             	sar    eax,0x2
c00141a3:	83 c0 01             	add    eax,0x1
c00141a6:	83 f8 04             	cmp    eax,0x4
c00141a9:	0f 87 9d 00 00 00    	ja     c001424c <ipaddr_aton+0x2e8>
c00141af:	8b 04 85 d0 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf330]
c00141b6:	ff e0                	jmp    eax
c00141b8:	b8 00 00 00 00       	mov    eax,0x0
c00141bd:	e9 ce 00 00 00       	jmp    c0014290 <ipaddr_aton+0x32c>
c00141c2:	66 90                	xchg   ax,ax
c00141c4:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00141cc:	76 0a                	jbe    c00141d8 <ipaddr_aton+0x274>
c00141ce:	b8 00 00 00 00       	mov    eax,0x0
c00141d3:	e9 b8 00 00 00       	jmp    c0014290 <ipaddr_aton+0x32c>
c00141d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141dc:	c1 e0 18             	shl    eax,0x18
c00141df:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00141e3:	e9 80 00 00 00       	jmp    c0014268 <ipaddr_aton+0x304>
c00141e8:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c00141f0:	76 0a                	jbe    c00141fc <ipaddr_aton+0x298>
c00141f2:	b8 00 00 00 00       	mov    eax,0x0
c00141f7:	e9 94 00 00 00       	jmp    c0014290 <ipaddr_aton+0x32c>
c00141fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014200:	c1 e0 18             	shl    eax,0x18
c0014203:	89 c2                	mov    edx,eax
c0014205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014209:	c1 e0 10             	shl    eax,0x10
c001420c:	09 d0                	or     eax,edx
c001420e:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014212:	eb 54                	jmp    c0014268 <ipaddr_aton+0x304>
c0014214:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c001421c:	76 0a                	jbe    c0014228 <ipaddr_aton+0x2c4>
c001421e:	b8 00 00 00 00       	mov    eax,0x0
c0014223:	eb 6b                	jmp    c0014290 <ipaddr_aton+0x32c>
c0014225:	8d 76 00             	lea    esi,[esi+0x0]
c0014228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001422c:	c1 e0 18             	shl    eax,0x18
c001422f:	89 c2                	mov    edx,eax
c0014231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014235:	c1 e0 10             	shl    eax,0x10
c0014238:	09 c2                	or     edx,eax
c001423a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001423e:	c1 e0 08             	shl    eax,0x8
c0014241:	09 d0                	or     eax,edx
c0014243:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014247:	eb 1f                	jmp    c0014268 <ipaddr_aton+0x304>
c0014249:	8d 76 00             	lea    esi,[esi+0x0]
c001424c:	83 ec 08             	sub    esp,0x8
c001424f:	68 c5 0c 03 c0       	push   0xc0030cc5
c0014254:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014259:	e8 72 b8 00 00       	call   c001fad0 <CPrintf>
c001425e:	83 c4 10             	add    esp,0x10
c0014261:	eb 05                	jmp    c0014268 <ipaddr_aton+0x304>
c0014263:	90                   	nop
c0014264:	90                   	nop
c0014265:	8d 76 00             	lea    esi,[esi+0x0]
c0014268:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001426d:	74 19                	je     c0014288 <ipaddr_aton+0x324>
c001426f:	83 ec 0c             	sub    esp,0xc
c0014272:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014276:	e8 c5 c9 fe ff       	call   c0000c40 <LWIP_PLATFORM_HTONL>
c001427b:	83 c4 10             	add    esp,0x10
c001427e:	89 c2                	mov    edx,eax
c0014280:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014284:	89 10                	mov    DWORD PTR [eax],edx
c0014286:	66 90                	xchg   ax,ax
c0014288:	b8 01 00 00 00       	mov    eax,0x1
c001428d:	8d 76 00             	lea    esi,[esi+0x0]
c0014290:	83 c4 2c             	add    esp,0x2c
c0014293:	c3                   	ret    

c0014294 <ipaddr_addr>:
c0014294:	83 ec 1c             	sub    esp,0x1c
c0014297:	83 ec 08             	sub    esp,0x8
c001429a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001429e:	50                   	push   eax
c001429f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142a3:	e8 bc fc ff ff       	call   c0013f64 <ipaddr_aton>
c00142a8:	83 c4 10             	add    esp,0x10
c00142ab:	85 c0                	test   eax,eax
c00142ad:	74 09                	je     c00142b8 <ipaddr_addr+0x24>
c00142af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00142b3:	eb 0b                	jmp    c00142c0 <ipaddr_addr+0x2c>
c00142b5:	8d 76 00             	lea    esi,[esi+0x0]
c00142b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142bd:	8d 76 00             	lea    esi,[esi+0x0]
c00142c0:	83 c4 1c             	add    esp,0x1c
c00142c3:	c3                   	ret    

c00142c4 <ipaddr_ntoa_r>:
c00142c4:	83 ec 20             	sub    esp,0x20
c00142c7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00142cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00142d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00142e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00142e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142e9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00142ee:	e9 f9 00 00 00       	jmp    c00143ec <ipaddr_ntoa_r+0x128>
c00142f3:	90                   	nop
c00142f4:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00142f9:	8d 76 00             	lea    esi,[esi+0x0]
c00142fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014300:	8a 00                	mov    al,BYTE PTR [eax]
c0014302:	0f b6 c8             	movzx  ecx,al
c0014305:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001430a:	89 c8                	mov    eax,ecx
c001430c:	f7 e2                	mul    edx
c001430e:	c1 ea 03             	shr    edx,0x3
c0014311:	89 d0                	mov    eax,edx
c0014313:	c1 e0 02             	shl    eax,0x2
c0014316:	01 d0                	add    eax,edx
c0014318:	d1 e0                	shl    eax,1
c001431a:	29 c1                	sub    ecx,eax
c001431c:	89 c8                	mov    eax,ecx
c001431e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014322:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014326:	8a 00                	mov    al,BYTE PTR [eax]
c0014328:	0f b6 c0             	movzx  eax,al
c001432b:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014330:	f7 e2                	mul    edx
c0014332:	89 d0                	mov    eax,edx
c0014334:	c1 e8 03             	shr    eax,0x3
c0014337:	88 c2                	mov    dl,al
c0014339:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001433d:	88 10                	mov    BYTE PTR [eax],dl
c001433f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014343:	83 c0 30             	add    eax,0x30
c0014346:	88 c1                	mov    cl,al
c0014348:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c001434c:	8d 50 01             	lea    edx,[eax+0x1]
c001434f:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c0014353:	0f b6 c0             	movzx  eax,al
c0014356:	88 ca                	mov    dl,cl
c0014358:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c001435c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014360:	8a 00                	mov    al,BYTE PTR [eax]
c0014362:	0f b6 c0             	movzx  eax,al
c0014365:	85 c0                	test   eax,eax
c0014367:	75 93                	jne    c00142fc <ipaddr_ntoa_r+0x38>
c0014369:	eb 35                	jmp    c00143a0 <ipaddr_ntoa_r+0xdc>
c001436b:	90                   	nop
c001436c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014370:	8d 50 01             	lea    edx,[eax+0x1]
c0014373:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014377:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001437b:	7f 0b                	jg     c0014388 <ipaddr_ntoa_r+0xc4>
c001437d:	b8 00 00 00 00       	mov    eax,0x0
c0014382:	e9 85 00 00 00       	jmp    c001440c <ipaddr_ntoa_r+0x148>
c0014387:	90                   	nop
c0014388:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001438d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014391:	8d 48 01             	lea    ecx,[eax+0x1]
c0014394:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0014398:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c001439c:	88 10                	mov    BYTE PTR [eax],dl
c001439e:	66 90                	xchg   ax,ax
c00143a0:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00143a4:	8d 50 ff             	lea    edx,[eax-0x1]
c00143a7:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00143ab:	0f b6 c0             	movzx  eax,al
c00143ae:	85 c0                	test   eax,eax
c00143b0:	75 ba                	jne    c001436c <ipaddr_ntoa_r+0xa8>
c00143b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b6:	8d 50 01             	lea    edx,[eax+0x1]
c00143b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143bd:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00143c1:	7f 09                	jg     c00143cc <ipaddr_ntoa_r+0x108>
c00143c3:	b8 00 00 00 00       	mov    eax,0x0
c00143c8:	eb 42                	jmp    c001440c <ipaddr_ntoa_r+0x148>
c00143ca:	66 90                	xchg   ax,ax
c00143cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143d0:	8d 50 01             	lea    edx,[eax+0x1]
c00143d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00143d7:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00143da:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00143df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00143e3:	83 c0 01             	add    eax,0x1
c00143e6:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00143ea:	66 90                	xchg   ax,ax
c00143ec:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00143f1:	83 f8 03             	cmp    eax,0x3
c00143f4:	0f 86 fa fe ff ff    	jbe    c00142f4 <ipaddr_ntoa_r+0x30>
c00143fa:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c00143ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014403:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014406:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001440a:	66 90                	xchg   ax,ax
c001440c:	83 c4 20             	add    esp,0x20
c001440f:	c3                   	ret    

c0014410 <ipaddr_ntoa>:
c0014410:	6a 10                	push   0x10
c0014412:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014417:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001441b:	e8 a4 fe ff ff       	call   c00142c4 <ipaddr_ntoa_r>
c0014420:	83 c4 0c             	add    esp,0xc
c0014423:	c3                   	ret    

c0014424 <ip_reass_dequeue_datagram>:
c0014424:	83 ec 0c             	sub    esp,0xc
c0014427:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c001442c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0014430:	75 0e                	jne    c0014440 <ip_reass_dequeue_datagram+0x1c>
c0014432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014436:	8b 00                	mov    eax,DWORD PTR [eax]
c0014438:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c001443d:	eb 29                	jmp    c0014468 <ip_reass_dequeue_datagram+0x44>
c001443f:	90                   	nop
c0014440:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014445:	75 15                	jne    c001445c <ip_reass_dequeue_datagram+0x38>
c0014447:	83 ec 08             	sub    esp,0x8
c001444a:	68 ec 0c 03 c0       	push   0xc0030cec
c001444f:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014454:	e8 77 b6 00 00       	call   c001fad0 <CPrintf>
c0014459:	83 c4 10             	add    esp,0x10
c001445c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014460:	8b 10                	mov    edx,DWORD PTR [eax]
c0014462:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014466:	89 10                	mov    DWORD PTR [eax],edx
c0014468:	83 ec 08             	sub    esp,0x8
c001446b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001446f:	6a 05                	push   0x5
c0014471:	e8 9e 35 ff ff       	call   c0007a14 <memp_free>
c0014476:	83 c4 10             	add    esp,0x10
c0014479:	90                   	nop
c001447a:	83 c4 0c             	add    esp,0xc
c001447d:	c3                   	ret    
c001447e:	66 90                	xchg   ax,ax

c0014480 <ip_reass_free_complete_datagram>:
c0014480:	83 ec 2c             	sub    esp,0x2c
c0014483:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c001448a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001448e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0014492:	75 18                	jne    c00144ac <ip_reass_free_complete_datagram+0x2c>
c0014494:	83 ec 08             	sub    esp,0x8
c0014497:	68 05 0d 03 c0       	push   0xc0030d05
c001449c:	68 e6 f9 02 c0       	push   0xc002f9e6
c00144a1:	e8 2a b6 00 00       	call   c001fad0 <CPrintf>
c00144a6:	83 c4 10             	add    esp,0x10
c00144a9:	8d 76 00             	lea    esi,[esi+0x0]
c00144ac:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00144b1:	74 21                	je     c00144d4 <ip_reass_free_complete_datagram+0x54>
c00144b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00144b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00144b9:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00144bd:	74 15                	je     c00144d4 <ip_reass_free_complete_datagram+0x54>
c00144bf:	83 ec 08             	sub    esp,0x8
c00144c2:	68 11 0d 03 c0       	push   0xc0030d11
c00144c7:	68 e6 f9 02 c0       	push   0xc002f9e6
c00144cc:	e8 ff b5 00 00       	call   c001fad0 <CPrintf>
c00144d1:	83 c4 10             	add    esp,0x10
c00144d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144e6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144ea:	0f b7 c0             	movzx  eax,ax
c00144ed:	85 c0                	test   eax,eax
c00144ef:	0f 85 a3 00 00 00    	jne    c0014598 <ip_reass_free_complete_datagram+0x118>
c00144f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014500:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014504:	8b 10                	mov    edx,DWORD PTR [eax]
c0014506:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001450a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001450d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014511:	8d 50 08             	lea    edx,[eax+0x8]
c0014514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001451b:	83 ec 04             	sub    esp,0x4
c001451e:	6a 14                	push   0x14
c0014520:	52                   	push   edx
c0014521:	50                   	push   eax
c0014522:	e8 53 be fe ff       	call   c000037a <memcpy>
c0014527:	83 c4 10             	add    esp,0x10
c001452a:	83 ec 08             	sub    esp,0x8
c001452d:	6a 01                	push   0x1
c001452f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014533:	e8 3c eb ff ff       	call   c0013074 <icmp_time_exceeded>
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	83 ec 0c             	sub    esp,0xc
c001453e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014542:	e8 69 45 ff ff       	call   c0008ab0 <pbuf_clen>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001454e:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014553:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014558:	01 d0                	add    eax,edx
c001455a:	3d ff ff 00 00       	cmp    eax,0xffff
c001455f:	7e 17                	jle    c0014578 <ip_reass_free_complete_datagram+0xf8>
c0014561:	83 ec 08             	sub    esp,0x8
c0014564:	68 23 0d 03 c0       	push   0xc0030d23
c0014569:	68 e6 f9 02 c0       	push   0xc002f9e6
c001456e:	e8 5d b5 00 00       	call   c001fad0 <CPrintf>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	66 90                	xchg   ax,ax
c0014578:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001457d:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0014582:	01 d0                	add    eax,edx
c0014584:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014589:	83 ec 0c             	sub    esp,0xc
c001458c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014590:	e8 3f 3d ff ff       	call   c00082d4 <pbuf_free>
c0014595:	83 c4 10             	add    esp,0x10
c0014598:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001459c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001459f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145a3:	eb 7b                	jmp    c0014620 <ip_reass_free_complete_datagram+0x1a0>
c00145a5:	8d 76 00             	lea    esi,[esi+0x0]
c00145a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00145af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00145c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145c5:	83 ec 0c             	sub    esp,0xc
c00145c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145cc:	e8 df 44 ff ff       	call   c0008ab0 <pbuf_clen>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00145d8:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00145dd:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00145e2:	01 d0                	add    eax,edx
c00145e4:	3d ff ff 00 00       	cmp    eax,0xffff
c00145e9:	7e 15                	jle    c0014600 <ip_reass_free_complete_datagram+0x180>
c00145eb:	83 ec 08             	sub    esp,0x8
c00145ee:	68 23 0d 03 c0       	push   0xc0030d23
c00145f3:	68 e6 f9 02 c0       	push   0xc002f9e6
c00145f8:	e8 d3 b4 00 00       	call   c001fad0 <CPrintf>
c00145fd:	83 c4 10             	add    esp,0x10
c0014600:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014605:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001460a:	01 d0                	add    eax,edx
c001460c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0014611:	83 ec 0c             	sub    esp,0xc
c0014614:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014618:	e8 b7 3c ff ff       	call   c00082d4 <pbuf_free>
c001461d:	83 c4 10             	add    esp,0x10
c0014620:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014625:	75 81                	jne    c00145a8 <ip_reass_free_complete_datagram+0x128>
c0014627:	83 ec 08             	sub    esp,0x8
c001462a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001462e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014632:	e8 ed fd ff ff       	call   c0014424 <ip_reass_dequeue_datagram>
c0014637:	83 c4 10             	add    esp,0x10
c001463a:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014640:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014645:	0f b7 c0             	movzx  eax,ax
c0014648:	39 c2                	cmp    edx,eax
c001464a:	76 18                	jbe    c0014664 <ip_reass_free_complete_datagram+0x1e4>
c001464c:	83 ec 08             	sub    esp,0x8
c001464f:	68 40 0d 03 c0       	push   0xc0030d40
c0014654:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014659:	e8 72 b4 00 00       	call   c001fad0 <CPrintf>
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	8d 76 00             	lea    esi,[esi+0x0]
c0014664:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c001466b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0014670:	89 d1                	mov    ecx,edx
c0014672:	29 c1                	sub    ecx,eax
c0014674:	89 c8                	mov    eax,ecx
c0014676:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c001467c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0014681:	83 c4 2c             	add    esp,0x2c
c0014684:	c3                   	ret    
c0014685:	8d 76 00             	lea    esi,[esi+0x0]

c0014688 <ip_reass_tmr>:
c0014688:	83 ec 1c             	sub    esp,0x1c
c001468b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014693:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014698:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001469c:	eb 62                	jmp    c0014700 <ip_reass_tmr+0x78>
c001469e:	66 90                	xchg   ax,ax
c00146a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146a4:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00146a7:	0f b6 c0             	movzx  eax,al
c00146aa:	85 c0                	test   eax,eax
c00146ac:	74 2a                	je     c00146d8 <ip_reass_tmr+0x50>
c00146ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146b2:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00146b5:	83 e8 01             	sub    eax,0x1
c00146b8:	88 c2                	mov    dl,al
c00146ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146be:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c00146c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00146c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00146cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146d3:	eb 2b                	jmp    c0014700 <ip_reass_tmr+0x78>
c00146d5:	8d 76 00             	lea    esi,[esi+0x0]
c00146d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00146e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00146e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00146ea:	83 ec 08             	sub    esp,0x8
c00146ed:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146f1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00146f5:	e8 86 fd ff ff       	call   c0014480 <ip_reass_free_complete_datagram>
c00146fa:	83 c4 10             	add    esp,0x10
c00146fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014700:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014705:	75 99                	jne    c00146a0 <ip_reass_tmr+0x18>
c0014707:	90                   	nop
c0014708:	83 c4 1c             	add    esp,0x1c
c001470b:	c3                   	ret    

c001470c <ip_reass_remove_oldest_datagram>:
c001470c:	83 ec 2c             	sub    esp,0x2c
c001470f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014717:	90                   	nop
c0014718:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014720:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014728:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014730:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014735:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014739:	e9 9a 00 00 00       	jmp    c00147d8 <ip_reass_remove_oldest_datagram+0xcc>
c001473e:	66 90                	xchg   ax,ax
c0014740:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014744:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014747:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001474b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001474e:	39 c2                	cmp    edx,eax
c0014750:	75 2e                	jne    c0014780 <ip_reass_remove_oldest_datagram+0x74>
c0014752:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014756:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014759:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001475d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014760:	39 c2                	cmp    edx,eax
c0014762:	75 1c                	jne    c0014780 <ip_reass_remove_oldest_datagram+0x74>
c0014764:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014768:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001476b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001476f:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014773:	0f b7 d2             	movzx  edx,dx
c0014776:	0f b7 c0             	movzx  eax,ax
c0014779:	39 c2                	cmp    edx,eax
c001477b:	74 3b                	je     c00147b8 <ip_reass_remove_oldest_datagram+0xac>
c001477d:	8d 76 00             	lea    esi,[esi+0x0]
c0014780:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0014785:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001478a:	75 0c                	jne    c0014798 <ip_reass_remove_oldest_datagram+0x8c>
c001478c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014790:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014794:	eb 22                	jmp    c00147b8 <ip_reass_remove_oldest_datagram+0xac>
c0014796:	66 90                	xchg   ax,ax
c0014798:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001479c:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c001479f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147a3:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00147a6:	0f b6 d2             	movzx  edx,dl
c00147a9:	0f b6 c0             	movzx  eax,al
c00147ac:	39 c2                	cmp    edx,eax
c00147ae:	77 08                	ja     c00147b8 <ip_reass_remove_oldest_datagram+0xac>
c00147b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00147be:	85 c0                	test   eax,eax
c00147c0:	74 0a                	je     c00147cc <ip_reass_remove_oldest_datagram+0xc0>
c00147c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147ca:	66 90                	xchg   ax,ax
c00147cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00147d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00147d2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147d6:	66 90                	xchg   ax,ax
c00147d8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00147dd:	0f 85 5d ff ff ff    	jne    c0014740 <ip_reass_remove_oldest_datagram+0x34>
c00147e3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00147e8:	74 22                	je     c001480c <ip_reass_remove_oldest_datagram+0x100>
c00147ea:	83 ec 08             	sub    esp,0x8
c00147ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00147f5:	e8 86 fc ff ff       	call   c0014480 <ip_reass_free_complete_datagram>
c00147fa:	83 c4 10             	add    esp,0x10
c00147fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014801:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014805:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014809:	8d 76 00             	lea    esi,[esi+0x0]
c001480c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014810:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014814:	7d 0e                	jge    c0014824 <ip_reass_remove_oldest_datagram+0x118>
c0014816:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c001481b:	0f 8f f7 fe ff ff    	jg     c0014718 <ip_reass_remove_oldest_datagram+0xc>
c0014821:	8d 76 00             	lea    esi,[esi+0x0]
c0014824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014828:	83 c4 2c             	add    esp,0x2c
c001482b:	c3                   	ret    

c001482c <ip_reass_enqueue_new_datagram>:
c001482c:	83 ec 1c             	sub    esp,0x1c
c001482f:	83 ec 0c             	sub    esp,0xc
c0014832:	6a 05                	push   0x5
c0014834:	e8 af 30 ff ff       	call   c00078e8 <memp_malloc>
c0014839:	83 c4 10             	add    esp,0x10
c001483c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014840:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014845:	75 4d                	jne    c0014894 <ip_reass_enqueue_new_datagram+0x68>
c0014847:	83 ec 08             	sub    esp,0x8
c001484a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001484e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014852:	e8 b5 fe ff ff       	call   c001470c <ip_reass_remove_oldest_datagram>
c0014857:	83 c4 10             	add    esp,0x10
c001485a:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c001485e:	7f 14                	jg     c0014874 <ip_reass_enqueue_new_datagram+0x48>
c0014860:	83 ec 0c             	sub    esp,0xc
c0014863:	6a 05                	push   0x5
c0014865:	e8 7e 30 ff ff       	call   c00078e8 <memp_malloc>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014871:	8d 76 00             	lea    esi,[esi+0x0]
c0014874:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014879:	75 19                	jne    c0014894 <ip_reass_enqueue_new_datagram+0x68>
c001487b:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014881:	83 c0 01             	add    eax,0x1
c0014884:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c001488a:	b8 00 00 00 00       	mov    eax,0x0
c001488f:	eb 53                	jmp    c00148e4 <ip_reass_enqueue_new_datagram+0xb8>
c0014891:	8d 76 00             	lea    esi,[esi+0x0]
c0014894:	83 ec 04             	sub    esp,0x4
c0014897:	6a 20                	push   0x20
c0014899:	6a 00                	push   0x0
c001489b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001489f:	e8 4c bc fe ff       	call   c00004f0 <memset>
c00148a4:	83 c4 10             	add    esp,0x10
c00148a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148ab:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c00148af:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c00148b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148b9:	89 10                	mov    DWORD PTR [eax],edx
c00148bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148bf:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00148c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148c8:	83 c0 08             	add    eax,0x8
c00148cb:	83 ec 04             	sub    esp,0x4
c00148ce:	6a 14                	push   0x14
c00148d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00148d4:	50                   	push   eax
c00148d5:	e8 a0 ba fe ff       	call   c000037a <memcpy>
c00148da:	83 c4 10             	add    esp,0x10
c00148dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00148e1:	8d 76 00             	lea    esi,[esi+0x0]
c00148e4:	83 c4 1c             	add    esp,0x1c
c00148e7:	c3                   	ret    

c00148e8 <ip_reass_chain_frag_into_datagram_and_validate>:
c00148e8:	53                   	push   ebx
c00148e9:	83 ec 28             	sub    esp,0x28
c00148ec:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00148f4:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c00148fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014900:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014903:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014907:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001490b:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c001490f:	0f b7 c0             	movzx  eax,ax
c0014912:	83 ec 0c             	sub    esp,0xc
c0014915:	50                   	push   eax
c0014916:	e8 01 c3 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c001491b:	83 c4 10             	add    esp,0x10
c001491e:	89 c3                	mov    ebx,eax
c0014920:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014924:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014927:	0f b7 c0             	movzx  eax,ax
c001492a:	83 ec 0c             	sub    esp,0xc
c001492d:	50                   	push   eax
c001492e:	e8 e9 c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014933:	83 c4 10             	add    esp,0x10
c0014936:	0f b7 c0             	movzx  eax,ax
c0014939:	c1 e8 08             	shr    eax,0x8
c001493c:	83 e0 0f             	and    eax,0xf
c001493f:	c1 e0 02             	shl    eax,0x2
c0014942:	89 d9                	mov    ecx,ebx
c0014944:	29 c1                	sub    ecx,eax
c0014946:	89 c8                	mov    eax,ecx
c0014948:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c001494d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014951:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014955:	0f b7 c0             	movzx  eax,ax
c0014958:	83 ec 0c             	sub    esp,0xc
c001495b:	50                   	push   eax
c001495c:	e8 bb c2 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014961:	83 c4 10             	add    esp,0x10
c0014964:	25 ff 1f 00 00       	and    eax,0x1fff
c0014969:	c1 e0 03             	shl    eax,0x3
c001496c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0014971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014975:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014978:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001497c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014980:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014986:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001498a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001498e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014992:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014996:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001499b:	01 d0                	add    eax,edx
c001499d:	89 c2                	mov    edx,eax
c001499f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149a3:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00149a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00149ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00149ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149b2:	e9 11 01 00 00       	jmp    c0014ac8 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c00149b7:	90                   	nop
c00149b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00149bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149c7:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149cf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149d3:	0f b7 d2             	movzx  edx,dx
c00149d6:	0f b7 c0             	movzx  eax,ax
c00149d9:	39 c2                	cmp    edx,eax
c00149db:	73 6f                	jae    c0014a4c <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00149dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149e5:	89 10                	mov    DWORD PTR [eax],edx
c00149e7:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149ec:	74 4e                	je     c0014a3c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c00149ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149f2:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00149f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149fa:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00149fe:	0f b7 d2             	movzx  edx,dx
c0014a01:	0f b7 c0             	movzx  eax,ax
c0014a04:	39 c2                	cmp    edx,eax
c0014a06:	0f 82 bc 02 00 00    	jb     c0014cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a10:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a18:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a1c:	0f b7 d2             	movzx  edx,dx
c0014a1f:	0f b7 c0             	movzx  eax,ax
c0014a22:	39 c2                	cmp    edx,eax
c0014a24:	0f 87 9e 02 00 00    	ja     c0014cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014a2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a2e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a32:	89 10                	mov    DWORD PTR [eax],edx
c0014a34:	e9 9b 00 00 00       	jmp    c0014ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a39:	8d 76 00             	lea    esi,[esi+0x0]
c0014a3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a40:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a44:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a47:	e9 88 00 00 00       	jmp    c0014ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014a4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a50:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a58:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a5c:	0f b7 d2             	movzx  edx,dx
c0014a5f:	0f b7 c0             	movzx  eax,ax
c0014a62:	39 c2                	cmp    edx,eax
c0014a64:	0f 84 62 02 00 00    	je     c0014ccc <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014a6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a6e:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014a72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a76:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014a7a:	0f b7 d2             	movzx  edx,dx
c0014a7d:	0f b7 c0             	movzx  eax,ax
c0014a80:	39 c2                	cmp    edx,eax
c0014a82:	0f 82 48 02 00 00    	jb     c0014cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c0014a88:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a8d:	74 25                	je     c0014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014a8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a93:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014a9b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a9f:	0f b7 d2             	movzx  edx,dx
c0014aa2:	0f b7 c0             	movzx  eax,ax
c0014aa5:	39 c2                	cmp    edx,eax
c0014aa7:	74 0b                	je     c0014ab4 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c0014aa9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ab1:	8d 76 00             	lea    esi,[esi+0x0]
c0014ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ab8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014aba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ac2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ac6:	66 90                	xchg   ax,ax
c0014ac8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014acd:	0f 85 e5 fe ff ff    	jne    c00149b8 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c0014ad3:	90                   	nop
c0014ad4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014ad9:	0f 85 95 00 00 00    	jne    c0014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014adf:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ae4:	74 62                	je     c0014b48 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014ae6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014aea:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014aee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014af2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014af6:	0f b7 d2             	movzx  edx,dx
c0014af9:	0f b7 c0             	movzx  eax,ax
c0014afc:	39 c2                	cmp    edx,eax
c0014afe:	76 18                	jbe    c0014b18 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014b00:	83 ec 08             	sub    esp,0x8
c0014b03:	68 5b 0d 03 c0       	push   0xc0030d5b
c0014b08:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014b0d:	e8 be af 00 00       	call   c001fad0 <CPrintf>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	8d 76 00             	lea    esi,[esi+0x0]
c0014b18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b20:	89 10                	mov    DWORD PTR [eax],edx
c0014b22:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b26:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014b2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b2e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014b32:	0f b7 d2             	movzx  edx,dx
c0014b35:	0f b7 c0             	movzx  eax,ax
c0014b38:	39 c2                	cmp    edx,eax
c0014b3a:	74 38                	je     c0014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b3c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b44:	eb 2e                	jmp    c0014b74 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014b46:	66 90                	xchg   ax,ax
c0014b48:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b4f:	85 c0                	test   eax,eax
c0014b51:	74 15                	je     c0014b68 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014b53:	83 ec 08             	sub    esp,0x8
c0014b56:	68 9c 0d 03 c0       	push   0xc0030d9c
c0014b5b:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014b60:	e8 6b af 00 00       	call   c001fad0 <CPrintf>
c0014b65:	83 c4 10             	add    esp,0x10
c0014b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014b70:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014b73:	90                   	nop
c0014b74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b78:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014b7b:	0f b6 c0             	movzx  eax,al
c0014b7e:	83 e0 01             	and    eax,0x1
c0014b81:	0f 84 39 01 00 00    	je     c0014cc0 <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014b87:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b8c:	0f 84 26 01 00 00    	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b99:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b9c:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014ba0:	0f b7 c0             	movzx  eax,ax
c0014ba3:	85 c0                	test   eax,eax
c0014ba5:	74 0d                	je     c0014bb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014ba7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014baf:	e9 04 01 00 00       	jmp    c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bc6:	eb 44                	jmp    c0014c0c <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014bc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014bcf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bd7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bdf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014be3:	0f b7 d2             	movzx  edx,dx
c0014be6:	0f b7 c0             	movzx  eax,ax
c0014be9:	39 c2                	cmp    edx,eax
c0014beb:	74 0b                	je     c0014bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014bed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014bf5:	eb 1d                	jmp    c0014c14 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014bf7:	90                   	nop
c0014bf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014bfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c0a:	66 90                	xchg   ax,ax
c0014c0c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014c11:	75 b5                	jne    c0014bc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014c13:	90                   	nop
c0014c14:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014c19:	0f 84 99 00 00 00    	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c26:	85 c0                	test   eax,eax
c0014c28:	75 16                	jne    c0014c40 <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014c2a:	83 ec 08             	sub    esp,0x8
c0014c2d:	68 79 0d 03 c0       	push   0xc0030d79
c0014c32:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014c37:	e8 94 ae 00 00       	call   c001fad0 <CPrintf>
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	90                   	nop
c0014c40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c4a:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014c4e:	75 18                	jne    c0014c68 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014c50:	83 ec 08             	sub    esp,0x8
c0014c53:	68 79 0d 03 c0       	push   0xc0030d79
c0014c58:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014c5d:	e8 6e ae 00 00       	call   c001fad0 <CPrintf>
c0014c62:	83 c4 10             	add    esp,0x10
c0014c65:	8d 76 00             	lea    esi,[esi+0x0]
c0014c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c6e:	85 c0                	test   eax,eax
c0014c70:	74 16                	je     c0014c88 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014c72:	83 ec 08             	sub    esp,0x8
c0014c75:	68 d4 0d 03 c0       	push   0xc0030dd4
c0014c7a:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014c7f:	e8 4c ae 00 00       	call   c001fad0 <CPrintf>
c0014c84:	83 c4 10             	add    esp,0x10
c0014c87:	90                   	nop
c0014c88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c8c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014c90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c94:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014c97:	0f b7 d2             	movzx  edx,dx
c0014c9a:	0f b7 c0             	movzx  eax,ax
c0014c9d:	39 c2                	cmp    edx,eax
c0014c9f:	74 17                	je     c0014cb8 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ca1:	83 ec 08             	sub    esp,0x8
c0014ca4:	68 f8 0d 03 c0       	push   0xc0030df8
c0014ca9:	68 e6 f9 02 c0       	push   0xc002f9e6
c0014cae:	e8 1d ae 00 00       	call   c001fad0 <CPrintf>
c0014cb3:	83 c4 10             	add    esp,0x10
c0014cb6:	66 90                	xchg   ax,ax
c0014cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cbc:	eb 52                	jmp    c0014d10 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014cbe:	66 90                	xchg   ax,ax
c0014cc0:	b8 00 00 00 00       	mov    eax,0x0
c0014cc5:	eb 49                	jmp    c0014d10 <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014cc7:	90                   	nop
c0014cc8:	90                   	nop
c0014cc9:	eb 09                	jmp    c0014cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ccb:	90                   	nop
c0014ccc:	90                   	nop
c0014ccd:	eb 05                	jmp    c0014cd4 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014ccf:	90                   	nop
c0014cd0:	90                   	nop
c0014cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0014cd4:	83 ec 0c             	sub    esp,0xc
c0014cd7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cdb:	e8 d0 3d ff ff       	call   c0008ab0 <pbuf_clen>
c0014ce0:	83 c4 10             	add    esp,0x10
c0014ce3:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014cea:	0f b6 c0             	movzx  eax,al
c0014ced:	89 d3                	mov    ebx,edx
c0014cef:	29 c3                	sub    ebx,eax
c0014cf1:	89 d8                	mov    eax,ebx
c0014cf3:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014cf9:	83 ec 0c             	sub    esp,0xc
c0014cfc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d00:	e8 cf 35 ff ff       	call   c00082d4 <pbuf_free>
c0014d05:	83 c4 10             	add    esp,0x10
c0014d08:	b8 00 00 00 00       	mov    eax,0x0
c0014d0d:	8d 76 00             	lea    esi,[esi+0x0]
c0014d10:	83 c4 28             	add    esp,0x28
c0014d13:	5b                   	pop    ebx
c0014d14:	c3                   	ret    
c0014d15:	8d 76 00             	lea    esi,[esi+0x0]

c0014d18 <ip_reass>:
c0014d18:	53                   	push   ebx
c0014d19:	83 ec 28             	sub    esp,0x28
c0014d1c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d24:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014d2a:	83 c0 01             	add    eax,0x1
c0014d2d:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014d33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014d3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d42:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014d45:	0f b7 c0             	movzx  eax,ax
c0014d48:	83 ec 0c             	sub    esp,0xc
c0014d4b:	50                   	push   eax
c0014d4c:	e8 cb be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d51:	83 c4 10             	add    esp,0x10
c0014d54:	0f b7 c0             	movzx  eax,ax
c0014d57:	c1 e8 08             	shr    eax,0x8
c0014d5a:	0f b7 c0             	movzx  eax,ax
c0014d5d:	83 e0 0f             	and    eax,0xf
c0014d60:	c1 e0 02             	shl    eax,0x2
c0014d63:	83 f8 14             	cmp    eax,0x14
c0014d66:	74 14                	je     c0014d7c <ip_reass+0x64>
c0014d68:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014d6e:	83 c0 01             	add    eax,0x1
c0014d71:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014d77:	e9 70 03 00 00       	jmp    c00150ec <ip_reass+0x3d4>
c0014d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d80:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014d84:	0f b7 c0             	movzx  eax,ax
c0014d87:	83 ec 0c             	sub    esp,0xc
c0014d8a:	50                   	push   eax
c0014d8b:	e8 8c be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	25 ff 1f 00 00       	and    eax,0x1fff
c0014d98:	c1 e0 03             	shl    eax,0x3
c0014d9b:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da4:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014da8:	0f b7 c0             	movzx  eax,ax
c0014dab:	83 ec 0c             	sub    esp,0xc
c0014dae:	50                   	push   eax
c0014daf:	e8 68 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	89 c3                	mov    ebx,eax
c0014db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014dc0:	0f b7 c0             	movzx  eax,ax
c0014dc3:	83 ec 0c             	sub    esp,0xc
c0014dc6:	50                   	push   eax
c0014dc7:	e8 50 be fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014dcc:	83 c4 10             	add    esp,0x10
c0014dcf:	0f b7 c0             	movzx  eax,ax
c0014dd2:	c1 e8 08             	shr    eax,0x8
c0014dd5:	83 e0 0f             	and    eax,0xf
c0014dd8:	c1 e0 02             	shl    eax,0x2
c0014ddb:	89 d9                	mov    ecx,ebx
c0014ddd:	29 c1                	sub    ecx,eax
c0014ddf:	89 c8                	mov    eax,ecx
c0014de1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014de6:	83 ec 0c             	sub    esp,0xc
c0014de9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014ded:	e8 be 3c ff ff       	call   c0008ab0 <pbuf_clen>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014df9:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014dff:	0f b7 d0             	movzx  edx,ax
c0014e02:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e07:	01 d0                	add    eax,edx
c0014e09:	83 f8 0a             	cmp    eax,0xa
c0014e0c:	7e 42                	jle    c0014e50 <ip_reass+0x138>
c0014e0e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e13:	83 ec 08             	sub    esp,0x8
c0014e16:	50                   	push   eax
c0014e17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e1b:	e8 ec f8 ff ff       	call   c001470c <ip_reass_remove_oldest_datagram>
c0014e20:	83 c4 10             	add    esp,0x10
c0014e23:	85 c0                	test   eax,eax
c0014e25:	74 15                	je     c0014e3c <ip_reass+0x124>
c0014e27:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e2d:	0f b7 d0             	movzx  edx,ax
c0014e30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014e35:	01 d0                	add    eax,edx
c0014e37:	83 f8 0a             	cmp    eax,0xa
c0014e3a:	7e 14                	jle    c0014e50 <ip_reass+0x138>
c0014e3c:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014e42:	83 c0 01             	add    eax,0x1
c0014e45:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014e4b:	e9 9c 02 00 00       	jmp    c00150ec <ip_reass+0x3d4>
c0014e50:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014e55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e59:	eb 65                	jmp    c0014ec0 <ip_reass+0x1a8>
c0014e5b:	90                   	nop
c0014e5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e60:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e67:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014e6a:	39 c2                	cmp    edx,eax
c0014e6c:	75 3e                	jne    c0014eac <ip_reass+0x194>
c0014e6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e72:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014e75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e79:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014e7c:	39 c2                	cmp    edx,eax
c0014e7e:	75 2c                	jne    c0014eac <ip_reass+0x194>
c0014e80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e84:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e8b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014e8f:	0f b7 d2             	movzx  edx,dx
c0014e92:	0f b7 c0             	movzx  eax,ax
c0014e95:	39 c2                	cmp    edx,eax
c0014e97:	75 13                	jne    c0014eac <ip_reass+0x194>
c0014e99:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014e9f:	83 c0 01             	add    eax,0x1
c0014ea2:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014ea8:	eb 1e                	jmp    c0014ec8 <ip_reass+0x1b0>
c0014eaa:	66 90                	xchg   ax,ax
c0014eac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014eb4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014eb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ebe:	66 90                	xchg   ax,ax
c0014ec0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ec5:	75 95                	jne    c0014e5c <ip_reass+0x144>
c0014ec7:	90                   	nop
c0014ec8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014ecd:	75 25                	jne    c0014ef4 <ip_reass+0x1dc>
c0014ecf:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014ed4:	83 ec 08             	sub    esp,0x8
c0014ed7:	50                   	push   eax
c0014ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014edc:	e8 4b f9 ff ff       	call   c001482c <ip_reass_enqueue_new_datagram>
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ee8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014eed:	75 61                	jne    c0014f50 <ip_reass+0x238>
c0014eef:	e9 f8 01 00 00       	jmp    c00150ec <ip_reass+0x3d4>
c0014ef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef8:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014efc:	0f b7 c0             	movzx  eax,ax
c0014eff:	83 ec 0c             	sub    esp,0xc
c0014f02:	50                   	push   eax
c0014f03:	e8 14 bd fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f08:	83 c4 10             	add    esp,0x10
c0014f0b:	0f b7 c0             	movzx  eax,ax
c0014f0e:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f13:	75 3b                	jne    c0014f50 <ip_reass+0x238>
c0014f15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f19:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014f1d:	0f b7 c0             	movzx  eax,ax
c0014f20:	83 ec 0c             	sub    esp,0xc
c0014f23:	50                   	push   eax
c0014f24:	e8 f3 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	0f b7 c0             	movzx  eax,ax
c0014f2f:	25 ff 1f 00 00       	and    eax,0x1fff
c0014f34:	74 1a                	je     c0014f50 <ip_reass+0x238>
c0014f36:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f3a:	83 c0 08             	add    eax,0x8
c0014f3d:	83 ec 04             	sub    esp,0x4
c0014f40:	6a 14                	push   0x14
c0014f42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f46:	50                   	push   eax
c0014f47:	e8 2e b4 fe ff       	call   c000037a <memcpy>
c0014f4c:	83 c4 10             	add    esp,0x10
c0014f4f:	90                   	nop
c0014f50:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014f55:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014f5b:	01 d0                	add    eax,edx
c0014f5d:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f67:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014f6b:	0f b7 c0             	movzx  eax,ax
c0014f6e:	83 e0 20             	and    eax,0x20
c0014f71:	75 29                	jne    c0014f9c <ip_reass+0x284>
c0014f73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f77:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014f7a:	83 c8 01             	or     eax,0x1
c0014f7d:	88 c2                	mov    dl,al
c0014f7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f83:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014f86:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014f8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014f8f:	01 d0                	add    eax,edx
c0014f91:	89 c2                	mov    edx,eax
c0014f93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f97:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c0014f9b:	90                   	nop
c0014f9c:	83 ec 08             	sub    esp,0x8
c0014f9f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014fa3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014fa7:	e8 3c f9 ff ff       	call   c00148e8 <ip_reass_chain_frag_into_datagram_and_validate>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	85 c0                	test   eax,eax
c0014fb1:	0f 84 2d 01 00 00    	je     c00150e4 <ip_reass+0x3cc>
c0014fb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fbb:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014fbe:	83 c0 14             	add    eax,0x14
c0014fc1:	89 c2                	mov    edx,eax
c0014fc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fc7:	66 89 50 1c          	mov    WORD PTR [eax+0x1c],dx
c0014fcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fdb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014fe5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fe9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014fed:	83 c0 08             	add    eax,0x8
c0014ff0:	83 ec 04             	sub    esp,0x4
c0014ff3:	6a 14                	push   0x14
c0014ff5:	50                   	push   eax
c0014ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ffa:	e8 7b b3 fe ff       	call   c000037a <memcpy>
c0014fff:	83 c4 10             	add    esp,0x10
c0015002:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015006:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015009:	0f b7 c0             	movzx  eax,ax
c001500c:	83 ec 0c             	sub    esp,0xc
c001500f:	50                   	push   eax
c0015010:	e8 07 bc fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015015:	83 c4 10             	add    esp,0x10
c0015018:	89 c2                	mov    edx,eax
c001501a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001501e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015026:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001502c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015030:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015036:	83 ec 08             	sub    esp,0x8
c0015039:	6a 14                	push   0x14
c001503b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001503f:	e8 cc e4 ff ff       	call   c0013510 <inet_chksum>
c0015044:	83 c4 10             	add    esp,0x10
c0015047:	89 c2                	mov    edx,eax
c0015049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001504d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c0015051:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015055:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015058:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001505c:	eb 3e                	jmp    c001509c <ip_reass+0x384>
c001505e:	66 90                	xchg   ax,ax
c0015060:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015064:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015067:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001506b:	83 ec 08             	sub    esp,0x8
c001506e:	6a ec                	push   0xffffffec
c0015070:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015074:	e8 bb 30 ff ff       	call   c0008134 <pbuf_header>
c0015079:	83 c4 10             	add    esp,0x10
c001507c:	83 ec 08             	sub    esp,0x8
c001507f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015083:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015087:	e8 8c 3a ff ff       	call   c0008b18 <pbuf_cat>
c001508c:	83 c4 10             	add    esp,0x10
c001508f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015093:	8b 00                	mov    eax,DWORD PTR [eax]
c0015095:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015099:	8d 76 00             	lea    esi,[esi+0x0]
c001509c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150a1:	75 bd                	jne    c0015060 <ip_reass+0x348>
c00150a3:	83 ec 08             	sub    esp,0x8
c00150a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00150ae:	e8 71 f3 ff ff       	call   c0014424 <ip_reass_dequeue_datagram>
c00150b3:	83 c4 10             	add    esp,0x10
c00150b6:	83 ec 0c             	sub    esp,0xc
c00150b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00150bd:	e8 ee 39 ff ff       	call   c0008ab0 <pbuf_clen>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c00150cc:	0f b6 c0             	movzx  eax,al
c00150cf:	89 d3                	mov    ebx,edx
c00150d1:	29 c3                	sub    ebx,eax
c00150d3:	89 d8                	mov    eax,ebx
c00150d5:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c00150db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150df:	eb 2f                	jmp    c0015110 <ip_reass+0x3f8>
c00150e1:	8d 76 00             	lea    esi,[esi+0x0]
c00150e4:	b8 00 00 00 00       	mov    eax,0x0
c00150e9:	eb 25                	jmp    c0015110 <ip_reass+0x3f8>
c00150eb:	90                   	nop
c00150ec:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c00150f2:	83 c0 01             	add    eax,0x1
c00150f5:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c00150fb:	83 ec 0c             	sub    esp,0xc
c00150fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015102:	e8 cd 31 ff ff       	call   c00082d4 <pbuf_free>
c0015107:	83 c4 10             	add    esp,0x10
c001510a:	b8 00 00 00 00       	mov    eax,0x0
c001510f:	90                   	nop
c0015110:	83 c4 28             	add    esp,0x28
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    
c0015115:	8d 76 00             	lea    esi,[esi+0x0]

c0015118 <ip_frag_alloc_pbuf_custom_ref>:
c0015118:	83 ec 0c             	sub    esp,0xc
c001511b:	83 ec 0c             	sub    esp,0xc
c001511e:	6a 06                	push   0x6
c0015120:	e8 c3 27 ff ff       	call   c00078e8 <memp_malloc>
c0015125:	83 c4 10             	add    esp,0x10
c0015128:	83 c4 0c             	add    esp,0xc
c001512b:	c3                   	ret    

c001512c <ip_frag_free_pbuf_custom_ref>:
c001512c:	83 ec 0c             	sub    esp,0xc
c001512f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015134:	75 16                	jne    c001514c <ip_frag_free_pbuf_custom_ref+0x20>
c0015136:	83 ec 08             	sub    esp,0x8
c0015139:	68 16 fe 02 c0       	push   0xc002fe16
c001513e:	68 e6 f9 02 c0       	push   0xc002f9e6
c0015143:	e8 88 a9 00 00       	call   c001fad0 <CPrintf>
c0015148:	83 c4 10             	add    esp,0x10
c001514b:	90                   	nop
c001514c:	83 ec 08             	sub    esp,0x8
c001514f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015153:	6a 06                	push   0x6
c0015155:	e8 ba 28 ff ff       	call   c0007a14 <memp_free>
c001515a:	83 c4 10             	add    esp,0x10
c001515d:	90                   	nop
c001515e:	83 c4 0c             	add    esp,0xc
c0015161:	c3                   	ret    
c0015162:	66 90                	xchg   ax,ax

c0015164 <ipfrag_free_pbuf_custom>:
c0015164:	83 ec 1c             	sub    esp,0x1c
c0015167:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001516b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001516f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015174:	75 16                	jne    c001518c <ipfrag_free_pbuf_custom+0x28>
c0015176:	83 ec 08             	sub    esp,0x8
c0015179:	68 86 0d 03 c0       	push   0xc0030d86
c001517e:	68 e6 f9 02 c0       	push   0xc002f9e6
c0015183:	e8 48 a9 00 00       	call   c001fad0 <CPrintf>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	90                   	nop
c001518c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015190:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0015194:	74 16                	je     c00151ac <ipfrag_free_pbuf_custom+0x48>
c0015196:	83 ec 08             	sub    esp,0x8
c0015199:	68 92 0d 03 c0       	push   0xc0030d92
c001519e:	68 e6 f9 02 c0       	push   0xc002f9e6
c00151a3:	e8 28 a9 00 00       	call   c001fad0 <CPrintf>
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	90                   	nop
c00151ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151b3:	85 c0                	test   eax,eax
c00151b5:	74 15                	je     c00151cc <ipfrag_free_pbuf_custom+0x68>
c00151b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151bb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151be:	83 ec 0c             	sub    esp,0xc
c00151c1:	50                   	push   eax
c00151c2:	e8 0d 31 ff ff       	call   c00082d4 <pbuf_free>
c00151c7:	83 c4 10             	add    esp,0x10
c00151ca:	66 90                	xchg   ax,ax
c00151cc:	83 ec 0c             	sub    esp,0xc
c00151cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151d3:	e8 54 ff ff ff       	call   c001512c <ip_frag_free_pbuf_custom_ref>
c00151d8:	83 c4 10             	add    esp,0x10
c00151db:	90                   	nop
c00151dc:	83 c4 1c             	add    esp,0x1c
c00151df:	c3                   	ret    

c00151e0 <ip_frag>:
c00151e0:	53                   	push   ebx
c00151e1:	83 ec 38             	sub    esp,0x38
c00151e4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00151e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00151eb:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c00151f0:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c00151f7:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c00151fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015202:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015205:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001520d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015211:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015215:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0015219:	0f b7 c0             	movzx  eax,ax
c001521c:	83 ec 0c             	sub    esp,0xc
c001521f:	50                   	push   eax
c0015220:	e8 f7 b9 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c0015225:	83 c4 10             	add    esp,0x10
c0015228:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c001522d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015231:	25 ff 1f 00 00       	and    eax,0x1fff
c0015236:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001523b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001523f:	25 00 20 00 00       	and    eax,0x2000
c0015244:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0015249:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001524d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015250:	83 e8 14             	sub    eax,0x14
c0015253:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015258:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c001525d:	83 e8 14             	sub    eax,0x14
c0015260:	8d 50 07             	lea    edx,[eax+0x7]
c0015263:	0f 48 c2             	cmovs  eax,edx
c0015266:	c1 f8 03             	sar    eax,0x3
c0015269:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001526e:	e9 05 03 00 00       	jmp    c0015578 <ip_frag+0x398>
c0015273:	90                   	nop
c0015274:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015279:	8d 50 ed             	lea    edx,[eax-0x13]
c001527c:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015281:	39 c2                	cmp    edx,eax
c0015283:	0f 9f c0             	setg   al
c0015286:	0f b6 c0             	movzx  eax,al
c0015289:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001528e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015292:	25 ff 1f 00 00       	and    eax,0x1fff
c0015297:	89 c2                	mov    edx,eax
c0015299:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001529e:	09 d0                	or     eax,edx
c00152a0:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00152a5:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00152aa:	85 c0                	test   eax,eax
c00152ac:	75 0e                	jne    c00152bc <ip_frag+0xdc>
c00152ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152b2:	80 cc 20             	or     ah,0x20
c00152b5:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00152ba:	66 90                	xchg   ax,ax
c00152bc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00152c1:	85 c0                	test   eax,eax
c00152c3:	75 0b                	jne    c00152d0 <ip_frag+0xf0>
c00152c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00152c9:	c1 e0 03             	shl    eax,0x3
c00152cc:	eb 0a                	jmp    c00152d8 <ip_frag+0xf8>
c00152ce:	66 90                	xchg   ax,ax
c00152d0:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00152d5:	8d 76 00             	lea    esi,[esi+0x0]
c00152d8:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00152dd:	83 ec 04             	sub    esp,0x4
c00152e0:	6a 00                	push   0x0
c00152e2:	6a 14                	push   0x14
c00152e4:	6a 02                	push   0x2
c00152e6:	e8 c5 31 ff ff       	call   c00084b0 <pbuf_alloc>
c00152eb:	83 c4 10             	add    esp,0x10
c00152ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152f2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152f7:	75 07                	jne    c0015300 <ip_frag+0x120>
c00152f9:	b0 ff                	mov    al,0xff
c00152fb:	e9 88 02 00 00       	jmp    c0015588 <ip_frag+0x3a8>
c0015300:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015304:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015308:	0f b7 c0             	movzx  eax,ax
c001530b:	83 f8 13             	cmp    eax,0x13
c001530e:	77 18                	ja     c0015328 <ip_frag+0x148>
c0015310:	83 ec 08             	sub    esp,0x8
c0015313:	68 28 0e 03 c0       	push   0xc0030e28
c0015318:	68 e6 f9 02 c0       	push   0xc002f9e6
c001531d:	e8 ae a7 00 00       	call   c001fad0 <CPrintf>
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	8d 76 00             	lea    esi,[esi+0x0]
c0015328:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001532c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001532f:	83 ec 04             	sub    esp,0x4
c0015332:	6a 14                	push   0x14
c0015334:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015338:	50                   	push   eax
c0015339:	e8 3c b0 fe ff       	call   c000037a <memcpy>
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015345:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015348:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001534c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015350:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015353:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015358:	01 c2                	add    edx,eax
c001535a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001535e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015361:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015365:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015369:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001536e:	89 d1                	mov    ecx,edx
c0015370:	29 c1                	sub    ecx,eax
c0015372:	89 c8                	mov    eax,ecx
c0015374:	89 c2                	mov    edx,eax
c0015376:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001537a:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001537e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015382:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015387:	e9 18 01 00 00       	jmp    c00154a4 <ip_frag+0x2c4>
c001538c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015390:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015394:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015398:	0f b7 d8             	movzx  ebx,ax
c001539b:	0f b7 ca             	movzx  ecx,dx
c001539e:	39 cb                	cmp    ebx,ecx
c00153a0:	76 02                	jbe    c00153a4 <ip_frag+0x1c4>
c00153a2:	89 d0                	mov    eax,edx
c00153a4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00153a9:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00153ae:	85 c0                	test   eax,eax
c00153b0:	75 12                	jne    c00153c4 <ip_frag+0x1e4>
c00153b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00153bc:	e9 e3 00 00 00       	jmp    c00154a4 <ip_frag+0x2c4>
c00153c1:	8d 76 00             	lea    esi,[esi+0x0]
c00153c4:	e8 4f fd ff ff       	call   c0015118 <ip_frag_alloc_pbuf_custom_ref>
c00153c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153cd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00153d2:	75 18                	jne    c00153ec <ip_frag+0x20c>
c00153d4:	83 ec 0c             	sub    esp,0xc
c00153d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00153db:	e8 f4 2e ff ff       	call   c00082d4 <pbuf_free>
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	b0 ff                	mov    al,0xff
c00153e5:	e9 9e 01 00 00       	jmp    c0015588 <ip_frag+0x3a8>
c00153ea:	66 90                	xchg   ax,ax
c00153ec:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c00153f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153f5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00153f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00153fc:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015401:	83 ec 08             	sub    esp,0x8
c0015404:	53                   	push   ebx
c0015405:	51                   	push   ecx
c0015406:	52                   	push   edx
c0015407:	6a 02                	push   0x2
c0015409:	50                   	push   eax
c001540a:	6a 03                	push   0x3
c001540c:	e8 ff 2b ff ff       	call   c0008010 <pbuf_alloced_custom>
c0015411:	83 c4 20             	add    esp,0x20
c0015414:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015418:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001541d:	75 25                	jne    c0015444 <ip_frag+0x264>
c001541f:	83 ec 0c             	sub    esp,0xc
c0015422:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015426:	e8 01 fd ff ff       	call   c001512c <ip_frag_free_pbuf_custom_ref>
c001542b:	83 c4 10             	add    esp,0x10
c001542e:	83 ec 0c             	sub    esp,0xc
c0015431:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015435:	e8 9a 2e ff ff       	call   c00082d4 <pbuf_free>
c001543a:	83 c4 10             	add    esp,0x10
c001543d:	b0 ff                	mov    al,0xff
c001543f:	e9 44 01 00 00       	jmp    c0015588 <ip_frag+0x3a8>
c0015444:	83 ec 0c             	sub    esp,0xc
c0015447:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001544b:	e8 94 36 ff ff       	call   c0008ae4 <pbuf_ref>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015457:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001545b:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001545e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015462:	c7 40 10 64 51 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015164
c0015469:	83 ec 08             	sub    esp,0x8
c001546c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015470:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015474:	e8 9f 36 ff ff       	call   c0008b18 <pbuf_cat>
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015480:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0015485:	89 d3                	mov    ebx,edx
c0015487:	29 c3                	sub    ebx,eax
c0015489:	89 d8                	mov    eax,ebx
c001548b:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c0015490:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c0015495:	85 c0                	test   eax,eax
c0015497:	74 0b                	je     c00154a4 <ip_frag+0x2c4>
c0015499:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001549d:	8b 00                	mov    eax,DWORD PTR [eax]
c001549f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00154a3:	90                   	nop
c00154a4:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00154a9:	85 c0                	test   eax,eax
c00154ab:	0f 85 db fe ff ff    	jne    c001538c <ip_frag+0x1ac>
c00154b1:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00154b6:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00154bb:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c00154c0:	83 ec 0c             	sub    esp,0xc
c00154c3:	50                   	push   eax
c00154c4:	e8 53 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00154c9:	83 c4 10             	add    esp,0x10
c00154cc:	89 c2                	mov    edx,eax
c00154ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154d2:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
c00154d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154da:	83 c0 14             	add    eax,0x14
c00154dd:	0f b7 c0             	movzx  eax,ax
c00154e0:	83 ec 0c             	sub    esp,0xc
c00154e3:	50                   	push   eax
c00154e4:	e8 33 b7 fe ff       	call   c0000c1c <LWIP_PLATFORM_HTONS>
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	89 c2                	mov    edx,eax
c00154ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154f2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00154f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154fa:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015500:	83 ec 08             	sub    esp,0x8
c0015503:	6a 14                	push   0x14
c0015505:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015509:	e8 02 e0 ff ff       	call   c0013510 <inet_chksum>
c001550e:	83 c4 10             	add    esp,0x10
c0015511:	89 c2                	mov    edx,eax
c0015513:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015517:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
c001551b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001551f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015522:	83 ec 04             	sub    esp,0x4
c0015525:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015529:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001552d:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015531:	ff d0                	call   eax
c0015533:	83 c4 10             	add    esp,0x10
c0015536:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001553c:	83 c0 01             	add    eax,0x1
c001553f:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015545:	83 ec 0c             	sub    esp,0xc
c0015548:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001554c:	e8 83 2d ff ff       	call   c00082d4 <pbuf_free>
c0015551:	83 c4 10             	add    esp,0x10
c0015554:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c0015559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001555d:	89 d1                	mov    ecx,edx
c001555f:	29 c1                	sub    ecx,eax
c0015561:	89 c8                	mov    eax,ecx
c0015563:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0015568:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001556c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015570:	01 d0                	add    eax,edx
c0015572:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015577:	90                   	nop
c0015578:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c001557d:	85 c0                	test   eax,eax
c001557f:	0f 85 ef fc ff ff    	jne    c0015274 <ip_frag+0x94>
c0015585:	b0 00                	mov    al,0x0
c0015587:	90                   	nop
c0015588:	83 c4 38             	add    esp,0x38
c001558b:	5b                   	pop    ebx
c001558c:	c3                   	ret    
c001558d:	90                   	nop

c001558e <Computer::close(int, int, void*)>:
c001558e:	53                   	push   ebx
c001558f:	83 ec 08             	sub    esp,0x8
c0015592:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015596:	e8 c7 a3 00 00       	call   c001f962 <KeExecuteAtexit()>
c001559b:	83 ec 0c             	sub    esp,0xc
c001559e:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00155a4:	50                   	push   eax
c00155a5:	e8 6e 5f 00 00       	call   c001b518 <Device::closeAll()>
c00155aa:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00155b0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00155b4:	8b 10                	mov    edx,DWORD PTR [eax]
c00155b6:	51                   	push   ecx
c00155b7:	68 0f 27 00 00       	push   0x270f
c00155bc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00155c0:	53                   	push   ebx
c00155c1:	50                   	push   eax
c00155c2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00155c5:	83 c4 14             	add    esp,0x14
c00155c8:	68 48 0e 03 c0       	push   0xc0030e48
c00155cd:	e8 d0 ab 00 00       	call   c00201a2 <KePanic(char const*)>
c00155d2:	83 c4 18             	add    esp,0x18
c00155d5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00155da:	5b                   	pop    ebx
c00155db:	c3                   	ret    

c00155dc <Krnl::firstTask()>:
c00155dc:	53                   	push   ebx
c00155dd:	83 ec 14             	sub    esp,0x14
c00155e0:	fb                   	sti    
c00155e1:	68 5e 0e 03 c0       	push   0xc0030e5e
c00155e6:	e8 56 a4 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c00155eb:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c00155f2:	e8 ec 0d 00 00       	call   c00163e3 <malloc>
c00155f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00155fe:	89 c3                	mov    ebx,eax
c0015600:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0015605:	50                   	push   eax
c0015606:	68 77 0e 03 c0       	push   0xc0030e77
c001560b:	6a 01                	push   0x1
c001560d:	53                   	push   ebx
c001560e:	e8 15 f7 00 00       	call   c0024d28 <Process::Process(bool, char const*, Process*, char**)>
c0015613:	83 c4 20             	add    esp,0x20
c0015616:	68 ff 00 00 00       	push   0xff
c001561b:	6a 00                	push   0x0
c001561d:	68 2f 5e 01 c0       	push   0xc0015e2f
c0015622:	53                   	push   ebx
c0015623:	e8 28 f9 00 00       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c0015628:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c001562e:	6a 7a                	push   0x7a
c0015630:	6a 00                	push   0x0
c0015632:	68 08 58 02 c0       	push   0xc0025808
c0015637:	52                   	push   edx
c0015638:	e8 13 f9 00 00       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c001563d:	83 c4 14             	add    esp,0x14
c0015640:	68 74 0f 03 c0       	push   0xc0030f74
c0015645:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c001564a:	e8 f2 a3 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001564f:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c0015656:	e8 fe ac 00 00       	call   c0020359 <KeInitRand()>
c001565b:	e8 3f 05 01 00       	call   c0025b9f <Vm::initialise8086()>
c0015660:	e8 97 4a 00 00       	call   c001a0fc <Fs::initVFS()>
c0015665:	c7 04 24 84 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e84
c001566c:	e8 d0 a3 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c0015671:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0015676:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001567c:	8b 10                	mov    edx,DWORD PTR [eax]
c001567e:	6a 00                	push   0x0
c0015680:	6a 00                	push   0x0
c0015682:	6a 00                	push   0x0
c0015684:	50                   	push   eax
c0015685:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015688:	83 c4 14             	add    esp,0x14
c001568b:	68 74 0f 03 c0       	push   0xc0030f74
c0015690:	e8 ac a3 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c0015695:	e8 fc 41 00 00       	call   c0019896 <KeInitialiseSymlinks()>
c001569a:	e8 4b a9 00 00       	call   c001ffea <KeLoadSystemEnv()>
c001569f:	e8 c3 ab 00 00       	call   c0020267 <KeSetupPowerManager()>
c00156a4:	83 c4 0c             	add    esp,0xc
c00156a7:	6a 3a                	push   0x3a
c00156a9:	68 9e 0e 03 c0       	push   0xc0030e9e
c00156ae:	68 a7 0e 03 c0       	push   0xc0030ea7
c00156b3:	e8 0a d8 00 00       	call   c0022ec2 <Reg::readIntWithDefault(char*, char*, int)>
c00156b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00156bb:	e8 68 56 00 00       	call   c001ad28 <User::loadClockSettings(int)>
c00156c0:	c7 04 24 98 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f98
c00156c7:	e8 75 a3 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c00156cc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00156d1:	59                   	pop    ecx
c00156d2:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00156d8:	53                   	push   ebx
c00156d9:	e8 ee 5c 00 00       	call   c001b3cc <Device::loadDriversForAll()>
c00156de:	c7 04 24 af 0e 03 c0 	mov    DWORD PTR [esp],0xc0030eaf
c00156e5:	e8 57 a3 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c00156ea:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c00156f0:	58                   	pop    eax
c00156f1:	5a                   	pop    edx
c00156f2:	6a 01                	push   0x1
c00156f4:	68 c0 0e 03 c0       	push   0xc0030ec0
c00156f9:	e8 0d f0 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c00156fe:	59                   	pop    ecx
c00156ff:	5a                   	pop    edx
c0015700:	53                   	push   ebx
c0015701:	50                   	push   eax
c0015702:	e8 65 f2 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c0015707:	83 c4 10             	add    esp,0x10
c001570a:	83 ec 0c             	sub    esp,0xc
c001570d:	6a 02                	push   0x2
c001570f:	e8 44 fb 00 00       	call   c0025258 <blockTask(TaskState)>
c0015714:	83 c4 10             	add    esp,0x10
c0015717:	eb f1                	jmp    c001570a <Krnl::firstTask()+0x12e>
c0015719:	90                   	nop

c001571a <Computer::Computer()>:
c001571a:	83 ec 0c             	sub    esp,0xc
c001571d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015721:	83 ec 08             	sub    esp,0x8
c0015724:	68 dc 0e 03 c0       	push   0xc0030edc
c0015729:	50                   	push   eax
c001572a:	e8 e3 5c 00 00       	call   c001b412 <Device::Device(char const*)>
c001572f:	83 c4 10             	add    esp,0x10
c0015732:	ba e4 0f 03 c0       	mov    edx,0xc0030fe4
c0015737:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001573b:	89 10                	mov    DWORD PTR [eax],edx
c001573d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015741:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001574b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001574f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0015759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001575d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0015763:	83 ca 04             	or     edx,0x4
c0015766:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001576c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015770:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0015776:	0f b6 d0             	movzx  edx,al
c0015779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015788:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001578e:	0f b6 d0             	movzx  edx,al
c0015791:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015795:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001579a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001579e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00157a4:	8d 50 01             	lea    edx,[eax+0x1]
c00157a7:	88 d1                	mov    cl,dl
c00157a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00157ad:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00157b3:	0f b6 d0             	movzx  edx,al
c00157b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157ba:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00157be:	83 e1 3f             	and    ecx,0x3f
c00157c1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00157c5:	90                   	nop
c00157c6:	83 c4 0c             	add    esp,0xc
c00157c9:	c3                   	ret    

c00157ca <Computer::setBootMessage(char const*)>:
c00157ca:	c3                   	ret    
c00157cb:	90                   	nop

c00157cc <Computer::detectFeatures()>:
c00157cc:	55                   	push   ebp
c00157cd:	57                   	push   edi
c00157ce:	56                   	push   esi
c00157cf:	53                   	push   ebx
c00157d0:	83 ec 1c             	sub    esp,0x1c
c00157d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157d7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00157dd:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00157e3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00157e9:	e8 0b aa fe ff       	call   c00001f9 <detectCPUID>
c00157ee:	31 d2                	xor    edx,edx
c00157f0:	85 c0                	test   eax,eax
c00157f2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157f8:	0f 95 c2             	setne  dl
c00157fb:	d1 e2                	shl    edx,1
c00157fd:	83 e0 fd             	and    eax,0xfffffffd
c0015800:	09 d0                	or     eax,edx
c0015802:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015808:	a8 02                	test   al,0x2
c001580a:	75 51                	jne    c001585d <Computer::detectFeatures()+0x91>
c001580c:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c0015813:	74 0f                	je     c0015824 <Computer::detectFeatures()+0x58>
c0015815:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001581b:	83 e0 fb             	and    eax,0xfffffffb
c001581e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015824:	e8 9d 8a 01 00       	call   c002e2c6 <x87Detect>
c0015829:	83 e0 01             	and    eax,0x1
c001582c:	c1 e0 04             	shl    eax,0x4
c001582f:	89 c2                	mov    edx,eax
c0015831:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015837:	83 e0 ef             	and    eax,0xffffffef
c001583a:	09 d0                	or     eax,edx
c001583c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015842:	a8 10                	test   al,0x10
c0015844:	88 c2                	mov    dl,al
c0015846:	0f 85 33 01 00 00    	jne    c001597f <Computer::detectFeatures()+0x1b3>
c001584c:	80 e2 80             	and    dl,0x80
c001584f:	0f 85 4c 01 00 00    	jne    c00159a1 <Computer::detectFeatures()+0x1d5>
c0015855:	83 c4 1c             	add    esp,0x1c
c0015858:	5b                   	pop    ebx
c0015859:	5e                   	pop    esi
c001585a:	5f                   	pop    edi
c001585b:	5d                   	pop    ebp
c001585c:	c3                   	ret    
c001585d:	83 ec 0c             	sub    esp,0xc
c0015860:	6a 20                	push   0x20
c0015862:	e8 13 96 00 00       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c0015867:	83 e0 01             	and    eax,0x1
c001586a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015871:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015877:	83 e0 f7             	and    eax,0xfffffff7
c001587a:	09 d0                	or     eax,edx
c001587c:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015882:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0015889:	e8 ec 95 00 00       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001588e:	89 c2                	mov    edx,eax
c0015890:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0015896:	83 e2 01             	and    edx,0x1
c0015899:	83 e0 fe             	and    eax,0xfffffffe
c001589c:	09 d0                	or     eax,edx
c001589e:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00158a4:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00158ab:	e8 ca 95 00 00       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c00158b0:	89 c2                	mov    edx,eax
c00158b2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00158b8:	c1 e2 07             	shl    edx,0x7
c00158bb:	83 e0 7f             	and    eax,0x7f
c00158be:	09 d0                	or     eax,edx
c00158c0:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00158c6:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00158cd:	e8 a8 95 00 00       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c00158d2:	83 c4 10             	add    esp,0x10
c00158d5:	83 e0 01             	and    eax,0x1
c00158d8:	c1 e0 05             	shl    eax,0x5
c00158db:	89 c2                	mov    edx,eax
c00158dd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158e3:	83 e0 df             	and    eax,0xffffffdf
c00158e6:	09 d0                	or     eax,edx
c00158e8:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c00158f2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00158f8:	0f 84 c9 00 00 00    	je     c00159c7 <Computer::detectFeatures()+0x1fb>
c00158fe:	83 e0 fe             	and    eax,0xfffffffe
c0015901:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015907:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001590d:	89 c2                	mov    edx,eax
c001590f:	83 e2 09             	and    edx,0x9
c0015912:	83 fa 01             	cmp    edx,0x1
c0015915:	75 09                	jne    c0015920 <Computer::detectFeatures()+0x154>
c0015917:	83 e0 fe             	and    eax,0xfffffffe
c001591a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015920:	83 ec 0c             	sub    esp,0xc
c0015923:	8d 44 24 18          	lea    eax,[esp+0x18]
c0015927:	50                   	push   eax
c0015928:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c001592c:	55                   	push   ebp
c001592d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015931:	57                   	push   edi
c0015932:	8d 74 24 18          	lea    esi,[esp+0x18]
c0015936:	56                   	push   esi
c0015937:	68 00 00 00 80       	push   0x80000000
c001593c:	e8 b5 94 00 00       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015941:	83 c4 20             	add    esp,0x20
c0015944:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c001594b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001594f:	0f 86 b7 fe ff ff    	jbe    c001580c <Computer::detectFeatures()+0x40>
c0015955:	83 ec 0c             	sub    esp,0xc
c0015958:	50                   	push   eax
c0015959:	55                   	push   ebp
c001595a:	57                   	push   edi
c001595b:	56                   	push   esi
c001595c:	68 01 00 00 80       	push   0x80000001
c0015961:	e8 90 94 00 00       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015966:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001596c:	83 c4 20             	add    esp,0x20
c001596f:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015974:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001597a:	e9 8d fe ff ff       	jmp    c001580c <Computer::detectFeatures()+0x40>
c001597f:	e8 fc 88 01 00       	call   c002e280 <sseDetect>
c0015984:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c001598a:	83 e2 7f             	and    edx,0x7f
c001598d:	c1 e0 07             	shl    eax,0x7
c0015990:	09 c2                	or     edx,eax
c0015992:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0015998:	80 e2 80             	and    dl,0x80
c001599b:	0f 84 b4 fe ff ff    	je     c0015855 <Computer::detectFeatures()+0x89>
c00159a1:	e8 6a 85 01 00       	call   c002df10 <avxDetect>
c00159a6:	83 e0 01             	and    eax,0x1
c00159a9:	c1 e0 05             	shl    eax,0x5
c00159ac:	89 c2                	mov    edx,eax
c00159ae:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00159b4:	83 e0 df             	and    eax,0xffffffdf
c00159b7:	09 d0                	or     eax,edx
c00159b9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00159bf:	83 c4 1c             	add    esp,0x1c
c00159c2:	5b                   	pop    ebx
c00159c3:	5e                   	pop    esi
c00159c4:	5f                   	pop    edi
c00159c5:	5d                   	pop    ebp
c00159c6:	c3                   	ret    
c00159c7:	83 ec 0c             	sub    esp,0xc
c00159ca:	68 00 02 00 00       	push   0x200
c00159cf:	e8 a6 94 00 00       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c00159d4:	83 c4 10             	add    esp,0x10
c00159d7:	89 c2                	mov    edx,eax
c00159d9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00159df:	83 e2 01             	and    edx,0x1
c00159e2:	83 e0 fe             	and    eax,0xfffffffe
c00159e5:	09 d0                	or     eax,edx
c00159e7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00159ed:	e9 15 ff ff ff       	jmp    c0015907 <Computer::detectFeatures()+0x13b>

c00159f2 <Computer::displayFeatures()>:
c00159f2:	c3                   	ret    
c00159f3:	90                   	nop

c00159f4 <Computer::rdmsr(unsigned int)>:
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00159fb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015a02:	74 0a                	je     c0015a0e <Computer::rdmsr(unsigned int)+0x1a>
c0015a04:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a08:	0f 32                	rdmsr  
c0015a0a:	83 c4 0c             	add    esp,0xc
c0015a0d:	c3                   	ret    
c0015a0e:	83 ec 0c             	sub    esp,0xc
c0015a11:	68 e5 0e 03 c0       	push   0xc0030ee5
c0015a16:	e8 87 a7 00 00       	call   c00201a2 <KePanic(char const*)>
c0015a1b:	83 c4 10             	add    esp,0x10
c0015a1e:	eb e4                	jmp    c0015a04 <Computer::rdmsr(unsigned int)+0x10>

c0015a20 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015a20:	57                   	push   edi
c0015a21:	56                   	push   esi
c0015a22:	83 ec 04             	sub    esp,0x4
c0015a25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a29:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015a2d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015a31:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015a38:	74 10                	je     c0015a4a <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0015a3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015a3e:	89 f0                	mov    eax,esi
c0015a40:	89 fa                	mov    edx,edi
c0015a42:	0f 30                	wrmsr  
c0015a44:	83 c4 04             	add    esp,0x4
c0015a47:	5e                   	pop    esi
c0015a48:	5f                   	pop    edi
c0015a49:	c3                   	ret    
c0015a4a:	83 ec 0c             	sub    esp,0xc
c0015a4d:	68 eb 0e 03 c0       	push   0xc0030eeb
c0015a52:	e8 4b a7 00 00       	call   c00201a2 <KePanic(char const*)>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	eb de                	jmp    c0015a3a <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015a5c <Computer::shutdown()>:
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a63:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a65:	6a 00                	push   0x0
c0015a67:	6a 00                	push   0x0
c0015a69:	6a 00                	push   0x0
c0015a6b:	50                   	push   eax
c0015a6c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a6f:	83 c4 1c             	add    esp,0x1c
c0015a72:	c3                   	ret    
c0015a73:	90                   	nop

c0015a74 <Computer::restart()>:
c0015a74:	83 ec 0c             	sub    esp,0xc
c0015a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a7d:	6a 00                	push   0x0
c0015a7f:	6a 00                	push   0x0
c0015a81:	6a 01                	push   0x1
c0015a83:	50                   	push   eax
c0015a84:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a87:	83 c4 1c             	add    esp,0x1c
c0015a8a:	c3                   	ret    
c0015a8b:	90                   	nop

c0015a8c <Computer::sleep()>:
c0015a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015a90:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015a96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a9a:	e9 ad 8e 00 00       	jmp    c001e94c <ACPI::sleep()>
c0015a9f:	90                   	nop

c0015aa0 <Computer::nmiEnabled()>:
c0015aa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015aa4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0015aaa:	c3                   	ret    
c0015aab:	90                   	nop

c0015aac <Computer::readCMOS(unsigned char)>:
c0015aac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015ab0:	31 d2                	xor    edx,edx
c0015ab2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ab6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015abd:	75 02                	jne    c0015ac1 <Computer::readCMOS(unsigned char)+0x15>
c0015abf:	b2 80                	mov    dl,0x80
c0015ac1:	09 d0                	or     eax,edx
c0015ac3:	e6 70                	out    0x70,al
c0015ac5:	e4 71                	in     al,0x71
c0015ac7:	c3                   	ret    

c0015ac8 <Computer::enableNMI(bool)>:
c0015ac8:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0015acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ad0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0015ad6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0015ade:	eb cc                	jmp    c0015aac <Computer::readCMOS(unsigned char)>

c0015ae0 <Computer::open(int, int, void*)>:
c0015ae0:	56                   	push   esi
c0015ae1:	53                   	push   ebx
c0015ae2:	83 ec 10             	sub    esp,0x10
c0015ae5:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015aec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015af0:	68 f1 0e 03 c0       	push   0xc0030ef1
c0015af5:	0f 94 05 c0 3a 03 c0 	sete   BYTE PTR ds:0xc0033ac0
c0015afc:	e8 40 9f 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c0015b01:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015b08:	e8 d6 08 00 00       	call   c00163e3 <malloc>
c0015b0d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b10:	89 c6                	mov    esi,eax
c0015b12:	e8 a9 89 00 00       	call   c001e4c0 <ACPI::ACPI()>
c0015b17:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015b1d:	58                   	pop    eax
c0015b1e:	5a                   	pop    edx
c0015b1f:	56                   	push   esi
c0015b20:	53                   	push   ebx
c0015b21:	e8 8a 57 00 00       	call   c001b2b0 <Device::addChild(Device*)>
c0015b26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b29:	e8 9e fc ff ff       	call   c00157cc <Computer::detectFeatures()>
c0015b2e:	59                   	pop    ecx
c0015b2f:	5e                   	pop    esi
c0015b30:	6a 01                	push   0x1
c0015b32:	53                   	push   ebx
c0015b33:	e8 90 ff ff ff       	call   c0015ac8 <Computer::enableNMI(bool)>
c0015b38:	c7 04 24 09 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f09
c0015b3f:	e8 fd 9e 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c0015b44:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015b4b:	e8 93 08 00 00       	call   c00163e3 <malloc>
c0015b50:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b53:	89 c6                	mov    esi,eax
c0015b55:	e8 d8 93 00 00       	call   c001ef32 <CPU::CPU()>
c0015b5a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015b60:	58                   	pop    eax
c0015b61:	5a                   	pop    edx
c0015b62:	56                   	push   esi
c0015b63:	53                   	push   ebx
c0015b64:	e8 47 57 00 00       	call   c001b2b0 <Device::addChild(Device*)>
c0015b69:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b6f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015b73:	8b 10                	mov    edx,DWORD PTR [eax]
c0015b75:	51                   	push   ecx
c0015b76:	6a 00                	push   0x0
c0015b78:	6a 00                	push   0x0
c0015b7a:	50                   	push   eax
c0015b7b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015b7e:	83 c4 14             	add    esp,0x14
c0015b81:	68 b8 0f 03 c0       	push   0xc0030fb8
c0015b86:	e8 b6 9e 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c0015b8b:	e8 56 12 01 00       	call   c0026de6 <HalInitialiseCoprocessor()>
c0015b90:	c7 04 24 23 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f23
c0015b97:	e8 a5 9e 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c0015b9c:	c7 04 24 dc 55 01 c0 	mov    DWORD PTR [esp],0xc00155dc
c0015ba3:	e8 d0 f4 00 00       	call   c0025078 <setupMultitasking(void (*)())>
c0015ba8:	83 c4 14             	add    esp,0x14
c0015bab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bb0:	5b                   	pop    ebx
c0015bb1:	5e                   	pop    esi
c0015bb2:	c3                   	ret    
c0015bb3:	90                   	nop

c0015bb4 <Computer::disableNMI()>:
c0015bb4:	6a 00                	push   0x0
c0015bb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015bba:	50                   	push   eax
c0015bbb:	e8 08 ff ff ff       	call   c0015ac8 <Computer::enableNMI(bool)>
c0015bc0:	5a                   	pop    edx
c0015bc1:	59                   	pop    ecx
c0015bc2:	c3                   	ret    
c0015bc3:	90                   	nop

c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015bc4:	53                   	push   ebx
c0015bc5:	b2 80                	mov    dl,0x80
c0015bc7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bd3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0015bda:	74 02                	je     c0015bde <Computer::writeCMOS(unsigned char, unsigned char)+0x1a>
c0015bdc:	31 d2                	xor    edx,edx
c0015bde:	09 d0                	or     eax,edx
c0015be0:	e6 70                	out    0x70,al
c0015be2:	88 c8                	mov    al,cl
c0015be4:	e6 71                	out    0x71,al
c0015be6:	5b                   	pop    ebx
c0015be7:	c3                   	ret    

c0015be8 <Computer::handleNMI()>:
c0015be8:	56                   	push   esi
c0015be9:	53                   	push   ebx
c0015bea:	83 ec 10             	sub    esp,0x10
c0015bed:	e4 92                	in     al,0x92
c0015bef:	89 c6                	mov    esi,eax
c0015bf1:	e4 61                	in     al,0x61
c0015bf3:	68 3e 0f 03 c0       	push   0xc0030f3e
c0015bf8:	88 c3                	mov    bl,al
c0015bfa:	e8 1b 36 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	83 e6 10             	and    esi,0x10
c0015c05:	75 10                	jne    c0015c17 <Computer::handleNMI()+0x2f>
c0015c07:	f6 c3 40             	test   bl,0x40
c0015c0a:	75 20                	jne    c0015c2c <Computer::handleNMI()+0x44>
c0015c0c:	80 e3 80             	and    bl,0x80
c0015c0f:	75 30                	jne    c0015c41 <Computer::handleNMI()+0x59>
c0015c11:	83 c4 04             	add    esp,0x4
c0015c14:	5b                   	pop    ebx
c0015c15:	5e                   	pop    esi
c0015c16:	c3                   	ret    
c0015c17:	83 ec 0c             	sub    esp,0xc
c0015c1a:	68 4f 0f 03 c0       	push   0xc0030f4f
c0015c1f:	e8 7e a5 00 00       	call   c00201a2 <KePanic(char const*)>
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	f6 c3 40             	test   bl,0x40
c0015c2a:	74 e0                	je     c0015c0c <Computer::handleNMI()+0x24>
c0015c2c:	83 ec 0c             	sub    esp,0xc
c0015c2f:	68 5c 0f 03 c0       	push   0xc0030f5c
c0015c34:	e8 69 a5 00 00       	call   c00201a2 <KePanic(char const*)>
c0015c39:	83 c4 10             	add    esp,0x10
c0015c3c:	80 e3 80             	and    bl,0x80
c0015c3f:	74 d0                	je     c0015c11 <Computer::handleNMI()+0x29>
c0015c41:	c7 44 24 10 66 0f 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030f66
c0015c49:	83 c4 04             	add    esp,0x4
c0015c4c:	5b                   	pop    ebx
c0015c4d:	5e                   	pop    esi
c0015c4e:	e9 4f a5 00 00       	jmp    c00201a2 <KePanic(char const*)>
c0015c53:	90                   	nop

c0015c54 <GDTEntry::setBase(unsigned int)>:
c0015c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c5c:	89 c1                	mov    ecx,eax
c0015c5e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015c62:	c1 e9 10             	shr    ecx,0x10
c0015c65:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015c68:	c1 e8 18             	shr    eax,0x18
c0015c6b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015c6e:	c3                   	ret    
c0015c6f:	90                   	nop

c0015c70 <GDTEntry::setLimit(unsigned int)>:
c0015c70:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015c74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c78:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015c7b:	66 89 01             	mov    WORD PTR [ecx],ax
c0015c7e:	c1 e8 10             	shr    eax,0x10
c0015c81:	83 e0 0f             	and    eax,0xf
c0015c84:	83 e2 f0             	and    edx,0xfffffff0
c0015c87:	09 d0                	or     eax,edx
c0015c89:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015c8c:	c3                   	ret    
c0015c8d:	90                   	nop

c0015c8e <GDT::GDT()>:
c0015c8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c9c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015ca2:	90                   	nop
c0015ca3:	c3                   	ret    

c0015ca4 <GDT::addEntry(GDTEntry)>:
c0015ca4:	53                   	push   ebx
c0015ca5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015ca9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015cad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0015cb3:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015cb7:	8d 48 01             	lea    ecx,[eax+0x1]
c0015cba:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015cbe:	c1 e0 03             	shl    eax,0x3
c0015cc1:	89 0a                	mov    DWORD PTR [edx],ecx
c0015cc3:	5b                   	pop    ebx
c0015cc4:	c3                   	ret    
c0015cc5:	90                   	nop

c0015cc6 <GDT::getNumberOfEntries()>:
c0015cc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cca:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ccc:	c3                   	ret    
c0015ccd:	90                   	nop

c0015cce <GDT::flush()>:
c0015cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cd4:	83 c0 04             	add    eax,0x4
c0015cd7:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015cdc:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015ce3:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015cea:	e9 6b a6 fe ff       	jmp    c000035a <loadGDT>
c0015cef:	90                   	nop

c0015cf0 <GDT::setup()>:
c0015cf0:	57                   	push   edi
c0015cf1:	56                   	push   esi
c0015cf2:	53                   	push   ebx
c0015cf3:	83 ec 30             	sub    esp,0x30
c0015cf6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015cfa:	6a 00                	push   0x0
c0015cfc:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015d00:	56                   	push   esi
c0015d01:	e8 4e ff ff ff       	call   c0015c54 <GDTEntry::setBase(unsigned int)>
c0015d06:	6a 00                	push   0x0
c0015d08:	56                   	push   esi
c0015d09:	e8 62 ff ff ff       	call   c0015c70 <GDTEntry::setLimit(unsigned int)>
c0015d0e:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015d16:	6a 00                	push   0x0
c0015d18:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015d1c:	56                   	push   esi
c0015d1d:	e8 32 ff ff ff       	call   c0015c54 <GDTEntry::setBase(unsigned int)>
c0015d22:	68 ff ff ff 00       	push   0xffffff
c0015d27:	56                   	push   esi
c0015d28:	e8 43 ff ff ff       	call   c0015c70 <GDTEntry::setLimit(unsigned int)>
c0015d2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d31:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015d35:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015d3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015d3e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015d43:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015d47:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015d4b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015d4f:	89 f8                	mov    eax,edi
c0015d51:	89 fa                	mov    edx,edi
c0015d53:	80 e4 f7             	and    ah,0xf7
c0015d56:	80 ce 60             	or     dh,0x60
c0015d59:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015d5d:	89 c7                	mov    edi,eax
c0015d5f:	80 cc 60             	or     ah,0x60
c0015d62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d66:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015d6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d6e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015d72:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015d76:	83 c4 20             	add    esp,0x20
c0015d79:	6a 00                	push   0x0
c0015d7b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d7f:	50                   	push   eax
c0015d80:	e8 cf fe ff ff       	call   c0015c54 <GDTEntry::setBase(unsigned int)>
c0015d85:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015d89:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015d8d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015d91:	83 e0 3f             	and    eax,0x3f
c0015d94:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d98:	6a 00                	push   0x0
c0015d9a:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015d9e:	50                   	push   eax
c0015d9f:	e8 b0 fe ff ff       	call   c0015c54 <GDTEntry::setBase(unsigned int)>
c0015da4:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015da8:	83 e0 3f             	and    eax,0x3f
c0015dab:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015daf:	83 c4 0c             	add    esp,0xc
c0015db2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015db6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015dba:	53                   	push   ebx
c0015dbb:	e8 e4 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015dc0:	83 c4 0c             	add    esp,0xc
c0015dc3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015dc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015dcb:	53                   	push   ebx
c0015dcc:	e8 d3 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015dd1:	83 c4 0c             	add    esp,0xc
c0015dd4:	57                   	push   edi
c0015dd5:	56                   	push   esi
c0015dd6:	53                   	push   ebx
c0015dd7:	e8 c8 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015ddc:	83 c4 0c             	add    esp,0xc
c0015ddf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015de3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015de7:	53                   	push   ebx
c0015de8:	e8 b7 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015ded:	83 c4 0c             	add    esp,0xc
c0015df0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015df4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015df8:	53                   	push   ebx
c0015df9:	e8 a6 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015dfe:	83 c4 0c             	add    esp,0xc
c0015e01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e09:	53                   	push   ebx
c0015e0a:	e8 95 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015e0f:	83 c4 0c             	add    esp,0xc
c0015e12:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e16:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015e1a:	53                   	push   ebx
c0015e1b:	e8 84 fe ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c0015e20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e23:	e8 a6 fe ff ff       	call   c0015cce <GDT::flush()>
c0015e28:	83 c4 40             	add    esp,0x40
c0015e2b:	5b                   	pop    ebx
c0015e2c:	5e                   	pop    esi
c0015e2d:	5f                   	pop    edi
c0015e2e:	c3                   	ret    

c0015e2f <idleFunction(void*)>:
c0015e2f:	83 ec 0c             	sub    esp,0xc
c0015e32:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015e37:	48                   	dec    eax
c0015e38:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015e3d:	75 01                	jne    c0015e40 <idleFunction(void*)+0x11>
c0015e3f:	fb                   	sti    
c0015e40:	e8 6d 0c 01 00       	call   c0026ab2 <HalSystemIdle()>
c0015e45:	e8 38 8a 01 00       	call   c002e882 <idleCommon()>
c0015e4a:	eb f4                	jmp    c0015e40 <idleFunction(void*)+0x11>

c0015e4c <IDTEntry::IDTEntry(bool)>:
c0015e4c:	53                   	push   ebx
c0015e4d:	83 ec 04             	sub    esp,0x4
c0015e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e54:	88 04 24             	mov    BYTE PTR [esp],al
c0015e57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e5b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e65:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015e69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e6d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e70:	83 e2 f0             	and    edx,0xfffffff0
c0015e73:	83 ca 0e             	or     edx,0xe
c0015e76:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e7d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015e80:	83 e2 ef             	and    edx,0xffffffef
c0015e83:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015e86:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015e8a:	85 c0                	test   eax,eax
c0015e8c:	74 06                	je     c0015e94 <IDTEntry::IDTEntry(bool)+0x48>
c0015e8e:	b2 03                	mov    dl,0x3
c0015e90:	eb 06                	jmp    c0015e98 <IDTEntry::IDTEntry(bool)+0x4c>
c0015e92:	66 90                	xchg   ax,ax
c0015e94:	b2 00                	mov    dl,0x0
c0015e96:	66 90                	xchg   ax,ax
c0015e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015e9c:	83 e2 03             	and    edx,0x3
c0015e9f:	89 d3                	mov    ebx,edx
c0015ea1:	c1 e3 05             	shl    ebx,0x5
c0015ea4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015ea7:	83 e2 9f             	and    edx,0xffffff9f
c0015eaa:	88 d1                	mov    cl,dl
c0015eac:	88 da                	mov    dl,bl
c0015eae:	09 ca                	or     edx,ecx
c0015eb0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015eb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015eb7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015eba:	83 ca 80             	or     edx,0xffffff80
c0015ebd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015ec0:	90                   	nop
c0015ec1:	83 c4 04             	add    esp,0x4
c0015ec4:	5b                   	pop    ebx
c0015ec5:	c3                   	ret    

c0015ec6 <IDTEntry::setOffset(unsigned int)>:
c0015ec6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015eca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ece:	66 89 02             	mov    WORD PTR [edx],ax
c0015ed1:	c1 e8 10             	shr    eax,0x10
c0015ed4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015ed8:	c3                   	ret    
c0015ed9:	90                   	nop
c0015eda:	66 90                	xchg   ax,ax

c0015edc <IDT::IDT()>:
c0015edc:	90                   	nop
c0015edd:	c3                   	ret    

c0015ede <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015ede:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ee2:	83 c0 30             	add    eax,0x30
c0015ee5:	c3                   	ret    

c0015ee6 <IDT::addEntry(IDTEntry, int)>:
c0015ee6:	53                   	push   ebx
c0015ee7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eeb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015eef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ef3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ef7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015efa:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015efe:	5b                   	pop    ebx
c0015eff:	c3                   	ret    

c0015f00 <IDT::addEntry(int, void (*)(), bool)>:
c0015f00:	53                   	push   ebx
c0015f01:	83 ec 10             	sub    esp,0x10
c0015f04:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015f09:	50                   	push   eax
c0015f0a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015f0e:	53                   	push   ebx
c0015f0f:	e8 38 ff ff ff       	call   c0015e4c <IDTEntry::IDTEntry(bool)>
c0015f14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015f18:	53                   	push   ebx
c0015f19:	e8 a8 ff ff ff       	call   c0015ec6 <IDTEntry::setOffset(unsigned int)>
c0015f1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015f2a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015f2e:	e8 b3 ff ff ff       	call   c0015ee6 <IDT::addEntry(IDTEntry, int)>
c0015f33:	83 c4 30             	add    esp,0x30
c0015f36:	5b                   	pop    ebx
c0015f37:	c3                   	ret    

c0015f38 <IDT::flush()>:
c0015f38:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015f41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f45:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015f4a:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015f51:	c3                   	ret    

c0015f52 <IDT::setup()>:
c0015f52:	57                   	push   edi
c0015f53:	56                   	push   esi
c0015f54:	53                   	push   ebx
c0015f55:	83 ec 10             	sub    esp,0x10
c0015f58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015f5c:	6a 00                	push   0x0
c0015f5e:	68 80 df 02 c0       	push   0xc002df80
c0015f63:	6a 00                	push   0x0
c0015f65:	53                   	push   ebx
c0015f66:	e8 95 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015f6b:	6a 00                	push   0x0
c0015f6d:	68 90 df 02 c0       	push   0xc002df90
c0015f72:	6a 01                	push   0x1
c0015f74:	53                   	push   ebx
c0015f75:	e8 86 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015f7a:	83 c4 20             	add    esp,0x20
c0015f7d:	6a 00                	push   0x0
c0015f7f:	68 9a df 02 c0       	push   0xc002df9a
c0015f84:	6a 02                	push   0x2
c0015f86:	53                   	push   ebx
c0015f87:	e8 74 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015f8c:	6a 00                	push   0x0
c0015f8e:	68 a4 df 02 c0       	push   0xc002dfa4
c0015f93:	6a 03                	push   0x3
c0015f95:	53                   	push   ebx
c0015f96:	e8 65 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015f9b:	83 c4 20             	add    esp,0x20
c0015f9e:	6a 00                	push   0x0
c0015fa0:	68 ae df 02 c0       	push   0xc002dfae
c0015fa5:	6a 04                	push   0x4
c0015fa7:	53                   	push   ebx
c0015fa8:	e8 53 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015fad:	6a 00                	push   0x0
c0015faf:	68 b8 df 02 c0       	push   0xc002dfb8
c0015fb4:	6a 05                	push   0x5
c0015fb6:	53                   	push   ebx
c0015fb7:	e8 44 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015fbc:	83 c4 20             	add    esp,0x20
c0015fbf:	6a 00                	push   0x0
c0015fc1:	68 c2 df 02 c0       	push   0xc002dfc2
c0015fc6:	6a 06                	push   0x6
c0015fc8:	53                   	push   ebx
c0015fc9:	e8 32 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015fce:	6a 00                	push   0x0
c0015fd0:	68 cc df 02 c0       	push   0xc002dfcc
c0015fd5:	6a 07                	push   0x7
c0015fd7:	53                   	push   ebx
c0015fd8:	e8 23 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015fdd:	83 c4 20             	add    esp,0x20
c0015fe0:	6a 00                	push   0x0
c0015fe2:	68 d6 df 02 c0       	push   0xc002dfd6
c0015fe7:	6a 08                	push   0x8
c0015fe9:	53                   	push   ebx
c0015fea:	e8 11 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015fef:	6a 00                	push   0x0
c0015ff1:	68 de df 02 c0       	push   0xc002dfde
c0015ff6:	6a 09                	push   0x9
c0015ff8:	53                   	push   ebx
c0015ff9:	e8 02 ff ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0015ffe:	83 c4 20             	add    esp,0x20
c0016001:	6a 00                	push   0x0
c0016003:	68 e8 df 02 c0       	push   0xc002dfe8
c0016008:	6a 0a                	push   0xa
c001600a:	53                   	push   ebx
c001600b:	e8 f0 fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016010:	6a 00                	push   0x0
c0016012:	68 f0 df 02 c0       	push   0xc002dff0
c0016017:	6a 0b                	push   0xb
c0016019:	53                   	push   ebx
c001601a:	e8 e1 fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001601f:	83 c4 20             	add    esp,0x20
c0016022:	6a 00                	push   0x0
c0016024:	68 f8 df 02 c0       	push   0xc002dff8
c0016029:	6a 0c                	push   0xc
c001602b:	53                   	push   ebx
c001602c:	e8 cf fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016031:	6a 00                	push   0x0
c0016033:	68 00 e0 02 c0       	push   0xc002e000
c0016038:	6a 0d                	push   0xd
c001603a:	53                   	push   ebx
c001603b:	e8 c0 fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016040:	83 c4 20             	add    esp,0x20
c0016043:	6a 00                	push   0x0
c0016045:	68 1a e0 02 c0       	push   0xc002e01a
c001604a:	6a 0e                	push   0xe
c001604c:	53                   	push   ebx
c001604d:	e8 ae fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016052:	6a 00                	push   0x0
c0016054:	68 22 e0 02 c0       	push   0xc002e022
c0016059:	6a 0f                	push   0xf
c001605b:	53                   	push   ebx
c001605c:	e8 9f fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016061:	83 c4 20             	add    esp,0x20
c0016064:	6a 00                	push   0x0
c0016066:	68 2c e0 02 c0       	push   0xc002e02c
c001606b:	6a 10                	push   0x10
c001606d:	53                   	push   ebx
c001606e:	e8 8d fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016073:	6a 00                	push   0x0
c0016075:	68 36 e0 02 c0       	push   0xc002e036
c001607a:	6a 11                	push   0x11
c001607c:	53                   	push   ebx
c001607d:	e8 7e fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016082:	83 c4 20             	add    esp,0x20
c0016085:	6a 00                	push   0x0
c0016087:	68 40 e0 02 c0       	push   0xc002e040
c001608c:	6a 12                	push   0x12
c001608e:	53                   	push   ebx
c001608f:	e8 6c fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016094:	6a 01                	push   0x1
c0016096:	68 da e0 02 c0       	push   0xc002e0da
c001609b:	6a 60                	push   0x60
c001609d:	53                   	push   ebx
c001609e:	e8 5d fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00160a3:	83 c4 20             	add    esp,0x20
c00160a6:	6a 00                	push   0x0
c00160a8:	68 e1 e0 02 c0       	push   0xc002e0e1
c00160ad:	6a 20                	push   0x20
c00160af:	53                   	push   ebx
c00160b0:	e8 4b fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00160b5:	6a 00                	push   0x0
c00160b7:	68 cc e0 02 c0       	push   0xc002e0cc
c00160bc:	6a 21                	push   0x21
c00160be:	53                   	push   ebx
c00160bf:	e8 3c fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00160c4:	83 c4 20             	add    esp,0x20
c00160c7:	6a 00                	push   0x0
c00160c9:	68 d3 e0 02 c0       	push   0xc002e0d3
c00160ce:	6a 22                	push   0x22
c00160d0:	53                   	push   ebx
c00160d1:	e8 2a fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00160d6:	6a 00                	push   0x0
c00160d8:	68 4a e0 02 c0       	push   0xc002e04a
c00160dd:	6a 23                	push   0x23
c00160df:	53                   	push   ebx
c00160e0:	e8 1b fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00160e5:	83 c4 20             	add    esp,0x20
c00160e8:	6a 00                	push   0x0
c00160ea:	68 54 e0 02 c0       	push   0xc002e054
c00160ef:	6a 24                	push   0x24
c00160f1:	53                   	push   ebx
c00160f2:	e8 09 fe ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00160f7:	6a 00                	push   0x0
c00160f9:	68 5e e0 02 c0       	push   0xc002e05e
c00160fe:	6a 25                	push   0x25
c0016100:	53                   	push   ebx
c0016101:	e8 fa fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016106:	83 c4 20             	add    esp,0x20
c0016109:	6a 00                	push   0x0
c001610b:	68 68 e0 02 c0       	push   0xc002e068
c0016110:	6a 26                	push   0x26
c0016112:	53                   	push   ebx
c0016113:	e8 e8 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016118:	6a 00                	push   0x0
c001611a:	68 72 e0 02 c0       	push   0xc002e072
c001611f:	6a 27                	push   0x27
c0016121:	53                   	push   ebx
c0016122:	e8 d9 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016127:	83 c4 20             	add    esp,0x20
c001612a:	6a 00                	push   0x0
c001612c:	68 7c e0 02 c0       	push   0xc002e07c
c0016131:	6a 28                	push   0x28
c0016133:	53                   	push   ebx
c0016134:	e8 c7 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016139:	6a 00                	push   0x0
c001613b:	68 86 e0 02 c0       	push   0xc002e086
c0016140:	6a 29                	push   0x29
c0016142:	53                   	push   ebx
c0016143:	e8 b8 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016148:	83 c4 20             	add    esp,0x20
c001614b:	6a 00                	push   0x0
c001614d:	68 90 e0 02 c0       	push   0xc002e090
c0016152:	6a 2a                	push   0x2a
c0016154:	53                   	push   ebx
c0016155:	e8 a6 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001615a:	6a 00                	push   0x0
c001615c:	68 9a e0 02 c0       	push   0xc002e09a
c0016161:	6a 2b                	push   0x2b
c0016163:	53                   	push   ebx
c0016164:	e8 97 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016169:	83 c4 20             	add    esp,0x20
c001616c:	6a 00                	push   0x0
c001616e:	68 a4 e0 02 c0       	push   0xc002e0a4
c0016173:	6a 2c                	push   0x2c
c0016175:	53                   	push   ebx
c0016176:	e8 85 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001617b:	6a 00                	push   0x0
c001617d:	68 ae e0 02 c0       	push   0xc002e0ae
c0016182:	6a 2d                	push   0x2d
c0016184:	53                   	push   ebx
c0016185:	e8 76 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001618a:	83 c4 20             	add    esp,0x20
c001618d:	6a 00                	push   0x0
c001618f:	68 b8 e0 02 c0       	push   0xc002e0b8
c0016194:	6a 2e                	push   0x2e
c0016196:	53                   	push   ebx
c0016197:	e8 64 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001619c:	6a 00                	push   0x0
c001619e:	68 c2 e0 02 c0       	push   0xc002e0c2
c00161a3:	6a 2f                	push   0x2f
c00161a5:	53                   	push   ebx
c00161a6:	e8 55 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00161ab:	83 c4 20             	add    esp,0x20
c00161ae:	6a 00                	push   0x0
c00161b0:	68 1c e2 02 c0       	push   0xc002e21c
c00161b5:	6a 30                	push   0x30
c00161b7:	53                   	push   ebx
c00161b8:	e8 43 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00161bd:	6a 00                	push   0x0
c00161bf:	68 26 e2 02 c0       	push   0xc002e226
c00161c4:	6a 31                	push   0x31
c00161c6:	53                   	push   ebx
c00161c7:	e8 34 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00161cc:	83 c4 20             	add    esp,0x20
c00161cf:	6a 00                	push   0x0
c00161d1:	68 30 e2 02 c0       	push   0xc002e230
c00161d6:	6a 32                	push   0x32
c00161d8:	53                   	push   ebx
c00161d9:	e8 22 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00161de:	6a 00                	push   0x0
c00161e0:	68 3a e2 02 c0       	push   0xc002e23a
c00161e5:	6a 33                	push   0x33
c00161e7:	53                   	push   ebx
c00161e8:	e8 13 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00161ed:	83 c4 20             	add    esp,0x20
c00161f0:	6a 00                	push   0x0
c00161f2:	68 44 e2 02 c0       	push   0xc002e244
c00161f7:	6a 34                	push   0x34
c00161f9:	53                   	push   ebx
c00161fa:	e8 01 fd ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c00161ff:	6a 00                	push   0x0
c0016201:	68 4e e2 02 c0       	push   0xc002e24e
c0016206:	6a 35                	push   0x35
c0016208:	53                   	push   ebx
c0016209:	e8 f2 fc ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001620e:	83 c4 20             	add    esp,0x20
c0016211:	6a 00                	push   0x0
c0016213:	68 58 e2 02 c0       	push   0xc002e258
c0016218:	6a 36                	push   0x36
c001621a:	53                   	push   ebx
c001621b:	e8 e0 fc ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c0016220:	6a 00                	push   0x0
c0016222:	68 62 e2 02 c0       	push   0xc002e262
c0016227:	6a 37                	push   0x37
c0016229:	53                   	push   ebx
c001622a:	e8 d1 fc ff ff       	call   c0015f00 <IDT::addEntry(int, void (*)(), bool)>
c001622f:	83 c4 1c             	add    esp,0x1c
c0016232:	6a 03                	push   0x3
c0016234:	6a 02                	push   0x2
c0016236:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c001623c:	e8 d5 24 00 00       	call   c0018716 <VAS::allocatePages(int, int)>
c0016241:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016248:	89 c6                	mov    esi,eax
c001624a:	e8 94 01 00 00       	call   c00163e3 <malloc>
c001624f:	81 c6 00 20 00 00    	add    esi,0x2000
c0016255:	89 04 24             	mov    DWORD PTR [esp],eax
c0016258:	89 c7                	mov    edi,eax
c001625a:	e8 dd 15 00 00       	call   c001783c <TSS::TSS()>
c001625f:	83 c4 0c             	add    esp,0xc
c0016262:	68 d6 df 02 c0       	push   0xc002dfd6
c0016267:	56                   	push   esi
c0016268:	57                   	push   edi
c0016269:	e8 12 16 00 00       	call   c0017880 <TSS::setup(unsigned long, unsigned long)>
c001626e:	89 c6                	mov    esi,eax
c0016270:	58                   	pop    eax
c0016271:	5a                   	pop    edx
c0016272:	6a 00                	push   0x0
c0016274:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016278:	50                   	push   eax
c0016279:	e8 ce fb ff ff       	call   c0015e4c <IDTEntry::IDTEntry(bool)>
c001627e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016282:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0016287:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c001628e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016292:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0016298:	80 ce 05             	or     dh,0x5
c001629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001629f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00162a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162a6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00162a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162ac:	e8 87 fc ff ff       	call   c0015f38 <IDT::flush()>
c00162b1:	83 c4 20             	add    esp,0x20
c00162b4:	5b                   	pop    ebx
c00162b5:	5e                   	pop    esi
c00162b6:	5f                   	pop    edi
c00162b7:	c3                   	ret    

c00162b8 <sbrk>:
c00162b8:	55                   	push   ebp
c00162b9:	57                   	push   edi
c00162ba:	56                   	push   esi
c00162bb:	53                   	push   ebx
c00162bc:	83 ec 1c             	sub    esp,0x1c
c00162bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00162c3:	85 c0                	test   eax,eax
c00162c5:	74 66                	je     c001632d <sbrk+0x75>
c00162c7:	78 6b                	js     c0016334 <sbrk+0x7c>
c00162c9:	8b 15 a4 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033aa4
c00162cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00162d3:	8d a8 fe 1f 00 00    	lea    ebp,[eax+0x1ffe]
c00162d9:	05 ff 0f 00 00       	add    eax,0xfff
c00162de:	0f 49 e8             	cmovns ebp,eax
c00162e1:	c1 fd 0c             	sar    ebp,0xc
c00162e4:	bb 00 00 00 00       	mov    ebx,0x0
c00162e9:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c00162ef:	8b 3d a4 3a 03 c0    	mov    edi,DWORD PTR ds:0xc0033aa4
c00162f5:	e8 f8 03 00 00       	call   c00166f2 <Phys::allocatePage()>
c00162fa:	68 01 04 00 00       	push   0x401
c00162ff:	57                   	push   edi
c0016300:	50                   	push   eax
c0016301:	56                   	push   esi
c0016302:	e8 07 23 00 00       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0016307:	81 05 a4 3a 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033aa4,0x1000
c0016311:	83 c3 01             	add    ebx,0x1
c0016314:	83 c4 10             	add    esp,0x10
c0016317:	39 dd                	cmp    ebp,ebx
c0016319:	75 ce                	jne    c00162e9 <sbrk+0x31>
c001631b:	0f 20 d8             	mov    eax,cr3
c001631e:	0f 22 d8             	mov    cr3,eax
c0016321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016325:	83 c4 1c             	add    esp,0x1c
c0016328:	5b                   	pop    ebx
c0016329:	5e                   	pop    esi
c001632a:	5f                   	pop    edi
c001632b:	5d                   	pop    ebp
c001632c:	c3                   	ret    
c001632d:	a1 a4 3a 03 c0       	mov    eax,ds:0xc0033aa4
c0016332:	eb f1                	jmp    c0016325 <sbrk+0x6d>
c0016334:	83 ec 08             	sub    esp,0x8
c0016337:	50                   	push   eax
c0016338:	68 08 10 03 c0       	push   0xc0031008
c001633d:	e8 d8 2e 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0016342:	83 c4 10             	add    esp,0x10
c0016345:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001634a:	eb d9                	jmp    c0016325 <sbrk+0x6d>

c001634c <mmap>:
c001634c:	83 ec 18             	sub    esp,0x18
c001634f:	68 38 10 03 c0       	push   0xc0031038
c0016354:	e8 49 9e 00 00       	call   c00201a2 <KePanic(char const*)>
c0016359:	b8 00 00 00 00       	mov    eax,0x0
c001635e:	83 c4 1c             	add    esp,0x1c
c0016361:	c3                   	ret    

c0016362 <munmap>:
c0016362:	83 ec 18             	sub    esp,0x18
c0016365:	68 3d 10 03 c0       	push   0xc003103d
c001636a:	e8 33 9e 00 00       	call   c00201a2 <KePanic(char const*)>
c001636f:	b8 00 00 00 00       	mov    eax,0x0
c0016374:	83 c4 1c             	add    esp,0x1c
c0016377:	c3                   	ret    

c0016378 <liballoc_lock()>:
c0016378:	fa                   	cli    
c0016379:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c0016380:	b8 00 00 00 00       	mov    eax,0x0
c0016385:	c3                   	ret    

c0016386 <liballoc_unlock()>:
c0016386:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001638b:	83 e8 01             	sub    eax,0x1
c001638e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016393:	75 01                	jne    c0016396 <liballoc_unlock()+0x10>
c0016395:	fb                   	sti    
c0016396:	b8 00 00 00 00       	mov    eax,0x0
c001639b:	c3                   	ret    

c001639c <liballoc_alloc(int)>:
c001639c:	83 ec 10             	sub    esp,0x10
c001639f:	6a 01                	push   0x1
c00163a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163a5:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163ab:	e8 66 23 00 00       	call   c0018716 <VAS::allocatePages(int, int)>
c00163b0:	83 c4 1c             	add    esp,0x1c
c00163b3:	c3                   	ret    

c00163b4 <liballoc_free(void*, int)>:
c00163b4:	83 ec 14             	sub    esp,0x14
c00163b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163bb:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00163c1:	e8 90 1f 00 00       	call   c0018356 <VAS::freeAllocatedPages(unsigned long)>
c00163c6:	b8 00 00 00 00       	mov    eax,0x0
c00163cb:	83 c4 1c             	add    esp,0x1c
c00163ce:	c3                   	ret    

c00163cf <realloc>:
c00163cf:	83 ec 14             	sub    esp,0x14
c00163d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163da:	e8 49 b3 fe ff       	call   c0001728 <dlrealloc>
c00163df:	83 c4 1c             	add    esp,0x1c
c00163e2:	c3                   	ret    

c00163e3 <malloc>:
c00163e3:	83 ec 18             	sub    esp,0x18
c00163e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163ea:	e8 fc ad fe ff       	call   c00011eb <dlmalloc>
c00163ef:	83 c4 1c             	add    esp,0x1c
c00163f2:	c3                   	ret    

c00163f3 <free>:
c00163f3:	83 ec 18             	sub    esp,0x18
c00163f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163fa:	e8 8e aa fe ff       	call   c0000e8d <dlfree>
c00163ff:	83 c4 1c             	add    esp,0x1c
c0016402:	c3                   	ret    

c0016403 <rfree>:
c0016403:	83 ec 18             	sub    esp,0x18
c0016406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001640a:	e8 7e aa fe ff       	call   c0000e8d <dlfree>
c001640f:	83 c4 1c             	add    esp,0x1c
c0016412:	c3                   	ret    

c0016413 <calloc>:
c0016413:	56                   	push   esi
c0016414:	53                   	push   ebx
c0016415:	83 ec 10             	sub    esp,0x10
c0016418:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001641c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0016421:	53                   	push   ebx
c0016422:	e8 bc ff ff ff       	call   c00163e3 <malloc>
c0016427:	89 c6                	mov    esi,eax
c0016429:	83 c4 0c             	add    esp,0xc
c001642c:	53                   	push   ebx
c001642d:	6a 00                	push   0x0
c001642f:	50                   	push   eax
c0016430:	e8 bb a0 fe ff       	call   c00004f0 <memset>
c0016435:	89 f0                	mov    eax,esi
c0016437:	83 c4 14             	add    esp,0x14
c001643a:	5b                   	pop    ebx
c001643b:	5e                   	pop    esi
c001643c:	c3                   	ret    

c001643d <KeEntryPoint>:
c001643d:	57                   	push   edi
c001643e:	bf f9 03 00 00       	mov    edi,0x3f9
c0016443:	56                   	push   esi
c0016444:	31 f6                	xor    esi,esi
c0016446:	53                   	push   ebx
c0016447:	89 fa                	mov    edx,edi
c0016449:	83 ec 2c             	sub    esp,0x2c
c001644c:	a1 00 05 00 00       	mov    eax,ds:0x500
c0016451:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016456:	89 f0                	mov    eax,esi
c0016458:	ee                   	out    dx,al
c0016459:	bb fb 03 00 00       	mov    ebx,0x3fb
c001645e:	b0 80                	mov    al,0x80
c0016460:	89 da                	mov    edx,ebx
c0016462:	ee                   	out    dx,al
c0016463:	b1 03                	mov    cl,0x3
c0016465:	ba f8 03 00 00       	mov    edx,0x3f8
c001646a:	88 c8                	mov    al,cl
c001646c:	ee                   	out    dx,al
c001646d:	89 f0                	mov    eax,esi
c001646f:	89 fa                	mov    edx,edi
c0016471:	ee                   	out    dx,al
c0016472:	88 c8                	mov    al,cl
c0016474:	89 da                	mov    edx,ebx
c0016476:	ee                   	out    dx,al
c0016477:	b0 c7                	mov    al,0xc7
c0016479:	ba fa 03 00 00       	mov    edx,0x3fa
c001647e:	ee                   	out    dx,al
c001647f:	b0 0b                	mov    al,0xb
c0016481:	ba fc 03 00 00       	mov    edx,0x3fc
c0016486:	ee                   	out    dx,al
c0016487:	68 44 10 03 c0       	push   0xc0031044
c001648c:	e8 89 2d 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0016491:	e8 2f 95 00 00       	call   c001f9c5 <KeDisplaySplashScreen()>
c0016496:	a1 24 05 00 00       	mov    eax,ds:0x524
c001649b:	05 ff 0f 00 00       	add    eax,0xfff
c00164a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00164a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00164a8:	e8 b3 03 00 00       	call   c0016860 <Phys::physicalMemorySetup(unsigned int)>
c00164ad:	e8 27 1c 00 00       	call   c00180d9 <Virt::virtualMemorySetup()>
c00164b2:	e8 58 94 00 00       	call   c001f90f <KeInitialiseAtexit()>
c00164b7:	58                   	pop    eax
c00164b8:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00164bc:	53                   	push   ebx
c00164bd:	e8 14 1f 00 00       	call   c00183d6 <VAS::VAS()>
c00164c2:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00164c8:	e8 4d 83 01 00       	call   c002e81a <_init>
c00164cd:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00164d4:	e8 0a ff ff ff       	call   c00163e3 <malloc>
c00164d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00164dc:	89 c6                	mov    esi,eax
c00164de:	e8 37 f2 ff ff       	call   c001571a <Computer::Computer()>
c00164e3:	53                   	push   ebx
c00164e4:	6a 00                	push   0x0
c00164e6:	6a 00                	push   0x0
c00164e8:	56                   	push   esi
c00164e9:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c00164ef:	e8 ec f5 ff ff       	call   c0015ae0 <Computer::open(int, int, void*)>
c00164f4:	83 c4 14             	add    esp,0x14
c00164f7:	53                   	push   ebx
c00164f8:	e8 a3 1f 00 00       	call   c00184a0 <VAS::~VAS()>
c00164fd:	83 c4 30             	add    esp,0x30
c0016500:	5b                   	pop    ebx
c0016501:	5e                   	pop    esi
c0016502:	5f                   	pop    edi
c0016503:	c3                   	ret    

c0016504 <Phys::allocateDMA(unsigned long)>:
c0016504:	55                   	push   ebp
c0016505:	31 ed                	xor    ebp,ebp
c0016507:	57                   	push   edi
c0016508:	56                   	push   esi
c0016509:	31 f6                	xor    esi,esi
c001650b:	53                   	push   ebx
c001650c:	31 db                	xor    ebx,ebx
c001650e:	83 ec 1c             	sub    esp,0x1c
c0016511:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016515:	05 ff 0f 00 00       	add    eax,0xfff
c001651a:	c1 e8 0c             	shr    eax,0xc
c001651d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016521:	31 c0                	xor    eax,eax
c0016523:	eb 1b                	jmp    c0016540 <Phys::allocateDMA(unsigned long)+0x3c>
c0016525:	8d 78 01             	lea    edi,[eax+0x1]
c0016528:	85 c0                	test   eax,eax
c001652a:	0f 44 eb             	cmove  ebp,ebx
c001652d:	0f 44 f3             	cmove  esi,ebx
c0016530:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016534:	74 37                	je     c001656d <Phys::allocateDMA(unsigned long)+0x69>
c0016536:	89 f8                	mov    eax,edi
c0016538:	83 c3 01             	add    ebx,0x1
c001653b:	83 fb 0f             	cmp    ebx,0xf
c001653e:	7f 13                	jg     c0016553 <Phys::allocateDMA(unsigned long)+0x4f>
c0016540:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016547:	74 dc                	je     c0016525 <Phys::allocateDMA(unsigned long)+0x21>
c0016549:	31 c0                	xor    eax,eax
c001654b:	83 c3 01             	add    ebx,0x1
c001654e:	83 fb 0f             	cmp    ebx,0xf
c0016551:	7e ed                	jle    c0016540 <Phys::allocateDMA(unsigned long)+0x3c>
c0016553:	83 ec 0c             	sub    esp,0xc
c0016556:	68 5c 10 03 c0       	push   0xc003105c
c001655b:	e8 42 9c 00 00       	call   c00201a2 <KePanic(char const*)>
c0016560:	83 c4 10             	add    esp,0x10
c0016563:	31 c0                	xor    eax,eax
c0016565:	83 c4 1c             	add    esp,0x1c
c0016568:	5b                   	pop    ebx
c0016569:	5e                   	pop    esi
c001656a:	5f                   	pop    edi
c001656b:	5d                   	pop    ebp
c001656c:	c3                   	ret    
c001656d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016571:	89 f2                	mov    edx,esi
c0016573:	c1 fa 04             	sar    edx,0x4
c0016576:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001657a:	01 f1                	add    ecx,esi
c001657c:	8d 51 0e             	lea    edx,[ecx+0xe]
c001657f:	83 e9 01             	sub    ecx,0x1
c0016582:	0f 48 ca             	cmovs  ecx,edx
c0016585:	c1 f9 04             	sar    ecx,0x4
c0016588:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001658c:	74 06                	je     c0016594 <Phys::allocateDMA(unsigned long)+0x90>
c001658e:	89 eb                	mov    ebx,ebp
c0016590:	31 c0                	xor    eax,eax
c0016592:	eb b7                	jmp    c001654b <Phys::allocateDMA(unsigned long)+0x47>
c0016594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016598:	85 d2                	test   edx,edx
c001659a:	74 17                	je     c00165b3 <Phys::allocateDMA(unsigned long)+0xaf>
c001659c:	8d 96 f0 a9 03 c0    	lea    edx,[esi-0x3ffc5610]
c00165a2:	8d 84 06 f1 a9 03 c0 	lea    eax,[esi+eax*1-0x3ffc560f]
c00165a9:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00165ac:	83 c2 01             	add    edx,0x1
c00165af:	39 d0                	cmp    eax,edx
c00165b1:	75 f6                	jne    c00165a9 <Phys::allocateDMA(unsigned long)+0xa5>
c00165b3:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c00165b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00165c1:	01 c2                	add    edx,eax
c00165c3:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00165c9:	85 c9                	test   ecx,ecx
c00165cb:	74 17                	je     c00165e4 <Phys::allocateDMA(unsigned long)+0xe0>
c00165cd:	83 ec 0c             	sub    esp,0xc
c00165d0:	68 5c 10 03 c0       	push   0xc003105c
c00165d5:	e8 c8 9b 00 00       	call   c00201a2 <KePanic(char const*)>
c00165da:	83 c4 10             	add    esp,0x10
c00165dd:	89 f8                	mov    eax,edi
c00165df:	e9 54 ff ff ff       	jmp    c0016538 <Phys::allocateDMA(unsigned long)+0x34>
c00165e4:	c1 e6 0c             	shl    esi,0xc
c00165e7:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c00165ed:	e9 73 ff ff ff       	jmp    c0016565 <Phys::allocateDMA(unsigned long)+0x61>

c00165f2 <Phys::freeDMA(unsigned long, unsigned long)>:
c00165f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165f6:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00165fc:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016601:	c1 ea 0c             	shr    edx,0xc
c0016604:	29 d0                	sub    eax,edx
c0016606:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c001660b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001660f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0016614:	c1 e8 0c             	shr    eax,0xc
c0016617:	85 d2                	test   edx,edx
c0016619:	74 11                	je     c001662c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001661b:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c0016620:	01 c2                	add    edx,eax
c0016622:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016625:	83 c0 01             	add    eax,0x1
c0016628:	39 d0                	cmp    eax,edx
c001662a:	75 f6                	jne    c0016622 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c001662c:	c3                   	ret    

c001662d <Phys::setPageState(unsigned long, bool)>:
c001662d:	57                   	push   edi
c001662e:	56                   	push   esi
c001662f:	8b 35 a8 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033aa8
c0016635:	53                   	push   ebx
c0016636:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001663b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001663f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016643:	89 ca                	mov    edx,ecx
c0016645:	83 e1 07             	and    ecx,0x7
c0016648:	c1 ea 03             	shr    edx,0x3
c001664b:	0f b6 c0             	movzx  eax,al
c001664e:	d3 c3                	rol    ebx,cl
c0016650:	01 d6                	add    esi,edx
c0016652:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0016655:	d3 e0                	shl    eax,cl
c0016657:	21 fb                	and    ebx,edi
c0016659:	88 1e                	mov    BYTE PTR [esi],bl
c001665b:	8b 1d a8 3a 03 c0    	mov    ebx,DWORD PTR ds:0xc0033aa8
c0016661:	01 da                	add    edx,ebx
c0016663:	8a 0a                	mov    cl,BYTE PTR [edx]
c0016665:	09 c8                	or     eax,ecx
c0016667:	88 02                	mov    BYTE PTR [edx],al
c0016669:	5b                   	pop    ebx
c001666a:	5e                   	pop    esi
c001666b:	5f                   	pop    edi
c001666c:	c3                   	ret    

c001666d <Phys::getPageState(unsigned long)>:
c001666d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016671:	8b 15 a8 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033aa8
c0016677:	89 c8                	mov    eax,ecx
c0016679:	83 e1 07             	and    ecx,0x7
c001667c:	c1 e8 03             	shr    eax,0x3
c001667f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016683:	d3 f8                	sar    eax,cl
c0016685:	83 e0 01             	and    eax,0x1
c0016688:	c3                   	ret    

c0016689 <Phys::freePage(unsigned long)>:
c0016689:	53                   	push   ebx
c001668a:	83 ec 08             	sub    esp,0x8
c001668d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016691:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0016697:	81 fa ff ff 00 00    	cmp    edx,0xffff
c001669d:	76 41                	jbe    c00166e0 <Phys::freePage(unsigned long)+0x57>
c001669f:	c1 e8 0c             	shr    eax,0xc
c00166a2:	50                   	push   eax
c00166a3:	89 c3                	mov    ebx,eax
c00166a5:	e8 c3 ff ff ff       	call   c001666d <Phys::getPageState(unsigned long)>
c00166aa:	5a                   	pop    edx
c00166ab:	84 c0                	test   al,al
c00166ad:	74 20                	je     c00166cf <Phys::freePage(unsigned long)+0x46>
c00166af:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00166b4:	83 ec 08             	sub    esp,0x8
c00166b7:	6a 00                	push   0x0
c00166b9:	53                   	push   ebx
c00166ba:	83 e8 01             	sub    eax,0x1
c00166bd:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00166c2:	e8 66 ff ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c00166c7:	83 c4 10             	add    esp,0x10
c00166ca:	83 c4 08             	add    esp,0x8
c00166cd:	5b                   	pop    ebx
c00166ce:	c3                   	ret    
c00166cf:	c7 44 24 10 01 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031101
c00166d7:	83 c4 08             	add    esp,0x8
c00166da:	5b                   	pop    ebx
c00166db:	e9 c2 9a 00 00       	jmp    c00201a2 <KePanic(char const*)>
c00166e0:	68 00 10 00 00       	push   0x1000
c00166e5:	50                   	push   eax
c00166e6:	e8 07 ff ff ff       	call   c00165f2 <Phys::freeDMA(unsigned long, unsigned long)>
c00166eb:	59                   	pop    ecx
c00166ec:	5b                   	pop    ebx
c00166ed:	83 c4 08             	add    esp,0x8
c00166f0:	5b                   	pop    ebx
c00166f1:	c3                   	ret    

c00166f2 <Phys::allocatePage()>:
c00166f2:	56                   	push   esi
c00166f3:	53                   	push   ebx
c00166f4:	83 ec 14             	sub    esp,0x14
c00166f7:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c00166fd:	89 f3                	mov    ebx,esi
c00166ff:	eb 0a                	jmp    c001670b <Phys::allocatePage()+0x19>
c0016701:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c0016707:	39 de                	cmp    esi,ebx
c0016709:	74 26                	je     c0016731 <Phys::allocatePage()+0x3f>
c001670b:	53                   	push   ebx
c001670c:	e8 5c ff ff ff       	call   c001666d <Phys::getPageState(unsigned long)>
c0016711:	5a                   	pop    edx
c0016712:	84 c0                	test   al,al
c0016714:	74 67                	je     c001677d <Phys::allocatePage()+0x8b>
c0016716:	83 c3 01             	add    ebx,0x1
c0016719:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c001671f:	75 e0                	jne    c0016701 <Phys::allocatePage()+0xf>
c0016721:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c001672b:	31 db                	xor    ebx,ebx
c001672d:	39 de                	cmp    esi,ebx
c001672f:	75 da                	jne    c001670b <Phys::allocatePage()+0x19>
c0016731:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c0016736:	83 ec 0c             	sub    esp,0xc
c0016739:	83 f0 01             	xor    eax,0x1
c001673c:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016741:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016746:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016749:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001674f:	50                   	push   eax
c0016750:	e8 79 27 00 00       	call   c0018ece <VAS::scanForEviction()>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	85 c0                	test   eax,eax
c001675a:	75 48                	jne    c00167a4 <Phys::allocatePage()+0xb2>
c001675c:	83 ec 0c             	sub    esp,0xc
c001675f:	68 84 10 03 c0       	push   0xc0031084
c0016764:	e8 39 9a 00 00       	call   c00201a2 <KePanic(char const*)>
c0016769:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	53                   	push   ebx
c0016773:	e8 f5 fe ff ff       	call   c001666d <Phys::getPageState(unsigned long)>
c0016778:	5a                   	pop    edx
c0016779:	84 c0                	test   al,al
c001677b:	75 99                	jne    c0016716 <Phys::allocatePage()+0x24>
c001677d:	6a 01                	push   0x1
c001677f:	53                   	push   ebx
c0016780:	e8 a8 fe ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016785:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c001678b:	59                   	pop    ecx
c001678c:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c0016791:	5b                   	pop    ebx
c0016792:	83 c2 01             	add    edx,0x1
c0016795:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c001679b:	c1 e0 0c             	shl    eax,0xc
c001679e:	83 c4 14             	add    esp,0x14
c00167a1:	5b                   	pop    ebx
c00167a2:	5e                   	pop    esi
c00167a3:	c3                   	ret    
c00167a4:	83 ec 08             	sub    esp,0x8
c00167a7:	89 c2                	mov    edx,eax
c00167a9:	6a 01                	push   0x1
c00167ab:	c1 ea 0c             	shr    edx,0xc
c00167ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167b2:	52                   	push   edx
c00167b3:	e8 75 fe ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167bf:	eb dd                	jmp    c001679e <Phys::allocatePage()+0xac>

c00167c1 <Phys::allocateContiguousPages(int)>:
c00167c1:	57                   	push   edi
c00167c2:	56                   	push   esi
c00167c3:	53                   	push   ebx
c00167c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167c8:	fa                   	cli    
c00167c9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00167ce:	31 db                	xor    ebx,ebx
c00167d0:	83 c0 01             	add    eax,0x1
c00167d3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00167d8:	85 db                	test   ebx,ebx
c00167da:	75 11                	jne    c00167ed <Phys::allocateContiguousPages(int)+0x2c>
c00167dc:	e8 11 ff ff ff       	call   c00166f2 <Phys::allocatePage()>
c00167e1:	83 fe 01             	cmp    esi,0x1
c00167e4:	89 c7                	mov    edi,eax
c00167e6:	74 21                	je     c0016809 <Phys::allocateContiguousPages(int)+0x48>
c00167e8:	bb 01 00 00 00       	mov    ebx,0x1
c00167ed:	e8 00 ff ff ff       	call   c00166f2 <Phys::allocatePage()>
c00167f2:	89 da                	mov    edx,ebx
c00167f4:	c1 e2 0c             	shl    edx,0xc
c00167f7:	01 fa                	add    edx,edi
c00167f9:	39 c2                	cmp    edx,eax
c00167fb:	74 22                	je     c001681f <Phys::allocateContiguousPages(int)+0x5e>
c00167fd:	83 fe 01             	cmp    esi,0x1
c0016800:	bb 01 00 00 00       	mov    ebx,0x1
c0016805:	89 c7                	mov    edi,eax
c0016807:	75 e4                	jne    c00167ed <Phys::allocateContiguousPages(int)+0x2c>
c0016809:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001680e:	83 e8 01             	sub    eax,0x1
c0016811:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016816:	75 01                	jne    c0016819 <Phys::allocateContiguousPages(int)+0x58>
c0016818:	fb                   	sti    
c0016819:	5b                   	pop    ebx
c001681a:	89 f8                	mov    eax,edi
c001681c:	5e                   	pop    esi
c001681d:	5f                   	pop    edi
c001681e:	c3                   	ret    
c001681f:	83 c3 01             	add    ebx,0x1
c0016822:	39 f3                	cmp    ebx,esi
c0016824:	75 b2                	jne    c00167d8 <Phys::allocateContiguousPages(int)+0x17>
c0016826:	eb e1                	jmp    c0016809 <Phys::allocateContiguousPages(int)+0x48>

c0016828 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0016828:	56                   	push   esi
c0016829:	53                   	push   ebx
c001682a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001682e:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016834:	73 06                	jae    c001683c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0016836:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c001683c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016840:	c1 eb 0c             	shr    ebx,0xc
c0016843:	c1 e8 0c             	shr    eax,0xc
c0016846:	39 d8                	cmp    eax,ebx
c0016848:	73 13                	jae    c001685d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001684a:	6a 00                	push   0x0
c001684c:	50                   	push   eax
c001684d:	8d 70 01             	lea    esi,[eax+0x1]
c0016850:	e8 d8 fd ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016855:	39 f3                	cmp    ebx,esi
c0016857:	89 f0                	mov    eax,esi
c0016859:	5a                   	pop    edx
c001685a:	59                   	pop    ecx
c001685b:	75 ed                	jne    c001684a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001685d:	5b                   	pop    ebx
c001685e:	5e                   	pop    esi
c001685f:	c3                   	ret    

c0016860 <Phys::physicalMemorySetup(unsigned int)>:
c0016860:	55                   	push   ebp
c0016861:	57                   	push   edi
c0016862:	56                   	push   esi
c0016863:	53                   	push   ebx
c0016864:	31 db                	xor    ebx,ebx
c0016866:	83 ec 40             	sub    esp,0x40
c0016869:	6a 10                	push   0x10
c001686b:	6a 00                	push   0x0
c001686d:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016872:	e8 79 9c fe ff       	call   c00004f0 <memset>
c0016877:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001687b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016880:	05 00 10 00 00       	add    eax,0x1000
c0016885:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016889:	5a                   	pop    edx
c001688a:	59                   	pop    ecx
c001688b:	50                   	push   eax
c001688c:	68 17 11 03 c0       	push   0xc0031117
c0016891:	e8 84 29 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0016896:	83 c4 10             	add    esp,0x10
c0016899:	83 ec 08             	sub    esp,0x8
c001689c:	6a 01                	push   0x1
c001689e:	53                   	push   ebx
c001689f:	83 c3 01             	add    ebx,0x1
c00168a2:	e8 86 fd ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c00168a7:	83 c4 10             	add    esp,0x10
c00168aa:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00168b0:	75 e7                	jne    c0016899 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00168b2:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00168b9:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00168c0:	c1 e0 08             	shl    eax,0x8
c00168c3:	09 c2                	or     edx,eax
c00168c5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00168c9:	0f 84 43 01 00 00    	je     c0016a12 <Phys::physicalMemorySetup(unsigned int)+0x1b2>
c00168cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00168d7:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00168dc:	e9 82 00 00 00       	jmp    c0016963 <Phys::physicalMemorySetup(unsigned int)+0x103>
c00168e1:	ba 00 00 08 00       	mov    edx,0x80000
c00168e6:	89 c1                	mov    ecx,eax
c00168e8:	39 f2                	cmp    edx,esi
c00168ea:	19 f9                	sbb    ecx,edi
c00168ec:	0f 82 c0 00 00 00    	jb     c00169b2 <Phys::physicalMemorySetup(unsigned int)+0x152>
c00168f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00168f6:	89 c5                	mov    ebp,eax
c00168f8:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00168fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016900:	19 cd                	sbb    ebp,ecx
c0016902:	0f 83 af 00 00 00    	jae    c00169b7 <Phys::physicalMemorySetup(unsigned int)+0x157>
c0016908:	89 d6                	mov    esi,edx
c001690a:	ba 00 00 0a 00       	mov    edx,0xa0000
c001690f:	39 f2                	cmp    edx,esi
c0016911:	89 cf                	mov    edi,ecx
c0016913:	19 c8                	sbb    eax,ecx
c0016915:	73 07                	jae    c001691e <Phys::physicalMemorySetup(unsigned int)+0xbe>
c0016917:	be 00 00 0a 00       	mov    esi,0xa0000
c001691c:	31 ff                	xor    edi,edi
c001691e:	89 f2                	mov    edx,esi
c0016920:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0016925:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c001692b:	89 f9                	mov    ecx,edi
c001692d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016931:	83 d1 ff             	adc    ecx,0xffffffff
c0016934:	39 d0                	cmp    eax,edx
c0016936:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001693a:	b8 00 00 00 00       	mov    eax,0x0
c001693f:	19 c8                	sbb    eax,ecx
c0016941:	0f 82 9d 01 00 00    	jb     c0016ae4 <Phys::physicalMemorySetup(unsigned int)+0x284>
c0016947:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001694b:	83 c3 18             	add    ebx,0x18
c001694e:	83 c6 01             	add    esi,0x1
c0016951:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016955:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016959:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c001695d:	0f 84 bf 00 00 00    	je     c0016a22 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c0016963:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016965:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016968:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001696b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001696e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016972:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016975:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016979:	01 f0                	add    eax,esi
c001697b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001697f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016983:	55                   	push   ebp
c0016984:	11 fa                	adc    edx,edi
c0016986:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001698a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001698e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016992:	50                   	push   eax
c0016993:	56                   	push   esi
c0016994:	68 b4 10 03 c0       	push   0xc00310b4
c0016999:	e8 7c 28 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001699e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00169a2:	83 c4 10             	add    esp,0x10
c00169a5:	09 f8                	or     eax,edi
c00169a7:	75 79                	jne    c0016a22 <Phys::physicalMemorySetup(unsigned int)+0x1c2>
c00169a9:	83 fd 01             	cmp    ebp,0x1
c00169ac:	0f 84 2f ff ff ff    	je     c00168e1 <Phys::physicalMemorySetup(unsigned int)+0x81>
c00169b2:	83 fd 01             	cmp    ebp,0x1
c00169b5:	75 90                	jne    c0016947 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00169b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00169bb:	31 d2                	xor    edx,edx
c00169bd:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c00169c1:	89 c8                	mov    eax,ecx
c00169c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169c7:	19 d1                	sbb    ecx,edx
c00169c9:	0f 82 78 ff ff ff    	jb     c0016947 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00169cf:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c00169d4:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c00169d8:	b9 00 00 00 00       	mov    ecx,0x0
c00169dd:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c00169e1:	0f 83 60 ff ff ff    	jae    c0016947 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c00169e7:	39 c6                	cmp    esi,eax
c00169e9:	19 d7                	sbb    edi,edx
c00169eb:	0f 83 ff 00 00 00    	jae    c0016af0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c00169f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00169f5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00169f9:	29 c7                	sub    edi,eax
c00169fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00169ff:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0016a03:	19 d5                	sbb    ebp,edx
c0016a05:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0016a09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016a0d:	e9 de 00 00 00       	jmp    c0016af0 <Phys::physicalMemorySetup(unsigned int)+0x290>
c0016a12:	83 ec 0c             	sub    esp,0xc
c0016a15:	68 2f 11 03 c0       	push   0xc003112f
c0016a1a:	e8 83 97 00 00       	call   c00201a2 <KePanic(char const*)>
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	83 ec 08             	sub    esp,0x8
c0016a25:	bb 60 00 00 00       	mov    ebx,0x60
c0016a2a:	6a 00                	push   0x0
c0016a2c:	6a 06                	push   0x6
c0016a2e:	e8 fa fb ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016a33:	58                   	pop    eax
c0016a34:	5a                   	pop    edx
c0016a35:	6a 00                	push   0x0
c0016a37:	6a 07                	push   0x7
c0016a39:	e8 ef fb ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016a3e:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	83 c1 02             	add    ecx,0x2
c0016a4a:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c0016a50:	83 ec 08             	sub    esp,0x8
c0016a53:	6a 00                	push   0x0
c0016a55:	53                   	push   ebx
c0016a56:	83 c3 01             	add    ebx,0x1
c0016a59:	e8 cf fb ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0016a67:	75 e7                	jne    c0016a50 <Phys::physicalMemorySetup(unsigned int)+0x1f0>
c0016a69:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a6e:	bb 40 01 00 00       	mov    ebx,0x140
c0016a73:	83 c0 20             	add    eax,0x20
c0016a76:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a7b:	eb 26                	jmp    c0016aa3 <Phys::physicalMemorySetup(unsigned int)+0x243>
c0016a7d:	83 ec 08             	sub    esp,0x8
c0016a80:	6a 00                	push   0x0
c0016a82:	53                   	push   ebx
c0016a83:	83 c3 01             	add    ebx,0x1
c0016a86:	e8 a2 fb ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016a8b:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a90:	83 c4 10             	add    esp,0x10
c0016a93:	83 c0 01             	add    eax,0x1
c0016a96:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016a9c:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016aa1:	74 07                	je     c0016aaa <Phys::physicalMemorySetup(unsigned int)+0x24a>
c0016aa3:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016aa8:	7e d3                	jle    c0016a7d <Phys::physicalMemorySetup(unsigned int)+0x21d>
c0016aaa:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016aaf:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ab4:	7f 26                	jg     c0016adc <Phys::physicalMemorySetup(unsigned int)+0x27c>
c0016ab6:	83 ec 08             	sub    esp,0x8
c0016ab9:	6a 00                	push   0x0
c0016abb:	53                   	push   ebx
c0016abc:	83 c3 01             	add    ebx,0x1
c0016abf:	e8 69 fb ff ff       	call   c001662d <Phys::setPageState(unsigned long, bool)>
c0016ac4:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016ac9:	83 c4 10             	add    esp,0x10
c0016acc:	83 c0 01             	add    eax,0x1
c0016acf:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016ad5:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016ada:	75 d3                	jne    c0016aaf <Phys::physicalMemorySetup(unsigned int)+0x24f>
c0016adc:	83 c4 3c             	add    esp,0x3c
c0016adf:	5b                   	pop    ebx
c0016ae0:	5e                   	pop    esi
c0016ae1:	5f                   	pop    edi
c0016ae2:	5d                   	pop    ebp
c0016ae3:	c3                   	ret    
c0016ae4:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0016ae8:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0016af0:	83 ec 04             	sub    esp,0x4
c0016af3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0016af7:	56                   	push   esi
c0016af8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016afc:	57                   	push   edi
c0016afd:	68 d8 10 03 c0       	push   0xc00310d8
c0016b02:	e8 13 27 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0016b07:	5d                   	pop    ebp
c0016b08:	58                   	pop    eax
c0016b09:	56                   	push   esi
c0016b0a:	57                   	push   edi
c0016b0b:	e8 18 fd ff ff       	call   c0016828 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0016b10:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016b14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b18:	83 c4 0c             	add    esp,0xc
c0016b1b:	8b 35 ec a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9ec
c0016b21:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016b25:	01 f0                	add    eax,esi
c0016b27:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016b2c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016b33:	52                   	push   edx
c0016b34:	50                   	push   eax
c0016b35:	68 3d 11 03 c0       	push   0xc003113d
c0016b3a:	e8 db 26 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0016b3f:	83 c4 10             	add    esp,0x10
c0016b42:	e9 00 fe ff ff       	jmp    c0016947 <Phys::physicalMemorySetup(unsigned int)+0xe7>
c0016b47:	90                   	nop

c0016b48 <Pipe::isAtty()>:
c0016b48:	31 c0                	xor    eax,eax
c0016b4a:	c3                   	ret    
c0016b4b:	90                   	nop

c0016b4c <Pipe::~Pipe()>:
c0016b4c:	83 ec 0c             	sub    esp,0xc
c0016b4f:	ba 9c 11 03 c0       	mov    edx,0xc003119c
c0016b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b58:	89 10                	mov    DWORD PTR [eax],edx
c0016b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b5e:	83 ec 0c             	sub    esp,0xc
c0016b61:	50                   	push   eax
c0016b62:	e8 35 11 00 00       	call   c0017c9c <UnixFile::~UnixFile()>
c0016b67:	83 c4 10             	add    esp,0x10
c0016b6a:	90                   	nop
c0016b6b:	83 c4 0c             	add    esp,0xc
c0016b6e:	c3                   	ret    
c0016b6f:	90                   	nop

c0016b70 <Pipe::~Pipe()>:
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	83 ec 0c             	sub    esp,0xc
c0016b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b7a:	e8 cd ff ff ff       	call   c0016b4c <Pipe::~Pipe()>
c0016b7f:	83 c4 10             	add    esp,0x10
c0016b82:	83 ec 08             	sub    esp,0x8
c0016b85:	6a 20                	push   0x20
c0016b87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016b8b:	e8 8c 25 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0016b90:	83 c4 10             	add    esp,0x10
c0016b93:	83 c4 0c             	add    esp,0xc
c0016b96:	c3                   	ret    
c0016b97:	90                   	nop

c0016b98 <Pipe::write(unsigned long long, void*, int*)>:
c0016b98:	55                   	push   ebp
c0016b99:	57                   	push   edi
c0016b9a:	56                   	push   esi
c0016b9b:	53                   	push   ebx
c0016b9c:	83 ec 1c             	sub    esp,0x1c
c0016b9f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ba3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016ba7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016bab:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016bae:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bb2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016bb5:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bb8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016bbc:	89 d8                	mov    eax,ebx
c0016bbe:	89 d6                	mov    esi,edx
c0016bc0:	89 d7                	mov    edi,edx
c0016bc2:	c1 ff 1f             	sar    edi,0x1f
c0016bc5:	03 34 24             	add    esi,DWORD PTR [esp]
c0016bc8:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016bcc:	c1 f8 1f             	sar    eax,0x1f
c0016bcf:	39 f3                	cmp    ebx,esi
c0016bd1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bd9:	19 f8                	sbb    eax,edi
c0016bdb:	b8 01 00 00 00       	mov    eax,0x1
c0016be0:	72 72                	jb     c0016c54 <Pipe::write(unsigned long long, void*, int*)+0xbc>
c0016be2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016be5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016be9:	01 d0                	add    eax,edx
c0016beb:	99                   	cdq    
c0016bec:	f7 fb                	idiv   ebx
c0016bee:	89 d8                	mov    eax,ebx
c0016bf0:	29 d0                	sub    eax,edx
c0016bf2:	89 d6                	mov    esi,edx
c0016bf4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016bf7:	89 c3                	mov    ebx,eax
c0016bf9:	c1 fb 1f             	sar    ebx,0x1f
c0016bfc:	39 c2                	cmp    edx,eax
c0016bfe:	19 df                	sbb    edi,ebx
c0016c00:	bb 00 00 00 00       	mov    ebx,0x0
c0016c05:	72 04                	jb     c0016c0b <Pipe::write(unsigned long long, void*, int*)+0x73>
c0016c07:	89 d3                	mov    ebx,edx
c0016c09:	29 c3                	sub    ebx,eax
c0016c0b:	89 d0                	mov    eax,edx
c0016c0d:	29 d8                	sub    eax,ebx
c0016c0f:	74 0d                	je     c0016c1e <Pipe::write(unsigned long long, void*, int*)+0x86>
c0016c11:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c14:	89 c1                	mov    ecx,eax
c0016c16:	01 f7                	add    edi,esi
c0016c18:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016c1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c1e:	85 db                	test   ebx,ebx
c0016c20:	74 0d                	je     c0016c2f <Pipe::write(unsigned long long, void*, int*)+0x97>
c0016c22:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c26:	89 d9                	mov    ecx,ebx
c0016c28:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016c2b:	89 c6                	mov    esi,eax
c0016c2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c2f:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016c32:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c37:	75 10                	jne    c0016c49 <Pipe::write(unsigned long long, void*, int*)+0xb1>
c0016c39:	83 ec 0c             	sub    esp,0xc
c0016c3c:	68 59 11 03 c0       	push   0xc0031159
c0016c41:	e8 5c 95 00 00       	call   c00201a2 <KePanic(char const*)>
c0016c46:	83 c4 10             	add    esp,0x10
c0016c49:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c4d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016c50:	89 08                	mov    DWORD PTR [eax],ecx
c0016c52:	31 c0                	xor    eax,eax
c0016c54:	83 c4 1c             	add    esp,0x1c
c0016c57:	5b                   	pop    ebx
c0016c58:	5e                   	pop    esi
c0016c59:	5f                   	pop    edi
c0016c5a:	5d                   	pop    ebp
c0016c5b:	c3                   	ret    

c0016c5c <Pipe::read(unsigned long long, void*, int*)>:
c0016c5c:	55                   	push   ebp
c0016c5d:	57                   	push   edi
c0016c5e:	56                   	push   esi
c0016c5f:	53                   	push   ebx
c0016c60:	83 ec 1c             	sub    esp,0x1c
c0016c63:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016c67:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c6b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016c6f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016c72:	89 c8                	mov    eax,ecx
c0016c74:	99                   	cdq    
c0016c75:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016c79:	74 24                	je     c0016c9f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c7b:	39 f9                	cmp    ecx,edi
c0016c7d:	89 d1                	mov    ecx,edx
c0016c7f:	19 f1                	sbb    ecx,esi
c0016c81:	73 1c                	jae    c0016c9f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016c83:	fa                   	cli    
c0016c84:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016c8a:	e8 0d e5 00 00       	call   c002519c <schedule()>
c0016c8f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016c94:	48                   	dec    eax
c0016c95:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016c9a:	75 d3                	jne    c0016c6f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c9c:	fb                   	sti    
c0016c9d:	eb d0                	jmp    c0016c6f <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016c9f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016ca3:	39 f8                	cmp    eax,edi
c0016ca5:	89 d1                	mov    ecx,edx
c0016ca7:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0016cab:	19 f1                	sbb    ecx,esi
c0016cad:	73 08                	jae    c0016cb7 <Pipe::read(unsigned long long, void*, int*)+0x5b>
c0016caf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cb7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016cba:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016cbd:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0016cc1:	29 f7                	sub    edi,esi
c0016cc3:	89 f8                	mov    eax,edi
c0016cc5:	99                   	cdq    
c0016cc6:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0016cca:	89 d0                	mov    eax,edx
c0016ccc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cd0:	19 c2                	sbb    edx,eax
c0016cd2:	89 f8                	mov    eax,edi
c0016cd4:	0f 42 44 24 08       	cmovb  eax,DWORD PTR [esp+0x8]
c0016cd9:	89 ea                	mov    edx,ebp
c0016cdb:	29 c2                	sub    edx,eax
c0016cdd:	85 c0                	test   eax,eax
c0016cdf:	74 0b                	je     c0016cec <Pipe::read(unsigned long long, void*, int*)+0x90>
c0016ce1:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016ce4:	89 c1                	mov    ecx,eax
c0016ce6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016cea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cec:	85 d2                	test   edx,edx
c0016cee:	74 0d                	je     c0016cfd <Pipe::read(unsigned long long, void*, int*)+0xa1>
c0016cf0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016cf4:	89 d1                	mov    ecx,edx
c0016cf6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016cf9:	89 c7                	mov    edi,eax
c0016cfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cfd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016d00:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016d03:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016d06:	99                   	cdq    
c0016d07:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016d0b:	89 f7                	mov    edi,esi
c0016d0d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0016d11:	c1 ff 1f             	sar    edi,0x1f
c0016d14:	57                   	push   edi
c0016d15:	56                   	push   esi
c0016d16:	52                   	push   edx
c0016d17:	50                   	push   eax
c0016d18:	e8 e3 79 01 00       	call   c002e700 <__umoddi3>
c0016d1d:	83 c4 10             	add    esp,0x10
c0016d20:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016d25:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016d28:	75 10                	jne    c0016d3a <Pipe::read(unsigned long long, void*, int*)+0xde>
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	68 76 11 03 c0       	push   0xc0031176
c0016d32:	e8 6b 94 00 00       	call   c00201a2 <KePanic(char const*)>
c0016d37:	83 c4 10             	add    esp,0x10
c0016d3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d3e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d42:	89 10                	mov    DWORD PTR [eax],edx
c0016d44:	83 c4 1c             	add    esp,0x1c
c0016d47:	31 c0                	xor    eax,eax
c0016d49:	5b                   	pop    ebx
c0016d4a:	5e                   	pop    esi
c0016d4b:	5f                   	pop    edi
c0016d4c:	5d                   	pop    ebp
c0016d4d:	c3                   	ret    

c0016d4e <Pipe::Pipe(int)>:
c0016d4e:	83 ec 0c             	sub    esp,0xc
c0016d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d55:	83 ec 08             	sub    esp,0x8
c0016d58:	6a 00                	push   0x0
c0016d5a:	50                   	push   eax
c0016d5b:	e8 56 0d 00 00       	call   c0017ab6 <UnixFile::UnixFile(int)>
c0016d60:	83 c4 10             	add    esp,0x10
c0016d63:	ba 9c 11 03 c0       	mov    edx,0xc003119c
c0016d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6c:	89 10                	mov    DWORD PTR [eax],edx
c0016d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016d76:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d88:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016d8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d93:	83 ec 0c             	sub    esp,0xc
c0016d96:	50                   	push   eax
c0016d97:	e8 47 f6 ff ff       	call   c00163e3 <malloc>
c0016d9c:	83 c4 10             	add    esp,0x10
c0016d9f:	89 c2                	mov    edx,eax
c0016da1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dac:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016db0:	90                   	nop
c0016db1:	83 c4 0c             	add    esp,0xc
c0016db4:	c3                   	ret    
c0016db5:	90                   	nop

c0016db6 <VgaText::isAtty()>:
c0016db6:	b0 01                	mov    al,0x1
c0016db8:	c3                   	ret    
c0016db9:	90                   	nop

c0016dba <VgaText::~VgaText()>:
c0016dba:	83 ec 0c             	sub    esp,0xc
c0016dbd:	ba e4 11 03 c0       	mov    edx,0xc00311e4
c0016dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc6:	89 10                	mov    DWORD PTR [eax],edx
c0016dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	50                   	push   eax
c0016dd0:	e8 c7 0e 00 00       	call   c0017c9c <UnixFile::~UnixFile()>
c0016dd5:	83 c4 10             	add    esp,0x10
c0016dd8:	90                   	nop
c0016dd9:	83 c4 0c             	add    esp,0xc
c0016ddc:	c3                   	ret    
c0016ddd:	90                   	nop

c0016dde <VgaText::~VgaText()>:
c0016dde:	83 ec 0c             	sub    esp,0xc
c0016de1:	83 ec 0c             	sub    esp,0xc
c0016de4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016de8:	e8 cd ff ff ff       	call   c0016dba <VgaText::~VgaText()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	83 ec 08             	sub    esp,0x8
c0016df3:	68 84 01 00 00       	push   0x184
c0016df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016dfc:	e8 1b 23 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	83 c4 0c             	add    esp,0xc
c0016e07:	c3                   	ret    

c0016e08 <VgaText::read(unsigned long long, void*, int*)>:
c0016e08:	83 ec 10             	sub    esp,0x10
c0016e0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016e13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e17:	e8 82 53 00 00       	call   c001c19e <readKeyboard(VgaText*, char*, unsigned long)>
c0016e1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016e20:	89 02                	mov    DWORD PTR [edx],eax
c0016e22:	31 c0                	xor    eax,eax
c0016e24:	83 c4 1c             	add    esp,0x1c
c0016e27:	c3                   	ret    

c0016e28 <setTerminalScrollLock(bool)>:
c0016e28:	c3                   	ret    

c0016e29 <doTerminalCycle()>:
c0016e29:	c3                   	ret    

c0016e2a <addToTerminalCycle(VgaText*)>:
c0016e2a:	c3                   	ret    

c0016e2b <scrollTerminalScrollLock(int)>:
c0016e2b:	c3                   	ret    

c0016e2c <VgaText::updateTitle()>:
c0016e2c:	c3                   	ret    
c0016e2d:	90                   	nop

c0016e2e <VgaText::load()>:
c0016e2e:	c3                   	ret    
c0016e2f:	90                   	nop

c0016e30 <VgaText::updateCursor()>:
c0016e30:	83 ec 14             	sub    esp,0x14
c0016e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e37:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016e3a:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016e3d:	e8 62 0e 01 00       	call   c0027ca4 <HalConsoleCursorUpdate(int, int)>
c0016e42:	83 c4 1c             	add    esp,0x1c
c0016e45:	c3                   	ret    

c0016e46 <VgaText::doANSI_SGR(int)>:
c0016e46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e4e:	85 d2                	test   edx,edx
c0016e50:	75 0b                	jne    c0016e5d <VgaText::doANSI_SGR(int)+0x17>
c0016e52:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016e55:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016e58:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016e5b:	eb 59                	jmp    c0016eb6 <VgaText::doANSI_SGR(int)+0x70>
c0016e5d:	83 fa 07             	cmp    edx,0x7
c0016e60:	75 0b                	jne    c0016e6d <VgaText::doANSI_SGR(int)+0x27>
c0016e62:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016e65:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016e68:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016e6b:	eb 49                	jmp    c0016eb6 <VgaText::doANSI_SGR(int)+0x70>
c0016e6d:	83 fa 1b             	cmp    edx,0x1b
c0016e70:	74 e0                	je     c0016e52 <VgaText::doANSI_SGR(int)+0xc>
c0016e72:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016e75:	83 f9 07             	cmp    ecx,0x7
c0016e78:	77 09                	ja     c0016e83 <VgaText::doANSI_SGR(int)+0x3d>
c0016e7a:	8b 14 8d e0 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc520]
c0016e81:	eb 20                	jmp    c0016ea3 <VgaText::doANSI_SGR(int)+0x5d>
c0016e83:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016e86:	83 f9 07             	cmp    ecx,0x7
c0016e89:	77 09                	ja     c0016e94 <VgaText::doANSI_SGR(int)+0x4e>
c0016e8b:	8b 14 8d e0 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc520]
c0016e92:	eb 22                	jmp    c0016eb6 <VgaText::doANSI_SGR(int)+0x70>
c0016e94:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016e97:	83 f9 07             	cmp    ecx,0x7
c0016e9a:	77 0b                	ja     c0016ea7 <VgaText::doANSI_SGR(int)+0x61>
c0016e9c:	8b 14 95 98 39 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc668]
c0016ea3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016ea6:	c3                   	ret    
c0016ea7:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016eaa:	83 f9 07             	cmp    ecx,0x7
c0016ead:	77 0a                	ja     c0016eb9 <VgaText::doANSI_SGR(int)+0x73>
c0016eaf:	8b 14 95 70 39 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc690]
c0016eb6:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016eb9:	c3                   	ret    

c0016eba <VgaText::setDefaultBgColour(VgaColour)>:
c0016eba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ebe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ec2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ec5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016ec8:	c3                   	ret    
c0016ec9:	90                   	nop

c0016eca <VgaText::setDefaultFgColour(VgaColour)>:
c0016eca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ece:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ed2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016ed5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016ed8:	c3                   	ret    
c0016ed9:	90                   	nop

c0016eda <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016eda:	53                   	push   ebx
c0016edb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016edf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016ee3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ee7:	51                   	push   ecx
c0016ee8:	e8 cd ff ff ff       	call   c0016eba <VgaText::setDefaultBgColour(VgaColour)>
c0016eed:	58                   	pop    eax
c0016eee:	5a                   	pop    edx
c0016eef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016ef3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016ef7:	5b                   	pop    ebx
c0016ef8:	eb d0                	jmp    c0016eca <VgaText::setDefaultFgColour(VgaColour)>

c0016efa <VgaText::setTitleTextColour(VgaColour)>:
c0016efa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016efe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f02:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016f05:	c3                   	ret    

c0016f06 <VgaText::setTitleColour(VgaColour)>:
c0016f06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016f11:	c3                   	ret    

c0016f12 <VgaText::setTitle(char*)>:
c0016f12:	c3                   	ret    
c0016f13:	90                   	nop

c0016f14 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f18:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f1d:	83 e0 0f             	and    eax,0xf
c0016f20:	c1 e2 04             	shl    edx,0x4
c0016f23:	09 d0                	or     eax,edx
c0016f25:	c3                   	ret    

c0016f26 <VgaText::scrollScreen()>:
c0016f26:	55                   	push   ebp
c0016f27:	57                   	push   edi
c0016f28:	56                   	push   esi
c0016f29:	be 01 00 00 00       	mov    esi,0x1
c0016f2e:	53                   	push   ebx
c0016f2f:	83 ec 0c             	sub    esp,0xc
c0016f32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016f36:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016f39:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016f3f:	31 ff                	xor    edi,edi
c0016f41:	01 e9                	add    ecx,ebp
c0016f43:	8a 01                	mov    al,BYTE PTR [ecx]
c0016f45:	83 fe 18             	cmp    esi,0x18
c0016f48:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016f4e:	75 20                	jne    c0016f70 <VgaText::scrollScreen()+0x4a>
c0016f50:	f7 c7 01 00 00 00    	test   edi,0x1
c0016f56:	74 15                	je     c0016f6d <VgaText::scrollScreen()+0x47>
c0016f58:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f5c:	50                   	push   eax
c0016f5d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f61:	50                   	push   eax
c0016f62:	e8 ad ff ff ff       	call   c0016f14 <VgaText::combineColours(unsigned char, unsigned char)>
c0016f67:	5a                   	pop    edx
c0016f68:	5a                   	pop    edx
c0016f69:	88 01                	mov    BYTE PTR [ecx],al
c0016f6b:	eb 03                	jmp    c0016f70 <VgaText::scrollScreen()+0x4a>
c0016f6d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016f70:	47                   	inc    edi
c0016f71:	41                   	inc    ecx
c0016f72:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016f78:	75 c9                	jne    c0016f43 <VgaText::scrollScreen()+0x1d>
c0016f7a:	46                   	inc    esi
c0016f7b:	83 fe 19             	cmp    esi,0x19
c0016f7e:	75 b9                	jne    c0016f39 <VgaText::scrollScreen()+0x13>
c0016f80:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016f86:	75 1f                	jne    c0016fa7 <VgaText::scrollScreen()+0x81>
c0016f88:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016f8c:	74 05                	je     c0016f93 <VgaText::scrollScreen()+0x6d>
c0016f8e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016f91:	eb 14                	jmp    c0016fa7 <VgaText::scrollScreen()+0x81>
c0016f93:	50                   	push   eax
c0016f94:	50                   	push   eax
c0016f95:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016f99:	50                   	push   eax
c0016f9a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016f9e:	50                   	push   eax
c0016f9f:	e8 94 0b 01 00       	call   c0027b38 <HalConsoleScroll(int, int)>
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016fab:	83 c4 0c             	add    esp,0xc
c0016fae:	5b                   	pop    ebx
c0016faf:	5e                   	pop    esi
c0016fb0:	5f                   	pop    edi
c0016fb1:	5d                   	pop    ebp
c0016fb2:	e9 79 fe ff ff       	jmp    c0016e30 <VgaText::updateCursor()>
c0016fb7:	90                   	nop

c0016fb8 <VgaText::combineCharAndColour(char, unsigned char)>:
c0016fb8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016fbd:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016fc2:	c1 e0 08             	shl    eax,0x8
c0016fc5:	09 d0                	or     eax,edx
c0016fc7:	c3                   	ret    

c0016fc8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016fc8:	55                   	push   ebp
c0016fc9:	57                   	push   edi
c0016fca:	56                   	push   esi
c0016fcb:	53                   	push   ebx
c0016fcc:	83 ec 1c             	sub    esp,0x1c
c0016fcf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fd3:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016fd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fdb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016fdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016fe3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016fe7:	0f b6 c3             	movzx  eax,bl
c0016fea:	50                   	push   eax
c0016feb:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016ff0:	50                   	push   eax
c0016ff1:	e8 1e ff ff ff       	call   c0016f14 <VgaText::combineColours(unsigned char, unsigned char)>
c0016ff6:	5a                   	pop    edx
c0016ff7:	59                   	pop    ecx
c0016ff8:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016ffd:	0f b6 c0             	movzx  eax,al
c0017000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017004:	50                   	push   eax
c0017005:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017009:	e8 aa ff ff ff       	call   c0016fb8 <VgaText::combineCharAndColour(char, unsigned char)>
c001700e:	5a                   	pop    edx
c001700f:	6b d7 50             	imul   edx,edi,0x50
c0017012:	59                   	pop    ecx
c0017013:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017016:	01 f2                	add    edx,esi
c0017018:	0f b7 d2             	movzx  edx,dx
c001701b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c001701f:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0017025:	75 28                	jne    c001704f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0017027:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001702b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001702f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0017033:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0017037:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001703b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001703f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017043:	83 c4 1c             	add    esp,0x1c
c0017046:	5b                   	pop    ebx
c0017047:	5e                   	pop    esi
c0017048:	5f                   	pop    edi
c0017049:	5d                   	pop    ebp
c001704a:	e9 f1 0b 01 00       	jmp    c0027c40 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001704f:	83 c4 1c             	add    esp,0x1c
c0017052:	5b                   	pop    ebx
c0017053:	5e                   	pop    esi
c0017054:	5f                   	pop    edi
c0017055:	5d                   	pop    ebp
c0017056:	c3                   	ret    
c0017057:	90                   	nop

c0017058 <VgaText::getCursorX()>:
c0017058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001705c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001705f:	c3                   	ret    

c0017060 <VgaText::getCursorY()>:
c0017060:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017064:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017067:	c3                   	ret    

c0017068 <VgaText::setCursor(int, int)>:
c0017068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001706c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017070:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0017073:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017077:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001707a:	e9 b1 fd ff ff       	jmp    c0016e30 <VgaText::updateCursor()>

c001707f <setActiveTerminal(VgaText*)>:
c001707f:	53                   	push   ebx
c0017080:	83 ec 08             	sub    esp,0x8
c0017083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017087:	85 db                	test   ebx,ebx
c0017089:	75 11                	jne    c001709c <setActiveTerminal(VgaText*)+0x1d>
c001708b:	c7 44 24 10 b0 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc00311b0
c0017093:	83 c4 08             	add    esp,0x8
c0017096:	5b                   	pop    ebx
c0017097:	e9 06 91 00 00       	jmp    c00201a2 <KePanic(char const*)>
c001709c:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c00170a1:	85 c0                	test   eax,eax
c00170a3:	74 0c                	je     c00170b1 <setActiveTerminal(VgaText*)+0x32>
c00170a5:	83 ec 0c             	sub    esp,0xc
c00170a8:	50                   	push   eax
c00170a9:	e8 82 fd ff ff       	call   c0016e30 <VgaText::updateCursor()>
c00170ae:	83 c4 10             	add    esp,0x10
c00170b1:	50                   	push   eax
c00170b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00170b5:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c00170bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00170be:	53                   	push   ebx
c00170bf:	e8 a4 ff ff ff       	call   c0017068 <VgaText::setCursor(int, int)>
c00170c4:	83 c4 18             	add    esp,0x18
c00170c7:	5b                   	pop    ebx
c00170c8:	c3                   	ret    
c00170c9:	90                   	nop

c00170ca <VgaText::clearScreen()>:
c00170ca:	57                   	push   edi
c00170cb:	56                   	push   esi
c00170cc:	31 f6                	xor    esi,esi
c00170ce:	53                   	push   ebx
c00170cf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170d3:	52                   	push   edx
c00170d4:	6a 00                	push   0x0
c00170d6:	6a 00                	push   0x0
c00170d8:	53                   	push   ebx
c00170d9:	e8 8a ff ff ff       	call   c0017068 <VgaText::setCursor(int, int)>
c00170de:	83 c4 10             	add    esp,0x10
c00170e1:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00170e8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00170eb:	7e 20                	jle    c001710d <VgaText::clearScreen()+0x43>
c00170ed:	31 ff                	xor    edi,edi
c00170ef:	50                   	push   eax
c00170f0:	50                   	push   eax
c00170f1:	56                   	push   esi
c00170f2:	57                   	push   edi
c00170f3:	47                   	inc    edi
c00170f4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00170f7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00170fa:	6a 20                	push   0x20
c00170fc:	53                   	push   ebx
c00170fd:	e8 c6 fe ff ff       	call   c0016fc8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017102:	83 c4 20             	add    esp,0x20
c0017105:	83 ff 50             	cmp    edi,0x50
c0017108:	75 e5                	jne    c00170ef <VgaText::clearScreen()+0x25>
c001710a:	46                   	inc    esi
c001710b:	eb db                	jmp    c00170e8 <VgaText::clearScreen()+0x1e>
c001710d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017114:	5b                   	pop    ebx
c0017115:	5e                   	pop    esi
c0017116:	5f                   	pop    edi
c0017117:	c3                   	ret    

c0017118 <VgaText::setCursorX(int)>:
c0017118:	83 ec 10             	sub    esp,0x10
c001711b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001711f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017126:	50                   	push   eax
c0017127:	e8 3c ff ff ff       	call   c0017068 <VgaText::setCursor(int, int)>
c001712c:	83 c4 1c             	add    esp,0x1c
c001712f:	c3                   	ret    

c0017130 <VgaText::setCursorY(int)>:
c0017130:	83 ec 10             	sub    esp,0x10
c0017133:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017137:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001713b:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001713e:	50                   	push   eax
c001713f:	e8 24 ff ff ff       	call   c0017068 <VgaText::setCursor(int, int)>
c0017144:	83 c4 1c             	add    esp,0x1c
c0017147:	c3                   	ret    

c0017148 <VgaText::incrementCursor(bool)>:
c0017148:	56                   	push   esi
c0017149:	53                   	push   ebx
c001714a:	51                   	push   ecx
c001714b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001714f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017153:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017156:	40                   	inc    eax
c0017157:	83 f8 50             	cmp    eax,0x50
c001715a:	74 05                	je     c0017161 <VgaText::incrementCursor(bool)+0x19>
c001715c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001715f:	eb 24                	jmp    c0017185 <VgaText::incrementCursor(bool)+0x3d>
c0017161:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017168:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001716b:	8d 50 01             	lea    edx,[eax+0x1]
c001716e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017171:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017174:	75 0f                	jne    c0017185 <VgaText::incrementCursor(bool)+0x3d>
c0017176:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017179:	83 ec 0c             	sub    esp,0xc
c001717c:	53                   	push   ebx
c001717d:	e8 a4 fd ff ff       	call   c0016f26 <VgaText::scrollScreen()>
c0017182:	83 c4 10             	add    esp,0x10
c0017185:	89 f0                	mov    eax,esi
c0017187:	84 c0                	test   al,al
c0017189:	74 0c                	je     c0017197 <VgaText::incrementCursor(bool)+0x4f>
c001718b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001718f:	5a                   	pop    edx
c0017190:	5b                   	pop    ebx
c0017191:	5e                   	pop    esi
c0017192:	e9 99 fc ff ff       	jmp    c0016e30 <VgaText::updateCursor()>
c0017197:	58                   	pop    eax
c0017198:	5b                   	pop    ebx
c0017199:	5e                   	pop    esi
c001719a:	c3                   	ret    
c001719b:	90                   	nop

c001719c <VgaText::decrementCursor(bool)>:
c001719c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00171a0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00171a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00171a7:	85 c0                	test   eax,eax
c00171a9:	74 04                	je     c00171af <VgaText::decrementCursor(bool)+0x13>
c00171ab:	48                   	dec    eax
c00171ac:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00171af:	84 c9                	test   cl,cl
c00171b1:	74 09                	je     c00171bc <VgaText::decrementCursor(bool)+0x20>
c00171b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00171b7:	e9 74 fc ff ff       	jmp    c0016e30 <VgaText::updateCursor()>
c00171bc:	c3                   	ret    
c00171bd:	90                   	nop

c00171be <VgaText::putchar(char, VgaColour, VgaColour)>:
c00171be:	53                   	push   ebx
c00171bf:	83 ec 08             	sub    esp,0x8
c00171c2:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00171c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00171d3:	83 f8 07             	cmp    eax,0x7
c00171d6:	75 21                	jne    c00171f9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00171d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00171e0:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00171e8:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00171f0:	83 c4 08             	add    esp,0x8
c00171f3:	5b                   	pop    ebx
c00171f4:	e9 d6 3a 00 00       	jmp    c001accf <Krnl::beep(int, int, bool)>
c00171f9:	83 f8 0d             	cmp    eax,0xd
c00171fc:	75 09                	jne    c0017207 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00171fe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017205:	eb 2d                	jmp    c0017234 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0017207:	83 f8 0a             	cmp    eax,0xa
c001720a:	75 31                	jne    c001723d <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001720c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017213:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017216:	8d 50 01             	lea    edx,[eax+0x1]
c0017219:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001721c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001721f:	75 0f                	jne    c0017230 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017221:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	53                   	push   ebx
c0017228:	e8 f9 fc ff ff       	call   c0016f26 <VgaText::scrollScreen()>
c001722d:	83 c4 10             	add    esp,0x10
c0017230:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017234:	83 c4 08             	add    esp,0x8
c0017237:	5b                   	pop    ebx
c0017238:	e9 f3 fb ff ff       	jmp    c0016e30 <VgaText::updateCursor()>
c001723d:	83 f8 08             	cmp    eax,0x8
c0017240:	75 25                	jne    c0017267 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017242:	50                   	push   eax
c0017243:	50                   	push   eax
c0017244:	6a 01                	push   0x1
c0017246:	53                   	push   ebx
c0017247:	e8 50 ff ff ff       	call   c001719c <VgaText::decrementCursor(bool)>
c001724c:	5a                   	pop    edx
c001724d:	59                   	pop    ecx
c001724e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017251:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017254:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017257:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001725a:	6a 20                	push   0x20
c001725c:	53                   	push   ebx
c001725d:	e8 66 fd ff ff       	call   c0016fc8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017262:	83 c4 28             	add    esp,0x28
c0017265:	5b                   	pop    ebx
c0017266:	c3                   	ret    
c0017267:	83 ec 08             	sub    esp,0x8
c001726a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001726d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017270:	51                   	push   ecx
c0017271:	52                   	push   edx
c0017272:	50                   	push   eax
c0017273:	53                   	push   ebx
c0017274:	e8 4f fd ff ff       	call   c0016fc8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017279:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001727d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0017285:	83 c4 28             	add    esp,0x28
c0017288:	5b                   	pop    ebx
c0017289:	e9 ba fe ff ff       	jmp    c0017148 <VgaText::incrementCursor(bool)>

c001728e <VgaText::putchar(char)>:
c001728e:	57                   	push   edi
c001728f:	56                   	push   esi
c0017290:	53                   	push   ebx
c0017291:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017295:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017299:	0f be c2             	movsx  eax,dl
c001729c:	83 f8 5b             	cmp    eax,0x5b
c001729f:	75 18                	jne    c00172b9 <VgaText::putchar(char)+0x2b>
c00172a1:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00172a5:	74 20                	je     c00172c7 <VgaText::putchar(char)+0x39>
c00172a7:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00172ad:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00172b4:	e9 b8 00 00 00       	jmp    c0017371 <VgaText::putchar(char)+0xe3>
c00172b9:	83 f8 1b             	cmp    eax,0x1b
c00172bc:	75 09                	jne    c00172c7 <VgaText::putchar(char)+0x39>
c00172be:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00172c2:	e9 aa 00 00 00       	jmp    c0017371 <VgaText::putchar(char)+0xe3>
c00172c7:	0f b6 7b 41          	movzx  edi,BYTE PTR [ebx+0x41]
c00172cb:	89 f9                	mov    ecx,edi
c00172cd:	84 c9                	test   cl,cl
c00172cf:	0f 84 8c 00 00 00    	je     c0017361 <VgaText::putchar(char)+0xd3>
c00172d5:	8d 4a c0             	lea    ecx,[edx-0x40]
c00172d8:	80 f9 3e             	cmp    cl,0x3e
c00172db:	77 70                	ja     c001734d <VgaText::putchar(char)+0xbf>
c00172dd:	83 f8 6d             	cmp    eax,0x6d
c00172e0:	75 3f                	jne    c0017321 <VgaText::putchar(char)+0x93>
c00172e2:	31 f6                	xor    esi,esi
c00172e4:	31 d2                	xor    edx,edx
c00172e6:	31 c0                	xor    eax,eax
c00172e8:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00172eb:	7e 25                	jle    c0017312 <VgaText::putchar(char)+0x84>
c00172ed:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00172f2:	83 fa 3b             	cmp    edx,0x3b
c00172f5:	75 0f                	jne    c0017306 <VgaText::putchar(char)+0x78>
c00172f7:	50                   	push   eax
c00172f8:	53                   	push   ebx
c00172f9:	e8 48 fb ff ff       	call   c0016e46 <VgaText::doANSI_SGR(int)>
c00172fe:	31 d2                	xor    edx,edx
c0017300:	59                   	pop    ecx
c0017301:	58                   	pop    eax
c0017302:	31 c0                	xor    eax,eax
c0017304:	eb 09                	jmp    c001730f <VgaText::putchar(char)+0x81>
c0017306:	6b c0 0a             	imul   eax,eax,0xa
c0017309:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001730d:	89 fa                	mov    edx,edi
c001730f:	46                   	inc    esi
c0017310:	eb d6                	jmp    c00172e8 <VgaText::putchar(char)+0x5a>
c0017312:	84 d2                	test   dl,dl
c0017314:	74 2f                	je     c0017345 <VgaText::putchar(char)+0xb7>
c0017316:	50                   	push   eax
c0017317:	53                   	push   ebx
c0017318:	e8 29 fb ff ff       	call   c0016e46 <VgaText::doANSI_SGR(int)>
c001731d:	58                   	pop    eax
c001731e:	5a                   	pop    edx
c001731f:	eb 24                	jmp    c0017345 <VgaText::putchar(char)+0xb7>
c0017321:	83 f8 4a             	cmp    eax,0x4a
c0017324:	75 1f                	jne    c0017345 <VgaText::putchar(char)+0xb7>
c0017326:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001732a:	75 19                	jne    c0017345 <VgaText::putchar(char)+0xb7>
c001732c:	83 ec 0c             	sub    esp,0xc
c001732f:	53                   	push   ebx
c0017330:	e8 95 fd ff ff       	call   c00170ca <VgaText::clearScreen()>
c0017335:	83 c4 0c             	add    esp,0xc
c0017338:	6a 00                	push   0x0
c001733a:	6a 00                	push   0x0
c001733c:	53                   	push   ebx
c001733d:	e8 26 fd ff ff       	call   c0017068 <VgaText::setCursor(int, int)>
c0017342:	83 c4 10             	add    esp,0x10
c0017345:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001734b:	eb 24                	jmp    c0017371 <VgaText::putchar(char)+0xe3>
c001734d:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0017350:	83 f8 0e             	cmp    eax,0xe
c0017353:	7f 1c                	jg     c0017371 <VgaText::putchar(char)+0xe3>
c0017355:	8d 48 01             	lea    ecx,[eax+0x1]
c0017358:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001735b:	88 54 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],dl
c001735f:	eb 10                	jmp    c0017371 <VgaText::putchar(char)+0xe3>
c0017361:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017364:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017367:	50                   	push   eax
c0017368:	53                   	push   ebx
c0017369:	e8 50 fe ff ff       	call   c00171be <VgaText::putchar(char, VgaColour, VgaColour)>
c001736e:	83 c4 10             	add    esp,0x10
c0017371:	5b                   	pop    ebx
c0017372:	5e                   	pop    esi
c0017373:	5f                   	pop    edi
c0017374:	c3                   	ret    
c0017375:	90                   	nop

c0017376 <VgaText::putx(unsigned int)>:
c0017376:	57                   	push   edi
c0017377:	b9 11 00 00 00       	mov    ecx,0x11
c001737c:	56                   	push   esi
c001737d:	be be 11 03 c0       	mov    esi,0xc00311be
c0017382:	53                   	push   ebx
c0017383:	83 ec 20             	sub    esp,0x20
c0017386:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001738a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001738e:	fc                   	cld    
c001738f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017391:	be 08 00 00 00       	mov    esi,0x8
c0017396:	50                   	push   eax
c0017397:	50                   	push   eax
c0017398:	89 d8                	mov    eax,ebx
c001739a:	c1 e8 1c             	shr    eax,0x1c
c001739d:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00173a2:	c1 e3 04             	shl    ebx,0x4
c00173a5:	50                   	push   eax
c00173a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00173aa:	e8 df fe ff ff       	call   c001728e <VgaText::putchar(char)>
c00173af:	83 c4 10             	add    esp,0x10
c00173b2:	4e                   	dec    esi
c00173b3:	75 e1                	jne    c0017396 <VgaText::putx(unsigned int)+0x20>
c00173b5:	83 c4 20             	add    esp,0x20
c00173b8:	5b                   	pop    ebx
c00173b9:	5e                   	pop    esi
c00173ba:	5f                   	pop    edi
c00173bb:	c3                   	ret    

c00173bc <VgaText::puts(char const*)>:
c00173bc:	53                   	push   ebx
c00173bd:	83 ec 08             	sub    esp,0x8
c00173c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00173c4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00173c7:	85 c0                	test   eax,eax
c00173c9:	74 12                	je     c00173dd <VgaText::puts(char const*)+0x21>
c00173cb:	51                   	push   ecx
c00173cc:	43                   	inc    ebx
c00173cd:	51                   	push   ecx
c00173ce:	50                   	push   eax
c00173cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00173d3:	e8 b6 fe ff ff       	call   c001728e <VgaText::putchar(char)>
c00173d8:	83 c4 10             	add    esp,0x10
c00173db:	eb e7                	jmp    c00173c4 <VgaText::puts(char const*)+0x8>
c00173dd:	83 c4 08             	add    esp,0x8
c00173e0:	5b                   	pop    ebx
c00173e1:	c3                   	ret    

c00173e2 <VgaText::write(unsigned long long, void*, int*)>:
c00173e2:	55                   	push   ebp
c00173e3:	57                   	push   edi
c00173e4:	56                   	push   esi
c00173e5:	53                   	push   ebx
c00173e6:	83 ec 0c             	sub    esp,0xc
c00173e9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00173ed:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00173f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00173f5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00173fc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00173ff:	39 eb                	cmp    ebx,ebp
c0017401:	74 13                	je     c0017416 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0017403:	50                   	push   eax
c0017404:	43                   	inc    ebx
c0017405:	50                   	push   eax
c0017406:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001740a:	50                   	push   eax
c001740b:	56                   	push   esi
c001740c:	e8 7d fe ff ff       	call   c001728e <VgaText::putchar(char)>
c0017411:	83 c4 10             	add    esp,0x10
c0017414:	eb e9                	jmp    c00173ff <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017416:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001741d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017421:	89 38                	mov    DWORD PTR [eax],edi
c0017423:	83 c4 0c             	add    esp,0xc
c0017426:	31 c0                	xor    eax,eax
c0017428:	5b                   	pop    ebx
c0017429:	5e                   	pop    esi
c001742a:	5f                   	pop    edi
c001742b:	5d                   	pop    ebp
c001742c:	c3                   	ret    
c001742d:	90                   	nop

c001742e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001742e:	55                   	push   ebp
c001742f:	57                   	push   edi
c0017430:	56                   	push   esi
c0017431:	53                   	push   ebx
c0017432:	83 ec 0c             	sub    esp,0xc
c0017435:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001743e:	c6 85 81 00 00 00 01 	mov    BYTE PTR [ebp+0x81],0x1
c0017445:	50                   	push   eax
c0017446:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001744b:	50                   	push   eax
c001744c:	e8 c3 fa ff ff       	call   c0016f14 <VgaText::combineColours(unsigned char, unsigned char)>
c0017451:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017455:	5a                   	pop    edx
c0017456:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c0017459:	59                   	pop    ecx
c001745a:	0f b6 f8             	movzx  edi,al
c001745d:	0f b7 db             	movzx  ebx,bx
c0017460:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0017464:	01 db                	add    ebx,ebx
c0017466:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017469:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001746c:	85 c0                	test   eax,eax
c001746e:	0f 84 ef 00 00 00    	je     c0017563 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0017474:	83 f8 0d             	cmp    eax,0xd
c0017477:	75 0c                	jne    c0017485 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0017479:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017480:	e9 d8 00 00 00       	jmp    c001755d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017485:	83 f8 0a             	cmp    eax,0xa
c0017488:	75 44                	jne    c00174ce <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c001748a:	c7 45 14 00 00 00 00 	mov    DWORD PTR [ebp+0x14],0x0
c0017491:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017494:	8d 48 01             	lea    ecx,[eax+0x1]
c0017497:	3b 4d 10             	cmp    ecx,DWORD PTR [ebp+0x10]
c001749a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c001749d:	75 0f                	jne    c00174ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c001749f:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00174a2:	83 ec 0c             	sub    esp,0xc
c00174a5:	55                   	push   ebp
c00174a6:	e8 7b fa ff ff       	call   c0016f26 <VgaText::scrollScreen()>
c00174ab:	83 c4 10             	add    esp,0x10
c00174ae:	83 ec 0c             	sub    esp,0xc
c00174b1:	55                   	push   ebp
c00174b2:	e8 79 f9 ff ff       	call   c0016e30 <VgaText::updateCursor()>
c00174b7:	83 c4 10             	add    esp,0x10
c00174ba:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00174be:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00174c1:	0f b7 db             	movzx  ebx,bx
c00174c4:	01 db                	add    ebx,ebx
c00174c6:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c00174c9:	e9 8f 00 00 00       	jmp    c001755d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00174ce:	83 f8 08             	cmp    eax,0x8
c00174d1:	75 34                	jne    c0017507 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c00174d3:	51                   	push   ecx
c00174d4:	51                   	push   ecx
c00174d5:	6a 01                	push   0x1
c00174d7:	55                   	push   ebp
c00174d8:	e8 bf fc ff ff       	call   c001719c <VgaText::decrementCursor(bool)>
c00174dd:	5b                   	pop    ebx
c00174de:	58                   	pop    eax
c00174df:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c00174e2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00174e5:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00174e8:	ff 75 34             	push   DWORD PTR [ebp+0x34]
c00174eb:	6a 20                	push   0x20
c00174ed:	55                   	push   ebp
c00174ee:	e8 d5 fa ff ff       	call   c0016fc8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00174f3:	83 c4 20             	add    esp,0x20
c00174f6:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c00174fa:	03 5d 14             	add    ebx,DWORD PTR [ebp+0x14]
c00174fd:	0f b7 db             	movzx  ebx,bx
c0017500:	01 db                	add    ebx,ebx
c0017502:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c0017505:	eb 56                	jmp    c001755d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017507:	52                   	push   edx
c0017508:	52                   	push   edx
c0017509:	57                   	push   edi
c001750a:	50                   	push   eax
c001750b:	e8 a8 fa ff ff       	call   c0016fb8 <VgaText::combineCharAndColour(char, unsigned char)>
c0017510:	83 c4 10             	add    esp,0x10
c0017513:	66 89 03             	mov    WORD PTR [ebx],ax
c0017516:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c001751c:	75 1d                	jne    c001753b <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	ff 75 18             	push   DWORD PTR [ebp+0x18]
c0017524:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0017527:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752f:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0017532:	50                   	push   eax
c0017533:	e8 08 07 01 00       	call   c0027c40 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0017538:	83 c4 20             	add    esp,0x20
c001753b:	50                   	push   eax
c001753c:	83 c3 02             	add    ebx,0x2
c001753f:	50                   	push   eax
c0017540:	6a 00                	push   0x0
c0017542:	55                   	push   ebp
c0017543:	e8 00 fc ff ff       	call   c0017148 <VgaText::incrementCursor(bool)>
c0017548:	83 c4 10             	add    esp,0x10
c001754b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
c001754f:	75 0c                	jne    c001755d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017551:	6b 5d 18 50          	imul   ebx,DWORD PTR [ebp+0x18],0x50
c0017555:	0f b7 db             	movzx  ebx,bx
c0017558:	01 db                	add    ebx,ebx
c001755a:	03 5d 0c             	add    ebx,DWORD PTR [ebp+0xc]
c001755d:	46                   	inc    esi
c001755e:	e9 06 ff ff ff       	jmp    c0017469 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017563:	83 ec 0c             	sub    esp,0xc
c0017566:	55                   	push   ebp
c0017567:	e8 c4 f8 ff ff       	call   c0016e30 <VgaText::updateCursor()>
c001756c:	c6 85 81 00 00 00 00 	mov    BYTE PTR [ebp+0x81],0x0
c0017573:	83 c4 1c             	add    esp,0x1c
c0017576:	5b                   	pop    ebx
c0017577:	5e                   	pop    esi
c0017578:	5f                   	pop    edi
c0017579:	5d                   	pop    ebp
c001757a:	c3                   	ret    
c001757b:	90                   	nop

c001757c <VgaText::VgaText(char const*)>:
c001757c:	56                   	push   esi
c001757d:	53                   	push   ebx
c001757e:	83 ec 04             	sub    esp,0x4
c0017581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017585:	83 ec 08             	sub    esp,0x8
c0017588:	6a 00                	push   0x0
c001758a:	50                   	push   eax
c001758b:	e8 26 05 00 00       	call   c0017ab6 <UnixFile::UnixFile(int)>
c0017590:	83 c4 10             	add    esp,0x10
c0017593:	ba e4 11 03 c0       	mov    edx,0xc00311e4
c0017598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759c:	89 10                	mov    DWORD PTR [eax],edx
c001759e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175a2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00175a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ad:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00175b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b8:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00175bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c0:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00175c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c8:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00175cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00175da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175de:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00175e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175e9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00175f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00175fb:	83 ec 0c             	sub    esp,0xc
c00175fe:	6a 01                	push   0x1
c0017600:	e8 00 09 00 00       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c0017605:	83 c4 10             	add    esp,0x10
c0017608:	89 c2                	mov    edx,eax
c001760a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001760e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017611:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001761b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001761e:	89 c6                	mov    esi,eax
c0017620:	e8 cd f0 ff ff       	call   c00166f2 <Phys::allocatePage()>
c0017625:	68 05 0c 00 00       	push   0xc05
c001762a:	56                   	push   esi
c001762b:	50                   	push   eax
c001762c:	53                   	push   ebx
c001762d:	e8 dc 0f 00 00       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017639:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001763c:	83 ec 04             	sub    esp,0x4
c001763f:	68 a0 0f 00 00       	push   0xfa0
c0017644:	6a 00                	push   0x0
c0017646:	50                   	push   eax
c0017647:	e8 a4 8e fe ff       	call   c00004f0 <memset>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	83 ec 04             	sub    esp,0x4
c0017652:	6a 00                	push   0x0
c0017654:	6a 07                	push   0x7
c0017656:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001765a:	e8 7b f8 ff ff       	call   c0016eda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001765f:	83 c4 10             	add    esp,0x10
c0017662:	83 ec 04             	sub    esp,0x4
c0017665:	6a 00                	push   0x0
c0017667:	6a 00                	push   0x0
c0017669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001766d:	e8 f6 f9 ff ff       	call   c0017068 <VgaText::setCursor(int, int)>
c0017672:	83 c4 10             	add    esp,0x10
c0017675:	83 ec 0c             	sub    esp,0xc
c0017678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001767c:	e8 49 fa ff ff       	call   c00170ca <VgaText::clearScreen()>
c0017681:	83 c4 10             	add    esp,0x10
c0017684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017688:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001768c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017690:	05 82 00 00 00       	add    eax,0x82
c0017695:	83 ec 04             	sub    esp,0x4
c0017698:	68 80 00 00 00       	push   0x80
c001769d:	6a 00                	push   0x0
c001769f:	50                   	push   eax
c00176a0:	e8 4b 8e fe ff       	call   c00004f0 <memset>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ac:	05 02 01 00 00       	add    eax,0x102
c00176b1:	83 ec 04             	sub    esp,0x4
c00176b4:	68 80 00 00 00       	push   0x80
c00176b9:	6a 00                	push   0x0
c00176bb:	50                   	push   eax
c00176bc:	e8 2f 8e fe ff       	call   c00004f0 <memset>
c00176c1:	83 c4 10             	add    esp,0x10
c00176c4:	90                   	nop
c00176c5:	83 c4 04             	add    esp,0x4
c00176c8:	5b                   	pop    ebx
c00176c9:	5e                   	pop    esi
c00176ca:	c3                   	ret    
c00176cb:	90                   	nop

c00176cc <VgaText::receiveKey(unsigned char)>:
c00176cc:	55                   	push   ebp
c00176cd:	57                   	push   edi
c00176ce:	56                   	push   esi
c00176cf:	53                   	push   ebx
c00176d0:	83 ec 2c             	sub    esp,0x2c
c00176d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00176d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176db:	89 fd                	mov    ebp,edi
c00176dd:	81 e5 ff 00 00 00    	and    ebp,0xff
c00176e3:	0f 84 48 01 00 00    	je     c0017831 <VgaText::receiveKey(unsigned char)+0x165>
c00176e9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c00176ef:	83 fd 08             	cmp    ebp,0x8
c00176f2:	75 6a                	jne    c001775e <VgaText::receiveKey(unsigned char)+0x92>
c00176f4:	83 ec 0c             	sub    esp,0xc
c00176f7:	56                   	push   esi
c00176f8:	e8 83 8e fe ff       	call   c0000580 <strlen>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	85 c0                	test   eax,eax
c0017702:	0f 84 ef 00 00 00    	je     c00177f7 <VgaText::receiveKey(unsigned char)+0x12b>
c0017708:	50                   	push   eax
c0017709:	50                   	push   eax
c001770a:	6a 08                	push   0x8
c001770c:	53                   	push   ebx
c001770d:	e8 7c fb ff ff       	call   c001728e <VgaText::putchar(char)>
c0017712:	89 34 24             	mov    DWORD PTR [esp],esi
c0017715:	e8 66 8e fe ff       	call   c0000580 <strlen>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017725:	83 fa 1f             	cmp    edx,0x1f
c0017728:	89 d0                	mov    eax,edx
c001772a:	7f 1c                	jg     c0017748 <VgaText::receiveKey(unsigned char)+0x7c>
c001772c:	83 e8 08             	sub    eax,0x8
c001772f:	3c 02                	cmp    al,0x2
c0017731:	76 15                	jbe    c0017748 <VgaText::receiveKey(unsigned char)+0x7c>
c0017733:	83 fa 0d             	cmp    edx,0xd
c0017736:	74 10                	je     c0017748 <VgaText::receiveKey(unsigned char)+0x7c>
c0017738:	57                   	push   edi
c0017739:	57                   	push   edi
c001773a:	68 cf 11 03 c0       	push   0xc00311cf
c001773f:	53                   	push   ebx
c0017740:	e8 77 fc ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0017745:	83 c4 10             	add    esp,0x10
c0017748:	83 ec 0c             	sub    esp,0xc
c001774b:	56                   	push   esi
c001774c:	e8 2f 8e fe ff       	call   c0000580 <strlen>
c0017751:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017759:	e9 96 00 00 00       	jmp    c00177f4 <VgaText::receiveKey(unsigned char)+0x128>
c001775e:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0017764:	83 ec 0c             	sub    esp,0xc
c0017767:	50                   	push   eax
c0017768:	e8 13 8e fe ff       	call   c0000580 <strlen>
c001776d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017770:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017774:	e8 07 8e fe ff       	call   c0000580 <strlen>
c0017779:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001777d:	83 c4 10             	add    esp,0x10
c0017780:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0017784:	3d 80 00 00 00       	cmp    eax,0x80
c0017789:	0f 87 a2 00 00 00    	ja     c0017831 <VgaText::receiveKey(unsigned char)+0x165>
c001778f:	8d 47 ff             	lea    eax,[edi-0x1]
c0017792:	3c 1e                	cmp    al,0x1e
c0017794:	77 35                	ja     c00177cb <VgaText::receiveKey(unsigned char)+0xff>
c0017796:	8d 47 f7             	lea    eax,[edi-0x9]
c0017799:	3c 01                	cmp    al,0x1
c001779b:	76 2e                	jbe    c00177cb <VgaText::receiveKey(unsigned char)+0xff>
c001779d:	83 fd 0d             	cmp    ebp,0xd
c00177a0:	74 29                	je     c00177cb <VgaText::receiveKey(unsigned char)+0xff>
c00177a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177a5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177a8:	68 d5 11 03 c0       	push   0xc00311d5
c00177ad:	53                   	push   ebx
c00177ae:	e8 7b fc ff ff       	call   c001742e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177b3:	8d 47 40             	lea    eax,[edi+0x40]
c00177b6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00177b9:	0f b6 c0             	movzx  eax,al
c00177bc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00177bf:	50                   	push   eax
c00177c0:	53                   	push   ebx
c00177c1:	e8 f8 f9 ff ff       	call   c00171be <VgaText::putchar(char, VgaColour, VgaColour)>
c00177c6:	83 c4 20             	add    esp,0x20
c00177c9:	eb 11                	jmp    c00177dc <VgaText::receiveKey(unsigned char)+0x110>
c00177cb:	51                   	push   ecx
c00177cc:	89 f8                	mov    eax,edi
c00177ce:	51                   	push   ecx
c00177cf:	0f be c0             	movsx  eax,al
c00177d2:	50                   	push   eax
c00177d3:	53                   	push   ebx
c00177d4:	e8 b5 fa ff ff       	call   c001728e <VgaText::putchar(char)>
c00177d9:	83 c4 10             	add    esp,0x10
c00177dc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177e1:	89 f8                	mov    eax,edi
c00177e3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00177e7:	52                   	push   edx
c00177e8:	52                   	push   edx
c00177e9:	8d 44 24 26          	lea    eax,[esp+0x26]
c00177ed:	50                   	push   eax
c00177ee:	56                   	push   esi
c00177ef:	e8 7c 90 fe ff       	call   c0000870 <strcat>
c00177f4:	83 c4 10             	add    esp,0x10
c00177f7:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c00177fe:	75 0f                	jne    c001780f <VgaText::receiveKey(unsigned char)+0x143>
c0017800:	83 fd 1c             	cmp    ebp,0x1c
c0017803:	77 2c                	ja     c0017831 <VgaText::receiveKey(unsigned char)+0x165>
c0017805:	b8 08 04 00 10       	mov    eax,0x10000408
c001780a:	0f a3 e8             	bt     eax,ebp
c001780d:	73 22                	jae    c0017831 <VgaText::receiveKey(unsigned char)+0x165>
c001780f:	50                   	push   eax
c0017810:	81 c3 02 01 00 00    	add    ebx,0x102
c0017816:	50                   	push   eax
c0017817:	56                   	push   esi
c0017818:	53                   	push   ebx
c0017819:	e8 52 90 fe ff       	call   c0000870 <strcat>
c001781e:	83 c4 0c             	add    esp,0xc
c0017821:	68 80 00 00 00       	push   0x80
c0017826:	6a 00                	push   0x0
c0017828:	56                   	push   esi
c0017829:	e8 c2 8c fe ff       	call   c00004f0 <memset>
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	83 c4 2c             	add    esp,0x2c
c0017834:	5b                   	pop    ebx
c0017835:	5e                   	pop    esi
c0017836:	5f                   	pop    edi
c0017837:	5d                   	pop    ebp
c0017838:	c3                   	ret    
c0017839:	90                   	nop

c001783a <VgaText::doUpdate()>:
c001783a:	c3                   	ret    
c001783b:	90                   	nop

c001783c <TSS::TSS()>:
c001783c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017840:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017847:	90                   	nop
c0017848:	c3                   	ret    
c0017849:	90                   	nop
c001784a:	66 90                	xchg   ax,ax

c001784c <TSS::setESP(unsigned long)>:
c001784c:	55                   	push   ebp
c001784d:	89 e5                	mov    ebp,esp
c001784f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017852:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017855:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017858:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001785b:	90                   	nop
c001785c:	5d                   	pop    ebp
c001785d:	c3                   	ret    
c001785e:	66 90                	xchg   ax,ax

c0017860 <TSS::flush()>:
c0017860:	55                   	push   ebp
c0017861:	89 e5                	mov    ebp,esp
c0017863:	83 ec 10             	sub    esp,0x10
c0017866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017869:	8b 00                	mov    eax,DWORD PTR [eax]
c001786b:	83 c8 03             	or     eax,0x3
c001786e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0017872:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0017876:	66 89 d0             	mov    ax,dx
c0017879:	0f 00 d8             	ltr    ax
c001787c:	90                   	nop
c001787d:	c9                   	leave  
c001787e:	c3                   	ret    
c001787f:	90                   	nop

c0017880 <TSS::setup(unsigned long, unsigned long)>:
c0017880:	55                   	push   ebp
c0017881:	89 e5                	mov    ebp,esp
c0017883:	83 ec 18             	sub    esp,0x18
c0017886:	83 ec 0c             	sub    esp,0xc
c0017889:	6a 68                	push   0x68
c001788b:	e8 53 eb ff ff       	call   c00163e3 <malloc>
c0017890:	83 c4 10             	add    esp,0x10
c0017893:	89 c2                	mov    edx,eax
c0017895:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017898:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001789b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001789e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178a1:	83 ec 04             	sub    esp,0x4
c00178a4:	6a 68                	push   0x68
c00178a6:	6a 00                	push   0x0
c00178a8:	50                   	push   eax
c00178a9:	e8 42 8c fe ff       	call   c00004f0 <memset>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178b7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00178bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178c3:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00178c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00178d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00178d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178db:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00178e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178e7:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00178ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178f3:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00178f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178ff:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017908:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001790b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017914:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017917:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001791d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017920:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017923:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017926:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001792c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001792f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017932:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001793b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017942:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017945:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017948:	0f 20 da             	mov    edx,cr3
c001794b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001794e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0017951:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0017954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017957:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001795a:	83 ec 08             	sub    esp,0x8
c001795d:	50                   	push   eax
c001795e:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017961:	50                   	push   eax
c0017962:	e8 ed e2 ff ff       	call   c0015c54 <GDTEntry::setBase(unsigned int)>
c0017967:	83 c4 10             	add    esp,0x10
c001796a:	83 ec 08             	sub    esp,0x8
c001796d:	6a 68                	push   0x68
c001796f:	8d 45 ec             	lea    eax,[ebp-0x14]
c0017972:	50                   	push   eax
c0017973:	e8 f8 e2 ff ff       	call   c0015c70 <GDTEntry::setLimit(unsigned int)>
c0017978:	83 c4 10             	add    esp,0x10
c001797b:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001797f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0017982:	83 e0 0f             	and    eax,0xf
c0017985:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017988:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001798b:	83 c8 40             	or     eax,0x40
c001798e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0017991:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0017996:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001799c:	05 78 01 00 00       	add    eax,0x178
c00179a1:	83 ec 04             	sub    esp,0x4
c00179a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00179a7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00179aa:	50                   	push   eax
c00179ab:	e8 f4 e2 ff ff       	call   c0015ca4 <GDT::addEntry(GDTEntry)>
c00179b0:	83 c4 10             	add    esp,0x10
c00179b3:	89 c2                	mov    edx,eax
c00179b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b8:	89 10                	mov    DWORD PTR [eax],edx
c00179ba:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00179bf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00179c5:	05 78 01 00 00       	add    eax,0x178
c00179ca:	83 ec 0c             	sub    esp,0xc
c00179cd:	50                   	push   eax
c00179ce:	e8 fb e2 ff ff       	call   c0015cce <GDT::flush()>
c00179d3:	83 c4 10             	add    esp,0x10
c00179d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00179db:	c9                   	leave  
c00179dc:	c3                   	ret    
c00179dd:	90                   	nop

c00179de <ReservedFilename::read(unsigned long long, void*, int*)>:
c00179de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179e9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00179ee:	75 08                	jne    c00179f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00179f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00179f6:	eb 38                	jmp    c0017a30 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00179f8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00179fd:	75 17                	jne    c0017a16 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00179ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a04:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a0d:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a13:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017a16:	89 c1                	mov    ecx,eax
c0017a18:	83 e1 fd             	and    ecx,0xfffffffd
c0017a1b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017a21:	74 cd                	je     c00179f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a23:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017a28:	83 e0 ef             	and    eax,0xffffffef
c0017a2b:	83 f8 08             	cmp    eax,0x8
c0017a2e:	76 c0                	jbe    c00179f0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017a30:	31 c0                	xor    eax,eax
c0017a32:	c3                   	ret    
c0017a33:	90                   	nop

c0017a34 <ReservedFilename::isAtty()>:
c0017a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a38:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a3b:	31 c0                	xor    eax,eax
c0017a3d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017a43:	74 09                	je     c0017a4e <ReservedFilename::isAtty()+0x1a>
c0017a45:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0017a4b:	0f 94 c0             	sete   al
c0017a4e:	c3                   	ret    
c0017a4f:	90                   	nop

c0017a50 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0017a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017a58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a5f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0017a64:	75 08                	jne    c0017a6e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0017a66:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017a6c:	eb 3d                	jmp    c0017aab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a6e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0017a73:	75 17                	jne    c0017a8c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0017a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017a7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a83:	8b 10                	mov    edx,DWORD PTR [eax]
c0017a85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a89:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0017a8c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0017a91:	75 04                	jne    c0017a97 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0017a93:	89 0a                	mov    DWORD PTR [edx],ecx
c0017a95:	eb 14                	jmp    c0017aab <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0017a97:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0017a9c:	74 c8                	je     c0017a66 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017a9e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017aa3:	83 e0 ef             	and    eax,0xffffffef
c0017aa6:	83 f8 08             	cmp    eax,0x8
c0017aa9:	76 bb                	jbe    c0017a66 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0017aab:	31 c0                	xor    eax,eax
c0017aad:	c3                   	ret    

c0017aae <UnixFile::getFileDescriptor()>:
c0017aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ab2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ab5:	c3                   	ret    

c0017ab6 <UnixFile::UnixFile(int)>:
c0017ab6:	53                   	push   ebx
c0017ab7:	83 ec 28             	sub    esp,0x28
c0017aba:	ba ac 12 03 c0       	mov    edx,0xc00312ac
c0017abf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ac3:	89 10                	mov    DWORD PTR [eax],edx
c0017ac5:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017acd:	0f 8f 90 01 00 00    	jg     c0017c63 <UnixFile::UnixFile(int)+0x1ad>
c0017ad3:	a1 20 3b 03 c0       	mov    eax,ds:0xc0033b20
c0017ad8:	8d 50 01             	lea    edx,[eax+0x1]
c0017adb:	89 15 20 3b 03 c0    	mov    DWORD PTR ds:0xc0033b20,edx
c0017ae1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ae5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017ae8:	83 ec 08             	sub    esp,0x8
c0017aeb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017aef:	68 98 aa 03 c0       	push   0xc003aa98
c0017af4:	e8 ef 6d 01 00       	call   c002e8e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017b01:	83 f0 01             	xor    eax,0x1
c0017b04:	0f b6 c0             	movzx  eax,al
c0017b07:	85 c0                	test   eax,eax
c0017b09:	0f 84 55 01 00 00    	je     c0017c64 <UnixFile::UnixFile(int)+0x1ae>
c0017b0f:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017b16:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017b1e:	83 ec 0c             	sub    esp,0xc
c0017b21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b25:	e8 b9 e8 ff ff       	call   c00163e3 <malloc>
c0017b2a:	83 c4 10             	add    esp,0x10
c0017b2d:	89 c3                	mov    ebx,eax
c0017b2f:	83 ec 08             	sub    esp,0x8
c0017b32:	68 03 ff ff 0f       	push   0xfffff03
c0017b37:	53                   	push   ebx
c0017b38:	e8 2d 01 00 00       	call   c0017c6a <ReservedFilename::ReservedFilename(int)>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017b46:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017b4e:	83 ec 0c             	sub    esp,0xc
c0017b51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b55:	e8 89 e8 ff ff       	call   c00163e3 <malloc>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	89 c3                	mov    ebx,eax
c0017b5f:	83 ec 08             	sub    esp,0x8
c0017b62:	68 01 ff ff 0f       	push   0xfffff01
c0017b67:	53                   	push   ebx
c0017b68:	e8 fd 00 00 00       	call   c0017c6a <ReservedFilename::ReservedFilename(int)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017b76:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017b7e:	83 ec 0c             	sub    esp,0xc
c0017b81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b85:	e8 59 e8 ff ff       	call   c00163e3 <malloc>
c0017b8a:	83 c4 10             	add    esp,0x10
c0017b8d:	89 c3                	mov    ebx,eax
c0017b8f:	83 ec 08             	sub    esp,0x8
c0017b92:	68 00 ff ff 0f       	push   0xfffff00
c0017b97:	53                   	push   ebx
c0017b98:	e8 cd 00 00 00       	call   c0017c6a <ReservedFilename::ReservedFilename(int)>
c0017b9d:	83 c4 10             	add    esp,0x10
c0017ba0:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017ba6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017bb5:	e8 29 e8 ff ff       	call   c00163e3 <malloc>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	89 c3                	mov    ebx,eax
c0017bbf:	83 ec 08             	sub    esp,0x8
c0017bc2:	68 02 ff ff 0f       	push   0xfffff02
c0017bc7:	53                   	push   ebx
c0017bc8:	e8 9d 00 00 00       	call   c0017c6a <ReservedFilename::ReservedFilename(int)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017bd6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017bde:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017be3:	7f 7f                	jg     c0017c64 <UnixFile::UnixFile(int)+0x1ae>
c0017be5:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017bed:	83 ec 0c             	sub    esp,0xc
c0017bf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bf4:	e8 ea e7 ff ff       	call   c00163e3 <malloc>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	89 c3                	mov    ebx,eax
c0017bfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c02:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017c07:	83 ec 08             	sub    esp,0x8
c0017c0a:	50                   	push   eax
c0017c0b:	53                   	push   ebx
c0017c0c:	e8 59 00 00 00       	call   c0017c6a <ReservedFilename::ReservedFilename(int)>
c0017c11:	83 c4 10             	add    esp,0x10
c0017c14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c18:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017c1f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017c27:	83 ec 0c             	sub    esp,0xc
c0017c2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c2e:	e8 b0 e7 ff ff       	call   c00163e3 <malloc>
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	89 c3                	mov    ebx,eax
c0017c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c3c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017c41:	83 ec 08             	sub    esp,0x8
c0017c44:	50                   	push   eax
c0017c45:	53                   	push   ebx
c0017c46:	e8 1f 00 00 00       	call   c0017c6a <ReservedFilename::ReservedFilename(int)>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c52:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017c59:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017c5e:	e9 7b ff ff ff       	jmp    c0017bde <UnixFile::UnixFile(int)+0x128>
c0017c63:	90                   	nop
c0017c64:	83 c4 28             	add    esp,0x28
c0017c67:	5b                   	pop    ebx
c0017c68:	c3                   	ret    
c0017c69:	90                   	nop

c0017c6a <ReservedFilename::ReservedFilename(int)>:
c0017c6a:	83 ec 0c             	sub    esp,0xc
c0017c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c71:	83 ec 08             	sub    esp,0x8
c0017c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c78:	50                   	push   eax
c0017c79:	e8 38 fe ff ff       	call   c0017ab6 <UnixFile::UnixFile(int)>
c0017c7e:	83 c4 10             	add    esp,0x10
c0017c81:	ba c8 12 03 c0       	mov    edx,0xc00312c8
c0017c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c8a:	89 10                	mov    DWORD PTR [eax],edx
c0017c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017c97:	90                   	nop
c0017c98:	83 c4 0c             	add    esp,0xc
c0017c9b:	c3                   	ret    

c0017c9c <UnixFile::~UnixFile()>:
c0017c9c:	83 ec 1c             	sub    esp,0x1c
c0017c9f:	ba ac 12 03 c0       	mov    edx,0xc00312ac
c0017ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ca8:	89 10                	mov    DWORD PTR [eax],edx
c0017caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017cb1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017cb6:	7f 76                	jg     c0017d2e <UnixFile::~UnixFile()+0x92>
c0017cb8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017cc0:	83 ec 0c             	sub    esp,0xc
c0017cc3:	68 98 aa 03 c0       	push   0xc003aa98
c0017cc8:	e8 ef 6c 01 00       	call   c002e9bc <LinkedList<UnixFile>::getFirstElement()>
c0017ccd:	83 c4 10             	add    esp,0x10
c0017cd0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017cd4:	83 ec 0c             	sub    esp,0xc
c0017cd7:	68 98 aa 03 c0       	push   0xc003aa98
c0017cdc:	e8 e3 6c 01 00       	call   c002e9c4 <LinkedList<UnixFile>::removeFirst()>
c0017ce1:	83 c4 10             	add    esp,0x10
c0017ce4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ce8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017cec:	74 43                	je     c0017d31 <UnixFile::~UnixFile()+0x95>
c0017cee:	83 ec 08             	sub    esp,0x8
c0017cf1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cf5:	68 98 aa 03 c0       	push   0xc003aa98
c0017cfa:	e8 e9 6b 01 00       	call   c002e8e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017cff:	83 c4 10             	add    esp,0x10
c0017d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d06:	8d 50 01             	lea    edx,[eax+0x1]
c0017d09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d0d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017d12:	0f 94 c0             	sete   al
c0017d15:	0f b6 c0             	movzx  eax,al
c0017d18:	85 c0                	test   eax,eax
c0017d1a:	74 a4                	je     c0017cc0 <UnixFile::~UnixFile()+0x24>
c0017d1c:	83 ec 0c             	sub    esp,0xc
c0017d1f:	68 84 12 03 c0       	push   0xc0031284
c0017d24:	e8 79 84 00 00       	call   c00201a2 <KePanic(char const*)>
c0017d29:	83 c4 10             	add    esp,0x10
c0017d2c:	eb 92                	jmp    c0017cc0 <UnixFile::~UnixFile()+0x24>
c0017d2e:	90                   	nop
c0017d2f:	eb 01                	jmp    c0017d32 <UnixFile::~UnixFile()+0x96>
c0017d31:	90                   	nop
c0017d32:	90                   	nop
c0017d33:	83 c4 1c             	add    esp,0x1c
c0017d36:	c3                   	ret    
c0017d37:	90                   	nop

c0017d38 <UnixFile::~UnixFile()>:
c0017d38:	83 ec 0c             	sub    esp,0xc
c0017d3b:	83 ec 0c             	sub    esp,0xc
c0017d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d42:	e8 55 ff ff ff       	call   c0017c9c <UnixFile::~UnixFile()>
c0017d47:	83 c4 10             	add    esp,0x10
c0017d4a:	83 ec 08             	sub    esp,0x8
c0017d4d:	6a 0c                	push   0xc
c0017d4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d53:	e8 c4 13 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0017d58:	83 c4 10             	add    esp,0x10
c0017d5b:	83 c4 0c             	add    esp,0xc
c0017d5e:	c3                   	ret    
c0017d5f:	90                   	nop

c0017d60 <ReservedFilename::~ReservedFilename()>:
c0017d60:	83 ec 0c             	sub    esp,0xc
c0017d63:	ba c8 12 03 c0       	mov    edx,0xc00312c8
c0017d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6c:	89 10                	mov    DWORD PTR [eax],edx
c0017d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d72:	83 ec 0c             	sub    esp,0xc
c0017d75:	50                   	push   eax
c0017d76:	e8 21 ff ff ff       	call   c0017c9c <UnixFile::~UnixFile()>
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	90                   	nop
c0017d7f:	83 c4 0c             	add    esp,0xc
c0017d82:	c3                   	ret    
c0017d83:	90                   	nop

c0017d84 <ReservedFilename::~ReservedFilename()>:
c0017d84:	83 ec 0c             	sub    esp,0xc
c0017d87:	83 ec 0c             	sub    esp,0xc
c0017d8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d8e:	e8 cd ff ff ff       	call   c0017d60 <ReservedFilename::~ReservedFilename()>
c0017d93:	83 c4 10             	add    esp,0x10
c0017d96:	83 ec 08             	sub    esp,0x8
c0017d99:	6a 0c                	push   0xc
c0017d9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d9f:	e8 78 13 00 00       	call   c001911c <operator delete(void*, unsigned long)>
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	83 c4 0c             	add    esp,0xc
c0017daa:	c3                   	ret    

c0017dab <KeGetFileFromDescriptor(int)>:
c0017dab:	53                   	push   ebx
c0017dac:	83 ec 08             	sub    esp,0x8
c0017daf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017db3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017db9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017dbf:	7f 2c                	jg     c0017ded <KeGetFileFromDescriptor(int)+0x42>
c0017dc1:	83 ec 0c             	sub    esp,0xc
c0017dc4:	68 98 aa 03 c0       	push   0xc003aa98
c0017dc9:	e8 ee 6b 01 00       	call   c002e9bc <LinkedList<UnixFile>::getFirstElement()>
c0017dce:	83 c4 10             	add    esp,0x10
c0017dd1:	85 c0                	test   eax,eax
c0017dd3:	75 04                	jne    c0017dd9 <KeGetFileFromDescriptor(int)+0x2e>
c0017dd5:	31 c0                	xor    eax,eax
c0017dd7:	eb 6e                	jmp    c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017dd9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017ddc:	74 69                	je     c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017dde:	52                   	push   edx
c0017ddf:	52                   	push   edx
c0017de0:	50                   	push   eax
c0017de1:	68 98 aa 03 c0       	push   0xc003aa98
c0017de6:	e8 7b 6c 01 00       	call   c002ea66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017deb:	eb e1                	jmp    c0017dce <KeGetFileFromDescriptor(int)+0x23>
c0017ded:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017df3:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017df8:	74 4d                	je     c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017dfa:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017e00:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017e05:	74 40                	je     c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017e07:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017e0d:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017e12:	74 33                	je     c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017e14:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017e1a:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017e1f:	74 26                	je     c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017e21:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017e27:	83 f8 08             	cmp    eax,0x8
c0017e2a:	77 09                	ja     c0017e35 <KeGetFileFromDescriptor(int)+0x8a>
c0017e2c:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017e33:	eb 12                	jmp    c0017e47 <KeGetFileFromDescriptor(int)+0x9c>
c0017e35:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017e3b:	83 fb 08             	cmp    ebx,0x8
c0017e3e:	77 95                	ja     c0017dd5 <KeGetFileFromDescriptor(int)+0x2a>
c0017e40:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017e47:	83 c4 08             	add    esp,0x8
c0017e4a:	5b                   	pop    ebx
c0017e4b:	c3                   	ret    

c0017e4c <__static_initialization_and_destruction_0(int, int)>:
c0017e4c:	83 ec 0c             	sub    esp,0xc
c0017e4f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017e54:	75 34                	jne    c0017e8a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e56:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017e5e:	75 2a                	jne    c0017e8a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017e60:	83 ec 0c             	sub    esp,0xc
c0017e63:	68 98 aa 03 c0       	push   0xc003aa98
c0017e68:	e8 39 6a 01 00       	call   c002e8a6 <LinkedList<UnixFile>::LinkedList()>
c0017e6d:	83 c4 10             	add    esp,0x10
c0017e70:	83 ec 04             	sub    esp,0x4
c0017e73:	68 98 3a 03 c0       	push   0xc0033a98
c0017e78:	68 98 aa 03 c0       	push   0xc003aa98
c0017e7d:	68 a4 e8 02 c0       	push   0xc002e8a4
c0017e82:	e8 45 12 00 00       	call   c00190cc <__cxa_atexit>
c0017e87:	83 c4 10             	add    esp,0x10
c0017e8a:	90                   	nop
c0017e8b:	83 c4 0c             	add    esp,0xc
c0017e8e:	c3                   	ret    

c0017e8f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017e8f:	83 ec 0c             	sub    esp,0xc
c0017e92:	83 ec 08             	sub    esp,0x8
c0017e95:	68 ff ff 00 00       	push   0xffff
c0017e9a:	6a 01                	push   0x1
c0017e9c:	e8 ab ff ff ff       	call   c0017e4c <__static_initialization_and_destruction_0(int, int)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	83 c4 0c             	add    esp,0xc
c0017ea7:	c3                   	ret    

c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017ea8:	53                   	push   ebx
c0017ea9:	8b 15 28 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b28
c0017eaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017eb3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017eb7:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017ebd:	89 d8                	mov    eax,ebx
c0017ebf:	d1 e8                	shr    eax,1
c0017ec1:	01 d0                	add    eax,edx
c0017ec3:	80 e3 01             	and    bl,0x1
c0017ec6:	8a 10                	mov    dl,BYTE PTR [eax]
c0017ec8:	75 09                	jne    c0017ed3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017eca:	83 e2 f0             	and    edx,0xfffffff0
c0017ecd:	09 ca                	or     edx,ecx
c0017ecf:	88 10                	mov    BYTE PTR [eax],dl
c0017ed1:	5b                   	pop    ebx
c0017ed2:	c3                   	ret    
c0017ed3:	0f b6 c9             	movzx  ecx,cl
c0017ed6:	83 e2 0f             	and    edx,0xf
c0017ed9:	c1 e1 04             	shl    ecx,0x4
c0017edc:	09 ca                	or     edx,ecx
c0017ede:	88 10                	mov    BYTE PTR [eax],dl
c0017ee0:	5b                   	pop    ebx
c0017ee1:	c3                   	ret    

c0017ee2 <Virt::getPageState(unsigned long)>:
c0017ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ee6:	8b 0d 28 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033b28
c0017eec:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017ef2:	89 d0                	mov    eax,edx
c0017ef4:	d1 e8                	shr    eax,1
c0017ef6:	80 e2 01             	and    dl,0x1
c0017ef9:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017efc:	74 03                	je     c0017f01 <Virt::getPageState(unsigned long)+0x1f>
c0017efe:	c1 e8 04             	shr    eax,0x4
c0017f01:	83 e0 0f             	and    eax,0xf
c0017f04:	c3                   	ret    

c0017f05 <Virt::allocateKernelVirtualPages(int)>:
c0017f05:	55                   	push   ebp
c0017f06:	57                   	push   edi
c0017f07:	56                   	push   esi
c0017f08:	31 f6                	xor    esi,esi
c0017f0a:	53                   	push   ebx
c0017f0b:	31 db                	xor    ebx,ebx
c0017f0d:	83 ec 1c             	sub    esp,0x1c
c0017f10:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0017f19:	8b 2d 24 3b 03 c0    	mov    ebp,DWORD PTR ds:0xc0033b24
c0017f1f:	55                   	push   ebp
c0017f20:	e8 bd ff ff ff       	call   c0017ee2 <Virt::getPageState(unsigned long)>
c0017f25:	5a                   	pop    edx
c0017f26:	84 c0                	test   al,al
c0017f28:	75 3d                	jne    c0017f67 <Virt::allocateKernelVirtualPages(int)+0x62>
c0017f2a:	85 db                	test   ebx,ebx
c0017f2c:	0f 44 f5             	cmove  esi,ebp
c0017f2f:	83 c3 01             	add    ebx,0x1
c0017f32:	39 fb                	cmp    ebx,edi
c0017f34:	74 5e                	je     c0017f94 <Virt::allocateKernelVirtualPages(int)+0x8f>
c0017f36:	83 c5 01             	add    ebp,0x1
c0017f39:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017f3f:	76 33                	jbe    c0017f74 <Virt::allocateKernelVirtualPages(int)+0x6f>
c0017f41:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017f46:	c7 05 24 3b 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033b24,0xc8000
c0017f50:	75 2a                	jne    c0017f7c <Virt::allocateKernelVirtualPages(int)+0x77>
c0017f52:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017f57:	bd 00 80 0c 00       	mov    ebp,0xc8000
c0017f5c:	55                   	push   ebp
c0017f5d:	e8 80 ff ff ff       	call   c0017ee2 <Virt::getPageState(unsigned long)>
c0017f62:	5a                   	pop    edx
c0017f63:	84 c0                	test   al,al
c0017f65:	74 c3                	je     c0017f2a <Virt::allocateKernelVirtualPages(int)+0x25>
c0017f67:	83 c5 01             	add    ebp,0x1
c0017f6a:	31 db                	xor    ebx,ebx
c0017f6c:	81 fd ff ff 0e 00    	cmp    ebp,0xeffff
c0017f72:	77 cd                	ja     c0017f41 <Virt::allocateKernelVirtualPages(int)+0x3c>
c0017f74:	89 2d 24 3b 03 c0    	mov    DWORD PTR ds:0xc0033b24,ebp
c0017f7a:	eb a3                	jmp    c0017f1f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0017f7c:	83 ec 0c             	sub    esp,0xc
c0017f7f:	68 dc 12 03 c0       	push   0xc00312dc
c0017f84:	e8 19 82 00 00       	call   c00201a2 <KePanic(char const*)>
c0017f89:	8b 2d 24 3b 03 c0    	mov    ebp,DWORD PTR ds:0xc0033b24
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	eb 8b                	jmp    c0017f1f <Virt::allocateKernelVirtualPages(int)+0x1a>
c0017f94:	89 35 24 3b 03 c0    	mov    DWORD PTR ds:0xc0033b24,esi
c0017f9a:	83 fb 01             	cmp    ebx,0x1
c0017f9d:	74 63                	je     c0018002 <Virt::allocateKernelVirtualPages(int)+0xfd>
c0017f9f:	85 ff                	test   edi,edi
c0017fa1:	74 41                	je     c0017fe4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0017fa3:	89 f0                	mov    eax,esi
c0017fa5:	31 db                	xor    ebx,ebx
c0017fa7:	8d 6f ff             	lea    ebp,[edi-0x1]
c0017faa:	eb 16                	jmp    c0017fc2 <Virt::allocateKernelVirtualPages(int)+0xbd>
c0017fac:	6a 01                	push   0x1
c0017fae:	83 c3 01             	add    ebx,0x1
c0017fb1:	50                   	push   eax
c0017fb2:	e8 f1 fe ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fb7:	39 fb                	cmp    ebx,edi
c0017fb9:	58                   	pop    eax
c0017fba:	5a                   	pop    edx
c0017fbb:	74 27                	je     c0017fe4 <Virt::allocateKernelVirtualPages(int)+0xdf>
c0017fbd:	a1 24 3b 03 c0       	mov    eax,ds:0xc0033b24
c0017fc2:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc5:	85 db                	test   ebx,ebx
c0017fc7:	89 15 24 3b 03 c0    	mov    DWORD PTR ds:0xc0033b24,edx
c0017fcd:	74 22                	je     c0017ff1 <Virt::allocateKernelVirtualPages(int)+0xec>
c0017fcf:	39 dd                	cmp    ebp,ebx
c0017fd1:	75 d9                	jne    c0017fac <Virt::allocateKernelVirtualPages(int)+0xa7>
c0017fd3:	6a 03                	push   0x3
c0017fd5:	83 c3 01             	add    ebx,0x1
c0017fd8:	50                   	push   eax
c0017fd9:	e8 ca fe ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017fde:	39 fb                	cmp    ebx,edi
c0017fe0:	59                   	pop    ecx
c0017fe1:	58                   	pop    eax
c0017fe2:	75 d9                	jne    c0017fbd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0017fe4:	83 c4 1c             	add    esp,0x1c
c0017fe7:	89 f0                	mov    eax,esi
c0017fe9:	5b                   	pop    ebx
c0017fea:	c1 e0 0c             	shl    eax,0xc
c0017fed:	5e                   	pop    esi
c0017fee:	5f                   	pop    edi
c0017fef:	5d                   	pop    ebp
c0017ff0:	c3                   	ret    
c0017ff1:	6a 02                	push   0x2
c0017ff3:	bb 01 00 00 00       	mov    ebx,0x1
c0017ff8:	50                   	push   eax
c0017ff9:	e8 aa fe ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017ffe:	58                   	pop    eax
c0017fff:	5a                   	pop    edx
c0018000:	eb bb                	jmp    c0017fbd <Virt::allocateKernelVirtualPages(int)+0xb8>
c0018002:	6a 04                	push   0x4
c0018004:	56                   	push   esi
c0018005:	8d 46 01             	lea    eax,[esi+0x1]
c0018008:	a3 24 3b 03 c0       	mov    ds:0xc0033b24,eax
c001800d:	e8 96 fe ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018012:	89 f0                	mov    eax,esi
c0018014:	59                   	pop    ecx
c0018015:	c1 e0 0c             	shl    eax,0xc
c0018018:	5b                   	pop    ebx
c0018019:	83 c4 1c             	add    esp,0x1c
c001801c:	5b                   	pop    ebx
c001801d:	5e                   	pop    esi
c001801e:	5f                   	pop    edi
c001801f:	5d                   	pop    ebp
c0018020:	c3                   	ret    

c0018021 <Virt::freeSwapfilePage(unsigned long)>:
c0018021:	53                   	push   ebx
c0018022:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0018028:	b8 01 00 00 00       	mov    eax,0x1
c001802d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018031:	d3 e0                	shl    eax,cl
c0018033:	89 cb                	mov    ebx,ecx
c0018035:	c1 eb 05             	shr    ebx,0x5
c0018038:	f7 d0                	not    eax
c001803a:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001803d:	21 c1                	and    ecx,eax
c001803f:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0018042:	5b                   	pop    ebx
c0018043:	c3                   	ret    

c0018044 <Virt::swapIDToSector(unsigned long)>:
c0018044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018048:	8b 15 2c 3b 03 c0    	mov    edx,DWORD PTR ds:0xc0033b2c
c001804e:	8b 0d 34 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033b34
c0018054:	0f af c2             	imul   eax,edx
c0018057:	01 c8                	add    eax,ecx
c0018059:	c3                   	ret    

c001805a <Virt::allocateSwapfilePage()>:
c001805a:	55                   	push   ebp
c001805b:	31 d2                	xor    edx,edx
c001805d:	57                   	push   edi
c001805e:	56                   	push   esi
c001805f:	53                   	push   ebx
c0018060:	83 ec 0c             	sub    esp,0xc
c0018063:	8b 1d 30 3b 03 c0    	mov    ebx,DWORD PTR ds:0xc0033b30
c0018069:	8b 0d 2c 3b 03 c0    	mov    ecx,DWORD PTR ds:0xc0033b2c
c001806f:	89 d8                	mov    eax,ebx
c0018071:	f7 f1                	div    ecx
c0018073:	39 cb                	cmp    ebx,ecx
c0018075:	72 2f                	jb     c00180a6 <Virt::allocateSwapfilePage()+0x4c>
c0018077:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c001807d:	8b 16                	mov    edx,DWORD PTR [esi]
c001807f:	f6 c2 01             	test   dl,0x1
c0018082:	74 3e                	je     c00180c2 <Virt::allocateSwapfilePage()+0x68>
c0018084:	31 c9                	xor    ecx,ecx
c0018086:	bf 01 00 00 00       	mov    edi,0x1
c001808b:	eb 12                	jmp    c001809f <Virt::allocateSwapfilePage()+0x45>
c001808d:	89 ca                	mov    edx,ecx
c001808f:	89 fd                	mov    ebp,edi
c0018091:	c1 ea 05             	shr    edx,0x5
c0018094:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0018097:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018099:	d3 e5                	shl    ebp,cl
c001809b:	85 ea                	test   edx,ebp
c001809d:	74 2c                	je     c00180cb <Virt::allocateSwapfilePage()+0x71>
c001809f:	83 c1 01             	add    ecx,0x1
c00180a2:	39 c8                	cmp    eax,ecx
c00180a4:	77 e7                	ja     c001808d <Virt::allocateSwapfilePage()+0x33>
c00180a6:	83 ec 0c             	sub    esp,0xc
c00180a9:	68 70 15 03 c0       	push   0xc0031570
c00180ae:	e8 ef 80 00 00       	call   c00201a2 <KePanic(char const*)>
c00180b3:	83 c4 10             	add    esp,0x10
c00180b6:	31 c9                	xor    ecx,ecx
c00180b8:	83 c4 0c             	add    esp,0xc
c00180bb:	89 c8                	mov    eax,ecx
c00180bd:	5b                   	pop    ebx
c00180be:	5e                   	pop    esi
c00180bf:	5f                   	pop    edi
c00180c0:	5d                   	pop    ebp
c00180c1:	c3                   	ret    
c00180c2:	89 f3                	mov    ebx,esi
c00180c4:	bd 01 00 00 00       	mov    ebp,0x1
c00180c9:	31 c9                	xor    ecx,ecx
c00180cb:	09 ea                	or     edx,ebp
c00180cd:	89 c8                	mov    eax,ecx
c00180cf:	89 13                	mov    DWORD PTR [ebx],edx
c00180d1:	83 c4 0c             	add    esp,0xc
c00180d4:	5b                   	pop    ebx
c00180d5:	5e                   	pop    esi
c00180d6:	5f                   	pop    edi
c00180d7:	5d                   	pop    ebp
c00180d8:	c3                   	ret    

c00180d9 <Virt::virtualMemorySetup()>:
c00180d9:	53                   	push   ebx
c00180da:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180df:	6a 0f                	push   0xf
c00180e1:	53                   	push   ebx
c00180e2:	83 c3 01             	add    ebx,0x1
c00180e5:	e8 be fd ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00180ea:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00180f0:	58                   	pop    eax
c00180f1:	5a                   	pop    edx
c00180f2:	75 eb                	jne    c00180df <Virt::virtualMemorySetup()+0x6>
c00180f4:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00180f9:	6a 00                	push   0x0
c00180fb:	53                   	push   ebx
c00180fc:	83 c3 01             	add    ebx,0x1
c00180ff:	e8 a4 fd ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018104:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001810a:	59                   	pop    ecx
c001810b:	58                   	pop    eax
c001810c:	75 eb                	jne    c00180f9 <Virt::virtualMemorySetup()+0x20>
c001810e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0018113:	6a 0f                	push   0xf
c0018115:	53                   	push   ebx
c0018116:	83 c3 01             	add    ebx,0x1
c0018119:	e8 8a fd ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001811e:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0018124:	58                   	pop    eax
c0018125:	5a                   	pop    edx
c0018126:	75 eb                	jne    c0018113 <Virt::virtualMemorySetup()+0x3a>
c0018128:	5b                   	pop    ebx
c0018129:	c3                   	ret    

c001812a <Virt::setupPageSwapping(int)>:
c001812a:	53                   	push   ebx
c001812b:	83 ec 0c             	sub    esp,0xc
c001812e:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018133:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018137:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001813d:	8b 10                	mov    edx,DWORD PTR [eax]
c001813f:	53                   	push   ebx
c0018140:	68 87 15 03 c0       	push   0xc0031587
c0018145:	50                   	push   eax
c0018146:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0018149:	c1 e3 0b             	shl    ebx,0xb
c001814c:	89 1d 30 3b 03 c0    	mov    DWORD PTR ds:0xc0033b30,ebx
c0018152:	c1 eb 08             	shr    ebx,0x8
c0018155:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018158:	c6 05 38 3b 03 c0 43 	mov    BYTE PTR ds:0xc0033b38,0x43
c001815f:	c7 05 2c 3b 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033b2c,0x8
c0018169:	a3 34 3b 03 c0       	mov    ds:0xc0033b34,eax
c001816e:	e8 70 e2 ff ff       	call   c00163e3 <malloc>
c0018173:	31 d2                	xor    edx,edx
c0018175:	83 c4 0c             	add    esp,0xc
c0018178:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c001817d:	89 c1                	mov    ecx,eax
c001817f:	a1 30 3b 03 c0       	mov    eax,ds:0xc0033b30
c0018184:	f7 35 2c 3b 03 c0    	div    DWORD PTR ds:0xc0033b2c
c001818a:	c1 e8 05             	shr    eax,0x5
c001818d:	50                   	push   eax
c001818e:	6a 00                	push   0x0
c0018190:	51                   	push   ecx
c0018191:	e8 5a 83 fe ff       	call   c00004f0 <memset>
c0018196:	83 c4 18             	add    esp,0x18
c0018199:	5b                   	pop    ebx
c001819a:	c3                   	ret    
c001819b:	90                   	nop

c001819c <VAS::setCPUSpecific(unsigned long)>:
c001819c:	c3                   	ret    
c001819d:	90                   	nop

c001819e <VAS::VAS(VAS*)>:
c001819e:	83 ec 0c             	sub    esp,0xc
c00181a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00181ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00181b7:	83 ec 0c             	sub    esp,0xc
c00181ba:	68 fc 12 03 c0       	push   0xc00312fc
c00181bf:	e8 de 7f 00 00       	call   c00201a2 <KePanic(char const*)>
c00181c4:	83 c4 10             	add    esp,0x10
c00181c7:	90                   	nop
c00181c8:	83 c4 0c             	add    esp,0xc
c00181cb:	c3                   	ret    

c00181cc <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00181cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d0:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00181d5:	89 c2                	mov    edx,eax
c00181d7:	c1 ea 16             	shr    edx,0x16
c00181da:	c1 e8 0a             	shr    eax,0xa
c00181dd:	83 f9 01             	cmp    ecx,0x1
c00181e0:	19 c9                	sbb    ecx,ecx
c00181e2:	25 fc 0f 00 00       	and    eax,0xffc
c00181e7:	c1 e2 0c             	shl    edx,0xc
c00181ea:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00181f0:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00181f7:	01 d0                	add    eax,edx
c00181f9:	c3                   	ret    

c00181fa <VAS::getPageTableEntry(unsigned long)>:
c00181fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00181fe:	89 ca                	mov    edx,ecx
c0018200:	c1 ea 16             	shr    edx,0x16
c0018203:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0018209:	c1 e9 0a             	shr    ecx,0xa
c001820c:	c1 e0 0c             	shl    eax,0xc
c001820f:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0018215:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018218:	c3                   	ret    

c0018219 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018219:	55                   	push   ebp
c001821a:	57                   	push   edi
c001821b:	bf 01 00 00 00       	mov    edi,0x1
c0018220:	56                   	push   esi
c0018221:	53                   	push   ebx
c0018222:	83 ec 1c             	sub    esp,0x1c
c0018225:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018229:	c1 ee 0c             	shr    esi,0xc
c001822c:	eb 48                	jmp    c0018276 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001822e:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018233:	83 ec 08             	sub    esp,0x8
c0018236:	55                   	push   ebp
c0018237:	50                   	push   eax
c0018238:	e8 bd ff ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c001823d:	83 c4 10             	add    esp,0x10
c0018240:	8b 10                	mov    edx,DWORD PTR [eax]
c0018242:	f6 c6 04             	test   dh,0x4
c0018245:	75 70                	jne    c00182b7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018247:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001824d:	83 fb 04             	cmp    ebx,0x4
c0018250:	0f 84 8a 00 00 00    	je     c00182e0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0018256:	83 fb 02             	cmp    ebx,0x2
c0018259:	0f 84 9a 00 00 00    	je     c00182f9 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001825f:	83 fb 03             	cmp    ebx,0x3
c0018262:	0f 84 be 00 00 00    	je     c0018326 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0018268:	83 fb 01             	cmp    ebx,0x1
c001826b:	0f 84 a2 00 00 00    	je     c0018313 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018271:	83 c6 01             	add    esi,0x1
c0018274:	31 ff                	xor    edi,edi
c0018276:	56                   	push   esi
c0018277:	89 f5                	mov    ebp,esi
c0018279:	e8 64 fc ff ff       	call   c0017ee2 <Virt::getPageState(unsigned long)>
c001827e:	c1 e5 0c             	shl    ebp,0xc
c0018281:	5a                   	pop    edx
c0018282:	0f b6 d8             	movzx  ebx,al
c0018285:	85 db                	test   ebx,ebx
c0018287:	75 a5                	jne    c001822e <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0018289:	83 ec 0c             	sub    esp,0xc
c001828c:	68 9e 15 03 c0       	push   0xc003159e
c0018291:	e8 0c 7f 00 00       	call   c00201a2 <KePanic(char const*)>
c0018296:	5a                   	pop    edx
c0018297:	59                   	pop    ecx
c0018298:	55                   	push   ebp
c0018299:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c001829f:	55                   	push   ebp
c00182a0:	e8 55 ff ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c00182a5:	83 c4 10             	add    esp,0x10
c00182a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00182aa:	f6 c6 04             	test   dh,0x4
c00182ad:	75 08                	jne    c00182b7 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00182af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182b5:	eb ba                	jmp    c0018271 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00182b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182bb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00182c1:	83 ec 0c             	sub    esp,0xc
c00182c4:	52                   	push   edx
c00182c5:	e8 bf e3 ff ff       	call   c0016689 <Phys::freePage(unsigned long)>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	83 fb 04             	cmp    ebx,0x4
c00182d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182d4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00182da:	0f 85 76 ff ff ff    	jne    c0018256 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00182e0:	83 e7 01             	and    edi,0x1
c00182e3:	75 46                	jne    c001832b <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00182e5:	c7 44 24 30 20 13 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031320
c00182ed:	83 c4 1c             	add    esp,0x1c
c00182f0:	5b                   	pop    ebx
c00182f1:	5e                   	pop    esi
c00182f2:	5f                   	pop    edi
c00182f3:	5d                   	pop    ebp
c00182f4:	e9 a9 7e 00 00       	jmp    c00201a2 <KePanic(char const*)>
c00182f9:	83 e7 01             	and    edi,0x1
c00182fc:	75 15                	jne    c0018313 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00182fe:	83 ec 0c             	sub    esp,0xc
c0018301:	68 ba 15 03 c0       	push   0xc00315ba
c0018306:	e8 97 7e 00 00       	call   c00201a2 <KePanic(char const*)>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	e9 5e ff ff ff       	jmp    c0018271 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018313:	83 ec 08             	sub    esp,0x8
c0018316:	6a 00                	push   0x0
c0018318:	56                   	push   esi
c0018319:	e8 8a fb ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001831e:	83 c4 10             	add    esp,0x10
c0018321:	e9 4b ff ff ff       	jmp    c0018271 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018326:	83 e7 01             	and    edi,0x1
c0018329:	75 16                	jne    c0018341 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c001832b:	83 ec 08             	sub    esp,0x8
c001832e:	6a 00                	push   0x0
c0018330:	56                   	push   esi
c0018331:	e8 72 fb ff ff       	call   c0017ea8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018336:	83 c4 10             	add    esp,0x10
c0018339:	83 c4 1c             	add    esp,0x1c
c001833c:	5b                   	pop    ebx
c001833d:	5e                   	pop    esi
c001833e:	5f                   	pop    edi
c001833f:	5d                   	pop    ebp
c0018340:	c3                   	ret    
c0018341:	c7 44 24 30 d6 15 03 c0 	mov    DWORD PTR [esp+0x30],0xc00315d6
c0018349:	83 c4 1c             	add    esp,0x1c
c001834c:	5b                   	pop    ebx
c001834d:	5e                   	pop    esi
c001834e:	5f                   	pop    edi
c001834f:	5d                   	pop    ebp
c0018350:	e9 4d 7e 00 00       	jmp    c00201a2 <KePanic(char const*)>
c0018355:	90                   	nop

c0018356 <VAS::freeAllocatedPages(unsigned long)>:
c0018356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001835a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001835e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0018362:	74 09                	je     c001836d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0018364:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0018368:	e9 ac fe ff ff       	jmp    c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c001836d:	c7 44 24 04 44 13 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031344
c0018375:	e9 a0 0e 00 00       	jmp    c001921a <Dbg::kprintf(char const*, ...)>

c001837a <VAS::virtualToPhysical(unsigned long)>:
c001837a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001837e:	50                   	push   eax
c001837f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018383:	52                   	push   edx
c0018384:	e8 71 fe ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c0018389:	59                   	pop    ecx
c001838a:	5a                   	pop    edx
c001838b:	8b 00                	mov    eax,DWORD PTR [eax]
c001838d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018392:	c3                   	ret    
c0018393:	90                   	nop

c0018394 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0018394:	55                   	push   ebp
c0018395:	57                   	push   edi
c0018396:	56                   	push   esi
c0018397:	53                   	push   ebx
c0018398:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001839c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00183a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00183a8:	85 db                	test   ebx,ebx
c00183aa:	7e 24                	jle    c00183d0 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00183ac:	c1 e3 0c             	shl    ebx,0xc
c00183af:	01 f3                	add    ebx,esi
c00183b1:	56                   	push   esi
c00183b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00183b8:	55                   	push   ebp
c00183b9:	e8 3c fe ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c00183be:	5a                   	pop    edx
c00183bf:	59                   	pop    ecx
c00183c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00183c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183c6:	21 f9                	and    ecx,edi
c00183c8:	09 d1                	or     ecx,edx
c00183ca:	39 f3                	cmp    ebx,esi
c00183cc:	89 08                	mov    DWORD PTR [eax],ecx
c00183ce:	75 e1                	jne    c00183b1 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00183d0:	5b                   	pop    ebx
c00183d1:	5e                   	pop    esi
c00183d2:	5f                   	pop    edi
c00183d3:	5d                   	pop    ebp
c00183d4:	c3                   	ret    
c00183d5:	90                   	nop

c00183d6 <VAS::VAS()>:
c00183d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00183e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00183ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f0:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c00183f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183f9:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00183fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018401:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0018404:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018408:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001840f:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c0018414:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018419:	29 c2                	sub    edx,eax
c001841b:	89 d0                	mov    eax,edx
c001841d:	05 ff 0f 00 00       	add    eax,0xfff
c0018422:	c1 e8 0c             	shr    eax,0xc
c0018425:	89 c2                	mov    edx,eax
c0018427:	b8 00 50 03 c0       	mov    eax,0xc0035000
c001842c:	6a 04                	push   0x4
c001842e:	6a ff                	push   0xffffffff
c0018430:	52                   	push   edx
c0018431:	50                   	push   eax
c0018432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018436:	e8 59 ff ff ff       	call   c0018394 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001843b:	83 c4 14             	add    esp,0x14
c001843e:	90                   	nop
c001843f:	c3                   	ret    

c0018440 <VAS::setToWriteCombining(unsigned long, int)>:
c0018440:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018445:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001844b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0018452:	75 01                	jne    c0018455 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0018454:	c3                   	ret    
c0018455:	68 80 00 00 00       	push   0x80
c001845a:	6a ff                	push   0xffffffff
c001845c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018460:	50                   	push   eax
c0018461:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018465:	52                   	push   edx
c0018466:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001846a:	51                   	push   ecx
c001846b:	e8 24 ff ff ff       	call   c0018394 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018470:	83 c4 14             	add    esp,0x14
c0018473:	c3                   	ret    

c0018474 <VAS::mapOtherVASIn(bool, VAS*)>:
c0018474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018478:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001847b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001847f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0018482:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018487:	83 f8 01             	cmp    eax,0x1
c001848a:	19 c0                	sbb    eax,eax
c001848c:	83 ca 03             	or     edx,0x3
c001848f:	83 e0 fc             	and    eax,0xfffffffc
c0018492:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0018499:	0f 20 d8             	mov    eax,cr3
c001849c:	0f 22 d8             	mov    cr3,eax
c001849f:	c3                   	ret    

c00184a0 <VAS::~VAS()>:
c00184a0:	83 ec 2c             	sub    esp,0x2c
c00184a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00184ab:	fa                   	cli    
c00184ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00184b1:	83 c0 01             	add    eax,0x1
c00184b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00184b9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00184be:	8b 00                	mov    eax,DWORD PTR [eax]
c00184c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00184c3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184cd:	6a 01                	push   0x1
c00184cf:	50                   	push   eax
c00184d0:	e8 9f ff ff ff       	call   c0018474 <VAS::mapOtherVASIn(bool, VAS*)>
c00184d5:	83 c4 0c             	add    esp,0xc
c00184d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00184e0:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00184e8:	0f 8f d8 00 00 00    	jg     c00185c6 <VAS::~VAS()+0x126>
c00184ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00184f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184f9:	c1 e2 02             	shl    edx,0x2
c00184fc:	01 d0                	add    eax,edx
c00184fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0018500:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018508:	83 e0 01             	and    eax,0x1
c001850b:	0f 84 ab 00 00 00    	je     c00185bc <VAS::~VAS()+0x11c>
c0018511:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018519:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0018521:	7f 74                	jg     c0018597 <VAS::~VAS()+0xf7>
c0018523:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018527:	c1 e0 0a             	shl    eax,0xa
c001852a:	89 c2                	mov    edx,eax
c001852c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018530:	01 d0                	add    eax,edx
c0018532:	c1 e0 0c             	shl    eax,0xc
c0018535:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018539:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001853e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018540:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018543:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018549:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001854d:	6a 01                	push   0x1
c001854f:	50                   	push   eax
c0018550:	e8 77 fc ff ff       	call   c00181cc <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0018555:	83 c4 0c             	add    esp,0xc
c0018558:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001855c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018560:	8b 00                	mov    eax,DWORD PTR [eax]
c0018562:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018566:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001856a:	25 01 04 00 00       	and    eax,0x401
c001856f:	3d 01 04 00 00       	cmp    eax,0x401
c0018574:	75 1a                	jne    c0018590 <VAS::~VAS()+0xf0>
c0018576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001857a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001857f:	83 ec 0c             	sub    esp,0xc
c0018582:	50                   	push   eax
c0018583:	e8 01 e1 ff ff       	call   c0016689 <Phys::freePage(unsigned long)>
c0018588:	83 c4 10             	add    esp,0x10
c001858b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018590:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0018595:	eb 82                	jmp    c0018519 <VAS::~VAS()+0x79>
c0018597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859b:	25 00 04 00 00       	and    eax,0x400
c00185a0:	74 1a                	je     c00185bc <VAS::~VAS()+0x11c>
c00185a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00185a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00185ab:	83 ec 0c             	sub    esp,0xc
c00185ae:	50                   	push   eax
c00185af:	e8 d5 e0 ff ff       	call   c0016689 <Phys::freePage(unsigned long)>
c00185b4:	83 c4 10             	add    esp,0x10
c00185b7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185bc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00185c1:	e9 1a ff ff ff       	jmp    c00184e0 <VAS::~VAS()+0x40>
c00185c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185ca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00185cd:	83 ec 0c             	sub    esp,0xc
c00185d0:	50                   	push   eax
c00185d1:	e8 43 fc ff ff       	call   c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c00185d6:	83 c4 10             	add    esp,0x10
c00185d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185dd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00185e0:	83 ec 0c             	sub    esp,0xc
c00185e3:	50                   	push   eax
c00185e4:	e8 a0 e0 ff ff       	call   c0016689 <Phys::freePage(unsigned long)>
c00185e9:	83 c4 10             	add    esp,0x10
c00185ec:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00185f1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00185f6:	83 e8 01             	sub    eax,0x1
c00185f9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00185fe:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018603:	85 c0                	test   eax,eax
c0018605:	75 01                	jne    c0018608 <VAS::~VAS()+0x168>
c0018607:	fb                   	sti    
c0018608:	90                   	nop
c0018609:	83 c4 2c             	add    esp,0x2c
c001860c:	c3                   	ret    
c001860d:	90                   	nop

c001860e <VAS::mapPage(unsigned long, unsigned long, int)>:
c001860e:	55                   	push   ebp
c001860f:	57                   	push   edi
c0018610:	56                   	push   esi
c0018611:	53                   	push   ebx
c0018612:	83 ec 1c             	sub    esp,0x1c
c0018615:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018619:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001861d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018621:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0018627:	77 08                	ja     c0018631 <VAS::mapPage(unsigned long, unsigned long, int)+0x23>
c0018629:	0f 20 d8             	mov    eax,cr3
c001862c:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
c001862f:	75 43                	jne    c0018674 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0018631:	89 d8                	mov    eax,ebx
c0018633:	09 f8                	or     eax,edi
c0018635:	a9 ff 0f 00 00       	test   eax,0xfff
c001863a:	75 53                	jne    c001868f <VAS::mapPage(unsigned long, unsigned long, int)+0x81>
c001863c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001863f:	89 de                	mov    esi,ebx
c0018641:	c1 ee 16             	shr    esi,0x16
c0018644:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001864b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001864f:	74 50                	je     c00186a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x93>
c0018651:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018655:	c1 eb 0a             	shr    ebx,0xa
c0018658:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001865e:	c1 e6 0c             	shl    esi,0xc
c0018661:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0018667:	09 c7                	or     edi,eax
c0018669:	89 3c 33             	mov    DWORD PTR [ebx+esi*1],edi
c001866c:	83 c4 1c             	add    esp,0x1c
c001866f:	5b                   	pop    ebx
c0018670:	5e                   	pop    esi
c0018671:	5f                   	pop    edi
c0018672:	5d                   	pop    ebp
c0018673:	c3                   	ret    
c0018674:	83 ec 0c             	sub    esp,0xc
c0018677:	68 68 13 03 c0       	push   0xc0031368
c001867c:	e8 99 0b 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018681:	89 d8                	mov    eax,ebx
c0018683:	83 c4 10             	add    esp,0x10
c0018686:	09 f8                	or     eax,edi
c0018688:	a9 ff 0f 00 00       	test   eax,0xfff
c001868d:	74 ad                	je     c001863c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c001868f:	83 ec 0c             	sub    esp,0xc
c0018692:	68 d0 13 03 c0       	push   0xc00313d0
c0018697:	e8 06 7b 00 00       	call   c00201a2 <KePanic(char const*)>
c001869c:	83 c4 10             	add    esp,0x10
c001869f:	eb 9b                	jmp    c001863c <VAS::mapPage(unsigned long, unsigned long, int)+0x2e>
c00186a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00186a5:	e8 48 e0 ff ff       	call   c00166f2 <Phys::allocatePage()>
c00186aa:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00186b0:	83 ec 0c             	sub    esp,0xc
c00186b3:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00186b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00186bb:	6a 01                	push   0x1
c00186bd:	e8 43 f8 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c00186c2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00186c9:	6a 01                	push   0x1
c00186cb:	50                   	push   eax
c00186cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186d0:	52                   	push   edx
c00186d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00186d5:	51                   	push   ecx
c00186d6:	e8 3d 01 00 00       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00186db:	83 c4 1c             	add    esp,0x1c
c00186de:	68 00 10 00 00       	push   0x1000
c00186e3:	6a 00                	push   0x0
c00186e5:	50                   	push   eax
c00186e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00186ea:	e8 01 7e fe ff       	call   c00004f0 <memset>
c00186ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00186f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00186f6:	e8 1e fb ff ff       	call   c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c00186fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018703:	83 c4 10             	add    esp,0x10
c0018706:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0018709:	0d 07 04 00 00       	or     eax,0x407
c001870e:	89 04 11             	mov    DWORD PTR [ecx+edx*1],eax
c0018711:	e9 3b ff ff ff       	jmp    c0018651 <VAS::mapPage(unsigned long, unsigned long, int)+0x43>

c0018716 <VAS::allocatePages(int, int)>:
c0018716:	55                   	push   ebp
c0018717:	57                   	push   edi
c0018718:	56                   	push   esi
c0018719:	53                   	push   ebx
c001871a:	83 ec 1c             	sub    esp,0x1c
c001871d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018721:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018725:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0018729:	75 75                	jne    c00187a0 <VAS::allocatePages(int, int)+0x8a>
c001872b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001872e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018732:	85 c0                	test   eax,eax
c0018734:	74 49                	je     c001877f <VAS::allocatePages(int, int)+0x69>
c0018736:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001873a:	89 d5                	mov    ebp,edx
c001873c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018740:	c1 e5 0c             	shl    ebp,0xc
c0018743:	01 dd                	add    ebp,ebx
c0018745:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0018748:	81 cf 00 04 00 00    	or     edi,0x400
c001874e:	85 d2                	test   edx,edx
c0018750:	7e 1b                	jle    c001876d <VAS::allocatePages(int, int)+0x57>
c0018752:	e8 9b df ff ff       	call   c00166f2 <Phys::allocatePage()>
c0018757:	57                   	push   edi
c0018758:	53                   	push   ebx
c0018759:	81 c3 00 10 00 00    	add    ebx,0x1000
c001875f:	50                   	push   eax
c0018760:	56                   	push   esi
c0018761:	e8 a8 fe ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018766:	83 c4 10             	add    esp,0x10
c0018769:	39 dd                	cmp    ebp,ebx
c001876b:	75 e5                	jne    c0018752 <VAS::allocatePages(int, int)+0x3c>
c001876d:	0f 20 d8             	mov    eax,cr3
c0018770:	0f 22 d8             	mov    cr3,eax
c0018773:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018777:	83 c4 1c             	add    esp,0x1c
c001877a:	5b                   	pop    ebx
c001877b:	5e                   	pop    esi
c001877c:	5f                   	pop    edi
c001877d:	5d                   	pop    ebp
c001877e:	c3                   	ret    
c001877f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018783:	83 ec 0c             	sub    esp,0xc
c0018786:	68 f4 13 03 c0       	push   0xc00313f4
c001878b:	e8 12 7a 00 00       	call   c00201a2 <KePanic(char const*)>
c0018790:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018793:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018797:	83 c4 10             	add    esp,0x10
c001879a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001879e:	eb 96                	jmp    c0018736 <VAS::allocatePages(int, int)+0x20>
c00187a0:	83 ec 0c             	sub    esp,0xc
c00187a3:	52                   	push   edx
c00187a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00187a8:	e8 58 f7 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c00187ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00187b1:	83 c4 10             	add    esp,0x10
c00187b4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00187b9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00187bd:	77 38                	ja     c00187f7 <VAS::allocatePages(int, int)+0xe1>
c00187bf:	85 d2                	test   edx,edx
c00187c1:	7e aa                	jle    c001876d <VAS::allocatePages(int, int)+0x57>
c00187c3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00187c7:	c1 e2 0c             	shl    edx,0xc
c00187ca:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00187ce:	81 cf 00 04 00 00    	or     edi,0x400
c00187d4:	8d 2c 1a             	lea    ebp,[edx+ebx*1]
c00187d7:	e8 16 df ff ff       	call   c00166f2 <Phys::allocatePage()>
c00187dc:	57                   	push   edi
c00187dd:	53                   	push   ebx
c00187de:	81 c3 00 10 00 00    	add    ebx,0x1000
c00187e4:	50                   	push   eax
c00187e5:	56                   	push   esi
c00187e6:	e8 23 fe ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c00187eb:	83 c4 10             	add    esp,0x10
c00187ee:	39 dd                	cmp    ebp,ebx
c00187f0:	75 e5                	jne    c00187d7 <VAS::allocatePages(int, int)+0xc1>
c00187f2:	e9 76 ff ff ff       	jmp    c001876d <VAS::allocatePages(int, int)+0x57>
c00187f7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00187fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018802:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018809:	74 b4                	je     c00187bf <VAS::allocatePages(int, int)+0xa9>
c001880b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001880f:	80 cc 01             	or     ah,0x1
c0018812:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0018816:	eb a7                	jmp    c00187bf <VAS::allocatePages(int, int)+0xa9>

c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018818:	55                   	push   ebp
c0018819:	57                   	push   edi
c001881a:	56                   	push   esi
c001881b:	53                   	push   ebx
c001881c:	83 ec 1c             	sub    esp,0x1c
c001881f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018823:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018827:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001882b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001882f:	85 db                	test   ebx,ebx
c0018831:	7e 2c                	jle    c001885f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c0018833:	c1 e3 0c             	shl    ebx,0xc
c0018836:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018839:	89 f3                	mov    ebx,esi
c001883b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001883f:	55                   	push   ebp
c0018840:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018844:	29 f2                	sub    edx,esi
c0018846:	01 da                	add    edx,ebx
c0018848:	52                   	push   edx
c0018849:	53                   	push   ebx
c001884a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018850:	57                   	push   edi
c0018851:	e8 b8 fd ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018856:	83 c4 10             	add    esp,0x10
c0018859:	3b 5c 24 0c          	cmp    ebx,DWORD PTR [esp+0xc]
c001885d:	75 e0                	jne    c001883f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x27>
c001885f:	0f 20 d8             	mov    eax,cr3
c0018862:	0f 22 d8             	mov    cr3,eax
c0018865:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018869:	83 c4 1c             	add    esp,0x1c
c001886c:	5b                   	pop    ebx
c001886d:	5e                   	pop    esi
c001886e:	5f                   	pop    edi
c001886f:	5d                   	pop    ebp
c0018870:	c3                   	ret    
c0018871:	90                   	nop

c0018872 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0018872:	55                   	push   ebp
c0018873:	57                   	push   edi
c0018874:	56                   	push   esi
c0018875:	53                   	push   ebx
c0018876:	83 ec 1c             	sub    esp,0x1c
c0018879:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001887d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0018881:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018885:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018889:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001888d:	09 d8                	or     eax,ebx
c001888f:	a9 ff 0f 00 00       	test   eax,0xfff
c0018894:	75 4b                	jne    c00188e1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0018896:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018899:	89 de                	mov    esi,ebx
c001889b:	c1 ee 16             	shr    esi,0x16
c001889e:	8d 2c b5 00 00 00 00 	lea    ebp,[esi*4+0x0]
c00188a5:	f6 04 28 01          	test   BYTE PTR [eax+ebp*1],0x1
c00188a9:	74 48                	je     c00188f3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x81>
c00188ab:	0f b6 7c 24 04       	movzx  edi,BYTE PTR [esp+0x4]
c00188b0:	c1 eb 0a             	shr    ebx,0xa
c00188b3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00188b7:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00188bb:	83 ff 01             	cmp    edi,0x1
c00188be:	19 c0                	sbb    eax,eax
c00188c0:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00188c6:	c1 e6 0c             	shl    esi,0xc
c00188c9:	25 00 00 c0 ff       	and    eax,0xffc00000
c00188ce:	01 f3                	add    ebx,esi
c00188d0:	09 ca                	or     edx,ecx
c00188d2:	89 94 18 00 00 c0 c2 	mov    DWORD PTR [eax+ebx*1-0x3d400000],edx
c00188d9:	83 c4 1c             	add    esp,0x1c
c00188dc:	5b                   	pop    ebx
c00188dd:	5e                   	pop    esi
c00188de:	5f                   	pop    edi
c00188df:	5d                   	pop    ebp
c00188e0:	c3                   	ret    
c00188e1:	83 ec 0c             	sub    esp,0xc
c00188e4:	68 20 14 03 c0       	push   0xc0031420
c00188e9:	e8 b4 78 00 00       	call   c00201a2 <KePanic(char const*)>
c00188ee:	83 c4 10             	add    esp,0x10
c00188f1:	eb a3                	jmp    c0018896 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x24>
c00188f3:	e8 fa dd ff ff       	call   c00166f2 <Phys::allocatePage()>
c00188f8:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c00188fe:	83 ec 0c             	sub    esp,0xc
c0018901:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0018905:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018909:	6a 01                	push   0x1
c001890b:	e8 f5 f5 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c0018910:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018917:	6a 01                	push   0x1
c0018919:	50                   	push   eax
c001891a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001891e:	50                   	push   eax
c001891f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018923:	51                   	push   ecx
c0018924:	e8 ef fe ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018929:	83 c4 1c             	add    esp,0x1c
c001892c:	68 00 10 00 00       	push   0x1000
c0018931:	6a 00                	push   0x0
c0018933:	50                   	push   eax
c0018934:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018938:	e8 b3 7b fe ff       	call   c00004f0 <memset>
c001893d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018941:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018944:	e8 d0 f8 ff ff       	call   c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c0018949:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001894d:	83 c4 10             	add    esp,0x10
c0018950:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018953:	81 ca 07 04 00 00    	or     edx,0x407
c0018959:	89 14 28             	mov    DWORD PTR [eax+ebp*1],edx
c001895c:	e9 4a ff ff ff       	jmp    c00188ab <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x39>
c0018961:	90                   	nop

c0018962 <VAS::VAS(bool)>:
c0018962:	53                   	push   ebx
c0018963:	83 ec 28             	sub    esp,0x28
c0018966:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001896a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001896e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018972:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018979:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001897d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018984:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018988:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001898c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001898f:	e8 5e dd ff ff       	call   c00166f2 <Phys::allocatePage()>
c0018994:	89 c2                	mov    edx,eax
c0018996:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001899a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001899d:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00189a3:	83 ec 0c             	sub    esp,0xc
c00189a6:	6a 01                	push   0x1
c00189a8:	e8 58 f5 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c00189ad:	83 c4 10             	add    esp,0x10
c00189b0:	89 c2                	mov    edx,eax
c00189b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00189b9:	83 ec 0c             	sub    esp,0xc
c00189bc:	6a 03                	push   0x3
c00189be:	6a 01                	push   0x1
c00189c0:	52                   	push   edx
c00189c1:	50                   	push   eax
c00189c2:	53                   	push   ebx
c00189c3:	e8 50 fe ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00189c8:	83 c4 20             	add    esp,0x20
c00189cb:	89 c2                	mov    edx,eax
c00189cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189d1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00189d4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00189dc:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00189e4:	7f 1d                	jg     c0018a03 <VAS::VAS(bool)+0xa1>
c00189e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189f1:	c1 e2 02             	shl    edx,0x2
c00189f4:	01 d0                	add    eax,edx
c00189f6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00189fc:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018a01:	eb d9                	jmp    c00189dc <VAS::VAS(bool)+0x7a>
c0018a03:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018a0b:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018a13:	7f 7e                	jg     c0018a93 <VAS::VAS(bool)+0x131>
c0018a15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a19:	2d 00 02 00 00       	sub    eax,0x200
c0018a1e:	c1 e0 0c             	shl    eax,0xc
c0018a21:	83 c8 05             	or     eax,0x5
c0018a24:	89 c2                	mov    edx,eax
c0018a26:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a2b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a31:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a37:	83 e0 10             	and    eax,0x10
c0018a3a:	0f b6 c0             	movzx  eax,al
c0018a3d:	85 c0                	test   eax,eax
c0018a3f:	74 07                	je     c0018a48 <VAS::VAS(bool)+0xe6>
c0018a41:	b8 00 01 00 00       	mov    eax,0x100
c0018a46:	eb 05                	jmp    c0018a4d <VAS::VAS(bool)+0xeb>
c0018a48:	b8 00 00 00 00       	mov    eax,0x0
c0018a4d:	09 d0                	or     eax,edx
c0018a4f:	89 c1                	mov    ecx,eax
c0018a51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a5c:	c1 e2 02             	shl    edx,0x2
c0018a5f:	01 d0                	add    eax,edx
c0018a61:	89 ca                	mov    edx,ecx
c0018a63:	89 10                	mov    DWORD PTR [eax],edx
c0018a65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a69:	2d 40 03 00 00       	sub    eax,0x340
c0018a6e:	83 f8 7f             	cmp    eax,0x7f
c0018a71:	77 16                	ja     c0018a89 <VAS::VAS(bool)+0x127>
c0018a73:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a7a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a7e:	c1 e2 02             	shl    edx,0x2
c0018a81:	01 d0                	add    eax,edx
c0018a83:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0018a89:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0018a8e:	e9 78 ff ff ff       	jmp    c0018a0b <VAS::VAS(bool)+0xa9>
c0018a93:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a9e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018aa4:	83 e0 10             	and    eax,0x10
c0018aa7:	0f b6 c0             	movzx  eax,al
c0018aaa:	85 c0                	test   eax,eax
c0018aac:	74 07                	je     c0018ab5 <VAS::VAS(bool)+0x153>
c0018aae:	b8 03 41 00 00       	mov    eax,0x4103
c0018ab3:	eb 05                	jmp    c0018aba <VAS::VAS(bool)+0x158>
c0018ab5:	b8 03 40 00 00       	mov    eax,0x4003
c0018aba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018abe:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018ac1:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018ac7:	89 02                	mov    DWORD PTR [edx],eax
c0018ac9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018acd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018ad0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018ad5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018adb:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018ae1:	83 e0 10             	and    eax,0x10
c0018ae4:	0f b6 c0             	movzx  eax,al
c0018ae7:	85 c0                	test   eax,eax
c0018ae9:	74 07                	je     c0018af2 <VAS::VAS(bool)+0x190>
c0018aeb:	b8 00 01 00 00       	mov    eax,0x100
c0018af0:	eb 05                	jmp    c0018af7 <VAS::VAS(bool)+0x195>
c0018af2:	b8 00 00 00 00       	mov    eax,0x0
c0018af7:	09 c2                	or     edx,eax
c0018af9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018afd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018b00:	05 fc 0f 00 00       	add    eax,0xffc
c0018b05:	83 ca 03             	or     edx,0x3
c0018b08:	89 10                	mov    DWORD PTR [eax],edx
c0018b0a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b0f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b15:	83 ec 0c             	sub    esp,0xc
c0018b18:	50                   	push   eax
c0018b19:	e8 f0 29 00 00       	call   c001b50e <Device::getName()>
c0018b1e:	83 c4 10             	add    esp,0x10
c0018b21:	83 ec 08             	sub    esp,0x8
c0018b24:	68 f0 15 03 c0       	push   0xc00315f0
c0018b29:	50                   	push   eax
c0018b2a:	e8 51 7c fe ff       	call   c0000780 <strcmp>
c0018b2f:	83 c4 10             	add    esp,0x10
c0018b32:	85 c0                	test   eax,eax
c0018b34:	0f 94 c0             	sete   al
c0018b37:	0f b6 c0             	movzx  eax,al
c0018b3a:	85 c0                	test   eax,eax
c0018b3c:	74 68                	je     c0018ba6 <VAS::VAS(bool)+0x244>
c0018b3e:	fa                   	cli    
c0018b3f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b4a:	05 7c 09 00 00       	add    eax,0x97c
c0018b4f:	83 ec 0c             	sub    esp,0xc
c0018b52:	50                   	push   eax
c0018b53:	e8 86 d3 ff ff       	call   c0015ede <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b58:	83 c4 10             	add    esp,0x10
c0018b5b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b60:	89 c3                	mov    ebx,eax
c0018b62:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018b67:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018b6d:	05 7c 09 00 00       	add    eax,0x97c
c0018b72:	83 ec 0c             	sub    esp,0xc
c0018b75:	50                   	push   eax
c0018b76:	e8 63 d3 ff ff       	call   c0015ede <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	83 ec 08             	sub    esp,0x8
c0018b81:	50                   	push   eax
c0018b82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b86:	e8 6f f6 ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018b95:	6a 11                	push   0x11
c0018b97:	53                   	push   ebx
c0018b98:	50                   	push   eax
c0018b99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018b9d:	e8 6c fa ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018ba2:	83 c4 10             	add    esp,0x10
c0018ba5:	fb                   	sti    
c0018ba6:	90                   	nop
c0018ba7:	83 c4 28             	add    esp,0x28
c0018baa:	5b                   	pop    ebx
c0018bab:	c3                   	ret    

c0018bac <VAS::evict(unsigned long)>:
c0018bac:	55                   	push   ebp
c0018bad:	57                   	push   edi
c0018bae:	56                   	push   esi
c0018baf:	53                   	push   ebx
c0018bb0:	83 ec 1c             	sub    esp,0x1c
c0018bb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018bbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bbf:	e8 96 f4 ff ff       	call   c001805a <Virt::allocateSwapfilePage()>
c0018bc4:	89 c7                	mov    edi,eax
c0018bc6:	a1 2c 3b 03 c0       	mov    eax,ds:0xc0033b2c
c0018bcb:	85 c0                	test   eax,eax
c0018bcd:	7e 40                	jle    c0018c0f <VAS::evict(unsigned long)+0x63>
c0018bcf:	89 ee                	mov    esi,ebp
c0018bd1:	31 db                	xor    ebx,ebx
c0018bd3:	83 ec 0c             	sub    esp,0xc
c0018bd6:	57                   	push   edi
c0018bd7:	e8 68 f4 ff ff       	call   c0018044 <Virt::swapIDToSector(unsigned long)>
c0018bdc:	31 d2                	xor    edx,edx
c0018bde:	89 34 24             	mov    DWORD PTR [esp],esi
c0018be1:	81 c6 00 02 00 00    	add    esi,0x200
c0018be7:	6a 01                	push   0x1
c0018be9:	52                   	push   edx
c0018bea:	01 d8                	add    eax,ebx
c0018bec:	83 c3 01             	add    ebx,0x1
c0018bef:	50                   	push   eax
c0018bf0:	0f be 05 38 3b 03 c0 	movsx  eax,BYTE PTR ds:0xc0033b38
c0018bf7:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018bfe:	50                   	push   eax
c0018bff:	e8 0e 3b 00 00       	call   c001c712 <LogicalDisk::write(unsigned long long, int, void*)>
c0018c04:	83 c4 20             	add    esp,0x20
c0018c07:	39 1d 2c 3b 03 c0    	cmp    DWORD PTR ds:0xc0033b2c,ebx
c0018c0d:	7f c4                	jg     c0018bd3 <VAS::evict(unsigned long)+0x27>
c0018c0f:	c1 e7 0c             	shl    edi,0xc
c0018c12:	83 ec 08             	sub    esp,0x8
c0018c15:	55                   	push   ebp
c0018c16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c1a:	50                   	push   eax
c0018c1b:	e8 da f5 ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c0018c20:	8b 10                	mov    edx,DWORD PTR [eax]
c0018c22:	89 d3                	mov    ebx,edx
c0018c24:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018c2a:	09 d7                	or     edi,edx
c0018c2c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018c32:	89 38                	mov    DWORD PTR [eax],edi
c0018c34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018c37:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018c3d:	83 c2 01             	add    edx,0x1
c0018c40:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018c46:	e8 3e da ff ff       	call   c0016689 <Phys::freePage(unsigned long)>
c0018c4b:	0f 20 d8             	mov    eax,cr3
c0018c4e:	0f 22 d8             	mov    cr3,eax
c0018c51:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018c57:	51                   	push   ecx
c0018c58:	55                   	push   ebp
c0018c59:	53                   	push   ebx
c0018c5a:	68 44 14 03 c0       	push   0xc0031444
c0018c5f:	e8 b6 05 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018c64:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018c69:	c7 44 24 50 fe 15 03 c0 	mov    DWORD PTR [esp+0x50],0xc00315fe
c0018c71:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018c75:	8d 50 01             	lea    edx,[eax+0x1]
c0018c78:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018c7e:	83 c4 3c             	add    esp,0x3c
c0018c81:	5b                   	pop    ebx
c0018c82:	5e                   	pop    esi
c0018c83:	5f                   	pop    edi
c0018c84:	5d                   	pop    ebp
c0018c85:	e9 90 05 00 00       	jmp    c001921a <Dbg::kprintf(char const*, ...)>

c0018c8a <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018c8a:	55                   	push   ebp
c0018c8b:	57                   	push   edi
c0018c8c:	56                   	push   esi
c0018c8d:	53                   	push   ebx
c0018c8e:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018c94:	8b 9c 24 34 10 00 00 	mov    ebx,DWORD PTR [esp+0x1034]
c0018c9b:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0018ca1:	77 78                	ja     c0018d1b <VAS::tryLoadBackOffDisk(unsigned long)+0x91>
c0018ca3:	83 ec 08             	sub    esp,0x8
c0018ca6:	53                   	push   ebx
c0018ca7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018cad:	68 21 16 03 c0       	push   0xc0031621
c0018cb2:	e8 63 05 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018cb7:	58                   	pop    eax
c0018cb8:	5a                   	pop    edx
c0018cb9:	53                   	push   ebx
c0018cba:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018cc1:	51                   	push   ecx
c0018cc2:	e8 33 f5 ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c0018cc7:	83 c4 10             	add    esp,0x10
c0018cca:	85 c0                	test   eax,eax
c0018ccc:	89 c5                	mov    ebp,eax
c0018cce:	0f 95 c0             	setne  al
c0018cd1:	85 db                	test   ebx,ebx
c0018cd3:	0f 95 c2             	setne  dl
c0018cd6:	21 d0                	and    eax,edx
c0018cd8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018cdc:	a8 01                	test   al,0x1
c0018cde:	75 0f                	jne    c0018cef <VAS::tryLoadBackOffDisk(unsigned long)+0x65>
c0018ce0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018ce4:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018cea:	5b                   	pop    ebx
c0018ceb:	5e                   	pop    esi
c0018cec:	5f                   	pop    edi
c0018ced:	5d                   	pop    ebp
c0018cee:	c3                   	ret    
c0018cef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cf2:	f6 c4 02             	test   ah,0x2
c0018cf5:	75 39                	jne    c0018d30 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0018cf7:	89 c2                	mov    edx,eax
c0018cf9:	81 e2 01 04 00 00    	and    edx,0x401
c0018cff:	81 fa 00 04 00 00    	cmp    edx,0x400
c0018d05:	74 73                	je     c0018d7a <VAS::tryLoadBackOffDisk(unsigned long)+0xf0>
c0018d07:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018d0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018d10:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018d16:	5b                   	pop    ebx
c0018d17:	5e                   	pop    esi
c0018d18:	5f                   	pop    edi
c0018d19:	5d                   	pop    ebp
c0018d1a:	c3                   	ret    
c0018d1b:	83 ec 0c             	sub    esp,0xc
c0018d1e:	68 0f 16 03 c0       	push   0xc003160f
c0018d23:	e8 7a 74 00 00       	call   c00201a2 <KePanic(char const*)>
c0018d28:	83 c4 10             	add    esp,0x10
c0018d2b:	e9 73 ff ff ff       	jmp    c0018ca3 <VAS::tryLoadBackOffDisk(unsigned long)+0x19>
c0018d30:	83 ec 0c             	sub    esp,0xc
c0018d33:	89 de                	mov    esi,ebx
c0018d35:	68 74 14 03 c0       	push   0xc0031474
c0018d3a:	e8 db 04 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018d3f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018d43:	e8 aa d9 ff ff       	call   c00166f2 <Phys::allocatePage()>
c0018d48:	ba 00 10 00 00       	mov    edx,0x1000
c0018d4d:	89 d1                	mov    ecx,edx
c0018d4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d51:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018d54:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018d5a:	09 c8                	or     eax,ecx
c0018d5c:	83 c8 02             	or     eax,0x2
c0018d5f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d62:	0f 20 d8             	mov    eax,cr3
c0018d65:	0f 22 d8             	mov    cr3,eax
c0018d68:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018d6c:	89 df                	mov    edi,ebx
c0018d6e:	89 d1                	mov    ecx,edx
c0018d70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d72:	83 c4 10             	add    esp,0x10
c0018d75:	e9 66 ff ff ff       	jmp    c0018ce0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>
c0018d7a:	c1 e8 0c             	shr    eax,0xc
c0018d7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d81:	e8 6c d9 ff ff       	call   c00166f2 <Phys::allocatePage()>
c0018d86:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018d89:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0018d8f:	09 c2                	or     edx,eax
c0018d91:	81 ca 01 08 00 00    	or     edx,0x801
c0018d97:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0018d9a:	a1 2c 3b 03 c0       	mov    eax,ds:0xc0033b2c
c0018d9f:	85 c0                	test   eax,eax
c0018da1:	7e 44                	jle    c0018de7 <VAS::tryLoadBackOffDisk(unsigned long)+0x15d>
c0018da3:	89 df                	mov    edi,ebx
c0018da5:	31 f6                	xor    esi,esi
c0018da7:	83 ec 0c             	sub    esp,0xc
c0018daa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018dae:	51                   	push   ecx
c0018daf:	e8 90 f2 ff ff       	call   c0018044 <Virt::swapIDToSector(unsigned long)>
c0018db4:	31 d2                	xor    edx,edx
c0018db6:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018db9:	81 c7 00 02 00 00    	add    edi,0x200
c0018dbf:	6a 01                	push   0x1
c0018dc1:	52                   	push   edx
c0018dc2:	01 f0                	add    eax,esi
c0018dc4:	83 c6 01             	add    esi,0x1
c0018dc7:	50                   	push   eax
c0018dc8:	0f be 05 38 3b 03 c0 	movsx  eax,BYTE PTR ds:0xc0033b38
c0018dcf:	8b 2c 85 7c f2 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc0d84]
c0018dd6:	55                   	push   ebp
c0018dd7:	e8 ca 38 00 00       	call   c001c6a6 <LogicalDisk::read(unsigned long long, int, void*)>
c0018ddc:	83 c4 20             	add    esp,0x20
c0018ddf:	39 35 2c 3b 03 c0    	cmp    DWORD PTR ds:0xc0033b2c,esi
c0018de5:	7f c0                	jg     c0018da7 <VAS::tryLoadBackOffDisk(unsigned long)+0x11d>
c0018de7:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018dec:	83 ec 04             	sub    esp,0x4
c0018def:	83 e8 01             	sub    eax,0x1
c0018df2:	50                   	push   eax
c0018df3:	53                   	push   ebx
c0018df4:	68 34 16 03 c0       	push   0xc0031634
c0018df9:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018dfe:	e8 17 04 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018e03:	58                   	pop    eax
c0018e04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018e08:	52                   	push   edx
c0018e09:	e8 13 f2 ff ff       	call   c0018021 <Virt::freeSwapfilePage(unsigned long)>
c0018e0e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018e13:	83 c4 10             	add    esp,0x10
c0018e16:	83 e8 01             	sub    eax,0x1
c0018e19:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018e1e:	85 c0                	test   eax,eax
c0018e20:	75 01                	jne    c0018e23 <VAS::tryLoadBackOffDisk(unsigned long)+0x199>
c0018e22:	fb                   	sti    
c0018e23:	0f 20 d8             	mov    eax,cr3
c0018e26:	0f 22 d8             	mov    cr3,eax
c0018e29:	e9 b2 fe ff ff       	jmp    c0018ce0 <VAS::tryLoadBackOffDisk(unsigned long)+0x56>

c0018e2e <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018e2e:	55                   	push   ebp
c0018e2f:	57                   	push   edi
c0018e30:	56                   	push   esi
c0018e31:	53                   	push   ebx
c0018e32:	83 ec 28             	sub    esp,0x28
c0018e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018e39:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018e3d:	50                   	push   eax
c0018e3e:	e8 c2 f0 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c0018e43:	83 c4 0c             	add    esp,0xc
c0018e46:	6a 07                	push   0x7
c0018e48:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018e4c:	52                   	push   edx
c0018e4d:	89 c5                	mov    ebp,eax
c0018e4f:	53                   	push   ebx
c0018e50:	e8 c1 f8 ff ff       	call   c0018716 <VAS::allocatePages(int, int)>
c0018e55:	83 c4 10             	add    esp,0x10
c0018e58:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018e5c:	89 c7                	mov    edi,eax
c0018e5e:	85 c9                	test   ecx,ecx
c0018e60:	74 2f                	je     c0018e91 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018e62:	31 f6                	xor    esi,esi
c0018e64:	e8 89 d8 ff ff       	call   c00166f2 <Phys::allocatePage()>
c0018e69:	83 c6 01             	add    esi,0x1
c0018e6c:	6a 03                	push   0x3
c0018e6e:	55                   	push   ebp
c0018e6f:	50                   	push   eax
c0018e70:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018e74:	53                   	push   ebx
c0018e75:	e8 94 f7 ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e7a:	6a 07                	push   0x7
c0018e7c:	57                   	push   edi
c0018e7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e81:	50                   	push   eax
c0018e82:	53                   	push   ebx
c0018e83:	e8 86 f7 ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0018e88:	83 c4 20             	add    esp,0x20
c0018e8b:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
c0018e8f:	75 d3                	jne    c0018e64 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018e91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018e95:	89 28                	mov    DWORD PTR [eax],ebp
c0018e97:	83 c4 1c             	add    esp,0x1c
c0018e9a:	89 f8                	mov    eax,edi
c0018e9c:	5b                   	pop    ebx
c0018e9d:	5e                   	pop    esi
c0018e9e:	5f                   	pop    edi
c0018e9f:	5d                   	pop    ebp
c0018ea0:	c3                   	ret    
c0018ea1:	90                   	nop

c0018ea2 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018ea2:	53                   	push   ebx
c0018ea3:	83 ec 14             	sub    esp,0x14
c0018ea6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018eaa:	68 94 14 03 c0       	push   0xc0031494
c0018eaf:	e8 66 03 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018eb4:	c7 04 24 f4 14 03 c0 	mov    DWORD PTR [esp],0xc00314f4
c0018ebb:	e8 5a 03 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018ec0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018ec4:	83 c4 18             	add    esp,0x18
c0018ec7:	5b                   	pop    ebx
c0018ec8:	e9 4c f3 ff ff       	jmp    c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c0018ecd:	90                   	nop

c0018ece <VAS::scanForEviction()>:
c0018ece:	57                   	push   edi
c0018ecf:	56                   	push   esi
c0018ed0:	31 f6                	xor    esi,esi
c0018ed2:	53                   	push   ebx
c0018ed3:	83 ec 10             	sub    esp,0x10
c0018ed6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018eda:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018edd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018ee3:	75 0e                	jne    c0018ef3 <VAS::scanForEviction()+0x25>
c0018ee5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018ee8:	89 da                	mov    edx,ebx
c0018eea:	c1 ea 16             	shr    edx,0x16
c0018eed:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018ef1:	74 57                	je     c0018f4a <VAS::scanForEviction()+0x7c>
c0018ef3:	53                   	push   ebx
c0018ef4:	57                   	push   edi
c0018ef5:	e8 00 f3 ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c0018efa:	5a                   	pop    edx
c0018efb:	59                   	pop    ecx
c0018efc:	8b 10                	mov    edx,DWORD PTR [eax]
c0018efe:	89 d1                	mov    ecx,edx
c0018f00:	c1 e9 0c             	shr    ecx,0xc
c0018f03:	74 10                	je     c0018f15 <VAS::scanForEviction()+0x47>
c0018f05:	89 d1                	mov    ecx,edx
c0018f07:	81 e1 01 08 00 00    	and    ecx,0x801
c0018f0d:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018f13:	74 40                	je     c0018f55 <VAS::scanForEviction()+0x87>
c0018f15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018f1b:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018f21:	76 2d                	jbe    c0018f50 <VAS::scanForEviction()+0x82>
c0018f23:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018f2a:	83 c6 01             	add    esi,0x1
c0018f2d:	83 fe 03             	cmp    esi,0x3
c0018f30:	74 32                	je     c0018f64 <VAS::scanForEviction()+0x96>
c0018f32:	31 db                	xor    ebx,ebx
c0018f34:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018f3a:	75 b7                	jne    c0018ef3 <VAS::scanForEviction()+0x25>
c0018f3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018f3f:	89 da                	mov    edx,ebx
c0018f41:	c1 ea 16             	shr    edx,0x16
c0018f44:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018f48:	75 a9                	jne    c0018ef3 <VAS::scanForEviction()+0x25>
c0018f4a:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018f50:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018f53:	eb 88                	jmp    c0018edd <VAS::scanForEviction()+0xf>
c0018f55:	f6 c2 20             	test   dl,0x20
c0018f58:	74 13                	je     c0018f6d <VAS::scanForEviction()+0x9f>
c0018f5a:	83 e2 df             	and    edx,0xffffffdf
c0018f5d:	89 10                	mov    DWORD PTR [eax],edx
c0018f5f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018f62:	eb b1                	jmp    c0018f15 <VAS::scanForEviction()+0x47>
c0018f64:	83 c4 10             	add    esp,0x10
c0018f67:	31 c0                	xor    eax,eax
c0018f69:	5b                   	pop    ebx
c0018f6a:	5e                   	pop    esi
c0018f6b:	5f                   	pop    edi
c0018f6c:	c3                   	ret    
c0018f6d:	89 d0                	mov    eax,edx
c0018f6f:	83 ec 08             	sub    esp,0x8
c0018f72:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018f77:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018f7b:	53                   	push   ebx
c0018f7c:	68 49 16 03 c0       	push   0xc0031649
c0018f81:	e8 94 02 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018f86:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018f89:	58                   	pop    eax
c0018f8a:	5a                   	pop    edx
c0018f8b:	51                   	push   ecx
c0018f8c:	57                   	push   edi
c0018f8d:	e8 1a fc ff ff       	call   c0018bac <VAS::evict(unsigned long)>
c0018f92:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018f95:	5b                   	pop    ebx
c0018f96:	5e                   	pop    esi
c0018f97:	50                   	push   eax
c0018f98:	68 5d 16 03 c0       	push   0xc003165d
c0018f9d:	e8 78 02 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018fa2:	58                   	pop    eax
c0018fa3:	5a                   	pop    edx
c0018fa4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fa8:	50                   	push   eax
c0018fa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fad:	68 70 16 03 c0       	push   0xc0031670
c0018fb2:	e8 63 02 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0018fb7:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018fba:	83 c4 10             	add    esp,0x10
c0018fbd:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018fc3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018fca:	83 c4 10             	add    esp,0x10
c0018fcd:	5b                   	pop    ebx
c0018fce:	5e                   	pop    esi
c0018fcf:	5f                   	pop    edi
c0018fd0:	c3                   	ret    

c0018fd1 <mapVASFirstTime>:
c0018fd1:	55                   	push   ebp
c0018fd2:	57                   	push   edi
c0018fd3:	56                   	push   esi
c0018fd4:	53                   	push   ebx
c0018fd5:	83 ec 0c             	sub    esp,0xc
c0018fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fdd:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018fe0:	83 fa 01             	cmp    edx,0x1
c0018fe3:	0f 84 cb 00 00 00    	je     c00190b4 <mapVASFirstTime+0xe3>
c0018fe9:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018fec:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018ff1:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018ff6:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018ff9:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0018fff:	c1 e5 15             	shl    ebp,0x15
c0019002:	29 eb                	sub    ebx,ebp
c0019004:	29 ef                	sub    edi,ebp
c0019006:	e8 e7 d6 ff ff       	call   c00166f2 <Phys::allocatePage()>
c001900b:	83 ec 0c             	sub    esp,0xc
c001900e:	68 03 04 00 00       	push   0x403
c0019013:	6a 01                	push   0x1
c0019015:	53                   	push   ebx
c0019016:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001901c:	50                   	push   eax
c001901d:	56                   	push   esi
c001901e:	e8 f5 f7 ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019023:	83 c4 20             	add    esp,0x20
c0019026:	39 fb                	cmp    ebx,edi
c0019028:	75 dc                	jne    c0019006 <mapVASFirstTime+0x35>
c001902a:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c001902f:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0019034:	29 eb                	sub    ebx,ebp
c0019036:	29 ef                	sub    edi,ebp
c0019038:	e8 b5 d6 ff ff       	call   c00166f2 <Phys::allocatePage()>
c001903d:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0019041:	83 fa 01             	cmp    edx,0x1
c0019044:	19 d2                	sbb    edx,edx
c0019046:	83 ec 0c             	sub    esp,0xc
c0019049:	83 e2 04             	and    edx,0x4
c001904c:	81 c2 03 04 00 00    	add    edx,0x403
c0019052:	52                   	push   edx
c0019053:	6a 01                	push   0x1
c0019055:	53                   	push   ebx
c0019056:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001905c:	50                   	push   eax
c001905d:	56                   	push   esi
c001905e:	e8 b5 f7 ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019063:	83 c4 20             	add    esp,0x20
c0019066:	39 df                	cmp    edi,ebx
c0019068:	75 ce                	jne    c0019038 <mapVASFirstTime+0x67>
c001906a:	83 ec 0c             	sub    esp,0xc
c001906d:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0019072:	6a 04                	push   0x4
c0019074:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c001907a:	6a ff                	push   0xffffffff
c001907c:	c1 eb 0c             	shr    ebx,0xc
c001907f:	53                   	push   ebx
c0019080:	68 00 50 03 c0       	push   0xc0035000
c0019085:	56                   	push   esi
c0019086:	e8 09 f3 ff ff       	call   c0018394 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001908b:	83 c4 14             	add    esp,0x14
c001908e:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0019093:	6a 04                	push   0x4
c0019095:	6a ff                	push   0xffffffff
c0019097:	53                   	push   ebx
c0019098:	68 00 50 03 c0       	push   0xc0035000
c001909d:	50                   	push   eax
c001909e:	e8 f1 f2 ff ff       	call   c0018394 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00190a3:	0f 20 d8             	mov    eax,cr3
c00190a6:	0f 22 d8             	mov    cr3,eax
c00190a9:	83 c4 20             	add    esp,0x20
c00190ac:	83 c4 0c             	add    esp,0xc
c00190af:	5b                   	pop    ebx
c00190b0:	5e                   	pop    esi
c00190b1:	5f                   	pop    edi
c00190b2:	5d                   	pop    ebp
c00190b3:	c3                   	ret    
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	68 7d 16 03 c0       	push   0xc003167d
c00190bc:	e8 59 01 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00190c1:	83 c4 10             	add    esp,0x10
c00190c4:	83 c4 0c             	add    esp,0xc
c00190c7:	5b                   	pop    ebx
c00190c8:	5e                   	pop    esi
c00190c9:	5f                   	pop    edi
c00190ca:	5d                   	pop    ebp
c00190cb:	c3                   	ret    

c00190cc <__cxa_atexit>:
c00190cc:	31 c0                	xor    eax,eax
c00190ce:	c3                   	ret    

c00190cf <__cxa_finalize>:
c00190cf:	c3                   	ret    

c00190d0 <__stack_chk_fail>:
c00190d0:	55                   	push   ebp
c00190d1:	89 e5                	mov    ebp,esp
c00190d3:	83 ec 10             	sub    esp,0x10
c00190d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00190d9:	68 96 16 03 c0       	push   0xc0031696
c00190de:	e8 37 01 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00190e3:	58                   	pop    eax
c00190e4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00190e7:	5a                   	pop    edx
c00190e8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00190eb:	68 96 16 03 c0       	push   0xc0031696
c00190f0:	e8 25 01 00 00       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00190f5:	c7 04 24 9e 16 03 c0 	mov    DWORD PTR [esp],0xc003169e
c00190fc:	e8 a1 70 00 00       	call   c00201a2 <KePanic(char const*)>
c0019101:	83 c4 10             	add    esp,0x10
c0019104:	c9                   	leave  
c0019105:	c3                   	ret    

c0019106 <__cxa_pure_virtual>:
c0019106:	83 ec 18             	sub    esp,0x18
c0019109:	68 b6 16 03 c0       	push   0xc00316b6
c001910e:	e8 8f 70 00 00       	call   c00201a2 <KePanic(char const*)>
c0019113:	83 c4 1c             	add    esp,0x1c
c0019116:	c3                   	ret    

c0019117 <operator new[](unsigned long)>:
c0019117:	e9 c7 d2 ff ff       	jmp    c00163e3 <malloc>

c001911c <operator delete(void*, unsigned long)>:
c001911c:	e9 e2 d2 ff ff       	jmp    c0016403 <rfree>

c0019121 <operator delete[](void*)>:
c0019121:	e9 dd d2 ff ff       	jmp    c0016403 <rfree>

c0019126 <operator delete[](void*, unsigned long)>:
c0019126:	e9 d8 d2 ff ff       	jmp    c0016403 <rfree>

c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001912b:	55                   	push   ebp
c001912c:	57                   	push   edi
c001912d:	56                   	push   esi
c001912e:	53                   	push   ebx
c001912f:	83 ec 20             	sub    esp,0x20
c0019132:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019136:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c001913e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019142:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c001914a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001914e:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c0019156:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c001915e:	89 f7                	mov    edi,esi
c0019160:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019165:	89 eb                	mov    ebx,ebp
c0019167:	eb 02                	jmp    c001916b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x40>
c0019169:	89 c7                	mov    edi,eax
c001916b:	31 d2                	xor    edx,edx
c001916d:	89 f8                	mov    eax,edi
c001916f:	f7 f1                	div    ecx
c0019171:	83 c3 01             	add    ebx,0x1
c0019174:	39 cf                	cmp    edi,ecx
c0019176:	73 f1                	jae    c0019169 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3e>
c0019178:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001917b:	eb 02                	jmp    c001917f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x54>
c001917d:	89 c6                	mov    esi,eax
c001917f:	31 d2                	xor    edx,edx
c0019181:	89 f0                	mov    eax,esi
c0019183:	f7 f1                	div    ecx
c0019185:	83 eb 01             	sub    ebx,0x1
c0019188:	39 ce                	cmp    esi,ecx
c001918a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c001918e:	88 13                	mov    BYTE PTR [ebx],dl
c0019190:	73 eb                	jae    c001917d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x52>
c0019192:	83 c4 20             	add    esp,0x20
c0019195:	89 e8                	mov    eax,ebp
c0019197:	5b                   	pop    ebx
c0019198:	5e                   	pop    esi
c0019199:	5f                   	pop    edi
c001919a:	5d                   	pop    ebp
c001919b:	c3                   	ret    

c001919c <Dbg::logc(char)>:
c001919c:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c00191a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191a7:	75 12                	jne    c00191bb <Dbg::logc(char)+0x1f>
c00191a9:	ba fd 03 00 00       	mov    edx,0x3fd
c00191ae:	ec                   	in     al,dx
c00191af:	a8 20                	test   al,0x20
c00191b1:	74 fb                	je     c00191ae <Dbg::logc(char)+0x12>
c00191b3:	ba f8 03 00 00       	mov    edx,0x3f8
c00191b8:	88 c8                	mov    al,cl
c00191ba:	ee                   	out    dx,al
c00191bb:	c3                   	ret    

c00191bc <Dbg::logs(char*)>:
c00191bc:	53                   	push   ebx
c00191bd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00191c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191c4:	85 c0                	test   eax,eax
c00191c6:	74 11                	je     c00191d9 <Dbg::logs(char*)+0x1d>
c00191c8:	50                   	push   eax
c00191c9:	83 c3 01             	add    ebx,0x1
c00191cc:	e8 cb ff ff ff       	call   c001919c <Dbg::logc(char)>
c00191d1:	58                   	pop    eax
c00191d2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191d5:	85 c0                	test   eax,eax
c00191d7:	75 ef                	jne    c00191c8 <Dbg::logs(char*)+0xc>
c00191d9:	5b                   	pop    ebx
c00191da:	c3                   	ret    

c00191db <Dbg::logWriteInt(unsigned int)>:
c00191db:	83 ec 10             	sub    esp,0x10
c00191de:	6a 0a                	push   0xa
c00191e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191e4:	50                   	push   eax
c00191e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191e9:	50                   	push   eax
c00191ea:	e8 3c ff ff ff       	call   c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00191ef:	50                   	push   eax
c00191f0:	e8 c7 ff ff ff       	call   c00191bc <Dbg::logs(char*)>
c00191f5:	83 c4 20             	add    esp,0x20
c00191f8:	c3                   	ret    

c00191f9 <Dbg::logWriteIntBase(unsigned int, int)>:
c00191f9:	83 ec 10             	sub    esp,0x10
c00191fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019200:	50                   	push   eax
c0019201:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019205:	50                   	push   eax
c0019206:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001920a:	52                   	push   edx
c001920b:	e8 1b ff ff ff       	call   c001912b <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019210:	50                   	push   eax
c0019211:	e8 a6 ff ff ff       	call   c00191bc <Dbg::logs(char*)>
c0019216:	83 c4 20             	add    esp,0x20
c0019219:	c3                   	ret    

c001921a <Dbg::kprintf(char const*, ...)>:
c001921a:	55                   	push   ebp
c001921b:	57                   	push   edi
c001921c:	56                   	push   esi
c001921d:	53                   	push   ebx
c001921e:	83 ec 0c             	sub    esp,0xc
c0019221:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c0019228:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001922c:	74 08                	je     c0019236 <Dbg::kprintf(char const*, ...)+0x1c>
c001922e:	83 c4 0c             	add    esp,0xc
c0019231:	5b                   	pop    ebx
c0019232:	5e                   	pop    esi
c0019233:	5f                   	pop    edi
c0019234:	5d                   	pop    ebp
c0019235:	c3                   	ret    
c0019236:	8d 44 24 24          	lea    eax,[esp+0x24]
c001923a:	31 ff                	xor    edi,edi
c001923c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019240:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019243:	85 c0                	test   eax,eax
c0019245:	74 e7                	je     c001922e <Dbg::kprintf(char const*, ...)+0x14>
c0019247:	8d 77 01             	lea    esi,[edi+0x1]
c001924a:	83 f8 25             	cmp    eax,0x25
c001924d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019250:	75 47                	jne    c0019299 <Dbg::kprintf(char const*, ...)+0x7f>
c0019252:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0019255:	83 c7 02             	add    edi,0x2
c0019258:	8d 34 3b             	lea    esi,[ebx+edi*1]
c001925b:	83 e8 25             	sub    eax,0x25
c001925e:	0f b6 c0             	movzx  eax,al
c0019261:	83 f8 53             	cmp    eax,0x53
c0019264:	0f 87 ce 00 00 00    	ja     c0019338 <Dbg::kprintf(char const*, ...)+0x11e>
c001926a:	ff 24 85 cc 16 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce934]
c0019271:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019275:	89 c8                	mov    eax,ecx
c0019277:	83 c1 04             	add    ecx,0x4
c001927a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001927e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0019280:	55                   	push   ebp
c0019281:	e8 55 ff ff ff       	call   c00191db <Dbg::logWriteInt(unsigned int)>
c0019286:	58                   	pop    eax
c0019287:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001928a:	85 c0                	test   eax,eax
c001928c:	74 a0                	je     c001922e <Dbg::kprintf(char const*, ...)+0x14>
c001928e:	8d 77 01             	lea    esi,[edi+0x1]
c0019291:	83 f8 25             	cmp    eax,0x25
c0019294:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0019297:	74 b9                	je     c0019252 <Dbg::kprintf(char const*, ...)+0x38>
c0019299:	50                   	push   eax
c001929a:	89 f7                	mov    edi,esi
c001929c:	e8 fb fe ff ff       	call   c001919c <Dbg::logc(char)>
c00192a1:	89 ee                	mov    esi,ebp
c00192a3:	58                   	pop    eax
c00192a4:	eb e1                	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c00192a6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192aa:	89 c8                	mov    eax,ecx
c00192ac:	83 c1 04             	add    ecx,0x4
c00192af:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00192b5:	50                   	push   eax
c00192b6:	e8 01 ff ff ff       	call   c00191bc <Dbg::logs(char*)>
c00192bb:	58                   	pop    eax
c00192bc:	eb c9                	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c00192be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192c2:	89 d0                	mov    eax,edx
c00192c4:	83 c2 04             	add    edx,0x4
c00192c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00192cd:	50                   	push   eax
c00192ce:	e8 08 ff ff ff       	call   c00191db <Dbg::logWriteInt(unsigned int)>
c00192d3:	58                   	pop    eax
c00192d4:	eb b1                	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c00192d6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00192da:	89 d0                	mov    eax,edx
c00192dc:	83 c2 04             	add    edx,0x4
c00192df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00192e3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00192e6:	50                   	push   eax
c00192e7:	e8 b0 fe ff ff       	call   c001919c <Dbg::logc(char)>
c00192ec:	58                   	pop    eax
c00192ed:	eb 98                	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c00192ef:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00192f3:	89 c8                	mov    eax,ecx
c00192f5:	83 c1 04             	add    ecx,0x4
c00192f8:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00192fc:	6a 10                	push   0x10
c00192fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019300:	51                   	push   ecx
c0019301:	e8 f3 fe ff ff       	call   c00191f9 <Dbg::logWriteIntBase(unsigned int, int)>
c0019306:	5d                   	pop    ebp
c0019307:	58                   	pop    eax
c0019308:	e9 7a ff ff ff       	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c001930d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019311:	89 d0                	mov    eax,edx
c0019313:	83 c2 08             	add    edx,0x8
c0019316:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001931a:	6a 10                	push   0x10
c001931c:	8b 00                	mov    eax,DWORD PTR [eax]
c001931e:	50                   	push   eax
c001931f:	e8 d5 fe ff ff       	call   c00191f9 <Dbg::logWriteIntBase(unsigned int, int)>
c0019324:	58                   	pop    eax
c0019325:	5a                   	pop    edx
c0019326:	e9 5c ff ff ff       	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c001932b:	6a 25                	push   0x25
c001932d:	e8 6a fe ff ff       	call   c001919c <Dbg::logc(char)>
c0019332:	5a                   	pop    edx
c0019333:	e9 4f ff ff ff       	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>
c0019338:	6a 25                	push   0x25
c001933a:	e8 5d fe ff ff       	call   c001919c <Dbg::logc(char)>
c001933f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0019343:	50                   	push   eax
c0019344:	e8 53 fe ff ff       	call   c001919c <Dbg::logc(char)>
c0019349:	5a                   	pop    edx
c001934a:	59                   	pop    ecx
c001934b:	e9 37 ff ff ff       	jmp    c0019287 <Dbg::kprintf(char const*, ...)+0x6d>

c0019350 <KiUbsanPrintDetails(char const*, void*)>:
c0019350:	83 ec 1c             	sub    esp,0x1c
c0019353:	83 ec 08             	sub    esp,0x8
c0019356:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001935a:	68 1c 18 03 c0       	push   0xc003181c
c001935f:	e8 b6 fe ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019364:	83 c4 10             	add    esp,0x10
c0019367:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001936b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001936f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019373:	8b 00                	mov    eax,DWORD PTR [eax]
c0019375:	83 ec 08             	sub    esp,0x8
c0019378:	50                   	push   eax
c0019379:	68 30 18 03 c0       	push   0xc0031830
c001937e:	e8 97 fe ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019383:	83 c4 10             	add    esp,0x10
c0019386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001938a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001938d:	83 ec 08             	sub    esp,0x8
c0019390:	50                   	push   eax
c0019391:	68 3a 18 03 c0       	push   0xc003183a
c0019396:	e8 7f fe ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001939b:	83 c4 10             	add    esp,0x10
c001939e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00193a5:	83 ec 08             	sub    esp,0x8
c00193a8:	50                   	push   eax
c00193a9:	68 44 18 03 c0       	push   0xc0031844
c00193ae:	e8 67 fe ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00193b3:	83 c4 10             	add    esp,0x10
c00193b6:	90                   	nop
c00193b7:	83 c4 1c             	add    esp,0x1c
c00193ba:	c3                   	ret    
c00193bb:	90                   	nop

c00193bc <__ubsan_handle_type_mismatch_v1>:
c00193bc:	83 ec 0c             	sub    esp,0xc
c00193bf:	83 ec 08             	sub    esp,0x8
c00193c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193c6:	68 88 19 03 c0       	push   0xc0031988
c00193cb:	e8 80 ff ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00193d8:	75 16                	jne    c00193f0 <__ubsan_handle_type_mismatch_v1+0x34>
c00193da:	83 ec 0c             	sub    esp,0xc
c00193dd:	68 4e 18 03 c0       	push   0xc003184e
c00193e2:	e8 33 fe ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	e9 91 00 00 00       	jmp    c0019480 <__ubsan_handle_type_mismatch_v1+0xc4>
c00193ef:	90                   	nop
c00193f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00193f7:	85 c0                	test   eax,eax
c00193f9:	74 29                	je     c0019424 <__ubsan_handle_type_mismatch_v1+0x68>
c00193fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019402:	83 e8 01             	sub    eax,0x1
c0019405:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0019409:	75 19                	jne    c0019424 <__ubsan_handle_type_mismatch_v1+0x68>
c001940b:	83 ec 08             	sub    esp,0x8
c001940e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019412:	68 a8 19 03 c0       	push   0xc00319a8
c0019417:	e8 fe fd ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001941c:	83 c4 10             	add    esp,0x10
c001941f:	eb 5f                	jmp    c0019480 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019421:	8d 76 00             	lea    esi,[esi+0x0]
c0019424:	83 ec 0c             	sub    esp,0xc
c0019427:	68 63 18 03 c0       	push   0xc0031863
c001942c:	e8 e9 fd ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019431:	83 c4 10             	add    esp,0x10
c0019434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019438:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c001943b:	0f b6 c0             	movzx  eax,al
c001943e:	83 ec 08             	sub    esp,0x8
c0019441:	50                   	push   eax
c0019442:	68 7d 18 03 c0       	push   0xc003187d
c0019447:	e8 ce fd ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019453:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019456:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0019459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001945d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019461:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0019464:	0f b6 c0             	movzx  eax,al
c0019467:	8b 04 85 40 3b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc4c0]
c001946e:	51                   	push   ecx
c001946f:	52                   	push   edx
c0019470:	50                   	push   eax
c0019471:	68 d0 19 03 c0       	push   0xc00319d0
c0019476:	e8 9f fd ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001947b:	83 c4 10             	add    esp,0x10
c001947e:	66 90                	xchg   ax,ax
c0019480:	83 ec 0c             	sub    esp,0xc
c0019483:	68 88 19 03 c0       	push   0xc0031988
c0019488:	e8 15 6d 00 00       	call   c00201a2 <KePanic(char const*)>
c001948d:	83 c4 10             	add    esp,0x10
c0019490:	90                   	nop
c0019491:	83 c4 0c             	add    esp,0xc
c0019494:	c3                   	ret    
c0019495:	8d 76 00             	lea    esi,[esi+0x0]

c0019498 <__ubsan_handle_pointer_overflow>:
c0019498:	83 ec 0c             	sub    esp,0xc
c001949b:	83 ec 08             	sub    esp,0x8
c001949e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194a2:	68 18 1a 03 c0       	push   0xc0031a18
c00194a7:	e8 a4 fe ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c00194ac:	83 c4 10             	add    esp,0x10
c00194af:	83 ec 0c             	sub    esp,0xc
c00194b2:	68 18 1a 03 c0       	push   0xc0031a18
c00194b7:	e8 e6 6c 00 00       	call   c00201a2 <KePanic(char const*)>
c00194bc:	83 c4 10             	add    esp,0x10
c00194bf:	90                   	nop
c00194c0:	83 c4 0c             	add    esp,0xc
c00194c3:	c3                   	ret    

c00194c4 <__ubsan_handle_out_of_bounds>:
c00194c4:	83 ec 0c             	sub    esp,0xc
c00194c7:	83 ec 08             	sub    esp,0x8
c00194ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194ce:	68 88 18 03 c0       	push   0xc0031888
c00194d3:	e8 78 fe ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c00194d8:	83 c4 10             	add    esp,0x10
c00194db:	83 ec 0c             	sub    esp,0xc
c00194de:	68 88 18 03 c0       	push   0xc0031888
c00194e3:	e8 ba 6c 00 00       	call   c00201a2 <KePanic(char const*)>
c00194e8:	83 c4 10             	add    esp,0x10
c00194eb:	90                   	nop
c00194ec:	83 c4 0c             	add    esp,0xc
c00194ef:	c3                   	ret    

c00194f0 <__ubsan_handle_add_overflow>:
c00194f0:	83 ec 0c             	sub    esp,0xc
c00194f3:	83 ec 08             	sub    esp,0x8
c00194f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194fa:	68 a5 18 03 c0       	push   0xc00318a5
c00194ff:	e8 4c fe ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	83 ec 0c             	sub    esp,0xc
c001950a:	68 a5 18 03 c0       	push   0xc00318a5
c001950f:	e8 8e 6c 00 00       	call   c00201a2 <KePanic(char const*)>
c0019514:	83 c4 10             	add    esp,0x10
c0019517:	90                   	nop
c0019518:	83 c4 0c             	add    esp,0xc
c001951b:	c3                   	ret    

c001951c <__ubsan_handle_load_invalid_value>:
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	83 ec 08             	sub    esp,0x8
c0019522:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019526:	68 38 1a 03 c0       	push   0xc0031a38
c001952b:	e8 20 fe ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	83 ec 0c             	sub    esp,0xc
c0019536:	68 38 1a 03 c0       	push   0xc0031a38
c001953b:	e8 62 6c 00 00       	call   c00201a2 <KePanic(char const*)>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	90                   	nop
c0019544:	83 c4 0c             	add    esp,0xc
c0019547:	c3                   	ret    

c0019548 <__ubsan_handle_divrem_overflow>:
c0019548:	83 ec 0c             	sub    esp,0xc
c001954b:	83 ec 08             	sub    esp,0x8
c001954e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019552:	68 5c 1a 03 c0       	push   0xc0031a5c
c0019557:	e8 f4 fd ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c001955c:	83 c4 10             	add    esp,0x10
c001955f:	83 ec 0c             	sub    esp,0xc
c0019562:	68 5c 1a 03 c0       	push   0xc0031a5c
c0019567:	e8 36 6c 00 00       	call   c00201a2 <KePanic(char const*)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	90                   	nop
c0019570:	83 c4 0c             	add    esp,0xc
c0019573:	c3                   	ret    

c0019574 <__ubsan_handle_mul_overflow>:
c0019574:	83 ec 0c             	sub    esp,0xc
c0019577:	83 ec 08             	sub    esp,0x8
c001957a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001957e:	68 c1 18 03 c0       	push   0xc00318c1
c0019583:	e8 c8 fd ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	83 ec 0c             	sub    esp,0xc
c001958e:	68 c1 18 03 c0       	push   0xc00318c1
c0019593:	e8 0a 6c 00 00       	call   c00201a2 <KePanic(char const*)>
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	90                   	nop
c001959c:	83 c4 0c             	add    esp,0xc
c001959f:	c3                   	ret    

c00195a0 <__ubsan_handle_sub_overflow>:
c00195a0:	83 ec 0c             	sub    esp,0xc
c00195a3:	83 ec 08             	sub    esp,0x8
c00195a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195aa:	68 dd 18 03 c0       	push   0xc00318dd
c00195af:	e8 9c fd ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c00195b4:	83 c4 10             	add    esp,0x10
c00195b7:	83 ec 0c             	sub    esp,0xc
c00195ba:	68 dd 18 03 c0       	push   0xc00318dd
c00195bf:	e8 de 6b 00 00       	call   c00201a2 <KePanic(char const*)>
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	90                   	nop
c00195c8:	83 c4 0c             	add    esp,0xc
c00195cb:	c3                   	ret    

c00195cc <__ubsan_handle_shift_out_of_bounds>:
c00195cc:	83 ec 0c             	sub    esp,0xc
c00195cf:	83 ec 08             	sub    esp,0x8
c00195d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00195d6:	68 7c 1a 03 c0       	push   0xc0031a7c
c00195db:	e8 70 fd ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c00195e0:	83 c4 10             	add    esp,0x10
c00195e3:	83 ec 0c             	sub    esp,0xc
c00195e6:	68 7c 1a 03 c0       	push   0xc0031a7c
c00195eb:	e8 b2 6b 00 00       	call   c00201a2 <KePanic(char const*)>
c00195f0:	83 c4 10             	add    esp,0x10
c00195f3:	90                   	nop
c00195f4:	83 c4 0c             	add    esp,0xc
c00195f7:	c3                   	ret    

c00195f8 <__ubsan_handle_negate_overflow>:
c00195f8:	83 ec 0c             	sub    esp,0xc
c00195fb:	83 ec 08             	sub    esp,0x8
c00195fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019602:	68 a0 1a 03 c0       	push   0xc0031aa0
c0019607:	e8 44 fd ff ff       	call   c0019350 <KiUbsanPrintDetails(char const*, void*)>
c001960c:	83 c4 10             	add    esp,0x10
c001960f:	83 ec 0c             	sub    esp,0xc
c0019612:	68 a0 1a 03 c0       	push   0xc0031aa0
c0019617:	e8 86 6b 00 00       	call   c00201a2 <KePanic(char const*)>
c001961c:	83 c4 10             	add    esp,0x10
c001961f:	90                   	nop
c0019620:	83 c4 0c             	add    esp,0xc
c0019623:	c3                   	ret    

c0019624 <KiIsHashInTable(unsigned short)>:
c0019624:	0f b7 d0             	movzx  edx,ax
c0019627:	83 e0 07             	and    eax,0x7
c001962a:	c1 fa 03             	sar    edx,0x3
c001962d:	88 c1                	mov    cl,al
c001962f:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c0019636:	d3 fa                	sar    edx,cl
c0019638:	89 d0                	mov    eax,edx
c001963a:	83 e0 01             	and    eax,0x1
c001963d:	c3                   	ret    

c001963e <KiSetHashInTable(unsigned short, bool)>:
c001963e:	56                   	push   esi
c001963f:	53                   	push   ebx
c0019640:	0f b7 d8             	movzx  ebx,ax
c0019643:	c1 fb 03             	sar    ebx,0x3
c0019646:	83 e0 07             	and    eax,0x7
c0019649:	89 c1                	mov    ecx,eax
c001964b:	b8 01 00 00 00       	mov    eax,0x1
c0019650:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c0019657:	d3 e0                	shl    eax,cl
c0019659:	84 d2                	test   dl,dl
c001965b:	74 04                	je     c0019661 <KiSetHashInTable(unsigned short, bool)+0x23>
c001965d:	09 f0                	or     eax,esi
c001965f:	eb 04                	jmp    c0019665 <KiSetHashInTable(unsigned short, bool)+0x27>
c0019661:	f7 d0                	not    eax
c0019663:	21 f0                	and    eax,esi
c0019665:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c001966b:	5b                   	pop    ebx
c001966c:	5e                   	pop    esi
c001966d:	c3                   	ret    

c001966e <KiFlushSymlinkChanges()>:
c001966e:	57                   	push   edi
c001966f:	56                   	push   esi
c0019670:	53                   	push   ebx
c0019671:	83 ec 1c             	sub    esp,0x1c
c0019674:	68 14 01 00 00       	push   0x114
c0019679:	e8 65 cd ff ff       	call   c00163e3 <malloc>
c001967e:	83 c4 0c             	add    esp,0xc
c0019681:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019687:	68 bf 1a 03 c0       	push   0xc0031abf
c001968c:	50                   	push   eax
c001968d:	89 c3                	mov    ebx,eax
c001968f:	e8 9e 0d 00 00       	call   c001a432 <File::File(char const*, Process*)>
c0019694:	83 c4 10             	add    esp,0x10
c0019697:	85 db                	test   ebx,ebx
c0019699:	75 10                	jne    c00196ab <KiFlushSymlinkChanges()+0x3d>
c001969b:	83 ec 0c             	sub    esp,0xc
c001969e:	68 dd 1a 03 c0       	push   0xc0031add
c00196a3:	e8 fa 6a 00 00       	call   c00201a2 <KePanic(char const*)>
c00196a8:	83 c4 10             	add    esp,0x10
c00196ab:	50                   	push   eax
c00196ac:	50                   	push   eax
c00196ad:	6a 06                	push   0x6
c00196af:	53                   	push   ebx
c00196b0:	e8 9b 0d 00 00       	call   c001a450 <File::open(FileOpenMode)>
c00196b5:	83 c4 10             	add    esp,0x10
c00196b8:	85 c0                	test   eax,eax
c00196ba:	74 10                	je     c00196cc <KiFlushSymlinkChanges()+0x5e>
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	68 f7 1a 03 c0       	push   0xc0031af7
c00196c4:	e8 d9 6a 00 00       	call   c00201a2 <KePanic(char const*)>
c00196c9:	83 c4 10             	add    esp,0x10
c00196cc:	31 f6                	xor    esi,esi
c00196ce:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c00196d4:	7e 70                	jle    c0019746 <KiFlushSymlinkChanges()+0xd8>
c00196d6:	83 ec 0c             	sub    esp,0xc
c00196d9:	89 f0                	mov    eax,esi
c00196db:	8b 13                	mov    edx,DWORD PTR [ebx]
c00196dd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00196e1:	c1 e0 08             	shl    eax,0x8
c00196e4:	57                   	push   edi
c00196e5:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00196ea:	50                   	push   eax
c00196eb:	6a 00                	push   0x0
c00196ed:	68 00 01 00 00       	push   0x100
c00196f2:	53                   	push   ebx
c00196f3:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00196f6:	83 c4 20             	add    esp,0x20
c00196f9:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019701:	74 10                	je     c0019713 <KiFlushSymlinkChanges()+0xa5>
c0019703:	83 ec 0c             	sub    esp,0xc
c0019706:	68 11 1b 03 c0       	push   0xc0031b11
c001970b:	e8 92 6a 00 00       	call   c00201a2 <KePanic(char const*)>
c0019710:	83 c4 10             	add    esp,0x10
c0019713:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019715:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c001971c:	83 ec 0c             	sub    esp,0xc
c001971f:	57                   	push   edi
c0019720:	52                   	push   edx
c0019721:	6a 00                	push   0x0
c0019723:	6a 08                	push   0x8
c0019725:	53                   	push   ebx
c0019726:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019729:	83 c4 20             	add    esp,0x20
c001972c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019731:	74 10                	je     c0019743 <KiFlushSymlinkChanges()+0xd5>
c0019733:	83 ec 0c             	sub    esp,0xc
c0019736:	68 2b 1b 03 c0       	push   0xc0031b2b
c001973b:	e8 62 6a 00 00       	call   c00201a2 <KePanic(char const*)>
c0019740:	83 c4 10             	add    esp,0x10
c0019743:	46                   	inc    esi
c0019744:	eb 88                	jmp    c00196ce <KiFlushSymlinkChanges()+0x60>
c0019746:	83 ec 0c             	sub    esp,0xc
c0019749:	53                   	push   ebx
c001974a:	e8 5f 0d 00 00       	call   c001a4ae <File::close()>
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	85 db                	test   ebx,ebx
c0019754:	74 0c                	je     c0019762 <KiFlushSymlinkChanges()+0xf4>
c0019756:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019758:	83 ec 0c             	sub    esp,0xc
c001975b:	53                   	push   ebx
c001975c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001975f:	83 c4 10             	add    esp,0x10
c0019762:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c001976c:	83 c4 10             	add    esp,0x10
c001976f:	5b                   	pop    ebx
c0019770:	5e                   	pop    esi
c0019771:	5f                   	pop    edi
c0019772:	c3                   	ret    

c0019773 <KiDeinitialiseSymlinks(void*)>:
c0019773:	e9 f6 fe ff ff       	jmp    c001966e <KiFlushSymlinkChanges()>

c0019778 <KiGetSymlinkHash(char const*)>:
c0019778:	53                   	push   ebx
c0019779:	89 c3                	mov    ebx,eax
c001977b:	83 ec 14             	sub    esp,0x14
c001977e:	50                   	push   eax
c001977f:	e8 fc 6d fe ff       	call   c0000580 <strlen>
c0019784:	5a                   	pop    edx
c0019785:	59                   	pop    ecx
c0019786:	50                   	push   eax
c0019787:	53                   	push   ebx
c0019788:	e8 7c 63 00 00       	call   c001fb09 <KeCalculateCRC32(unsigned char*, int)>
c001978d:	83 c4 18             	add    esp,0x18
c0019790:	5b                   	pop    ebx
c0019791:	89 c2                	mov    edx,eax
c0019793:	c1 ea 10             	shr    edx,0x10
c0019796:	31 d0                	xor    eax,edx
c0019798:	c3                   	ret    

c0019799 <KiCreateSymlinkID()>:
c0019799:	55                   	push   ebp
c001979a:	57                   	push   edi
c001979b:	56                   	push   esi
c001979c:	53                   	push   ebx
c001979d:	31 db                	xor    ebx,ebx
c001979f:	83 ec 1c             	sub    esp,0x1c
c00197a2:	e8 49 6b 00 00       	call   c00202f0 <KeRand()>
c00197a7:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c00197ad:	31 d2                	xor    edx,edx
c00197af:	43                   	inc    ebx
c00197b0:	31 ff                	xor    edi,edi
c00197b2:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00197b5:	89 ee                	mov    esi,ebp
c00197b7:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c00197bd:	0f a4 c2 1f          	shld   edx,eax,0x1f
c00197c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00197c5:	c1 e0 1f             	shl    eax,0x1f
c00197c8:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c00197ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197d2:	75 10                	jne    c00197e4 <KiCreateSymlinkID()+0x4b>
c00197d4:	83 ec 0c             	sub    esp,0xc
c00197d7:	68 45 1b 03 c0       	push   0xc0031b45
c00197dc:	e8 c1 69 00 00       	call   c00201a2 <KePanic(char const*)>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00197e8:	75 06                	jne    c00197f0 <KiCreateSymlinkID()+0x57>
c00197ea:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00197ee:	74 b2                	je     c00197a2 <KiCreateSymlinkID()+0x9>
c00197f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197f8:	83 c4 1c             	add    esp,0x1c
c00197fb:	5b                   	pop    ebx
c00197fc:	31 f0                	xor    eax,esi
c00197fe:	5e                   	pop    esi
c00197ff:	31 fa                	xor    edx,edi
c0019801:	5f                   	pop    edi
c0019802:	5d                   	pop    ebp
c0019803:	c3                   	ret    

c0019804 <KeRegisterSymlink(char const*, unsigned long long)>:
c0019804:	53                   	push   ebx
c0019805:	83 ec 0c             	sub    esp,0xc
c0019808:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001980c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019810:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019815:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019819:	68 00 01 00 00       	push   0x100
c001981e:	6a 00                	push   0x0
c0019820:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c0019827:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c001982e:	c1 e0 08             	shl    eax,0x8
c0019831:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019836:	50                   	push   eax
c0019837:	e8 b4 6c fe ff       	call   c00004f0 <memset>
c001983c:	58                   	pop    eax
c001983d:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c0019842:	5a                   	pop    edx
c0019843:	c1 e0 08             	shl    eax,0x8
c0019846:	53                   	push   ebx
c0019847:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001984c:	50                   	push   eax
c001984d:	e8 fe 6d fe ff       	call   c0000650 <strcpy>
c0019852:	89 d8                	mov    eax,ebx
c0019854:	e8 1f ff ff ff       	call   c0019778 <KiGetSymlinkHash(char const*)>
c0019859:	59                   	pop    ecx
c001985a:	0f b7 d8             	movzx  ebx,ax
c001985d:	58                   	pop    eax
c001985e:	53                   	push   ebx
c001985f:	68 4e 1b 03 c0       	push   0xc0031b4e
c0019864:	e8 b1 f9 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019869:	89 d8                	mov    eax,ebx
c001986b:	ba 01 00 00 00       	mov    edx,0x1
c0019870:	e8 c9 fd ff ff       	call   c001963e <KiSetHashInTable(unsigned short, bool)>
c0019875:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	40                   	inc    eax
c001987e:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c0019883:	83 f8 03             	cmp    eax,0x3
c0019886:	7e 09                	jle    c0019891 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c0019888:	83 c4 08             	add    esp,0x8
c001988b:	5b                   	pop    ebx
c001988c:	e9 dd fd ff ff       	jmp    c001966e <KiFlushSymlinkChanges()>
c0019891:	83 c4 08             	add    esp,0x8
c0019894:	5b                   	pop    ebx
c0019895:	c3                   	ret    

c0019896 <KeInitialiseSymlinks()>:
c0019896:	57                   	push   edi
c0019897:	56                   	push   esi
c0019898:	53                   	push   ebx
c0019899:	81 ec 14 01 00 00    	sub    esp,0x114
c001989f:	68 00 20 00 00       	push   0x2000
c00198a4:	6a 00                	push   0x0
c00198a6:	68 00 af 03 c0       	push   0xc003af00
c00198ab:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c00198b5:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00198bf:	e8 2c 6c fe ff       	call   c00004f0 <memset>
c00198c4:	59                   	pop    ecx
c00198c5:	5b                   	pop    ebx
c00198c6:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c00198cc:	68 62 1b 03 c0       	push   0xc0031b62
c00198d1:	e8 44 f9 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00198d6:	5e                   	pop    esi
c00198d7:	5f                   	pop    edi
c00198d8:	6a 00                	push   0x0
c00198da:	68 73 97 01 c0       	push   0xc0019773
c00198df:	e8 4a 60 00 00       	call   c001f92e <KeRegisterAtexit(void (*)(void*), void*)>
c00198e4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00198eb:	e8 f3 ca ff ff       	call   c00163e3 <malloc>
c00198f0:	83 c4 0c             	add    esp,0xc
c00198f3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00198f9:	68 bf 1a 03 c0       	push   0xc0031abf
c00198fe:	50                   	push   eax
c00198ff:	89 c3                	mov    ebx,eax
c0019901:	e8 2c 0b 00 00       	call   c001a432 <File::File(char const*, Process*)>
c0019906:	83 c4 10             	add    esp,0x10
c0019909:	85 db                	test   ebx,ebx
c001990b:	75 10                	jne    c001991d <KeInitialiseSymlinks()+0x87>
c001990d:	83 ec 0c             	sub    esp,0xc
c0019910:	68 7f 1b 03 c0       	push   0xc0031b7f
c0019915:	e8 88 68 00 00       	call   c00201a2 <KePanic(char const*)>
c001991a:	83 c4 10             	add    esp,0x10
c001991d:	83 ec 0c             	sub    esp,0xc
c0019920:	53                   	push   ebx
c0019921:	e8 ee 0d 00 00       	call   c001a714 <File::exists()>
c0019926:	83 c4 10             	add    esp,0x10
c0019929:	84 c0                	test   al,al
c001992b:	75 3a                	jne    c0019967 <KeInitialiseSymlinks()+0xd1>
c001992d:	52                   	push   edx
c001992e:	52                   	push   edx
c001992f:	6a 12                	push   0x12
c0019931:	53                   	push   ebx
c0019932:	e8 19 0b 00 00       	call   c001a450 <File::open(FileOpenMode)>
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	85 c0                	test   eax,eax
c001993c:	74 10                	je     c001994e <KeInitialiseSymlinks()+0xb8>
c001993e:	83 ec 0c             	sub    esp,0xc
c0019941:	68 9c 1b 03 c0       	push   0xc0031b9c
c0019946:	e8 57 68 00 00       	call   c00201a2 <KePanic(char const*)>
c001994b:	83 c4 10             	add    esp,0x10
c001994e:	83 ec 0c             	sub    esp,0xc
c0019951:	53                   	push   ebx
c0019952:	e8 57 0b 00 00       	call   c001a4ae <File::close()>
c0019957:	83 c4 10             	add    esp,0x10
c001995a:	85 db                	test   ebx,ebx
c001995c:	0f 84 9e 00 00 00    	je     c0019a00 <KeInitialiseSymlinks()+0x16a>
c0019962:	e9 8d 00 00 00       	jmp    c00199f4 <KeInitialiseSymlinks()+0x15e>
c0019967:	50                   	push   eax
c0019968:	50                   	push   eax
c0019969:	6a 01                	push   0x1
c001996b:	53                   	push   ebx
c001996c:	e8 df 0a 00 00       	call   c001a450 <File::open(FileOpenMode)>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	85 c0                	test   eax,eax
c0019976:	74 10                	je     c0019988 <KeInitialiseSymlinks()+0xf2>
c0019978:	83 ec 0c             	sub    esp,0xc
c001997b:	68 b9 1b 03 c0       	push   0xc0031bb9
c0019980:	e8 1d 68 00 00       	call   c00201a2 <KePanic(char const*)>
c0019985:	83 c4 10             	add    esp,0x10
c0019988:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c001998e:	83 ec 0c             	sub    esp,0xc
c0019991:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019995:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019997:	57                   	push   edi
c0019998:	8d 74 24 20          	lea    esi,[esp+0x20]
c001999c:	56                   	push   esi
c001999d:	6a 00                	push   0x0
c001999f:	68 00 01 00 00       	push   0x100
c00199a4:	53                   	push   ebx
c00199a5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199a8:	83 c4 20             	add    esp,0x20
c00199ab:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00199b3:	75 33                	jne    c00199e8 <KeInitialiseSymlinks()+0x152>
c00199b5:	83 ec 0c             	sub    esp,0xc
c00199b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199ba:	57                   	push   edi
c00199bb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00199bf:	52                   	push   edx
c00199c0:	6a 00                	push   0x0
c00199c2:	6a 08                	push   0x8
c00199c4:	53                   	push   ebx
c00199c5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00199c8:	83 c4 20             	add    esp,0x20
c00199cb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00199d0:	75 16                	jne    c00199e8 <KeInitialiseSymlinks()+0x152>
c00199d2:	89 f0                	mov    eax,esi
c00199d4:	e8 9f fd ff ff       	call   c0019778 <KiGetSymlinkHash(char const*)>
c00199d9:	ba 01 00 00 00       	mov    edx,0x1
c00199de:	0f b7 c0             	movzx  eax,ax
c00199e1:	e8 58 fc ff ff       	call   c001963e <KiSetHashInTable(unsigned short, bool)>
c00199e6:	eb a0                	jmp    c0019988 <KeInitialiseSymlinks()+0xf2>
c00199e8:	83 ec 0c             	sub    esp,0xc
c00199eb:	53                   	push   ebx
c00199ec:	e8 bd 0a 00 00       	call   c001a4ae <File::close()>
c00199f1:	83 c4 10             	add    esp,0x10
c00199f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199f6:	83 ec 0c             	sub    esp,0xc
c00199f9:	53                   	push   ebx
c00199fa:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	81 c4 10 01 00 00    	add    esp,0x110
c0019a06:	5b                   	pop    ebx
c0019a07:	5e                   	pop    esi
c0019a08:	5f                   	pop    edi
c0019a09:	c3                   	ret    

c0019a0a <KiIsSymlinkRegistered(char const*)>:
c0019a0a:	55                   	push   ebp
c0019a0b:	57                   	push   edi
c0019a0c:	56                   	push   esi
c0019a0d:	53                   	push   ebx
c0019a0e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a14:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019a1b:	89 f0                	mov    eax,esi
c0019a1d:	e8 56 fd ff ff       	call   c0019778 <KiGetSymlinkHash(char const*)>
c0019a22:	53                   	push   ebx
c0019a23:	56                   	push   esi
c0019a24:	0f b7 c0             	movzx  eax,ax
c0019a27:	50                   	push   eax
c0019a28:	68 d4 1b 03 c0       	push   0xc0031bd4
c0019a2d:	e8 e8 f7 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019a32:	89 f0                	mov    eax,esi
c0019a34:	e8 3f fd ff ff       	call   c0019778 <KiGetSymlinkHash(char const*)>
c0019a39:	0f b7 c0             	movzx  eax,ax
c0019a3c:	e8 e3 fb ff ff       	call   c0019624 <KiIsHashInTable(unsigned short)>
c0019a41:	83 c4 10             	add    esp,0x10
c0019a44:	31 d2                	xor    edx,edx
c0019a46:	88 c1                	mov    cl,al
c0019a48:	31 c0                	xor    eax,eax
c0019a4a:	84 c9                	test   cl,cl
c0019a4c:	0f 84 31 01 00 00    	je     c0019b83 <KiIsSymlinkRegistered(char const*)+0x179>
c0019a52:	31 db                	xor    ebx,ebx
c0019a54:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c0019a5a:	7e 30                	jle    c0019a8c <KiIsSymlinkRegistered(char const*)+0x82>
c0019a5c:	89 d8                	mov    eax,ebx
c0019a5e:	c1 e0 08             	shl    eax,0x8
c0019a61:	51                   	push   ecx
c0019a62:	05 00 ab 03 c0       	add    eax,0xc003ab00
c0019a67:	51                   	push   ecx
c0019a68:	50                   	push   eax
c0019a69:	56                   	push   esi
c0019a6a:	e8 11 6d fe ff       	call   c0000780 <strcmp>
c0019a6f:	83 c4 10             	add    esp,0x10
c0019a72:	85 c0                	test   eax,eax
c0019a74:	75 13                	jne    c0019a89 <KiIsSymlinkRegistered(char const*)+0x7f>
c0019a76:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c0019a7d:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c0019a84:	e9 fa 00 00 00       	jmp    c0019b83 <KiIsSymlinkRegistered(char const*)+0x179>
c0019a89:	43                   	inc    ebx
c0019a8a:	eb c8                	jmp    c0019a54 <KiIsSymlinkRegistered(char const*)+0x4a>
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	68 14 01 00 00       	push   0x114
c0019a94:	e8 4a c9 ff ff       	call   c00163e3 <malloc>
c0019a99:	83 c4 0c             	add    esp,0xc
c0019a9c:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019aa2:	68 bf 1a 03 c0       	push   0xc0031abf
c0019aa7:	50                   	push   eax
c0019aa8:	89 c3                	mov    ebx,eax
c0019aaa:	e8 83 09 00 00       	call   c001a432 <File::File(char const*, Process*)>
c0019aaf:	83 c4 10             	add    esp,0x10
c0019ab2:	85 db                	test   ebx,ebx
c0019ab4:	75 12                	jne    c0019ac8 <KiIsSymlinkRegistered(char const*)+0xbe>
c0019ab6:	83 ec 0c             	sub    esp,0xc
c0019ab9:	68 e9 1b 03 c0       	push   0xc0031be9
c0019abe:	e8 df 66 00 00       	call   c00201a2 <KePanic(char const*)>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	eb 10                	jmp    c0019ad8 <KiIsSymlinkRegistered(char const*)+0xce>
c0019ac8:	83 ec 0c             	sub    esp,0xc
c0019acb:	53                   	push   ebx
c0019acc:	e8 43 0c 00 00       	call   c001a714 <File::exists()>
c0019ad1:	83 c4 10             	add    esp,0x10
c0019ad4:	84 c0                	test   al,al
c0019ad6:	74 de                	je     c0019ab6 <KiIsSymlinkRegistered(char const*)+0xac>
c0019ad8:	52                   	push   edx
c0019ad9:	52                   	push   edx
c0019ada:	6a 01                	push   0x1
c0019adc:	53                   	push   ebx
c0019add:	e8 6e 09 00 00       	call   c001a450 <File::open(FileOpenMode)>
c0019ae2:	83 c4 10             	add    esp,0x10
c0019ae5:	85 c0                	test   eax,eax
c0019ae7:	74 10                	je     c0019af9 <KiIsSymlinkRegistered(char const*)+0xef>
c0019ae9:	83 ec 0c             	sub    esp,0xc
c0019aec:	68 04 1c 03 c0       	push   0xc0031c04
c0019af1:	e8 ac 66 00 00       	call   c00201a2 <KePanic(char const*)>
c0019af6:	83 c4 10             	add    esp,0x10
c0019af9:	83 ec 0c             	sub    esp,0xc
c0019afc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019afe:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019b02:	55                   	push   ebp
c0019b03:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019b07:	57                   	push   edi
c0019b08:	6a 00                	push   0x0
c0019b0a:	68 00 01 00 00       	push   0x100
c0019b0f:	53                   	push   ebx
c0019b10:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b13:	83 c4 20             	add    esp,0x20
c0019b16:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019b1e:	75 4b                	jne    c0019b6b <KiIsSymlinkRegistered(char const*)+0x161>
c0019b20:	83 ec 0c             	sub    esp,0xc
c0019b23:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b25:	55                   	push   ebp
c0019b26:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019b2a:	52                   	push   edx
c0019b2b:	6a 00                	push   0x0
c0019b2d:	6a 08                	push   0x8
c0019b2f:	53                   	push   ebx
c0019b30:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b33:	83 c4 20             	add    esp,0x20
c0019b36:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019b3b:	75 2e                	jne    c0019b6b <KiIsSymlinkRegistered(char const*)+0x161>
c0019b3d:	50                   	push   eax
c0019b3e:	50                   	push   eax
c0019b3f:	57                   	push   edi
c0019b40:	56                   	push   esi
c0019b41:	e8 3a 6c fe ff       	call   c0000780 <strcmp>
c0019b46:	83 c4 10             	add    esp,0x10
c0019b49:	85 c0                	test   eax,eax
c0019b4b:	75 ac                	jne    c0019af9 <KiIsSymlinkRegistered(char const*)+0xef>
c0019b4d:	83 ec 0c             	sub    esp,0xc
c0019b50:	53                   	push   ebx
c0019b51:	e8 58 09 00 00       	call   c001a4ae <File::close()>
c0019b56:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b66:	83 c4 10             	add    esp,0x10
c0019b69:	eb 18                	jmp    c0019b83 <KiIsSymlinkRegistered(char const*)+0x179>
c0019b6b:	83 ec 0c             	sub    esp,0xc
c0019b6e:	53                   	push   ebx
c0019b6f:	e8 3a 09 00 00       	call   c001a4ae <File::close()>
c0019b74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b7c:	83 c4 10             	add    esp,0x10
c0019b7f:	31 c0                	xor    eax,eax
c0019b81:	31 d2                	xor    edx,edx
c0019b83:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b89:	5b                   	pop    ebx
c0019b8a:	5e                   	pop    esi
c0019b8b:	5f                   	pop    edi
c0019b8c:	5d                   	pop    ebp
c0019b8d:	c3                   	ret    

c0019b8e <KeDereferenceSymlink(char const*, char*)>:
c0019b8e:	55                   	push   ebp
c0019b8f:	57                   	push   edi
c0019b90:	56                   	push   esi
c0019b91:	53                   	push   ebx
c0019b92:	83 ec 48             	sub    esp,0x48
c0019b95:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019b99:	56                   	push   esi
c0019b9a:	e8 6b fe ff ff       	call   c0019a0a <KiIsSymlinkRegistered(char const*)>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	89 c7                	mov    edi,eax
c0019ba4:	89 d0                	mov    eax,edx
c0019ba6:	09 f8                	or     eax,edi
c0019ba8:	75 07                	jne    c0019bb1 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019baa:	31 c0                	xor    eax,eax
c0019bac:	e9 7c 01 00 00       	jmp    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019bb1:	83 ec 0c             	sub    esp,0xc
c0019bb4:	89 d5                	mov    ebp,edx
c0019bb6:	68 14 01 00 00       	push   0x114
c0019bbb:	e8 23 c8 ff ff       	call   c00163e3 <malloc>
c0019bc0:	83 c4 0c             	add    esp,0xc
c0019bc3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019bc9:	56                   	push   esi
c0019bca:	50                   	push   eax
c0019bcb:	89 c3                	mov    ebx,eax
c0019bcd:	e8 60 08 00 00       	call   c001a432 <File::File(char const*, Process*)>
c0019bd2:	83 c4 10             	add    esp,0x10
c0019bd5:	85 db                	test   ebx,ebx
c0019bd7:	0f 84 32 01 00 00    	je     c0019d0f <KeDereferenceSymlink(char const*, char*)+0x181>
c0019bdd:	56                   	push   esi
c0019bde:	56                   	push   esi
c0019bdf:	6a 01                	push   0x1
c0019be1:	53                   	push   ebx
c0019be2:	e8 69 08 00 00       	call   c001a450 <File::open(FileOpenMode)>
c0019be7:	83 c4 10             	add    esp,0x10
c0019bea:	85 c0                	test   eax,eax
c0019bec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bee:	74 09                	je     c0019bf9 <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019bf0:	83 ec 0c             	sub    esp,0xc
c0019bf3:	53                   	push   ebx
c0019bf4:	e9 10 01 00 00       	jmp    c0019d09 <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019bf9:	83 ec 0c             	sub    esp,0xc
c0019bfc:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019c00:	56                   	push   esi
c0019c01:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019c05:	52                   	push   edx
c0019c06:	6a 00                	push   0x0
c0019c08:	6a 08                	push   0x8
c0019c0a:	53                   	push   ebx
c0019c0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c0e:	83 c4 20             	add    esp,0x20
c0019c11:	85 c0                	test   eax,eax
c0019c13:	0f 85 e2 00 00 00    	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c19:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c1e:	0f 85 d7 00 00 00    	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c24:	83 ec 0c             	sub    esp,0xc
c0019c27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c29:	56                   	push   esi
c0019c2a:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019c2e:	52                   	push   edx
c0019c2f:	6a 00                	push   0x0
c0019c31:	6a 08                	push   0x8
c0019c33:	53                   	push   ebx
c0019c34:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c37:	83 c4 20             	add    esp,0x20
c0019c3a:	85 c0                	test   eax,eax
c0019c3c:	0f 85 b9 00 00 00    	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c42:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019c47:	0f 85 ae 00 00 00    	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c4d:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019c51:	0f 85 53 ff ff ff    	jne    c0019baa <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c57:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019c5b:	0f 85 49 ff ff ff    	jne    c0019baa <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019c61:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019c69:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019c71:	51                   	push   ecx
c0019c72:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019c76:	50                   	push   eax
c0019c77:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c7b:	50                   	push   eax
c0019c7c:	53                   	push   ebx
c0019c7d:	e8 d0 0a 00 00       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c0019c82:	83 c4 10             	add    esp,0x10
c0019c85:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019c8a:	75 6f                	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c90:	31 c9                	xor    ecx,ecx
c0019c92:	bf 0f 00 00 00       	mov    edi,0xf
c0019c97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c9b:	39 c7                	cmp    edi,eax
c0019c9d:	89 cf                	mov    edi,ecx
c0019c9f:	19 d7                	sbb    edi,edx
c0019ca1:	73 58                	jae    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ca3:	83 c0 f0             	add    eax,0xfffffff0
c0019ca6:	bf ff 00 00 00       	mov    edi,0xff
c0019cab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019caf:	83 d2 ff             	adc    edx,0xffffffff
c0019cb2:	39 c7                	cmp    edi,eax
c0019cb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019cb8:	19 d1                	sbb    ecx,edx
c0019cba:	72 53                	jb     c0019d0f <KeDereferenceSymlink(char const*, char*)+0x181>
c0019cbc:	40                   	inc    eax
c0019cbd:	52                   	push   edx
c0019cbe:	50                   	push   eax
c0019cbf:	6a 00                	push   0x0
c0019cc1:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019cc5:	e8 26 68 fe ff       	call   c00004f0 <memset>
c0019cca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ccc:	89 34 24             	mov    DWORD PTR [esp],esi
c0019ccf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019cd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019cd7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019cdb:	53                   	push   ebx
c0019cdc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019cdf:	83 c4 20             	add    esp,0x20
c0019ce2:	85 c0                	test   eax,eax
c0019ce4:	75 15                	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cea:	89 c7                	mov    edi,eax
c0019cec:	c1 ff 1f             	sar    edi,0x1f
c0019cef:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019cf3:	75 06                	jne    c0019cfb <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019cf5:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019cf9:	74 19                	je     c0019d14 <KeDereferenceSymlink(char const*, char*)+0x186>
c0019cfb:	83 ec 0c             	sub    esp,0xc
c0019cfe:	53                   	push   ebx
c0019cff:	e8 aa 07 00 00       	call   c001a4ae <File::close()>
c0019d04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d09:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d0c:	83 c4 10             	add    esp,0x10
c0019d0f:	83 c8 ff             	or     eax,0xffffffff
c0019d12:	eb 19                	jmp    c0019d2d <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019d14:	83 ec 0c             	sub    esp,0xc
c0019d17:	53                   	push   ebx
c0019d18:	e8 91 07 00 00       	call   c001a4ae <File::close()>
c0019d1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d1f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d22:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019d25:	83 c4 10             	add    esp,0x10
c0019d28:	b8 01 00 00 00       	mov    eax,0x1
c0019d2d:	83 c4 3c             	add    esp,0x3c
c0019d30:	5b                   	pop    ebx
c0019d31:	5e                   	pop    esi
c0019d32:	5f                   	pop    edi
c0019d33:	5d                   	pop    ebp
c0019d34:	c3                   	ret    

c0019d35 <KeCreateSymlink(char const*, char const*)>:
c0019d35:	55                   	push   ebp
c0019d36:	57                   	push   edi
c0019d37:	56                   	push   esi
c0019d38:	53                   	push   ebx
c0019d39:	83 ec 38             	sub    esp,0x38
c0019d3c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019d40:	68 14 01 00 00       	push   0x114
c0019d45:	e8 99 c6 ff ff       	call   c00163e3 <malloc>
c0019d4a:	6a 00                	push   0x0
c0019d4c:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019d52:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019d56:	89 c3                	mov    ebx,eax
c0019d58:	50                   	push   eax
c0019d59:	e8 f6 05 00 00       	call   c001a354 <File::File(char const*, Process*, bool)>
c0019d5e:	83 c4 20             	add    esp,0x20
c0019d61:	85 db                	test   ebx,ebx
c0019d63:	b8 01 00 00 00       	mov    eax,0x1
c0019d68:	0f 84 19 01 00 00    	je     c0019e87 <KeCreateSymlink(char const*, char const*)+0x152>
c0019d6e:	52                   	push   edx
c0019d6f:	52                   	push   edx
c0019d70:	6a 12                	push   0x12
c0019d72:	53                   	push   ebx
c0019d73:	e8 d8 06 00 00       	call   c001a450 <File::open(FileOpenMode)>
c0019d78:	83 c4 10             	add    esp,0x10
c0019d7b:	85 c0                	test   eax,eax
c0019d7d:	74 0b                	je     c0019d8a <KeCreateSymlink(char const*, char const*)+0x55>
c0019d7f:	83 ec 0c             	sub    esp,0xc
c0019d82:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d84:	53                   	push   ebx
c0019d85:	e9 f2 00 00 00       	jmp    c0019e7c <KeCreateSymlink(char const*, char const*)+0x147>
c0019d8a:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019d8e:	be 51 1c 03 c0       	mov    esi,0xc0031c51
c0019d93:	b9 09 00 00 00       	mov    ecx,0x9
c0019d98:	fc                   	cld    
c0019d99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d9b:	83 ec 0c             	sub    esp,0xc
c0019d9e:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019da2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019da4:	56                   	push   esi
c0019da5:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019da9:	52                   	push   edx
c0019daa:	6a 00                	push   0x0
c0019dac:	6a 08                	push   0x8
c0019dae:	53                   	push   ebx
c0019daf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019db2:	83 c4 20             	add    esp,0x20
c0019db5:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019dba:	0f 85 ae 00 00 00    	jne    c0019e6e <KeCreateSymlink(char const*, char const*)+0x139>
c0019dc0:	85 c0                	test   eax,eax
c0019dc2:	0f 85 a6 00 00 00    	jne    c0019e6e <KeCreateSymlink(char const*, char const*)+0x139>
c0019dc8:	e8 cc f9 ff ff       	call   c0019799 <KiCreateSymlinkID()>
c0019dcd:	83 ec 0c             	sub    esp,0xc
c0019dd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019dd4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019dd8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dda:	56                   	push   esi
c0019ddb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019ddf:	52                   	push   edx
c0019de0:	6a 00                	push   0x0
c0019de2:	6a 08                	push   0x8
c0019de4:	53                   	push   ebx
c0019de5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019de8:	83 c4 20             	add    esp,0x20
c0019deb:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019df0:	75 7c                	jne    c0019e6e <KeCreateSymlink(char const*, char const*)+0x139>
c0019df2:	85 c0                	test   eax,eax
c0019df4:	75 78                	jne    c0019e6e <KeCreateSymlink(char const*, char const*)+0x139>
c0019df6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019df8:	83 ec 0c             	sub    esp,0xc
c0019dfb:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019dfe:	55                   	push   ebp
c0019dff:	e8 7c 67 fe ff       	call   c0000580 <strlen>
c0019e04:	31 d2                	xor    edx,edx
c0019e06:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e09:	55                   	push   ebp
c0019e0a:	52                   	push   edx
c0019e0b:	50                   	push   eax
c0019e0c:	53                   	push   ebx
c0019e0d:	ff d7                	call   edi
c0019e0f:	83 c4 14             	add    esp,0x14
c0019e12:	55                   	push   ebp
c0019e13:	89 c6                	mov    esi,eax
c0019e15:	e8 66 67 fe ff       	call   c0000580 <strlen>
c0019e1a:	83 c4 10             	add    esp,0x10
c0019e1d:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e21:	75 4b                	jne    c0019e6e <KeCreateSymlink(char const*, char const*)+0x139>
c0019e23:	85 f6                	test   esi,esi
c0019e25:	75 47                	jne    c0019e6e <KeCreateSymlink(char const*, char const*)+0x139>
c0019e27:	50                   	push   eax
c0019e28:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e2c:	55                   	push   ebp
c0019e2d:	68 1f 1c 03 c0       	push   0xc0031c1f
c0019e32:	e8 e3 f3 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019e37:	83 c4 0c             	add    esp,0xc
c0019e3a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e3e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019e42:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019e46:	e8 b9 f9 ff ff       	call   c0019804 <KeRegisterSymlink(char const*, unsigned long long)>
c0019e4b:	c7 04 24 44 1c 03 c0 	mov    DWORD PTR [esp],0xc0031c44
c0019e52:	e8 c3 f3 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0019e57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e5a:	e8 4f 06 00 00       	call   c001a4ae <File::close()>
c0019e5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e61:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	31 c0                	xor    eax,eax
c0019e6c:	eb 19                	jmp    c0019e87 <KeCreateSymlink(char const*, char const*)+0x152>
c0019e6e:	83 ec 0c             	sub    esp,0xc
c0019e71:	53                   	push   ebx
c0019e72:	e8 37 06 00 00       	call   c001a4ae <File::close()>
c0019e77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019e7f:	83 c4 10             	add    esp,0x10
c0019e82:	b8 01 00 00 00       	mov    eax,0x1
c0019e87:	83 c4 2c             	add    esp,0x2c
c0019e8a:	5b                   	pop    ebx
c0019e8b:	5e                   	pop    esi
c0019e8c:	5f                   	pop    edi
c0019e8d:	5d                   	pop    ebp
c0019e8e:	c3                   	ret    
c0019e8f:	90                   	nop

c0019e90 <File::read(unsigned long long, void*, int*)>:
c0019e90:	53                   	push   ebx
c0019e91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e99:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ea0:	83 f8 19             	cmp    eax,0x19
c0019ea3:	77 35                	ja     c0019eda <File::read(unsigned long long, void*, int*)+0x4a>
c0019ea5:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019eac:	85 c0                	test   eax,eax
c0019eae:	74 2a                	je     c0019eda <File::read(unsigned long long, void*, int*)+0x4a>
c0019eb0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019eb6:	85 c0                	test   eax,eax
c0019eb8:	74 20                	je     c0019eda <File::read(unsigned long long, void*, int*)+0x4a>
c0019eba:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019ebe:	74 21                	je     c0019ee1 <File::read(unsigned long long, void*, int*)+0x51>
c0019ec0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ec2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019ec6:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019ecc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ed0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ed4:	5b                   	pop    ebx
c0019ed5:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019ed8:	ff e0                	jmp    eax
c0019eda:	b8 0b 00 00 00       	mov    eax,0xb
c0019edf:	eb 05                	jmp    c0019ee6 <File::read(unsigned long long, void*, int*)+0x56>
c0019ee1:	b8 05 00 00 00       	mov    eax,0x5
c0019ee6:	5b                   	pop    ebx
c0019ee7:	c3                   	ret    

c0019ee8 <File::write(unsigned long long, void*, int*)>:
c0019ee8:	53                   	push   ebx
c0019ee9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019eed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ef1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ef8:	83 f8 19             	cmp    eax,0x19
c0019efb:	77 35                	ja     c0019f32 <File::write(unsigned long long, void*, int*)+0x4a>
c0019efd:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f04:	85 c0                	test   eax,eax
c0019f06:	74 2a                	je     c0019f32 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f08:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f0e:	85 c0                	test   eax,eax
c0019f10:	74 20                	je     c0019f32 <File::write(unsigned long long, void*, int*)+0x4a>
c0019f12:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f16:	74 21                	je     c0019f39 <File::write(unsigned long long, void*, int*)+0x51>
c0019f18:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f1a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f1e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f24:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f28:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f2c:	5b                   	pop    ebx
c0019f2d:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019f30:	ff e0                	jmp    eax
c0019f32:	b8 0b 00 00 00       	mov    eax,0xb
c0019f37:	eb 05                	jmp    c0019f3e <File::write(unsigned long long, void*, int*)+0x56>
c0019f39:	b8 05 00 00 00       	mov    eax,0x5
c0019f3e:	5b                   	pop    ebx
c0019f3f:	c3                   	ret    

c0019f40 <Directory::read(unsigned long long, void*, int*)>:
c0019f40:	53                   	push   ebx
c0019f41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f49:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019f50:	83 f8 19             	cmp    eax,0x19
c0019f53:	77 35                	ja     c0019f8a <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f55:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019f5c:	85 c0                	test   eax,eax
c0019f5e:	74 2a                	je     c0019f8a <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f60:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019f66:	85 c0                	test   eax,eax
c0019f68:	74 20                	je     c0019f8a <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019f6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019f6e:	74 21                	je     c0019f91 <Directory::read(unsigned long long, void*, int*)+0x51>
c0019f70:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019f72:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019f76:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f84:	5b                   	pop    ebx
c0019f85:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019f88:	ff e0                	jmp    eax
c0019f8a:	b8 0b 00 00 00       	mov    eax,0xb
c0019f8f:	eb 05                	jmp    c0019f96 <Directory::read(unsigned long long, void*, int*)+0x56>
c0019f91:	b8 05 00 00 00       	mov    eax,0x5
c0019f96:	5b                   	pop    ebx
c0019f97:	c3                   	ret    

c0019f98 <Directory::write(unsigned long long, void*, int*)>:
c0019f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f9c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019fa3:	b8 0b 00 00 00       	mov    eax,0xb
c0019fa8:	83 fa 19             	cmp    edx,0x19
c0019fab:	77 18                	ja     c0019fc5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fad:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019fb4:	85 d2                	test   edx,edx
c0019fb6:	74 0d                	je     c0019fc5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019fb8:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019fbf:	19 c0                	sbb    eax,eax
c0019fc1:	83 e0 0a             	and    eax,0xa
c0019fc4:	40                   	inc    eax
c0019fc5:	c3                   	ret    

c0019fc6 <File::isAtty()>:
c0019fc6:	31 c0                	xor    eax,eax
c0019fc8:	c3                   	ret    
c0019fc9:	90                   	nop

c0019fca <Directory::isAtty()>:
c0019fca:	31 c0                	xor    eax,eax
c0019fcc:	c3                   	ret    
c0019fcd:	90                   	nop

c0019fce <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fce:	b8 0a 00 00 00       	mov    eax,0xa
c0019fd3:	c3                   	ret    

c0019fd4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0019fd4:	b8 0a 00 00 00       	mov    eax,0xa
c0019fd9:	c3                   	ret    

c0019fda <Filesystem::allocateSwapfile(char const*, int)>:
c0019fda:	31 c0                	xor    eax,eax
c0019fdc:	31 d2                	xor    edx,edx
c0019fde:	c3                   	ret    
c0019fdf:	90                   	nop

c0019fe0 <File::~File()>:
c0019fe0:	83 ec 0c             	sub    esp,0xc
c0019fe3:	ba 10 1d 03 c0       	mov    edx,0xc0031d10
c0019fe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fec:	89 10                	mov    DWORD PTR [eax],edx
c0019fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ff2:	83 ec 0c             	sub    esp,0xc
c0019ff5:	50                   	push   eax
c0019ff6:	e8 a1 dc ff ff       	call   c0017c9c <UnixFile::~UnixFile()>
c0019ffb:	83 c4 10             	add    esp,0x10
c0019ffe:	90                   	nop
c0019fff:	83 c4 0c             	add    esp,0xc
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <File::~File()>:
c001a004:	83 ec 0c             	sub    esp,0xc
c001a007:	83 ec 0c             	sub    esp,0xc
c001a00a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a00e:	e8 cd ff ff ff       	call   c0019fe0 <File::~File()>
c001a013:	83 c4 10             	add    esp,0x10
c001a016:	83 ec 08             	sub    esp,0x8
c001a019:	68 14 01 00 00       	push   0x114
c001a01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a022:	e8 f5 f0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001a027:	83 c4 10             	add    esp,0x10
c001a02a:	83 c4 0c             	add    esp,0xc
c001a02d:	c3                   	ret    

c001a02e <Directory::~Directory()>:
c001a02e:	83 ec 0c             	sub    esp,0xc
c001a031:	ba 2c 1d 03 c0       	mov    edx,0xc0031d2c
c001a036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a03a:	89 10                	mov    DWORD PTR [eax],edx
c001a03c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a040:	83 ec 0c             	sub    esp,0xc
c001a043:	50                   	push   eax
c001a044:	e8 53 dc ff ff       	call   c0017c9c <UnixFile::~UnixFile()>
c001a049:	83 c4 10             	add    esp,0x10
c001a04c:	90                   	nop
c001a04d:	83 c4 0c             	add    esp,0xc
c001a050:	c3                   	ret    
c001a051:	90                   	nop

c001a052 <Directory::~Directory()>:
c001a052:	83 ec 0c             	sub    esp,0xc
c001a055:	83 ec 0c             	sub    esp,0xc
c001a058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a05c:	e8 cd ff ff ff       	call   c001a02e <Directory::~Directory()>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	83 ec 08             	sub    esp,0x8
c001a067:	68 14 01 00 00       	push   0x114
c001a06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a070:	e8 a7 f0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001a075:	83 c4 10             	add    esp,0x10
c001a078:	83 c4 0c             	add    esp,0xc
c001a07b:	c3                   	ret    

c001a07c <Filesystem::Filesystem()>:
c001a07c:	ba a4 1c 03 c0       	mov    edx,0xc0031ca4
c001a081:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a085:	89 10                	mov    DWORD PTR [eax],edx
c001a087:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a08d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a091:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a098:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a09d:	90                   	nop
c001a09e:	c3                   	ret    
c001a09f:	90                   	nop

c001a0a0 <Filesystem::~Filesystem()>:
c001a0a0:	ba a4 1c 03 c0       	mov    edx,0xc0031ca4
c001a0a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a9:	89 10                	mov    DWORD PTR [eax],edx
c001a0ab:	90                   	nop
c001a0ac:	c3                   	ret    
c001a0ad:	90                   	nop

c001a0ae <Filesystem::~Filesystem()>:
c001a0ae:	83 ec 0c             	sub    esp,0xc
c001a0b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a0b5:	e8 e6 ff ff ff       	call   c001a0a0 <Filesystem::~Filesystem()>
c001a0ba:	83 c4 04             	add    esp,0x4
c001a0bd:	83 ec 08             	sub    esp,0x8
c001a0c0:	6a 08                	push   0x8
c001a0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0c6:	e8 51 f0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001a0cb:	83 c4 10             	add    esp,0x10
c001a0ce:	83 c4 0c             	add    esp,0xc
c001a0d1:	c3                   	ret    

c001a0d2 <Fs::getcwd(Process*, char*, int)>:
c001a0d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0d6:	31 c0                	xor    eax,eax
c001a0d8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a0dc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a0df:	7d 15                	jge    c001a0f6 <Fs::getcwd(Process*, char*, int)+0x24>
c001a0e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a0e5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a0ec:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a0ef:	84 c9                	test   cl,cl
c001a0f1:	74 06                	je     c001a0f9 <Fs::getcwd(Process*, char*, int)+0x27>
c001a0f3:	40                   	inc    eax
c001a0f4:	eb e2                	jmp    c001a0d8 <Fs::getcwd(Process*, char*, int)+0x6>
c001a0f6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a0f9:	31 c0                	xor    eax,eax
c001a0fb:	c3                   	ret    

c001a0fc <Fs::initVFS()>:
c001a0fc:	83 ec 18             	sub    esp,0x18
c001a0ff:	6a 08                	push   0x8
c001a101:	e8 dd c2 ff ff       	call   c00163e3 <malloc>
c001a106:	89 04 24             	mov    DWORD PTR [esp],eax
c001a109:	e8 6a e9 00 00       	call   c0028a78 <FAT::FAT()>
c001a10e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a115:	e8 c9 c2 ff ff       	call   c00163e3 <malloc>
c001a11a:	89 04 24             	mov    DWORD PTR [esp],eax
c001a11d:	e8 84 f8 00 00       	call   c00299a6 <ISO9660::ISO9660()>
c001a122:	83 c4 1c             	add    esp,0x1c
c001a125:	c3                   	ret    

c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a126:	55                   	push   ebp
c001a127:	57                   	push   edi
c001a128:	56                   	push   esi
c001a129:	53                   	push   ebx
c001a12a:	81 ec 20 04 00 00    	sub    esp,0x420
c001a130:	8a 84 24 40 04 00 00 	mov    al,BYTE PTR [esp+0x440]
c001a137:	8b b4 24 38 04 00 00 	mov    esi,DWORD PTR [esp+0x438]
c001a13e:	8b 9c 24 34 04 00 00 	mov    ebx,DWORD PTR [esp+0x434]
c001a145:	8b ac 24 3c 04 00 00 	mov    ebp,DWORD PTR [esp+0x43c]
c001a14c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a150:	68 00 04 00 00       	push   0x400
c001a155:	6a 00                	push   0x0
c001a157:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a15b:	57                   	push   edi
c001a15c:	e8 8f 63 fe ff       	call   c00004f0 <memset>
c001a161:	83 c4 10             	add    esp,0x10
c001a164:	80 7e 01 3a          	cmp    BYTE PTR [esi+0x1],0x3a
c001a168:	75 0b                	jne    c001a175 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x4f>
c001a16a:	50                   	push   eax
c001a16b:	50                   	push   eax
c001a16c:	56                   	push   esi
c001a16d:	57                   	push   edi
c001a16e:	e8 dd 64 fe ff       	call   c0000650 <strcpy>
c001a173:	eb 45                	jmp    c001a1ba <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x94>
c001a175:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a178:	83 f8 2f             	cmp    eax,0x2f
c001a17b:	74 05                	je     c001a182 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x5c>
c001a17d:	83 f8 5c             	cmp    eax,0x5c
c001a180:	75 19                	jne    c001a19b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x75>
c001a182:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001a185:	3c 60                	cmp    al,0x60
c001a187:	7e 03                	jle    c001a18c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x66>
c001a189:	83 e8 20             	sub    eax,0x20
c001a18c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a190:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a197:	50                   	push   eax
c001a198:	50                   	push   eax
c001a199:	eb 18                	jmp    c001a1b3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8d>
c001a19b:	50                   	push   eax
c001a19c:	50                   	push   eax
c001a19d:	55                   	push   ebp
c001a19e:	57                   	push   edi
c001a19f:	e8 ac 64 fe ff       	call   c0000650 <strcpy>
c001a1a4:	58                   	pop    eax
c001a1a5:	5a                   	pop    edx
c001a1a6:	68 9f 2d 03 c0       	push   0xc0032d9f
c001a1ab:	57                   	push   edi
c001a1ac:	e8 bf 66 fe ff       	call   c0000870 <strcat>
c001a1b1:	59                   	pop    ecx
c001a1b2:	5d                   	pop    ebp
c001a1b3:	56                   	push   esi
c001a1b4:	57                   	push   edi
c001a1b5:	e8 b6 66 fe ff       	call   c0000870 <strcat>
c001a1ba:	83 c4 10             	add    esp,0x10
c001a1bd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a1c1:	3c 60                	cmp    al,0x60
c001a1c3:	7e 03                	jle    c001a1c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa2>
c001a1c5:	83 e8 20             	sub    eax,0x20
c001a1c8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001a1cc:	be 03 00 00 00       	mov    esi,0x3
c001a1d1:	88 03                	mov    BYTE PTR [ebx],al
c001a1d3:	b8 03 00 00 00       	mov    eax,0x3
c001a1d8:	66 c7 44 24 11 3a 2f 	mov    WORD PTR [esp+0x11],0x2f3a
c001a1df:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001a1e5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001a1e9:	0f b6 7c 34 10       	movzx  edi,BYTE PTR [esp+esi*1+0x10]
c001a1ee:	89 fa                	mov    edx,edi
c001a1f0:	0f be ea             	movsx  ebp,dl
c001a1f3:	85 ed                	test   ebp,ebp
c001a1f5:	0f 84 a1 00 00 00    	je     c001a29c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x176>
c001a1fb:	8d 56 01             	lea    edx,[esi+0x1]
c001a1fe:	83 fd 2f             	cmp    ebp,0x2f
c001a201:	74 05                	je     c001a208 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xe2>
c001a203:	83 fd 5c             	cmp    ebp,0x5c
c001a206:	75 12                	jne    c001a21a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a208:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a20d:	89 c5                	mov    ebp,eax
c001a20f:	74 09                	je     c001a21a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf4>
c001a211:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001a215:	40                   	inc    eax
c001a216:	89 d6                	mov    esi,edx
c001a218:	eb cf                	jmp    c001a1e9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a21a:	80 7c 34 0f 2f       	cmp    BYTE PTR [esp+esi*1+0xf],0x2f
c001a21f:	89 f9                	mov    ecx,edi
c001a221:	0f be e9             	movsx  ebp,cl
c001a224:	75 61                	jne    c001a287 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a226:	83 fd 2e             	cmp    ebp,0x2e
c001a229:	75 5c                	jne    c001a287 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x161>
c001a22b:	80 7c 14 10 2e       	cmp    BYTE PTR [esp+edx*1+0x10],0x2e
c001a230:	0f be 6c 34 12       	movsx  ebp,BYTE PTR [esp+esi*1+0x12]
c001a235:	74 19                	je     c001a250 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12a>
c001a237:	83 fd 2e             	cmp    ebp,0x2e
c001a23a:	74 55                	je     c001a291 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a23c:	89 f2                	mov    edx,esi
c001a23e:	42                   	inc    edx
c001a23f:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a244:	83 f9 2f             	cmp    ecx,0x2f
c001a247:	74 f5                	je     c001a23e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a249:	83 f9 5c             	cmp    ecx,0x5c
c001a24c:	74 f0                	je     c001a23e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x118>
c001a24e:	eb c6                	jmp    c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a250:	83 fd 2e             	cmp    ebp,0x2e
c001a253:	74 3c                	je     c001a291 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16b>
c001a255:	83 f8 03             	cmp    eax,0x3
c001a258:	74 bc                	je     c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a25a:	42                   	inc    edx
c001a25b:	0f be 4c 14 10       	movsx  ecx,BYTE PTR [esp+edx*1+0x10]
c001a260:	83 f9 2f             	cmp    ecx,0x2f
c001a263:	74 f5                	je     c001a25a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a265:	83 f9 5c             	cmp    ecx,0x5c
c001a268:	74 f0                	je     c001a25a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x134>
c001a26a:	48                   	dec    eax
c001a26b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a26f:	75 06                	jne    c001a277 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a271:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a275:	eb f3                	jmp    c001a26a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x144>
c001a277:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001a27b:	74 07                	je     c001a284 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x15e>
c001a27d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a281:	48                   	dec    eax
c001a282:	eb f3                	jmp    c001a277 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x151>
c001a284:	40                   	inc    eax
c001a285:	eb 8f                	jmp    c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a287:	83 fd 2f             	cmp    ebp,0x2f
c001a28a:	74 8a                	je     c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a28c:	83 fd 5c             	cmp    ebp,0x5c
c001a28f:	74 85                	je     c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a291:	89 f9                	mov    ecx,edi
c001a293:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a296:	40                   	inc    eax
c001a297:	e9 7a ff ff ff       	jmp    c001a216 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a29c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	53                   	push   ebx
c001a2a4:	e8 d7 62 fe ff       	call   c0000580 <strlen>
c001a2a9:	83 c4 10             	add    esp,0x10
c001a2ac:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001a2b1:	74 1c                	je     c001a2cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a2b3:	83 ec 0c             	sub    esp,0xc
c001a2b6:	53                   	push   ebx
c001a2b7:	e8 c4 62 fe ff       	call   c0000580 <strlen>
c001a2bc:	83 c4 10             	add    esp,0x10
c001a2bf:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001a2c4:	74 09                	je     c001a2cf <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a9>
c001a2c6:	31 ff                	xor    edi,edi
c001a2c8:	0f b6 74 24 0f       	movzx  esi,BYTE PTR [esp+0xf]
c001a2cd:	eb 5c                	jmp    c001a32b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a2cf:	83 ec 0c             	sub    esp,0xc
c001a2d2:	53                   	push   ebx
c001a2d3:	e8 a8 62 fe ff       	call   c0000580 <strlen>
c001a2d8:	83 c4 10             	add    esp,0x10
c001a2db:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001a2e0:	74 e4                	je     c001a2c6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1a0>
c001a2e2:	83 ec 0c             	sub    esp,0xc
c001a2e5:	53                   	push   ebx
c001a2e6:	e8 95 62 fe ff       	call   c0000580 <strlen>
c001a2eb:	83 c4 10             	add    esp,0x10
c001a2ee:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a2f3:	eb ab                	jmp    c001a2a0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x17a>
c001a2f5:	52                   	push   edx
c001a2f6:	52                   	push   edx
c001a2f7:	53                   	push   ebx
c001a2f8:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001a2fc:	55                   	push   ebp
c001a2fd:	e8 4e 63 fe ff       	call   c0000650 <strcpy>
c001a302:	59                   	pop    ecx
c001a303:	58                   	pop    eax
c001a304:	53                   	push   ebx
c001a305:	55                   	push   ebp
c001a306:	e8 83 f8 ff ff       	call   c0019b8e <KeDereferenceSymlink(char const*, char*)>
c001a30b:	83 c4 10             	add    esp,0x10
c001a30e:	48                   	dec    eax
c001a30f:	75 37                	jne    c001a348 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a311:	50                   	push   eax
c001a312:	53                   	push   ebx
c001a313:	55                   	push   ebp
c001a314:	68 5a 1c 03 c0       	push   0xc0031c5a
c001a319:	e8 fc ee ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001a31e:	8d 47 01             	lea    eax,[edi+0x1]
c001a321:	83 c4 10             	add    esp,0x10
c001a324:	83 ff 14             	cmp    edi,0x14
c001a327:	74 08                	je     c001a331 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20b>
c001a329:	89 c7                	mov    edi,eax
c001a32b:	85 f6                	test   esi,esi
c001a32d:	75 c6                	jne    c001a2f5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1cf>
c001a32f:	eb 17                	jmp    c001a348 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x222>
c001a331:	83 ec 0c             	sub    esp,0xc
c001a334:	bf 15 00 00 00       	mov    edi,0x15
c001a339:	68 75 1c 03 c0       	push   0xc0031c75
c001a33e:	e8 5f 5e 00 00       	call   c00201a2 <KePanic(char const*)>
c001a343:	83 c4 10             	add    esp,0x10
c001a346:	eb e3                	jmp    c001a32b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x205>
c001a348:	81 c4 1c 04 00 00    	add    esp,0x41c
c001a34e:	5b                   	pop    ebx
c001a34f:	5e                   	pop    esi
c001a350:	5f                   	pop    edi
c001a351:	5d                   	pop    ebp
c001a352:	c3                   	ret    
c001a353:	90                   	nop

c001a354 <File::File(char const*, Process*, bool)>:
c001a354:	83 ec 1c             	sub    esp,0x1c
c001a357:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a35b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a35f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a363:	83 ec 08             	sub    esp,0x8
c001a366:	6a 00                	push   0x0
c001a368:	50                   	push   eax
c001a369:	e8 48 d7 ff ff       	call   c0017ab6 <UnixFile::UnixFile(int)>
c001a36e:	83 c4 10             	add    esp,0x10
c001a371:	ba 10 1d 03 c0       	mov    edx,0xc0031d10
c001a376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a37a:	89 10                	mov    DWORD PTR [eax],edx
c001a37c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a381:	85 c0                	test   eax,eax
c001a383:	74 0f                	je     c001a394 <File::File(char const*, Process*, bool)+0x40>
c001a385:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a38a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a38e:	74 04                	je     c001a394 <File::File(char const*, Process*, bool)+0x40>
c001a390:	b0 01                	mov    al,0x1
c001a392:	eb 02                	jmp    c001a396 <File::File(char const*, Process*, bool)+0x42>
c001a394:	b0 00                	mov    al,0x0
c001a396:	0f b6 c0             	movzx  eax,al
c001a399:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a39d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a3a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3a7:	83 c2 0d             	add    edx,0xd
c001a3aa:	50                   	push   eax
c001a3ab:	51                   	push   ecx
c001a3ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3b0:	52                   	push   edx
c001a3b1:	e8 70 fd ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a3b6:	83 c4 10             	add    esp,0x10
c001a3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a3c0:	83 e8 41             	sub    eax,0x41
c001a3c3:	88 c2                	mov    dl,al
c001a3c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a3d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3e1:	0f b6 c0             	movzx  eax,al
c001a3e4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a3eb:	85 c0                	test   eax,eax
c001a3ed:	74 3e                	je     c001a42d <File::File(char const*, Process*, bool)+0xd9>
c001a3ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a3f9:	0f b6 c0             	movzx  eax,al
c001a3fc:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a403:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a409:	85 c0                	test   eax,eax
c001a40b:	75 20                	jne    c001a42d <File::File(char const*, Process*, bool)+0xd9>
c001a40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a411:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a417:	0f b6 c0             	movzx  eax,al
c001a41a:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a421:	83 ec 0c             	sub    esp,0xc
c001a424:	50                   	push   eax
c001a425:	e8 ba 21 00 00       	call   c001c5e4 <LogicalDisk::mount()>
c001a42a:	83 c4 10             	add    esp,0x10
c001a42d:	90                   	nop
c001a42e:	83 c4 1c             	add    esp,0x1c
c001a431:	c3                   	ret    

c001a432 <File::File(char const*, Process*)>:
c001a432:	83 ec 0c             	sub    esp,0xc
c001a435:	6a 01                	push   0x1
c001a437:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a43b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a43f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a443:	e8 0c ff ff ff       	call   c001a354 <File::File(char const*, Process*, bool)>
c001a448:	83 c4 10             	add    esp,0x10
c001a44b:	90                   	nop
c001a44c:	83 c4 0c             	add    esp,0xc
c001a44f:	c3                   	ret    

c001a450 <File::open(FileOpenMode)>:
c001a450:	53                   	push   ebx
c001a451:	b8 0b 00 00 00       	mov    eax,0xb
c001a456:	83 ec 08             	sub    esp,0x8
c001a459:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a45d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a464:	83 fa 19             	cmp    edx,0x19
c001a467:	77 40                	ja     c001a4a9 <File::open(FileOpenMode)+0x59>
c001a469:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a470:	85 d2                	test   edx,edx
c001a472:	74 35                	je     c001a4a9 <File::open(FileOpenMode)+0x59>
c001a474:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a47a:	85 d2                	test   edx,edx
c001a47c:	74 2b                	je     c001a4a9 <File::open(FileOpenMode)+0x59>
c001a47e:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a482:	b8 06 00 00 00       	mov    eax,0x6
c001a487:	75 20                	jne    c001a4a9 <File::open(FileOpenMode)+0x59>
c001a489:	8b 02                	mov    eax,DWORD PTR [edx]
c001a48b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a491:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a495:	51                   	push   ecx
c001a496:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a499:	51                   	push   ecx
c001a49a:	52                   	push   edx
c001a49b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a49e:	83 c4 10             	add    esp,0x10
c001a4a1:	85 c0                	test   eax,eax
c001a4a3:	75 04                	jne    c001a4a9 <File::open(FileOpenMode)+0x59>
c001a4a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a4a9:	83 c4 08             	add    esp,0x8
c001a4ac:	5b                   	pop    ebx
c001a4ad:	c3                   	ret    

c001a4ae <File::close()>:
c001a4ae:	53                   	push   ebx
c001a4af:	b8 0b 00 00 00       	mov    eax,0xb
c001a4b4:	83 ec 08             	sub    esp,0x8
c001a4b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a4c2:	83 f9 19             	cmp    ecx,0x19
c001a4c5:	77 41                	ja     c001a508 <File::close()+0x5a>
c001a4c7:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a4ce:	85 db                	test   ebx,ebx
c001a4d0:	74 36                	je     c001a508 <File::close()+0x5a>
c001a4d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a4d9:	74 2d                	je     c001a508 <File::close()+0x5a>
c001a4db:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a4df:	b8 05 00 00 00       	mov    eax,0x5
c001a4e4:	74 22                	je     c001a508 <File::close()+0x5a>
c001a4e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a4ea:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a4f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a4f7:	53                   	push   ebx
c001a4f8:	53                   	push   ebx
c001a4f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a4fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a501:	50                   	push   eax
c001a502:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a505:	83 c4 10             	add    esp,0x10
c001a508:	83 c4 08             	add    esp,0x8
c001a50b:	5b                   	pop    ebx
c001a50c:	c3                   	ret    
c001a50d:	90                   	nop

c001a50e <File::seek(unsigned long long)>:
c001a50e:	56                   	push   esi
c001a50f:	b8 0b 00 00 00       	mov    eax,0xb
c001a514:	53                   	push   ebx
c001a515:	51                   	push   ecx
c001a516:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a51a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a51e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a522:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a529:	83 fa 19             	cmp    edx,0x19
c001a52c:	77 31                	ja     c001a55f <File::seek(unsigned long long)+0x51>
c001a52e:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a535:	85 d2                	test   edx,edx
c001a537:	74 26                	je     c001a55f <File::seek(unsigned long long)+0x51>
c001a539:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a53f:	85 d2                	test   edx,edx
c001a541:	74 1c                	je     c001a55f <File::seek(unsigned long long)+0x51>
c001a543:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a547:	b8 05 00 00 00       	mov    eax,0x5
c001a54c:	74 11                	je     c001a55f <File::seek(unsigned long long)+0x51>
c001a54e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a550:	53                   	push   ebx
c001a551:	51                   	push   ecx
c001a552:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a558:	52                   	push   edx
c001a559:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a55c:	83 c4 10             	add    esp,0x10
c001a55f:	5a                   	pop    edx
c001a560:	5b                   	pop    ebx
c001a561:	5e                   	pop    esi
c001a562:	c3                   	ret    
c001a563:	90                   	nop

c001a564 <File::truncate(unsigned long long)>:
c001a564:	56                   	push   esi
c001a565:	b8 0b 00 00 00       	mov    eax,0xb
c001a56a:	53                   	push   ebx
c001a56b:	51                   	push   ecx
c001a56c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a570:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a574:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a578:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a57f:	83 fa 19             	cmp    edx,0x19
c001a582:	77 31                	ja     c001a5b5 <File::truncate(unsigned long long)+0x51>
c001a584:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a58b:	85 d2                	test   edx,edx
c001a58d:	74 26                	je     c001a5b5 <File::truncate(unsigned long long)+0x51>
c001a58f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a595:	85 d2                	test   edx,edx
c001a597:	74 1c                	je     c001a5b5 <File::truncate(unsigned long long)+0x51>
c001a599:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a59d:	b8 05 00 00 00       	mov    eax,0x5
c001a5a2:	74 11                	je     c001a5b5 <File::truncate(unsigned long long)+0x51>
c001a5a4:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5a6:	53                   	push   ebx
c001a5a7:	51                   	push   ecx
c001a5a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a5ae:	52                   	push   edx
c001a5af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a5b2:	83 c4 10             	add    esp,0x10
c001a5b5:	5a                   	pop    edx
c001a5b6:	5b                   	pop    ebx
c001a5b7:	5e                   	pop    esi
c001a5b8:	c3                   	ret    
c001a5b9:	90                   	nop

c001a5ba <File::tell(unsigned long long*)>:
c001a5ba:	83 ec 0c             	sub    esp,0xc
c001a5bd:	b8 0b 00 00 00       	mov    eax,0xb
c001a5c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a5c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a5cd:	83 fa 19             	cmp    edx,0x19
c001a5d0:	77 34                	ja     c001a606 <File::tell(unsigned long long*)+0x4c>
c001a5d2:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a5d9:	85 d2                	test   edx,edx
c001a5db:	74 29                	je     c001a606 <File::tell(unsigned long long*)+0x4c>
c001a5dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a5e3:	85 d2                	test   edx,edx
c001a5e5:	74 1f                	je     c001a606 <File::tell(unsigned long long*)+0x4c>
c001a5e7:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a5eb:	b8 05 00 00 00       	mov    eax,0x5
c001a5f0:	74 14                	je     c001a606 <File::tell(unsigned long long*)+0x4c>
c001a5f2:	50                   	push   eax
c001a5f3:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a5f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a5ff:	52                   	push   edx
c001a600:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a603:	83 c4 10             	add    esp,0x10
c001a606:	83 c4 0c             	add    esp,0xc
c001a609:	c3                   	ret    

c001a60a <File::rewind()>:
c001a60a:	83 ec 10             	sub    esp,0x10
c001a60d:	6a 00                	push   0x0
c001a60f:	6a 00                	push   0x0
c001a611:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a615:	e8 f4 fe ff ff       	call   c001a50e <File::seek(unsigned long long)>
c001a61a:	83 c4 1c             	add    esp,0x1c
c001a61d:	c3                   	ret    

c001a61e <File::unlink()>:
c001a61e:	83 ec 0c             	sub    esp,0xc
c001a621:	b8 0b 00 00 00       	mov    eax,0xb
c001a626:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a62a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a631:	83 f9 19             	cmp    ecx,0x19
c001a634:	77 2f                	ja     c001a665 <File::unlink()+0x47>
c001a636:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a63d:	85 c9                	test   ecx,ecx
c001a63f:	74 24                	je     c001a665 <File::unlink()+0x47>
c001a641:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a647:	85 c9                	test   ecx,ecx
c001a649:	74 1a                	je     c001a665 <File::unlink()+0x47>
c001a64b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a64f:	b8 06 00 00 00       	mov    eax,0x6
c001a654:	75 0f                	jne    c001a665 <File::unlink()+0x47>
c001a656:	50                   	push   eax
c001a657:	83 c2 0d             	add    edx,0xd
c001a65a:	50                   	push   eax
c001a65b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a65d:	52                   	push   edx
c001a65e:	51                   	push   ecx
c001a65f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a662:	83 c4 10             	add    esp,0x10
c001a665:	83 c4 0c             	add    esp,0xc
c001a668:	c3                   	ret    
c001a669:	90                   	nop

c001a66a <File::rename(char const*)>:
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	b8 0b 00 00 00       	mov    eax,0xb
c001a672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a676:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a67d:	83 f9 19             	cmp    ecx,0x19
c001a680:	77 32                	ja     c001a6b4 <File::rename(char const*)+0x4a>
c001a682:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a689:	85 c9                	test   ecx,ecx
c001a68b:	74 27                	je     c001a6b4 <File::rename(char const*)+0x4a>
c001a68d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a693:	85 c9                	test   ecx,ecx
c001a695:	74 1d                	je     c001a6b4 <File::rename(char const*)+0x4a>
c001a697:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a69b:	b8 06 00 00 00       	mov    eax,0x6
c001a6a0:	75 12                	jne    c001a6b4 <File::rename(char const*)+0x4a>
c001a6a2:	50                   	push   eax
c001a6a3:	83 c2 0d             	add    edx,0xd
c001a6a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6ac:	52                   	push   edx
c001a6ad:	51                   	push   ecx
c001a6ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a6b1:	83 c4 10             	add    esp,0x10
c001a6b4:	83 c4 0c             	add    esp,0xc
c001a6b7:	c3                   	ret    

c001a6b8 <File::chfatattr(unsigned char, unsigned char)>:
c001a6b8:	57                   	push   edi
c001a6b9:	b8 0b 00 00 00       	mov    eax,0xb
c001a6be:	56                   	push   esi
c001a6bf:	53                   	push   ebx
c001a6c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a6cc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6d3:	83 f9 19             	cmp    ecx,0x19
c001a6d6:	77 37                	ja     c001a70f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6d8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6df:	85 c9                	test   ecx,ecx
c001a6e1:	74 2c                	je     c001a70f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6e9:	85 c9                	test   ecx,ecx
c001a6eb:	74 22                	je     c001a70f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6f1:	b8 06 00 00 00       	mov    eax,0x6
c001a6f6:	75 17                	jne    c001a70f <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a6f8:	89 f0                	mov    eax,esi
c001a6fa:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a6fc:	0f b6 db             	movzx  ebx,bl
c001a6ff:	0f b6 f0             	movzx  esi,al
c001a702:	83 c2 0d             	add    edx,0xd
c001a705:	56                   	push   esi
c001a706:	53                   	push   ebx
c001a707:	52                   	push   edx
c001a708:	51                   	push   ecx
c001a709:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a70c:	83 c4 10             	add    esp,0x10
c001a70f:	5b                   	pop    ebx
c001a710:	5e                   	pop    esi
c001a711:	5f                   	pop    edi
c001a712:	c3                   	ret    
c001a713:	90                   	nop

c001a714 <File::exists()>:
c001a714:	83 ec 0c             	sub    esp,0xc
c001a717:	31 c0                	xor    eax,eax
c001a719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a71d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a724:	83 f9 19             	cmp    ecx,0x19
c001a727:	77 24                	ja     c001a74d <File::exists()+0x39>
c001a729:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a730:	85 c9                	test   ecx,ecx
c001a732:	74 19                	je     c001a74d <File::exists()+0x39>
c001a734:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a73a:	85 c9                	test   ecx,ecx
c001a73c:	74 0f                	je     c001a74d <File::exists()+0x39>
c001a73e:	50                   	push   eax
c001a73f:	83 c2 0d             	add    edx,0xd
c001a742:	50                   	push   eax
c001a743:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a745:	52                   	push   edx
c001a746:	51                   	push   ecx
c001a747:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a74a:	83 c4 10             	add    esp,0x10
c001a74d:	83 c4 0c             	add    esp,0xc
c001a750:	c3                   	ret    
c001a751:	90                   	nop

c001a752 <File::stat(unsigned long long*, bool*)>:
c001a752:	56                   	push   esi
c001a753:	53                   	push   ebx
c001a754:	50                   	push   eax
c001a755:	b8 0b 00 00 00       	mov    eax,0xb
c001a75a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a75e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a762:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a766:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a76d:	83 f9 19             	cmp    ecx,0x19
c001a770:	77 3d                	ja     c001a7af <File::stat(unsigned long long*, bool*)+0x5d>
c001a772:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a779:	85 c9                	test   ecx,ecx
c001a77b:	74 32                	je     c001a7af <File::stat(unsigned long long*, bool*)+0x5d>
c001a77d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a783:	85 c9                	test   ecx,ecx
c001a785:	74 28                	je     c001a7af <File::stat(unsigned long long*, bool*)+0x5d>
c001a787:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a78b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a78d:	74 13                	je     c001a7a2 <File::stat(unsigned long long*, bool*)+0x50>
c001a78f:	83 ec 04             	sub    esp,0x4
c001a792:	56                   	push   esi
c001a793:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a799:	51                   	push   ecx
c001a79a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a79d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a7a0:	eb 0a                	jmp    c001a7ac <File::stat(unsigned long long*, bool*)+0x5a>
c001a7a2:	53                   	push   ebx
c001a7a3:	83 c2 0d             	add    edx,0xd
c001a7a6:	56                   	push   esi
c001a7a7:	52                   	push   edx
c001a7a8:	51                   	push   ecx
c001a7a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a7ac:	83 c4 10             	add    esp,0x10
c001a7af:	5a                   	pop    edx
c001a7b0:	5b                   	pop    ebx
c001a7b1:	5e                   	pop    esi
c001a7b2:	c3                   	ret    

c001a7b3 <Fs::setcwd(Process*, char*)>:
c001a7b3:	55                   	push   ebp
c001a7b4:	57                   	push   edi
c001a7b5:	56                   	push   esi
c001a7b6:	53                   	push   ebx
c001a7b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a7bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a7c4:	6a 00                	push   0x0
c001a7c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a7cc:	57                   	push   edi
c001a7cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a7d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a7d8:	56                   	push   esi
c001a7d9:	e8 48 f9 ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a7de:	89 34 24             	mov    DWORD PTR [esp],esi
c001a7e1:	e8 9a 5d fe ff       	call   c0000580 <strlen>
c001a7e6:	83 c4 10             	add    esp,0x10
c001a7e9:	83 f8 02             	cmp    eax,0x2
c001a7ec:	77 15                	ja     c001a803 <Fs::setcwd(Process*, char*)+0x50>
c001a7ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a7f3:	83 eb 41             	sub    ebx,0x41
c001a7f6:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a7fd:	85 c0                	test   eax,eax
c001a7ff:	75 1c                	jne    c001a81d <Fs::setcwd(Process*, char*)+0x6a>
c001a801:	eb 2f                	jmp    c001a832 <Fs::setcwd(Process*, char*)+0x7f>
c001a803:	83 ec 0c             	sub    esp,0xc
c001a806:	56                   	push   esi
c001a807:	e8 74 5d fe ff       	call   c0000580 <strlen>
c001a80c:	83 c4 10             	add    esp,0x10
c001a80f:	83 f8 03             	cmp    eax,0x3
c001a812:	75 57                	jne    c001a86b <Fs::setcwd(Process*, char*)+0xb8>
c001a814:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a819:	75 50                	jne    c001a86b <Fs::setcwd(Process*, char*)+0xb8>
c001a81b:	eb d1                	jmp    c001a7ee <Fs::setcwd(Process*, char*)+0x3b>
c001a81d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a824:	75 0c                	jne    c001a832 <Fs::setcwd(Process*, char*)+0x7f>
c001a826:	83 ec 0c             	sub    esp,0xc
c001a829:	50                   	push   eax
c001a82a:	e8 b5 1d 00 00       	call   c001c5e4 <LogicalDisk::mount()>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	83 fb 19             	cmp    ebx,0x19
c001a835:	b8 03 00 00 00       	mov    eax,0x3
c001a83a:	0f 87 c6 00 00 00    	ja     c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a840:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a847:	b8 05 00 00 00       	mov    eax,0x5
c001a84c:	85 d2                	test   edx,edx
c001a84e:	0f 84 b2 00 00 00    	je     c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a854:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a85b:	b8 06 00 00 00       	mov    eax,0x6
c001a860:	0f 85 92 00 00 00    	jne    c001a8f8 <Fs::setcwd(Process*, char*)+0x145>
c001a866:	e9 9b 00 00 00       	jmp    c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a86b:	83 ec 0c             	sub    esp,0xc
c001a86e:	68 14 01 00 00       	push   0x114
c001a873:	e8 6b bb ff ff       	call   c00163e3 <malloc>
c001a878:	83 c4 0c             	add    esp,0xc
c001a87b:	55                   	push   ebp
c001a87c:	56                   	push   esi
c001a87d:	50                   	push   eax
c001a87e:	89 c3                	mov    ebx,eax
c001a880:	e8 ad fb ff ff       	call   c001a432 <File::File(char const*, Process*)>
c001a885:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a88a:	83 c4 0c             	add    esp,0xc
c001a88d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a891:	50                   	push   eax
c001a892:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a896:	50                   	push   eax
c001a897:	53                   	push   ebx
c001a898:	e8 b5 fe ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c001a89d:	83 c4 10             	add    esp,0x10
c001a8a0:	83 f8 02             	cmp    eax,0x2
c001a8a3:	74 27                	je     c001a8cc <Fs::setcwd(Process*, char*)+0x119>
c001a8a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a8aa:	75 1c                	jne    c001a8c8 <Fs::setcwd(Process*, char*)+0x115>
c001a8ac:	85 db                	test   ebx,ebx
c001a8ae:	b8 02 00 00 00       	mov    eax,0x2
c001a8b3:	74 51                	je     c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a8b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8b7:	83 ec 0c             	sub    esp,0xc
c001a8ba:	53                   	push   ebx
c001a8bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8be:	83 c4 10             	add    esp,0x10
c001a8c1:	b8 02 00 00 00       	mov    eax,0x2
c001a8c6:	eb 3e                	jmp    c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a8c8:	85 c0                	test   eax,eax
c001a8ca:	74 1c                	je     c001a8e8 <Fs::setcwd(Process*, char*)+0x135>
c001a8cc:	85 db                	test   ebx,ebx
c001a8ce:	b8 01 00 00 00       	mov    eax,0x1
c001a8d3:	74 31                	je     c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a8d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8d7:	83 ec 0c             	sub    esp,0xc
c001a8da:	53                   	push   ebx
c001a8db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8de:	83 c4 10             	add    esp,0x10
c001a8e1:	b8 01 00 00 00       	mov    eax,0x1
c001a8e6:	eb 1e                	jmp    c001a906 <Fs::setcwd(Process*, char*)+0x153>
c001a8e8:	85 db                	test   ebx,ebx
c001a8ea:	74 0c                	je     c001a8f8 <Fs::setcwd(Process*, char*)+0x145>
c001a8ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8ee:	83 ec 0c             	sub    esp,0xc
c001a8f1:	53                   	push   ebx
c001a8f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a8f5:	83 c4 10             	add    esp,0x10
c001a8f8:	50                   	push   eax
c001a8f9:	50                   	push   eax
c001a8fa:	56                   	push   esi
c001a8fb:	57                   	push   edi
c001a8fc:	e8 4f 5d fe ff       	call   c0000650 <strcpy>
c001a901:	83 c4 10             	add    esp,0x10
c001a904:	31 c0                	xor    eax,eax
c001a906:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a90c:	5b                   	pop    ebx
c001a90d:	5e                   	pop    esi
c001a90e:	5f                   	pop    edi
c001a90f:	5d                   	pop    ebp
c001a910:	c3                   	ret    
c001a911:	90                   	nop

c001a912 <Directory::Directory(char const*, Process*)>:
c001a912:	83 ec 0c             	sub    esp,0xc
c001a915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a919:	83 ec 08             	sub    esp,0x8
c001a91c:	6a 00                	push   0x0
c001a91e:	50                   	push   eax
c001a91f:	e8 92 d1 ff ff       	call   c0017ab6 <UnixFile::UnixFile(int)>
c001a924:	83 c4 10             	add    esp,0x10
c001a927:	ba 2c 1d 03 c0       	mov    edx,0xc0031d2c
c001a92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a930:	89 10                	mov    DWORD PTR [eax],edx
c001a932:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a937:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a93b:	0f 95 c0             	setne  al
c001a93e:	0f b6 c0             	movzx  eax,al
c001a941:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a945:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a94b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a94f:	83 c2 0d             	add    edx,0xd
c001a952:	50                   	push   eax
c001a953:	51                   	push   ecx
c001a954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a958:	52                   	push   edx
c001a959:	e8 c8 f7 ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a95e:	83 c4 10             	add    esp,0x10
c001a961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a965:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a968:	83 e8 41             	sub    eax,0x41
c001a96b:	88 c2                	mov    dl,al
c001a96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a971:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a97b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a97f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a983:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a989:	0f b6 c0             	movzx  eax,al
c001a98c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a993:	85 c0                	test   eax,eax
c001a995:	74 3e                	je     c001a9d5 <Directory::Directory(char const*, Process*)+0xc3>
c001a997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a99b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9a1:	0f b6 c0             	movzx  eax,al
c001a9a4:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9b1:	85 c0                	test   eax,eax
c001a9b3:	75 20                	jne    c001a9d5 <Directory::Directory(char const*, Process*)+0xc3>
c001a9b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a9bf:	0f b6 c0             	movzx  eax,al
c001a9c2:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a9c9:	83 ec 0c             	sub    esp,0xc
c001a9cc:	50                   	push   eax
c001a9cd:	e8 12 1c 00 00       	call   c001c5e4 <LogicalDisk::mount()>
c001a9d2:	83 c4 10             	add    esp,0x10
c001a9d5:	90                   	nop
c001a9d6:	83 c4 0c             	add    esp,0xc
c001a9d9:	c3                   	ret    

c001a9da <Directory::open()>:
c001a9da:	53                   	push   ebx
c001a9db:	b8 0b 00 00 00       	mov    eax,0xb
c001a9e0:	83 ec 08             	sub    esp,0x8
c001a9e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a9ee:	83 fa 19             	cmp    edx,0x19
c001a9f1:	77 3d                	ja     c001aa30 <Directory::open()+0x56>
c001a9f3:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a9fa:	85 d2                	test   edx,edx
c001a9fc:	74 32                	je     c001aa30 <Directory::open()+0x56>
c001a9fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001aa04:	85 d2                	test   edx,edx
c001aa06:	74 28                	je     c001aa30 <Directory::open()+0x56>
c001aa08:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001aa0c:	b8 06 00 00 00       	mov    eax,0x6
c001aa11:	75 1d                	jne    c001aa30 <Directory::open()+0x56>
c001aa13:	50                   	push   eax
c001aa14:	8b 02                	mov    eax,DWORD PTR [edx]
c001aa16:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001aa1c:	51                   	push   ecx
c001aa1d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001aa20:	51                   	push   ecx
c001aa21:	52                   	push   edx
c001aa22:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	85 c0                	test   eax,eax
c001aa2a:	75 04                	jne    c001aa30 <Directory::open()+0x56>
c001aa2c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001aa30:	83 c4 08             	add    esp,0x8
c001aa33:	5b                   	pop    ebx
c001aa34:	c3                   	ret    
c001aa35:	90                   	nop

c001aa36 <Directory::close()>:
c001aa36:	53                   	push   ebx
c001aa37:	b8 0b 00 00 00       	mov    eax,0xb
c001aa3c:	83 ec 08             	sub    esp,0x8
c001aa3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa43:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa4a:	83 f9 19             	cmp    ecx,0x19
c001aa4d:	77 41                	ja     c001aa90 <Directory::close()+0x5a>
c001aa4f:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa56:	85 db                	test   ebx,ebx
c001aa58:	74 36                	je     c001aa90 <Directory::close()+0x5a>
c001aa5a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001aa61:	74 2d                	je     c001aa90 <Directory::close()+0x5a>
c001aa63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa67:	b8 05 00 00 00       	mov    eax,0x5
c001aa6c:	74 22                	je     c001aa90 <Directory::close()+0x5a>
c001aa6e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001aa72:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa79:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001aa7f:	53                   	push   ebx
c001aa80:	53                   	push   ebx
c001aa81:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aa83:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001aa89:	50                   	push   eax
c001aa8a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001aa8d:	83 c4 10             	add    esp,0x10
c001aa90:	83 c4 08             	add    esp,0x8
c001aa93:	5b                   	pop    ebx
c001aa94:	c3                   	ret    
c001aa95:	90                   	nop

c001aa96 <Directory::unlink()>:
c001aa96:	83 ec 0c             	sub    esp,0xc
c001aa99:	b8 0b 00 00 00       	mov    eax,0xb
c001aa9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaa2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaa9:	83 f9 19             	cmp    ecx,0x19
c001aaac:	77 2f                	ja     c001aadd <Directory::unlink()+0x47>
c001aaae:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aab5:	85 c9                	test   ecx,ecx
c001aab7:	74 24                	je     c001aadd <Directory::unlink()+0x47>
c001aab9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aabf:	85 c9                	test   ecx,ecx
c001aac1:	74 1a                	je     c001aadd <Directory::unlink()+0x47>
c001aac3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aac7:	b8 06 00 00 00       	mov    eax,0x6
c001aacc:	75 0f                	jne    c001aadd <Directory::unlink()+0x47>
c001aace:	50                   	push   eax
c001aacf:	83 c2 0d             	add    edx,0xd
c001aad2:	50                   	push   eax
c001aad3:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aad5:	52                   	push   edx
c001aad6:	51                   	push   ecx
c001aad7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	83 c4 0c             	add    esp,0xc
c001aae0:	c3                   	ret    
c001aae1:	90                   	nop

c001aae2 <Directory::rename(char const*)>:
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	b8 0b 00 00 00       	mov    eax,0xb
c001aaea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaf5:	83 f9 19             	cmp    ecx,0x19
c001aaf8:	77 32                	ja     c001ab2c <Directory::rename(char const*)+0x4a>
c001aafa:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab01:	85 c9                	test   ecx,ecx
c001ab03:	74 27                	je     c001ab2c <Directory::rename(char const*)+0x4a>
c001ab05:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab0b:	85 c9                	test   ecx,ecx
c001ab0d:	74 1d                	je     c001ab2c <Directory::rename(char const*)+0x4a>
c001ab0f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab13:	b8 06 00 00 00       	mov    eax,0x6
c001ab18:	75 12                	jne    c001ab2c <Directory::rename(char const*)+0x4a>
c001ab1a:	50                   	push   eax
c001ab1b:	83 c2 0d             	add    edx,0xd
c001ab1e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ab24:	52                   	push   edx
c001ab25:	51                   	push   ecx
c001ab26:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	83 c4 0c             	add    esp,0xc
c001ab2f:	c3                   	ret    

c001ab30 <Directory::exists()>:
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	31 c0                	xor    eax,eax
c001ab35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab39:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab40:	83 f9 19             	cmp    ecx,0x19
c001ab43:	77 24                	ja     c001ab69 <Directory::exists()+0x39>
c001ab45:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab4c:	85 c9                	test   ecx,ecx
c001ab4e:	74 19                	je     c001ab69 <Directory::exists()+0x39>
c001ab50:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab56:	85 c9                	test   ecx,ecx
c001ab58:	74 0f                	je     c001ab69 <Directory::exists()+0x39>
c001ab5a:	50                   	push   eax
c001ab5b:	83 c2 0d             	add    edx,0xd
c001ab5e:	50                   	push   eax
c001ab5f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab61:	52                   	push   edx
c001ab62:	51                   	push   ecx
c001ab63:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001ab66:	83 c4 10             	add    esp,0x10
c001ab69:	83 c4 0c             	add    esp,0xc
c001ab6c:	c3                   	ret    
c001ab6d:	90                   	nop

c001ab6e <Directory::read(dirent*)>:
c001ab6e:	83 ec 1c             	sub    esp,0x1c
c001ab71:	b8 0b 00 00 00       	mov    eax,0xb
c001ab76:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab7a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab81:	83 f9 19             	cmp    ecx,0x19
c001ab84:	77 30                	ja     c001abb6 <Directory::read(dirent*)+0x48>
c001ab86:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab8d:	85 c9                	test   ecx,ecx
c001ab8f:	74 25                	je     c001abb6 <Directory::read(dirent*)+0x48>
c001ab91:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001ab98:	74 1c                	je     c001abb6 <Directory::read(dirent*)+0x48>
c001ab9a:	83 ec 0c             	sub    esp,0xc
c001ab9d:	8b 02                	mov    eax,DWORD PTR [edx]
c001ab9f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001aba3:	51                   	push   ecx
c001aba4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aba8:	6a 00                	push   0x0
c001abaa:	68 10 01 00 00       	push   0x110
c001abaf:	52                   	push   edx
c001abb0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abb3:	83 c4 20             	add    esp,0x20
c001abb6:	83 c4 1c             	add    esp,0x1c
c001abb9:	c3                   	ret    

c001abba <Directory::create()>:
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	b8 0b 00 00 00       	mov    eax,0xb
c001abc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abc6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001abcd:	83 f9 19             	cmp    ecx,0x19
c001abd0:	77 2f                	ja     c001ac01 <Directory::create()+0x47>
c001abd2:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001abd9:	85 c9                	test   ecx,ecx
c001abdb:	74 24                	je     c001ac01 <Directory::create()+0x47>
c001abdd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001abe3:	85 c9                	test   ecx,ecx
c001abe5:	74 1a                	je     c001ac01 <Directory::create()+0x47>
c001abe7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001abeb:	b8 06 00 00 00       	mov    eax,0x6
c001abf0:	75 0f                	jne    c001ac01 <Directory::create()+0x47>
c001abf2:	50                   	push   eax
c001abf3:	83 c2 0d             	add    edx,0xd
c001abf6:	50                   	push   eax
c001abf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c001abf9:	52                   	push   edx
c001abfa:	51                   	push   ecx
c001abfb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001abfe:	83 c4 10             	add    esp,0x10
c001ac01:	83 c4 0c             	add    esp,0xc
c001ac04:	c3                   	ret    
c001ac05:	90                   	nop

c001ac06 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ac06:	b8 0a 00 00 00       	mov    eax,0xa
c001ac0b:	c3                   	ret    

c001ac0c <Bus::Bus(char const*)>:
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac13:	83 ec 08             	sub    esp,0x8
c001ac16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac1a:	50                   	push   eax
c001ac1b:	e8 f2 07 00 00       	call   c001b412 <Device::Device(char const*)>
c001ac20:	83 c4 10             	add    esp,0x10
c001ac23:	ba 48 1d 03 c0       	mov    edx,0xc0031d48
c001ac28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac2c:	89 10                	mov    DWORD PTR [eax],edx
c001ac2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac32:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001ac3c:	90                   	nop
c001ac3d:	83 c4 0c             	add    esp,0xc
c001ac40:	c3                   	ret    
c001ac41:	90                   	nop
c001ac42:	66 90                	xchg   ax,ax

c001ac44 <Bus::~Bus()>:
c001ac44:	83 ec 0c             	sub    esp,0xc
c001ac47:	ba 48 1d 03 c0       	mov    edx,0xc0031d48
c001ac4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac50:	89 10                	mov    DWORD PTR [eax],edx
c001ac52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac56:	83 ec 0c             	sub    esp,0xc
c001ac59:	50                   	push   eax
c001ac5a:	e8 53 05 00 00       	call   c001b1b2 <Device::~Device()>
c001ac5f:	83 c4 10             	add    esp,0x10
c001ac62:	90                   	nop
c001ac63:	83 c4 0c             	add    esp,0xc
c001ac66:	c3                   	ret    
c001ac67:	90                   	nop

c001ac68 <Bus::~Bus()>:
c001ac68:	83 ec 0c             	sub    esp,0xc
c001ac6b:	83 ec 0c             	sub    esp,0xc
c001ac6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac72:	e8 cd ff ff ff       	call   c001ac44 <Bus::~Bus()>
c001ac77:	83 c4 10             	add    esp,0x10
c001ac7a:	83 ec 08             	sub    esp,0x8
c001ac7d:	68 58 01 00 00       	push   0x158
c001ac82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac86:	e8 91 e4 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001ac8b:	83 c4 10             	add    esp,0x10
c001ac8e:	83 c4 0c             	add    esp,0xc
c001ac91:	c3                   	ret    

c001ac92 <beepThread(void*)>:
c001ac92:	83 ec 0c             	sub    esp,0xc
c001ac95:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ac9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac9e:	48                   	dec    eax
c001ac9f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001aca4:	75 01                	jne    c001aca7 <beepThread(void*)+0x15>
c001aca6:	fb                   	sti    
c001aca7:	6b c2 0a             	imul   eax,edx,0xa
c001acaa:	83 ec 0c             	sub    esp,0xc
c001acad:	50                   	push   eax
c001acae:	e8 c1 a6 00 00       	call   c0025374 <milliTenthSleep(unsigned int)>
c001acb3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001acba:	e8 ba c4 00 00       	call   c0027179 <HalMakeBeep(int)>
c001acbf:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001acc7:	83 c4 1c             	add    esp,0x1c
c001acca:	e9 89 a5 00 00       	jmp    c0025258 <blockTask(TaskState)>

c001accf <Krnl::beep(int, int, bool)>:
c001accf:	56                   	push   esi
c001acd0:	53                   	push   ebx
c001acd1:	83 ec 10             	sub    esp,0x10
c001acd4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001acd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001acdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ace0:	e8 94 c4 00 00       	call   c0027179 <HalMakeBeep(int)>
c001ace5:	89 f0                	mov    eax,esi
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	84 c0                	test   al,al
c001acec:	74 1e                	je     c001ad0c <Krnl::beep(int, int, bool)+0x3d>
c001acee:	6b db 0a             	imul   ebx,ebx,0xa
c001acf1:	83 ec 0c             	sub    esp,0xc
c001acf4:	53                   	push   ebx
c001acf5:	e8 7a a6 00 00       	call   c0025374 <milliTenthSleep(unsigned int)>
c001acfa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad02:	83 c4 14             	add    esp,0x14
c001ad05:	5b                   	pop    ebx
c001ad06:	5e                   	pop    esi
c001ad07:	e9 6d c4 00 00       	jmp    c0027179 <HalMakeBeep(int)>
c001ad0c:	68 e6 00 00 00       	push   0xe6
c001ad11:	53                   	push   ebx
c001ad12:	68 92 ac 01 c0       	push   0xc001ac92
c001ad17:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad1d:	e8 2e a2 00 00       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c001ad22:	83 c4 14             	add    esp,0x14
c001ad25:	5b                   	pop    ebx
c001ad26:	5e                   	pop    esi
c001ad27:	c3                   	ret    

c001ad28 <User::loadClockSettings(int)>:
c001ad28:	53                   	push   ebx
c001ad29:	83 ec 14             	sub    esp,0x14
c001ad2c:	68 14 01 00 00       	push   0x114
c001ad31:	e8 ad b6 ff ff       	call   c00163e3 <malloc>
c001ad36:	83 c4 0c             	add    esp,0xc
c001ad39:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ad3f:	68 6c 1d 03 c0       	push   0xc0031d6c
c001ad44:	50                   	push   eax
c001ad45:	89 c3                	mov    ebx,eax
c001ad47:	e8 e6 f6 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c001ad4c:	58                   	pop    eax
c001ad4d:	5a                   	pop    edx
c001ad4e:	6a 01                	push   0x1
c001ad50:	53                   	push   ebx
c001ad51:	e8 fa f6 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c001ad56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ad59:	e8 50 f7 ff ff       	call   c001a4ae <File::close()>
c001ad5e:	83 c4 10             	add    esp,0x10
c001ad61:	85 db                	test   ebx,ebx
c001ad63:	74 0f                	je     c001ad74 <User::loadClockSettings(int)+0x4c>
c001ad65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad67:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ad6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ad6e:	83 c4 08             	add    esp,0x8
c001ad71:	5b                   	pop    ebx
c001ad72:	ff e0                	jmp    eax
c001ad74:	83 c4 08             	add    esp,0x8
c001ad77:	5b                   	pop    ebx
c001ad78:	c3                   	ret    
c001ad79:	90                   	nop

c001ad7a <Clock::Clock(char const*)>:
c001ad7a:	83 ec 0c             	sub    esp,0xc
c001ad7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad81:	83 ec 08             	sub    esp,0x8
c001ad84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad88:	50                   	push   eax
c001ad89:	e8 84 06 00 00       	call   c001b412 <Device::Device(char const*)>
c001ad8e:	83 c4 10             	add    esp,0x10
c001ad91:	ba 94 1d 03 c0       	mov    edx,0xc0031d94
c001ad96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9a:	89 10                	mov    DWORD PTR [eax],edx
c001ad9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ada0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001adaa:	90                   	nop
c001adab:	83 c4 0c             	add    esp,0xc
c001adae:	c3                   	ret    
c001adaf:	90                   	nop

c001adb0 <Clock::~Clock()>:
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	ba 94 1d 03 c0       	mov    edx,0xc0031d94
c001adb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adbc:	89 10                	mov    DWORD PTR [eax],edx
c001adbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc2:	83 ec 0c             	sub    esp,0xc
c001adc5:	50                   	push   eax
c001adc6:	e8 e7 03 00 00       	call   c001b1b2 <Device::~Device()>
c001adcb:	83 c4 10             	add    esp,0x10
c001adce:	90                   	nop
c001adcf:	83 c4 0c             	add    esp,0xc
c001add2:	c3                   	ret    
c001add3:	90                   	nop

c001add4 <Clock::~Clock()>:
c001add4:	83 ec 0c             	sub    esp,0xc
c001add7:	83 ec 0c             	sub    esp,0xc
c001adda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adde:	e8 cd ff ff ff       	call   c001adb0 <Clock::~Clock()>
c001ade3:	83 c4 10             	add    esp,0x10
c001ade6:	83 ec 08             	sub    esp,0x8
c001ade9:	68 58 01 00 00       	push   0x158
c001adee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001adf2:	e8 25 e3 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001adf7:	83 c4 10             	add    esp,0x10
c001adfa:	83 c4 0c             	add    esp,0xc
c001adfd:	c3                   	ret    

c001adfe <Clock::timeInSecondsLocal()>:
c001adfe:	53                   	push   ebx
c001adff:	83 ec 14             	sub    esp,0x14
c001ae02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae06:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae08:	50                   	push   eax
c001ae09:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ae0c:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ae13:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ae19:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ae1f:	89 cb                	mov    ebx,ecx
c001ae21:	c1 fb 1f             	sar    ebx,0x1f
c001ae24:	01 c8                	add    eax,ecx
c001ae26:	11 da                	adc    edx,ebx
c001ae28:	83 c4 10             	add    esp,0x10
c001ae2b:	31 c9                	xor    ecx,ecx
c001ae2d:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae34:	74 05                	je     c001ae3b <Clock::timeInSecondsLocal()+0x3d>
c001ae36:	b9 08 07 00 00       	mov    ecx,0x708
c001ae3b:	31 db                	xor    ebx,ebx
c001ae3d:	01 c8                	add    eax,ecx
c001ae3f:	11 da                	adc    edx,ebx
c001ae41:	83 c4 08             	add    esp,0x8
c001ae44:	5b                   	pop    ebx
c001ae45:	c3                   	ret    

c001ae46 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001ae46:	57                   	push   edi
c001ae47:	56                   	push   esi
c001ae48:	53                   	push   ebx
c001ae49:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae51:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae55:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae57:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001ae5a:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001ae61:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001ae67:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001ae6d:	99                   	cdq    
c001ae6e:	29 c6                	sub    esi,eax
c001ae70:	19 d7                	sbb    edi,edx
c001ae72:	89 f0                	mov    eax,esi
c001ae74:	31 f6                	xor    esi,esi
c001ae76:	89 fa                	mov    edx,edi
c001ae78:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ae7f:	74 05                	je     c001ae86 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001ae81:	be 08 07 00 00       	mov    esi,0x708
c001ae86:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ae8a:	31 ff                	xor    edi,edi
c001ae8c:	29 f0                	sub    eax,esi
c001ae8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae92:	19 fa                	sbb    edx,edi
c001ae94:	89 d8                	mov    eax,ebx
c001ae96:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ae9a:	5b                   	pop    ebx
c001ae9b:	5e                   	pop    esi
c001ae9c:	5f                   	pop    edi
c001ae9d:	ff e0                	jmp    eax

c001ae9f <datetimeToSeconds(datetime_t)>:
c001ae9f:	55                   	push   ebp
c001aea0:	57                   	push   edi
c001aea1:	56                   	push   esi
c001aea2:	53                   	push   ebx
c001aea3:	83 ec 0c             	sub    esp,0xc
c001aea6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001aeaa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aeae:	89 f7                	mov    edi,esi
c001aeb0:	89 f0                	mov    eax,esi
c001aeb2:	0f b6 cf             	movzx  ecx,bh
c001aeb5:	0f b6 c4             	movzx  eax,ah
c001aeb8:	c1 ef 10             	shr    edi,0x10
c001aebb:	89 da                	mov    edx,ebx
c001aebd:	8d 69 ff             	lea    ebp,[ecx-0x1]
c001aec0:	89 f9                	mov    ecx,edi
c001aec2:	0f b6 f9             	movzx  edi,cl
c001aec5:	89 f1                	mov    ecx,esi
c001aec7:	6b c0 3c             	imul   eax,eax,0x3c
c001aeca:	0f b6 f1             	movzx  esi,cl
c001aecd:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c001aed3:	0f b6 db             	movzx  ebx,bl
c001aed6:	c1 ea 10             	shr    edx,0x10
c001aed9:	81 ea 6c 07 00 00    	sub    edx,0x76c
c001aedf:	01 f8                	add    eax,edi
c001aee1:	01 f0                	add    eax,esi
c001aee3:	89 04 24             	mov    DWORD PTR [esp],eax
c001aee6:	c1 f8 1f             	sar    eax,0x1f
c001aee9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aeed:	89 e8                	mov    eax,ebp
c001aeef:	0f b6 c0             	movzx  eax,al
c001aef2:	8b 0c 85 e0 1d 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce220]
c001aef9:	83 f8 01             	cmp    eax,0x1
c001aefc:	8d 4c 0b ff          	lea    ecx,[ebx+ecx*1-0x1]
c001af00:	0f b7 da             	movzx  ebx,dx
c001af03:	76 27                	jbe    c001af2c <datetimeToSeconds(datetime_t)+0x8d>
c001af05:	80 e2 03             	and    dl,0x3
c001af08:	75 22                	jne    c001af2c <datetimeToSeconds(datetime_t)+0x8d>
c001af0a:	31 d2                	xor    edx,edx
c001af0c:	be 64 00 00 00       	mov    esi,0x64
c001af11:	89 d8                	mov    eax,ebx
c001af13:	f7 f6                	div    esi
c001af15:	85 d2                	test   edx,edx
c001af17:	75 12                	jne    c001af2b <datetimeToSeconds(datetime_t)+0x8c>
c001af19:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001af1f:	be 90 01 00 00       	mov    esi,0x190
c001af24:	99                   	cdq    
c001af25:	f7 fe                	idiv   esi
c001af27:	85 d2                	test   edx,edx
c001af29:	75 01                	jne    c001af2c <datetimeToSeconds(datetime_t)+0x8d>
c001af2b:	41                   	inc    ecx
c001af2c:	83 fb 46             	cmp    ebx,0x46
c001af2f:	76 48                	jbe    c001af79 <datetimeToSeconds(datetime_t)+0xda>
c001af31:	be 46 00 00 00       	mov    esi,0x46
c001af36:	bf 64 00 00 00       	mov    edi,0x64
c001af3b:	bd 90 01 00 00       	mov    ebp,0x190
c001af40:	f7 c6 03 00 00 00    	test   esi,0x3
c001af46:	b8 6d 01 00 00       	mov    eax,0x16d
c001af4b:	75 23                	jne    c001af70 <datetimeToSeconds(datetime_t)+0xd1>
c001af4d:	89 f0                	mov    eax,esi
c001af4f:	99                   	cdq    
c001af50:	f7 ff                	idiv   edi
c001af52:	b8 6e 01 00 00       	mov    eax,0x16e
c001af57:	85 d2                	test   edx,edx
c001af59:	75 15                	jne    c001af70 <datetimeToSeconds(datetime_t)+0xd1>
c001af5b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001af61:	99                   	cdq    
c001af62:	f7 fd                	idiv   ebp
c001af64:	83 fa 01             	cmp    edx,0x1
c001af67:	19 c0                	sbb    eax,eax
c001af69:	f7 d0                	not    eax
c001af6b:	05 6e 01 00 00       	add    eax,0x16e
c001af70:	46                   	inc    esi
c001af71:	01 c1                	add    ecx,eax
c001af73:	39 de                	cmp    esi,ebx
c001af75:	7c c9                	jl     c001af40 <datetimeToSeconds(datetime_t)+0xa1>
c001af77:	eb 34                	jmp    c001afad <datetimeToSeconds(datetime_t)+0x10e>
c001af79:	74 32                	je     c001afad <datetimeToSeconds(datetime_t)+0x10e>
c001af7b:	b8 45 00 00 00       	mov    eax,0x45
c001af80:	89 c2                	mov    edx,eax
c001af82:	83 e2 03             	and    edx,0x3
c001af85:	39 d8                	cmp    eax,ebx
c001af87:	7e 0f                	jle    c001af98 <datetimeToSeconds(datetime_t)+0xf9>
c001af89:	83 fa 01             	cmp    edx,0x1
c001af8c:	19 d2                	sbb    edx,edx
c001af8e:	48                   	dec    eax
c001af8f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001af96:	eb e8                	jmp    c001af80 <datetimeToSeconds(datetime_t)+0xe1>
c001af98:	85 d2                	test   edx,edx
c001af9a:	b8 6d 01 00 00       	mov    eax,0x16d
c001af9f:	75 0a                	jne    c001afab <datetimeToSeconds(datetime_t)+0x10c>
c001afa1:	83 fb 01             	cmp    ebx,0x1
c001afa4:	19 c0                	sbb    eax,eax
c001afa6:	05 6e 01 00 00       	add    eax,0x16e
c001afab:	29 c1                	sub    ecx,eax
c001afad:	b8 80 51 01 00       	mov    eax,0x15180
c001afb2:	f7 e9                	imul   ecx
c001afb4:	03 04 24             	add    eax,DWORD PTR [esp]
c001afb7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001afbb:	83 c4 0c             	add    esp,0xc
c001afbe:	5b                   	pop    ebx
c001afbf:	5e                   	pop    esi
c001afc0:	5f                   	pop    edi
c001afc1:	5d                   	pop    ebp
c001afc2:	c3                   	ret    
c001afc3:	90                   	nop

c001afc4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001afc4:	57                   	push   edi
c001afc5:	56                   	push   esi
c001afc6:	53                   	push   ebx
c001afc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001afcb:	8b 06                	mov    eax,DWORD PTR [esi]
c001afcd:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001afd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001afd8:	e8 c2 fe ff ff       	call   c001ae9f <datetimeToSeconds(datetime_t)>
c001afdd:	59                   	pop    ecx
c001afde:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001afe5:	5b                   	pop    ebx
c001afe6:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001afec:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001aff2:	89 cb                	mov    ebx,ecx
c001aff4:	c1 fb 1f             	sar    ebx,0x1f
c001aff7:	29 c8                	sub    eax,ecx
c001aff9:	19 da                	sbb    edx,ebx
c001affb:	31 c9                	xor    ecx,ecx
c001affd:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001b004:	74 05                	je     c001b00b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001b006:	b9 08 07 00 00       	mov    ecx,0x708
c001b00b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b00f:	31 db                	xor    ebx,ebx
c001b011:	29 c8                	sub    eax,ecx
c001b013:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b017:	19 da                	sbb    edx,ebx
c001b019:	89 f8                	mov    eax,edi
c001b01b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b01f:	5b                   	pop    ebx
c001b020:	5e                   	pop    esi
c001b021:	5f                   	pop    edi
c001b022:	ff e0                	jmp    eax

c001b024 <secondsToDatetime(unsigned long long)>:
c001b024:	55                   	push   ebp
c001b025:	57                   	push   edi
c001b026:	56                   	push   esi
c001b027:	53                   	push   ebx
c001b028:	83 ec 1c             	sub    esp,0x1c
c001b02b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001b02f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b033:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b037:	6a 00                	push   0x0
c001b039:	68 80 51 01 00       	push   0x15180
c001b03e:	55                   	push   ebp
c001b03f:	57                   	push   edi
c001b040:	e8 bb 35 01 00       	call   c002e600 <__udivdi3>
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b04c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001b052:	6a 00                	push   0x0
c001b054:	68 80 51 01 00       	push   0x15180
c001b059:	55                   	push   ebp
c001b05a:	57                   	push   edi
c001b05b:	bf 10 0e 00 00       	mov    edi,0xe10
c001b060:	e8 9b 36 01 00       	call   c002e700 <__umoddi3>
c001b065:	83 c4 10             	add    esp,0x10
c001b068:	99                   	cdq    
c001b069:	f7 ff                	idiv   edi
c001b06b:	bf 3c 00 00 00       	mov    edi,0x3c
c001b070:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001b073:	89 d0                	mov    eax,edx
c001b075:	99                   	cdq    
c001b076:	f7 ff                	idiv   edi
c001b078:	85 db                	test   ebx,ebx
c001b07a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001b07d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001b080:	79 11                	jns    c001b093 <secondsToDatetime(unsigned long long)+0x6f>
c001b082:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b086:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001b08c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b091:	eb 07                	jmp    c001b09a <secondsToDatetime(unsigned long long)+0x76>
c001b093:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001b098:	89 d8                	mov    eax,ebx
c001b09a:	99                   	cdq    
c001b09b:	bf b4 05 00 00       	mov    edi,0x5b4
c001b0a0:	f7 f9                	idiv   ecx
c001b0a2:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b0a7:	31 d2                	xor    edx,edx
c001b0a9:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b0ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0b2:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b0ba:	01 c3                	add    ebx,eax
c001b0bc:	89 d8                	mov    eax,ebx
c001b0be:	f7 f1                	div    ecx
c001b0c0:	31 d2                	xor    edx,edx
c001b0c2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b0c5:	89 d8                	mov    eax,ebx
c001b0c7:	f7 f7                	div    edi
c001b0c9:	31 d2                	xor    edx,edx
c001b0cb:	29 c1                	sub    ecx,eax
c001b0cd:	89 d8                	mov    eax,ebx
c001b0cf:	f7 f5                	div    ebp
c001b0d1:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b0d6:	31 d2                	xor    edx,edx
c001b0d8:	29 c1                	sub    ecx,eax
c001b0da:	89 c8                	mov    eax,ecx
c001b0dc:	f7 f5                	div    ebp
c001b0de:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b0e3:	31 d2                	xor    edx,edx
c001b0e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b0e9:	89 c8                	mov    eax,ecx
c001b0eb:	f7 f5                	div    ebp
c001b0ed:	31 d2                	xor    edx,edx
c001b0ef:	01 c3                	add    ebx,eax
c001b0f1:	89 c8                	mov    eax,ecx
c001b0f3:	f7 f7                	div    edi
c001b0f5:	bf 99 00 00 00       	mov    edi,0x99
c001b0fa:	31 d2                	xor    edx,edx
c001b0fc:	29 c3                	sub    ebx,eax
c001b0fe:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b106:	29 c3                	sub    ebx,eax
c001b108:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b10b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b10e:	83 c1 02             	add    ecx,0x2
c001b111:	89 c8                	mov    eax,ecx
c001b113:	bb 05 00 00 00       	mov    ebx,0x5
c001b118:	f7 f7                	div    edi
c001b11a:	31 d2                	xor    edx,edx
c001b11c:	89 c7                	mov    edi,eax
c001b11e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b124:	83 c0 02             	add    eax,0x2
c001b127:	f7 f3                	div    ebx
c001b129:	89 eb                	mov    ebx,ebp
c001b12b:	29 c3                	sub    ebx,eax
c001b12d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b133:	88 1e                	mov    BYTE PTR [esi],bl
c001b135:	19 c0                	sbb    eax,eax
c001b137:	31 d2                	xor    edx,edx
c001b139:	83 e0 0c             	and    eax,0xc
c001b13c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b140:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b148:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b14c:	83 f9 01             	cmp    ecx,0x1
c001b14f:	0f 96 c2             	setbe  dl
c001b152:	41                   	inc    ecx
c001b153:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b156:	01 d0                	add    eax,edx
c001b158:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b15c:	83 c4 1c             	add    esp,0x1c
c001b15f:	89 f0                	mov    eax,esi
c001b161:	5b                   	pop    ebx
c001b162:	5e                   	pop    esi
c001b163:	5f                   	pop    edi
c001b164:	5d                   	pop    ebp
c001b165:	c2 04 00             	ret    0x4

c001b168 <Clock::timeInDatetimeLocal()>:
c001b168:	53                   	push   ebx
c001b169:	83 ec 14             	sub    esp,0x14
c001b16c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b170:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b174:	e8 85 fc ff ff       	call   c001adfe <Clock::timeInSecondsLocal()>
c001b179:	83 c4 0c             	add    esp,0xc
c001b17c:	52                   	push   edx
c001b17d:	50                   	push   eax
c001b17e:	53                   	push   ebx
c001b17f:	e8 a0 fe ff ff       	call   c001b024 <secondsToDatetime(unsigned long long)>
c001b184:	89 d8                	mov    eax,ebx
c001b186:	83 c4 14             	add    esp,0x14
c001b189:	5b                   	pop    ebx
c001b18a:	c2 04 00             	ret    0x4
c001b18d:	90                   	nop

c001b18e <Device::hibernate()>:
c001b18e:	c3                   	ret    
c001b18f:	90                   	nop

c001b190 <Device::wake()>:
c001b190:	c3                   	ret    
c001b191:	90                   	nop

c001b192 <Device::detect()>:
c001b192:	c3                   	ret    
c001b193:	90                   	nop

c001b194 <Device::disableLegacy()>:
c001b194:	c3                   	ret    
c001b195:	90                   	nop

c001b196 <Device::powerSaving(PowerSavingLevel)>:
c001b196:	c3                   	ret    
c001b197:	90                   	nop

c001b198 <DriverlessDevice::close(int, int, void*)>:
c001b198:	31 c0                	xor    eax,eax
c001b19a:	c3                   	ret    
c001b19b:	90                   	nop

c001b19c <DriverlessDevice::detect()>:
c001b19c:	c3                   	ret    
c001b19d:	90                   	nop

c001b19e <DriverlessDevice::open(int, int, void*)>:
c001b19e:	83 ec 18             	sub    esp,0x18
c001b1a1:	68 10 1e 03 c0       	push   0xc0031e10
c001b1a6:	e8 f7 4f 00 00       	call   c00201a2 <KePanic(char const*)>
c001b1ab:	83 c8 ff             	or     eax,0xffffffff
c001b1ae:	83 c4 1c             	add    esp,0x1c
c001b1b1:	c3                   	ret    

c001b1b2 <Device::~Device()>:
c001b1b2:	ba 7c 1e 03 c0       	mov    edx,0xc0031e7c
c001b1b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1bb:	89 10                	mov    DWORD PTR [eax],edx
c001b1bd:	90                   	nop
c001b1be:	c3                   	ret    
c001b1bf:	90                   	nop

c001b1c0 <Device::~Device()>:
c001b1c0:	83 ec 0c             	sub    esp,0xc
c001b1c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b1c7:	e8 e6 ff ff ff       	call   c001b1b2 <Device::~Device()>
c001b1cc:	83 c4 04             	add    esp,0x4
c001b1cf:	83 ec 08             	sub    esp,0x8
c001b1d2:	68 58 01 00 00       	push   0x158
c001b1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1db:	e8 3c df ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	83 c4 0c             	add    esp,0xc
c001b1e6:	c3                   	ret    
c001b1e7:	90                   	nop

c001b1e8 <Device::findAndLoadDriver()>:
c001b1e8:	c7 44 24 04 2e 1e 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031e2e
c001b1f0:	e9 25 e0 ff ff       	jmp    c001921a <Dbg::kprintf(char const*, ...)>
c001b1f5:	90                   	nop

c001b1f6 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b1f6:	57                   	push   edi
c001b1f7:	b9 09 00 00 00       	mov    ecx,0x9
c001b1fc:	56                   	push   esi
c001b1fd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b201:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b205:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b20f:	81 c7 18 01 00 00    	add    edi,0x118
c001b215:	fc                   	cld    
c001b216:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b218:	5e                   	pop    esi
c001b219:	5f                   	pop    edi
c001b21a:	c3                   	ret    
c001b21b:	90                   	nop

c001b21c <Device::preOpenACPI(void*, char*, char*)>:
c001b21c:	57                   	push   edi
c001b21d:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b222:	56                   	push   esi
c001b223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b22b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b22f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b239:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b23f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b245:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b247:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b24d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b251:	b9 0e 00 00 00       	mov    ecx,0xe
c001b256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b258:	5e                   	pop    esi
c001b259:	5f                   	pop    edi
c001b25a:	c3                   	ret    
c001b25b:	90                   	nop

c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b25c:	53                   	push   ebx
c001b25d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b261:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b265:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b269:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b26d:	0f b6 c0             	movzx  eax,al
c001b270:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b274:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b278:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b27c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b280:	5b                   	pop    ebx
c001b281:	e9 be 05 00 00       	jmp    c001b844 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b286 <Device::getParent()>:
c001b286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b28a:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b290:	c3                   	ret    
c001b291:	90                   	nop

c001b292 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b292:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b296:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b29a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b29f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2ab:	e9 0b 07 00 00       	jmp    c001b9bb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b2b0 <Device::addChild(Device*)>:
c001b2b0:	53                   	push   ebx
c001b2b1:	83 ec 08             	sub    esp,0x8
c001b2b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b2b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2bc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b2c2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b2c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2ca:	85 d2                	test   edx,edx
c001b2cc:	74 04                	je     c001b2d2 <Device::addChild(Device*)+0x22>
c001b2ce:	89 d3                	mov    ebx,edx
c001b2d0:	eb f6                	jmp    c001b2c8 <Device::addChild(Device*)+0x18>
c001b2d2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b2d5:	83 ec 0c             	sub    esp,0xc
c001b2d8:	6a 08                	push   0x8
c001b2da:	e8 04 b1 ff ff       	call   c00163e3 <malloc>
c001b2df:	89 03                	mov    DWORD PTR [ebx],eax
c001b2e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2ee:	83 c4 18             	add    esp,0x18
c001b2f1:	5b                   	pop    ebx
c001b2f2:	c3                   	ret    
c001b2f3:	90                   	nop

c001b2f4 <Device::removeAllChildren()>:
c001b2f4:	56                   	push   esi
c001b2f5:	53                   	push   ebx
c001b2f6:	52                   	push   edx
c001b2f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b2fb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b301:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b304:	74 17                	je     c001b31d <Device::removeAllChildren()+0x29>
c001b306:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b309:	85 c0                	test   eax,eax
c001b30b:	74 0c                	je     c001b319 <Device::removeAllChildren()+0x25>
c001b30d:	8b 10                	mov    edx,DWORD PTR [eax]
c001b30f:	83 ec 0c             	sub    esp,0xc
c001b312:	50                   	push   eax
c001b313:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b316:	83 c4 10             	add    esp,0x10
c001b319:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b31b:	eb e4                	jmp    c001b301 <Device::removeAllChildren()+0xd>
c001b31d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b323:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b329:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b32f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b336:	58                   	pop    eax
c001b337:	5b                   	pop    ebx
c001b338:	5e                   	pop    esi
c001b339:	c3                   	ret    

c001b33a <Device::hibernateAll()>:
c001b33a:	53                   	push   ebx
c001b33b:	83 ec 14             	sub    esp,0x14
c001b33e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b342:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b344:	53                   	push   ebx
c001b345:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b348:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b34e:	83 c4 10             	add    esp,0x10
c001b351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b354:	74 0f                	je     c001b365 <Device::hibernateAll()+0x2b>
c001b356:	83 ec 0c             	sub    esp,0xc
c001b359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b35c:	e8 d9 ff ff ff       	call   c001b33a <Device::hibernateAll()>
c001b361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b363:	eb e9                	jmp    c001b34e <Device::hibernateAll()+0x14>
c001b365:	83 c4 08             	add    esp,0x8
c001b368:	5b                   	pop    ebx
c001b369:	c3                   	ret    

c001b36a <Device::wakeAll()>:
c001b36a:	53                   	push   ebx
c001b36b:	83 ec 14             	sub    esp,0x14
c001b36e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b372:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b374:	53                   	push   ebx
c001b375:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b378:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b384:	74 0f                	je     c001b395 <Device::wakeAll()+0x2b>
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b38c:	e8 d9 ff ff ff       	call   c001b36a <Device::wakeAll()>
c001b391:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b393:	eb e9                	jmp    c001b37e <Device::wakeAll()+0x14>
c001b395:	83 c4 08             	add    esp,0x8
c001b398:	5b                   	pop    ebx
c001b399:	c3                   	ret    

c001b39a <Device::detectAll()>:
c001b39a:	53                   	push   ebx
c001b39b:	83 ec 14             	sub    esp,0x14
c001b39e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b3a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3a4:	53                   	push   ebx
c001b3a5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b3a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3ae:	83 c4 10             	add    esp,0x10
c001b3b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3b4:	74 0f                	je     c001b3c5 <Device::detectAll()+0x2b>
c001b3b6:	83 ec 0c             	sub    esp,0xc
c001b3b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3bc:	e8 d9 ff ff ff       	call   c001b39a <Device::detectAll()>
c001b3c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3c3:	eb e9                	jmp    c001b3ae <Device::detectAll()+0x14>
c001b3c5:	83 c4 08             	add    esp,0x8
c001b3c8:	5b                   	pop    ebx
c001b3c9:	c3                   	ret    

c001b3ca <Device::disableLegacyAll()>:
c001b3ca:	c3                   	ret    
c001b3cb:	90                   	nop

c001b3cc <Device::loadDriversForAll()>:
c001b3cc:	c3                   	ret    
c001b3cd:	90                   	nop

c001b3ce <Device::powerSavingAll(PowerSavingLevel)>:
c001b3ce:	56                   	push   esi
c001b3cf:	53                   	push   ebx
c001b3d0:	83 ec 0c             	sub    esp,0xc
c001b3d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b3d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b3db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3dd:	56                   	push   esi
c001b3de:	53                   	push   ebx
c001b3df:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b3e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b3e8:	83 c4 10             	add    esp,0x10
c001b3eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b3ee:	74 0f                	je     c001b3ff <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b3f0:	52                   	push   edx
c001b3f1:	52                   	push   edx
c001b3f2:	56                   	push   esi
c001b3f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b3f6:	e8 d3 ff ff ff       	call   c001b3ce <Device::powerSavingAll(PowerSavingLevel)>
c001b3fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b3fd:	eb e9                	jmp    c001b3e8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b3ff:	58                   	pop    eax
c001b400:	5b                   	pop    ebx
c001b401:	5e                   	pop    esi
c001b402:	c3                   	ret    
c001b403:	90                   	nop

c001b404 <Device::setName(char const*)>:
c001b404:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b40c:	e9 3f 52 fe ff       	jmp    c0000650 <strcpy>
c001b411:	90                   	nop

c001b412 <Device::Device(char const*)>:
c001b412:	83 ec 1c             	sub    esp,0x1c
c001b415:	ba 7c 1e 03 c0       	mov    edx,0xc0031e7c
c001b41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41e:	89 10                	mov    DWORD PTR [eax],edx
c001b420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b424:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b42e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b432:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b43c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b440:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b44e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b458:	83 ec 08             	sub    esp,0x8
c001b45b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b463:	e8 9c ff ff ff       	call   c001b404 <Device::setName(char const*)>
c001b468:	83 c4 10             	add    esp,0x10
c001b46b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b473:	83 ec 0c             	sub    esp,0xc
c001b476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b47a:	e8 64 af ff ff       	call   c00163e3 <malloc>
c001b47f:	83 c4 10             	add    esp,0x10
c001b482:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b488:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b48f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b493:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b49d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4ad:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b4b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4be:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b4c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4c9:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b4d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4d4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b4de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4e2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b4ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4f0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b4fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b4fe:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b508:	90                   	nop
c001b509:	83 c4 1c             	add    esp,0x1c
c001b50c:	c3                   	ret    
c001b50d:	90                   	nop

c001b50e <Device::getName()>:
c001b50e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b512:	05 d0 00 00 00       	add    eax,0xd0
c001b517:	c3                   	ret    

c001b518 <Device::closeAll()>:
c001b518:	53                   	push   ebx
c001b519:	83 ec 08             	sub    esp,0x8
c001b51c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b520:	53                   	push   ebx
c001b521:	e8 e8 ff ff ff       	call   c001b50e <Device::getName()>
c001b526:	52                   	push   edx
c001b527:	50                   	push   eax
c001b528:	68 68 1e 03 c0       	push   0xc0031e68
c001b52d:	e8 e8 dc ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001b532:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b534:	6a 00                	push   0x0
c001b536:	6a 00                	push   0x0
c001b538:	6a 00                	push   0x0
c001b53a:	53                   	push   ebx
c001b53b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b53e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b544:	83 c4 20             	add    esp,0x20
c001b547:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b54a:	74 12                	je     c001b55e <Device::closeAll()+0x46>
c001b54c:	83 ec 0c             	sub    esp,0xc
c001b54f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b552:	e8 c1 ff ff ff       	call   c001b518 <Device::closeAll()>
c001b557:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b559:	83 c4 10             	add    esp,0x10
c001b55c:	eb e9                	jmp    c001b547 <Device::closeAll()+0x2f>
c001b55e:	83 c4 08             	add    esp,0x8
c001b561:	5b                   	pop    ebx
c001b562:	c3                   	ret    
c001b563:	90                   	nop

c001b564 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b564:	83 ec 0c             	sub    esp,0xc
c001b567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56b:	83 ec 08             	sub    esp,0x8
c001b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b572:	50                   	push   eax
c001b573:	e8 9a fe ff ff       	call   c001b412 <Device::Device(char const*)>
c001b578:	83 c4 10             	add    esp,0x10
c001b57b:	ba a8 1e 03 c0       	mov    edx,0xc0031ea8
c001b580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b584:	89 10                	mov    DWORD PTR [eax],edx
c001b586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b594:	90                   	nop
c001b595:	83 c4 0c             	add    esp,0xc
c001b598:	c3                   	ret    
c001b599:	90                   	nop

c001b59a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b59a:	57                   	push   edi
c001b59b:	56                   	push   esi
c001b59c:	53                   	push   ebx
c001b59d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b5a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b5a9:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b5af:	75 0c                	jne    c001b5bd <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b5b1:	52                   	push   edx
c001b5b2:	52                   	push   edx
c001b5b3:	53                   	push   ebx
c001b5b4:	56                   	push   esi
c001b5b5:	e8 f8 34 01 00       	call   c002eab2 <LinkedList<Device>::addElement(Device*)>
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b5c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b5c6:	74 12                	je     c001b5da <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b5c8:	50                   	push   eax
c001b5c9:	57                   	push   edi
c001b5ca:	56                   	push   esi
c001b5cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b5ce:	e8 c7 ff ff ff       	call   c001b59a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	eb e9                	jmp    c001b5c3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b5da:	5b                   	pop    ebx
c001b5db:	5e                   	pop    esi
c001b5dc:	5f                   	pop    edi
c001b5dd:	c3                   	ret    

c001b5de <getDevicesOfType(DeviceType)>:
c001b5de:	53                   	push   ebx
c001b5df:	83 ec 14             	sub    esp,0x14
c001b5e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b5e6:	53                   	push   ebx
c001b5e7:	e8 a2 35 01 00       	call   c002eb8e <LinkedList<Device>::LinkedList()>
c001b5ec:	83 c4 0c             	add    esp,0xc
c001b5ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b5f3:	53                   	push   ebx
c001b5f4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b5fa:	e8 9b ff ff ff       	call   c001b59a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b5ff:	83 c4 18             	add    esp,0x18
c001b602:	89 d8                	mov    eax,ebx
c001b604:	5b                   	pop    ebx
c001b605:	c2 04 00             	ret    0x4

c001b608 <HardDiskController::HardDiskController(char const*)>:
c001b608:	83 ec 0c             	sub    esp,0xc
c001b60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b60f:	83 ec 08             	sub    esp,0x8
c001b612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b616:	50                   	push   eax
c001b617:	e8 f6 fd ff ff       	call   c001b412 <Device::Device(char const*)>
c001b61c:	83 c4 10             	add    esp,0x10
c001b61f:	ba d4 1e 03 c0       	mov    edx,0xc0031ed4
c001b624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b628:	89 10                	mov    DWORD PTR [eax],edx
c001b62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b638:	90                   	nop
c001b639:	83 c4 0c             	add    esp,0xc
c001b63c:	c3                   	ret    
c001b63d:	90                   	nop
c001b63e:	66 90                	xchg   ax,ax

c001b640 <HardDiskController::~HardDiskController()>:
c001b640:	83 ec 0c             	sub    esp,0xc
c001b643:	ba d4 1e 03 c0       	mov    edx,0xc0031ed4
c001b648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64c:	89 10                	mov    DWORD PTR [eax],edx
c001b64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	50                   	push   eax
c001b656:	e8 57 fb ff ff       	call   c001b1b2 <Device::~Device()>
c001b65b:	83 c4 10             	add    esp,0x10
c001b65e:	90                   	nop
c001b65f:	83 c4 0c             	add    esp,0xc
c001b662:	c3                   	ret    
c001b663:	90                   	nop

c001b664 <HardDiskController::~HardDiskController()>:
c001b664:	83 ec 0c             	sub    esp,0xc
c001b667:	83 ec 0c             	sub    esp,0xc
c001b66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b66e:	e8 cd ff ff ff       	call   c001b640 <HardDiskController::~HardDiskController()>
c001b673:	83 c4 10             	add    esp,0x10
c001b676:	83 ec 08             	sub    esp,0x8
c001b679:	68 58 01 00 00       	push   0x158
c001b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b682:	e8 95 da ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001b687:	83 c4 10             	add    esp,0x10
c001b68a:	83 c4 0c             	add    esp,0xc
c001b68d:	c3                   	ret    

c001b68e <PhysicalDisk::eject()>:
c001b68e:	83 c8 ff             	or     eax,0xffffffff
c001b691:	c3                   	ret    

c001b692 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b692:	83 ec 0c             	sub    esp,0xc
c001b695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b699:	83 ec 08             	sub    esp,0x8
c001b69c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6a0:	50                   	push   eax
c001b6a1:	e8 6c fd ff ff       	call   c001b412 <Device::Device(char const*)>
c001b6a6:	83 c4 10             	add    esp,0x10
c001b6a9:	ba 00 1f 03 c0       	mov    edx,0xc0031f00
c001b6ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b2:	89 10                	mov    DWORD PTR [eax],edx
c001b6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ce:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6e0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6ea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b6f4:	90                   	nop
c001b6f5:	83 c4 0c             	add    esp,0xc
c001b6f8:	c3                   	ret    
c001b6f9:	90                   	nop

c001b6fa <PhysicalDisk::startCache()>:
c001b6fa:	56                   	push   esi
c001b6fb:	53                   	push   ebx
c001b6fc:	83 ec 10             	sub    esp,0x10
c001b6ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b703:	6a 44                	push   0x44
c001b705:	e8 d9 ac ff ff       	call   c00163e3 <malloc>
c001b70a:	89 c6                	mov    esi,eax
c001b70c:	58                   	pop    eax
c001b70d:	5a                   	pop    edx
c001b70e:	53                   	push   ebx
c001b70f:	56                   	push   esi
c001b710:	e8 77 17 00 00       	call   c001ce8c <VCache::VCache(PhysicalDisk*)>
c001b715:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b71b:	83 c4 14             	add    esp,0x14
c001b71e:	5b                   	pop    ebx
c001b71f:	5e                   	pop    esi
c001b720:	c3                   	ret    
c001b721:	90                   	nop

c001b722 <PhysicalDisk::~PhysicalDisk()>:
c001b722:	83 ec 0c             	sub    esp,0xc
c001b725:	ba 00 1f 03 c0       	mov    edx,0xc0031f00
c001b72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b72e:	89 10                	mov    DWORD PTR [eax],edx
c001b730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b734:	83 ec 0c             	sub    esp,0xc
c001b737:	50                   	push   eax
c001b738:	e8 75 fa ff ff       	call   c001b1b2 <Device::~Device()>
c001b73d:	83 c4 10             	add    esp,0x10
c001b740:	90                   	nop
c001b741:	83 c4 0c             	add    esp,0xc
c001b744:	c3                   	ret    
c001b745:	90                   	nop

c001b746 <PhysicalDisk::~PhysicalDisk()>:
c001b746:	83 ec 0c             	sub    esp,0xc
c001b749:	83 ec 0c             	sub    esp,0xc
c001b74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b750:	e8 cd ff ff ff       	call   c001b722 <PhysicalDisk::~PhysicalDisk()>
c001b755:	83 c4 10             	add    esp,0x10
c001b758:	83 ec 08             	sub    esp,0x8
c001b75b:	68 6c 01 00 00       	push   0x16c
c001b760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b764:	e8 b3 d9 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	83 c4 0c             	add    esp,0xc
c001b76f:	c3                   	ret    

c001b770 <int_handler>:
c001b770:	55                   	push   ebp
c001b771:	57                   	push   edi
c001b772:	56                   	push   esi
c001b773:	53                   	push   ebx
c001b774:	83 ec 0c             	sub    esp,0xc
c001b777:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b77e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b782:	74 0b                	je     c001b78f <int_handler+0x1f>
c001b784:	fa                   	cli    
c001b785:	f4                   	hlt    
c001b786:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b78d:	75 f5                	jne    c001b784 <int_handler+0x14>
c001b78f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b792:	8d 46 e0             	lea    eax,[esi-0x20]
c001b795:	83 f8 17             	cmp    eax,0x17
c001b798:	76 40                	jbe    c001b7da <int_handler+0x6a>
c001b79a:	c1 e6 04             	shl    esi,0x4
c001b79d:	31 db                	xor    ebx,ebx
c001b79f:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b7a5:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b7ab:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b7af:	85 c0                	test   eax,eax
c001b7b1:	74 13                	je     c001b7c6 <int_handler+0x56>
c001b7b3:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b7b7:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b7ba:	74 2c                	je     c001b7e8 <int_handler+0x78>
c001b7bc:	83 ec 08             	sub    esp,0x8
c001b7bf:	52                   	push   edx
c001b7c0:	57                   	push   edi
c001b7c1:	ff d0                	call   eax
c001b7c3:	83 c4 10             	add    esp,0x10
c001b7c6:	83 c3 01             	add    ebx,0x1
c001b7c9:	83 fb 04             	cmp    ebx,0x4
c001b7cc:	75 dd                	jne    c001b7ab <int_handler+0x3b>
c001b7ce:	83 c4 0c             	add    esp,0xc
c001b7d1:	31 c0                	xor    eax,eax
c001b7d3:	5b                   	pop    ebx
c001b7d4:	31 d2                	xor    edx,edx
c001b7d6:	5e                   	pop    esi
c001b7d7:	5f                   	pop    edi
c001b7d8:	5d                   	pop    ebp
c001b7d9:	c3                   	ret    
c001b7da:	83 ec 0c             	sub    esp,0xc
c001b7dd:	50                   	push   eax
c001b7de:	e8 d3 b9 00 00       	call   c00271b6 <HalEndOfInterrupt(int)>
c001b7e3:	83 c4 10             	add    esp,0x10
c001b7e6:	eb b2                	jmp    c001b79a <int_handler+0x2a>
c001b7e8:	83 ec 08             	sub    esp,0x8
c001b7eb:	52                   	push   edx
c001b7ec:	57                   	push   edi
c001b7ed:	ff d0                	call   eax
c001b7ef:	83 c4 10             	add    esp,0x10
c001b7f2:	83 c4 0c             	add    esp,0xc
c001b7f5:	5b                   	pop    ebx
c001b7f6:	5e                   	pop    esi
c001b7f7:	5f                   	pop    edi
c001b7f8:	5d                   	pop    ebp
c001b7f9:	c3                   	ret    

c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b7fa:	56                   	push   esi
c001b7fb:	31 c0                	xor    eax,eax
c001b7fd:	53                   	push   ebx
c001b7fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b802:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b806:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b80a:	89 ca                	mov    edx,ecx
c001b80c:	c1 e2 04             	shl    edx,0x4
c001b80f:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b817:	74 17                	je     c001b830 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b819:	83 c0 01             	add    eax,0x1
c001b81c:	83 f8 04             	cmp    eax,0x4
c001b81f:	75 ee                	jne    c001b80f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b821:	c7 44 24 0c 30 1f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031f30
c001b829:	5b                   	pop    ebx
c001b82a:	5e                   	pop    esi
c001b82b:	e9 72 49 00 00       	jmp    c00201a2 <KePanic(char const*)>
c001b830:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b833:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b83a:	5b                   	pop    ebx
c001b83b:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b842:	5e                   	pop    esi
c001b843:	c3                   	ret    

c001b844 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b844:	55                   	push   ebp
c001b845:	57                   	push   edi
c001b846:	56                   	push   esi
c001b847:	53                   	push   ebx
c001b848:	83 ec 0c             	sub    esp,0xc
c001b84b:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b851:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b855:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b859:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b860:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b863:	74 57                	je     c001b8bc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b865:	84 c0                	test   al,al
c001b867:	89 c7                	mov    edi,eax
c001b869:	74 1d                	je     c001b888 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b86b:	83 fe 0f             	cmp    esi,0xf
c001b86e:	0f 8f d9 00 00 00    	jg     c001b94d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c001b874:	0f b6 b6 68 3b 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc498]
c001b87b:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b883:	d1 ef                	shr    edi,1
c001b885:	83 e7 01             	and    edi,0x1
c001b888:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b88d:	83 ec 08             	sub    esp,0x8
c001b890:	31 db                	xor    ebx,ebx
c001b892:	50                   	push   eax
c001b893:	68 3d 1f 03 c0       	push   0xc0031f3d
c001b898:	e8 7d d9 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001b89d:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b8a2:	83 c4 10             	add    esp,0x10
c001b8a5:	85 c0                	test   eax,eax
c001b8a7:	7f 59                	jg     c001b902 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbe>
c001b8a9:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b8ac:	83 ec 0c             	sub    esp,0xc
c001b8af:	68 54 1f 03 c0       	push   0xc0031f54
c001b8b4:	e8 e9 48 00 00       	call   c00201a2 <KePanic(char const*)>
c001b8b9:	83 c4 10             	add    esp,0x10
c001b8bc:	89 e8                	mov    eax,ebp
c001b8be:	31 d2                	xor    edx,edx
c001b8c0:	c1 e0 04             	shl    eax,0x4
c001b8c3:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b8ca:	85 c9                	test   ecx,ecx
c001b8cc:	0f 84 92 00 00 00    	je     c001b964 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x120>
c001b8d2:	83 c2 01             	add    edx,0x1
c001b8d5:	83 fa 04             	cmp    edx,0x4
c001b8d8:	75 e9                	jne    c001b8c3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c001b8da:	83 ec 0c             	sub    esp,0xc
c001b8dd:	68 a8 1f 03 c0       	push   0xc0031fa8
c001b8e2:	e8 bb 48 00 00       	call   c00201a2 <KePanic(char const*)>
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8ef:	83 c4 0c             	add    esp,0xc
c001b8f2:	5b                   	pop    ebx
c001b8f3:	5e                   	pop    esi
c001b8f4:	5f                   	pop    edi
c001b8f5:	5d                   	pop    ebp
c001b8f6:	c3                   	ret    
c001b8f7:	83 c3 01             	add    ebx,0x1
c001b8fa:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b900:	7e a7                	jle    c001b8a9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c001b902:	8b 2c 9d e0 0b 04 c0 	mov    ebp,DWORD PTR [ebx*4-0x3ffbf420]
c001b909:	83 ec 08             	sub    esp,0x8
c001b90c:	56                   	push   esi
c001b90d:	55                   	push   ebp
c001b90e:	e8 e3 20 01 00       	call   c002d9f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	84 c0                	test   al,al
c001b918:	74 dd                	je     c001b8f7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b91a:	89 f8                	mov    eax,edi
c001b91c:	83 ec 04             	sub    esp,0x4
c001b91f:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b926:	8d 6e 20             	lea    ebp,[esi+0x20]
c001b929:	0f b6 f8             	movzx  edi,al
c001b92c:	57                   	push   edi
c001b92d:	89 e8                	mov    eax,ebp
c001b92f:	6a 00                	push   0x0
c001b931:	0f b6 c0             	movzx  eax,al
c001b934:	50                   	push   eax
c001b935:	89 f0                	mov    eax,esi
c001b937:	6a 00                	push   0x0
c001b939:	0f b6 c0             	movzx  eax,al
c001b93c:	6a 00                	push   0x0
c001b93e:	50                   	push   eax
c001b93f:	53                   	push   ebx
c001b940:	e8 1d 22 01 00       	call   c002db62 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b945:	83 c4 20             	add    esp,0x20
c001b948:	e9 6f ff ff ff       	jmp    c001b8bc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b94d:	83 ec 0c             	sub    esp,0xc
c001b950:	31 ff                	xor    edi,edi
c001b952:	68 70 1f 03 c0       	push   0xc0031f70
c001b957:	e8 46 48 00 00       	call   c00201a2 <KePanic(char const*)>
c001b95c:	83 c4 10             	add    esp,0x10
c001b95f:	e9 24 ff ff ff       	jmp    c001b888 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c001b964:	8d 04 aa             	lea    eax,[edx+ebp*4]
c001b967:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b96b:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b972:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b976:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b97d:	83 c4 0c             	add    esp,0xc
c001b980:	89 f0                	mov    eax,esi
c001b982:	5b                   	pop    ebx
c001b983:	5e                   	pop    esi
c001b984:	5f                   	pop    edi
c001b985:	5d                   	pop    ebp
c001b986:	c3                   	ret    

c001b987 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b98b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b98f:	c1 e0 04             	shl    eax,0x4
c001b992:	8d 50 10             	lea    edx,[eax+0x10]
c001b995:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b99b:	74 08                	je     c001b9a5 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b99d:	83 c0 04             	add    eax,0x4
c001b9a0:	39 d0                	cmp    eax,edx
c001b9a2:	75 f1                	jne    c001b995 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b9a4:	c3                   	ret    
c001b9a5:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b9af:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9b9:	eb e2                	jmp    c001b99d <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b9bb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b9bb:	56                   	push   esi
c001b9bc:	53                   	push   ebx
c001b9bd:	83 ec 04             	sub    esp,0x4
c001b9c0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b9c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b9cd:	74 0e                	je     c001b9dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001b9cf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b9d4:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b9db:	75 34                	jne    c001ba11 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x56>
c001b9dd:	8d 43 20             	lea    eax,[ebx+0x20]
c001b9e0:	c1 e0 04             	shl    eax,0x4
c001b9e3:	8d 50 10             	lea    edx,[eax+0x10]
c001b9e6:	39 b0 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],esi
c001b9ec:	74 0d                	je     c001b9fb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x40>
c001b9ee:	83 c0 04             	add    eax,0x4
c001b9f1:	39 d0                	cmp    eax,edx
c001b9f3:	75 f1                	jne    c001b9e6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001b9f5:	83 c4 04             	add    esp,0x4
c001b9f8:	5b                   	pop    ebx
c001b9f9:	5e                   	pop    esi
c001b9fa:	c3                   	ret    
c001b9fb:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba05:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001ba0f:	eb dd                	jmp    c001b9ee <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x33>
c001ba11:	83 fb 0f             	cmp    ebx,0xf
c001ba14:	7f 09                	jg     c001ba1f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x64>
c001ba16:	0f b6 9b 68 3b 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffcc498]
c001ba1d:	eb be                	jmp    c001b9dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>
c001ba1f:	83 ec 0c             	sub    esp,0xc
c001ba22:	68 61 1f 03 c0       	push   0xc0031f61
c001ba27:	e8 76 47 00 00       	call   c00201a2 <KePanic(char const*)>
c001ba2c:	83 c4 10             	add    esp,0x10
c001ba2f:	eb ac                	jmp    c001b9dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x22>

c001ba31 <setupINTS()>:
c001ba31:	31 c0                	xor    eax,eax
c001ba33:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001ba3d:	83 c0 10             	add    eax,0x10
c001ba40:	c7 80 10 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30f0],0x0
c001ba4a:	c7 80 14 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20ec],0x0
c001ba54:	c7 80 14 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30ec],0x0
c001ba5e:	c7 80 18 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e8],0x0
c001ba68:	c7 80 18 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e8],0x0
c001ba72:	c7 80 1c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e4],0x0
c001ba7c:	c7 80 1c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e4],0x0
c001ba86:	3d 00 10 00 00       	cmp    eax,0x1000
c001ba8b:	75 a6                	jne    c001ba33 <setupINTS()+0x2>
c001ba8d:	c3                   	ret    

c001ba8e <convertLegacyIRQNumber(int)>:
c001ba8e:	83 ec 0c             	sub    esp,0xc
c001ba91:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001ba97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001baa2:	74 0c                	je     c001bab0 <convertLegacyIRQNumber(int)+0x22>
c001baa4:	83 f8 0f             	cmp    eax,0xf
c001baa7:	7f 0b                	jg     c001bab4 <convertLegacyIRQNumber(int)+0x26>
c001baa9:	0f b6 80 68 3b 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc498]
c001bab0:	83 c4 0c             	add    esp,0xc
c001bab3:	c3                   	ret    
c001bab4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bab8:	83 ec 0c             	sub    esp,0xc
c001babb:	68 70 1f 03 c0       	push   0xc0031f70
c001bac0:	e8 dd 46 00 00       	call   c00201a2 <KePanic(char const*)>
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bacc:	83 c4 0c             	add    esp,0xc
c001bacf:	c3                   	ret    

c001bad0 <startGUI(void*)>:
c001bad0:	55                   	push   ebp
c001bad1:	89 e5                	mov    ebp,esp
c001bad3:	53                   	push   ebx
c001bad4:	83 ec 04             	sub    esp,0x4
c001bad7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001badc:	83 e8 01             	sub    eax,0x1
c001badf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bae4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bae9:	85 c0                	test   eax,eax
c001baeb:	75 01                	jne    c001baee <startGUI(void*)+0x1e>
c001baed:	fb                   	sti    
c001baee:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001baf4:	83 ec 08             	sub    esp,0x8
c001baf7:	6a 01                	push   0x1
c001baf9:	68 cd 1f 03 c0       	push   0xc0031fcd
c001bafe:	e8 08 8c 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001bb03:	83 c4 10             	add    esp,0x10
c001bb06:	83 ec 08             	sub    esp,0x8
c001bb09:	53                   	push   ebx
c001bb0a:	50                   	push   eax
c001bb0b:	e8 5c 8e 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb19:	83 ec 08             	sub    esp,0x8
c001bb1c:	6a 01                	push   0x1
c001bb1e:	68 e7 1f 03 c0       	push   0xc0031fe7
c001bb23:	e8 e3 8b 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001bb28:	83 c4 10             	add    esp,0x10
c001bb2b:	83 ec 08             	sub    esp,0x8
c001bb2e:	53                   	push   ebx
c001bb2f:	50                   	push   eax
c001bb30:	e8 37 8e 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001bb35:	83 c4 10             	add    esp,0x10
c001bb38:	eb fe                	jmp    c001bb38 <startGUI(void*)+0x68>

c001bb3a <startGUIVESA(void*)>:
c001bb3a:	55                   	push   ebp
c001bb3b:	89 e5                	mov    ebp,esp
c001bb3d:	53                   	push   ebx
c001bb3e:	83 ec 04             	sub    esp,0x4
c001bb41:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb46:	83 e8 01             	sub    eax,0x1
c001bb49:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb4e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb53:	85 c0                	test   eax,eax
c001bb55:	75 01                	jne    c001bb58 <startGUIVESA(void*)+0x1e>
c001bb57:	fb                   	sti    
c001bb58:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb5e:	83 ec 08             	sub    esp,0x8
c001bb61:	6a 01                	push   0x1
c001bb63:	68 05 20 03 c0       	push   0xc0032005
c001bb68:	e8 9e 8b 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001bb6d:	83 c4 10             	add    esp,0x10
c001bb70:	83 ec 08             	sub    esp,0x8
c001bb73:	53                   	push   ebx
c001bb74:	50                   	push   eax
c001bb75:	e8 f2 8d 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001bb7a:	83 c4 10             	add    esp,0x10
c001bb7d:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bb83:	83 ec 08             	sub    esp,0x8
c001bb86:	6a 01                	push   0x1
c001bb88:	68 e7 1f 03 c0       	push   0xc0031fe7
c001bb8d:	e8 79 8b 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001bb92:	83 c4 10             	add    esp,0x10
c001bb95:	83 ec 08             	sub    esp,0x8
c001bb98:	53                   	push   ebx
c001bb99:	50                   	push   eax
c001bb9a:	e8 cd 8d 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	eb fe                	jmp    c001bba2 <startGUIVESA(void*)+0x68>

c001bba4 <sendKeyToTerminal(unsigned char)>:
c001bba4:	55                   	push   ebp
c001bba5:	89 e5                	mov    ebp,esp
c001bba7:	83 ec 28             	sub    esp,0x28
c001bbaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bbb0:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bbb5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bbb9:	83 ec 08             	sub    esp,0x8
c001bbbc:	52                   	push   edx
c001bbbd:	50                   	push   eax
c001bbbe:	e8 09 bb ff ff       	call   c00176cc <VgaText::receiveKey(unsigned char)>
c001bbc3:	83 c4 10             	add    esp,0x10
c001bbc6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbca:	83 f8 0a             	cmp    eax,0xa
c001bbcd:	74 16                	je     c001bbe5 <sendKeyToTerminal(unsigned char)+0x41>
c001bbcf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbd3:	83 f8 03             	cmp    eax,0x3
c001bbd6:	74 0d                	je     c001bbe5 <sendKeyToTerminal(unsigned char)+0x41>
c001bbd8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bbdc:	83 f8 1c             	cmp    eax,0x1c
c001bbdf:	0f 85 97 00 00 00    	jne    c001bc7c <sendKeyToTerminal(unsigned char)+0xd8>
c001bbe5:	fa                   	cli    
c001bbe6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbeb:	83 c0 01             	add    eax,0x1
c001bbee:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bbf3:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bbf8:	83 c0 01             	add    eax,0x1
c001bbfb:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc00:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bc05:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc08:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bc12:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bc16:	74 1f                	je     c001bc37 <sendKeyToTerminal(unsigned char)+0x93>
c001bc18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bc1b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bc1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bc21:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc24:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bc27:	83 ec 0c             	sub    esp,0xc
c001bc2a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bc2d:	e8 56 98 00 00       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c001bc32:	83 c4 10             	add    esp,0x10
c001bc35:	eb db                	jmp    c001bc12 <sendKeyToTerminal(unsigned char)+0x6e>
c001bc37:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc3c:	83 e8 01             	sub    eax,0x1
c001bc3f:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bc44:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bc49:	85 c0                	test   eax,eax
c001bc4b:	75 18                	jne    c001bc65 <sendKeyToTerminal(unsigned char)+0xc1>
c001bc4d:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bc52:	85 c0                	test   eax,eax
c001bc54:	74 0f                	je     c001bc65 <sendKeyToTerminal(unsigned char)+0xc1>
c001bc56:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bc60:	e8 37 95 00 00       	call   c002519c <schedule()>
c001bc65:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc6a:	83 e8 01             	sub    eax,0x1
c001bc6d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bc72:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bc77:	85 c0                	test   eax,eax
c001bc79:	75 01                	jne    c001bc7c <sendKeyToTerminal(unsigned char)+0xd8>
c001bc7b:	fb                   	sti    
c001bc7c:	90                   	nop
c001bc7d:	c9                   	leave  
c001bc7e:	c3                   	ret    

c001bc7f <sendKeyboardToken(KeyboardToken)>:
c001bc7f:	55                   	push   ebp
c001bc80:	89 e5                	mov    ebp,esp
c001bc82:	83 ec 18             	sub    esp,0x18
c001bc85:	e8 68 45 00 00       	call   c00201f2 <KeUserIOReceived()>
c001bc8a:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bc8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc90:	0f b7 c0             	movzx  eax,ax
c001bc93:	83 f2 01             	xor    edx,0x1
c001bc96:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bc9c:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bca1:	85 c0                	test   eax,eax
c001bca3:	74 24                	je     c001bcc9 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bca5:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001bcab:	83 ec 04             	sub    esp,0x4
c001bcae:	68 40 ef 03 c0       	push   0xc003ef40
c001bcb3:	83 ec 08             	sub    esp,0x8
c001bcb6:	89 e0                	mov    eax,esp
c001bcb8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001bcbb:	89 08                	mov    DWORD PTR [eax],ecx
c001bcbd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bcc0:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001bcc4:	ff d2                	call   edx
c001bcc6:	83 c4 10             	add    esp,0x10
c001bcc9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bccd:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bcd0:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bcd5:	0f b6 d2             	movzx  edx,dl
c001bcd8:	0f b6 c0             	movzx  eax,al
c001bcdb:	39 c2                	cmp    edx,eax
c001bcdd:	74 1c                	je     c001bcfb <sendKeyboardToken(KeyboardToken)+0x7c>
c001bcdf:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bce2:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bce7:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bcec:	0f b6 c0             	movzx  eax,al
c001bcef:	83 ec 0c             	sub    esp,0xc
c001bcf2:	50                   	push   eax
c001bcf3:	e8 30 b1 ff ff       	call   c0016e28 <setTerminalScrollLock(bool)>
c001bcf8:	83 c4 10             	add    esp,0x10
c001bcfb:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bcfe:	0f b6 c0             	movzx  eax,al
c001bd01:	85 c0                	test   eax,eax
c001bd03:	0f 84 da 00 00 00    	je     c001bde3 <sendKeyboardToken(KeyboardToken)+0x164>
c001bd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd0c:	0f b7 c0             	movzx  eax,ax
c001bd0f:	3d 18 03 00 00       	cmp    eax,0x318
c001bd14:	75 06                	jne    c001bd1c <sendKeyboardToken(KeyboardToken)+0x9d>
c001bd16:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bd1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd1f:	0f b7 c0             	movzx  eax,ax
c001bd22:	3d 19 03 00 00       	cmp    eax,0x319
c001bd27:	75 06                	jne    c001bd2f <sendKeyboardToken(KeyboardToken)+0xb0>
c001bd29:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bd2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd32:	0f b7 c0             	movzx  eax,ax
c001bd35:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd3a:	75 06                	jne    c001bd42 <sendKeyboardToken(KeyboardToken)+0xc3>
c001bd3c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bd42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd45:	0f b7 c0             	movzx  eax,ax
c001bd48:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd4d:	75 06                	jne    c001bd55 <sendKeyboardToken(KeyboardToken)+0xd6>
c001bd4f:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bd55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd58:	0f b7 c0             	movzx  eax,ax
c001bd5b:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bd60:	75 06                	jne    c001bd68 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bd62:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bd68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd6b:	0f b7 c0             	movzx  eax,ax
c001bd6e:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bd73:	75 06                	jne    c001bd7b <sendKeyboardToken(KeyboardToken)+0xfc>
c001bd75:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bd7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd7e:	0f b7 c0             	movzx  eax,ax
c001bd81:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bd86:	75 06                	jne    c001bd8e <sendKeyboardToken(KeyboardToken)+0x10f>
c001bd88:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bd8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd91:	0f b7 c0             	movzx  eax,ax
c001bd94:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bd99:	75 06                	jne    c001bda1 <sendKeyboardToken(KeyboardToken)+0x122>
c001bd9b:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bda1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bda4:	0f b7 c0             	movzx  eax,ax
c001bda7:	3d 20 03 00 00       	cmp    eax,0x320
c001bdac:	75 06                	jne    c001bdb4 <sendKeyboardToken(KeyboardToken)+0x135>
c001bdae:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bdb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdb7:	0f b7 c0             	movzx  eax,ax
c001bdba:	3d 21 03 00 00       	cmp    eax,0x321
c001bdbf:	75 06                	jne    c001bdc7 <sendKeyboardToken(KeyboardToken)+0x148>
c001bdc1:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bdc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdca:	0f b7 c0             	movzx  eax,ax
c001bdcd:	3d 22 03 00 00       	cmp    eax,0x322
c001bdd2:	0f 85 f1 00 00 00    	jne    c001bec9 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bdd8:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bdde:	e9 e6 00 00 00       	jmp    c001bec9 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bde3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde6:	0f b7 c0             	movzx  eax,ax
c001bde9:	3d 18 03 00 00       	cmp    eax,0x318
c001bdee:	75 0a                	jne    c001bdfa <sendKeyboardToken(KeyboardToken)+0x17b>
c001bdf0:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bdf6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdfd:	0f b7 c0             	movzx  eax,ax
c001be00:	3d 19 03 00 00       	cmp    eax,0x319
c001be05:	75 0a                	jne    c001be11 <sendKeyboardToken(KeyboardToken)+0x192>
c001be07:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001be0d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be14:	0f b7 c0             	movzx  eax,ax
c001be17:	3d 1a 03 00 00       	cmp    eax,0x31a
c001be1c:	75 0a                	jne    c001be28 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001be1e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001be24:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be2b:	0f b7 c0             	movzx  eax,ax
c001be2e:	3d 1b 03 00 00       	cmp    eax,0x31b
c001be33:	75 0a                	jne    c001be3f <sendKeyboardToken(KeyboardToken)+0x1c0>
c001be35:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001be3b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be42:	0f b7 c0             	movzx  eax,ax
c001be45:	3d 1c 03 00 00       	cmp    eax,0x31c
c001be4a:	75 0a                	jne    c001be56 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001be4c:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001be52:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be59:	0f b7 c0             	movzx  eax,ax
c001be5c:	3d 1d 03 00 00       	cmp    eax,0x31d
c001be61:	75 0a                	jne    c001be6d <sendKeyboardToken(KeyboardToken)+0x1ee>
c001be63:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001be69:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be70:	0f b7 c0             	movzx  eax,ax
c001be73:	3d 1e 03 00 00       	cmp    eax,0x31e
c001be78:	75 0a                	jne    c001be84 <sendKeyboardToken(KeyboardToken)+0x205>
c001be7a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001be80:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be87:	0f b7 c0             	movzx  eax,ax
c001be8a:	3d 1f 03 00 00       	cmp    eax,0x31f
c001be8f:	75 0a                	jne    c001be9b <sendKeyboardToken(KeyboardToken)+0x21c>
c001be91:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001be97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9e:	0f b7 c0             	movzx  eax,ax
c001bea1:	3d 20 03 00 00       	cmp    eax,0x320
c001bea6:	75 0a                	jne    c001beb2 <sendKeyboardToken(KeyboardToken)+0x233>
c001bea8:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001beae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001beb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beb5:	0f b7 c0             	movzx  eax,ax
c001beb8:	3d 21 03 00 00       	cmp    eax,0x321
c001bebd:	75 0a                	jne    c001bec9 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bebf:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001bec5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001becc:	0f b7 c0             	movzx  eax,ax
c001becf:	3d 00 02 00 00       	cmp    eax,0x200
c001bed4:	75 2f                	jne    c001bf05 <sendKeyboardToken(KeyboardToken)+0x286>
c001bed6:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bedb:	83 f0 01             	xor    eax,0x1
c001bede:	0f b6 c0             	movzx  eax,al
c001bee1:	85 c0                	test   eax,eax
c001bee3:	74 20                	je     c001bf05 <sendKeyboardToken(KeyboardToken)+0x286>
c001bee5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001beea:	6a 01                	push   0x1
c001beec:	6a 00                	push   0x0
c001beee:	68 d0 ba 01 c0       	push   0xc001bad0
c001bef3:	50                   	push   eax
c001bef4:	e8 57 90 00 00       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c001bef9:	83 c4 10             	add    esp,0x10
c001befc:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf03:	eb 3a                	jmp    c001bf3f <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf08:	0f b7 c0             	movzx  eax,ax
c001bf0b:	3d 01 02 00 00       	cmp    eax,0x201
c001bf10:	75 2d                	jne    c001bf3f <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf12:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001bf17:	83 f0 01             	xor    eax,0x1
c001bf1a:	0f b6 c0             	movzx  eax,al
c001bf1d:	85 c0                	test   eax,eax
c001bf1f:	74 1e                	je     c001bf3f <sendKeyboardToken(KeyboardToken)+0x2c0>
c001bf21:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001bf26:	6a 01                	push   0x1
c001bf28:	6a 00                	push   0x0
c001bf2a:	68 3a bb 01 c0       	push   0xc001bb3a
c001bf2f:	50                   	push   eax
c001bf30:	e8 1b 90 00 00       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001bf3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf42:	0f b7 c0             	movzx  eax,ax
c001bf45:	3d 25 03 00 00       	cmp    eax,0x325
c001bf4a:	75 06                	jne    c001bf52 <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bf4c:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001bf52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf55:	0f b7 c0             	movzx  eax,ax
c001bf58:	3d 24 03 00 00       	cmp    eax,0x324
c001bf5d:	75 06                	jne    c001bf65 <sendKeyboardToken(KeyboardToken)+0x2e6>
c001bf5f:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bf65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf68:	0f b7 c0             	movzx  eax,ax
c001bf6b:	3d 23 03 00 00       	cmp    eax,0x323
c001bf70:	75 06                	jne    c001bf78 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001bf72:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bf78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf7b:	0f b7 c0             	movzx  eax,ax
c001bf7e:	3d 26 03 00 00       	cmp    eax,0x326
c001bf83:	75 06                	jne    c001bf8b <sendKeyboardToken(KeyboardToken)+0x30c>
c001bf85:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bf8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf8e:	0f b7 c0             	movzx  eax,ax
c001bf91:	3d 27 03 00 00       	cmp    eax,0x327
c001bf96:	75 06                	jne    c001bf9e <sendKeyboardToken(KeyboardToken)+0x31f>
c001bf98:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bf9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bfa1:	0f b7 c0             	movzx  eax,ax
c001bfa4:	3d 22 03 00 00       	cmp    eax,0x322
c001bfa9:	75 06                	jne    c001bfb1 <sendKeyboardToken(KeyboardToken)+0x332>
c001bfab:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bfb1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bfb5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfb8:	83 f0 01             	xor    eax,0x1
c001bfbb:	0f b6 c0             	movzx  eax,al
c001bfbe:	85 c0                	test   eax,eax
c001bfc0:	74 7c                	je     c001c03e <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bfc2:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bfc7:	0f b6 c0             	movzx  eax,al
c001bfca:	85 c0                	test   eax,eax
c001bfcc:	74 43                	je     c001c011 <sendKeyboardToken(KeyboardToken)+0x392>
c001bfce:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfd2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bfd6:	85 c0                	test   eax,eax
c001bfd8:	74 2b                	je     c001c005 <sendKeyboardToken(KeyboardToken)+0x386>
c001bfda:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bfe0:	89 d0                	mov    eax,edx
c001bfe2:	c1 e0 02             	shl    eax,0x2
c001bfe5:	01 d0                	add    eax,edx
c001bfe7:	d1 e0                	shl    eax,1
c001bfe9:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bfee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bff1:	0f b7 c0             	movzx  eax,ax
c001bff4:	8d 50 d0             	lea    edx,[eax-0x30]
c001bff7:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bffc:	01 d0                	add    eax,edx
c001bffe:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001c003:	eb 71                	jmp    c001c076 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c005:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c00f:	eb 65                	jmp    c001c076 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c011:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c016:	85 c0                	test   eax,eax
c001c018:	74 18                	je     c001c032 <sendKeyboardToken(KeyboardToken)+0x3b3>
c001c01a:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c01f:	0f b6 c0             	movzx  eax,al
c001c022:	83 ec 0c             	sub    esp,0xc
c001c025:	50                   	push   eax
c001c026:	e8 79 fb ff ff       	call   c001bba4 <sendKeyToTerminal(unsigned char)>
c001c02b:	83 c4 10             	add    esp,0x10
c001c02e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c032:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c03c:	eb 38                	jmp    c001c076 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c03e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c041:	0f b7 c0             	movzx  eax,ax
c001c044:	3d 01 01 00 00       	cmp    eax,0x101
c001c049:	75 2b                	jne    c001c076 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001c04b:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c050:	85 c0                	test   eax,eax
c001c052:	74 18                	je     c001c06c <sendKeyboardToken(KeyboardToken)+0x3ed>
c001c054:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001c059:	0f b6 c0             	movzx  eax,al
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	50                   	push   eax
c001c060:	e8 3f fb ff ff       	call   c001bba4 <sendKeyToTerminal(unsigned char)>
c001c065:	83 c4 10             	add    esp,0x10
c001c068:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001c06c:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001c076:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c079:	83 f0 01             	xor    eax,0x1
c001c07c:	0f b6 c0             	movzx  eax,al
c001c07f:	85 c0                	test   eax,eax
c001c081:	74 5a                	je     c001c0dd <sendKeyboardToken(KeyboardToken)+0x45e>
c001c083:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c086:	83 f0 01             	xor    eax,0x1
c001c089:	0f b6 c0             	movzx  eax,al
c001c08c:	85 c0                	test   eax,eax
c001c08e:	74 4d                	je     c001c0dd <sendKeyboardToken(KeyboardToken)+0x45e>
c001c090:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c095:	83 f0 01             	xor    eax,0x1
c001c098:	0f b6 c0             	movzx  eax,al
c001c09b:	85 c0                	test   eax,eax
c001c09d:	74 3e                	je     c001c0dd <sendKeyboardToken(KeyboardToken)+0x45e>
c001c09f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a2:	0f b7 c0             	movzx  eax,ax
c001c0a5:	83 f8 1f             	cmp    eax,0x1f
c001c0a8:	76 0b                	jbe    c001c0b5 <sendKeyboardToken(KeyboardToken)+0x436>
c001c0aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ad:	0f b7 c0             	movzx  eax,ax
c001c0b0:	83 f8 7e             	cmp    eax,0x7e
c001c0b3:	76 16                	jbe    c001c0cb <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0b8:	0f b7 c0             	movzx  eax,ax
c001c0bb:	83 f8 0a             	cmp    eax,0xa
c001c0be:	74 0b                	je     c001c0cb <sendKeyboardToken(KeyboardToken)+0x44c>
c001c0c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0c3:	0f b7 c0             	movzx  eax,ax
c001c0c6:	83 f8 08             	cmp    eax,0x8
c001c0c9:	75 12                	jne    c001c0dd <sendKeyboardToken(KeyboardToken)+0x45e>
c001c0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0ce:	0f b6 c0             	movzx  eax,al
c001c0d1:	83 ec 0c             	sub    esp,0xc
c001c0d4:	50                   	push   eax
c001c0d5:	e8 ca fa ff ff       	call   c001bba4 <sendKeyToTerminal(unsigned char)>
c001c0da:	83 c4 10             	add    esp,0x10
c001c0dd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c0e0:	83 f0 01             	xor    eax,0x1
c001c0e3:	0f b6 c0             	movzx  eax,al
c001c0e6:	85 c0                	test   eax,eax
c001c0e8:	74 5d                	je     c001c147 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0ea:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c0ed:	83 f0 01             	xor    eax,0x1
c001c0f0:	0f b6 c0             	movzx  eax,al
c001c0f3:	85 c0                	test   eax,eax
c001c0f5:	74 50                	je     c001c147 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c0f7:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c0fc:	0f b6 c0             	movzx  eax,al
c001c0ff:	85 c0                	test   eax,eax
c001c101:	74 44                	je     c001c147 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c106:	0f b7 c0             	movzx  eax,ax
c001c109:	83 f8 3f             	cmp    eax,0x3f
c001c10c:	76 39                	jbe    c001c147 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c111:	0f b7 c0             	movzx  eax,ax
c001c114:	83 f8 7f             	cmp    eax,0x7f
c001c117:	77 2e                	ja     c001c147 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c11c:	88 c2                	mov    dl,al
c001c11e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c121:	0f b7 c0             	movzx  eax,ax
c001c124:	83 f8 5f             	cmp    eax,0x5f
c001c127:	76 04                	jbe    c001c12d <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c129:	b0 20                	mov    al,0x20
c001c12b:	eb 02                	jmp    c001c12f <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c12d:	b0 00                	mov    al,0x0
c001c12f:	89 d1                	mov    ecx,edx
c001c131:	29 c1                	sub    ecx,eax
c001c133:	89 c8                	mov    eax,ecx
c001c135:	83 e8 40             	sub    eax,0x40
c001c138:	0f b6 c0             	movzx  eax,al
c001c13b:	83 ec 0c             	sub    esp,0xc
c001c13e:	50                   	push   eax
c001c13f:	e8 60 fa ff ff       	call   c001bba4 <sendKeyToTerminal(unsigned char)>
c001c144:	83 c4 10             	add    esp,0x10
c001c147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c14a:	0f b7 c0             	movzx  eax,ax
c001c14d:	3d 00 03 00 00       	cmp    eax,0x300
c001c152:	75 12                	jne    c001c166 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c154:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c157:	83 f0 01             	xor    eax,0x1
c001c15a:	0f b6 c0             	movzx  eax,al
c001c15d:	85 c0                	test   eax,eax
c001c15f:	74 05                	je     c001c166 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c161:	e8 c3 ac ff ff       	call   c0016e29 <doTerminalCycle()>
c001c166:	90                   	nop
c001c167:	c9                   	leave  
c001c168:	c3                   	ret    

c001c169 <clearInternalKeybuffer(VgaText*)>:
c001c169:	55                   	push   ebp
c001c16a:	89 e5                	mov    ebp,esp
c001c16c:	83 ec 08             	sub    esp,0x8
c001c16f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c172:	05 02 01 00 00       	add    eax,0x102
c001c177:	83 ec 0c             	sub    esp,0xc
c001c17a:	50                   	push   eax
c001c17b:	e8 00 44 fe ff       	call   c0000580 <strlen>
c001c180:	83 c4 10             	add    esp,0x10
c001c183:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c186:	81 c2 02 01 00 00    	add    edx,0x102
c001c18c:	83 ec 04             	sub    esp,0x4
c001c18f:	50                   	push   eax
c001c190:	6a 00                	push   0x0
c001c192:	52                   	push   edx
c001c193:	e8 58 43 fe ff       	call   c00004f0 <memset>
c001c198:	83 c4 10             	add    esp,0x10
c001c19b:	90                   	nop
c001c19c:	c9                   	leave  
c001c19d:	c3                   	ret    

c001c19e <readKeyboard(VgaText*, char*, unsigned long)>:
c001c19e:	55                   	push   ebp
c001c19f:	89 e5                	mov    ebp,esp
c001c1a1:	83 ec 18             	sub    esp,0x18
c001c1a4:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c1a9:	85 c0                	test   eax,eax
c001c1ab:	74 2a                	je     c001c1d7 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c1ad:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c1b3:	8b 15 28 ef 03 c0    	mov    edx,DWORD PTR ds:0xc003ef28
c001c1b9:	83 ec 04             	sub    esp,0x4
c001c1bc:	68 40 ef 03 c0       	push   0xc003ef40
c001c1c1:	83 ec 08             	sub    esp,0x8
c001c1c4:	89 e0                	mov    eax,esp
c001c1c6:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c001c1c9:	89 08                	mov    DWORD PTR [eax],ecx
c001c1cb:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c001c1ce:	66 89 48 04          	mov    WORD PTR [eax+0x4],cx
c001c1d2:	ff d2                	call   edx
c001c1d4:	83 c4 10             	add    esp,0x10
c001c1d7:	fb                   	sti    
c001c1d8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c1df:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c1e3:	0f 84 0d 01 00 00    	je     c001c2f6 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c1e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1ec:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c1f2:	0f be c0             	movsx  eax,al
c001c1f5:	85 c0                	test   eax,eax
c001c1f7:	75 2c                	jne    c001c225 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c1f9:	fa                   	cli    
c001c1fa:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c1ff:	83 c0 01             	add    eax,0x1
c001c202:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c207:	e8 90 8f 00 00       	call   c002519c <schedule()>
c001c20c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c211:	83 e8 01             	sub    eax,0x1
c001c214:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c219:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c21e:	85 c0                	test   eax,eax
c001c220:	75 c7                	jne    c001c1e9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c222:	fb                   	sti    
c001c223:	eb c4                	jmp    c001c1e9 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c225:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c228:	8d 50 01             	lea    edx,[eax+0x1]
c001c22b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c22e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c231:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c237:	88 10                	mov    BYTE PTR [eax],dl
c001c239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c23c:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c242:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c245:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c249:	83 f8 03             	cmp    eax,0x3
c001c24c:	75 1e                	jne    c001c26c <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c24e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c253:	8b 00                	mov    eax,DWORD PTR [eax]
c001c255:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c258:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c25e:	83 ec 08             	sub    esp,0x8
c001c261:	6a 02                	push   0x2
c001c263:	50                   	push   eax
c001c264:	e8 eb 47 00 00       	call   c0020a54 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c269:	83 c4 10             	add    esp,0x10
c001c26c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c270:	83 f8 1c             	cmp    eax,0x1c
c001c273:	75 1e                	jne    c001c293 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c275:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c27a:	8b 00                	mov    eax,DWORD PTR [eax]
c001c27c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c27f:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c285:	83 ec 08             	sub    esp,0x8
c001c288:	6a 09                	push   0x9
c001c28a:	50                   	push   eax
c001c28b:	e8 c4 47 00 00       	call   c0020a54 <KeRaiseSignal(SigHandlerBlock*, int)>
c001c290:	83 c4 10             	add    esp,0x10
c001c293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c296:	05 02 01 00 00       	add    eax,0x102
c001c29b:	83 ec 0c             	sub    esp,0xc
c001c29e:	50                   	push   eax
c001c29f:	e8 dc 42 fe ff       	call   c0000580 <strlen>
c001c2a4:	83 c4 10             	add    esp,0x10
c001c2a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2aa:	81 c2 02 01 00 00    	add    edx,0x102
c001c2b0:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c2b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c2b6:	81 c2 02 01 00 00    	add    edx,0x102
c001c2bc:	83 ec 04             	sub    esp,0x4
c001c2bf:	50                   	push   eax
c001c2c0:	51                   	push   ecx
c001c2c1:	52                   	push   edx
c001c2c2:	e8 09 41 fe ff       	call   c00003d0 <memmove>
c001c2c7:	83 c4 10             	add    esp,0x10
c001c2ca:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c2ce:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c2d2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2d6:	83 f8 0a             	cmp    eax,0xa
c001c2d9:	74 16                	je     c001c2f1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2db:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2df:	83 f8 03             	cmp    eax,0x3
c001c2e2:	74 0d                	je     c001c2f1 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c2e4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c2e8:	83 f8 1c             	cmp    eax,0x1c
c001c2eb:	0f 85 ee fe ff ff    	jne    c001c1df <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c2f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c2f4:	eb 03                	jmp    c001c2f9 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c2f6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c2f9:	c9                   	leave  
c001c2fa:	c3                   	ret    
c001c2fb:	90                   	nop

c001c2fc <Keyboard::Keyboard(char const*)>:
c001c2fc:	83 ec 0c             	sub    esp,0xc
c001c2ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c303:	83 ec 08             	sub    esp,0x8
c001c306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c30a:	50                   	push   eax
c001c30b:	e8 02 f1 ff ff       	call   c001b412 <Device::Device(char const*)>
c001c310:	83 c4 10             	add    esp,0x10
c001c313:	ba 28 20 03 c0       	mov    edx,0xc0032028
c001c318:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31c:	89 10                	mov    DWORD PTR [eax],edx
c001c31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c322:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c32c:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c333:	90                   	nop
c001c334:	83 c4 0c             	add    esp,0xc
c001c337:	c3                   	ret    

c001c338 <Keyboard::~Keyboard()>:
c001c338:	83 ec 0c             	sub    esp,0xc
c001c33b:	ba 28 20 03 c0       	mov    edx,0xc0032028
c001c340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c344:	89 10                	mov    DWORD PTR [eax],edx
c001c346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34a:	83 ec 0c             	sub    esp,0xc
c001c34d:	50                   	push   eax
c001c34e:	e8 5f ee ff ff       	call   c001b1b2 <Device::~Device()>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	90                   	nop
c001c357:	83 c4 0c             	add    esp,0xc
c001c35a:	c3                   	ret    
c001c35b:	90                   	nop

c001c35c <Keyboard::~Keyboard()>:
c001c35c:	83 ec 0c             	sub    esp,0xc
c001c35f:	83 ec 0c             	sub    esp,0xc
c001c362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c366:	e8 cd ff ff ff       	call   c001c338 <Keyboard::~Keyboard()>
c001c36b:	83 c4 10             	add    esp,0x10
c001c36e:	83 ec 08             	sub    esp,0x8
c001c371:	68 5c 01 00 00       	push   0x15c
c001c376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c37a:	e8 9d cd ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c37f:	83 c4 10             	add    esp,0x10
c001c382:	83 c4 0c             	add    esp,0xc
c001c385:	c3                   	ret    

c001c386 <LogicalDisk::close(int, int, void*)>:
c001c386:	83 c8 ff             	or     eax,0xffffffff
c001c389:	c3                   	ret    

c001c38a <LogicalDisk::~LogicalDisk()>:
c001c38a:	83 ec 0c             	sub    esp,0xc
c001c38d:	ba a0 20 03 c0       	mov    edx,0xc00320a0
c001c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c396:	89 10                	mov    DWORD PTR [eax],edx
c001c398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39c:	83 ec 0c             	sub    esp,0xc
c001c39f:	50                   	push   eax
c001c3a0:	e8 0d ee ff ff       	call   c001b1b2 <Device::~Device()>
c001c3a5:	83 c4 10             	add    esp,0x10
c001c3a8:	90                   	nop
c001c3a9:	83 c4 0c             	add    esp,0xc
c001c3ac:	c3                   	ret    
c001c3ad:	90                   	nop

c001c3ae <LogicalDisk::~LogicalDisk()>:
c001c3ae:	83 ec 0c             	sub    esp,0xc
c001c3b1:	83 ec 0c             	sub    esp,0xc
c001c3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3b8:	e8 cd ff ff ff       	call   c001c38a <LogicalDisk::~LogicalDisk()>
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	83 ec 08             	sub    esp,0x8
c001c3c3:	68 78 01 00 00       	push   0x178
c001c3c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c3cc:	e8 4b cd ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c3d1:	83 c4 10             	add    esp,0x10
c001c3d4:	83 c4 0c             	add    esp,0xc
c001c3d7:	c3                   	ret    

c001c3d8 <LogicalDisk::open(int, int, void*)>:
c001c3d8:	83 ec 18             	sub    esp,0x18
c001c3db:	68 54 20 03 c0       	push   0xc0032054
c001c3e0:	e8 bd 3d 00 00       	call   c00201a2 <KePanic(char const*)>
c001c3e5:	83 c8 ff             	or     eax,0xffffffff
c001c3e8:	83 c4 1c             	add    esp,0x1c
c001c3eb:	c3                   	ret    

c001c3ec <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c3ec:	53                   	push   ebx
c001c3ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c3f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3f9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c3ff:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c405:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c40b:	77 10                	ja     c001c41d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c40d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c413:	89 d3                	mov    ebx,edx
c001c415:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c41b:	72 05                	jb     c001c422 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c41d:	83 c8 ff             	or     eax,0xffffffff
c001c420:	89 c2                	mov    edx,eax
c001c422:	5b                   	pop    ebx
c001c423:	c3                   	ret    

c001c424 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c424:	56                   	push   esi
c001c425:	83 c8 ff             	or     eax,0xffffffff
c001c428:	53                   	push   ebx
c001c429:	89 c2                	mov    edx,eax
c001c42b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c42f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c433:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c437:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c43d:	77 27                	ja     c001c466 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c43f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c445:	89 d8                	mov    eax,ebx
c001c447:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c44d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c452:	89 c2                	mov    edx,eax
c001c454:	73 10                	jae    c001c466 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c456:	89 c8                	mov    eax,ecx
c001c458:	89 da                	mov    edx,ebx
c001c45a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c460:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c466:	5b                   	pop    ebx
c001c467:	5e                   	pop    esi
c001c468:	c3                   	ret    
c001c469:	90                   	nop

c001c46a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c46a:	83 ec 1c             	sub    esp,0x1c
c001c46d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c471:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c475:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c479:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c47d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c481:	89 04 24             	mov    DWORD PTR [esp],eax
c001c484:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c488:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c48c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c490:	83 ec 08             	sub    esp,0x8
c001c493:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c497:	50                   	push   eax
c001c498:	e8 75 ef ff ff       	call   c001b412 <Device::Device(char const*)>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	ba a0 20 03 c0       	mov    edx,0xc00320a0
c001c4a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a9:	89 10                	mov    DWORD PTR [eax],edx
c001c4ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4af:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ba:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c4c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c4cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d0:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c4da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4e6:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c4ec:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c4f2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c4f6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c4f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c4fd:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c503:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c50d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c511:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c517:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c51b:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c525:	90                   	nop
c001c526:	83 c4 1c             	add    esp,0x1c
c001c529:	c3                   	ret    

c001c52a <LogicalDisk::assignDriveLetter()>:
c001c52a:	55                   	push   ebp
c001c52b:	57                   	push   edi
c001c52c:	56                   	push   esi
c001c52d:	53                   	push   ebx
c001c52e:	83 ec 14             	sub    esp,0x14
c001c531:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c535:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c53b:	b0 41                	mov    al,0x41
c001c53d:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c543:	84 d2                	test   dl,dl
c001c545:	75 02                	jne    c001c549 <LogicalDisk::assignDriveLetter()+0x1f>
c001c547:	b0 43                	mov    al,0x43
c001c549:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c54f:	0f b6 ca             	movzx  ecx,dl
c001c552:	0f be e8             	movsx  ebp,al
c001c555:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c559:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c55d:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c563:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c567:	3c 43                	cmp    al,0x43
c001c569:	75 10                	jne    c001c57b <LogicalDisk::assignDriveLetter()+0x51>
c001c56b:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c572:	75 5a                	jne    c001c5ce <LogicalDisk::assignDriveLetter()+0xa4>
c001c574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c579:	75 53                	jne    c001c5ce <LogicalDisk::assignDriveLetter()+0xa4>
c001c57b:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c57e:	ba 01 00 00 00       	mov    edx,0x1
c001c583:	89 34 24             	mov    DWORD PTR [esp],esi
c001c586:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c589:	d3 e2                	shl    edx,cl
c001c58b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c58f:	89 d7                	mov    edi,edx
c001c591:	89 d6                	mov    esi,edx
c001c593:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c597:	c1 ff 1f             	sar    edi,0x1f
c001c59a:	21 f9                	and    ecx,edi
c001c59c:	09 d1                	or     ecx,edx
c001c59e:	75 2e                	jne    c001c5ce <LogicalDisk::assignDriveLetter()+0xa4>
c001c5a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c5a4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c5a8:	09 f2                	or     edx,esi
c001c5aa:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c5ad:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c5b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c5b7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c5bd:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c5c4:	09 fa                	or     edx,edi
c001c5c6:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c5cc:	eb 0d                	jmp    c001c5db <LogicalDisk::assignDriveLetter()+0xb1>
c001c5ce:	8d 50 01             	lea    edx,[eax+0x1]
c001c5d1:	45                   	inc    ebp
c001c5d2:	80 fa 5b             	cmp    dl,0x5b
c001c5d5:	88 d0                	mov    al,dl
c001c5d7:	75 8e                	jne    c001c567 <LogicalDisk::assignDriveLetter()+0x3d>
c001c5d9:	31 c0                	xor    eax,eax
c001c5db:	83 c4 14             	add    esp,0x14
c001c5de:	5b                   	pop    ebx
c001c5df:	5e                   	pop    esi
c001c5e0:	5f                   	pop    edi
c001c5e1:	5d                   	pop    ebp
c001c5e2:	c3                   	ret    
c001c5e3:	90                   	nop

c001c5e4 <LogicalDisk::mount()>:
c001c5e4:	56                   	push   esi
c001c5e5:	53                   	push   ebx
c001c5e6:	53                   	push   ebx
c001c5e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c5eb:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c5f1:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c5fb:	85 db                	test   ebx,ebx
c001c5fd:	74 27                	je     c001c626 <LogicalDisk::mount()+0x42>
c001c5ff:	51                   	push   ecx
c001c600:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c607:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c609:	83 e8 41             	sub    eax,0x41
c001c60c:	50                   	push   eax
c001c60d:	56                   	push   esi
c001c60e:	53                   	push   ebx
c001c60f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c612:	83 c4 10             	add    esp,0x10
c001c615:	84 c0                	test   al,al
c001c617:	74 08                	je     c001c621 <LogicalDisk::mount()+0x3d>
c001c619:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c61f:	eb 07                	jmp    c001c628 <LogicalDisk::mount()+0x44>
c001c621:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c624:	eb d5                	jmp    c001c5fb <LogicalDisk::mount()+0x17>
c001c626:	31 c0                	xor    eax,eax
c001c628:	5a                   	pop    edx
c001c629:	5b                   	pop    ebx
c001c62a:	5e                   	pop    esi
c001c62b:	c3                   	ret    

c001c62c <LogicalDisk::unmount()>:
c001c62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c630:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c63a:	c3                   	ret    
c001c63b:	90                   	nop

c001c63c <LogicalDisk::eject()>:
c001c63c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c640:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c646:	8b 10                	mov    edx,DWORD PTR [eax]
c001c648:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c64c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c64f:	90                   	nop

c001c650 <LogicalDisk::unassignDriveLetter()>:
c001c650:	57                   	push   edi
c001c651:	56                   	push   esi
c001c652:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c656:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c65d:	85 c9                	test   ecx,ecx
c001c65f:	75 0f                	jne    c001c670 <LogicalDisk::unassignDriveLetter()+0x20>
c001c661:	c7 44 24 0c 78 20 03 c0 	mov    DWORD PTR [esp+0xc],0xc0032078
c001c669:	5e                   	pop    esi
c001c66a:	5f                   	pop    edi
c001c66b:	e9 32 3b 00 00       	jmp    c00201a2 <KePanic(char const*)>
c001c670:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c677:	83 e9 41             	sub    ecx,0x41
c001c67a:	b8 01 00 00 00       	mov    eax,0x1
c001c67f:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c68a:	d3 e0                	shl    eax,cl
c001c68c:	89 c7                	mov    edi,eax
c001c68e:	f7 d0                	not    eax
c001c690:	c1 ff 1f             	sar    edi,0x1f
c001c693:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c699:	89 fe                	mov    esi,edi
c001c69b:	f7 d6                	not    esi
c001c69d:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c6a3:	5e                   	pop    esi
c001c6a4:	5f                   	pop    edi
c001c6a5:	c3                   	ret    

c001c6a6 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c6a6:	57                   	push   edi
c001c6a7:	56                   	push   esi
c001c6a8:	53                   	push   ebx
c001c6a9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c6ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6b1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c6b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6b9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c6bf:	77 41                	ja     c001c702 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c6c1:	99                   	cdq    
c001c6c2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c6c8:	01 c8                	add    eax,ecx
c001c6ca:	11 da                	adc    edx,ebx
c001c6cc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c6d2:	19 d7                	sbb    edi,edx
c001c6d4:	72 33                	jb     c001c709 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c6d6:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6dc:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c6e6:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c6ea:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c6f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6fa:	5b                   	pop    ebx
c001c6fb:	5e                   	pop    esi
c001c6fc:	5f                   	pop    edi
c001c6fd:	e9 c6 0a 00 00       	jmp    c001d1c8 <VCache::read(unsigned long long, int, void*)>
c001c702:	b8 05 00 00 00       	mov    eax,0x5
c001c707:	eb 05                	jmp    c001c70e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c709:	b8 07 00 00 00       	mov    eax,0x7
c001c70e:	5b                   	pop    ebx
c001c70f:	5e                   	pop    esi
c001c710:	5f                   	pop    edi
c001c711:	c3                   	ret    

c001c712 <LogicalDisk::write(unsigned long long, int, void*)>:
c001c712:	57                   	push   edi
c001c713:	56                   	push   esi
c001c714:	53                   	push   ebx
c001c715:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c71d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c721:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c725:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c72b:	77 41                	ja     c001c76e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c72d:	99                   	cdq    
c001c72e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c734:	01 c8                	add    eax,ecx
c001c736:	11 da                	adc    edx,ebx
c001c738:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c73e:	19 d7                	sbb    edi,edx
c001c740:	72 33                	jb     c001c775 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c742:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c748:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c74e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c752:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c756:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c75c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c762:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c766:	5b                   	pop    ebx
c001c767:	5e                   	pop    esi
c001c768:	5f                   	pop    edi
c001c769:	e9 6a 09 00 00       	jmp    c001d0d8 <VCache::write(unsigned long long, int, void*)>
c001c76e:	b8 05 00 00 00       	mov    eax,0x5
c001c773:	eb 05                	jmp    c001c77a <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c775:	b8 07 00 00 00       	mov    eax,0x7
c001c77a:	5b                   	pop    ebx
c001c77b:	5e                   	pop    esi
c001c77c:	5f                   	pop    edi
c001c77d:	c3                   	ret    
c001c77e:	66 90                	xchg   ax,ax

c001c780 <Mouse::Mouse(char const*)>:
c001c780:	83 ec 0c             	sub    esp,0xc
c001c783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c787:	83 ec 08             	sub    esp,0x8
c001c78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c78e:	50                   	push   eax
c001c78f:	e8 7e ec ff ff       	call   c001b412 <Device::Device(char const*)>
c001c794:	83 c4 10             	add    esp,0x10
c001c797:	ba cc 20 03 c0       	mov    edx,0xc00320cc
c001c79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a0:	89 10                	mov    DWORD PTR [eax],edx
c001c7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c7b0:	90                   	nop
c001c7b1:	83 c4 0c             	add    esp,0xc
c001c7b4:	c3                   	ret    
c001c7b5:	90                   	nop
c001c7b6:	66 90                	xchg   ax,ax

c001c7b8 <Mouse::~Mouse()>:
c001c7b8:	83 ec 0c             	sub    esp,0xc
c001c7bb:	ba cc 20 03 c0       	mov    edx,0xc00320cc
c001c7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c4:	89 10                	mov    DWORD PTR [eax],edx
c001c7c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ca:	83 ec 0c             	sub    esp,0xc
c001c7cd:	50                   	push   eax
c001c7ce:	e8 df e9 ff ff       	call   c001b1b2 <Device::~Device()>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	90                   	nop
c001c7d7:	83 c4 0c             	add    esp,0xc
c001c7da:	c3                   	ret    
c001c7db:	90                   	nop

c001c7dc <Mouse::~Mouse()>:
c001c7dc:	83 ec 0c             	sub    esp,0xc
c001c7df:	83 ec 0c             	sub    esp,0xc
c001c7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e6:	e8 cd ff ff ff       	call   c001c7b8 <Mouse::~Mouse()>
c001c7eb:	83 c4 10             	add    esp,0x10
c001c7ee:	83 ec 08             	sub    esp,0x8
c001c7f1:	68 58 01 00 00       	push   0x158
c001c7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7fa:	e8 1d c9 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c7ff:	83 c4 10             	add    esp,0x10
c001c802:	83 c4 0c             	add    esp,0xc
c001c805:	c3                   	ret    

c001c806 <NIC::getMAC()>:
c001c806:	31 c0                	xor    eax,eax
c001c808:	31 d2                	xor    edx,edx
c001c80a:	c3                   	ret    
c001c80b:	90                   	nop

c001c80c <NIC::write(int, unsigned char*, int*)>:
c001c80c:	b8 01 00 00 00       	mov    eax,0x1
c001c811:	c3                   	ret    

c001c812 <NIC::NIC(char const*)>:
c001c812:	83 ec 0c             	sub    esp,0xc
c001c815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c819:	83 ec 08             	sub    esp,0x8
c001c81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c820:	50                   	push   eax
c001c821:	e8 ec eb ff ff       	call   c001b412 <Device::Device(char const*)>
c001c826:	83 c4 10             	add    esp,0x10
c001c829:	ba f8 20 03 c0       	mov    edx,0xc00320f8
c001c82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c832:	89 10                	mov    DWORD PTR [eax],edx
c001c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c838:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c842:	90                   	nop
c001c843:	83 c4 0c             	add    esp,0xc
c001c846:	c3                   	ret    
c001c847:	90                   	nop

c001c848 <NIC::~NIC()>:
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	ba f8 20 03 c0       	mov    edx,0xc00320f8
c001c850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c854:	89 10                	mov    DWORD PTR [eax],edx
c001c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85a:	83 ec 0c             	sub    esp,0xc
c001c85d:	50                   	push   eax
c001c85e:	e8 4f e9 ff ff       	call   c001b1b2 <Device::~Device()>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	90                   	nop
c001c867:	83 c4 0c             	add    esp,0xc
c001c86a:	c3                   	ret    
c001c86b:	90                   	nop

c001c86c <NIC::~NIC()>:
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c876:	e8 cd ff ff ff       	call   c001c848 <NIC::~NIC()>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	83 ec 08             	sub    esp,0x8
c001c881:	68 58 01 00 00       	push   0x158
c001c886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c88a:	e8 8d c8 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	83 c4 0c             	add    esp,0xc
c001c895:	c3                   	ret    

c001c896 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c896:	55                   	push   ebp
c001c897:	57                   	push   edi
c001c898:	56                   	push   esi
c001c899:	53                   	push   ebx
c001c89a:	81 ec 28 01 00 00    	sub    esp,0x128
c001c8a0:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c8a7:	8b 94 24 4c 01 00 00 	mov    edx,DWORD PTR [esp+0x14c]
c001c8ae:	8b b4 24 40 01 00 00 	mov    esi,DWORD PTR [esp+0x140]
c001c8b5:	8b bc 24 44 01 00 00 	mov    edi,DWORD PTR [esp+0x144]
c001c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c8c4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c8cb:	e8 3e ec ff ff       	call   c001b50e <Device::getName()>
c001c8d0:	5a                   	pop    edx
c001c8d1:	59                   	pop    ecx
c001c8d2:	50                   	push   eax
c001c8d3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c8d7:	55                   	push   ebp
c001c8d8:	e8 73 3d fe ff       	call   c0000650 <strcpy>
c001c8dd:	5b                   	pop    ebx
c001c8de:	58                   	pop    eax
c001c8df:	68 24 21 03 c0       	push   0xc0032124
c001c8e4:	55                   	push   ebp
c001c8e5:	e8 86 3f fe ff       	call   c0000870 <strcat>
c001c8ea:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c8f1:	e8 ed 9a ff ff       	call   c00163e3 <malloc>
c001c8f6:	83 c4 0c             	add    esp,0xc
c001c8f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8fd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c901:	89 c3                	mov    ebx,eax
c001c903:	57                   	push   edi
c001c904:	56                   	push   esi
c001c905:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c90c:	55                   	push   ebp
c001c90d:	50                   	push   eax
c001c90e:	e8 57 fb ff ff       	call   c001c46a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c913:	83 c4 14             	add    esp,0x14
c001c916:	53                   	push   ebx
c001c917:	e8 0e fc ff ff       	call   c001c52a <LogicalDisk::assignDriveLetter()>
c001c91c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c91f:	e8 c0 fc ff ff       	call   c001c5e4 <LogicalDisk::mount()>
c001c924:	58                   	pop    eax
c001c925:	5a                   	pop    edx
c001c926:	53                   	push   ebx
c001c927:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c92e:	e8 7d e9 ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c001c933:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c939:	5b                   	pop    ebx
c001c93a:	5e                   	pop    esi
c001c93b:	5f                   	pop    edi
c001c93c:	5d                   	pop    ebp
c001c93d:	c3                   	ret    

c001c93e <createPartitionsForDisk(PhysicalDisk*)>:
c001c93e:	55                   	push   ebp
c001c93f:	57                   	push   edi
c001c940:	56                   	push   esi
c001c941:	53                   	push   ebx
c001c942:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c948:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c94f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c955:	3d 00 02 00 00       	cmp    eax,0x200
c001c95a:	74 27                	je     c001c983 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c95c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c962:	83 ec 10             	sub    esp,0x10
c001c965:	99                   	cdq    
c001c966:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c96c:	52                   	push   edx
c001c96d:	50                   	push   eax
c001c96e:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c972:	c1 e6 0a             	shl    esi,0xa
c001c975:	89 fd                	mov    ebp,edi
c001c977:	55                   	push   ebp
c001c978:	56                   	push   esi
c001c979:	e8 82 1c 01 00       	call   c002e600 <__udivdi3>
c001c97e:	e9 b9 00 00 00       	jmp    c001ca3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c983:	83 ec 0c             	sub    esp,0xc
c001c986:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c988:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c98c:	56                   	push   esi
c001c98d:	6a 01                	push   0x1
c001c98f:	6a 00                	push   0x0
c001c991:	6a 00                	push   0x0
c001c993:	53                   	push   ebx
c001c994:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c997:	83 c4 20             	add    esp,0x20
c001c99a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c9a2:	75 0a                	jne    c001c9ae <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c9a4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c9ac:	74 2c                	je     c001c9da <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c9ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c9b4:	83 ec 10             	sub    esp,0x10
c001c9b7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c9bd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c9c3:	89 f7                	mov    edi,esi
c001c9c5:	c1 ff 1f             	sar    edi,0x1f
c001c9c8:	57                   	push   edi
c001c9c9:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c9cd:	56                   	push   esi
c001c9ce:	c1 e0 0a             	shl    eax,0xa
c001c9d1:	52                   	push   edx
c001c9d2:	50                   	push   eax
c001c9d3:	e8 28 1c 01 00       	call   c002e600 <__udivdi3>
c001c9d8:	eb 62                	jmp    c001ca3c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c9da:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c9e1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c9e8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001c9ef:	89 cf                	mov    edi,ecx
c001c9f1:	83 e2 7f             	and    edx,0x7f
c001c9f4:	83 e7 7f             	and    edi,0x7f
c001c9f7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001c9fa:	83 e0 7f             	and    eax,0x7f
c001c9fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c001ca00:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001ca07:	83 e0 7f             	and    eax,0x7f
c001ca0a:	01 d0                	add    eax,edx
c001ca0c:	84 c0                	test   al,al
c001ca0e:	89 c5                	mov    ebp,eax
c001ca10:	74 41                	je     c001ca53 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001ca12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca18:	83 ec 10             	sub    esp,0x10
c001ca1b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca21:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca27:	89 f7                	mov    edi,esi
c001ca29:	c1 ff 1f             	sar    edi,0x1f
c001ca2c:	57                   	push   edi
c001ca2d:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca31:	56                   	push   esi
c001ca32:	c1 e0 0a             	shl    eax,0xa
c001ca35:	52                   	push   edx
c001ca36:	50                   	push   eax
c001ca37:	e8 c4 1b 01 00       	call   c002e600 <__udivdi3>
c001ca3c:	83 c4 14             	add    esp,0x14
c001ca3f:	52                   	push   edx
c001ca40:	50                   	push   eax
c001ca41:	6a 00                	push   0x0
c001ca43:	6a 00                	push   0x0
c001ca45:	53                   	push   ebx
c001ca46:	e8 4b fe ff ff       	call   c001c896 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001ca4b:	83 c4 20             	add    esp,0x20
c001ca4e:	e9 73 01 00 00       	jmp    c001cbc6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001ca53:	89 f0                	mov    eax,esi
c001ca55:	31 c9                	xor    ecx,ecx
c001ca57:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001ca5e:	75 02                	jne    c001ca62 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001ca60:	89 cd                	mov    ebp,ecx
c001ca62:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001ca6a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001ca71:	83 c0 10             	add    eax,0x10
c001ca74:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001ca7c:	0f b6 b0 b8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b8]
c001ca83:	c1 e2 08             	shl    edx,0x8
c001ca86:	c1 e6 10             	shl    esi,0x10
c001ca89:	09 f2                	or     edx,esi
c001ca8b:	0f b6 b0 b6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b6]
c001ca92:	09 f2                	or     edx,esi
c001ca94:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001ca9b:	c1 e6 18             	shl    esi,0x18
c001ca9e:	09 f2                	or     edx,esi
c001caa0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001caa7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001caab:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001cab2:	c1 e6 10             	shl    esi,0x10
c001cab5:	c1 e2 08             	shl    edx,0x8
c001cab8:	09 f2                	or     edx,esi
c001caba:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001cac1:	09 f2                	or     edx,esi
c001cac3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001caca:	c1 e6 18             	shl    esi,0x18
c001cacd:	09 f2                	or     edx,esi
c001cacf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001cad3:	41                   	inc    ecx
c001cad4:	83 f9 04             	cmp    ecx,0x4
c001cad7:	0f 85 7a ff ff ff    	jne    c001ca57 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae1:	83 f0 01             	xor    eax,0x1
c001cae4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001cae8:	75 4f                	jne    c001cb39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001caea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001caee:	83 f0 01             	xor    eax,0x1
c001caf1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001caf5:	75 42                	jne    c001cb39 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001caf7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cafd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cb05:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001cb0b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cb13:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001cb19:	89 f7                	mov    edi,esi
c001cb1b:	c1 ff 1f             	sar    edi,0x1f
c001cb1e:	57                   	push   edi
c001cb1f:	56                   	push   esi
c001cb20:	0f a4 c2 0a          	shld   edx,eax,0xa
c001cb24:	52                   	push   edx
c001cb25:	c1 e0 0a             	shl    eax,0xa
c001cb28:	50                   	push   eax
c001cb29:	e8 d2 1a 01 00       	call   c002e600 <__udivdi3>
c001cb2e:	83 c4 10             	add    esp,0x10
c001cb31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb35:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb39:	89 e8                	mov    eax,ebp
c001cb3b:	0f b6 e8             	movzx  ebp,al
c001cb3e:	85 ed                	test   ebp,ebp
c001cb40:	74 50                	je     c001cb92 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001cb42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cb46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001cb4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb56:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cb5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cb5e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cb6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb72:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001cb76:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb7a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cb7e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb82:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cb86:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cb8a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cb8e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001cb92:	31 ed                	xor    ebp,ebp
c001cb94:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cb98:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cb9c:	89 f8                	mov    eax,edi
c001cb9e:	09 f0                	or     eax,esi
c001cba0:	74 1e                	je     c001cbc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cba2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cba6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cbaa:	89 d1                	mov    ecx,edx
c001cbac:	09 c1                	or     ecx,eax
c001cbae:	74 10                	je     c001cbc0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	57                   	push   edi
c001cbb4:	56                   	push   esi
c001cbb5:	52                   	push   edx
c001cbb6:	50                   	push   eax
c001cbb7:	53                   	push   ebx
c001cbb8:	e8 d9 fc ff ff       	call   c001c896 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cbbd:	83 c4 20             	add    esp,0x20
c001cbc0:	45                   	inc    ebp
c001cbc1:	83 fd 04             	cmp    ebp,0x4
c001cbc4:	75 ce                	jne    c001cb94 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cbc6:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cbcc:	5b                   	pop    ebx
c001cbcd:	5e                   	pop    esi
c001cbce:	5f                   	pop    edi
c001cbcf:	5d                   	pop    ebp
c001cbd0:	c3                   	ret    
c001cbd1:	66 90                	xchg   ax,ax
c001cbd3:	90                   	nop

c001cbd4 <Serial::Serial(char const*)>:
c001cbd4:	83 ec 0c             	sub    esp,0xc
c001cbd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbdb:	83 ec 08             	sub    esp,0x8
c001cbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe2:	50                   	push   eax
c001cbe3:	e8 2a e8 ff ff       	call   c001b412 <Device::Device(char const*)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	ba 38 21 03 c0       	mov    edx,0xc0032138
c001cbf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf4:	89 10                	mov    DWORD PTR [eax],edx
c001cbf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfa:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cc04:	90                   	nop
c001cc05:	83 c4 0c             	add    esp,0xc
c001cc08:	c3                   	ret    
c001cc09:	90                   	nop
c001cc0a:	66 90                	xchg   ax,ax

c001cc0c <Serial::~Serial()>:
c001cc0c:	83 ec 0c             	sub    esp,0xc
c001cc0f:	ba 38 21 03 c0       	mov    edx,0xc0032138
c001cc14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc18:	89 10                	mov    DWORD PTR [eax],edx
c001cc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1e:	83 ec 0c             	sub    esp,0xc
c001cc21:	50                   	push   eax
c001cc22:	e8 8b e5 ff ff       	call   c001b1b2 <Device::~Device()>
c001cc27:	83 c4 10             	add    esp,0x10
c001cc2a:	90                   	nop
c001cc2b:	83 c4 0c             	add    esp,0xc
c001cc2e:	c3                   	ret    
c001cc2f:	90                   	nop

c001cc30 <Serial::~Serial()>:
c001cc30:	83 ec 0c             	sub    esp,0xc
c001cc33:	83 ec 0c             	sub    esp,0xc
c001cc36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc3a:	e8 cd ff ff ff       	call   c001cc0c <Serial::~Serial()>
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	83 ec 08             	sub    esp,0x8
c001cc45:	68 58 01 00 00       	push   0x158
c001cc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc4e:	e8 c9 c4 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	83 c4 0c             	add    esp,0xc
c001cc59:	c3                   	ret    
c001cc5a:	66 90                	xchg   ax,ax

c001cc5c <Timer::Timer(char const*)>:
c001cc5c:	83 ec 0c             	sub    esp,0xc
c001cc5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc63:	83 ec 08             	sub    esp,0x8
c001cc66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6a:	50                   	push   eax
c001cc6b:	e8 a2 e7 ff ff       	call   c001b412 <Device::Device(char const*)>
c001cc70:	83 c4 10             	add    esp,0x10
c001cc73:	ba 7c 21 03 c0       	mov    edx,0xc003217c
c001cc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc7c:	89 10                	mov    DWORD PTR [eax],edx
c001cc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc82:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cc8c:	90                   	nop
c001cc8d:	83 c4 0c             	add    esp,0xc
c001cc90:	c3                   	ret    
c001cc91:	90                   	nop
c001cc92:	66 90                	xchg   ax,ax

c001cc94 <Timer::~Timer()>:
c001cc94:	83 ec 0c             	sub    esp,0xc
c001cc97:	ba 7c 21 03 c0       	mov    edx,0xc003217c
c001cc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca0:	89 10                	mov    DWORD PTR [eax],edx
c001cca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cca6:	83 ec 0c             	sub    esp,0xc
c001cca9:	50                   	push   eax
c001ccaa:	e8 03 e5 ff ff       	call   c001b1b2 <Device::~Device()>
c001ccaf:	83 c4 10             	add    esp,0x10
c001ccb2:	90                   	nop
c001ccb3:	83 c4 0c             	add    esp,0xc
c001ccb6:	c3                   	ret    
c001ccb7:	90                   	nop

c001ccb8 <Timer::~Timer()>:
c001ccb8:	83 ec 0c             	sub    esp,0xc
c001ccbb:	83 ec 0c             	sub    esp,0xc
c001ccbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc2:	e8 cd ff ff ff       	call   c001cc94 <Timer::~Timer()>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	83 ec 08             	sub    esp,0x8
c001cccd:	68 5c 01 00 00       	push   0x15c
c001ccd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccd6:	e8 41 c4 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001ccdb:	83 c4 10             	add    esp,0x10
c001ccde:	83 c4 0c             	add    esp,0xc
c001cce1:	c3                   	ret    

c001cce2 <Timer::read()>:
c001cce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cce6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ccec:	c3                   	ret    

c001cced <setupTimer(int)>:
c001cced:	53                   	push   ebx
c001ccee:	83 ec 14             	sub    esp,0x14
c001ccf1:	68 5c 01 00 00       	push   0x15c
c001ccf6:	e8 e8 96 ff ff       	call   c00163e3 <malloc>
c001ccfb:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccfe:	89 c3                	mov    ebx,eax
c001cd00:	e8 7b 11 01 00       	call   c002de80 <PIT::PIT()>
c001cd05:	58                   	pop    eax
c001cd06:	5a                   	pop    edx
c001cd07:	53                   	push   ebx
c001cd08:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cd0e:	e8 9d e5 ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c001cd13:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd15:	6a 00                	push   0x0
c001cd17:	6a 00                	push   0x0
c001cd19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cd1d:	53                   	push   ebx
c001cd1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd21:	83 c4 28             	add    esp,0x28
c001cd24:	89 d8                	mov    eax,ebx
c001cd26:	5b                   	pop    ebx
c001cd27:	c3                   	ret    

c001cd28 <timerHandler(unsigned int)>:
c001cd28:	57                   	push   edi
c001cd29:	56                   	push   esi
c001cd2a:	53                   	push   ebx
c001cd2b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cd2f:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cd35:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cd3c:	0f 84 46 01 00 00    	je     c001ce88 <timerHandler(unsigned int)+0x160>
c001cd42:	fa                   	cli    
c001cd43:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd49:	83 ec 0c             	sub    esp,0xc
c001cd4c:	68 e0 01 04 c0       	push   0xc00401e0
c001cd51:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001cd57:	e8 74 1e 01 00       	call   c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	84 c0                	test   al,al
c001cd61:	0f 85 a1 00 00 00    	jne    c001ce08 <timerHandler(unsigned int)+0xe0>
c001cd67:	83 ec 0c             	sub    esp,0xc
c001cd6a:	68 e0 01 04 c0       	push   0xc00401e0
c001cd6f:	e8 78 1e 01 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	89 c6                	mov    esi,eax
c001cd79:	8d 76 00             	lea    esi,[esi+0x0]
c001cd7c:	83 ec 0c             	sub    esp,0xc
c001cd7f:	68 e0 01 04 c0       	push   0xc00401e0
c001cd84:	e8 63 1e 01 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd89:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cd90:	89 c3                	mov    ebx,eax
c001cd92:	e8 5d 1e 01 00       	call   c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cd97:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd9a:	83 c4 10             	add    esp,0x10
c001cd9d:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001cda3:	77 23                	ja     c001cdc8 <timerHandler(unsigned int)+0xa0>
c001cda5:	83 ec 0c             	sub    esp,0xc
c001cda8:	53                   	push   ebx
c001cda9:	e8 da 86 00 00       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c001cdae:	83 c4 10             	add    esp,0x10
c001cdb1:	39 de                	cmp    esi,ebx
c001cdb3:	75 27                	jne    c001cddc <timerHandler(unsigned int)+0xb4>
c001cdb5:	83 ec 0c             	sub    esp,0xc
c001cdb8:	68 e0 01 04 c0       	push   0xc00401e0
c001cdbd:	e8 2a 1e 01 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdc2:	89 c6                	mov    esi,eax
c001cdc4:	eb 12                	jmp    c001cdd8 <timerHandler(unsigned int)+0xb0>
c001cdc6:	66 90                	xchg   ax,ax
c001cdc8:	50                   	push   eax
c001cdc9:	50                   	push   eax
c001cdca:	53                   	push   ebx
c001cdcb:	68 e0 01 04 c0       	push   0xc00401e0
c001cdd0:	e8 db 1e 01 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cdd5:	8d 76 00             	lea    esi,[esi+0x0]
c001cdd8:	83 c4 10             	add    esp,0x10
c001cddb:	90                   	nop
c001cddc:	83 ec 0c             	sub    esp,0xc
c001cddf:	68 e0 01 04 c0       	push   0xc00401e0
c001cde4:	e8 e7 1d 01 00       	call   c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cde9:	83 c4 10             	add    esp,0x10
c001cdec:	84 c0                	test   al,al
c001cdee:	75 18                	jne    c001ce08 <timerHandler(unsigned int)+0xe0>
c001cdf0:	83 ec 0c             	sub    esp,0xc
c001cdf3:	68 e0 01 04 c0       	push   0xc00401e0
c001cdf8:	e8 ef 1d 01 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	39 f0                	cmp    eax,esi
c001ce02:	0f 85 74 ff ff ff    	jne    c001cd7c <timerHandler(unsigned int)+0x54>
c001ce08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce0d:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001ce11:	74 3d                	je     c001ce50 <timerHandler(unsigned int)+0x128>
c001ce13:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001ce1a:	74 34                	je     c001ce50 <timerHandler(unsigned int)+0x128>
c001ce1c:	fa                   	cli    
c001ce1d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001ce23:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001ce29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce2e:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001ce31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce36:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001ce39:	77 05                	ja     c001ce40 <timerHandler(unsigned int)+0x118>
c001ce3b:	e8 5c 83 00 00       	call   c002519c <schedule()>
c001ce40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce45:	48                   	dec    eax
c001ce46:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce4b:	75 03                	jne    c001ce50 <timerHandler(unsigned int)+0x128>
c001ce4d:	fb                   	sti    
c001ce4e:	66 90                	xchg   ax,ax
c001ce50:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001ce55:	48                   	dec    eax
c001ce56:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001ce5b:	75 1b                	jne    c001ce78 <timerHandler(unsigned int)+0x150>
c001ce5d:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001ce64:	74 12                	je     c001ce78 <timerHandler(unsigned int)+0x150>
c001ce66:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001ce70:	e8 27 83 00 00       	call   c002519c <schedule()>
c001ce75:	8d 76 00             	lea    esi,[esi+0x0]
c001ce78:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ce7d:	48                   	dec    eax
c001ce7e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ce83:	75 03                	jne    c001ce88 <timerHandler(unsigned int)+0x160>
c001ce85:	fb                   	sti    
c001ce86:	66 90                	xchg   ax,ax
c001ce88:	5b                   	pop    ebx
c001ce89:	5e                   	pop    esi
c001ce8a:	5f                   	pop    edi
c001ce8b:	c3                   	ret    

c001ce8c <VCache::VCache(PhysicalDisk*)>:
c001ce8c:	53                   	push   ebx
c001ce8d:	83 ec 18             	sub    esp,0x18
c001ce90:	ba ac 21 03 c0       	mov    edx,0xc00321ac
c001ce95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce99:	89 10                	mov    DWORD PTR [eax],edx
c001ce9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce9f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cea6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceaa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001ceb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001cebc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001cec3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001cece:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ced5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001cee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cee8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001cef3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001cefa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cefe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf06:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001cf0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf0e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf16:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf1d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001cf25:	83 ec 0c             	sub    esp,0xc
c001cf28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf2c:	e8 b2 94 ff ff       	call   c00163e3 <malloc>
c001cf31:	83 c4 10             	add    esp,0x10
c001cf34:	89 c3                	mov    ebx,eax
c001cf36:	83 ec 0c             	sub    esp,0xc
c001cf39:	53                   	push   ebx
c001cf3a:	e8 49 32 00 00       	call   c0020188 <Mutex::Mutex()>
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf46:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cf49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf4d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf51:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cf54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf58:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001cf5f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf63:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cf70:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf74:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001cf7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cf80:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cf84:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cf87:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cf8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf8e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001cf92:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cf9c:	05 00 02 00 00       	add    eax,0x200
c001cfa1:	c1 e0 03             	shl    eax,0x3
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	50                   	push   eax
c001cfa8:	e8 36 94 ff ff       	call   c00163e3 <malloc>
c001cfad:	83 c4 10             	add    esp,0x10
c001cfb0:	89 c2                	mov    edx,eax
c001cfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cfb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfbd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cfc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfc8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cfcc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfd0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cfd6:	89 d0                	mov    eax,edx
c001cfd8:	c1 e0 02             	shl    eax,0x2
c001cfdb:	01 d0                	add    eax,edx
c001cfdd:	c1 e0 04             	shl    eax,0x4
c001cfe0:	83 ec 0c             	sub    esp,0xc
c001cfe3:	50                   	push   eax
c001cfe4:	e8 fa 93 ff ff       	call   c00163e3 <malloc>
c001cfe9:	83 c4 10             	add    esp,0x10
c001cfec:	89 c2                	mov    edx,eax
c001cfee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cff2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001cff5:	90                   	nop
c001cff6:	83 c4 18             	add    esp,0x18
c001cff9:	5b                   	pop    ebx
c001cffa:	c3                   	ret    
c001cffb:	90                   	nop

c001cffc <VCache::invalidateReadBuffer()>:
c001cffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d000:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001d006:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001d00a:	c3                   	ret    
c001d00b:	90                   	nop

c001d00c <VCache::writeWriteBuffer()>:
c001d00c:	53                   	push   ebx
c001d00d:	83 ec 08             	sub    esp,0x8
c001d010:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d014:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d018:	74 1e                	je     c001d038 <VCache::writeWriteBuffer()+0x2c>
c001d01a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d01d:	83 ec 0c             	sub    esp,0xc
c001d020:	8b 10                	mov    edx,DWORD PTR [eax]
c001d022:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001d025:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001d028:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001d02b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001d02e:	50                   	push   eax
c001d02f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d032:	83 c4 20             	add    esp,0x20
c001d035:	8d 76 00             	lea    esi,[esi+0x0]
c001d038:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001d03f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001d046:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001d04a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001d051:	83 c4 08             	add    esp,0x8
c001d054:	5b                   	pop    ebx
c001d055:	c3                   	ret    
c001d056:	66 90                	xchg   ax,ax

c001d058 <VCache::~VCache()>:
c001d058:	83 ec 0c             	sub    esp,0xc
c001d05b:	ba ac 21 03 c0       	mov    edx,0xc00321ac
c001d060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d064:	89 10                	mov    DWORD PTR [eax],edx
c001d066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001d06d:	0f b6 c0             	movzx  eax,al
c001d070:	85 c0                	test   eax,eax
c001d072:	74 10                	je     c001d084 <VCache::~VCache()+0x2c>
c001d074:	83 ec 0c             	sub    esp,0xc
c001d077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d07b:	e8 8c ff ff ff       	call   c001d00c <VCache::writeWriteBuffer()>
c001d080:	83 c4 10             	add    esp,0x10
c001d083:	90                   	nop
c001d084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d088:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001d08b:	83 ec 0c             	sub    esp,0xc
c001d08e:	50                   	push   eax
c001d08f:	e8 5f 93 ff ff       	call   c00163f3 <free>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d09b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d09e:	83 ec 0c             	sub    esp,0xc
c001d0a1:	50                   	push   eax
c001d0a2:	e8 4c 93 ff ff       	call   c00163f3 <free>
c001d0a7:	83 c4 10             	add    esp,0x10
c001d0aa:	90                   	nop
c001d0ab:	83 c4 0c             	add    esp,0xc
c001d0ae:	c3                   	ret    
c001d0af:	90                   	nop

c001d0b0 <VCache::~VCache()>:
c001d0b0:	83 ec 0c             	sub    esp,0xc
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0ba:	e8 99 ff ff ff       	call   c001d058 <VCache::~VCache()>
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	83 ec 08             	sub    esp,0x8
c001d0c5:	6a 44                	push   0x44
c001d0c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0cb:	e8 4c c0 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001d0d0:	83 c4 10             	add    esp,0x10
c001d0d3:	83 c4 0c             	add    esp,0xc
c001d0d6:	c3                   	ret    
c001d0d7:	90                   	nop

c001d0d8 <VCache::write(unsigned long long, int, void*)>:
c001d0d8:	55                   	push   ebp
c001d0d9:	57                   	push   edi
c001d0da:	56                   	push   esi
c001d0db:	53                   	push   ebx
c001d0dc:	83 ec 1c             	sub    esp,0x1c
c001d0df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d0e3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d0e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d0eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d0ef:	e8 14 7e 00 00       	call   c0024f08 <KeDisablePreemption()>
c001d0f4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d0f8:	74 0e                	je     c001d108 <VCache::write(unsigned long long, int, void*)+0x30>
c001d0fa:	83 ec 0c             	sub    esp,0xc
c001d0fd:	53                   	push   ebx
c001d0fe:	e8 f9 fe ff ff       	call   c001cffc <VCache::invalidateReadBuffer()>
c001d103:	83 c4 10             	add    esp,0x10
c001d106:	66 90                	xchg   ax,ax
c001d108:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d10c:	74 5e                	je     c001d16c <VCache::write(unsigned long long, int, void*)+0x94>
c001d10e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d115:	99                   	cdq    
c001d116:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d119:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d11c:	89 c1                	mov    ecx,eax
c001d11e:	31 f1                	xor    ecx,esi
c001d120:	89 d0                	mov    eax,edx
c001d122:	31 f8                	xor    eax,edi
c001d124:	09 c1                	or     ecx,eax
c001d126:	75 38                	jne    c001d160 <VCache::write(unsigned long long, int, void*)+0x88>
c001d128:	83 fd 01             	cmp    ebp,0x1
c001d12b:	75 33                	jne    c001d160 <VCache::write(unsigned long long, int, void*)+0x88>
c001d12d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d130:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d134:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d138:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d13e:	0f af f9             	imul   edi,ecx
c001d141:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d144:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d146:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d149:	40                   	inc    eax
c001d14a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d14d:	83 f8 50             	cmp    eax,0x50
c001d150:	75 66                	jne    c001d1b8 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d152:	83 ec 0c             	sub    esp,0xc
c001d155:	53                   	push   ebx
c001d156:	e8 b1 fe ff ff       	call   c001d00c <VCache::writeWriteBuffer()>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	eb 58                	jmp    c001d1b8 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d160:	83 ec 0c             	sub    esp,0xc
c001d163:	53                   	push   ebx
c001d164:	e8 a3 fe ff ff       	call   c001d00c <VCache::writeWriteBuffer()>
c001d169:	83 c4 10             	add    esp,0x10
c001d16c:	83 fd 4f             	cmp    ebp,0x4f
c001d16f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d172:	7f 20                	jg     c001d194 <VCache::write(unsigned long long, int, void*)+0xbc>
c001d174:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d177:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d17b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d17e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d181:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001d184:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d188:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d18e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d190:	eb 26                	jmp    c001d1b8 <VCache::write(unsigned long long, int, void*)+0xe0>
c001d192:	66 90                	xchg   ax,ax
c001d194:	83 ec 0c             	sub    esp,0xc
c001d197:	8b 10                	mov    edx,DWORD PTR [eax]
c001d199:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d19d:	55                   	push   ebp
c001d19e:	57                   	push   edi
c001d19f:	56                   	push   esi
c001d1a0:	50                   	push   eax
c001d1a1:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d1a4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d1a8:	83 c4 20             	add    esp,0x20
c001d1ab:	e8 80 7d 00 00       	call   c0024f30 <KeRestorePreemption()>
c001d1b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1b4:	eb 0a                	jmp    c001d1c0 <VCache::write(unsigned long long, int, void*)+0xe8>
c001d1b6:	66 90                	xchg   ax,ax
c001d1b8:	e8 73 7d 00 00       	call   c0024f30 <KeRestorePreemption()>
c001d1bd:	31 c0                	xor    eax,eax
c001d1bf:	90                   	nop
c001d1c0:	83 c4 1c             	add    esp,0x1c
c001d1c3:	5b                   	pop    ebx
c001d1c4:	5e                   	pop    esi
c001d1c5:	5f                   	pop    edi
c001d1c6:	5d                   	pop    ebp
c001d1c7:	c3                   	ret    

c001d1c8 <VCache::read(unsigned long long, int, void*)>:
c001d1c8:	55                   	push   ebp
c001d1c9:	57                   	push   edi
c001d1ca:	56                   	push   esi
c001d1cb:	53                   	push   ebx
c001d1cc:	83 ec 1c             	sub    esp,0x1c
c001d1cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d1d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1d7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001d1db:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d1df:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d1e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001d1ea:	e8 19 7d 00 00       	call   c0024f08 <KeDisablePreemption()>
c001d1ef:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d1f3:	74 0f                	je     c001d204 <VCache::read(unsigned long long, int, void*)+0x3c>
c001d1f5:	83 ec 0c             	sub    esp,0xc
c001d1f8:	53                   	push   ebx
c001d1f9:	e8 0e fe ff ff       	call   c001d00c <VCache::writeWriteBuffer()>
c001d1fe:	83 c4 10             	add    esp,0x10
c001d201:	8d 76 00             	lea    esi,[esi+0x0]
c001d204:	83 fe 01             	cmp    esi,0x1
c001d207:	0f 85 8b 00 00 00    	jne    c001d298 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d20d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d210:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d217:	75 7f                	jne    c001d298 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d219:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d21c:	89 d1                	mov    ecx,edx
c001d21e:	f7 d9                	neg    ecx
c001d220:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d224:	89 cf                	mov    edi,ecx
c001d226:	23 0c 24             	and    ecx,DWORD PTR [esp]
c001d229:	c1 ff 1f             	sar    edi,0x1f
c001d22c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001d230:	89 ce                	mov    esi,ecx
c001d232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d236:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001d23a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d23e:	89 cf                	mov    edi,ecx
c001d240:	74 32                	je     c001d274 <VCache::read(unsigned long long, int, void*)+0xac>
c001d242:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d245:	75 2d                	jne    c001d274 <VCache::read(unsigned long long, int, void*)+0xac>
c001d247:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001d24a:	75 28                	jne    c001d274 <VCache::read(unsigned long long, int, void*)+0xac>
c001d24c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d24f:	89 ef                	mov    edi,ebp
c001d251:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d257:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d25a:	8d 70 ff             	lea    esi,[eax-0x1]
c001d25d:	23 34 24             	and    esi,DWORD PTR [esp]
c001d260:	0f af f1             	imul   esi,ecx
c001d263:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d266:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d268:	e8 c3 7c 00 00       	call   c0024f30 <KeRestorePreemption()>
c001d26d:	31 c0                	xor    eax,eax
c001d26f:	eb 57                	jmp    c001d2c8 <VCache::read(unsigned long long, int, void*)+0x100>
c001d271:	8d 76 00             	lea    esi,[esi+0x0]
c001d274:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d278:	83 ec 0c             	sub    esp,0xc
c001d27b:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001d27e:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c001d281:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d283:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d286:	52                   	push   edx
c001d287:	57                   	push   edi
c001d288:	56                   	push   esi
c001d289:	50                   	push   eax
c001d28a:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d28d:	83 c4 20             	add    esp,0x20
c001d290:	85 c0                	test   eax,eax
c001d292:	75 34                	jne    c001d2c8 <VCache::read(unsigned long long, int, void*)+0x100>
c001d294:	eb b6                	jmp    c001d24c <VCache::read(unsigned long long, int, void*)+0x84>
c001d296:	66 90                	xchg   ax,ax
c001d298:	83 ec 0c             	sub    esp,0xc
c001d29b:	53                   	push   ebx
c001d29c:	e8 5b fd ff ff       	call   c001cffc <VCache::invalidateReadBuffer()>
c001d2a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d2a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d2a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2a9:	56                   	push   esi
c001d2aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d2b2:	50                   	push   eax
c001d2b3:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d2b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2ba:	83 c4 20             	add    esp,0x20
c001d2bd:	e8 6e 7c 00 00       	call   c0024f30 <KeRestorePreemption()>
c001d2c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2c8:	83 c4 1c             	add    esp,0x1c
c001d2cb:	5b                   	pop    ebx
c001d2cc:	5e                   	pop    esi
c001d2cd:	5f                   	pop    edi
c001d2ce:	5d                   	pop    ebp
c001d2cf:	c3                   	ret    

c001d2d0 <Video::putrect(int, int, int, int, unsigned int)>:
c001d2d0:	55                   	push   ebp
c001d2d1:	57                   	push   edi
c001d2d2:	56                   	push   esi
c001d2d3:	53                   	push   ebx
c001d2d4:	83 ec 1c             	sub    esp,0x1c
c001d2d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d2db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d2e3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d2e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2ef:	01 df                	add    edi,ebx
c001d2f1:	39 fb                	cmp    ebx,edi
c001d2f3:	7d 1f                	jge    c001d314 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d2f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d2f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d2fd:	7d 12                	jge    c001d311 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d2ff:	8b 16                	mov    edx,DWORD PTR [esi]
c001d301:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d305:	53                   	push   ebx
c001d306:	55                   	push   ebp
c001d307:	45                   	inc    ebp
c001d308:	56                   	push   esi
c001d309:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	eb e8                	jmp    c001d2f9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d311:	43                   	inc    ebx
c001d312:	eb dd                	jmp    c001d2f1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d314:	83 c4 1c             	add    esp,0x1c
c001d317:	5b                   	pop    ebx
c001d318:	5e                   	pop    esi
c001d319:	5f                   	pop    edi
c001d31a:	5d                   	pop    ebp
c001d31b:	c3                   	ret    

c001d31c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d31c:	55                   	push   ebp
c001d31d:	57                   	push   edi
c001d31e:	31 ff                	xor    edi,edi
c001d320:	56                   	push   esi
c001d321:	53                   	push   ebx
c001d322:	83 ec 1c             	sub    esp,0x1c
c001d325:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d329:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d32d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d334:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d339:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d33d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d341:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d345:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d348:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d34c:	01 f9                	add    ecx,edi
c001d34e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d352:	7d 2f                	jge    c001d383 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d354:	31 f6                	xor    esi,esi
c001d356:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d35a:	01 f2                	add    edx,esi
c001d35c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d360:	7d 1a                	jge    c001d37c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d362:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d365:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d368:	46                   	inc    esi
c001d369:	51                   	push   ecx
c001d36a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d36e:	52                   	push   edx
c001d36f:	55                   	push   ebp
c001d370:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d373:	83 c4 10             	add    esp,0x10
c001d376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d37a:	eb da                	jmp    c001d356 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d37c:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d380:	47                   	inc    edi
c001d381:	eb c5                	jmp    c001d348 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d383:	83 c4 1c             	add    esp,0x1c
c001d386:	5b                   	pop    ebx
c001d387:	5e                   	pop    esi
c001d388:	5f                   	pop    edi
c001d389:	5d                   	pop    ebp
c001d38a:	c3                   	ret    
c001d38b:	90                   	nop

c001d38c <Video::blit(unsigned int*, int, int, int, int)>:
c001d38c:	55                   	push   ebp
c001d38d:	ba 00 00 00 00       	mov    edx,0x0
c001d392:	57                   	push   edi
c001d393:	56                   	push   esi
c001d394:	53                   	push   ebx
c001d395:	83 ec 1c             	sub    esp,0x1c
c001d398:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d39c:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d3a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d3a4:	85 c0                	test   eax,eax
c001d3a6:	0f 49 d0             	cmovns edx,eax
c001d3a9:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
c001d3b0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d3b4:	89 eb                	mov    ebx,ebp
c001d3b6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d3ba:	01 ea                	add    edx,ebp
c001d3bc:	39 da                	cmp    edx,ebx
c001d3be:	7e 54                	jle    c001d414 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d3c0:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d3c6:	7c 4c                	jl     c001d414 <Video::blit(unsigned int*, int, int, int, int)+0x88>
c001d3c8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d3cc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d3d0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d3d4:	01 c1                	add    ecx,eax
c001d3d6:	39 f9                	cmp    ecx,edi
c001d3d8:	7e 2f                	jle    c001d409 <Video::blit(unsigned int*, int, int, int, int)+0x7d>
c001d3da:	83 c2 04             	add    edx,0x4
c001d3dd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d3e3:	7c 21                	jl     c001d406 <Video::blit(unsigned int*, int, int, int, int)+0x7a>
c001d3e5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001d3e9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d3eb:	ff 72 fc             	push   DWORD PTR [edx-0x4]
c001d3ee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d3f2:	55                   	push   ebp
c001d3f3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d3f7:	56                   	push   esi
c001d3f8:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d402:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d406:	47                   	inc    edi
c001d407:	eb c7                	jmp    c001d3d0 <Video::blit(unsigned int*, int, int, int, int)+0x44>
c001d409:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d40d:	43                   	inc    ebx
c001d40e:	01 7c 24 34          	add    DWORD PTR [esp+0x34],edi
c001d412:	eb a2                	jmp    c001d3b6 <Video::blit(unsigned int*, int, int, int, int)+0x2a>
c001d414:	83 c4 1c             	add    esp,0x1c
c001d417:	5b                   	pop    ebx
c001d418:	5e                   	pop    esi
c001d419:	5f                   	pop    edi
c001d41a:	5d                   	pop    ebp
c001d41b:	c3                   	ret    

c001d41c <Video::clearScreen(unsigned int)>:
c001d41c:	57                   	push   edi
c001d41d:	56                   	push   esi
c001d41e:	53                   	push   ebx
c001d41f:	31 db                	xor    ebx,ebx
c001d421:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d425:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d42b:	7e 1f                	jle    c001d44c <Video::clearScreen(unsigned int)+0x30>
c001d42d:	31 ff                	xor    edi,edi
c001d42f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d435:	7e 12                	jle    c001d449 <Video::clearScreen(unsigned int)+0x2d>
c001d437:	8b 06                	mov    eax,DWORD PTR [esi]
c001d439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d43d:	53                   	push   ebx
c001d43e:	57                   	push   edi
c001d43f:	47                   	inc    edi
c001d440:	56                   	push   esi
c001d441:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d444:	83 c4 10             	add    esp,0x10
c001d447:	eb e6                	jmp    c001d42f <Video::clearScreen(unsigned int)+0x13>
c001d449:	43                   	inc    ebx
c001d44a:	eb d9                	jmp    c001d425 <Video::clearScreen(unsigned int)+0x9>
c001d44c:	5b                   	pop    ebx
c001d44d:	5e                   	pop    esi
c001d44e:	5f                   	pop    edi
c001d44f:	c3                   	ret    

c001d450 <Video::putpixel(int, int, unsigned int)>:
c001d450:	c7 44 24 04 b4 21 03 c0 	mov    DWORD PTR [esp+0x4],0xc00321b4
c001d458:	e9 45 2d 00 00       	jmp    c00201a2 <KePanic(char const*)>
c001d45d:	90                   	nop

c001d45e <Video::readPixelApprox(int, int)>:
c001d45e:	83 ec 18             	sub    esp,0x18
c001d461:	68 d5 21 03 c0       	push   0xc00321d5
c001d466:	e8 37 2d 00 00       	call   c00201a2 <KePanic(char const*)>
c001d46b:	31 c0                	xor    eax,eax
c001d46d:	83 c4 1c             	add    esp,0x1c
c001d470:	c3                   	ret    
c001d471:	90                   	nop

c001d472 <Video::Video(char const*)>:
c001d472:	83 ec 0c             	sub    esp,0xc
c001d475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d479:	83 ec 08             	sub    esp,0x8
c001d47c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d480:	50                   	push   eax
c001d481:	e8 8c df ff ff       	call   c001b412 <Device::Device(char const*)>
c001d486:	83 c4 10             	add    esp,0x10
c001d489:	ba 78 22 03 c0       	mov    edx,0xc0032278
c001d48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d492:	89 10                	mov    DWORD PTR [eax],edx
c001d494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d498:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d4a2:	90                   	nop
c001d4a3:	83 c4 0c             	add    esp,0xc
c001d4a6:	c3                   	ret    
c001d4a7:	90                   	nop

c001d4a8 <Video::~Video()>:
c001d4a8:	83 ec 0c             	sub    esp,0xc
c001d4ab:	ba 78 22 03 c0       	mov    edx,0xc0032278
c001d4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4b4:	89 10                	mov    DWORD PTR [eax],edx
c001d4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4ba:	83 ec 0c             	sub    esp,0xc
c001d4bd:	50                   	push   eax
c001d4be:	e8 ef dc ff ff       	call   c001b1b2 <Device::~Device()>
c001d4c3:	83 c4 10             	add    esp,0x10
c001d4c6:	90                   	nop
c001d4c7:	83 c4 0c             	add    esp,0xc
c001d4ca:	c3                   	ret    
c001d4cb:	90                   	nop

c001d4cc <Video::~Video()>:
c001d4cc:	83 ec 0c             	sub    esp,0xc
c001d4cf:	83 ec 0c             	sub    esp,0xc
c001d4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4d6:	e8 cd ff ff ff       	call   c001d4a8 <Video::~Video()>
c001d4db:	83 c4 10             	add    esp,0x10
c001d4de:	83 ec 08             	sub    esp,0x8
c001d4e1:	68 64 01 00 00       	push   0x164
c001d4e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d4ea:	e8 2d bc ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c001d4ef:	83 c4 10             	add    esp,0x10
c001d4f2:	83 c4 0c             	add    esp,0xc
c001d4f5:	c3                   	ret    

c001d4f6 <Video::isMonochrome()>:
c001d4f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4fa:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d500:	c3                   	ret    
c001d501:	90                   	nop

c001d502 <Video::getWidth()>:
c001d502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d506:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d50c:	c3                   	ret    
c001d50d:	90                   	nop

c001d50e <Video::getHeight()>:
c001d50e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d512:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d518:	c3                   	ret    
c001d519:	90                   	nop

c001d51a <Video::drawCursor(int, int, unsigned int*, int)>:
c001d51a:	55                   	push   ebp
c001d51b:	57                   	push   edi
c001d51c:	56                   	push   esi
c001d51d:	53                   	push   ebx
c001d51e:	83 ec 2c             	sub    esp,0x2c
c001d521:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d525:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d529:	83 f8 01             	cmp    eax,0x1
c001d52c:	19 c9                	sbb    ecx,ecx
c001d52e:	31 db                	xor    ebx,ebx
c001d530:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d534:	89 ce                	mov    esi,ecx
c001d536:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d53e:	f7 d6                	not    esi
c001d540:	81 e6 ff ff ff 00    	and    esi,0xffffff
c001d546:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d54a:	01 d8                	add    eax,ebx
c001d54c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d550:	57                   	push   edi
c001d551:	e8 b8 ff ff ff       	call   c001d50e <Video::getHeight()>
c001d556:	59                   	pop    ecx
c001d557:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d55b:	7e 70                	jle    c001d5cd <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d55d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d561:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d565:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d568:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d56c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d570:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d577:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d57b:	89 e8                	mov    eax,ebp
c001d57d:	83 c0 20             	add    eax,0x20
c001d580:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d584:	57                   	push   edi
c001d585:	e8 78 ff ff ff       	call   c001d502 <Video::getWidth()>
c001d58a:	5a                   	pop    edx
c001d58b:	39 c5                	cmp    ebp,eax
c001d58d:	7d 34                	jge    c001d5c3 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d58f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d594:	74 05                	je     c001d59b <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d596:	8b 07                	mov    eax,DWORD PTR [edi]
c001d598:	56                   	push   esi
c001d599:	eb 0d                	jmp    c001d5a8 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d59b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d5a0:	74 12                	je     c001d5b4 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d5a2:	8b 07                	mov    eax,DWORD PTR [edi]
c001d5a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d5ac:	55                   	push   ebp
c001d5ad:	57                   	push   edi
c001d5ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d5b8:	45                   	inc    ebp
c001d5b9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d5bd:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001d5c1:	75 c1                	jne    c001d584 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d5c3:	43                   	inc    ebx
c001d5c4:	83 fb 20             	cmp    ebx,0x20
c001d5c7:	0f 85 79 ff ff ff    	jne    c001d546 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d5cd:	83 c4 2c             	add    esp,0x2c
c001d5d0:	5b                   	pop    ebx
c001d5d1:	5e                   	pop    esi
c001d5d2:	5f                   	pop    edi
c001d5d3:	5d                   	pop    ebp
c001d5d4:	c3                   	ret    
c001d5d5:	90                   	nop

c001d5d6 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d5d6:	55                   	push   ebp
c001d5d7:	57                   	push   edi
c001d5d8:	56                   	push   esi
c001d5d9:	53                   	push   ebx
c001d5da:	83 ec 48             	sub    esp,0x48
c001d5dd:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d5e1:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d5e5:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d5e9:	c1 e0 08             	shl    eax,0x8
c001d5ec:	01 d0                	add    eax,edx
c001d5ee:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d5f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d5f6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d5fa:	c1 e0 08             	shl    eax,0x8
c001d5fd:	01 d0                	add    eax,edx
c001d5ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d607:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
c001d60c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d610:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d614:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d61b:	50                   	push   eax
c001d61c:	e8 c2 8d ff ff       	call   c00163e3 <malloc>
c001d621:	83 c4 10             	add    esp,0x10
c001d624:	85 c0                	test   eax,eax
c001d626:	89 c5                	mov    ebp,eax
c001d628:	75 10                	jne    c001d63a <Video::tgaParse(unsigned char*, int, int*, int*)+0x64>
c001d62a:	83 ec 0c             	sub    esp,0xc
c001d62d:	68 00 22 03 c0       	push   0xc0032200
c001d632:	e8 6b 2b 00 00       	call   c00201a2 <KePanic(char const*)>
c001d637:	83 c4 10             	add    esp,0x10
c001d63a:	52                   	push   edx
c001d63b:	bf 12 00 00 00       	mov    edi,0x12
c001d640:	52                   	push   edx
c001d641:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d645:	50                   	push   eax
c001d646:	68 10 22 03 c0       	push   0xc0032210
c001d64b:	e8 ca bb ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001d650:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d653:	83 e0 20             	and    eax,0x20
c001d656:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d65a:	85 c0                	test   eax,eax
c001d65c:	59                   	pop    ecx
c001d65d:	0f 94 c0             	sete   al
c001d660:	0f b6 c0             	movzx  eax,al
c001d663:	5e                   	pop    esi
c001d664:	50                   	push   eax
c001d665:	68 1a 22 03 c0       	push   0xc003221a
c001d66a:	e8 ab bb ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001d66f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c001d673:	83 c4 10             	add    esp,0x10
c001d676:	85 c0                	test   eax,eax
c001d678:	89 c2                	mov    edx,eax
c001d67a:	74 11                	je     c001d68d <Video::tgaParse(unsigned char*, int, int*, int*)+0xb7>
c001d67c:	0f b6 7b 07          	movzx  edi,BYTE PTR [ebx+0x7]
c001d680:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d684:	c1 ff 03             	sar    edi,0x3
c001d687:	0f af f9             	imul   edi,ecx
c001d68a:	83 c7 12             	add    edi,0x12
c001d68d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d692:	74 07                	je     c001d69b <Video::tgaParse(unsigned char*, int, int*, int*)+0xc5>
c001d694:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d699:	75 12                	jne    c001d6ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xd7>
c001d69b:	83 ec 0c             	sub    esp,0xc
c001d69e:	68 28 22 03 c0       	push   0xc0032228
c001d6a3:	e8 72 bb ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001d6a8:	e9 aa 02 00 00       	jmp    c001d957 <Video::tgaParse(unsigned char*, int, int*, int*)+0x381>
c001d6ad:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d6b1:	83 f9 02             	cmp    ecx,0x2
c001d6b4:	74 0e                	je     c001d6c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xee>
c001d6b6:	83 f9 0a             	cmp    ecx,0xa
c001d6b9:	0f 84 d1 00 00 00    	je     c001d790 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ba>
c001d6bf:	e9 7e 02 00 00       	jmp    c001d942 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36c>
c001d6c4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6c9:	75 0e                	jne    c001d6d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d6cb:	84 d2                	test   dl,dl
c001d6cd:	75 0a                	jne    c001d6d9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001d6cf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6d2:	83 e8 18             	sub    eax,0x18
c001d6d5:	a8 f7                	test   al,0xf7
c001d6d7:	74 0d                	je     c001d6e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x110>
c001d6d9:	83 ec 0c             	sub    esp,0xc
c001d6dc:	68 3d 22 03 c0       	push   0xc003223d
c001d6e1:	e9 64 02 00 00       	jmp    c001d94a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d6e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d6ee:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d6f3:	31 c0                	xor    eax,eax
c001d6f5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d6f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d701:	89 c6                	mov    esi,eax
c001d703:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001d708:	75 15                	jne    c001d71f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d70a:	99                   	cdq    
c001d70b:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d70f:	85 d2                	test   edx,edx
c001d711:	75 0c                	jne    c001d71f <Video::tgaParse(unsigned char*, int, int*, int*)+0x149>
c001d713:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001d717:	29 c6                	sub    esi,eax
c001d719:	4e                   	dec    esi
c001d71a:	0f af 74 24 04       	imul   esi,DWORD PTR [esp+0x4]
c001d71f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d723:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d72b:	75 0c                	jne    c001d739 <Video::tgaParse(unsigned char*, int, int*, int*)+0x163>
c001d72d:	0f b6 54 3b 03       	movzx  edx,BYTE PTR [ebx+edi*1+0x3]
c001d732:	c1 e2 18             	shl    edx,0x18
c001d735:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d739:	0f b6 4c 3b 02       	movzx  ecx,BYTE PTR [ebx+edi*1+0x2]
c001d73e:	8d 46 01             	lea    eax,[esi+0x1]
c001d741:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c001d745:	c1 e1 10             	shl    ecx,0x10
c001d748:	89 ca                	mov    edx,ecx
c001d74a:	0f b6 4c 3b 01       	movzx  ecx,BYTE PTR [ebx+edi*1+0x1]
c001d74f:	c1 e1 08             	shl    ecx,0x8
c001d752:	09 d1                	or     ecx,edx
c001d754:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d758:	09 d1                	or     ecx,edx
c001d75a:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001d75e:	89 4c b5 00          	mov    DWORD PTR [ebp+esi*4+0x0],ecx
c001d762:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d766:	c1 fa 03             	sar    edx,0x3
c001d769:	01 d7                	add    edi,edx
c001d76b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d76f:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001d773:	7e 04                	jle    c001d779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1a3>
c001d775:	89 c6                	mov    esi,eax
c001d777:	eb 8a                	jmp    c001d703 <Video::tgaParse(unsigned char*, int, int*, int*)+0x12d>
c001d779:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001d77d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d781:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d785:	0f 8f 6e ff ff ff    	jg     c001d6f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x123>
c001d78b:	e9 ce 01 00 00       	jmp    c001d95e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d790:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d795:	75 0e                	jne    c001d7a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d797:	85 c0                	test   eax,eax
c001d799:	75 0a                	jne    c001d7a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cf>
c001d79b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d79e:	83 e8 18             	sub    eax,0x18
c001d7a1:	a8 f7                	test   al,0xf7
c001d7a3:	74 0d                	je     c001d7b2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1dc>
c001d7a5:	83 ec 0c             	sub    esp,0xc
c001d7a8:	68 4b 22 03 c0       	push   0xc003224b
c001d7ad:	e9 98 01 00 00       	jmp    c001d94a <Video::tgaParse(unsigned char*, int, int*, int*)+0x374>
c001d7b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d7ba:	31 c9                	xor    ecx,ecx
c001d7bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d7c4:	3b 7c 24 58          	cmp    edi,DWORD PTR [esp+0x58]
c001d7c8:	0f 8d 90 01 00 00    	jge    c001d95e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d7ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7d2:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d7d6:	0f 8e 82 01 00 00    	jle    c001d95e <Video::tgaParse(unsigned char*, int, int*, int*)+0x388>
c001d7dc:	0f b6 14 3b          	movzx  edx,BYTE PTR [ebx+edi*1]
c001d7e0:	8d 77 01             	lea    esi,[edi+0x1]
c001d7e3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d7e7:	83 fa 7f             	cmp    edx,0x7f
c001d7ea:	89 d0                	mov    eax,edx
c001d7ec:	0f 8e a3 00 00 00    	jle    c001d895 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2bf>
c001d7f2:	83 e0 7f             	and    eax,0x7f
c001d7f5:	31 d2                	xor    edx,edx
c001d7f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d7fb:	40                   	inc    eax
c001d7fc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d800:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d804:	75 08                	jne    c001d80e <Video::tgaParse(unsigned char*, int, int*, int*)+0x238>
c001d806:	0f b6 54 3b 04       	movzx  edx,BYTE PTR [ebx+edi*1+0x4]
c001d80b:	c1 e2 18             	shl    edx,0x18
c001d80e:	0f b6 44 3b 03       	movzx  eax,BYTE PTR [ebx+edi*1+0x3]
c001d813:	c1 e0 10             	shl    eax,0x10
c001d816:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d81a:	0f b6 44 3b 02       	movzx  eax,BYTE PTR [ebx+edi*1+0x2]
c001d81f:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d823:	c1 e0 08             	shl    eax,0x8
c001d826:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d82a:	09 f8                	or     eax,edi
c001d82c:	31 ff                	xor    edi,edi
c001d82e:	09 d0                	or     eax,edx
c001d830:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d834:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d839:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d83d:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001d842:	75 1d                	jne    c001d861 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d844:	89 c8                	mov    eax,ecx
c001d846:	99                   	cdq    
c001d847:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d84b:	85 d2                	test   edx,edx
c001d84d:	75 12                	jne    c001d861 <Video::tgaParse(unsigned char*, int, int*, int*)+0x28b>
c001d84f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d853:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d857:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d85b:	49                   	dec    ecx
c001d85c:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d861:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d865:	8d 51 01             	lea    edx,[ecx+0x1]
c001d868:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
c001d86c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d870:	8d 47 01             	lea    eax,[edi+0x1]
c001d873:	7e 06                	jle    c001d87b <Video::tgaParse(unsigned char*, int, int*, int*)+0x2a5>
c001d875:	89 c7                	mov    edi,eax
c001d877:	89 d1                	mov    ecx,edx
c001d879:	eb c2                	jmp    c001d83d <Video::tgaParse(unsigned char*, int, int*, int*)+0x267>
c001d87b:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d87f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d883:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d887:	c1 f8 03             	sar    eax,0x3
c001d88a:	01 c6                	add    esi,eax
c001d88c:	89 d1                	mov    ecx,edx
c001d88e:	89 f7                	mov    edi,esi
c001d890:	e9 2f ff ff ff       	jmp    c001d7c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ee>
c001d895:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001d89d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8a1:	40                   	inc    eax
c001d8a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d8ab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d8af:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d8b4:	75 1d                	jne    c001d8d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d8b6:	89 c8                	mov    eax,ecx
c001d8b8:	99                   	cdq    
c001d8b9:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
c001d8bd:	85 d2                	test   edx,edx
c001d8bf:	75 12                	jne    c001d8d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2fd>
c001d8c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d8c5:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001d8c9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d8cd:	49                   	dec    ecx
c001d8ce:	0f af 4c 24 04       	imul   ecx,DWORD PTR [esp+0x4]
c001d8d3:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d8d7:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d8df:	75 0c                	jne    c001d8ed <Video::tgaParse(unsigned char*, int, int*, int*)+0x317>
c001d8e1:	0f b6 7c 33 03       	movzx  edi,BYTE PTR [ebx+esi*1+0x3]
c001d8e6:	c1 e7 18             	shl    edi,0x18
c001d8e9:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d8ed:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d8f2:	8d 51 01             	lea    edx,[ecx+0x1]
c001d8f5:	c1 e0 10             	shl    eax,0x10
c001d8f8:	89 c7                	mov    edi,eax
c001d8fa:	0f b6 44 33 01       	movzx  eax,BYTE PTR [ebx+esi*1+0x1]
c001d8ff:	c1 e0 08             	shl    eax,0x8
c001d902:	09 f8                	or     eax,edi
c001d904:	0f b6 3c 33          	movzx  edi,BYTE PTR [ebx+esi*1]
c001d908:	09 f8                	or     eax,edi
c001d90a:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d90e:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d912:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d916:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d91a:	c1 f8 03             	sar    eax,0x3
c001d91d:	01 c6                	add    esi,eax
c001d91f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d923:	40                   	inc    eax
c001d924:	39 4c 24 18          	cmp    DWORD PTR [esp+0x18],ecx
c001d928:	7e 0b                	jle    c001d935 <Video::tgaParse(unsigned char*, int, int*, int*)+0x35f>
c001d92a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d92e:	89 d1                	mov    ecx,edx
c001d930:	e9 7a ff ff ff       	jmp    c001d8af <Video::tgaParse(unsigned char*, int, int*, int*)+0x2d9>
c001d935:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d939:	01 7c 24 10          	add    DWORD PTR [esp+0x10],edi
c001d93d:	e9 4a ff ff ff       	jmp    c001d88c <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b6>
c001d942:	50                   	push   eax
c001d943:	50                   	push   eax
c001d944:	51                   	push   ecx
c001d945:	68 5a 22 03 c0       	push   0xc003225a
c001d94a:	e8 cb b8 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001d94f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d952:	e8 9c 8a ff ff       	call   c00163f3 <free>
c001d957:	83 c4 10             	add    esp,0x10
c001d95a:	31 ed                	xor    ebp,ebp
c001d95c:	eb 14                	jmp    c001d972 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39c>
c001d95e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d962:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001d966:	89 18                	mov    DWORD PTR [eax],ebx
c001d968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d96c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d970:	89 18                	mov    DWORD PTR [eax],ebx
c001d972:	83 c4 3c             	add    esp,0x3c
c001d975:	89 e8                	mov    eax,ebp
c001d977:	5b                   	pop    ebx
c001d978:	5e                   	pop    esi
c001d979:	5f                   	pop    edi
c001d97a:	5d                   	pop    ebp
c001d97b:	c3                   	ret    

c001d97c <Video::putTGA(int, int, unsigned char*, int)>:
c001d97c:	55                   	push   ebp
c001d97d:	57                   	push   edi
c001d97e:	56                   	push   esi
c001d97f:	53                   	push   ebx
c001d980:	83 ec 28             	sub    esp,0x28
c001d983:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d987:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d98b:	50                   	push   eax
c001d98c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d990:	50                   	push   eax
c001d991:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d995:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d999:	55                   	push   ebp
c001d99a:	e8 37 fc ff ff       	call   c001d5d6 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d99f:	83 c4 20             	add    esp,0x20
c001d9a2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d9a6:	85 c0                	test   eax,eax
c001d9a8:	74 3b                	je     c001d9e5 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001d9aa:	89 c6                	mov    esi,eax
c001d9ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9b0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d9b4:	39 d8                	cmp    eax,ebx
c001d9b6:	7e 2d                	jle    c001d9e5 <Video::putTGA(int, int, unsigned char*, int)+0x69>
c001d9b8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d9bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d9c0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d9c4:	39 f8                	cmp    eax,edi
c001d9c6:	7e 1a                	jle    c001d9e2 <Video::putTGA(int, int, unsigned char*, int)+0x66>
c001d9c8:	83 c6 04             	add    esi,0x4
c001d9cb:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d9ce:	85 c0                	test   eax,eax
c001d9d0:	79 0d                	jns    c001d9df <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001d9d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d9d5:	50                   	push   eax
c001d9d6:	53                   	push   ebx
c001d9d7:	57                   	push   edi
c001d9d8:	55                   	push   ebp
c001d9d9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d9dc:	83 c4 10             	add    esp,0x10
c001d9df:	47                   	inc    edi
c001d9e0:	eb da                	jmp    c001d9bc <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d9e2:	43                   	inc    ebx
c001d9e3:	eb c7                	jmp    c001d9ac <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d9e5:	83 c4 1c             	add    esp,0x1c
c001d9e8:	5b                   	pop    ebx
c001d9e9:	5e                   	pop    esi
c001d9ea:	5f                   	pop    edi
c001d9eb:	5d                   	pop    ebp
c001d9ec:	c3                   	ret    
c001d9ed:	66 90                	xchg   ax,ax
c001d9ef:	90                   	nop

c001d9f0 <ACPI::close(int, int, void*)>:
c001d9f0:	83 ec 1c             	sub    esp,0x1c
c001d9f3:	83 ec 0c             	sub    esp,0xc
c001d9f6:	68 bc 22 03 c0       	push   0xc00322bc
c001d9fb:	e8 1a b8 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001da00:	83 c4 10             	add    esp,0x10
c001da03:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001da0b:	74 1b                	je     c001da28 <ACPI::close(int, int, void*)+0x38>
c001da0d:	83 ec 0c             	sub    esp,0xc
c001da10:	68 cb 22 03 c0       	push   0xc00322cb
c001da15:	e8 00 b8 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001da1a:	83 c4 10             	add    esp,0x10
c001da1d:	b8 00 00 00 00       	mov    eax,0x0
c001da22:	e9 01 01 00 00       	jmp    c001db28 <ACPI::close(int, int, void*)+0x138>
c001da27:	90                   	nop
c001da28:	83 ec 0c             	sub    esp,0xc
c001da2b:	68 dc 22 03 c0       	push   0xc00322dc
c001da30:	e8 e5 b7 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001da35:	83 c4 10             	add    esp,0x10
c001da38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001da3d:	75 45                	jne    c001da84 <ACPI::close(int, int, void*)+0x94>
c001da3f:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da44:	83 ec 08             	sub    esp,0x8
c001da47:	50                   	push   eax
c001da48:	68 eb 22 03 c0       	push   0xc00322eb
c001da4d:	e8 c8 b7 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001da52:	83 c4 10             	add    esp,0x10
c001da55:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da5a:	85 c0                	test   eax,eax
c001da5c:	74 0a                	je     c001da68 <ACPI::close(int, int, void*)+0x78>
c001da5e:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da63:	ff d0                	call   eax
c001da65:	8d 76 00             	lea    esi,[esi+0x0]
c001da68:	83 ec 0c             	sub    esp,0xc
c001da6b:	68 bc 24 03 c0       	push   0xc00324bc
c001da70:	e8 2d 27 00 00       	call   c00201a2 <KePanic(char const*)>
c001da75:	83 c4 10             	add    esp,0x10
c001da78:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da7d:	e9 a6 00 00 00       	jmp    c001db28 <ACPI::close(int, int, void*)+0x138>
c001da82:	66 90                	xchg   ax,ax
c001da84:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001da89:	0f 85 81 00 00 00    	jne    c001db10 <ACPI::close(int, int, void*)+0x120>
c001da8f:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001da94:	83 ec 08             	sub    esp,0x8
c001da97:	50                   	push   eax
c001da98:	68 09 23 03 c0       	push   0xc0032309
c001da9d:	e8 78 b7 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001daa2:	83 c4 10             	add    esp,0x10
c001daa5:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001daaa:	85 c0                	test   eax,eax
c001daac:	74 0a                	je     c001dab8 <ACPI::close(int, int, void*)+0xc8>
c001daae:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001dab3:	ff d0                	call   eax
c001dab5:	8d 76 00             	lea    esi,[esi+0x0]
c001dab8:	83 ec 0c             	sub    esp,0xc
c001dabb:	68 24 23 03 c0       	push   0xc0032324
c001dac0:	e8 55 b7 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001dac5:	83 c4 10             	add    esp,0x10
c001dac8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001dacd:	8d 76 00             	lea    esi,[esi+0x0]
c001dad0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dad5:	83 e0 02             	and    eax,0x2
c001dad8:	74 1e                	je     c001daf8 <ACPI::close(int, int, void*)+0x108>
c001dada:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001dae1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dae5:	89 c2                	mov    edx,eax
c001dae7:	ec                   	in     al,dx
c001dae8:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001daec:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001daf0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daf4:	eb da                	jmp    c001dad0 <ACPI::close(int, int, void*)+0xe0>
c001daf6:	66 90                	xchg   ax,ax
c001daf8:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001daff:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001db04:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001db08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db0c:	ee                   	out    dx,al
c001db0d:	8d 76 00             	lea    esi,[esi+0x0]
c001db10:	83 ec 0c             	sub    esp,0xc
c001db13:	68 36 23 03 c0       	push   0xc0032336
c001db18:	e8 fd b6 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001db1d:	83 c4 10             	add    esp,0x10
c001db20:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001db25:	8d 76 00             	lea    esi,[esi+0x0]
c001db28:	83 c4 1c             	add    esp,0x1c
c001db2b:	c3                   	ret    

c001db2c <findRSDP()>:
c001db2c:	83 ec 1c             	sub    esp,0x1c
c001db2f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db34:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db3a:	83 e0 04             	and    eax,0x4
c001db3d:	0f b6 c0             	movzx  eax,al
c001db40:	85 c0                	test   eax,eax
c001db42:	75 08                	jne    c001db4c <findRSDP()+0x20>
c001db44:	b8 00 00 00 00       	mov    eax,0x0
c001db49:	eb 75                	jmp    c001dbc0 <findRSDP()+0x94>
c001db4b:	90                   	nop
c001db4c:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001db51:	3d ff 07 00 00       	cmp    eax,0x7ff
c001db56:	7f 1c                	jg     c001db74 <findRSDP()+0x48>
c001db58:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db5d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001db63:	83 e2 fb             	and    edx,0xfffffffb
c001db66:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001db6c:	b8 00 00 00 00       	mov    eax,0x0
c001db71:	eb 4d                	jmp    c001dbc0 <findRSDP()+0x94>
c001db73:	90                   	nop
c001db74:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001db7c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001db84:	77 32                	ja     c001dbb8 <findRSDP()+0x8c>
c001db86:	83 ec 04             	sub    esp,0x4
c001db89:	6a 08                	push   0x8
c001db8b:	68 45 23 03 c0       	push   0xc0032345
c001db90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001db94:	e8 e7 27 fe ff       	call   c0000380 <memcmp>
c001db99:	83 c4 10             	add    esp,0x10
c001db9c:	85 c0                	test   eax,eax
c001db9e:	0f 94 c0             	sete   al
c001dba1:	0f b6 c0             	movzx  eax,al
c001dba4:	85 c0                	test   eax,eax
c001dba6:	74 08                	je     c001dbb0 <findRSDP()+0x84>
c001dba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbac:	eb 12                	jmp    c001dbc0 <findRSDP()+0x94>
c001dbae:	66 90                	xchg   ax,ax
c001dbb0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dbb5:	eb c5                	jmp    c001db7c <findRSDP()+0x50>
c001dbb7:	90                   	nop
c001dbb8:	b8 00 00 00 00       	mov    eax,0x0
c001dbbd:	8d 76 00             	lea    esi,[esi+0x0]
c001dbc0:	83 c4 1c             	add    esp,0x1c
c001dbc3:	c3                   	ret    

c001dbc4 <loadACPITables(unsigned char*)>:
c001dbc4:	57                   	push   edi
c001dbc5:	56                   	push   esi
c001dbc6:	53                   	push   ebx
c001dbc7:	83 ec 60             	sub    esp,0x60
c001dbca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dbcf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dbd5:	83 e0 04             	and    eax,0x4
c001dbd8:	0f b6 c0             	movzx  eax,al
c001dbdb:	85 c0                	test   eax,eax
c001dbdd:	0f 84 41 02 00 00    	je     c001de24 <loadACPITables(unsigned char*)+0x260>
c001dbe3:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001dbe8:	0f b6 c0             	movzx  eax,al
c001dbeb:	85 c0                	test   eax,eax
c001dbed:	74 79                	je     c001dc68 <loadACPITables(unsigned char*)+0xa4>
c001dbef:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbf3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001dbf7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001dbfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dbfe:	83 e8 24             	sub    eax,0x24
c001dc01:	c1 e8 03             	shr    eax,0x3
c001dc04:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dc08:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001dc10:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc14:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001dc18:	0f 8d ba 00 00 00    	jge    c001dcd8 <loadACPITables(unsigned char*)+0x114>
c001dc1e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc22:	83 c0 24             	add    eax,0x24
c001dc25:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001dc29:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc2d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dc31:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001dc35:	c1 e0 03             	shl    eax,0x3
c001dc38:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001dc3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dc40:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dc43:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc45:	89 c1                	mov    ecx,eax
c001dc47:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc4c:	8d 50 01             	lea    edx,[eax+0x1]
c001dc4f:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc55:	89 ca                	mov    edx,ecx
c001dc57:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc5e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dc63:	eb ab                	jmp    c001dc10 <loadACPITables(unsigned char*)+0x4c>
c001dc65:	8d 76 00             	lea    esi,[esi+0x0]
c001dc68:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dc70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dc74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dc77:	83 e8 24             	sub    eax,0x24
c001dc7a:	c1 e8 02             	shr    eax,0x2
c001dc7d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dc81:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dc89:	8d 76 00             	lea    esi,[esi+0x0]
c001dc8c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dc90:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dc94:	7d 42                	jge    c001dcd8 <loadACPITables(unsigned char*)+0x114>
c001dc96:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dc9a:	83 c0 24             	add    eax,0x24
c001dc9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dca1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dca5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dca9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dcad:	c1 e0 02             	shl    eax,0x2
c001dcb0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dcb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dcb8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dcba:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dcbf:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc2:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dcc8:	89 ca                	mov    edx,ecx
c001dcca:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dcd1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dcd6:	eb b4                	jmp    c001dc8c <loadACPITables(unsigned char*)+0xc8>
c001dcd8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dce0:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dce5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dce9:	0f 8d 39 01 00 00    	jge    c001de28 <loadACPITables(unsigned char*)+0x264>
c001dcef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dcf3:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dcfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dcfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd02:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dd06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd0a:	25 ff 0f 00 00       	and    eax,0xfff
c001dd0f:	89 c6                	mov    esi,eax
c001dd11:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd17:	83 ec 0c             	sub    esp,0xc
c001dd1a:	6a 01                	push   0x1
c001dd1c:	e8 e4 a1 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c001dd21:	83 c4 10             	add    esp,0x10
c001dd24:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd2e:	83 ec 0c             	sub    esp,0xc
c001dd31:	6a 01                	push   0x1
c001dd33:	6a 01                	push   0x1
c001dd35:	50                   	push   eax
c001dd36:	52                   	push   edx
c001dd37:	53                   	push   ebx
c001dd38:	e8 db aa ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd3d:	83 c4 20             	add    esp,0x20
c001dd40:	09 f0                	or     eax,esi
c001dd42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd46:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd4a:	c1 e0 03             	shl    eax,0x3
c001dd4d:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dd52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dd56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dd5e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dd66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd6a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dd6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dd7a:	89 c6                	mov    esi,eax
c001dd7c:	89 d7                	mov    edi,edx
c001dd7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dd80:	89 c8                	mov    eax,ecx
c001dd82:	89 fa                	mov    edx,edi
c001dd84:	89 f3                	mov    ebx,esi
c001dd86:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dd8a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dd8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dd99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dd9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dda1:	05 00 10 00 00       	add    eax,0x1000
c001dda6:	c1 e8 0c             	shr    eax,0xc
c001dda9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ddad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb9:	25 ff 0f 00 00       	and    eax,0xfff
c001ddbe:	89 c6                	mov    esi,eax
c001ddc0:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001ddc6:	83 ec 0c             	sub    esp,0xc
c001ddc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ddcd:	e8 33 a1 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c001ddd2:	83 c4 10             	add    esp,0x10
c001ddd5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ddd9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dddf:	83 ec 0c             	sub    esp,0xc
c001dde2:	6a 01                	push   0x1
c001dde4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dde8:	50                   	push   eax
c001dde9:	52                   	push   edx
c001ddea:	53                   	push   ebx
c001ddeb:	e8 28 aa ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ddf0:	83 c4 20             	add    esp,0x20
c001ddf3:	09 f0                	or     eax,esi
c001ddf5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddfd:	83 ec 0c             	sub    esp,0xc
c001de00:	50                   	push   eax
c001de01:	e8 13 a4 ff ff       	call   c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c001de06:	83 c4 10             	add    esp,0x10
c001de09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001de0d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001de11:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001de18:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001de1d:	e9 be fe ff ff       	jmp    c001dce0 <loadACPITables(unsigned char*)+0x11c>
c001de22:	66 90                	xchg   ax,ax
c001de24:	90                   	nop
c001de25:	8d 76 00             	lea    esi,[esi+0x0]
c001de28:	83 c4 60             	add    esp,0x60
c001de2b:	5b                   	pop    ebx
c001de2c:	5e                   	pop    esi
c001de2d:	5f                   	pop    edi
c001de2e:	c3                   	ret    
c001de2f:	90                   	nop

c001de30 <findRSDT(unsigned char*)>:
c001de30:	57                   	push   edi
c001de31:	56                   	push   esi
c001de32:	53                   	push   ebx
c001de33:	83 ec 50             	sub    esp,0x50
c001de36:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001de3b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001de41:	83 e0 04             	and    eax,0x4
c001de44:	0f b6 c0             	movzx  eax,al
c001de47:	85 c0                	test   eax,eax
c001de49:	75 0d                	jne    c001de58 <findRSDT(unsigned char*)+0x28>
c001de4b:	b8 00 00 00 00       	mov    eax,0x0
c001de50:	e9 2b 01 00 00       	jmp    c001df80 <findRSDT(unsigned char*)+0x150>
c001de55:	8d 76 00             	lea    esi,[esi+0x0]
c001de58:	89 e0                	mov    eax,esp
c001de5a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001de5e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001de62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001de66:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001de6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001de76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de7a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de7e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001de82:	89 c6                	mov    esi,eax
c001de84:	89 d7                	mov    edi,edx
c001de86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de88:	89 c8                	mov    eax,ecx
c001de8a:	89 fa                	mov    edx,edi
c001de8c:	89 f3                	mov    ebx,esi
c001de8e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001de92:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001de96:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001de9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001de9e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001dea2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001deaa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001deb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001debe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001dec2:	25 ff 0f 00 00       	and    eax,0xfff
c001dec7:	89 c6                	mov    esi,eax
c001dec9:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001decf:	83 ec 0c             	sub    esp,0xc
c001ded2:	6a 02                	push   0x2
c001ded4:	e8 2c a0 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c001ded9:	83 c4 10             	add    esp,0x10
c001dedc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dee0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dee6:	83 ec 0c             	sub    esp,0xc
c001dee9:	6a 01                	push   0x1
c001deeb:	6a 02                	push   0x2
c001deed:	50                   	push   eax
c001deee:	52                   	push   edx
c001deef:	53                   	push   ebx
c001def0:	e8 23 a9 ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001def5:	83 c4 20             	add    esp,0x20
c001def8:	09 f0                	or     eax,esi
c001defa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001defe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df02:	25 ff 0f 00 00       	and    eax,0xfff
c001df07:	89 c6                	mov    esi,eax
c001df09:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001df0f:	83 ec 0c             	sub    esp,0xc
c001df12:	6a 02                	push   0x2
c001df14:	e8 ec 9f ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c001df19:	83 c4 10             	add    esp,0x10
c001df1c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001df20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001df26:	83 ec 0c             	sub    esp,0xc
c001df29:	6a 01                	push   0x1
c001df2b:	6a 02                	push   0x2
c001df2d:	50                   	push   eax
c001df2e:	52                   	push   edx
c001df2f:	53                   	push   ebx
c001df30:	e8 e3 a8 ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001df35:	83 c4 20             	add    esp,0x20
c001df38:	09 f0                	or     eax,esi
c001df3a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001df3e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df43:	85 c0                	test   eax,eax
c001df45:	75 11                	jne    c001df58 <findRSDT(unsigned char*)+0x128>
c001df47:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001df4e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001df52:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df56:	eb 24                	jmp    c001df7c <findRSDT(unsigned char*)+0x14c>
c001df58:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001df5d:	83 f8 02             	cmp    eax,0x2
c001df60:	75 12                	jne    c001df74 <findRSDT(unsigned char*)+0x144>
c001df62:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001df69:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001df6d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001df71:	eb 09                	jmp    c001df7c <findRSDT(unsigned char*)+0x14c>
c001df73:	90                   	nop
c001df74:	b8 00 00 00 00       	mov    eax,0x0
c001df79:	eb 05                	jmp    c001df80 <findRSDT(unsigned char*)+0x150>
c001df7b:	90                   	nop
c001df7c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001df80:	83 c4 50             	add    esp,0x50
c001df83:	5b                   	pop    ebx
c001df84:	5e                   	pop    esi
c001df85:	5f                   	pop    edi
c001df86:	c3                   	ret    
c001df87:	90                   	nop

c001df88 <findDataTable(unsigned char*, char*)>:
c001df88:	83 ec 1c             	sub    esp,0x1c
c001df8b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df90:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df96:	83 e0 04             	and    eax,0x4
c001df99:	0f b6 c0             	movzx  eax,al
c001df9c:	85 c0                	test   eax,eax
c001df9e:	75 08                	jne    c001dfa8 <findDataTable(unsigned char*, char*)+0x20>
c001dfa0:	b8 00 00 00 00       	mov    eax,0x0
c001dfa5:	eb 5d                	jmp    c001e004 <findDataTable(unsigned char*, char*)+0x7c>
c001dfa7:	90                   	nop
c001dfa8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001dfb0:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dfb5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001dfb9:	7d 41                	jge    c001dffc <findDataTable(unsigned char*, char*)+0x74>
c001dfbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfbf:	c1 e0 03             	shl    eax,0x3
c001dfc2:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dfc7:	83 ec 04             	sub    esp,0x4
c001dfca:	6a 04                	push   0x4
c001dfcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfd0:	50                   	push   eax
c001dfd1:	e8 aa 23 fe ff       	call   c0000380 <memcmp>
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	85 c0                	test   eax,eax
c001dfdb:	0f 94 c0             	sete   al
c001dfde:	0f b6 c0             	movzx  eax,al
c001dfe1:	85 c0                	test   eax,eax
c001dfe3:	74 0f                	je     c001dff4 <findDataTable(unsigned char*, char*)+0x6c>
c001dfe5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dfe9:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dff0:	eb 12                	jmp    c001e004 <findDataTable(unsigned char*, char*)+0x7c>
c001dff2:	66 90                	xchg   ax,ax
c001dff4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001dff9:	eb b5                	jmp    c001dfb0 <findDataTable(unsigned char*, char*)+0x28>
c001dffb:	90                   	nop
c001dffc:	b8 00 00 00 00       	mov    eax,0x0
c001e001:	8d 76 00             	lea    esi,[esi+0x0]
c001e004:	83 c4 1c             	add    esp,0x1c
c001e007:	c3                   	ret    

c001e008 <scanMADT()>:
c001e008:	53                   	push   ebx
c001e009:	83 ec 38             	sub    esp,0x38
c001e00c:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001e011:	25 00 04 00 00       	and    eax,0x400
c001e016:	74 14                	je     c001e02c <scanMADT()+0x24>
c001e018:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e01d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e023:	83 e2 fb             	and    edx,0xfffffffb
c001e026:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e02c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e031:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e037:	83 e0 04             	and    eax,0x4
c001e03a:	0f b6 c0             	movzx  eax,al
c001e03d:	85 c0                	test   eax,eax
c001e03f:	0f 84 6b 04 00 00    	je     c001e4b0 <scanMADT()+0x4a8>
c001e045:	e8 e2 fa ff ff       	call   c001db2c <findRSDP()>
c001e04a:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001e04f:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e054:	85 c0                	test   eax,eax
c001e056:	75 1c                	jne    c001e074 <scanMADT()+0x6c>
c001e058:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e05d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e063:	83 e2 fb             	and    edx,0xfffffffb
c001e066:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e06c:	e9 47 04 00 00       	jmp    c001e4b8 <scanMADT()+0x4b0>
c001e071:	8d 76 00             	lea    esi,[esi+0x0]
c001e074:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001e079:	83 ec 0c             	sub    esp,0xc
c001e07c:	50                   	push   eax
c001e07d:	e8 ae fd ff ff       	call   c001de30 <findRSDT(unsigned char*)>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001e08a:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e08f:	85 c0                	test   eax,eax
c001e091:	75 19                	jne    c001e0ac <scanMADT()+0xa4>
c001e093:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e098:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e09e:	83 e2 fb             	and    edx,0xfffffffb
c001e0a1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0a7:	e9 0c 04 00 00       	jmp    c001e4b8 <scanMADT()+0x4b0>
c001e0ac:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	50                   	push   eax
c001e0b5:	e8 0a fb ff ff       	call   c001dbc4 <loadACPITables(unsigned char*)>
c001e0ba:	83 c4 10             	add    esp,0x10
c001e0bd:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e0c2:	83 ec 08             	sub    esp,0x8
c001e0c5:	68 4e 23 03 c0       	push   0xc003234e
c001e0ca:	50                   	push   eax
c001e0cb:	e8 b8 fe ff ff       	call   c001df88 <findDataTable(unsigned char*, char*)>
c001e0d0:	83 c4 10             	add    esp,0x10
c001e0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e0d7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e0dc:	75 1a                	jne    c001e0f8 <scanMADT()+0xf0>
c001e0de:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e0e3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e0e9:	83 e2 fe             	and    edx,0xfffffffe
c001e0ec:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e0f2:	e9 c1 03 00 00       	jmp    c001e4b8 <scanMADT()+0x4b0>
c001e0f7:	90                   	nop
c001e0f8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e100:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e104:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e107:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e10b:	0f 87 a7 03 00 00    	ja     c001e4b8 <scanMADT()+0x4b0>
c001e111:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e119:	0f 87 99 03 00 00    	ja     c001e4b8 <scanMADT()+0x4b0>
c001e11f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e123:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e127:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e12b:	8d 50 01             	lea    edx,[eax+0x1]
c001e12e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e132:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e136:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e13a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e13e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e142:	8d 50 01             	lea    edx,[eax+0x1]
c001e145:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e149:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e14d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e151:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e155:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e15a:	83 f8 02             	cmp    eax,0x2
c001e15d:	0f 86 51 03 00 00    	jbe    c001e4b4 <scanMADT()+0x4ac>
c001e163:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e168:	85 c0                	test   eax,eax
c001e16a:	75 58                	jne    c001e1c4 <scanMADT()+0x1bc>
c001e16c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e170:	8d 50 01             	lea    edx,[eax+0x1]
c001e173:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e177:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e17d:	0f b6 d2             	movzx  edx,dl
c001e180:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e184:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e188:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e18e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e192:	8d 50 01             	lea    edx,[eax+0x1]
c001e195:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e199:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e19f:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e1a2:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e1a8:	0f b6 d2             	movzx  edx,dl
c001e1ab:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1af:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1b3:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e1b9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1be:	e9 d9 02 00 00       	jmp    c001e49c <scanMADT()+0x494>
c001e1c3:	90                   	nop
c001e1c4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e1c9:	83 f8 01             	cmp    eax,0x1
c001e1cc:	0f 85 1a 01 00 00    	jne    c001e2ec <scanMADT()+0x2e4>
c001e1d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1d6:	8d 50 01             	lea    edx,[eax+0x1]
c001e1d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e1dd:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e1e3:	0f b6 d2             	movzx  edx,dl
c001e1e6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e1ea:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e1ee:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e1f4:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e1f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e201:	01 d0                	add    eax,edx
c001e203:	83 c0 2c             	add    eax,0x2c
c001e206:	8a 00                	mov    al,BYTE PTR [eax]
c001e208:	0f b6 d0             	movzx  edx,al
c001e20b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e20f:	8d 48 01             	lea    ecx,[eax+0x1]
c001e212:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e216:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e21a:	0f b6 c0             	movzx  eax,al
c001e21d:	c1 e0 08             	shl    eax,0x8
c001e220:	89 d1                	mov    ecx,edx
c001e222:	09 c1                	or     ecx,eax
c001e224:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e228:	8d 50 02             	lea    edx,[eax+0x2]
c001e22b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e22f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e233:	0f b6 c0             	movzx  eax,al
c001e236:	c1 e0 10             	shl    eax,0x10
c001e239:	09 c1                	or     ecx,eax
c001e23b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e23f:	8d 50 03             	lea    edx,[eax+0x3]
c001e242:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e246:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e24a:	0f b6 c0             	movzx  eax,al
c001e24d:	c1 e0 18             	shl    eax,0x18
c001e250:	09 c1                	or     ecx,eax
c001e252:	89 ca                	mov    edx,ecx
c001e254:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e259:	0f b6 c0             	movzx  eax,al
c001e25c:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e263:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e268:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e26c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e270:	01 d0                	add    eax,edx
c001e272:	83 c0 2c             	add    eax,0x2c
c001e275:	8a 00                	mov    al,BYTE PTR [eax]
c001e277:	0f b6 d0             	movzx  edx,al
c001e27a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e27e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e281:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e285:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e289:	0f b6 c0             	movzx  eax,al
c001e28c:	c1 e0 08             	shl    eax,0x8
c001e28f:	89 d1                	mov    ecx,edx
c001e291:	09 c1                	or     ecx,eax
c001e293:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e297:	8d 50 02             	lea    edx,[eax+0x2]
c001e29a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e29e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2a2:	0f b6 c0             	movzx  eax,al
c001e2a5:	c1 e0 10             	shl    eax,0x10
c001e2a8:	09 c1                	or     ecx,eax
c001e2aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2ae:	8d 50 03             	lea    edx,[eax+0x3]
c001e2b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2b9:	0f b6 c0             	movzx  eax,al
c001e2bc:	c1 e0 18             	shl    eax,0x18
c001e2bf:	09 c1                	or     ecx,eax
c001e2c1:	89 ca                	mov    edx,ecx
c001e2c3:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2c8:	0f b6 c0             	movzx  eax,al
c001e2cb:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e2d2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2d7:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e2dc:	83 c0 01             	add    eax,0x1
c001e2df:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e2e4:	e9 b3 01 00 00       	jmp    c001e49c <scanMADT()+0x494>
c001e2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001e2ec:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e2f1:	83 f8 02             	cmp    eax,0x2
c001e2f4:	0f 85 ea 00 00 00    	jne    c001e3e4 <scanMADT()+0x3dc>
c001e2fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2fe:	8d 50 01             	lea    edx,[eax+0x1]
c001e301:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e305:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e309:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e30d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e311:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e315:	8d 50 01             	lea    edx,[eax+0x1]
c001e318:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e31c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e320:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e324:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e328:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e32c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e330:	01 d0                	add    eax,edx
c001e332:	83 c0 2c             	add    eax,0x2c
c001e335:	8a 00                	mov    al,BYTE PTR [eax]
c001e337:	0f b6 d0             	movzx  edx,al
c001e33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e33e:	8d 48 01             	lea    ecx,[eax+0x1]
c001e341:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e345:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e349:	0f b6 c0             	movzx  eax,al
c001e34c:	c1 e0 08             	shl    eax,0x8
c001e34f:	89 d1                	mov    ecx,edx
c001e351:	09 c1                	or     ecx,eax
c001e353:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e357:	8d 50 02             	lea    edx,[eax+0x2]
c001e35a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e35e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e362:	0f b6 c0             	movzx  eax,al
c001e365:	c1 e0 10             	shl    eax,0x10
c001e368:	09 c1                	or     ecx,eax
c001e36a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e36e:	8d 50 03             	lea    edx,[eax+0x3]
c001e371:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e375:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e379:	0f b6 c0             	movzx  eax,al
c001e37c:	c1 e0 18             	shl    eax,0x18
c001e37f:	09 c8                	or     eax,ecx
c001e381:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e385:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e38a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e38e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e392:	01 d0                	add    eax,edx
c001e394:	83 c0 2c             	add    eax,0x2c
c001e397:	8a 00                	mov    al,BYTE PTR [eax]
c001e399:	0f b6 d0             	movzx  edx,al
c001e39c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3a0:	8d 48 01             	lea    ecx,[eax+0x1]
c001e3a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e3a7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e3ab:	0f b6 c0             	movzx  eax,al
c001e3ae:	c1 e0 08             	shl    eax,0x8
c001e3b1:	09 d0                	or     eax,edx
c001e3b3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e3b8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e3bd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3c6:	88 90 68 3b 03 c0    	mov    BYTE PTR [eax-0x3ffcc498],dl
c001e3cc:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e3d1:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c001e3d6:	66 89 94 00 c0 f6 03 c0 	mov    WORD PTR [eax+eax*1-0x3ffc0940],dx
c001e3de:	e9 b9 00 00 00       	jmp    c001e49c <scanMADT()+0x494>
c001e3e3:	90                   	nop
c001e3e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3e9:	83 f8 04             	cmp    eax,0x4
c001e3ec:	0f 85 9a 00 00 00    	jne    c001e48c <scanMADT()+0x484>
c001e3f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e3f6:	8d 50 01             	lea    edx,[eax+0x1]
c001e3f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e401:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e405:	0f b6 c0             	movzx  eax,al
c001e408:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e40c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e410:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e414:	01 d0                	add    eax,edx
c001e416:	83 c0 2c             	add    eax,0x2c
c001e419:	8a 00                	mov    al,BYTE PTR [eax]
c001e41b:	0f b6 d0             	movzx  edx,al
c001e41e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e422:	8d 48 01             	lea    ecx,[eax+0x1]
c001e425:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e429:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e42d:	0f b6 c0             	movzx  eax,al
c001e430:	c1 e0 08             	shl    eax,0x8
c001e433:	09 d0                	or     eax,edx
c001e435:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e439:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e43e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e442:	8d 50 01             	lea    edx,[eax+0x1]
c001e445:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e449:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e44d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e451:	0f b6 c0             	movzx  eax,al
c001e454:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45c:	c1 e0 08             	shl    eax,0x8
c001e45f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e463:	89 c1                	mov    ecx,eax
c001e465:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e469:	c1 e0 18             	shl    eax,0x18
c001e46c:	89 c3                	mov    ebx,eax
c001e46e:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e473:	8d 50 01             	lea    edx,[eax+0x1]
c001e476:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e47c:	09 d9                	or     ecx,ebx
c001e47e:	89 ca                	mov    edx,ecx
c001e480:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e487:	eb 13                	jmp    c001e49c <scanMADT()+0x494>
c001e489:	8d 76 00             	lea    esi,[esi+0x0]
c001e48c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e491:	83 f8 05             	cmp    eax,0x5
c001e494:	75 06                	jne    c001e49c <scanMADT()+0x494>
c001e496:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e49b:	90                   	nop
c001e49c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e4a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4a5:	01 d0                	add    eax,edx
c001e4a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e4ab:	e9 50 fc ff ff       	jmp    c001e100 <scanMADT()+0xf8>
c001e4b0:	90                   	nop
c001e4b1:	eb 05                	jmp    c001e4b8 <scanMADT()+0x4b0>
c001e4b3:	90                   	nop
c001e4b4:	90                   	nop
c001e4b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e4b8:	83 c4 38             	add    esp,0x38
c001e4bb:	5b                   	pop    ebx
c001e4bc:	c3                   	ret    
c001e4bd:	90                   	nop
c001e4be:	66 90                	xchg   ax,ax

c001e4c0 <ACPI::ACPI()>:
c001e4c0:	83 ec 0c             	sub    esp,0xc
c001e4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4c7:	83 ec 08             	sub    esp,0x8
c001e4ca:	68 53 23 03 c0       	push   0xc0032353
c001e4cf:	50                   	push   eax
c001e4d0:	e8 3d cf ff ff       	call   c001b412 <Device::Device(char const*)>
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	ba 60 25 03 c0       	mov    edx,0xc0032560
c001e4dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e1:	89 10                	mov    DWORD PTR [eax],edx
c001e4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e500:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e50a:	e8 f9 fa ff ff       	call   c001e008 <scanMADT()>
c001e50f:	90                   	nop
c001e510:	83 c4 0c             	add    esp,0xc
c001e513:	c3                   	ret    

c001e514 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e514:	83 ec 2c             	sub    esp,0x2c
c001e517:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e51b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e51f:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e523:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e527:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e52c:	88 c8                	mov    al,cl
c001e52e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e532:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e537:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e53f:	90                   	nop
c001e540:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e544:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e54a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e54e:	0f 8d b0 00 00 00    	jge    c001e604 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e554:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e558:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e55c:	83 c2 2a             	add    edx,0x2a
c001e55f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e563:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e568:	0f b7 c0             	movzx  eax,ax
c001e56b:	39 c2                	cmp    edx,eax
c001e56d:	0f 85 85 00 00 00    	jne    c001e5f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e573:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e577:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e57b:	83 c2 2a             	add    edx,0x2a
c001e57e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e582:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e587:	0f b6 c0             	movzx  eax,al
c001e58a:	39 c2                	cmp    edx,eax
c001e58c:	75 6a                	jne    c001e5f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e58e:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e593:	85 c0                	test   eax,eax
c001e595:	74 3d                	je     c001e5d4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e597:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e59b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e59f:	83 c2 2a             	add    edx,0x2a
c001e5a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e5a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e5aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5ad:	39 c2                	cmp    edx,eax
c001e5af:	74 13                	je     c001e5c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e5b1:	83 ec 0c             	sub    esp,0xc
c001e5b4:	68 e0 24 03 c0       	push   0xc00324e0
c001e5b9:	e8 e4 1b 00 00       	call   c00201a2 <KePanic(char const*)>
c001e5be:	83 c4 10             	add    esp,0x10
c001e5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5c4:	83 ec 0c             	sub    esp,0xc
c001e5c7:	68 58 23 03 c0       	push   0xc0032358
c001e5cc:	e8 d1 1b 00 00       	call   c00201a2 <KePanic(char const*)>
c001e5d1:	83 c4 10             	add    esp,0x10
c001e5d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e5d8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e5dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5e0:	83 c2 2a             	add    edx,0x2a
c001e5e3:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e5e7:	8b 02                	mov    eax,DWORD PTR [edx]
c001e5e9:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e5ec:	89 01                	mov    DWORD PTR [ecx],eax
c001e5ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e5f1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e5f6:	66 90                	xchg   ax,ax
c001e5f8:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e5fd:	e9 3e ff ff ff       	jmp    c001e540 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e602:	66 90                	xchg   ax,ax
c001e604:	90                   	nop
c001e605:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e609:	83 c4 2c             	add    esp,0x2c
c001e60c:	c2 04 00             	ret    0x4
c001e60f:	90                   	nop

c001e610 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e610:	83 ec 1c             	sub    esp,0x1c
c001e613:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e617:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e61b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e61f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e624:	88 c8                	mov    al,cl
c001e626:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e62a:	88 d0                	mov    al,dl
c001e62c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e634:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e63a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e63e:	83 c2 2a             	add    edx,0x2a
c001e641:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e645:	88 4c d0 0f          	mov    BYTE PTR [eax+edx*8+0xf],cl
c001e649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e64d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e653:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e657:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e65a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e65e:	66 89 54 c8 0c       	mov    WORD PTR [eax+ecx*8+0xc],dx
c001e663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e667:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e66d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e671:	83 c0 01             	add    eax,0x1
c001e674:	88 c1                	mov    cl,al
c001e676:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e67a:	83 c2 2a             	add    edx,0x2a
c001e67d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e685:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e68b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e68f:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e692:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e696:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e69e:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6a4:	8d 50 01             	lea    edx,[eax+0x1]
c001e6a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6ab:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e6b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e6b5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e6bb:	3d 00 02 00 00       	cmp    eax,0x200
c001e6c0:	75 12                	jne    c001e6d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e6c2:	83 ec 0c             	sub    esp,0xc
c001e6c5:	68 67 23 03 c0       	push   0xc0032367
c001e6ca:	e8 d3 1a 00 00       	call   c00201a2 <KePanic(char const*)>
c001e6cf:	83 c4 10             	add    esp,0x10
c001e6d2:	66 90                	xchg   ax,ax
c001e6d4:	90                   	nop
c001e6d5:	83 c4 1c             	add    esp,0x1c
c001e6d8:	c3                   	ret    
c001e6d9:	90                   	nop
c001e6da:	66 90                	xchg   ax,ax

c001e6dc <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e6dc:	b8 00 00 00 00       	mov    eax,0x0
c001e6e1:	c3                   	ret    
c001e6e2:	66 90                	xchg   ax,ax

c001e6e4 <ACPI::detectPCI()>:
c001e6e4:	53                   	push   ebx
c001e6e5:	83 ec 28             	sub    esp,0x28
c001e6e8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6ed:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e6f2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e6f7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e6fd:	83 e0 04             	and    eax,0x4
c001e700:	0f b6 c0             	movzx  eax,al
c001e703:	85 c0                	test   eax,eax
c001e705:	74 2d                	je     c001e734 <ACPI::detectPCI()+0x50>
c001e707:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e70c:	83 ec 08             	sub    esp,0x8
c001e70f:	68 84 23 03 c0       	push   0xc0032384
c001e714:	50                   	push   eax
c001e715:	e8 6e f8 ff ff       	call   c001df88 <findDataTable(unsigned char*, char*)>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e721:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e726:	74 0c                	je     c001e734 <ACPI::detectPCI()+0x50>
c001e728:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e72d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e732:	66 90                	xchg   ax,ax
c001e734:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e73c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e740:	8a 00                	mov    al,BYTE PTR [eax]
c001e742:	0f b6 c0             	movzx  eax,al
c001e745:	83 f8 01             	cmp    eax,0x1
c001e748:	75 0e                	jne    c001e758 <ACPI::detectPCI()+0x74>
c001e74a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e74f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e754:	eb 2e                	jmp    c001e784 <ACPI::detectPCI()+0xa0>
c001e756:	66 90                	xchg   ax,ax
c001e758:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e75c:	8a 00                	mov    al,BYTE PTR [eax]
c001e75e:	0f b6 c0             	movzx  eax,al
c001e761:	83 f8 02             	cmp    eax,0x2
c001e764:	75 1e                	jne    c001e784 <ACPI::detectPCI()+0xa0>
c001e766:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e76b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e770:	85 c0                	test   eax,eax
c001e772:	74 10                	je     c001e784 <ACPI::detectPCI()+0xa0>
c001e774:	83 ec 0c             	sub    esp,0xc
c001e777:	68 10 25 03 c0       	push   0xc0032510
c001e77c:	e8 21 1a 00 00       	call   c00201a2 <KePanic(char const*)>
c001e781:	83 c4 10             	add    esp,0x10
c001e784:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e788:	83 f0 01             	xor    eax,0x1
c001e78b:	0f b6 c0             	movzx  eax,al
c001e78e:	85 c0                	test   eax,eax
c001e790:	74 46                	je     c001e7d8 <ACPI::detectPCI()+0xf4>
c001e792:	e8 99 19 fe ff       	call   c0000130 <manualPCIProbe>
c001e797:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e79b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e7a0:	75 0e                	jne    c001e7b0 <ACPI::detectPCI()+0xcc>
c001e7a2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7a7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e7ac:	eb 2a                	jmp    c001e7d8 <ACPI::detectPCI()+0xf4>
c001e7ae:	66 90                	xchg   ax,ax
c001e7b0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e7b5:	75 21                	jne    c001e7d8 <ACPI::detectPCI()+0xf4>
c001e7b7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e7bc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7c1:	85 c0                	test   eax,eax
c001e7c3:	74 13                	je     c001e7d8 <ACPI::detectPCI()+0xf4>
c001e7c5:	83 ec 0c             	sub    esp,0xc
c001e7c8:	68 10 25 03 c0       	push   0xc0032510
c001e7cd:	e8 d0 19 00 00       	call   c00201a2 <KePanic(char const*)>
c001e7d2:	83 c4 10             	add    esp,0x10
c001e7d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e7d8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e7dd:	85 c0                	test   eax,eax
c001e7df:	0f 84 87 00 00 00    	je     c001e86c <ACPI::detectPCI()+0x188>
c001e7e5:	83 ec 0c             	sub    esp,0xc
c001e7e8:	68 89 23 03 c0       	push   0xc0032389
c001e7ed:	e8 4f 12 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001e7f2:	83 c4 10             	add    esp,0x10
c001e7f5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e7fd:	83 ec 0c             	sub    esp,0xc
c001e800:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e804:	e8 da 7b ff ff       	call   c00163e3 <malloc>
c001e809:	83 c4 10             	add    esp,0x10
c001e80c:	89 c3                	mov    ebx,eax
c001e80e:	83 ec 0c             	sub    esp,0xc
c001e811:	53                   	push   ebx
c001e812:	e8 db b7 00 00       	call   c0029ff2 <PCI::PCI()>
c001e817:	83 c4 10             	add    esp,0x10
c001e81a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e81e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e822:	83 ec 08             	sub    esp,0x8
c001e825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e829:	50                   	push   eax
c001e82a:	e8 81 ca ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c001e82f:	83 c4 10             	add    esp,0x10
c001e832:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e836:	8b 00                	mov    eax,DWORD PTR [eax]
c001e838:	83 c0 08             	add    eax,0x8
c001e83b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e83d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e842:	85 d2                	test   edx,edx
c001e844:	74 0a                	je     c001e850 <ACPI::detectPCI()+0x16c>
c001e846:	ba 01 00 00 00       	mov    edx,0x1
c001e84b:	eb 0b                	jmp    c001e858 <ACPI::detectPCI()+0x174>
c001e84d:	8d 76 00             	lea    esi,[esi+0x0]
c001e850:	ba 02 00 00 00       	mov    edx,0x2
c001e855:	8d 76 00             	lea    esi,[esi+0x0]
c001e858:	6a 00                	push   0x0
c001e85a:	6a 00                	push   0x0
c001e85c:	52                   	push   edx
c001e85d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e861:	ff d0                	call   eax
c001e863:	83 c4 10             	add    esp,0x10
c001e866:	e9 91 00 00 00       	jmp    c001e8fc <ACPI::detectPCI()+0x218>
c001e86b:	90                   	nop
c001e86c:	83 ec 0c             	sub    esp,0xc
c001e86f:	68 a1 23 03 c0       	push   0xc00323a1
c001e874:	e8 c8 11 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001e879:	83 c4 10             	add    esp,0x10
c001e87c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e883:	83 ec 0c             	sub    esp,0xc
c001e886:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e88a:	e8 54 7b ff ff       	call   c00163e3 <malloc>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	89 c3                	mov    ebx,eax
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	53                   	push   ebx
c001e898:	e8 fd c2 00 00       	call   c002ab9a <IDE::IDE()>
c001e89d:	83 c4 10             	add    esp,0x10
c001e8a0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e8a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e8a8:	83 ec 08             	sub    esp,0x8
c001e8ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e8af:	50                   	push   eax
c001e8b0:	e8 fb c9 ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c001e8b5:	83 c4 10             	add    esp,0x10
c001e8b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8bc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e8c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ca:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e8d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8d7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e8e0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8e6:	83 c0 08             	add    eax,0x8
c001e8e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8eb:	6a 00                	push   0x0
c001e8ed:	6a 00                	push   0x0
c001e8ef:	6a 00                	push   0x0
c001e8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e8f5:	ff d0                	call   eax
c001e8f7:	83 c4 10             	add    esp,0x10
c001e8fa:	66 90                	xchg   ax,ax
c001e8fc:	90                   	nop
c001e8fd:	83 c4 28             	add    esp,0x28
c001e900:	5b                   	pop    ebx
c001e901:	c3                   	ret    
c001e902:	66 90                	xchg   ax,ax

c001e904 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e904:	83 ec 1c             	sub    esp,0x1c
c001e907:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e90b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e90e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e912:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e917:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e91c:	83 ec 08             	sub    esp,0x8
c001e91f:	52                   	push   edx
c001e920:	50                   	push   eax
c001e921:	e8 86 71 ff ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c001e926:	83 c4 10             	add    esp,0x10
c001e929:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e92d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e932:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e937:	83 ec 04             	sub    esp,0x4
c001e93a:	6a 01                	push   0x1
c001e93c:	52                   	push   edx
c001e93d:	50                   	push   eax
c001e93e:	e8 81 72 ff ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c001e943:	83 c4 10             	add    esp,0x10
c001e946:	90                   	nop
c001e947:	83 c4 1c             	add    esp,0x1c
c001e94a:	c3                   	ret    
c001e94b:	90                   	nop

c001e94c <ACPI::sleep()>:
c001e94c:	83 ec 0c             	sub    esp,0xc
c001e94f:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e954:	85 c0                	test   eax,eax
c001e956:	74 08                	je     c001e960 <ACPI::sleep()+0x14>
c001e958:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e95d:	ff d0                	call   eax
c001e95f:	90                   	nop
c001e960:	90                   	nop
c001e961:	83 c4 0c             	add    esp,0xc
c001e964:	c3                   	ret    
c001e965:	90                   	nop
c001e966:	66 90                	xchg   ax,ax

c001e968 <ACPI::open(int, int, void*)>:
c001e968:	55                   	push   ebp
c001e969:	89 e5                	mov    ebp,esp
c001e96b:	53                   	push   ebx
c001e96c:	81 ec 74 01 00 00    	sub    esp,0x174
c001e972:	83 ec 0c             	sub    esp,0xc
c001e975:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e978:	e8 67 fd ff ff       	call   c001e6e4 <ACPI::detectPCI()>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	68 38 25 03 c0       	push   0xc0032538
c001e988:	e8 b4 10 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001e98d:	83 c4 10             	add    esp,0x10
c001e990:	b8 4c 05 00 00       	mov    eax,0x54c
c001e995:	8a 00                	mov    al,BYTE PTR [eax]
c001e997:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c001e99a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001e99e:	83 f8 01             	cmp    eax,0x1
c001e9a1:	75 15                	jne    c001e9b8 <ACPI::open(int, int, void*)+0x50>
c001e9a3:	83 ec 0c             	sub    esp,0xc
c001e9a6:	68 b6 23 03 c0       	push   0xc00323b6
c001e9ab:	e8 d9 52 00 00       	call   c0023c89 <Thr::loadKernelSymbolTable(char const*)>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	eb 33                	jmp    c001e9e8 <ACPI::open(int, int, void*)+0x80>
c001e9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001e9b8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
c001e9bc:	3d bb 00 00 00       	cmp    eax,0xbb
c001e9c1:	75 15                	jne    c001e9d8 <ACPI::open(int, int, void*)+0x70>
c001e9c3:	83 ec 0c             	sub    esp,0xc
c001e9c6:	68 d4 23 03 c0       	push   0xc00323d4
c001e9cb:	e8 b9 52 00 00       	call   c0023c89 <Thr::loadKernelSymbolTable(char const*)>
c001e9d0:	83 c4 10             	add    esp,0x10
c001e9d3:	eb 13                	jmp    c001e9e8 <ACPI::open(int, int, void*)+0x80>
c001e9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	68 f2 23 03 c0       	push   0xc00323f2
c001e9e0:	e8 bd 17 00 00       	call   c00201a2 <KePanic(char const*)>
c001e9e5:	83 c4 10             	add    esp,0x10
c001e9e8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e9ec:	c7 45 cc 14 01 00 00 	mov    DWORD PTR [ebp-0x34],0x114
c001e9f3:	83 ec 0c             	sub    esp,0xc
c001e9f6:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
c001e9f9:	e8 e5 79 ff ff       	call   c00163e3 <malloc>
c001e9fe:	83 c4 10             	add    esp,0x10
c001ea01:	89 c3                	mov    ebx,eax
c001ea03:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ea08:	83 ec 04             	sub    esp,0x4
c001ea0b:	50                   	push   eax
c001ea0c:	68 0c 24 03 c0       	push   0xc003240c
c001ea11:	53                   	push   ebx
c001ea12:	e8 1b ba ff ff       	call   c001a432 <File::File(char const*, Process*)>
c001ea17:	83 c4 10             	add    esp,0x10
c001ea1a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001ea1d:	83 ec 08             	sub    esp,0x8
c001ea20:	6a 01                	push   0x1
c001ea22:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ea25:	e8 26 ba ff ff       	call   c001a450 <File::open(FileOpenMode)>
c001ea2a:	83 c4 10             	add    esp,0x10
c001ea2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ea30:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c001ea34:	75 12                	jne    c001ea48 <ACPI::open(int, int, void*)+0xe0>
c001ea36:	83 ec 0c             	sub    esp,0xc
c001ea39:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ea3c:	e8 6d ba ff ff       	call   c001a4ae <File::close()>
c001ea41:	83 c4 10             	add    esp,0x10
c001ea44:	eb 06                	jmp    c001ea4c <ACPI::open(int, int, void*)+0xe4>
c001ea46:	66 90                	xchg   ax,ax
c001ea48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001ea4c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c001ea50:	74 16                	je     c001ea68 <ACPI::open(int, int, void*)+0x100>
c001ea52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea55:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea57:	83 c0 08             	add    eax,0x8
c001ea5a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea5c:	83 ec 0c             	sub    esp,0xc
c001ea5f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001ea62:	ff d0                	call   eax
c001ea64:	83 c4 10             	add    esp,0x10
c001ea67:	90                   	nop
c001ea68:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea6b:	83 f0 01             	xor    eax,0x1
c001ea6e:	0f b6 c0             	movzx  eax,al
c001ea71:	85 c0                	test   eax,eax
c001ea73:	74 3b                	je     c001eab0 <ACPI::open(int, int, void*)+0x148>
c001ea75:	83 ec 0c             	sub    esp,0xc
c001ea78:	68 2a 24 03 c0       	push   0xc003242a
c001ea7d:	e8 bf 0f 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001ea82:	83 c4 10             	add    esp,0x10
c001ea85:	83 ec 04             	sub    esp,0x4
c001ea88:	6a 0c                	push   0xc
c001ea8a:	68 45 24 03 c0       	push   0xc0032445
c001ea8f:	68 56 24 03 c0       	push   0xc0032456
c001ea94:	e8 29 44 00 00       	call   c0022ec2 <Reg::readIntWithDefault(char*, char*, int)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea9f:	83 ec 0c             	sub    esp,0xc
c001eaa2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c001eaa5:	e8 80 96 ff ff       	call   c001812a <Virt::setupPageSwapping(int)>
c001eaaa:	83 c4 10             	add    esp,0x10
c001eaad:	8d 76 00             	lea    esi,[esi+0x0]
c001eab0:	83 ec 0c             	sub    esp,0xc
c001eab3:	68 84 0e 03 c0       	push   0xc0030e84
c001eab8:	e8 84 0f 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001eabd:	83 c4 10             	add    esp,0x10
c001eac0:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eac3:	83 ec 08             	sub    esp,0x8
c001eac6:	6a 13                	push   0x13
c001eac8:	50                   	push   eax
c001eac9:	e8 10 cb ff ff       	call   c001b5de <getDevicesOfType(DeviceType)>
c001eace:	83 c4 0c             	add    esp,0xc
c001ead1:	8d 76 00             	lea    esi,[esi+0x0]
c001ead4:	83 ec 0c             	sub    esp,0xc
c001ead7:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eada:	50                   	push   eax
c001eadb:	e8 00 03 01 00       	call   c002ede0 <LinkedList<Device>::isEmpty()>
c001eae0:	83 c4 10             	add    esp,0x10
c001eae3:	83 f0 01             	xor    eax,0x1
c001eae6:	0f b6 c0             	movzx  eax,al
c001eae9:	85 c0                	test   eax,eax
c001eaeb:	0f 84 1f 01 00 00    	je     c001ec10 <ACPI::open(int, int, void*)+0x2a8>
c001eaf1:	83 ec 0c             	sub    esp,0xc
c001eaf4:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eaf7:	50                   	push   eax
c001eaf8:	e8 ff 02 01 00       	call   c002edfc <LinkedList<Device>::getFirstElement()>
c001eafd:	83 c4 10             	add    esp,0x10
c001eb00:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001eb03:	83 ec 0c             	sub    esp,0xc
c001eb06:	8d 45 b8             	lea    eax,[ebp-0x48]
c001eb09:	50                   	push   eax
c001eb0a:	e8 f5 02 01 00       	call   c002ee04 <LinkedList<Device>::removeFirst()>
c001eb0f:	83 c4 10             	add    esp,0x10
c001eb12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001eb15:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001eb18:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c001eb1b:	b8 24 00 00 00       	mov    eax,0x24
c001eb20:	83 e0 fc             	and    eax,0xfffffffc
c001eb23:	89 c3                	mov    ebx,eax
c001eb25:	b8 00 00 00 00       	mov    eax,0x0
c001eb2a:	66 90                	xchg   ax,ax
c001eb2c:	8b 94 01 18 01 00 00 	mov    edx,DWORD PTR [ecx+eax*1+0x118]
c001eb33:	89 94 05 94 fe ff ff 	mov    DWORD PTR [ebp+eax*1-0x16c],edx
c001eb3a:	83 c0 04             	add    eax,0x4
c001eb3d:	39 d8                	cmp    eax,ebx
c001eb3f:	72 eb                	jb     c001eb2c <ACPI::open(int, int, void*)+0x1c4>
c001eb41:	83 ec 08             	sub    esp,0x8
c001eb44:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
c001eb4a:	50                   	push   eax
c001eb4b:	83 ec 24             	sub    esp,0x24
c001eb4e:	89 e1                	mov    ecx,esp
c001eb50:	b8 24 00 00 00       	mov    eax,0x24
c001eb55:	83 e0 fc             	and    eax,0xfffffffc
c001eb58:	89 c3                	mov    ebx,eax
c001eb5a:	b8 00 00 00 00       	mov    eax,0x0
c001eb5f:	90                   	nop
c001eb60:	8b 94 05 94 fe ff ff 	mov    edx,DWORD PTR [ebp+eax*1-0x16c]
c001eb67:	89 14 01             	mov    DWORD PTR [ecx+eax*1],edx
c001eb6a:	83 c0 04             	add    eax,0x4
c001eb6d:	39 d8                	cmp    eax,ebx
c001eb6f:	72 ef                	jb     c001eb60 <ACPI::open(int, int, void*)+0x1f8>
c001eb71:	e8 64 b9 00 00       	call   c002a4da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eb76:	83 c4 30             	add    esp,0x30
c001eb79:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001eb7c:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c001eb80:	0f 84 4e ff ff ff    	je     c001ead4 <ACPI::open(int, int, void*)+0x16c>
c001eb86:	c7 45 c8 14 01 00 00 	mov    DWORD PTR [ebp-0x38],0x114
c001eb8d:	83 ec 0c             	sub    esp,0xc
c001eb90:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
c001eb93:	e8 4b 78 ff ff       	call   c00163e3 <malloc>
c001eb98:	83 c4 10             	add    esp,0x10
c001eb9b:	89 c3                	mov    ebx,eax
c001eb9d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eba2:	83 ec 04             	sub    esp,0x4
c001eba5:	50                   	push   eax
c001eba6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001eba9:	53                   	push   ebx
c001ebaa:	e8 83 b8 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c001ebaf:	83 c4 10             	add    esp,0x10
c001ebb2:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c001ebb5:	83 ec 0c             	sub    esp,0xc
c001ebb8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ebbb:	e8 54 bb ff ff       	call   c001a714 <File::exists()>
c001ebc0:	83 c4 10             	add    esp,0x10
c001ebc3:	0f b6 c0             	movzx  eax,al
c001ebc6:	85 c0                	test   eax,eax
c001ebc8:	74 22                	je     c001ebec <ACPI::open(int, int, void*)+0x284>
c001ebca:	83 ec 08             	sub    esp,0x8
c001ebcd:	6a 01                	push   0x1
c001ebcf:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c001ebd2:	e8 34 5b 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001ebd7:	83 c4 10             	add    esp,0x10
c001ebda:	83 ec 08             	sub    esp,0x8
c001ebdd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001ebe0:	50                   	push   eax
c001ebe1:	e8 86 5d 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001ebe6:	83 c4 10             	add    esp,0x10
c001ebe9:	8d 76 00             	lea    esi,[esi+0x0]
c001ebec:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c001ebf0:	0f 84 de fe ff ff    	je     c001ead4 <ACPI::open(int, int, void*)+0x16c>
c001ebf6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ebf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebfb:	83 c0 08             	add    eax,0x8
c001ebfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec00:	83 ec 0c             	sub    esp,0xc
c001ec03:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
c001ec06:	ff d0                	call   eax
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	e9 c4 fe ff ff       	jmp    c001ead4 <ACPI::open(int, int, void*)+0x16c>
c001ec10:	83 ec 0c             	sub    esp,0xc
c001ec13:	8d 45 b8             	lea    eax,[ebp-0x48]
c001ec16:	50                   	push   eax
c001ec17:	e8 c0 01 01 00       	call   c002eddc <LinkedList<Device>::~LinkedList()>
c001ec1c:	83 c4 10             	add    esp,0x10
c001ec1f:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ec25:	83 ec 08             	sub    esp,0x8
c001ec28:	6a 01                	push   0x1
c001ec2a:	68 5d 24 03 c0       	push   0xc003245d
c001ec2f:	e8 d7 5a 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001ec34:	83 c4 10             	add    esp,0x10
c001ec37:	83 ec 08             	sub    esp,0x8
c001ec3a:	53                   	push   ebx
c001ec3b:	50                   	push   eax
c001ec3c:	e8 2b 5d 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ec49:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ec4f:	83 e0 04             	and    eax,0x4
c001ec52:	0f b6 c0             	movzx  eax,al
c001ec55:	85 c0                	test   eax,eax
c001ec57:	0f 84 e3 00 00 00    	je     c001ed40 <ACPI::open(int, int, void*)+0x3d8>
c001ec5d:	83 ec 0c             	sub    esp,0xc
c001ec60:	68 7a 24 03 c0       	push   0xc003247a
c001ec65:	e8 d7 0d 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001ec6a:	83 c4 10             	add    esp,0x10
c001ec6d:	c7 45 c4 14 01 00 00 	mov    DWORD PTR [ebp-0x3c],0x114
c001ec74:	83 ec 0c             	sub    esp,0xc
c001ec77:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
c001ec7a:	e8 64 77 ff ff       	call   c00163e3 <malloc>
c001ec7f:	83 c4 10             	add    esp,0x10
c001ec82:	89 c3                	mov    ebx,eax
c001ec84:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec89:	83 ec 04             	sub    esp,0x4
c001ec8c:	50                   	push   eax
c001ec8d:	68 97 24 03 c0       	push   0xc0032497
c001ec92:	53                   	push   ebx
c001ec93:	e8 9a b7 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c001ec98:	83 c4 10             	add    esp,0x10
c001ec9b:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c001ec9e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001eca2:	74 1c                	je     c001ecc0 <ACPI::open(int, int, void*)+0x358>
c001eca4:	83 ec 0c             	sub    esp,0xc
c001eca7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001ecaa:	e8 65 ba ff ff       	call   c001a714 <File::exists()>
c001ecaf:	83 c4 10             	add    esp,0x10
c001ecb2:	0f b6 c0             	movzx  eax,al
c001ecb5:	85 c0                	test   eax,eax
c001ecb7:	74 07                	je     c001ecc0 <ACPI::open(int, int, void*)+0x358>
c001ecb9:	b0 01                	mov    al,0x1
c001ecbb:	eb 07                	jmp    c001ecc4 <ACPI::open(int, int, void*)+0x35c>
c001ecbd:	8d 76 00             	lea    esi,[esi+0x0]
c001ecc0:	b0 00                	mov    al,0x0
c001ecc2:	66 90                	xchg   ax,ax
c001ecc4:	0f b6 c0             	movzx  eax,al
c001ecc7:	85 c0                	test   eax,eax
c001ecc9:	74 21                	je     c001ecec <ACPI::open(int, int, void*)+0x384>
c001eccb:	83 ec 08             	sub    esp,0x8
c001ecce:	6a 01                	push   0x1
c001ecd0:	68 97 24 03 c0       	push   0xc0032497
c001ecd5:	e8 31 5a 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c001ecda:	83 c4 10             	add    esp,0x10
c001ecdd:	83 ec 08             	sub    esp,0x8
c001ece0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ece3:	50                   	push   eax
c001ece4:	e8 83 5c 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c001ece9:	83 c4 10             	add    esp,0x10
c001ecec:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ecf0:	74 1e                	je     c001ed10 <ACPI::open(int, int, void*)+0x3a8>
c001ecf2:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c001ecf6:	74 18                	je     c001ed10 <ACPI::open(int, int, void*)+0x3a8>
c001ecf8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c001ecfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecfd:	83 c0 08             	add    eax,0x8
c001ed00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed02:	83 ec 0c             	sub    esp,0xc
c001ed05:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
c001ed08:	ff d0                	call   eax
c001ed0a:	83 c4 10             	add    esp,0x10
c001ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c001ed10:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ed15:	83 ec 08             	sub    esp,0x8
c001ed18:	68 b4 24 03 c0       	push   0xc00324b4
c001ed1d:	50                   	push   eax
c001ed1e:	e8 65 f2 ff ff       	call   c001df88 <findDataTable(unsigned char*, char*)>
c001ed23:	83 c4 10             	add    esp,0x10
c001ed26:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001ed29:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c001ed2d:	74 11                	je     c001ed40 <ACPI::open(int, int, void*)+0x3d8>
c001ed2f:	83 ec 08             	sub    esp,0x8
c001ed32:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ed35:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed38:	e8 c7 fb ff ff       	call   c001e904 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ed3d:	83 c4 10             	add    esp,0x10
c001ed40:	b8 00 00 00 00       	mov    eax,0x0
c001ed45:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed48:	c9                   	leave  
c001ed49:	c3                   	ret    

c001ed4a <CPU::close(int, int, void*)>:
c001ed4a:	31 c0                	xor    eax,eax
c001ed4c:	c3                   	ret    
c001ed4d:	90                   	nop

c001ed4e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ed4e:	60                   	pusha  
c001ed4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed57:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed5b:	9c                   	pushf  
c001ed5c:	fa                   	cli    
c001ed5d:	0f 09                	wbinvd 
c001ed5f:	0f 30                	wrmsr  
c001ed61:	9d                   	popf   
c001ed62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed66:	89 02                	mov    DWORD PTR [edx],eax
c001ed68:	61                   	popa   
c001ed69:	c3                   	ret    

c001ed6a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ed6a:	60                   	pusha  
c001ed6b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed6f:	9c                   	pushf  
c001ed70:	fa                   	cli    
c001ed71:	0f 09                	wbinvd 
c001ed73:	31 c0                	xor    eax,eax
c001ed75:	31 d2                	xor    edx,edx
c001ed77:	0f 32                	rdmsr  
c001ed79:	9d                   	popf   
c001ed7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed7e:	89 02                	mov    DWORD PTR [edx],eax
c001ed80:	61                   	popa   
c001ed81:	c3                   	ret    

c001ed82 <CPU::AMD_K6_writeback(int, int, int)>:
c001ed82:	56                   	push   esi
c001ed83:	53                   	push   ebx
c001ed84:	83 ec 10             	sub    esp,0x10
c001ed87:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ed8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed90:	75 5d                	jne    c001edef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ed92:	83 f8 08             	cmp    eax,0x8
c001ed95:	75 09                	jne    c001eda0 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ed97:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ed9c:	7e 13                	jle    c001edb1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001ed9e:	eb 30                	jmp    c001edd0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001eda0:	83 f8 06             	cmp    eax,0x6
c001eda3:	7c 4a                	jl     c001edef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001eda5:	83 f8 07             	cmp    eax,0x7
c001eda8:	7e 07                	jle    c001edb1 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001edaa:	83 f8 09             	cmp    eax,0x9
c001edad:	74 21                	je     c001edd0 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001edaf:	eb 3e                	jmp    c001edef <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001edb1:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001edb7:	89 e6                	mov    esi,esp
c001edb9:	56                   	push   esi
c001edba:	68 82 00 00 c0       	push   0xc0000082
c001edbf:	e8 a6 ff ff ff       	call   c001ed6a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001edc4:	c1 eb 15             	shr    ebx,0x15
c001edc7:	56                   	push   esi
c001edc8:	83 e3 7e             	and    ebx,0x7e
c001edcb:	6a 00                	push   0x0
c001edcd:	53                   	push   ebx
c001edce:	eb 12                	jmp    c001ede2 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001edd0:	89 e3                	mov    ebx,esp
c001edd2:	53                   	push   ebx
c001edd3:	68 82 00 00 c0       	push   0xc0000082
c001edd8:	e8 8d ff ff ff       	call   c001ed6a <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001eddd:	53                   	push   ebx
c001edde:	6a 00                	push   0x0
c001ede0:	6a 00                	push   0x0
c001ede2:	68 82 00 00 c0       	push   0xc0000082
c001ede7:	e8 62 ff ff ff       	call   c001ed4e <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001edec:	83 c4 18             	add    esp,0x18
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	5b                   	pop    ebx
c001edf3:	5e                   	pop    esi
c001edf4:	c3                   	ret    
c001edf5:	90                   	nop

c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001edf6:	55                   	push   ebp
c001edf7:	57                   	push   edi
c001edf8:	56                   	push   esi
c001edf9:	53                   	push   ebx
c001edfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001edfe:	39 05 78 3b 03 c0    	cmp    DWORD PTR ds:0xc0033b78,eax
c001ee04:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ee08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ee0c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ee10:	75 23                	jne    c001ee35 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001ee12:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001ee17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee1b:	89 06                	mov    DWORD PTR [esi],eax
c001ee1d:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001ee22:	89 07                	mov    DWORD PTR [edi],eax
c001ee24:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001ee29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ee2c:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ee31:	89 02                	mov    DWORD PTR [edx],eax
c001ee33:	eb 3f                	jmp    c001ee74 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ee35:	31 c9                	xor    ecx,ecx
c001ee37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee3b:	0f a2                	cpuid  
c001ee3d:	89 06                	mov    DWORD PTR [esi],eax
c001ee3f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee43:	89 1f                	mov    DWORD PTR [edi],ebx
c001ee45:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ee48:	89 10                	mov    DWORD PTR [eax],edx
c001ee4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee4e:	a3 78 3b 03 c0       	mov    ds:0xc0033b78,eax
c001ee53:	8b 06                	mov    eax,DWORD PTR [esi]
c001ee55:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ee5a:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee5c:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ee61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee64:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ee69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee6f:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ee74:	5b                   	pop    ebx
c001ee75:	5e                   	pop    esi
c001ee76:	5f                   	pop    edi
c001ee77:	5d                   	pop    ebp
c001ee78:	c3                   	ret    
c001ee79:	90                   	nop

c001ee7a <CPU::cpuidCheckEDX(unsigned int)>:
c001ee7a:	83 ec 10             	sub    esp,0x10
c001ee7d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee81:	50                   	push   eax
c001ee82:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee86:	50                   	push   eax
c001ee87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee8b:	50                   	push   eax
c001ee8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee90:	50                   	push   eax
c001ee91:	6a 01                	push   0x1
c001ee93:	e8 5e ff ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ee98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee9c:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001eea0:	0f 95 c0             	setne  al
c001eea3:	83 c4 24             	add    esp,0x24
c001eea6:	c3                   	ret    
c001eea7:	90                   	nop

c001eea8 <CPU::cpuidCheckECX(unsigned int)>:
c001eea8:	83 ec 10             	sub    esp,0x10
c001eeab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeaf:	50                   	push   eax
c001eeb0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb4:	50                   	push   eax
c001eeb5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb9:	50                   	push   eax
c001eeba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eebe:	50                   	push   eax
c001eebf:	6a 01                	push   0x1
c001eec1:	e8 30 ff ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eec6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eeca:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001eece:	0f 95 c0             	setne  al
c001eed1:	83 c4 24             	add    esp,0x24
c001eed4:	c3                   	ret    
c001eed5:	90                   	nop

c001eed6 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001eed6:	83 ec 10             	sub    esp,0x10
c001eed9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eedd:	50                   	push   eax
c001eede:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eee2:	50                   	push   eax
c001eee3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eee7:	50                   	push   eax
c001eee8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeec:	50                   	push   eax
c001eeed:	6a 07                	push   0x7
c001eeef:	e8 02 ff ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eef4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eef8:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001eefc:	0f 95 c0             	setne  al
c001eeff:	83 c4 24             	add    esp,0x24
c001ef02:	c3                   	ret    
c001ef03:	90                   	nop

c001ef04 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001ef04:	83 ec 10             	sub    esp,0x10
c001ef07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef0b:	50                   	push   eax
c001ef0c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef10:	50                   	push   eax
c001ef11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef15:	50                   	push   eax
c001ef16:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef1a:	50                   	push   eax
c001ef1b:	6a 07                	push   0x7
c001ef1d:	e8 d4 fe ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef22:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef26:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef2a:	0f 95 c0             	setne  al
c001ef2d:	83 c4 24             	add    esp,0x24
c001ef30:	c3                   	ret    
c001ef31:	90                   	nop

c001ef32 <CPU::CPU()>:
c001ef32:	83 ec 0c             	sub    esp,0xc
c001ef35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef39:	83 ec 08             	sub    esp,0x8
c001ef3c:	68 75 26 03 c0       	push   0xc0032675
c001ef41:	50                   	push   eax
c001ef42:	e8 cb c4 ff ff       	call   c001b412 <Device::Device(char const*)>
c001ef47:	83 c4 10             	add    esp,0x10
c001ef4a:	ba 08 27 03 c0       	mov    edx,0xc0032708
c001ef4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef53:	89 10                	mov    DWORD PTR [eax],edx
c001ef55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef59:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001ef63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef67:	05 78 01 00 00       	add    eax,0x178
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	50                   	push   eax
c001ef70:	e8 19 6d ff ff       	call   c0015c8e <GDT::GDT()>
c001ef75:	83 c4 10             	add    esp,0x10
c001ef78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7c:	05 7c 09 00 00       	add    eax,0x97c
c001ef81:	83 ec 0c             	sub    esp,0xc
c001ef84:	50                   	push   eax
c001ef85:	e8 52 6f ff ff       	call   c0015edc <IDT::IDT()>
c001ef8a:	83 c4 10             	add    esp,0x10
c001ef8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef91:	05 7c 11 00 00       	add    eax,0x117c
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	50                   	push   eax
c001ef9a:	e8 9d 88 ff ff       	call   c001783c <TSS::TSS()>
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa6:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001efad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb1:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001efbb:	90                   	nop
c001efbc:	83 c4 0c             	add    esp,0xc
c001efbf:	c3                   	ret    

c001efc0 <CPU::displayFeatures()>:
c001efc0:	c3                   	ret    
c001efc1:	90                   	nop

c001efc2 <CPU::detectFeatures()>:
c001efc2:	55                   	push   ebp
c001efc3:	57                   	push   edi
c001efc4:	56                   	push   esi
c001efc5:	53                   	push   ebx
c001efc6:	83 ec 30             	sub    esp,0x30
c001efc9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efcd:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001efd7:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001efdd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001efe4:	6a 0d                	push   0xd
c001efe6:	6a 00                	push   0x0
c001efe8:	55                   	push   ebp
c001efe9:	e8 02 15 fe ff       	call   c00004f0 <memset>
c001efee:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eff3:	83 c4 10             	add    esp,0x10
c001eff6:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001effd:	0f 84 db 05 00 00    	je     c001f5de <CPU::detectFeatures()+0x61c>
c001f003:	83 ec 0c             	sub    esp,0xc
c001f006:	89 ef                	mov    edi,ebp
c001f008:	6a 10                	push   0x10
c001f00a:	e8 6b fe ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f00f:	83 e0 01             	and    eax,0x1
c001f012:	8d 14 00             	lea    edx,[eax+eax*1]
c001f015:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f01b:	83 e0 fd             	and    eax,0xfffffffd
c001f01e:	09 d0                	or     eax,edx
c001f020:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f026:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f02d:	e8 48 fe ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f032:	83 e0 01             	and    eax,0x1
c001f035:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f03c:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f042:	83 e0 fb             	and    eax,0xfffffffb
c001f045:	09 d0                	or     eax,edx
c001f047:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f04d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f054:	e8 21 fe ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f059:	83 e0 01             	and    eax,0x1
c001f05c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f063:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f069:	83 e0 f7             	and    eax,0xfffffff7
c001f06c:	09 d0                	or     eax,edx
c001f06e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f074:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f07b:	e8 fa fd ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f080:	83 e0 01             	and    eax,0x1
c001f083:	c1 e0 04             	shl    eax,0x4
c001f086:	89 c2                	mov    edx,eax
c001f088:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f08e:	83 e0 ef             	and    eax,0xffffffef
c001f091:	09 d0                	or     eax,edx
c001f093:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f099:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f0a0:	e8 d5 fd ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f0a5:	83 e0 01             	and    eax,0x1
c001f0a8:	c1 e0 05             	shl    eax,0x5
c001f0ab:	89 c2                	mov    edx,eax
c001f0ad:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0b3:	83 e0 df             	and    eax,0xffffffdf
c001f0b6:	09 d0                	or     eax,edx
c001f0b8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0be:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f0c5:	e8 b0 fd ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f0ca:	83 e0 01             	and    eax,0x1
c001f0cd:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0d0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f0d6:	83 e0 fd             	and    eax,0xfffffffd
c001f0d9:	09 d0                	or     eax,edx
c001f0db:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f0e1:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f0e8:	e8 8d fd ff ff       	call   c001ee7a <CPU::cpuidCheckEDX(unsigned int)>
c001f0ed:	83 e0 01             	and    eax,0x1
c001f0f0:	c1 e0 06             	shl    eax,0x6
c001f0f3:	89 c2                	mov    edx,eax
c001f0f5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f0fb:	83 e0 bf             	and    eax,0xffffffbf
c001f0fe:	09 d0                	or     eax,edx
c001f100:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f106:	58                   	pop    eax
c001f107:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f10b:	50                   	push   eax
c001f10c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f110:	50                   	push   eax
c001f111:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f115:	56                   	push   esi
c001f116:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f11a:	50                   	push   eax
c001f11b:	6a 00                	push   0x0
c001f11d:	e8 d4 fc ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f122:	b8 04 00 00 00       	mov    eax,0x4
c001f127:	89 c1                	mov    ecx,eax
c001f129:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f12b:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f131:	89 c1                	mov    ecx,eax
c001f133:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f137:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f139:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f13f:	89 c1                	mov    ecx,eax
c001f141:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f145:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f147:	83 c4 18             	add    esp,0x18
c001f14a:	68 84 25 03 c0       	push   0xc0032584
c001f14f:	55                   	push   ebp
c001f150:	e8 2b 16 fe ff       	call   c0000780 <strcmp>
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	85 c0                	test   eax,eax
c001f15a:	75 0f                	jne    c001f16b <CPU::detectFeatures()+0x1a9>
c001f15c:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f166:	e9 22 02 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f16b:	50                   	push   eax
c001f16c:	50                   	push   eax
c001f16d:	68 91 25 03 c0       	push   0xc0032591
c001f172:	55                   	push   ebp
c001f173:	e8 08 16 fe ff       	call   c0000780 <strcmp>
c001f178:	83 c4 10             	add    esp,0x10
c001f17b:	85 c0                	test   eax,eax
c001f17d:	74 dd                	je     c001f15c <CPU::detectFeatures()+0x19a>
c001f17f:	50                   	push   eax
c001f180:	50                   	push   eax
c001f181:	68 9e 25 03 c0       	push   0xc003259e
c001f186:	55                   	push   ebp
c001f187:	e8 f4 15 fe ff       	call   c0000780 <strcmp>
c001f18c:	83 c4 10             	add    esp,0x10
c001f18f:	85 c0                	test   eax,eax
c001f191:	74 2a                	je     c001f1bd <CPU::detectFeatures()+0x1fb>
c001f193:	50                   	push   eax
c001f194:	50                   	push   eax
c001f195:	68 ab 25 03 c0       	push   0xc00325ab
c001f19a:	55                   	push   ebp
c001f19b:	e8 e0 15 fe ff       	call   c0000780 <strcmp>
c001f1a0:	83 c4 10             	add    esp,0x10
c001f1a3:	85 c0                	test   eax,eax
c001f1a5:	74 16                	je     c001f1bd <CPU::detectFeatures()+0x1fb>
c001f1a7:	50                   	push   eax
c001f1a8:	50                   	push   eax
c001f1a9:	68 b8 25 03 c0       	push   0xc00325b8
c001f1ae:	55                   	push   ebp
c001f1af:	e8 cc 15 fe ff       	call   c0000780 <strcmp>
c001f1b4:	83 c4 10             	add    esp,0x10
c001f1b7:	85 c0                	test   eax,eax
c001f1b9:	74 48                	je     c001f203 <CPU::detectFeatures()+0x241>
c001f1bb:	eb 0f                	jmp    c001f1cc <CPU::detectFeatures()+0x20a>
c001f1bd:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f1c7:	e9 c1 01 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f1cc:	50                   	push   eax
c001f1cd:	50                   	push   eax
c001f1ce:	68 c5 25 03 c0       	push   0xc00325c5
c001f1d3:	55                   	push   ebp
c001f1d4:	e8 a7 15 fe ff       	call   c0000780 <strcmp>
c001f1d9:	83 c4 10             	add    esp,0x10
c001f1dc:	85 c0                	test   eax,eax
c001f1de:	74 23                	je     c001f203 <CPU::detectFeatures()+0x241>
c001f1e0:	57                   	push   edi
c001f1e1:	57                   	push   edi
c001f1e2:	68 d2 25 03 c0       	push   0xc00325d2
c001f1e7:	55                   	push   ebp
c001f1e8:	e8 93 15 fe ff       	call   c0000780 <strcmp>
c001f1ed:	83 c4 10             	add    esp,0x10
c001f1f0:	85 c0                	test   eax,eax
c001f1f2:	75 1e                	jne    c001f212 <CPU::detectFeatures()+0x250>
c001f1f4:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f1fe:	e9 8a 01 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f203:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f20d:	e9 7b 01 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f212:	56                   	push   esi
c001f213:	56                   	push   esi
c001f214:	68 df 25 03 c0       	push   0xc00325df
c001f219:	55                   	push   ebp
c001f21a:	e8 61 15 fe ff       	call   c0000780 <strcmp>
c001f21f:	83 c4 10             	add    esp,0x10
c001f222:	85 c0                	test   eax,eax
c001f224:	75 0f                	jne    c001f235 <CPU::detectFeatures()+0x273>
c001f226:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f230:	e9 58 01 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f235:	51                   	push   ecx
c001f236:	51                   	push   ecx
c001f237:	68 9e 25 03 c0       	push   0xc003259e
c001f23c:	55                   	push   ebp
c001f23d:	e8 3e 15 fe ff       	call   c0000780 <strcmp>
c001f242:	83 c4 10             	add    esp,0x10
c001f245:	85 c0                	test   eax,eax
c001f247:	75 0f                	jne    c001f258 <CPU::detectFeatures()+0x296>
c001f249:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f253:	e9 35 01 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f258:	52                   	push   edx
c001f259:	52                   	push   edx
c001f25a:	68 ec 25 03 c0       	push   0xc00325ec
c001f25f:	55                   	push   ebp
c001f260:	e8 1b 15 fe ff       	call   c0000780 <strcmp>
c001f265:	83 c4 10             	add    esp,0x10
c001f268:	85 c0                	test   eax,eax
c001f26a:	75 0f                	jne    c001f27b <CPU::detectFeatures()+0x2b9>
c001f26c:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f276:	e9 12 01 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f27b:	50                   	push   eax
c001f27c:	50                   	push   eax
c001f27d:	68 f9 25 03 c0       	push   0xc00325f9
c001f282:	55                   	push   ebp
c001f283:	e8 f8 14 fe ff       	call   c0000780 <strcmp>
c001f288:	83 c4 10             	add    esp,0x10
c001f28b:	85 c0                	test   eax,eax
c001f28d:	75 0f                	jne    c001f29e <CPU::detectFeatures()+0x2dc>
c001f28f:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f299:	e9 ef 00 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f29e:	50                   	push   eax
c001f29f:	50                   	push   eax
c001f2a0:	68 06 26 03 c0       	push   0xc0032606
c001f2a5:	55                   	push   ebp
c001f2a6:	e8 d5 14 fe ff       	call   c0000780 <strcmp>
c001f2ab:	83 c4 10             	add    esp,0x10
c001f2ae:	85 c0                	test   eax,eax
c001f2b0:	75 0f                	jne    c001f2c1 <CPU::detectFeatures()+0x2ff>
c001f2b2:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f2bc:	e9 cc 00 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f2c1:	50                   	push   eax
c001f2c2:	50                   	push   eax
c001f2c3:	68 13 26 03 c0       	push   0xc0032613
c001f2c8:	55                   	push   ebp
c001f2c9:	e8 b2 14 fe ff       	call   c0000780 <strcmp>
c001f2ce:	83 c4 10             	add    esp,0x10
c001f2d1:	85 c0                	test   eax,eax
c001f2d3:	75 0f                	jne    c001f2e4 <CPU::detectFeatures()+0x322>
c001f2d5:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f2df:	e9 a9 00 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f2e4:	50                   	push   eax
c001f2e5:	50                   	push   eax
c001f2e6:	68 20 26 03 c0       	push   0xc0032620
c001f2eb:	55                   	push   ebp
c001f2ec:	e8 8f 14 fe ff       	call   c0000780 <strcmp>
c001f2f1:	83 c4 10             	add    esp,0x10
c001f2f4:	85 c0                	test   eax,eax
c001f2f6:	75 0f                	jne    c001f307 <CPU::detectFeatures()+0x345>
c001f2f8:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f302:	e9 86 00 00 00       	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f307:	50                   	push   eax
c001f308:	50                   	push   eax
c001f309:	68 2d 26 03 c0       	push   0xc003262d
c001f30e:	55                   	push   ebp
c001f30f:	e8 6c 14 fe ff       	call   c0000780 <strcmp>
c001f314:	83 c4 10             	add    esp,0x10
c001f317:	85 c0                	test   eax,eax
c001f319:	75 0c                	jne    c001f327 <CPU::detectFeatures()+0x365>
c001f31b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f325:	eb 66                	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f327:	50                   	push   eax
c001f328:	50                   	push   eax
c001f329:	68 3a 26 03 c0       	push   0xc003263a
c001f32e:	55                   	push   ebp
c001f32f:	e8 4c 14 fe ff       	call   c0000780 <strcmp>
c001f334:	83 c4 10             	add    esp,0x10
c001f337:	85 c0                	test   eax,eax
c001f339:	75 0c                	jne    c001f347 <CPU::detectFeatures()+0x385>
c001f33b:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f345:	eb 46                	jmp    c001f38d <CPU::detectFeatures()+0x3cb>
c001f347:	57                   	push   edi
c001f348:	57                   	push   edi
c001f349:	68 47 26 03 c0       	push   0xc0032647
c001f34e:	55                   	push   ebp
c001f34f:	e8 2c 14 fe ff       	call   c0000780 <strcmp>
c001f354:	83 c4 10             	add    esp,0x10
c001f357:	85 c0                	test   eax,eax
c001f359:	74 e0                	je     c001f33b <CPU::detectFeatures()+0x379>
c001f35b:	56                   	push   esi
c001f35c:	56                   	push   esi
c001f35d:	68 54 26 03 c0       	push   0xc0032654
c001f362:	55                   	push   ebp
c001f363:	e8 18 14 fe ff       	call   c0000780 <strcmp>
c001f368:	83 c4 10             	add    esp,0x10
c001f36b:	85 c0                	test   eax,eax
c001f36d:	74 cc                	je     c001f33b <CPU::detectFeatures()+0x379>
c001f36f:	51                   	push   ecx
c001f370:	51                   	push   ecx
c001f371:	68 61 26 03 c0       	push   0xc0032661
c001f376:	55                   	push   ebp
c001f377:	e8 04 14 fe ff       	call   c0000780 <strcmp>
c001f37c:	83 c4 10             	add    esp,0x10
c001f37f:	85 c0                	test   eax,eax
c001f381:	74 b8                	je     c001f33b <CPU::detectFeatures()+0x379>
c001f383:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f38d:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f392:	0f 86 be 00 00 00    	jbe    c001f456 <CPU::detectFeatures()+0x494>
c001f398:	83 ec 0c             	sub    esp,0xc
c001f39b:	68 80 00 00 00       	push   0x80
c001f3a0:	e8 31 fb ff ff       	call   c001eed6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3a5:	83 e0 01             	and    eax,0x1
c001f3a8:	c1 e0 06             	shl    eax,0x6
c001f3ab:	89 c2                	mov    edx,eax
c001f3ad:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3b3:	83 e0 bf             	and    eax,0xffffffbf
c001f3b6:	09 d0                	or     eax,edx
c001f3b8:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3be:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f3c5:	e8 0c fb ff ff       	call   c001eed6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3ca:	83 e0 01             	and    eax,0x1
c001f3cd:	c1 e0 04             	shl    eax,0x4
c001f3d0:	89 c2                	mov    edx,eax
c001f3d2:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f3d8:	83 e0 ef             	and    eax,0xffffffef
c001f3db:	09 d0                	or     eax,edx
c001f3dd:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f3e3:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f3ea:	e8 e7 fa ff ff       	call   c001eed6 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3ef:	89 c2                	mov    edx,eax
c001f3f1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3f7:	c1 e2 07             	shl    edx,0x7
c001f3fa:	83 e0 7f             	and    eax,0x7f
c001f3fd:	09 d0                	or     eax,edx
c001f3ff:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f405:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f40c:	e8 f3 fa ff ff       	call   c001ef04 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f411:	83 e0 01             	and    eax,0x1
c001f414:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f41b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f421:	83 e0 f7             	and    eax,0xfffffff7
c001f424:	09 d0                	or     eax,edx
c001f426:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f42c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f433:	e8 cc fa ff ff       	call   c001ef04 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f438:	83 c4 10             	add    esp,0x10
c001f43b:	83 e0 01             	and    eax,0x1
c001f43e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f445:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f44b:	83 e0 fb             	and    eax,0xfffffffb
c001f44e:	09 d0                	or     eax,edx
c001f450:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f456:	83 ec 0c             	sub    esp,0xc
c001f459:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f45d:	50                   	push   eax
c001f45e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f462:	50                   	push   eax
c001f463:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f467:	57                   	push   edi
c001f468:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f46c:	56                   	push   esi
c001f46d:	6a 01                	push   0x1
c001f46f:	e8 82 f9 ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f474:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f478:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f47e:	89 c1                	mov    ecx,eax
c001f480:	83 e1 0f             	and    ecx,0xf
c001f483:	83 e2 f0             	and    edx,0xfffffff0
c001f486:	09 ca                	or     edx,ecx
c001f488:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f48e:	89 c2                	mov    edx,eax
c001f490:	c1 ea 04             	shr    edx,0x4
c001f493:	83 e2 0f             	and    edx,0xf
c001f496:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f49a:	89 d1                	mov    ecx,edx
c001f49c:	83 c4 20             	add    esp,0x20
c001f49f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f4a5:	c1 e1 06             	shl    ecx,0x6
c001f4a8:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f4ae:	09 ca                	or     edx,ecx
c001f4b0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f4b7:	89 c2                	mov    edx,eax
c001f4b9:	c1 ea 08             	shr    edx,0x8
c001f4bc:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f4c2:	83 e2 0f             	and    edx,0xf
c001f4c5:	89 d5                	mov    ebp,edx
c001f4c7:	83 e5 03             	and    ebp,0x3
c001f4ca:	c1 e5 06             	shl    ebp,0x6
c001f4cd:	83 e1 3f             	and    ecx,0x3f
c001f4d0:	09 e9                	or     ecx,ebp
c001f4d2:	89 d5                	mov    ebp,edx
c001f4d4:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f4da:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f4e0:	c1 ed 02             	shr    ebp,0x2
c001f4e3:	83 e1 c0             	and    ecx,0xffffffc0
c001f4e6:	09 e9                	or     ecx,ebp
c001f4e8:	89 c5                	mov    ebp,eax
c001f4ea:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f4f0:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f4f6:	c1 ed 08             	shr    ebp,0x8
c001f4f9:	83 e5 30             	and    ebp,0x30
c001f4fc:	83 e1 cf             	and    ecx,0xffffffcf
c001f4ff:	09 e9                	or     ecx,ebp
c001f501:	83 fa 06             	cmp    edx,0x6
c001f504:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f50a:	74 05                	je     c001f511 <CPU::detectFeatures()+0x54f>
c001f50c:	83 fa 0f             	cmp    edx,0xf
c001f50f:	75 64                	jne    c001f575 <CPU::detectFeatures()+0x5b3>
c001f511:	89 c1                	mov    ecx,eax
c001f513:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f519:	c1 e9 10             	shr    ecx,0x10
c001f51c:	c1 e1 04             	shl    ecx,0x4
c001f51f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f523:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f529:	0f b6 c9             	movzx  ecx,cl
c001f52c:	c1 e1 06             	shl    ecx,0x6
c001f52f:	09 e9                	or     ecx,ebp
c001f531:	83 fa 0f             	cmp    edx,0xf
c001f534:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f53b:	75 38                	jne    c001f575 <CPU::detectFeatures()+0x5b3>
c001f53d:	c1 e8 14             	shr    eax,0x14
c001f540:	83 c0 0f             	add    eax,0xf
c001f543:	0f b6 c0             	movzx  eax,al
c001f546:	89 c2                	mov    edx,eax
c001f548:	c1 e8 02             	shr    eax,0x2
c001f54b:	83 e2 03             	and    edx,0x3
c001f54e:	89 d1                	mov    ecx,edx
c001f550:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f556:	c1 e1 06             	shl    ecx,0x6
c001f559:	83 e2 3f             	and    edx,0x3f
c001f55c:	09 ca                	or     edx,ecx
c001f55e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f564:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f56a:	83 e2 c0             	and    edx,0xffffffc0
c001f56d:	09 d0                	or     eax,edx
c001f56f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f575:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f57b:	83 ec 0c             	sub    esp,0xc
c001f57e:	83 c8 07             	or     eax,0x7
c001f581:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f587:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f58b:	50                   	push   eax
c001f58c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f590:	55                   	push   ebp
c001f591:	57                   	push   edi
c001f592:	56                   	push   esi
c001f593:	68 00 00 00 80       	push   0x80000000
c001f598:	e8 59 f8 ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f59d:	83 c4 20             	add    esp,0x20
c001f5a0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f5a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5ac:	76 1e                	jbe    c001f5cc <CPU::detectFeatures()+0x60a>
c001f5ae:	83 ec 0c             	sub    esp,0xc
c001f5b1:	50                   	push   eax
c001f5b2:	55                   	push   ebp
c001f5b3:	57                   	push   edi
c001f5b4:	56                   	push   esi
c001f5b5:	68 01 00 00 80       	push   0x80000001
c001f5ba:	e8 37 f8 ff ff       	call   c001edf6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f5bf:	83 c4 20             	add    esp,0x20
c001f5c2:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f5cc:	52                   	push   edx
c001f5cd:	52                   	push   edx
c001f5ce:	68 6d 26 03 c0       	push   0xc003266d
c001f5d3:	53                   	push   ebx
c001f5d4:	e8 2b be ff ff       	call   c001b404 <Device::setName(char const*)>
c001f5d9:	83 c4 10             	add    esp,0x10
c001f5dc:	eb 69                	jmp    c001f647 <CPU::detectFeatures()+0x685>
c001f5de:	50                   	push   eax
c001f5df:	50                   	push   eax
c001f5e0:	68 d2 25 03 c0       	push   0xc00325d2
c001f5e5:	55                   	push   ebp
c001f5e6:	e8 65 10 fe ff       	call   c0000650 <strcpy>
c001f5eb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f5f5:	e8 c9 0b fe ff       	call   c00001c3 <is486>
c001f5fa:	83 c4 10             	add    esp,0x10
c001f5fd:	85 c0                	test   eax,eax
c001f5ff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f605:	74 1f                	je     c001f626 <CPU::detectFeatures()+0x664>
c001f607:	83 c8 07             	or     eax,0x7
c001f60a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f610:	0f 20 c0             	mov    eax,cr0
c001f613:	83 e0 14             	and    eax,0x14
c001f616:	83 f8 04             	cmp    eax,0x4
c001f619:	75 10                	jne    c001f62b <CPU::detectFeatures()+0x669>
c001f61b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f621:	83 e0 fd             	and    eax,0xfffffffd
c001f624:	eb 1b                	jmp    c001f641 <CPU::detectFeatures()+0x67f>
c001f626:	83 e0 f8             	and    eax,0xfffffff8
c001f629:	eb df                	jmp    c001f60a <CPU::detectFeatures()+0x648>
c001f62b:	e8 6e 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f630:	83 e0 01             	and    eax,0x1
c001f633:	8d 14 00             	lea    edx,[eax+eax*1]
c001f636:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f63c:	83 e0 fd             	and    eax,0xfffffffd
c001f63f:	09 d0                	or     eax,edx
c001f641:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f647:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f64e:	74 17                	je     c001f667 <CPU::detectFeatures()+0x6a5>
c001f650:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f656:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f65c:	83 c8 10             	or     eax,0x10
c001f65f:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f665:	eb 20                	jmp    c001f687 <CPU::detectFeatures()+0x6c5>
c001f667:	e8 32 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f66c:	83 e0 01             	and    eax,0x1
c001f66f:	8d 14 00             	lea    edx,[eax+eax*1]
c001f672:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f678:	83 e0 fd             	and    eax,0xfffffffd
c001f67b:	09 d0                	or     eax,edx
c001f67d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f683:	a8 02                	test   al,0x2
c001f685:	75 c9                	jne    c001f650 <CPU::detectFeatures()+0x68e>
c001f687:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f68e:	83 c4 2c             	add    esp,0x2c
c001f691:	5b                   	pop    ebx
c001f692:	5e                   	pop    esi
c001f693:	5f                   	pop    edi
c001f694:	5d                   	pop    ebp
c001f695:	c3                   	ret    

c001f696 <CPU::setupSMEP()>:
c001f696:	0f 20 e0             	mov    eax,cr4
c001f699:	0d 00 00 10 00       	or     eax,0x100000
c001f69e:	0f 22 e0             	mov    cr4,eax
c001f6a1:	c3                   	ret    

c001f6a2 <CPU::setupUMIP()>:
c001f6a2:	0f 20 e0             	mov    eax,cr4
c001f6a5:	80 cc 08             	or     ah,0x8
c001f6a8:	0f 22 e0             	mov    cr4,eax
c001f6ab:	c3                   	ret    

c001f6ac <CPU::setupTSC()>:
c001f6ac:	0f 20 e0             	mov    eax,cr4
c001f6af:	83 c8 04             	or     eax,0x4
c001f6b2:	0f 22 e0             	mov    cr4,eax
c001f6b5:	c3                   	ret    

c001f6b6 <CPU::setupLargePages()>:
c001f6b6:	0f 20 e0             	mov    eax,cr4
c001f6b9:	83 c8 10             	or     eax,0x10
c001f6bc:	0f 22 e0             	mov    cr4,eax
c001f6bf:	c3                   	ret    

c001f6c0 <CPU::setupPAT()>:
c001f6c0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f6c5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f6cc:	74 2c                	je     c001f6fa <CPU::setupPAT()+0x3a>
c001f6ce:	53                   	push   ebx
c001f6cf:	83 ec 10             	sub    esp,0x10
c001f6d2:	68 77 02 00 00       	push   0x277
c001f6d7:	50                   	push   eax
c001f6d8:	e8 17 63 ff ff       	call   c00159f4 <Computer::rdmsr(unsigned int)>
c001f6dd:	83 e2 f8             	and    edx,0xfffffff8
c001f6e0:	83 ca 01             	or     edx,0x1
c001f6e3:	52                   	push   edx
c001f6e4:	50                   	push   eax
c001f6e5:	68 77 02 00 00       	push   0x277
c001f6ea:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f6f0:	e8 2b 63 ff ff       	call   c0015a20 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f6f5:	83 c4 28             	add    esp,0x28
c001f6f8:	5b                   	pop    ebx
c001f6f9:	c3                   	ret    
c001f6fa:	c3                   	ret    
c001f6fb:	90                   	nop

c001f6fc <CPU::setupMTRR()>:
c001f6fc:	c3                   	ret    
c001f6fd:	90                   	nop

c001f6fe <CPU::setupGlobalPages()>:
c001f6fe:	0f 20 e0             	mov    eax,cr4
c001f701:	0c 80                	or     al,0x80
c001f703:	0f 22 e0             	mov    cr4,eax
c001f706:	c3                   	ret    
c001f707:	90                   	nop

c001f708 <CPU::allowUsermodeDataAccess()>:
c001f708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f713:	74 03                	je     c001f718 <CPU::allowUsermodeDataAccess()+0x10>
c001f715:	0f 01 cb             	stac   
c001f718:	c3                   	ret    
c001f719:	90                   	nop

c001f71a <CPU::prohibitUsermodeDataAccess()>:
c001f71a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f71e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f725:	74 03                	je     c001f72a <CPU::prohibitUsermodeDataAccess()+0x10>
c001f727:	0f 01 ca             	clac   
c001f72a:	c3                   	ret    
c001f72b:	90                   	nop

c001f72c <CPU::setupSMAP()>:
c001f72c:	0f 20 e0             	mov    eax,cr4
c001f72f:	0d 00 00 20 00       	or     eax,0x200000
c001f734:	0f 22 e0             	mov    cr4,eax
c001f737:	eb e1                	jmp    c001f71a <CPU::prohibitUsermodeDataAccess()>
c001f739:	90                   	nop

c001f73a <CPU::setupFeatures()>:
c001f73a:	53                   	push   ebx
c001f73b:	83 ec 08             	sub    esp,0x8
c001f73e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f742:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f749:	74 18                	je     c001f763 <CPU::setupFeatures()+0x29>
c001f74b:	83 ec 0c             	sub    esp,0xc
c001f74e:	68 79 26 03 c0       	push   0xc0032679
c001f753:	e8 c2 9a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f758:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f75b:	e8 42 ff ff ff       	call   c001f6a2 <CPU::setupUMIP()>
c001f760:	83 c4 10             	add    esp,0x10
c001f763:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f76a:	74 18                	je     c001f784 <CPU::setupFeatures()+0x4a>
c001f76c:	83 ec 0c             	sub    esp,0xc
c001f76f:	68 83 26 03 c0       	push   0xc0032683
c001f774:	e8 a1 9a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f779:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f77c:	e8 2b ff ff ff       	call   c001f6ac <CPU::setupTSC()>
c001f781:	83 c4 10             	add    esp,0x10
c001f784:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f78b:	74 18                	je     c001f7a5 <CPU::setupFeatures()+0x6b>
c001f78d:	83 ec 0c             	sub    esp,0xc
c001f790:	68 8c 26 03 c0       	push   0xc003268c
c001f795:	e8 80 9a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f79a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f79d:	e8 14 ff ff ff       	call   c001f6b6 <CPU::setupLargePages()>
c001f7a2:	83 c4 10             	add    esp,0x10
c001f7a5:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f7ac:	74 18                	je     c001f7c6 <CPU::setupFeatures()+0x8c>
c001f7ae:	83 ec 0c             	sub    esp,0xc
c001f7b1:	68 95 26 03 c0       	push   0xc0032695
c001f7b6:	e8 5f 9a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f7bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7be:	e8 3b ff ff ff       	call   c001f6fe <CPU::setupGlobalPages()>
c001f7c3:	83 c4 10             	add    esp,0x10
c001f7c6:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f7cd:	74 18                	je     c001f7e7 <CPU::setupFeatures()+0xad>
c001f7cf:	83 ec 0c             	sub    esp,0xc
c001f7d2:	68 a7 26 03 c0       	push   0xc00326a7
c001f7d7:	e8 3e 9a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7df:	e8 dc fe ff ff       	call   c001f6c0 <CPU::setupPAT()>
c001f7e4:	83 c4 10             	add    esp,0x10
c001f7e7:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f7ee:	74 11                	je     c001f801 <CPU::setupFeatures()+0xc7>
c001f7f0:	c7 44 24 10 b0 26 03 c0 	mov    DWORD PTR [esp+0x10],0xc00326b0
c001f7f8:	83 c4 08             	add    esp,0x8
c001f7fb:	5b                   	pop    ebx
c001f7fc:	e9 19 9a ff ff       	jmp    c001921a <Dbg::kprintf(char const*, ...)>
c001f801:	83 c4 08             	add    esp,0x8
c001f804:	5b                   	pop    ebx
c001f805:	c3                   	ret    

c001f806 <CPU::open(int, int, void*)>:
c001f806:	55                   	push   ebp
c001f807:	57                   	push   edi
c001f808:	56                   	push   esi
c001f809:	53                   	push   ebx
c001f80a:	83 ec 18             	sub    esp,0x18
c001f80d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f811:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f815:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f819:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f81f:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f825:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f82b:	50                   	push   eax
c001f82c:	e8 bf 64 ff ff       	call   c0015cf0 <GDT::setup()>
c001f831:	83 c4 0c             	add    esp,0xc
c001f834:	6a 00                	push   0x0
c001f836:	68 ef be ad de       	push   0xdeadbeef
c001f83b:	55                   	push   ebp
c001f83c:	e8 3f 80 ff ff       	call   c0017880 <TSS::setup(unsigned long, unsigned long)>
c001f841:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f844:	e8 17 80 ff ff       	call   c0017860 <TSS::flush()>
c001f849:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f84f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f852:	e8 fb 66 ff ff       	call   c0015f52 <IDT::setup()>
c001f857:	b8 00 04 00 00       	mov    eax,0x400
c001f85c:	0f 23 f8             	mov    db7,eax
c001f85f:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f869:	e8 84 6e ff ff       	call   c00166f2 <Phys::allocatePage()>
c001f86e:	83 c4 10             	add    esp,0x10
c001f871:	85 f6                	test   esi,esi
c001f873:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f879:	89 38                	mov    DWORD PTR [eax],edi
c001f87b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f881:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f884:	74 10                	je     c001f896 <CPU::open(int, int, void*)+0x90>
c001f886:	50                   	push   eax
c001f887:	50                   	push   eax
c001f888:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f88e:	56                   	push   esi
c001f88f:	e8 08 89 ff ff       	call   c001819c <VAS::setCPUSpecific(unsigned long)>
c001f894:	eb 0d                	jmp    c001f8a3 <CPU::open(int, int, void*)+0x9d>
c001f896:	83 ec 0c             	sub    esp,0xc
c001f899:	68 ba 26 03 c0       	push   0xc00326ba
c001f89e:	e8 ff 08 00 00       	call   c00201a2 <KePanic(char const*)>
c001f8a3:	83 c4 10             	add    esp,0x10
c001f8a6:	83 ec 0c             	sub    esp,0xc
c001f8a9:	68 c8 26 03 c0       	push   0xc00326c8
c001f8ae:	e8 8e 01 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001f8b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8b6:	e8 07 f7 ff ff       	call   c001efc2 <CPU::detectFeatures()>
c001f8bb:	c7 04 24 eb 26 03 c0 	mov    DWORD PTR [esp],0xc00326eb
c001f8c2:	e8 7a 01 00 00       	call   c001fa41 <KeSetBootMessage(char const*)>
c001f8c7:	e8 f7 76 00 00       	call   c0026fc3 <HalInitialise()>
c001f8cc:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f8d1:	83 e0 10             	and    eax,0x10
c001f8d4:	83 f8 01             	cmp    eax,0x1
c001f8d7:	19 c0                	sbb    eax,eax
c001f8d9:	83 e0 46             	and    eax,0x46
c001f8dc:	83 c0 1e             	add    eax,0x1e
c001f8df:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8e2:	e8 06 d4 ff ff       	call   c001cced <setupTimer(int)>
c001f8e7:	83 c4 10             	add    esp,0x10
c001f8ea:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f8f1:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f8f7:	74 0c                	je     c001f905 <CPU::open(int, int, void*)+0xff>
c001f8f9:	83 ec 0c             	sub    esp,0xc
c001f8fc:	53                   	push   ebx
c001f8fd:	e8 38 fe ff ff       	call   c001f73a <CPU::setupFeatures()>
c001f902:	83 c4 10             	add    esp,0x10
c001f905:	83 c4 0c             	add    esp,0xc
c001f908:	31 c0                	xor    eax,eax
c001f90a:	5b                   	pop    ebx
c001f90b:	5e                   	pop    esi
c001f90c:	5f                   	pop    edi
c001f90d:	5d                   	pop    ebp
c001f90e:	c3                   	ret    

c001f90f <KeInitialiseAtexit()>:
c001f90f:	83 ec 10             	sub    esp,0x10
c001f912:	6a 60                	push   0x60
c001f914:	6a 00                	push   0x0
c001f916:	68 20 f9 03 c0       	push   0xc003f920
c001f91b:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f925:	e8 c6 0b fe ff       	call   c00004f0 <memset>
c001f92a:	83 c4 1c             	add    esp,0x1c
c001f92d:	c3                   	ret    

c001f92e <KeRegisterAtexit(void (*)(void*), void*)>:
c001f92e:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f933:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f937:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f93e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f942:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f949:	40                   	inc    eax
c001f94a:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001f94f:	83 f8 17             	cmp    eax,0x17
c001f952:	7e 0d                	jle    c001f961 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001f954:	c7 44 24 04 2c 27 03 c0 	mov    DWORD PTR [esp+0x4],0xc003272c
c001f95c:	e9 41 08 00 00       	jmp    c00201a2 <KePanic(char const*)>
c001f961:	c3                   	ret    

c001f962 <KeExecuteAtexit()>:
c001f962:	53                   	push   ebx
c001f963:	31 db                	xor    ebx,ebx
c001f965:	83 ec 08             	sub    esp,0x8
c001f968:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001f96e:	7e 50                	jle    c001f9c0 <KeExecuteAtexit()+0x5e>
c001f970:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001f977:	85 c0                	test   eax,eax
c001f979:	74 42                	je     c001f9bd <KeExecuteAtexit()+0x5b>
c001f97b:	51                   	push   ecx
c001f97c:	50                   	push   eax
c001f97d:	53                   	push   ebx
c001f97e:	68 45 27 03 c0       	push   0xc0032745
c001f983:	e8 92 98 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f988:	58                   	pop    eax
c001f989:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001f990:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001f997:	c7 04 24 67 27 03 c0 	mov    DWORD PTR [esp],0xc0032767
c001f99e:	e8 77 98 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f9a3:	c7 04 24 13 39 03 c0 	mov    DWORD PTR [esp],0xc0033913
c001f9aa:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001f9b5:	e8 60 98 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001f9ba:	83 c4 10             	add    esp,0x10
c001f9bd:	43                   	inc    ebx
c001f9be:	eb a8                	jmp    c001f968 <KeExecuteAtexit()+0x6>
c001f9c0:	83 c4 08             	add    esp,0x8
c001f9c3:	5b                   	pop    ebx
c001f9c4:	c3                   	ret    

c001f9c5 <KeDisplaySplashScreen()>:
c001f9c5:	55                   	push   ebp
c001f9c6:	bd 05 00 00 00       	mov    ebp,0x5
c001f9cb:	57                   	push   edi
c001f9cc:	bf 0a 00 00 00       	mov    edi,0xa
c001f9d1:	56                   	push   esi
c001f9d2:	31 f6                	xor    esi,esi
c001f9d4:	53                   	push   ebx
c001f9d5:	31 db                	xor    ebx,ebx
c001f9d7:	83 ec 0c             	sub    esp,0xc
c001f9da:	0f b6 96 80 3b 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc480]
c001f9e1:	85 d2                	test   edx,edx
c001f9e3:	89 d0                	mov    eax,edx
c001f9e5:	74 52                	je     c001fa39 <KeDisplaySplashScreen()+0x74>
c001f9e7:	80 bb b6 3b 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc44a],0xdb
c001f9ee:	75 13                	jne    c001fa03 <KeDisplaySplashScreen()+0x3e>
c001f9f0:	0f b6 8b b5 3b 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc44b]
c001f9f7:	83 e1 fe             	and    ecx,0xfffffffe
c001f9fa:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fa00:	75 01                	jne    c001fa03 <KeDisplaySplashScreen()+0x3e>
c001fa02:	47                   	inc    edi
c001fa03:	83 fa 0d             	cmp    edx,0xd
c001fa06:	74 28                	je     c001fa30 <KeDisplaySplashScreen()+0x6b>
c001fa08:	83 fa 0a             	cmp    edx,0xa
c001fa0b:	75 0a                	jne    c001fa17 <KeDisplaySplashScreen()+0x52>
c001fa0d:	45                   	inc    ebp
c001fa0e:	bf 0a 00 00 00       	mov    edi,0xa
c001fa13:	31 db                	xor    ebx,ebx
c001fa15:	eb 19                	jmp    c001fa30 <KeDisplaySplashScreen()+0x6b>
c001fa17:	83 ec 0c             	sub    esp,0xc
c001fa1a:	0f be c0             	movsx  eax,al
c001fa1d:	55                   	push   ebp
c001fa1e:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fa21:	43                   	inc    ebx
c001fa22:	52                   	push   edx
c001fa23:	6a 00                	push   0x0
c001fa25:	6a 0e                	push   0xe
c001fa27:	50                   	push   eax
c001fa28:	e8 13 82 00 00       	call   c0027c40 <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fa2d:	83 c4 20             	add    esp,0x20
c001fa30:	46                   	inc    esi
c001fa31:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fa37:	75 a1                	jne    c001f9da <KeDisplaySplashScreen()+0x15>
c001fa39:	83 c4 0c             	add    esp,0xc
c001fa3c:	5b                   	pop    ebx
c001fa3d:	5e                   	pop    esi
c001fa3e:	5f                   	pop    edi
c001fa3f:	5d                   	pop    ebp
c001fa40:	c3                   	ret    

c001fa41 <KeSetBootMessage(char const*)>:
c001fa41:	57                   	push   edi
c001fa42:	56                   	push   esi
c001fa43:	53                   	push   ebx
c001fa44:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fa4a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fa51:	68 9e 00 00 00       	push   0x9e
c001fa56:	6a 00                	push   0x0
c001fa58:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fa5c:	56                   	push   esi
c001fa5d:	e8 8e 0a fe ff       	call   c00004f0 <memset>
c001fa62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa65:	e8 16 0b fe ff       	call   c0000580 <strlen>
c001fa6a:	ba 50 00 00 00       	mov    edx,0x50
c001fa6f:	83 c4 10             	add    esp,0x10
c001fa72:	31 c9                	xor    ecx,ecx
c001fa74:	29 c2                	sub    edx,eax
c001fa76:	83 e2 fe             	and    edx,0xfffffffe
c001fa79:	01 f2                	add    edx,esi
c001fa7b:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fa80:	84 c0                	test   al,al
c001fa82:	74 0a                	je     c001fa8e <KeSetBootMessage(char const*)+0x4d>
c001fa84:	80 cc 0f             	or     ah,0xf
c001fa87:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fa8b:	41                   	inc    ecx
c001fa8c:	eb ed                	jmp    c001fa7b <KeSetBootMessage(char const*)+0x3a>
c001fa8e:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fa93:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fa98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa9a:	81 c4 a0 00 00 00    	add    esp,0xa0
c001faa0:	5b                   	pop    ebx
c001faa1:	5e                   	pop    esi
c001faa2:	5f                   	pop    edi
c001faa3:	c3                   	ret    

c001faa4 <CUnlockScheduler>:
c001faa4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001faa9:	83 e8 01             	sub    eax,0x1
c001faac:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fab1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fab6:	85 c0                	test   eax,eax
c001fab8:	75 02                	jne    c001fabc <CUnlockScheduler+0x18>
c001faba:	fb                   	sti    
c001fabb:	90                   	nop
c001fabc:	90                   	nop
c001fabd:	c3                   	ret    
c001fabe:	66 90                	xchg   ax,ax

c001fac0 <CLockScheduler>:
c001fac0:	fa                   	cli    
c001fac1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001fac6:	83 c0 01             	add    eax,0x1
c001fac9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001face:	90                   	nop
c001facf:	c3                   	ret    

c001fad0 <CPrintf>:
c001fad0:	83 ec 0c             	sub    esp,0xc
c001fad3:	83 ec 08             	sub    esp,0x8
c001fad6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fada:	68 f0 f9 02 c0       	push   0xc002f9f0
c001fadf:	e8 36 97 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c001fae4:	83 c4 10             	add    esp,0x10
c001fae7:	90                   	nop
c001fae8:	83 c4 0c             	add    esp,0xc
c001faeb:	c3                   	ret    

c001faec <Krnl::handlePowerButton()>:
c001faec:	83 ec 0c             	sub    esp,0xc
c001faef:	e8 09 07 00 00       	call   c00201fd <KeHandlePowerButton()>
c001faf4:	90                   	nop
c001faf5:	83 c4 0c             	add    esp,0xc
c001faf8:	c3                   	ret    
c001faf9:	8d 76 00             	lea    esi,[esi+0x0]

c001fafc <Krnl::handleSleepButton()>:
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	e8 2e 07 00 00       	call   c0020232 <KeHandleSleepButton()>
c001fb04:	90                   	nop
c001fb05:	83 c4 0c             	add    esp,0xc
c001fb08:	c3                   	ret    

c001fb09 <KeCalculateCRC32(unsigned char*, int)>:
c001fb09:	53                   	push   ebx
c001fb0a:	83 c8 ff             	or     eax,0xffffffff
c001fb0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb11:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb15:	01 cb                	add    ebx,ecx
c001fb17:	39 d9                	cmp    ecx,ebx
c001fb19:	74 15                	je     c001fb30 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fb1b:	41                   	inc    ecx
c001fb1c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fb1f:	31 c2                	xor    edx,eax
c001fb21:	c1 e8 08             	shr    eax,0x8
c001fb24:	0f b6 d2             	movzx  edx,dl
c001fb27:	33 04 95 e0 3c 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc320]
c001fb2e:	eb e7                	jmp    c001fb17 <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fb30:	5b                   	pop    ebx
c001fb31:	f7 d0                	not    eax
c001fb33:	c3                   	ret    

c001fb34 <EnvVarContainer::getEnv(char const*)>:
c001fb34:	57                   	push   edi
c001fb35:	56                   	push   esi
c001fb36:	53                   	push   ebx
c001fb37:	31 db                	xor    ebx,ebx
c001fb39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb3d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fb3f:	7e 2b                	jle    c001fb6c <EnvVarContainer::getEnv(char const*)+0x38>
c001fb41:	50                   	push   eax
c001fb42:	50                   	push   eax
c001fb43:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb46:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fb4d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fb50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fb54:	e8 27 0c fe ff       	call   c0000780 <strcmp>
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	85 c0                	test   eax,eax
c001fb5e:	75 09                	jne    c001fb69 <EnvVarContainer::getEnv(char const*)+0x35>
c001fb60:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb63:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fb67:	eb 05                	jmp    c001fb6e <EnvVarContainer::getEnv(char const*)+0x3a>
c001fb69:	43                   	inc    ebx
c001fb6a:	eb d1                	jmp    c001fb3d <EnvVarContainer::getEnv(char const*)+0x9>
c001fb6c:	31 c0                	xor    eax,eax
c001fb6e:	5b                   	pop    ebx
c001fb6f:	5e                   	pop    esi
c001fb70:	5f                   	pop    edi
c001fb71:	c3                   	ret    

c001fb72 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fb72:	55                   	push   ebp
c001fb73:	57                   	push   edi
c001fb74:	56                   	push   esi
c001fb75:	53                   	push   ebx
c001fb76:	83 ec 28             	sub    esp,0x28
c001fb79:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fb7d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fb81:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fb85:	56                   	push   esi
c001fb86:	e8 f5 09 fe ff       	call   c0000580 <strlen>
c001fb8b:	40                   	inc    eax
c001fb8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb8f:	e8 4f 68 ff ff       	call   c00163e3 <malloc>
c001fb94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb9b:	e8 e0 09 fe ff       	call   c0000580 <strlen>
c001fba0:	40                   	inc    eax
c001fba1:	89 04 24             	mov    DWORD PTR [esp],eax
c001fba4:	e8 3a 68 ff ff       	call   c00163e3 <malloc>
c001fba9:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbb0:	e8 cb 09 fe ff       	call   c0000580 <strlen>
c001fbb5:	83 c4 0c             	add    esp,0xc
c001fbb8:	40                   	inc    eax
c001fbb9:	50                   	push   eax
c001fbba:	6a 00                	push   0x0
c001fbbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fbc0:	e8 2b 09 fe ff       	call   c00004f0 <memset>
c001fbc5:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbc8:	e8 b3 09 fe ff       	call   c0000580 <strlen>
c001fbcd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fbd1:	8d 48 01             	lea    ecx,[eax+0x1]
c001fbd4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fbd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbd9:	89 de                	mov    esi,ebx
c001fbdb:	e8 a0 09 fe ff       	call   c0000580 <strlen>
c001fbe0:	83 c4 0c             	add    esp,0xc
c001fbe3:	40                   	inc    eax
c001fbe4:	50                   	push   eax
c001fbe5:	6a 00                	push   0x0
c001fbe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fbeb:	e8 00 09 fe ff       	call   c00004f0 <memset>
c001fbf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbf3:	e8 88 09 fe ff       	call   c0000580 <strlen>
c001fbf8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fbfc:	8d 48 01             	lea    ecx,[eax+0x1]
c001fbff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc01:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fc04:	40                   	inc    eax
c001fc05:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fc08:	c1 e0 03             	shl    eax,0x3
c001fc0b:	5a                   	pop    edx
c001fc0c:	59                   	pop    ecx
c001fc0d:	50                   	push   eax
c001fc0e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fc11:	e8 b9 67 ff ff       	call   c00163cf <realloc>
c001fc16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc19:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fc1d:	b9 08 00 00 00       	mov    ecx,0x8
c001fc22:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fc25:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fc29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc2b:	83 c4 2c             	add    esp,0x2c
c001fc2e:	5b                   	pop    ebx
c001fc2f:	5e                   	pop    esi
c001fc30:	5f                   	pop    edi
c001fc31:	5d                   	pop    ebp
c001fc32:	c3                   	ret    
c001fc33:	90                   	nop

c001fc34 <EnvVarContainer::deleteEnv(char const*)>:
c001fc34:	c3                   	ret    
c001fc35:	90                   	nop

c001fc36 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fc36:	55                   	push   ebp
c001fc37:	57                   	push   edi
c001fc38:	56                   	push   esi
c001fc39:	53                   	push   ebx
c001fc3a:	81 ec 38 01 00 00    	sub    esp,0x138
c001fc40:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fc47:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fc4e:	68 14 01 00 00       	push   0x114
c001fc53:	e8 8b 67 ff ff       	call   c00163e3 <malloc>
c001fc58:	83 c4 0c             	add    esp,0xc
c001fc5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc5e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc65:	89 c3                	mov    ebx,eax
c001fc67:	50                   	push   eax
c001fc68:	e8 c5 a7 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c001fc6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc70:	e8 9f aa ff ff       	call   c001a714 <File::exists()>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	84 c0                	test   al,al
c001fc7a:	75 31                	jne    c001fcad <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fc7c:	50                   	push   eax
c001fc7d:	50                   	push   eax
c001fc7e:	6a 12                	push   0x12
c001fc80:	53                   	push   ebx
c001fc81:	e8 ca a7 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c001fc86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fc88:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fc8b:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc8e:	e8 ed 08 fe ff       	call   c0000580 <strlen>
c001fc93:	5a                   	pop    edx
c001fc94:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fc98:	52                   	push   edx
c001fc99:	31 d2                	xor    edx,edx
c001fc9b:	56                   	push   esi
c001fc9c:	52                   	push   edx
c001fc9d:	50                   	push   eax
c001fc9e:	53                   	push   ebx
c001fc9f:	ff d7                	call   edi
c001fca1:	83 c4 14             	add    esp,0x14
c001fca4:	53                   	push   ebx
c001fca5:	e8 04 a8 ff ff       	call   c001a4ae <File::close()>
c001fcaa:	83 c4 10             	add    esp,0x10
c001fcad:	56                   	push   esi
c001fcae:	31 f6                	xor    esi,esi
c001fcb0:	68 00 01 00 00       	push   0x100
c001fcb5:	6a 00                	push   0x0
c001fcb7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fcbb:	50                   	push   eax
c001fcbc:	e8 2f 08 fe ff       	call   c00004f0 <memset>
c001fcc1:	5f                   	pop    edi
c001fcc2:	58                   	pop    eax
c001fcc3:	6a 01                	push   0x1
c001fcc5:	53                   	push   ebx
c001fcc6:	e8 85 a7 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fcd6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fcde:	83 ec 0c             	sub    esp,0xc
c001fce1:	8d 54 24 20          	lea    edx,[esp+0x20]
c001fce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fce7:	52                   	push   edx
c001fce8:	8d 4c 24 23          	lea    ecx,[esp+0x23]
c001fcec:	51                   	push   ecx
c001fced:	6a 00                	push   0x0
c001fcef:	6a 01                	push   0x1
c001fcf1:	53                   	push   ebx
c001fcf2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fcf5:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fcfa:	83 c4 20             	add    esp,0x20
c001fcfd:	85 c0                	test   eax,eax
c001fcff:	89 c1                	mov    ecx,eax
c001fd01:	0f 84 36 01 00 00    	je     c001fe3d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fd07:	83 f8 0d             	cmp    eax,0xd
c001fd0a:	0f 84 22 01 00 00    	je     c001fe32 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fd10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd15:	0f 84 f0 00 00 00    	je     c001fe0b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fd1b:	83 f8 0a             	cmp    eax,0xa
c001fd1e:	74 13                	je     c001fd33 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd20:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd25:	74 0c                	je     c001fd33 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd27:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fd2d:	0f 8e f6 00 00 00    	jle    c001fe29 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fd33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd37:	83 ec 0c             	sub    esp,0xc
c001fd3a:	8d 78 01             	lea    edi,[eax+0x1]
c001fd3d:	57                   	push   edi
c001fd3e:	e8 a0 66 ff ff       	call   c00163e3 <malloc>
c001fd43:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fd47:	8d 56 04             	lea    edx,[esi+0x4]
c001fd4a:	89 14 24             	mov    DWORD PTR [esp],edx
c001fd4d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fd51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fd55:	e8 89 66 ff ff       	call   c00163e3 <malloc>
c001fd5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fd5e:	83 c4 0c             	add    esp,0xc
c001fd61:	57                   	push   edi
c001fd62:	6a 00                	push   0x0
c001fd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fd68:	e8 83 07 fe ff       	call   c00004f0 <memset>
c001fd6d:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd71:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fd75:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd7b:	83 c4 0c             	add    esp,0xc
c001fd7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd82:	52                   	push   edx
c001fd83:	6a 00                	push   0x0
c001fd85:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fd89:	e8 62 07 fe ff       	call   c00004f0 <memset>
c001fd8e:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd92:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fd96:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd99:	e8 e2 07 fe ff       	call   c0000580 <strlen>
c001fd9e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fda2:	89 c1                	mov    ecx,eax
c001fda4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fda6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fda9:	83 c4 10             	add    esp,0x10
c001fdac:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fdaf:	40                   	inc    eax
c001fdb0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fdb3:	85 d2                	test   edx,edx
c001fdb5:	75 0c                	jne    c001fdc3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fdb7:	83 ec 0c             	sub    esp,0xc
c001fdba:	6a 08                	push   0x8
c001fdbc:	e8 22 66 ff ff       	call   c00163e3 <malloc>
c001fdc1:	eb 0c                	jmp    c001fdcf <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fdc3:	51                   	push   ecx
c001fdc4:	51                   	push   ecx
c001fdc5:	c1 e0 03             	shl    eax,0x3
c001fdc8:	50                   	push   eax
c001fdc9:	52                   	push   edx
c001fdca:	e8 00 66 ff ff       	call   c00163cf <realloc>
c001fdcf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fdd2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fdd5:	83 c4 10             	add    esp,0x10
c001fdd8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fddb:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fddf:	b9 08 00 00 00       	mov    ecx,0x8
c001fde4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fde8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdea:	50                   	push   eax
c001fdeb:	31 f6                	xor    esi,esi
c001fded:	68 00 01 00 00       	push   0x100
c001fdf2:	6a 00                	push   0x0
c001fdf4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fdf8:	50                   	push   eax
c001fdf9:	e8 f2 06 fe ff       	call   c00004f0 <memset>
c001fdfe:	83 c4 10             	add    esp,0x10
c001fe01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fe09:	eb 27                	jmp    c001fe32 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe0b:	83 f8 3d             	cmp    eax,0x3d
c001fe0e:	74 1e                	je     c001fe2e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fe10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fe16:	7f 07                	jg     c001fe1f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fe18:	88 4c 34 20          	mov    BYTE PTR [esp+esi*1+0x20],cl
c001fe1c:	46                   	inc    esi
c001fe1d:	eb 13                	jmp    c001fe32 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe1f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fe27:	eb 09                	jmp    c001fe32 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe29:	83 f8 3d             	cmp    eax,0x3d
c001fe2c:	75 ea                	jne    c001fe18 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fe2e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fe32:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe37:	0f 85 99 fe ff ff    	jne    c001fcd6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fe3d:	83 ec 0c             	sub    esp,0xc
c001fe40:	53                   	push   ebx
c001fe41:	e8 68 a6 ff ff       	call   c001a4ae <File::close()>
c001fe46:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fe48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fe4e:	81 c4 3c 01 00 00    	add    esp,0x13c
c001fe54:	5b                   	pop    ebx
c001fe55:	5e                   	pop    esi
c001fe56:	5f                   	pop    edi
c001fe57:	5d                   	pop    ebp
c001fe58:	c3                   	ret    
c001fe59:	90                   	nop

c001fe5a <EnvVarContainer::__loadSystem()>:
c001fe5a:	83 ec 10             	sub    esp,0x10
c001fe5d:	68 e0 40 03 c0       	push   0xc00340e0
c001fe62:	68 6c 27 03 c0       	push   0xc003276c
c001fe67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6b:	e8 c6 fd ff ff       	call   c001fc36 <EnvVarContainer::loadFrom(char const*, char const*)>
c001fe70:	83 c4 1c             	add    esp,0x1c
c001fe73:	c3                   	ret    

c001fe74 <EnvVarContainer::__loadUser()>:
c001fe74:	c3                   	ret    
c001fe75:	90                   	nop

c001fe76 <EnvVarContainer::EnvVarContainer(Process*)>:
c001fe76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe96:	90                   	nop
c001fe97:	c3                   	ret    

c001fe98 <EnvVarContainer::~EnvVarContainer()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fea2:	85 c0                	test   eax,eax
c001fea4:	74 1d                	je     c001fec3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001fea6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001feac:	85 c0                	test   eax,eax
c001feae:	74 13                	je     c001fec3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001feb7:	83 ec 0c             	sub    esp,0xc
c001feba:	50                   	push   eax
c001febb:	e8 33 65 ff ff       	call   c00163f3 <free>
c001fec0:	83 c4 10             	add    esp,0x10
c001fec3:	90                   	nop
c001fec4:	83 c4 0c             	add    esp,0xc
c001fec7:	c3                   	ret    

c001fec8 <KeGetEnv(Process*, char const*)>:
c001fec8:	53                   	push   ebx
c001fec9:	83 ec 08             	sub    esp,0x8
c001fecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed0:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001fed6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001feda:	74 04                	je     c001fee0 <KeGetEnv(Process*, char const*)+0x18>
c001fedc:	85 c0                	test   eax,eax
c001fede:	75 0b                	jne    c001feeb <KeGetEnv(Process*, char const*)+0x23>
c001fee0:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fee5:	85 c0                	test   eax,eax
c001fee7:	75 19                	jne    c001ff02 <KeGetEnv(Process*, char const*)+0x3a>
c001fee9:	eb 27                	jmp    c001ff12 <KeGetEnv(Process*, char const*)+0x4a>
c001feeb:	52                   	push   edx
c001feec:	52                   	push   edx
c001feed:	53                   	push   ebx
c001feee:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001fef4:	e8 3b fc ff ff       	call   c001fb34 <EnvVarContainer::getEnv(char const*)>
c001fef9:	83 c4 10             	add    esp,0x10
c001fefc:	85 c0                	test   eax,eax
c001fefe:	75 28                	jne    c001ff28 <KeGetEnv(Process*, char const*)+0x60>
c001ff00:	eb de                	jmp    c001fee0 <KeGetEnv(Process*, char const*)+0x18>
c001ff02:	52                   	push   edx
c001ff03:	52                   	push   edx
c001ff04:	53                   	push   ebx
c001ff05:	50                   	push   eax
c001ff06:	e8 29 fc ff ff       	call   c001fb34 <EnvVarContainer::getEnv(char const*)>
c001ff0b:	83 c4 10             	add    esp,0x10
c001ff0e:	85 c0                	test   eax,eax
c001ff10:	75 16                	jne    c001ff28 <KeGetEnv(Process*, char const*)+0x60>
c001ff12:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ff16:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ff1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff1f:	83 c4 08             	add    esp,0x8
c001ff22:	5b                   	pop    ebx
c001ff23:	e9 0c fc ff ff       	jmp    c001fb34 <EnvVarContainer::getEnv(char const*)>
c001ff28:	83 c4 08             	add    esp,0x8
c001ff2b:	5b                   	pop    ebx
c001ff2c:	c3                   	ret    

c001ff2d <KeSetEnvSystem(char const*, char const*)>:
c001ff2d:	83 ec 10             	sub    esp,0x10
c001ff30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff38:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001ff3e:	e8 2f fc ff ff       	call   c001fb72 <EnvVarContainer::setEnv(char const*, char const*)>
c001ff43:	83 c4 1c             	add    esp,0x1c
c001ff46:	c3                   	ret    

c001ff47 <KeSetEnvUser(char const*, char const*)>:
c001ff47:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ff4c:	85 c0                	test   eax,eax
c001ff4e:	74 15                	je     c001ff65 <KeSetEnvUser(char const*, char const*)+0x1e>
c001ff50:	83 ec 10             	sub    esp,0x10
c001ff53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff5b:	50                   	push   eax
c001ff5c:	e8 11 fc ff ff       	call   c001fb72 <EnvVarContainer::setEnv(char const*, char const*)>
c001ff61:	83 c4 1c             	add    esp,0x1c
c001ff64:	c3                   	ret    
c001ff65:	c3                   	ret    

c001ff66 <KeSetEnvProcess(Process*, char const*, char const*)>:
c001ff66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff6a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001ff70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff74:	e9 f9 fb ff ff       	jmp    c001fb72 <EnvVarContainer::setEnv(char const*, char const*)>

c001ff79 <KeDeleteEnvSystem(char const*)>:
c001ff79:	c3                   	ret    

c001ff7a <KeDeleteEnvUser(char const*)>:
c001ff7a:	c3                   	ret    

c001ff7b <KeDeleteEnvProcess(Process*, char const*)>:
c001ff7b:	c3                   	ret    

c001ff7c <KeNewProcessEnv(Process*)>:
c001ff7c:	83 ec 28             	sub    esp,0x28
c001ff7f:	6a 0c                	push   0xc
c001ff81:	e8 5d 64 ff ff       	call   c00163e3 <malloc>
c001ff86:	5a                   	pop    edx
c001ff87:	59                   	pop    ecx
c001ff88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ff8c:	50                   	push   eax
c001ff8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff91:	e8 e0 fe ff ff       	call   c001fe76 <EnvVarContainer::EnvVarContainer(Process*)>
c001ff96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff9a:	83 c4 2c             	add    esp,0x2c
c001ff9d:	c3                   	ret    

c001ff9e <KeCopyProcessEnv(Process*, Process*)>:
c001ff9e:	57                   	push   edi
c001ff9f:	56                   	push   esi
c001ffa0:	53                   	push   ebx
c001ffa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa5:	83 ec 0c             	sub    esp,0xc
c001ffa8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001ffae:	6a 0c                	push   0xc
c001ffb0:	e8 2e 64 ff ff       	call   c00163e3 <malloc>
c001ffb5:	89 c3                	mov    ebx,eax
c001ffb7:	58                   	pop    eax
c001ffb8:	5a                   	pop    edx
c001ffb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffbd:	53                   	push   ebx
c001ffbe:	e8 b3 fe ff ff       	call   c001fe76 <EnvVarContainer::EnvVarContainer(Process*)>
c001ffc3:	8b 07                	mov    eax,DWORD PTR [edi]
c001ffc5:	89 03                	mov    DWORD PTR [ebx],eax
c001ffc7:	c1 e0 03             	shl    eax,0x3
c001ffca:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffcd:	e8 11 64 ff ff       	call   c00163e3 <malloc>
c001ffd2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001ffd5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ffd7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001ffda:	89 c7                	mov    edi,eax
c001ffdc:	c1 e1 03             	shl    ecx,0x3
c001ffdf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffe1:	83 c4 10             	add    esp,0x10
c001ffe4:	89 d8                	mov    eax,ebx
c001ffe6:	5b                   	pop    ebx
c001ffe7:	5e                   	pop    esi
c001ffe8:	5f                   	pop    edi
c001ffe9:	c3                   	ret    

c001ffea <KeLoadSystemEnv()>:
c001ffea:	53                   	push   ebx
c001ffeb:	83 ec 14             	sub    esp,0x14
c001ffee:	6a 0c                	push   0xc
c001fff0:	e8 ee 63 ff ff       	call   c00163e3 <malloc>
c001fff5:	89 c3                	mov    ebx,eax
c001fff7:	58                   	pop    eax
c001fff8:	5a                   	pop    edx
c001fff9:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ffff:	53                   	push   ebx
c0020000:	e8 71 fe ff ff       	call   c001fe76 <EnvVarContainer::EnvVarContainer(Process*)>
c0020005:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020008:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c002000e:	e8 47 fe ff ff       	call   c001fe5a <EnvVarContainer::__loadSystem()>
c0020013:	83 c4 18             	add    esp,0x18
c0020016:	5b                   	pop    ebx
c0020017:	c3                   	ret    

c0020018 <KeLoadUserEnv()>:
c0020018:	53                   	push   ebx
c0020019:	83 ec 14             	sub    esp,0x14
c002001c:	6a 0c                	push   0xc
c002001e:	e8 c0 63 ff ff       	call   c00163e3 <malloc>
c0020023:	89 c3                	mov    ebx,eax
c0020025:	58                   	pop    eax
c0020026:	5a                   	pop    edx
c0020027:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002002d:	53                   	push   ebx
c002002e:	e8 43 fe ff ff       	call   c001fe76 <EnvVarContainer::EnvVarContainer(Process*)>
c0020033:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c0020039:	83 c4 18             	add    esp,0x18
c002003c:	5b                   	pop    ebx
c002003d:	c3                   	ret    

c002003e <KeFlushEnv()>:
c002003e:	c3                   	ret    

c002003f <KeGetProcessTotalEnvCount(Process*)>:
c002003f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020043:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c0020049:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002004f:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020054:	8b 00                	mov    eax,DWORD PTR [eax]
c0020056:	03 01                	add    eax,DWORD PTR [ecx]
c0020058:	85 d2                	test   edx,edx
c002005a:	74 02                	je     c002005e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c002005c:	03 02                	add    eax,DWORD PTR [edx]
c002005e:	c3                   	ret    

c002005f <KeGetProcessEnvPair(Process*, int)>:
c002005f:	57                   	push   edi
c0020060:	56                   	push   esi
c0020061:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c0020067:	53                   	push   ebx
c0020068:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002006c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020070:	85 f6                	test   esi,esi
c0020072:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020076:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002007c:	8b 01                	mov    eax,DWORD PTR [ecx]
c002007e:	75 16                	jne    c0020096 <KeGetProcessEnvPair(Process*, int)+0x37>
c0020080:	39 c2                	cmp    edx,eax
c0020082:	7c 16                	jl     c002009a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020084:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002008a:	8b 31                	mov    esi,DWORD PTR [ecx]
c002008c:	01 c6                	add    esi,eax
c002008e:	39 d6                	cmp    esi,edx
c0020090:	7e 3c                	jle    c00200ce <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020092:	29 c2                	sub    edx,eax
c0020094:	eb 04                	jmp    c002009a <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020096:	39 c2                	cmp    edx,eax
c0020098:	7d 05                	jge    c002009f <KeGetProcessEnvPair(Process*, int)+0x40>
c002009a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c002009d:	eb 20                	jmp    c00200bf <KeGetProcessEnvPair(Process*, int)+0x60>
c002009f:	8b 3e                	mov    edi,DWORD PTR [esi]
c00200a1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00200a4:	39 d1                	cmp    ecx,edx
c00200a6:	7e 04                	jle    c00200ac <KeGetProcessEnvPair(Process*, int)+0x4d>
c00200a8:	29 c2                	sub    edx,eax
c00200aa:	eb 10                	jmp    c00200bc <KeGetProcessEnvPair(Process*, int)+0x5d>
c00200ac:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00200b2:	03 0e                	add    ecx,DWORD PTR [esi]
c00200b4:	39 d1                	cmp    ecx,edx
c00200b6:	7e 16                	jle    c00200ce <KeGetProcessEnvPair(Process*, int)+0x6f>
c00200b8:	29 c2                	sub    edx,eax
c00200ba:	29 fa                	sub    edx,edi
c00200bc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00200bf:	8d 14 d0             	lea    edx,[eax+edx*8]
c00200c2:	8b 02                	mov    eax,DWORD PTR [edx]
c00200c4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00200c7:	89 03                	mov    DWORD PTR [ebx],eax
c00200c9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00200cc:	eb 1d                	jmp    c00200eb <KeGetProcessEnvPair(Process*, int)+0x8c>
c00200ce:	83 ec 0c             	sub    esp,0xc
c00200d1:	68 8e 27 03 c0       	push   0xc003278e
c00200d6:	e8 c7 00 00 00       	call   c00201a2 <KePanic(char const*)>
c00200db:	83 c4 10             	add    esp,0x10
c00200de:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00200e4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00200eb:	89 d8                	mov    eax,ebx
c00200ed:	5b                   	pop    ebx
c00200ee:	5e                   	pop    esi
c00200ef:	5f                   	pop    edi
c00200f0:	c2 04 00             	ret    0x4

c00200f3 <CPU::current()>:
c00200f3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00200f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00200fe:	c3                   	ret    

c00200ff <operator new(unsigned long)>:
c00200ff:	e9 df 62 ff ff       	jmp    c00163e3 <malloc>

c0020104 <operator delete(void*)>:
c0020104:	e9 fa 62 ff ff       	jmp    c0016403 <rfree>

c0020109 <disableIRQs()>:
c0020109:	fa                   	cli    
c002010a:	c3                   	ret    

c002010b <enableIRQs()>:
c002010b:	fb                   	sti    
c002010c:	c3                   	ret    

c002010d <lockScheduler()>:
c002010d:	fa                   	cli    
c002010e:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020114:	c3                   	ret    

c0020115 <unlockScheduler()>:
c0020115:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002011a:	48                   	dec    eax
c002011b:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020120:	75 01                	jne    c0020123 <unlockScheduler()+0xe>
c0020122:	fb                   	sti    
c0020123:	c3                   	ret    

c0020124 <lockStuff()>:
c0020124:	fa                   	cli    
c0020125:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002012b:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020131:	c3                   	ret    

c0020132 <unlockStuff()>:
c0020132:	83 ec 0c             	sub    esp,0xc
c0020135:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002013a:	48                   	dec    eax
c002013b:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020140:	75 18                	jne    c002015a <unlockStuff()+0x28>
c0020142:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c0020149:	74 0f                	je     c002015a <unlockStuff()+0x28>
c002014b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020155:	e8 42 50 00 00       	call   c002519c <schedule()>
c002015a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002015f:	48                   	dec    eax
c0020160:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020165:	75 01                	jne    c0020168 <unlockStuff()+0x36>
c0020167:	fb                   	sti    
c0020168:	83 c4 0c             	add    esp,0xc
c002016b:	c3                   	ret    

c002016c <Virt::getAKernelVAS()>:
c002016c:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020171:	c3                   	ret    

c0020172 <__not_memcpy>:
c0020172:	57                   	push   edi
c0020173:	56                   	push   esi
c0020174:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020178:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002017c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020180:	89 c7                	mov    edi,eax
c0020182:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020184:	5e                   	pop    esi
c0020185:	5f                   	pop    edi
c0020186:	c3                   	ret    
c0020187:	90                   	nop

c0020188 <Mutex::Mutex()>:
c0020188:	83 ec 0c             	sub    esp,0xc
c002018b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002018f:	83 ec 08             	sub    esp,0x8
c0020192:	6a 01                	push   0x1
c0020194:	50                   	push   eax
c0020195:	e8 ae 03 00 00       	call   c0020548 <Semaphore::Semaphore(int)>
c002019a:	83 c4 10             	add    esp,0x10
c002019d:	90                   	nop
c002019e:	83 c4 0c             	add    esp,0xc
c00201a1:	c3                   	ret    

c00201a2 <KePanic(char const*)>:
c00201a2:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00201a9:	e9 e6 6c 00 00       	jmp    c0026e94 <HalPanic(char const*)>

c00201ae <KePowerThread(void*)>:
c00201ae:	83 ec 0c             	sub    esp,0xc
c00201b1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201b6:	48                   	dec    eax
c00201b7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201bc:	75 01                	jne    c00201bf <KePowerThread(void*)+0x11>
c00201be:	fb                   	sti    
c00201bf:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	6a 0a                	push   0xa
c00201cb:	e8 b8 51 00 00       	call   c0025388 <sleep(unsigned int)>
c00201d0:	83 c4 10             	add    esp,0x10
c00201d3:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00201da:	eb e3                	jmp    c00201bf <KePowerThread(void*)+0x11>

c00201dc <KeChangePowerSettings(PowerSettings)>:
c00201dc:	57                   	push   edi
c00201dd:	b9 09 00 00 00       	mov    ecx,0x9
c00201e2:	56                   	push   esi
c00201e3:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00201e8:	fc                   	cld    
c00201e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00201ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00201ef:	5e                   	pop    esi
c00201f0:	5f                   	pop    edi
c00201f1:	c3                   	ret    

c00201f2 <KeUserIOReceived()>:
c00201f2:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c00201fc:	c3                   	ret    

c00201fd <KeHandlePowerButton()>:
c00201fd:	83 ec 0c             	sub    esp,0xc
c0020200:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c0020205:	83 f8 02             	cmp    eax,0x2
c0020208:	75 10                	jne    c002021a <KeHandlePowerButton()+0x1d>
c002020a:	83 ec 0c             	sub    esp,0xc
c002020d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020213:	e8 44 58 ff ff       	call   c0015a5c <Computer::shutdown()>
c0020218:	eb 11                	jmp    c002022b <KeHandlePowerButton()+0x2e>
c002021a:	48                   	dec    eax
c002021b:	75 11                	jne    c002022e <KeHandlePowerButton()+0x31>
c002021d:	83 ec 0c             	sub    esp,0xc
c0020220:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020226:	e8 61 58 ff ff       	call   c0015a8c <Computer::sleep()>
c002022b:	83 c4 10             	add    esp,0x10
c002022e:	83 c4 0c             	add    esp,0xc
c0020231:	c3                   	ret    

c0020232 <KeHandleSleepButton()>:
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c002023a:	83 f8 02             	cmp    eax,0x2
c002023d:	75 10                	jne    c002024f <KeHandleSleepButton()+0x1d>
c002023f:	83 ec 0c             	sub    esp,0xc
c0020242:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020248:	e8 0f 58 ff ff       	call   c0015a5c <Computer::shutdown()>
c002024d:	eb 11                	jmp    c0020260 <KeHandleSleepButton()+0x2e>
c002024f:	48                   	dec    eax
c0020250:	75 11                	jne    c0020263 <KeHandleSleepButton()+0x31>
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002025b:	e8 2c 58 ff ff       	call   c0015a8c <Computer::sleep()>
c0020260:	83 c4 10             	add    esp,0x10
c0020263:	83 c4 0c             	add    esp,0xc
c0020266:	c3                   	ret    

c0020267 <KeSetupPowerManager()>:
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	68 f0 00 00 00       	push   0xf0
c002026f:	6a 00                	push   0x0
c0020271:	68 ae 01 02 c0       	push   0xc00201ae
c0020276:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002027c:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020286:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c002028d:	e8 be 4c 00 00       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c0020292:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c002029c:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c00202a6:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00202b0:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00202ba:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00202c4:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00202ce:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00202d8:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00202e2:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00202ec:	83 c4 1c             	add    esp,0x1c
c00202ef:	c3                   	ret    

c00202f0 <KeRand()>:
c00202f0:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00202fa:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c0020304:	53                   	push   ebx
c0020305:	01 c1                	add    ecx,eax
c0020307:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c002030c:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c0020312:	01 ca                	add    edx,ecx
c0020314:	05 ef 04 b5 00       	add    eax,0xb504ef
c0020319:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002031e:	83 d2 00             	adc    edx,0x0
c0020321:	0f b7 da             	movzx  ebx,dx
c0020324:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c002032a:	0f ac d8 0e          	shrd   eax,ebx,0xe
c002032e:	5b                   	pop    ebx
c002032f:	c3                   	ret    

c0020330 <KeSeedRand(unsigned int)>:
c0020330:	53                   	push   ebx
c0020331:	83 ec 08             	sub    esp,0x8
c0020334:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020338:	e8 76 6e 00 00       	call   c00271b3 <HalGetRand()>
c002033d:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c0020347:	31 d8                	xor    eax,ebx
c0020349:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c002034e:	e8 9d ff ff ff       	call   c00202f0 <KeRand()>
c0020353:	83 c4 08             	add    esp,0x8
c0020356:	5b                   	pop    ebx
c0020357:	eb 97                	jmp    c00202f0 <KeRand()>

c0020359 <KeInitRand()>:
c0020359:	83 ec 0c             	sub    esp,0xc
c002035c:	e8 47 6c 00 00       	call   c0026fa8 <HalQueryPerformanceCounter()>
c0020361:	0f 20 da             	mov    edx,cr3
c0020364:	0f 22 da             	mov    cr3,edx
c0020367:	0f 20 da             	mov    edx,cr3
c002036a:	0f 22 da             	mov    cr3,edx
c002036d:	0f 20 da             	mov    edx,cr3
c0020370:	0f 22 da             	mov    cr3,edx
c0020373:	0f 20 da             	mov    edx,cr3
c0020376:	0f 22 da             	mov    cr3,edx
c0020379:	83 ec 0c             	sub    esp,0xc
c002037c:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020381:	50                   	push   eax
c0020382:	e8 a9 ff ff ff       	call   c0020330 <KeSeedRand(unsigned int)>
c0020387:	83 c4 1c             	add    esp,0x1c
c002038a:	c3                   	ret    
c002038b:	90                   	nop

c002038c <KeResolveCompatibilitySymbol(char*)>:
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	83 ec 08             	sub    esp,0x8
c0020392:	68 a8 27 03 c0       	push   0xc00327a8
c0020397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002039b:	e8 e0 03 fe ff       	call   c0000780 <strcmp>
c00203a0:	83 c4 10             	add    esp,0x10
c00203a3:	85 c0                	test   eax,eax
c00203a5:	0f 94 c0             	sete   al
c00203a8:	0f b6 c0             	movzx  eax,al
c00203ab:	85 c0                	test   eax,eax
c00203ad:	74 0d                	je     c00203bc <KeResolveCompatibilitySymbol(char*)+0x30>
c00203af:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00203b4:	e9 8b 01 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203b9:	8d 76 00             	lea    esi,[esi+0x0]
c00203bc:	83 ec 08             	sub    esp,0x8
c00203bf:	68 b1 27 03 c0       	push   0xc00327b1
c00203c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203c8:	e8 b3 03 fe ff       	call   c0000780 <strcmp>
c00203cd:	83 c4 10             	add    esp,0x10
c00203d0:	85 c0                	test   eax,eax
c00203d2:	0f 94 c0             	sete   al
c00203d5:	0f b6 c0             	movzx  eax,al
c00203d8:	85 c0                	test   eax,eax
c00203da:	74 0c                	je     c00203e8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00203dc:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c00203e1:	e9 5e 01 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203e6:	66 90                	xchg   ax,ax
c00203e8:	83 ec 08             	sub    esp,0x8
c00203eb:	68 bb 27 03 c0       	push   0xc00327bb
c00203f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203f4:	e8 87 03 fe ff       	call   c0000780 <strcmp>
c00203f9:	83 c4 10             	add    esp,0x10
c00203fc:	85 c0                	test   eax,eax
c00203fe:	0f 94 c0             	sete   al
c0020401:	0f b6 c0             	movzx  eax,al
c0020404:	85 c0                	test   eax,eax
c0020406:	74 0c                	je     c0020414 <KeResolveCompatibilitySymbol(char*)+0x88>
c0020408:	b8 34 e3 02 c0       	mov    eax,0xc002e334
c002040d:	e9 32 01 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020412:	66 90                	xchg   ax,ax
c0020414:	83 ec 08             	sub    esp,0x8
c0020417:	68 c4 27 03 c0       	push   0xc00327c4
c002041c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020420:	e8 5b 03 fe ff       	call   c0000780 <strcmp>
c0020425:	83 c4 10             	add    esp,0x10
c0020428:	85 c0                	test   eax,eax
c002042a:	0f 94 c0             	sete   al
c002042d:	0f b6 c0             	movzx  eax,al
c0020430:	85 c0                	test   eax,eax
c0020432:	74 0c                	je     c0020440 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0020434:	b8 a2 01 02 c0       	mov    eax,0xc00201a2
c0020439:	e9 06 01 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002043e:	66 90                	xchg   ax,ax
c0020440:	83 ec 08             	sub    esp,0x8
c0020443:	68 d7 27 03 c0       	push   0xc00327d7
c0020448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002044c:	e8 2f 03 fe ff       	call   c0000780 <strcmp>
c0020451:	83 c4 10             	add    esp,0x10
c0020454:	85 c0                	test   eax,eax
c0020456:	0f 94 c0             	sete   al
c0020459:	0f b6 c0             	movzx  eax,al
c002045c:	85 c0                	test   eax,eax
c002045e:	74 0c                	je     c002046c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020460:	b8 41 fa 01 c0       	mov    eax,0xc001fa41
c0020465:	e9 da 00 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002046a:	66 90                	xchg   ax,ax
c002046c:	83 ec 08             	sub    esp,0x8
c002046f:	68 f4 27 03 c0       	push   0xc00327f4
c0020474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020478:	e8 03 03 fe ff       	call   c0000780 <strcmp>
c002047d:	83 c4 10             	add    esp,0x10
c0020480:	85 c0                	test   eax,eax
c0020482:	0f 94 c0             	sete   al
c0020485:	0f b6 c0             	movzx  eax,al
c0020488:	85 c0                	test   eax,eax
c002048a:	74 0c                	je     c0020498 <KeResolveCompatibilitySymbol(char*)+0x10c>
c002048c:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0020491:	e9 ae 00 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020496:	66 90                	xchg   ax,ax
c0020498:	83 ec 08             	sub    esp,0x8
c002049b:	68 fe 27 03 c0       	push   0xc00327fe
c00204a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204a4:	e8 d7 02 fe ff       	call   c0000780 <strcmp>
c00204a9:	83 c4 10             	add    esp,0x10
c00204ac:	85 c0                	test   eax,eax
c00204ae:	0f 94 c0             	sete   al
c00204b1:	0f b6 c0             	movzx  eax,al
c00204b4:	85 c0                	test   eax,eax
c00204b6:	74 0c                	je     c00204c4 <KeResolveCompatibilitySymbol(char*)+0x138>
c00204b8:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c00204bd:	e9 82 00 00 00       	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204c2:	66 90                	xchg   ax,ax
c00204c4:	83 ec 08             	sub    esp,0x8
c00204c7:	68 07 28 03 c0       	push   0xc0032807
c00204cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204d0:	e8 ab 02 fe ff       	call   c0000780 <strcmp>
c00204d5:	83 c4 10             	add    esp,0x10
c00204d8:	85 c0                	test   eax,eax
c00204da:	0f 94 c0             	sete   al
c00204dd:	0f b6 c0             	movzx  eax,al
c00204e0:	85 c0                	test   eax,eax
c00204e2:	74 08                	je     c00204ec <KeResolveCompatibilitySymbol(char*)+0x160>
c00204e4:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00204e9:	eb 59                	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204eb:	90                   	nop
c00204ec:	83 ec 08             	sub    esp,0x8
c00204ef:	68 1f 28 03 c0       	push   0xc003281f
c00204f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204f8:	e8 83 02 fe ff       	call   c0000780 <strcmp>
c00204fd:	83 c4 10             	add    esp,0x10
c0020500:	85 c0                	test   eax,eax
c0020502:	0f 94 c0             	sete   al
c0020505:	0f b6 c0             	movzx  eax,al
c0020508:	85 c0                	test   eax,eax
c002050a:	74 08                	je     c0020514 <KeResolveCompatibilitySymbol(char*)+0x188>
c002050c:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020511:	eb 31                	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020513:	90                   	nop
c0020514:	83 ec 08             	sub    esp,0x8
c0020517:	68 2c 28 03 c0       	push   0xc003282c
c002051c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020520:	e8 5b 02 fe ff       	call   c0000780 <strcmp>
c0020525:	83 c4 10             	add    esp,0x10
c0020528:	85 c0                	test   eax,eax
c002052a:	0f 94 c0             	sete   al
c002052d:	0f b6 c0             	movzx  eax,al
c0020530:	85 c0                	test   eax,eax
c0020532:	74 08                	je     c002053c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0020534:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020539:	eb 09                	jmp    c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002053b:	90                   	nop
c002053c:	b8 00 00 00 00       	mov    eax,0x0
c0020541:	8d 76 00             	lea    esi,[esi+0x0]
c0020544:	83 c4 0c             	add    esp,0xc
c0020547:	c3                   	ret    

c0020548 <Semaphore::Semaphore(int)>:
c0020548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002054c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020550:	89 10                	mov    DWORD PTR [eax],edx
c0020552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020556:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c002055d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020561:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002056c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020573:	90                   	nop
c0020574:	c3                   	ret    
c0020575:	90                   	nop
c0020576:	66 90                	xchg   ax,ax

c0020578 <Semaphore::tryAcquire()>:
c0020578:	83 ec 0c             	sub    esp,0xc
c002057b:	fa                   	cli    
c002057c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020581:	83 c0 01             	add    eax,0x1
c0020584:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020589:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002058e:	83 c0 01             	add    eax,0x1
c0020591:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002059a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c002059d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00205a3:	39 c2                	cmp    edx,eax
c00205a5:	7d 5d                	jge    c0020604 <Semaphore::tryAcquire()+0x8c>
c00205a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205ae:	8d 50 01             	lea    edx,[eax+0x1]
c00205b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00205b8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205bd:	83 e8 01             	sub    eax,0x1
c00205c0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00205c5:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205ca:	85 c0                	test   eax,eax
c00205cc:	75 1a                	jne    c00205e8 <Semaphore::tryAcquire()+0x70>
c00205ce:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00205d3:	85 c0                	test   eax,eax
c00205d5:	74 11                	je     c00205e8 <Semaphore::tryAcquire()+0x70>
c00205d7:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00205e1:	e8 b6 4b 00 00       	call   c002519c <schedule()>
c00205e6:	66 90                	xchg   ax,ax
c00205e8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205ed:	83 e8 01             	sub    eax,0x1
c00205f0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00205f5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205fa:	85 c0                	test   eax,eax
c00205fc:	75 02                	jne    c0020600 <Semaphore::tryAcquire()+0x88>
c00205fe:	fb                   	sti    
c00205ff:	90                   	nop
c0020600:	b0 01                	mov    al,0x1
c0020602:	eb 4c                	jmp    c0020650 <Semaphore::tryAcquire()+0xd8>
c0020604:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020609:	83 e8 01             	sub    eax,0x1
c002060c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020611:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020616:	85 c0                	test   eax,eax
c0020618:	75 1a                	jne    c0020634 <Semaphore::tryAcquire()+0xbc>
c002061a:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002061f:	85 c0                	test   eax,eax
c0020621:	74 11                	je     c0020634 <Semaphore::tryAcquire()+0xbc>
c0020623:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002062d:	e8 6a 4b 00 00       	call   c002519c <schedule()>
c0020632:	66 90                	xchg   ax,ax
c0020634:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020639:	83 e8 01             	sub    eax,0x1
c002063c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020641:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020646:	85 c0                	test   eax,eax
c0020648:	75 02                	jne    c002064c <Semaphore::tryAcquire()+0xd4>
c002064a:	fb                   	sti    
c002064b:	90                   	nop
c002064c:	b0 00                	mov    al,0x0
c002064e:	66 90                	xchg   ax,ax
c0020650:	83 c4 0c             	add    esp,0xc
c0020653:	c3                   	ret    

c0020654 <Semaphore::assertLocked(char const*)>:
c0020654:	83 ec 0c             	sub    esp,0xc
c0020657:	fa                   	cli    
c0020658:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002065d:	83 c0 01             	add    eax,0x1
c0020660:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020665:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002066a:	83 c0 01             	add    eax,0x1
c002066d:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020676:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067d:	8b 00                	mov    eax,DWORD PTR [eax]
c002067f:	39 c2                	cmp    edx,eax
c0020681:	7d 11                	jge    c0020694 <Semaphore::assertLocked(char const*)+0x40>
c0020683:	83 ec 0c             	sub    esp,0xc
c0020686:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002068a:	e8 13 fb ff ff       	call   c00201a2 <KePanic(char const*)>
c002068f:	83 c4 10             	add    esp,0x10
c0020692:	66 90                	xchg   ax,ax
c0020694:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020699:	83 e8 01             	sub    eax,0x1
c002069c:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206a1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206a6:	85 c0                	test   eax,eax
c00206a8:	75 1a                	jne    c00206c4 <Semaphore::assertLocked(char const*)+0x70>
c00206aa:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206af:	85 c0                	test   eax,eax
c00206b1:	74 11                	je     c00206c4 <Semaphore::assertLocked(char const*)+0x70>
c00206b3:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206bd:	e8 da 4a 00 00       	call   c002519c <schedule()>
c00206c2:	66 90                	xchg   ax,ax
c00206c4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206c9:	83 e8 01             	sub    eax,0x1
c00206cc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206d1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206d6:	85 c0                	test   eax,eax
c00206d8:	75 02                	jne    c00206dc <Semaphore::assertLocked(char const*)+0x88>
c00206da:	fb                   	sti    
c00206db:	90                   	nop
c00206dc:	90                   	nop
c00206dd:	83 c4 0c             	add    esp,0xc
c00206e0:	c3                   	ret    
c00206e1:	90                   	nop
c00206e2:	66 90                	xchg   ax,ax

c00206e4 <Semaphore::acquire(int)>:
c00206e4:	83 ec 1c             	sub    esp,0x1c
c00206e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206ec:	0f 84 9a 00 00 00    	je     c002078c <Semaphore::acquire(int)+0xa8>
c00206f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00206fa:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00206ff:	90                   	nop
c0020700:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0020705:	85 c0                	test   eax,eax
c0020707:	74 77                	je     c0020780 <Semaphore::acquire(int)+0x9c>
c0020709:	83 ec 0c             	sub    esp,0xc
c002070c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020710:	e8 63 fe ff ff       	call   c0020578 <Semaphore::tryAcquire()>
c0020715:	83 c4 10             	add    esp,0x10
c0020718:	83 f0 01             	xor    eax,0x1
c002071b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002071f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0020723:	83 f0 01             	xor    eax,0x1
c0020726:	0f b6 c0             	movzx  eax,al
c0020729:	85 c0                	test   eax,eax
c002072b:	75 4f                	jne    c002077c <Semaphore::acquire(int)+0x98>
c002072d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0020732:	7f 2c                	jg     c0020760 <Semaphore::acquire(int)+0x7c>
c0020734:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020738:	89 d0                	mov    eax,edx
c002073a:	c1 e0 02             	shl    eax,0x2
c002073d:	01 d0                	add    eax,edx
c002073f:	d1 e0                	shl    eax,1
c0020741:	83 ec 0c             	sub    esp,0xc
c0020744:	50                   	push   eax
c0020745:	e8 2a 4c 00 00       	call   c0025374 <milliTenthSleep(unsigned int)>
c002074a:	83 c4 10             	add    esp,0x10
c002074d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020751:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0020755:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c002075d:	eb a1                	jmp    c0020700 <Semaphore::acquire(int)+0x1c>
c002075f:	90                   	nop
c0020760:	83 ec 0c             	sub    esp,0xc
c0020763:	68 90 01 00 00       	push   0x190
c0020768:	e8 07 4c 00 00       	call   c0025374 <milliTenthSleep(unsigned int)>
c002076d:	83 c4 10             	add    esp,0x10
c0020770:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0020775:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c002077a:	eb 84                	jmp    c0020700 <Semaphore::acquire(int)+0x1c>
c002077c:	90                   	nop
c002077d:	8d 76 00             	lea    esi,[esi+0x0]
c0020780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020784:	e9 ff 00 00 00       	jmp    c0020888 <Semaphore::acquire(int)+0x1a4>
c0020789:	8d 76 00             	lea    esi,[esi+0x0]
c002078c:	fa                   	cli    
c002078d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020792:	83 c0 01             	add    eax,0x1
c0020795:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002079a:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002079f:	83 c0 01             	add    eax,0x1
c00207a2:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00207a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00207ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00207b4:	39 c2                	cmp    edx,eax
c00207b6:	7d 14                	jge    c00207cc <Semaphore::acquire(int)+0xe8>
c00207b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00207bf:	8d 50 01             	lea    edx,[eax+0x1]
c00207c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207c6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00207c9:	eb 6d                	jmp    c0020838 <Semaphore::acquire(int)+0x154>
c00207cb:	90                   	nop
c00207cc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00207d3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00207da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207e1:	85 c0                	test   eax,eax
c00207e3:	75 13                	jne    c00207f8 <Semaphore::acquire(int)+0x114>
c00207e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00207ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00207f3:	eb 17                	jmp    c002080c <Semaphore::acquire(int)+0x128>
c00207f5:	8d 76 00             	lea    esi,[esi+0x0]
c00207f8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00207fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020801:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020804:	8b 12                	mov    edx,DWORD PTR [edx]
c0020806:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020809:	8d 76 00             	lea    esi,[esi+0x0]
c002080c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020811:	8b 10                	mov    edx,DWORD PTR [eax]
c0020813:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020817:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002081a:	83 ec 0c             	sub    esp,0xc
c002081d:	68 3c 28 03 c0       	push   0xc003283c
c0020822:	e8 f3 89 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0020827:	83 c4 10             	add    esp,0x10
c002082a:	83 ec 0c             	sub    esp,0xc
c002082d:	6a 05                	push   0x5
c002082f:	e8 24 4a 00 00       	call   c0025258 <blockTask(TaskState)>
c0020834:	83 c4 10             	add    esp,0x10
c0020837:	90                   	nop
c0020838:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002083d:	83 e8 01             	sub    eax,0x1
c0020840:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020845:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002084a:	85 c0                	test   eax,eax
c002084c:	75 1a                	jne    c0020868 <Semaphore::acquire(int)+0x184>
c002084e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020853:	85 c0                	test   eax,eax
c0020855:	74 11                	je     c0020868 <Semaphore::acquire(int)+0x184>
c0020857:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020861:	e8 36 49 00 00       	call   c002519c <schedule()>
c0020866:	66 90                	xchg   ax,ax
c0020868:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002086d:	83 e8 01             	sub    eax,0x1
c0020870:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020875:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002087a:	85 c0                	test   eax,eax
c002087c:	75 02                	jne    c0020880 <Semaphore::acquire(int)+0x19c>
c002087e:	fb                   	sti    
c002087f:	90                   	nop
c0020880:	b8 00 00 00 00       	mov    eax,0x0
c0020885:	8d 76 00             	lea    esi,[esi+0x0]
c0020888:	83 c4 1c             	add    esp,0x1c
c002088b:	c3                   	ret    

c002088c <Semaphore::acquire()>:
c002088c:	83 ec 0c             	sub    esp,0xc
c002088f:	83 ec 08             	sub    esp,0x8
c0020892:	6a 00                	push   0x0
c0020894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020898:	e8 47 fe ff ff       	call   c00206e4 <Semaphore::acquire(int)>
c002089d:	83 c4 10             	add    esp,0x10
c00208a0:	90                   	nop
c00208a1:	83 c4 0c             	add    esp,0xc
c00208a4:	c3                   	ret    
c00208a5:	90                   	nop
c00208a6:	66 90                	xchg   ax,ax

c00208a8 <Semaphore::release()>:
c00208a8:	83 ec 1c             	sub    esp,0x1c
c00208ab:	fa                   	cli    
c00208ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208b1:	83 c0 01             	add    eax,0x1
c00208b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208b9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208be:	83 c0 01             	add    eax,0x1
c00208c1:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208cd:	85 c0                	test   eax,eax
c00208cf:	74 2b                	je     c00208fc <Semaphore::release()+0x54>
c00208d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00208e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208ea:	83 ec 0c             	sub    esp,0xc
c00208ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208f1:	e8 92 4b 00 00       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c00208f6:	83 c4 10             	add    esp,0x10
c00208f9:	eb 15                	jmp    c0020910 <Semaphore::release()+0x68>
c00208fb:	90                   	nop
c00208fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020903:	8d 50 ff             	lea    edx,[eax-0x1]
c0020906:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002090a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002090d:	8d 76 00             	lea    esi,[esi+0x0]
c0020910:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020915:	83 e8 01             	sub    eax,0x1
c0020918:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002091d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020922:	85 c0                	test   eax,eax
c0020924:	75 1a                	jne    c0020940 <Semaphore::release()+0x98>
c0020926:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002092b:	85 c0                	test   eax,eax
c002092d:	74 11                	je     c0020940 <Semaphore::release()+0x98>
c002092f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020939:	e8 5e 48 00 00       	call   c002519c <schedule()>
c002093e:	66 90                	xchg   ax,ax
c0020940:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020945:	83 e8 01             	sub    eax,0x1
c0020948:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002094d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020952:	85 c0                	test   eax,eax
c0020954:	75 02                	jne    c0020958 <Semaphore::release()+0xb0>
c0020956:	fb                   	sti    
c0020957:	90                   	nop
c0020958:	90                   	nop
c0020959:	83 c4 1c             	add    esp,0x1c
c002095c:	c3                   	ret    

c002095d <KiSigKill(int)>:
c002095d:	83 ec 0c             	sub    esp,0xc
c0020960:	6a 00                	push   0x0
c0020962:	6a 00                	push   0x0
c0020964:	6a ff                	push   0xffffffff
c0020966:	6a 01                	push   0x1
c0020968:	e8 e5 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002096d:	83 c4 1c             	add    esp,0x1c
c0020970:	c3                   	ret    

c0020971 <KiDefaultSignalHandlerIgnore(int)>:
c0020971:	c3                   	ret    

c0020972 <KiDefaultSignalHandlerPause(int)>:
c0020972:	57                   	push   edi
c0020973:	b9 07 00 00 00       	mov    ecx,0x7
c0020978:	56                   	push   esi
c0020979:	be 97 28 03 c0       	mov    esi,0xc0032897
c002097e:	83 ec 24             	sub    esp,0x24
c0020981:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020985:	fc                   	cld    
c0020986:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020988:	8d 44 24 04          	lea    eax,[esp+0x4]
c002098c:	50                   	push   eax
c002098d:	6a 00                	push   0x0
c002098f:	6a 00                	push   0x0
c0020991:	6a 27                	push   0x27
c0020993:	e8 ba 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020998:	83 c4 34             	add    esp,0x34
c002099b:	5e                   	pop    esi
c002099c:	5f                   	pop    edi
c002099d:	c3                   	ret    

c002099e <KiDefaultSignalHandlerResume(int)>:
c002099e:	57                   	push   edi
c002099f:	b9 1d 00 00 00       	mov    ecx,0x1d
c00209a4:	56                   	push   esi
c00209a5:	be b3 28 03 c0       	mov    esi,0xc00328b3
c00209aa:	83 ec 24             	sub    esp,0x24
c00209ad:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00209b1:	fc                   	cld    
c00209b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209b4:	8d 44 24 03          	lea    eax,[esp+0x3]
c00209b8:	50                   	push   eax
c00209b9:	6a 00                	push   0x0
c00209bb:	6a 00                	push   0x0
c00209bd:	6a 27                	push   0x27
c00209bf:	e8 8e 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00209c4:	83 c4 34             	add    esp,0x34
c00209c7:	5e                   	pop    esi
c00209c8:	5f                   	pop    edi
c00209c9:	c3                   	ret    

c00209ca <KeDeinitSignals(SigHandlerBlock*)>:
c00209ca:	e9 24 5a ff ff       	jmp    c00163f3 <free>

c00209cf <KeInitSignals()>:
c00209cf:	53                   	push   ebx
c00209d0:	83 ec 14             	sub    esp,0x14
c00209d3:	68 c8 00 00 00       	push   0xc8
c00209d8:	e8 06 5a ff ff       	call   c00163e3 <malloc>
c00209dd:	83 c4 0c             	add    esp,0xc
c00209e0:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00209ea:	89 c3                	mov    ebx,eax
c00209ec:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00209f6:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00209fc:	c6 40 28 00          	mov    BYTE PTR [eax+0x28],0x0
c0020a00:	6a 20                	push   0x20
c0020a02:	6a 00                	push   0x0
c0020a04:	50                   	push   eax
c0020a05:	e8 e6 fa fd ff       	call   c00004f0 <memset>
c0020a0a:	83 c4 0c             	add    esp,0xc
c0020a0d:	6a 44                	push   0x44
c0020a0f:	6a 00                	push   0x0
c0020a11:	53                   	push   ebx
c0020a12:	e8 d9 fa fd ff       	call   c00004f0 <memset>
c0020a17:	83 c4 18             	add    esp,0x18
c0020a1a:	89 d8                	mov    eax,ebx
c0020a1c:	5b                   	pop    ebx
c0020a1d:	c3                   	ret    

c0020a1e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020a1e:	53                   	push   ebx
c0020a1f:	b8 01 00 00 00       	mov    eax,0x1
c0020a24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a2c:	83 f9 10             	cmp    ecx,0x10
c0020a2f:	7f 21                	jg     c0020a52 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020a31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a35:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020a38:	89 03                	mov    DWORD PTR [ebx],eax
c0020a3a:	b8 01 00 00 00       	mov    eax,0x1
c0020a3f:	d3 e0                	shl    eax,cl
c0020a41:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020a45:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020a48:	31 c0                	xor    eax,eax
c0020a4a:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020a52:	5b                   	pop    ebx
c0020a53:	c3                   	ret    

c0020a54 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020a54:	55                   	push   ebp
c0020a55:	57                   	push   edi
c0020a56:	bf 08 00 00 00       	mov    edi,0x8
c0020a5b:	56                   	push   esi
c0020a5c:	53                   	push   ebx
c0020a5d:	83 ec 18             	sub    esp,0x18
c0020a60:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a64:	68 d0 28 03 c0       	push   0xc00328d0
c0020a69:	e8 ac 87 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0020a6e:	83 c4 10             	add    esp,0x10
c0020a71:	31 c9                	xor    ecx,ecx
c0020a73:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020a7a:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020a80:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020a84:	99                   	cdq    
c0020a85:	f7 ff                	idiv   edi
c0020a87:	8d 42 24             	lea    eax,[edx+0x24]
c0020a8a:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020a8e:	85 f6                	test   esi,esi
c0020a90:	75 1a                	jne    c0020aac <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020a92:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020a96:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020a9a:	50                   	push   eax
c0020a9b:	50                   	push   eax
c0020a9c:	52                   	push   edx
c0020a9d:	68 e1 28 03 c0       	push   0xc00328e1
c0020aa2:	e8 73 87 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0020aa7:	83 c4 10             	add    esp,0x10
c0020aaa:	eb 1b                	jmp    c0020ac7 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020aac:	41                   	inc    ecx
c0020aad:	83 f9 08             	cmp    ecx,0x8
c0020ab0:	75 ce                	jne    c0020a80 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020ab2:	83 ec 0c             	sub    esp,0xc
c0020ab5:	be 01 00 00 00       	mov    esi,0x1
c0020aba:	68 02 29 03 c0       	push   0xc0032902
c0020abf:	e8 56 87 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0020ac4:	83 c4 10             	add    esp,0x10
c0020ac7:	83 c4 0c             	add    esp,0xc
c0020aca:	89 f0                	mov    eax,esi
c0020acc:	5b                   	pop    ebx
c0020acd:	5e                   	pop    esi
c0020ace:	5f                   	pop    edi
c0020acf:	5d                   	pop    ebp
c0020ad0:	c3                   	ret    

c0020ad1 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020ad1:	55                   	push   ebp
c0020ad2:	57                   	push   edi
c0020ad3:	56                   	push   esi
c0020ad4:	53                   	push   ebx
c0020ad5:	51                   	push   ecx
c0020ad6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ada:	85 db                	test   ebx,ebx
c0020adc:	0f 84 bc 00 00 00    	je     c0020b9e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020ae2:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020ae9:	0f 84 af 00 00 00    	je     c0020b9e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020aef:	31 c9                	xor    ecx,ecx
c0020af1:	bf 08 00 00 00       	mov    edi,0x8
c0020af6:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020afc:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020aff:	99                   	cdq    
c0020b00:	f7 ff                	idiv   edi
c0020b02:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020b09:	85 ed                	test   ebp,ebp
c0020b0b:	0f 84 9e 00 00 00    	je     c0020baf <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020b11:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020b17:	89 e9                	mov    ecx,ebp
c0020b19:	bf 01 00 00 00       	mov    edi,0x1
c0020b1e:	d3 e7                	shl    edi,cl
c0020b20:	31 c9                	xor    ecx,ecx
c0020b22:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b25:	b8 01 00 00 00       	mov    eax,0x1
c0020b2a:	d3 e0                	shl    eax,cl
c0020b2c:	85 04 24             	test   DWORD PTR [esp],eax
c0020b2f:	74 06                	je     c0020b37 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020b31:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020b35:	75 67                	jne    c0020b9e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020b37:	41                   	inc    ecx
c0020b38:	83 f9 11             	cmp    ecx,0x11
c0020b3b:	75 e8                	jne    c0020b25 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020b3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b40:	46                   	inc    esi
c0020b41:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020b47:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020b52:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020b59:	09 f8                	or     eax,edi
c0020b5b:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020b61:	31 c0                	xor    eax,eax
c0020b63:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020b6b:	74 09                	je     c0020b76 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020b6d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b74:	eb 06                	jmp    c0020b7c <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020b76:	40                   	inc    eax
c0020b77:	83 f8 08             	cmp    eax,0x8
c0020b7a:	75 e7                	jne    c0020b63 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020b7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b80:	83 fd 09             	cmp    ebp,0x9
c0020b83:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020b86:	89 2a                	mov    DWORD PTR [edx],ebp
c0020b88:	75 07                	jne    c0020b91 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020b8a:	b8 5d 09 02 c0       	mov    eax,0xc002095d
c0020b8f:	eb 31                	jmp    c0020bc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020b91:	83 f8 01             	cmp    eax,0x1
c0020b94:	75 0c                	jne    c0020ba2 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020b96:	f7 d7                	not    edi
c0020b98:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020b9e:	31 c0                	xor    eax,eax
c0020ba0:	eb 20                	jmp    c0020bc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ba2:	85 c0                	test   eax,eax
c0020ba4:	75 1c                	jne    c0020bc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020ba6:	8b 04 ad 40 41 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbec0]
c0020bad:	eb 13                	jmp    c0020bc2 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020baf:	41                   	inc    ecx
c0020bb0:	46                   	inc    esi
c0020bb1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020bb7:	83 f9 08             	cmp    ecx,0x8
c0020bba:	0f 85 36 ff ff ff    	jne    c0020af6 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020bc0:	eb dc                	jmp    c0020b9e <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bc2:	5a                   	pop    edx
c0020bc3:	5b                   	pop    ebx
c0020bc4:	5e                   	pop    esi
c0020bc5:	5f                   	pop    edi
c0020bc6:	5d                   	pop    ebp
c0020bc7:	c3                   	ret    

c0020bc8 <KiCheckSignalZ>:
c0020bc8:	83 ec 10             	sub    esp,0x10
c0020bcb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bcf:	50                   	push   eax
c0020bd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020bd5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020bd8:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020bde:	e8 ee fe ff ff       	call   c0020ad1 <KeCheckSignal(SigHandlerBlock*, int*)>
c0020be3:	5a                   	pop    edx
c0020be4:	31 d2                	xor    edx,edx
c0020be6:	59                   	pop    ecx
c0020be7:	85 c0                	test   eax,eax
c0020be9:	74 19                	je     c0020c04 <KiCheckSignalZ+0x3c>
c0020beb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020bf1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020bf4:	89 02                	mov    DWORD PTR [edx],eax
c0020bf6:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c01:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020c04:	89 d0                	mov    eax,edx
c0020c06:	83 c4 10             	add    esp,0x10
c0020c09:	c3                   	ret    

c0020c0a <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020c0a:	56                   	push   esi
c0020c0b:	53                   	push   ebx
c0020c0c:	bb 01 00 00 00       	mov    ebx,0x1
c0020c11:	52                   	push   edx
c0020c12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c16:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020c1a:	d3 e3                	shl    ebx,cl
c0020c1c:	83 f9 10             	cmp    ecx,0x10
c0020c1f:	7f 08                	jg     c0020c29 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020c21:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020c27:	75 10                	jne    c0020c39 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020c29:	83 ec 0c             	sub    esp,0xc
c0020c2c:	68 13 29 03 c0       	push   0xc0032913
c0020c31:	e8 6c f5 ff ff       	call   c00201a2 <KePanic(char const*)>
c0020c36:	83 c4 10             	add    esp,0x10
c0020c39:	f7 d3                	not    ebx
c0020c3b:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020c41:	58                   	pop    eax
c0020c42:	5b                   	pop    ebx
c0020c43:	5e                   	pop    esi
c0020c44:	c3                   	ret    

c0020c45 <KiFinishSignalZ>:
c0020c45:	53                   	push   ebx
c0020c46:	83 ec 10             	sub    esp,0x10
c0020c49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020c4d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020c50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c55:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c58:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020c5e:	e8 a7 ff ff ff       	call   c0020c0a <KeCompleteSignal(SigHandlerBlock*, int)>
c0020c63:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020c69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020c70:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020c77:	83 c4 18             	add    esp,0x18
c0020c7a:	5b                   	pop    ebx
c0020c7b:	c3                   	ret    

c0020c7c <SysSeekDir(regs*)>:
c0020c7c:	31 c0                	xor    eax,eax
c0020c7e:	31 d2                	xor    edx,edx
c0020c80:	c3                   	ret    

c0020c81 <SysTellDir(regs*)>:
c0020c81:	31 c0                	xor    eax,eax
c0020c83:	31 d2                	xor    edx,edx
c0020c85:	c3                   	ret    

c0020c86 <SysVerify(regs*)>:
c0020c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c8a:	31 d2                	xor    edx,edx
c0020c8c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020c8f:	c3                   	ret    

c0020c90 <SysGetArgc(regs*)>:
c0020c90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c95:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c98:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020c9e:	89 c2                	mov    edx,eax
c0020ca0:	c1 fa 1f             	sar    edx,0x1f
c0020ca3:	c3                   	ret    

c0020ca4 <SysTTYName(regs*)>:
c0020ca4:	b8 01 00 00 00       	mov    eax,0x1
c0020ca9:	31 d2                	xor    edx,edx
c0020cab:	c3                   	ret    

c0020cac <SysFormatDisk(regs*)>:
c0020cac:	56                   	push   esi
c0020cad:	53                   	push   ebx
c0020cae:	83 ec 04             	sub    esp,0x4
c0020cb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cb5:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020cbb:	eb 2a                	jmp    c0020ce7 <SysFormatDisk(regs*)+0x3b>
c0020cbd:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020cc0:	83 ec 0c             	sub    esp,0xc
c0020cc3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020cc6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020cc8:	51                   	push   ecx
c0020cc9:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020ccc:	51                   	push   ecx
c0020ccd:	50                   	push   eax
c0020cce:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020cd5:	50                   	push   eax
c0020cd6:	53                   	push   ebx
c0020cd7:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020cda:	83 c4 20             	add    esp,0x20
c0020cdd:	83 f8 08             	cmp    eax,0x8
c0020ce0:	89 c1                	mov    ecx,eax
c0020ce2:	75 14                	jne    c0020cf8 <SysFormatDisk(regs*)+0x4c>
c0020ce4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020ce7:	85 db                	test   ebx,ebx
c0020ce9:	75 d2                	jne    c0020cbd <SysFormatDisk(regs*)+0x11>
c0020ceb:	b8 03 00 00 00       	mov    eax,0x3
c0020cf0:	31 d2                	xor    edx,edx
c0020cf2:	83 c4 04             	add    esp,0x4
c0020cf5:	5b                   	pop    ebx
c0020cf6:	5e                   	pop    esi
c0020cf7:	c3                   	ret    
c0020cf8:	85 c0                	test   eax,eax
c0020cfa:	74 13                	je     c0020d0f <SysFormatDisk(regs*)+0x63>
c0020cfc:	31 d2                	xor    edx,edx
c0020cfe:	83 f9 09             	cmp    ecx,0x9
c0020d01:	b8 01 00 00 00       	mov    eax,0x1
c0020d06:	74 ea                	je     c0020cf2 <SysFormatDisk(regs*)+0x46>
c0020d08:	b8 02 00 00 00       	mov    eax,0x2
c0020d0d:	eb e1                	jmp    c0020cf0 <SysFormatDisk(regs*)+0x44>
c0020d0f:	31 c0                	xor    eax,eax
c0020d11:	eb dd                	jmp    c0020cf0 <SysFormatDisk(regs*)+0x44>

c0020d13 <SysSetDiskVolumeLabel(regs*)>:
c0020d13:	56                   	push   esi
c0020d14:	53                   	push   ebx
c0020d15:	83 ec 04             	sub    esp,0x4
c0020d18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d1c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020d1f:	83 f8 19             	cmp    eax,0x19
c0020d22:	77 33                	ja     c0020d57 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d24:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020d2b:	85 c9                	test   ecx,ecx
c0020d2d:	74 28                	je     c0020d57 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d2f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020d32:	85 db                	test   ebx,ebx
c0020d34:	74 21                	je     c0020d57 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d36:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020d3c:	85 d2                	test   edx,edx
c0020d3e:	74 17                	je     c0020d57 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d40:	8b 32                	mov    esi,DWORD PTR [edx]
c0020d42:	53                   	push   ebx
c0020d43:	50                   	push   eax
c0020d44:	51                   	push   ecx
c0020d45:	52                   	push   edx
c0020d46:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020d49:	83 c4 10             	add    esp,0x10
c0020d4c:	83 c4 04             	add    esp,0x4
c0020d4f:	5b                   	pop    ebx
c0020d50:	5e                   	pop    esi
c0020d51:	89 c2                	mov    edx,eax
c0020d53:	c1 fa 1f             	sar    edx,0x1f
c0020d56:	c3                   	ret    
c0020d57:	83 c4 04             	add    esp,0x4
c0020d5a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020d5f:	5b                   	pop    ebx
c0020d60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020d65:	5e                   	pop    esi
c0020d66:	c3                   	ret    

c0020d67 <SysGetDiskVolumeLabel(regs*)>:
c0020d67:	57                   	push   edi
c0020d68:	56                   	push   esi
c0020d69:	53                   	push   ebx
c0020d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d6e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020d71:	83 fa 19             	cmp    edx,0x19
c0020d74:	77 3c                	ja     c0020db2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d76:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020d7d:	85 c9                	test   ecx,ecx
c0020d7f:	74 31                	je     c0020db2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d81:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020d84:	85 db                	test   ebx,ebx
c0020d86:	74 2a                	je     c0020db2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d88:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020d8b:	85 f6                	test   esi,esi
c0020d8d:	74 23                	je     c0020db2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d8f:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020d95:	85 c0                	test   eax,eax
c0020d97:	74 19                	je     c0020db2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d99:	83 ec 0c             	sub    esp,0xc
c0020d9c:	8b 38                	mov    edi,DWORD PTR [eax]
c0020d9e:	56                   	push   esi
c0020d9f:	53                   	push   ebx
c0020da0:	52                   	push   edx
c0020da1:	51                   	push   ecx
c0020da2:	50                   	push   eax
c0020da3:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020da6:	83 c4 20             	add    esp,0x20
c0020da9:	5b                   	pop    ebx
c0020daa:	5e                   	pop    esi
c0020dab:	89 c2                	mov    edx,eax
c0020dad:	c1 fa 1f             	sar    edx,0x1f
c0020db0:	5f                   	pop    edi
c0020db1:	c3                   	ret    
c0020db2:	5b                   	pop    ebx
c0020db3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020db8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020dbd:	5e                   	pop    esi
c0020dbe:	5f                   	pop    edi
c0020dbf:	c3                   	ret    

c0020dc0 <SysShutdown(regs*)>:
c0020dc0:	57                   	push   edi
c0020dc1:	56                   	push   esi
c0020dc2:	83 ec 04             	sub    esp,0x4
c0020dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020dcc:	85 c0                	test   eax,eax
c0020dce:	74 1e                	je     c0020dee <SysShutdown(regs*)+0x2e>
c0020dd0:	83 f8 01             	cmp    eax,0x1
c0020dd3:	74 5f                	je     c0020e34 <SysShutdown(regs*)+0x74>
c0020dd5:	83 f8 02             	cmp    eax,0x2
c0020dd8:	be ff ff ff ff       	mov    esi,0xffffffff
c0020ddd:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020de2:	74 32                	je     c0020e16 <SysShutdown(regs*)+0x56>
c0020de4:	83 c4 04             	add    esp,0x4
c0020de7:	89 f0                	mov    eax,esi
c0020de9:	5e                   	pop    esi
c0020dea:	89 fa                	mov    edx,edi
c0020dec:	5f                   	pop    edi
c0020ded:	c3                   	ret    
c0020dee:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020df3:	be ff ff ff ff       	mov    esi,0xffffffff
c0020df8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0020dfd:	8b 10                	mov    edx,DWORD PTR [eax]
c0020dff:	6a 00                	push   0x0
c0020e01:	6a 00                	push   0x0
c0020e03:	6a 00                	push   0x0
c0020e05:	50                   	push   eax
c0020e06:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020e09:	83 c4 10             	add    esp,0x10
c0020e0c:	89 f0                	mov    eax,esi
c0020e0e:	83 c4 04             	add    esp,0x4
c0020e11:	89 fa                	mov    edx,edi
c0020e13:	5e                   	pop    esi
c0020e14:	5f                   	pop    edi
c0020e15:	c3                   	ret    
c0020e16:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020e1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e1d:	6a 00                	push   0x0
c0020e1f:	6a 00                	push   0x0
c0020e21:	6a 01                	push   0x1
c0020e23:	50                   	push   eax
c0020e24:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020e27:	83 c4 10             	add    esp,0x10
c0020e2a:	89 f0                	mov    eax,esi
c0020e2c:	83 c4 04             	add    esp,0x4
c0020e2f:	89 fa                	mov    edx,edi
c0020e31:	5e                   	pop    esi
c0020e32:	5f                   	pop    edi
c0020e33:	c3                   	ret    
c0020e34:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020e39:	85 c0                	test   eax,eax
c0020e3b:	74 02                	je     c0020e3f <SysShutdown(regs*)+0x7f>
c0020e3d:	ff d0                	call   eax
c0020e3f:	31 f6                	xor    esi,esi
c0020e41:	83 c4 04             	add    esp,0x4
c0020e44:	89 f0                	mov    eax,esi
c0020e46:	31 ff                	xor    edi,edi
c0020e48:	5e                   	pop    esi
c0020e49:	89 fa                	mov    edx,edi
c0020e4b:	5f                   	pop    edi
c0020e4c:	c3                   	ret    

c0020e4d <SysRealpath(regs*)>:
c0020e4d:	53                   	push   ebx
c0020e4e:	83 ec 08             	sub    esp,0x8
c0020e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e55:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0020e58:	85 c9                	test   ecx,ecx
c0020e5a:	74 36                	je     c0020e92 <SysRealpath(regs*)+0x45>
c0020e5c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020e5f:	31 d2                	xor    edx,edx
c0020e61:	b8 01 00 00 00       	mov    eax,0x1
c0020e66:	85 db                	test   ebx,ebx
c0020e68:	75 05                	jne    c0020e6f <SysRealpath(regs*)+0x22>
c0020e6a:	83 c4 08             	add    esp,0x8
c0020e6d:	5b                   	pop    ebx
c0020e6e:	c3                   	ret    
c0020e6f:	6a 00                	push   0x0
c0020e71:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020e76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020e79:	05 0c 01 00 00       	add    eax,0x10c
c0020e7e:	50                   	push   eax
c0020e7f:	51                   	push   ecx
c0020e80:	53                   	push   ebx
c0020e81:	e8 a0 92 ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020e86:	83 c4 10             	add    esp,0x10
c0020e89:	31 c0                	xor    eax,eax
c0020e8b:	31 d2                	xor    edx,edx
c0020e8d:	83 c4 08             	add    esp,0x8
c0020e90:	5b                   	pop    ebx
c0020e91:	c3                   	ret    
c0020e92:	b8 01 00 00 00       	mov    eax,0x1
c0020e97:	31 d2                	xor    edx,edx
c0020e99:	eb f2                	jmp    c0020e8d <SysRealpath(regs*)+0x40>

c0020e9b <SysReadDir(regs*)>:
c0020e9b:	53                   	push   ebx
c0020e9c:	83 ec 18             	sub    esp,0x18
c0020e9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020ea3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020ea6:	83 f8 02             	cmp    eax,0x2
c0020ea9:	76 4f                	jbe    c0020efa <SysReadDir(regs*)+0x5f>
c0020eab:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020eb2:	77 52                	ja     c0020f06 <SysReadDir(regs*)+0x6b>
c0020eb4:	83 ec 0c             	sub    esp,0xc
c0020eb7:	50                   	push   eax
c0020eb8:	e8 ee 6e ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0020ebd:	83 c4 10             	add    esp,0x10
c0020ec0:	85 c0                	test   eax,eax
c0020ec2:	74 42                	je     c0020f06 <SysReadDir(regs*)+0x6b>
c0020ec4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ecc:	83 ec 0c             	sub    esp,0xc
c0020ecf:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020ed3:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ed5:	51                   	push   ecx
c0020ed6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020ed9:	51                   	push   ecx
c0020eda:	6a 00                	push   0x0
c0020edc:	68 10 01 00 00       	push   0x110
c0020ee1:	50                   	push   eax
c0020ee2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ee5:	83 c4 20             	add    esp,0x20
c0020ee8:	85 c0                	test   eax,eax
c0020eea:	89 c1                	mov    ecx,eax
c0020eec:	74 27                	je     c0020f15 <SysReadDir(regs*)+0x7a>
c0020eee:	31 d2                	xor    edx,edx
c0020ef0:	83 f9 07             	cmp    ecx,0x7
c0020ef3:	b8 02 00 00 00       	mov    eax,0x2
c0020ef8:	75 16                	jne    c0020f10 <SysReadDir(regs*)+0x75>
c0020efa:	b8 01 00 00 00       	mov    eax,0x1
c0020eff:	31 d2                	xor    edx,edx
c0020f01:	83 c4 18             	add    esp,0x18
c0020f04:	5b                   	pop    ebx
c0020f05:	c3                   	ret    
c0020f06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f10:	83 c4 18             	add    esp,0x18
c0020f13:	5b                   	pop    ebx
c0020f14:	c3                   	ret    
c0020f15:	31 c0                	xor    eax,eax
c0020f17:	31 d2                	xor    edx,edx
c0020f19:	eb e6                	jmp    c0020f01 <SysReadDir(regs*)+0x66>

c0020f1b <SysIsATTY(regs*)>:
c0020f1b:	83 ec 0c             	sub    esp,0xc
c0020f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f22:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f25:	83 f8 02             	cmp    eax,0x2
c0020f28:	76 07                	jbe    c0020f31 <SysIsATTY(regs*)+0x16>
c0020f2a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020f2f:	75 26                	jne    c0020f57 <SysIsATTY(regs*)+0x3c>
c0020f31:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f39:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020f3f:	85 c0                	test   eax,eax
c0020f41:	74 24                	je     c0020f67 <SysIsATTY(regs*)+0x4c>
c0020f43:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f45:	83 ec 0c             	sub    esp,0xc
c0020f48:	50                   	push   eax
c0020f49:	ff 12                	call   DWORD PTR [edx]
c0020f4b:	83 c4 10             	add    esp,0x10
c0020f4e:	31 d2                	xor    edx,edx
c0020f50:	83 c4 0c             	add    esp,0xc
c0020f53:	0f b6 c0             	movzx  eax,al
c0020f56:	c3                   	ret    
c0020f57:	83 ec 0c             	sub    esp,0xc
c0020f5a:	50                   	push   eax
c0020f5b:	e8 4b 6e ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0020f60:	83 c4 10             	add    esp,0x10
c0020f63:	85 c0                	test   eax,eax
c0020f65:	75 dc                	jne    c0020f43 <SysIsATTY(regs*)+0x28>
c0020f67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f6c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f71:	83 c4 0c             	add    esp,0xc
c0020f74:	c3                   	ret    

c0020f75 <SysSeek(regs*)>:
c0020f75:	56                   	push   esi
c0020f76:	53                   	push   ebx
c0020f77:	83 ec 04             	sub    esp,0x4
c0020f7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f7e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0020f81:	8d 71 fd             	lea    esi,[ecx-0x3]
c0020f84:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0020f8a:	77 33                	ja     c0020fbf <SysSeek(regs*)+0x4a>
c0020f8c:	83 ec 0c             	sub    esp,0xc
c0020f8f:	51                   	push   ecx
c0020f90:	e8 16 6e ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0020f95:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0020f98:	83 c4 0c             	add    esp,0xc
c0020f9b:	31 db                	xor    ebx,ebx
c0020f9d:	53                   	push   ebx
c0020f9e:	51                   	push   ecx
c0020f9f:	50                   	push   eax
c0020fa0:	e8 69 95 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0020fa5:	83 c4 10             	add    esp,0x10
c0020fa8:	85 c0                	test   eax,eax
c0020faa:	0f 95 c0             	setne  al
c0020fad:	31 d2                	xor    edx,edx
c0020faf:	0f b6 c0             	movzx  eax,al
c0020fb2:	f7 d8                	neg    eax
c0020fb4:	83 d2 00             	adc    edx,0x0
c0020fb7:	83 c4 04             	add    esp,0x4
c0020fba:	5b                   	pop    ebx
c0020fbb:	f7 da                	neg    edx
c0020fbd:	5e                   	pop    esi
c0020fbe:	c3                   	ret    
c0020fbf:	83 c4 04             	add    esp,0x4
c0020fc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fc7:	5b                   	pop    ebx
c0020fc8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fcd:	5e                   	pop    esi
c0020fce:	c3                   	ret    

c0020fcf <SysTell(regs*)>:
c0020fcf:	53                   	push   ebx
c0020fd0:	83 ec 08             	sub    esp,0x8
c0020fd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fd7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020fda:	83 f8 02             	cmp    eax,0x2
c0020fdd:	76 4e                	jbe    c002102d <SysTell(regs*)+0x5e>
c0020fdf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020fe4:	76 19                	jbe    c0020fff <SysTell(regs*)+0x30>
c0020fe6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020fe9:	31 d2                	xor    edx,edx
c0020feb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ff1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020ff8:	83 c4 08             	add    esp,0x8
c0020ffb:	31 c0                	xor    eax,eax
c0020ffd:	5b                   	pop    ebx
c0020ffe:	c3                   	ret    
c0020fff:	83 ec 0c             	sub    esp,0xc
c0021002:	50                   	push   eax
c0021003:	e8 a3 6d ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0021008:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c002100b:	5a                   	pop    edx
c002100c:	59                   	pop    ecx
c002100d:	53                   	push   ebx
c002100e:	50                   	push   eax
c002100f:	e8 a6 95 ff ff       	call   c001a5ba <File::tell(unsigned long long*)>
c0021014:	83 c4 10             	add    esp,0x10
c0021017:	85 c0                	test   eax,eax
c0021019:	0f 95 c0             	setne  al
c002101c:	31 d2                	xor    edx,edx
c002101e:	0f b6 c0             	movzx  eax,al
c0021021:	f7 d8                	neg    eax
c0021023:	83 d2 00             	adc    edx,0x0
c0021026:	83 c4 08             	add    esp,0x8
c0021029:	5b                   	pop    ebx
c002102a:	f7 da                	neg    edx
c002102c:	c3                   	ret    
c002102d:	83 c4 08             	add    esp,0x8
c0021030:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021035:	5b                   	pop    ebx
c0021036:	ba ff ff ff ff       	mov    edx,0xffffffff
c002103b:	c3                   	ret    

c002103c <SysSize(regs*)>:
c002103c:	53                   	push   ebx
c002103d:	83 ec 18             	sub    esp,0x18
c0021040:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021044:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021047:	83 f8 02             	cmp    eax,0x2
c002104a:	76 54                	jbe    c00210a0 <SysSize(regs*)+0x64>
c002104c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021051:	76 19                	jbe    c002106c <SysSize(regs*)+0x30>
c0021053:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021056:	31 d2                	xor    edx,edx
c0021058:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002105e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021065:	83 c4 18             	add    esp,0x18
c0021068:	31 c0                	xor    eax,eax
c002106a:	5b                   	pop    ebx
c002106b:	c3                   	ret    
c002106c:	83 ec 0c             	sub    esp,0xc
c002106f:	50                   	push   eax
c0021070:	e8 36 6d ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0021075:	83 c4 0c             	add    esp,0xc
c0021078:	8d 54 24 13          	lea    edx,[esp+0x13]
c002107c:	52                   	push   edx
c002107d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021080:	52                   	push   edx
c0021081:	50                   	push   eax
c0021082:	e8 cb 96 ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c0021087:	83 c4 10             	add    esp,0x10
c002108a:	85 c0                	test   eax,eax
c002108c:	0f 95 c0             	setne  al
c002108f:	31 d2                	xor    edx,edx
c0021091:	0f b6 c0             	movzx  eax,al
c0021094:	f7 d8                	neg    eax
c0021096:	83 d2 00             	adc    edx,0x0
c0021099:	83 c4 18             	add    esp,0x18
c002109c:	5b                   	pop    ebx
c002109d:	f7 da                	neg    edx
c002109f:	c3                   	ret    
c00210a0:	83 c4 18             	add    esp,0x18
c00210a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210a8:	5b                   	pop    ebx
c00210a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210ae:	c3                   	ret    

c00210af <SysSizeFromFilename(regs*)>:
c00210af:	55                   	push   ebp
c00210b0:	57                   	push   edi
c00210b1:	56                   	push   esi
c00210b2:	53                   	push   ebx
c00210b3:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00210b9:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00210c0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00210c3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00210c6:	85 f6                	test   esi,esi
c00210c8:	89 f8                	mov    eax,edi
c00210ca:	74 09                	je     c00210d5 <SysSizeFromFilename(regs*)+0x26>
c00210cc:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00210d2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210d5:	83 f8 02             	cmp    eax,0x2
c00210d8:	0f 86 ca 00 00 00    	jbe    c00211a8 <SysSizeFromFilename(regs*)+0xf9>
c00210de:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210e3:	76 1f                	jbe    c0021104 <SysSizeFromFilename(regs*)+0x55>
c00210e5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210e8:	31 d2                	xor    edx,edx
c00210ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210f7:	31 c0                	xor    eax,eax
c00210f9:	81 c4 4c 02 00 00    	add    esp,0x24c
c00210ff:	5b                   	pop    ebx
c0021100:	5e                   	pop    esi
c0021101:	5f                   	pop    edi
c0021102:	5d                   	pop    ebp
c0021103:	c3                   	ret    
c0021104:	83 ec 0c             	sub    esp,0xc
c0021107:	68 14 01 00 00       	push   0x114
c002110c:	e8 d2 52 ff ff       	call   c00163e3 <malloc>
c0021111:	6a 01                	push   0x1
c0021113:	89 c5                	mov    ebp,eax
c0021115:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002111a:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c002111d:	51                   	push   ecx
c002111e:	57                   	push   edi
c002111f:	55                   	push   ebp
c0021120:	e8 2f 92 ff ff       	call   c001a354 <File::File(char const*, Process*, bool)>
c0021125:	83 c4 1c             	add    esp,0x1c
c0021128:	8d 44 24 13          	lea    eax,[esp+0x13]
c002112c:	50                   	push   eax
c002112d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021130:	53                   	push   ebx
c0021131:	55                   	push   ebp
c0021132:	e8 1b 96 ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c0021137:	83 c4 10             	add    esp,0x10
c002113a:	85 ed                	test   ebp,ebp
c002113c:	89 c3                	mov    ebx,eax
c002113e:	74 0d                	je     c002114d <SysSizeFromFilename(regs*)+0x9e>
c0021140:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021143:	83 ec 0c             	sub    esp,0xc
c0021146:	55                   	push   ebp
c0021147:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002114a:	83 c4 10             	add    esp,0x10
c002114d:	85 db                	test   ebx,ebx
c002114f:	75 57                	jne    c00211a8 <SysSizeFromFilename(regs*)+0xf9>
c0021151:	6a 00                	push   0x0
c0021153:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021158:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002115b:	05 0c 01 00 00       	add    eax,0x10c
c0021160:	50                   	push   eax
c0021161:	57                   	push   edi
c0021162:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0021169:	53                   	push   ebx
c002116a:	e8 b7 8f ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002116f:	58                   	pop    eax
c0021170:	5a                   	pop    edx
c0021171:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021175:	50                   	push   eax
c0021176:	53                   	push   ebx
c0021177:	e8 12 8a ff ff       	call   c0019b8e <KeDereferenceSymlink(char const*, char*)>
c002117c:	83 c4 10             	add    esp,0x10
c002117f:	ba 00 00 00 00       	mov    edx,0x0
c0021184:	83 f8 01             	cmp    eax,0x1
c0021187:	b8 00 00 00 00       	mov    eax,0x0
c002118c:	74 2f                	je     c00211bd <SysSizeFromFilename(regs*)+0x10e>
c002118e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0021193:	74 3b                	je     c00211d0 <SysSizeFromFilename(regs*)+0x121>
c0021195:	85 f6                	test   esi,esi
c0021197:	0f 84 5c ff ff ff    	je     c00210f9 <SysSizeFromFilename(regs*)+0x4a>
c002119d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00211a3:	e9 51 ff ff ff       	jmp    c00210f9 <SysSizeFromFilename(regs*)+0x4a>
c00211a8:	81 c4 4c 02 00 00    	add    esp,0x24c
c00211ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00211b3:	5b                   	pop    ebx
c00211b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00211b9:	5e                   	pop    esi
c00211ba:	5f                   	pop    edi
c00211bb:	5d                   	pop    ebp
c00211bc:	c3                   	ret    
c00211bd:	85 f6                	test   esi,esi
c00211bf:	0f 84 34 ff ff ff    	je     c00210f9 <SysSizeFromFilename(regs*)+0x4a>
c00211c5:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00211cb:	e9 29 ff ff ff       	jmp    c00210f9 <SysSizeFromFilename(regs*)+0x4a>
c00211d0:	85 f6                	test   esi,esi
c00211d2:	0f 84 21 ff ff ff    	je     c00210f9 <SysSizeFromFilename(regs*)+0x4a>
c00211d8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211de:	e9 16 ff ff ff       	jmp    c00210f9 <SysSizeFromFilename(regs*)+0x4a>

c00211e3 <SysSizeFromFilenameNoSymlink(regs*)>:
c00211e3:	55                   	push   ebp
c00211e4:	57                   	push   edi
c00211e5:	56                   	push   esi
c00211e6:	53                   	push   ebx
c00211e7:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00211ed:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00211f4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00211f7:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00211fa:	85 f6                	test   esi,esi
c00211fc:	89 f8                	mov    eax,edi
c00211fe:	74 09                	je     c0021209 <SysSizeFromFilenameNoSymlink(regs*)+0x26>
c0021200:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021206:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021209:	83 f8 02             	cmp    eax,0x2
c002120c:	0f 86 ca 00 00 00    	jbe    c00212dc <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021212:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021217:	76 1f                	jbe    c0021238 <SysSizeFromFilenameNoSymlink(regs*)+0x55>
c0021219:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c002121c:	31 d2                	xor    edx,edx
c002121e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021224:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002122b:	31 c0                	xor    eax,eax
c002122d:	81 c4 4c 02 00 00    	add    esp,0x24c
c0021233:	5b                   	pop    ebx
c0021234:	5e                   	pop    esi
c0021235:	5f                   	pop    edi
c0021236:	5d                   	pop    ebp
c0021237:	c3                   	ret    
c0021238:	83 ec 0c             	sub    esp,0xc
c002123b:	68 14 01 00 00       	push   0x114
c0021240:	e8 9e 51 ff ff       	call   c00163e3 <malloc>
c0021245:	6a 00                	push   0x0
c0021247:	89 c5                	mov    ebp,eax
c0021249:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002124e:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021251:	51                   	push   ecx
c0021252:	57                   	push   edi
c0021253:	55                   	push   ebp
c0021254:	e8 fb 90 ff ff       	call   c001a354 <File::File(char const*, Process*, bool)>
c0021259:	83 c4 1c             	add    esp,0x1c
c002125c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0021260:	50                   	push   eax
c0021261:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021264:	53                   	push   ebx
c0021265:	55                   	push   ebp
c0021266:	e8 e7 94 ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c002126b:	83 c4 10             	add    esp,0x10
c002126e:	85 ed                	test   ebp,ebp
c0021270:	89 c3                	mov    ebx,eax
c0021272:	74 0d                	je     c0021281 <SysSizeFromFilenameNoSymlink(regs*)+0x9e>
c0021274:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021277:	83 ec 0c             	sub    esp,0xc
c002127a:	55                   	push   ebp
c002127b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002127e:	83 c4 10             	add    esp,0x10
c0021281:	85 db                	test   ebx,ebx
c0021283:	75 57                	jne    c00212dc <SysSizeFromFilenameNoSymlink(regs*)+0xf9>
c0021285:	6a 00                	push   0x0
c0021287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002128c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002128f:	05 0c 01 00 00       	add    eax,0x10c
c0021294:	50                   	push   eax
c0021295:	57                   	push   edi
c0021296:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002129d:	53                   	push   ebx
c002129e:	e8 83 8e ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00212a3:	58                   	pop    eax
c00212a4:	5a                   	pop    edx
c00212a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00212a9:	50                   	push   eax
c00212aa:	53                   	push   ebx
c00212ab:	e8 de 88 ff ff       	call   c0019b8e <KeDereferenceSymlink(char const*, char*)>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	ba 00 00 00 00       	mov    edx,0x0
c00212b8:	83 f8 01             	cmp    eax,0x1
c00212bb:	b8 00 00 00 00       	mov    eax,0x0
c00212c0:	74 2f                	je     c00212f1 <SysSizeFromFilenameNoSymlink(regs*)+0x10e>
c00212c2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00212c7:	74 3b                	je     c0021304 <SysSizeFromFilenameNoSymlink(regs*)+0x121>
c00212c9:	85 f6                	test   esi,esi
c00212cb:	0f 84 5c ff ff ff    	je     c002122d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212d1:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00212d7:	e9 51 ff ff ff       	jmp    c002122d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212dc:	81 c4 4c 02 00 00    	add    esp,0x24c
c00212e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00212e7:	5b                   	pop    ebx
c00212e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00212ed:	5e                   	pop    esi
c00212ee:	5f                   	pop    edi
c00212ef:	5d                   	pop    ebp
c00212f0:	c3                   	ret    
c00212f1:	85 f6                	test   esi,esi
c00212f3:	0f 84 34 ff ff ff    	je     c002122d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c00212f9:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00212ff:	e9 29 ff ff ff       	jmp    c002122d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c0021304:	85 f6                	test   esi,esi
c0021306:	0f 84 21 ff ff ff    	je     c002122d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>
c002130c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0021312:	e9 16 ff ff ff       	jmp    c002122d <SysSizeFromFilenameNoSymlink(regs*)+0x4a>

c0021317 <SysClose(regs*)>:
c0021317:	53                   	push   ebx
c0021318:	83 ec 08             	sub    esp,0x8
c002131b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021322:	83 f8 02             	cmp    eax,0x2
c0021325:	76 41                	jbe    c0021368 <SysClose(regs*)+0x51>
c0021327:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c002132d:	83 fa 01             	cmp    edx,0x1
c0021330:	76 2d                	jbe    c002135f <SysClose(regs*)+0x48>
c0021332:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021337:	77 2f                	ja     c0021368 <SysClose(regs*)+0x51>
c0021339:	83 ec 0c             	sub    esp,0xc
c002133c:	50                   	push   eax
c002133d:	e8 69 6a ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0021342:	89 04 24             	mov    DWORD PTR [esp],eax
c0021345:	89 c3                	mov    ebx,eax
c0021347:	e8 62 91 ff ff       	call   c001a4ae <File::close()>
c002134c:	83 c4 10             	add    esp,0x10
c002134f:	85 db                	test   ebx,ebx
c0021351:	74 0c                	je     c002135f <SysClose(regs*)+0x48>
c0021353:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021355:	83 ec 0c             	sub    esp,0xc
c0021358:	53                   	push   ebx
c0021359:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002135c:	83 c4 10             	add    esp,0x10
c002135f:	83 c4 08             	add    esp,0x8
c0021362:	31 c0                	xor    eax,eax
c0021364:	5b                   	pop    ebx
c0021365:	31 d2                	xor    edx,edx
c0021367:	c3                   	ret    
c0021368:	83 c4 08             	add    esp,0x8
c002136b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021370:	5b                   	pop    ebx
c0021371:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021376:	c3                   	ret    

c0021377 <SysOpenDir(regs*)>:
c0021377:	56                   	push   esi
c0021378:	53                   	push   ebx
c0021379:	83 ec 04             	sub    esp,0x4
c002137c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021380:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021383:	85 c9                	test   ecx,ecx
c0021385:	74 5d                	je     c00213e4 <SysOpenDir(regs*)+0x6d>
c0021387:	83 ec 0c             	sub    esp,0xc
c002138a:	68 14 01 00 00       	push   0x114
c002138f:	e8 4f 50 ff ff       	call   c00163e3 <malloc>
c0021394:	83 c4 0c             	add    esp,0xc
c0021397:	89 c6                	mov    esi,eax
c0021399:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002139e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00213a1:	50                   	push   eax
c00213a2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00213a5:	52                   	push   edx
c00213a6:	56                   	push   esi
c00213a7:	e8 66 95 ff ff       	call   c001a912 <Directory::Directory(char const*, Process*)>
c00213ac:	83 c4 10             	add    esp,0x10
c00213af:	85 f6                	test   esi,esi
c00213b1:	74 31                	je     c00213e4 <SysOpenDir(regs*)+0x6d>
c00213b3:	83 ec 0c             	sub    esp,0xc
c00213b6:	56                   	push   esi
c00213b7:	e8 1e 96 ff ff       	call   c001a9da <Directory::open()>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	85 c0                	test   eax,eax
c00213c1:	75 21                	jne    c00213e4 <SysOpenDir(regs*)+0x6d>
c00213c3:	83 ec 0c             	sub    esp,0xc
c00213c6:	56                   	push   esi
c00213c7:	e8 e2 66 ff ff       	call   c0017aae <UnixFile::getFileDescriptor()>
c00213cc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00213cf:	83 c4 10             	add    esp,0x10
c00213d2:	89 02                	mov    DWORD PTR [edx],eax
c00213d4:	c1 f8 1f             	sar    eax,0x1f
c00213d7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00213da:	83 c4 04             	add    esp,0x4
c00213dd:	31 c0                	xor    eax,eax
c00213df:	5b                   	pop    ebx
c00213e0:	31 d2                	xor    edx,edx
c00213e2:	5e                   	pop    esi
c00213e3:	c3                   	ret    
c00213e4:	83 c4 04             	add    esp,0x4
c00213e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213ec:	5b                   	pop    ebx
c00213ed:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213f2:	5e                   	pop    esi
c00213f3:	c3                   	ret    

c00213f4 <SysMakeDir(regs*)>:
c00213f4:	56                   	push   esi
c00213f5:	53                   	push   ebx
c00213f6:	83 ec 10             	sub    esp,0x10
c00213f9:	68 14 01 00 00       	push   0x114
c00213fe:	e8 e0 4f ff ff       	call   c00163e3 <malloc>
c0021403:	83 c4 0c             	add    esp,0xc
c0021406:	89 c3                	mov    ebx,eax
c0021408:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002140d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021410:	50                   	push   eax
c0021411:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021415:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0021418:	52                   	push   edx
c0021419:	53                   	push   ebx
c002141a:	e8 f3 94 ff ff       	call   c001a912 <Directory::Directory(char const*, Process*)>
c002141f:	83 c4 10             	add    esp,0x10
c0021422:	85 db                	test   ebx,ebx
c0021424:	74 2c                	je     c0021452 <SysMakeDir(regs*)+0x5e>
c0021426:	83 ec 0c             	sub    esp,0xc
c0021429:	53                   	push   ebx
c002142a:	e8 8b 97 ff ff       	call   c001abba <Directory::create()>
c002142f:	89 c6                	mov    esi,eax
c0021431:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021433:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021436:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021439:	83 c4 10             	add    esp,0x10
c002143c:	31 c0                	xor    eax,eax
c002143e:	85 f6                	test   esi,esi
c0021440:	0f 95 c0             	setne  al
c0021443:	31 d2                	xor    edx,edx
c0021445:	f7 d8                	neg    eax
c0021447:	83 d2 00             	adc    edx,0x0
c002144a:	83 c4 04             	add    esp,0x4
c002144d:	5b                   	pop    ebx
c002144e:	f7 da                	neg    edx
c0021450:	5e                   	pop    esi
c0021451:	c3                   	ret    
c0021452:	83 c4 04             	add    esp,0x4
c0021455:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002145a:	5b                   	pop    ebx
c002145b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021460:	5e                   	pop    esi
c0021461:	c3                   	ret    

c0021462 <SysCloseDir(regs*)>:
c0021462:	53                   	push   ebx
c0021463:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021468:	83 ec 08             	sub    esp,0x8
c002146b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002146f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0021472:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021477:	8d 59 fd             	lea    ebx,[ecx-0x3]
c002147a:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0021480:	77 2a                	ja     c00214ac <SysCloseDir(regs*)+0x4a>
c0021482:	83 ec 0c             	sub    esp,0xc
c0021485:	51                   	push   ecx
c0021486:	e8 20 69 ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c002148b:	89 04 24             	mov    DWORD PTR [esp],eax
c002148e:	89 c3                	mov    ebx,eax
c0021490:	e8 a1 95 ff ff       	call   c001aa36 <Directory::close()>
c0021495:	83 c4 10             	add    esp,0x10
c0021498:	85 db                	test   ebx,ebx
c002149a:	74 0c                	je     c00214a8 <SysCloseDir(regs*)+0x46>
c002149c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002149e:	83 ec 0c             	sub    esp,0xc
c00214a1:	53                   	push   ebx
c00214a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00214a5:	83 c4 10             	add    esp,0x10
c00214a8:	31 c0                	xor    eax,eax
c00214aa:	31 d2                	xor    edx,edx
c00214ac:	83 c4 08             	add    esp,0x8
c00214af:	5b                   	pop    ebx
c00214b0:	c3                   	ret    

c00214b1 <SysWait(regs*)>:
c00214b1:	83 ec 10             	sub    esp,0x10
c00214b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00214b8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00214bb:	52                   	push   edx
c00214bc:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00214bf:	51                   	push   ecx
c00214c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214c3:	50                   	push   eax
c00214c4:	e8 c7 3d 00 00       	call   c0025290 <waitTask(int, int*, int)>
c00214c9:	83 c4 1c             	add    esp,0x1c
c00214cc:	89 c2                	mov    edx,eax
c00214ce:	c1 fa 1f             	sar    edx,0x1f
c00214d1:	c3                   	ret    

c00214d2 <SysNotImpl(regs*)>:
c00214d2:	83 ec 18             	sub    esp,0x18
c00214d5:	68 24 29 03 c0       	push   0xc0032924
c00214da:	e8 c3 ec ff ff       	call   c00201a2 <KePanic(char const*)>
c00214df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214e9:	83 c4 1c             	add    esp,0x1c
c00214ec:	c3                   	ret    

c00214ed <SysPanic(regs*)>:
c00214ed:	83 ec 18             	sub    esp,0x18
c00214f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214f4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00214f7:	50                   	push   eax
c00214f8:	e8 a5 ec ff ff       	call   c00201a2 <KePanic(char const*)>
c00214fd:	b8 01 00 00 00       	mov    eax,0x1
c0021502:	31 d2                	xor    edx,edx
c0021504:	83 c4 1c             	add    esp,0x1c
c0021507:	c3                   	ret    

c0021508 <SysRmdir(regs*)>:
c0021508:	56                   	push   esi
c0021509:	53                   	push   ebx
c002150a:	83 ec 10             	sub    esp,0x10
c002150d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021511:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021514:	68 14 01 00 00       	push   0x114
c0021519:	e8 c5 4e ff ff       	call   c00163e3 <malloc>
c002151e:	6a 00                	push   0x0
c0021520:	89 c3                	mov    ebx,eax
c0021522:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021527:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002152a:	50                   	push   eax
c002152b:	56                   	push   esi
c002152c:	53                   	push   ebx
c002152d:	e8 22 8e ff ff       	call   c001a354 <File::File(char const*, Process*, bool)>
c0021532:	83 c4 14             	add    esp,0x14
c0021535:	53                   	push   ebx
c0021536:	e8 e3 90 ff ff       	call   c001a61e <File::unlink()>
c002153b:	83 c4 10             	add    esp,0x10
c002153e:	85 db                	test   ebx,ebx
c0021540:	89 c6                	mov    esi,eax
c0021542:	74 0c                	je     c0021550 <SysRmdir(regs*)+0x48>
c0021544:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021546:	83 ec 0c             	sub    esp,0xc
c0021549:	53                   	push   ebx
c002154a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002154d:	83 c4 10             	add    esp,0x10
c0021550:	31 c0                	xor    eax,eax
c0021552:	85 f6                	test   esi,esi
c0021554:	0f 95 c0             	setne  al
c0021557:	31 d2                	xor    edx,edx
c0021559:	f7 d8                	neg    eax
c002155b:	83 d2 00             	adc    edx,0x0
c002155e:	83 c4 04             	add    esp,0x4
c0021561:	5b                   	pop    ebx
c0021562:	f7 da                	neg    edx
c0021564:	5e                   	pop    esi
c0021565:	c3                   	ret    

c0021566 <SysUnlink(regs*)>:
c0021566:	56                   	push   esi
c0021567:	53                   	push   ebx
c0021568:	83 ec 10             	sub    esp,0x10
c002156b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002156f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021572:	68 14 01 00 00       	push   0x114
c0021577:	e8 67 4e ff ff       	call   c00163e3 <malloc>
c002157c:	6a 00                	push   0x0
c002157e:	89 c3                	mov    ebx,eax
c0021580:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021585:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021588:	50                   	push   eax
c0021589:	56                   	push   esi
c002158a:	53                   	push   ebx
c002158b:	e8 c4 8d ff ff       	call   c001a354 <File::File(char const*, Process*, bool)>
c0021590:	83 c4 14             	add    esp,0x14
c0021593:	53                   	push   ebx
c0021594:	e8 85 90 ff ff       	call   c001a61e <File::unlink()>
c0021599:	83 c4 10             	add    esp,0x10
c002159c:	85 db                	test   ebx,ebx
c002159e:	89 c6                	mov    esi,eax
c00215a0:	74 0c                	je     c00215ae <SysUnlink(regs*)+0x48>
c00215a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215a4:	83 ec 0c             	sub    esp,0xc
c00215a7:	53                   	push   ebx
c00215a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00215ab:	83 c4 10             	add    esp,0x10
c00215ae:	31 c0                	xor    eax,eax
c00215b0:	85 f6                	test   esi,esi
c00215b2:	0f 95 c0             	setne  al
c00215b5:	31 d2                	xor    edx,edx
c00215b7:	f7 d8                	neg    eax
c00215b9:	83 d2 00             	adc    edx,0x0
c00215bc:	83 c4 04             	add    esp,0x4
c00215bf:	5b                   	pop    ebx
c00215c0:	f7 da                	neg    edx
c00215c2:	5e                   	pop    esi
c00215c3:	c3                   	ret    

c00215c4 <SysGetArgv(regs*)>:
c00215c4:	83 ec 0c             	sub    esp,0xc
c00215c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215cb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00215ce:	85 c0                	test   eax,eax
c00215d0:	78 2c                	js     c00215fe <SysGetArgv(regs*)+0x3a>
c00215d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00215d8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00215db:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00215e1:	7d 1b                	jge    c00215fe <SysGetArgv(regs*)+0x3a>
c00215e3:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00215ea:	85 c0                	test   eax,eax
c00215ec:	74 18                	je     c0021606 <SysGetArgv(regs*)+0x42>
c00215ee:	83 ec 08             	sub    esp,0x8
c00215f1:	50                   	push   eax
c00215f2:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00215f5:	50                   	push   eax
c00215f6:	e8 55 f0 fd ff       	call   c0000650 <strcpy>
c00215fb:	83 c4 10             	add    esp,0x10
c00215fe:	31 c0                	xor    eax,eax
c0021600:	31 d2                	xor    edx,edx
c0021602:	83 c4 0c             	add    esp,0xc
c0021605:	c3                   	ret    
c0021606:	b8 01 00 00 00       	mov    eax,0x1
c002160b:	31 d2                	xor    edx,edx
c002160d:	83 c4 0c             	add    esp,0xc
c0021610:	c3                   	ret    

c0021611 <SysUSleep(regs*)>:
c0021611:	83 ec 1c             	sub    esp,0x1c
c0021614:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021618:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c002161b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c002161e:	6a 00                	push   0x0
c0021620:	6a 64                	push   0x64
c0021622:	52                   	push   edx
c0021623:	50                   	push   eax
c0021624:	e8 d7 cf 00 00       	call   c002e600 <__udivdi3>
c0021629:	83 c4 14             	add    esp,0x14
c002162c:	50                   	push   eax
c002162d:	e8 42 3d 00 00       	call   c0025374 <milliTenthSleep(unsigned int)>
c0021632:	31 c0                	xor    eax,eax
c0021634:	31 d2                	xor    edx,edx
c0021636:	83 c4 1c             	add    esp,0x1c
c0021639:	c3                   	ret    

c002163a <SysSpawn(regs*)>:
c002163a:	56                   	push   esi
c002163b:	53                   	push   ebx
c002163c:	83 ec 04             	sub    esp,0x4
c002163f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021643:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021646:	85 f6                	test   esi,esi
c0021648:	75 0a                	jne    c0021654 <SysSpawn(regs*)+0x1a>
c002164a:	83 c4 04             	add    esp,0x4
c002164d:	31 c0                	xor    eax,eax
c002164f:	5b                   	pop    ebx
c0021650:	31 d2                	xor    edx,edx
c0021652:	5e                   	pop    esi
c0021653:	c3                   	ret    
c0021654:	83 ec 0c             	sub    esp,0xc
c0021657:	68 24 07 00 00       	push   0x724
c002165c:	e8 82 4d ff ff       	call   c00163e3 <malloc>
c0021661:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021664:	83 c4 10             	add    esp,0x10
c0021667:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002166a:	89 c6                	mov    esi,eax
c002166c:	31 c0                	xor    eax,eax
c002166e:	85 c9                	test   ecx,ecx
c0021670:	75 08                	jne    c002167a <SysSpawn(regs*)+0x40>
c0021672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021677:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002167a:	52                   	push   edx
c002167b:	50                   	push   eax
c002167c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002167f:	50                   	push   eax
c0021680:	56                   	push   esi
c0021681:	e8 96 34 00 00       	call   c0024b1c <Process::Process(char const*, Process*, char**)>
c0021686:	83 c4 10             	add    esp,0x10
c0021689:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0021690:	75 b8                	jne    c002164a <SysSpawn(regs*)+0x10>
c0021692:	83 ec 0c             	sub    esp,0xc
c0021695:	56                   	push   esi
c0021696:	e8 bd 39 00 00       	call   c0025058 <Process::createUserThread()>
c002169b:	8b 06                	mov    eax,DWORD PTR [esi]
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	83 c4 04             	add    esp,0x4
c00216a3:	5b                   	pop    ebx
c00216a4:	89 c2                	mov    edx,eax
c00216a6:	c1 fa 1f             	sar    edx,0x1f
c00216a9:	5e                   	pop    esi
c00216aa:	c3                   	ret    

c00216ab <SysGetEnv(regs*)>:
c00216ab:	57                   	push   edi
c00216ac:	56                   	push   esi
c00216ad:	53                   	push   ebx
c00216ae:	83 ec 1c             	sub    esp,0x1c
c00216b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216b6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00216ba:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00216bd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00216c0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216c3:	51                   	push   ecx
c00216c4:	e8 76 e9 ff ff       	call   c002003f <KeGetProcessTotalEnvCount(Process*)>
c00216c9:	83 c4 10             	add    esp,0x10
c00216cc:	39 c7                	cmp    edi,eax
c00216ce:	7c 12                	jl     c00216e2 <SysGetEnv(regs*)+0x37>
c00216d0:	31 c0                	xor    eax,eax
c00216d2:	31 d2                	xor    edx,edx
c00216d4:	85 f6                	test   esi,esi
c00216d6:	74 03                	je     c00216db <SysGetEnv(regs*)+0x30>
c00216d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	5b                   	pop    ebx
c00216df:	5e                   	pop    esi
c00216e0:	5f                   	pop    edi
c00216e1:	c3                   	ret    
c00216e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216e6:	83 ec 04             	sub    esp,0x4
c00216e9:	57                   	push   edi
c00216ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00216f0:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00216f3:	57                   	push   edi
c00216f4:	50                   	push   eax
c00216f5:	e8 65 e9 ff ff       	call   c002005f <KeGetProcessEnvPair(Process*, int)>
c00216fa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00216fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021701:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021705:	83 c4 0c             	add    esp,0xc
c0021708:	85 d2                	test   edx,edx
c002170a:	75 23                	jne    c002172f <SysGetEnv(regs*)+0x84>
c002170c:	83 ec 0c             	sub    esp,0xc
c002170f:	50                   	push   eax
c0021710:	e8 6b ee fd ff       	call   c0000580 <strlen>
c0021715:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021718:	89 c3                	mov    ebx,eax
c002171a:	e8 61 ee fd ff       	call   c0000580 <strlen>
c002171f:	83 c4 10             	add    esp,0x10
c0021722:	31 d2                	xor    edx,edx
c0021724:	83 c4 10             	add    esp,0x10
c0021727:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c002172b:	5b                   	pop    ebx
c002172c:	5e                   	pop    esi
c002172d:	5f                   	pop    edi
c002172e:	c3                   	ret    
c002172f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021732:	83 ec 08             	sub    esp,0x8
c0021735:	50                   	push   eax
c0021736:	56                   	push   esi
c0021737:	e8 14 ef fd ff       	call   c0000650 <strcpy>
c002173c:	58                   	pop    eax
c002173d:	5a                   	pop    edx
c002173e:	68 3e 29 03 c0       	push   0xc003293e
c0021743:	56                   	push   esi
c0021744:	e8 27 f1 fd ff       	call   c0000870 <strcat>
c0021749:	59                   	pop    ecx
c002174a:	5b                   	pop    ebx
c002174b:	57                   	push   edi
c002174c:	56                   	push   esi
c002174d:	e8 1e f1 fd ff       	call   c0000870 <strcat>
c0021752:	83 c4 10             	add    esp,0x10
c0021755:	31 c0                	xor    eax,eax
c0021757:	83 c4 10             	add    esp,0x10
c002175a:	31 d2                	xor    edx,edx
c002175c:	5b                   	pop    ebx
c002175d:	5e                   	pop    esi
c002175e:	5f                   	pop    edi
c002175f:	c3                   	ret    

c0021760 <SysSetFatAttrib(regs*)>:
c0021760:	57                   	push   edi
c0021761:	56                   	push   esi
c0021762:	53                   	push   ebx
c0021763:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021767:	83 ec 0c             	sub    esp,0xc
c002176a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c002176d:	68 14 01 00 00       	push   0x114
c0021772:	e8 6c 4c ff ff       	call   c00163e3 <malloc>
c0021777:	83 c4 0c             	add    esp,0xc
c002177a:	89 c3                	mov    ebx,eax
c002177c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021781:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021784:	50                   	push   eax
c0021785:	57                   	push   edi
c0021786:	53                   	push   ebx
c0021787:	e8 a6 8c ff ff       	call   c001a432 <File::File(char const*, Process*)>
c002178c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c002178f:	83 c4 0c             	add    esp,0xc
c0021792:	0f b6 d4             	movzx  edx,ah
c0021795:	0f b6 c0             	movzx  eax,al
c0021798:	52                   	push   edx
c0021799:	50                   	push   eax
c002179a:	53                   	push   ebx
c002179b:	e8 18 8f ff ff       	call   c001a6b8 <File::chfatattr(unsigned char, unsigned char)>
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	85 db                	test   ebx,ebx
c00217a5:	89 c6                	mov    esi,eax
c00217a7:	74 0c                	je     c00217b5 <SysSetFatAttrib(regs*)+0x55>
c00217a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00217ab:	83 ec 0c             	sub    esp,0xc
c00217ae:	53                   	push   ebx
c00217af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00217b2:	83 c4 10             	add    esp,0x10
c00217b5:	5b                   	pop    ebx
c00217b6:	31 c0                	xor    eax,eax
c00217b8:	85 f6                	test   esi,esi
c00217ba:	0f 95 c0             	setne  al
c00217bd:	31 d2                	xor    edx,edx
c00217bf:	5e                   	pop    esi
c00217c0:	f7 d8                	neg    eax
c00217c2:	83 d2 00             	adc    edx,0x0
c00217c5:	f7 da                	neg    edx
c00217c7:	5f                   	pop    edi
c00217c8:	c3                   	ret    

c00217c9 <SysPipe(regs*)>:
c00217c9:	57                   	push   edi
c00217ca:	56                   	push   esi
c00217cb:	53                   	push   ebx
c00217cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d0:	83 ec 0c             	sub    esp,0xc
c00217d3:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00217d6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00217d9:	6a 20                	push   0x20
c00217db:	e8 03 4c ff ff       	call   c00163e3 <malloc>
c00217e0:	89 c3                	mov    ebx,eax
c00217e2:	58                   	pop    eax
c00217e3:	5a                   	pop    edx
c00217e4:	68 00 50 00 00       	push   0x5000
c00217e9:	53                   	push   ebx
c00217ea:	e8 5f 55 ff ff       	call   c0016d4e <Pipe::Pipe(int)>
c00217ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217f2:	e8 b7 62 ff ff       	call   c0017aae <UnixFile::getFileDescriptor()>
c00217f7:	89 07                	mov    DWORD PTR [edi],eax
c00217f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217fc:	e8 ad 62 ff ff       	call   c0017aae <UnixFile::getFileDescriptor()>
c0021801:	83 c4 10             	add    esp,0x10
c0021804:	31 d2                	xor    edx,edx
c0021806:	89 06                	mov    DWORD PTR [esi],eax
c0021808:	31 c0                	xor    eax,eax
c002180a:	5b                   	pop    ebx
c002180b:	5e                   	pop    esi
c002180c:	5f                   	pop    edi
c002180d:	c3                   	ret    

c002180e <SysGetUnixTime(regs*)>:
c002180e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021813:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021819:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002181d:	e9 dc 95 ff ff       	jmp    c001adfe <Clock::timeInSecondsLocal()>

c0021822 <string_ends_with(char const*, char const*)>:
c0021822:	57                   	push   edi
c0021823:	56                   	push   esi
c0021824:	53                   	push   ebx
c0021825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021829:	83 ec 0c             	sub    esp,0xc
c002182c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021830:	53                   	push   ebx
c0021831:	e8 4a ed fd ff       	call   c0000580 <strlen>
c0021836:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021839:	89 c6                	mov    esi,eax
c002183b:	e8 40 ed fd ff       	call   c0000580 <strlen>
c0021840:	83 c4 10             	add    esp,0x10
c0021843:	31 d2                	xor    edx,edx
c0021845:	39 c6                	cmp    esi,eax
c0021847:	7d 06                	jge    c002184f <string_ends_with(char const*, char const*)+0x2d>
c0021849:	5b                   	pop    ebx
c002184a:	89 d0                	mov    eax,edx
c002184c:	5e                   	pop    esi
c002184d:	5f                   	pop    edi
c002184e:	c3                   	ret    
c002184f:	83 ec 08             	sub    esp,0x8
c0021852:	29 c6                	sub    esi,eax
c0021854:	57                   	push   edi
c0021855:	01 f3                	add    ebx,esi
c0021857:	53                   	push   ebx
c0021858:	e8 23 ef fd ff       	call   c0000780 <strcmp>
c002185d:	83 c4 10             	add    esp,0x10
c0021860:	31 d2                	xor    edx,edx
c0021862:	5b                   	pop    ebx
c0021863:	5e                   	pop    esi
c0021864:	85 c0                	test   eax,eax
c0021866:	5f                   	pop    edi
c0021867:	0f 94 c2             	sete   dl
c002186a:	89 d0                	mov    eax,edx
c002186c:	c3                   	ret    

c002186d <SysOpen(regs*)>:
c002186d:	56                   	push   esi
c002186e:	53                   	push   ebx
c002186f:	81 ec 04 01 00 00    	sub    esp,0x104
c0021875:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c002187c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002187f:	85 c0                	test   eax,eax
c0021881:	0f 84 c4 01 00 00    	je     c0021a4b <SysOpen(regs*)+0x1de>
c0021887:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002188a:	85 c0                	test   eax,eax
c002188c:	0f 84 b9 01 00 00    	je     c0021a4b <SysOpen(regs*)+0x1de>
c0021892:	6a 00                	push   0x0
c0021894:	68 40 29 03 c0       	push   0xc0032940
c0021899:	50                   	push   eax
c002189a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002189e:	56                   	push   esi
c002189f:	e8 82 88 ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00218a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00218a7:	e8 d4 ec fd ff       	call   c0000580 <strlen>
c00218ac:	83 c4 10             	add    esp,0x10
c00218af:	83 e8 01             	sub    eax,0x1
c00218b2:	74 29                	je     c00218dd <SysOpen(regs*)+0x70>
c00218b4:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00218b8:	83 fa 2e             	cmp    edx,0x2e
c00218bb:	74 1c                	je     c00218d9 <SysOpen(regs*)+0x6c>
c00218bd:	83 fa 3a             	cmp    edx,0x3a
c00218c0:	74 17                	je     c00218d9 <SysOpen(regs*)+0x6c>
c00218c2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00218c6:	83 e8 01             	sub    eax,0x1
c00218c9:	74 12                	je     c00218dd <SysOpen(regs*)+0x70>
c00218cb:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00218cf:	83 fa 3a             	cmp    edx,0x3a
c00218d2:	74 05                	je     c00218d9 <SysOpen(regs*)+0x6c>
c00218d4:	83 fa 2e             	cmp    edx,0x2e
c00218d7:	75 e9                	jne    c00218c2 <SysOpen(regs*)+0x55>
c00218d9:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00218dd:	83 ec 08             	sub    esp,0x8
c00218e0:	68 44 29 03 c0       	push   0xc0032944
c00218e5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00218e8:	50                   	push   eax
c00218e9:	e8 34 ff ff ff       	call   c0021822 <string_ends_with(char const*, char const*)>
c00218ee:	83 c4 10             	add    esp,0x10
c00218f1:	85 c0                	test   eax,eax
c00218f3:	74 1d                	je     c0021912 <SysOpen(regs*)+0xa5>
c00218f5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00218f8:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00218fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021905:	81 c4 04 01 00 00    	add    esp,0x104
c002190b:	31 c0                	xor    eax,eax
c002190d:	5b                   	pop    ebx
c002190e:	31 d2                	xor    edx,edx
c0021910:	5e                   	pop    esi
c0021911:	c3                   	ret    
c0021912:	83 ec 08             	sub    esp,0x8
c0021915:	68 49 29 03 c0       	push   0xc0032949
c002191a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002191d:	50                   	push   eax
c002191e:	e8 ff fe ff ff       	call   c0021822 <string_ends_with(char const*, char const*)>
c0021923:	83 c4 10             	add    esp,0x10
c0021926:	85 c0                	test   eax,eax
c0021928:	75 cb                	jne    c00218f5 <SysOpen(regs*)+0x88>
c002192a:	83 ec 08             	sub    esp,0x8
c002192d:	68 45 29 03 c0       	push   0xc0032945
c0021932:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021935:	50                   	push   eax
c0021936:	e8 45 ee fd ff       	call   c0000780 <strcmp>
c002193b:	83 c4 10             	add    esp,0x10
c002193e:	85 c0                	test   eax,eax
c0021940:	74 b3                	je     c00218f5 <SysOpen(regs*)+0x88>
c0021942:	83 ec 08             	sub    esp,0x8
c0021945:	68 44 29 03 c0       	push   0xc0032944
c002194a:	56                   	push   esi
c002194b:	e8 d2 fe ff ff       	call   c0021822 <string_ends_with(char const*, char const*)>
c0021950:	83 c4 10             	add    esp,0x10
c0021953:	85 c0                	test   eax,eax
c0021955:	75 9e                	jne    c00218f5 <SysOpen(regs*)+0x88>
c0021957:	83 ec 08             	sub    esp,0x8
c002195a:	68 4e 29 03 c0       	push   0xc003294e
c002195f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021962:	50                   	push   eax
c0021963:	e8 ba fe ff ff       	call   c0021822 <string_ends_with(char const*, char const*)>
c0021968:	83 c4 10             	add    esp,0x10
c002196b:	85 c0                	test   eax,eax
c002196d:	0f 85 eb 00 00 00    	jne    c0021a5e <SysOpen(regs*)+0x1f1>
c0021973:	83 ec 08             	sub    esp,0x8
c0021976:	68 53 29 03 c0       	push   0xc0032953
c002197b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002197e:	50                   	push   eax
c002197f:	e8 9e fe ff ff       	call   c0021822 <string_ends_with(char const*, char const*)>
c0021984:	83 c4 10             	add    esp,0x10
c0021987:	85 c0                	test   eax,eax
c0021989:	0f 85 cf 00 00 00    	jne    c0021a5e <SysOpen(regs*)+0x1f1>
c002198f:	83 ec 08             	sub    esp,0x8
c0021992:	68 4f 29 03 c0       	push   0xc003294f
c0021997:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c002199a:	51                   	push   ecx
c002199b:	e8 e0 ed fd ff       	call   c0000780 <strcmp>
c00219a0:	83 c4 10             	add    esp,0x10
c00219a3:	85 c0                	test   eax,eax
c00219a5:	0f 84 b3 00 00 00    	je     c0021a5e <SysOpen(regs*)+0x1f1>
c00219ab:	83 ec 08             	sub    esp,0x8
c00219ae:	68 4e 29 03 c0       	push   0xc003294e
c00219b3:	56                   	push   esi
c00219b4:	e8 69 fe ff ff       	call   c0021822 <string_ends_with(char const*, char const*)>
c00219b9:	83 c4 10             	add    esp,0x10
c00219bc:	85 c0                	test   eax,eax
c00219be:	0f 85 9a 00 00 00    	jne    c0021a5e <SysOpen(regs*)+0x1f1>
c00219c4:	83 ec 0c             	sub    esp,0xc
c00219c7:	68 14 01 00 00       	push   0x114
c00219cc:	e8 12 4a ff ff       	call   c00163e3 <malloc>
c00219d1:	83 c4 0c             	add    esp,0xc
c00219d4:	89 c6                	mov    esi,eax
c00219d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219de:	50                   	push   eax
c00219df:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00219e2:	52                   	push   edx
c00219e3:	56                   	push   esi
c00219e4:	e8 49 8a ff ff       	call   c001a432 <File::File(char const*, Process*)>
c00219e9:	83 c4 10             	add    esp,0x10
c00219ec:	85 f6                	test   esi,esi
c00219ee:	74 5b                	je     c0021a4b <SysOpen(regs*)+0x1de>
c00219f0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00219f3:	0f b6 c2             	movzx  eax,dl
c00219f6:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00219f9:	89 d0                	mov    eax,edx
c00219fb:	83 e0 01             	and    eax,0x1
c00219fe:	f6 c2 02             	test   dl,0x2
c0021a01:	74 03                	je     c0021a06 <SysOpen(regs*)+0x199>
c0021a03:	83 c8 02             	or     eax,0x2
c0021a06:	f6 c2 04             	test   dl,0x4
c0021a09:	74 03                	je     c0021a0e <SysOpen(regs*)+0x1a1>
c0021a0b:	83 c8 04             	or     eax,0x4
c0021a0e:	f6 c2 08             	test   dl,0x8
c0021a11:	74 03                	je     c0021a16 <SysOpen(regs*)+0x1a9>
c0021a13:	83 c8 0a             	or     eax,0xa
c0021a16:	80 e2 10             	and    dl,0x10
c0021a19:	74 03                	je     c0021a1e <SysOpen(regs*)+0x1b1>
c0021a1b:	83 c8 12             	or     eax,0x12
c0021a1e:	83 ec 08             	sub    esp,0x8
c0021a21:	50                   	push   eax
c0021a22:	56                   	push   esi
c0021a23:	e8 28 8a ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0021a28:	83 c4 10             	add    esp,0x10
c0021a2b:	85 c0                	test   eax,eax
c0021a2d:	75 1c                	jne    c0021a4b <SysOpen(regs*)+0x1de>
c0021a2f:	83 ec 0c             	sub    esp,0xc
c0021a32:	56                   	push   esi
c0021a33:	e8 76 60 ff ff       	call   c0017aae <UnixFile::getFileDescriptor()>
c0021a38:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021a3b:	83 c4 10             	add    esp,0x10
c0021a3e:	89 02                	mov    DWORD PTR [edx],eax
c0021a40:	c1 f8 1f             	sar    eax,0x1f
c0021a43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021a46:	e9 ba fe ff ff       	jmp    c0021905 <SysOpen(regs*)+0x98>
c0021a4b:	81 c4 04 01 00 00    	add    esp,0x104
c0021a51:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a56:	5b                   	pop    ebx
c0021a57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a5c:	5e                   	pop    esi
c0021a5d:	c3                   	ret    
c0021a5e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021a61:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021a67:	e9 92 fe ff ff       	jmp    c00218fe <SysOpen(regs*)+0x91>

c0021a6c <KeSystemCall(regs*, void*)>:
c0021a6c:	53                   	push   ebx
c0021a6d:	83 ec 08             	sub    esp,0x8
c0021a70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a74:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021a77:	83 f8 3e             	cmp    eax,0x3e
c0021a7a:	77 16                	ja     c0021a92 <KeSystemCall(regs*, void*)+0x26>
c0021a7c:	8b 14 85 a0 41 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbe60]
c0021a83:	85 d2                	test   edx,edx
c0021a85:	74 0b                	je     c0021a92 <KeSystemCall(regs*, void*)+0x26>
c0021a87:	83 ec 0c             	sub    esp,0xc
c0021a8a:	53                   	push   ebx
c0021a8b:	ff d2                	call   edx
c0021a8d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021a90:	eb 0d                	jmp    c0021a9f <KeSystemCall(regs*, void*)+0x33>
c0021a92:	52                   	push   edx
c0021a93:	52                   	push   edx
c0021a94:	50                   	push   eax
c0021a95:	68 58 29 03 c0       	push   0xc0032958
c0021a9a:	e8 7b 77 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0021a9f:	83 c4 10             	add    esp,0x10
c0021aa2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021aa7:	83 c4 08             	add    esp,0x8
c0021aaa:	31 d2                	xor    edx,edx
c0021aac:	5b                   	pop    ebx
c0021aad:	c3                   	ret    
c0021aae:	66 90                	xchg   ax,ax

c0021ab0 <KeSwitchEndian16(unsigned short)>:
c0021ab0:	83 ec 04             	sub    esp,0x4
c0021ab3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ab7:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021abb:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021abf:	c1 f8 08             	sar    eax,0x8
c0021ac2:	89 c2                	mov    edx,eax
c0021ac4:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021ac8:	c1 e0 08             	shl    eax,0x8
c0021acb:	09 d0                	or     eax,edx
c0021acd:	83 c4 04             	add    esp,0x4
c0021ad0:	c3                   	ret    
c0021ad1:	8d 76 00             	lea    esi,[esi+0x0]

c0021ad4 <KeSwitchEndian32(unsigned int)>:
c0021ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad8:	c1 e8 18             	shr    eax,0x18
c0021adb:	89 c2                	mov    edx,eax
c0021add:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae1:	c1 e0 08             	shl    eax,0x8
c0021ae4:	25 00 00 ff 00       	and    eax,0xff0000
c0021ae9:	09 c2                	or     edx,eax
c0021aeb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aef:	c1 e8 08             	shr    eax,0x8
c0021af2:	25 00 ff 00 00       	and    eax,0xff00
c0021af7:	09 c2                	or     edx,eax
c0021af9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021afd:	c1 e0 18             	shl    eax,0x18
c0021b00:	09 d0                	or     eax,edx
c0021b02:	c3                   	ret    
c0021b03:	90                   	nop

c0021b04 <EthernetCRC32(unsigned char*, int)>:
c0021b04:	83 ec 10             	sub    esp,0x10
c0021b07:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b0c:	75 0a                	jne    c0021b18 <EthernetCRC32(unsigned char*, int)+0x14>
c0021b0e:	b8 00 00 00 00       	mov    eax,0x0
c0021b13:	e9 8c 00 00 00       	jmp    c0021ba4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b18:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021b1d:	7f 09                	jg     c0021b28 <EthernetCRC32(unsigned char*, int)+0x24>
c0021b1f:	b8 00 00 00 00       	mov    eax,0x0
c0021b24:	eb 7e                	jmp    c0021ba4 <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b26:	66 90                	xchg   ax,ax
c0021b28:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021b30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b3c:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021b40:	7d 5a                	jge    c0021b9c <EthernetCRC32(unsigned char*, int)+0x98>
c0021b42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021b46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b4a:	01 d0                	add    eax,edx
c0021b4c:	8a 00                	mov    al,BYTE PTR [eax]
c0021b4e:	0f b6 c0             	movzx  eax,al
c0021b51:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021b55:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b5d:	8d 76 00             	lea    esi,[esi+0x0]
c0021b60:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021b65:	7f 2d                	jg     c0021b94 <EthernetCRC32(unsigned char*, int)+0x90>
c0021b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b6b:	83 e0 01             	and    eax,0x1
c0021b6e:	74 10                	je     c0021b80 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b74:	d1 e8                	shr    eax,1
c0021b76:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021b7b:	eb 0b                	jmp    c0021b88 <EthernetCRC32(unsigned char*, int)+0x84>
c0021b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0021b80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b84:	d1 e8                	shr    eax,1
c0021b86:	66 90                	xchg   ax,ax
c0021b88:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b8c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021b91:	eb cd                	jmp    c0021b60 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021b93:	90                   	nop
c0021b94:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021b99:	eb 9d                	jmp    c0021b38 <EthernetCRC32(unsigned char*, int)+0x34>
c0021b9b:	90                   	nop
c0021b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ba0:	f7 d0                	not    eax
c0021ba2:	66 90                	xchg   ax,ax
c0021ba4:	83 c4 10             	add    esp,0x10
c0021ba7:	c3                   	ret    

c0021ba8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021ba8:	83 ec 2c             	sub    esp,0x2c
c0021bab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021baf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021bb8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021bbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bc3:	0f b7 c0             	movzx  eax,ax
c0021bc6:	3d 06 08 00 00       	cmp    eax,0x806
c0021bcb:	75 13                	jne    c0021be0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021bcd:	83 ec 0c             	sub    esp,0xc
c0021bd0:	68 6c 29 03 c0       	push   0xc003296c
c0021bd5:	e8 40 76 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0021bda:	83 c4 10             	add    esp,0x10
c0021bdd:	eb 25                	jmp    c0021c04 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021bdf:	90                   	nop
c0021be0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021be4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021be7:	0f b7 c0             	movzx  eax,ax
c0021bea:	3d 00 08 00 00       	cmp    eax,0x800
c0021bef:	75 13                	jne    c0021c04 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021bf1:	83 ec 0c             	sub    esp,0xc
c0021bf4:	68 82 29 03 c0       	push   0xc0032982
c0021bf9:	e8 1c 76 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0021bfe:	83 c4 10             	add    esp,0x10
c0021c01:	8d 76 00             	lea    esi,[esi+0x0]
c0021c04:	90                   	nop
c0021c05:	83 c4 2c             	add    esp,0x2c
c0021c08:	c3                   	ret    
c0021c09:	66 90                	xchg   ax,ax
c0021c0b:	90                   	nop

c0021c0c <KeNetCreateSemaphore>:
c0021c0c:	53                   	push   ebx
c0021c0d:	83 ec 18             	sub    esp,0x18
c0021c10:	83 ec 0c             	sub    esp,0xc
c0021c13:	6a 10                	push   0x10
c0021c15:	e8 e5 e4 ff ff       	call   c00200ff <operator new(unsigned long)>
c0021c1a:	83 c4 10             	add    esp,0x10
c0021c1d:	89 c3                	mov    ebx,eax
c0021c1f:	83 ec 08             	sub    esp,0x8
c0021c22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021c26:	53                   	push   ebx
c0021c27:	e8 1c e9 ff ff       	call   c0020548 <Semaphore::Semaphore(int)>
c0021c2c:	83 c4 10             	add    esp,0x10
c0021c2f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021c33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c3b:	89 10                	mov    DWORD PTR [eax],edx
c0021c3d:	90                   	nop
c0021c3e:	83 c4 18             	add    esp,0x18
c0021c41:	5b                   	pop    ebx
c0021c42:	c3                   	ret    
c0021c43:	90                   	nop

c0021c44 <KeNetFreeSemaphore>:
c0021c44:	83 ec 0c             	sub    esp,0xc
c0021c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c4d:	83 ec 08             	sub    esp,0x8
c0021c50:	6a 10                	push   0x10
c0021c52:	50                   	push   eax
c0021c53:	e8 c4 74 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c0021c58:	83 c4 10             	add    esp,0x10
c0021c5b:	90                   	nop
c0021c5c:	83 c4 0c             	add    esp,0xc
c0021c5f:	c3                   	ret    

c0021c60 <KeNetSignalSemaphore>:
c0021c60:	83 ec 0c             	sub    esp,0xc
c0021c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c67:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c69:	83 ec 0c             	sub    esp,0xc
c0021c6c:	50                   	push   eax
c0021c6d:	e8 36 ec ff ff       	call   c00208a8 <Semaphore::release()>
c0021c72:	83 c4 10             	add    esp,0x10
c0021c75:	90                   	nop
c0021c76:	83 c4 0c             	add    esp,0xc
c0021c79:	c3                   	ret    
c0021c7a:	66 90                	xchg   ax,ax

c0021c7c <KeNetWaitSemaphore>:
c0021c7c:	83 ec 0c             	sub    esp,0xc
c0021c7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c83:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c85:	83 ec 08             	sub    esp,0x8
c0021c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c8c:	50                   	push   eax
c0021c8d:	e8 52 ea ff ff       	call   c00206e4 <Semaphore::acquire(int)>
c0021c92:	83 c4 10             	add    esp,0x10
c0021c95:	83 c4 0c             	add    esp,0xc
c0021c98:	c3                   	ret    

c0021c99 <CmOpen(char const*)>:
c0021c99:	57                   	push   edi
c0021c9a:	56                   	push   esi
c0021c9b:	53                   	push   ebx
c0021c9c:	83 ec 1c             	sub    esp,0x1c
c0021c9f:	6a 30                	push   0x30
c0021ca1:	e8 3d 47 ff ff       	call   c00163e3 <malloc>
c0021ca6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021cad:	89 c3                	mov    ebx,eax
c0021caf:	e8 2f 47 ff ff       	call   c00163e3 <malloc>
c0021cb4:	83 c4 0c             	add    esp,0xc
c0021cb7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021cc1:	89 c6                	mov    esi,eax
c0021cc3:	50                   	push   eax
c0021cc4:	e8 69 87 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0021cc9:	83 c4 0c             	add    esp,0xc
c0021ccc:	89 33                	mov    DWORD PTR [ebx],esi
c0021cce:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021cd2:	50                   	push   eax
c0021cd3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021cd7:	50                   	push   eax
c0021cd8:	56                   	push   esi
c0021cd9:	e8 74 8a ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c0021cde:	5a                   	pop    edx
c0021cdf:	59                   	pop    ecx
c0021ce0:	6a 01                	push   0x1
c0021ce2:	ff 33                	push   DWORD PTR [ebx]
c0021ce4:	e8 67 87 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0021ce9:	5e                   	pop    esi
c0021cea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021cee:	e8 f0 46 ff ff       	call   c00163e3 <malloc>
c0021cf3:	5a                   	pop    edx
c0021cf4:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021cf8:	89 c7                	mov    edi,eax
c0021cfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021cfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0021cfe:	56                   	push   esi
c0021cff:	57                   	push   edi
c0021d00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d04:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d08:	50                   	push   eax
c0021d09:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d0c:	83 c4 14             	add    esp,0x14
c0021d0f:	ff 33                	push   DWORD PTR [ebx]
c0021d11:	e8 98 87 ff ff       	call   c001a4ae <File::close()>
c0021d16:	59                   	pop    ecx
c0021d17:	58                   	pop    eax
c0021d18:	6a 13                	push   0x13
c0021d1a:	ff 33                	push   DWORD PTR [ebx]
c0021d1c:	e8 2f 87 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0021d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d23:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d25:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d28:	57                   	push   edi
c0021d29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d31:	50                   	push   eax
c0021d32:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021d35:	83 c4 14             	add    esp,0x14
c0021d38:	57                   	push   edi
c0021d39:	e8 b5 46 ff ff       	call   c00163f3 <free>
c0021d3e:	83 c4 10             	add    esp,0x10
c0021d41:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021d44:	75 10                	jne    c0021d56 <CmOpen(char const*)+0xbd>
c0021d46:	83 ec 0c             	sub    esp,0xc
c0021d49:	68 97 29 03 c0       	push   0xc0032997
c0021d4e:	e8 4f e4 ff ff       	call   c00201a2 <KePanic(char const*)>
c0021d53:	83 c4 10             	add    esp,0x10
c0021d56:	50                   	push   eax
c0021d57:	6a 00                	push   0x0
c0021d59:	6a 00                	push   0x0
c0021d5b:	ff 33                	push   DWORD PTR [ebx]
c0021d5d:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021d60:	e8 a9 87 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0021d65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d67:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d69:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d6c:	57                   	push   edi
c0021d6d:	6a 00                	push   0x0
c0021d6f:	6a 2b                	push   0x2b
c0021d71:	50                   	push   eax
c0021d72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d75:	83 c4 1c             	add    esp,0x1c
c0021d78:	6a 00                	push   0x0
c0021d7a:	6a 00                	push   0x0
c0021d7c:	ff 33                	push   DWORD PTR [ebx]
c0021d7e:	e8 8b 87 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0021d83:	83 c4 0c             	add    esp,0xc
c0021d86:	6a 08                	push   0x8
c0021d88:	68 a8 29 03 c0       	push   0xc00329a8
c0021d8d:	57                   	push   edi
c0021d8e:	e8 ed e5 fd ff       	call   c0000380 <memcmp>
c0021d93:	83 c4 10             	add    esp,0x10
c0021d96:	85 c0                	test   eax,eax
c0021d98:	74 10                	je     c0021daa <CmOpen(char const*)+0x111>
c0021d9a:	83 ec 0c             	sub    esp,0xc
c0021d9d:	68 b1 29 03 c0       	push   0xc00329b1
c0021da2:	e8 fb e3 ff ff       	call   c00201a2 <KePanic(char const*)>
c0021da7:	83 c4 10             	add    esp,0x10
c0021daa:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021dae:	83 c4 10             	add    esp,0x10
c0021db1:	89 d8                	mov    eax,ebx
c0021db3:	5b                   	pop    ebx
c0021db4:	5e                   	pop    esi
c0021db5:	5f                   	pop    edi
c0021db6:	c3                   	ret    

c0021db7 <CmClose(Reghive_Tag*)>:
c0021db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dbb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021dbf:	74 0b                	je     c0021dcc <CmClose(Reghive_Tag*)+0x15>
c0021dc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021dc7:	e9 e2 86 ff ff       	jmp    c001a4ae <File::close()>
c0021dcc:	c3                   	ret    

c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021dcd:	53                   	push   ebx
c0021dce:	83 ec 18             	sub    esp,0x18
c0021dd1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021dd5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021dd9:	74 29                	je     c0021e04 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021ddb:	50                   	push   eax
c0021ddc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021de1:	99                   	cdq    
c0021de2:	52                   	push   edx
c0021de3:	50                   	push   eax
c0021de4:	ff 33                	push   DWORD PTR [ebx]
c0021de6:	e8 23 87 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0021deb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021ded:	5a                   	pop    edx
c0021dee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021df2:	8b 10                	mov    edx,DWORD PTR [eax]
c0021df4:	51                   	push   ecx
c0021df5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021df9:	6a 00                	push   0x0
c0021dfb:	6a 2b                	push   0x2b
c0021dfd:	50                   	push   eax
c0021dfe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e01:	83 c4 20             	add    esp,0x20
c0021e04:	83 c4 18             	add    esp,0x18
c0021e07:	5b                   	pop    ebx
c0021e08:	c3                   	ret    

c0021e09 <CmGetString(Reghive_Tag*, int, char*)>:
c0021e09:	55                   	push   ebp
c0021e0a:	57                   	push   edi
c0021e0b:	56                   	push   esi
c0021e0c:	53                   	push   ebx
c0021e0d:	31 db                	xor    ebx,ebx
c0021e0f:	83 ec 70             	sub    esp,0x70
c0021e12:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021e16:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021e1d:	50                   	push   eax
c0021e1e:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e25:	55                   	push   ebp
c0021e26:	e8 a2 ff ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e2b:	83 c4 10             	add    esp,0x10
c0021e2e:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021e33:	c1 e0 08             	shl    eax,0x8
c0021e36:	89 c2                	mov    edx,eax
c0021e38:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021e3d:	09 d0                	or     eax,edx
c0021e3f:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021e44:	c1 e0 08             	shl    eax,0x8
c0021e47:	09 d0                	or     eax,edx
c0021e49:	74 25                	je     c0021e70 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021e4b:	52                   	push   edx
c0021e4c:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021e50:	52                   	push   edx
c0021e51:	6b fb 0d             	imul   edi,ebx,0xd
c0021e54:	50                   	push   eax
c0021e55:	55                   	push   ebp
c0021e56:	e8 72 ff ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e5b:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021e5f:	b9 27 00 00 00       	mov    ecx,0x27
c0021e64:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021e6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e6d:	83 c4 10             	add    esp,0x10
c0021e70:	83 c3 03             	add    ebx,0x3
c0021e73:	83 fb 15             	cmp    ebx,0x15
c0021e76:	75 b6                	jne    c0021e2e <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021e78:	83 c4 6c             	add    esp,0x6c
c0021e7b:	5b                   	pop    ebx
c0021e7c:	5e                   	pop    esi
c0021e7d:	5f                   	pop    edi
c0021e7e:	5d                   	pop    ebp
c0021e7f:	c3                   	ret    

c0021e80 <CmEnterDirectory(Reghive_Tag*, int)>:
c0021e80:	83 ec 40             	sub    esp,0x40
c0021e83:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021e87:	50                   	push   eax
c0021e88:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021e90:	e8 38 ff ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e95:	83 c4 10             	add    esp,0x10
c0021e98:	83 c8 ff             	or     eax,0xffffffff
c0021e9b:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021ea0:	75 19                	jne    c0021ebb <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021ea2:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021ea7:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021eac:	c1 e0 08             	shl    eax,0x8
c0021eaf:	09 c2                	or     edx,eax
c0021eb1:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021eb6:	c1 e0 10             	shl    eax,0x10
c0021eb9:	09 d0                	or     eax,edx
c0021ebb:	83 c4 3c             	add    esp,0x3c
c0021ebe:	c3                   	ret    

c0021ebf <CmGetNext(Reghive_Tag*, int)>:
c0021ebf:	83 ec 40             	sub    esp,0x40
c0021ec2:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021ec6:	50                   	push   eax
c0021ec7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ecb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ecf:	e8 f9 fe ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021ed4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021ed9:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021ede:	c1 e0 08             	shl    eax,0x8
c0021ee1:	09 c2                	or     edx,eax
c0021ee3:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021ee8:	83 c4 4c             	add    esp,0x4c
c0021eeb:	c1 e0 10             	shl    eax,0x10
c0021eee:	09 d0                	or     eax,edx
c0021ef0:	c3                   	ret    

c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021ef1:	53                   	push   ebx
c0021ef2:	83 ec 18             	sub    esp,0x18
c0021ef5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021ef9:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021efd:	74 29                	je     c0021f28 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021eff:	50                   	push   eax
c0021f00:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021f05:	99                   	cdq    
c0021f06:	52                   	push   edx
c0021f07:	50                   	push   eax
c0021f08:	ff 33                	push   DWORD PTR [ebx]
c0021f0a:	e8 ff 85 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0021f0f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021f11:	5a                   	pop    edx
c0021f12:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021f16:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f18:	51                   	push   ecx
c0021f19:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021f1d:	6a 00                	push   0x0
c0021f1f:	6a 2b                	push   0x2b
c0021f21:	50                   	push   eax
c0021f22:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021f25:	83 c4 20             	add    esp,0x20
c0021f28:	83 c4 18             	add    esp,0x18
c0021f2b:	5b                   	pop    ebx
c0021f2c:	c3                   	ret    

c0021f2d <CmFreeExtent(Reghive_Tag*, int)>:
c0021f2d:	53                   	push   ebx
c0021f2e:	83 ec 3c             	sub    esp,0x3c
c0021f31:	6a 2b                	push   0x2b
c0021f33:	6a 00                	push   0x0
c0021f35:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0021f39:	53                   	push   ebx
c0021f3a:	e8 b1 e5 fd ff       	call   c00004f0 <memset>
c0021f3f:	83 c4 0c             	add    esp,0xc
c0021f42:	53                   	push   ebx
c0021f43:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f4b:	e8 a1 ff ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f50:	83 c4 48             	add    esp,0x48
c0021f53:	5b                   	pop    ebx
c0021f54:	c3                   	ret    

c0021f55 <CmUpdateHeader(Reghive_Tag*)>:
c0021f55:	83 ec 0c             	sub    esp,0xc
c0021f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f5c:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021f60:	74 10                	je     c0021f72 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0021f62:	52                   	push   edx
c0021f63:	8d 50 05             	lea    edx,[eax+0x5]
c0021f66:	52                   	push   edx
c0021f67:	6a 00                	push   0x0
c0021f69:	50                   	push   eax
c0021f6a:	e8 82 ff ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f6f:	83 c4 10             	add    esp,0x10
c0021f72:	83 c4 0c             	add    esp,0xc
c0021f75:	c3                   	ret    

c0021f76 <CmExpand(Reghive_Tag*, int)>:
c0021f76:	55                   	push   ebp
c0021f77:	57                   	push   edi
c0021f78:	83 cf ff             	or     edi,0xffffffff
c0021f7b:	56                   	push   esi
c0021f7c:	53                   	push   ebx
c0021f7d:	83 ec 3c             	sub    esp,0x3c
c0021f80:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0021f84:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0021f88:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021f8c:	74 59                	je     c0021fe7 <CmExpand(Reghive_Tag*, int)+0x71>
c0021f8e:	50                   	push   eax
c0021f8f:	31 d2                	xor    edx,edx
c0021f91:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0021f95:	31 ff                	xor    edi,edi
c0021f97:	52                   	push   edx
c0021f98:	50                   	push   eax
c0021f99:	ff 33                	push   DWORD PTR [ebx]
c0021f9b:	e8 6e 85 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0021fa0:	83 c4 0c             	add    esp,0xc
c0021fa3:	6a 2b                	push   0x2b
c0021fa5:	6a 00                	push   0x0
c0021fa7:	8d 6c 24 11          	lea    ebp,[esp+0x11]
c0021fab:	55                   	push   ebp
c0021fac:	e8 3f e5 fd ff       	call   c00004f0 <memset>
c0021fb1:	83 c4 10             	add    esp,0x10
c0021fb4:	39 f7                	cmp    edi,esi
c0021fb6:	7d 1b                	jge    c0021fd3 <CmExpand(Reghive_Tag*, int)+0x5d>
c0021fb8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021fba:	83 ec 0c             	sub    esp,0xc
c0021fbd:	47                   	inc    edi
c0021fbe:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0021fc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fc4:	51                   	push   ecx
c0021fc5:	55                   	push   ebp
c0021fc6:	6a 00                	push   0x0
c0021fc8:	6a 2b                	push   0x2b
c0021fca:	50                   	push   eax
c0021fcb:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021fce:	83 c4 20             	add    esp,0x20
c0021fd1:	eb e1                	jmp    c0021fb4 <CmExpand(Reghive_Tag*, int)+0x3e>
c0021fd3:	8b 7b 0d             	mov    edi,DWORD PTR [ebx+0xd]
c0021fd6:	83 ec 0c             	sub    esp,0xc
c0021fd9:	01 fe                	add    esi,edi
c0021fdb:	89 73 0d             	mov    DWORD PTR [ebx+0xd],esi
c0021fde:	53                   	push   ebx
c0021fdf:	e8 71 ff ff ff       	call   c0021f55 <CmUpdateHeader(Reghive_Tag*)>
c0021fe4:	83 c4 10             	add    esp,0x10
c0021fe7:	83 c4 3c             	add    esp,0x3c
c0021fea:	89 f8                	mov    eax,edi
c0021fec:	5b                   	pop    ebx
c0021fed:	5e                   	pop    esi
c0021fee:	5f                   	pop    edi
c0021fef:	5d                   	pop    ebp
c0021ff0:	c3                   	ret    

c0021ff1 <CmFindUnusedExtent(Reghive_Tag*)>:
c0021ff1:	55                   	push   ebp
c0021ff2:	57                   	push   edi
c0021ff3:	56                   	push   esi
c0021ff4:	53                   	push   ebx
c0021ff5:	83 cb ff             	or     ebx,0xffffffff
c0021ff8:	83 ec 1c             	sub    esp,0x1c
c0021ffb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021fff:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0022003:	74 68                	je     c002206d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022005:	51                   	push   ecx
c0022006:	be 2b 00 00 00       	mov    esi,0x2b
c002200b:	6a 00                	push   0x0
c002200d:	31 ff                	xor    edi,edi
c002200f:	6a 00                	push   0x0
c0022011:	31 db                	xor    ebx,ebx
c0022013:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022016:	e8 f3 84 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c002201b:	83 c4 10             	add    esp,0x10
c002201e:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0022021:	76 3b                	jbe    c002205e <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0022023:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022026:	83 ec 0c             	sub    esp,0xc
c0022029:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c002202d:	8b 10                	mov    edx,DWORD PTR [eax]
c002202f:	51                   	push   ecx
c0022030:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0022034:	51                   	push   ecx
c0022035:	6a 00                	push   0x0
c0022037:	6a 01                	push   0x1
c0022039:	50                   	push   eax
c002203a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002203d:	83 c4 20             	add    esp,0x20
c0022040:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0022045:	74 26                	je     c002206d <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022047:	52                   	push   edx
c0022048:	43                   	inc    ebx
c0022049:	57                   	push   edi
c002204a:	56                   	push   esi
c002204b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c002204e:	e8 bb 84 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0022053:	83 c6 2b             	add    esi,0x2b
c0022056:	83 d7 00             	adc    edi,0x0
c0022059:	83 c4 10             	add    esp,0x10
c002205c:	eb c0                	jmp    c002201e <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c002205e:	50                   	push   eax
c002205f:	50                   	push   eax
c0022060:	6a 40                	push   0x40
c0022062:	55                   	push   ebp
c0022063:	e8 0e ff ff ff       	call   c0021f76 <CmExpand(Reghive_Tag*, int)>
c0022068:	83 c4 10             	add    esp,0x10
c002206b:	89 c3                	mov    ebx,eax
c002206d:	83 c4 1c             	add    esp,0x1c
c0022070:	89 d8                	mov    eax,ebx
c0022072:	5b                   	pop    ebx
c0022073:	5e                   	pop    esi
c0022074:	5f                   	pop    edi
c0022075:	5d                   	pop    ebp
c0022076:	c3                   	ret    

c0022077 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022077:	55                   	push   ebp
c0022078:	57                   	push   edi
c0022079:	56                   	push   esi
c002207a:	53                   	push   ebx
c002207b:	81 ec 88 00 00 00    	sub    esp,0x88
c0022081:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0022088:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002208f:	e8 5d ff ff ff       	call   c0021ff1 <CmFindUnusedExtent(Reghive_Tag*)>
c0022094:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022098:	83 c4 0c             	add    esp,0xc
c002209b:	6a 2b                	push   0x2b
c002209d:	6a 00                	push   0x0
c002209f:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00220a3:	55                   	push   ebp
c00220a4:	e8 47 e4 fd ff       	call   c00004f0 <memset>
c00220a9:	83 c4 10             	add    esp,0x10
c00220ac:	85 db                	test   ebx,ebx
c00220ae:	74 12                	je     c00220c2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00220b0:	51                   	push   ecx
c00220b1:	55                   	push   ebp
c00220b2:	53                   	push   ebx
c00220b3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00220ba:	e8 0e fd ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00220bf:	83 c4 10             	add    esp,0x10
c00220c2:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00220c6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00220cd:	b9 2b 00 00 00       	mov    ecx,0x2b
c00220d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220d4:	85 db                	test   ebx,ebx
c00220d6:	74 49                	je     c0022121 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00220d8:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00220dd:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00220e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00220e6:	c1 e0 08             	shl    eax,0x8
c00220e9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c00220ef:	09 c8                	or     eax,ecx
c00220f1:	74 11                	je     c0022104 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c00220f3:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00220f7:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c00220fb:	c1 e8 10             	shr    eax,0x10
c00220fe:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0022102:	eb 0f                	jmp    c0022113 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0022104:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022109:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002210e:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022113:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022117:	c1 ea 08             	shr    edx,0x8
c002211a:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c002211f:	eb 0f                	jmp    c0022130 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0022121:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022126:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c002212b:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0022130:	52                   	push   edx
c0022131:	8d 44 24 49          	lea    eax,[esp+0x49]
c0022135:	50                   	push   eax
c0022136:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022141:	e8 ab fd ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022146:	83 c4 10             	add    esp,0x10
c0022149:	85 db                	test   ebx,ebx
c002214b:	74 12                	je     c002215f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c002214d:	50                   	push   eax
c002214e:	55                   	push   ebp
c002214f:	53                   	push   ebx
c0022150:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022157:	e8 95 fd ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002215c:	83 c4 10             	add    esp,0x10
c002215f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022163:	83 c4 7c             	add    esp,0x7c
c0022166:	5b                   	pop    ebx
c0022167:	5e                   	pop    esi
c0022168:	5f                   	pop    edi
c0022169:	5d                   	pop    ebp
c002216a:	c3                   	ret    

c002216b <CmSetString(Reghive_Tag*, int, char const*)>:
c002216b:	55                   	push   ebp
c002216c:	57                   	push   edi
c002216d:	56                   	push   esi
c002216e:	53                   	push   ebx
c002216f:	bb 27 00 00 00       	mov    ebx,0x27
c0022174:	81 ec 88 00 00 00    	sub    esp,0x88
c002217a:	8b bc 24 9c 00 00 00 	mov    edi,DWORD PTR [esp+0x9c]
c0022181:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0022188:	e8 f3 e3 fd ff       	call   c0000580 <strlen>
c002218d:	8d 48 26             	lea    ecx,[eax+0x26]
c0022190:	89 c8                	mov    eax,ecx
c0022192:	99                   	cdq    
c0022193:	f7 fb                	idiv   ebx
c0022195:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022199:	83 c4 10             	add    esp,0x10
c002219c:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00221a2:	7e 10                	jle    c00221b4 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00221a4:	83 ec 0c             	sub    esp,0xc
c00221a7:	68 c2 29 03 c0       	push   0xc00329c2
c00221ac:	e8 f1 df ff ff       	call   c00201a2 <KePanic(char const*)>
c00221b1:	83 c4 10             	add    esp,0x10
c00221b4:	53                   	push   ebx
c00221b5:	31 ed                	xor    ebp,ebp
c00221b7:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00221bb:	53                   	push   ebx
c00221bc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221c3:	57                   	push   edi
c00221c4:	e8 04 fc ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221c9:	83 c4 10             	add    esp,0x10
c00221cc:	0f b6 73 18          	movzx  esi,BYTE PTR [ebx+0x18]
c00221d0:	89 f0                	mov    eax,esi
c00221d2:	0f b6 73 17          	movzx  esi,BYTE PTR [ebx+0x17]
c00221d6:	c1 e0 08             	shl    eax,0x8
c00221d9:	09 c6                	or     esi,eax
c00221db:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00221df:	c1 e6 08             	shl    esi,0x8
c00221e2:	09 c6                	or     esi,eax
c00221e4:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c00221e8:	7e 72                	jle    c002225c <CmSetString(Reghive_Tag*, int, char const*)+0xf1>
c00221ea:	85 f6                	test   esi,esi
c00221ec:	75 25                	jne    c0022213 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c00221ee:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c00221f3:	8d 44 24 45          	lea    eax,[esp+0x45]
c00221f7:	50                   	push   eax
c00221f8:	6a 00                	push   0x0
c00221fa:	6a 00                	push   0x0
c00221fc:	57                   	push   edi
c00221fd:	e8 75 fe ff ff       	call   c0022077 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022202:	83 c4 10             	add    esp,0x10
c0022205:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022208:	89 c6                	mov    esi,eax
c002220a:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c002220d:	c1 f8 10             	sar    eax,0x10
c0022210:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0022213:	51                   	push   ecx
c0022214:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022218:	52                   	push   edx
c0022219:	56                   	push   esi
c002221a:	57                   	push   edi
c002221b:	e8 ad fb ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022220:	83 c4 0c             	add    esp,0xc
c0022223:	6a 27                	push   0x27
c0022225:	6a 00                	push   0x0
c0022227:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c002222b:	51                   	push   ecx
c002222c:	e8 bf e2 fd ff       	call   c00004f0 <memset>
c0022231:	6b c5 27             	imul   eax,ebp,0x27
c0022234:	83 c4 0c             	add    esp,0xc
c0022237:	6a 27                	push   0x27
c0022239:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0022240:	50                   	push   eax
c0022241:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022245:	51                   	push   ecx
c0022246:	e8 45 e4 fd ff       	call   c0000690 <strncpy>
c002224b:	83 c4 0c             	add    esp,0xc
c002224e:	8d 54 24 49          	lea    edx,[esp+0x49]
c0022252:	52                   	push   edx
c0022253:	56                   	push   esi
c0022254:	57                   	push   edi
c0022255:	e8 97 fc ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c002225a:	eb 19                	jmp    c0022275 <CmSetString(Reghive_Tag*, int, char const*)+0x10a>
c002225c:	85 f6                	test   esi,esi
c002225e:	74 18                	je     c0022278 <CmSetString(Reghive_Tag*, int, char const*)+0x10d>
c0022260:	52                   	push   edx
c0022261:	52                   	push   edx
c0022262:	56                   	push   esi
c0022263:	57                   	push   edi
c0022264:	e8 c4 fc ff ff       	call   c0021f2d <CmFreeExtent(Reghive_Tag*, int)>
c0022269:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c002226d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0022271:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	45                   	inc    ebp
c0022279:	83 c3 03             	add    ebx,0x3
c002227c:	83 fd 07             	cmp    ebp,0x7
c002227f:	0f 85 47 ff ff ff    	jne    c00221cc <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0022285:	50                   	push   eax
c0022286:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c002228a:	50                   	push   eax
c002228b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022292:	57                   	push   edi
c0022293:	e8 59 fc ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022298:	81 c4 8c 00 00 00    	add    esp,0x8c
c002229e:	5b                   	pop    ebx
c002229f:	5e                   	pop    esi
c00222a0:	5f                   	pop    edi
c00222a1:	5d                   	pop    ebp
c00222a2:	c3                   	ret    

c00222a3 <CmGetMatch(char*, char*, bool, bool*)>:
c00222a3:	56                   	push   esi
c00222a4:	53                   	push   ebx
c00222a5:	50                   	push   eax
c00222a6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00222ab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00222af:	74 25                	je     c00222d6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00222b1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00222b4:	31 db                	xor    ebx,ebx
c00222b6:	50                   	push   eax
c00222b7:	50                   	push   eax
c00222b8:	8d 04 9d a0 42 03 c0 	lea    eax,[ebx*4-0x3ffcbd60]
c00222bf:	50                   	push   eax
c00222c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222c4:	e8 b7 e4 fd ff       	call   c0000780 <strcmp>
c00222c9:	83 c4 10             	add    esp,0x10
c00222cc:	85 c0                	test   eax,eax
c00222ce:	74 2e                	je     c00222fe <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222d0:	43                   	inc    ebx
c00222d1:	83 fb 3f             	cmp    ebx,0x3f
c00222d4:	75 e0                	jne    c00222b6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00222d6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00222d9:	31 db                	xor    ebx,ebx
c00222db:	51                   	push   ecx
c00222dc:	51                   	push   ecx
c00222dd:	8d 04 9d a0 42 03 c0 	lea    eax,[ebx*4-0x3ffcbd60]
c00222e4:	50                   	push   eax
c00222e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222e9:	e8 92 e4 fd ff       	call   c0000780 <strcmp>
c00222ee:	83 c4 10             	add    esp,0x10
c00222f1:	85 c0                	test   eax,eax
c00222f3:	74 09                	je     c00222fe <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222f5:	43                   	inc    ebx
c00222f6:	83 fb 3f             	cmp    ebx,0x3f
c00222f9:	75 e0                	jne    c00222db <CmGetMatch(char*, char*, bool, bool*)+0x38>
c00222fb:	83 cb ff             	or     ebx,0xffffffff
c00222fe:	5a                   	pop    edx
c00222ff:	89 d8                	mov    eax,ebx
c0022301:	5b                   	pop    ebx
c0022302:	5e                   	pop    esi
c0022303:	c3                   	ret    

c0022304 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0022304:	55                   	push   ebp
c0022305:	31 c0                	xor    eax,eax
c0022307:	57                   	push   edi
c0022308:	56                   	push   esi
c0022309:	53                   	push   ebx
c002230a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002230e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022312:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022316:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002231a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002231c:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c002231f:	83 fd 1f             	cmp    ebp,0x1f
c0022322:	7f 0b                	jg     c002232f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022324:	0f b6 c2             	movzx  eax,dl
c0022327:	d3 e0                	shl    eax,cl
c0022329:	09 07                	or     DWORD PTR [edi],eax
c002232b:	b0 01                	mov    al,0x1
c002232d:	01 33                	add    DWORD PTR [ebx],esi
c002232f:	5b                   	pop    ebx
c0022330:	5e                   	pop    esi
c0022331:	5f                   	pop    edi
c0022332:	5d                   	pop    ebp
c0022333:	c3                   	ret    

c0022334 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022334:	57                   	push   edi
c0022335:	56                   	push   esi
c0022336:	53                   	push   ebx
c0022337:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002233b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002233f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022343:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022347:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022349:	7c 17                	jl     c0022362 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c002234b:	8b 17                	mov    edx,DWORD PTR [edi]
c002234d:	b8 01 00 00 00       	mov    eax,0x1
c0022352:	d3 e0                	shl    eax,cl
c0022354:	48                   	dec    eax
c0022355:	21 d0                	and    eax,edx
c0022357:	d3 ea                	shr    edx,cl
c0022359:	89 17                	mov    DWORD PTR [edi],edx
c002235b:	29 0b                	sub    DWORD PTR [ebx],ecx
c002235d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0022360:	eb 05                	jmp    c0022367 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022362:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022365:	31 c0                	xor    eax,eax
c0022367:	5b                   	pop    ebx
c0022368:	5e                   	pop    esi
c0022369:	5f                   	pop    edi
c002236a:	c3                   	ret    

c002236b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c002236b:	83 ec 40             	sub    esp,0x40
c002236e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022372:	50                   	push   eax
c0022373:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022377:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002237b:	e8 4d fa ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0022380:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022384:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0022388:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c002238c:	89 10                	mov    DWORD PTR [eax],edx
c002238e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022391:	83 c4 4c             	add    esp,0x4c
c0022394:	c3                   	ret    

c0022395 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0022395:	55                   	push   ebp
c0022396:	57                   	push   edi
c0022397:	56                   	push   esi
c0022398:	53                   	push   ebx
c0022399:	83 ec 40             	sub    esp,0x40
c002239c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00223a0:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00223a4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00223a8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00223ac:	53                   	push   ebx
c00223ad:	56                   	push   esi
c00223ae:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223b2:	e8 16 fa ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00223b7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00223bb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00223bf:	83 c4 0c             	add    esp,0xc
c00223c2:	53                   	push   ebx
c00223c3:	56                   	push   esi
c00223c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223c8:	e8 24 fb ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223cd:	83 c4 4c             	add    esp,0x4c
c00223d0:	5b                   	pop    ebx
c00223d1:	5e                   	pop    esi
c00223d2:	5f                   	pop    edi
c00223d3:	5d                   	pop    ebp
c00223d4:	c3                   	ret    

c00223d5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00223d5:	55                   	push   ebp
c00223d6:	57                   	push   edi
c00223d7:	56                   	push   esi
c00223d8:	31 f6                	xor    esi,esi
c00223da:	53                   	push   ebx
c00223db:	31 db                	xor    ebx,ebx
c00223dd:	83 ec 40             	sub    esp,0x40
c00223e0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00223e8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00223f0:	6a 12                	push   0x12
c00223f2:	68 ee 00 00 00       	push   0xee
c00223f7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00223fb:	e8 f0 e0 fd ff       	call   c00004f0 <memset>
c0022400:	83 c4 10             	add    esp,0x10
c0022403:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022407:	6a 08                	push   0x8
c0022409:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002240d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0022411:	50                   	push   eax
c0022412:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022416:	55                   	push   ebp
c0022417:	57                   	push   edi
c0022418:	e8 e7 fe ff ff       	call   c0022304 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002241d:	83 c4 10             	add    esp,0x10
c0022420:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022424:	50                   	push   eax
c0022425:	6a 06                	push   0x6
c0022427:	55                   	push   ebp
c0022428:	57                   	push   edi
c0022429:	e8 06 ff ff ff       	call   c0022334 <CmGetShift(unsigned int*, int*, int, bool*)>
c002242e:	83 c4 10             	add    esp,0x10
c0022431:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022436:	74 07                	je     c002243f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022438:	46                   	inc    esi
c0022439:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c002243d:	eb e1                	jmp    c0022420 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c002243f:	43                   	inc    ebx
c0022440:	83 fb 12             	cmp    ebx,0x12
c0022443:	75 c2                	jne    c0022407 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022445:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022449:	31 f6                	xor    esi,esi
c002244b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002244e:	50                   	push   eax
c002244f:	50                   	push   eax
c0022450:	0f b6 44 34 20       	movzx  eax,BYTE PTR [esp+esi*1+0x20]
c0022455:	46                   	inc    esi
c0022456:	8d 04 85 a0 42 03 c0 	lea    eax,[eax*4-0x3ffcbd60]
c002245d:	50                   	push   eax
c002245e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022462:	e8 09 e4 fd ff       	call   c0000870 <strcat>
c0022467:	83 c4 10             	add    esp,0x10
c002246a:	83 fe 18             	cmp    esi,0x18
c002246d:	75 df                	jne    c002244e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c002246f:	83 c4 3c             	add    esp,0x3c
c0022472:	31 c0                	xor    eax,eax
c0022474:	5b                   	pop    ebx
c0022475:	5e                   	pop    esi
c0022476:	5f                   	pop    edi
c0022477:	5d                   	pop    ebp
c0022478:	c3                   	ret    

c0022479 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022479:	83 ec 40             	sub    esp,0x40
c002247c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022480:	50                   	push   eax
c0022481:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022485:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022489:	e8 3f f9 ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002248e:	58                   	pop    eax
c002248f:	5a                   	pop    edx
c0022490:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022494:	8d 44 24 15          	lea    eax,[esp+0x15]
c0022498:	50                   	push   eax
c0022499:	e8 37 ff ff ff       	call   c00223d5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c002249e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00224a3:	83 c4 4c             	add    esp,0x4c
c00224a6:	c3                   	ret    

c00224a7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00224a7:	55                   	push   ebp
c00224a8:	57                   	push   edi
c00224a9:	56                   	push   esi
c00224aa:	53                   	push   ebx
c00224ab:	31 db                	xor    ebx,ebx
c00224ad:	83 ec 70             	sub    esp,0x70
c00224b0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00224b7:	6a 30                	push   0x30
c00224b9:	6a 00                	push   0x0
c00224bb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00224bf:	56                   	push   esi
c00224c0:	e8 2b e0 fd ff       	call   c00004f0 <memset>
c00224c5:	83 c4 10             	add    esp,0x10
c00224c8:	83 ec 0c             	sub    esp,0xc
c00224cb:	57                   	push   edi
c00224cc:	e8 af e0 fd ff       	call   c0000580 <strlen>
c00224d1:	83 c4 10             	add    esp,0x10
c00224d4:	39 d8                	cmp    eax,ebx
c00224d6:	76 16                	jbe    c00224ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00224d8:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00224dc:	83 ec 0c             	sub    esp,0xc
c00224df:	50                   	push   eax
c00224e0:	e8 7b e4 fd ff       	call   c0000960 <toupper>
c00224e5:	83 c4 10             	add    esp,0x10
c00224e8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00224eb:	43                   	inc    ebx
c00224ec:	eb da                	jmp    c00224c8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c00224ee:	52                   	push   edx
c00224ef:	31 db                	xor    ebx,ebx
c00224f1:	6a 18                	push   0x18
c00224f3:	31 ff                	xor    edi,edi
c00224f5:	6a 3f                	push   0x3f
c00224f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224fb:	50                   	push   eax
c00224fc:	e8 ef df fd ff       	call   c00004f0 <memset>
c0022501:	83 c4 10             	add    esp,0x10
c0022504:	8a 44 1c 30          	mov    al,BYTE PTR [esp+ebx*1+0x30]
c0022508:	8d 74 24 10          	lea    esi,[esp+0x10]
c002250c:	84 c0                	test   al,al
c002250e:	0f 84 af 00 00 00    	je     c00225c3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c0022514:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022518:	8d 6b 01             	lea    ebp,[ebx+0x1]
c002251b:	83 ec 0c             	sub    esp,0xc
c002251e:	c6 44 24 22 00       	mov    BYTE PTR [esp+0x22],0x0
c0022523:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0022527:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002252b:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c0022530:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022534:	56                   	push   esi
c0022535:	e8 46 e0 fd ff       	call   c0000580 <strlen>
c002253a:	83 c4 10             	add    esp,0x10
c002253d:	85 c0                	test   eax,eax
c002253f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022543:	74 0b                	je     c0022550 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022545:	50                   	push   eax
c0022546:	6a 01                	push   0x1
c0022548:	56                   	push   esi
c0022549:	8d 44 24 20          	lea    eax,[esp+0x20]
c002254d:	50                   	push   eax
c002254e:	eb 0a                	jmp    c002255a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0022550:	50                   	push   eax
c0022551:	6a 00                	push   0x0
c0022553:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022557:	50                   	push   eax
c0022558:	6a 00                	push   0x0
c002255a:	e8 44 fd ff ff       	call   c00222a3 <CmGetMatch(char*, char*, bool, bool*)>
c002255f:	83 c4 10             	add    esp,0x10
c0022562:	83 f8 ff             	cmp    eax,0xffffffff
c0022565:	75 1a                	jne    c0022581 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022567:	83 ec 0c             	sub    esp,0xc
c002256a:	68 d7 29 03 c0       	push   0xc00329d7
c002256f:	e8 2e dc ff ff       	call   c00201a2 <KePanic(char const*)>
c0022574:	83 c4 10             	add    esp,0x10
c0022577:	b8 02 00 00 00       	mov    eax,0x2
c002257c:	e9 bb 00 00 00       	jmp    c002263c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022581:	83 ff 18             	cmp    edi,0x18
c0022584:	75 1a                	jne    c00225a0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0022586:	83 ec 0c             	sub    esp,0xc
c0022589:	68 ec 29 03 c0       	push   0xc00329ec
c002258e:	e8 0f dc ff ff       	call   c00201a2 <KePanic(char const*)>
c0022593:	83 c4 10             	add    esp,0x10
c0022596:	b8 01 00 00 00       	mov    eax,0x1
c002259b:	e9 9c 00 00 00       	jmp    c002263c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c00225a0:	47                   	inc    edi
c00225a1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00225a6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00225aa:	0f 45 dd             	cmovne ebx,ebp
c00225ad:	83 ec 0c             	sub    esp,0xc
c00225b0:	56                   	push   esi
c00225b1:	e8 ca df fd ff       	call   c0000580 <strlen>
c00225b6:	83 c4 10             	add    esp,0x10
c00225b9:	85 c0                	test   eax,eax
c00225bb:	74 06                	je     c00225c3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11c>
c00225bd:	43                   	inc    ebx
c00225be:	e9 41 ff ff ff       	jmp    c0022504 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00225c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225cb:	31 db                	xor    ebx,ebx
c00225cd:	31 ff                	xor    edi,edi
c00225cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00225d7:	50                   	push   eax
c00225d8:	6a 12                	push   0x12
c00225da:	68 ee 00 00 00       	push   0xee
c00225df:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00225e6:	e8 05 df fd ff       	call   c00004f0 <memset>
c00225eb:	83 c4 10             	add    esp,0x10
c00225ee:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00225f2:	83 fb 17             	cmp    ebx,0x17
c00225f5:	7e 26                	jle    c002261d <CmConvertToInternalFilename(char const*, unsigned char*)+0x176>
c00225f7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00225fb:	50                   	push   eax
c00225fc:	6a 08                	push   0x8
c00225fe:	55                   	push   ebp
c00225ff:	56                   	push   esi
c0022600:	e8 2f fd ff ff       	call   c0022334 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022605:	83 c4 10             	add    esp,0x10
c0022608:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002260d:	74 26                	je     c0022635 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18e>
c002260f:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022616:	4b                   	dec    ebx
c0022617:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c002261a:	47                   	inc    edi
c002261b:	eb 1c                	jmp    c0022639 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c002261d:	6a 06                	push   0x6
c002261f:	0f b6 44 1c 1c       	movzx  eax,BYTE PTR [esp+ebx*1+0x1c]
c0022624:	50                   	push   eax
c0022625:	55                   	push   ebp
c0022626:	56                   	push   esi
c0022627:	e8 d8 fc ff ff       	call   c0022304 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002262c:	83 c4 10             	add    esp,0x10
c002262f:	84 c0                	test   al,al
c0022631:	75 06                	jne    c0022639 <CmConvertToInternalFilename(char const*, unsigned char*)+0x192>
c0022633:	eb c2                	jmp    c00225f7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x150>
c0022635:	31 c0                	xor    eax,eax
c0022637:	eb 03                	jmp    c002263c <CmConvertToInternalFilename(char const*, unsigned char*)+0x195>
c0022639:	43                   	inc    ebx
c002263a:	eb b2                	jmp    c00225ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x147>
c002263c:	83 c4 6c             	add    esp,0x6c
c002263f:	5b                   	pop    ebx
c0022640:	5e                   	pop    esi
c0022641:	5f                   	pop    edi
c0022642:	5d                   	pop    ebp
c0022643:	c3                   	ret    

c0022644 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022644:	53                   	push   ebx
c0022645:	83 ec 3c             	sub    esp,0x3c
c0022648:	6a 2b                	push   0x2b
c002264a:	6a 00                	push   0x0
c002264c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022650:	53                   	push   ebx
c0022651:	e8 9a de fd ff       	call   c00004f0 <memset>
c0022656:	58                   	pop    eax
c0022657:	5a                   	pop    edx
c0022658:	8d 44 24 11          	lea    eax,[esp+0x11]
c002265c:	50                   	push   eax
c002265d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022661:	e8 41 fe ff ff       	call   c00224a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022666:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c002266b:	83 c4 0c             	add    esp,0xc
c002266e:	6a 15                	push   0x15
c0022670:	6a 00                	push   0x0
c0022672:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022676:	50                   	push   eax
c0022677:	e8 74 de fd ff       	call   c00004f0 <memset>
c002267c:	53                   	push   ebx
c002267d:	6a 00                	push   0x0
c002267f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022683:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022687:	e8 eb f9 ff ff       	call   c0022077 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002268c:	83 c4 58             	add    esp,0x58
c002268f:	5b                   	pop    ebx
c0022690:	c3                   	ret    

c0022691 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0022691:	56                   	push   esi
c0022692:	53                   	push   ebx
c0022693:	83 ec 48             	sub    esp,0x48
c0022696:	6a 12                	push   0x12
c0022698:	68 ff 00 00 00       	push   0xff
c002269d:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00226a1:	56                   	push   esi
c00226a2:	e8 49 de fd ff       	call   c00004f0 <memset>
c00226a7:	5a                   	pop    edx
c00226a8:	59                   	pop    ecx
c00226a9:	56                   	push   esi
c00226aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00226ae:	e8 f4 fd ff ff       	call   c00224a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00226b3:	83 c4 10             	add    esp,0x10
c00226b6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00226ba:	85 db                	test   ebx,ebx
c00226bc:	74 42                	je     c0022700 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00226be:	50                   	push   eax
c00226bf:	8d 44 24 19          	lea    eax,[esp+0x19]
c00226c3:	50                   	push   eax
c00226c4:	53                   	push   ebx
c00226c5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226c9:	e8 ff f6 ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226ce:	83 c4 0c             	add    esp,0xc
c00226d1:	6a 12                	push   0x12
c00226d3:	8d 44 24 21          	lea    eax,[esp+0x21]
c00226d7:	50                   	push   eax
c00226d8:	56                   	push   esi
c00226d9:	e8 a2 dc fd ff       	call   c0000380 <memcmp>
c00226de:	83 c4 10             	add    esp,0x10
c00226e1:	85 c0                	test   eax,eax
c00226e3:	74 1e                	je     c0022703 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00226e5:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00226ea:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00226ef:	c1 e3 08             	shl    ebx,0x8
c00226f2:	09 d8                	or     eax,ebx
c00226f4:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00226f9:	c1 e3 10             	shl    ebx,0x10
c00226fc:	09 c3                	or     ebx,eax
c00226fe:	eb ba                	jmp    c00226ba <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0022700:	83 cb ff             	or     ebx,0xffffffff
c0022703:	83 c4 44             	add    esp,0x44
c0022706:	89 d8                	mov    eax,ebx
c0022708:	5b                   	pop    ebx
c0022709:	5e                   	pop    esi
c002270a:	c3                   	ret    

c002270b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c002270b:	57                   	push   edi
c002270c:	56                   	push   esi
c002270d:	53                   	push   ebx
c002270e:	83 ec 34             	sub    esp,0x34
c0022711:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022715:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022719:	6a 2b                	push   0x2b
c002271b:	6a 00                	push   0x0
c002271d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022721:	53                   	push   ebx
c0022722:	e8 c9 dd fd ff       	call   c00004f0 <memset>
c0022727:	58                   	pop    eax
c0022728:	5a                   	pop    edx
c0022729:	8d 44 24 11          	lea    eax,[esp+0x11]
c002272d:	50                   	push   eax
c002272e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022732:	e8 70 fd ff ff       	call   c00224a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022737:	8a 44 24 64          	mov    al,BYTE PTR [esp+0x64]
c002273b:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c002273f:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022743:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022747:	53                   	push   ebx
c0022748:	6a 00                	push   0x0
c002274a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002274e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022752:	e8 20 f9 ff ff       	call   c0022077 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022757:	83 c4 50             	add    esp,0x50
c002275a:	5b                   	pop    ebx
c002275b:	5e                   	pop    esi
c002275c:	5f                   	pop    edi
c002275d:	c3                   	ret    

c002275e <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c002275e:	55                   	push   ebp
c002275f:	57                   	push   edi
c0022760:	56                   	push   esi
c0022761:	53                   	push   ebx
c0022762:	83 ec 40             	sub    esp,0x40
c0022765:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022769:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002276d:	6a 2b                	push   0x2b
c002276f:	6a 00                	push   0x0
c0022771:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022775:	56                   	push   esi
c0022776:	e8 75 dd fd ff       	call   c00004f0 <memset>
c002277b:	5f                   	pop    edi
c002277c:	89 ef                	mov    edi,ebp
c002277e:	58                   	pop    eax
c002277f:	8d 44 24 11          	lea    eax,[esp+0x11]
c0022783:	50                   	push   eax
c0022784:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0022788:	e8 1a fd ff ff       	call   c00224a7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c002278d:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0022792:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0022797:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c002279c:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00227a1:	83 c4 10             	add    esp,0x10
c00227a4:	85 ed                	test   ebp,ebp
c00227a6:	74 14                	je     c00227bc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227a8:	51                   	push   ecx
c00227a9:	51                   	push   ecx
c00227aa:	57                   	push   edi
c00227ab:	53                   	push   ebx
c00227ac:	e8 0e f7 ff ff       	call   c0021ebf <CmGetNext(Reghive_Tag*, int)>
c00227b1:	83 c4 10             	add    esp,0x10
c00227b4:	85 c0                	test   eax,eax
c00227b6:	74 04                	je     c00227bc <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227b8:	89 c7                	mov    edi,eax
c00227ba:	eb e8                	jmp    c00227a4 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00227bc:	56                   	push   esi
c00227bd:	6a 00                	push   0x0
c00227bf:	57                   	push   edi
c00227c0:	53                   	push   ebx
c00227c1:	e8 b1 f8 ff ff       	call   c0022077 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227c6:	83 c4 0c             	add    esp,0xc
c00227c9:	56                   	push   esi
c00227ca:	50                   	push   eax
c00227cb:	89 c7                	mov    edi,eax
c00227cd:	53                   	push   ebx
c00227ce:	e8 fa f5 ff ff       	call   c0021dcd <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227d3:	58                   	pop    eax
c00227d4:	5a                   	pop    edx
c00227d5:	6a 6c                	push   0x6c
c00227d7:	6a 00                	push   0x0
c00227d9:	6a 00                	push   0x0
c00227db:	68 fd 29 03 c0       	push   0xc00329fd
c00227e0:	57                   	push   edi
c00227e1:	53                   	push   ebx
c00227e2:	e8 24 ff ff ff       	call   c002270b <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00227e7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00227eb:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00227ef:	c1 e8 10             	shr    eax,0x10
c00227f2:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00227f6:	83 c4 1c             	add    esp,0x1c
c00227f9:	56                   	push   esi
c00227fa:	57                   	push   edi
c00227fb:	53                   	push   ebx
c00227fc:	e8 f0 f6 ff ff       	call   c0021ef1 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022801:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022806:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c002280b:	c1 e0 08             	shl    eax,0x8
c002280e:	09 c2                	or     edx,eax
c0022810:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022815:	83 c4 4c             	add    esp,0x4c
c0022818:	5b                   	pop    ebx
c0022819:	5e                   	pop    esi
c002281a:	c1 e0 10             	shl    eax,0x10
c002281d:	09 d0                	or     eax,edx
c002281f:	5f                   	pop    edi
c0022820:	5d                   	pop    ebp
c0022821:	c3                   	ret    

c0022822 <zStrtok(char*, char const*)>:
c0022822:	55                   	push   ebp
c0022823:	57                   	push   edi
c0022824:	56                   	push   esi
c0022825:	53                   	push   ebx
c0022826:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002282a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002282e:	85 db                	test   ebx,ebx
c0022830:	74 2f                	je     c0022861 <zStrtok(char*, char const*)+0x3f>
c0022832:	85 c0                	test   eax,eax
c0022834:	75 09                	jne    c002283f <zStrtok(char*, char const*)+0x1d>
c0022836:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c002283b:	85 c0                	test   eax,eax
c002283d:	74 50                	je     c002288f <zStrtok(char*, char const*)+0x6d>
c002283f:	31 c9                	xor    ecx,ecx
c0022841:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022845:	74 03                	je     c002284a <zStrtok(char*, char const*)+0x28>
c0022847:	41                   	inc    ecx
c0022848:	eb f7                	jmp    c0022841 <zStrtok(char*, char const*)+0x1f>
c002284a:	31 d2                	xor    edx,edx
c002284c:	39 ca                	cmp    edx,ecx
c002284e:	74 15                	je     c0022865 <zStrtok(char*, char const*)+0x43>
c0022850:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022854:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022857:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c002285a:	39 ee                	cmp    esi,ebp
c002285c:	74 13                	je     c0022871 <zStrtok(char*, char const*)+0x4f>
c002285e:	42                   	inc    edx
c002285f:	eb eb                	jmp    c002284c <zStrtok(char*, char const*)+0x2a>
c0022861:	31 c0                	xor    eax,eax
c0022863:	eb 2a                	jmp    c002288f <zStrtok(char*, char const*)+0x6d>
c0022865:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c002286f:	eb 1e                	jmp    c002288f <zStrtok(char*, char const*)+0x6d>
c0022871:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022874:	39 ce                	cmp    esi,ecx
c0022876:	75 0a                	jne    c0022882 <zStrtok(char*, char const*)+0x60>
c0022878:	40                   	inc    eax
c0022879:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c002287e:	89 d8                	mov    eax,ebx
c0022880:	eb 0d                	jmp    c002288f <zStrtok(char*, char const*)+0x6d>
c0022882:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0022885:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0022889:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c002288f:	5b                   	pop    ebx
c0022890:	5e                   	pop    esi
c0022891:	5f                   	pop    edi
c0022892:	5d                   	pop    ebp
c0022893:	c3                   	ret    

c0022894 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0022894:	57                   	push   edi
c0022895:	56                   	push   esi
c0022896:	53                   	push   ebx
c0022897:	81 ec 08 01 00 00    	sub    esp,0x108
c002289d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00228a4:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00228ab:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00228af:	53                   	push   ebx
c00228b0:	e8 9b dd fd ff       	call   c0000650 <strcpy>
c00228b5:	59                   	pop    ecx
c00228b6:	5e                   	pop    esi
c00228b7:	68 9f 2d 03 c0       	push   0xc0032d9f
c00228bc:	53                   	push   ebx
c00228bd:	bb 01 00 00 00       	mov    ebx,0x1
c00228c2:	e8 5b ff ff ff       	call   c0022822 <zStrtok(char*, char const*)>
c00228c7:	83 c4 10             	add    esp,0x10
c00228ca:	85 c0                	test   eax,eax
c00228cc:	74 3b                	je     c0022909 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228ce:	52                   	push   edx
c00228cf:	50                   	push   eax
c00228d0:	6a 01                	push   0x1
c00228d2:	57                   	push   edi
c00228d3:	e8 b9 fd ff ff       	call   c0022691 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00228d8:	59                   	pop    ecx
c00228d9:	5e                   	pop    esi
c00228da:	89 c3                	mov    ebx,eax
c00228dc:	68 9f 2d 03 c0       	push   0xc0032d9f
c00228e1:	6a 00                	push   0x0
c00228e3:	e8 3a ff ff ff       	call   c0022822 <zStrtok(char*, char const*)>
c00228e8:	83 c4 10             	add    esp,0x10
c00228eb:	85 c0                	test   eax,eax
c00228ed:	89 c6                	mov    esi,eax
c00228ef:	74 18                	je     c0022909 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228f1:	52                   	push   edx
c00228f2:	52                   	push   edx
c00228f3:	53                   	push   ebx
c00228f4:	57                   	push   edi
c00228f5:	e8 86 f5 ff ff       	call   c0021e80 <CmEnterDirectory(Reghive_Tag*, int)>
c00228fa:	83 c4 10             	add    esp,0x10
c00228fd:	83 f8 ff             	cmp    eax,0xffffffff
c0022900:	89 c3                	mov    ebx,eax
c0022902:	74 05                	je     c0022909 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022904:	50                   	push   eax
c0022905:	56                   	push   esi
c0022906:	53                   	push   ebx
c0022907:	eb c9                	jmp    c00228d2 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022909:	81 c4 00 01 00 00    	add    esp,0x100
c002290f:	89 d8                	mov    eax,ebx
c0022911:	5b                   	pop    ebx
c0022912:	5e                   	pop    esi
c0022913:	5f                   	pop    edi
c0022914:	c3                   	ret    

c0022915 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022915:	55                   	push   ebp
c0022916:	57                   	push   edi
c0022917:	56                   	push   esi
c0022918:	53                   	push   ebx
c0022919:	83 ec 5c             	sub    esp,0x5c
c002291c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0022920:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022924:	85 db                	test   ebx,ebx
c0022926:	0f 8e 84 00 00 00    	jle    c00229b0 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c002292c:	57                   	push   edi
c002292d:	31 ed                	xor    ebp,ebp
c002292f:	6a 32                	push   0x32
c0022931:	6a 00                	push   0x0
c0022933:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022937:	57                   	push   edi
c0022938:	e8 b3 db fd ff       	call   c00004f0 <memset>
c002293d:	83 c4 0c             	add    esp,0xc
c0022940:	57                   	push   edi
c0022941:	53                   	push   ebx
c0022942:	56                   	push   esi
c0022943:	e8 31 fb ff ff       	call   c0022479 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022948:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002294c:	83 c4 10             	add    esp,0x10
c002294f:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022953:	7d 13                	jge    c0022968 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022955:	83 ec 0c             	sub    esp,0xc
c0022958:	45                   	inc    ebp
c0022959:	68 23 31 03 c0       	push   0xc0033123
c002295e:	e8 b7 68 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0022963:	83 c4 10             	add    esp,0x10
c0022966:	eb e7                	jmp    c002294f <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022968:	51                   	push   ecx
c0022969:	57                   	push   edi
c002296a:	53                   	push   ebx
c002296b:	68 03 2a 03 c0       	push   0xc0032a03
c0022970:	e8 a5 68 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0022975:	83 c4 10             	add    esp,0x10
c0022978:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c002297d:	75 1e                	jne    c002299d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c002297f:	52                   	push   edx
c0022980:	52                   	push   edx
c0022981:	53                   	push   ebx
c0022982:	56                   	push   esi
c0022983:	e8 f8 f4 ff ff       	call   c0021e80 <CmEnterDirectory(Reghive_Tag*, int)>
c0022988:	83 c4 0c             	add    esp,0xc
c002298b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c002298f:	8d 51 04             	lea    edx,[ecx+0x4]
c0022992:	52                   	push   edx
c0022993:	50                   	push   eax
c0022994:	56                   	push   esi
c0022995:	e8 7b ff ff ff       	call   c0022915 <CmDisplayTree(Reghive_Tag*, int, int)>
c002299a:	83 c4 10             	add    esp,0x10
c002299d:	50                   	push   eax
c002299e:	50                   	push   eax
c002299f:	53                   	push   ebx
c00229a0:	56                   	push   esi
c00229a1:	e8 19 f5 ff ff       	call   c0021ebf <CmGetNext(Reghive_Tag*, int)>
c00229a6:	83 c4 10             	add    esp,0x10
c00229a9:	89 c3                	mov    ebx,eax
c00229ab:	e9 74 ff ff ff       	jmp    c0022924 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00229b0:	83 c4 5c             	add    esp,0x5c
c00229b3:	5b                   	pop    ebx
c00229b4:	5e                   	pop    esi
c00229b5:	5f                   	pop    edi
c00229b6:	5d                   	pop    ebp
c00229b7:	c3                   	ret    

c00229b8 <CmSplitFinalSlashInPlace(char*)>:
c00229b8:	53                   	push   ebx
c00229b9:	83 ec 14             	sub    esp,0x14
c00229bc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00229c0:	53                   	push   ebx
c00229c1:	e8 ba db fd ff       	call   c0000580 <strlen>
c00229c6:	83 c4 10             	add    esp,0x10
c00229c9:	48                   	dec    eax
c00229ca:	85 c0                	test   eax,eax
c00229cc:	74 15                	je     c00229e3 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00229ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00229d2:	8d 14 03             	lea    edx,[ebx+eax*1]
c00229d5:	75 09                	jne    c00229e0 <CmSplitFinalSlashInPlace(char*)+0x28>
c00229d7:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00229da:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00229de:	eb 05                	jmp    c00229e5 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00229e0:	48                   	dec    eax
c00229e1:	eb e7                	jmp    c00229ca <CmSplitFinalSlashInPlace(char*)+0x12>
c00229e3:	31 c0                	xor    eax,eax
c00229e5:	83 c4 08             	add    esp,0x8
c00229e8:	5b                   	pop    ebx
c00229e9:	c3                   	ret    

c00229ea <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00229ea:	55                   	push   ebp
c00229eb:	57                   	push   edi
c00229ec:	56                   	push   esi
c00229ed:	53                   	push   ebx
c00229ee:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00229f4:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00229fb:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00229fe:	8d 43 01             	lea    eax,[ebx+0x1]
c0022a01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a05:	89 f0                	mov    eax,esi
c0022a07:	3c 40                	cmp    al,0x40
c0022a09:	75 1b                	jne    c0022a26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x3c>
c0022a0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0022a0e:	85 c0                	test   eax,eax
c0022a10:	74 08                	je     c0022a1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022a12:	83 f8 3a             	cmp    eax,0x3a
c0022a15:	74 03                	je     c0022a1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x30>
c0022a17:	43                   	inc    ebx
c0022a18:	eb f1                	jmp    c0022a0b <Reg::findLineFromLoadedData(char*, char*, char*)+0x21>
c0022a1a:	85 c0                	test   eax,eax
c0022a1c:	0f 84 45 01 00 00    	je     c0022b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022a22:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022a25:	43                   	inc    ebx
c0022a26:	50                   	push   eax
c0022a27:	6a 40                	push   0x40
c0022a29:	6a 00                	push   0x0
c0022a2b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022a2f:	50                   	push   eax
c0022a30:	e8 bb da fd ff       	call   c00004f0 <memset>
c0022a35:	89 f1                	mov    ecx,esi
c0022a37:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022a3e:	31 c0                	xor    eax,eax
c0022a40:	83 c4 10             	add    esp,0x10
c0022a43:	0f be f1             	movsx  esi,cl
c0022a46:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022a49:	85 d2                	test   edx,edx
c0022a4b:	89 d1                	mov    ecx,edx
c0022a4d:	0f 84 14 01 00 00    	je     c0022b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022a53:	3d c7 00 00 00       	cmp    eax,0xc7
c0022a58:	0f 8f 09 01 00 00    	jg     c0022b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022a5e:	83 fa 0a             	cmp    edx,0xa
c0022a61:	0f 85 f1 00 00 00    	jne    c0022b58 <Reg::findLineFromLoadedData(char*, char*, char*)+0x16e>
c0022a67:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022a6c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022a71:	89 c8                	mov    eax,ecx
c0022a73:	a8 df                	test   al,0xdf
c0022a75:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022a7a:	83 f9 23             	cmp    ecx,0x23
c0022a7d:	0f 94 c2             	sete   dl
c0022a80:	89 d5                	mov    ebp,edx
c0022a82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022a86:	09 ea                	or     edx,ebp
c0022a88:	80 e2 01             	and    dl,0x1
c0022a8b:	75 47                	jne    c0022ad4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022a8d:	83 e8 09             	sub    eax,0x9
c0022a90:	3c 01                	cmp    al,0x1
c0022a92:	76 40                	jbe    c0022ad4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022a94:	83 f9 5b             	cmp    ecx,0x5b
c0022a97:	75 42                	jne    c0022adb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022a99:	83 fe 40             	cmp    esi,0x40
c0022a9c:	75 36                	jne    c0022ad4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022a9e:	83 ec 0c             	sub    esp,0xc
c0022aa1:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0022aa5:	55                   	push   ebp
c0022aa6:	e8 d5 da fd ff       	call   c0000580 <strlen>
c0022aab:	83 c4 10             	add    esp,0x10
c0022aae:	83 f8 3f             	cmp    eax,0x3f
c0022ab1:	0f 87 b0 00 00 00    	ja     c0022b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022ab7:	50                   	push   eax
c0022ab8:	50                   	push   eax
c0022ab9:	55                   	push   ebp
c0022aba:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0022abe:	55                   	push   ebp
c0022abf:	e8 8c db fd ff       	call   c0000650 <strcpy>
c0022ac4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0022ac7:	e8 b4 da fd ff       	call   c0000580 <strlen>
c0022acc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022ad1:	83 c4 10             	add    esp,0x10
c0022ad4:	31 d2                	xor    edx,edx
c0022ad6:	e9 84 00 00 00       	jmp    c0022b5f <Reg::findLineFromLoadedData(char*, char*, char*)+0x175>
c0022adb:	83 fe 40             	cmp    esi,0x40
c0022ade:	74 06                	je     c0022ae6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xfc>
c0022ae0:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022ae4:	eb 19                	jmp    c0022aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022ae6:	51                   	push   ecx
c0022ae7:	51                   	push   ecx
c0022ae8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022aec:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022af0:	50                   	push   eax
c0022af1:	e8 8a dc fd ff       	call   c0000780 <strcmp>
c0022af6:	83 c4 10             	add    esp,0x10
c0022af9:	85 c0                	test   eax,eax
c0022afb:	75 d7                	jne    c0022ad4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022afd:	eb e1                	jmp    c0022ae0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf6>
c0022aff:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c0022b02:	85 c9                	test   ecx,ecx
c0022b04:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022b09:	83 f9 3d             	cmp    ecx,0x3d
c0022b0c:	0f 94 c0             	sete   al
c0022b0f:	89 c5                	mov    ebp,eax
c0022b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b15:	09 e8                	or     eax,ebp
c0022b17:	a8 01                	test   al,0x1
c0022b19:	89 c5                	mov    ebp,eax
c0022b1b:	75 03                	jne    c0022b20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x136>
c0022b1d:	42                   	inc    edx
c0022b1e:	eb df                	jmp    c0022aff <Reg::findLineFromLoadedData(char*, char*, char*)+0x115>
c0022b20:	85 c9                	test   ecx,ecx
c0022b22:	74 43                	je     c0022b67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17d>
c0022b24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b28:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0022b2b:	52                   	push   edx
c0022b2c:	52                   	push   edx
c0022b2d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022b31:	50                   	push   eax
c0022b32:	53                   	push   ebx
c0022b33:	e8 48 dc fd ff       	call   c0000780 <strcmp>
c0022b38:	83 c4 10             	add    esp,0x10
c0022b3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b3f:	85 c0                	test   eax,eax
c0022b41:	75 91                	jne    c0022ad4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xea>
c0022b43:	50                   	push   eax
c0022b44:	42                   	inc    edx
c0022b45:	50                   	push   eax
c0022b46:	52                   	push   edx
c0022b47:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022b4e:	e8 fd da fd ff       	call   c0000650 <strcpy>
c0022b53:	83 c4 10             	add    esp,0x10
c0022b56:	eb 11                	jmp    c0022b69 <Reg::findLineFromLoadedData(char*, char*, char*)+0x17f>
c0022b58:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022b5c:	8d 50 01             	lea    edx,[eax+0x1]
c0022b5f:	47                   	inc    edi
c0022b60:	89 d0                	mov    eax,edx
c0022b62:	e9 df fe ff ff       	jmp    c0022a46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5c>
c0022b67:	31 ed                	xor    ebp,ebp
c0022b69:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b6f:	89 e8                	mov    eax,ebp
c0022b71:	5b                   	pop    ebx
c0022b72:	5e                   	pop    esi
c0022b73:	5f                   	pop    edi
c0022b74:	5d                   	pop    ebp
c0022b75:	c3                   	ret    

c0022b76 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022b76:	57                   	push   edi
c0022b77:	56                   	push   esi
c0022b78:	53                   	push   ebx
c0022b79:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b7f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022b86:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022b8d:	53                   	push   ebx
c0022b8e:	e8 ed d9 fd ff       	call   c0000580 <strlen>
c0022b93:	89 34 24             	mov    DWORD PTR [esp],esi
c0022b96:	89 c7                	mov    edi,eax
c0022b98:	e8 e3 d9 fd ff       	call   c0000580 <strlen>
c0022b9d:	83 c4 10             	add    esp,0x10
c0022ba0:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022ba4:	3d ff 00 00 00       	cmp    eax,0xff
c0022ba9:	0f 87 d3 00 00 00    	ja     c0022c82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022baf:	57                   	push   edi
c0022bb0:	57                   	push   edi
c0022bb1:	56                   	push   esi
c0022bb2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022bb6:	56                   	push   esi
c0022bb7:	e8 94 da fd ff       	call   c0000650 <strcpy>
c0022bbc:	58                   	pop    eax
c0022bbd:	5a                   	pop    edx
c0022bbe:	68 9f 2d 03 c0       	push   0xc0032d9f
c0022bc3:	56                   	push   esi
c0022bc4:	e8 a7 dc fd ff       	call   c0000870 <strcat>
c0022bc9:	59                   	pop    ecx
c0022bca:	5f                   	pop    edi
c0022bcb:	53                   	push   ebx
c0022bcc:	56                   	push   esi
c0022bcd:	e8 9e dc fd ff       	call   c0000870 <strcat>
c0022bd2:	58                   	pop    eax
c0022bd3:	5a                   	pop    edx
c0022bd4:	68 0d 2a 03 c0       	push   0xc0032a0d
c0022bd9:	56                   	push   esi
c0022bda:	e8 91 dc fd ff       	call   c0000870 <strcat>
c0022bdf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022be6:	e8 f8 37 ff ff       	call   c00163e3 <malloc>
c0022beb:	83 c4 0c             	add    esp,0xc
c0022bee:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022bf4:	56                   	push   esi
c0022bf5:	50                   	push   eax
c0022bf6:	89 c3                	mov    ebx,eax
c0022bf8:	e8 35 78 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0022bfd:	83 c4 10             	add    esp,0x10
c0022c00:	85 db                	test   ebx,ebx
c0022c02:	74 7e                	je     c0022c82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022c04:	51                   	push   ecx
c0022c05:	51                   	push   ecx
c0022c06:	6a 01                	push   0x1
c0022c08:	53                   	push   ebx
c0022c09:	e8 42 78 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0022c0e:	83 c4 10             	add    esp,0x10
c0022c11:	85 c0                	test   eax,eax
c0022c13:	74 08                	je     c0022c1d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022c15:	83 ec 0c             	sub    esp,0xc
c0022c18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c1a:	53                   	push   ebx
c0022c1b:	eb 5f                	jmp    c0022c7c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022c1d:	52                   	push   edx
c0022c1e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022c22:	50                   	push   eax
c0022c23:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022c27:	50                   	push   eax
c0022c28:	53                   	push   ebx
c0022c29:	e8 24 7b ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c0022c2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022c32:	83 c4 10             	add    esp,0x10
c0022c35:	89 c1                	mov    ecx,eax
c0022c37:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022c3b:	74 31                	je     c0022c6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c3d:	83 ec 0c             	sub    esp,0xc
c0022c40:	50                   	push   eax
c0022c41:	e8 9d 37 ff ff       	call   c00163e3 <malloc>
c0022c46:	89 c6                	mov    esi,eax
c0022c48:	58                   	pop    eax
c0022c49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c4b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022c4f:	52                   	push   edx
c0022c50:	56                   	push   esi
c0022c51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c59:	53                   	push   ebx
c0022c5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022c5d:	83 c4 20             	add    esp,0x20
c0022c60:	85 c0                	test   eax,eax
c0022c62:	75 0a                	jne    c0022c6e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c68:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022c6c:	74 18                	je     c0022c86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022c6e:	83 ec 0c             	sub    esp,0xc
c0022c71:	53                   	push   ebx
c0022c72:	e8 37 78 ff ff       	call   c001a4ae <File::close()>
c0022c77:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c7f:	83 c4 10             	add    esp,0x10
c0022c82:	31 c0                	xor    eax,eax
c0022c84:	eb 3b                	jmp    c0022cc1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022c86:	83 ec 0c             	sub    esp,0xc
c0022c89:	53                   	push   ebx
c0022c8a:	e8 1f 78 ff ff       	call   c001a4ae <File::close()>
c0022c8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c91:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c94:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c97:	83 c4 0c             	add    esp,0xc
c0022c9a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022ca1:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022ca8:	56                   	push   esi
c0022ca9:	e8 3c fd ff ff       	call   c00229ea <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022cae:	89 34 24             	mov    DWORD PTR [esp],esi
c0022cb1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022cb5:	e8 39 37 ff ff       	call   c00163f3 <free>
c0022cba:	83 c4 10             	add    esp,0x10
c0022cbd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022cc1:	81 c4 20 01 00 00    	add    esp,0x120
c0022cc7:	5b                   	pop    ebx
c0022cc8:	5e                   	pop    esi
c0022cc9:	5f                   	pop    edi
c0022cca:	c3                   	ret    

c0022ccb <Reg::getLine(char*, char*, char*)>:
c0022ccb:	57                   	push   edi
c0022ccc:	56                   	push   esi
c0022ccd:	53                   	push   ebx
c0022cce:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022cd2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022cd6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022cda:	57                   	push   edi
c0022cdb:	56                   	push   esi
c0022cdc:	53                   	push   ebx
c0022cdd:	68 12 2a 03 c0       	push   0xc0032a12
c0022ce2:	e8 8f fe ff ff       	call   c0022b76 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022ce7:	83 c4 10             	add    esp,0x10
c0022cea:	84 c0                	test   al,al
c0022cec:	75 10                	jne    c0022cfe <Reg::getLine(char*, char*, char*)+0x33>
c0022cee:	57                   	push   edi
c0022cef:	56                   	push   esi
c0022cf0:	53                   	push   ebx
c0022cf1:	68 37 2a 03 c0       	push   0xc0032a37
c0022cf6:	e8 7b fe ff ff       	call   c0022b76 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022cfb:	83 c4 10             	add    esp,0x10
c0022cfe:	5b                   	pop    ebx
c0022cff:	5e                   	pop    esi
c0022d00:	5f                   	pop    edi
c0022d01:	c3                   	ret    

c0022d02 <Reg::readInt(char*, char*, int*)>:
c0022d02:	55                   	push   ebp
c0022d03:	57                   	push   edi
c0022d04:	56                   	push   esi
c0022d05:	53                   	push   ebx
c0022d06:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022d0c:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022d10:	55                   	push   ebp
c0022d11:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022d18:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022d1f:	e8 a7 ff ff ff       	call   c0022ccb <Reg::getLine(char*, char*, char*)>
c0022d24:	83 c4 10             	add    esp,0x10
c0022d27:	84 c0                	test   al,al
c0022d29:	0f 84 b6 00 00 00    	je     c0022de5 <Reg::readInt(char*, char*, int*)+0xe3>
c0022d2f:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022d34:	83 fa 2b             	cmp    edx,0x2b
c0022d37:	74 0c                	je     c0022d45 <Reg::readInt(char*, char*, int*)+0x43>
c0022d39:	83 fa 2d             	cmp    edx,0x2d
c0022d3c:	75 0e                	jne    c0022d4c <Reg::readInt(char*, char*, int*)+0x4a>
c0022d3e:	ba 01 00 00 00       	mov    edx,0x1
c0022d43:	eb 0b                	jmp    c0022d50 <Reg::readInt(char*, char*, int*)+0x4e>
c0022d45:	ba 01 00 00 00       	mov    edx,0x1
c0022d4a:	eb 02                	jmp    c0022d4e <Reg::readInt(char*, char*, int*)+0x4c>
c0022d4c:	31 d2                	xor    edx,edx
c0022d4e:	31 c0                	xor    eax,eax
c0022d50:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022d55:	be 0a 00 00 00       	mov    esi,0xa
c0022d5a:	75 21                	jne    c0022d7d <Reg::readInt(char*, char*, int*)+0x7b>
c0022d5c:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022d61:	83 f9 78             	cmp    ecx,0x78
c0022d64:	75 0a                	jne    c0022d70 <Reg::readInt(char*, char*, int*)+0x6e>
c0022d66:	83 c2 02             	add    edx,0x2
c0022d69:	be 10 00 00 00       	mov    esi,0x10
c0022d6e:	eb 0d                	jmp    c0022d7d <Reg::readInt(char*, char*, int*)+0x7b>
c0022d70:	83 f9 62             	cmp    ecx,0x62
c0022d73:	75 08                	jne    c0022d7d <Reg::readInt(char*, char*, int*)+0x7b>
c0022d75:	83 c2 02             	add    edx,0x2
c0022d78:	be 02 00 00 00       	mov    esi,0x2
c0022d7d:	01 d5                	add    ebp,edx
c0022d7f:	31 d2                	xor    edx,edx
c0022d81:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022d85:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022d89:	85 c9                	test   ecx,ecx
c0022d8b:	0f 94 c3             	sete   bl
c0022d8e:	83 f9 0d             	cmp    ecx,0xd
c0022d91:	89 df                	mov    edi,ebx
c0022d93:	0f 94 c3             	sete   bl
c0022d96:	09 df                	or     edi,ebx
c0022d98:	89 fb                	mov    ebx,edi
c0022d9a:	83 e7 01             	and    edi,0x1
c0022d9d:	75 35                	jne    c0022dd4 <Reg::readInt(char*, char*, int*)+0xd2>
c0022d9f:	0f af d6             	imul   edx,esi
c0022da2:	83 fe 10             	cmp    esi,0x10
c0022da5:	75 26                	jne    c0022dcd <Reg::readInt(char*, char*, int*)+0xcb>
c0022da7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022dab:	83 ef 41             	sub    edi,0x41
c0022dae:	89 fb                	mov    ebx,edi
c0022db0:	80 fb 05             	cmp    bl,0x5
c0022db3:	77 06                	ja     c0022dbb <Reg::readInt(char*, char*, int*)+0xb9>
c0022db5:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022db9:	eb 16                	jmp    c0022dd1 <Reg::readInt(char*, char*, int*)+0xcf>
c0022dbb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022dbf:	83 eb 61             	sub    ebx,0x61
c0022dc2:	80 fb 05             	cmp    bl,0x5
c0022dc5:	77 06                	ja     c0022dcd <Reg::readInt(char*, char*, int*)+0xcb>
c0022dc7:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022dcb:	eb 04                	jmp    c0022dd1 <Reg::readInt(char*, char*, int*)+0xcf>
c0022dcd:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022dd1:	45                   	inc    ebp
c0022dd2:	eb ad                	jmp    c0022d81 <Reg::readInt(char*, char*, int*)+0x7f>
c0022dd4:	84 c0                	test   al,al
c0022dd6:	74 02                	je     c0022dda <Reg::readInt(char*, char*, int*)+0xd8>
c0022dd8:	f7 da                	neg    edx
c0022dda:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022de1:	89 10                	mov    DWORD PTR [eax],edx
c0022de3:	88 d8                	mov    al,bl
c0022de5:	81 c4 ec 00 00 00    	add    esp,0xec
c0022deb:	5b                   	pop    ebx
c0022dec:	5e                   	pop    esi
c0022ded:	5f                   	pop    edi
c0022dee:	5d                   	pop    ebp
c0022def:	c3                   	ret    

c0022df0 <Reg::readString(char*, char*, char*, int)>:
c0022df0:	57                   	push   edi
c0022df1:	56                   	push   esi
c0022df2:	53                   	push   ebx
c0022df3:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022df9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022dfd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022e04:	57                   	push   edi
c0022e05:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022e0c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022e13:	e8 b3 fe ff ff       	call   c0022ccb <Reg::getLine(char*, char*, char*)>
c0022e18:	83 c4 10             	add    esp,0x10
c0022e1b:	84 c0                	test   al,al
c0022e1d:	89 c6                	mov    esi,eax
c0022e1f:	74 44                	je     c0022e65 <Reg::readString(char*, char*, char*, int)+0x75>
c0022e21:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022e28:	31 c0                	xor    eax,eax
c0022e2a:	4a                   	dec    edx
c0022e2b:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022e2e:	84 c9                	test   cl,cl
c0022e30:	74 0f                	je     c0022e41 <Reg::readString(char*, char*, char*, int)+0x51>
c0022e32:	39 c2                	cmp    edx,eax
c0022e34:	7e 0b                	jle    c0022e41 <Reg::readString(char*, char*, char*, int)+0x51>
c0022e36:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022e39:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022e3e:	40                   	inc    eax
c0022e3f:	eb ea                	jmp    c0022e2b <Reg::readString(char*, char*, char*, int)+0x3b>
c0022e41:	83 ec 0c             	sub    esp,0xc
c0022e44:	53                   	push   ebx
c0022e45:	e8 36 d7 fd ff       	call   c0000580 <strlen>
c0022e4a:	83 c4 10             	add    esp,0x10
c0022e4d:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022e52:	75 11                	jne    c0022e65 <Reg::readString(char*, char*, char*, int)+0x75>
c0022e54:	83 ec 0c             	sub    esp,0xc
c0022e57:	53                   	push   ebx
c0022e58:	e8 23 d7 fd ff       	call   c0000580 <strlen>
c0022e5d:	83 c4 10             	add    esp,0x10
c0022e60:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022e65:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022e6b:	89 f0                	mov    eax,esi
c0022e6d:	5b                   	pop    ebx
c0022e6e:	5e                   	pop    esi
c0022e6f:	5f                   	pop    edi
c0022e70:	c3                   	ret    

c0022e71 <Reg::readBool(char*, char*, bool*)>:
c0022e71:	83 ec 20             	sub    esp,0x20
c0022e74:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022e78:	50                   	push   eax
c0022e79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e81:	e8 7c fe ff ff       	call   c0022d02 <Reg::readInt(char*, char*, int*)>
c0022e86:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022e8a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022e8f:	0f 95 02             	setne  BYTE PTR [edx]
c0022e92:	83 c4 2c             	add    esp,0x2c
c0022e95:	c3                   	ret    

c0022e96 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022e96:	53                   	push   ebx
c0022e97:	83 ec 1c             	sub    esp,0x1c
c0022e9a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022e9e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022ea2:	50                   	push   eax
c0022ea3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022eab:	e8 c1 ff ff ff       	call   c0022e71 <Reg::readBool(char*, char*, bool*)>
c0022eb0:	83 c4 10             	add    esp,0x10
c0022eb3:	84 c0                	test   al,al
c0022eb5:	74 04                	je     c0022ebb <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022eb7:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022ebb:	83 c4 18             	add    esp,0x18
c0022ebe:	88 d8                	mov    al,bl
c0022ec0:	5b                   	pop    ebx
c0022ec1:	c3                   	ret    

c0022ec2 <Reg::readIntWithDefault(char*, char*, int)>:
c0022ec2:	53                   	push   ebx
c0022ec3:	83 ec 1c             	sub    esp,0x1c
c0022ec6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022eca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022ece:	50                   	push   eax
c0022ecf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ed3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ed7:	e8 26 fe ff ff       	call   c0022d02 <Reg::readInt(char*, char*, int*)>
c0022edc:	83 c4 10             	add    esp,0x10
c0022edf:	84 c0                	test   al,al
c0022ee1:	74 04                	je     c0022ee7 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022ee3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022ee7:	83 c4 18             	add    esp,0x18
c0022eea:	89 d8                	mov    eax,ebx
c0022eec:	5b                   	pop    ebx
c0022eed:	c3                   	ret    

c0022eee <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022eee:	57                   	push   edi
c0022eef:	56                   	push   esi
c0022ef0:	53                   	push   ebx
c0022ef1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022ef5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ef9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022efd:	56                   	push   esi
c0022efe:	57                   	push   edi
c0022eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f07:	e8 e4 fe ff ff       	call   c0022df0 <Reg::readString(char*, char*, char*, int)>
c0022f0c:	83 c4 10             	add    esp,0x10
c0022f0f:	84 c0                	test   al,al
c0022f11:	75 16                	jne    c0022f29 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0022f13:	50                   	push   eax
c0022f14:	56                   	push   esi
c0022f15:	6a 00                	push   0x0
c0022f17:	57                   	push   edi
c0022f18:	e8 d3 d5 fd ff       	call   c00004f0 <memset>
c0022f1d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0022f20:	89 de                	mov    esi,ebx
c0022f22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022f24:	83 c4 10             	add    esp,0x10
c0022f27:	89 df                	mov    edi,ebx
c0022f29:	5b                   	pop    ebx
c0022f2a:	89 f8                	mov    eax,edi
c0022f2c:	5e                   	pop    esi
c0022f2d:	5f                   	pop    edi
c0022f2e:	c3                   	ret    

c0022f2f <SysEject(regs*)>:
c0022f2f:	83 ec 0c             	sub    esp,0xc
c0022f32:	83 ca ff             	or     edx,0xffffffff
c0022f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f39:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022f3c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0022f41:	83 e9 41             	sub    ecx,0x41
c0022f44:	83 f9 19             	cmp    ecx,0x19
c0022f47:	77 18                	ja     c0022f61 <SysEject(regs*)+0x32>
c0022f49:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0022f50:	85 c9                	test   ecx,ecx
c0022f52:	74 0d                	je     c0022f61 <SysEject(regs*)+0x32>
c0022f54:	83 ec 0c             	sub    esp,0xc
c0022f57:	51                   	push   ecx
c0022f58:	e8 df 96 ff ff       	call   c001c63c <LogicalDisk::eject()>
c0022f5d:	83 c4 10             	add    esp,0x10
c0022f60:	99                   	cdq    
c0022f61:	83 c4 0c             	add    esp,0xc
c0022f64:	c3                   	ret    

c0022f65 <SysExit(regs*)>:
c0022f65:	83 ec 18             	sub    esp,0x18
c0022f68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f6c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f6f:	e8 9c 29 00 00       	call   c0025910 <terminateTask(int)>
c0022f74:	83 c8 ff             	or     eax,0xffffffff
c0022f77:	83 c4 1c             	add    esp,0x1c
c0022f7a:	89 c2                	mov    edx,eax
c0022f7c:	c3                   	ret    

c0022f7d <SysGetCwd(regs*)>:
c0022f7d:	83 ec 10             	sub    esp,0x10
c0022f80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f84:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0022f87:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f8f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022f92:	e8 3b 71 ff ff       	call   c001a0d2 <Fs::getcwd(Process*, char*, int)>
c0022f97:	83 c4 1c             	add    esp,0x1c
c0022f9a:	99                   	cdq    
c0022f9b:	c3                   	ret    

c0022f9c <SysGetPID(regs*)>:
c0022f9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022fa1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022fa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022fa6:	99                   	cdq    
c0022fa7:	c3                   	ret    

c0022fa8 <SysGetRAMData(regs*)>:
c0022fa8:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0022fb2:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0022fb8:	99                   	cdq    
c0022fb9:	f7 f9                	idiv   ecx
c0022fbb:	c1 e0 18             	shl    eax,0x18
c0022fbe:	09 c8                	or     eax,ecx
c0022fc0:	99                   	cdq    
c0022fc1:	c3                   	ret    

c0022fc2 <SysGetVGAPtr(regs*)>:
c0022fc2:	55                   	push   ebp
c0022fc3:	57                   	push   edi
c0022fc4:	56                   	push   esi
c0022fc5:	53                   	push   ebx
c0022fc6:	83 ec 18             	sub    esp,0x18
c0022fc9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fcd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022fd0:	e8 07 24 00 00       	call   c00253dc <Thr::processFromPID(int)>
c0022fd5:	83 c4 10             	add    esp,0x10
c0022fd8:	89 c1                	mov    ecx,eax
c0022fda:	b8 01 00 00 00       	mov    eax,0x1
c0022fdf:	85 c9                	test   ecx,ecx
c0022fe1:	74 57                	je     c002303a <SysGetVGAPtr(regs*)+0x78>
c0022fe3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0022fe7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0022fed:	74 0c                	je     c0022ffb <SysGetVGAPtr(regs*)+0x39>
c0022fef:	83 ec 0c             	sub    esp,0xc
c0022ff2:	55                   	push   ebp
c0022ff3:	e8 87 40 ff ff       	call   c001707f <setActiveTerminal(VgaText*)>
c0022ff8:	83 c4 10             	add    esp,0x10
c0022ffb:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0022ffe:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0023003:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023006:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0023008:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002300b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002300e:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023014:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023017:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002301a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023020:	50                   	push   eax
c0023021:	50                   	push   eax
c0023022:	68 52 2a 03 c0       	push   0xc0032a52
c0023027:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002302a:	05 a8 0f 00 00       	add    eax,0xfa8
c002302f:	50                   	push   eax
c0023030:	e8 1b d6 fd ff       	call   c0000650 <strcpy>
c0023035:	83 c4 10             	add    esp,0x10
c0023038:	31 c0                	xor    eax,eax
c002303a:	83 c4 0c             	add    esp,0xc
c002303d:	31 d2                	xor    edx,edx
c002303f:	5b                   	pop    ebx
c0023040:	5e                   	pop    esi
c0023041:	5f                   	pop    edi
c0023042:	5d                   	pop    ebp
c0023043:	c3                   	ret    

c0023044 <SysKill(regs*)>:
c0023044:	53                   	push   ebx
c0023045:	83 ec 08             	sub    esp,0x8
c0023048:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002304c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023050:	75 16                	jne    c0023068 <SysKill(regs*)+0x24>
c0023052:	83 ec 0c             	sub    esp,0xc
c0023055:	68 5c 2a 03 c0       	push   0xc0032a5c
c002305a:	e8 43 d1 ff ff       	call   c00201a2 <KePanic(char const*)>
c002305f:	83 c4 10             	add    esp,0x10
c0023062:	e9 89 00 00 00       	jmp    c00230f0 <SysKill(regs*)+0xac>
c0023067:	90                   	nop
c0023068:	83 ec 0c             	sub    esp,0xc
c002306b:	68 ec 01 04 c0       	push   0xc00401ec
c0023070:	e8 77 bb 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023075:	8d 76 00             	lea    esi,[esi+0x0]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	85 c0                	test   eax,eax
c002307d:	74 19                	je     c0023098 <SysKill(regs*)+0x54>
c002307f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023082:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023085:	39 0a                	cmp    DWORD PTR [edx],ecx
c0023087:	74 33                	je     c00230bc <SysKill(regs*)+0x78>
c0023089:	52                   	push   edx
c002308a:	52                   	push   edx
c002308b:	50                   	push   eax
c002308c:	68 ec 01 04 c0       	push   0xc00401ec
c0023091:	e8 76 be 00 00       	call   c002ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0023096:	eb e0                	jmp    c0023078 <SysKill(regs*)+0x34>
c0023098:	83 ec 0c             	sub    esp,0xc
c002309b:	68 e0 01 04 c0       	push   0xc00401e0
c00230a0:	e8 47 bb 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00230a5:	8d 76 00             	lea    esi,[esi+0x0]
c00230a8:	83 c4 10             	add    esp,0x10
c00230ab:	85 c0                	test   eax,eax
c00230ad:	74 41                	je     c00230f0 <SysKill(regs*)+0xac>
c00230af:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00230b2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00230b5:	39 0a                	cmp    DWORD PTR [edx],ecx
c00230b7:	75 27                	jne    c00230e0 <SysKill(regs*)+0x9c>
c00230b9:	8d 76 00             	lea    esi,[esi+0x0]
c00230bc:	51                   	push   ecx
c00230bd:	51                   	push   ecx
c00230be:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00230c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230c6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230c9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00230cf:	e8 80 d9 ff ff       	call   c0020a54 <KeRaiseSignal(SigHandlerBlock*, int)>
c00230d4:	83 c4 10             	add    esp,0x10
c00230d7:	31 c0                	xor    eax,eax
c00230d9:	31 d2                	xor    edx,edx
c00230db:	eb 1b                	jmp    c00230f8 <SysKill(regs*)+0xb4>
c00230dd:	8d 76 00             	lea    esi,[esi+0x0]
c00230e0:	52                   	push   edx
c00230e1:	52                   	push   edx
c00230e2:	50                   	push   eax
c00230e3:	68 e0 01 04 c0       	push   0xc00401e0
c00230e8:	e8 1f be 00 00       	call   c002ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00230ed:	eb b9                	jmp    c00230a8 <SysKill(regs*)+0x64>
c00230ef:	90                   	nop
c00230f0:	83 c8 ff             	or     eax,0xffffffff
c00230f3:	89 c2                	mov    edx,eax
c00230f5:	8d 76 00             	lea    esi,[esi+0x0]
c00230f8:	83 c4 08             	add    esp,0x8
c00230fb:	5b                   	pop    ebx
c00230fc:	c3                   	ret    

c00230fd <SysLoadDLL(regs*)>:
c00230fd:	56                   	push   esi
c00230fe:	31 d2                	xor    edx,edx
c0023100:	53                   	push   ebx
c0023101:	b8 01 00 00 00       	mov    eax,0x1
c0023106:	51                   	push   ecx
c0023107:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002310b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c002310f:	0f 84 8c 00 00 00    	je     c00231a1 <SysLoadDLL(regs*)+0xa4>
c0023115:	83 ec 0c             	sub    esp,0xc
c0023118:	68 14 01 00 00       	push   0x114
c002311d:	e8 c1 32 ff ff       	call   c00163e3 <malloc>
c0023122:	83 c4 0c             	add    esp,0xc
c0023125:	89 c3                	mov    ebx,eax
c0023127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002312c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002312f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023132:	53                   	push   ebx
c0023133:	e8 fa 72 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0023138:	83 c4 10             	add    esp,0x10
c002313b:	31 d2                	xor    edx,edx
c002313d:	85 db                	test   ebx,ebx
c002313f:	b8 02 00 00 00       	mov    eax,0x2
c0023144:	74 5b                	je     c00231a1 <SysLoadDLL(regs*)+0xa4>
c0023146:	83 ec 0c             	sub    esp,0xc
c0023149:	53                   	push   ebx
c002314a:	e8 c5 75 ff ff       	call   c001a714 <File::exists()>
c002314f:	83 c4 10             	add    esp,0x10
c0023152:	84 c0                	test   al,al
c0023154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023156:	75 11                	jne    c0023169 <SysLoadDLL(regs*)+0x6c>
c0023158:	83 ec 0c             	sub    esp,0xc
c002315b:	53                   	push   ebx
c002315c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002315f:	83 c4 10             	add    esp,0x10
c0023162:	b8 03 00 00 00       	mov    eax,0x3
c0023167:	eb 36                	jmp    c002319f <SysLoadDLL(regs*)+0xa2>
c0023169:	83 ec 0c             	sub    esp,0xc
c002316c:	53                   	push   ebx
c002316d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023170:	58                   	pop    eax
c0023171:	5a                   	pop    edx
c0023172:	6a 00                	push   0x0
c0023174:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023177:	e8 8f 15 00 00       	call   c002470b <Thr::loadDLL(char const*, bool)>
c002317c:	83 c4 10             	add    esp,0x10
c002317f:	31 d2                	xor    edx,edx
c0023181:	89 c1                	mov    ecx,eax
c0023183:	b8 04 00 00 00       	mov    eax,0x4
c0023188:	85 c9                	test   ecx,ecx
c002318a:	74 15                	je     c00231a1 <SysLoadDLL(regs*)+0xa4>
c002318c:	53                   	push   ebx
c002318d:	53                   	push   ebx
c002318e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023194:	51                   	push   ecx
c0023195:	e8 d2 17 00 00       	call   c002496c <Thr::executeDLL(unsigned long, void*)>
c002319a:	83 c4 10             	add    esp,0x10
c002319d:	31 c0                	xor    eax,eax
c002319f:	31 d2                	xor    edx,edx
c00231a1:	59                   	pop    ecx
c00231a2:	5b                   	pop    ebx
c00231a3:	5e                   	pop    esi
c00231a4:	c3                   	ret    

c00231a5 <SysRead(regs*)>:
c00231a5:	57                   	push   edi
c00231a6:	56                   	push   esi
c00231a7:	53                   	push   ebx
c00231a8:	83 ec 10             	sub    esp,0x10
c00231ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00231af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00231b2:	83 f8 02             	cmp    eax,0x2
c00231b5:	77 10                	ja     c00231c7 <SysRead(regs*)+0x22>
c00231b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231bf:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00231c5:	eb 0e                	jmp    c00231d5 <SysRead(regs*)+0x30>
c00231c7:	83 ec 0c             	sub    esp,0xc
c00231ca:	50                   	push   eax
c00231cb:	e8 db 4b ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c00231d0:	83 c4 10             	add    esp,0x10
c00231d3:	89 c1                	mov    ecx,eax
c00231d5:	83 c8 ff             	or     eax,0xffffffff
c00231d8:	85 c9                	test   ecx,ecx
c00231da:	89 c2                	mov    edx,eax
c00231dc:	74 28                	je     c0023206 <SysRead(regs*)+0x61>
c00231de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00231e6:	83 ec 0c             	sub    esp,0xc
c00231e9:	31 ff                	xor    edi,edi
c00231eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c00231ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00231f1:	52                   	push   edx
c00231f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00231f5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00231f8:	57                   	push   edi
c00231f9:	56                   	push   esi
c00231fa:	51                   	push   ecx
c00231fb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00231fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023202:	83 c4 20             	add    esp,0x20
c0023205:	99                   	cdq    
c0023206:	83 c4 10             	add    esp,0x10
c0023209:	5b                   	pop    ebx
c002320a:	5e                   	pop    esi
c002320b:	5f                   	pop    edi
c002320c:	c3                   	ret    

c002320d <SysRegisterSignal(regs*)>:
c002320d:	83 ec 18             	sub    esp,0x18
c0023210:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023214:	6a 00                	push   0x0
c0023216:	6a 00                	push   0x0
c0023218:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002321b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c002321e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023226:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c002322c:	e8 ed d7 ff ff       	call   c0020a1e <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023231:	83 c4 2c             	add    esp,0x2c
c0023234:	99                   	cdq    
c0023235:	c3                   	ret    

c0023236 <SysRegistryGetTypeFromPath(regs*)>:
c0023236:	57                   	push   edi
c0023237:	56                   	push   esi
c0023238:	53                   	push   ebx
c0023239:	81 ec 38 01 00 00    	sub    esp,0x138
c002323f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0023246:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023249:	68 7d 2a 03 c0       	push   0xc0032a7d
c002324e:	e8 c7 5f ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0023253:	5a                   	pop    edx
c0023254:	59                   	pop    ecx
c0023255:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023258:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002325b:	e8 34 f6 ff ff       	call   c0022894 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023260:	5f                   	pop    edi
c0023261:	5a                   	pop    edx
c0023262:	89 c6                	mov    esi,eax
c0023264:	50                   	push   eax
c0023265:	68 9d 2a 03 c0       	push   0xc0032a9d
c002326a:	e8 ab 5f ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002326f:	83 c4 10             	add    esp,0x10
c0023272:	85 f6                	test   esi,esi
c0023274:	74 28                	je     c002329e <SysRegistryGetTypeFromPath(regs*)+0x68>
c0023276:	50                   	push   eax
c0023277:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002327b:	57                   	push   edi
c002327c:	56                   	push   esi
c002327d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023280:	e8 f4 f1 ff ff       	call   c0022479 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023285:	83 c4 0c             	add    esp,0xc
c0023288:	57                   	push   edi
c0023289:	50                   	push   eax
c002328a:	89 c3                	mov    ebx,eax
c002328c:	68 a5 2a 03 c0       	push   0xc0032aa5
c0023291:	e8 84 5f ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0023296:	89 d8                	mov    eax,ebx
c0023298:	83 c4 10             	add    esp,0x10
c002329b:	99                   	cdq    
c002329c:	eb 05                	jmp    c00232a3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c002329e:	83 c8 ff             	or     eax,0xffffffff
c00232a1:	89 c2                	mov    edx,eax
c00232a3:	81 c4 30 01 00 00    	add    esp,0x130
c00232a9:	5b                   	pop    ebx
c00232aa:	5e                   	pop    esi
c00232ab:	5f                   	pop    edi
c00232ac:	c3                   	ret    

c00232ad <SysRegistryReadExtent(regs*)>:
c00232ad:	83 ec 1c             	sub    esp,0x1c
c00232b0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00232b4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00232b7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00232ba:	85 c0                	test   eax,eax
c00232bc:	79 1f                	jns    c00232dd <SysRegistryReadExtent(regs*)+0x30>
c00232be:	52                   	push   edx
c00232bf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00232c4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00232c8:	52                   	push   edx
c00232c9:	50                   	push   eax
c00232ca:	51                   	push   ecx
c00232cb:	e8 9b f0 ff ff       	call   c002236b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00232d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232d8:	83 c4 10             	add    esp,0x10
c00232db:	eb 14                	jmp    c00232f1 <SysRegistryReadExtent(regs*)+0x44>
c00232dd:	83 ec 04             	sub    esp,0x4
c00232e0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00232e3:	50                   	push   eax
c00232e4:	51                   	push   ecx
c00232e5:	e8 1f eb ff ff       	call   c0021e09 <CmGetString(Reghive_Tag*, int, char*)>
c00232ea:	83 c4 10             	add    esp,0x10
c00232ed:	31 c0                	xor    eax,eax
c00232ef:	31 d2                	xor    edx,edx
c00232f1:	83 c4 1c             	add    esp,0x1c
c00232f4:	c3                   	ret    

c00232f5 <SysRegistryPathToExtentLookup(regs*)>:
c00232f5:	53                   	push   ebx
c00232f6:	83 ec 10             	sub    esp,0x10
c00232f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023300:	68 bb 2a 03 c0       	push   0xc0032abb
c0023305:	e8 10 5f ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002330a:	58                   	pop    eax
c002330b:	5a                   	pop    edx
c002330c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002330f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023312:	e8 7d f5 ff ff       	call   c0022894 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023317:	83 c4 18             	add    esp,0x18
c002331a:	5b                   	pop    ebx
c002331b:	99                   	cdq    
c002331c:	c3                   	ret    

c002331d <SysRegistryEnterDirectory(regs*)>:
c002331d:	53                   	push   ebx
c002331e:	83 ec 10             	sub    esp,0x10
c0023321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023325:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023328:	68 de 2a 03 c0       	push   0xc0032ade
c002332d:	e8 e8 5e ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0023332:	58                   	pop    eax
c0023333:	5a                   	pop    edx
c0023334:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023337:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002333a:	e8 41 eb ff ff       	call   c0021e80 <CmEnterDirectory(Reghive_Tag*, int)>
c002333f:	83 c4 18             	add    esp,0x18
c0023342:	5b                   	pop    ebx
c0023343:	99                   	cdq    
c0023344:	c3                   	ret    

c0023345 <SysRegistryGetNext(regs*)>:
c0023345:	53                   	push   ebx
c0023346:	83 ec 10             	sub    esp,0x10
c0023349:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002334d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023350:	68 fc 2a 03 c0       	push   0xc0032afc
c0023355:	e8 c0 5e ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002335a:	58                   	pop    eax
c002335b:	5a                   	pop    edx
c002335c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002335f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023362:	e8 58 eb ff ff       	call   c0021ebf <CmGetNext(Reghive_Tag*, int)>
c0023367:	83 c4 18             	add    esp,0x18
c002336a:	5b                   	pop    ebx
c002336b:	99                   	cdq    
c002336c:	c3                   	ret    

c002336d <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c002336d:	57                   	push   edi
c002336e:	56                   	push   esi
c002336f:	53                   	push   ebx
c0023370:	81 ec 34 01 00 00    	sub    esp,0x134
c0023376:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c002337d:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023381:	57                   	push   edi
c0023382:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023385:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023388:	e8 ec f0 ff ff       	call   c0022479 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c002338d:	89 c3                	mov    ebx,eax
c002338f:	58                   	pop    eax
c0023390:	5a                   	pop    edx
c0023391:	57                   	push   edi
c0023392:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023395:	e8 b6 d2 fd ff       	call   c0000650 <strcpy>
c002339a:	81 c4 40 01 00 00    	add    esp,0x140
c00233a0:	89 d8                	mov    eax,ebx
c00233a2:	5b                   	pop    ebx
c00233a3:	99                   	cdq    
c00233a4:	5e                   	pop    esi
c00233a5:	5f                   	pop    edi
c00233a6:	c3                   	ret    

c00233a7 <SysRegistryOpen(regs*)>:
c00233a7:	83 ec 18             	sub    esp,0x18
c00233aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233ae:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00233b1:	e8 e3 e8 ff ff       	call   c0021c99 <CmOpen(char const*)>
c00233b6:	83 c4 1c             	add    esp,0x1c
c00233b9:	99                   	cdq    
c00233ba:	c3                   	ret    

c00233bb <SysRegistryClose(regs*)>:
c00233bb:	83 ec 18             	sub    esp,0x18
c00233be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233c2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00233c5:	e8 ed e9 ff ff       	call   c0021db7 <CmClose(Reghive_Tag*)>
c00233ca:	31 c0                	xor    eax,eax
c00233cc:	31 d2                	xor    edx,edx
c00233ce:	83 c4 1c             	add    esp,0x1c
c00233d1:	c3                   	ret    

c00233d2 <SysSbrk(regs*)>:
c00233d2:	56                   	push   esi
c00233d3:	53                   	push   ebx
c00233d4:	50                   	push   eax
c00233d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00233de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233e1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00233e4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00233ea:	85 db                	test   ebx,ebx
c00233ec:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00233ef:	74 02                	je     c00233f3 <SysSbrk(regs*)+0x21>
c00233f1:	79 06                	jns    c00233f9 <SysSbrk(regs*)+0x27>
c00233f3:	89 f0                	mov    eax,esi
c00233f5:	31 d2                	xor    edx,edx
c00233f7:	eb 2a                	jmp    c0023423 <SysSbrk(regs*)+0x51>
c00233f9:	83 c8 ff             	or     eax,0xffffffff
c00233fc:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023402:	89 c2                	mov    edx,eax
c0023404:	77 1d                	ja     c0023423 <SysSbrk(regs*)+0x51>
c0023406:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c002340c:	50                   	push   eax
c002340d:	68 07 0c 00 00       	push   0xc07
c0023412:	c1 ea 0c             	shr    edx,0xc
c0023415:	52                   	push   edx
c0023416:	51                   	push   ecx
c0023417:	e8 fa 52 ff ff       	call   c0018716 <VAS::allocatePages(int, int)>
c002341c:	89 f0                	mov    eax,esi
c002341e:	31 d2                	xor    edx,edx
c0023420:	83 c4 10             	add    esp,0x10
c0023423:	59                   	pop    ecx
c0023424:	5b                   	pop    ebx
c0023425:	5e                   	pop    esi
c0023426:	c3                   	ret    

c0023427 <SysSetCwd(regs*)>:
c0023427:	83 ec 14             	sub    esp,0x14
c002342a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002342e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023431:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023436:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023439:	e8 75 73 ff ff       	call   c001a7b3 <Fs::setcwd(Process*, char*)>
c002343e:	83 c4 1c             	add    esp,0x1c
c0023441:	99                   	cdq    
c0023442:	c3                   	ret    

c0023443 <SysSetTime(regs*)>:
c0023443:	55                   	push   ebp
c0023444:	31 c9                	xor    ecx,ecx
c0023446:	57                   	push   edi
c0023447:	bd 0c 00 00 00       	mov    ebp,0xc
c002344c:	56                   	push   esi
c002344d:	53                   	push   ebx
c002344e:	31 db                	xor    ebx,ebx
c0023450:	83 ec 10             	sub    esp,0x10
c0023453:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023457:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c002345a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c002345d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023460:	89 c2                	mov    edx,eax
c0023462:	c1 e8 05             	shr    eax,0x5
c0023465:	83 e2 1f             	and    edx,0x1f
c0023468:	42                   	inc    edx
c0023469:	81 ef 6c 07 00 00    	sub    edi,0x76c
c002346f:	c1 e7 10             	shl    edi,0x10
c0023472:	88 d1                	mov    cl,dl
c0023474:	31 d2                	xor    edx,edx
c0023476:	f7 f5                	div    ebp
c0023478:	89 dd                	mov    ebp,ebx
c002347a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023480:	88 d5                	mov    ch,dl
c0023482:	31 d2                	xor    edx,edx
c0023484:	0f b7 c1             	movzx  eax,cx
c0023487:	09 f8                	or     eax,edi
c0023489:	bf 3c 00 00 00       	mov    edi,0x3c
c002348e:	89 c1                	mov    ecx,eax
c0023490:	89 f0                	mov    eax,esi
c0023492:	f7 f7                	div    edi
c0023494:	c1 e2 10             	shl    edx,0x10
c0023497:	09 d5                	or     ebp,edx
c0023499:	31 d2                	xor    edx,edx
c002349b:	f7 f7                	div    edi
c002349d:	89 eb                	mov    ebx,ebp
c002349f:	bf 10 0e 00 00       	mov    edi,0xe10
c00234a4:	89 f0                	mov    eax,esi
c00234a6:	88 d7                	mov    bh,dl
c00234a8:	31 d2                	xor    edx,edx
c00234aa:	f7 f7                	div    edi
c00234ac:	bf 18 00 00 00       	mov    edi,0x18
c00234b1:	31 d2                	xor    edx,edx
c00234b3:	f7 f7                	div    edi
c00234b5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00234ba:	88 d3                	mov    bl,dl
c00234bc:	53                   	push   ebx
c00234bd:	51                   	push   ecx
c00234be:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00234c4:	e8 fb 7a ff ff       	call   c001afc4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00234c9:	83 c4 1c             	add    esp,0x1c
c00234cc:	31 d2                	xor    edx,edx
c00234ce:	5b                   	pop    ebx
c00234cf:	5e                   	pop    esi
c00234d0:	83 f0 01             	xor    eax,0x1
c00234d3:	5f                   	pop    edi
c00234d4:	0f b6 c0             	movzx  eax,al
c00234d7:	5d                   	pop    ebp
c00234d8:	c3                   	ret    

c00234d9 <SysSymlink(regs*)>:
c00234d9:	56                   	push   esi
c00234da:	83 c8 ff             	or     eax,0xffffffff
c00234dd:	53                   	push   ebx
c00234de:	89 c2                	mov    edx,eax
c00234e0:	81 ec 34 02 00 00    	sub    esp,0x234
c00234e6:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00234ed:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00234f1:	74 50                	je     c0023543 <SysSymlink(regs*)+0x6a>
c00234f3:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00234f6:	85 c9                	test   ecx,ecx
c00234f8:	74 49                	je     c0023543 <SysSymlink(regs*)+0x6a>
c00234fa:	6a 01                	push   0x1
c00234fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023501:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023504:	05 0c 01 00 00       	add    eax,0x10c
c0023509:	50                   	push   eax
c002350a:	51                   	push   ecx
c002350b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002350f:	56                   	push   esi
c0023510:	e8 11 6c ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023515:	6a 01                	push   0x1
c0023517:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002351c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002351f:	05 0c 01 00 00       	add    eax,0x10c
c0023524:	50                   	push   eax
c0023525:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023528:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c002352f:	53                   	push   ebx
c0023530:	e8 f1 6b ff ff       	call   c001a126 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023535:	83 c4 18             	add    esp,0x18
c0023538:	56                   	push   esi
c0023539:	53                   	push   ebx
c002353a:	e8 f6 67 ff ff       	call   c0019d35 <KeCreateSymlink(char const*, char const*)>
c002353f:	83 c4 10             	add    esp,0x10
c0023542:	99                   	cdq    
c0023543:	81 c4 34 02 00 00    	add    esp,0x234
c0023549:	5b                   	pop    ebx
c002354a:	5e                   	pop    esi
c002354b:	c3                   	ret    

c002354c <SysTimezone(regs*)>:
c002354c:	53                   	push   ebx
c002354d:	83 ec 08             	sub    esp,0x8
c0023550:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023554:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0023558:	75 17                	jne    c0023571 <SysTimezone(regs*)+0x25>
c002355a:	83 ec 0c             	sub    esp,0xc
c002355d:	68 13 2b 03 c0       	push   0xc0032b13
c0023562:	e8 b3 5c ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0023567:	83 c8 ff             	or     eax,0xffffffff
c002356a:	83 c4 10             	add    esp,0x10
c002356d:	89 c2                	mov    edx,eax
c002356f:	eb 20                	jmp    c0023591 <SysTimezone(regs*)+0x45>
c0023571:	83 ec 0c             	sub    esp,0xc
c0023574:	68 28 2b 03 c0       	push   0xc0032b28
c0023579:	e8 9c 5c ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002357e:	58                   	pop    eax
c002357f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023582:	e8 a1 77 ff ff       	call   c001ad28 <User::loadClockSettings(int)>
c0023587:	83 c4 10             	add    esp,0x10
c002358a:	b8 01 00 00 00       	mov    eax,0x1
c002358f:	31 d2                	xor    edx,edx
c0023591:	83 c4 08             	add    esp,0x8
c0023594:	5b                   	pop    ebx
c0023595:	c3                   	ret    

c0023596 <SysTruncate(regs*)>:
c0023596:	55                   	push   ebp
c0023597:	57                   	push   edi
c0023598:	31 ff                	xor    edi,edi
c002359a:	56                   	push   esi
c002359b:	53                   	push   ebx
c002359c:	83 ec 0c             	sub    esp,0xc
c002359f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00235a3:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00235a6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00235aa:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00235ad:	89 ce                	mov    esi,ecx
c00235af:	0f 84 9a 00 00 00    	je     c002364f <SysTruncate(regs*)+0xb9>
c00235b5:	83 ec 0c             	sub    esp,0xc
c00235b8:	68 14 01 00 00       	push   0x114
c00235bd:	e8 21 2e ff ff       	call   c00163e3 <malloc>
c00235c2:	83 c4 0c             	add    esp,0xc
c00235c5:	89 c3                	mov    ebx,eax
c00235c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235cc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00235cf:	55                   	push   ebp
c00235d0:	53                   	push   ebx
c00235d1:	e8 5c 6e ff ff       	call   c001a432 <File::File(char const*, Process*)>
c00235d6:	83 c4 10             	add    esp,0x10
c00235d9:	31 d2                	xor    edx,edx
c00235db:	85 db                	test   ebx,ebx
c00235dd:	b8 03 00 00 00       	mov    eax,0x3
c00235e2:	0f 84 a2 00 00 00    	je     c002368a <SysTruncate(regs*)+0xf4>
c00235e8:	51                   	push   ecx
c00235e9:	51                   	push   ecx
c00235ea:	6a 02                	push   0x2
c00235ec:	53                   	push   ebx
c00235ed:	e8 5e 6e ff ff       	call   c001a450 <File::open(FileOpenMode)>
c00235f2:	83 c4 10             	add    esp,0x10
c00235f5:	85 c0                	test   eax,eax
c00235f7:	74 13                	je     c002360c <SysTruncate(regs*)+0x76>
c00235f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00235fb:	83 ec 0c             	sub    esp,0xc
c00235fe:	53                   	push   ebx
c00235ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023602:	83 c4 10             	add    esp,0x10
c0023605:	b8 04 00 00 00       	mov    eax,0x4
c002360a:	eb 7c                	jmp    c0023688 <SysTruncate(regs*)+0xf2>
c002360c:	52                   	push   edx
c002360d:	57                   	push   edi
c002360e:	56                   	push   esi
c002360f:	53                   	push   ebx
c0023610:	e8 4f 6f ff ff       	call   c001a564 <File::truncate(unsigned long long)>
c0023615:	83 c4 10             	add    esp,0x10
c0023618:	85 c0                	test   eax,eax
c002361a:	74 1b                	je     c0023637 <SysTruncate(regs*)+0xa1>
c002361c:	83 ec 0c             	sub    esp,0xc
c002361f:	53                   	push   ebx
c0023620:	e8 89 6e ff ff       	call   c001a4ae <File::close()>
c0023625:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023627:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002362a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002362d:	83 c4 10             	add    esp,0x10
c0023630:	b8 05 00 00 00       	mov    eax,0x5
c0023635:	eb 51                	jmp    c0023688 <SysTruncate(regs*)+0xf2>
c0023637:	83 ec 0c             	sub    esp,0xc
c002363a:	53                   	push   ebx
c002363b:	e8 6e 6e ff ff       	call   c001a4ae <File::close()>
c0023640:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023642:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023645:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023648:	83 c4 10             	add    esp,0x10
c002364b:	31 c0                	xor    eax,eax
c002364d:	eb 39                	jmp    c0023688 <SysTruncate(regs*)+0xf2>
c002364f:	31 d2                	xor    edx,edx
c0023651:	83 fd 02             	cmp    ebp,0x2
c0023654:	b8 01 00 00 00       	mov    eax,0x1
c0023659:	7e 2f                	jle    c002368a <SysTruncate(regs*)+0xf4>
c002365b:	83 ec 0c             	sub    esp,0xc
c002365e:	51                   	push   ecx
c002365f:	e8 47 47 ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c0023664:	83 c4 10             	add    esp,0x10
c0023667:	31 d2                	xor    edx,edx
c0023669:	89 c1                	mov    ecx,eax
c002366b:	b8 02 00 00 00       	mov    eax,0x2
c0023670:	85 c9                	test   ecx,ecx
c0023672:	74 16                	je     c002368a <SysTruncate(regs*)+0xf4>
c0023674:	50                   	push   eax
c0023675:	57                   	push   edi
c0023676:	56                   	push   esi
c0023677:	51                   	push   ecx
c0023678:	e8 e7 6e ff ff       	call   c001a564 <File::truncate(unsigned long long)>
c002367d:	83 c4 10             	add    esp,0x10
c0023680:	85 c0                	test   eax,eax
c0023682:	0f 95 c0             	setne  al
c0023685:	0f b6 c0             	movzx  eax,al
c0023688:	31 d2                	xor    edx,edx
c002368a:	83 c4 0c             	add    esp,0xc
c002368d:	5b                   	pop    ebx
c002368e:	5e                   	pop    esi
c002368f:	5f                   	pop    edi
c0023690:	5d                   	pop    ebp
c0023691:	c3                   	ret    

c0023692 <SysWrite(regs*)>:
c0023692:	57                   	push   edi
c0023693:	56                   	push   esi
c0023694:	53                   	push   ebx
c0023695:	83 ec 10             	sub    esp,0x10
c0023698:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002369c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002369f:	83 f8 02             	cmp    eax,0x2
c00236a2:	77 10                	ja     c00236b4 <SysWrite(regs*)+0x22>
c00236a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236a9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236ac:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00236b2:	eb 0e                	jmp    c00236c2 <SysWrite(regs*)+0x30>
c00236b4:	83 ec 0c             	sub    esp,0xc
c00236b7:	50                   	push   eax
c00236b8:	e8 ee 46 ff ff       	call   c0017dab <KeGetFileFromDescriptor(int)>
c00236bd:	83 c4 10             	add    esp,0x10
c00236c0:	89 c1                	mov    ecx,eax
c00236c2:	83 c8 ff             	or     eax,0xffffffff
c00236c5:	85 c9                	test   ecx,ecx
c00236c7:	89 c2                	mov    edx,eax
c00236c9:	74 28                	je     c00236f3 <SysWrite(regs*)+0x61>
c00236cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00236d3:	83 ec 0c             	sub    esp,0xc
c00236d6:	31 ff                	xor    edi,edi
c00236d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00236dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00236de:	52                   	push   edx
c00236df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236e2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00236e5:	57                   	push   edi
c00236e6:	56                   	push   esi
c00236e7:	51                   	push   ecx
c00236e8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00236eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00236ef:	83 c4 20             	add    esp,0x20
c00236f2:	99                   	cdq    
c00236f3:	83 c4 10             	add    esp,0x10
c00236f6:	5b                   	pop    ebx
c00236f7:	5e                   	pop    esi
c00236f8:	5f                   	pop    edi
c00236f9:	c3                   	ret    

c00236fa <SysWsbe(regs*)>:
c00236fa:	57                   	push   edi
c00236fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0023700:	56                   	push   esi
c0023701:	be 67 2b 03 c0       	mov    esi,0xc0032b67
c0023706:	53                   	push   ebx
c0023707:	83 ec 30             	sub    esp,0x30
c002370a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002370e:	fc                   	cld    
c002370f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023711:	83 ec 0c             	sub    esp,0xc
c0023714:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023718:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002371d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023720:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0023726:	8b 06                	mov    eax,DWORD PTR [esi]
c0023728:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002372b:	57                   	push   edi
c002372c:	e8 4f ce fd ff       	call   c0000580 <strlen>
c0023731:	5a                   	pop    edx
c0023732:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0023736:	52                   	push   edx
c0023737:	31 d2                	xor    edx,edx
c0023739:	57                   	push   edi
c002373a:	52                   	push   edx
c002373b:	50                   	push   eax
c002373c:	56                   	push   esi
c002373d:	ff d3                	call   ebx
c002373f:	83 c4 14             	add    esp,0x14
c0023742:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0023746:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0023749:	e8 c2 21 00 00       	call   c0025910 <terminateTask(int)>
c002374e:	83 c4 40             	add    esp,0x40
c0023751:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0023756:	5b                   	pop    ebx
c0023757:	31 d2                	xor    edx,edx
c0023759:	5e                   	pop    esi
c002375a:	5f                   	pop    edi
c002375b:	c3                   	ret    

c002375c <SysYield(regs*)>:
c002375c:	83 ec 0c             	sub    esp,0xc
c002375f:	fa                   	cli    
c0023760:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023766:	e8 31 1a 00 00       	call   c002519c <schedule()>
c002376b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023770:	48                   	dec    eax
c0023771:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023776:	75 01                	jne    c0023779 <SysYield(regs*)+0x1d>
c0023778:	fb                   	sti    
c0023779:	31 c0                	xor    eax,eax
c002377b:	31 d2                	xor    edx,edx
c002377d:	83 c4 0c             	add    esp,0xc
c0023780:	c3                   	ret    

c0023781 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023781:	55                   	push   ebp
c0023782:	57                   	push   edi
c0023783:	56                   	push   esi
c0023784:	53                   	push   ebx
c0023785:	81 ec 2c 10 00 00    	sub    esp,0x102c
c002378b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0023796:	74 3b                	je     c00237d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0023798:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00237a0:	74 31                	je     c00237d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00237a2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00237aa:	75 27                	jne    c00237d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c00237ac:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00237b3:	05 00 10 00 00       	add    eax,0x1000
c00237b8:	89 c2                	mov    edx,eax
c00237ba:	25 00 f0 ff ff       	and    eax,0xfffff000
c00237bf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00237c6:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00237cc:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00237d3:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00237da:	83 ec 0c             	sub    esp,0xc
c00237dd:	6a 01                	push   0x1
c00237df:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00237e5:	e8 1b 47 ff ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c00237ea:	83 c4 10             	add    esp,0x10
c00237ed:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00237f3:	89 c3                	mov    ebx,eax
c00237f5:	0f 86 26 01 00 00    	jbe    c0023921 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a0>
c00237fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023803:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c002380a:	c1 ee 0c             	shr    esi,0xc
c002380d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023811:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023818:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c002381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023823:	29 ef                	sub    edi,ebp
c0023825:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0023829:	0f 83 f9 00 00 00    	jae    c0023928 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c002382f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023835:	b8 00 10 00 00       	mov    eax,0x1000
c002383a:	0f 47 f8             	cmova  edi,eax
c002383d:	83 ec 0c             	sub    esp,0xc
c0023840:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023847:	31 d2                	xor    edx,edx
c0023849:	8b 08                	mov    ecx,DWORD PTR [eax]
c002384b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002384f:	50                   	push   eax
c0023850:	8d 74 24 30          	lea    esi,[esp+0x30]
c0023854:	56                   	push   esi
c0023855:	52                   	push   edx
c0023856:	57                   	push   edi
c0023857:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c002385e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023861:	83 c4 20             	add    esp,0x20
c0023864:	85 c0                	test   eax,eax
c0023866:	75 06                	jne    c002386e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xed>
c0023868:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c002386c:	74 13                	je     c0023881 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x100>
c002386e:	83 ec 0c             	sub    esp,0xc
c0023871:	53                   	push   ebx
c0023872:	e8 a2 49 ff ff       	call   c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c0023877:	83 c4 10             	add    esp,0x10
c002387a:	31 c0                	xor    eax,eax
c002387c:	e9 7c 01 00 00       	jmp    c00239fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27c>
c0023881:	fa                   	cli    
c0023882:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023888:	e8 65 2e ff ff       	call   c00166f2 <Phys::allocatePage()>
c002388d:	6a 07                	push   0x7
c002388f:	53                   	push   ebx
c0023890:	50                   	push   eax
c0023891:	89 c7                	mov    edi,eax
c0023893:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023898:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002389b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238a1:	e8 68 4d ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c00238a6:	83 c4 0c             	add    esp,0xc
c00238a9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00238b0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238b6:	6a 00                	push   0x0
c00238b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238c0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238c6:	e8 a9 4b ff ff       	call   c0018474 <VAS::mapOtherVASIn(bool, VAS*)>
c00238cb:	58                   	pop    eax
c00238cc:	5a                   	pop    edx
c00238cd:	68 07 0c 00 00       	push   0xc07
c00238d2:	55                   	push   ebp
c00238d3:	57                   	push   edi
c00238d4:	89 df                	mov    edi,ebx
c00238d6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00238dd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238e3:	6a 00                	push   0x0
c00238e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238ed:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238f3:	e8 7a 4f ff ff       	call   c0018872 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00238f8:	b9 00 10 00 00       	mov    ecx,0x1000
c00238fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00238ff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023904:	83 c4 20             	add    esp,0x20
c0023907:	48                   	dec    eax
c0023908:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002390d:	85 c0                	test   eax,eax
c002390f:	75 01                	jne    c0023912 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x191>
c0023911:	fb                   	sti    
c0023912:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023916:	81 c5 00 10 00 00    	add    ebp,0x1000
c002391c:	e9 f0 fe ff ff       	jmp    c0023811 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0023921:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023928:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002392f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023935:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c002393b:	0f 86 ae 00 00 00    	jbe    c00239ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c0023941:	fa                   	cli    
c0023942:	51                   	push   ecx
c0023943:	31 ff                	xor    edi,edi
c0023945:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c002394c:	c1 ee 0c             	shr    esi,0xc
c002394f:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023955:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002395b:	6a 00                	push   0x0
c002395d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023962:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023965:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c002396b:	e8 04 4b ff ff       	call   c0018474 <VAS::mapOtherVASIn(bool, VAS*)>
c0023970:	83 c4 10             	add    esp,0x10
c0023973:	e8 7a 2d ff ff       	call   c00166f2 <Phys::allocatePage()>
c0023978:	47                   	inc    edi
c0023979:	6a 07                	push   0x7
c002397b:	53                   	push   ebx
c002397c:	50                   	push   eax
c002397d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023981:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023987:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c002398a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0023990:	e8 79 4c ff ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c0023995:	58                   	pop    eax
c0023996:	5a                   	pop    edx
c0023997:	68 07 0c 00 00       	push   0xc07
c002399c:	55                   	push   ebp
c002399d:	81 c5 00 10 00 00    	add    ebp,0x1000
c00239a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239a7:	50                   	push   eax
c00239a8:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239af:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239b5:	6a 00                	push   0x0
c00239b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239bf:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239c5:	e8 a8 4e ff ff       	call   c0018872 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239ca:	83 c4 1c             	add    esp,0x1c
c00239cd:	68 00 10 00 00       	push   0x1000
c00239d2:	6a 00                	push   0x0
c00239d4:	53                   	push   ebx
c00239d5:	e8 16 cb fd ff       	call   c00004f0 <memset>
c00239da:	83 c4 10             	add    esp,0x10
c00239dd:	39 fe                	cmp    esi,edi
c00239df:	77 92                	ja     c0023973 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f2>
c00239e1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00239e6:	48                   	dec    eax
c00239e7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00239ec:	75 01                	jne    c00239ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26e>
c00239ee:	fb                   	sti    
c00239ef:	83 ec 0c             	sub    esp,0xc
c00239f2:	53                   	push   ebx
c00239f3:	e8 21 48 ff ff       	call   c0018219 <Virt::freeKernelVirtualPages(unsigned long)>
c00239f8:	83 c4 10             	add    esp,0x10
c00239fb:	b0 01                	mov    al,0x1
c00239fd:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023a03:	5b                   	pop    ebx
c0023a04:	5e                   	pop    esi
c0023a05:	5f                   	pop    edi
c0023a06:	5d                   	pop    ebp
c0023a07:	c3                   	ret    

c0023a08 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023a08:	55                   	push   ebp
c0023a09:	57                   	push   edi
c0023a0a:	56                   	push   esi
c0023a0b:	53                   	push   ebx
c0023a0c:	83 ec 48             	sub    esp,0x48
c0023a0f:	68 14 01 00 00       	push   0x114
c0023a14:	e8 ca 29 ff ff       	call   c00163e3 <malloc>
c0023a19:	83 c4 0c             	add    esp,0xc
c0023a1c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a20:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023a24:	89 c7                	mov    edi,eax
c0023a26:	50                   	push   eax
c0023a27:	e8 06 6a ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0023a2c:	58                   	pop    eax
c0023a2d:	5a                   	pop    edx
c0023a2e:	6a 01                	push   0x1
c0023a30:	57                   	push   edi
c0023a31:	e8 1a 6a ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0023a36:	83 c4 10             	add    esp,0x10
c0023a39:	85 c0                	test   eax,eax
c0023a3b:	0f 85 4c 01 00 00    	jne    c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a41:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023a49:	83 ec 0c             	sub    esp,0xc
c0023a4c:	6a 34                	push   0x34
c0023a4e:	e8 90 29 ff ff       	call   c00163e3 <malloc>
c0023a53:	89 c3                	mov    ebx,eax
c0023a55:	58                   	pop    eax
c0023a56:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a58:	8d 74 24 38          	lea    esi,[esp+0x38]
c0023a5c:	56                   	push   esi
c0023a5d:	53                   	push   ebx
c0023a5e:	6a 00                	push   0x0
c0023a60:	6a 34                	push   0x34
c0023a62:	57                   	push   edi
c0023a63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023a66:	83 c4 20             	add    esp,0x20
c0023a69:	85 c0                	test   eax,eax
c0023a6b:	0f 85 1c 01 00 00    	jne    c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a71:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023a77:	0f 85 10 01 00 00    	jne    c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a7d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023a80:	85 c0                	test   eax,eax
c0023a82:	0f 84 05 01 00 00    	je     c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a88:	31 d2                	xor    edx,edx
c0023a8a:	55                   	push   ebp
c0023a8b:	52                   	push   edx
c0023a8c:	50                   	push   eax
c0023a8d:	57                   	push   edi
c0023a8e:	e8 7b 6a ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023a93:	83 c4 10             	add    esp,0x10
c0023a96:	85 c0                	test   eax,eax
c0023a98:	0f 85 ef 00 00 00    	jne    c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023a9e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023aa1:	83 ec 0c             	sub    esp,0xc
c0023aa4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023aa8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0023aac:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023ab0:	0f af c2             	imul   eax,edx
c0023ab3:	50                   	push   eax
c0023ab4:	e8 2a 29 ff ff       	call   c00163e3 <malloc>
c0023ab9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023abb:	89 34 24             	mov    DWORD PTR [esp],esi
c0023abe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023ac2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023ac6:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023aca:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023ace:	0f af c2             	imul   eax,edx
c0023ad1:	99                   	cdq    
c0023ad2:	52                   	push   edx
c0023ad3:	50                   	push   eax
c0023ad4:	57                   	push   edi
c0023ad5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ad8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023adb:	83 c4 20             	add    esp,0x20
c0023ade:	85 c0                	test   eax,eax
c0023ae0:	0f 84 a7 00 00 00    	je     c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023ae6:	31 d2                	xor    edx,edx
c0023ae8:	51                   	push   ecx
c0023ae9:	52                   	push   edx
c0023aea:	50                   	push   eax
c0023aeb:	57                   	push   edi
c0023aec:	e8 1d 6a ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023af1:	83 c4 10             	add    esp,0x10
c0023af4:	85 c0                	test   eax,eax
c0023af6:	0f 85 91 00 00 00    	jne    c0023b8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x185>
c0023afc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023b00:	83 ec 0c             	sub    esp,0xc
c0023b03:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023b07:	0f af c2             	imul   eax,edx
c0023b0a:	50                   	push   eax
c0023b0b:	e8 d3 28 ff ff       	call   c00163e3 <malloc>
c0023b10:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0023b12:	89 34 24             	mov    DWORD PTR [esp],esi
c0023b15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b1d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023b21:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023b25:	0f af c2             	imul   eax,edx
c0023b28:	99                   	cdq    
c0023b29:	52                   	push   edx
c0023b2a:	50                   	push   eax
c0023b2b:	57                   	push   edi
c0023b2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b2f:	83 c4 20             	add    esp,0x20
c0023b32:	31 c9                	xor    ecx,ecx
c0023b34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b3c:	66 3b 4b 2c          	cmp    cx,WORD PTR [ebx+0x2c]
c0023b40:	0f b7 e9             	movzx  ebp,cx
c0023b43:	0f 83 86 00 00 00    	jae    c0023bcf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c7>
c0023b49:	c1 e5 05             	shl    ebp,0x5
c0023b4c:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0023b50:	83 7d 00 01          	cmp    DWORD PTR [ebp+0x0],0x1
c0023b54:	75 73                	jne    c0023bc9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1c1>
c0023b56:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023b5d:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0023b60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b64:	52                   	push   edx
c0023b65:	31 d2                	xor    edx,edx
c0023b67:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0023b6a:	52                   	push   edx
c0023b6b:	50                   	push   eax
c0023b6c:	57                   	push   edi
c0023b6d:	e8 9c 69 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023b72:	83 c4 10             	add    esp,0x10
c0023b75:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023b79:	85 c0                	test   eax,eax
c0023b7b:	74 17                	je     c0023b94 <Thr::loadProgramIntoMemory(Process*, char const*)+0x18c>
c0023b7d:	83 ec 0c             	sub    esp,0xc
c0023b80:	68 93 2b 03 c0       	push   0xc0032b93
c0023b85:	e8 90 56 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0023b8a:	83 c4 10             	add    esp,0x10
c0023b8d:	31 c0                	xor    eax,eax
c0023b8f:	e9 8b 00 00 00       	jmp    c0023c1f <Thr::loadProgramIntoMemory(Process*, char const*)+0x217>
c0023b94:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0023b98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023b9b:	83 ec 0c             	sub    esp,0xc
c0023b9e:	2b 45 10             	sub    eax,DWORD PTR [ebp+0x10]
c0023ba1:	50                   	push   eax
c0023ba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023ba6:	56                   	push   esi
c0023ba7:	57                   	push   edi
c0023ba8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023bac:	e8 d0 fb ff ff       	call   c0023781 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023bb1:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0023bb5:	83 c4 20             	add    esp,0x20
c0023bb8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0023bbc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023bc0:	0f 43 74 24 08       	cmovae esi,DWORD PTR [esp+0x8]
c0023bc5:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0023bc9:	41                   	inc    ecx
c0023bca:	e9 6d ff ff ff       	jmp    c0023b3c <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023bcf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0023bd3:	83 ec 0c             	sub    esp,0xc
c0023bd6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023bde:	89 8a 0e 05 00 00    	mov    DWORD PTR [edx+0x50e],ecx
c0023be4:	8b 92 12 05 00 00    	mov    edx,DWORD PTR [edx+0x512]
c0023bea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023bef:	05 00 10 00 00       	add    eax,0x1000
c0023bf4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023bf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bfb:	e8 f3 27 ff ff       	call   c00163f3 <free>
c0023c00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c03:	e8 eb 27 ff ff       	call   c00163f3 <free>
c0023c08:	58                   	pop    eax
c0023c09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c0d:	e8 e1 27 ff ff       	call   c00163f3 <free>
c0023c12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023c15:	e8 94 68 ff ff       	call   c001a4ae <File::close()>
c0023c1a:	83 c4 10             	add    esp,0x10
c0023c1d:	b0 01                	mov    al,0x1
c0023c1f:	83 c4 3c             	add    esp,0x3c
c0023c22:	5b                   	pop    ebx
c0023c23:	5e                   	pop    esi
c0023c24:	5f                   	pop    edi
c0023c25:	5d                   	pop    ebp
c0023c26:	c3                   	ret    

c0023c27 <Thr::runtimeReferenceHelper()>:
c0023c27:	83 ec 18             	sub    esp,0x18
c0023c2a:	68 9b 2b 03 c0       	push   0xc0032b9b
c0023c2f:	e8 e6 55 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0023c34:	fa                   	cli    
c0023c35:	83 c4 10             	add    esp,0x10
c0023c38:	eb fe                	jmp    c0023c38 <Thr::runtimeReferenceHelper()+0x11>

c0023c3a <Thr::getAddressOfKernelSymbol(char const*)>:
c0023c3a:	57                   	push   edi
c0023c3b:	56                   	push   esi
c0023c3c:	53                   	push   ebx
c0023c3d:	31 db                	xor    ebx,ebx
c0023c3f:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023c45:	7e 3c                	jle    c0023c83 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023c47:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023c4e:	31 ff                	xor    edi,edi
c0023c50:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023c57:	7e 27                	jle    c0023c80 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023c59:	50                   	push   eax
c0023c5a:	50                   	push   eax
c0023c5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0023c61:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023c68:	50                   	push   eax
c0023c69:	e8 12 cb fd ff       	call   c0000780 <strcmp>
c0023c6e:	83 c4 10             	add    esp,0x10
c0023c71:	85 c0                	test   eax,eax
c0023c73:	75 05                	jne    c0023c7a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023c75:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023c78:	eb 0b                	jmp    c0023c85 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023c7a:	83 c6 10             	add    esi,0x10
c0023c7d:	47                   	inc    edi
c0023c7e:	eb d0                	jmp    c0023c50 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023c80:	43                   	inc    ebx
c0023c81:	eb bc                	jmp    c0023c3f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023c83:	31 c0                	xor    eax,eax
c0023c85:	5b                   	pop    ebx
c0023c86:	5e                   	pop    esi
c0023c87:	5f                   	pop    edi
c0023c88:	c3                   	ret    

c0023c89 <Thr::loadKernelSymbolTable(char const*)>:
c0023c89:	55                   	push   ebp
c0023c8a:	57                   	push   edi
c0023c8b:	56                   	push   esi
c0023c8c:	53                   	push   ebx
c0023c8d:	83 ec 68             	sub    esp,0x68
c0023c90:	68 14 01 00 00       	push   0x114
c0023c95:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023c9b:	e8 43 27 ff ff       	call   c00163e3 <malloc>
c0023ca0:	83 c4 0c             	add    esp,0xc
c0023ca3:	56                   	push   esi
c0023ca4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023ca8:	89 c3                	mov    ebx,eax
c0023caa:	50                   	push   eax
c0023cab:	e8 82 67 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0023cb0:	5e                   	pop    esi
c0023cb1:	5f                   	pop    edi
c0023cb2:	6a 01                	push   0x1
c0023cb4:	53                   	push   ebx
c0023cb5:	e8 96 67 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0023cba:	83 c4 10             	add    esp,0x10
c0023cbd:	85 c0                	test   eax,eax
c0023cbf:	74 0a                	je     c0023ccb <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023cc1:	83 ec 0c             	sub    esp,0xc
c0023cc4:	68 bd 2b 03 c0       	push   0xc0032bbd
c0023cc9:	eb 34                	jmp    c0023cff <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023ccb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023cd3:	83 ec 0c             	sub    esp,0xc
c0023cd6:	6a 34                	push   0x34
c0023cd8:	e8 06 27 ff ff       	call   c00163e3 <malloc>
c0023cdd:	59                   	pop    ecx
c0023cde:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023ce2:	89 c7                	mov    edi,eax
c0023ce4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ce6:	56                   	push   esi
c0023ce7:	57                   	push   edi
c0023ce8:	6a 00                	push   0x0
c0023cea:	6a 34                	push   0x34
c0023cec:	53                   	push   ebx
c0023ced:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023cf0:	83 c4 20             	add    esp,0x20
c0023cf3:	85 c0                	test   eax,eax
c0023cf5:	74 17                	je     c0023d0e <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023cf7:	83 ec 0c             	sub    esp,0xc
c0023cfa:	68 d4 2b 03 c0       	push   0xc0032bd4
c0023cff:	e8 9e c4 ff ff       	call   c00201a2 <KePanic(char const*)>
c0023d04:	83 c4 10             	add    esp,0x10
c0023d07:	31 c0                	xor    eax,eax
c0023d09:	e9 31 02 00 00       	jmp    c0023f3f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023d0e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023d14:	75 e1                	jne    c0023cf7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d16:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023d19:	85 c0                	test   eax,eax
c0023d1b:	74 da                	je     c0023cf7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d1d:	52                   	push   edx
c0023d1e:	31 d2                	xor    edx,edx
c0023d20:	52                   	push   edx
c0023d21:	50                   	push   eax
c0023d22:	53                   	push   ebx
c0023d23:	e8 e6 67 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023d28:	83 c4 10             	add    esp,0x10
c0023d2b:	85 c0                	test   eax,eax
c0023d2d:	75 c8                	jne    c0023cf7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d2f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d33:	83 ec 0c             	sub    esp,0xc
c0023d36:	31 ed                	xor    ebp,ebp
c0023d38:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d3c:	0f af c2             	imul   eax,edx
c0023d3f:	50                   	push   eax
c0023d40:	e8 9e 26 ff ff       	call   c00163e3 <malloc>
c0023d45:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023d47:	89 34 24             	mov    DWORD PTR [esp],esi
c0023d4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d52:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d56:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d5a:	0f af c2             	imul   eax,edx
c0023d5d:	99                   	cdq    
c0023d5e:	52                   	push   edx
c0023d5f:	50                   	push   eax
c0023d60:	53                   	push   ebx
c0023d61:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023d64:	83 c4 20             	add    esp,0x20
c0023d67:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023d6f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023d77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023d7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023d87:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023d8b:	0f b7 f5             	movzx  esi,bp
c0023d8e:	0f 83 a7 00 00 00    	jae    c0023e3b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023d94:	6b f6 28             	imul   esi,esi,0x28
c0023d97:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023d9b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023d9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023da2:	50                   	push   eax
c0023da3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023da7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023dab:	8b 16                	mov    edx,DWORD PTR [esi]
c0023dad:	6b c0 28             	imul   eax,eax,0x28
c0023db0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023db4:	89 d0                	mov    eax,edx
c0023db6:	31 d2                	xor    edx,edx
c0023db8:	52                   	push   edx
c0023db9:	50                   	push   eax
c0023dba:	53                   	push   ebx
c0023dbb:	e8 4e 67 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023dc0:	83 c4 0c             	add    esp,0xc
c0023dc3:	6a 20                	push   0x20
c0023dc5:	6a 00                	push   0x0
c0023dc7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023dcb:	52                   	push   edx
c0023dcc:	e8 1f c7 fd ff       	call   c00004f0 <memset>
c0023dd1:	58                   	pop    eax
c0023dd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dd4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023dd8:	51                   	push   ecx
c0023dd9:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023ddd:	52                   	push   edx
c0023dde:	6a 00                	push   0x0
c0023de0:	6a 1f                	push   0x1f
c0023de2:	53                   	push   ebx
c0023de3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023de6:	83 c4 18             	add    esp,0x18
c0023de9:	68 eb 2b 03 c0       	push   0xc0032beb
c0023dee:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023df2:	52                   	push   edx
c0023df3:	e8 88 c9 fd ff       	call   c0000780 <strcmp>
c0023df8:	83 c4 10             	add    esp,0x10
c0023dfb:	85 c0                	test   eax,eax
c0023dfd:	75 0f                	jne    c0023e0e <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023dff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e0e:	50                   	push   eax
c0023e0f:	50                   	push   eax
c0023e10:	68 f3 2b 03 c0       	push   0xc0032bf3
c0023e15:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023e19:	50                   	push   eax
c0023e1a:	e8 61 c9 fd ff       	call   c0000780 <strcmp>
c0023e1f:	83 c4 10             	add    esp,0x10
c0023e22:	85 c0                	test   eax,eax
c0023e24:	75 0f                	jne    c0023e35 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023e26:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023e29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023e2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023e35:	45                   	inc    ebp
c0023e36:	e9 4c ff ff ff       	jmp    c0023d87 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023e3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023e40:	75 10                	jne    c0023e52 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023e42:	83 ec 0c             	sub    esp,0xc
c0023e45:	68 fb 2b 03 c0       	push   0xc0032bfb
c0023e4a:	e8 53 c3 ff ff       	call   c00201a2 <KePanic(char const*)>
c0023e4f:	83 c4 10             	add    esp,0x10
c0023e52:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023e57:	75 10                	jne    c0023e69 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023e59:	83 ec 0c             	sub    esp,0xc
c0023e5c:	68 fb 2b 03 c0       	push   0xc0032bfb
c0023e61:	e8 3c c3 ff ff       	call   c00201a2 <KePanic(char const*)>
c0023e66:	83 c4 10             	add    esp,0x10
c0023e69:	50                   	push   eax
c0023e6a:	31 d2                	xor    edx,edx
c0023e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e70:	52                   	push   edx
c0023e71:	50                   	push   eax
c0023e72:	53                   	push   ebx
c0023e73:	e8 96 66 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023e78:	5a                   	pop    edx
c0023e79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023e7d:	e8 61 25 ff ff       	call   c00163e3 <malloc>
c0023e82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023e86:	31 c9                	xor    ecx,ecx
c0023e88:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e8e:	5e                   	pop    esi
c0023e8f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023e93:	55                   	push   ebp
c0023e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e98:	51                   	push   ecx
c0023e99:	52                   	push   edx
c0023e9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023e9e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023ea2:	53                   	push   ebx
c0023ea3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ea6:	83 c4 14             	add    esp,0x14
c0023ea9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023ead:	e8 31 25 ff ff       	call   c00163e3 <malloc>
c0023eb2:	89 c6                	mov    esi,eax
c0023eb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eb6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023eb9:	56                   	push   esi
c0023eba:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023ebe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023ec2:	51                   	push   ecx
c0023ec3:	52                   	push   edx
c0023ec4:	53                   	push   ebx
c0023ec5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ec8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ecc:	83 c4 1c             	add    esp,0x1c
c0023ecf:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023ed5:	c1 e8 04             	shr    eax,0x4
c0023ed8:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023edf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ee3:	31 d2                	xor    edx,edx
c0023ee5:	52                   	push   edx
c0023ee6:	50                   	push   eax
c0023ee7:	53                   	push   ebx
c0023ee8:	e8 21 66 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023eed:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023eef:	31 d2                	xor    edx,edx
c0023ef1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023ef4:	56                   	push   esi
c0023ef5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ef9:	52                   	push   edx
c0023efa:	50                   	push   eax
c0023efb:	53                   	push   ebx
c0023efc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023eff:	83 c4 14             	add    esp,0x14
c0023f02:	53                   	push   ebx
c0023f03:	e8 a6 65 ff ff       	call   c001a4ae <File::close()>
c0023f08:	5d                   	pop    ebp
c0023f09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f0d:	e8 e1 24 ff ff       	call   c00163f3 <free>
c0023f12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023f15:	e8 d9 24 ff ff       	call   c00163f3 <free>
c0023f1a:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0023f1f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f23:	83 c4 10             	add    esp,0x10
c0023f26:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0023f2d:	8d 50 01             	lea    edx,[eax+0x1]
c0023f30:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0023f37:	b0 01                	mov    al,0x1
c0023f39:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0023f3f:	83 c4 5c             	add    esp,0x5c
c0023f42:	5b                   	pop    ebx
c0023f43:	5e                   	pop    esi
c0023f44:	5f                   	pop    edi
c0023f45:	5d                   	pop    ebp
c0023f46:	c3                   	ret    

c0023f47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0023f47:	55                   	push   ebp
c0023f48:	57                   	push   edi
c0023f49:	56                   	push   esi
c0023f4a:	53                   	push   ebx
c0023f4b:	81 ec 68 03 00 00    	sub    esp,0x368
c0023f51:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0023f58:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023f5e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023f62:	68 14 01 00 00       	push   0x114
c0023f67:	e8 77 24 ff ff       	call   c00163e3 <malloc>
c0023f6c:	83 c4 0c             	add    esp,0xc
c0023f6f:	56                   	push   esi
c0023f70:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0023f77:	50                   	push   eax
c0023f78:	89 c3                	mov    ebx,eax
c0023f7a:	e8 b3 64 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0023f7f:	5f                   	pop    edi
c0023f80:	5d                   	pop    ebp
c0023f81:	6a 01                	push   0x1
c0023f83:	53                   	push   ebx
c0023f84:	e8 c7 64 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0023f89:	83 c4 10             	add    esp,0x10
c0023f8c:	85 c0                	test   eax,eax
c0023f8e:	0f 85 b3 06 00 00    	jne    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023f94:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0023f9c:	83 ec 0c             	sub    esp,0xc
c0023f9f:	6a 34                	push   0x34
c0023fa1:	e8 3d 24 ff ff       	call   c00163e3 <malloc>
c0023fa6:	5e                   	pop    esi
c0023fa7:	8d 74 24 54          	lea    esi,[esp+0x54]
c0023fab:	89 c5                	mov    ebp,eax
c0023fad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023faf:	56                   	push   esi
c0023fb0:	55                   	push   ebp
c0023fb1:	6a 00                	push   0x0
c0023fb3:	6a 34                	push   0x34
c0023fb5:	53                   	push   ebx
c0023fb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fb9:	83 c4 20             	add    esp,0x20
c0023fbc:	85 c0                	test   eax,eax
c0023fbe:	0f 85 83 06 00 00    	jne    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fc4:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0023fcb:	0f 85 76 06 00 00    	jne    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fd1:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0023fd4:	85 c0                	test   eax,eax
c0023fd6:	0f 84 6b 06 00 00    	je     c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023fdc:	31 d2                	xor    edx,edx
c0023fde:	51                   	push   ecx
c0023fdf:	52                   	push   edx
c0023fe0:	50                   	push   eax
c0023fe1:	53                   	push   ebx
c0023fe2:	e8 27 65 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0023fe7:	83 c4 10             	add    esp,0x10
c0023fea:	85 c0                	test   eax,eax
c0023fec:	0f 85 55 06 00 00    	jne    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0023ff2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0023ff5:	83 ec 0c             	sub    esp,0xc
c0023ff8:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0023ffc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024000:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024004:	0f af c2             	imul   eax,edx
c0024007:	50                   	push   eax
c0024008:	e8 d6 23 ff ff       	call   c00163e3 <malloc>
c002400d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c002400f:	89 34 24             	mov    DWORD PTR [esp],esi
c0024012:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024016:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002401a:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c002401e:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024022:	0f af c2             	imul   eax,edx
c0024025:	99                   	cdq    
c0024026:	52                   	push   edx
c0024027:	50                   	push   eax
c0024028:	53                   	push   ebx
c0024029:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002402c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c002402f:	83 c4 20             	add    esp,0x20
c0024032:	85 c0                	test   eax,eax
c0024034:	0f 84 0d 06 00 00    	je     c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c002403a:	52                   	push   edx
c002403b:	31 d2                	xor    edx,edx
c002403d:	52                   	push   edx
c002403e:	50                   	push   eax
c002403f:	53                   	push   ebx
c0024040:	e8 c9 64 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0024045:	83 c4 10             	add    esp,0x10
c0024048:	85 c0                	test   eax,eax
c002404a:	0f 85 f7 05 00 00    	jne    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024050:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024054:	83 ec 0c             	sub    esp,0xc
c0024057:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c002405b:	0f af c2             	imul   eax,edx
c002405e:	50                   	push   eax
c002405f:	e8 7f 23 ff ff       	call   c00163e3 <malloc>
c0024064:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024066:	89 34 24             	mov    DWORD PTR [esp],esi
c0024069:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002406d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024071:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0024075:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0024079:	0f af c2             	imul   eax,edx
c002407c:	99                   	cdq    
c002407d:	52                   	push   edx
c002407e:	50                   	push   eax
c002407f:	53                   	push   ebx
c0024080:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024083:	83 c4 20             	add    esp,0x20
c0024086:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002408c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002408f:	66 3b 45 2c          	cmp    ax,WORD PTR [ebp+0x2c]
c0024093:	0f b7 3c 24          	movzx  edi,WORD PTR [esp]
c0024097:	73 78                	jae    c0024111 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1ca>
c0024099:	c1 e7 05             	shl    edi,0x5
c002409c:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00240a0:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00240a3:	75 63                	jne    c0024108 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1c1>
c00240a5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00240a8:	31 d2                	xor    edx,edx
c00240aa:	8b 77 08             	mov    esi,DWORD PTR [edi+0x8]
c00240ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240b1:	50                   	push   eax
c00240b2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00240b5:	52                   	push   edx
c00240b6:	50                   	push   eax
c00240b7:	53                   	push   ebx
c00240b8:	e8 51 64 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c00240bd:	83 c4 10             	add    esp,0x10
c00240c0:	85 c0                	test   eax,eax
c00240c2:	0f 85 7f 05 00 00    	jne    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00240c8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00240cf:	83 ec 0c             	sub    esp,0xc
c00240d2:	31 d2                	xor    edx,edx
c00240d4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c00240d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00240da:	01 c6                	add    esi,eax
c00240dc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00240e3:	50                   	push   eax
c00240e4:	56                   	push   esi
c00240e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00240e9:	52                   	push   edx
c00240ea:	50                   	push   eax
c00240eb:	53                   	push   ebx
c00240ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240ef:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00240f2:	83 c4 1c             	add    esp,0x1c
c00240f5:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00240f8:	50                   	push   eax
c00240f9:	6a 00                	push   0x0
c00240fb:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00240ff:	56                   	push   esi
c0024100:	e8 eb c3 fd ff       	call   c00004f0 <memset>
c0024105:	83 c4 10             	add    esp,0x10
c0024108:	66 ff 04 24          	inc    WORD PTR [esp]
c002410c:	e9 7b ff ff ff       	jmp    c002408c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x145>
c0024111:	50                   	push   eax
c0024112:	68 00 01 00 00       	push   0x100
c0024117:	6a 00                	push   0x0
c0024119:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002411d:	50                   	push   eax
c002411e:	e8 cd c3 fd ff       	call   c00004f0 <memset>
c0024123:	83 c4 0c             	add    esp,0xc
c0024126:	68 00 01 00 00       	push   0x100
c002412b:	6a 00                	push   0x0
c002412d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024134:	50                   	push   eax
c0024135:	e8 b6 c3 fd ff       	call   c00004f0 <memset>
c002413a:	83 c4 10             	add    esp,0x10
c002413d:	66 c7 44 24 14 00 00 	mov    WORD PTR [esp+0x14],0x0
c0024144:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002414b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0024153:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002415b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0024163:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002416b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002416f:	66 3b 45 30          	cmp    ax,WORD PTR [ebp+0x30]
c0024173:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0024178:	0f 83 16 01 00 00    	jae    c0024294 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x34d>
c002417e:	6b ff 28             	imul   edi,edi,0x28
c0024181:	03 7c 24 04          	add    edi,DWORD PTR [esp+0x4]
c0024185:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0024188:	51                   	push   ecx
c0024189:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c002418d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024191:	8b 07                	mov    eax,DWORD PTR [edi]
c0024193:	6b d2 28             	imul   edx,edx,0x28
c0024196:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c002419a:	31 d2                	xor    edx,edx
c002419c:	52                   	push   edx
c002419d:	50                   	push   eax
c002419e:	53                   	push   ebx
c002419f:	e8 6a 63 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c00241a4:	83 c4 0c             	add    esp,0xc
c00241a7:	6a 20                	push   0x20
c00241a9:	6a 00                	push   0x0
c00241ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241b2:	51                   	push   ecx
c00241b3:	e8 38 c3 fd ff       	call   c00004f0 <memset>
c00241b8:	58                   	pop    eax
c00241b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00241bb:	8d 54 24 58          	lea    edx,[esp+0x58]
c00241bf:	52                   	push   edx
c00241c0:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00241c7:	51                   	push   ecx
c00241c8:	6a 00                	push   0x0
c00241ca:	6a 1f                	push   0x1f
c00241cc:	53                   	push   ebx
c00241cd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241d0:	83 c4 1c             	add    esp,0x1c
c00241d3:	6a 09                	push   0x9
c00241d5:	68 15 2c 03 c0       	push   0xc0032c15
c00241da:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241e1:	51                   	push   ecx
c00241e2:	e8 99 c1 fd ff       	call   c0000380 <memcmp>
c00241e7:	83 c4 10             	add    esp,0x10
c00241ea:	85 c0                	test   eax,eax
c00241ec:	75 1a                	jne    c0024208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2c1>
c00241ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00241f1:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00241f4:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c00241f8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00241fb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0024202:	89 d0                	mov    eax,edx
c0024204:	40                   	inc    eax
c0024205:	89 04 24             	mov    DWORD PTR [esp],eax
c0024208:	52                   	push   edx
c0024209:	6a 09                	push   0x9
c002420b:	68 1f 2c 03 c0       	push   0xc0032c1f
c0024210:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024217:	50                   	push   eax
c0024218:	e8 63 c1 fd ff       	call   c0000380 <memcmp>
c002421d:	83 c4 10             	add    esp,0x10
c0024220:	85 c0                	test   eax,eax
c0024222:	75 1a                	jne    c002423e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f7>
c0024224:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0024227:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002422a:	89 74 84 50          	mov    DWORD PTR [esp+eax*4+0x50],esi
c002422e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024231:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0024238:	89 c8                	mov    eax,ecx
c002423a:	40                   	inc    eax
c002423b:	89 04 24             	mov    DWORD PTR [esp],eax
c002423e:	50                   	push   eax
c002423f:	50                   	push   eax
c0024240:	68 eb 2b 03 c0       	push   0xc0032beb
c0024245:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002424c:	50                   	push   eax
c002424d:	e8 2e c5 fd ff       	call   c0000780 <strcmp>
c0024252:	83 c4 10             	add    esp,0x10
c0024255:	85 c0                	test   eax,eax
c0024257:	75 0b                	jne    c0024264 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x31d>
c0024259:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c002425d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024260:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024264:	50                   	push   eax
c0024265:	50                   	push   eax
c0024266:	68 f3 2b 03 c0       	push   0xc0032bf3
c002426b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024272:	50                   	push   eax
c0024273:	e8 08 c5 fd ff       	call   c0000780 <strcmp>
c0024278:	83 c4 10             	add    esp,0x10
c002427b:	85 c0                	test   eax,eax
c002427d:	75 0b                	jne    c002428a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x343>
c002427f:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
c0024283:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0024286:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002428a:	66 ff 44 24 14       	inc    WORD PTR [esp+0x14]
c002428f:	e9 d7 fe ff ff       	jmp    c002416b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x224>
c0024294:	50                   	push   eax
c0024295:	31 d2                	xor    edx,edx
c0024297:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002429b:	52                   	push   edx
c002429c:	50                   	push   eax
c002429d:	53                   	push   ebx
c002429e:	e8 6b 62 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c00242a3:	58                   	pop    eax
c00242a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00242a8:	e8 36 21 ff ff       	call   c00163e3 <malloc>
c00242ad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00242af:	31 d2                	xor    edx,edx
c00242b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00242b5:	58                   	pop    eax
c00242b6:	8d 74 24 54          	lea    esi,[esp+0x54]
c00242ba:	56                   	push   esi
c00242bb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00242bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00242c3:	52                   	push   edx
c00242c4:	50                   	push   eax
c00242c5:	53                   	push   ebx
c00242c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242c9:	83 c4 14             	add    esp,0x14
c00242cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00242d0:	e8 0e 21 ff ff       	call   c00163e3 <malloc>
c00242d5:	31 d2                	xor    edx,edx
c00242d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00242db:	83 c4 0c             	add    esp,0xc
c00242de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00242e2:	52                   	push   edx
c00242e3:	50                   	push   eax
c00242e4:	53                   	push   ebx
c00242e5:	e8 24 62 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c00242ea:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00242ec:	31 d2                	xor    edx,edx
c00242ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00242f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00242f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242f9:	52                   	push   edx
c00242fa:	50                   	push   eax
c00242fb:	53                   	push   ebx
c00242fc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242ff:	83 c4 20             	add    esp,0x20
c0024302:	0f b6 44 24 37       	movzx  eax,BYTE PTR [esp+0x37]
c0024307:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002430f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024313:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0024317:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002431a:	0f 84 2b 03 00 00    	je     c002464b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x704>
c0024320:	8b 84 bc 50 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x150]
c0024327:	31 d2                	xor    edx,edx
c0024329:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002432d:	c1 e8 03             	shr    eax,0x3
c0024330:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0024334:	51                   	push   ecx
c0024335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024339:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c002433d:	52                   	push   edx
c002433e:	50                   	push   eax
c002433f:	53                   	push   ebx
c0024340:	e8 c9 61 ff ff       	call   c001a50e <File::seek(unsigned long long)>
c0024345:	5e                   	pop    esi
c0024346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002434a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0024351:	e8 8d 20 ff ff       	call   c00163e3 <malloc>
c0024356:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0024358:	31 d2                	xor    edx,edx
c002435a:	89 c7                	mov    edi,eax
c002435c:	58                   	pop    eax
c002435d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0024361:	50                   	push   eax
c0024362:	57                   	push   edi
c0024363:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024367:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002436e:	52                   	push   edx
c002436f:	50                   	push   eax
c0024370:	53                   	push   ebx
c0024371:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024374:	83 c4 20             	add    esp,0x20
c0024377:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002437f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024383:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c0024387:	0f 8d a5 02 00 00    	jge    c0024632 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6eb>
c002438d:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0024392:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024396:	8b 04 c7             	mov    eax,DWORD PTR [edi+eax*8]
c0024399:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002439d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00243a1:	8b 44 c7 04          	mov    eax,DWORD PTR [edi+eax*8+0x4]
c00243a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00243a9:	c1 e8 08             	shr    eax,0x8
c00243ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00243b0:	89 c2                	mov    edx,eax
c00243b2:	c1 e2 04             	shl    edx,0x4
c00243b5:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
c00243b9:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00243bc:	85 f6                	test   esi,esi
c00243be:	0f 85 cf 00 00 00    	jne    c0024493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00243c4:	83 ec 0c             	sub    esp,0xc
c00243c7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00243cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243cf:	03 02                	add    eax,DWORD PTR [edx]
c00243d1:	50                   	push   eax
c00243d2:	e8 63 f8 ff ff       	call   c0023c3a <Thr::getAddressOfKernelSymbol(char const*)>
c00243d7:	83 c4 10             	add    esp,0x10
c00243da:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00243de:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00243e3:	85 c0                	test   eax,eax
c00243e5:	89 c6                	mov    esi,eax
c00243e7:	0f 85 a6 00 00 00    	jne    c0024493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c00243ed:	83 ec 0c             	sub    esp,0xc
c00243f0:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00243f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00243f8:	03 02                	add    eax,DWORD PTR [edx]
c00243fa:	50                   	push   eax
c00243fb:	e8 8c bf ff ff       	call   c002038c <KeResolveCompatibilitySymbol(char*)>
c0024400:	83 c4 10             	add    esp,0x10
c0024403:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024407:	85 c0                	test   eax,eax
c0024409:	89 c6                	mov    esi,eax
c002440b:	0f 85 82 00 00 00    	jne    c0024493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54c>
c0024411:	50                   	push   eax
c0024412:	50                   	push   eax
c0024413:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024417:	03 02                	add    eax,DWORD PTR [edx]
c0024419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002441d:	50                   	push   eax
c002441e:	68 29 2c 03 c0       	push   0xc0032c29
c0024423:	e8 f2 4d ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0024428:	58                   	pop    eax
c0024429:	5a                   	pop    edx
c002442a:	68 43 2c 03 c0       	push   0xc0032c43
c002442f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024436:	51                   	push   ecx
c0024437:	e8 14 c2 fd ff       	call   c0000650 <strcpy>
c002443c:	59                   	pop    ecx
c002443d:	58                   	pop    eax
c002443e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024446:	03 02                	add    eax,DWORD PTR [edx]
c0024448:	50                   	push   eax
c0024449:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024450:	51                   	push   ecx
c0024451:	e8 1a c4 fd ff       	call   c0000870 <strcat>
c0024456:	58                   	pop    eax
c0024457:	5a                   	pop    edx
c0024458:	68 dd 2c 03 c0       	push   0xc0032cdd
c002445d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024464:	51                   	push   ecx
c0024465:	e8 06 c4 fd ff       	call   c0000870 <strcat>
c002446a:	83 c4 10             	add    esp,0x10
c002446d:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024472:	0f 84 77 01 00 00    	je     c00245ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024478:	83 ec 0c             	sub    esp,0xc
c002447b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0024482:	51                   	push   ecx
c0024483:	e8 1a bd ff ff       	call   c00201a2 <KePanic(char const*)>
c0024488:	83 c4 10             	add    esp,0x10
c002448b:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c002448f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024493:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0024498:	83 f8 01             	cmp    eax,0x1
c002449b:	0f 85 9b 00 00 00    	jne    c002453c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f5>
c00244a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244a5:	8b 94 24 74 03 00 00 	mov    edx,DWORD PTR [esp+0x374]
c00244ac:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c00244b0:	01 d0                	add    eax,edx
c00244b2:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c00244ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00244be:	0f 94 c0             	sete   al
c00244c1:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c00244c9:	0f 94 c1             	sete   cl
c00244cc:	09 c1                	or     ecx,eax
c00244ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244d2:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00244d7:	0f b6 c9             	movzx  ecx,cl
c00244da:	8b 00                	mov    eax,DWORD PTR [eax]
c00244dc:	74 41                	je     c002451f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d8>
c00244de:	8d 14 06             	lea    edx,[esi+eax*1]
c00244e1:	85 c9                	test   ecx,ecx
c00244e3:	75 15                	jne    c00244fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c00244e5:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00244e9:	66 83 f8 0c          	cmp    ax,0xc
c00244ed:	76 05                	jbe    c00244f4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c00244ef:	b8 0c 00 00 00       	mov    eax,0xc
c00244f4:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c00244f8:	76 37                	jbe    c0024531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c00244fa:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00244ff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0024503:	0f 84 e6 00 00 00    	je     c00245ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0024509:	83 ec 0c             	sub    esp,0xc
c002450c:	68 5a 2c 03 c0       	push   0xc0032c5a
c0024511:	e8 8c bc ff ff       	call   c00201a2 <KePanic(char const*)>
c0024516:	83 c4 10             	add    esp,0x10
c0024519:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002451d:	eb 12                	jmp    c0024531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002451f:	01 c2                	add    edx,eax
c0024521:	85 c9                	test   ecx,ecx
c0024523:	75 0c                	jne    c0024531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c0024525:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0024529:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c002452d:	77 02                	ja     c0024531 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ea>
c002452f:	01 f2                	add    edx,esi
c0024531:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024535:	89 10                	mov    DWORD PTR [eax],edx
c0024537:	e9 ed 00 00 00       	jmp    c0024629 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c002453c:	83 f8 02             	cmp    eax,0x2
c002453f:	0f 85 81 00 00 00    	jne    c00245c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67f>
c0024545:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c002454c:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0024550:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0024554:	81 7c 24 10 01 01 00 00 	cmp    DWORD PTR [esp+0x10],0x101
c002455c:	74 21                	je     c002457f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c002455e:	81 7c 24 10 01 04 00 00 	cmp    DWORD PTR [esp+0x10],0x401
c0024566:	74 17                	je     c002457f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x638>
c0024568:	0f b7 4d 30          	movzx  ecx,WORD PTR [ebp+0x30]
c002456c:	ba 0a 00 00 00       	mov    edx,0xa
c0024571:	83 f9 0e             	cmp    ecx,0xe
c0024574:	77 03                	ja     c0024579 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0024576:	8d 51 fc             	lea    edx,[ecx-0x4]
c0024579:	3b 54 24 28          	cmp    edx,DWORD PTR [esp+0x28]
c002457d:	76 1f                	jbe    c002459e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x657>
c002457f:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0024584:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024588:	74 65                	je     c00245ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c002458a:	83 ec 0c             	sub    esp,0xc
c002458d:	68 76 2c 03 c0       	push   0xc0032c76
c0024592:	e8 0b bc ff ff       	call   c00201a2 <KePanic(char const*)>
c0024597:	83 c4 10             	add    esp,0x10
c002459a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002459e:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00245a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00245a5:	74 15                	je     c00245bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c00245a7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00245ab:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c00245b2:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00245b6:	01 d1                	add    ecx,edx
c00245b8:	01 ce                	add    esi,ecx
c00245ba:	eb 06                	jmp    c00245c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67b>
c00245bc:	2b 54 24 24          	sub    edx,DWORD PTR [esp+0x24]
c00245c0:	01 d6                	add    esi,edx
c00245c2:	89 30                	mov    DWORD PTR [eax],esi
c00245c4:	eb 63                	jmp    c0024629 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00245c6:	56                   	push   esi
c00245c7:	56                   	push   esi
c00245c8:	50                   	push   eax
c00245c9:	68 92 2c 03 c0       	push   0xc0032c92
c00245ce:	e8 47 4c ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00245d3:	83 c4 10             	add    esp,0x10
c00245d6:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00245db:	74 12                	je     c00245ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c00245dd:	83 ec 0c             	sub    esp,0xc
c00245e0:	68 9d 2c 03 c0       	push   0xc0032c9d
c00245e5:	e8 b8 bb ff ff       	call   c00201a2 <KePanic(char const*)>
c00245ea:	83 c4 10             	add    esp,0x10
c00245ed:	eb 3a                	jmp    c0024629 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e2>
c00245ef:	83 ec 0c             	sub    esp,0xc
c00245f2:	53                   	push   ebx
c00245f3:	e8 b6 5e ff ff       	call   c001a4ae <File::close()>
c00245f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245fd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024600:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024603:	e8 eb 1d ff ff       	call   c00163f3 <free>
c0024608:	59                   	pop    ecx
c0024609:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002460d:	e8 e1 1d ff ff       	call   c00163f3 <free>
c0024612:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024615:	e8 d9 1d ff ff       	call   c00163f3 <free>
c002461a:	5b                   	pop    ebx
c002461b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002461f:	e8 cf 1d ff ff       	call   c00163f3 <free>
c0024624:	83 c4 10             	add    esp,0x10
c0024627:	eb 1e                	jmp    c0024647 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0024629:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c002462d:	e9 4d fd ff ff       	jmp    c002437f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x438>
c0024632:	83 ec 0c             	sub    esp,0xc
c0024635:	57                   	push   edi
c0024636:	e8 b8 1d ff ff       	call   c00163f3 <free>
c002463b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c002463f:	83 c4 10             	add    esp,0x10
c0024642:	e9 cc fc ff ff       	jmp    c0024313 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3cc>
c0024647:	31 c0                	xor    eax,eax
c0024649:	eb 32                	jmp    c002467d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x736>
c002464b:	83 ec 0c             	sub    esp,0xc
c002464e:	53                   	push   ebx
c002464f:	e8 5a 5e ff ff       	call   c001a4ae <File::close()>
c0024654:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024659:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002465c:	58                   	pop    eax
c002465d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024661:	e8 8d 1d ff ff       	call   c00163f3 <free>
c0024666:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0024669:	e8 85 1d ff ff       	call   c00163f3 <free>
c002466e:	5a                   	pop    edx
c002466f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024673:	e8 7b 1d ff ff       	call   c00163f3 <free>
c0024678:	83 c4 10             	add    esp,0x10
c002467b:	b0 01                	mov    al,0x1
c002467d:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024683:	5b                   	pop    ebx
c0024684:	5e                   	pop    esi
c0024685:	5f                   	pop    edi
c0024686:	5d                   	pop    ebp
c0024687:	c3                   	ret    

c0024688 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0024688:	56                   	push   esi
c0024689:	31 d2                	xor    edx,edx
c002468b:	53                   	push   ebx
c002468c:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024692:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024696:	39 d3                	cmp    ebx,edx
c0024698:	7e 1b                	jle    c00246b5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c002469a:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c00246a1:	39 c8                	cmp    eax,ecx
c00246a3:	77 0d                	ja     c00246b2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00246a5:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00246ac:	01 c6                	add    esi,eax
c00246ae:	39 ce                	cmp    esi,ecx
c00246b0:	77 05                	ja     c00246b7 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00246b2:	42                   	inc    edx
c00246b3:	eb e1                	jmp    c0024696 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00246b5:	31 c0                	xor    eax,eax
c00246b7:	5b                   	pop    ebx
c00246b8:	5e                   	pop    esi
c00246b9:	c3                   	ret    

c00246ba <Thr::getDriverNameFromAddress(unsigned long)>:
c00246ba:	53                   	push   ebx
c00246bb:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00246c1:	31 c0                	xor    eax,eax
c00246c3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246c7:	39 c3                	cmp    ebx,eax
c00246c9:	7e 22                	jle    c00246ed <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00246cb:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00246d2:	39 ca                	cmp    edx,ecx
c00246d4:	77 14                	ja     c00246ea <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246d6:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00246dd:	39 ca                	cmp    edx,ecx
c00246df:	76 09                	jbe    c00246ea <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246e1:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00246e8:	eb 05                	jmp    c00246ef <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00246ea:	40                   	inc    eax
c00246eb:	eb da                	jmp    c00246c7 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00246ed:	31 c0                	xor    eax,eax
c00246ef:	5b                   	pop    ebx
c00246f0:	c3                   	ret    

c00246f1 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00246f1:	53                   	push   ebx
c00246f2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00246f6:	53                   	push   ebx
c00246f7:	e8 8c ff ff ff       	call   c0024688 <Thr::getDriverBaseFromAddress(unsigned long)>
c00246fc:	5a                   	pop    edx
c00246fd:	31 d2                	xor    edx,edx
c00246ff:	85 c0                	test   eax,eax
c0024701:	74 04                	je     c0024707 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0024703:	89 da                	mov    edx,ebx
c0024705:	29 c2                	sub    edx,eax
c0024707:	5b                   	pop    ebx
c0024708:	89 d0                	mov    eax,edx
c002470a:	c3                   	ret    

c002470b <Thr::loadDLL(char const*, bool)>:
c002470b:	55                   	push   ebp
c002470c:	57                   	push   edi
c002470d:	56                   	push   esi
c002470e:	53                   	push   ebx
c002470f:	81 ec 34 01 00 00    	sub    esp,0x134
c0024715:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c002471c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0024723:	56                   	push   esi
c0024724:	68 b5 2c 03 c0       	push   0xc0032cb5
c0024729:	e8 ec 4a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002472e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0024735:	e8 a9 1c ff ff       	call   c00163e3 <malloc>
c002473a:	83 c4 0c             	add    esp,0xc
c002473d:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0024743:	56                   	push   esi
c0024744:	50                   	push   eax
c0024745:	89 c3                	mov    ebx,eax
c0024747:	e8 e6 5c ff ff       	call   c001a432 <File::File(char const*, Process*)>
c002474c:	83 c4 10             	add    esp,0x10
c002474f:	85 db                	test   ebx,ebx
c0024751:	75 3c                	jne    c002478f <Thr::loadDLL(char const*, bool)+0x84>
c0024753:	89 e8                	mov    eax,ebp
c0024755:	84 c0                	test   al,al
c0024757:	0f 84 02 02 00 00    	je     c002495f <Thr::loadDLL(char const*, bool)+0x254>
c002475d:	50                   	push   eax
c002475e:	50                   	push   eax
c002475f:	68 c6 2c 03 c0       	push   0xc0032cc6
c0024764:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0024768:	57                   	push   edi
c0024769:	e8 e2 be fd ff       	call   c0000650 <strcpy>
c002476e:	58                   	pop    eax
c002476f:	5a                   	pop    edx
c0024770:	56                   	push   esi
c0024771:	57                   	push   edi
c0024772:	e8 f9 c0 fd ff       	call   c0000870 <strcat>
c0024777:	59                   	pop    ecx
c0024778:	58                   	pop    eax
c0024779:	68 dd 2c 03 c0       	push   0xc0032cdd
c002477e:	57                   	push   edi
c002477f:	e8 ec c0 fd ff       	call   c0000870 <strcat>
c0024784:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024787:	e8 16 ba ff ff       	call   c00201a2 <KePanic(char const*)>
c002478c:	83 c4 10             	add    esp,0x10
c002478f:	50                   	push   eax
c0024790:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0024794:	50                   	push   eax
c0024795:	8d 44 24 20          	lea    eax,[esp+0x20]
c0024799:	50                   	push   eax
c002479a:	53                   	push   ebx
c002479b:	e8 b2 5f ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c00247a0:	83 c4 10             	add    esp,0x10
c00247a3:	85 db                	test   ebx,ebx
c00247a5:	89 c7                	mov    edi,eax
c00247a7:	74 0c                	je     c00247b5 <Thr::loadDLL(char const*, bool)+0xaa>
c00247a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00247ab:	83 ec 0c             	sub    esp,0xc
c00247ae:	53                   	push   ebx
c00247af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247b2:	83 c4 10             	add    esp,0x10
c00247b5:	83 ec 0c             	sub    esp,0xc
c00247b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00247bd:	50                   	push   eax
c00247be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00247c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00247c6:	57                   	push   edi
c00247c7:	68 df 2c 03 c0       	push   0xc0032cdf
c00247cc:	e8 49 4a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00247d1:	83 c4 20             	add    esp,0x20
c00247d4:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00247d9:	75 0a                	jne    c00247e5 <Thr::loadDLL(char const*, bool)+0xda>
c00247db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247df:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00247e3:	75 3e                	jne    c0024823 <Thr::loadDLL(char const*, bool)+0x118>
c00247e5:	89 e8                	mov    eax,ebp
c00247e7:	31 db                	xor    ebx,ebx
c00247e9:	84 c0                	test   al,al
c00247eb:	0f 84 6e 01 00 00    	je     c002495f <Thr::loadDLL(char const*, bool)+0x254>
c00247f1:	50                   	push   eax
c00247f2:	50                   	push   eax
c00247f3:	68 00 2d 03 c0       	push   0xc0032d00
c00247f8:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00247fc:	53                   	push   ebx
c00247fd:	e8 4e be fd ff       	call   c0000650 <strcpy>
c0024802:	58                   	pop    eax
c0024803:	5a                   	pop    edx
c0024804:	56                   	push   esi
c0024805:	53                   	push   ebx
c0024806:	e8 65 c0 fd ff       	call   c0000870 <strcat>
c002480b:	59                   	pop    ecx
c002480c:	5f                   	pop    edi
c002480d:	68 dd 2c 03 c0       	push   0xc0032cdd
c0024812:	53                   	push   ebx
c0024813:	e8 58 c0 fd ff       	call   c0000870 <strcat>
c0024818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002481b:	e8 82 b9 ff ff       	call   c00201a2 <KePanic(char const*)>
c0024820:	83 c4 10             	add    esp,0x10
c0024823:	53                   	push   ebx
c0024824:	6a 03                	push   0x3
c0024826:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002482a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002482e:	05 ff 0f 00 00       	add    eax,0xfff
c0024833:	83 d2 00             	adc    edx,0x0
c0024836:	0f ac d0 0c          	shrd   eax,edx,0xc
c002483a:	50                   	push   eax
c002483b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024841:	e8 d0 3e ff ff       	call   c0018716 <VAS::allocatePages(int, int)>
c0024846:	89 c3                	mov    ebx,eax
c0024848:	58                   	pop    eax
c0024849:	5a                   	pop    edx
c002484a:	53                   	push   ebx
c002484b:	68 22 11 03 c0       	push   0xc0031122
c0024850:	e8 c5 49 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0024855:	89 34 24             	mov    DWORD PTR [esp],esi
c0024858:	e8 23 bd fd ff       	call   c0000580 <strlen>
c002485d:	8b 3d 00 fa 03 c0    	mov    edi,DWORD PTR ds:0xc003fa00
c0024863:	40                   	inc    eax
c0024864:	89 04 24             	mov    DWORD PTR [esp],eax
c0024867:	e8 77 1b ff ff       	call   c00163e3 <malloc>
c002486c:	59                   	pop    ecx
c002486d:	89 04 bd 20 fe 03 c0 	mov    DWORD PTR [edi*4-0x3ffc01e0],eax
c0024874:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024879:	5f                   	pop    edi
c002487a:	56                   	push   esi
c002487b:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024882:	e8 c9 bd fd ff       	call   c0000650 <strcpy>
c0024887:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c002488c:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c0024893:	8d 50 01             	lea    edx,[eax+0x1]
c0024896:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c002489c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00248a0:	83 c4 0c             	add    esp,0xc
c00248a3:	6a 01                	push   0x1
c00248a5:	53                   	push   ebx
c00248a6:	56                   	push   esi
c00248a7:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c00248ae:	e8 94 f6 ff ff       	call   c0023f47 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00248b3:	83 c4 10             	add    esp,0x10
c00248b6:	89 c7                	mov    edi,eax
c00248b8:	89 f8                	mov    eax,edi
c00248ba:	83 f0 01             	xor    eax,0x1
c00248bd:	84 c0                	test   al,al
c00248bf:	74 18                	je     c00248d9 <Thr::loadDLL(char const*, bool)+0x1ce>
c00248c1:	89 e8                	mov    eax,ebp
c00248c3:	84 c0                	test   al,al
c00248c5:	74 12                	je     c00248d9 <Thr::loadDLL(char const*, bool)+0x1ce>
c00248c7:	83 ec 0c             	sub    esp,0xc
c00248ca:	68 19 2d 03 c0       	push   0xc0032d19
c00248cf:	e8 ce b8 ff ff       	call   c00201a2 <KePanic(char const*)>
c00248d4:	83 c4 10             	add    esp,0x10
c00248d7:	eb 06                	jmp    c00248df <Thr::loadDLL(char const*, bool)+0x1d4>
c00248d9:	89 f8                	mov    eax,edi
c00248db:	84 c0                	test   al,al
c00248dd:	75 10                	jne    c00248ef <Thr::loadDLL(char const*, bool)+0x1e4>
c00248df:	83 ec 0c             	sub    esp,0xc
c00248e2:	68 38 2d 03 c0       	push   0xc0032d38
c00248e7:	e8 b6 b8 ff ff       	call   c00201a2 <KePanic(char const*)>
c00248ec:	83 c4 10             	add    esp,0x10
c00248ef:	31 f6                	xor    esi,esi
c00248f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00248f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00248f9:	05 ff 0f 00 00       	add    eax,0xfff
c00248fe:	83 d2 00             	adc    edx,0x0
c0024901:	0f ac d0 0c          	shrd   eax,edx,0xc
c0024905:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024909:	c1 ea 0c             	shr    edx,0xc
c002490c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024910:	ba 00 00 00 00       	mov    edx,0x0
c0024915:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0024919:	89 d0                	mov    eax,edx
c002491b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c002491f:	73 32                	jae    c0024953 <Thr::loadDLL(char const*, bool)+0x248>
c0024921:	50                   	push   eax
c0024922:	50                   	push   eax
c0024923:	89 f0                	mov    eax,esi
c0024925:	c1 e0 0c             	shl    eax,0xc
c0024928:	01 d8                	add    eax,ebx
c002492a:	50                   	push   eax
c002492b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024931:	e8 c4 38 ff ff       	call   c00181fa <VAS::getPageTableEntry(unsigned long)>
c0024936:	83 c4 10             	add    esp,0x10
c0024939:	8b 00                	mov    eax,DWORD PTR [eax]
c002493b:	a8 60                	test   al,0x60
c002493d:	75 11                	jne    c0024950 <Thr::loadDLL(char const*, bool)+0x245>
c002493f:	83 ec 0c             	sub    esp,0xc
c0024942:	25 00 f0 ff ff       	and    eax,0xfffff000
c0024947:	50                   	push   eax
c0024948:	e8 3c 1d ff ff       	call   c0016689 <Phys::freePage(unsigned long)>
c002494d:	83 c4 10             	add    esp,0x10
c0024950:	46                   	inc    esi
c0024951:	eb 9e                	jmp    c00248f1 <Thr::loadDLL(char const*, bool)+0x1e6>
c0024953:	89 f8                	mov    eax,edi
c0024955:	84 c0                	test   al,al
c0024957:	b8 00 00 00 00       	mov    eax,0x0
c002495c:	0f 44 d8             	cmove  ebx,eax
c002495f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0024965:	89 d8                	mov    eax,ebx
c0024967:	5b                   	pop    ebx
c0024968:	5e                   	pop    esi
c0024969:	5f                   	pop    edi
c002496a:	5d                   	pop    ebp
c002496b:	c3                   	ret    

c002496c <Thr::executeDLL(unsigned long, void*)>:
c002496c:	56                   	push   esi
c002496d:	53                   	push   ebx
c002496e:	52                   	push   edx
c002496f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024973:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024977:	85 db                	test   ebx,ebx
c0024979:	75 10                	jne    c002498b <Thr::executeDLL(unsigned long, void*)+0x1f>
c002497b:	83 ec 0c             	sub    esp,0xc
c002497e:	68 54 2d 03 c0       	push   0xc0032d54
c0024983:	e8 1a b8 ff ff       	call   c00201a2 <KePanic(char const*)>
c0024988:	83 c4 10             	add    esp,0x10
c002498b:	50                   	push   eax
c002498c:	50                   	push   eax
c002498d:	53                   	push   ebx
c002498e:	68 7e 2d 03 c0       	push   0xc0032d7e
c0024993:	e8 82 48 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0024998:	89 d8                	mov    eax,ebx
c002499a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c002499e:	83 c4 14             	add    esp,0x14
c00249a1:	5b                   	pop    ebx
c00249a2:	5e                   	pop    esi
c00249a3:	ff e0                	jmp    eax
c00249a5:	66 90                	xchg   ax,ax
c00249a7:	90                   	nop

c00249a8 <userModeEntryPoint(void*)>:
c00249a8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00249ad:	83 e8 01             	sub    eax,0x1
c00249b0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00249b5:	75 01                	jne    c00249b8 <userModeEntryPoint(void*)+0x10>
c00249b7:	fb                   	sti    
c00249b8:	fb                   	sti    
c00249b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00249be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00249c1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00249c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00249cb:	e9 6f b8 fd ff       	jmp    c000023f <goToUsermode>

c00249d0 <changeTSS>:
c00249d0:	83 ec 14             	sub    esp,0x14
c00249d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00249d8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00249db:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00249e0:	c1 e2 15             	shl    edx,0x15
c00249e3:	29 d0                	sub    eax,edx
c00249e5:	50                   	push   eax
c00249e6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00249eb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00249f1:	05 7c 11 00 00       	add    eax,0x117c
c00249f6:	50                   	push   eax
c00249f7:	e8 50 2e ff ff       	call   c001784c <TSS::setESP(unsigned long)>
c00249fc:	83 c4 1c             	add    esp,0x1c
c00249ff:	c3                   	ret    

c0024a00 <switchToThread(ThreadControlBlock*)>:
c0024a00:	57                   	push   edi
c0024a01:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0024a07:	56                   	push   esi
c0024a08:	53                   	push   ebx
c0024a09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024a0d:	85 c9                	test   ecx,ecx
c0024a0f:	0f 85 8b 00 00 00    	jne    c0024aa0 <switchToThread(ThreadControlBlock*)+0xa0>
c0024a15:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0024a19:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024a1f:	74 7b                	je     c0024a9c <switchToThread(ThreadControlBlock*)+0x9c>
c0024a21:	b8 00 04 00 00       	mov    eax,0x400
c0024a26:	29 d0                	sub    eax,edx
c0024a28:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024a2b:	d1 f8                	sar    eax,1
c0024a2d:	01 d0                	add    eax,edx
c0024a2f:	90                   	nop
c0024a30:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024a33:	e8 70 25 00 00       	call   c0026fa8 <HalQueryPerformanceCounter()>
c0024a38:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024a3d:	89 c6                	mov    esi,eax
c0024a3f:	89 d7                	mov    edi,edx
c0024a41:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024a47:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024a4c:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024a52:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024a58:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024a5e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024a64:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024a6a:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024a70:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024a73:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024a76:	01 c6                	add    esi,eax
c0024a78:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024a7b:	11 d7                	adc    edi,edx
c0024a7d:	83 ec 0c             	sub    esp,0xc
c0024a80:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024a83:	53                   	push   ebx
c0024a84:	e8 ee b7 fd ff       	call   c0000277 <switchToThreadASM>
c0024a89:	0f 20 c0             	mov    eax,cr0
c0024a8c:	83 c8 08             	or     eax,0x8
c0024a8f:	0f 22 c0             	mov    cr0,eax
c0024a92:	83 c4 10             	add    esp,0x10
c0024a95:	5b                   	pop    ebx
c0024a96:	5e                   	pop    esi
c0024a97:	5f                   	pop    edi
c0024a98:	c3                   	ret    
c0024a99:	8d 76 00             	lea    esi,[esi+0x0]
c0024a9c:	31 c0                	xor    eax,eax
c0024a9e:	eb 90                	jmp    c0024a30 <switchToThread(ThreadControlBlock*)+0x30>
c0024aa0:	5b                   	pop    ebx
c0024aa1:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024aab:	5e                   	pop    esi
c0024aac:	5f                   	pop    edi
c0024aad:	c3                   	ret    
c0024aae:	66 90                	xchg   ax,ax

c0024ab0 <Process::addArgs(char**)>:
c0024ab0:	57                   	push   edi
c0024ab1:	56                   	push   esi
c0024ab2:	53                   	push   ebx
c0024ab3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0024ab7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024abb:	85 f6                	test   esi,esi
c0024abd:	c7 87 16 05 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x516],0x0
c0024ac7:	74 4f                	je     c0024b18 <Process::addArgs(char**)+0x68>
c0024ac9:	8b 06                	mov    eax,DWORD PTR [esi]
c0024acb:	85 c0                	test   eax,eax
c0024acd:	74 49                	je     c0024b18 <Process::addArgs(char**)+0x68>
c0024acf:	31 db                	xor    ebx,ebx
c0024ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0024ad4:	83 ec 0c             	sub    esp,0xc
c0024ad7:	50                   	push   eax
c0024ad8:	e8 a3 ba fd ff       	call   c0000580 <strlen>
c0024add:	83 c0 01             	add    eax,0x1
c0024ae0:	89 04 24             	mov    DWORD PTR [esp],eax
c0024ae3:	e8 fb 18 ff ff       	call   c00163e3 <malloc>
c0024ae8:	89 84 9f 1a 05 00 00 	mov    DWORD PTR [edi+ebx*4+0x51a],eax
c0024aef:	5a                   	pop    edx
c0024af0:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c0024af3:	83 c3 01             	add    ebx,0x1
c0024af6:	59                   	pop    ecx
c0024af7:	52                   	push   edx
c0024af8:	50                   	push   eax
c0024af9:	e8 52 bb fd ff       	call   c0000650 <strcpy>
c0024afe:	8b 8f 16 05 00 00    	mov    ecx,DWORD PTR [edi+0x516]
c0024b04:	83 c4 10             	add    esp,0x10
c0024b07:	83 c1 01             	add    ecx,0x1
c0024b0a:	89 8f 16 05 00 00    	mov    DWORD PTR [edi+0x516],ecx
c0024b10:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0024b13:	85 c0                	test   eax,eax
c0024b15:	75 bd                	jne    c0024ad4 <Process::addArgs(char**)+0x24>
c0024b17:	90                   	nop
c0024b18:	5b                   	pop    ebx
c0024b19:	5e                   	pop    esi
c0024b1a:	5f                   	pop    edi
c0024b1b:	c3                   	ret    

c0024b1c <Process::Process(char const*, Process*, char**)>:
c0024b1c:	56                   	push   esi
c0024b1d:	53                   	push   ebx
c0024b1e:	83 ec 14             	sub    esp,0x14
c0024b21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b25:	05 0c 02 00 00       	add    eax,0x20c
c0024b2a:	bb 07 00 00 00       	mov    ebx,0x7
c0024b2f:	89 c6                	mov    esi,eax
c0024b31:	8d 76 00             	lea    esi,[esi+0x0]
c0024b34:	85 db                	test   ebx,ebx
c0024b36:	78 14                	js     c0024b4c <Process::Process(char const*, Process*, char**)+0x30>
c0024b38:	83 ec 0c             	sub    esp,0xc
c0024b3b:	56                   	push   esi
c0024b3c:	e8 d7 a3 00 00       	call   c002ef18 <ThreadControlBlock::ThreadControlBlock()>
c0024b41:	83 c4 10             	add    esp,0x10
c0024b44:	83 c6 5f             	add    esi,0x5f
c0024b47:	83 eb 01             	sub    ebx,0x1
c0024b4a:	eb e8                	jmp    c0024b34 <Process::Process(char const*, Process*, char**)+0x18>
c0024b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b50:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b5b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024b62:	83 ec 0c             	sub    esp,0xc
c0024b65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b69:	e8 0e b4 ff ff       	call   c001ff7c <KeNewProcessEnv(Process*)>
c0024b6e:	83 c4 10             	add    esp,0x10
c0024b71:	89 c2                	mov    edx,eax
c0024b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b77:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024b7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b81:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024b8a:	a1 a0 43 03 c0       	mov    eax,ds:0xc00343a0
c0024b8f:	8d 50 01             	lea    edx,[eax+0x1]
c0024b92:	89 15 a0 43 03 c0    	mov    DWORD PTR ds:0xc00343a0,edx
c0024b98:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024b9c:	89 02                	mov    DWORD PTR [edx],eax
c0024b9e:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024ba6:	83 ec 0c             	sub    esp,0xc
c0024ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024bad:	e8 31 18 ff ff       	call   c00163e3 <malloc>
c0024bb2:	83 c4 10             	add    esp,0x10
c0024bb5:	89 c3                	mov    ebx,eax
c0024bb7:	83 ec 08             	sub    esp,0x8
c0024bba:	6a 00                	push   0x0
c0024bbc:	53                   	push   ebx
c0024bbd:	e8 a0 3d ff ff       	call   c0018962 <VAS::VAS(bool)>
c0024bc2:	83 c4 10             	add    esp,0x10
c0024bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bc9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bd3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024bdd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024be1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024be5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024beb:	e8 df bd ff ff       	call   c00209cf <KeInitSignals()>
c0024bf0:	89 c2                	mov    edx,eax
c0024bf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bf6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c00:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024c06:	85 c0                	test   eax,eax
c0024c08:	74 42                	je     c0024c4c <Process::Process(char const*, Process*, char**)+0x130>
c0024c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c0e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024c14:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c1e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c28:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024c2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024c34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c38:	05 0c 01 00 00       	add    eax,0x10c
c0024c3d:	83 ec 08             	sub    esp,0x8
c0024c40:	52                   	push   edx
c0024c41:	50                   	push   eax
c0024c42:	e8 09 ba fd ff       	call   c0000650 <strcpy>
c0024c47:	83 c4 10             	add    esp,0x10
c0024c4a:	eb 64                	jmp    c0024cb0 <Process::Process(char const*, Process*, char**)+0x194>
c0024c4c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024c54:	83 ec 0c             	sub    esp,0xc
c0024c57:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024c5b:	e8 83 17 ff ff       	call   c00163e3 <malloc>
c0024c60:	83 c4 10             	add    esp,0x10
c0024c63:	89 c3                	mov    ebx,eax
c0024c65:	83 ec 08             	sub    esp,0x8
c0024c68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c6c:	53                   	push   ebx
c0024c6d:	e8 0a 29 ff ff       	call   c001757c <VgaText::VgaText(char const*)>
c0024c72:	83 c4 10             	add    esp,0x10
c0024c75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c79:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024c7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024c89:	83 ec 0c             	sub    esp,0xc
c0024c8c:	50                   	push   eax
c0024c8d:	e8 98 21 ff ff       	call   c0016e2a <addToTerminalCycle(VgaText*)>
c0024c92:	83 c4 10             	add    esp,0x10
c0024c95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c99:	05 0c 01 00 00       	add    eax,0x10c
c0024c9e:	83 ec 08             	sub    esp,0x8
c0024ca1:	68 9d 2d 03 c0       	push   0xc0032d9d
c0024ca6:	50                   	push   eax
c0024ca7:	e8 a4 b9 fd ff       	call   c0000650 <strcpy>
c0024cac:	83 c4 10             	add    esp,0x10
c0024caf:	90                   	nop
c0024cb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cb4:	83 c0 0c             	add    eax,0xc
c0024cb7:	83 ec 08             	sub    esp,0x8
c0024cba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cbe:	50                   	push   eax
c0024cbf:	e8 8c b9 fd ff       	call   c0000650 <strcpy>
c0024cc4:	83 c4 10             	add    esp,0x10
c0024cc7:	83 ec 08             	sub    esp,0x8
c0024cca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024cce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cd2:	e8 d9 fd ff ff       	call   c0024ab0 <Process::addArgs(char**)>
c0024cd7:	83 c4 10             	add    esp,0x10
c0024cda:	83 ec 08             	sub    esp,0x8
c0024cdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ce5:	e8 1e ed ff ff       	call   c0023a08 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024cea:	83 c4 10             	add    esp,0x10
c0024ced:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024cf1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024cf5:	83 f0 01             	xor    eax,0x1
c0024cf8:	88 c2                	mov    dl,al
c0024cfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024cfe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024d04:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024d09:	83 ec 04             	sub    esp,0x4
c0024d0c:	50                   	push   eax
c0024d0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d11:	68 f4 2d 03 c0       	push   0xc0032df4
c0024d16:	e8 ff 44 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0024d1b:	83 c4 10             	add    esp,0x10
c0024d1e:	90                   	nop
c0024d1f:	83 c4 14             	add    esp,0x14
c0024d22:	5b                   	pop    ebx
c0024d23:	5e                   	pop    esi
c0024d24:	c3                   	ret    
c0024d25:	90                   	nop
c0024d26:	66 90                	xchg   ax,ax

c0024d28 <Process::Process(bool, char const*, Process*, char**)>:
c0024d28:	56                   	push   esi
c0024d29:	53                   	push   ebx
c0024d2a:	83 ec 24             	sub    esp,0x24
c0024d2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024d31:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024d35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d39:	05 0c 02 00 00       	add    eax,0x20c
c0024d3e:	bb 07 00 00 00       	mov    ebx,0x7
c0024d43:	89 c6                	mov    esi,eax
c0024d45:	8d 76 00             	lea    esi,[esi+0x0]
c0024d48:	85 db                	test   ebx,ebx
c0024d4a:	78 14                	js     c0024d60 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024d4c:	83 ec 0c             	sub    esp,0xc
c0024d4f:	56                   	push   esi
c0024d50:	e8 c3 a1 00 00       	call   c002ef18 <ThreadControlBlock::ThreadControlBlock()>
c0024d55:	83 c4 10             	add    esp,0x10
c0024d58:	83 c6 5f             	add    esi,0x5f
c0024d5b:	83 eb 01             	sub    ebx,0x1
c0024d5e:	eb e8                	jmp    c0024d48 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024d60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d64:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024d6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d6f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024d76:	83 ec 0c             	sub    esp,0xc
c0024d79:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d7d:	e8 fa b1 ff ff       	call   c001ff7c <KeNewProcessEnv(Process*)>
c0024d82:	83 c4 10             	add    esp,0x10
c0024d85:	89 c2                	mov    edx,eax
c0024d87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d8b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024d91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d95:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024d9e:	a1 a0 43 03 c0       	mov    eax,ds:0xc00343a0
c0024da3:	8d 50 01             	lea    edx,[eax+0x1]
c0024da6:	89 15 a0 43 03 c0    	mov    DWORD PTR ds:0xc00343a0,edx
c0024dac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024db0:	89 02                	mov    DWORD PTR [edx],eax
c0024db2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024dba:	83 ec 0c             	sub    esp,0xc
c0024dbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024dc1:	e8 1d 16 ff ff       	call   c00163e3 <malloc>
c0024dc6:	83 c4 10             	add    esp,0x10
c0024dc9:	89 c3                	mov    ebx,eax
c0024dcb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024dd0:	83 ec 08             	sub    esp,0x8
c0024dd3:	50                   	push   eax
c0024dd4:	53                   	push   ebx
c0024dd5:	e8 88 3b ff ff       	call   c0018962 <VAS::VAS(bool)>
c0024dda:	83 c4 10             	add    esp,0x10
c0024ddd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024de1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024deb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024df5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024df9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024dfd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024e03:	e8 c7 bb ff ff       	call   c00209cf <KeInitSignals()>
c0024e08:	89 c2                	mov    edx,eax
c0024e0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e0e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024e14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e18:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e1e:	85 c0                	test   eax,eax
c0024e20:	74 42                	je     c0024e64 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024e22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e26:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e2c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e36:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024e3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e46:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024e4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e50:	05 0c 01 00 00       	add    eax,0x10c
c0024e55:	83 ec 08             	sub    esp,0x8
c0024e58:	52                   	push   edx
c0024e59:	50                   	push   eax
c0024e5a:	e8 f1 b7 fd ff       	call   c0000650 <strcpy>
c0024e5f:	83 c4 10             	add    esp,0x10
c0024e62:	eb 64                	jmp    c0024ec8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024e64:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024e6c:	83 ec 0c             	sub    esp,0xc
c0024e6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024e73:	e8 6b 15 ff ff       	call   c00163e3 <malloc>
c0024e78:	83 c4 10             	add    esp,0x10
c0024e7b:	89 c3                	mov    ebx,eax
c0024e7d:	83 ec 08             	sub    esp,0x8
c0024e80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024e84:	53                   	push   ebx
c0024e85:	e8 f2 26 ff ff       	call   c001757c <VgaText::VgaText(char const*)>
c0024e8a:	83 c4 10             	add    esp,0x10
c0024e8d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e91:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024e97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024ea1:	83 ec 0c             	sub    esp,0xc
c0024ea4:	50                   	push   eax
c0024ea5:	e8 80 1f ff ff       	call   c0016e2a <addToTerminalCycle(VgaText*)>
c0024eaa:	83 c4 10             	add    esp,0x10
c0024ead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eb1:	05 0c 01 00 00       	add    eax,0x10c
c0024eb6:	83 ec 08             	sub    esp,0x8
c0024eb9:	68 9d 2d 03 c0       	push   0xc0032d9d
c0024ebe:	50                   	push   eax
c0024ebf:	e8 8c b7 fd ff       	call   c0000650 <strcpy>
c0024ec4:	83 c4 10             	add    esp,0x10
c0024ec7:	90                   	nop
c0024ec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ecc:	83 c0 0c             	add    eax,0xc
c0024ecf:	83 ec 08             	sub    esp,0x8
c0024ed2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024ed6:	50                   	push   eax
c0024ed7:	e8 74 b7 fd ff       	call   c0000650 <strcpy>
c0024edc:	83 c4 10             	add    esp,0x10
c0024edf:	83 ec 08             	sub    esp,0x8
c0024ee2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024ee6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024eea:	e8 c1 fb ff ff       	call   c0024ab0 <Process::addArgs(char**)>
c0024eef:	83 c4 10             	add    esp,0x10
c0024ef2:	90                   	nop
c0024ef3:	83 c4 24             	add    esp,0x24
c0024ef6:	5b                   	pop    ebx
c0024ef7:	5e                   	pop    esi
c0024ef8:	c3                   	ret    
c0024ef9:	8d 76 00             	lea    esi,[esi+0x0]

c0024efc <taskStartupFunction>:
c0024efc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024f01:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024f04:	c3                   	ret    
c0024f05:	8d 76 00             	lea    esi,[esi+0x0]

c0024f08 <KeDisablePreemption()>:
c0024f08:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024f0d:	85 c0                	test   eax,eax
c0024f0f:	75 13                	jne    c0024f24 <KeDisablePreemption()+0x1c>
c0024f11:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024f17:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024f1e:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024f24:	83 c0 01             	add    eax,0x1
c0024f27:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024f2c:	c3                   	ret    
c0024f2d:	8d 76 00             	lea    esi,[esi+0x0]

c0024f30 <KeRestorePreemption()>:
c0024f30:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024f35:	83 e8 01             	sub    eax,0x1
c0024f38:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024f3d:	75 0d                	jne    c0024f4c <KeRestorePreemption()+0x1c>
c0024f3f:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0024f44:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0024f49:	8d 76 00             	lea    esi,[esi+0x0]
c0024f4c:	c3                   	ret    
c0024f4d:	90                   	nop
c0024f4e:	66 90                	xchg   ax,ax

c0024f50 <Process::createThread(void (*)(void*), void*, int)>:
c0024f50:	57                   	push   edi
c0024f51:	31 c9                	xor    ecx,ecx
c0024f53:	56                   	push   esi
c0024f54:	53                   	push   ebx
c0024f55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f59:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0024f60:	89 f2                	mov    edx,esi
c0024f62:	66 90                	xchg   ax,ax
c0024f64:	0f b7 c2             	movzx  eax,dx
c0024f67:	80 e2 01             	and    dl,0x1
c0024f6a:	74 14                	je     c0024f80 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0024f6c:	d1 f8                	sar    eax,1
c0024f6e:	83 c1 01             	add    ecx,0x1
c0024f71:	83 f9 10             	cmp    ecx,0x10
c0024f74:	89 c2                	mov    edx,eax
c0024f76:	75 ec                	jne    c0024f64 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0024f78:	31 db                	xor    ebx,ebx
c0024f7a:	89 d8                	mov    eax,ebx
c0024f7c:	5b                   	pop    ebx
c0024f7d:	5e                   	pop    esi
c0024f7e:	5f                   	pop    edi
c0024f7f:	c3                   	ret    
c0024f80:	b8 01 00 00 00       	mov    eax,0x1
c0024f85:	d3 e0                	shl    eax,cl
c0024f87:	09 c6                	or     esi,eax
c0024f89:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0024f90:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0024f93:	c1 e0 05             	shl    eax,0x5
c0024f96:	29 c8                	sub    eax,ecx
c0024f98:	01 d8                	add    eax,ebx
c0024f9a:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0024fa1:	75 0d                	jne    c0024fb0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0024fa3:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0024fad:	8d 76 00             	lea    esi,[esi+0x0]
c0024fb0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024fb6:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0024fb9:	83 ec 0c             	sub    esp,0xc
c0024fbc:	c1 e6 05             	shl    esi,0x5
c0024fbf:	29 ce                	sub    esi,ecx
c0024fc1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0024fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0024fc7:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0024fcd:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c0024fd3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0024fd9:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0024fe0:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0024fe6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024fea:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0024ff0:	89 ca                	mov    edx,ecx
c0024ff2:	f7 da                	neg    edx
c0024ff4:	c1 e2 15             	shl    edx,0x15
c0024ff7:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0024ffd:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0025003:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0025007:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0025011:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0025017:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002501b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025021:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c002502b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0025035:	68 00 01 00 00       	push   0x100
c002503a:	e8 a4 13 ff ff       	call   c00163e3 <malloc>
c002503f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0025042:	58                   	pop    eax
c0025043:	5a                   	pop    edx
c0025044:	53                   	push   ebx
c0025045:	68 ec 01 04 c0       	push   0xc00401ec
c002504a:	e8 61 9c 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002504f:	83 c4 10             	add    esp,0x10
c0025052:	89 d8                	mov    eax,ebx
c0025054:	5b                   	pop    ebx
c0025055:	5e                   	pop    esi
c0025056:	5f                   	pop    edi
c0025057:	c3                   	ret    

c0025058 <Process::createUserThread()>:
c0025058:	83 ec 0c             	sub    esp,0xc
c002505b:	68 80 00 00 00       	push   0x80
c0025060:	6a 00                	push   0x0
c0025062:	68 a8 49 02 c0       	push   0xc00249a8
c0025067:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002506b:	50                   	push   eax
c002506c:	e8 df fe ff ff       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c0025071:	83 c4 1c             	add    esp,0x1c
c0025074:	c3                   	ret    
c0025075:	8d 76 00             	lea    esi,[esi+0x0]

c0025078 <setupMultitasking(void (*)())>:
c0025078:	56                   	push   esi
c0025079:	53                   	push   ebx
c002507a:	83 ec 04             	sub    esp,0x4
c002507d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025081:	eb 11                	jmp    c0025094 <setupMultitasking(void (*)())+0x1c>
c0025083:	90                   	nop
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	68 ec 01 04 c0       	push   0xc00401ec
c002508c:	e8 63 9b 00 00       	call   c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025091:	83 c4 10             	add    esp,0x10
c0025094:	83 ec 0c             	sub    esp,0xc
c0025097:	68 ec 01 04 c0       	push   0xc00401ec
c002509c:	e8 2f 9b 00 00       	call   c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00250a1:	83 c4 10             	add    esp,0x10
c00250a4:	84 c0                	test   al,al
c00250a6:	74 dc                	je     c0025084 <setupMultitasking(void (*)())+0xc>
c00250a8:	83 ec 0c             	sub    esp,0xc
c00250ab:	68 24 07 00 00       	push   0x724
c00250b0:	e8 2e 13 ff ff       	call   c00163e3 <malloc>
c00250b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00250bc:	6a 00                	push   0x0
c00250be:	68 a1 2d 03 c0       	push   0xc0032da1
c00250c3:	6a 01                	push   0x1
c00250c5:	50                   	push   eax
c00250c6:	89 c3                	mov    ebx,eax
c00250c8:	e8 5b fc ff ff       	call   c0024d28 <Process::Process(bool, char const*, Process*, char**)>
c00250cd:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00250d3:	83 c4 14             	add    esp,0x14
c00250d6:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00250dc:	50                   	push   eax
c00250dd:	e8 9d 1f ff ff       	call   c001707f <setActiveTerminal(VgaText*)>
c00250e2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00250e9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00250f3:	83 c8 01             	or     eax,0x1
c00250f6:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00250fd:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0025103:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0025106:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0025110:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025116:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025120:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0025126:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0025130:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c002513a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025140:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025146:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025150:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c002515a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025161:	e8 7d 12 ff ff       	call   c00163e3 <malloc>
c0025166:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c002516c:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025172:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0025178:	5a                   	pop    edx
c0025179:	59                   	pop    ecx
c002517a:	68 9d 2d 03 c0       	push   0xc0032d9d
c002517f:	50                   	push   eax
c0025180:	e8 cb b4 fd ff       	call   c0000650 <strcpy>
c0025185:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c002518c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025190:	83 c4 14             	add    esp,0x14
c0025193:	5b                   	pop    ebx
c0025194:	5e                   	pop    esi
c0025195:	e9 cf b0 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c002519a:	66 90                	xchg   ax,ax

c002519c <schedule()>:
c002519c:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c00251a2:	85 d2                	test   edx,edx
c00251a4:	74 0e                	je     c00251b4 <schedule()+0x18>
c00251a6:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c00251b0:	c3                   	ret    
c00251b1:	8d 76 00             	lea    esi,[esi+0x0]
c00251b4:	53                   	push   ebx
c00251b5:	83 ec 14             	sub    esp,0x14
c00251b8:	68 ec 01 04 c0       	push   0xc00401ec
c00251bd:	e8 0e 9a 00 00       	call   c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00251c2:	83 c4 10             	add    esp,0x10
c00251c5:	84 c0                	test   al,al
c00251c7:	75 3f                	jne    c0025208 <schedule()+0x6c>
c00251c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00251ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00251d1:	83 fa 01             	cmp    edx,0x1
c00251d4:	74 3a                	je     c0025210 <schedule()+0x74>
c00251d6:	66 90                	xchg   ax,ax
c00251d8:	83 ec 0c             	sub    esp,0xc
c00251db:	68 ec 01 04 c0       	push   0xc00401ec
c00251e0:	e8 07 9a 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00251e5:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00251ec:	89 c3                	mov    ebx,eax
c00251ee:	e8 01 9a 00 00       	call   c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00251f3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00251fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251fd:	e8 fe f7 ff ff       	call   c0024a00 <switchToThread(ThreadControlBlock*)>
c0025202:	83 c4 10             	add    esp,0x10
c0025205:	8d 76 00             	lea    esi,[esi+0x0]
c0025208:	83 c4 08             	add    esp,0x8
c002520b:	5b                   	pop    ebx
c002520c:	c3                   	ret    
c002520d:	8d 76 00             	lea    esi,[esi+0x0]
c0025210:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0025217:	83 ec 08             	sub    esp,0x8
c002521a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002521f:	50                   	push   eax
c0025220:	68 ec 01 04 c0       	push   0xc00401ec
c0025225:	e8 86 9a 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002522a:	83 c4 10             	add    esp,0x10
c002522d:	eb a9                	jmp    c00251d8 <schedule()+0x3c>
c002522f:	90                   	nop

c0025230 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025230:	83 ec 0c             	sub    esp,0xc
c0025233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025238:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002523c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002523f:	e8 58 ff ff ff       	call   c002519c <schedule()>
c0025244:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025249:	83 e8 01             	sub    eax,0x1
c002524c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025251:	75 01                	jne    c0025254 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0025253:	fb                   	sti    
c0025254:	83 c4 0c             	add    esp,0xc
c0025257:	c3                   	ret    

c0025258 <blockTask(TaskState)>:
c0025258:	83 ec 0c             	sub    esp,0xc
c002525b:	fa                   	cli    
c002525c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025261:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025265:	83 c0 01             	add    eax,0x1
c0025268:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002526d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025272:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025275:	e8 22 ff ff ff       	call   c002519c <schedule()>
c002527a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002527f:	83 e8 01             	sub    eax,0x1
c0025282:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025287:	75 03                	jne    c002528c <blockTask(TaskState)+0x34>
c0025289:	fb                   	sti    
c002528a:	66 90                	xchg   ax,ax
c002528c:	83 c4 0c             	add    esp,0xc
c002528f:	c3                   	ret    

c0025290 <waitTask(int, int*, int)>:
c0025290:	83 ec 18             	sub    esp,0x18
c0025293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002529c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c002529f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00252a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252a8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00252ab:	6a 07                	push   0x7
c00252ad:	e8 a6 ff ff ff       	call   c0025258 <blockTask(TaskState)>
c00252b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252b7:	83 c4 10             	add    esp,0x10
c00252ba:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00252bd:	85 d2                	test   edx,edx
c00252bf:	74 0b                	je     c00252cc <waitTask(int, int*, int)+0x3c>
c00252c1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00252c4:	89 02                	mov    DWORD PTR [edx],eax
c00252c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252cb:	90                   	nop
c00252cc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00252cf:	83 c4 0c             	add    esp,0xc
c00252d2:	c3                   	ret    
c00252d3:	90                   	nop

c00252d4 <milliTenthSleepUntil(unsigned int)>:
c00252d4:	83 ec 0c             	sub    esp,0xc
c00252d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252db:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00252e1:	76 05                	jbe    c00252e8 <milliTenthSleepUntil(unsigned int)+0x14>
c00252e3:	90                   	nop
c00252e4:	83 c4 0c             	add    esp,0xc
c00252e7:	c3                   	ret    
c00252e8:	fa                   	cli    
c00252e9:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00252ef:	83 ec 08             	sub    esp,0x8
c00252f2:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00252f8:	83 c2 01             	add    edx,0x1
c00252fb:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025301:	83 c1 01             	add    ecx,0x1
c0025304:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002530a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025310:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0025313:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025318:	50                   	push   eax
c0025319:	68 e0 01 04 c0       	push   0xc00401e0
c002531e:	e8 8d 99 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025323:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c002532a:	e8 29 ff ff ff       	call   c0025258 <blockTask(TaskState)>
c002532f:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025334:	83 c4 10             	add    esp,0x10
c0025337:	83 e8 01             	sub    eax,0x1
c002533a:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002533f:	85 c0                	test   eax,eax
c0025341:	75 09                	jne    c002534c <milliTenthSleepUntil(unsigned int)+0x78>
c0025343:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025348:	85 c0                	test   eax,eax
c002534a:	75 14                	jne    c0025360 <milliTenthSleepUntil(unsigned int)+0x8c>
c002534c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025351:	83 e8 01             	sub    eax,0x1
c0025354:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025359:	75 89                	jne    c00252e4 <milliTenthSleepUntil(unsigned int)+0x10>
c002535b:	fb                   	sti    
c002535c:	83 c4 0c             	add    esp,0xc
c002535f:	c3                   	ret    
c0025360:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c002536a:	e8 2d fe ff ff       	call   c002519c <schedule()>
c002536f:	eb db                	jmp    c002534c <milliTenthSleepUntil(unsigned int)+0x78>
c0025371:	8d 76 00             	lea    esi,[esi+0x0]

c0025374 <milliTenthSleep(unsigned int)>:
c0025374:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025378:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c002537d:	01 c2                	add    edx,eax
c002537f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025383:	e9 4c ff ff ff       	jmp    c00252d4 <milliTenthSleepUntil(unsigned int)>

c0025388 <sleep(unsigned int)>:
c0025388:	69 44 24 04 10 27 00 00 	imul   eax,DWORD PTR [esp+0x4],0x2710
c0025390:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025394:	eb de                	jmp    c0025374 <milliTenthSleep(unsigned int)>
c0025396:	66 90                	xchg   ax,ax

c0025398 <taskReturned>:
c0025398:	83 ec 18             	sub    esp,0x18
c002539b:	68 20 2e 03 c0       	push   0xc0032e20
c00253a0:	e8 fd ad ff ff       	call   c00201a2 <KePanic(char const*)>
c00253a5:	83 c4 10             	add    esp,0x10
c00253a8:	83 ec 0c             	sub    esp,0xc
c00253ab:	6a 02                	push   0x2
c00253ad:	e8 a6 fe ff ff       	call   c0025258 <blockTask(TaskState)>
c00253b2:	fa                   	cli    
c00253b3:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253b8:	83 c0 01             	add    eax,0x1
c00253bb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253c0:	e8 d7 fd ff ff       	call   c002519c <schedule()>
c00253c5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253ca:	83 c4 10             	add    esp,0x10
c00253cd:	83 e8 01             	sub    eax,0x1
c00253d0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253d5:	85 c0                	test   eax,eax
c00253d7:	75 cf                	jne    c00253a8 <taskReturned+0x10>
c00253d9:	fb                   	sti    
c00253da:	eb cc                	jmp    c00253a8 <taskReturned+0x10>

c00253dc <Thr::processFromPID(int)>:
c00253dc:	57                   	push   edi
c00253dd:	56                   	push   esi
c00253de:	53                   	push   ebx
c00253df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00253e3:	fa                   	cli    
c00253e4:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00253ea:	83 ec 0c             	sub    esp,0xc
c00253ed:	68 ec 01 04 c0       	push   0xc00401ec
c00253f2:	83 c1 01             	add    ecx,0x1
c00253f5:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00253fb:	e8 ec 97 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025400:	83 c4 10             	add    esp,0x10
c0025403:	89 c7                	mov    edi,eax
c0025405:	eb 15                	jmp    c002541c <Thr::processFromPID(int)+0x40>
c0025407:	90                   	nop
c0025408:	83 ec 0c             	sub    esp,0xc
c002540b:	68 ec 01 04 c0       	push   0xc00401ec
c0025410:	e8 d7 97 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025415:	83 c4 10             	add    esp,0x10
c0025418:	39 f8                	cmp    eax,edi
c002541a:	74 50                	je     c002546c <Thr::processFromPID(int)+0x90>
c002541c:	83 ec 0c             	sub    esp,0xc
c002541f:	68 ec 01 04 c0       	push   0xc00401ec
c0025424:	e8 c3 97 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025429:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025430:	89 c3                	mov    ebx,eax
c0025432:	e8 bd 97 00 00       	call   c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025437:	58                   	pop    eax
c0025438:	5a                   	pop    edx
c0025439:	53                   	push   ebx
c002543a:	68 ec 01 04 c0       	push   0xc00401ec
c002543f:	e8 6c 98 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025444:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025447:	83 c4 10             	add    esp,0x10
c002544a:	39 30                	cmp    DWORD PTR [eax],esi
c002544c:	75 ba                	jne    c0025408 <Thr::processFromPID(int)+0x2c>
c002544e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025453:	83 e8 01             	sub    eax,0x1
c0025456:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002545b:	74 0b                	je     c0025468 <Thr::processFromPID(int)+0x8c>
c002545d:	8d 76 00             	lea    esi,[esi+0x0]
c0025460:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025463:	90                   	nop
c0025464:	5b                   	pop    ebx
c0025465:	5e                   	pop    esi
c0025466:	5f                   	pop    edi
c0025467:	c3                   	ret    
c0025468:	fb                   	sti    
c0025469:	eb f5                	jmp    c0025460 <Thr::processFromPID(int)+0x84>
c002546b:	90                   	nop
c002546c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025471:	8d 50 ff             	lea    edx,[eax-0x1]
c0025474:	31 c0                	xor    eax,eax
c0025476:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c002547c:	85 d2                	test   edx,edx
c002547e:	75 e4                	jne    c0025464 <Thr::processFromPID(int)+0x88>
c0025480:	fb                   	sti    
c0025481:	5b                   	pop    ebx
c0025482:	5e                   	pop    esi
c0025483:	5f                   	pop    edi
c0025484:	c3                   	ret    
c0025485:	8d 76 00             	lea    esi,[esi+0x0]

c0025488 <unblockTask(ThreadControlBlock*)>:
c0025488:	53                   	push   ebx
c0025489:	83 ec 08             	sub    esp,0x8
c002548c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025490:	fa                   	cli    
c0025491:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025496:	83 c0 01             	add    eax,0x1
c0025499:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002549e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00254a1:	85 c0                	test   eax,eax
c00254a3:	74 67                	je     c002550c <unblockTask(ThreadControlBlock*)+0x84>
c00254a5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00254a8:	83 f8 01             	cmp    eax,0x1
c00254ab:	74 37                	je     c00254e4 <unblockTask(ThreadControlBlock*)+0x5c>
c00254ad:	83 ec 0c             	sub    esp,0xc
c00254b0:	68 ec 01 04 c0       	push   0xc00401ec
c00254b5:	e8 32 97 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254ba:	83 c4 10             	add    esp,0x10
c00254bd:	85 c0                	test   eax,eax
c00254bf:	75 1b                	jne    c00254dc <unblockTask(ThreadControlBlock*)+0x54>
c00254c1:	eb 5d                	jmp    c0025520 <unblockTask(ThreadControlBlock*)+0x98>
c00254c3:	90                   	nop
c00254c4:	83 ec 08             	sub    esp,0x8
c00254c7:	50                   	push   eax
c00254c8:	68 ec 01 04 c0       	push   0xc00401ec
c00254cd:	e8 3a 9a 00 00       	call   c002ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00254d2:	83 c4 10             	add    esp,0x10
c00254d5:	85 c0                	test   eax,eax
c00254d7:	74 47                	je     c0025520 <unblockTask(ThreadControlBlock*)+0x98>
c00254d9:	8d 76 00             	lea    esi,[esi+0x0]
c00254dc:	39 c3                	cmp    ebx,eax
c00254de:	75 e4                	jne    c00254c4 <unblockTask(ThreadControlBlock*)+0x3c>
c00254e0:	eb 12                	jmp    c00254f4 <unblockTask(ThreadControlBlock*)+0x6c>
c00254e2:	66 90                	xchg   ax,ax
c00254e4:	83 ec 0c             	sub    esp,0xc
c00254e7:	68 bf 2d 03 c0       	push   0xc0032dbf
c00254ec:	e8 29 3d ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00254f1:	83 c4 10             	add    esp,0x10
c00254f4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254f9:	83 e8 01             	sub    eax,0x1
c00254fc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025501:	75 01                	jne    c0025504 <unblockTask(ThreadControlBlock*)+0x7c>
c0025503:	fb                   	sti    
c0025504:	83 c4 08             	add    esp,0x8
c0025507:	5b                   	pop    ebx
c0025508:	c3                   	ret    
c0025509:	8d 76 00             	lea    esi,[esi+0x0]
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	68 a8 2d 03 c0       	push   0xc0032da8
c0025514:	e8 01 3d ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0025519:	83 c4 10             	add    esp,0x10
c002551c:	eb d6                	jmp    c00254f4 <unblockTask(ThreadControlBlock*)+0x6c>
c002551e:	66 90                	xchg   ax,ax
c0025520:	83 ec 08             	sub    esp,0x8
c0025523:	53                   	push   ebx
c0025524:	68 ec 01 04 c0       	push   0xc00401ec
c0025529:	e8 82 97 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002552e:	83 c4 10             	add    esp,0x10
c0025531:	eb c1                	jmp    c00254f4 <unblockTask(ThreadControlBlock*)+0x6c>
c0025533:	90                   	nop

c0025534 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025534:	55                   	push   ebp
c0025535:	57                   	push   edi
c0025536:	56                   	push   esi
c0025537:	53                   	push   ebx
c0025538:	83 ec 1c             	sub    esp,0x1c
c002553b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002553f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025542:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0025548:	85 ed                	test   ebp,ebp
c002554a:	7e 28                	jle    c0025574 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c002554c:	31 f6                	xor    esi,esi
c002554e:	66 90                	xchg   ax,ax
c0025550:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0025557:	83 ec 0c             	sub    esp,0xc
c002555a:	83 c6 01             	add    esi,0x1
c002555d:	57                   	push   edi
c002555e:	e8 90 0e ff ff       	call   c00163f3 <free>
c0025563:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025566:	83 c4 10             	add    esp,0x10
c0025569:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c002556f:	7f df                	jg     c0025550 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025571:	8d 76 00             	lea    esi,[esi+0x0]
c0025574:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c002557e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025583:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025586:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0025589:	d3 c0                	rol    eax,cl
c002558b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025592:	21 c8                	and    eax,ecx
c0025594:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c002559b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002559e:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00255a6:	89 f7                	mov    edi,esi
c00255a8:	0f 85 72 01 00 00    	jne    c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00255ae:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00255b4:	85 ed                	test   ebp,ebp
c00255b6:	74 1c                	je     c00255d4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00255b8:	83 ec 0c             	sub    esp,0xc
c00255bb:	55                   	push   ebp
c00255bc:	e8 d7 a8 ff ff       	call   c001fe98 <EnvVarContainer::~EnvVarContainer()>
c00255c1:	59                   	pop    ecx
c00255c2:	5e                   	pop    esi
c00255c3:	6a 0c                	push   0xc
c00255c5:	55                   	push   ebp
c00255c6:	e8 51 3b ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c00255cb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00255ce:	83 c4 10             	add    esp,0x10
c00255d1:	89 f7                	mov    edi,esi
c00255d3:	90                   	nop
c00255d4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255da:	85 c0                	test   eax,eax
c00255dc:	0f 84 b2 00 00 00    	je     c0025694 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255e2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00255e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00255e9:	31 c9                	xor    ecx,ecx
c00255eb:	eb 17                	jmp    c0025604 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00255ed:	8d 76 00             	lea    esi,[esi+0x0]
c00255f0:	83 c1 01             	add    ecx,0x1
c00255f3:	83 f9 10             	cmp    ecx,0x10
c00255f6:	0f 84 98 00 00 00    	je     c0025694 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255fc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025602:	66 90                	xchg   ax,ax
c0025604:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c002560b:	d3 fa                	sar    edx,cl
c002560d:	80 e2 01             	and    dl,0x1
c0025610:	74 de                	je     c00255f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025612:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0025615:	c1 e2 05             	shl    edx,0x5
c0025618:	29 ca                	sub    edx,ecx
c002561a:	01 d0                	add    eax,edx
c002561c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025622:	83 fd 07             	cmp    ebp,0x7
c0025625:	75 c9                	jne    c00255f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025627:	05 40 02 00 00       	add    eax,0x240
c002562c:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c002562f:	83 fd ff             	cmp    ebp,0xffffffff
c0025632:	0f 8c f0 00 00 00    	jl     c0025728 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0025638:	0f 84 ae 01 00 00    	je     c00257ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c002563e:	85 ed                	test   ebp,ebp
c0025640:	0f 84 92 01 00 00    	je     c00257d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0025646:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0025648:	75 a6                	jne    c00255f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002564a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002564e:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025654:	01 d0                	add    eax,edx
c0025656:	66 90                	xchg   ax,ax
c0025658:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002565c:	83 ec 0c             	sub    esp,0xc
c002565f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025665:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025668:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c002566e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025675:	50                   	push   eax
c0025676:	e8 0d fe ff ff       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c002567b:	83 c4 10             	add    esp,0x10
c002567e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025681:	89 f7                	mov    edi,esi
c0025683:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025687:	83 c1 01             	add    ecx,0x1
c002568a:	83 f9 10             	cmp    ecx,0x10
c002568d:	0f 85 69 ff ff ff    	jne    c00255fc <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025693:	90                   	nop
c0025694:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c002569a:	85 c0                	test   eax,eax
c002569c:	74 62                	je     c0025700 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c002569e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00256a4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00256aa:	74 54                	je     c0025700 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00256ac:	83 ec 0c             	sub    esp,0xc
c00256af:	68 ec 01 04 c0       	push   0xc00401ec
c00256b4:	e8 33 95 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00256b9:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00256c0:	89 c7                	mov    edi,eax
c00256c2:	e8 09 95 00 00       	call   c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00256c7:	83 c4 10             	add    esp,0x10
c00256ca:	84 c0                	test   al,al
c00256cc:	0f 84 ce 00 00 00    	je     c00257a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00256d2:	66 90                	xchg   ax,ax
c00256d4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256d7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00256dd:	85 d2                	test   edx,edx
c00256df:	74 0f                	je     c00256f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00256e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00256e3:	83 ec 0c             	sub    esp,0xc
c00256e6:	52                   	push   edx
c00256e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00256ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256ed:	83 c4 10             	add    esp,0x10
c00256f0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00256fa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00256fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025700:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0025706:	85 db                	test   ebx,ebx
c0025708:	74 16                	je     c0025720 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c002570a:	83 ec 0c             	sub    esp,0xc
c002570d:	53                   	push   ebx
c002570e:	e8 8d 2d ff ff       	call   c00184a0 <VAS::~VAS()>
c0025713:	58                   	pop    eax
c0025714:	5a                   	pop    edx
c0025715:	6a 14                	push   0x14
c0025717:	53                   	push   ebx
c0025718:	e8 ff 39 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c002571d:	83 c4 10             	add    esp,0x10
c0025720:	83 c4 1c             	add    esp,0x1c
c0025723:	5b                   	pop    ebx
c0025724:	5e                   	pop    esi
c0025725:	5f                   	pop    edi
c0025726:	5d                   	pop    ebp
c0025727:	c3                   	ret    
c0025728:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002572c:	83 ec 0c             	sub    esp,0xc
c002572f:	68 54 2e 03 c0       	push   0xc0032e54
c0025734:	e8 69 aa ff ff       	call   c00201a2 <KePanic(char const*)>
c0025739:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c002573c:	83 c4 10             	add    esp,0x10
c002573f:	89 f7                	mov    edi,esi
c0025741:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025745:	e9 a6 fe ff ff       	jmp    c00255f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002574a:	66 90                	xchg   ax,ax
c002574c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025752:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0025758:	75 1e                	jne    c0025778 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002575a:	83 ec 0c             	sub    esp,0xc
c002575d:	68 bc 2e 03 c0       	push   0xc0032ebc
c0025762:	e8 b3 3a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0025767:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c002576e:	e8 e5 fa ff ff       	call   c0025258 <blockTask(TaskState)>
c0025773:	83 c4 10             	add    esp,0x10
c0025776:	66 90                	xchg   ax,ax
c0025778:	83 ec 08             	sub    esp,0x8
c002577b:	56                   	push   esi
c002577c:	68 ec 01 04 c0       	push   0xc00401ec
c0025781:	e8 2a 95 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025786:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c002578d:	e8 5a 94 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025792:	83 c4 10             	add    esp,0x10
c0025795:	39 f8                	cmp    eax,edi
c0025797:	0f 84 37 ff ff ff    	je     c00256d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c002579d:	8d 76 00             	lea    esi,[esi+0x0]
c00257a0:	83 ec 0c             	sub    esp,0xc
c00257a3:	68 ec 01 04 c0       	push   0xc00401ec
c00257a8:	e8 3f 94 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257ad:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257b4:	89 c6                	mov    esi,eax
c00257b6:	e8 39 94 00 00       	call   c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257bb:	83 c4 10             	add    esp,0x10
c00257be:	39 f3                	cmp    ebx,esi
c00257c0:	74 b6                	je     c0025778 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00257c2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00257c5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257c8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00257ce:	75 a8                	jne    c0025778 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00257d0:	e9 77 ff ff ff       	jmp    c002574c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00257d5:	8d 76 00             	lea    esi,[esi+0x0]
c00257d8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257dc:	83 ec 0c             	sub    esp,0xc
c00257df:	68 88 2e 03 c0       	push   0xc0032e88
c00257e4:	e9 4b ff ff ff       	jmp    c0025734 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00257e9:	8d 76 00             	lea    esi,[esi+0x0]
c00257ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257f0:	8b 36                	mov    esi,DWORD PTR [esi]
c00257f2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00257f5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257f8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00257fe:	01 d7                	add    edi,edx
c0025800:	89 f8                	mov    eax,edi
c0025802:	e9 51 fe ff ff       	jmp    c0025658 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0025807:	90                   	nop

c0025808 <cleanerTaskFunction(void*)>:
c0025808:	53                   	push   ebx
c0025809:	83 ec 08             	sub    esp,0x8
c002580c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025811:	83 e8 01             	sub    eax,0x1
c0025814:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025819:	75 01                	jne    c002581c <cleanerTaskFunction(void*)+0x14>
c002581b:	fb                   	sti    
c002581c:	fa                   	cli    
c002581d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025822:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c0025829:	8d 50 01             	lea    edx,[eax+0x1]
c002582c:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025832:	0f 84 c4 00 00 00    	je     c00258fc <cleanerTaskFunction(void*)+0xf4>
c0025838:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002583d:	85 c0                	test   eax,eax
c002583f:	75 03                	jne    c0025844 <cleanerTaskFunction(void*)+0x3c>
c0025841:	fb                   	sti    
c0025842:	66 90                	xchg   ax,ax
c0025844:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c002584b:	fa                   	cli    
c002584c:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025852:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025858:	83 c2 01             	add    edx,0x1
c002585b:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025861:	83 c1 01             	add    ecx,0x1
c0025864:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002586a:	fa                   	cli    
c002586b:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025871:	83 c3 01             	add    ebx,0x1
c0025874:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c002587a:	eb 28                	jmp    c00258a4 <cleanerTaskFunction(void*)+0x9c>
c002587c:	83 ec 0c             	sub    esp,0xc
c002587f:	68 d4 01 04 c0       	push   0xc00401d4
c0025884:	e8 63 93 00 00       	call   c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025889:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025890:	89 c3                	mov    ebx,eax
c0025892:	e8 5d 93 00 00       	call   c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025897:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002589a:	e8 95 fc ff ff       	call   c0025534 <cleanupTerminatedTask(ThreadControlBlock*)>
c002589f:	83 c4 10             	add    esp,0x10
c00258a2:	66 90                	xchg   ax,ax
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	68 d4 01 04 c0       	push   0xc00401d4
c00258ac:	e8 1f 93 00 00       	call   c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00258b1:	83 c4 10             	add    esp,0x10
c00258b4:	84 c0                	test   al,al
c00258b6:	74 c4                	je     c002587c <cleanerTaskFunction(void*)+0x74>
c00258b8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258bd:	83 e8 01             	sub    eax,0x1
c00258c0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258c5:	75 01                	jne    c00258c8 <cleanerTaskFunction(void*)+0xc0>
c00258c7:	fb                   	sti    
c00258c8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00258cd:	83 e8 01             	sub    eax,0x1
c00258d0:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00258d5:	0f 85 31 ff ff ff    	jne    c002580c <cleanerTaskFunction(void*)+0x4>
c00258db:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00258e0:	85 c0                	test   eax,eax
c00258e2:	0f 84 24 ff ff ff    	je     c002580c <cleanerTaskFunction(void*)+0x4>
c00258e8:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00258f2:	e8 a5 f8 ff ff       	call   c002519c <schedule()>
c00258f7:	e9 10 ff ff ff       	jmp    c002580c <cleanerTaskFunction(void*)+0x4>
c00258fc:	83 ec 0c             	sub    esp,0xc
c00258ff:	6a 02                	push   0x2
c0025901:	e8 2a f9 ff ff       	call   c0025230 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025906:	83 c4 10             	add    esp,0x10
c0025909:	e9 36 ff ff ff       	jmp    c0025844 <cleanerTaskFunction(void*)+0x3c>
c002590e:	66 90                	xchg   ax,ax

c0025910 <terminateTask(int)>:
c0025910:	83 ec 14             	sub    esp,0x14
c0025913:	fa                   	cli    
c0025914:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002591a:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025920:	83 c2 01             	add    edx,0x1
c0025923:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025929:	83 c1 01             	add    ecx,0x1
c002592c:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025932:	fa                   	cli    
c0025933:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002593c:	83 c0 01             	add    eax,0x1
c002593f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025949:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c002594c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025951:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025954:	50                   	push   eax
c0025955:	68 d4 01 04 c0       	push   0xc00401d4
c002595a:	e8 51 93 00 00       	call   c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002595f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025964:	83 c4 10             	add    esp,0x10
c0025967:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c002596e:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025973:	85 c0                	test   eax,eax
c0025975:	74 65                	je     c00259dc <terminateTask(int)+0xcc>
c0025977:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c002597e:	83 ec 0c             	sub    esp,0xc
c0025981:	50                   	push   eax
c0025982:	e8 01 fb ff ff       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c0025987:	83 c4 10             	add    esp,0x10
c002598a:	66 90                	xchg   ax,ax
c002598c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025991:	83 e8 01             	sub    eax,0x1
c0025994:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025999:	75 01                	jne    c002599c <terminateTask(int)+0x8c>
c002599b:	fb                   	sti    
c002599c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00259a1:	83 e8 01             	sub    eax,0x1
c00259a4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00259a9:	75 09                	jne    c00259b4 <terminateTask(int)+0xa4>
c00259ab:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c00259b2:	75 3c                	jne    c00259f0 <terminateTask(int)+0xe0>
c00259b4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259b9:	83 e8 01             	sub    eax,0x1
c00259bc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259c1:	75 01                	jne    c00259c4 <terminateTask(int)+0xb4>
c00259c3:	fb                   	sti    
c00259c4:	fa                   	cli    
c00259c5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259ca:	83 c0 01             	add    eax,0x1
c00259cd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259d2:	66 90                	xchg   ax,ax
c00259d4:	e8 c3 f7 ff ff       	call   c002519c <schedule()>
c00259d9:	eb d9                	jmp    c00259b4 <terminateTask(int)+0xa4>
c00259db:	90                   	nop
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	68 d6 2d 03 c0       	push   0xc0032dd6
c00259e4:	e8 31 38 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00259e9:	83 c4 10             	add    esp,0x10
c00259ec:	eb 9e                	jmp    c002598c <terminateTask(int)+0x7c>
c00259ee:	66 90                	xchg   ax,ax
c00259f0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259fa:	eb d8                	jmp    c00259d4 <terminateTask(int)+0xc4>

c00259fc <Thr::terminateFromIRQ(int)>:
c00259fc:	83 ec 18             	sub    esp,0x18
c00259ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025a03:	50                   	push   eax
c0025a04:	e8 07 ff ff ff       	call   c0025910 <terminateTask(int)>
c0025a09:	8d 76 00             	lea    esi,[esi+0x0]

c0025a0c <__static_initialization_and_destruction_0(int, int)>:
c0025a0c:	83 ec 0c             	sub    esp,0xc
c0025a0f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025a14:	0f 85 8e 00 00 00    	jne    c0025aa8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025a1a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025a22:	0f 85 80 00 00 00    	jne    c0025aa8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025a28:	83 ec 0c             	sub    esp,0xc
c0025a2b:	68 ec 01 04 c0       	push   0xc00401ec
c0025a30:	e8 2f 95 00 00       	call   c002ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a35:	83 c4 10             	add    esp,0x10
c0025a38:	83 ec 04             	sub    esp,0x4
c0025a3b:	68 98 3a 03 c0       	push   0xc0033a98
c0025a40:	68 ec 01 04 c0       	push   0xc00401ec
c0025a45:	68 14 ef 02 c0       	push   0xc002ef14
c0025a4a:	e8 7d 36 ff ff       	call   c00190cc <__cxa_atexit>
c0025a4f:	83 c4 10             	add    esp,0x10
c0025a52:	83 ec 0c             	sub    esp,0xc
c0025a55:	68 e0 01 04 c0       	push   0xc00401e0
c0025a5a:	e8 05 95 00 00       	call   c002ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a5f:	83 c4 10             	add    esp,0x10
c0025a62:	83 ec 04             	sub    esp,0x4
c0025a65:	68 98 3a 03 c0       	push   0xc0033a98
c0025a6a:	68 e0 01 04 c0       	push   0xc00401e0
c0025a6f:	68 14 ef 02 c0       	push   0xc002ef14
c0025a74:	e8 53 36 ff ff       	call   c00190cc <__cxa_atexit>
c0025a79:	83 c4 10             	add    esp,0x10
c0025a7c:	83 ec 0c             	sub    esp,0xc
c0025a7f:	68 d4 01 04 c0       	push   0xc00401d4
c0025a84:	e8 db 94 00 00       	call   c002ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a89:	83 c4 10             	add    esp,0x10
c0025a8c:	83 ec 04             	sub    esp,0x4
c0025a8f:	68 98 3a 03 c0       	push   0xc0033a98
c0025a94:	68 d4 01 04 c0       	push   0xc00401d4
c0025a99:	68 14 ef 02 c0       	push   0xc002ef14
c0025a9e:	e8 29 36 ff ff       	call   c00190cc <__cxa_atexit>
c0025aa3:	83 c4 10             	add    esp,0x10
c0025aa6:	66 90                	xchg   ax,ax
c0025aa8:	90                   	nop
c0025aa9:	83 c4 0c             	add    esp,0xc
c0025aac:	c3                   	ret    
c0025aad:	8d 76 00             	lea    esi,[esi+0x0]

c0025ab0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025ab0:	83 ec 0c             	sub    esp,0xc
c0025ab3:	83 ec 08             	sub    esp,0x8
c0025ab6:	68 ff ff 00 00       	push   0xffff
c0025abb:	6a 01                	push   0x1
c0025abd:	e8 4a ff ff ff       	call   c0025a0c <__static_initialization_and_destruction_0(int, int)>
c0025ac2:	83 c4 10             	add    esp,0x10
c0025ac5:	83 c4 0c             	add    esp,0xc
c0025ac8:	c3                   	ret    

c0025ac9 <Vm::inbv(unsigned short)>:
c0025ac9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025acd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025ad2:	75 06                	jne    c0025ada <Vm::inbv(unsigned short)+0x11>
c0025ad4:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025ad9:	c3                   	ret    
c0025ada:	ec                   	in     al,dx
c0025adb:	c3                   	ret    

c0025adc <Vm::outbv(unsigned short, unsigned char)>:
c0025adc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025ae0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ae4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025ae9:	75 25                	jne    c0025b10 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025aeb:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025af1:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025af7:	8d 51 01             	lea    edx,[ecx+0x1]
c0025afa:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025b00:	83 fa 20             	cmp    edx,0x20
c0025b03:	75 0c                	jne    c0025b11 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025b05:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025b0f:	c3                   	ret    
c0025b10:	ee                   	out    dx,al
c0025b11:	c3                   	ret    

c0025b12 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025b12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025b17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025b1c:	c1 e0 04             	shl    eax,0x4
c0025b1f:	01 d0                	add    eax,edx
c0025b21:	c3                   	ret    

c0025b22 <Vm::getSegment(unsigned int)>:
c0025b22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b26:	c1 e8 10             	shr    eax,0x10
c0025b29:	c3                   	ret    

c0025b2a <Vm::getOffset(unsigned int)>:
c0025b2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b2e:	c3                   	ret    

c0025b2f <Vm::mainloop2()>:
c0025b2f:	83 ec 18             	sub    esp,0x18
c0025b32:	fa                   	cli    
c0025b33:	6a 02                	push   0x2
c0025b35:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b3b:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025b42:	e8 e9 f6 ff ff       	call   c0025230 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025b4c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025b50:	52                   	push   edx
c0025b51:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025b55:	52                   	push   edx
c0025b56:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025b5a:	52                   	push   edx
c0025b5b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025b5f:	50                   	push   eax
c0025b60:	e8 aa a6 fd ff       	call   c000020f <goToVM86>
c0025b65:	83 c4 2c             	add    esp,0x2c
c0025b68:	c3                   	ret    

c0025b69 <Vm::mainVm8086Loop(void*)>:
c0025b69:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b6e:	48                   	dec    eax
c0025b6f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b74:	75 01                	jne    c0025b77 <Vm::mainVm8086Loop(void*)+0xe>
c0025b76:	fb                   	sti    
c0025b77:	eb b6                	jmp    c0025b2f <Vm::mainloop2()>

c0025b79 <Vm::mainloop3(unsigned long)>:
c0025b79:	83 ec 18             	sub    esp,0x18
c0025b7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b80:	fa                   	cli    
c0025b81:	6a 02                	push   0x2
c0025b83:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b89:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025b90:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025b95:	e8 96 f6 ff ff       	call   c0025230 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b9a:	83 c4 1c             	add    esp,0x1c
c0025b9d:	eb 90                	jmp    c0025b2f <Vm::mainloop2()>

c0025b9f <Vm::initialise8086()>:
c0025b9f:	83 ec 0c             	sub    esp,0xc
c0025ba2:	68 80 00 00 00       	push   0x80
c0025ba7:	6a 00                	push   0x0
c0025ba9:	68 69 5b 02 c0       	push   0xc0025b69
c0025bae:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025bb4:	e8 97 f3 ff ff       	call   c0024f50 <Process::createThread(void (*)(void*), void*, int)>
c0025bb9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025bc0:	68 00 01 00 00       	push   0x100
c0025bc5:	6a 00                	push   0x0
c0025bc7:	6a 00                	push   0x0
c0025bc9:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025bce:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025bd3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025bd9:	e8 3a 2c ff ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025bde:	83 c4 2c             	add    esp,0x2c
c0025be1:	c3                   	ret    

c0025be2 <Vm::finish8086()>:
c0025be2:	53                   	push   ebx
c0025be3:	83 ec 08             	sub    esp,0x8
c0025be6:	fa                   	cli    
c0025be7:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025bed:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025bf4:	75 15                	jne    c0025c0b <Vm::finish8086()+0x29>
c0025bf6:	e8 a1 f5 ff ff       	call   c002519c <schedule()>
c0025bfb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c00:	48                   	dec    eax
c0025c01:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c06:	75 de                	jne    c0025be6 <Vm::finish8086()+0x4>
c0025c08:	fb                   	sti    
c0025c09:	eb db                	jmp    c0025be6 <Vm::finish8086()+0x4>
c0025c0b:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025c12:	83 ec 0c             	sub    esp,0xc
c0025c15:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025c1b:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025c21:	e8 62 f8 ff ff       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c0025c26:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c2b:	83 c4 10             	add    esp,0x10
c0025c2e:	8d 50 ff             	lea    edx,[eax-0x1]
c0025c31:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c37:	85 d2                	test   edx,edx
c0025c39:	75 01                	jne    c0025c3c <Vm::finish8086()+0x5a>
c0025c3b:	fb                   	sti    
c0025c3c:	83 c4 08             	add    esp,0x8
c0025c3f:	89 d8                	mov    eax,ebx
c0025c41:	5b                   	pop    ebx
c0025c42:	c3                   	ret    

c0025c43 <Vm::getOutput8086(unsigned char*)>:
c0025c43:	57                   	push   edi
c0025c44:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025c4a:	56                   	push   esi
c0025c4b:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025c50:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025c54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c56:	5e                   	pop    esi
c0025c57:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025c5c:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025c66:	5f                   	pop    edi
c0025c67:	c3                   	ret    

c0025c68 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025c68:	55                   	push   ebp
c0025c69:	57                   	push   edi
c0025c6a:	56                   	push   esi
c0025c6b:	53                   	push   ebx
c0025c6c:	83 ec 0c             	sub    esp,0xc
c0025c6f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c73:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025c77:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c7b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c7f:	fa                   	cli    
c0025c80:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c86:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025c8d:	75 15                	jne    c0025ca4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025c8f:	e8 08 f5 ff ff       	call   c002519c <schedule()>
c0025c94:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c99:	48                   	dec    eax
c0025c9a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c9f:	75 de                	jne    c0025c7f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025ca1:	fb                   	sti    
c0025ca2:	eb db                	jmp    c0025c7f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025ca4:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025cae:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025cb3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025cb7:	0f b7 ff             	movzx  edi,di
c0025cba:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025cbe:	0f b7 f6             	movzx  esi,si
c0025cc1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025cc5:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025cc9:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025ccd:	50                   	push   eax
c0025cce:	6a 20                	push   0x20
c0025cd0:	6a 00                	push   0x0
c0025cd2:	68 40 02 04 c0       	push   0xc0040240
c0025cd7:	e8 14 a8 fd ff       	call   c00004f0 <memset>
c0025cdc:	5a                   	pop    edx
c0025cdd:	59                   	pop    ecx
c0025cde:	57                   	push   edi
c0025cdf:	56                   	push   esi
c0025ce0:	e8 2d fe ff ff       	call   c0025b12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025ce5:	83 c4 10             	add    esp,0x10
c0025ce8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025cec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025cf0:	89 c7                	mov    edi,eax
c0025cf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025cf4:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025cfb:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d00:	48                   	dec    eax
c0025d01:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d06:	75 01                	jne    c0025d09 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025d08:	fb                   	sti    
c0025d09:	83 ec 0c             	sub    esp,0xc
c0025d0c:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025d12:	e8 71 f7 ff ff       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c0025d17:	83 c4 1c             	add    esp,0x1c
c0025d1a:	b0 01                	mov    al,0x1
c0025d1c:	5b                   	pop    ebx
c0025d1d:	5e                   	pop    esi
c0025d1e:	5f                   	pop    edi
c0025d1f:	5d                   	pop    ebp
c0025d20:	c3                   	ret    

c0025d21 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d21:	55                   	push   ebp
c0025d22:	57                   	push   edi
c0025d23:	56                   	push   esi
c0025d24:	53                   	push   ebx
c0025d25:	83 ec 34             	sub    esp,0x34
c0025d28:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025d2c:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025d30:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025d34:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025d38:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d3c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d40:	68 e4 2e 03 c0       	push   0xc0032ee4
c0025d45:	e8 d0 34 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0025d4a:	83 c4 10             	add    esp,0x10
c0025d4d:	fa                   	cli    
c0025d4e:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025d54:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d5a:	84 db                	test   bl,bl
c0025d5c:	75 15                	jne    c0025d73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025d5e:	e8 39 f4 ff ff       	call   c002519c <schedule()>
c0025d63:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d68:	48                   	dec    eax
c0025d69:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d6e:	75 dd                	jne    c0025d4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d70:	fb                   	sti    
c0025d71:	eb da                	jmp    c0025d4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d73:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025d81:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025d86:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025d8a:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025d8e:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025d92:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025d96:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025d9a:	50                   	push   eax
c0025d9b:	6a 20                	push   0x20
c0025d9d:	6a 00                	push   0x0
c0025d9f:	68 40 02 04 c0       	push   0xc0040240
c0025da4:	e8 47 a7 fd ff       	call   c00004f0 <memset>
c0025da9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025db0:	e8 2e 06 ff ff       	call   c00163e3 <malloc>
c0025db5:	83 c4 0c             	add    esp,0xc
c0025db8:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025dbe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025dc2:	89 c5                	mov    ebp,eax
c0025dc4:	50                   	push   eax
c0025dc5:	e8 68 46 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c0025dca:	83 c4 10             	add    esp,0x10
c0025dcd:	85 ed                	test   ebp,ebp
c0025dcf:	75 0a                	jne    c0025ddb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025dd1:	83 ec 0c             	sub    esp,0xc
c0025dd4:	68 06 2f 03 c0       	push   0xc0032f06
c0025dd9:	eb 2b                	jmp    c0025e06 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025ddb:	50                   	push   eax
c0025ddc:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025de0:	50                   	push   eax
c0025de1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025de5:	50                   	push   eax
c0025de6:	55                   	push   ebp
c0025de7:	e8 66 49 ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c0025dec:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025df0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025df4:	83 c4 10             	add    esp,0x10
c0025df7:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025dfc:	74 27                	je     c0025e25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025dfe:	83 ec 0c             	sub    esp,0xc
c0025e01:	68 1a 2f 03 c0       	push   0xc0032f1a
c0025e06:	e8 97 a3 ff ff       	call   c00201a2 <KePanic(char const*)>
c0025e0b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e10:	83 c4 10             	add    esp,0x10
c0025e13:	48                   	dec    eax
c0025e14:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e19:	85 c0                	test   eax,eax
c0025e1b:	75 01                	jne    c0025e1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e1d:	fb                   	sti    
c0025e1e:	31 db                	xor    ebx,ebx
c0025e20:	e9 90 00 00 00       	jmp    c0025eb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e25:	51                   	push   ecx
c0025e26:	51                   	push   ecx
c0025e27:	6a 01                	push   0x1
c0025e29:	55                   	push   ebp
c0025e2a:	e8 21 46 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0025e2f:	83 c4 10             	add    esp,0x10
c0025e32:	85 c0                	test   eax,eax
c0025e34:	74 26                	je     c0025e5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025e36:	83 ec 0c             	sub    esp,0xc
c0025e39:	68 33 2f 03 c0       	push   0xc0032f33
c0025e3e:	e8 5f a3 ff ff       	call   c00201a2 <KePanic(char const*)>
c0025e43:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e48:	83 c4 10             	add    esp,0x10
c0025e4b:	48                   	dec    eax
c0025e4c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e51:	85 c0                	test   eax,eax
c0025e53:	75 c9                	jne    c0025e1e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e55:	fb                   	sti    
c0025e56:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025e5a:	eb 59                	jmp    c0025eb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e5c:	50                   	push   eax
c0025e5d:	0f b7 ff             	movzx  edi,di
c0025e60:	50                   	push   eax
c0025e61:	0f b7 f6             	movzx  esi,si
c0025e64:	57                   	push   edi
c0025e65:	56                   	push   esi
c0025e66:	e8 a7 fc ff ff       	call   c0025b12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025e6b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0025e6e:	5a                   	pop    edx
c0025e6f:	8d 74 24 20          	lea    esi,[esp+0x20]
c0025e73:	56                   	push   esi
c0025e74:	50                   	push   eax
c0025e75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e7d:	55                   	push   ebp
c0025e7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0025e81:	83 c4 14             	add    esp,0x14
c0025e84:	55                   	push   ebp
c0025e85:	e8 24 46 ff ff       	call   c001a4ae <File::close()>
c0025e8a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e8f:	83 c4 10             	add    esp,0x10
c0025e92:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025e99:	48                   	dec    eax
c0025e9a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e9f:	85 c0                	test   eax,eax
c0025ea1:	75 01                	jne    c0025ea4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025ea3:	fb                   	sti    
c0025ea4:	83 ec 0c             	sub    esp,0xc
c0025ea7:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025ead:	e8 d6 f5 ff ff       	call   c0025488 <unblockTask(ThreadControlBlock*)>
c0025eb2:	83 c4 10             	add    esp,0x10
c0025eb5:	83 c4 2c             	add    esp,0x2c
c0025eb8:	88 d8                	mov    al,bl
c0025eba:	5b                   	pop    ebx
c0025ebb:	5e                   	pop    esi
c0025ebc:	5f                   	pop    edi
c0025ebd:	5d                   	pop    ebp
c0025ebe:	c3                   	ret    

c0025ebf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025ebf:	57                   	push   edi
c0025ec0:	56                   	push   esi
c0025ec1:	53                   	push   ebx
c0025ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ec6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025eca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025ece:	83 e8 06             	sub    eax,0x6
c0025ed1:	0f b7 c0             	movzx  eax,ax
c0025ed4:	50                   	push   eax
c0025ed5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025eda:	50                   	push   eax
c0025edb:	e8 32 fc ff ff       	call   c0025b12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025ee0:	5a                   	pop    edx
c0025ee1:	59                   	pop    ecx
c0025ee2:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025ee5:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025ee8:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0025eeb:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025ef1:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025ef4:	8d 51 02             	lea    edx,[ecx+0x2]
c0025ef7:	66 89 10             	mov    WORD PTR [eax],dx
c0025efa:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025efe:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025f02:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025f06:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0025f09:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f0d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025f13:	89 f1                	mov    ecx,esi
c0025f15:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025f19:	89 f2                	mov    edx,esi
c0025f1b:	0f b6 d6             	movzx  edx,dh
c0025f1e:	0f b6 f1             	movzx  esi,cl
c0025f21:	74 0a                	je     c0025f2d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6e>
c0025f23:	c1 e2 08             	shl    edx,0x8
c0025f26:	09 f2                	or     edx,esi
c0025f28:	80 ce 02             	or     dh,0x2
c0025f2b:	eb 08                	jmp    c0025f35 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x76>
c0025f2d:	c1 e2 08             	shl    edx,0x8
c0025f30:	09 f2                	or     edx,esi
c0025f32:	80 e6 fd             	and    dh,0xfd
c0025f35:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f3e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0025f42:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0025f4a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0025f4d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0025f55:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0025f58:	5b                   	pop    ebx
c0025f59:	5e                   	pop    esi
c0025f5a:	5f                   	pop    edi
c0025f5b:	c3                   	ret    

c0025f5c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0025f5c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f61:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f66:	c1 e0 04             	shl    eax,0x4
c0025f69:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0025f6c:	c3                   	ret    

c0025f6d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0025f6d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f72:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f77:	c1 e0 04             	shl    eax,0x4
c0025f7a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0025f7e:	c3                   	ret    

c0025f7f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0025f7f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f84:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f89:	c1 e0 04             	shl    eax,0x4
c0025f8c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0025f8f:	c3                   	ret    

c0025f90 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0025f90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f9a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025f9e:	c1 e0 04             	shl    eax,0x4
c0025fa1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0025fa4:	c3                   	ret    

c0025fa5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0025fa5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025faa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025faf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025fb3:	c1 e0 04             	shl    eax,0x4
c0025fb6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0025fba:	c3                   	ret    

c0025fbb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0025fbb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025fc0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025fc5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025fc9:	c1 e0 04             	shl    eax,0x4
c0025fcc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0025fcf:	c3                   	ret    

c0025fd0 <Vm::faultHandler(regs*)>:
c0025fd0:	55                   	push   ebp
c0025fd1:	57                   	push   edi
c0025fd2:	56                   	push   esi
c0025fd3:	53                   	push   ebx
c0025fd4:	83 ec 2c             	sub    esp,0x2c
c0025fd7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025fdb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025fde:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0025fe2:	0f b7 f8             	movzx  edi,ax
c0025fe5:	0f b7 c0             	movzx  eax,ax
c0025fe8:	52                   	push   edx
c0025fe9:	50                   	push   eax
c0025fea:	e8 23 fb ff ff       	call   c0025b12 <Vm::realToLinear(unsigned short, unsigned short)>
c0025fef:	5a                   	pop    edx
c0025ff0:	59                   	pop    ecx
c0025ff1:	89 c1                	mov    ecx,eax
c0025ff3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025ff6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ffa:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0025fff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026003:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0026006:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002600a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c002600f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026013:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026017:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002601b:	e8 f2 fa ff ff       	call   c0025b12 <Vm::realToLinear(unsigned short, unsigned short)>
c0026020:	5e                   	pop    esi
c0026021:	be 06 00 00 00       	mov    esi,0x6
c0026026:	5d                   	pop    ebp
c0026027:	31 ed                	xor    ebp,ebp
c0026029:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002602e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026031:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026037:	0f 84 74 02 00 00    	je     c00262b1 <Vm::faultHandler(regs*)+0x2e1>
c002603d:	0f 87 94 00 00 00    	ja     c00260d7 <Vm::faultHandler(regs*)+0x107>
c0026043:	83 fa 66             	cmp    edx,0x66
c0026046:	0f 84 e2 01 00 00    	je     c002622e <Vm::faultHandler(regs*)+0x25e>
c002604c:	77 47                	ja     c0026095 <Vm::faultHandler(regs*)+0xc5>
c002604e:	83 fa 36             	cmp    edx,0x36
c0026051:	0f 84 ca 01 00 00    	je     c0026221 <Vm::faultHandler(regs*)+0x251>
c0026057:	77 1a                	ja     c0026073 <Vm::faultHandler(regs*)+0xa3>
c0026059:	83 fa 26             	cmp    edx,0x26
c002605c:	0f 84 98 01 00 00    	je     c00261fa <Vm::faultHandler(regs*)+0x22a>
c0026062:	83 fa 2e             	cmp    edx,0x2e
c0026065:	0f 85 27 06 00 00    	jne    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c002606b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002606e:	31 f6                	xor    esi,esi
c0026070:	41                   	inc    ecx
c0026071:	eb bb                	jmp    c002602e <Vm::faultHandler(regs*)+0x5e>
c0026073:	83 fa 64             	cmp    edx,0x64
c0026076:	0f 84 8b 01 00 00    	je     c0026207 <Vm::faultHandler(regs*)+0x237>
c002607c:	0f 87 92 01 00 00    	ja     c0026214 <Vm::faultHandler(regs*)+0x244>
c0026082:	83 fa 3e             	cmp    edx,0x3e
c0026085:	0f 85 07 06 00 00    	jne    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c002608b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002608e:	be 01 00 00 00       	mov    esi,0x1
c0026093:	eb db                	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c0026095:	83 fa 6d             	cmp    edx,0x6d
c0026098:	0f 84 34 03 00 00    	je     c00263d2 <Vm::faultHandler(regs*)+0x402>
c002609e:	77 17                	ja     c00260b7 <Vm::faultHandler(regs*)+0xe7>
c00260a0:	83 fa 67             	cmp    edx,0x67
c00260a3:	0f 84 92 01 00 00    	je     c002623b <Vm::faultHandler(regs*)+0x26b>
c00260a9:	83 fa 6c             	cmp    edx,0x6c
c00260ac:	0f 84 b1 02 00 00    	je     c0026363 <Vm::faultHandler(regs*)+0x393>
c00260b2:	e9 db 05 00 00       	jmp    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c00260b7:	83 fa 6f             	cmp    edx,0x6f
c00260ba:	0f 84 40 04 00 00    	je     c0026500 <Vm::faultHandler(regs*)+0x530>
c00260c0:	0f 82 a2 03 00 00    	jb     c0026468 <Vm::faultHandler(regs*)+0x498>
c00260c6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00260cc:	0f 84 76 01 00 00    	je     c0026248 <Vm::faultHandler(regs*)+0x278>
c00260d2:	e9 bb 05 00 00       	jmp    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c00260d7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00260dd:	0f 84 57 05 00 00    	je     c002663a <Vm::faultHandler(regs*)+0x66a>
c00260e3:	0f 87 a9 00 00 00    	ja     c0026192 <Vm::faultHandler(regs*)+0x1c2>
c00260e9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00260ef:	0f 84 d6 04 00 00    	je     c00265cb <Vm::faultHandler(regs*)+0x5fb>
c00260f5:	77 78                	ja     c002616f <Vm::faultHandler(regs*)+0x19f>
c00260f7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00260fd:	0f 84 0e 02 00 00    	je     c0026311 <Vm::faultHandler(regs*)+0x341>
c0026103:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0026109:	0f 85 83 05 00 00    	jne    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c002610f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0026113:	89 d1                	mov    ecx,edx
c0026115:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026118:	c1 e1 08             	shl    ecx,0x8
c002611b:	09 ca                	or     edx,ecx
c002611d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026120:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026124:	89 d1                	mov    ecx,edx
c0026126:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c002612a:	c1 e1 08             	shl    ecx,0x8
c002612d:	09 ca                	or     edx,ecx
c002612f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026132:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026136:	89 d1                	mov    ecx,edx
c0026138:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002613c:	c1 e1 08             	shl    ecx,0x8
c002613f:	09 ca                	or     edx,ecx
c0026141:	81 ca 00 02 02 00    	or     edx,0x20200
c0026147:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002614a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002614e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026154:	d1 e8                	shr    eax,1
c0026156:	83 e0 01             	and    eax,0x1
c0026159:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002615c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002615f:	83 c0 06             	add    eax,0x6
c0026162:	25 ff ff 00 00       	and    eax,0xffff
c0026167:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002616a:	e9 1f 05 00 00       	jmp    c002668e <Vm::faultHandler(regs*)+0x6be>
c002616f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026175:	0f 84 95 04 00 00    	je     c0026610 <Vm::faultHandler(regs*)+0x640>
c002617b:	0f 82 66 04 00 00    	jb     c00265e7 <Vm::faultHandler(regs*)+0x617>
c0026181:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0026187:	0f 84 9a 04 00 00    	je     c0026627 <Vm::faultHandler(regs*)+0x657>
c002618d:	e9 00 05 00 00       	jmp    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c0026192:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026198:	0f 84 dd 04 00 00    	je     c002667b <Vm::faultHandler(regs*)+0x6ab>
c002619e:	77 2e                	ja     c00261ce <Vm::faultHandler(regs*)+0x1fe>
c00261a0:	81 fa ed 00 00 00    	cmp    edx,0xed
c00261a6:	0f 84 aa 04 00 00    	je     c0026656 <Vm::faultHandler(regs*)+0x686>
c00261ac:	81 fa ee 00 00 00    	cmp    edx,0xee
c00261b2:	0f 85 da 04 00 00    	jne    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c00261b8:	50                   	push   eax
c00261b9:	50                   	push   eax
c00261ba:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00261be:	50                   	push   eax
c00261bf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00261c3:	50                   	push   eax
c00261c4:	e8 13 f9 ff ff       	call   c0025adc <Vm::outbv(unsigned short, unsigned char)>
c00261c9:	e9 a5 04 00 00       	jmp    c0026673 <Vm::faultHandler(regs*)+0x6a3>
c00261ce:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00261d4:	0f 84 6d 01 00 00    	je     c0026347 <Vm::faultHandler(regs*)+0x377>
c00261da:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00261e0:	0f 84 6f 01 00 00    	je     c0026355 <Vm::faultHandler(regs*)+0x385>
c00261e6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00261ec:	0f 85 a0 04 00 00    	jne    c0026692 <Vm::faultHandler(regs*)+0x6c2>
c00261f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261f5:	e9 76 fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c00261fa:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261fd:	be 02 00 00 00       	mov    esi,0x2
c0026202:	e9 69 fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c0026207:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002620a:	be 03 00 00 00       	mov    esi,0x3
c002620f:	e9 5c fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c0026214:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026217:	be 04 00 00 00       	mov    esi,0x4
c002621c:	e9 4f fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c0026221:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026224:	be 05 00 00 00       	mov    esi,0x5
c0026229:	e9 42 fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c002622e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026231:	bd 01 00 00 00       	mov    ebp,0x1
c0026236:	e9 35 fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c002623b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002623e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026243:	e9 28 fe ff ff       	jmp    c0026070 <Vm::faultHandler(regs*)+0xa0>
c0026248:	83 e5 01             	and    ebp,0x1
c002624b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002624e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026252:	74 30                	je     c0026284 <Vm::faultHandler(regs*)+0x2b4>
c0026254:	83 e9 04             	sub    ecx,0x4
c0026257:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002625d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026263:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026266:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026269:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002626f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026273:	0f 84 12 04 00 00    	je     c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026279:	80 ce 02             	or     dh,0x2
c002627c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002627f:	e9 07 04 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026284:	83 e9 02             	sub    ecx,0x2
c0026287:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002628d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026290:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026294:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002629a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002629e:	74 05                	je     c00262a5 <Vm::faultHandler(regs*)+0x2d5>
c00262a0:	80 ce 02             	or     dh,0x2
c00262a3:	eb 03                	jmp    c00262a8 <Vm::faultHandler(regs*)+0x2d8>
c00262a5:	80 e6 fd             	and    dh,0xfd
c00262a8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00262ac:	e9 da 03 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c00262b1:	83 e5 01             	and    ebp,0x1
c00262b4:	74 2a                	je     c00262e0 <Vm::faultHandler(regs*)+0x310>
c00262b6:	8b 10                	mov    edx,DWORD PTR [eax]
c00262b8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00262be:	81 ca 00 02 02 00    	or     edx,0x20200
c00262c4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262c9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262cf:	c1 e8 09             	shr    eax,0x9
c00262d2:	83 e0 01             	and    eax,0x1
c00262d5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262d8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262db:	83 c0 04             	add    eax,0x4
c00262de:	eb 24                	jmp    c0026304 <Vm::faultHandler(regs*)+0x334>
c00262e0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00262e3:	81 ca 00 02 02 00    	or     edx,0x20200
c00262e9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262ec:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00262ef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262f5:	c1 e8 09             	shr    eax,0x9
c00262f8:	83 e0 01             	and    eax,0x1
c00262fb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262fe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0026301:	83 c0 02             	add    eax,0x2
c0026304:	25 ff ff 00 00       	and    eax,0xffff
c0026309:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002630c:	e9 7a 03 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026311:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026315:	3d ee 00 00 00       	cmp    eax,0xee
c002631a:	75 10                	jne    c002632c <Vm::faultHandler(regs*)+0x35c>
c002631c:	83 ec 0c             	sub    esp,0xc
c002631f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026322:	e8 52 f8 ff ff       	call   c0025b79 <Vm::mainloop3(unsigned long)>
c0026327:	e9 4a 03 00 00       	jmp    c0026676 <Vm::faultHandler(regs*)+0x6a6>
c002632c:	83 ec 0c             	sub    esp,0xc
c002632f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026333:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026337:	51                   	push   ecx
c0026338:	50                   	push   eax
c0026339:	53                   	push   ebx
c002633a:	e8 80 fb ff ff       	call   c0025ebf <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c002633f:	83 c4 20             	add    esp,0x20
c0026342:	e9 47 03 00 00       	jmp    c002668e <Vm::faultHandler(regs*)+0x6be>
c0026347:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002634c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026350:	e9 36 03 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002635a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002635e:	e9 28 03 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026363:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0026368:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c002636b:	74 2b                	je     c0026398 <Vm::faultHandler(regs*)+0x3c8>
c002636d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026374:	76 22                	jbe    c0026398 <Vm::faultHandler(regs*)+0x3c8>
c0026376:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002637a:	50                   	push   eax
c002637b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002637f:	50                   	push   eax
c0026380:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026384:	50                   	push   eax
c0026385:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026389:	50                   	push   eax
c002638a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002638e:	50                   	push   eax
c002638f:	6a 6c                	push   0x6c
c0026391:	6a 6c                	push   0x6c
c0026393:	e9 c0 01 00 00       	jmp    c0026558 <Vm::faultHandler(regs*)+0x588>
c0026398:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002639c:	83 ec 0c             	sub    esp,0xc
c002639f:	0f b7 f6             	movzx  esi,si
c00263a2:	50                   	push   eax
c00263a3:	e8 21 f7 ff ff       	call   c0025ac9 <Vm::inbv(unsigned short)>
c00263a8:	83 c4 0c             	add    esp,0xc
c00263ab:	0f b6 c0             	movzx  eax,al
c00263ae:	50                   	push   eax
c00263af:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00263b3:	50                   	push   eax
c00263b4:	56                   	push   esi
c00263b5:	e8 d6 fb ff ff       	call   c0025f90 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00263ba:	83 c4 10             	add    esp,0x10
c00263bd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263c0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00263c4:	74 03                	je     c00263c9 <Vm::faultHandler(regs*)+0x3f9>
c00263c6:	48                   	dec    eax
c00263c7:	eb 01                	jmp    c00263ca <Vm::faultHandler(regs*)+0x3fa>
c00263c9:	40                   	inc    eax
c00263ca:	0f b7 c0             	movzx  eax,ax
c00263cd:	e9 8e 00 00 00       	jmp    c0026460 <Vm::faultHandler(regs*)+0x490>
c00263d2:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00263d7:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00263da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263dd:	74 29                	je     c0026408 <Vm::faultHandler(regs*)+0x438>
c00263df:	3d ff ff 00 00       	cmp    eax,0xffff
c00263e4:	76 22                	jbe    c0026408 <Vm::faultHandler(regs*)+0x438>
c00263e6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00263ea:	50                   	push   eax
c00263eb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00263ef:	50                   	push   eax
c00263f0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00263f4:	50                   	push   eax
c00263f5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00263f9:	50                   	push   eax
c00263fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263fe:	50                   	push   eax
c00263ff:	6a 6d                	push   0x6d
c0026401:	6a 6d                	push   0x6d
c0026403:	e9 50 01 00 00       	jmp    c0026558 <Vm::faultHandler(regs*)+0x588>
c0026408:	83 e5 01             	and    ebp,0x1
c002640b:	0f b7 c8             	movzx  ecx,ax
c002640e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026411:	0f b7 f6             	movzx  esi,si
c0026414:	74 1e                	je     c0026434 <Vm::faultHandler(regs*)+0x464>
c0026416:	ed                   	in     eax,dx
c0026417:	55                   	push   ebp
c0026418:	50                   	push   eax
c0026419:	51                   	push   ecx
c002641a:	56                   	push   esi
c002641b:	e8 9b fb ff ff       	call   c0025fbb <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026420:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026423:	83 c4 10             	add    esp,0x10
c0026426:	8d 50 04             	lea    edx,[eax+0x4]
c0026429:	83 e8 04             	sub    eax,0x4
c002642c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026432:	eb 20                	jmp    c0026454 <Vm::faultHandler(regs*)+0x484>
c0026434:	66 ed                	in     ax,dx
c0026436:	57                   	push   edi
c0026437:	0f b7 c0             	movzx  eax,ax
c002643a:	50                   	push   eax
c002643b:	51                   	push   ecx
c002643c:	56                   	push   esi
c002643d:	e8 63 fb ff ff       	call   c0025fa5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026442:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026445:	83 c4 10             	add    esp,0x10
c0026448:	8d 50 02             	lea    edx,[eax+0x2]
c002644b:	83 e8 02             	sub    eax,0x2
c002644e:	81 e2 ff ff 00 00    	and    edx,0xffff
c0026454:	25 ff ff 00 00       	and    eax,0xffff
c0026459:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002645d:	0f 44 c2             	cmove  eax,edx
c0026460:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026463:	e9 23 02 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026468:	8d 46 ff             	lea    eax,[esi-0x1]
c002646b:	0f b6 f0             	movzx  esi,al
c002646e:	83 fe 05             	cmp    esi,0x5
c0026471:	77 23                	ja     c0026496 <Vm::faultHandler(regs*)+0x4c6>
c0026473:	ff 24 b5 a8 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd058]
c002647a:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c002647f:	eb 15                	jmp    c0026496 <Vm::faultHandler(regs*)+0x4c6>
c0026481:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026485:	eb 0f                	jmp    c0026496 <Vm::faultHandler(regs*)+0x4c6>
c0026487:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c002648b:	eb 09                	jmp    c0026496 <Vm::faultHandler(regs*)+0x4c6>
c002648d:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0026491:	eb 03                	jmp    c0026496 <Vm::faultHandler(regs*)+0x4c6>
c0026493:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026496:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002649b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002649e:	74 29                	je     c00264c9 <Vm::faultHandler(regs*)+0x4f9>
c00264a0:	3d ff ff 00 00       	cmp    eax,0xffff
c00264a5:	76 22                	jbe    c00264c9 <Vm::faultHandler(regs*)+0x4f9>
c00264a7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00264ab:	50                   	push   eax
c00264ac:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00264b0:	50                   	push   eax
c00264b1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264b5:	50                   	push   eax
c00264b6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264ba:	50                   	push   eax
c00264bb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264bf:	50                   	push   eax
c00264c0:	6a 6e                	push   0x6e
c00264c2:	6a 6e                	push   0x6e
c00264c4:	e9 8f 00 00 00       	jmp    c0026558 <Vm::faultHandler(regs*)+0x588>
c00264c9:	52                   	push   edx
c00264ca:	0f b7 c0             	movzx  eax,ax
c00264cd:	52                   	push   edx
c00264ce:	50                   	push   eax
c00264cf:	57                   	push   edi
c00264d0:	e8 87 fa ff ff       	call   c0025f5c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00264d5:	59                   	pop    ecx
c00264d6:	5e                   	pop    esi
c00264d7:	0f b6 c0             	movzx  eax,al
c00264da:	50                   	push   eax
c00264db:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00264df:	50                   	push   eax
c00264e0:	e8 f7 f5 ff ff       	call   c0025adc <Vm::outbv(unsigned short, unsigned char)>
c00264e5:	83 c4 10             	add    esp,0x10
c00264e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00264eb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264ef:	74 03                	je     c00264f4 <Vm::faultHandler(regs*)+0x524>
c00264f1:	48                   	dec    eax
c00264f2:	eb 01                	jmp    c00264f5 <Vm::faultHandler(regs*)+0x525>
c00264f4:	40                   	inc    eax
c00264f5:	0f b7 c0             	movzx  eax,ax
c00264f8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00264fb:	e9 8b 01 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026500:	8d 46 ff             	lea    eax,[esi-0x1]
c0026503:	0f b6 f0             	movzx  esi,al
c0026506:	83 fe 05             	cmp    esi,0x5
c0026509:	77 1e                	ja     c0026529 <Vm::faultHandler(regs*)+0x559>
c002650b:	ff 24 b5 c0 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd040]
c0026512:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026516:	eb 11                	jmp    c0026529 <Vm::faultHandler(regs*)+0x559>
c0026518:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c002651b:	eb 0c                	jmp    c0026529 <Vm::faultHandler(regs*)+0x559>
c002651d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0026520:	eb 07                	jmp    c0026529 <Vm::faultHandler(regs*)+0x559>
c0026522:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026525:	eb 02                	jmp    c0026529 <Vm::faultHandler(regs*)+0x559>
c0026527:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026529:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002652e:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026531:	74 37                	je     c002656a <Vm::faultHandler(regs*)+0x59a>
c0026533:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026539:	76 2f                	jbe    c002656a <Vm::faultHandler(regs*)+0x59a>
c002653b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002653f:	50                   	push   eax
c0026540:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026544:	50                   	push   eax
c0026545:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026549:	50                   	push   eax
c002654a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002654e:	50                   	push   eax
c002654f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026553:	50                   	push   eax
c0026554:	6a 6f                	push   0x6f
c0026556:	6a 6f                	push   0x6f
c0026558:	68 4c 2f 03 c0       	push   0xc0032f4c
c002655d:	e8 b8 2c ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026562:	83 c4 20             	add    esp,0x20
c0026565:	e9 86 01 00 00       	jmp    c00266f0 <Vm::faultHandler(regs*)+0x720>
c002656a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c002656d:	0f b7 d7             	movzx  edx,di
c0026570:	0f b7 c6             	movzx  eax,si
c0026573:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026576:	81 e1 00 04 00 00    	and    ecx,0x400
c002657c:	83 e5 01             	and    ebp,0x1
c002657f:	74 1c                	je     c002659d <Vm::faultHandler(regs*)+0x5cd>
c0026581:	55                   	push   ebp
c0026582:	55                   	push   ebp
c0026583:	50                   	push   eax
c0026584:	52                   	push   edx
c0026585:	e8 f5 f9 ff ff       	call   c0025f7f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c002658a:	83 c4 10             	add    esp,0x10
c002658d:	89 fa                	mov    edx,edi
c002658f:	ef                   	out    dx,eax
c0026590:	8d 46 04             	lea    eax,[esi+0x4]
c0026593:	83 ee 04             	sub    esi,0x4
c0026596:	25 ff ff 00 00       	and    eax,0xffff
c002659b:	eb 1b                	jmp    c00265b8 <Vm::faultHandler(regs*)+0x5e8>
c002659d:	55                   	push   ebp
c002659e:	55                   	push   ebp
c002659f:	50                   	push   eax
c00265a0:	52                   	push   edx
c00265a1:	e8 c7 f9 ff ff       	call   c0025f6d <Vm::readWordFromReal(unsigned short, unsigned short)>
c00265a6:	83 c4 10             	add    esp,0x10
c00265a9:	89 fa                	mov    edx,edi
c00265ab:	66 ef                	out    dx,ax
c00265ad:	8d 46 02             	lea    eax,[esi+0x2]
c00265b0:	83 ee 02             	sub    esi,0x2
c00265b3:	25 ff ff 00 00       	and    eax,0xffff
c00265b8:	81 e6 ff ff 00 00    	and    esi,0xffff
c00265be:	85 c9                	test   ecx,ecx
c00265c0:	0f 44 f0             	cmove  esi,eax
c00265c3:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00265c6:	e9 c0 00 00 00       	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c00265cb:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00265d2:	83 ec 0c             	sub    esp,0xc
c00265d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265d9:	50                   	push   eax
c00265da:	e8 ea f4 ff ff       	call   c0025ac9 <Vm::inbv(unsigned short)>
c00265df:	0f b6 c0             	movzx  eax,al
c00265e2:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00265e5:	eb 3a                	jmp    c0026621 <Vm::faultHandler(regs*)+0x651>
c00265e7:	83 e5 01             	and    ebp,0x1
c00265ea:	74 07                	je     c00265f3 <Vm::faultHandler(regs*)+0x623>
c00265ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265f0:	ed                   	in     eax,dx
c00265f1:	eb 14                	jmp    c0026607 <Vm::faultHandler(regs*)+0x637>
c00265f3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00265f6:	66 31 f6             	xor    si,si
c00265f9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00265fc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026600:	66 ed                	in     ax,dx
c0026602:	0f b7 c0             	movzx  eax,ax
c0026605:	09 f0                	or     eax,esi
c0026607:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002660a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002660e:	eb 7e                	jmp    c002668e <Vm::faultHandler(regs*)+0x6be>
c0026610:	52                   	push   edx
c0026611:	52                   	push   edx
c0026612:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026616:	50                   	push   eax
c0026617:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002661b:	50                   	push   eax
c002661c:	e8 bb f4 ff ff       	call   c0025adc <Vm::outbv(unsigned short, unsigned char)>
c0026621:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0026625:	eb 4f                	jmp    c0026676 <Vm::faultHandler(regs*)+0x6a6>
c0026627:	83 e5 01             	and    ebp,0x1
c002662a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c002662d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026631:	74 03                	je     c0026636 <Vm::faultHandler(regs*)+0x666>
c0026633:	ef                   	out    dx,eax
c0026634:	eb d4                	jmp    c002660a <Vm::faultHandler(regs*)+0x63a>
c0026636:	66 ef                	out    dx,ax
c0026638:	eb d0                	jmp    c002660a <Vm::faultHandler(regs*)+0x63a>
c002663a:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002663e:	83 ec 0c             	sub    esp,0xc
c0026641:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0026648:	50                   	push   eax
c0026649:	e8 7b f4 ff ff       	call   c0025ac9 <Vm::inbv(unsigned short)>
c002664e:	0f b6 c0             	movzx  eax,al
c0026651:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0026654:	eb 1d                	jmp    c0026673 <Vm::faultHandler(regs*)+0x6a3>
c0026656:	83 e5 01             	and    ebp,0x1
c0026659:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002665c:	74 03                	je     c0026661 <Vm::faultHandler(regs*)+0x691>
c002665e:	ed                   	in     eax,dx
c002665f:	eb 0d                	jmp    c002666e <Vm::faultHandler(regs*)+0x69e>
c0026661:	66 ed                	in     ax,dx
c0026663:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026666:	0f b7 c0             	movzx  eax,ax
c0026669:	66 31 d2             	xor    dx,dx
c002666c:	09 d0                	or     eax,edx
c002666e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0026671:	eb 18                	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026673:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026676:	83 c4 10             	add    esp,0x10
c0026679:	eb 13                	jmp    c002668e <Vm::faultHandler(regs*)+0x6be>
c002667b:	83 e5 01             	and    ebp,0x1
c002667e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026681:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026684:	74 03                	je     c0026689 <Vm::faultHandler(regs*)+0x6b9>
c0026686:	ef                   	out    dx,eax
c0026687:	eb 02                	jmp    c002668b <Vm::faultHandler(regs*)+0x6bb>
c0026689:	66 ef                	out    dx,ax
c002668b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002668e:	b0 01                	mov    al,0x1
c0026690:	eb 60                	jmp    c00266f2 <Vm::faultHandler(regs*)+0x722>
c0026692:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026696:	50                   	push   eax
c0026697:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002669b:	50                   	push   eax
c002669c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00266a0:	50                   	push   eax
c00266a1:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00266a5:	50                   	push   eax
c00266a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00266aa:	50                   	push   eax
c00266ab:	52                   	push   edx
c00266ac:	52                   	push   edx
c00266ad:	68 79 2f 03 c0       	push   0xc0032f79
c00266b2:	e8 63 2b ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00266b7:	83 c4 20             	add    esp,0x20
c00266ba:	83 ec 0c             	sub    esp,0xc
c00266bd:	6a 60                	push   0x60
c00266bf:	e8 05 f4 ff ff       	call   c0025ac9 <Vm::inbv(unsigned short)>
c00266c4:	83 c4 10             	add    esp,0x10
c00266c7:	0f b6 d0             	movzx  edx,al
c00266ca:	83 fa 1c             	cmp    edx,0x1c
c00266cd:	74 05                	je     c00266d4 <Vm::faultHandler(regs*)+0x704>
c00266cf:	83 fa 5a             	cmp    edx,0x5a
c00266d2:	75 e6                	jne    c00266ba <Vm::faultHandler(regs*)+0x6ea>
c00266d4:	0f b6 c0             	movzx  eax,al
c00266d7:	83 f8 1c             	cmp    eax,0x1c
c00266da:	74 05                	je     c00266e1 <Vm::faultHandler(regs*)+0x711>
c00266dc:	83 f8 5a             	cmp    eax,0x5a
c00266df:	75 0f                	jne    c00266f0 <Vm::faultHandler(regs*)+0x720>
c00266e1:	83 ec 0c             	sub    esp,0xc
c00266e4:	6a 60                	push   0x60
c00266e6:	e8 de f3 ff ff       	call   c0025ac9 <Vm::inbv(unsigned short)>
c00266eb:	83 c4 10             	add    esp,0x10
c00266ee:	eb e4                	jmp    c00266d4 <Vm::faultHandler(regs*)+0x704>
c00266f0:	31 c0                	xor    eax,eax
c00266f2:	83 c4 2c             	add    esp,0x2c
c00266f5:	5b                   	pop    ebx
c00266f6:	5e                   	pop    esi
c00266f7:	5f                   	pop    edi
c00266f8:	5d                   	pop    ebp
c00266f9:	c3                   	ret    

c00266fa <noCopro(unsigned long)>:
c00266fa:	c3                   	ret    

c00266fb <nmiHandler(regs*, void*)>:
c00266fb:	83 ec 0c             	sub    esp,0xc
c00266fe:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026703:	83 ec 0c             	sub    esp,0xc
c0026706:	50                   	push   eax
c0026707:	e8 dc f4 fe ff       	call   c0015be8 <Computer::handleNMI()>
c002670c:	83 c4 10             	add    esp,0x10
c002670f:	90                   	nop
c0026710:	83 c4 0c             	add    esp,0xc
c0026713:	c3                   	ret    

c0026714 <doubleFault(regs*, void*)>:
c0026714:	55                   	push   ebp
c0026715:	89 e5                	mov    ebp,esp
c0026717:	83 ec 08             	sub    esp,0x8
c002671a:	83 ec 0c             	sub    esp,0xc
c002671d:	68 d8 2f 03 c0       	push   0xc0032fd8
c0026722:	e8 7b 9a ff ff       	call   c00201a2 <KePanic(char const*)>
c0026727:	83 c4 10             	add    esp,0x10
c002672a:	90                   	nop
c002672b:	c9                   	leave  
c002672c:	c3                   	ret    

c002672d <displayDebugInfo(regs*)>:
c002672d:	83 ec 1c             	sub    esp,0x1c
c0026730:	0f 20 c0             	mov    eax,cr0
c0026733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026737:	0f 20 d0             	mov    eax,cr2
c002673a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002673e:	0f 20 d8             	mov    eax,cr3
c0026741:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026745:	0f 20 e0             	mov    eax,cr4
c0026748:	89 04 24             	mov    DWORD PTR [esp],eax
c002674b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002674f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0026752:	83 ec 08             	sub    esp,0x8
c0026755:	50                   	push   eax
c0026756:	68 f4 2f 03 c0       	push   0xc0032ff4
c002675b:	e8 ba 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026760:	83 c4 10             	add    esp,0x10
c0026763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026767:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c002676a:	83 ec 08             	sub    esp,0x8
c002676d:	50                   	push   eax
c002676e:	68 e5 2f 03 c0       	push   0xc0032fe5
c0026773:	e8 a2 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026778:	83 c4 10             	add    esp,0x10
c002677b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002677f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0026782:	83 ec 08             	sub    esp,0x8
c0026785:	50                   	push   eax
c0026786:	68 f0 2f 03 c0       	push   0xc0032ff0
c002678b:	e8 8a 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026790:	83 c4 10             	add    esp,0x10
c0026793:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026797:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002679a:	83 ec 08             	sub    esp,0x8
c002679d:	50                   	push   eax
c002679e:	68 ff 2f 03 c0       	push   0xc0032fff
c00267a3:	e8 72 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00267a8:	83 c4 10             	add    esp,0x10
c00267ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267af:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00267b2:	83 ec 08             	sub    esp,0x8
c00267b5:	50                   	push   eax
c00267b6:	68 0a 30 03 c0       	push   0xc003300a
c00267bb:	e8 5a 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00267c0:	83 c4 10             	add    esp,0x10
c00267c3:	83 ec 08             	sub    esp,0x8
c00267c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00267ca:	68 15 30 03 c0       	push   0xc0033015
c00267cf:	e8 46 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00267d4:	83 c4 10             	add    esp,0x10
c00267d7:	83 ec 08             	sub    esp,0x8
c00267da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00267de:	68 20 30 03 c0       	push   0xc0033020
c00267e3:	e8 32 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00267e8:	83 c4 10             	add    esp,0x10
c00267eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267ef:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267f2:	c1 e0 05             	shl    eax,0x5
c00267f5:	8d 90 c0 43 03 c0    	lea    edx,[eax-0x3ffcbc40]
c00267fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267ff:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0026802:	83 ec 04             	sub    esp,0x4
c0026805:	52                   	push   edx
c0026806:	50                   	push   eax
c0026807:	68 2b 30 03 c0       	push   0xc003302b
c002680c:	e8 09 2a ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026811:	83 c4 10             	add    esp,0x10
c0026814:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026819:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002681f:	83 ec 0c             	sub    esp,0xc
c0026822:	50                   	push   eax
c0026823:	e8 57 08 ff ff       	call   c001707f <setActiveTerminal(VgaText*)>
c0026828:	83 c4 10             	add    esp,0x10
c002682b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026830:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026836:	83 ec 08             	sub    esp,0x8
c0026839:	68 3a 30 03 c0       	push   0xc003303a
c002683e:	50                   	push   eax
c002683f:	e8 78 0b ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026844:	83 c4 10             	add    esp,0x10
c0026847:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002684c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026852:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026856:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026859:	83 ec 08             	sub    esp,0x8
c002685c:	52                   	push   edx
c002685d:	50                   	push   eax
c002685e:	e8 13 0b ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026863:	83 c4 10             	add    esp,0x10
c0026866:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002686b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026871:	83 ec 08             	sub    esp,0x8
c0026874:	68 48 30 03 c0       	push   0xc0033048
c0026879:	50                   	push   eax
c002687a:	e8 3d 0b ff ff       	call   c00173bc <VgaText::puts(char const*)>
c002687f:	83 c4 10             	add    esp,0x10
c0026882:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026887:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002688d:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0026892:	8b 12                	mov    edx,DWORD PTR [edx]
c0026894:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026897:	83 c2 0c             	add    edx,0xc
c002689a:	83 ec 08             	sub    esp,0x8
c002689d:	52                   	push   edx
c002689e:	50                   	push   eax
c002689f:	e8 18 0b ff ff       	call   c00173bc <VgaText::puts(char const*)>
c00268a4:	83 c4 10             	add    esp,0x10
c00268a7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268ac:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268b2:	83 ec 08             	sub    esp,0x8
c00268b5:	68 51 30 03 c0       	push   0xc0033051
c00268ba:	50                   	push   eax
c00268bb:	e8 fc 0a ff ff       	call   c00173bc <VgaText::puts(char const*)>
c00268c0:	83 c4 10             	add    esp,0x10
c00268c3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00268d2:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00268d5:	83 ec 08             	sub    esp,0x8
c00268d8:	52                   	push   edx
c00268d9:	50                   	push   eax
c00268da:	e8 97 0a ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c00268df:	83 c4 10             	add    esp,0x10
c00268e2:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268e7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268ed:	83 ec 08             	sub    esp,0x8
c00268f0:	68 59 30 03 c0       	push   0xc0033059
c00268f5:	50                   	push   eax
c00268f6:	e8 c1 0a ff ff       	call   c00173bc <VgaText::puts(char const*)>
c00268fb:	83 c4 10             	add    esp,0x10
c00268fe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026903:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026909:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002690d:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0026910:	83 ec 08             	sub    esp,0x8
c0026913:	52                   	push   edx
c0026914:	50                   	push   eax
c0026915:	e8 5c 0a ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c002691a:	83 c4 10             	add    esp,0x10
c002691d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026922:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026928:	83 ec 08             	sub    esp,0x8
c002692b:	68 61 30 03 c0       	push   0xc0033061
c0026930:	50                   	push   eax
c0026931:	e8 86 0a ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026936:	83 c4 10             	add    esp,0x10
c0026939:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002693e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026944:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026948:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c002694b:	83 ec 08             	sub    esp,0x8
c002694e:	52                   	push   edx
c002694f:	50                   	push   eax
c0026950:	e8 21 0a ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026955:	83 c4 10             	add    esp,0x10
c0026958:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002695d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026963:	83 ec 08             	sub    esp,0x8
c0026966:	68 69 30 03 c0       	push   0xc0033069
c002696b:	50                   	push   eax
c002696c:	e8 4b 0a ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026971:	83 c4 10             	add    esp,0x10
c0026974:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026979:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002697f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026983:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026986:	83 ec 08             	sub    esp,0x8
c0026989:	52                   	push   edx
c002698a:	50                   	push   eax
c002698b:	e8 e6 09 ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026990:	83 c4 10             	add    esp,0x10
c0026993:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026998:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002699e:	83 ec 08             	sub    esp,0x8
c00269a1:	68 71 30 03 c0       	push   0xc0033071
c00269a6:	50                   	push   eax
c00269a7:	e8 10 0a ff ff       	call   c00173bc <VgaText::puts(char const*)>
c00269ac:	83 c4 10             	add    esp,0x10
c00269af:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269ba:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269be:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00269c1:	83 ec 08             	sub    esp,0x8
c00269c4:	52                   	push   edx
c00269c5:	50                   	push   eax
c00269c6:	e8 ab 09 ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c00269cb:	83 c4 10             	add    esp,0x10
c00269ce:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269d9:	83 ec 08             	sub    esp,0x8
c00269dc:	68 79 30 03 c0       	push   0xc0033079
c00269e1:	50                   	push   eax
c00269e2:	e8 d5 09 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c00269e7:	83 c4 10             	add    esp,0x10
c00269ea:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269ef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269f9:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00269fc:	83 ec 08             	sub    esp,0x8
c00269ff:	52                   	push   edx
c0026a00:	50                   	push   eax
c0026a01:	e8 70 09 ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026a06:	83 c4 10             	add    esp,0x10
c0026a09:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a14:	83 ec 08             	sub    esp,0x8
c0026a17:	68 81 30 03 c0       	push   0xc0033081
c0026a1c:	50                   	push   eax
c0026a1d:	e8 9a 09 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026a22:	83 c4 10             	add    esp,0x10
c0026a25:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a30:	83 ec 08             	sub    esp,0x8
c0026a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026a37:	50                   	push   eax
c0026a38:	e8 39 09 ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026a3d:	83 c4 10             	add    esp,0x10
c0026a40:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a45:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a4b:	83 ec 08             	sub    esp,0x8
c0026a4e:	68 8a 30 03 c0       	push   0xc003308a
c0026a53:	50                   	push   eax
c0026a54:	e8 63 09 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026a59:	83 c4 10             	add    esp,0x10
c0026a5c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a67:	83 ec 08             	sub    esp,0x8
c0026a6a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026a6e:	50                   	push   eax
c0026a6f:	e8 02 09 ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026a74:	83 c4 10             	add    esp,0x10
c0026a77:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a82:	83 ec 08             	sub    esp,0x8
c0026a85:	68 92 30 03 c0       	push   0xc0033092
c0026a8a:	50                   	push   eax
c0026a8b:	e8 2c 09 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026a90:	83 c4 10             	add    esp,0x10
c0026a93:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a9e:	83 ec 08             	sub    esp,0x8
c0026aa1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026aa5:	50                   	push   eax
c0026aa6:	e8 cb 08 ff ff       	call   c0017376 <VgaText::putx(unsigned int)>
c0026aab:	83 c4 10             	add    esp,0x10
c0026aae:	fa                   	cli    
c0026aaf:	f4                   	hlt    
c0026ab0:	eb fe                	jmp    c0026ab0 <displayDebugInfo(regs*)+0x383>

c0026ab2 <HalSystemIdle()>:
c0026ab2:	56                   	push   esi
c0026ab3:	53                   	push   ebx
c0026ab4:	83 ec 14             	sub    esp,0x14
c0026ab7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026abc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026ac2:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026ac8:	83 e0 04             	and    eax,0x4
c0026acb:	0f b6 c0             	movzx  eax,al
c0026ace:	85 c0                	test   eax,eax
c0026ad0:	0f 95 c0             	setne  al
c0026ad3:	0f b6 c0             	movzx  eax,al
c0026ad6:	85 c0                	test   eax,eax
c0026ad8:	74 4c                	je     c0026b26 <HalSystemIdle()+0x74>
c0026ada:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026adf:	83 ec 08             	sub    esp,0x8
c0026ae2:	68 e1 00 00 00       	push   0xe1
c0026ae7:	50                   	push   eax
c0026ae8:	e8 07 ef fe ff       	call   c00159f4 <Computer::rdmsr(unsigned int)>
c0026aed:	83 c4 10             	add    esp,0x10
c0026af0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026af4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026af8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026afd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026b01:	83 e2 02             	and    edx,0x2
c0026b04:	89 d3                	mov    ebx,edx
c0026b06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026b0a:	83 e2 00             	and    edx,0x0
c0026b0d:	89 d6                	mov    esi,edx
c0026b0f:	56                   	push   esi
c0026b10:	53                   	push   ebx
c0026b11:	68 e1 00 00 00       	push   0xe1
c0026b16:	50                   	push   eax
c0026b17:	e8 04 ef fe ff       	call   c0015a20 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026b1c:	83 c4 10             	add    esp,0x10
c0026b1f:	e8 70 96 fd ff       	call   c0000194 <doTPAUSE>
c0026b24:	eb 01                	jmp    c0026b27 <HalSystemIdle()+0x75>
c0026b26:	f4                   	hlt    
c0026b27:	90                   	nop
c0026b28:	83 c4 14             	add    esp,0x14
c0026b2b:	5b                   	pop    ebx
c0026b2c:	5e                   	pop    esi
c0026b2d:	c3                   	ret    

c0026b2e <displayProgramFault(char const*)>:
c0026b2e:	83 ec 0c             	sub    esp,0xc
c0026b31:	83 ec 0c             	sub    esp,0xc
c0026b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b38:	e8 dd 26 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026b3d:	83 c4 10             	add    esp,0x10
c0026b40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b45:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b50:	85 c0                	test   eax,eax
c0026b52:	74 21                	je     c0026b75 <displayProgramFault(char const*)+0x47>
c0026b54:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b59:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b64:	6a 04                	push   0x4
c0026b66:	6a 0f                	push   0xf
c0026b68:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026b6c:	50                   	push   eax
c0026b6d:	e8 bc 08 ff ff       	call   c001742e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026b72:	83 c4 10             	add    esp,0x10
c0026b75:	90                   	nop
c0026b76:	83 c4 0c             	add    esp,0xc
c0026b79:	c3                   	ret    

c0026b7a <gpFault(regs*, void*)>:
c0026b7a:	83 ec 1c             	sub    esp,0x1c
c0026b7d:	c7 05 74 02 04 c0 d0 5f 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0025fd0
c0026b87:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b8c:	85 c0                	test   eax,eax
c0026b8e:	74 1e                	je     c0026bae <gpFault(regs*, void*)+0x34>
c0026b90:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b95:	83 ec 0c             	sub    esp,0xc
c0026b98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026b9c:	ff d0                	call   eax
c0026b9e:	83 c4 10             	add    esp,0x10
c0026ba1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026ba5:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026baa:	85 c0                	test   eax,eax
c0026bac:	75 2e                	jne    c0026bdc <gpFault(regs*, void*)+0x62>
c0026bae:	83 ec 0c             	sub    esp,0xc
c0026bb1:	68 9a 30 03 c0       	push   0xc003309a
c0026bb6:	e8 73 ff ff ff       	call   c0026b2e <displayProgramFault(char const*)>
c0026bbb:	83 c4 10             	add    esp,0x10
c0026bbe:	83 ec 0c             	sub    esp,0xc
c0026bc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026bc5:	e8 63 fb ff ff       	call   c002672d <displayDebugInfo(regs*)>
c0026bca:	83 c4 10             	add    esp,0x10
c0026bcd:	83 ec 0c             	sub    esp,0xc
c0026bd0:	6a 00                	push   0x0
c0026bd2:	e8 25 ee ff ff       	call   c00259fc <Thr::terminateFromIRQ(int)>
c0026bd7:	83 c4 10             	add    esp,0x10
c0026bda:	eb 01                	jmp    c0026bdd <gpFault(regs*, void*)+0x63>
c0026bdc:	90                   	nop
c0026bdd:	83 c4 1c             	add    esp,0x1c
c0026be0:	c3                   	ret    

c0026be1 <pgFault(regs*, void*)>:
c0026be1:	83 ec 1c             	sub    esp,0x1c
c0026be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026be8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026beb:	0f 20 d0             	mov    eax,cr2
c0026bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bf2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026bf6:	83 ec 04             	sub    esp,0x4
c0026bf9:	52                   	push   edx
c0026bfa:	50                   	push   eax
c0026bfb:	68 78 31 03 c0       	push   0xc0033178
c0026c00:	e8 15 26 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026c05:	83 c4 10             	add    esp,0x10
c0026c08:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026c0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0026c0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026c12:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026c18:	0f 20 d2             	mov    edx,cr2
c0026c1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026c1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026c23:	83 ec 08             	sub    esp,0x8
c0026c26:	52                   	push   edx
c0026c27:	50                   	push   eax
c0026c28:	e8 5d 20 ff ff       	call   c0018c8a <VAS::tryLoadBackOffDisk(unsigned long)>
c0026c2d:	83 c4 10             	add    esp,0x10
c0026c30:	0f b6 c0             	movzx  eax,al
c0026c33:	85 c0                	test   eax,eax
c0026c35:	75 2e                	jne    c0026c65 <pgFault(regs*, void*)+0x84>
c0026c37:	83 ec 0c             	sub    esp,0xc
c0026c3a:	68 b3 30 03 c0       	push   0xc00330b3
c0026c3f:	e8 ea fe ff ff       	call   c0026b2e <displayProgramFault(char const*)>
c0026c44:	83 c4 10             	add    esp,0x10
c0026c47:	83 ec 0c             	sub    esp,0xc
c0026c4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c4e:	e8 da fa ff ff       	call   c002672d <displayDebugInfo(regs*)>
c0026c53:	83 c4 10             	add    esp,0x10
c0026c56:	83 ec 0c             	sub    esp,0xc
c0026c59:	6a 00                	push   0x0
c0026c5b:	e8 9c ed ff ff       	call   c00259fc <Thr::terminateFromIRQ(int)>
c0026c60:	83 c4 10             	add    esp,0x10
c0026c63:	eb 01                	jmp    c0026c66 <pgFault(regs*, void*)+0x85>
c0026c65:	90                   	nop
c0026c66:	83 c4 1c             	add    esp,0x1c
c0026c69:	c3                   	ret    

c0026c6a <otherISRHandler(regs*, void*)>:
c0026c6a:	83 ec 0c             	sub    esp,0xc
c0026c6d:	83 ec 0c             	sub    esp,0xc
c0026c70:	68 a0 31 03 c0       	push   0xc00331a0
c0026c75:	e8 b4 fe ff ff       	call   c0026b2e <displayProgramFault(char const*)>
c0026c7a:	83 c4 10             	add    esp,0x10
c0026c7d:	83 ec 0c             	sub    esp,0xc
c0026c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c84:	e8 a4 fa ff ff       	call   c002672d <displayDebugInfo(regs*)>
c0026c89:	83 c4 10             	add    esp,0x10
c0026c8c:	83 ec 0c             	sub    esp,0xc
c0026c8f:	6a 00                	push   0x0
c0026c91:	e8 66 ed ff ff       	call   c00259fc <Thr::terminateFromIRQ(int)>
c0026c96:	83 c4 10             	add    esp,0x10
c0026c99:	90                   	nop
c0026c9a:	83 c4 0c             	add    esp,0xc
c0026c9d:	c3                   	ret    

c0026c9e <opcodeFault(regs*, void*)>:
c0026c9e:	55                   	push   ebp
c0026c9f:	89 e5                	mov    ebp,esp
c0026ca1:	83 ec 08             	sub    esp,0x8
c0026ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ca7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026caa:	83 ec 08             	sub    esp,0x8
c0026cad:	50                   	push   eax
c0026cae:	68 be 30 03 c0       	push   0xc00330be
c0026cb3:	e8 62 25 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026cb8:	83 c4 10             	add    esp,0x10
c0026cbb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026cc0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026cc6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026ccc:	0f b6 c0             	movzx  eax,al
c0026ccf:	85 c0                	test   eax,eax
c0026cd1:	74 21                	je     c0026cf4 <opcodeFault(regs*, void*)+0x56>
c0026cd3:	83 ec 0c             	sub    esp,0xc
c0026cd6:	68 c8 31 03 c0       	push   0xc00331c8
c0026cdb:	e8 3a 25 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026ce0:	83 c4 10             	add    esp,0x10
c0026ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ce6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026ce9:	8d 50 19             	lea    edx,[eax+0x19]
c0026cec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026cf2:	eb 2b                	jmp    c0026d1f <opcodeFault(regs*, void*)+0x81>
c0026cf4:	83 ec 0c             	sub    esp,0xc
c0026cf7:	68 cc 30 03 c0       	push   0xc00330cc
c0026cfc:	e8 2d fe ff ff       	call   c0026b2e <displayProgramFault(char const*)>
c0026d01:	83 c4 10             	add    esp,0x10
c0026d04:	83 ec 0c             	sub    esp,0xc
c0026d07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d0a:	e8 1e fa ff ff       	call   c002672d <displayDebugInfo(regs*)>
c0026d0f:	83 c4 10             	add    esp,0x10
c0026d12:	83 ec 0c             	sub    esp,0xc
c0026d15:	6a 00                	push   0x0
c0026d17:	e8 e0 ec ff ff       	call   c00259fc <Thr::terminateFromIRQ(int)>
c0026d1c:	83 c4 10             	add    esp,0x10
c0026d1f:	c9                   	leave  
c0026d20:	c3                   	ret    

c0026d21 <i386SaveCoprocessor(void*)>:
c0026d21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d25:	83 c0 3f             	add    eax,0x3f
c0026d28:	83 e0 c0             	and    eax,0xffffffc0
c0026d2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d2f:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026d35 <i386LoadCoprocessor(void*)>:
c0026d35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d39:	83 c0 3f             	add    eax,0x3f
c0026d3c:	83 e0 c0             	and    eax,0xffffffc0
c0026d3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d43:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026d49 <x87EmulHandler(regs*, void*)>:
c0026d49:	53                   	push   ebx
c0026d4a:	83 ec 08             	sub    esp,0x8
c0026d4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026d52:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026d56:	74 10                	je     c0026d68 <x87EmulHandler(regs*, void*)+0x1f>
c0026d58:	83 ec 0c             	sub    esp,0xc
c0026d5b:	68 d9 30 03 c0       	push   0xc00330d9
c0026d60:	e8 3d 94 ff ff       	call   c00201a2 <KePanic(char const*)>
c0026d65:	83 c4 10             	add    esp,0x10
c0026d68:	0f 20 c0             	mov    eax,cr0
c0026d6b:	a8 08                	test   al,0x8
c0026d6d:	74 59                	je     c0026dc8 <x87EmulHandler(regs*, void*)+0x7f>
c0026d6f:	0f 06                	clts   
c0026d71:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026d76:	85 c0                	test   eax,eax
c0026d78:	74 0e                	je     c0026d88 <x87EmulHandler(regs*, void*)+0x3f>
c0026d7a:	83 ec 0c             	sub    esp,0xc
c0026d7d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026d80:	e8 9c ff ff ff       	call   c0026d21 <i386SaveCoprocessor(void*)>
c0026d85:	83 c4 10             	add    esp,0x10
c0026d88:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026d8e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026d92:	75 12                	jne    c0026da6 <x87EmulHandler(regs*, void*)+0x5d>
c0026d94:	83 ec 0c             	sub    esp,0xc
c0026d97:	68 40 02 00 00       	push   0x240
c0026d9c:	e8 42 f6 fe ff       	call   c00163e3 <malloc>
c0026da1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026da4:	eb 10                	jmp    c0026db6 <x87EmulHandler(regs*, void*)+0x6d>
c0026da6:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026dab:	83 ec 0c             	sub    esp,0xc
c0026dae:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026db1:	e8 7f ff ff ff       	call   c0026d35 <i386LoadCoprocessor(void*)>
c0026db6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026dbb:	83 c4 10             	add    esp,0x10
c0026dbe:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026dc3:	83 c4 08             	add    esp,0x8
c0026dc6:	5b                   	pop    ebx
c0026dc7:	c3                   	ret    
c0026dc8:	83 ec 0c             	sub    esp,0xc
c0026dcb:	68 ed 30 03 c0       	push   0xc00330ed
c0026dd0:	e8 45 24 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026dd5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026ddd:	83 c4 18             	add    esp,0x18
c0026de0:	5b                   	pop    ebx
c0026de1:	e9 16 ec ff ff       	jmp    c00259fc <Thr::terminateFromIRQ(int)>

c0026de6 <HalInitialiseCoprocessor()>:
c0026de6:	83 ec 10             	sub    esp,0x10
c0026de9:	6a 00                	push   0x0
c0026deb:	68 49 6d 02 c0       	push   0xc0026d49
c0026df0:	6a 07                	push   0x7
c0026df2:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026dfc:	e8 f9 49 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026e01:	e8 0a 71 00 00       	call   c002df10 <avxDetect>
c0026e06:	83 c4 10             	add    esp,0x10
c0026e09:	85 c0                	test   eax,eax
c0026e0b:	74 1c                	je     c0026e29 <HalInitialiseCoprocessor()+0x43>
c0026e0d:	c7 05 70 02 04 c0 3a df 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002df3a
c0026e17:	c7 05 6c 02 04 c0 4b df 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002df4b
c0026e21:	83 c4 0c             	add    esp,0xc
c0026e24:	e9 33 71 00 00       	jmp    c002df5c <avxInit>
c0026e29:	e8 52 74 00 00       	call   c002e280 <sseDetect>
c0026e2e:	85 c0                	test   eax,eax
c0026e30:	74 1c                	je     c0026e4e <HalInitialiseCoprocessor()+0x68>
c0026e32:	c7 05 70 02 04 c0 98 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e298
c0026e3c:	c7 05 6c 02 04 c0 a0 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e2a0
c0026e46:	83 c4 0c             	add    esp,0xc
c0026e49:	e9 5a 74 00 00       	jmp    c002e2a8 <sseInit>
c0026e4e:	e8 73 74 00 00       	call   c002e2c6 <x87Detect>
c0026e53:	85 c0                	test   eax,eax
c0026e55:	74 1c                	je     c0026e73 <HalInitialiseCoprocessor()+0x8d>
c0026e57:	c7 05 70 02 04 c0 e1 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e2e1
c0026e61:	c7 05 6c 02 04 c0 e8 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e2e8
c0026e6b:	83 c4 0c             	add    esp,0xc
c0026e6e:	e9 7c 74 00 00       	jmp    c002e2ef <x87Init>
c0026e73:	c7 05 70 02 04 c0 fa 66 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00266fa
c0026e7d:	c7 05 6c 02 04 c0 fa 66 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00266fa
c0026e87:	0f 20 c0             	mov    eax,cr0
c0026e8a:	83 c8 04             	or     eax,0x4
c0026e8d:	0f 22 c0             	mov    cr0,eax
c0026e90:	83 c4 0c             	add    esp,0xc
c0026e93:	c3                   	ret    

c0026e94 <HalPanic(char const*)>:
c0026e94:	53                   	push   ebx
c0026e95:	83 ec 10             	sub    esp,0x10
c0026e98:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026e9c:	fa                   	cli    
c0026e9d:	53                   	push   ebx
c0026e9e:	68 03 31 03 c0       	push   0xc0033103
c0026ea3:	e8 72 23 ff ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0026ea8:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026ead:	83 c4 10             	add    esp,0x10
c0026eb0:	85 c0                	test   eax,eax
c0026eb2:	74 09                	je     c0026ebd <HalPanic(char const*)+0x29>
c0026eb4:	83 ec 0c             	sub    esp,0xc
c0026eb7:	53                   	push   ebx
c0026eb8:	ff d0                	call   eax
c0026eba:	83 c4 10             	add    esp,0x10
c0026ebd:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026ec2:	85 c0                	test   eax,eax
c0026ec4:	0f 84 dc 00 00 00    	je     c0026fa6 <HalPanic(char const*)+0x112>
c0026eca:	52                   	push   edx
c0026ecb:	6a 01                	push   0x1
c0026ecd:	6a 0f                	push   0xf
c0026ecf:	50                   	push   eax
c0026ed0:	e8 05 00 ff ff       	call   c0016eda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026ed5:	59                   	pop    ecx
c0026ed6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026edc:	e8 e9 01 ff ff       	call   c00170ca <VgaText::clearScreen()>
c0026ee1:	58                   	pop    eax
c0026ee2:	5a                   	pop    edx
c0026ee3:	68 d4 11 03 c0       	push   0xc00311d4
c0026ee8:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026eee:	e8 1f 00 ff ff       	call   c0016f12 <VgaText::setTitle(char*)>
c0026ef3:	83 c4 0c             	add    esp,0xc
c0026ef6:	6a 01                	push   0x1
c0026ef8:	6a 0f                	push   0xf
c0026efa:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f00:	e8 d5 ff fe ff       	call   c0016eda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f05:	59                   	pop    ecx
c0026f06:	58                   	pop    eax
c0026f07:	68 1c 31 03 c0       	push   0xc003311c
c0026f0c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f12:	e8 a5 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026f17:	83 c4 0c             	add    esp,0xc
c0026f1a:	6a 0f                	push   0xf
c0026f1c:	6a 01                	push   0x1
c0026f1e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f24:	e8 b1 ff fe ff       	call   c0016eda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f29:	58                   	pop    eax
c0026f2a:	5a                   	pop    edx
c0026f2b:	68 25 31 03 c0       	push   0xc0033125
c0026f30:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f36:	e8 81 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026f3b:	83 c4 0c             	add    esp,0xc
c0026f3e:	6a 01                	push   0x1
c0026f40:	6a 0f                	push   0xf
c0026f42:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f48:	e8 8d ff fe ff       	call   c0016eda <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f4d:	59                   	pop    ecx
c0026f4e:	58                   	pop    eax
c0026f4f:	68 69 31 03 c0       	push   0xc0033169
c0026f54:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f5a:	e8 5d 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026f5f:	58                   	pop    eax
c0026f60:	5a                   	pop    edx
c0026f61:	68 32 31 03 c0       	push   0xc0033132
c0026f66:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f6c:	e8 4b 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026f71:	59                   	pop    ecx
c0026f72:	58                   	pop    eax
c0026f73:	68 6c 31 03 c0       	push   0xc003316c
c0026f78:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f7e:	e8 39 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026f83:	58                   	pop    eax
c0026f84:	5a                   	pop    edx
c0026f85:	53                   	push   ebx
c0026f86:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f8c:	e8 2b 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026f91:	59                   	pop    ecx
c0026f92:	5b                   	pop    ebx
c0026f93:	68 69 31 03 c0       	push   0xc0033169
c0026f98:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f9e:	e8 19 04 ff ff       	call   c00173bc <VgaText::puts(char const*)>
c0026fa3:	83 c4 10             	add    esp,0x10
c0026fa6:	eb fe                	jmp    c0026fa6 <HalPanic(char const*)+0x112>

c0026fa8 <HalQueryPerformanceCounter()>:
c0026fa8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fad:	31 d2                	xor    edx,edx
c0026faf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0026fb5:	31 c0                	xor    eax,eax
c0026fb7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0026fbe:	74 02                	je     c0026fc2 <HalQueryPerformanceCounter()+0x1a>
c0026fc0:	0f 31                	rdtsc  
c0026fc2:	c3                   	ret    

c0026fc3 <HalInitialise()>:
c0026fc3:	53                   	push   ebx
c0026fc4:	83 ec 08             	sub    esp,0x8
c0026fc7:	e8 65 4a ff ff       	call   c001ba31 <setupINTS()>
c0026fcc:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fd1:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0026fd8:	75 0f                	jne    c0026fe9 <HalInitialise()+0x26>
c0026fda:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fe0:	83 e2 fe             	and    edx,0xfffffffe
c0026fe3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fe9:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0026ff0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026ff6:	83 e2 fe             	and    edx,0xfffffffe
c0026ff9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fff:	e8 a0 02 00 00       	call   c00272a4 <picOpen()>
c0027004:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c002700b:	74 0a                	je     c0027017 <HalInitialise()+0x54>
c002700d:	e8 e2 01 00 00       	call   c00271f4 <picDisable()>
c0027012:	e8 63 68 00 00       	call   c002d87a <apicOpen()>
c0027017:	50                   	push   eax
c0027018:	bb 0f 00 00 00       	mov    ebx,0xf
c002701d:	6a 00                	push   0x0
c002701f:	68 6a 6c 02 c0       	push   0xc0026c6a
c0027024:	6a 00                	push   0x0
c0027026:	e8 cf 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c002702b:	83 c4 0c             	add    esp,0xc
c002702e:	6a 00                	push   0x0
c0027030:	68 6a 6c 02 c0       	push   0xc0026c6a
c0027035:	6a 01                	push   0x1
c0027037:	e8 be 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c002703c:	83 c4 0c             	add    esp,0xc
c002703f:	6a 00                	push   0x0
c0027041:	68 fb 66 02 c0       	push   0xc00266fb
c0027046:	6a 02                	push   0x2
c0027048:	e8 ad 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c002704d:	83 c4 0c             	add    esp,0xc
c0027050:	6a 00                	push   0x0
c0027052:	68 6a 6c 02 c0       	push   0xc0026c6a
c0027057:	6a 03                	push   0x3
c0027059:	e8 9c 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c002705e:	83 c4 0c             	add    esp,0xc
c0027061:	6a 00                	push   0x0
c0027063:	68 6a 6c 02 c0       	push   0xc0026c6a
c0027068:	6a 04                	push   0x4
c002706a:	e8 8b 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c002706f:	83 c4 0c             	add    esp,0xc
c0027072:	6a 00                	push   0x0
c0027074:	68 6a 6c 02 c0       	push   0xc0026c6a
c0027079:	6a 05                	push   0x5
c002707b:	e8 7a 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027080:	83 c4 0c             	add    esp,0xc
c0027083:	6a 00                	push   0x0
c0027085:	68 9e 6c 02 c0       	push   0xc0026c9e
c002708a:	6a 06                	push   0x6
c002708c:	e8 69 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027091:	83 c4 0c             	add    esp,0xc
c0027094:	6a 00                	push   0x0
c0027096:	68 14 67 02 c0       	push   0xc0026714
c002709b:	6a 08                	push   0x8
c002709d:	e8 58 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270a2:	83 c4 0c             	add    esp,0xc
c00270a5:	6a 00                	push   0x0
c00270a7:	68 6a 6c 02 c0       	push   0xc0026c6a
c00270ac:	6a 09                	push   0x9
c00270ae:	e8 47 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270b3:	83 c4 0c             	add    esp,0xc
c00270b6:	6a 00                	push   0x0
c00270b8:	68 6a 6c 02 c0       	push   0xc0026c6a
c00270bd:	6a 0a                	push   0xa
c00270bf:	e8 36 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270c4:	83 c4 0c             	add    esp,0xc
c00270c7:	6a 00                	push   0x0
c00270c9:	68 6a 6c 02 c0       	push   0xc0026c6a
c00270ce:	6a 0b                	push   0xb
c00270d0:	e8 25 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270d5:	83 c4 0c             	add    esp,0xc
c00270d8:	6a 00                	push   0x0
c00270da:	68 7a 6b 02 c0       	push   0xc0026b7a
c00270df:	6a 0d                	push   0xd
c00270e1:	e8 14 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270e6:	83 c4 0c             	add    esp,0xc
c00270e9:	6a 00                	push   0x0
c00270eb:	68 e1 6b 02 c0       	push   0xc0026be1
c00270f0:	6a 0e                	push   0xe
c00270f2:	e8 03 47 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270f7:	83 c4 10             	add    esp,0x10
c00270fa:	50                   	push   eax
c00270fb:	6a 00                	push   0x0
c00270fd:	68 6a 6c 02 c0       	push   0xc0026c6a
c0027102:	53                   	push   ebx
c0027103:	43                   	inc    ebx
c0027104:	e8 f1 46 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027109:	83 c4 10             	add    esp,0x10
c002710c:	83 fb 1e             	cmp    ebx,0x1e
c002710f:	75 e9                	jne    c00270fa <HalInitialise()+0x137>
c0027111:	50                   	push   eax
c0027112:	6a 00                	push   0x0
c0027114:	68 6c 1a 02 c0       	push   0xc0021a6c
c0027119:	6a 60                	push   0x60
c002711b:	e8 da 46 ff ff       	call   c001b7fa <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027120:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027125:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c002712f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027136:	e8 a8 f2 fe ff       	call   c00163e3 <malloc>
c002713b:	89 04 24             	mov    DWORD PTR [esp],eax
c002713e:	89 c3                	mov    ebx,eax
c0027140:	e8 37 09 00 00       	call   c0027a7c <RTC::RTC()>
c0027145:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c002714f:	5a                   	pop    edx
c0027150:	59                   	pop    ecx
c0027151:	53                   	push   ebx
c0027152:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027158:	e8 53 41 ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c002715d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002715f:	6a 00                	push   0x0
c0027161:	6a 00                	push   0x0
c0027163:	6a 00                	push   0x0
c0027165:	53                   	push   ebx
c0027166:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027169:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002716e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0027174:	83 c4 28             	add    esp,0x28
c0027177:	5b                   	pop    ebx
c0027178:	c3                   	ret    

c0027179 <HalMakeBeep(int)>:
c0027179:	53                   	push   ebx
c002717a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c002717e:	85 db                	test   ebx,ebx
c0027180:	75 07                	jne    c0027189 <HalMakeBeep(int)+0x10>
c0027182:	e4 61                	in     al,0x61
c0027184:	83 e0 fc             	and    eax,0xfffffffc
c0027187:	eb 26                	jmp    c00271af <HalMakeBeep(int)+0x36>
c0027189:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002718e:	99                   	cdq    
c002718f:	f7 fb                	idiv   ebx
c0027191:	89 c1                	mov    ecx,eax
c0027193:	b0 b6                	mov    al,0xb6
c0027195:	e6 43                	out    0x43,al
c0027197:	88 c8                	mov    al,cl
c0027199:	e6 42                	out    0x42,al
c002719b:	89 c8                	mov    eax,ecx
c002719d:	c1 e8 08             	shr    eax,0x8
c00271a0:	e6 42                	out    0x42,al
c00271a2:	e4 61                	in     al,0x61
c00271a4:	89 c2                	mov    edx,eax
c00271a6:	83 ca 03             	or     edx,0x3
c00271a9:	38 d0                	cmp    al,dl
c00271ab:	74 04                	je     c00271b1 <HalMakeBeep(int)+0x38>
c00271ad:	88 d0                	mov    al,dl
c00271af:	e6 61                	out    0x61,al
c00271b1:	5b                   	pop    ebx
c00271b2:	c3                   	ret    

c00271b3 <HalGetRand()>:
c00271b3:	31 c0                	xor    eax,eax
c00271b5:	c3                   	ret    

c00271b6 <HalEndOfInterrupt(int)>:
c00271b6:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00271bd:	74 23                	je     c00271e2 <HalEndOfInterrupt(int)+0x2c>
c00271bf:	83 ec 14             	sub    esp,0x14
c00271c2:	6a 1b                	push   0x1b
c00271c4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00271ca:	e8 25 e8 fe ff       	call   c00159f4 <Computer::rdmsr(unsigned int)>
c00271cf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00271d4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00271de:	83 c4 1c             	add    esp,0x1c
c00271e1:	c3                   	ret    
c00271e2:	e9 41 02 00 00       	jmp    c0027428 <picEOI(int)>

c00271e7 <HalRestart()>:
c00271e7:	c3                   	ret    

c00271e8 <HalShutdown()>:
c00271e8:	c3                   	ret    

c00271e9 <HalSleep()>:
c00271e9:	c3                   	ret    
c00271ea:	66 90                	xchg   ax,ax

c00271ec <picIoWait()>:
c00271ec:	eb 00                	jmp    c00271ee <picIoWait()+0x2>
c00271ee:	eb 00                	jmp    c00271f0 <picIoWait()+0x4>
c00271f0:	90                   	nop
c00271f1:	c3                   	ret    
c00271f2:	66 90                	xchg   ax,ax

c00271f4 <picDisable()>:
c00271f4:	83 ec 10             	sub    esp,0x10
c00271f7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00271fe:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0027203:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027207:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002720c:	ee                   	out    dx,al
c002720d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0027214:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027219:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002721d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0027222:	ee                   	out    dx,al
c0027223:	90                   	nop
c0027224:	83 c4 10             	add    esp,0x10
c0027227:	c3                   	ret    

c0027228 <picGetIRQReg(int)>:
c0027228:	83 ec 10             	sub    esp,0x10
c002722b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002722f:	0f b6 c0             	movzx  eax,al
c0027232:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027239:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c002723d:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027241:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027246:	ee                   	out    dx,al
c0027247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002724b:	0f b6 c0             	movzx  eax,al
c002724e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027255:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027259:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002725d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0027262:	ee                   	out    dx,al
c0027263:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c002726a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c002726f:	89 c2                	mov    edx,eax
c0027271:	ec                   	in     al,dx
c0027272:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027276:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002727a:	0f b6 c0             	movzx  eax,al
c002727d:	c1 e0 08             	shl    eax,0x8
c0027280:	89 c1                	mov    ecx,eax
c0027282:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027289:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c002728e:	89 c2                	mov    edx,eax
c0027290:	ec                   	in     al,dx
c0027291:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0027295:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027299:	0f b6 c0             	movzx  eax,al
c002729c:	09 c8                	or     eax,ecx
c002729e:	83 c4 10             	add    esp,0x10
c00272a1:	c3                   	ret    
c00272a2:	66 90                	xchg   ax,ax

c00272a4 <picOpen()>:
c00272a4:	83 ec 50             	sub    esp,0x50
c00272a7:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00272ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00272b3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00272b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00272bb:	ee                   	out    dx,al
c00272bc:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00272c3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00272c8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00272cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272d0:	ee                   	out    dx,al
c00272d1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00272d9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00272e1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00272e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00272ec:	89 c2                	mov    edx,eax
c00272ee:	ec                   	in     al,dx
c00272ef:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00272f3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00272f7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00272fb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0027302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0027306:	89 c2                	mov    edx,eax
c0027308:	ec                   	in     al,dx
c0027309:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c002730d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027311:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0027315:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c002731c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027321:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0027325:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027329:	ee                   	out    dx,al
c002732a:	e8 bd fe ff ff       	call   c00271ec <picIoWait()>
c002732f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0027336:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c002733b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c002733f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027343:	ee                   	out    dx,al
c0027344:	e8 a3 fe ff ff       	call   c00271ec <picIoWait()>
c0027349:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002734d:	0f b6 c0             	movzx  eax,al
c0027350:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0027357:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c002735b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c002735f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027363:	ee                   	out    dx,al
c0027364:	e8 83 fe ff ff       	call   c00271ec <picIoWait()>
c0027369:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002736d:	0f b6 c0             	movzx  eax,al
c0027370:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0027377:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002737b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002737f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0027383:	ee                   	out    dx,al
c0027384:	e8 63 fe ff ff       	call   c00271ec <picIoWait()>
c0027389:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027390:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0027395:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027399:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002739d:	ee                   	out    dx,al
c002739e:	e8 49 fe ff ff       	call   c00271ec <picIoWait()>
c00273a3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c00273aa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c00273af:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00273b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00273b7:	ee                   	out    dx,al
c00273b8:	e8 2f fe ff ff       	call   c00271ec <picIoWait()>
c00273bd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00273c4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00273c9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00273cd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00273d1:	ee                   	out    dx,al
c00273d2:	e8 15 fe ff ff       	call   c00271ec <picIoWait()>
c00273d7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00273de:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00273e3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00273e7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00273eb:	ee                   	out    dx,al
c00273ec:	e8 fb fd ff ff       	call   c00271ec <picIoWait()>
c00273f1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00273f6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00273fd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0027401:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0027405:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0027409:	ee                   	out    dx,al
c002740a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c002740f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0027416:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002741a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c002741e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0027422:	ee                   	out    dx,al
c0027423:	90                   	nop
c0027424:	83 c4 50             	add    esp,0x50
c0027427:	c3                   	ret    

c0027428 <picEOI(int)>:
c0027428:	83 ec 10             	sub    esp,0x10
c002742b:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027430:	75 1e                	jne    c0027450 <picEOI(int)+0x28>
c0027432:	6a 0b                	push   0xb
c0027434:	e8 ef fd ff ff       	call   c0027228 <picGetIRQReg(int)>
c0027439:	83 c4 04             	add    esp,0x4
c002743c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027441:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0027446:	25 80 00 00 00       	and    eax,0x80
c002744b:	74 73                	je     c00274c0 <picEOI(int)+0x98>
c002744d:	8d 76 00             	lea    esi,[esi+0x0]
c0027450:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0027455:	75 31                	jne    c0027488 <picEOI(int)+0x60>
c0027457:	6a 0b                	push   0xb
c0027459:	e8 ca fd ff ff       	call   c0027228 <picGetIRQReg(int)>
c002745e:	83 c4 04             	add    esp,0x4
c0027461:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0027466:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002746a:	98                   	cwde   
c002746b:	85 c0                	test   eax,eax
c002746d:	78 19                	js     c0027488 <picEOI(int)+0x60>
c002746f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0027476:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c002747b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002747f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0027484:	ee                   	out    dx,al
c0027485:	eb 3d                	jmp    c00274c4 <picEOI(int)+0x9c>
c0027487:	90                   	nop
c0027488:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c002748d:	7e 19                	jle    c00274a8 <picEOI(int)+0x80>
c002748f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0027496:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c002749b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002749f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00274a4:	ee                   	out    dx,al
c00274a5:	8d 76 00             	lea    esi,[esi+0x0]
c00274a8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00274af:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00274b4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00274b8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00274bd:	ee                   	out    dx,al
c00274be:	eb 04                	jmp    c00274c4 <picEOI(int)+0x9c>
c00274c0:	90                   	nop
c00274c1:	8d 76 00             	lea    esi,[esi+0x0]
c00274c4:	83 c4 10             	add    esp,0x10
c00274c7:	c3                   	ret    

c00274c8 <RTC::open(int, int, void*)>:
c00274c8:	31 c0                	xor    eax,eax
c00274ca:	c3                   	ret    
c00274cb:	90                   	nop

c00274cc <RTC::close(int, int, void*)>:
c00274cc:	31 c0                	xor    eax,eax
c00274ce:	c3                   	ret    
c00274cf:	90                   	nop

c00274d0 <RTC::timeInSecondsUTC()>:
c00274d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00274da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00274e0:	c3                   	ret    
c00274e1:	90                   	nop

c00274e2 <RTC::timeInDatetimeUTC()>:
c00274e2:	53                   	push   ebx
c00274e3:	83 ec 14             	sub    esp,0x14
c00274e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00274ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00274ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00274f0:	50                   	push   eax
c00274f1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00274f4:	83 c4 0c             	add    esp,0xc
c00274f7:	52                   	push   edx
c00274f8:	50                   	push   eax
c00274f9:	53                   	push   ebx
c00274fa:	e8 25 3b ff ff       	call   c001b024 <secondsToDatetime(unsigned long long)>
c00274ff:	89 d8                	mov    eax,ebx
c0027501:	83 c4 14             	add    esp,0x14
c0027504:	5b                   	pop    ebx
c0027505:	c2 04 00             	ret    0x4

c0027508 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0027508:	56                   	push   esi
c0027509:	53                   	push   ebx
c002750a:	83 ec 14             	sub    esp,0x14
c002750d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0027511:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027513:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0027516:	8d 44 24 08          	lea    eax,[esp+0x8]
c002751a:	52                   	push   edx
c002751b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002751f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027523:	50                   	push   eax
c0027524:	e8 fb 3a ff ff       	call   c001b024 <secondsToDatetime(unsigned long long)>
c0027529:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c002752d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027531:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027535:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0027539:	89 f0                	mov    eax,esi
c002753b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002753f:	83 c4 20             	add    esp,0x20
c0027542:	5b                   	pop    ebx
c0027543:	5e                   	pop    esi
c0027544:	ff e0                	jmp    eax

c0027546 <RTC::~RTC()>:
c0027546:	83 ec 0c             	sub    esp,0xc
c0027549:	ba 08 32 03 c0       	mov    edx,0xc0033208
c002754e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027552:	89 10                	mov    DWORD PTR [eax],edx
c0027554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027558:	83 ec 0c             	sub    esp,0xc
c002755b:	50                   	push   eax
c002755c:	e8 4f 38 ff ff       	call   c001adb0 <Clock::~Clock()>
c0027561:	83 c4 10             	add    esp,0x10
c0027564:	90                   	nop
c0027565:	83 c4 0c             	add    esp,0xc
c0027568:	c3                   	ret    
c0027569:	90                   	nop

c002756a <RTC::~RTC()>:
c002756a:	83 ec 0c             	sub    esp,0xc
c002756d:	83 ec 0c             	sub    esp,0xc
c0027570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027574:	e8 cd ff ff ff       	call   c0027546 <RTC::~RTC()>
c0027579:	83 c4 10             	add    esp,0x10
c002757c:	83 ec 08             	sub    esp,0x8
c002757f:	68 60 01 00 00       	push   0x160
c0027584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027588:	e8 8f 1b ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c002758d:	83 c4 10             	add    esp,0x10
c0027590:	83 c4 0c             	add    esp,0xc
c0027593:	c3                   	ret    

c0027594 <RTC::get_update_in_progress_flag()>:
c0027594:	83 ec 14             	sub    esp,0x14
c0027597:	6a 0a                	push   0xa
c0027599:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002759f:	e8 08 e5 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00275a4:	83 c4 1c             	add    esp,0x1c
c00275a7:	0f b6 c0             	movzx  eax,al
c00275aa:	c1 e8 07             	shr    eax,0x7
c00275ad:	c3                   	ret    

c00275ae <RTC::completeRTCRefresh()>:
c00275ae:	55                   	push   ebp
c00275af:	57                   	push   edi
c00275b0:	56                   	push   esi
c00275b1:	53                   	push   ebx
c00275b2:	83 ec 3c             	sub    esp,0x3c
c00275b5:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00275bb:	83 ec 0c             	sub    esp,0xc
c00275be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00275c2:	e8 cd ff ff ff       	call   c0027594 <RTC::get_update_in_progress_flag()>
c00275c7:	83 c4 10             	add    esp,0x10
c00275ca:	84 c0                	test   al,al
c00275cc:	74 0e                	je     c00275dc <RTC::completeRTCRefresh()+0x2e>
c00275ce:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00275d4:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00275da:	73 df                	jae    c00275bb <RTC::completeRTCRefresh()+0xd>
c00275dc:	50                   	push   eax
c00275dd:	50                   	push   eax
c00275de:	6a 00                	push   0x0
c00275e0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275e6:	e8 c1 e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00275eb:	89 c7                	mov    edi,eax
c00275ed:	58                   	pop    eax
c00275ee:	5a                   	pop    edx
c00275ef:	6a 02                	push   0x2
c00275f1:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275f7:	e8 b0 e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00275fc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0027600:	59                   	pop    ecx
c0027601:	5b                   	pop    ebx
c0027602:	6a 04                	push   0x4
c0027604:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002760a:	e8 9d e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c002760f:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0027613:	5e                   	pop    esi
c0027614:	5d                   	pop    ebp
c0027615:	6a 07                	push   0x7
c0027617:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002761d:	e8 8a e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027622:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0027626:	58                   	pop    eax
c0027627:	5a                   	pop    edx
c0027628:	6a 08                	push   0x8
c002762a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027630:	e8 77 e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027635:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027639:	59                   	pop    ecx
c002763a:	5b                   	pop    ebx
c002763b:	6a 09                	push   0x9
c002763d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027643:	e8 64 e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027648:	0f b6 c0             	movzx  eax,al
c002764b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c002764f:	83 c4 10             	add    esp,0x10
c0027652:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027658:	83 ec 0c             	sub    esp,0xc
c002765b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002765f:	e8 30 ff ff ff       	call   c0027594 <RTC::get_update_in_progress_flag()>
c0027664:	83 c4 10             	add    esp,0x10
c0027667:	84 c0                	test   al,al
c0027669:	74 0e                	je     c0027679 <RTC::completeRTCRefresh()+0xcb>
c002766b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027671:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c0027677:	73 df                	jae    c0027658 <RTC::completeRTCRefresh()+0xaa>
c0027679:	51                   	push   ecx
c002767a:	51                   	push   ecx
c002767b:	6a 00                	push   0x0
c002767d:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027683:	e8 24 e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027688:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002768c:	5b                   	pop    ebx
c002768d:	5e                   	pop    esi
c002768e:	6a 02                	push   0x2
c0027690:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027696:	e8 11 e4 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c002769b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002769f:	5d                   	pop    ebp
c00276a0:	58                   	pop    eax
c00276a1:	6a 04                	push   0x4
c00276a3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276a9:	e8 fe e3 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00276ae:	88 c3                	mov    bl,al
c00276b0:	58                   	pop    eax
c00276b1:	5a                   	pop    edx
c00276b2:	6a 07                	push   0x7
c00276b4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276ba:	e8 ed e3 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00276bf:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00276c3:	59                   	pop    ecx
c00276c4:	5e                   	pop    esi
c00276c5:	6a 08                	push   0x8
c00276c7:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276cd:	e8 da e3 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00276d2:	5d                   	pop    ebp
c00276d3:	89 c6                	mov    esi,eax
c00276d5:	58                   	pop    eax
c00276d6:	6a 09                	push   0x9
c00276d8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276de:	e8 c9 e3 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c00276e3:	89 f9                	mov    ecx,edi
c00276e5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00276e9:	83 c4 10             	add    esp,0x10
c00276ec:	0f b6 e8             	movzx  ebp,al
c00276ef:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00276f4:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00276f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00276fc:	74 27                	je     c0027725 <RTC::completeRTCRefresh()+0x177>
c00276fe:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0027702:	89 f0                	mov    eax,esi
c0027704:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0027708:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c002770c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027710:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027714:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027718:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002771c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027720:	e9 2d ff ff ff       	jmp    c0027652 <RTC::completeRTCRefresh()+0xa4>
c0027725:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002772a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002772e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027732:	3a 44 24 18          	cmp    al,BYTE PTR [esp+0x18]
c0027736:	75 c6                	jne    c00276fe <RTC::completeRTCRefresh()+0x150>
c0027738:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002773d:	89 f1                	mov    ecx,esi
c002773f:	0f b6 fb             	movzx  edi,bl
c0027742:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027746:	0f b6 c9             	movzx  ecx,cl
c0027749:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c002774d:	89 f1                	mov    ecx,esi
c002774f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0027753:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0027757:	0f 94 c2             	sete   dl
c002775a:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c002775e:	0f 94 c0             	sete   al
c0027761:	21 d0                	and    eax,edx
c0027763:	31 d2                	xor    edx,edx
c0027765:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027769:	0f 94 c2             	sete   dl
c002776c:	85 c2                	test   edx,eax
c002776e:	74 8e                	je     c00276fe <RTC::completeRTCRefresh()+0x150>
c0027770:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027774:	75 88                	jne    c00276fe <RTC::completeRTCRefresh()+0x150>
c0027776:	52                   	push   edx
c0027777:	52                   	push   edx
c0027778:	6a 0b                	push   0xb
c002777a:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027780:	e8 27 e3 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027785:	83 c4 10             	add    esp,0x10
c0027788:	a8 04                	test   al,0x4
c002778a:	75 7a                	jne    c0027806 <RTC::completeRTCRefresh()+0x258>
c002778c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027790:	c1 ef 04             	shr    edi,0x4
c0027793:	83 e6 0f             	and    esi,0xf
c0027796:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002779a:	c1 ed 04             	shr    ebp,0x4
c002779d:	6b ed 0a             	imul   ebp,ebp,0xa
c00277a0:	c1 ea 04             	shr    edx,0x4
c00277a3:	6b d2 0a             	imul   edx,edx,0xa
c00277a6:	83 e1 0f             	and    ecx,0xf
c00277a9:	01 d1                	add    ecx,edx
c00277ab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00277af:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00277b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00277b7:	c1 ea 04             	shr    edx,0x4
c00277ba:	6b d2 0a             	imul   edx,edx,0xa
c00277bd:	83 e1 0f             	and    ecx,0xf
c00277c0:	01 d1                	add    ecx,edx
c00277c2:	89 fa                	mov    edx,edi
c00277c4:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00277c8:	83 e2 07             	and    edx,0x7
c00277cb:	89 d9                	mov    ecx,ebx
c00277cd:	6b d2 0a             	imul   edx,edx,0xa
c00277d0:	83 e1 0f             	and    ecx,0xf
c00277d3:	83 e3 80             	and    ebx,0xffffff80
c00277d6:	01 d1                	add    ecx,edx
c00277d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00277dc:	09 cb                	or     ebx,ecx
c00277de:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00277e2:	c1 ea 04             	shr    edx,0x4
c00277e5:	6b d2 0a             	imul   edx,edx,0xa
c00277e8:	83 e1 0f             	and    ecx,0xf
c00277eb:	01 d1                	add    ecx,edx
c00277ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00277f1:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00277f5:	c1 ea 04             	shr    edx,0x4
c00277f8:	6b d2 0a             	imul   edx,edx,0xa
c00277fb:	01 d6                	add    esi,edx
c00277fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027801:	83 e2 0f             	and    edx,0xf
c0027804:	01 d5                	add    ebp,edx
c0027806:	a8 02                	test   al,0x2
c0027808:	75 15                	jne    c002781f <RTC::completeRTCRefresh()+0x271>
c002780a:	f6 c3 80             	test   bl,0x80
c002780d:	74 10                	je     c002781f <RTC::completeRTCRefresh()+0x271>
c002780f:	83 e3 7f             	and    ebx,0x7f
c0027812:	b9 18 00 00 00       	mov    ecx,0x18
c0027817:	8d 43 0c             	lea    eax,[ebx+0xc]
c002781a:	99                   	cdq    
c002781b:	f7 f9                	idiv   ecx
c002781d:	88 d3                	mov    bl,dl
c002781f:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027825:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c002782b:	77 06                	ja     c0027833 <RTC::completeRTCRefresh()+0x285>
c002782d:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027833:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027838:	31 c9                	xor    ecx,ecx
c002783a:	31 d2                	xor    edx,edx
c002783c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0027840:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0027844:	89 cd                	mov    ebp,ecx
c0027846:	8a 74 24 08          	mov    dh,BYTE PTR [esp+0x8]
c002784a:	c1 e7 10             	shl    edi,0x10
c002784d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027853:	c1 e0 10             	shl    eax,0x10
c0027856:	09 c5                	or     ebp,eax
c0027858:	89 e9                	mov    ecx,ebp
c002785a:	0f b7 c2             	movzx  eax,dx
c002785d:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027861:	09 f8                	or     eax,edi
c0027863:	89 c2                	mov    edx,eax
c0027865:	50                   	push   eax
c0027866:	50                   	push   eax
c0027867:	88 d9                	mov    cl,bl
c0027869:	51                   	push   ecx
c002786a:	52                   	push   edx
c002786b:	e8 2f 36 ff ff       	call   c001ae9f <datetimeToSeconds(datetime_t)>
c0027870:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027874:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c002787a:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0027880:	83 c4 4c             	add    esp,0x4c
c0027883:	5b                   	pop    ebx
c0027884:	5e                   	pop    esi
c0027885:	5f                   	pop    edi
c0027886:	5d                   	pop    ebp
c0027887:	c3                   	ret    

c0027888 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027888:	55                   	push   ebp
c0027889:	57                   	push   edi
c002788a:	56                   	push   esi
c002788b:	53                   	push   ebx
c002788c:	83 ec 30             	sub    esp,0x30
c002788f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027893:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027897:	6a 00                	push   0x0
c0027899:	6a 00                	push   0x0
c002789b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278a1:	e8 1e e3 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00278a6:	83 c4 0c             	add    esp,0xc
c00278a9:	6a 00                	push   0x0
c00278ab:	6a 02                	push   0x2
c00278ad:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278b3:	e8 0c e3 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00278b8:	89 f8                	mov    eax,edi
c00278ba:	89 f9                	mov    ecx,edi
c00278bc:	0f b6 c4             	movzx  eax,ah
c00278bf:	31 d2                	xor    edx,edx
c00278c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00278c5:	c1 e9 10             	shr    ecx,0x10
c00278c8:	89 f0                	mov    eax,esi
c00278ca:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00278ce:	89 f0                	mov    eax,esi
c00278d0:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00278d4:	0f b6 c4             	movzx  eax,ah
c00278d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00278db:	89 f0                	mov    eax,esi
c00278dd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00278e1:	c1 e8 10             	shr    eax,0x10
c00278e4:	b9 64 00 00 00       	mov    ecx,0x64
c00278e9:	f7 f1                	div    ecx
c00278eb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00278ef:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00278f3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00278f7:	59                   	pop    ecx
c00278f8:	5b                   	pop    ebx
c00278f9:	89 fb                	mov    ebx,edi
c00278fb:	6a 0b                	push   0xb
c00278fd:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027903:	e8 a4 e1 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027908:	83 c4 10             	add    esp,0x10
c002790b:	a8 04                	test   al,0x4
c002790d:	89 c5                	mov    ebp,eax
c002790f:	75 6e                	jne    c002797f <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0027911:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027915:	31 d2                	xor    edx,edx
c0027917:	0f b6 c1             	movzx  eax,cl
c002791a:	b9 0a 00 00 00       	mov    ecx,0xa
c002791f:	f7 f1                	div    ecx
c0027921:	c1 e0 04             	shl    eax,0x4
c0027924:	09 d0                	or     eax,edx
c0027926:	31 d2                	xor    edx,edx
c0027928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002792c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0027931:	f7 f1                	div    ecx
c0027933:	c1 e0 04             	shl    eax,0x4
c0027936:	09 d0                	or     eax,edx
c0027938:	31 d2                	xor    edx,edx
c002793a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002793e:	0f b6 c3             	movzx  eax,bl
c0027941:	f7 f1                	div    ecx
c0027943:	c1 e0 04             	shl    eax,0x4
c0027946:	09 d0                	or     eax,edx
c0027948:	31 d2                	xor    edx,edx
c002794a:	89 c3                	mov    ebx,eax
c002794c:	89 f0                	mov    eax,esi
c002794e:	0f b6 c0             	movzx  eax,al
c0027951:	f7 f1                	div    ecx
c0027953:	c1 e0 04             	shl    eax,0x4
c0027956:	09 d0                	or     eax,edx
c0027958:	31 d2                	xor    edx,edx
c002795a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002795e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027963:	f7 f1                	div    ecx
c0027965:	c1 e0 04             	shl    eax,0x4
c0027968:	09 d0                	or     eax,edx
c002796a:	31 d2                	xor    edx,edx
c002796c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027970:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027974:	f7 f1                	div    ecx
c0027976:	c1 e0 04             	shl    eax,0x4
c0027979:	09 d0                	or     eax,edx
c002797b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002797f:	83 e5 02             	and    ebp,0x2
c0027982:	75 1e                	jne    c00279a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027984:	0f b6 c3             	movzx  eax,bl
c0027987:	83 f8 0b             	cmp    eax,0xb
c002798a:	76 10                	jbe    c002799c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c002798c:	8d 53 f4             	lea    edx,[ebx-0xc]
c002798f:	84 d2                	test   dl,dl
c0027991:	88 d3                	mov    bl,dl
c0027993:	75 02                	jne    c0027997 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027995:	b3 0c                	mov    bl,0xc
c0027997:	83 cb 80             	or     ebx,0xffffff80
c002799a:	eb 06                	jmp    c00279a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002799c:	85 c0                	test   eax,eax
c002799e:	75 02                	jne    c00279a2 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00279a0:	b3 0c                	mov    bl,0xc
c00279a2:	50                   	push   eax
c00279a3:	0f b6 db             	movzx  ebx,bl
c00279a6:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00279ab:	52                   	push   edx
c00279ac:	6a 00                	push   0x0
c00279ae:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279b4:	e8 0b e2 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279b9:	83 c4 0c             	add    esp,0xc
c00279bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00279c1:	50                   	push   eax
c00279c2:	6a 02                	push   0x2
c00279c4:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279ca:	e8 f5 e1 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279cf:	83 c4 0c             	add    esp,0xc
c00279d2:	53                   	push   ebx
c00279d3:	6a 04                	push   0x4
c00279d5:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279db:	e8 e4 e1 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279e0:	83 c4 0c             	add    esp,0xc
c00279e3:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00279e8:	52                   	push   edx
c00279e9:	6a 07                	push   0x7
c00279eb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279f1:	e8 ce e1 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c00279f6:	83 c4 0c             	add    esp,0xc
c00279f9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00279fe:	50                   	push   eax
c00279ff:	6a 08                	push   0x8
c0027a01:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a07:	e8 b8 e1 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a0c:	83 c4 0c             	add    esp,0xc
c0027a0f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027a14:	55                   	push   ebp
c0027a15:	6a 09                	push   0x9
c0027a17:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a1d:	e8 a2 e1 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a22:	5a                   	pop    edx
c0027a23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027a27:	e8 82 fb ff ff       	call   c00275ae <RTC::completeRTCRefresh()>
c0027a2c:	83 c4 3c             	add    esp,0x3c
c0027a2f:	b0 01                	mov    al,0x1
c0027a31:	5b                   	pop    ebx
c0027a32:	5e                   	pop    esi
c0027a33:	5f                   	pop    edi
c0027a34:	5d                   	pop    ebp
c0027a35:	c3                   	ret    

c0027a36 <rtcIRQHandler(regs*, void*)>:
c0027a36:	53                   	push   ebx
c0027a37:	83 ec 10             	sub    esp,0x10
c0027a3a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027a3e:	6a 0c                	push   0xc
c0027a40:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a46:	e8 61 e0 fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027a4b:	83 c4 10             	add    esp,0x10
c0027a4e:	a8 80                	test   al,0x80
c0027a50:	74 24                	je     c0027a76 <rtcIRQHandler(regs*, void*)+0x40>
c0027a52:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027a59:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027a60:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027a67:	75 0d                	jne    c0027a76 <rtcIRQHandler(regs*, void*)+0x40>
c0027a69:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027a6d:	83 c4 08             	add    esp,0x8
c0027a70:	5b                   	pop    ebx
c0027a71:	e9 38 fb ff ff       	jmp    c00275ae <RTC::completeRTCRefresh()>
c0027a76:	83 c4 08             	add    esp,0x8
c0027a79:	5b                   	pop    ebx
c0027a7a:	c3                   	ret    
c0027a7b:	90                   	nop

c0027a7c <RTC::RTC()>:
c0027a7c:	83 ec 1c             	sub    esp,0x1c
c0027a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a83:	83 ec 08             	sub    esp,0x8
c0027a86:	68 eb 31 03 c0       	push   0xc00331eb
c0027a8b:	50                   	push   eax
c0027a8c:	e8 e9 32 ff ff       	call   c001ad7a <Clock::Clock(char const*)>
c0027a91:	83 c4 10             	add    esp,0x10
c0027a94:	ba 08 32 03 c0       	mov    edx,0xc0033208
c0027a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a9d:	89 10                	mov    DWORD PTR [eax],edx
c0027a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027aa3:	83 ec 0c             	sub    esp,0xc
c0027aa6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027aaa:	6a 01                	push   0x1
c0027aac:	68 36 7a 02 c0       	push   0xc0027a36
c0027ab1:	6a 08                	push   0x8
c0027ab3:	50                   	push   eax
c0027ab4:	e8 a3 37 ff ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027ab9:	83 c4 20             	add    esp,0x20
c0027abc:	89 c2                	mov    edx,eax
c0027abe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027ac2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027ac8:	fa                   	cli    
c0027ac9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027ace:	83 c0 01             	add    eax,0x1
c0027ad1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027ad6:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027adb:	83 ec 08             	sub    esp,0x8
c0027ade:	6a 0b                	push   0xb
c0027ae0:	50                   	push   eax
c0027ae1:	e8 c6 df fe ff       	call   c0015aac <Computer::readCMOS(unsigned char)>
c0027ae6:	83 c4 10             	add    esp,0x10
c0027ae9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027aed:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027af2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027af6:	83 ca 10             	or     edx,0x10
c0027af9:	0f b6 d2             	movzx  edx,dl
c0027afc:	83 ec 04             	sub    esp,0x4
c0027aff:	52                   	push   edx
c0027b00:	6a 0b                	push   0xb
c0027b02:	50                   	push   eax
c0027b03:	e8 bc e0 fe ff       	call   c0015bc4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0027b08:	83 c4 10             	add    esp,0x10
c0027b0b:	83 ec 0c             	sub    esp,0xc
c0027b0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027b12:	e8 97 fa ff ff       	call   c00275ae <RTC::completeRTCRefresh()>
c0027b17:	83 c4 10             	add    esp,0x10
c0027b1a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b1f:	83 e8 01             	sub    eax,0x1
c0027b22:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027b27:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b2c:	85 c0                	test   eax,eax
c0027b2e:	75 01                	jne    c0027b31 <RTC::RTC()+0xb5>
c0027b30:	fb                   	sti    
c0027b31:	90                   	nop
c0027b32:	83 c4 1c             	add    esp,0x1c
c0027b35:	c3                   	ret    
c0027b36:	66 90                	xchg   ax,ax

c0027b38 <HalConsoleScroll(int, int)>:
c0027b38:	83 ec 10             	sub    esp,0x10
c0027b3b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027b43:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027b4b:	90                   	nop
c0027b4c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027b51:	0f 8f e1 00 00 00    	jg     c0027c38 <HalConsoleScroll(int, int)+0x100>
c0027b57:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027b5f:	90                   	nop
c0027b60:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027b68:	0f 8f be 00 00 00    	jg     c0027c2c <HalConsoleScroll(int, int)+0xf4>
c0027b6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b72:	89 d0                	mov    eax,edx
c0027b74:	c1 e0 02             	shl    eax,0x2
c0027b77:	01 d0                	add    eax,edx
c0027b79:	c1 e0 05             	shl    eax,0x5
c0027b7c:	89 c2                	mov    edx,eax
c0027b7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b82:	01 d0                	add    eax,edx
c0027b84:	89 c2                	mov    edx,eax
c0027b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b8a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b91:	89 d0                	mov    eax,edx
c0027b93:	c1 e0 02             	shl    eax,0x2
c0027b96:	01 d0                	add    eax,edx
c0027b98:	c1 e0 05             	shl    eax,0x5
c0027b9b:	89 c2                	mov    edx,eax
c0027b9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027ba1:	01 d0                	add    eax,edx
c0027ba3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027ba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bad:	01 d0                	add    eax,edx
c0027baf:	8a 11                	mov    dl,BYTE PTR [ecx]
c0027bb1:	88 10                	mov    BYTE PTR [eax],dl
c0027bb3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027bb8:	75 66                	jne    c0027c20 <HalConsoleScroll(int, int)+0xe8>
c0027bba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027bbe:	83 e0 01             	and    eax,0x1
c0027bc1:	74 39                	je     c0027bfc <HalConsoleScroll(int, int)+0xc4>
c0027bc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027bc7:	83 e0 0f             	and    eax,0xf
c0027bca:	88 c2                	mov    dl,al
c0027bcc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027bd0:	c1 e0 04             	shl    eax,0x4
c0027bd3:	09 d0                	or     eax,edx
c0027bd5:	88 c1                	mov    cl,al
c0027bd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027bdb:	89 d0                	mov    eax,edx
c0027bdd:	c1 e0 02             	shl    eax,0x2
c0027be0:	01 d0                	add    eax,edx
c0027be2:	c1 e0 05             	shl    eax,0x5
c0027be5:	89 c2                	mov    edx,eax
c0027be7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027beb:	01 d0                	add    eax,edx
c0027bed:	89 c2                	mov    edx,eax
c0027bef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bf3:	01 d0                	add    eax,edx
c0027bf5:	88 ca                	mov    dl,cl
c0027bf7:	88 10                	mov    BYTE PTR [eax],dl
c0027bf9:	eb 25                	jmp    c0027c20 <HalConsoleScroll(int, int)+0xe8>
c0027bfb:	90                   	nop
c0027bfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c00:	89 d0                	mov    eax,edx
c0027c02:	c1 e0 02             	shl    eax,0x2
c0027c05:	01 d0                	add    eax,edx
c0027c07:	c1 e0 05             	shl    eax,0x5
c0027c0a:	89 c2                	mov    edx,eax
c0027c0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027c10:	01 d0                	add    eax,edx
c0027c12:	89 c2                	mov    edx,eax
c0027c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c18:	01 d0                	add    eax,edx
c0027c1a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0027c20:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027c25:	e9 36 ff ff ff       	jmp    c0027b60 <HalConsoleScroll(int, int)+0x28>
c0027c2a:	66 90                	xchg   ax,ax
c0027c2c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027c31:	e9 16 ff ff ff       	jmp    c0027b4c <HalConsoleScroll(int, int)+0x14>
c0027c36:	66 90                	xchg   ax,ax
c0027c38:	90                   	nop
c0027c39:	83 c4 10             	add    esp,0x10
c0027c3c:	c3                   	ret    
c0027c3d:	8d 76 00             	lea    esi,[esi+0x0]

c0027c40 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027c40:	83 ec 14             	sub    esp,0x14
c0027c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c47:	88 04 24             	mov    BYTE PTR [esp],al
c0027c4a:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027c4d:	0f b6 c0             	movzx  eax,al
c0027c50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027c54:	89 d1                	mov    ecx,edx
c0027c56:	83 e1 0f             	and    ecx,0xf
c0027c59:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027c5d:	c1 e2 04             	shl    edx,0x4
c0027c60:	0f b6 d2             	movzx  edx,dl
c0027c63:	09 ca                	or     edx,ecx
c0027c65:	c1 e2 08             	shl    edx,0x8
c0027c68:	09 d0                	or     eax,edx
c0027c6a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027c6f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027c77:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027c7b:	89 d0                	mov    eax,edx
c0027c7d:	c1 e0 02             	shl    eax,0x2
c0027c80:	01 d0                	add    eax,edx
c0027c82:	c1 e0 04             	shl    eax,0x4
c0027c85:	89 c2                	mov    edx,eax
c0027c87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027c8b:	01 d0                	add    eax,edx
c0027c8d:	d1 e0                	shl    eax,1
c0027c8f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027c97:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0027c9c:	66 89 10             	mov    WORD PTR [eax],dx
c0027c9f:	90                   	nop
c0027ca0:	83 c4 14             	add    esp,0x14
c0027ca3:	c3                   	ret    

c0027ca4 <HalConsoleCursorUpdate(int, int)>:
c0027ca4:	83 ec 20             	sub    esp,0x20
c0027ca7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027cab:	89 c2                	mov    edx,eax
c0027cad:	c1 e2 02             	shl    edx,0x2
c0027cb0:	01 d0                	add    eax,edx
c0027cb2:	c1 e0 04             	shl    eax,0x4
c0027cb5:	89 c2                	mov    edx,eax
c0027cb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027cbb:	01 d0                	add    eax,edx
c0027cbd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027cc2:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027cc9:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027cce:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027cd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027cd6:	ee                   	out    dx,al
c0027cd7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027cdc:	0f b6 c0             	movzx  eax,al
c0027cdf:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027ce6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027cea:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027cee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027cf2:	ee                   	out    dx,al
c0027cf3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027cfa:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027cff:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027d03:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027d07:	ee                   	out    dx,al
c0027d08:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027d0d:	c1 e8 08             	shr    eax,0x8
c0027d10:	0f b6 c0             	movzx  eax,al
c0027d13:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027d1a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027d1e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027d22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d26:	ee                   	out    dx,al
c0027d27:	90                   	nop
c0027d28:	83 c4 20             	add    esp,0x20
c0027d2b:	c3                   	ret    

c0027d2c <FAT::getName()>:
c0027d2c:	b8 3c 32 03 c0       	mov    eax,0xc003323c
c0027d31:	c3                   	ret    
c0027d32:	66 90                	xchg   ax,ax

c0027d34 <FAT::tell(void*, unsigned long long*)>:
c0027d34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d39:	75 09                	jne    c0027d44 <FAT::tell(void*, unsigned long long*)+0x10>
c0027d3b:	b8 04 00 00 00       	mov    eax,0x4
c0027d40:	c3                   	ret    
c0027d41:	8d 76 00             	lea    esi,[esi+0x0]
c0027d44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d49:	75 09                	jne    c0027d54 <FAT::tell(void*, unsigned long long*)+0x20>
c0027d4b:	b8 04 00 00 00       	mov    eax,0x4
c0027d50:	c3                   	ret    
c0027d51:	8d 76 00             	lea    esi,[esi+0x0]
c0027d54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d58:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027d5b:	ba 00 00 00 00       	mov    edx,0x0
c0027d60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d64:	89 01                	mov    DWORD PTR [ecx],eax
c0027d66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d69:	b8 00 00 00 00       	mov    eax,0x0
c0027d6e:	c3                   	ret    
c0027d6f:	90                   	nop

c0027d70 <FAT::stat(void*, unsigned long long*)>:
c0027d70:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d75:	75 09                	jne    c0027d80 <FAT::stat(void*, unsigned long long*)+0x10>
c0027d77:	b8 04 00 00 00       	mov    eax,0x4
c0027d7c:	c3                   	ret    
c0027d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0027d80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d85:	75 09                	jne    c0027d90 <FAT::stat(void*, unsigned long long*)+0x20>
c0027d87:	b8 04 00 00 00       	mov    eax,0x4
c0027d8c:	c3                   	ret    
c0027d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0027d90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d94:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027d97:	ba 00 00 00 00       	mov    edx,0x0
c0027d9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027da0:	89 01                	mov    DWORD PTR [ecx],eax
c0027da2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027da5:	b8 00 00 00 00       	mov    eax,0x0
c0027daa:	c3                   	ret    
c0027dab:	90                   	nop

c0027dac <FAT::~FAT()>:
c0027dac:	83 ec 0c             	sub    esp,0xc
c0027daf:	ba 88 32 03 c0       	mov    edx,0xc0033288
c0027db4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db8:	89 10                	mov    DWORD PTR [eax],edx
c0027dba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dbe:	83 ec 0c             	sub    esp,0xc
c0027dc1:	50                   	push   eax
c0027dc2:	e8 d9 22 ff ff       	call   c001a0a0 <Filesystem::~Filesystem()>
c0027dc7:	83 c4 10             	add    esp,0x10
c0027dca:	90                   	nop
c0027dcb:	83 c4 0c             	add    esp,0xc
c0027dce:	c3                   	ret    
c0027dcf:	90                   	nop

c0027dd0 <FAT::~FAT()>:
c0027dd0:	83 ec 0c             	sub    esp,0xc
c0027dd3:	83 ec 0c             	sub    esp,0xc
c0027dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dda:	e8 cd ff ff ff       	call   c0027dac <FAT::~FAT()>
c0027ddf:	83 c4 10             	add    esp,0x10
c0027de2:	83 ec 08             	sub    esp,0x8
c0027de5:	6a 08                	push   0x8
c0027de7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027deb:	e8 2c 13 ff ff       	call   c001911c <operator delete(void*, unsigned long)>
c0027df0:	83 c4 10             	add    esp,0x10
c0027df3:	83 c4 0c             	add    esp,0xc
c0027df6:	c3                   	ret    
c0027df7:	90                   	nop

c0027df8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027df8:	83 ec 1c             	sub    esp,0x1c
c0027dfb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027e02:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027e07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e0b:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e12:	83 f8 ff             	cmp    eax,0xffffffff
c0027e15:	75 35                	jne    c0027e4c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027e17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e1b:	88 c2                	mov    dl,al
c0027e1d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e22:	01 d0                	add    eax,edx
c0027e24:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e28:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027e2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e32:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027e39:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e3e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027e42:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027e49:	eb 19                	jmp    c0027e64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027e4b:	90                   	nop
c0027e4c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e50:	88 c2                	mov    dl,al
c0027e52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e56:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e5d:	01 d0                	add    eax,edx
c0027e5f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e63:	90                   	nop
c0027e64:	83 ec 04             	sub    esp,0x4
c0027e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e6f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027e73:	50                   	push   eax
c0027e74:	e8 82 d2 fd ff       	call   c00050fb <f_getlabel>
c0027e79:	83 c4 10             	add    esp,0x10
c0027e7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027e80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e85:	75 09                	jne    c0027e90 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027e87:	b8 00 00 00 00       	mov    eax,0x0
c0027e8c:	eb 0a                	jmp    c0027e98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027e8e:	66 90                	xchg   ax,ax
c0027e90:	b8 01 00 00 00       	mov    eax,0x1
c0027e95:	8d 76 00             	lea    esi,[esi+0x0]
c0027e98:	83 c4 1c             	add    esp,0x1c
c0027e9b:	c3                   	ret    

c0027e9c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027e9c:	53                   	push   ebx
c0027e9d:	83 ec 58             	sub    esp,0x58
c0027ea0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027ea8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027eac:	b9 00 00 00 00       	mov    ecx,0x0
c0027eb1:	b8 3c 00 00 00       	mov    eax,0x3c
c0027eb6:	83 e0 f8             	and    eax,0xfffffff8
c0027eb9:	89 c3                	mov    ebx,eax
c0027ebb:	b8 00 00 00 00       	mov    eax,0x0
c0027ec0:	89 4c 04 10          	mov    DWORD PTR [esp+eax*1+0x10],ecx
c0027ec4:	89 4c 04 14          	mov    DWORD PTR [esp+eax*1+0x14],ecx
c0027ec8:	83 c0 08             	add    eax,0x8
c0027ecb:	39 d8                	cmp    eax,ebx
c0027ecd:	72 f1                	jb     c0027ec0 <FAT::setlabel(LogicalDisk*, int, char*)+0x24>
c0027ecf:	01 c2                	add    edx,eax
c0027ed1:	89 0a                	mov    DWORD PTR [edx],ecx
c0027ed3:	83 c2 04             	add    edx,0x4
c0027ed6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027eda:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027ee1:	83 f8 ff             	cmp    eax,0xffffffff
c0027ee4:	75 36                	jne    c0027f1c <FAT::setlabel(LogicalDisk*, int, char*)+0x80>
c0027ee6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027eea:	88 c2                	mov    dl,al
c0027eec:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ef1:	01 d0                	add    eax,edx
c0027ef3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027ef7:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027efd:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027f01:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027f08:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027f0d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027f11:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027f18:	eb 1a                	jmp    c0027f34 <FAT::setlabel(LogicalDisk*, int, char*)+0x98>
c0027f1a:	66 90                	xchg   ax,ax
c0027f1c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027f20:	88 c2                	mov    dl,al
c0027f22:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027f26:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027f2d:	01 d0                	add    eax,edx
c0027f2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027f33:	90                   	nop
c0027f34:	83 ec 08             	sub    esp,0x8
c0027f37:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027f3b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027f3f:	50                   	push   eax
c0027f40:	e8 2b 89 fd ff       	call   c0000870 <strcat>
c0027f45:	83 c4 10             	add    esp,0x10
c0027f48:	83 ec 0c             	sub    esp,0xc
c0027f4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027f4f:	50                   	push   eax
c0027f50:	e8 fa d2 fd ff       	call   c000524f <f_setlabel>
c0027f55:	83 c4 10             	add    esp,0x10
c0027f58:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0027f5c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0027f61:	75 09                	jne    c0027f6c <FAT::setlabel(LogicalDisk*, int, char*)+0xd0>
c0027f63:	b8 00 00 00 00       	mov    eax,0x0
c0027f68:	eb 0a                	jmp    c0027f74 <FAT::setlabel(LogicalDisk*, int, char*)+0xd8>
c0027f6a:	66 90                	xchg   ax,ax
c0027f6c:	b8 01 00 00 00       	mov    eax,0x1
c0027f71:	8d 76 00             	lea    esi,[esi+0x0]
c0027f74:	83 c4 58             	add    esp,0x58
c0027f77:	5b                   	pop    ebx
c0027f78:	c3                   	ret    
c0027f79:	90                   	nop
c0027f7a:	66 90                	xchg   ax,ax

c0027f7c <FAT::format(LogicalDisk*, int, char const*, int)>:
c0027f7c:	83 ec 2c             	sub    esp,0x2c
c0027f7f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0027f87:	83 ec 08             	sub    esp,0x8
c0027f8a:	68 60 32 03 c0       	push   0xc0033260
c0027f8f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f93:	e8 e8 87 fd ff       	call   c0000780 <strcmp>
c0027f98:	83 c4 10             	add    esp,0x10
c0027f9b:	85 c0                	test   eax,eax
c0027f9d:	0f 94 c0             	sete   al
c0027fa0:	0f b6 c0             	movzx  eax,al
c0027fa3:	85 c0                	test   eax,eax
c0027fa5:	74 0d                	je     c0027fb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0027fa7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027faf:	e9 c0 00 00 00       	jmp    c0028074 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fb4:	83 ec 08             	sub    esp,0x8
c0027fb7:	68 52 32 03 c0       	push   0xc0033252
c0027fbc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027fc0:	e8 bb 87 fd ff       	call   c0000780 <strcmp>
c0027fc5:	83 c4 10             	add    esp,0x10
c0027fc8:	85 c0                	test   eax,eax
c0027fca:	0f 94 c0             	sete   al
c0027fcd:	0f b6 c0             	movzx  eax,al
c0027fd0:	85 c0                	test   eax,eax
c0027fd2:	74 10                	je     c0027fe4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0027fd4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027fdc:	e9 93 00 00 00       	jmp    c0028074 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fe1:	8d 76 00             	lea    esi,[esi+0x0]
c0027fe4:	83 ec 08             	sub    esp,0x8
c0027fe7:	68 58 32 03 c0       	push   0xc0033258
c0027fec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027ff0:	e8 8b 87 fd ff       	call   c0000780 <strcmp>
c0027ff5:	83 c4 10             	add    esp,0x10
c0027ff8:	85 c0                	test   eax,eax
c0027ffa:	0f 94 c0             	sete   al
c0027ffd:	0f b6 c0             	movzx  eax,al
c0028000:	85 c0                	test   eax,eax
c0028002:	74 0c                	je     c0028010 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0028004:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002800c:	eb 66                	jmp    c0028074 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002800e:	66 90                	xchg   ax,ax
c0028010:	83 ec 08             	sub    esp,0x8
c0028013:	68 fc f3 02 c0       	push   0xc002f3fc
c0028018:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002801c:	e8 5f 87 fd ff       	call   c0000780 <strcmp>
c0028021:	83 c4 10             	add    esp,0x10
c0028024:	85 c0                	test   eax,eax
c0028026:	0f 94 c0             	sete   al
c0028029:	0f b6 c0             	movzx  eax,al
c002802c:	85 c0                	test   eax,eax
c002802e:	74 0c                	je     c002803c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028030:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028038:	eb 3a                	jmp    c0028074 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002803a:	66 90                	xchg   ax,ax
c002803c:	83 ec 08             	sub    esp,0x8
c002803f:	68 5e 32 03 c0       	push   0xc003325e
c0028044:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028048:	e8 33 87 fd ff       	call   c0000780 <strcmp>
c002804d:	83 c4 10             	add    esp,0x10
c0028050:	85 c0                	test   eax,eax
c0028052:	0f 94 c0             	sete   al
c0028055:	0f b6 c0             	movzx  eax,al
c0028058:	85 c0                	test   eax,eax
c002805a:	74 0c                	je     c0028068 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c002805c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028064:	eb 0e                	jmp    c0028074 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028066:	66 90                	xchg   ax,ax
c0028068:	b8 08 00 00 00       	mov    eax,0x8
c002806d:	e9 ea 00 00 00       	jmp    c002815c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028072:	66 90                	xchg   ax,ax
c0028074:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002807b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028080:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028084:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002808b:	83 f8 ff             	cmp    eax,0xffffffff
c002808e:	75 34                	jne    c00280c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028090:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028094:	88 c2                	mov    dl,al
c0028096:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002809b:	01 d0                	add    eax,edx
c002809d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00280a1:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00280a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00280ab:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00280b2:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00280b7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00280bb:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00280c2:	eb 18                	jmp    c00280dc <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00280c4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00280c8:	88 c2                	mov    dl,al
c00280ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00280ce:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00280d5:	01 d0                	add    eax,edx
c00280d7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00280db:	90                   	nop
c00280dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00280e0:	88 04 24             	mov    BYTE PTR [esp],al
c00280e3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00280e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00280eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00280f3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00280f8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0028100:	83 ec 0c             	sub    esp,0xc
c0028103:	68 00 20 00 00       	push   0x2000
c0028108:	e8 d6 e2 fe ff       	call   c00163e3 <malloc>
c002810d:	83 c4 10             	add    esp,0x10
c0028110:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028114:	68 00 20 00 00       	push   0x2000
c0028119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002811d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028121:	50                   	push   eax
c0028122:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0028126:	50                   	push   eax
c0028127:	e8 20 d4 fd ff       	call   c000554c <f_mkfs>
c002812c:	83 c4 10             	add    esp,0x10
c002812f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028133:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028138:	75 0a                	jne    c0028144 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c002813a:	b8 00 00 00 00       	mov    eax,0x0
c002813f:	eb 1b                	jmp    c002815c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028141:	8d 76 00             	lea    esi,[esi+0x0]
c0028144:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028149:	75 09                	jne    c0028154 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c002814b:	b8 09 00 00 00       	mov    eax,0x9
c0028150:	eb 0a                	jmp    c002815c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028152:	66 90                	xchg   ax,ax
c0028154:	b8 01 00 00 00       	mov    eax,0x1
c0028159:	8d 76 00             	lea    esi,[esi+0x0]
c002815c:	83 c4 2c             	add    esp,0x2c
c002815f:	c3                   	ret    

c0028160 <FAT::tryMount(LogicalDisk*, int)>:
c0028160:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0028166:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002816b:	83 f8 14             	cmp    eax,0x14
c002816e:	75 18                	jne    c0028188 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028170:	83 ec 0c             	sub    esp,0xc
c0028173:	68 64 32 03 c0       	push   0xc0033264
c0028178:	e8 25 80 ff ff       	call   c00201a2 <KePanic(char const*)>
c002817d:	83 c4 10             	add    esp,0x10
c0028180:	b0 00                	mov    al,0x0
c0028182:	e9 ed 01 00 00       	jmp    c0028374 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028187:	90                   	nop
c0028188:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002818f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028195:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002819b:	3d 00 02 00 00       	cmp    eax,0x200
c00281a0:	74 0a                	je     c00281ac <FAT::tryMount(LogicalDisk*, int)+0x4c>
c00281a2:	b0 00                	mov    al,0x0
c00281a4:	e9 cb 01 00 00       	jmp    c0028374 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00281a9:	8d 76 00             	lea    esi,[esi+0x0]
c00281ac:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00281b4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00281bb:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00281c2:	83 f8 ff             	cmp    eax,0xffffffff
c00281c5:	74 09                	je     c00281d0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c00281c7:	b0 01                	mov    al,0x1
c00281c9:	e9 a6 01 00 00       	jmp    c0028374 <FAT::tryMount(LogicalDisk*, int)+0x214>
c00281ce:	66 90                	xchg   ax,ax
c00281d0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00281da:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00281e2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00281e9:	88 c2                	mov    dl,al
c00281eb:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281f0:	01 d0                	add    eax,edx
c00281f2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00281f9:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281ff:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0028206:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c002820d:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028212:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0028219:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028220:	83 ec 0c             	sub    esp,0xc
c0028223:	68 34 02 00 00       	push   0x234
c0028228:	e8 b6 e1 fe ff       	call   c00163e3 <malloc>
c002822d:	83 c4 10             	add    esp,0x10
c0028230:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0028237:	83 ec 04             	sub    esp,0x4
c002823a:	6a 00                	push   0x0
c002823c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028243:	50                   	push   eax
c0028244:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002824b:	e8 f6 ba fd ff       	call   c0003d46 <f_mount>
c0028250:	83 c4 10             	add    esp,0x10
c0028253:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002825a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028262:	74 1c                	je     c0028280 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028264:	83 ec 0c             	sub    esp,0xc
c0028267:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002826e:	e8 90 e1 fe ff       	call   c0016403 <rfree>
c0028273:	83 c4 10             	add    esp,0x10
c0028276:	b0 00                	mov    al,0x0
c0028278:	e9 f7 00 00 00       	jmp    c0028374 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002827d:	8d 76 00             	lea    esi,[esi+0x0]
c0028280:	83 ec 04             	sub    esp,0x4
c0028283:	68 00 01 00 00       	push   0x100
c0028288:	6a 00                	push   0x0
c002828a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028291:	50                   	push   eax
c0028292:	e8 59 82 fd ff       	call   c00004f0 <memset>
c0028297:	83 c4 10             	add    esp,0x10
c002829a:	83 ec 08             	sub    esp,0x8
c002829d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00282a4:	50                   	push   eax
c00282a5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00282ac:	50                   	push   eax
c00282ad:	e8 be 85 fd ff       	call   c0000870 <strcat>
c00282b2:	83 c4 10             	add    esp,0x10
c00282b5:	83 ec 08             	sub    esp,0x8
c00282b8:	68 72 32 03 c0       	push   0xc0033272
c00282bd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00282c4:	50                   	push   eax
c00282c5:	e8 a6 85 fd ff       	call   c0000870 <strcat>
c00282ca:	83 c4 10             	add    esp,0x10
c00282cd:	83 ec 04             	sub    esp,0x4
c00282d0:	6a 01                	push   0x1
c00282d2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00282d9:	50                   	push   eax
c00282da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00282de:	50                   	push   eax
c00282df:	e8 c4 ba fd ff       	call   c0003da8 <f_open>
c00282e4:	83 c4 10             	add    esp,0x10
c00282e7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00282ee:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00282f5:	85 c0                	test   eax,eax
c00282f7:	74 0b                	je     c0028304 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00282f9:	78 31                	js     c002832c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282fb:	83 e8 04             	sub    eax,0x4
c00282fe:	83 f8 01             	cmp    eax,0x1
c0028301:	77 29                	ja     c002832c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0028303:	90                   	nop
c0028304:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c002830c:	83 ec 0c             	sub    esp,0xc
c002830f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028313:	50                   	push   eax
c0028314:	e8 3f c2 fd ff       	call   c0004558 <f_close>
c0028319:	83 c4 10             	add    esp,0x10
c002831c:	90                   	nop
c002831d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0028325:	85 c0                	test   eax,eax
c0028327:	74 43                	je     c002836c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0028329:	eb 31                	jmp    c002835c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c002832b:	90                   	nop
c002832c:	83 ec 0c             	sub    esp,0xc
c002832f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028336:	e8 c8 e0 fe ff       	call   c0016403 <rfree>
c002833b:	83 c4 10             	add    esp,0x10
c002833e:	83 ec 04             	sub    esp,0x4
c0028341:	6a 00                	push   0x0
c0028343:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002834a:	50                   	push   eax
c002834b:	6a 00                	push   0x0
c002834d:	e8 f4 b9 fd ff       	call   c0003d46 <f_mount>
c0028352:	83 c4 10             	add    esp,0x10
c0028355:	b0 00                	mov    al,0x0
c0028357:	eb 1b                	jmp    c0028374 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028359:	8d 76 00             	lea    esi,[esi+0x0]
c002835c:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028361:	83 c0 01             	add    eax,0x1
c0028364:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028369:	8d 76 00             	lea    esi,[esi+0x0]
c002836c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028373:	90                   	nop
c0028374:	81 c4 4c 03 00 00    	add    esp,0x34c
c002837a:	c3                   	ret    
c002837b:	90                   	nop

c002837c <FAT::allocateSwapfile(char const*, int)>:
c002837c:	55                   	push   ebp
c002837d:	57                   	push   edi
c002837e:	56                   	push   esi
c002837f:	53                   	push   ebx
c0028380:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028386:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028391:	83 ec 0c             	sub    esp,0xc
c0028394:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002839b:	e8 43 e0 fe ff       	call   c00163e3 <malloc>
c00283a0:	83 c4 10             	add    esp,0x10
c00283a3:	89 c7                	mov    edi,eax
c00283a5:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00283aa:	83 ec 04             	sub    esp,0x4
c00283ad:	50                   	push   eax
c00283ae:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c00283b5:	57                   	push   edi
c00283b6:	e8 77 20 ff ff       	call   c001a432 <File::File(char const*, Process*)>
c00283bb:	83 c4 10             	add    esp,0x10
c00283be:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c00283c5:	83 ec 04             	sub    esp,0x4
c00283c8:	8d 44 24 13          	lea    eax,[esp+0x13]
c00283cc:	50                   	push   eax
c00283cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00283d1:	50                   	push   eax
c00283d2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283d9:	e8 74 23 ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c00283de:	83 c4 10             	add    esp,0x10
c00283e1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00283e8:	c1 e0 14             	shl    eax,0x14
c00283eb:	89 c7                	mov    edi,eax
c00283ed:	89 c5                	mov    ebp,eax
c00283ef:	c1 fd 1f             	sar    ebp,0x1f
c00283f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283fa:	89 f9                	mov    ecx,edi
c00283fc:	31 c1                	xor    ecx,eax
c00283fe:	89 cb                	mov    ebx,ecx
c0028400:	89 e9                	mov    ecx,ebp
c0028402:	31 d1                	xor    ecx,edx
c0028404:	89 ce                	mov    esi,ecx
c0028406:	89 f0                	mov    eax,esi
c0028408:	09 d8                	or     eax,ebx
c002840a:	0f 84 9c 00 00 00    	je     c00284ac <FAT::allocateSwapfile(char const*, int)+0x130>
c0028410:	83 ec 0c             	sub    esp,0xc
c0028413:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002841a:	e8 ff 21 ff ff       	call   c001a61e <File::unlink()>
c002841f:	83 c4 10             	add    esp,0x10
c0028422:	83 ec 08             	sub    esp,0x8
c0028425:	6a 12                	push   0x12
c0028427:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002842e:	e8 1d 20 ff ff       	call   c001a450 <File::open(FileOpenMode)>
c0028433:	83 c4 10             	add    esp,0x10
c0028436:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002843d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028443:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002844a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028451:	c1 e0 14             	shl    eax,0x14
c0028454:	83 ec 04             	sub    esp,0x4
c0028457:	6a 01                	push   0x1
c0028459:	50                   	push   eax
c002845a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028461:	e8 79 cf fd ff       	call   c00053df <f_expand>
c0028466:	83 c4 10             	add    esp,0x10
c0028469:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028470:	8b 00                	mov    eax,DWORD PTR [eax]
c0028472:	83 c0 10             	add    eax,0x10
c0028475:	8b 00                	mov    eax,DWORD PTR [eax]
c0028477:	83 ec 0c             	sub    esp,0xc
c002847a:	8d 54 24 24          	lea    edx,[esp+0x24]
c002847e:	52                   	push   edx
c002847f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028483:	52                   	push   edx
c0028484:	6a 00                	push   0x0
c0028486:	68 00 04 00 00       	push   0x400
c002848b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028492:	ff d0                	call   eax
c0028494:	83 c4 20             	add    esp,0x20
c0028497:	83 ec 0c             	sub    esp,0xc
c002849a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284a1:	e8 08 20 ff ff       	call   c001a4ae <File::close()>
c00284a6:	83 c4 10             	add    esp,0x10
c00284a9:	8d 76 00             	lea    esi,[esi+0x0]
c00284ac:	83 ec 08             	sub    esp,0x8
c00284af:	6a 01                	push   0x1
c00284b1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284b8:	e8 93 1f ff ff       	call   c001a450 <File::open(FileOpenMode)>
c00284bd:	83 c4 10             	add    esp,0x10
c00284c0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00284c9:	83 c0 0c             	add    eax,0xc
c00284cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00284ce:	83 ec 0c             	sub    esp,0xc
c00284d1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00284d5:	52                   	push   edx
c00284d6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00284da:	52                   	push   edx
c00284db:	6a 00                	push   0x0
c00284dd:	6a 04                	push   0x4
c00284df:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00284e6:	ff d0                	call   eax
c00284e8:	83 c4 20             	add    esp,0x20
c00284eb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284f2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00284f8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00284ff:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0028506:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0028509:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0028510:	83 ec 0c             	sub    esp,0xc
c0028513:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c002851a:	e8 8f 1f ff ff       	call   c001a4ae <File::close()>
c002851f:	83 c4 10             	add    esp,0x10
c0028522:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0028529:	ba 00 00 00 00       	mov    edx,0x0
c002852e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028534:	5b                   	pop    ebx
c0028535:	5e                   	pop    esi
c0028536:	5f                   	pop    edi
c0028537:	5d                   	pop    ebp
c0028538:	c3                   	ret    
c0028539:	90                   	nop
c002853a:	66 90                	xchg   ax,ax

c002853c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002853c:	57                   	push   edi
c002853d:	56                   	push   esi
c002853e:	53                   	push   ebx
c002853f:	81 ec 50 02 00 00    	sub    esp,0x250
c0028545:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002854d:	74 0d                	je     c002855c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002854f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028557:	75 0f                	jne    c0028568 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028559:	8d 76 00             	lea    esi,[esi+0x0]
c002855c:	b8 04 00 00 00       	mov    eax,0x4
c0028561:	e9 3a 01 00 00       	jmp    c00286a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028566:	66 90                	xchg   ax,ax
c0028568:	83 ec 08             	sub    esp,0x8
c002856b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028572:	50                   	push   eax
c0028573:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002857a:	e8 a5 c2 fd ff       	call   c0004824 <f_readdir>
c002857f:	83 c4 10             	add    esp,0x10
c0028582:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028589:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028590:	83 ec 0c             	sub    esp,0xc
c0028593:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002859a:	83 c0 16             	add    eax,0x16
c002859d:	50                   	push   eax
c002859e:	e8 dd 7f fd ff       	call   c0000580 <strlen>
c00285a3:	83 c4 10             	add    esp,0x10
c00285a6:	ba 00 00 00 00       	mov    edx,0x0
c00285ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00285af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00285b3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00285ba:	0f b6 c0             	movzx  eax,al
c00285bd:	83 e0 10             	and    eax,0x10
c00285c0:	74 0a                	je     c00285cc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00285c2:	b8 02 00 00 00       	mov    eax,0x2
c00285c7:	eb 0b                	jmp    c00285d4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00285c9:	8d 76 00             	lea    esi,[esi+0x0]
c00285cc:	b8 01 00 00 00       	mov    eax,0x1
c00285d1:	8d 76 00             	lea    esi,[esi+0x0]
c00285d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00285d8:	83 ec 08             	sub    esp,0x8
c00285db:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00285e2:	83 c0 16             	add    eax,0x16
c00285e5:	50                   	push   eax
c00285e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00285ea:	83 c0 10             	add    eax,0x10
c00285ed:	50                   	push   eax
c00285ee:	e8 5d 80 fd ff       	call   c0000650 <strcpy>
c00285f3:	83 c4 10             	add    esp,0x10
c00285f6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00285fd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0028604:	8d 44 24 08          	lea    eax,[esp+0x8]
c0028608:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002860f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0028616:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002861d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0028624:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002862b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028632:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028639:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028640:	89 c6                	mov    esi,eax
c0028642:	89 d7                	mov    edi,edx
c0028644:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028646:	89 c8                	mov    eax,ecx
c0028648:	89 fa                	mov    edx,edi
c002864a:	89 f3                	mov    ebx,esi
c002864c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028653:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002865a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028661:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028668:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002866e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028675:	0f be c0             	movsx  eax,al
c0028678:	85 c0                	test   eax,eax
c002867a:	75 08                	jne    c0028684 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c002867c:	b8 07 00 00 00       	mov    eax,0x7
c0028681:	eb 1d                	jmp    c00286a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028683:	90                   	nop
c0028684:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002868b:	85 c0                	test   eax,eax
c002868d:	75 09                	jne    c0028698 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c002868f:	b8 00 00 00 00       	mov    eax,0x0
c0028694:	eb 0a                	jmp    c00286a0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028696:	66 90                	xchg   ax,ax
c0028698:	b8 01 00 00 00       	mov    eax,0x1
c002869d:	8d 76 00             	lea    esi,[esi+0x0]
c00286a0:	81 c4 50 02 00 00    	add    esp,0x250
c00286a6:	5b                   	pop    ebx
c00286a7:	5e                   	pop    esi
c00286a8:	5f                   	pop    edi
c00286a9:	c3                   	ret    
c00286aa:	66 90                	xchg   ax,ax

c00286ac <FAT::read(void*, unsigned long, void*, int*)>:
c00286ac:	83 ec 1c             	sub    esp,0x1c
c00286af:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00286b4:	74 0a                	je     c00286c0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00286b6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00286bb:	75 0b                	jne    c00286c8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00286bd:	8d 76 00             	lea    esi,[esi+0x0]
c00286c0:	b8 04 00 00 00       	mov    eax,0x4
c00286c5:	eb 41                	jmp    c0028708 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00286c7:	90                   	nop
c00286c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286cc:	50                   	push   eax
c00286cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00286d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00286d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00286d9:	e8 8d b9 fd ff       	call   c000406b <f_read>
c00286de:	83 c4 10             	add    esp,0x10
c00286e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286e9:	89 c2                	mov    edx,eax
c00286eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00286ef:	89 10                	mov    DWORD PTR [eax],edx
c00286f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00286f5:	85 c0                	test   eax,eax
c00286f7:	75 07                	jne    c0028700 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00286f9:	b8 00 00 00 00       	mov    eax,0x0
c00286fe:	eb 08                	jmp    c0028708 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028700:	b8 01 00 00 00       	mov    eax,0x1
c0028705:	8d 76 00             	lea    esi,[esi+0x0]
c0028708:	83 c4 1c             	add    esp,0x1c
c002870b:	c3                   	ret    

c002870c <FAT::write(void*, unsigned long, void*, int*)>:
c002870c:	83 ec 1c             	sub    esp,0x1c
c002870f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028714:	74 0a                	je     c0028720 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0028716:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002871b:	75 0b                	jne    c0028728 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c002871d:	8d 76 00             	lea    esi,[esi+0x0]
c0028720:	b8 04 00 00 00       	mov    eax,0x4
c0028725:	eb 41                	jmp    c0028768 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028727:	90                   	nop
c0028728:	8d 44 24 08          	lea    eax,[esp+0x8]
c002872c:	50                   	push   eax
c002872d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028731:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028735:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028739:	e8 0e bb fd ff       	call   c000424c <f_write>
c002873e:	83 c4 10             	add    esp,0x10
c0028741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028745:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028749:	89 c2                	mov    edx,eax
c002874b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002874f:	89 10                	mov    DWORD PTR [eax],edx
c0028751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028755:	85 c0                	test   eax,eax
c0028757:	75 07                	jne    c0028760 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028759:	b8 00 00 00 00       	mov    eax,0x0
c002875e:	eb 08                	jmp    c0028768 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028760:	b8 01 00 00 00       	mov    eax,0x1
c0028765:	8d 76 00             	lea    esi,[esi+0x0]
c0028768:	83 c4 1c             	add    esp,0x1c
c002876b:	c3                   	ret    

c002876c <FAT::close(void*)>:
c002876c:	83 ec 1c             	sub    esp,0x1c
c002876f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028774:	75 0a                	jne    c0028780 <FAT::close(void*)+0x14>
c0028776:	b8 04 00 00 00       	mov    eax,0x4
c002877b:	eb 3f                	jmp    c00287bc <FAT::close(void*)+0x50>
c002877d:	8d 76 00             	lea    esi,[esi+0x0]
c0028780:	83 ec 0c             	sub    esp,0xc
c0028783:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028787:	e8 cc bd fd ff       	call   c0004558 <f_close>
c002878c:	83 c4 10             	add    esp,0x10
c002878f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028793:	83 ec 0c             	sub    esp,0xc
c0028796:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002879a:	e8 54 dc fe ff       	call   c00163f3 <free>
c002879f:	83 c4 10             	add    esp,0x10
c00287a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287a6:	85 c0                	test   eax,eax
c00287a8:	75 0a                	jne    c00287b4 <FAT::close(void*)+0x48>
c00287aa:	b8 00 00 00 00       	mov    eax,0x0
c00287af:	eb 0b                	jmp    c00287bc <FAT::close(void*)+0x50>
c00287b1:	8d 76 00             	lea    esi,[esi+0x0]
c00287b4:	b8 01 00 00 00       	mov    eax,0x1
c00287b9:	8d 76 00             	lea    esi,[esi+0x0]
c00287bc:	83 c4 1c             	add    esp,0x1c
c00287bf:	c3                   	ret    

c00287c0 <FAT::closeDir(void*)>:
c00287c0:	83 ec 1c             	sub    esp,0x1c
c00287c3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00287c8:	75 0a                	jne    c00287d4 <FAT::closeDir(void*)+0x14>
c00287ca:	b8 04 00 00 00       	mov    eax,0x4
c00287cf:	eb 3f                	jmp    c0028810 <FAT::closeDir(void*)+0x50>
c00287d1:	8d 76 00             	lea    esi,[esi+0x0]
c00287d4:	83 ec 0c             	sub    esp,0xc
c00287d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287db:	e8 22 c0 fd ff       	call   c0004802 <f_closedir>
c00287e0:	83 c4 10             	add    esp,0x10
c00287e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287e7:	83 ec 0c             	sub    esp,0xc
c00287ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287ee:	e8 00 dc fe ff       	call   c00163f3 <free>
c00287f3:	83 c4 10             	add    esp,0x10
c00287f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287fa:	85 c0                	test   eax,eax
c00287fc:	75 0a                	jne    c0028808 <FAT::closeDir(void*)+0x48>
c00287fe:	b8 00 00 00 00       	mov    eax,0x0
c0028803:	eb 0b                	jmp    c0028810 <FAT::closeDir(void*)+0x50>
c0028805:	8d 76 00             	lea    esi,[esi+0x0]
c0028808:	b8 01 00 00 00       	mov    eax,0x1
c002880d:	8d 76 00             	lea    esi,[esi+0x0]
c0028810:	83 c4 1c             	add    esp,0x1c
c0028813:	c3                   	ret    

c0028814 <FAT::truncate(void*, unsigned long long)>:
c0028814:	83 ec 2c             	sub    esp,0x2c
c0028817:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002881b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002881f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0028823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028827:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002882c:	75 0a                	jne    c0028838 <FAT::truncate(void*, unsigned long long)+0x24>
c002882e:	b8 04 00 00 00       	mov    eax,0x4
c0028833:	eb 47                	jmp    c002887c <FAT::truncate(void*, unsigned long long)+0x68>
c0028835:	8d 76 00             	lea    esi,[esi+0x0]
c0028838:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002883c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002883f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028843:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002884b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002884f:	83 ec 08             	sub    esp,0x8
c0028852:	50                   	push   eax
c0028853:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028857:	e8 2b bd fd ff       	call   c0004587 <f_lseek>
c002885c:	83 c4 10             	add    esp,0x10
c002885f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028863:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028867:	85 c0                	test   eax,eax
c0028869:	75 09                	jne    c0028874 <FAT::truncate(void*, unsigned long long)+0x60>
c002886b:	b8 00 00 00 00       	mov    eax,0x0
c0028870:	eb 0a                	jmp    c002887c <FAT::truncate(void*, unsigned long long)+0x68>
c0028872:	66 90                	xchg   ax,ax
c0028874:	b8 01 00 00 00       	mov    eax,0x1
c0028879:	8d 76 00             	lea    esi,[esi+0x0]
c002887c:	83 c4 2c             	add    esp,0x2c
c002887f:	c3                   	ret    

c0028880 <FAT::seek(void*, unsigned long long)>:
c0028880:	83 ec 2c             	sub    esp,0x2c
c0028883:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002888b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002888f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028893:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028898:	75 0a                	jne    c00288a4 <FAT::seek(void*, unsigned long long)+0x24>
c002889a:	b8 04 00 00 00       	mov    eax,0x4
c002889f:	eb 33                	jmp    c00288d4 <FAT::seek(void*, unsigned long long)+0x54>
c00288a1:	8d 76 00             	lea    esi,[esi+0x0]
c00288a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00288a8:	83 ec 08             	sub    esp,0x8
c00288ab:	50                   	push   eax
c00288ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00288b0:	e8 d2 bc fd ff       	call   c0004587 <f_lseek>
c00288b5:	83 c4 10             	add    esp,0x10
c00288b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00288bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00288c0:	85 c0                	test   eax,eax
c00288c2:	75 08                	jne    c00288cc <FAT::seek(void*, unsigned long long)+0x4c>
c00288c4:	b8 00 00 00 00       	mov    eax,0x0
c00288c9:	eb 09                	jmp    c00288d4 <FAT::seek(void*, unsigned long long)+0x54>
c00288cb:	90                   	nop
c00288cc:	b8 01 00 00 00       	mov    eax,0x1
c00288d1:	8d 76 00             	lea    esi,[esi+0x0]
c00288d4:	83 c4 2c             	add    esp,0x2c
c00288d7:	c3                   	ret    

c00288d8 <fatWrapperReadDisk>:
c00288d8:	53                   	push   ebx
c00288d9:	83 ec 18             	sub    esp,0x18
c00288dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288e0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00288e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00288e9:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00288f0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00288f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00288f8:	ba 00 00 00 00       	mov    edx,0x0
c00288fd:	83 ec 0c             	sub    esp,0xc
c0028900:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028904:	53                   	push   ebx
c0028905:	52                   	push   edx
c0028906:	50                   	push   eax
c0028907:	51                   	push   ecx
c0028908:	e8 99 3d ff ff       	call   c001c6a6 <LogicalDisk::read(unsigned long long, int, void*)>
c002890d:	83 c4 20             	add    esp,0x20
c0028910:	83 c4 18             	add    esp,0x18
c0028913:	5b                   	pop    ebx
c0028914:	c3                   	ret    
c0028915:	8d 76 00             	lea    esi,[esi+0x0]

c0028918 <fatWrapperWriteDisk>:
c0028918:	53                   	push   ebx
c0028919:	83 ec 18             	sub    esp,0x18
c002891c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028920:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028924:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028929:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028930:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028934:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028938:	ba 00 00 00 00       	mov    edx,0x0
c002893d:	83 ec 0c             	sub    esp,0xc
c0028940:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028944:	53                   	push   ebx
c0028945:	52                   	push   edx
c0028946:	50                   	push   eax
c0028947:	51                   	push   ecx
c0028948:	e8 c5 3d ff ff       	call   c001c712 <LogicalDisk::write(unsigned long long, int, void*)>
c002894d:	83 c4 20             	add    esp,0x20
c0028950:	83 c4 18             	add    esp,0x18
c0028953:	5b                   	pop    ebx
c0028954:	c3                   	ret    
c0028955:	8d 76 00             	lea    esi,[esi+0x0]

c0028958 <fatWrapperIoctl>:
c0028958:	53                   	push   ebx
c0028959:	83 ec 28             	sub    esp,0x28
c002895c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0028960:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0028964:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028968:	88 d0                	mov    al,dl
c002896a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002896e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028973:	83 f8 02             	cmp    eax,0x2
c0028976:	75 34                	jne    c00289ac <fatWrapperIoctl+0x54>
c0028978:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002897c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0028980:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028985:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c002898c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028992:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028998:	89 c2                	mov    edx,eax
c002899a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002899e:	66 89 10             	mov    WORD PTR [eax],dx
c00289a1:	b8 00 00 00 00       	mov    eax,0x0
c00289a6:	e9 c5 00 00 00       	jmp    c0028a70 <fatWrapperIoctl+0x118>
c00289ab:	90                   	nop
c00289ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00289b1:	83 f8 01             	cmp    eax,0x1
c00289b4:	75 6a                	jne    c0028a20 <fatWrapperIoctl+0xc8>
c00289b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00289ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00289be:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00289c3:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c00289ca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00289d0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00289d6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00289dc:	89 c8                	mov    eax,ecx
c00289de:	89 da                	mov    edx,ebx
c00289e0:	0f a4 c2 0a          	shld   edx,eax,0xa
c00289e4:	c1 e0 0a             	shl    eax,0xa
c00289e7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00289ec:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00289f3:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00289f9:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00289ff:	89 cb                	mov    ebx,ecx
c0028a01:	c1 fb 1f             	sar    ebx,0x1f
c0028a04:	53                   	push   ebx
c0028a05:	51                   	push   ecx
c0028a06:	52                   	push   edx
c0028a07:	50                   	push   eax
c0028a08:	e8 f3 5b 00 00       	call   c002e600 <__udivdi3>
c0028a0d:	83 c4 10             	add    esp,0x10
c0028a10:	89 c2                	mov    edx,eax
c0028a12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0028a16:	89 10                	mov    DWORD PTR [eax],edx
c0028a18:	b8 00 00 00 00       	mov    eax,0x0
c0028a1d:	eb 51                	jmp    c0028a70 <fatWrapperIoctl+0x118>
c0028a1f:	90                   	nop
c0028a20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a25:	85 c0                	test   eax,eax
c0028a27:	75 07                	jne    c0028a30 <fatWrapperIoctl+0xd8>
c0028a29:	b8 00 00 00 00       	mov    eax,0x0
c0028a2e:	eb 40                	jmp    c0028a70 <fatWrapperIoctl+0x118>
c0028a30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a35:	83 f8 03             	cmp    eax,0x3
c0028a38:	75 1a                	jne    c0028a54 <fatWrapperIoctl+0xfc>
c0028a3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a3e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028a42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a46:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028a4c:	b8 00 00 00 00       	mov    eax,0x0
c0028a51:	eb 1d                	jmp    c0028a70 <fatWrapperIoctl+0x118>
c0028a53:	90                   	nop
c0028a54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a59:	83 f8 04             	cmp    eax,0x4
c0028a5c:	75 0a                	jne    c0028a68 <fatWrapperIoctl+0x110>
c0028a5e:	b8 00 00 00 00       	mov    eax,0x0
c0028a63:	eb 0b                	jmp    c0028a70 <fatWrapperIoctl+0x118>
c0028a65:	8d 76 00             	lea    esi,[esi+0x0]
c0028a68:	b8 04 00 00 00       	mov    eax,0x4
c0028a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0028a70:	83 c4 28             	add    esp,0x28
c0028a73:	5b                   	pop    ebx
c0028a74:	c3                   	ret    
c0028a75:	90                   	nop
c0028a76:	66 90                	xchg   ax,ax

c0028a78 <FAT::FAT()>:
c0028a78:	83 ec 1c             	sub    esp,0x1c
c0028a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a7f:	83 ec 0c             	sub    esp,0xc
c0028a82:	50                   	push   eax
c0028a83:	e8 f4 15 ff ff       	call   c001a07c <Filesystem::Filesystem()>
c0028a88:	83 c4 10             	add    esp,0x10
c0028a8b:	ba 88 32 03 c0       	mov    edx,0xc0033288
c0028a90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a94:	89 10                	mov    DWORD PTR [eax],edx
c0028a96:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028aa0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028aa8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028aad:	7f 19                	jg     c0028ac8 <FAT::FAT()+0x50>
c0028aaf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028ab3:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028abe:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028ac3:	eb e3                	jmp    c0028aa8 <FAT::FAT()+0x30>
c0028ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ac8:	90                   	nop
c0028ac9:	83 c4 1c             	add    esp,0x1c
c0028acc:	c3                   	ret    
c0028acd:	90                   	nop
c0028ace:	66 90                	xchg   ax,ax

c0028ad0 <FAT::fixFilepath(char*)>:
c0028ad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ad4:	8a 00                	mov    al,BYTE PTR [eax]
c0028ad6:	0f be c0             	movsx  eax,al
c0028ad9:	83 f8 40             	cmp    eax,0x40
c0028adc:	7e 2e                	jle    c0028b0c <FAT::fixFilepath(char*)+0x3c>
c0028ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ae2:	8a 00                	mov    al,BYTE PTR [eax]
c0028ae4:	83 e8 41             	sub    eax,0x41
c0028ae7:	88 c2                	mov    dl,al
c0028ae9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aed:	88 10                	mov    BYTE PTR [eax],dl
c0028aef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028af3:	8a 00                	mov    al,BYTE PTR [eax]
c0028af5:	0f be c0             	movsx  eax,al
c0028af8:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028aff:	83 c0 30             	add    eax,0x30
c0028b02:	88 c2                	mov    dl,al
c0028b04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028b08:	88 10                	mov    BYTE PTR [eax],dl
c0028b0a:	66 90                	xchg   ax,ax
c0028b0c:	90                   	nop
c0028b0d:	c3                   	ret    
c0028b0e:	66 90                	xchg   ax,ax

c0028b10 <FAT::open(char const*, void**, FileOpenMode)>:
c0028b10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028b16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028b1e:	74 0c                	je     c0028b2c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028b20:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028b28:	75 0e                	jne    c0028b38 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028b2a:	66 90                	xchg   ax,ax
c0028b2c:	b8 04 00 00 00       	mov    eax,0x4
c0028b31:	e9 46 01 00 00       	jmp    c0028c7c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028b36:	66 90                	xchg   ax,ax
c0028b38:	83 ec 08             	sub    esp,0x8
c0028b3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028b46:	50                   	push   eax
c0028b47:	e8 04 7b fd ff       	call   c0000650 <strcpy>
c0028b4c:	83 c4 10             	add    esp,0x10
c0028b4f:	83 ec 08             	sub    esp,0x8
c0028b52:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028b56:	50                   	push   eax
c0028b57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b5e:	e8 6d ff ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c0028b63:	83 c4 10             	add    esp,0x10
c0028b66:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028b6e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b75:	83 e0 01             	and    eax,0x1
c0028b78:	74 12                	je     c0028b8c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028b7a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b81:	83 c8 01             	or     eax,0x1
c0028b84:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b8b:	90                   	nop
c0028b8c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b93:	83 e0 04             	and    eax,0x4
c0028b96:	74 24                	je     c0028bbc <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028b98:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b9f:	83 c8 30             	or     eax,0x30
c0028ba2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ba9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bb0:	83 c8 02             	or     eax,0x2
c0028bb3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bba:	66 90                	xchg   ax,ax
c0028bbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028bc3:	83 e0 02             	and    eax,0x2
c0028bc6:	74 14                	je     c0028bdc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028bc8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bcf:	83 c8 02             	or     eax,0x2
c0028bd2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0028bdc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028be3:	83 e0 08             	and    eax,0x8
c0028be6:	74 14                	je     c0028bfc <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028be8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bef:	83 c8 04             	or     eax,0x4
c0028bf2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0028bfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028c03:	83 e0 10             	and    eax,0x10
c0028c06:	74 14                	je     c0028c1c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028c08:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028c0f:	83 c8 08             	or     eax,0x8
c0028c12:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028c19:	8d 76 00             	lea    esi,[esi+0x0]
c0028c1c:	83 ec 0c             	sub    esp,0xc
c0028c1f:	68 28 02 00 00       	push   0x228
c0028c24:	e8 ba d7 fe ff       	call   c00163e3 <malloc>
c0028c29:	83 c4 10             	add    esp,0x10
c0028c2c:	89 c2                	mov    edx,eax
c0028c2e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c35:	89 10                	mov    DWORD PTR [eax],edx
c0028c37:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028c3f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c48:	83 ec 04             	sub    esp,0x4
c0028c4b:	52                   	push   edx
c0028c4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028c50:	52                   	push   edx
c0028c51:	50                   	push   eax
c0028c52:	e8 51 b1 fd ff       	call   c0003da8 <f_open>
c0028c57:	83 c4 10             	add    esp,0x10
c0028c5a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028c61:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028c69:	74 09                	je     c0028c74 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028c6b:	b8 01 00 00 00       	mov    eax,0x1
c0028c70:	eb 0a                	jmp    c0028c7c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c72:	66 90                	xchg   ax,ax
c0028c74:	b8 00 00 00 00       	mov    eax,0x0
c0028c79:	8d 76 00             	lea    esi,[esi+0x0]
c0028c7c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028c82:	c3                   	ret    
c0028c83:	90                   	nop

c0028c84 <FAT::openDir(char const*, void**)>:
c0028c84:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028c8a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028c92:	74 0c                	je     c0028ca0 <FAT::openDir(char const*, void**)+0x1c>
c0028c94:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028c9c:	75 0e                	jne    c0028cac <FAT::openDir(char const*, void**)+0x28>
c0028c9e:	66 90                	xchg   ax,ax
c0028ca0:	b8 04 00 00 00       	mov    eax,0x4
c0028ca5:	e9 82 00 00 00       	jmp    c0028d2c <FAT::openDir(char const*, void**)+0xa8>
c0028caa:	66 90                	xchg   ax,ax
c0028cac:	83 ec 08             	sub    esp,0x8
c0028caf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028cb6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028cba:	50                   	push   eax
c0028cbb:	e8 90 79 fd ff       	call   c0000650 <strcpy>
c0028cc0:	83 c4 10             	add    esp,0x10
c0028cc3:	83 ec 08             	sub    esp,0x8
c0028cc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028cca:	50                   	push   eax
c0028ccb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028cd2:	e8 f9 fd ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c0028cd7:	83 c4 10             	add    esp,0x10
c0028cda:	83 ec 0c             	sub    esp,0xc
c0028cdd:	6a 30                	push   0x30
c0028cdf:	e8 ff d6 fe ff       	call   c00163e3 <malloc>
c0028ce4:	83 c4 10             	add    esp,0x10
c0028ce7:	89 c2                	mov    edx,eax
c0028ce9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cf0:	89 10                	mov    DWORD PTR [eax],edx
c0028cf2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cfb:	83 ec 08             	sub    esp,0x8
c0028cfe:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028d02:	52                   	push   edx
c0028d03:	50                   	push   eax
c0028d04:	e8 2e ba fd ff       	call   c0004737 <f_opendir>
c0028d09:	83 c4 10             	add    esp,0x10
c0028d0c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028d13:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028d1b:	74 07                	je     c0028d24 <FAT::openDir(char const*, void**)+0xa0>
c0028d1d:	b8 01 00 00 00       	mov    eax,0x1
c0028d22:	eb 08                	jmp    c0028d2c <FAT::openDir(char const*, void**)+0xa8>
c0028d24:	b8 00 00 00 00       	mov    eax,0x0
c0028d29:	8d 76 00             	lea    esi,[esi+0x0]
c0028d2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028d32:	c3                   	ret    
c0028d33:	90                   	nop

c0028d34 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028d34:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028d3a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028d42:	75 0c                	jne    c0028d50 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028d44:	b8 04 00 00 00       	mov    eax,0x4
c0028d49:	e9 d6 00 00 00       	jmp    c0028e24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d4e:	66 90                	xchg   ax,ax
c0028d50:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028d58:	75 0a                	jne    c0028d64 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028d5a:	b8 04 00 00 00       	mov    eax,0x4
c0028d5f:	e9 c0 00 00 00       	jmp    c0028e24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d64:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028d6c:	75 0a                	jne    c0028d78 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028d6e:	b8 04 00 00 00       	mov    eax,0x4
c0028d73:	e9 ac 00 00 00       	jmp    c0028e24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d78:	83 ec 08             	sub    esp,0x8
c0028d7b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d82:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028d89:	50                   	push   eax
c0028d8a:	e8 c1 78 fd ff       	call   c0000650 <strcpy>
c0028d8f:	83 c4 10             	add    esp,0x10
c0028d92:	83 ec 08             	sub    esp,0x8
c0028d95:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028d9c:	50                   	push   eax
c0028d9d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028da4:	e8 27 fd ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c0028da9:	83 c4 10             	add    esp,0x10
c0028dac:	83 ec 08             	sub    esp,0x8
c0028daf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028db3:	50                   	push   eax
c0028db4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028dbb:	50                   	push   eax
c0028dbc:	e8 f5 ba fd ff       	call   c00048b6 <f_stat>
c0028dc1:	83 c4 10             	add    esp,0x10
c0028dc4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028dcb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028dd2:	85 c0                	test   eax,eax
c0028dd4:	74 0a                	je     c0028de0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028dd6:	83 f8 04             	cmp    eax,0x4
c0028dd9:	74 39                	je     c0028e14 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028ddb:	eb 3f                	jmp    c0028e1c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0028de0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028de4:	0f b6 c0             	movzx  eax,al
c0028de7:	83 e0 10             	and    eax,0x10
c0028dea:	0f 95 c2             	setne  dl
c0028ded:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028df4:	88 10                	mov    BYTE PTR [eax],dl
c0028df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dfa:	ba 00 00 00 00       	mov    edx,0x0
c0028dff:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028e06:	89 01                	mov    DWORD PTR [ecx],eax
c0028e08:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028e0b:	b8 00 00 00 00       	mov    eax,0x0
c0028e10:	eb 12                	jmp    c0028e24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e12:	66 90                	xchg   ax,ax
c0028e14:	b8 02 00 00 00       	mov    eax,0x2
c0028e19:	eb 09                	jmp    c0028e24 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028e1b:	90                   	nop
c0028e1c:	b8 01 00 00 00       	mov    eax,0x1
c0028e21:	8d 76 00             	lea    esi,[esi+0x0]
c0028e24:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028e2a:	c3                   	ret    
c0028e2b:	90                   	nop

c0028e2c <FAT::unlink(char const*)>:
c0028e2c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028e32:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028e3a:	75 08                	jne    c0028e44 <FAT::unlink(char const*)+0x18>
c0028e3c:	b8 04 00 00 00       	mov    eax,0x4
c0028e41:	eb 61                	jmp    c0028ea4 <FAT::unlink(char const*)+0x78>
c0028e43:	90                   	nop
c0028e44:	83 ec 08             	sub    esp,0x8
c0028e47:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e4e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e52:	50                   	push   eax
c0028e53:	e8 f8 77 fd ff       	call   c0000650 <strcpy>
c0028e58:	83 c4 10             	add    esp,0x10
c0028e5b:	83 ec 08             	sub    esp,0x8
c0028e5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e62:	50                   	push   eax
c0028e63:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e6a:	e8 61 fc ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c0028e6f:	83 c4 10             	add    esp,0x10
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e79:	50                   	push   eax
c0028e7a:	e8 a9 bc fd ff       	call   c0004b28 <f_unlink>
c0028e7f:	83 c4 10             	add    esp,0x10
c0028e82:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e89:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028e90:	85 c0                	test   eax,eax
c0028e92:	75 08                	jne    c0028e9c <FAT::unlink(char const*)+0x70>
c0028e94:	b8 00 00 00 00       	mov    eax,0x0
c0028e99:	eb 09                	jmp    c0028ea4 <FAT::unlink(char const*)+0x78>
c0028e9b:	90                   	nop
c0028e9c:	b8 01 00 00 00       	mov    eax,0x1
c0028ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0028ea4:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028eaa:	c3                   	ret    
c0028eab:	90                   	nop

c0028eac <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028eac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028eb2:	8b 84 24 38 01 00 00 	mov    eax,DWORD PTR [esp+0x138]
c0028eb9:	8b 94 24 3c 01 00 00 	mov    edx,DWORD PTR [esp+0x13c]
c0028ec0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0028ec4:	88 d0                	mov    al,dl
c0028ec6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028eca:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028ed2:	75 0c                	jne    c0028ee0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x34>
c0028ed4:	b8 04 00 00 00       	mov    eax,0x4
c0028ed9:	e9 7e 01 00 00       	jmp    c002905c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0028ede:	66 90                	xchg   ax,ax
c0028ee0:	83 ec 08             	sub    esp,0x8
c0028ee3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028eea:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028eee:	50                   	push   eax
c0028eef:	e8 5c 77 fd ff       	call   c0000650 <strcpy>
c0028ef4:	83 c4 10             	add    esp,0x10
c0028ef7:	83 ec 08             	sub    esp,0x8
c0028efa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028efe:	50                   	push   eax
c0028eff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028f06:	e8 c5 fb ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c0028f0b:	83 c4 10             	add    esp,0x10
c0028f0e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028f16:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028f1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f23:	83 e0 01             	and    eax,0x1
c0028f26:	74 14                	je     c0028f3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x90>
c0028f28:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f2f:	83 c8 01             	or     eax,0x1
c0028f32:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f39:	8d 76 00             	lea    esi,[esi+0x0]
c0028f3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f41:	83 e0 02             	and    eax,0x2
c0028f44:	74 12                	je     c0028f58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xac>
c0028f46:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f4d:	83 c8 20             	or     eax,0x20
c0028f50:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f57:	90                   	nop
c0028f58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f5d:	83 e0 04             	and    eax,0x4
c0028f60:	74 12                	je     c0028f74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0028f62:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f69:	83 c8 04             	or     eax,0x4
c0028f6c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f73:	90                   	nop
c0028f74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f79:	83 e0 08             	and    eax,0x8
c0028f7c:	74 12                	je     c0028f90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0028f7e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f85:	83 c8 02             	or     eax,0x2
c0028f88:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f8f:	90                   	nop
c0028f90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f95:	83 e0 01             	and    eax,0x1
c0028f98:	74 12                	je     c0028fac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x100>
c0028f9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fa1:	83 c8 01             	or     eax,0x1
c0028fa4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fab:	90                   	nop
c0028fac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fb1:	83 e0 02             	and    eax,0x2
c0028fb4:	74 12                	je     c0028fc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11c>
c0028fb6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fbd:	83 c8 20             	or     eax,0x20
c0028fc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fc7:	90                   	nop
c0028fc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fcd:	83 e0 04             	and    eax,0x4
c0028fd0:	74 12                	je     c0028fe4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x138>
c0028fd2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fd9:	83 c8 04             	or     eax,0x4
c0028fdc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fe3:	90                   	nop
c0028fe4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fe9:	83 e0 08             	and    eax,0x8
c0028fec:	74 12                	je     c0029000 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x154>
c0028fee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028ff5:	83 c8 02             	or     eax,0x2
c0028ff8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fff:	90                   	nop
c0029000:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0029007:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002900e:	09 d0                	or     eax,edx
c0029010:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0029017:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c002901f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0029027:	83 ec 04             	sub    esp,0x4
c002902a:	52                   	push   edx
c002902b:	50                   	push   eax
c002902c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0029030:	50                   	push   eax
c0029031:	e8 65 bf fd ff       	call   c0004f9b <f_chmod>
c0029036:	83 c4 10             	add    esp,0x10
c0029039:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029040:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0029047:	85 c0                	test   eax,eax
c0029049:	75 09                	jne    c0029054 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a8>
c002904b:	b8 00 00 00 00       	mov    eax,0x0
c0029050:	eb 0a                	jmp    c002905c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1b0>
c0029052:	66 90                	xchg   ax,ax
c0029054:	b8 01 00 00 00       	mov    eax,0x1
c0029059:	8d 76 00             	lea    esi,[esi+0x0]
c002905c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0029062:	c3                   	ret    
c0029063:	90                   	nop

c0029064 <FAT::rename(char const*, char const*)>:
c0029064:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002906a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0029072:	74 0c                	je     c0029080 <FAT::rename(char const*, char const*)+0x1c>
c0029074:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002907c:	75 0e                	jne    c002908c <FAT::rename(char const*, char const*)+0x28>
c002907e:	66 90                	xchg   ax,ax
c0029080:	b8 04 00 00 00       	mov    eax,0x4
c0029085:	e9 9e 00 00 00       	jmp    c0029128 <FAT::rename(char const*, char const*)+0xc4>
c002908a:	66 90                	xchg   ax,ax
c002908c:	83 ec 08             	sub    esp,0x8
c002908f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029096:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002909d:	50                   	push   eax
c002909e:	e8 ad 75 fd ff       	call   c0000650 <strcpy>
c00290a3:	83 c4 10             	add    esp,0x10
c00290a6:	83 ec 08             	sub    esp,0x8
c00290a9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00290b0:	50                   	push   eax
c00290b1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00290b8:	e8 13 fa ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c00290bd:	83 c4 10             	add    esp,0x10
c00290c0:	83 ec 08             	sub    esp,0x8
c00290c3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00290ca:	8d 44 24 18          	lea    eax,[esp+0x18]
c00290ce:	50                   	push   eax
c00290cf:	e8 7c 75 fd ff       	call   c0000650 <strcpy>
c00290d4:	83 c4 10             	add    esp,0x10
c00290d7:	83 ec 08             	sub    esp,0x8
c00290da:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290de:	50                   	push   eax
c00290df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00290e6:	e8 e5 f9 ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c00290eb:	83 c4 10             	add    esp,0x10
c00290ee:	83 ec 08             	sub    esp,0x8
c00290f1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290f5:	50                   	push   eax
c00290f6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00290fd:	50                   	push   eax
c00290fe:	e8 e0 bc fd ff       	call   c0004de3 <f_rename>
c0029103:	83 c4 10             	add    esp,0x10
c0029106:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002910d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0029114:	85 c0                	test   eax,eax
c0029116:	75 08                	jne    c0029120 <FAT::rename(char const*, char const*)+0xbc>
c0029118:	b8 00 00 00 00       	mov    eax,0x0
c002911d:	eb 09                	jmp    c0029128 <FAT::rename(char const*, char const*)+0xc4>
c002911f:	90                   	nop
c0029120:	b8 01 00 00 00       	mov    eax,0x1
c0029125:	8d 76 00             	lea    esi,[esi+0x0]
c0029128:	81 c4 1c 02 00 00    	add    esp,0x21c
c002912e:	c3                   	ret    
c002912f:	90                   	nop

c0029130 <FAT::mkdir(char const*)>:
c0029130:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0029136:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002913e:	75 08                	jne    c0029148 <FAT::mkdir(char const*)+0x18>
c0029140:	b8 04 00 00 00       	mov    eax,0x4
c0029145:	eb 61                	jmp    c00291a8 <FAT::mkdir(char const*)+0x78>
c0029147:	90                   	nop
c0029148:	83 ec 08             	sub    esp,0x8
c002914b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029152:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029156:	50                   	push   eax
c0029157:	e8 f4 74 fd ff       	call   c0000650 <strcpy>
c002915c:	83 c4 10             	add    esp,0x10
c002915f:	83 ec 08             	sub    esp,0x8
c0029162:	8d 44 24 14          	lea    eax,[esp+0x14]
c0029166:	50                   	push   eax
c0029167:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002916e:	e8 5d f9 ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c0029173:	83 c4 10             	add    esp,0x10
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	8d 44 24 18          	lea    eax,[esp+0x18]
c002917d:	50                   	push   eax
c002917e:	e8 c5 ba fd ff       	call   c0004c48 <f_mkdir>
c0029183:	83 c4 10             	add    esp,0x10
c0029186:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002918d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0029194:	85 c0                	test   eax,eax
c0029196:	75 08                	jne    c00291a0 <FAT::mkdir(char const*)+0x70>
c0029198:	b8 00 00 00 00       	mov    eax,0x0
c002919d:	eb 09                	jmp    c00291a8 <FAT::mkdir(char const*)+0x78>
c002919f:	90                   	nop
c00291a0:	b8 01 00 00 00       	mov    eax,0x1
c00291a5:	8d 76 00             	lea    esi,[esi+0x0]
c00291a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00291ae:	c3                   	ret    
c00291af:	90                   	nop

c00291b0 <FAT::exists(char const*)>:
c00291b0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00291b6:	83 ec 08             	sub    esp,0x8
c00291b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00291c0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00291c4:	50                   	push   eax
c00291c5:	e8 86 74 fd ff       	call   c0000650 <strcpy>
c00291ca:	83 c4 10             	add    esp,0x10
c00291cd:	83 ec 08             	sub    esp,0x8
c00291d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00291d4:	50                   	push   eax
c00291d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00291dc:	e8 ef f8 ff ff       	call   c0028ad0 <FAT::fixFilepath(char*)>
c00291e1:	83 c4 10             	add    esp,0x10
c00291e4:	83 ec 08             	sub    esp,0x8
c00291e7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00291ee:	50                   	push   eax
c00291ef:	8d 44 24 10          	lea    eax,[esp+0x10]
c00291f3:	50                   	push   eax
c00291f4:	e8 bd b6 fd ff       	call   c00048b6 <f_stat>
c00291f9:	83 c4 10             	add    esp,0x10
c00291fc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0029203:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002920a:	85 c0                	test   eax,eax
c002920c:	75 06                	jne    c0029214 <FAT::exists(char const*)+0x64>
c002920e:	b0 01                	mov    al,0x1
c0029210:	eb 06                	jmp    c0029218 <FAT::exists(char const*)+0x68>
c0029212:	66 90                	xchg   ax,ax
c0029214:	b0 00                	mov    al,0x0
c0029216:	66 90                	xchg   ax,ax
c0029218:	81 c4 2c 02 00 00    	add    esp,0x22c
c002921e:	c3                   	ret    
c002921f:	90                   	nop

c0029220 <isoReadDiscSectorHelper>:
c0029220:	83 ec 2c             	sub    esp,0x2c
c0029223:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0029227:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002922b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0029230:	83 e8 41             	sub    eax,0x41
c0029233:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c002923a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002923e:	ba 00 00 00 00       	mov    edx,0x0
c0029243:	83 ec 0c             	sub    esp,0xc
c0029246:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002924a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002924e:	52                   	push   edx
c002924f:	50                   	push   eax
c0029250:	51                   	push   ecx
c0029251:	e8 50 34 ff ff       	call   c001c6a6 <LogicalDisk::read(unsigned long long, int, void*)>
c0029256:	83 c4 20             	add    esp,0x20
c0029259:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002925d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0029262:	74 0c                	je     c0029270 <isoReadDiscSectorHelper+0x50>
c0029264:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029268:	c1 e0 0b             	shl    eax,0xb
c002926b:	eb 0b                	jmp    c0029278 <isoReadDiscSectorHelper+0x58>
c002926d:	8d 76 00             	lea    esi,[esi+0x0]
c0029270:	b8 00 00 00 00       	mov    eax,0x0
c0029275:	8d 76 00             	lea    esi,[esi+0x0]
c0029278:	83 c4 2c             	add    esp,0x2c
c002927b:	c3                   	ret    

c002927c <iso_kprintf>:
c002927c:	83 ec 0c             	sub    esp,0xc
c002927f:	83 ec 08             	sub    esp,0x8
c0029282:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0029286:	68 36 30 03 c0       	push   0xc0033036
c002928b:	e8 8a ff fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0029290:	83 c4 10             	add    esp,0x10
c0029293:	90                   	nop
c0029294:	83 c4 0c             	add    esp,0xc
c0029297:	c3                   	ret    

c0029298 <iso_kprintfd>:
c0029298:	83 ec 0c             	sub    esp,0xc
c002929b:	83 ec 08             	sub    esp,0x8
c002929e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00292a2:	68 6a 16 03 c0       	push   0xc003166a
c00292a7:	e8 6e ff fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00292ac:	83 c4 10             	add    esp,0x10
c00292af:	90                   	nop
c00292b0:	83 c4 0c             	add    esp,0xc
c00292b3:	c3                   	ret    

c00292b4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00292b4:	b8 08 00 00 00       	mov    eax,0x8
c00292b9:	c3                   	ret    

c00292ba <ISO9660::truncate(void*, unsigned long long)>:
c00292ba:	b8 01 00 00 00       	mov    eax,0x1
c00292bf:	c3                   	ret    

c00292c0 <ISO9660::getName()>:
c00292c0:	b8 ec 32 03 c0       	mov    eax,0xc00332ec
c00292c5:	c3                   	ret    

c00292c6 <ISO9660::closeDir(void*)>:
c00292c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00292ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00292cc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00292cf:	90                   	nop

c00292d0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00292d0:	b8 01 00 00 00       	mov    eax,0x1
c00292d5:	c3                   	ret    

c00292d6 <ISO9660::unlink(char const*)>:
c00292d6:	b8 01 00 00 00       	mov    eax,0x1
c00292db:	c3                   	ret    

c00292dc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00292dc:	b8 03 00 00 00       	mov    eax,0x3
c00292e1:	c3                   	ret    

c00292e2 <ISO9660::rename(char const*, char const*)>:
c00292e2:	b8 01 00 00 00       	mov    eax,0x1
c00292e7:	c3                   	ret    

c00292e8 <ISO9660::mkdir(char const*)>:
c00292e8:	b8 01 00 00 00       	mov    eax,0x1
c00292ed:	c3                   	ret    

c00292ee <ISO9660::~ISO9660()>:
c00292ee:	83 ec 0c             	sub    esp,0xc
c00292f1:	ba 2c 34 03 c0       	mov    edx,0xc003342c
c00292f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fa:	89 10                	mov    DWORD PTR [eax],edx
c00292fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029300:	83 ec 0c             	sub    esp,0xc
c0029303:	50                   	push   eax
c0029304:	e8 97 0d ff ff       	call   c001a0a0 <Filesystem::~Filesystem()>
c0029309:	83 c4 10             	add    esp,0x10
c002930c:	90                   	nop
c002930d:	83 c4 0c             	add    esp,0xc
c0029310:	c3                   	ret    
c0029311:	90                   	nop

c0029312 <ISO9660::~ISO9660()>:
c0029312:	83 ec 0c             	sub    esp,0xc
c0029315:	83 ec 0c             	sub    esp,0xc
c0029318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002931c:	e8 cd ff ff ff       	call   c00292ee <ISO9660::~ISO9660()>
c0029321:	83 c4 10             	add    esp,0x10
c0029324:	83 ec 08             	sub    esp,0x8
c0029327:	6a 08                	push   0x8
c0029329:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002932d:	e8 ea fd fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c0029332:	83 c4 10             	add    esp,0x10
c0029335:	83 c4 0c             	add    esp,0xc
c0029338:	c3                   	ret    
c0029339:	90                   	nop

c002933a <ISO9660::exists(char const*)>:
c002933a:	83 ec 18             	sub    esp,0x18
c002933d:	68 07 33 03 c0       	push   0xc0033307
c0029342:	e8 5b 6e ff ff       	call   c00201a2 <KePanic(char const*)>
c0029347:	31 c0                	xor    eax,eax
c0029349:	83 c4 1c             	add    esp,0x1c
c002934c:	c3                   	ret    
c002934d:	90                   	nop

c002934e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002934e:	56                   	push   esi
c002934f:	53                   	push   ebx
c0029350:	53                   	push   ebx
c0029351:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0029355:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029359:	85 db                	test   ebx,ebx
c002935b:	0f 84 ca 00 00 00    	je     c002942b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029361:	85 f6                	test   esi,esi
c0029363:	0f 84 c2 00 00 00    	je     c002942b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029369:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c002936e:	b8 03 00 00 00       	mov    eax,0x3
c0029373:	0f 85 b7 00 00 00    	jne    c0029430 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029379:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002937b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029381:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029388:	74 1b                	je     c00293a5 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c002938a:	85 c0                	test   eax,eax
c002938c:	74 10                	je     c002939e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c002938e:	83 ec 0c             	sub    esp,0xc
c0029391:	68 25 33 03 c0       	push   0xc0033325
c0029396:	e8 07 6e ff ff       	call   c00201a2 <KePanic(char const*)>
c002939b:	83 c4 10             	add    esp,0x10
c002939e:	8a 03                	mov    al,BYTE PTR [ebx]
c00293a0:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00293a5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00293a8:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00293af:	85 c0                	test   eax,eax
c00293b1:	74 09                	je     c00293bc <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00293b3:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00293ba:	74 48                	je     c0029404 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00293bc:	83 ec 0c             	sub    esp,0xc
c00293bf:	68 35 33 03 c0       	push   0xc0033335
c00293c4:	e8 51 fe fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00293c9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00293cc:	83 c4 10             	add    esp,0x10
c00293cf:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00293d6:	85 c0                	test   eax,eax
c00293d8:	74 17                	je     c00293f1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00293da:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00293e1:	83 ec 0c             	sub    esp,0xc
c00293e4:	68 55 33 03 c0       	push   0xc0033355
c00293e9:	e8 2c fe fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00293ee:	83 c4 10             	add    esp,0x10
c00293f1:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00293f8:	83 ec 0c             	sub    esp,0xc
c00293fb:	50                   	push   eax
c00293fc:	e8 6e d7 fd ff       	call   c0006b6f <init_percd>
c0029401:	83 c4 10             	add    esp,0x10
c0029404:	51                   	push   ecx
c0029405:	83 c3 03             	add    ebx,0x3
c0029408:	51                   	push   ecx
c0029409:	6a 00                	push   0x0
c002940b:	53                   	push   ebx
c002940c:	e8 21 d2 fd ff       	call   c0006632 <iso_open>
c0029411:	83 c4 10             	add    esp,0x10
c0029414:	89 c2                	mov    edx,eax
c0029416:	b8 01 00 00 00       	mov    eax,0x1
c002941b:	83 fa ff             	cmp    edx,0xffffffff
c002941e:	74 10                	je     c0029430 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029420:	83 c2 32             	add    edx,0x32
c0029423:	31 c0                	xor    eax,eax
c0029425:	01 d2                	add    edx,edx
c0029427:	89 16                	mov    DWORD PTR [esi],edx
c0029429:	eb 05                	jmp    c0029430 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c002942b:	b8 04 00 00 00       	mov    eax,0x4
c0029430:	5a                   	pop    edx
c0029431:	5b                   	pop    ebx
c0029432:	5e                   	pop    esi
c0029433:	c3                   	ret    

c0029434 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0029434:	53                   	push   ebx
c0029435:	83 ec 08             	sub    esp,0x8
c0029438:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002943c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029440:	85 c0                	test   eax,eax
c0029442:	74 2d                	je     c0029471 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029444:	85 db                	test   ebx,ebx
c0029446:	74 29                	je     c0029471 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029448:	52                   	push   edx
c0029449:	b9 02 00 00 00       	mov    ecx,0x2
c002944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029452:	99                   	cdq    
c0029453:	f7 f9                	idiv   ecx
c0029455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029459:	83 e8 32             	sub    eax,0x32
c002945c:	50                   	push   eax
c002945d:	e8 78 d2 fd ff       	call   c00066da <iso_read>
c0029462:	83 c4 10             	add    esp,0x10
c0029465:	89 03                	mov    DWORD PTR [ebx],eax
c0029467:	09 d0                	or     eax,edx
c0029469:	0f 94 c0             	sete   al
c002946c:	0f b6 c0             	movzx  eax,al
c002946f:	eb 05                	jmp    c0029476 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029471:	b8 04 00 00 00       	mov    eax,0x4
c0029476:	83 c4 08             	add    esp,0x8
c0029479:	5b                   	pop    ebx
c002947a:	c3                   	ret    
c002947b:	90                   	nop

c002947c <ISO9660::seek(void*, unsigned long long)>:
c002947c:	57                   	push   edi
c002947d:	b8 04 00 00 00       	mov    eax,0x4
c0029482:	56                   	push   esi
c0029483:	51                   	push   ecx
c0029484:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029488:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002948c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029490:	85 d2                	test   edx,edx
c0029492:	74 26                	je     c00294ba <ISO9660::seek(void*, unsigned long long)+0x3e>
c0029494:	89 d0                	mov    eax,edx
c0029496:	b9 02 00 00 00       	mov    ecx,0x2
c002949b:	6a 00                	push   0x0
c002949d:	99                   	cdq    
c002949e:	f7 f9                	idiv   ecx
c00294a0:	57                   	push   edi
c00294a1:	56                   	push   esi
c00294a2:	83 e8 32             	sub    eax,0x32
c00294a5:	50                   	push   eax
c00294a6:	e8 45 d3 fd ff       	call   c00067f0 <iso_seek>
c00294ab:	83 c4 10             	add    esp,0x10
c00294ae:	31 f0                	xor    eax,esi
c00294b0:	31 fa                	xor    edx,edi
c00294b2:	09 d0                	or     eax,edx
c00294b4:	0f 95 c0             	setne  al
c00294b7:	0f b6 c0             	movzx  eax,al
c00294ba:	5a                   	pop    edx
c00294bb:	5e                   	pop    esi
c00294bc:	5f                   	pop    edi
c00294bd:	c3                   	ret    

c00294be <ISO9660::tell(void*, unsigned long long*)>:
c00294be:	53                   	push   ebx
c00294bf:	83 ec 08             	sub    esp,0x8
c00294c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00294c6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00294ca:	85 c0                	test   eax,eax
c00294cc:	74 24                	je     c00294f2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00294ce:	85 db                	test   ebx,ebx
c00294d0:	74 20                	je     c00294f2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00294d2:	b9 02 00 00 00       	mov    ecx,0x2
c00294d7:	99                   	cdq    
c00294d8:	f7 f9                	idiv   ecx
c00294da:	83 ec 0c             	sub    esp,0xc
c00294dd:	83 e8 32             	sub    eax,0x32
c00294e0:	50                   	push   eax
c00294e1:	e8 8e d3 fd ff       	call   c0006874 <iso_tell>
c00294e6:	83 c4 10             	add    esp,0x10
c00294e9:	89 03                	mov    DWORD PTR [ebx],eax
c00294eb:	31 c0                	xor    eax,eax
c00294ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00294f0:	eb 05                	jmp    c00294f7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c00294f2:	b8 04 00 00 00       	mov    eax,0x4
c00294f7:	83 c4 08             	add    esp,0x8
c00294fa:	5b                   	pop    ebx
c00294fb:	c3                   	ret    

c00294fc <ISO9660::stat(void*, unsigned long long*)>:
c00294fc:	56                   	push   esi
c00294fd:	53                   	push   ebx
c00294fe:	83 ec 10             	sub    esp,0x10
c0029501:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029505:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029509:	68 79 33 03 c0       	push   0xc0033379
c002950e:	e8 07 fd fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0029513:	83 c4 10             	add    esp,0x10
c0029516:	85 db                	test   ebx,ebx
c0029518:	74 2a                	je     c0029544 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002951a:	85 f6                	test   esi,esi
c002951c:	74 26                	je     c0029544 <ISO9660::stat(void*, unsigned long long*)+0x48>
c002951e:	89 d8                	mov    eax,ebx
c0029520:	b9 02 00 00 00       	mov    ecx,0x2
c0029525:	99                   	cdq    
c0029526:	83 ec 0c             	sub    esp,0xc
c0029529:	f7 f9                	idiv   ecx
c002952b:	83 e8 32             	sub    eax,0x32
c002952e:	50                   	push   eax
c002952f:	e8 71 d3 fd ff       	call   c00068a5 <iso_total>
c0029534:	83 c4 10             	add    esp,0x10
c0029537:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c002953e:	89 06                	mov    DWORD PTR [esi],eax
c0029540:	31 c0                	xor    eax,eax
c0029542:	eb 05                	jmp    c0029549 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0029544:	b8 04 00 00 00       	mov    eax,0x4
c0029549:	5a                   	pop    edx
c002954a:	5b                   	pop    ebx
c002954b:	5e                   	pop    esi
c002954c:	c3                   	ret    
c002954d:	90                   	nop

c002954e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c002954e:	55                   	push   ebp
c002954f:	57                   	push   edi
c0029550:	56                   	push   esi
c0029551:	53                   	push   ebx
c0029552:	83 ec 18             	sub    esp,0x18
c0029555:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029559:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002955d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029561:	68 81 33 03 c0       	push   0xc0033381
c0029566:	e8 af fc fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002956b:	83 c4 10             	add    esp,0x10
c002956e:	85 ff                	test   edi,edi
c0029570:	0f 94 c0             	sete   al
c0029573:	85 f6                	test   esi,esi
c0029575:	0f 94 c2             	sete   dl
c0029578:	09 d0                	or     eax,edx
c002957a:	a8 01                	test   al,0x1
c002957c:	0f 85 dd 00 00 00    	jne    c002965f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029582:	85 db                	test   ebx,ebx
c0029584:	0f 84 d5 00 00 00    	je     c002965f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002958a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002958d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0029593:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002959a:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00295a1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00295a3:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c00295a9:	74 1b                	je     c00295c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00295ab:	85 c0                	test   eax,eax
c00295ad:	74 10                	je     c00295bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00295af:	83 ec 0c             	sub    esp,0xc
c00295b2:	68 25 33 03 c0       	push   0xc0033325
c00295b7:	e8 e6 6b ff ff       	call   c00201a2 <KePanic(char const*)>
c00295bc:	83 c4 10             	add    esp,0x10
c00295bf:	8a 03                	mov    al,BYTE PTR [ebx]
c00295c1:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00295c6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295c9:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00295d0:	85 c0                	test   eax,eax
c00295d2:	74 09                	je     c00295dd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00295d4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00295db:	74 51                	je     c002962e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00295dd:	83 ec 0c             	sub    esp,0xc
c00295e0:	68 89 33 03 c0       	push   0xc0033389
c00295e5:	e8 30 fc fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00295ea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295ed:	83 c4 10             	add    esp,0x10
c00295f0:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00295f8:	74 21                	je     c002961b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00295fa:	83 ec 0c             	sub    esp,0xc
c00295fd:	68 a9 33 03 c0       	push   0xc00333a9
c0029602:	e8 13 fc fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c0029607:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002960a:	83 c4 10             	add    esp,0x10
c002960d:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029614:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c002961b:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029622:	83 ec 0c             	sub    esp,0xc
c0029625:	50                   	push   eax
c0029626:	e8 44 d5 fd ff       	call   c0006b6f <init_percd>
c002962b:	83 c4 10             	add    esp,0x10
c002962e:	52                   	push   edx
c002962f:	83 c3 03             	add    ebx,0x3
c0029632:	52                   	push   edx
c0029633:	6a 00                	push   0x0
c0029635:	53                   	push   ebx
c0029636:	e8 f7 cf fd ff       	call   c0006632 <iso_open>
c002963b:	83 c4 10             	add    esp,0x10
c002963e:	83 f8 ff             	cmp    eax,0xffffffff
c0029641:	89 c5                	mov    ebp,eax
c0029643:	75 21                	jne    c0029666 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0029645:	50                   	push   eax
c0029646:	50                   	push   eax
c0029647:	6a 01                	push   0x1
c0029649:	53                   	push   ebx
c002964a:	e8 e3 cf fd ff       	call   c0006632 <iso_open>
c002964f:	83 c4 10             	add    esp,0x10
c0029652:	ba 02 00 00 00       	mov    edx,0x2
c0029657:	40                   	inc    eax
c0029658:	74 2b                	je     c0029685 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002965a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002965d:	eb 24                	jmp    c0029683 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c002965f:	ba 04 00 00 00       	mov    edx,0x4
c0029664:	eb 1f                	jmp    c0029685 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029666:	83 ec 0c             	sub    esp,0xc
c0029669:	50                   	push   eax
c002966a:	e8 36 d2 fd ff       	call   c00068a5 <iso_total>
c002966f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029676:	89 07                	mov    DWORD PTR [edi],eax
c0029678:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002967b:	e8 3c d0 fd ff       	call   c00066bc <iso_close>
c0029680:	83 c4 10             	add    esp,0x10
c0029683:	31 d2                	xor    edx,edx
c0029685:	83 c4 0c             	add    esp,0xc
c0029688:	89 d0                	mov    eax,edx
c002968a:	5b                   	pop    ebx
c002968b:	5e                   	pop    esi
c002968c:	5f                   	pop    edi
c002968d:	5d                   	pop    ebp
c002968e:	c3                   	ret    
c002968f:	90                   	nop

c0029690 <ISO9660::close(void*)>:
c0029690:	83 ec 0c             	sub    esp,0xc
c0029693:	b8 04 00 00 00       	mov    eax,0x4
c0029698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002969c:	85 d2                	test   edx,edx
c002969e:	74 1b                	je     c00296bb <ISO9660::close(void*)+0x2b>
c00296a0:	89 d0                	mov    eax,edx
c00296a2:	b9 02 00 00 00       	mov    ecx,0x2
c00296a7:	99                   	cdq    
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	f7 f9                	idiv   ecx
c00296ad:	83 e8 32             	sub    eax,0x32
c00296b0:	50                   	push   eax
c00296b1:	e8 06 d0 fd ff       	call   c00066bc <iso_close>
c00296b6:	83 c4 10             	add    esp,0x10
c00296b9:	31 c0                	xor    eax,eax
c00296bb:	83 c4 0c             	add    esp,0xc
c00296be:	c3                   	ret    
c00296bf:	90                   	nop

c00296c0 <ISO9660::openDir(char const*, void**)>:
c00296c0:	56                   	push   esi
c00296c1:	53                   	push   ebx
c00296c2:	50                   	push   eax
c00296c3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00296c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00296cb:	85 db                	test   ebx,ebx
c00296cd:	0f 84 bd 00 00 00    	je     c0029790 <ISO9660::openDir(char const*, void**)+0xd0>
c00296d3:	85 f6                	test   esi,esi
c00296d5:	0f 84 b5 00 00 00    	je     c0029790 <ISO9660::openDir(char const*, void**)+0xd0>
c00296db:	8a 13                	mov    dl,BYTE PTR [ebx]
c00296dd:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00296e3:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296ea:	74 1b                	je     c0029707 <ISO9660::openDir(char const*, void**)+0x47>
c00296ec:	85 c0                	test   eax,eax
c00296ee:	74 10                	je     c0029700 <ISO9660::openDir(char const*, void**)+0x40>
c00296f0:	83 ec 0c             	sub    esp,0xc
c00296f3:	68 25 33 03 c0       	push   0xc0033325
c00296f8:	e8 a5 6a ff ff       	call   c00201a2 <KePanic(char const*)>
c00296fd:	83 c4 10             	add    esp,0x10
c0029700:	8a 03                	mov    al,BYTE PTR [ebx]
c0029702:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c0029707:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c002970a:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029711:	85 c0                	test   eax,eax
c0029713:	74 10                	je     c0029725 <ISO9660::openDir(char const*, void**)+0x65>
c0029715:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c002971c:	74 1a                	je     c0029738 <ISO9660::openDir(char const*, void**)+0x78>
c002971e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0029725:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002972c:	83 ec 0c             	sub    esp,0xc
c002972f:	50                   	push   eax
c0029730:	e8 3a d4 fd ff       	call   c0006b6f <init_percd>
c0029735:	83 c4 10             	add    esp,0x10
c0029738:	50                   	push   eax
c0029739:	83 c3 03             	add    ebx,0x3
c002973c:	50                   	push   eax
c002973d:	6a 01                	push   0x1
c002973f:	53                   	push   ebx
c0029740:	e8 ed ce fd ff       	call   c0006632 <iso_open>
c0029745:	83 c4 10             	add    esp,0x10
c0029748:	83 f8 ff             	cmp    eax,0xffffffff
c002974b:	89 c3                	mov    ebx,eax
c002974d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029752:	75 1c                	jne    c0029770 <ISO9660::openDir(char const*, void**)+0xb0>
c0029754:	53                   	push   ebx
c0029755:	53                   	push   ebx
c0029756:	68 cd 33 03 c0       	push   0xc00333cd
c002975b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029761:	e8 56 dc fe ff       	call   c00173bc <VgaText::puts(char const*)>
c0029766:	83 c4 10             	add    esp,0x10
c0029769:	b8 01 00 00 00       	mov    eax,0x1
c002976e:	eb 25                	jmp    c0029795 <ISO9660::openDir(char const*, void**)+0xd5>
c0029770:	51                   	push   ecx
c0029771:	01 db                	add    ebx,ebx
c0029773:	51                   	push   ecx
c0029774:	83 c3 65             	add    ebx,0x65
c0029777:	68 e0 33 03 c0       	push   0xc00333e0
c002977c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029782:	e8 35 dc fe ff       	call   c00173bc <VgaText::puts(char const*)>
c0029787:	83 c4 10             	add    esp,0x10
c002978a:	31 c0                	xor    eax,eax
c002978c:	89 1e                	mov    DWORD PTR [esi],ebx
c002978e:	eb 05                	jmp    c0029795 <ISO9660::openDir(char const*, void**)+0xd5>
c0029790:	b8 04 00 00 00       	mov    eax,0x4
c0029795:	5a                   	pop    edx
c0029796:	5b                   	pop    ebx
c0029797:	5e                   	pop    esi
c0029798:	c3                   	ret    
c0029799:	90                   	nop

c002979a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002979a:	55                   	push   ebp
c002979b:	57                   	push   edi
c002979c:	56                   	push   esi
c002979d:	53                   	push   ebx
c002979e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00297a4:	8b 9c 24 34 01 00 00 	mov    ebx,DWORD PTR [esp+0x134]
c00297ab:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00297b2:	8b ac 24 40 01 00 00 	mov    ebp,DWORD PTR [esp+0x140]
c00297b9:	85 db                	test   ebx,ebx
c00297bb:	0f 84 e4 00 00 00    	je     c00298a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00297c1:	85 ed                	test   ebp,ebp
c00297c3:	0f 84 dc 00 00 00    	je     c00298a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10b>
c00297c9:	83 ec 0c             	sub    esp,0xc
c00297cc:	68 f3 33 03 c0       	push   0xc00333f3
c00297d1:	e8 44 fa fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c00297d6:	89 d8                	mov    eax,ebx
c00297d8:	b9 02 00 00 00       	mov    ecx,0x2
c00297dd:	99                   	cdq    
c00297de:	f7 f9                	idiv   ecx
c00297e0:	83 e8 32             	sub    eax,0x32
c00297e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00297e6:	e8 0c d1 fd ff       	call   c00068f7 <iso_readdir>
c00297eb:	83 c4 10             	add    esp,0x10
c00297ee:	85 c0                	test   eax,eax
c00297f0:	89 c3                	mov    ebx,eax
c00297f2:	75 38                	jne    c002982c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00297f4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00297f9:	53                   	push   ebx
c00297fa:	53                   	push   ebx
c00297fb:	68 fe 33 03 c0       	push   0xc00333fe
c0029800:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029806:	e8 b1 db fe ff       	call   c00173bc <VgaText::puts(char const*)>
c002980b:	83 c4 0c             	add    esp,0xc
c002980e:	68 10 01 00 00       	push   0x110
c0029813:	6a 00                	push   0x0
c0029815:	57                   	push   edi
c0029816:	e8 d5 6c fd ff       	call   c00004f0 <memset>
c002981b:	83 c4 10             	add    esp,0x10
c002981e:	b8 01 00 00 00       	mov    eax,0x1
c0029823:	c7 45 00 00 00 00 00 	mov    DWORD PTR [ebp+0x0],0x0
c002982a:	eb 7e                	jmp    c00298aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c002982c:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0029832:	8d 70 08             	lea    esi,[eax+0x8]
c0029835:	83 ec 0c             	sub    esp,0xc
c0029838:	56                   	push   esi
c0029839:	e8 42 6d fd ff       	call   c0000580 <strlen>
c002983e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029846:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002984a:	83 c4 10             	add    esp,0x10
c002984d:	83 7b 04 ff          	cmp    DWORD PTR [ebx+0x4],0xffffffff
c0029851:	75 0a                	jne    c002985d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc3>
c0029853:	83 3b ff             	cmp    DWORD PTR [ebx],0xffffffff
c0029856:	b8 02 00 00 00       	mov    eax,0x2
c002985b:	74 05                	je     c0029862 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc8>
c002985d:	b8 01 00 00 00       	mov    eax,0x1
c0029862:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029866:	50                   	push   eax
c0029867:	50                   	push   eax
c0029868:	56                   	push   esi
c0029869:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002986d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0029871:	50                   	push   eax
c0029872:	e8 d9 6d fd ff       	call   c0000650 <strcpy>
c0029877:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002987e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0029880:	c7 45 00 10 01 00 00 	mov    DWORD PTR [ebp+0x0],0x110
c0029887:	5a                   	pop    edx
c0029888:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002988d:	59                   	pop    ecx
c002988e:	68 11 34 03 c0       	push   0xc0033411
c0029893:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029899:	e8 1e db fe ff       	call   c00173bc <VgaText::puts(char const*)>
c002989e:	83 c4 10             	add    esp,0x10
c00298a1:	31 c0                	xor    eax,eax
c00298a3:	eb 05                	jmp    c00298aa <ISO9660::readDir(void*, unsigned long, void*, int*)+0x110>
c00298a5:	b8 04 00 00 00       	mov    eax,0x4
c00298aa:	81 c4 1c 01 00 00    	add    esp,0x11c
c00298b0:	5b                   	pop    ebx
c00298b1:	5e                   	pop    esi
c00298b2:	5f                   	pop    edi
c00298b3:	5d                   	pop    ebp
c00298b4:	c3                   	ret    

c00298b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00298b5:	57                   	push   edi
c00298b6:	56                   	push   esi
c00298b7:	53                   	push   ebx
c00298b8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00298bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00298c0:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c00298c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00298ca:	0f be cb             	movsx  ecx,bl
c00298cd:	75 0b                	jne    c00298da <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00298cf:	0f be 05 60 46 03 c0 	movsx  eax,BYTE PTR ds:0xc0034660
c00298d6:	39 c8                	cmp    eax,ecx
c00298d8:	74 47                	je     c0029921 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00298da:	83 ec 0c             	sub    esp,0xc
c00298dd:	31 d2                	xor    edx,edx
c00298df:	68 a0 03 04 c0       	push   0xc00403a0
c00298e4:	6a 01                	push   0x1
c00298e6:	52                   	push   edx
c00298e7:	56                   	push   esi
c00298e8:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c00298ef:	e8 b2 2d ff ff       	call   c001c6a6 <LogicalDisk::read(unsigned long long, int, void*)>
c00298f4:	83 c4 20             	add    esp,0x20
c00298f7:	85 c0                	test   eax,eax
c00298f9:	75 0e                	jne    c0029909 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00298fb:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c0029901:	88 1d 60 46 03 c0    	mov    BYTE PTR ds:0xc0034660,bl
c0029907:	eb 18                	jmp    c0029921 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0029909:	50                   	push   eax
c002990a:	68 00 08 00 00       	push   0x800
c002990f:	6a 00                	push   0x0
c0029911:	57                   	push   edi
c0029912:	e8 d9 6b fd ff       	call   c00004f0 <memset>
c0029917:	83 c4 10             	add    esp,0x10
c002991a:	b8 01 00 00 00       	mov    eax,0x1
c002991f:	eb 0e                	jmp    c002992f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0029921:	be a0 03 04 c0       	mov    esi,0xc00403a0
c0029926:	b9 00 08 00 00       	mov    ecx,0x800
c002992b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002992d:	31 c0                	xor    eax,eax
c002992f:	5b                   	pop    ebx
c0029930:	5e                   	pop    esi
c0029931:	5f                   	pop    edi
c0029932:	c3                   	ret    
c0029933:	90                   	nop

c0029934 <ISO9660::tryMount(LogicalDisk*, int)>:
c0029934:	53                   	push   ebx
c0029935:	81 ec 0c 08 00 00    	sub    esp,0x80c
c002993b:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c0029945:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c002994c:	8d 58 41             	lea    ebx,[eax+0x41]
c002994f:	0f be db             	movsx  ebx,bl
c0029952:	53                   	push   ebx
c0029953:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029957:	50                   	push   eax
c0029958:	6a 10                	push   0x10
c002995a:	e8 56 ff ff ff       	call   c00298b5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002995f:	83 c4 10             	add    esp,0x10
c0029962:	31 d2                	xor    edx,edx
c0029964:	85 c0                	test   eax,eax
c0029966:	75 33                	jne    c002999b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029968:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002996d:	75 2c                	jne    c002999b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002996f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0029974:	75 25                	jne    c002999b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029976:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c002997b:	75 1e                	jne    c002999b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002997d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0029982:	75 17                	jne    c002999b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029984:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029989:	75 10                	jne    c002999b <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002998b:	83 ec 0c             	sub    esp,0xc
c002998e:	53                   	push   ebx
c002998f:	e8 db d1 fd ff       	call   c0006b6f <init_percd>
c0029994:	83 c4 10             	add    esp,0x10
c0029997:	40                   	inc    eax
c0029998:	0f 95 c2             	setne  dl
c002999b:	81 c4 08 08 00 00    	add    esp,0x808
c00299a1:	88 d0                	mov    al,dl
c00299a3:	5b                   	pop    ebx
c00299a4:	c3                   	ret    
c00299a5:	90                   	nop

c00299a6 <ISO9660::ISO9660()>:
c00299a6:	83 ec 0c             	sub    esp,0xc
c00299a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ad:	83 ec 0c             	sub    esp,0xc
c00299b0:	50                   	push   eax
c00299b1:	e8 c6 06 ff ff       	call   c001a07c <Filesystem::Filesystem()>
c00299b6:	83 c4 10             	add    esp,0x10
c00299b9:	ba 2c 34 03 c0       	mov    edx,0xc003342c
c00299be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c2:	89 10                	mov    DWORD PTR [eax],edx
c00299c4:	e8 b8 d2 fd ff       	call   c0006c81 <fs_iso9660_init>
c00299c9:	90                   	nop
c00299ca:	83 c4 0c             	add    esp,0xc
c00299cd:	c3                   	ret    

c00299ce <SoundCard::beginPlayback()>:
c00299ce:	c7 44 24 04 90 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033490
c00299d6:	e9 c7 67 ff ff       	jmp    c00201a2 <KePanic(char const*)>
c00299db:	90                   	nop

c00299dc <SoundCard::stopPlayback()>:
c00299dc:	c7 44 24 04 90 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033490
c00299e4:	e9 b9 67 ff ff       	jmp    c00201a2 <KePanic(char const*)>
c00299e9:	90                   	nop

c00299ea <SoundCard::SoundCard(char const*)>:
c00299ea:	83 ec 1c             	sub    esp,0x1c
c00299ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299f1:	83 ec 08             	sub    esp,0x8
c00299f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00299f8:	50                   	push   eax
c00299f9:	e8 14 1a ff ff       	call   c001b412 <Device::Device(char const*)>
c00299fe:	83 c4 10             	add    esp,0x10
c0029a01:	ba dc 34 03 c0       	mov    edx,0xc00334dc
c0029a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a0a:	89 10                	mov    DWORD PTR [eax],edx
c0029a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a10:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a1b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0029a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a29:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0029a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a37:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029a41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a45:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029a4f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029a57:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029a5c:	7f 1a                	jg     c0029a78 <SoundCard::SoundCard(char const*)+0x8e>
c0029a5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029a66:	83 c2 54             	add    edx,0x54
c0029a69:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029a71:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029a76:	eb df                	jmp    c0029a57 <SoundCard::SoundCard(char const*)+0x6d>
c0029a78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a7c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029a83:	90                   	nop
c0029a84:	83 c4 1c             	add    esp,0x1c
c0029a87:	c3                   	ret    

c0029a88 <SoundCard::~SoundCard()>:
c0029a88:	83 ec 0c             	sub    esp,0xc
c0029a8b:	ba dc 34 03 c0       	mov    edx,0xc00334dc
c0029a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a94:	89 10                	mov    DWORD PTR [eax],edx
c0029a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9a:	83 ec 0c             	sub    esp,0xc
c0029a9d:	50                   	push   eax
c0029a9e:	e8 0f 17 ff ff       	call   c001b1b2 <Device::~Device()>
c0029aa3:	83 c4 10             	add    esp,0x10
c0029aa6:	90                   	nop
c0029aa7:	83 c4 0c             	add    esp,0xc
c0029aaa:	c3                   	ret    
c0029aab:	90                   	nop

c0029aac <SoundCard::~SoundCard()>:
c0029aac:	83 ec 0c             	sub    esp,0xc
c0029aaf:	83 ec 0c             	sub    esp,0xc
c0029ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ab6:	e8 cd ff ff ff       	call   c0029a88 <SoundCard::~SoundCard()>
c0029abb:	83 c4 10             	add    esp,0x10
c0029abe:	83 ec 08             	sub    esp,0x8
c0029ac1:	68 e8 01 00 00       	push   0x1e8
c0029ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aca:	e8 4d f6 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c0029acf:	83 c4 10             	add    esp,0x10
c0029ad2:	83 c4 0c             	add    esp,0xc
c0029ad5:	c3                   	ret    

c0029ad6 <SoundCard::configureRates(int, int, int)>:
c0029ad6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029ada:	31 c0                	xor    eax,eax
c0029adc:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029ae3:	75 20                	jne    c0029b05 <SoundCard::configureRates(int, int, int)+0x2f>
c0029ae5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029ae9:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029af3:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029afd:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029b03:	b0 01                	mov    al,0x1
c0029b05:	c3                   	ret    

c0029b06 <SoundCard::getSamples16(int, short*)>:
c0029b06:	55                   	push   ebp
c0029b07:	57                   	push   edi
c0029b08:	31 ff                	xor    edi,edi
c0029b0a:	56                   	push   esi
c0029b0b:	53                   	push   ebx
c0029b0c:	31 db                	xor    ebx,ebx
c0029b0e:	83 ec 10             	sub    esp,0x10
c0029b11:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029b15:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b19:	8d 04 36             	lea    eax,[esi+esi*1]
c0029b1c:	50                   	push   eax
c0029b1d:	6a 00                	push   0x0
c0029b1f:	55                   	push   ebp
c0029b20:	e8 cb 69 fd ff       	call   c00004f0 <memset>
c0029b25:	83 c4 10             	add    esp,0x10
c0029b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029b2c:	8b 84 b8 58 01 00 00 	mov    eax,DWORD PTR [eax+edi*4+0x158]
c0029b33:	85 c0                	test   eax,eax
c0029b35:	74 1a                	je     c0029b51 <SoundCard::getSamples16(int, short*)+0x4b>
c0029b37:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b3b:	75 14                	jne    c0029b51 <SoundCard::getSamples16(int, short*)+0x4b>
c0029b3d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029b41:	55                   	push   ebp
c0029b42:	56                   	push   esi
c0029b43:	50                   	push   eax
c0029b44:	e8 f3 02 00 00       	call   c0029e3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029b49:	83 c4 10             	add    esp,0x10
c0029b4c:	39 c3                	cmp    ebx,eax
c0029b4e:	0f 4c d8             	cmovl  ebx,eax
c0029b51:	47                   	inc    edi
c0029b52:	83 ff 20             	cmp    edi,0x20
c0029b55:	75 d1                	jne    c0029b28 <SoundCard::getSamples16(int, short*)+0x22>
c0029b57:	83 c4 0c             	add    esp,0xc
c0029b5a:	89 d8                	mov    eax,ebx
c0029b5c:	5b                   	pop    ebx
c0029b5d:	5e                   	pop    esi
c0029b5e:	5f                   	pop    edi
c0029b5f:	5d                   	pop    ebp
c0029b60:	c3                   	ret    
c0029b61:	90                   	nop

c0029b62 <SoundCard::getSamples32(int, int*)>:
c0029b62:	55                   	push   ebp
c0029b63:	57                   	push   edi
c0029b64:	31 ff                	xor    edi,edi
c0029b66:	56                   	push   esi
c0029b67:	31 f6                	xor    esi,esi
c0029b69:	53                   	push   ebx
c0029b6a:	83 ec 10             	sub    esp,0x10
c0029b6d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029b71:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b75:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029b79:	c1 e0 02             	shl    eax,0x2
c0029b7c:	50                   	push   eax
c0029b7d:	6a 00                	push   0x0
c0029b7f:	55                   	push   ebp
c0029b80:	e8 6b 69 fd ff       	call   c00004f0 <memset>
c0029b85:	83 c4 10             	add    esp,0x10
c0029b88:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029b8f:	85 c0                	test   eax,eax
c0029b91:	74 1a                	je     c0029bad <SoundCard::getSamples32(int, int*)+0x4b>
c0029b93:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b97:	75 14                	jne    c0029bad <SoundCard::getSamples32(int, int*)+0x4b>
c0029b99:	53                   	push   ebx
c0029b9a:	55                   	push   ebp
c0029b9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029b9f:	50                   	push   eax
c0029ba0:	e8 67 03 00 00       	call   c0029f0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029ba5:	83 c4 10             	add    esp,0x10
c0029ba8:	39 c6                	cmp    esi,eax
c0029baa:	0f 4c f0             	cmovl  esi,eax
c0029bad:	47                   	inc    edi
c0029bae:	83 ff 20             	cmp    edi,0x20
c0029bb1:	75 d5                	jne    c0029b88 <SoundCard::getSamples32(int, int*)+0x26>
c0029bb3:	85 f6                	test   esi,esi
c0029bb5:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029bbc:	75 0f                	jne    c0029bcd <SoundCard::getSamples32(int, int*)+0x6b>
c0029bbe:	85 c0                	test   eax,eax
c0029bc0:	74 1b                	je     c0029bdd <SoundCard::getSamples32(int, int*)+0x7b>
c0029bc2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029bc4:	83 ec 0c             	sub    esp,0xc
c0029bc7:	53                   	push   ebx
c0029bc8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029bcb:	eb 0d                	jmp    c0029bda <SoundCard::getSamples32(int, int*)+0x78>
c0029bcd:	85 c0                	test   eax,eax
c0029bcf:	75 0c                	jne    c0029bdd <SoundCard::getSamples32(int, int*)+0x7b>
c0029bd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029bd3:	83 ec 0c             	sub    esp,0xc
c0029bd6:	53                   	push   ebx
c0029bd7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029bda:	83 c4 10             	add    esp,0x10
c0029bdd:	83 c4 0c             	add    esp,0xc
c0029be0:	89 f0                	mov    eax,esi
c0029be2:	5b                   	pop    ebx
c0029be3:	5e                   	pop    esi
c0029be4:	5f                   	pop    edi
c0029be5:	5d                   	pop    ebp
c0029be6:	c3                   	ret    
c0029be7:	90                   	nop

c0029be8 <SoundCard::addChannel(SoundPort*)>:
c0029be8:	83 ec 0c             	sub    esp,0xc
c0029beb:	31 c0                	xor    eax,eax
c0029bed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029bf1:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029bf9:	74 1b                	je     c0029c16 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029bfb:	40                   	inc    eax
c0029bfc:	83 f8 20             	cmp    eax,0x20
c0029bff:	75 f0                	jne    c0029bf1 <SoundCard::addChannel(SoundPort*)+0x9>
c0029c01:	83 ec 0c             	sub    esp,0xc
c0029c04:	68 b5 34 03 c0       	push   0xc00334b5
c0029c09:	e8 94 65 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029c0e:	83 c4 10             	add    esp,0x10
c0029c11:	83 c8 ff             	or     eax,0xffffffff
c0029c14:	eb 0b                	jmp    c0029c21 <SoundCard::addChannel(SoundPort*)+0x39>
c0029c16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029c1a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029c21:	83 c4 0c             	add    esp,0xc
c0029c24:	c3                   	ret    
c0029c25:	90                   	nop

c0029c26 <SoundCard::removeChannel(int)>:
c0029c26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029c2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029c2e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029c39:	c3                   	ret    
c0029c3a:	66 90                	xchg   ax,ax

c0029c3c <SoundPort::SoundPort(int, int, int, int)>:
c0029c3c:	83 ec 0c             	sub    esp,0xc
c0029c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c43:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029c4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c4e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029c5a:	89 10                	mov    DWORD PTR [eax],edx
c0029c5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029c64:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c6b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029c6f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029c72:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029c77:	75 13                	jne    c0029c8c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c7f:	05 a0 0f 00 00       	add    eax,0xfa0
c0029c84:	d1 e0                	shl    eax,1
c0029c86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029c8a:	66 90                	xchg   ax,ax
c0029c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c90:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029c94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c9b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029ca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ca6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029ca9:	c1 e0 02             	shl    eax,0x2
c0029cac:	83 ec 0c             	sub    esp,0xc
c0029caf:	50                   	push   eax
c0029cb0:	e8 2e c7 fe ff       	call   c00163e3 <malloc>
c0029cb5:	83 c4 10             	add    esp,0x10
c0029cb8:	89 c2                	mov    edx,eax
c0029cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cbe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029cc1:	90                   	nop
c0029cc2:	83 c4 0c             	add    esp,0xc
c0029cc5:	c3                   	ret    
c0029cc6:	66 90                	xchg   ax,ax

c0029cc8 <SoundPort::~SoundPort()>:
c0029cc8:	83 ec 0c             	sub    esp,0xc
c0029ccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ccf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029cd2:	85 c0                	test   eax,eax
c0029cd4:	74 1e                	je     c0029cf4 <SoundPort::~SoundPort()+0x2c>
c0029cd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cda:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029cdd:	83 ec 0c             	sub    esp,0xc
c0029ce0:	50                   	push   eax
c0029ce1:	e8 0d c7 fe ff       	call   c00163f3 <free>
c0029ce6:	83 c4 10             	add    esp,0x10
c0029ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ced:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029cf4:	90                   	nop
c0029cf5:	83 c4 0c             	add    esp,0xc
c0029cf8:	c3                   	ret    
c0029cf9:	90                   	nop
c0029cfa:	66 90                	xchg   ax,ax

c0029cfc <SoundPort::unpause()>:
c0029cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d00:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029d04:	c3                   	ret    
c0029d05:	90                   	nop
c0029d06:	66 90                	xchg   ax,ax

c0029d08 <SoundPort::pause()>:
c0029d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d0c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029d10:	c3                   	ret    
c0029d11:	90                   	nop
c0029d12:	66 90                	xchg   ax,ax

c0029d14 <SoundPort::getBufferUsed()>:
c0029d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d18:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029d1b:	c3                   	ret    

c0029d1c <SoundPort::getBufferSize()>:
c0029d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029d20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029d23:	c3                   	ret    

c0029d24 <SoundPort::buffer16(short*, int)>:
c0029d24:	55                   	push   ebp
c0029d25:	57                   	push   edi
c0029d26:	56                   	push   esi
c0029d27:	53                   	push   ebx
c0029d28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029d2c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029d30:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029d33:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029d36:	74 68                	je     c0029da0 <SoundPort::buffer16(short*, int)+0x7c>
c0029d38:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029d3c:	85 c9                	test   ecx,ecx
c0029d3e:	7e 60                	jle    c0029da0 <SoundPort::buffer16(short*, int)+0x7c>
c0029d40:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029d44:	8d 70 01             	lea    esi,[eax+0x1]
c0029d47:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029d4a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029d4d:	c1 e1 0f             	shl    ecx,0xf
c0029d50:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029d53:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d56:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d59:	74 4d                	je     c0029da8 <SoundPort::buffer16(short*, int)+0x84>
c0029d5b:	31 f6                	xor    esi,esi
c0029d5d:	eb 21                	jmp    c0029d80 <SoundPort::buffer16(short*, int)+0x5c>
c0029d5f:	90                   	nop
c0029d60:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029d65:	8d 79 01             	lea    edi,[ecx+0x1]
c0029d68:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029d6b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029d6e:	c1 e3 0f             	shl    ebx,0xf
c0029d71:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029d74:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d77:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d7a:	74 1c                	je     c0029d98 <SoundPort::buffer16(short*, int)+0x74>
c0029d7c:	89 c6                	mov    esi,eax
c0029d7e:	66 90                	xchg   ax,ax
c0029d80:	8d 46 01             	lea    eax,[esi+0x1]
c0029d83:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029d87:	75 d7                	jne    c0029d60 <SoundPort::buffer16(short*, int)+0x3c>
c0029d89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0029d90:	5b                   	pop    ebx
c0029d91:	5e                   	pop    esi
c0029d92:	5f                   	pop    edi
c0029d93:	5d                   	pop    ebp
c0029d94:	c3                   	ret    
c0029d95:	8d 76 00             	lea    esi,[esi+0x0]
c0029d98:	5b                   	pop    ebx
c0029d99:	8d 46 02             	lea    eax,[esi+0x2]
c0029d9c:	5e                   	pop    esi
c0029d9d:	5f                   	pop    edi
c0029d9e:	5d                   	pop    ebp
c0029d9f:	c3                   	ret    
c0029da0:	5b                   	pop    ebx
c0029da1:	31 c0                	xor    eax,eax
c0029da3:	5e                   	pop    esi
c0029da4:	5f                   	pop    edi
c0029da5:	5d                   	pop    ebp
c0029da6:	c3                   	ret    
c0029da7:	90                   	nop
c0029da8:	b8 01 00 00 00       	mov    eax,0x1
c0029dad:	eb e1                	jmp    c0029d90 <SoundPort::buffer16(short*, int)+0x6c>
c0029daf:	90                   	nop

c0029db0 <SoundPort::buffer32(int*, int)>:
c0029db0:	55                   	push   ebp
c0029db1:	57                   	push   edi
c0029db2:	56                   	push   esi
c0029db3:	53                   	push   ebx
c0029db4:	83 ec 04             	sub    esp,0x4
c0029db7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029dbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029dbf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029dc3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029dc6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0029dcc:	74 5a                	je     c0029e28 <SoundPort::buffer32(int*, int)+0x78>
c0029dce:	85 c0                	test   eax,eax
c0029dd0:	7e 56                	jle    c0029e28 <SoundPort::buffer32(int*, int)+0x78>
c0029dd2:	8d 71 01             	lea    esi,[ecx+0x1]
c0029dd5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029dd8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029ddb:	8b 37                	mov    esi,DWORD PTR [edi]
c0029ddd:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029de0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029de3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029de6:	74 4c                	je     c0029e34 <SoundPort::buffer32(int*, int)+0x84>
c0029de8:	31 f6                	xor    esi,esi
c0029dea:	eb 1c                	jmp    c0029e08 <SoundPort::buffer32(int*, int)+0x58>
c0029dec:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029def:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029df2:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029df5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029df8:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029dfc:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029dff:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029e02:	74 18                	je     c0029e1c <SoundPort::buffer32(int*, int)+0x6c>
c0029e04:	89 de                	mov    esi,ebx
c0029e06:	66 90                	xchg   ax,ax
c0029e08:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029e0b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029e0e:	75 dc                	jne    c0029dec <SoundPort::buffer32(int*, int)+0x3c>
c0029e10:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029e13:	90                   	nop
c0029e14:	83 c4 04             	add    esp,0x4
c0029e17:	5b                   	pop    ebx
c0029e18:	5e                   	pop    esi
c0029e19:	5f                   	pop    edi
c0029e1a:	5d                   	pop    ebp
c0029e1b:	c3                   	ret    
c0029e1c:	8d 46 02             	lea    eax,[esi+0x2]
c0029e1f:	83 c4 04             	add    esp,0x4
c0029e22:	5b                   	pop    ebx
c0029e23:	5e                   	pop    esi
c0029e24:	5f                   	pop    edi
c0029e25:	5d                   	pop    ebp
c0029e26:	c3                   	ret    
c0029e27:	90                   	nop
c0029e28:	83 c4 04             	add    esp,0x4
c0029e2b:	31 c0                	xor    eax,eax
c0029e2d:	5b                   	pop    ebx
c0029e2e:	5e                   	pop    esi
c0029e2f:	5f                   	pop    edi
c0029e30:	5d                   	pop    ebp
c0029e31:	c3                   	ret    
c0029e32:	66 90                	xchg   ax,ax
c0029e34:	b8 01 00 00 00       	mov    eax,0x1
c0029e39:	eb d9                	jmp    c0029e14 <SoundPort::buffer32(int*, int)+0x64>
c0029e3b:	90                   	nop

c0029e3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029e3c:	55                   	push   ebp
c0029e3d:	57                   	push   edi
c0029e3e:	56                   	push   esi
c0029e3f:	53                   	push   ebx
c0029e40:	83 ec 0c             	sub    esp,0xc
c0029e43:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029e47:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029e4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0029e4f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0029e53:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029e59:	39 03                	cmp    DWORD PTR [ebx],eax
c0029e5b:	74 13                	je     c0029e70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x34>
c0029e5d:	83 ec 0c             	sub    esp,0xc
c0029e60:	68 08 35 03 c0       	push   0xc0033508
c0029e65:	e8 38 63 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029e6a:	83 c4 10             	add    esp,0x10
c0029e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0029e70:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029e76:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029e79:	74 11                	je     c0029e8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x50>
c0029e7b:	83 ec 0c             	sub    esp,0xc
c0029e7e:	68 47 35 03 c0       	push   0xc0033547
c0029e83:	e8 1a 63 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029e88:	83 c4 10             	add    esp,0x10
c0029e8b:	90                   	nop
c0029e8c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029e92:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029e95:	74 11                	je     c0029ea8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x6c>
c0029e97:	83 ec 0c             	sub    esp,0xc
c0029e9a:	68 47 35 03 c0       	push   0xc0033547
c0029e9f:	e8 fe 62 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029ea4:	83 c4 10             	add    esp,0x10
c0029ea7:	90                   	nop
c0029ea8:	39 73 14             	cmp    DWORD PTR [ebx+0x14],esi
c0029eab:	0f 4e 73 14          	cmovle esi,DWORD PTR [ebx+0x14]
c0029eaf:	85 f6                	test   esi,esi
c0029eb1:	7e 2d                	jle    c0029ee0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c0029eb3:	31 c0                	xor    eax,eax
c0029eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0029eb8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029ebb:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0029ebe:	8d 91 ff 7f 00 00    	lea    edx,[ecx+0x7fff]
c0029ec4:	85 c9                	test   ecx,ecx
c0029ec6:	0f 49 d1             	cmovns edx,ecx
c0029ec9:	66 8b 0c 47          	mov    cx,WORD PTR [edi+eax*2]
c0029ecd:	c1 fa 0f             	sar    edx,0xf
c0029ed0:	01 d1                	add    ecx,edx
c0029ed2:	66 89 0c 47          	mov    WORD PTR [edi+eax*2],cx
c0029ed6:	83 c0 01             	add    eax,0x1
c0029ed9:	39 f0                	cmp    eax,esi
c0029edb:	75 db                	jne    c0029eb8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c0029edd:	8d 76 00             	lea    esi,[esi+0x0]
c0029ee0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029ee3:	83 ec 04             	sub    esp,0x4
c0029ee6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029ee9:	29 f0                	sub    eax,esi
c0029eeb:	c1 e0 02             	shl    eax,0x2
c0029eee:	50                   	push   eax
c0029eef:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029ef2:	50                   	push   eax
c0029ef3:	52                   	push   edx
c0029ef4:	e8 d7 64 fd ff       	call   c00003d0 <memmove>
c0029ef9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029efc:	29 f0                	sub    eax,esi
c0029efe:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029f01:	83 c4 1c             	add    esp,0x1c
c0029f04:	89 f0                	mov    eax,esi
c0029f06:	5b                   	pop    ebx
c0029f07:	5e                   	pop    esi
c0029f08:	5f                   	pop    edi
c0029f09:	5d                   	pop    ebp
c0029f0a:	c3                   	ret    
c0029f0b:	90                   	nop

c0029f0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029f0c:	55                   	push   ebp
c0029f0d:	57                   	push   edi
c0029f0e:	56                   	push   esi
c0029f0f:	53                   	push   ebx
c0029f10:	83 ec 0c             	sub    esp,0xc
c0029f13:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029f17:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029f1b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0029f1f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029f23:	8b 85 e0 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e0]
c0029f29:	39 03                	cmp    DWORD PTR [ebx],eax
c0029f2b:	74 13                	je     c0029f40 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x34>
c0029f2d:	83 ec 0c             	sub    esp,0xc
c0029f30:	68 28 35 03 c0       	push   0xc0033528
c0029f35:	e8 68 62 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029f3a:	83 c4 10             	add    esp,0x10
c0029f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0029f40:	8b 85 dc 01 00 00    	mov    eax,DWORD PTR [ebp+0x1dc]
c0029f46:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029f49:	74 11                	je     c0029f5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x50>
c0029f4b:	83 ec 0c             	sub    esp,0xc
c0029f4e:	68 63 35 03 c0       	push   0xc0033563
c0029f53:	e8 4a 62 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029f58:	83 c4 10             	add    esp,0x10
c0029f5b:	90                   	nop
c0029f5c:	8b 85 e4 01 00 00    	mov    eax,DWORD PTR [ebp+0x1e4]
c0029f62:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029f65:	74 11                	je     c0029f78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x6c>
c0029f67:	83 ec 0c             	sub    esp,0xc
c0029f6a:	68 63 35 03 c0       	push   0xc0033563
c0029f6f:	e8 2e 62 ff ff       	call   c00201a2 <KePanic(char const*)>
c0029f74:	83 c4 10             	add    esp,0x10
c0029f77:	90                   	nop
c0029f78:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
c0029f7b:	0f 4e 7b 14          	cmovle edi,DWORD PTR [ebx+0x14]
c0029f7f:	85 ff                	test   edi,edi
c0029f81:	7e 21                	jle    c0029fa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x98>
c0029f83:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0029f8a:	31 c0                	xor    eax,eax
c0029f8c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029f8f:	8b 2c 06             	mov    ebp,DWORD PTR [esi+eax*1]
c0029f92:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0029f95:	01 d5                	add    ebp,edx
c0029f97:	89 2c 06             	mov    DWORD PTR [esi+eax*1],ebp
c0029f9a:	83 c0 04             	add    eax,0x4
c0029f9d:	39 c1                	cmp    ecx,eax
c0029f9f:	75 eb                	jne    c0029f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x80>
c0029fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0029fa4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029fa7:	83 ec 04             	sub    esp,0x4
c0029faa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029fad:	29 f8                	sub    eax,edi
c0029faf:	c1 e0 02             	shl    eax,0x2
c0029fb2:	50                   	push   eax
c0029fb3:	8d 04 ba             	lea    eax,[edx+edi*4]
c0029fb6:	50                   	push   eax
c0029fb7:	52                   	push   edx
c0029fb8:	e8 13 64 fd ff       	call   c00003d0 <memmove>
c0029fbd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029fc0:	29 f8                	sub    eax,edi
c0029fc2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029fc5:	83 c4 1c             	add    esp,0x1c
c0029fc8:	89 f8                	mov    eax,edi
c0029fca:	5b                   	pop    ebx
c0029fcb:	5e                   	pop    esi
c0029fcc:	5f                   	pop    edi
c0029fcd:	5d                   	pop    ebp
c0029fce:	c3                   	ret    
c0029fcf:	90                   	nop

c0029fd0 <PCI::open(int, int, void*)>:
c0029fd0:	83 ec 18             	sub    esp,0x18
c0029fd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029fd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029fdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0029fe1:	8b 10                	mov    edx,DWORD PTR [eax]
c0029fe3:	50                   	push   eax
c0029fe4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0029fe7:	31 c0                	xor    eax,eax
c0029fe9:	83 c4 1c             	add    esp,0x1c
c0029fec:	c3                   	ret    
c0029fed:	90                   	nop

c0029fee <PCI::close(int, int, void*)>:
c0029fee:	31 c0                	xor    eax,eax
c0029ff0:	c3                   	ret    
c0029ff1:	90                   	nop

c0029ff2 <PCI::PCI()>:
c0029ff2:	83 ec 0c             	sub    esp,0xc
c0029ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ff9:	83 ec 08             	sub    esp,0x8
c0029ffc:	68 7f 35 03 c0       	push   0xc003357f
c002a001:	50                   	push   eax
c002a002:	e8 05 0c ff ff       	call   c001ac0c <Bus::Bus(char const*)>
c002a007:	83 c4 10             	add    esp,0x10
c002a00a:	ba 28 36 03 c0       	mov    edx,0xc0033628
c002a00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a013:	89 10                	mov    DWORD PTR [eax],edx
c002a015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a019:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c002a023:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a027:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c002a02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a030:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a036:	0f b6 d0             	movzx  edx,al
c002a039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a03d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a048:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a04e:	0f b6 d0             	movzx  edx,al
c002a051:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a055:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a05e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a064:	8d 50 01             	lea    edx,[eax+0x1]
c002a067:	88 d1                	mov    cl,dl
c002a069:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a06d:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a073:	0f b6 d0             	movzx  edx,al
c002a076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a07a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a07e:	83 c9 c0             	or     ecx,0xffffffc0
c002a081:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a085:	90                   	nop
c002a086:	83 c4 0c             	add    esp,0xc
c002a089:	c3                   	ret    

c002a08a <PCI::readBAR8(unsigned int, int)>:
c002a08a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a08e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a092:	f6 c2 01             	test   dl,0x1
c002a095:	74 07                	je     c002a09e <PCI::readBAR8(unsigned int, int)+0x14>
c002a097:	83 e2 fc             	and    edx,0xfffffffc
c002a09a:	01 c2                	add    edx,eax
c002a09c:	ec                   	in     al,dx
c002a09d:	c3                   	ret    
c002a09e:	83 e2 f0             	and    edx,0xfffffff0
c002a0a1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a0a4:	c3                   	ret    
c002a0a5:	90                   	nop

c002a0a6 <PCI::readBAR16(unsigned int, int)>:
c002a0a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0ae:	f6 c2 01             	test   dl,0x1
c002a0b1:	74 08                	je     c002a0bb <PCI::readBAR16(unsigned int, int)+0x15>
c002a0b3:	83 e2 fc             	and    edx,0xfffffffc
c002a0b6:	01 c2                	add    edx,eax
c002a0b8:	66 ed                	in     ax,dx
c002a0ba:	c3                   	ret    
c002a0bb:	83 e2 f0             	and    edx,0xfffffff0
c002a0be:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a0c2:	c3                   	ret    
c002a0c3:	90                   	nop

c002a0c4 <PCI::readBAR32(unsigned int, int)>:
c002a0c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0cc:	f6 c2 01             	test   dl,0x1
c002a0cf:	74 07                	je     c002a0d8 <PCI::readBAR32(unsigned int, int)+0x14>
c002a0d1:	83 e2 fc             	and    edx,0xfffffffc
c002a0d4:	01 c2                	add    edx,eax
c002a0d6:	ed                   	in     eax,dx
c002a0d7:	c3                   	ret    
c002a0d8:	83 e2 f0             	and    edx,0xfffffff0
c002a0db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a0de:	c3                   	ret    
c002a0df:	90                   	nop

c002a0e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a0e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0ec:	f6 c2 01             	test   dl,0x1
c002a0ef:	74 07                	je     c002a0f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a0f1:	83 e2 fc             	and    edx,0xfffffffc
c002a0f4:	01 ca                	add    edx,ecx
c002a0f6:	ee                   	out    dx,al
c002a0f7:	c3                   	ret    
c002a0f8:	83 e2 f0             	and    edx,0xfffffff0
c002a0fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a0fe:	c3                   	ret    
c002a0ff:	90                   	nop

c002a100 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a100:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a104:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a10c:	f6 c2 01             	test   dl,0x1
c002a10f:	74 08                	je     c002a119 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a111:	83 e2 fc             	and    edx,0xfffffffc
c002a114:	01 ca                	add    edx,ecx
c002a116:	66 ef                	out    dx,ax
c002a118:	c3                   	ret    
c002a119:	83 e2 f0             	and    edx,0xfffffff0
c002a11c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a120:	c3                   	ret    
c002a121:	90                   	nop

c002a122 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a12a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a12e:	f6 c2 01             	test   dl,0x1
c002a131:	74 07                	je     c002a13a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a133:	83 e2 fc             	and    edx,0xfffffffc
c002a136:	01 ca                	add    edx,ecx
c002a138:	ef                   	out    dx,eax
c002a139:	c3                   	ret    
c002a13a:	83 e2 f0             	and    edx,0xfffffff0
c002a13d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a140:	c3                   	ret    
c002a141:	90                   	nop

c002a142 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a142:	55                   	push   ebp
c002a143:	57                   	push   edi
c002a144:	56                   	push   esi
c002a145:	53                   	push   ebx
c002a146:	83 ec 0c             	sub    esp,0xc
c002a149:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a14e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a152:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a156:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a15a:	83 fe 07             	cmp    esi,0x7
c002a15d:	76 10                	jbe    c002a16f <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a15f:	83 ec 0c             	sub    esp,0xc
c002a162:	68 87 35 03 c0       	push   0xc0033587
c002a167:	e8 36 60 ff ff       	call   c00201a2 <KePanic(char const*)>
c002a16c:	83 c4 10             	add    esp,0x10
c002a16f:	0f b6 db             	movzx  ebx,bl
c002a172:	83 fb 0f             	cmp    ebx,0xf
c002a175:	76 10                	jbe    c002a187 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a177:	83 ec 0c             	sub    esp,0xc
c002a17a:	68 b7 35 03 c0       	push   0xc00335b7
c002a17f:	e8 1e 60 ff ff       	call   c00201a2 <KePanic(char const*)>
c002a184:	83 c4 10             	add    esp,0x10
c002a187:	8d 04 36             	lea    eax,[esi+esi*1]
c002a18a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a18f:	83 c8 f0             	or     eax,0xfffffff0
c002a192:	ee                   	out    dx,al
c002a193:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a198:	89 e8                	mov    eax,ebp
c002a19a:	ee                   	out    dx,al
c002a19b:	89 f9                	mov    ecx,edi
c002a19d:	89 d8                	mov    eax,ebx
c002a19f:	0f b6 d9             	movzx  ebx,cl
c002a1a2:	83 c4 0c             	add    esp,0xc
c002a1a5:	c1 e0 08             	shl    eax,0x8
c002a1a8:	83 e3 fc             	and    ebx,0xfffffffc
c002a1ab:	09 d8                	or     eax,ebx
c002a1ad:	5b                   	pop    ebx
c002a1ae:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a1b3:	5e                   	pop    esi
c002a1b4:	5f                   	pop    edi
c002a1b5:	5d                   	pop    ebp
c002a1b6:	c3                   	ret    
c002a1b7:	90                   	nop

c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a1b8:	57                   	push   edi
c002a1b9:	56                   	push   esi
c002a1ba:	53                   	push   ebx
c002a1bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a1bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a1c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a1c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a1cb:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a1d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a1d5:	83 ff 01             	cmp    edi,0x1
c002a1d8:	75 3f                	jne    c002a219 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a1da:	89 de                	mov    esi,ebx
c002a1dc:	0f b6 c0             	movzx  eax,al
c002a1df:	c1 e0 10             	shl    eax,0x10
c002a1e2:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a1e8:	0f b6 c9             	movzx  ecx,cl
c002a1eb:	09 f0                	or     eax,esi
c002a1ed:	c1 e1 08             	shl    ecx,0x8
c002a1f0:	0f b6 d2             	movzx  edx,dl
c002a1f3:	c1 e2 0b             	shl    edx,0xb
c002a1f6:	09 c8                	or     eax,ecx
c002a1f8:	09 d0                	or     eax,edx
c002a1fa:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a1ff:	0d 00 00 00 80       	or     eax,0x80000000
c002a204:	ef                   	out    dx,eax
c002a205:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a20a:	ed                   	in     eax,dx
c002a20b:	83 e3 02             	and    ebx,0x2
c002a20e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a215:	d3 e8                	shr    eax,cl
c002a217:	eb 44                	jmp    c002a25d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a219:	83 ff 02             	cmp    edi,0x2
c002a21c:	75 2d                	jne    c002a24b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a21e:	83 ec 0c             	sub    esp,0xc
c002a221:	0f b6 fb             	movzx  edi,bl
c002a224:	57                   	push   edi
c002a225:	0f b6 c9             	movzx  ecx,cl
c002a228:	51                   	push   ecx
c002a229:	0f b6 d2             	movzx  edx,dl
c002a22c:	52                   	push   edx
c002a22d:	0f b6 c0             	movzx  eax,al
c002a230:	50                   	push   eax
c002a231:	56                   	push   esi
c002a232:	e8 0b ff ff ff       	call   c002a142 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a237:	89 c2                	mov    edx,eax
c002a239:	ed                   	in     eax,dx
c002a23a:	83 e3 02             	and    ebx,0x2
c002a23d:	83 c4 20             	add    esp,0x20
c002a240:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a247:	d3 e8                	shr    eax,cl
c002a249:	eb 12                	jmp    c002a25d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a24b:	83 ec 0c             	sub    esp,0xc
c002a24e:	68 e7 35 03 c0       	push   0xc00335e7
c002a253:	e8 4a 5f ff ff       	call   c00201a2 <KePanic(char const*)>
c002a258:	83 c4 10             	add    esp,0x10
c002a25b:	31 c0                	xor    eax,eax
c002a25d:	5b                   	pop    ebx
c002a25e:	5e                   	pop    esi
c002a25f:	5f                   	pop    edi
c002a260:	c3                   	ret    
c002a261:	90                   	nop

c002a262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a262:	83 ec 18             	sub    esp,0x18
c002a265:	6a 00                	push   0x0
c002a267:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a26c:	50                   	push   eax
c002a26d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a272:	50                   	push   eax
c002a273:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a278:	50                   	push   eax
c002a279:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a27d:	e8 36 ff ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a282:	83 c4 2c             	add    esp,0x2c
c002a285:	c3                   	ret    

c002a286 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a286:	83 ec 18             	sub    esp,0x18
c002a289:	6a 0e                	push   0xe
c002a28b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a290:	50                   	push   eax
c002a291:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a296:	50                   	push   eax
c002a297:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a29c:	50                   	push   eax
c002a29d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a2a1:	e8 12 ff ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2a6:	83 c4 2c             	add    esp,0x2c
c002a2a9:	0f b6 c0             	movzx  eax,al
c002a2ac:	c3                   	ret    
c002a2ad:	90                   	nop

c002a2ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a2ae:	55                   	push   ebp
c002a2af:	57                   	push   edi
c002a2b0:	56                   	push   esi
c002a2b1:	53                   	push   ebx
c002a2b2:	83 ec 18             	sub    esp,0x18
c002a2b5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a2ba:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a2bf:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a2c4:	6a 0a                	push   0xa
c002a2c6:	56                   	push   esi
c002a2c7:	55                   	push   ebp
c002a2c8:	57                   	push   edi
c002a2c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a2cd:	e8 e6 fe ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2d2:	83 c4 14             	add    esp,0x14
c002a2d5:	6a 0a                	push   0xa
c002a2d7:	56                   	push   esi
c002a2d8:	55                   	push   ebp
c002a2d9:	57                   	push   edi
c002a2da:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a2de:	89 c3                	mov    ebx,eax
c002a2e0:	0f b6 db             	movzx  ebx,bl
c002a2e3:	e8 d0 fe ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2e8:	83 c4 2c             	add    esp,0x2c
c002a2eb:	25 00 ff 00 00       	and    eax,0xff00
c002a2f0:	09 d8                	or     eax,ebx
c002a2f2:	5b                   	pop    ebx
c002a2f3:	5e                   	pop    esi
c002a2f4:	5f                   	pop    edi
c002a2f5:	5d                   	pop    ebp
c002a2f6:	c3                   	ret    
c002a2f7:	90                   	nop

c002a2f8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a2f8:	83 ec 18             	sub    esp,0x18
c002a2fb:	6a 08                	push   0x8
c002a2fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a302:	50                   	push   eax
c002a303:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a308:	50                   	push   eax
c002a309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a30e:	50                   	push   eax
c002a30f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a313:	e8 a0 fe ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a318:	83 c4 2c             	add    esp,0x2c
c002a31b:	0f b6 c4             	movzx  eax,ah
c002a31e:	c3                   	ret    
c002a31f:	90                   	nop

c002a320 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a320:	83 ec 18             	sub    esp,0x18
c002a323:	6a 08                	push   0x8
c002a325:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a32a:	50                   	push   eax
c002a32b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a330:	50                   	push   eax
c002a331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a336:	50                   	push   eax
c002a337:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a33b:	e8 78 fe ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a340:	83 c4 2c             	add    esp,0x2c
c002a343:	c3                   	ret    

c002a344 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a344:	83 ec 18             	sub    esp,0x18
c002a347:	6a 3c                	push   0x3c
c002a349:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a34e:	50                   	push   eax
c002a34f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a354:	50                   	push   eax
c002a355:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a35a:	50                   	push   eax
c002a35b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a35f:	e8 54 fe ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a364:	83 c4 2c             	add    esp,0x2c
c002a367:	c3                   	ret    

c002a368 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a368:	83 ec 18             	sub    esp,0x18
c002a36b:	6a 18                	push   0x18
c002a36d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a372:	50                   	push   eax
c002a373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a378:	50                   	push   eax
c002a379:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a37e:	50                   	push   eax
c002a37f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a383:	e8 30 fe ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a388:	83 c4 2c             	add    esp,0x2c
c002a38b:	0f b6 c4             	movzx  eax,ah
c002a38e:	c3                   	ret    
c002a38f:	90                   	nop

c002a390 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a390:	55                   	push   ebp
c002a391:	57                   	push   edi
c002a392:	56                   	push   esi
c002a393:	53                   	push   ebx
c002a394:	83 ec 28             	sub    esp,0x28
c002a397:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a39b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a3a0:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a3a5:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a3aa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a3b1:	8d 43 12             	lea    eax,[ebx+0x12]
c002a3b4:	83 c3 10             	add    ebx,0x10
c002a3b7:	0f b6 c0             	movzx  eax,al
c002a3ba:	0f b6 db             	movzx  ebx,bl
c002a3bd:	50                   	push   eax
c002a3be:	51                   	push   ecx
c002a3bf:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a3c3:	57                   	push   edi
c002a3c4:	55                   	push   ebp
c002a3c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a3c9:	e8 ea fd ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3ce:	83 c4 14             	add    esp,0x14
c002a3d1:	53                   	push   ebx
c002a3d2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a3d6:	51                   	push   ecx
c002a3d7:	89 c6                	mov    esi,eax
c002a3d9:	57                   	push   edi
c002a3da:	55                   	push   ebp
c002a3db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a3df:	c1 e6 10             	shl    esi,0x10
c002a3e2:	e8 d1 fd ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3e7:	83 c4 3c             	add    esp,0x3c
c002a3ea:	5b                   	pop    ebx
c002a3eb:	0f b7 c0             	movzx  eax,ax
c002a3ee:	09 f0                	or     eax,esi
c002a3f0:	5e                   	pop    esi
c002a3f1:	5f                   	pop    edi
c002a3f2:	5d                   	pop    ebp
c002a3f3:	c3                   	ret    

c002a3f4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a3f4:	55                   	push   ebp
c002a3f5:	57                   	push   edi
c002a3f6:	56                   	push   esi
c002a3f7:	53                   	push   ebx
c002a3f8:	83 ec 0c             	sub    esp,0xc
c002a3fb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002a3ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a403:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a407:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c002a40b:	8b 8d 58 01 00 00    	mov    ecx,DWORD PTR [ebp+0x158]
c002a411:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a415:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a419:	83 f9 01             	cmp    ecx,0x1
c002a41c:	75 5d                	jne    c002a47b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x87>
c002a41e:	0f b6 c8             	movzx  ecx,al
c002a421:	89 f0                	mov    eax,esi
c002a423:	25 fc 00 00 00       	and    eax,0xfc
c002a428:	0f b6 d2             	movzx  edx,dl
c002a42b:	c1 e1 10             	shl    ecx,0x10
c002a42e:	c1 e2 0b             	shl    edx,0xb
c002a431:	09 c1                	or     ecx,eax
c002a433:	89 f8                	mov    eax,edi
c002a435:	0f b6 f8             	movzx  edi,al
c002a438:	c1 e7 08             	shl    edi,0x8
c002a43b:	09 f9                	or     ecx,edi
c002a43d:	09 d1                	or     ecx,edx
c002a43f:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a444:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a44a:	89 c8                	mov    eax,ecx
c002a44c:	ef                   	out    dx,eax
c002a44d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a452:	ed                   	in     eax,dx
c002a453:	83 e6 02             	and    esi,0x2
c002a456:	0f b7 db             	movzx  ebx,bx
c002a459:	74 0a                	je     c002a465 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x71>
c002a45b:	c1 e3 10             	shl    ebx,0x10
c002a45e:	0f b7 d0             	movzx  edx,ax
c002a461:	09 d3                	or     ebx,edx
c002a463:	eb 05                	jmp    c002a46a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x76>
c002a465:	66 31 c0             	xor    ax,ax
c002a468:	09 c3                	or     ebx,eax
c002a46a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a46f:	89 c8                	mov    eax,ecx
c002a471:	ef                   	out    dx,eax
c002a472:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a477:	89 d8                	mov    eax,ebx
c002a479:	eb 41                	jmp    c002a4bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a47b:	83 f9 02             	cmp    ecx,0x2
c002a47e:	75 45                	jne    c002a4c5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd1>
c002a480:	89 f1                	mov    ecx,esi
c002a482:	83 ec 0c             	sub    esp,0xc
c002a485:	0f b6 f1             	movzx  esi,cl
c002a488:	89 f9                	mov    ecx,edi
c002a48a:	56                   	push   esi
c002a48b:	0f b6 f9             	movzx  edi,cl
c002a48e:	57                   	push   edi
c002a48f:	0f b6 d2             	movzx  edx,dl
c002a492:	52                   	push   edx
c002a493:	0f b6 c0             	movzx  eax,al
c002a496:	50                   	push   eax
c002a497:	55                   	push   ebp
c002a498:	e8 a5 fc ff ff       	call   c002a142 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a49d:	89 c2                	mov    edx,eax
c002a49f:	ed                   	in     eax,dx
c002a4a0:	83 c4 20             	add    esp,0x20
c002a4a3:	f6 c2 02             	test   dl,0x2
c002a4a6:	0f b7 db             	movzx  ebx,bx
c002a4a9:	74 0c                	je     c002a4b7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc3>
c002a4ab:	0f b7 c8             	movzx  ecx,ax
c002a4ae:	89 d8                	mov    eax,ebx
c002a4b0:	c1 e0 10             	shl    eax,0x10
c002a4b3:	09 c8                	or     eax,ecx
c002a4b5:	eb 05                	jmp    c002a4bc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc8>
c002a4b7:	66 31 c0             	xor    ax,ax
c002a4ba:	09 d8                	or     eax,ebx
c002a4bc:	ef                   	out    dx,eax
c002a4bd:	83 c4 0c             	add    esp,0xc
c002a4c0:	5b                   	pop    ebx
c002a4c1:	5e                   	pop    esi
c002a4c2:	5f                   	pop    edi
c002a4c3:	5d                   	pop    ebp
c002a4c4:	c3                   	ret    
c002a4c5:	c7 44 24 20 e7 35 03 c0 	mov    DWORD PTR [esp+0x20],0xc00335e7
c002a4cd:	83 c4 0c             	add    esp,0xc
c002a4d0:	5b                   	pop    ebx
c002a4d1:	5e                   	pop    esi
c002a4d2:	5f                   	pop    edi
c002a4d3:	5d                   	pop    ebp
c002a4d4:	e9 c9 5c ff ff       	jmp    c00201a2 <KePanic(char const*)>
c002a4d9:	90                   	nop

c002a4da <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a4da:	55                   	push   ebp
c002a4db:	57                   	push   edi
c002a4dc:	56                   	push   esi
c002a4dd:	53                   	push   ebx
c002a4de:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a4e4:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a4eb:	8b b4 24 84 01 00 00 	mov    esi,DWORD PTR [esp+0x184]
c002a4f2:	0f 85 bd 00 00 00    	jne    c002a5b5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a4f8:	83 ec 0c             	sub    esp,0xc
c002a4fb:	68 14 01 00 00       	push   0x114
c002a500:	e8 de be fe ff       	call   c00163e3 <malloc>
c002a505:	83 c4 0c             	add    esp,0xc
c002a508:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a50e:	68 ed 35 03 c0       	push   0xc00335ed
c002a513:	50                   	push   eax
c002a514:	89 c3                	mov    ebx,eax
c002a516:	e8 17 ff fe ff       	call   c001a432 <File::File(char const*, Process*)>
c002a51b:	83 c4 10             	add    esp,0x10
c002a51e:	85 db                	test   ebx,ebx
c002a520:	0f 84 6b 02 00 00    	je     c002a791 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a526:	57                   	push   edi
c002a527:	57                   	push   edi
c002a528:	6a 01                	push   0x1
c002a52a:	53                   	push   ebx
c002a52b:	e8 20 ff fe ff       	call   c001a450 <File::open(FileOpenMode)>
c002a530:	83 c4 10             	add    esp,0x10
c002a533:	85 c0                	test   eax,eax
c002a535:	0f 85 56 02 00 00    	jne    c002a791 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a53b:	52                   	push   edx
c002a53c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a540:	50                   	push   eax
c002a541:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a545:	50                   	push   eax
c002a546:	53                   	push   ebx
c002a547:	e8 06 02 ff ff       	call   c001a752 <File::stat(unsigned long long*, bool*)>
c002a54c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a550:	40                   	inc    eax
c002a551:	89 04 24             	mov    DWORD PTR [esp],eax
c002a554:	e8 8a be fe ff       	call   c00163e3 <malloc>
c002a559:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a55d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a561:	59                   	pop    ecx
c002a562:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a567:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a569:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a56d:	51                   	push   ecx
c002a56e:	50                   	push   eax
c002a56f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a573:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a577:	53                   	push   ebx
c002a578:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a57b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a57f:	83 c4 20             	add    esp,0x20
c002a582:	89 c8                	mov    eax,ecx
c002a584:	99                   	cdq    
c002a585:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a589:	0f 85 02 02 00 00    	jne    c002a791 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a58f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a593:	0f 85 f8 01 00 00    	jne    c002a791 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a599:	83 ec 0c             	sub    esp,0xc
c002a59c:	53                   	push   ebx
c002a59d:	e8 0c ff fe ff       	call   c001a4ae <File::close()>
c002a5a2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a5a6:	83 c4 10             	add    esp,0x10
c002a5a9:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a5b0:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a5b5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a5bd:	31 c9                	xor    ecx,ecx
c002a5bf:	66 c7 44 24 10 00 00 	mov    WORD PTR [esp+0x10],0x0
c002a5c6:	8b 2d a4 0b 04 c0    	mov    ebp,DWORD PTR ds:0xc0040ba4
c002a5cc:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a5d3:	8b 15 a8 0b 04 c0    	mov    edx,DWORD PTR ds:0xc0040ba8
c002a5d9:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a5de:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a5e6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a5eb:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a5f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a5f7:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a5ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a603:	39 cd                	cmp    ebp,ecx
c002a605:	0f 8e 86 01 00 00    	jle    c002a791 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b7>
c002a60b:	8a 04 0a             	mov    al,BYTE PTR [edx+ecx*1]
c002a60e:	d4 40                	aam    0x40
c002a610:	d5 39                	aad    0x39
c002a612:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a616:	8a 44 0a 01          	mov    al,BYTE PTR [edx+ecx*1+0x1]
c002a61a:	d4 40                	aam    0x40
c002a61c:	d5 39                	aad    0x39
c002a61e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a622:	8a 44 0a 03          	mov    al,BYTE PTR [edx+ecx*1+0x3]
c002a626:	d4 40                	aam    0x40
c002a628:	d5 39                	aad    0x39
c002a62a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a62e:	8a 44 0a 04          	mov    al,BYTE PTR [edx+ecx*1+0x4]
c002a632:	d4 40                	aam    0x40
c002a634:	d5 39                	aad    0x39
c002a636:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a63a:	8a 44 0a 06          	mov    al,BYTE PTR [edx+ecx*1+0x6]
c002a63e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a642:	3c 56                	cmp    al,0x56
c002a644:	74 47                	je     c002a68d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b3>
c002a646:	d4 40                	aam    0x40
c002a648:	d5 39                	aad    0x39
c002a64a:	8d 58 d0             	lea    ebx,[eax-0x30]
c002a64d:	8a 44 0a 07          	mov    al,BYTE PTR [edx+ecx*1+0x7]
c002a651:	0f b6 db             	movzx  ebx,bl
c002a654:	c1 e3 04             	shl    ebx,0x4
c002a657:	d4 40                	aam    0x40
c002a659:	d5 39                	aad    0x39
c002a65b:	83 e8 30             	sub    eax,0x30
c002a65e:	0f b6 c0             	movzx  eax,al
c002a661:	09 c3                	or     ebx,eax
c002a663:	8a 44 0a 08          	mov    al,BYTE PTR [edx+ecx*1+0x8]
c002a667:	c1 e3 04             	shl    ebx,0x4
c002a66a:	d4 40                	aam    0x40
c002a66c:	d5 39                	aad    0x39
c002a66e:	83 e8 30             	sub    eax,0x30
c002a671:	0f b6 c0             	movzx  eax,al
c002a674:	09 c3                	or     ebx,eax
c002a676:	8a 44 0a 09          	mov    al,BYTE PTR [edx+ecx*1+0x9]
c002a67a:	c1 e3 04             	shl    ebx,0x4
c002a67d:	d4 40                	aam    0x40
c002a67f:	d5 39                	aad    0x39
c002a681:	83 e8 30             	sub    eax,0x30
c002a684:	0f b6 c0             	movzx  eax,al
c002a687:	09 c3                	or     ebx,eax
c002a689:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c002a68d:	8a 5c 0a 0b          	mov    bl,BYTE PTR [edx+ecx*1+0xb]
c002a691:	80 fb 58             	cmp    bl,0x58
c002a694:	74 49                	je     c002a6df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x205>
c002a696:	88 d8                	mov    al,bl
c002a698:	d4 40                	aam    0x40
c002a69a:	d5 39                	aad    0x39
c002a69c:	83 e8 30             	sub    eax,0x30
c002a69f:	0f b6 f8             	movzx  edi,al
c002a6a2:	8a 44 0a 0c          	mov    al,BYTE PTR [edx+ecx*1+0xc]
c002a6a6:	c1 e7 04             	shl    edi,0x4
c002a6a9:	d4 40                	aam    0x40
c002a6ab:	d5 39                	aad    0x39
c002a6ad:	83 e8 30             	sub    eax,0x30
c002a6b0:	0f b6 c0             	movzx  eax,al
c002a6b3:	09 c7                	or     edi,eax
c002a6b5:	8a 44 0a 0d          	mov    al,BYTE PTR [edx+ecx*1+0xd]
c002a6b9:	c1 e7 04             	shl    edi,0x4
c002a6bc:	d4 40                	aam    0x40
c002a6be:	d5 39                	aad    0x39
c002a6c0:	83 e8 30             	sub    eax,0x30
c002a6c3:	0f b6 c0             	movzx  eax,al
c002a6c6:	09 c7                	or     edi,eax
c002a6c8:	8a 44 0a 0e          	mov    al,BYTE PTR [edx+ecx*1+0xe]
c002a6cc:	c1 e7 04             	shl    edi,0x4
c002a6cf:	d4 40                	aam    0x40
c002a6d1:	d5 39                	aad    0x39
c002a6d3:	83 e8 30             	sub    eax,0x30
c002a6d6:	0f b6 c0             	movzx  eax,al
c002a6d9:	09 c7                	or     edi,eax
c002a6db:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c002a6df:	8d 41 10             	lea    eax,[ecx+0x10]
c002a6e2:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a6e6:	0f be 0c 02          	movsx  ecx,BYTE PTR [edx+eax*1]
c002a6ea:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a6ee:	83 f9 0a             	cmp    ecx,0xa
c002a6f1:	74 07                	je     c002a6fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x220>
c002a6f3:	47                   	inc    edi
c002a6f4:	39 c5                	cmp    ebp,eax
c002a6f6:	75 16                	jne    c002a70e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x234>
c002a6f8:	89 e8                	mov    eax,ebp
c002a6fa:	83 f9 0a             	cmp    ecx,0xa
c002a6fd:	0f 94 c1             	sete   cl
c002a700:	0f b6 c9             	movzx  ecx,cl
c002a703:	01 c1                	add    ecx,eax
c002a705:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a70a:	75 0f                	jne    c002a71b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x241>
c002a70c:	eb 1c                	jmp    c002a72a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x250>
c002a70e:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a711:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c002a715:	40                   	inc    eax
c002a716:	88 4f ff             	mov    BYTE PTR [edi-0x1],cl
c002a719:	eb cb                	jmp    c002a6e6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20c>
c002a71b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002a71f:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a724:	0f 85 d9 fe ff ff    	jne    c002a603 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a72a:	80 fb 58             	cmp    bl,0x58
c002a72d:	74 10                	je     c002a73f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002a72f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a734:	66 39 7c 24 10       	cmp    WORD PTR [esp+0x10],di
c002a739:	0f 85 c4 fe ff ff    	jne    c002a603 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a73f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a743:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002a747:	83 e8 30             	sub    eax,0x30
c002a74a:	c1 e0 04             	shl    eax,0x4
c002a74d:	83 eb 30             	sub    ebx,0x30
c002a750:	09 d8                	or     eax,ebx
c002a752:	0f b6 c0             	movzx  eax,al
c002a755:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a759:	0f 85 a4 fe ff ff    	jne    c002a603 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a75f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a763:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c002a767:	83 e8 30             	sub    eax,0x30
c002a76a:	c1 e0 04             	shl    eax,0x4
c002a76d:	83 eb 30             	sub    ebx,0x30
c002a770:	09 d8                	or     eax,ebx
c002a772:	0f b6 c0             	movzx  eax,al
c002a775:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a779:	0f 85 84 fe ff ff    	jne    c002a603 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x129>
c002a77f:	50                   	push   eax
c002a780:	50                   	push   eax
c002a781:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a785:	50                   	push   eax
c002a786:	56                   	push   esi
c002a787:	e8 c4 5e fd ff       	call   c0000650 <strcpy>
c002a78c:	83 c4 10             	add    esp,0x10
c002a78f:	eb 05                	jmp    c002a796 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2bc>
c002a791:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002a794:	31 f6                	xor    esi,esi
c002a796:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a79c:	89 f0                	mov    eax,esi
c002a79e:	5b                   	pop    ebx
c002a79f:	5e                   	pop    esi
c002a7a0:	5f                   	pop    edi
c002a7a1:	5d                   	pop    ebp
c002a7a2:	c3                   	ret    
c002a7a3:	90                   	nop

c002a7a4 <PCI::checkBus(unsigned char)>:
c002a7a4:	56                   	push   esi
c002a7a5:	53                   	push   ebx
c002a7a6:	31 db                	xor    ebx,ebx
c002a7a8:	51                   	push   ecx
c002a7a9:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a7ae:	52                   	push   edx
c002a7af:	53                   	push   ebx
c002a7b0:	43                   	inc    ebx
c002a7b1:	56                   	push   esi
c002a7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a7b6:	e8 0f 03 00 00       	call   c002aaca <PCI::checkDevice(unsigned char, unsigned char)>
c002a7bb:	83 c4 10             	add    esp,0x10
c002a7be:	83 fb 20             	cmp    ebx,0x20
c002a7c1:	75 eb                	jne    c002a7ae <PCI::checkBus(unsigned char)+0xa>
c002a7c3:	58                   	pop    eax
c002a7c4:	5b                   	pop    ebx
c002a7c5:	5e                   	pop    esi
c002a7c6:	c3                   	ret    
c002a7c7:	90                   	nop

c002a7c8 <PCI::foundDevice(PCIDeviceInfo)>:
c002a7c8:	55                   	push   ebp
c002a7c9:	57                   	push   edi
c002a7ca:	56                   	push   esi
c002a7cb:	53                   	push   ebx
c002a7cc:	83 ec 1c             	sub    esp,0x1c
c002a7cf:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a7d4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a7d8:	3d ff ff 00 00       	cmp    eax,0xffff
c002a7dd:	0f 84 63 01 00 00    	je     c002a946 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a7e3:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a7e8:	66 3d 06 04          	cmp    ax,0x406
c002a7ec:	75 2c                	jne    c002a81a <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a7ee:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a7f3:	50                   	push   eax
c002a7f4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a7f9:	50                   	push   eax
c002a7fa:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a7ff:	50                   	push   eax
c002a800:	53                   	push   ebx
c002a801:	e8 62 fb ff ff       	call   c002a368 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a806:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a80a:	0f b6 c0             	movzx  eax,al
c002a80d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a811:	83 c4 2c             	add    esp,0x2c
c002a814:	5b                   	pop    ebx
c002a815:	5e                   	pop    esi
c002a816:	5f                   	pop    edi
c002a817:	5d                   	pop    ebp
c002a818:	eb 8a                	jmp    c002a7a4 <PCI::checkBus(unsigned char)>
c002a81a:	0f b6 4c 24 54       	movzx  ecx,BYTE PTR [esp+0x54]
c002a81f:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a825:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002a829:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a82d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002a831:	85 d2                	test   edx,edx
c002a833:	74 34                	je     c002a869 <PCI::foundDevice(PCIDeviceInfo)+0xa1>
c002a835:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a838:	85 c9                	test   ecx,ecx
c002a83a:	74 29                	je     c002a865 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a83c:	8b a9 18 01 00 00    	mov    ebp,DWORD PTR [ecx+0x118]
c002a842:	31 f5                	xor    ebp,esi
c002a844:	81 e5 ff 00 ff ff    	and    ebp,0xffff00ff
c002a84a:	75 19                	jne    c002a865 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a84c:	39 b9 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],edi
c002a852:	75 11                	jne    c002a865 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002a854:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a85b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c002a85f:	0f 84 e1 00 00 00    	je     c002a946 <PCI::foundDevice(PCIDeviceInfo)+0x17e>
c002a865:	8b 12                	mov    edx,DWORD PTR [edx]
c002a867:	eb c8                	jmp    c002a831 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a869:	3d 01 06 00 00       	cmp    eax,0x601
c002a86e:	75 19                	jne    c002a889 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002a870:	83 ec 0c             	sub    esp,0xc
c002a873:	68 64 01 00 00       	push   0x164
c002a878:	e8 66 bb fe ff       	call   c00163e3 <malloc>
c002a87d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a880:	89 c5                	mov    ebp,eax
c002a882:	e8 ab 0e 00 00       	call   c002b732 <SATABus::SATABus()>
c002a887:	eb 1e                	jmp    c002a8a7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c002a889:	3d 01 01 00 00       	cmp    eax,0x101
c002a88e:	75 62                	jne    c002a8f2 <PCI::foundDevice(PCIDeviceInfo)+0x12a>
c002a890:	83 ec 0c             	sub    esp,0xc
c002a893:	68 70 02 00 00       	push   0x270
c002a898:	e8 46 bb fe ff       	call   c00163e3 <malloc>
c002a89d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a8a0:	89 c5                	mov    ebp,eax
c002a8a2:	e8 f3 02 00 00       	call   c002ab9a <IDE::IDE()>
c002a8a7:	58                   	pop    eax
c002a8a8:	5a                   	pop    edx
c002a8a9:	55                   	push   ebp
c002a8aa:	53                   	push   ebx
c002a8ab:	e8 00 0a ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c002a8b0:	83 ec 1c             	sub    esp,0x1c
c002a8b3:	b9 09 00 00 00       	mov    ecx,0x9
c002a8b8:	fc                   	cld    
c002a8b9:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a8bd:	89 e7                	mov    edi,esp
c002a8bf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a8c1:	55                   	push   ebp
c002a8c2:	e8 2f 09 ff ff       	call   c001b1f6 <Device::preOpenPCI(PCIDeviceInfo)>
c002a8c7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a8ca:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a8ce:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a8d6:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a8de:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a8e6:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a8e9:	83 c4 4c             	add    esp,0x4c
c002a8ec:	5b                   	pop    ebx
c002a8ed:	5e                   	pop    esi
c002a8ee:	5f                   	pop    edi
c002a8ef:	5d                   	pop    ebp
c002a8f0:	ff e0                	jmp    eax
c002a8f2:	83 ec 0c             	sub    esp,0xc
c002a8f5:	68 58 01 00 00       	push   0x158
c002a8fa:	e8 e4 ba fe ff       	call   c00163e3 <malloc>
c002a8ff:	5a                   	pop    edx
c002a900:	59                   	pop    ecx
c002a901:	68 06 36 03 c0       	push   0xc0033606
c002a906:	50                   	push   eax
c002a907:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002a90b:	e8 54 0c ff ff       	call   c001b564 <DriverlessDevice::DriverlessDevice(char const*)>
c002a910:	5e                   	pop    esi
c002a911:	5f                   	pop    edi
c002a912:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a916:	50                   	push   eax
c002a917:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002a91b:	53                   	push   ebx
c002a91c:	e8 8f 09 ff ff       	call   c001b2b0 <Device::addChild(Device*)>
c002a921:	83 c4 10             	add    esp,0x10
c002a924:	b9 09 00 00 00       	mov    ecx,0x9
c002a929:	fc                   	cld    
c002a92a:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a92e:	89 fe                	mov    esi,edi
c002a930:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a936:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a93a:	83 c4 1c             	add    esp,0x1c
c002a93d:	5b                   	pop    ebx
c002a93e:	5e                   	pop    esi
c002a93f:	5f                   	pop    edi
c002a940:	5d                   	pop    ebp
c002a941:	e9 b0 08 ff ff       	jmp    c001b1f6 <Device::preOpenPCI(PCIDeviceInfo)>
c002a946:	83 c4 1c             	add    esp,0x1c
c002a949:	5b                   	pop    ebx
c002a94a:	5e                   	pop    esi
c002a94b:	5f                   	pop    edi
c002a94c:	5d                   	pop    ebp
c002a94d:	c3                   	ret    

c002a94e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a94e:	55                   	push   ebp
c002a94f:	57                   	push   edi
c002a950:	56                   	push   esi
c002a951:	53                   	push   ebx
c002a952:	83 ec 68             	sub    esp,0x68
c002a955:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a95c:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a960:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a964:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a96b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a970:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a974:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a97b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002a980:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a984:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002a989:	6a 0c                	push   0xc
c002a98b:	57                   	push   edi
c002a98c:	53                   	push   ebx
c002a98d:	56                   	push   esi
c002a98e:	55                   	push   ebp
c002a98f:	e8 24 f8 ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a994:	83 c4 20             	add    esp,0x20
c002a997:	57                   	push   edi
c002a998:	53                   	push   ebx
c002a999:	56                   	push   esi
c002a99a:	55                   	push   ebp
c002a99b:	e8 0e f9 ff ff       	call   c002a2ae <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002a9a0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002a9a5:	57                   	push   edi
c002a9a6:	53                   	push   ebx
c002a9a7:	56                   	push   esi
c002a9a8:	55                   	push   ebp
c002a9a9:	e8 96 f9 ff ff       	call   c002a344 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002a9ae:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002a9b2:	83 c4 14             	add    esp,0x14
c002a9b5:	6a 3c                	push   0x3c
c002a9b7:	57                   	push   edi
c002a9b8:	53                   	push   ebx
c002a9b9:	56                   	push   esi
c002a9ba:	55                   	push   ebp
c002a9bb:	e8 f8 f7 ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9c0:	0f b6 c4             	movzx  eax,ah
c002a9c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a9c7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002a9cb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002a9cf:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002a9d4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002a9da:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002a9e0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a9e4:	83 c4 20             	add    esp,0x20
c002a9e7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002a9ec:	74 30                	je     c002aa1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a9ee:	31 c0                	xor    eax,eax
c002a9f0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002a9f4:	7e 28                	jle    c002aa1e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a9f6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002a9fe:	39 cb                	cmp    ebx,ecx
c002aa00:	75 19                	jne    c002aa1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa02:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002aa0a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002aa0e:	75 0b                	jne    c002aa1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002aa10:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002aa17:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002aa1b:	40                   	inc    eax
c002aa1c:	eb d2                	jmp    c002a9f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002aa1e:	31 d2                	xor    edx,edx
c002aa20:	83 ec 0c             	sub    esp,0xc
c002aa23:	57                   	push   edi
c002aa24:	53                   	push   ebx
c002aa25:	56                   	push   esi
c002aa26:	52                   	push   edx
c002aa27:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002aa2b:	55                   	push   ebp
c002aa2c:	e8 5f f9 ff ff       	call   c002a390 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa31:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002aa35:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002aa39:	42                   	inc    edx
c002aa3a:	83 c4 20             	add    esp,0x20
c002aa3d:	83 fa 06             	cmp    edx,0x6
c002aa40:	75 de                	jne    c002aa20 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002aa42:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002aa46:	83 ec 0c             	sub    esp,0xc
c002aa49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aa4d:	c1 e2 08             	shl    edx,0x8
c002aa50:	0f b6 c4             	movzx  eax,ah
c002aa53:	09 d0                	or     eax,edx
c002aa55:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002aa5a:	6a 02                	push   0x2
c002aa5c:	57                   	push   edi
c002aa5d:	53                   	push   ebx
c002aa5e:	56                   	push   esi
c002aa5f:	55                   	push   ebp
c002aa60:	e8 53 f7 ff ff       	call   c002a1b8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa65:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002aa6a:	83 c4 20             	add    esp,0x20
c002aa6d:	57                   	push   edi
c002aa6e:	53                   	push   ebx
c002aa6f:	56                   	push   esi
c002aa70:	55                   	push   ebp
c002aa71:	e8 82 f8 ff ff       	call   c002a2f8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002aa76:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002aa7a:	57                   	push   edi
c002aa7b:	53                   	push   ebx
c002aa7c:	56                   	push   esi
c002aa7d:	55                   	push   ebp
c002aa7e:	e8 df f7 ff ff       	call   c002a262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa83:	b9 09 00 00 00       	mov    ecx,0x9
c002aa88:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002aa8d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002aa91:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002aa95:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002aa99:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002aa9d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002aaa1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002aaa5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002aaa9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002aaad:	83 ec 0c             	sub    esp,0xc
c002aab0:	fc                   	cld    
c002aab1:	8d 74 24 58          	lea    esi,[esp+0x58]
c002aab5:	89 e7                	mov    edi,esp
c002aab7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aab9:	55                   	push   ebp
c002aaba:	e8 09 fd ff ff       	call   c002a7c8 <PCI::foundDevice(PCIDeviceInfo)>
c002aabf:	81 c4 8c 00 00 00    	add    esp,0x8c
c002aac5:	5b                   	pop    ebx
c002aac6:	5e                   	pop    esi
c002aac7:	5f                   	pop    edi
c002aac8:	5d                   	pop    ebp
c002aac9:	c3                   	ret    

c002aaca <PCI::checkDevice(unsigned char, unsigned char)>:
c002aaca:	55                   	push   ebp
c002aacb:	57                   	push   edi
c002aacc:	56                   	push   esi
c002aacd:	53                   	push   ebx
c002aace:	83 ec 0c             	sub    esp,0xc
c002aad1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002aad6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002aadb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002aadf:	6a 00                	push   0x0
c002aae1:	56                   	push   esi
c002aae2:	57                   	push   edi
c002aae3:	55                   	push   ebp
c002aae4:	e8 79 f7 ff ff       	call   c002a262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aae9:	6a 00                	push   0x0
c002aaeb:	56                   	push   esi
c002aaec:	57                   	push   edi
c002aaed:	55                   	push   ebp
c002aaee:	e8 5b fe ff ff       	call   c002a94e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aaf3:	83 c4 20             	add    esp,0x20
c002aaf6:	6a 00                	push   0x0
c002aaf8:	56                   	push   esi
c002aaf9:	57                   	push   edi
c002aafa:	55                   	push   ebp
c002aafb:	e8 86 f7 ff ff       	call   c002a286 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ab00:	83 c4 10             	add    esp,0x10
c002ab03:	a8 80                	test   al,0x80
c002ab05:	74 2d                	je     c002ab34 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002ab07:	bb 01 00 00 00       	mov    ebx,0x1
c002ab0c:	53                   	push   ebx
c002ab0d:	56                   	push   esi
c002ab0e:	57                   	push   edi
c002ab0f:	55                   	push   ebp
c002ab10:	e8 4d f7 ff ff       	call   c002a262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab15:	83 c4 10             	add    esp,0x10
c002ab18:	0f b7 c0             	movzx  eax,ax
c002ab1b:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab20:	74 0c                	je     c002ab2e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002ab22:	53                   	push   ebx
c002ab23:	56                   	push   esi
c002ab24:	57                   	push   edi
c002ab25:	55                   	push   ebp
c002ab26:	e8 23 fe ff ff       	call   c002a94e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002ab2b:	83 c4 10             	add    esp,0x10
c002ab2e:	43                   	inc    ebx
c002ab2f:	83 fb 08             	cmp    ebx,0x8
c002ab32:	75 d8                	jne    c002ab0c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002ab34:	83 c4 0c             	add    esp,0xc
c002ab37:	5b                   	pop    ebx
c002ab38:	5e                   	pop    esi
c002ab39:	5f                   	pop    edi
c002ab3a:	5d                   	pop    ebp
c002ab3b:	c3                   	ret    

c002ab3c <PCI::detect()>:
c002ab3c:	56                   	push   esi
c002ab3d:	53                   	push   ebx
c002ab3e:	53                   	push   ebx
c002ab3f:	31 db                	xor    ebx,ebx
c002ab41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ab45:	6a 00                	push   0x0
c002ab47:	6a 00                	push   0x0
c002ab49:	6a 00                	push   0x0
c002ab4b:	56                   	push   esi
c002ab4c:	e8 35 f7 ff ff       	call   c002a286 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ab51:	83 c4 10             	add    esp,0x10
c002ab54:	a8 80                	test   al,0x80
c002ab56:	75 21                	jne    c002ab79 <PCI::detect()+0x3d>
c002ab58:	51                   	push   ecx
c002ab59:	51                   	push   ecx
c002ab5a:	6a 00                	push   0x0
c002ab5c:	56                   	push   esi
c002ab5d:	e8 42 fc ff ff       	call   c002a7a4 <PCI::checkBus(unsigned char)>
c002ab62:	83 c4 10             	add    esp,0x10
c002ab65:	eb 2a                	jmp    c002ab91 <PCI::detect()+0x55>
c002ab67:	52                   	push   edx
c002ab68:	52                   	push   edx
c002ab69:	53                   	push   ebx
c002ab6a:	43                   	inc    ebx
c002ab6b:	56                   	push   esi
c002ab6c:	e8 33 fc ff ff       	call   c002a7a4 <PCI::checkBus(unsigned char)>
c002ab71:	83 c4 10             	add    esp,0x10
c002ab74:	83 fb 08             	cmp    ebx,0x8
c002ab77:	74 18                	je     c002ab91 <PCI::detect()+0x55>
c002ab79:	53                   	push   ebx
c002ab7a:	6a 00                	push   0x0
c002ab7c:	6a 00                	push   0x0
c002ab7e:	56                   	push   esi
c002ab7f:	e8 de f6 ff ff       	call   c002a262 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab84:	83 c4 10             	add    esp,0x10
c002ab87:	0f b7 c0             	movzx  eax,ax
c002ab8a:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab8f:	74 d6                	je     c002ab67 <PCI::detect()+0x2b>
c002ab91:	58                   	pop    eax
c002ab92:	5b                   	pop    ebx
c002ab93:	5e                   	pop    esi
c002ab94:	c3                   	ret    
c002ab95:	90                   	nop

c002ab96 <IDE::close(int, int, void*)>:
c002ab96:	83 c8 ff             	or     eax,0xffffffff
c002ab99:	c3                   	ret    

c002ab9a <IDE::IDE()>:
c002ab9a:	83 ec 0c             	sub    esp,0xc
c002ab9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002aba1:	83 ec 08             	sub    esp,0x8
c002aba4:	68 4c 36 03 c0       	push   0xc003364c
c002aba9:	50                   	push   eax
c002abaa:	e8 59 0a ff ff       	call   c001b608 <HardDiskController::HardDiskController(char const*)>
c002abaf:	83 c4 10             	add    esp,0x10
c002abb2:	ba dc 36 03 c0       	mov    edx,0xc00336dc
c002abb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002abbb:	89 10                	mov    DWORD PTR [eax],edx
c002abbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002abc1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002abc8:	90                   	nop
c002abc9:	83 c4 0c             	add    esp,0xc
c002abcc:	c3                   	ret    
c002abcd:	90                   	nop

c002abce <IDE::prepareInterrupt(unsigned char)>:
c002abce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002abd3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002abd7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002abdf:	c3                   	ret    

c002abe0 <selectDrive(unsigned char, unsigned char)>:
c002abe0:	c3                   	ret    
c002abe1:	90                   	nop

c002abe2 <IDE::getBase(unsigned char)>:
c002abe2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002abe7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002abeb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002abf3:	c3                   	ret    

c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002abf4:	55                   	push   ebp
c002abf5:	57                   	push   edi
c002abf6:	56                   	push   esi
c002abf7:	53                   	push   ebx
c002abf8:	83 ec 1c             	sub    esp,0x1c
c002abfb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002abff:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002ac03:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002ac07:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002ac0b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002ac0e:	80 f9 03             	cmp    cl,0x3
c002ac11:	77 4f                	ja     c002ac62 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002ac13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002ac17:	0f b6 f2             	movzx  esi,dl
c002ac1a:	0f b6 db             	movzx  ebx,bl
c002ac1d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002ac20:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002ac25:	80 ca 80             	or     dl,0x80
c002ac28:	52                   	push   edx
c002ac29:	6a 0c                	push   0xc
c002ac2b:	56                   	push   esi
c002ac2c:	57                   	push   edi
c002ac2d:	e8 c2 ff ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac32:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002ac37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002ac3b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002ac3f:	ee                   	out    dx,al
c002ac40:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c002ac45:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002ac49:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002ac4d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ac55:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002ac59:	83 c4 2c             	add    esp,0x2c
c002ac5c:	5b                   	pop    ebx
c002ac5d:	5e                   	pop    esi
c002ac5e:	5f                   	pop    edi
c002ac5f:	5d                   	pop    ebp
c002ac60:	eb 92                	jmp    c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac62:	0f b6 cb             	movzx  ecx,bl
c002ac65:	83 f9 07             	cmp    ecx,0x7
c002ac68:	77 12                	ja     c002ac7c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002ac6a:	0f b6 d2             	movzx  edx,dl
c002ac6d:	0f b6 db             	movzx  ebx,bl
c002ac70:	66 8b 94 d7 5a 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15a]
c002ac78:	01 da                	add    edx,ebx
c002ac7a:	eb 2f                	jmp    c002acab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac7c:	83 f9 0d             	cmp    ecx,0xd
c002ac7f:	77 13                	ja     c002ac94 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ac81:	0f b6 d2             	movzx  edx,dl
c002ac84:	0f b6 db             	movzx  ebx,bl
c002ac87:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002ac8e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ac92:	eb 17                	jmp    c002acab <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac94:	83 f9 15             	cmp    ecx,0x15
c002ac97:	77 13                	ja     c002acac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ac99:	0f b6 d2             	movzx  edx,dl
c002ac9c:	0f b6 db             	movzx  ebx,bl
c002ac9f:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002aca7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002acab:	ee                   	out    dx,al
c002acac:	83 c4 1c             	add    esp,0x1c
c002acaf:	5b                   	pop    ebx
c002acb0:	5e                   	pop    esi
c002acb1:	5f                   	pop    edi
c002acb2:	5d                   	pop    ebp
c002acb3:	c3                   	ret    

c002acb4 <IDE::read(unsigned char, unsigned char)>:
c002acb4:	57                   	push   edi
c002acb5:	56                   	push   esi
c002acb6:	53                   	push   ebx
c002acb7:	83 ec 10             	sub    esp,0x10
c002acba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002acbe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002acc2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002acc6:	8d 42 f8             	lea    eax,[edx-0x8]
c002acc9:	3c 03                	cmp    al,0x3
c002accb:	77 48                	ja     c002ad15 <IDE::read(unsigned char, unsigned char)+0x61>
c002accd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002acd1:	0f b6 f1             	movzx  esi,cl
c002acd4:	8d 7e 2a             	lea    edi,[esi+0x2a]
c002acd7:	0f b6 44 fb 10       	movzx  eax,BYTE PTR [ebx+edi*8+0x10]
c002acdc:	0c 80                	or     al,0x80
c002acde:	50                   	push   eax
c002acdf:	6a 0c                	push   0xc
c002ace1:	56                   	push   esi
c002ace2:	53                   	push   ebx
c002ace3:	e8 0c ff ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ace8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002acec:	66 8b 44 fb 0a       	mov    ax,WORD PTR [ebx+edi*8+0xa]
c002acf1:	0f b6 d2             	movzx  edx,dl
c002acf4:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002acf8:	ec                   	in     al,dx
c002acf9:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002acfd:	0f b6 54 fb 10       	movzx  edx,BYTE PTR [ebx+edi*8+0x10]
c002ad02:	52                   	push   edx
c002ad03:	6a 0c                	push   0xc
c002ad05:	56                   	push   esi
c002ad06:	53                   	push   ebx
c002ad07:	e8 e8 fe ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ad0c:	83 c4 20             	add    esp,0x20
c002ad0f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002ad13:	eb 4c                	jmp    c002ad61 <IDE::read(unsigned char, unsigned char)+0xad>
c002ad15:	0f b6 f2             	movzx  esi,dl
c002ad18:	83 fe 07             	cmp    esi,0x7
c002ad1b:	77 12                	ja     c002ad2f <IDE::read(unsigned char, unsigned char)+0x7b>
c002ad1d:	0f b6 c9             	movzx  ecx,cl
c002ad20:	0f b6 d2             	movzx  edx,dl
c002ad23:	66 8b 84 cb 5a 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15a]
c002ad2b:	01 c2                	add    edx,eax
c002ad2d:	eb 31                	jmp    c002ad60 <IDE::read(unsigned char, unsigned char)+0xac>
c002ad2f:	83 fe 0d             	cmp    esi,0xd
c002ad32:	77 13                	ja     c002ad47 <IDE::read(unsigned char, unsigned char)+0x93>
c002ad34:	0f b6 c9             	movzx  ecx,cl
c002ad37:	0f b6 d2             	movzx  edx,dl
c002ad3a:	8b 84 cb 5c 01 00 00 	mov    eax,DWORD PTR [ebx+ecx*8+0x15c]
c002ad41:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002ad45:	eb 19                	jmp    c002ad60 <IDE::read(unsigned char, unsigned char)+0xac>
c002ad47:	31 c0                	xor    eax,eax
c002ad49:	83 fe 15             	cmp    esi,0x15
c002ad4c:	77 13                	ja     c002ad61 <IDE::read(unsigned char, unsigned char)+0xad>
c002ad4e:	0f b6 c9             	movzx  ecx,cl
c002ad51:	0f b6 d2             	movzx  edx,dl
c002ad54:	66 8b 84 cb 5e 01 00 00 	mov    ax,WORD PTR [ebx+ecx*8+0x15e]
c002ad5c:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ad60:	ec                   	in     al,dx
c002ad61:	83 c4 10             	add    esp,0x10
c002ad64:	5b                   	pop    ebx
c002ad65:	5e                   	pop    esi
c002ad66:	5f                   	pop    edi
c002ad67:	c3                   	ret    

c002ad68 <IDE::waitInterrupt(unsigned char)>:
c002ad68:	55                   	push   ebp
c002ad69:	57                   	push   edi
c002ad6a:	56                   	push   esi
c002ad6b:	53                   	push   ebx
c002ad6c:	31 db                	xor    ebx,ebx
c002ad6e:	83 ec 0c             	sub    esp,0xc
c002ad71:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002ad75:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002ad7a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ad82:	89 e8                	mov    eax,ebp
c002ad84:	84 c0                	test   al,al
c002ad86:	75 30                	jne    c002adb8 <IDE::waitInterrupt(unsigned char)+0x50>
c002ad88:	50                   	push   eax
c002ad89:	6a 0c                	push   0xc
c002ad8b:	56                   	push   esi
c002ad8c:	57                   	push   edi
c002ad8d:	e8 22 ff ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002ad92:	83 c4 10             	add    esp,0x10
c002ad95:	a8 01                	test   al,0x1
c002ad97:	75 27                	jne    c002adc0 <IDE::waitInterrupt(unsigned char)+0x58>
c002ad99:	f6 c3 04             	test   bl,0x4
c002ad9c:	75 12                	jne    c002adb0 <IDE::waitInterrupt(unsigned char)+0x48>
c002ad9e:	83 fb 32             	cmp    ebx,0x32
c002ada1:	7e 0d                	jle    c002adb0 <IDE::waitInterrupt(unsigned char)+0x48>
c002ada3:	83 ec 0c             	sub    esp,0xc
c002ada6:	6a 64                	push   0x64
c002ada8:	e8 c7 a5 ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002adad:	83 c4 10             	add    esp,0x10
c002adb0:	83 fb 3c             	cmp    ebx,0x3c
c002adb3:	74 0b                	je     c002adc0 <IDE::waitInterrupt(unsigned char)+0x58>
c002adb5:	43                   	inc    ebx
c002adb6:	eb c2                	jmp    c002ad7a <IDE::waitInterrupt(unsigned char)+0x12>
c002adb8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002adc0:	83 c4 0c             	add    esp,0xc
c002adc3:	89 e8                	mov    eax,ebp
c002adc5:	5b                   	pop    ebx
c002adc6:	5e                   	pop    esi
c002adc7:	5f                   	pop    edi
c002adc8:	5d                   	pop    ebp
c002adc9:	c3                   	ret    

c002adca <ideChannel0IRQHandler(regs*, void*)>:
c002adca:	83 ec 10             	sub    esp,0x10
c002adcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002add1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002add8:	6a 07                	push   0x7
c002adda:	6a 00                	push   0x0
c002addc:	50                   	push   eax
c002addd:	e8 d2 fe ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002ade2:	83 c4 1c             	add    esp,0x1c
c002ade5:	c3                   	ret    

c002ade6 <ideChannel1IRQHandler(regs*, void*)>:
c002ade6:	83 ec 10             	sub    esp,0x10
c002ade9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002aded:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002adf4:	6a 07                	push   0x7
c002adf6:	6a 01                	push   0x1
c002adf8:	50                   	push   eax
c002adf9:	e8 b6 fe ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002adfe:	83 c4 1c             	add    esp,0x1c
c002ae01:	c3                   	ret    

c002ae02 <IDE::enableIRQs(unsigned char, bool)>:
c002ae02:	57                   	push   edi
c002ae03:	b8 02 00 00 00       	mov    eax,0x2
c002ae08:	56                   	push   esi
c002ae09:	53                   	push   ebx
c002ae0a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002ae0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002ae13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002ae17:	74 02                	je     c002ae1b <IDE::enableIRQs(unsigned char, bool)+0x19>
c002ae19:	31 c0                	xor    eax,eax
c002ae1b:	0f b6 db             	movzx  ebx,bl
c002ae1e:	bf 04 00 00 00       	mov    edi,0x4
c002ae23:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002ae2a:	50                   	push   eax
c002ae2b:	6a 0c                	push   0xc
c002ae2d:	53                   	push   ebx
c002ae2e:	56                   	push   esi
c002ae2f:	e8 c0 fd ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ae34:	83 c4 10             	add    esp,0x10
c002ae37:	50                   	push   eax
c002ae38:	6a 0c                	push   0xc
c002ae3a:	53                   	push   ebx
c002ae3b:	56                   	push   esi
c002ae3c:	e8 73 fe ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002ae41:	83 c4 10             	add    esp,0x10
c002ae44:	4f                   	dec    edi
c002ae45:	75 f0                	jne    c002ae37 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002ae47:	5b                   	pop    ebx
c002ae48:	5e                   	pop    esi
c002ae49:	5f                   	pop    edi
c002ae4a:	c3                   	ret    
c002ae4b:	90                   	nop

c002ae4c <IDE::open(int, int, void*)>:
c002ae4c:	55                   	push   ebp
c002ae4d:	57                   	push   edi
c002ae4e:	56                   	push   esi
c002ae4f:	53                   	push   ebx
c002ae50:	83 ec 1c             	sub    esp,0x1c
c002ae53:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ae57:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002ae5e:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002ae67:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002ae70:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002ae77:	0f 85 da 02 00 00    	jne    c002b157 <IDE::open(int, int, void*)+0x30b>
c002ae7d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002ae83:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c002ae87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ae8b:	83 e0 7f             	and    eax,0x7f
c002ae8e:	83 f8 05             	cmp    eax,0x5
c002ae91:	74 05                	je     c002ae98 <IDE::open(int, int, void*)+0x4c>
c002ae93:	83 f8 0f             	cmp    eax,0xf
c002ae96:	75 32                	jne    c002aeca <IDE::open(int, int, void*)+0x7e>
c002ae98:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002ae9e:	83 e0 fc             	and    eax,0xfffffffc
c002aea1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002aea8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002aeae:	83 e0 fc             	and    eax,0xfffffffc
c002aeb1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002aeb8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002aebe:	83 e0 fc             	and    eax,0xfffffffc
c002aec1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002aec8:	eb 14                	jmp    c002aede <IDE::open(int, int, void*)+0x92>
c002aeca:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002aed4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002aede:	0f b6 b3 1c 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11c]
c002aee5:	bf f8 0c 00 00       	mov    edi,0xcf8
c002aeea:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002aef1:	89 fa                	mov    edx,edi
c002aef3:	89 f1                	mov    ecx,esi
c002aef5:	c1 e1 10             	shl    ecx,0x10
c002aef8:	89 e8                	mov    eax,ebp
c002aefa:	c1 e0 0b             	shl    eax,0xb
c002aefd:	09 c1                	or     ecx,eax
c002aeff:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002af06:	c1 e0 08             	shl    eax,0x8
c002af09:	09 c1                	or     ecx,eax
c002af0b:	89 c8                	mov    eax,ecx
c002af0d:	0d 08 00 00 80       	or     eax,0x80000008
c002af12:	ef                   	out    dx,eax
c002af13:	ba fc 0c 00 00       	mov    edx,0xcfc
c002af18:	ed                   	in     eax,dx
c002af19:	c1 e8 10             	shr    eax,0x10
c002af1c:	3d ff ff 00 00       	cmp    eax,0xffff
c002af21:	0f 84 f9 00 00 00    	je     c002b020 <IDE::open(int, int, void*)+0x1d4>
c002af27:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002af2d:	89 fa                	mov    edx,edi
c002af2f:	89 c8                	mov    eax,ecx
c002af31:	ef                   	out    dx,eax
c002af32:	b0 fe                	mov    al,0xfe
c002af34:	ba fc 0c 00 00       	mov    edx,0xcfc
c002af39:	ee                   	out    dx,al
c002af3a:	89 c8                	mov    eax,ecx
c002af3c:	89 fa                	mov    edx,edi
c002af3e:	ef                   	out    dx,eax
c002af3f:	ba fc 0c 00 00       	mov    edx,0xcfc
c002af44:	ed                   	in     eax,dx
c002af45:	3c fe                	cmp    al,0xfe
c002af47:	0f 85 a4 00 00 00    	jne    c002aff1 <IDE::open(int, int, void*)+0x1a5>
c002af4d:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002af53:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002af5a:	74 30                	je     c002af8c <IDE::open(int, int, void*)+0x140>
c002af5c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002af62:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002af66:	83 ec 0c             	sub    esp,0xc
c002af69:	40                   	inc    eax
c002af6a:	0f b6 c0             	movzx  eax,al
c002af6d:	50                   	push   eax
c002af6e:	55                   	push   ebp
c002af6f:	56                   	push   esi
c002af70:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002af76:	51                   	push   ecx
c002af77:	e8 98 35 ff ff       	call   c001e514 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002af7c:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002af81:	83 c4 1c             	add    esp,0x1c
c002af84:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002af8a:	eb 0a                	jmp    c002af96 <IDE::open(int, int, void*)+0x14a>
c002af8c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002af96:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002af9d:	bd f8 0c 00 00       	mov    ebp,0xcf8
c002afa2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002afa9:	89 ea                	mov    edx,ebp
c002afab:	c1 e1 10             	shl    ecx,0x10
c002afae:	c1 e0 08             	shl    eax,0x8
c002afb1:	09 c1                	or     ecx,eax
c002afb3:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002afba:	c1 e0 0b             	shl    eax,0xb
c002afbd:	09 c1                	or     ecx,eax
c002afbf:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002afc5:	89 c8                	mov    eax,ecx
c002afc7:	ef                   	out    dx,eax
c002afc8:	8b bb 50 01 00 00    	mov    edi,DWORD PTR [ebx+0x150]
c002afce:	be fc 0c 00 00       	mov    esi,0xcfc
c002afd3:	89 f2                	mov    edx,esi
c002afd5:	89 f8                	mov    eax,edi
c002afd7:	ee                   	out    dx,al
c002afd8:	89 c8                	mov    eax,ecx
c002afda:	89 ea                	mov    edx,ebp
c002afdc:	ef                   	out    dx,eax
c002afdd:	89 f2                	mov    edx,esi
c002afdf:	ed                   	in     eax,dx
c002afe0:	0f b6 c0             	movzx  eax,al
c002afe3:	39 f8                	cmp    eax,edi
c002afe5:	74 49                	je     c002b030 <IDE::open(int, int, void*)+0x1e4>
c002afe7:	83 ec 0c             	sub    esp,0xc
c002afea:	68 64 36 03 c0       	push   0xc0033664
c002afef:	eb 37                	jmp    c002b028 <IDE::open(int, int, void*)+0x1dc>
c002aff1:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002affa:	75 1a                	jne    c002b016 <IDE::open(int, int, void*)+0x1ca>
c002affc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002b001:	3d 8a 00 00 00       	cmp    eax,0x8a
c002b006:	74 05                	je     c002b00d <IDE::open(int, int, void*)+0x1c1>
c002b008:	83 c0 80             	add    eax,0xffffff80
c002b00b:	75 09                	jne    c002b016 <IDE::open(int, int, void*)+0x1ca>
c002b00d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b014:	eb 1a                	jmp    c002b030 <IDE::open(int, int, void*)+0x1e4>
c002b016:	83 ec 0c             	sub    esp,0xc
c002b019:	68 6c 36 03 c0       	push   0xc003366c
c002b01e:	eb 08                	jmp    c002b028 <IDE::open(int, int, void*)+0x1dc>
c002b020:	83 ec 0c             	sub    esp,0xc
c002b023:	68 9d 36 03 c0       	push   0xc003369d
c002b028:	e8 75 51 ff ff       	call   c00201a2 <KePanic(char const*)>
c002b02d:	83 c4 10             	add    esp,0x10
c002b030:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002b037:	74 1a                	je     c002b053 <IDE::open(int, int, void*)+0x207>
c002b039:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002b03f:	83 e0 fc             	and    eax,0xfffffffc
c002b042:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002b049:	83 c0 08             	add    eax,0x8
c002b04c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b053:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b059:	89 c2                	mov    edx,eax
c002b05b:	83 e2 0f             	and    edx,0xf
c002b05e:	83 fa 08             	cmp    edx,0x8
c002b061:	75 0a                	jne    c002b06d <IDE::open(int, int, void*)+0x221>
c002b063:	83 e8 02             	sub    eax,0x2
c002b066:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b06d:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b073:	89 c2                	mov    edx,eax
c002b075:	83 e2 0f             	and    edx,0xf
c002b078:	83 fa 08             	cmp    edx,0x8
c002b07b:	75 0a                	jne    c002b087 <IDE::open(int, int, void*)+0x23b>
c002b07d:	83 e8 02             	sub    eax,0x2
c002b080:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b087:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b08e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b095:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b098:	89 d0                	mov    eax,edx
c002b09a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b09e:	8d 7a 01             	lea    edi,[edx+0x1]
c002b0a1:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b0a5:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b0a9:	83 e1 3f             	and    ecx,0x3f
c002b0ac:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b0b0:	89 f9                	mov    ecx,edi
c002b0b2:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b0b9:	8d 78 02             	lea    edi,[eax+0x2]
c002b0bc:	0f b6 c9             	movzx  ecx,cl
c002b0bf:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b0c2:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b0c6:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b0ca:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b0ce:	83 e2 3f             	and    edx,0x3f
c002b0d1:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b0d5:	89 f9                	mov    ecx,edi
c002b0d7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b0dd:	8d 78 03             	lea    edi,[eax+0x3]
c002b0e0:	0f b6 d1             	movzx  edx,cl
c002b0e3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b0e6:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b0ea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b0ee:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b0f2:	83 e1 3f             	and    ecx,0x3f
c002b0f5:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b0f9:	89 f9                	mov    ecx,edi
c002b0fb:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b101:	8d 78 04             	lea    edi,[eax+0x4]
c002b104:	0f b6 c9             	movzx  ecx,cl
c002b107:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b10a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b10e:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b112:	89 fa                	mov    edx,edi
c002b114:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b11a:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b11e:	83 e2 3f             	and    edx,0x3f
c002b121:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b125:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b12c:	66 85 f6             	test   si,si
c002b12f:	74 65                	je     c002b196 <IDE::open(int, int, void*)+0x34a>
c002b131:	89 f9                	mov    ecx,edi
c002b133:	83 c0 05             	add    eax,0x5
c002b136:	0f b6 d1             	movzx  edx,cl
c002b139:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b13c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b140:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b144:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b14a:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b14e:	83 e0 3f             	and    eax,0x3f
c002b151:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b155:	eb 3f                	jmp    c002b196 <IDE::open(int, int, void*)+0x34a>
c002b157:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b15e:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b164:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b16b:	05 06 02 00 00       	add    eax,0x206
c002b170:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b177:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b17e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b185:	05 06 02 00 00       	add    eax,0x206
c002b18a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b191:	e9 bd fe ff ff       	jmp    c002b053 <IDE::open(int, int, void*)+0x207>
c002b196:	50                   	push   eax
c002b197:	50                   	push   eax
c002b198:	6a 00                	push   0x0
c002b19a:	53                   	push   ebx
c002b19b:	e8 2e fa ff ff       	call   c002abce <IDE::prepareInterrupt(unsigned char)>
c002b1a0:	5a                   	pop    edx
c002b1a1:	59                   	pop    ecx
c002b1a2:	6a 01                	push   0x1
c002b1a4:	53                   	push   ebx
c002b1a5:	e8 24 fa ff ff       	call   c002abce <IDE::prepareInterrupt(unsigned char)>
c002b1aa:	83 c4 0c             	add    esp,0xc
c002b1ad:	6a 00                	push   0x0
c002b1af:	6a 00                	push   0x0
c002b1b1:	53                   	push   ebx
c002b1b2:	e8 4b fc ff ff       	call   c002ae02 <IDE::enableIRQs(unsigned char, bool)>
c002b1b7:	83 c4 0c             	add    esp,0xc
c002b1ba:	6a 00                	push   0x0
c002b1bc:	6a 01                	push   0x1
c002b1be:	53                   	push   ebx
c002b1bf:	e8 3e fc ff ff       	call   c002ae02 <IDE::enableIRQs(unsigned char, bool)>
c002b1c4:	83 c4 10             	add    esp,0x10
c002b1c7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b1ce:	74 34                	je     c002b204 <IDE::open(int, int, void*)+0x3b8>
c002b1d0:	83 ec 0c             	sub    esp,0xc
c002b1d3:	53                   	push   ebx
c002b1d4:	6a 01                	push   0x1
c002b1d6:	68 ca ad 02 c0       	push   0xc002adca
c002b1db:	6a 0e                	push   0xe
c002b1dd:	53                   	push   ebx
c002b1de:	e8 79 00 ff ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1e3:	83 c4 14             	add    esp,0x14
c002b1e6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b1ec:	53                   	push   ebx
c002b1ed:	6a 01                	push   0x1
c002b1ef:	68 e6 ad 02 c0       	push   0xc002ade6
c002b1f4:	6a 0f                	push   0xf
c002b1f6:	53                   	push   ebx
c002b1f7:	e8 60 00 ff ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1fc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b202:	eb 38                	jmp    c002b23c <IDE::open(int, int, void*)+0x3f0>
c002b204:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b20e:	83 ec 0c             	sub    esp,0xc
c002b211:	53                   	push   ebx
c002b212:	6a 00                	push   0x0
c002b214:	68 ca ad 02 c0       	push   0xc002adca
c002b219:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b21f:	53                   	push   ebx
c002b220:	e8 37 00 ff ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b225:	83 c4 14             	add    esp,0x14
c002b228:	53                   	push   ebx
c002b229:	6a 00                	push   0x0
c002b22b:	68 e6 ad 02 c0       	push   0xc002ade6
c002b230:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b236:	53                   	push   ebx
c002b237:	e8 20 00 ff ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b23c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b23e:	83 c4 20             	add    esp,0x20
c002b241:	83 ec 0c             	sub    esp,0xc
c002b244:	53                   	push   ebx
c002b245:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b248:	83 c4 0c             	add    esp,0xc
c002b24b:	6a 07                	push   0x7
c002b24d:	6a 00                	push   0x0
c002b24f:	53                   	push   ebx
c002b250:	e8 5f fa ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b255:	83 c4 0c             	add    esp,0xc
c002b258:	6a 07                	push   0x7
c002b25a:	6a 01                	push   0x1
c002b25c:	53                   	push   ebx
c002b25d:	e8 52 fa ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b262:	83 c4 0c             	add    esp,0xc
c002b265:	6a 01                	push   0x1
c002b267:	6a 00                	push   0x0
c002b269:	53                   	push   ebx
c002b26a:	e8 93 fb ff ff       	call   c002ae02 <IDE::enableIRQs(unsigned char, bool)>
c002b26f:	83 c4 0c             	add    esp,0xc
c002b272:	6a 01                	push   0x1
c002b274:	6a 01                	push   0x1
c002b276:	53                   	push   ebx
c002b277:	e8 86 fb ff ff       	call   c002ae02 <IDE::enableIRQs(unsigned char, bool)>
c002b27c:	83 c4 2c             	add    esp,0x2c
c002b27f:	31 c0                	xor    eax,eax
c002b281:	5b                   	pop    ebx
c002b282:	5e                   	pop    esi
c002b283:	5f                   	pop    edi
c002b284:	5d                   	pop    ebp
c002b285:	c3                   	ret    

c002b286 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b286:	55                   	push   ebp
c002b287:	57                   	push   edi
c002b288:	56                   	push   esi
c002b289:	53                   	push   ebx
c002b28a:	83 ec 1c             	sub    esp,0x1c
c002b28d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b291:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b295:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b299:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b29d:	8d 42 f8             	lea    eax,[edx-0x8]
c002b2a0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b2a4:	3c 03                	cmp    al,0x3
c002b2a6:	77 5a                	ja     c002b302 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b2a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b2ac:	0f b6 db             	movzx  ebx,bl
c002b2af:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b2b3:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b2b6:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b2bb:	0c 80                	or     al,0x80
c002b2bd:	50                   	push   eax
c002b2be:	6a 0c                	push   0xc
c002b2c0:	53                   	push   ebx
c002b2c1:	56                   	push   esi
c002b2c2:	e8 2d f9 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b2c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b2cb:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b2d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b2d4:	0f b6 d2             	movzx  edx,dl
c002b2d7:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b2db:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b2dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b2e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b2e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b2ea:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b2f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b2f6:	83 c4 2c             	add    esp,0x2c
c002b2f9:	5b                   	pop    ebx
c002b2fa:	5e                   	pop    esi
c002b2fb:	5f                   	pop    edi
c002b2fc:	5d                   	pop    ebp
c002b2fd:	e9 f2 f8 ff ff       	jmp    c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b302:	0f b6 c2             	movzx  eax,dl
c002b305:	83 f8 07             	cmp    eax,0x7
c002b308:	77 12                	ja     c002b31c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b30a:	0f b6 db             	movzx  ebx,bl
c002b30d:	0f b6 c2             	movzx  eax,dl
c002b310:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b318:	01 c2                	add    edx,eax
c002b31a:	eb 2f                	jmp    c002b34b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b31c:	83 f8 0d             	cmp    eax,0xd
c002b31f:	77 13                	ja     c002b334 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b321:	0f b6 db             	movzx  ebx,bl
c002b324:	0f b6 d2             	movzx  edx,dl
c002b327:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b32e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b332:	eb 17                	jmp    c002b34b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b334:	83 f8 15             	cmp    eax,0x15
c002b337:	77 14                	ja     c002b34d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b339:	0f b6 db             	movzx  ebx,bl
c002b33c:	0f b6 d2             	movzx  edx,dl
c002b33f:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b347:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b34b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b34d:	83 c4 1c             	add    esp,0x1c
c002b350:	5b                   	pop    ebx
c002b351:	5e                   	pop    esi
c002b352:	5f                   	pop    edi
c002b353:	5d                   	pop    ebp
c002b354:	c3                   	ret    
c002b355:	90                   	nop

c002b356 <IDE::detect()>:
c002b356:	55                   	push   ebp
c002b357:	57                   	push   edi
c002b358:	56                   	push   esi
c002b359:	53                   	push   ebx
c002b35a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b360:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b367:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b36e:	0f 85 9e 02 00 00    	jne    c002b612 <IDE::detect()+0x2bc>
c002b374:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b37b:	31 f6                	xor    esi,esi
c002b37d:	31 ff                	xor    edi,edi
c002b37f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b387:	89 f8                	mov    eax,edi
c002b389:	c1 e0 06             	shl    eax,0x6
c002b38c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b394:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b398:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b3a0:	c1 e0 04             	shl    eax,0x4
c002b3a3:	83 c8 a0             	or     eax,0xffffffa0
c002b3a6:	0f b6 c0             	movzx  eax,al
c002b3a9:	50                   	push   eax
c002b3aa:	6a 06                	push   0x6
c002b3ac:	56                   	push   esi
c002b3ad:	53                   	push   ebx
c002b3ae:	e8 41 f8 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3b3:	83 c4 0c             	add    esp,0xc
c002b3b6:	6a 0c                	push   0xc
c002b3b8:	56                   	push   esi
c002b3b9:	53                   	push   ebx
c002b3ba:	e8 f5 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b3bf:	83 c4 0c             	add    esp,0xc
c002b3c2:	6a 0c                	push   0xc
c002b3c4:	56                   	push   esi
c002b3c5:	53                   	push   ebx
c002b3c6:	e8 e9 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b3cb:	83 c4 0c             	add    esp,0xc
c002b3ce:	6a 0c                	push   0xc
c002b3d0:	56                   	push   esi
c002b3d1:	53                   	push   ebx
c002b3d2:	e8 dd f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b3d7:	83 c4 0c             	add    esp,0xc
c002b3da:	6a 0c                	push   0xc
c002b3dc:	56                   	push   esi
c002b3dd:	53                   	push   ebx
c002b3de:	e8 d1 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b3e3:	68 ec 00 00 00       	push   0xec
c002b3e8:	6a 07                	push   0x7
c002b3ea:	56                   	push   esi
c002b3eb:	53                   	push   ebx
c002b3ec:	e8 03 f8 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b3f1:	83 c4 1c             	add    esp,0x1c
c002b3f4:	6a 0c                	push   0xc
c002b3f6:	56                   	push   esi
c002b3f7:	53                   	push   ebx
c002b3f8:	e8 b7 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b3fd:	83 c4 0c             	add    esp,0xc
c002b400:	6a 0c                	push   0xc
c002b402:	56                   	push   esi
c002b403:	53                   	push   ebx
c002b404:	e8 ab f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b409:	83 c4 0c             	add    esp,0xc
c002b40c:	6a 0c                	push   0xc
c002b40e:	56                   	push   esi
c002b40f:	53                   	push   ebx
c002b410:	e8 9f f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b415:	83 c4 0c             	add    esp,0xc
c002b418:	6a 0c                	push   0xc
c002b41a:	56                   	push   esi
c002b41b:	53                   	push   ebx
c002b41c:	e8 93 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b421:	83 c4 0c             	add    esp,0xc
c002b424:	6a 0c                	push   0xc
c002b426:	56                   	push   esi
c002b427:	53                   	push   ebx
c002b428:	e8 87 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b42d:	83 c4 10             	add    esp,0x10
c002b430:	84 c0                	test   al,al
c002b432:	0f 84 61 01 00 00    	je     c002b599 <IDE::detect()+0x243>
c002b438:	31 ed                	xor    ebp,ebp
c002b43a:	50                   	push   eax
c002b43b:	6a 0c                	push   0xc
c002b43d:	56                   	push   esi
c002b43e:	53                   	push   ebx
c002b43f:	e8 70 f8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b444:	83 c4 10             	add    esp,0x10
c002b447:	a8 01                	test   al,0x1
c002b449:	0f 85 6b 01 00 00    	jne    c002b5ba <IDE::detect()+0x264>
c002b44f:	a8 80                	test   al,0x80
c002b451:	75 04                	jne    c002b457 <IDE::detect()+0x101>
c002b453:	a8 08                	test   al,0x8
c002b455:	75 23                	jne    c002b47a <IDE::detect()+0x124>
c002b457:	45                   	inc    ebp
c002b458:	81 fd 17 01 00 00    	cmp    ebp,0x117
c002b45e:	7e da                	jle    c002b43a <IDE::detect()+0xe4>
c002b460:	83 ec 0c             	sub    esp,0xc
c002b463:	6a 32                	push   0x32
c002b465:	e8 0a 9f ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002b46a:	83 c4 10             	add    esp,0x10
c002b46d:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c002b473:	75 c5                	jne    c002b43a <IDE::detect()+0xe4>
c002b475:	e9 40 01 00 00       	jmp    c002b5ba <IDE::detect()+0x264>
c002b47a:	31 c9                	xor    ecx,ecx
c002b47c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b480:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c002b484:	83 ec 0c             	sub    esp,0xc
c002b487:	68 80 00 00 00       	push   0x80
c002b48c:	55                   	push   ebp
c002b48d:	6a 00                	push   0x0
c002b48f:	56                   	push   esi
c002b490:	53                   	push   ebx
c002b491:	e8 f0 fd ff ff       	call   c002b286 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b496:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b49b:	89 f8                	mov    eax,edi
c002b49d:	c1 e0 06             	shl    eax,0x6
c002b4a0:	01 d8                	add    eax,ebx
c002b4a2:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b4a9:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b4b0:	89 d1                	mov    ecx,edx
c002b4b2:	89 f2                	mov    edx,esi
c002b4b4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b4ba:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b4be:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b4c4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b4c8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b4cf:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b4d7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b4de:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b4e6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b4ec:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b4f3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b4f9:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b4fd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b501:	83 c4 20             	add    esp,0x20
c002b504:	8a 55 37             	mov    dl,BYTE PTR [ebp+0x37]
c002b507:	83 c5 02             	add    ebp,0x2
c002b50a:	83 c0 02             	add    eax,0x2
c002b50d:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b513:	8a 55 34             	mov    dl,BYTE PTR [ebp+0x34]
c002b516:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b51c:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c002b520:	75 e2                	jne    c002b504 <IDE::detect()+0x1ae>
c002b522:	89 f8                	mov    eax,edi
c002b524:	c1 e0 06             	shl    eax,0x6
c002b527:	01 d8                	add    eax,ebx
c002b529:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b530:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b537:	c1 ea 09             	shr    edx,0x9
c002b53a:	83 e2 01             	and    edx,0x1
c002b53d:	80 e1 01             	and    cl,0x1
c002b540:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b546:	75 22                	jne    c002b56a <IDE::detect()+0x214>
c002b548:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b54f:	74 47                	je     c002b598 <IDE::detect()+0x242>
c002b551:	83 ec 0c             	sub    esp,0xc
c002b554:	68 7c 01 00 00       	push   0x17c
c002b559:	e8 85 ae fe ff       	call   c00163e3 <malloc>
c002b55e:	89 04 24             	mov    DWORD PTR [esp],eax
c002b561:	89 c5                	mov    ebp,eax
c002b563:	e8 2a 05 00 00       	call   c002ba92 <ATA::ATA()>
c002b568:	eb 17                	jmp    c002b581 <IDE::detect()+0x22b>
c002b56a:	83 ec 0c             	sub    esp,0xc
c002b56d:	68 84 01 00 00       	push   0x184
c002b572:	e8 6c ae fe ff       	call   c00163e3 <malloc>
c002b577:	89 04 24             	mov    DWORD PTR [esp],eax
c002b57a:	89 c5                	mov    ebp,eax
c002b57c:	e8 83 0e 00 00       	call   c002c404 <ATAPI::ATAPI()>
c002b581:	5a                   	pop    edx
c002b582:	59                   	pop    ecx
c002b583:	55                   	push   ebp
c002b584:	53                   	push   ebx
c002b585:	e8 26 fd fe ff       	call   c001b2b0 <Device::addChild(Device*)>
c002b58a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002b58d:	53                   	push   ebx
c002b58e:	57                   	push   edi
c002b58f:	6a 00                	push   0x0
c002b591:	55                   	push   ebp
c002b592:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b595:	83 c4 20             	add    esp,0x20
c002b598:	47                   	inc    edi
c002b599:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b59e:	74 0d                	je     c002b5ad <IDE::detect()+0x257>
c002b5a0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b5a8:	e9 da fd ff ff       	jmp    c002b387 <IDE::detect()+0x31>
c002b5ad:	4e                   	dec    esi
c002b5ae:	74 62                	je     c002b612 <IDE::detect()+0x2bc>
c002b5b0:	be 01 00 00 00       	mov    esi,0x1
c002b5b5:	e9 c5 fd ff ff       	jmp    c002b37f <IDE::detect()+0x29>
c002b5ba:	50                   	push   eax
c002b5bb:	6a 04                	push   0x4
c002b5bd:	56                   	push   esi
c002b5be:	53                   	push   ebx
c002b5bf:	e8 f0 f6 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b5c4:	83 c4 0c             	add    esp,0xc
c002b5c7:	6a 05                	push   0x5
c002b5c9:	56                   	push   esi
c002b5ca:	53                   	push   ebx
c002b5cb:	89 c5                	mov    ebp,eax
c002b5cd:	e8 e2 f6 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b5d2:	89 e9                	mov    ecx,ebp
c002b5d4:	83 c4 10             	add    esp,0x10
c002b5d7:	0f b6 e9             	movzx  ebp,cl
c002b5da:	83 fd 14             	cmp    ebp,0x14
c002b5dd:	74 2d                	je     c002b60c <IDE::detect()+0x2b6>
c002b5df:	83 fd 69             	cmp    ebp,0x69
c002b5e2:	75 b5                	jne    c002b599 <IDE::detect()+0x243>
c002b5e4:	3c 96                	cmp    al,0x96
c002b5e6:	75 b1                	jne    c002b599 <IDE::detect()+0x243>
c002b5e8:	68 a1 00 00 00       	push   0xa1
c002b5ed:	6a 07                	push   0x7
c002b5ef:	56                   	push   esi
c002b5f0:	53                   	push   ebx
c002b5f1:	e8 fe f5 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b5f6:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b5fd:	e8 72 9d ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002b602:	83 c4 10             	add    esp,0x10
c002b605:	b1 01                	mov    cl,0x1
c002b607:	e9 70 fe ff ff       	jmp    c002b47c <IDE::detect()+0x126>
c002b60c:	3c eb                	cmp    al,0xeb
c002b60e:	75 cf                	jne    c002b5df <IDE::detect()+0x289>
c002b610:	eb d6                	jmp    c002b5e8 <IDE::detect()+0x292>
c002b612:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b618:	5b                   	pop    ebx
c002b619:	5e                   	pop    esi
c002b61a:	5f                   	pop    edi
c002b61b:	5d                   	pop    ebp
c002b61c:	c3                   	ret    
c002b61d:	90                   	nop

c002b61e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b61e:	55                   	push   ebp
c002b61f:	57                   	push   edi
c002b620:	56                   	push   esi
c002b621:	53                   	push   ebx
c002b622:	83 ec 1c             	sub    esp,0x1c
c002b625:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b629:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b62d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b631:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b635:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b639:	88 c3                	mov    bl,al
c002b63b:	25 ff 00 00 00       	and    eax,0xff
c002b640:	0f 84 88 00 00 00    	je     c002b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b646:	83 ec 0c             	sub    esp,0xc
c002b649:	89 c7                	mov    edi,eax
c002b64b:	68 c7 36 03 c0       	push   0xc00336c7
c002b650:	e8 c5 db fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002b655:	83 c4 10             	add    esp,0x10
c002b658:	83 ff 01             	cmp    edi,0x1
c002b65b:	74 6b                	je     c002b6c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b65d:	83 ff 02             	cmp    edi,0x2
c002b660:	75 58                	jne    c002b6ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b662:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b667:	50                   	push   eax
c002b668:	6a 01                	push   0x1
c002b66a:	01 ff                	add    edi,edi
c002b66c:	09 fe                	or     esi,edi
c002b66e:	89 f0                	mov    eax,esi
c002b670:	0f b6 f0             	movzx  esi,al
c002b673:	c1 e6 06             	shl    esi,0x6
c002b676:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b67e:	50                   	push   eax
c002b67f:	55                   	push   ebp
c002b680:	e8 2f f6 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b685:	83 c4 10             	add    esp,0x10
c002b688:	a8 01                	test   al,0x1
c002b68a:	74 02                	je     c002b68e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b68c:	b3 07                	mov    bl,0x7
c002b68e:	a8 02                	test   al,0x2
c002b690:	74 02                	je     c002b694 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b692:	b3 03                	mov    bl,0x3
c002b694:	a8 04                	test   al,0x4
c002b696:	74 02                	je     c002b69a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b698:	b3 14                	mov    bl,0x14
c002b69a:	a8 08                	test   al,0x8
c002b69c:	74 02                	je     c002b6a0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b69e:	b3 03                	mov    bl,0x3
c002b6a0:	a8 10                	test   al,0x10
c002b6a2:	74 02                	je     c002b6a6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b6a4:	b3 15                	mov    bl,0x15
c002b6a6:	a8 20                	test   al,0x20
c002b6a8:	74 02                	je     c002b6ac <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b6aa:	b3 03                	mov    bl,0x3
c002b6ac:	a8 40                	test   al,0x40
c002b6ae:	74 02                	je     c002b6b2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b6b0:	b3 16                	mov    bl,0x16
c002b6b2:	a8 80                	test   al,0x80
c002b6b4:	74 18                	je     c002b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6b6:	b3 0d                	mov    bl,0xd
c002b6b8:	eb 14                	jmp    c002b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6ba:	83 ff 03             	cmp    edi,0x3
c002b6bd:	74 0d                	je     c002b6cc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b6bf:	83 ff 04             	cmp    edi,0x4
c002b6c2:	75 0a                	jne    c002b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6c4:	b3 08                	mov    bl,0x8
c002b6c6:	eb 06                	jmp    c002b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6c8:	b3 13                	mov    bl,0x13
c002b6ca:	eb 02                	jmp    c002b6ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b6cc:	b3 17                	mov    bl,0x17
c002b6ce:	83 c4 1c             	add    esp,0x1c
c002b6d1:	88 d8                	mov    al,bl
c002b6d3:	5b                   	pop    ebx
c002b6d4:	5e                   	pop    esi
c002b6d5:	5f                   	pop    edi
c002b6d6:	5d                   	pop    ebp
c002b6d7:	c3                   	ret    

c002b6d8 <IDE::polling(unsigned char, unsigned int)>:
c002b6d8:	57                   	push   edi
c002b6d9:	56                   	push   esi
c002b6da:	53                   	push   ebx
c002b6db:	bb 04 00 00 00       	mov    ebx,0x4
c002b6e0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b6e4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b6e9:	52                   	push   edx
c002b6ea:	6a 0c                	push   0xc
c002b6ec:	56                   	push   esi
c002b6ed:	57                   	push   edi
c002b6ee:	e8 c1 f5 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b6f3:	83 c4 10             	add    esp,0x10
c002b6f6:	4b                   	dec    ebx
c002b6f7:	75 f0                	jne    c002b6e9 <IDE::polling(unsigned char, unsigned int)+0x11>
c002b6f9:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b6fe:	50                   	push   eax
c002b6ff:	6a 0c                	push   0xc
c002b701:	56                   	push   esi
c002b702:	57                   	push   edi
c002b703:	e8 ac f5 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002b708:	83 c4 10             	add    esp,0x10
c002b70b:	a8 01                	test   al,0x1
c002b70d:	75 17                	jne    c002b726 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b70f:	a8 20                	test   al,0x20
c002b711:	75 0f                	jne    c002b722 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b713:	4b                   	dec    ebx
c002b714:	74 10                	je     c002b726 <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b716:	a8 80                	test   al,0x80
c002b718:	75 e4                	jne    c002b6fe <IDE::polling(unsigned char, unsigned int)+0x26>
c002b71a:	a8 08                	test   al,0x8
c002b71c:	74 e0                	je     c002b6fe <IDE::polling(unsigned char, unsigned int)+0x26>
c002b71e:	31 c0                	xor    eax,eax
c002b720:	eb 06                	jmp    c002b728 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b722:	b0 01                	mov    al,0x1
c002b724:	eb 02                	jmp    c002b728 <IDE::polling(unsigned char, unsigned int)+0x50>
c002b726:	b0 02                	mov    al,0x2
c002b728:	5b                   	pop    ebx
c002b729:	5e                   	pop    esi
c002b72a:	5f                   	pop    edi
c002b72b:	c3                   	ret    

c002b72c <SATABus::close(int, int, void*)>:
c002b72c:	31 c0                	xor    eax,eax
c002b72e:	c3                   	ret    
c002b72f:	90                   	nop

c002b730 <SATABus::detect()>:
c002b730:	c3                   	ret    
c002b731:	90                   	nop

c002b732 <SATABus::SATABus()>:
c002b732:	83 ec 0c             	sub    esp,0xc
c002b735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b739:	83 ec 08             	sub    esp,0x8
c002b73c:	68 00 37 03 c0       	push   0xc0033700
c002b741:	50                   	push   eax
c002b742:	e8 c1 fe fe ff       	call   c001b608 <HardDiskController::HardDiskController(char const*)>
c002b747:	83 c4 10             	add    esp,0x10
c002b74a:	ba 2c 37 03 c0       	mov    edx,0xc003372c
c002b74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b753:	89 10                	mov    DWORD PTR [eax],edx
c002b755:	83 ec 0c             	sub    esp,0xc
c002b758:	6a 50                	push   0x50
c002b75a:	e8 62 b0 fe ff       	call   c00167c1 <Phys::allocateContiguousPages(int)>
c002b75f:	83 c4 10             	add    esp,0x10
c002b762:	89 c2                	mov    edx,eax
c002b764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b768:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b76e:	83 ec 0c             	sub    esp,0xc
c002b771:	6a 50                	push   0x50
c002b773:	e8 8d c7 fe ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c002b778:	83 c4 10             	add    esp,0x10
c002b77b:	89 c2                	mov    edx,eax
c002b77d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b781:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b787:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b78c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b790:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b796:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b79a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b7a0:	83 ec 0c             	sub    esp,0xc
c002b7a3:	6a 03                	push   0x3
c002b7a5:	6a 50                	push   0x50
c002b7a7:	51                   	push   ecx
c002b7a8:	52                   	push   edx
c002b7a9:	50                   	push   eax
c002b7aa:	e8 69 d0 fe ff       	call   c0018818 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b7af:	83 c4 20             	add    esp,0x20
c002b7b2:	90                   	nop
c002b7b3:	83 c4 0c             	add    esp,0xc
c002b7b6:	c3                   	ret    
c002b7b7:	90                   	nop

c002b7b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b7b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b7bc:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b7bf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b7c2:	09 c2                	or     edx,eax
c002b7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b7c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b7ce:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b7d0:	31 c0                	xor    eax,eax
c002b7d2:	c1 e9 08             	shr    ecx,0x8
c002b7d5:	83 e1 0f             	and    ecx,0xf
c002b7d8:	39 c8                	cmp    eax,ecx
c002b7da:	74 0a                	je     c002b7e6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b7dc:	f6 c2 01             	test   dl,0x1
c002b7df:	74 08                	je     c002b7e9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b7e1:	d1 ea                	shr    edx,1
c002b7e3:	40                   	inc    eax
c002b7e4:	eb f2                	jmp    c002b7d8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b7e6:	83 c8 ff             	or     eax,0xffffffff
c002b7e9:	c3                   	ret    

c002b7ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b7ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b7ee:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b7f1:	89 c2                	mov    edx,eax
c002b7f3:	c1 ea 08             	shr    edx,0x8
c002b7f6:	83 e2 0f             	and    edx,0xf
c002b7f9:	4a                   	dec    edx
c002b7fa:	75 32                	jne    c002b82e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b7fc:	83 e0 0f             	and    eax,0xf
c002b7ff:	83 f8 03             	cmp    eax,0x3
c002b802:	75 2a                	jne    c002b82e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b804:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b807:	b8 02 00 00 00       	mov    eax,0x2
c002b80c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b812:	74 1c                	je     c002b830 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b814:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b81a:	b8 04 00 00 00       	mov    eax,0x4
c002b81f:	74 0f                	je     c002b830 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b821:	31 c0                	xor    eax,eax
c002b823:	83 fa 03             	cmp    edx,0x3
c002b826:	0f 94 c0             	sete   al
c002b829:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b82d:	c3                   	ret    
c002b82e:	31 c0                	xor    eax,eax
c002b830:	c3                   	ret    
c002b831:	90                   	nop

c002b832 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b836:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b839:	0f ba e2 0f          	bt     edx,0xf
c002b83d:	72 f7                	jb     c002b836 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b83f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b842:	83 ca 10             	or     edx,0x10
c002b845:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b848:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b84b:	83 ca 01             	or     edx,0x1
c002b84e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b851:	c3                   	ret    

c002b852 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b852:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b856:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b859:	83 e2 fe             	and    edx,0xfffffffe
c002b85c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b85f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b862:	83 e2 ef             	and    edx,0xffffffef
c002b865:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b868:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b86b:	0f ba e2 0e          	bt     edx,0xe
c002b86f:	72 f7                	jb     c002b868 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b871:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b874:	0f ba e2 0f          	bt     edx,0xf
c002b878:	72 ee                	jb     c002b868 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b87a:	c3                   	ret    
c002b87b:	90                   	nop

c002b87c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b87c:	55                   	push   ebp
c002b87d:	57                   	push   edi
c002b87e:	56                   	push   esi
c002b87f:	53                   	push   ebx
c002b880:	83 ec 1c             	sub    esp,0x1c
c002b883:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b887:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002b88b:	53                   	push   ebx
c002b88c:	57                   	push   edi
c002b88d:	e8 c0 ff ff ff       	call   c002b852 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b892:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b896:	83 ec 0c             	sub    esp,0xc
c002b899:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b89f:	c1 e5 0a             	shl    ebp,0xa
c002b8a2:	01 e8                	add    eax,ebp
c002b8a4:	89 03                	mov    DWORD PTR [ebx],eax
c002b8a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b8a8:	68 00 04 00 00       	push   0x400
c002b8ad:	6a 00                	push   0x0
c002b8af:	50                   	push   eax
c002b8b0:	e8 3b 4c fd ff       	call   c00004f0 <memset>
c002b8b5:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b8bb:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c002b8bf:	83 c4 1c             	add    esp,0x1c
c002b8c2:	01 e8                	add    eax,ebp
c002b8c4:	89 03                	mov    DWORD PTR [ebx],eax
c002b8c6:	c1 e6 08             	shl    esi,0x8
c002b8c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b8d0:	81 c6 00 80 00 00    	add    esi,0x8000
c002b8d6:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b8dc:	01 f0                	add    eax,esi
c002b8de:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b8e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b8e4:	68 00 01 00 00       	push   0x100
c002b8e9:	6a 00                	push   0x0
c002b8eb:	50                   	push   eax
c002b8ec:	e8 ff 4b fd ff       	call   c00004f0 <memset>
c002b8f1:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b8f7:	31 d2                	xor    edx,edx
c002b8f9:	01 f0                	add    eax,esi
c002b8fb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b8fe:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b905:	8b b7 58 01 00 00    	mov    esi,DWORD PTR [edi+0x158]
c002b90b:	01 ee                	add    esi,ebp
c002b90d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002b911:	83 c4 10             	add    esp,0x10
c002b914:	c1 e5 0d             	shl    ebp,0xd
c002b917:	81 c5 00 a0 00 00    	add    ebp,0xa000
c002b91d:	66 c7 46 02 08 00    	mov    WORD PTR [esi+0x2],0x8
c002b923:	83 c6 20             	add    esi,0x20
c002b926:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002b92a:	8b 87 58 01 00 00    	mov    eax,DWORD PTR [edi+0x158]
c002b930:	01 e8                	add    eax,ebp
c002b932:	01 d0                	add    eax,edx
c002b934:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002b937:	52                   	push   edx
c002b938:	68 00 01 00 00       	push   0x100
c002b93d:	6a 00                	push   0x0
c002b93f:	50                   	push   eax
c002b940:	e8 ab 4b fd ff       	call   c00004f0 <memset>
c002b945:	8b 87 5c 01 00 00    	mov    eax,DWORD PTR [edi+0x15c]
c002b94b:	c7 46 ec 00 00 00 00 	mov    DWORD PTR [esi-0x14],0x0
c002b952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002b956:	83 c4 10             	add    esp,0x10
c002b959:	01 e8                	add    eax,ebp
c002b95b:	01 d0                	add    eax,edx
c002b95d:	81 c2 00 01 00 00    	add    edx,0x100
c002b963:	89 46 e8             	mov    DWORD PTR [esi-0x18],eax
c002b966:	81 fa 00 20 00 00    	cmp    edx,0x2000
c002b96c:	75 af                	jne    c002b91d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa1>
c002b96e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b975:	50                   	push   eax
c002b976:	50                   	push   eax
c002b977:	53                   	push   ebx
c002b978:	57                   	push   edi
c002b979:	e8 b4 fe ff ff       	call   c002b832 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002b97e:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b985:	83 c4 2c             	add    esp,0x2c
c002b988:	5b                   	pop    ebx
c002b989:	5e                   	pop    esi
c002b98a:	5f                   	pop    edi
c002b98b:	5d                   	pop    ebp
c002b98c:	c3                   	ret    
c002b98d:	90                   	nop

c002b98e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002b98e:	55                   	push   ebp
c002b98f:	57                   	push   edi
c002b990:	56                   	push   esi
c002b991:	53                   	push   ebx
c002b992:	31 db                	xor    ebx,ebx
c002b994:	83 ec 0c             	sub    esp,0xc
c002b997:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002b99b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002b99f:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002b9a2:	f7 c7 01 00 00 00    	test   edi,0x1
c002b9a8:	74 7a                	je     c002ba24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b9aa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b9ae:	89 d8                	mov    eax,ebx
c002b9b0:	c1 e0 07             	shl    eax,0x7
c002b9b3:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002b9ba:	55                   	push   ebp
c002b9bb:	56                   	push   esi
c002b9bc:	e8 29 fe ff ff       	call   c002b7ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002b9c1:	5a                   	pop    edx
c002b9c2:	59                   	pop    ecx
c002b9c3:	83 f8 01             	cmp    eax,0x1
c002b9c6:	75 21                	jne    c002b9e9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002b9c8:	50                   	push   eax
c002b9c9:	53                   	push   ebx
c002b9ca:	55                   	push   ebp
c002b9cb:	56                   	push   esi
c002b9cc:	e8 ab fe ff ff       	call   c002b87c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b9d1:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002b9d8:	e8 06 aa fe ff       	call   c00163e3 <malloc>
c002b9dd:	89 04 24             	mov    DWORD PTR [esp],eax
c002b9e0:	89 c5                	mov    ebp,eax
c002b9e2:	e8 e3 10 00 00       	call   c002caca <SATA::SATA()>
c002b9e7:	eb 24                	jmp    c002ba0d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002b9e9:	83 f8 04             	cmp    eax,0x4
c002b9ec:	75 36                	jne    c002ba24 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b9ee:	51                   	push   ecx
c002b9ef:	53                   	push   ebx
c002b9f0:	55                   	push   ebp
c002b9f1:	56                   	push   esi
c002b9f2:	e8 85 fe ff ff       	call   c002b87c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b9f7:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002b9fe:	e8 e0 a9 fe ff       	call   c00163e3 <malloc>
c002ba03:	89 04 24             	mov    DWORD PTR [esp],eax
c002ba06:	89 c5                	mov    ebp,eax
c002ba08:	e8 4b 18 00 00       	call   c002d258 <SATAPI::SATAPI()>
c002ba0d:	58                   	pop    eax
c002ba0e:	5a                   	pop    edx
c002ba0f:	55                   	push   ebp
c002ba10:	56                   	push   esi
c002ba11:	e8 9a f8 fe ff       	call   c001b2b0 <Device::addChild(Device*)>
c002ba16:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002ba19:	56                   	push   esi
c002ba1a:	6a 00                	push   0x0
c002ba1c:	53                   	push   ebx
c002ba1d:	55                   	push   ebp
c002ba1e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002ba21:	83 c4 20             	add    esp,0x20
c002ba24:	d1 ef                	shr    edi,1
c002ba26:	43                   	inc    ebx
c002ba27:	83 fb 20             	cmp    ebx,0x20
c002ba2a:	0f 85 72 ff ff ff    	jne    c002b9a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002ba30:	83 c4 0c             	add    esp,0xc
c002ba33:	5b                   	pop    ebx
c002ba34:	5e                   	pop    esi
c002ba35:	5f                   	pop    edi
c002ba36:	5d                   	pop    ebp
c002ba37:	c3                   	ret    

c002ba38 <SATABus::open(int, int, void*)>:
c002ba38:	53                   	push   ebx
c002ba39:	83 ec 08             	sub    esp,0x8
c002ba3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002ba40:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002ba46:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002ba4c:	e8 b7 94 ff ff       	call   c0024f08 <KeDisablePreemption()>
c002ba51:	52                   	push   edx
c002ba52:	52                   	push   edx
c002ba53:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002ba59:	53                   	push   ebx
c002ba5a:	e8 2f ff ff ff       	call   c002b98e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002ba5f:	e8 cc 94 ff ff       	call   c0024f30 <KeRestorePreemption()>
c002ba64:	83 c4 18             	add    esp,0x18
c002ba67:	31 c0                	xor    eax,eax
c002ba69:	5b                   	pop    ebx
c002ba6a:	c3                   	ret    
c002ba6b:	90                   	nop

c002ba6c <ATA::close(int, int, void*)>:
c002ba6c:	83 ec 0c             	sub    esp,0xc
c002ba6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba73:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ba79:	85 c0                	test   eax,eax
c002ba7b:	74 0c                	je     c002ba89 <ATA::close(int, int, void*)+0x1d>
c002ba7d:	8b 10                	mov    edx,DWORD PTR [eax]
c002ba7f:	83 ec 0c             	sub    esp,0xc
c002ba82:	50                   	push   eax
c002ba83:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ba86:	83 c4 10             	add    esp,0x10
c002ba89:	31 c0                	xor    eax,eax
c002ba8b:	83 c4 0c             	add    esp,0xc
c002ba8e:	c3                   	ret    
c002ba8f:	90                   	nop

c002ba90 <ATA::powerSaving(PowerSavingLevel)>:
c002ba90:	c3                   	ret    
c002ba91:	90                   	nop

c002ba92 <ATA::ATA()>:
c002ba92:	83 ec 0c             	sub    esp,0xc
c002ba95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba99:	83 ec 04             	sub    esp,0x4
c002ba9c:	68 00 02 00 00       	push   0x200
c002baa1:	68 05 38 03 c0       	push   0xc0033805
c002baa6:	50                   	push   eax
c002baa7:	e8 e6 fb fe ff       	call   c001b692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002baac:	83 c4 10             	add    esp,0x10
c002baaf:	ba 6c 37 03 c0       	mov    edx,0xc003376c
c002bab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002bab8:	89 10                	mov    DWORD PTR [eax],edx
c002baba:	90                   	nop
c002babb:	83 c4 0c             	add    esp,0xc
c002babe:	c3                   	ret    
c002babf:	90                   	nop

c002bac0 <ATA::flush(bool)>:
c002bac0:	53                   	push   ebx
c002bac1:	83 ec 08             	sub    esp,0x8
c002bac4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002bac9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bacd:	83 f8 01             	cmp    eax,0x1
c002bad0:	19 c0                	sbb    eax,eax
c002bad2:	83 e0 fd             	and    eax,0xfffffffd
c002bad5:	05 ea 00 00 00       	add    eax,0xea
c002bada:	50                   	push   eax
c002badb:	6a 07                	push   0x7
c002badd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bae4:	50                   	push   eax
c002bae5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002baeb:	e8 04 f1 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002baf0:	83 c4 0c             	add    esp,0xc
c002baf3:	6a 00                	push   0x0
c002baf5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bafc:	50                   	push   eax
c002bafd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bb03:	e8 d0 fb ff ff       	call   c002b6d8 <IDE::polling(unsigned char, unsigned int)>
c002bb08:	83 c4 18             	add    esp,0x18
c002bb0b:	5b                   	pop    ebx
c002bb0c:	c3                   	ret    
c002bb0d:	90                   	nop

c002bb0e <ATA::readyForCommand()>:
c002bb0e:	56                   	push   esi
c002bb0f:	53                   	push   ebx
c002bb10:	53                   	push   ebx
c002bb11:	31 db                	xor    ebx,ebx
c002bb13:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bb17:	51                   	push   ecx
c002bb18:	6a 0c                	push   0xc
c002bb1a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bb21:	50                   	push   eax
c002bb22:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bb28:	e8 87 f1 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002bb2d:	83 c4 10             	add    esp,0x10
c002bb30:	a8 88                	test   al,0x88
c002bb32:	74 1f                	je     c002bb53 <ATA::readyForCommand()+0x45>
c002bb34:	43                   	inc    ebx
c002bb35:	83 fb 63             	cmp    ebx,0x63
c002bb38:	7e dd                	jle    c002bb17 <ATA::readyForCommand()+0x9>
c002bb3a:	83 ec 0c             	sub    esp,0xc
c002bb3d:	6a 0a                	push   0xa
c002bb3f:	e8 30 98 ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002bb44:	83 c4 10             	add    esp,0x10
c002bb47:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002bb4d:	75 c8                	jne    c002bb17 <ATA::readyForCommand()+0x9>
c002bb4f:	31 c0                	xor    eax,eax
c002bb51:	eb 02                	jmp    c002bb55 <ATA::readyForCommand()+0x47>
c002bb53:	b0 01                	mov    al,0x1
c002bb55:	5a                   	pop    edx
c002bb56:	5b                   	pop    ebx
c002bb57:	5e                   	pop    esi
c002bb58:	c3                   	ret    
c002bb59:	90                   	nop

c002bb5a <ATA::access(unsigned long long, int, void*, bool)>:
c002bb5a:	55                   	push   ebp
c002bb5b:	57                   	push   edi
c002bb5c:	56                   	push   esi
c002bb5d:	53                   	push   ebx
c002bb5e:	83 ec 2c             	sub    esp,0x2c
c002bb61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bb65:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bb69:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bb6d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bb71:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bb75:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bb79:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002bb7d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bb83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bb87:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bb8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bb91:	c1 e0 06             	shl    eax,0x6
c002bb94:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bb9c:	74 5b                	je     c002bbf9 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c002bb9e:	89 fa                	mov    edx,edi
c002bba0:	89 f0                	mov    eax,esi
c002bba2:	c1 ea 1c             	shr    edx,0x1c
c002bba5:	0f ac f8 1c          	shrd   eax,edi,0x1c
c002bba9:	89 d1                	mov    ecx,edx
c002bbab:	09 c1                	or     ecx,eax
c002bbad:	74 25                	je     c002bbd4 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bbaf:	31 ed                	xor    ebp,ebp
c002bbb1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bbb8:	89 fa                	mov    edx,edi
c002bbba:	89 f0                	mov    eax,esi
c002bbbc:	0f ad d0             	shrd   eax,edx,cl
c002bbbf:	d3 ea                	shr    edx,cl
c002bbc1:	f6 c1 20             	test   cl,0x20
c002bbc4:	74 02                	je     c002bbc8 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bbc6:	89 d0                	mov    eax,edx
c002bbc8:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bbcc:	45                   	inc    ebp
c002bbcd:	83 fd 06             	cmp    ebp,0x6
c002bbd0:	75 df                	jne    c002bbb1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bbd2:	eb 71                	jmp    c002bc45 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c002bbd4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bbd9:	89 f0                	mov    eax,esi
c002bbdb:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bbe2:	0f ac f8 10          	shrd   eax,edi,0x10
c002bbe6:	bf 01 00 00 00       	mov    edi,0x1
c002bbeb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bbef:	c1 ee 18             	shr    esi,0x18
c002bbf2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bbf7:	eb 53                	jmp    c002bc4c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bbf9:	6a 00                	push   0x0
c002bbfb:	6a 3f                	push   0x3f
c002bbfd:	57                   	push   edi
c002bbfe:	56                   	push   esi
c002bbff:	e8 fc 2a 00 00       	call   c002e700 <__umoddi3>
c002bc04:	83 c4 10             	add    esp,0x10
c002bc07:	40                   	inc    eax
c002bc08:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bc0c:	6a 00                	push   0x0
c002bc0e:	68 f0 03 00 00       	push   0x3f0
c002bc13:	57                   	push   edi
c002bc14:	56                   	push   esi
c002bc15:	e8 e6 29 00 00       	call   c002e600 <__udivdi3>
c002bc1a:	83 c4 10             	add    esp,0x10
c002bc1d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bc22:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bc29:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bc2e:	6a 00                	push   0x0
c002bc30:	6a 3f                	push   0x3f
c002bc32:	57                   	push   edi
c002bc33:	31 ff                	xor    edi,edi
c002bc35:	56                   	push   esi
c002bc36:	e8 c5 29 00 00       	call   c002e600 <__udivdi3>
c002bc3b:	83 c4 10             	add    esp,0x10
c002bc3e:	83 e0 0f             	and    eax,0xf
c002bc41:	89 c6                	mov    esi,eax
c002bc43:	eb 07                	jmp    c002bc4c <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c002bc45:	31 f6                	xor    esi,esi
c002bc47:	bf 02 00 00 00       	mov    edi,0x2
c002bc4c:	50                   	push   eax
c002bc4d:	6a 00                	push   0x0
c002bc4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc56:	50                   	push   eax
c002bc57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bc5b:	e8 a2 f1 ff ff       	call   c002ae02 <IDE::enableIRQs(unsigned char, bool)>
c002bc60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bc63:	e8 a6 fe ff ff       	call   c002bb0e <ATA::readyForCommand()>
c002bc68:	83 c4 10             	add    esp,0x10
c002bc6b:	84 c0                	test   al,al
c002bc6d:	75 0a                	jne    c002bc79 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c002bc6f:	be 01 00 00 00       	mov    esi,0x1
c002bc74:	e9 9b 02 00 00       	jmp    c002bf14 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002bc79:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bc7f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bc85:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bc8c:	c1 e0 04             	shl    eax,0x4
c002bc8f:	09 c6                	or     esi,eax
c002bc91:	f7 c7 03 00 00 00    	test   edi,0x3
c002bc97:	75 05                	jne    c002bc9e <ATA::access(unsigned long long, int, void*, bool)+0x144>
c002bc99:	83 ce a0             	or     esi,0xffffffa0
c002bc9c:	eb 03                	jmp    c002bca1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bc9e:	83 ce e0             	or     esi,0xffffffe0
c002bca1:	89 f0                	mov    eax,esi
c002bca3:	0f b6 f0             	movzx  esi,al
c002bca6:	56                   	push   esi
c002bca7:	6a 06                	push   0x6
c002bca9:	51                   	push   ecx
c002bcaa:	52                   	push   edx
c002bcab:	e8 44 ef ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcb0:	83 c4 10             	add    esp,0x10
c002bcb3:	6a 00                	push   0x0
c002bcb5:	6a 01                	push   0x1
c002bcb7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcbe:	50                   	push   eax
c002bcbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcc5:	e8 2a ef ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcca:	89 f8                	mov    eax,edi
c002bccc:	83 c4 10             	add    esp,0x10
c002bccf:	0f b6 f0             	movzx  esi,al
c002bcd2:	83 fe 02             	cmp    esi,0x2
c002bcd5:	75 6e                	jne    c002bd45 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002bcd7:	6a 00                	push   0x0
c002bcd9:	6a 08                	push   0x8
c002bcdb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bce2:	50                   	push   eax
c002bce3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bce9:	e8 06 ef ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcee:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bcf3:	50                   	push   eax
c002bcf4:	6a 09                	push   0x9
c002bcf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcfd:	50                   	push   eax
c002bcfe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd04:	e8 eb ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd09:	83 c4 20             	add    esp,0x20
c002bd0c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bd11:	50                   	push   eax
c002bd12:	6a 0a                	push   0xa
c002bd14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd1b:	50                   	push   eax
c002bd1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd22:	e8 cd ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd27:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bd2c:	50                   	push   eax
c002bd2d:	6a 0b                	push   0xb
c002bd2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd36:	50                   	push   eax
c002bd37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd3d:	e8 b2 ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd42:	83 c4 20             	add    esp,0x20
c002bd45:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bd4a:	50                   	push   eax
c002bd4b:	6a 02                	push   0x2
c002bd4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd54:	50                   	push   eax
c002bd55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd5b:	e8 94 ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd60:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002bd65:	50                   	push   eax
c002bd66:	6a 03                	push   0x3
c002bd68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd6f:	50                   	push   eax
c002bd70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd76:	e8 79 ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd7b:	83 c4 20             	add    esp,0x20
c002bd7e:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002bd83:	50                   	push   eax
c002bd84:	6a 04                	push   0x4
c002bd86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd8d:	50                   	push   eax
c002bd8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd94:	e8 5b ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002bd9e:	50                   	push   eax
c002bd9f:	6a 05                	push   0x5
c002bda1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bda8:	50                   	push   eax
c002bda9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdaf:	e8 40 ee ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdb4:	83 c4 20             	add    esp,0x20
c002bdb7:	83 fe 02             	cmp    esi,0x2
c002bdba:	0f 94 44 24 08       	sete   BYTE PTR [esp+0x8]
c002bdbf:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c002bdc4:	85 c9                	test   ecx,ecx
c002bdc6:	74 07                	je     c002bdcf <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002bdc8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bdcd:	75 47                	jne    c002be16 <ATA::access(unsigned long long, int, void*, bool)+0x2bc>
c002bdcf:	89 f8                	mov    eax,edi
c002bdd1:	0f b6 f8             	movzx  edi,al
c002bdd4:	31 c0                	xor    eax,eax
c002bdd6:	83 ff 02             	cmp    edi,0x2
c002bdd9:	0f 95 c0             	setne  al
c002bddc:	89 c6                	mov    esi,eax
c002bdde:	74 0c                	je     c002bdec <ATA::access(unsigned long long, int, void*, bool)+0x292>
c002bde0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bde5:	b8 30 00 00 00       	mov    eax,0x30
c002bdea:	75 2f                	jne    c002be1b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002bdec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bdf0:	83 f2 01             	xor    edx,0x1
c002bdf3:	85 c9                	test   ecx,ecx
c002bdf5:	74 09                	je     c002be00 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c002bdf7:	84 d2                	test   dl,dl
c002bdf9:	b8 24 00 00 00       	mov    eax,0x24
c002bdfe:	75 1b                	jne    c002be1b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002be00:	85 f6                	test   esi,esi
c002be02:	0f 84 67 fe ff ff    	je     c002bc6f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002be08:	84 d2                	test   dl,dl
c002be0a:	b8 20 00 00 00       	mov    eax,0x20
c002be0f:	75 0a                	jne    c002be1b <ATA::access(unsigned long long, int, void*, bool)+0x2c1>
c002be11:	e9 59 fe ff ff       	jmp    c002bc6f <ATA::access(unsigned long long, int, void*, bool)+0x115>
c002be16:	b8 34 00 00 00       	mov    eax,0x34
c002be1b:	50                   	push   eax
c002be1c:	6a 07                	push   0x7
c002be1e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be25:	50                   	push   eax
c002be26:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be2c:	e8 c3 ed ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002be31:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002be35:	83 c4 10             	add    esp,0x10
c002be38:	0f b6 6c 24 0e       	movzx  ebp,BYTE PTR [esp+0xe]
c002be3d:	85 f6                	test   esi,esi
c002be3f:	0f 84 b5 00 00 00    	je     c002befa <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c002be45:	50                   	push   eax
c002be46:	6a 01                	push   0x1
c002be48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be4f:	50                   	push   eax
c002be50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be56:	e8 7d f8 ff ff       	call   c002b6d8 <IDE::polling(unsigned char, unsigned int)>
c002be5b:	83 c4 10             	add    esp,0x10
c002be5e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002be64:	0f b6 c0             	movzx  eax,al
c002be67:	85 c0                	test   eax,eax
c002be69:	74 1f                	je     c002be8a <ATA::access(unsigned long long, int, void*, bool)+0x330>
c002be6b:	50                   	push   eax
c002be6c:	89 c6                	mov    esi,eax
c002be6e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002be75:	0f b6 d2             	movzx  edx,dl
c002be78:	50                   	push   eax
c002be79:	52                   	push   edx
c002be7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be80:	e8 99 f7 ff ff       	call   c002b61e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002be85:	e9 87 00 00 00       	jmp    c002bf11 <ATA::access(unsigned long long, int, void*, bool)+0x3b7>
c002be8a:	85 ed                	test   ebp,ebp
c002be8c:	74 3b                	je     c002bec9 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c002be8e:	31 ff                	xor    edi,edi
c002be90:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002be94:	66 8b 04 78          	mov    ax,WORD PTR [eax+edi*2]
c002be98:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c002be9d:	50                   	push   eax
c002be9e:	50                   	push   eax
c002be9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bea6:	50                   	push   eax
c002bea7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bead:	e8 30 ed ff ff       	call   c002abe2 <IDE::getBase(unsigned char)>
c002beb2:	89 c2                	mov    edx,eax
c002beb4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002beb9:	66 ef                	out    dx,ax
c002bebb:	47                   	inc    edi
c002bebc:	83 c4 10             	add    esp,0x10
c002bebf:	81 ff 00 01 00 00    	cmp    edi,0x100
c002bec5:	75 c9                	jne    c002be90 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c002bec7:	eb 23                	jmp    c002beec <ATA::access(unsigned long long, int, void*, bool)+0x392>
c002bec9:	51                   	push   ecx
c002beca:	0f b6 d2             	movzx  edx,dl
c002becd:	51                   	push   ecx
c002bece:	52                   	push   edx
c002becf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bed5:	e8 08 ed ff ff       	call   c002abe2 <IDE::getBase(unsigned char)>
c002beda:	b9 00 01 00 00       	mov    ecx,0x100
c002bedf:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002bee3:	89 c2                	mov    edx,eax
c002bee5:	fc                   	cld    
c002bee6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002bee9:	83 c4 10             	add    esp,0x10
c002beec:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002bef4:	4e                   	dec    esi
c002bef5:	e9 43 ff ff ff       	jmp    c002be3d <ATA::access(unsigned long long, int, void*, bool)+0x2e3>
c002befa:	31 f6                	xor    esi,esi
c002befc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bf01:	74 11                	je     c002bf14 <ATA::access(unsigned long long, int, void*, bool)+0x3ba>
c002bf03:	50                   	push   eax
c002bf04:	50                   	push   eax
c002bf05:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002bf0a:	50                   	push   eax
c002bf0b:	53                   	push   ebx
c002bf0c:	e8 af fb ff ff       	call   c002bac0 <ATA::flush(bool)>
c002bf11:	83 c4 10             	add    esp,0x10
c002bf14:	83 c4 2c             	add    esp,0x2c
c002bf17:	89 f0                	mov    eax,esi
c002bf19:	5b                   	pop    ebx
c002bf1a:	5e                   	pop    esi
c002bf1b:	5f                   	pop    edi
c002bf1c:	5d                   	pop    ebp
c002bf1d:	c3                   	ret    

c002bf1e <ATA::detectCHS()>:
c002bf1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bf22:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002bf28:	c1 e0 06             	shl    eax,0x6
c002bf2b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002bf31:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bf3b:	c7 44 24 04 50 37 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033750
c002bf43:	e9 5a 42 ff ff       	jmp    c00201a2 <KePanic(char const*)>

c002bf48 <ATA::open(int, int, void*)>:
c002bf48:	53                   	push   ebx
c002bf49:	83 ec 08             	sub    esp,0x8
c002bf4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bf50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bf54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bf58:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bf5e:	c1 e0 06             	shl    eax,0x6
c002bf61:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bf67:	01 d0                	add    eax,edx
c002bf69:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bf70:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002bf76:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bf7d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bf87:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bf8e:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bf94:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bf9b:	75 0c                	jne    c002bfa9 <ATA::open(int, int, void*)+0x61>
c002bf9d:	83 ec 0c             	sub    esp,0xc
c002bfa0:	53                   	push   ebx
c002bfa1:	e8 78 ff ff ff       	call   c002bf1e <ATA::detectCHS()>
c002bfa6:	83 c4 10             	add    esp,0x10
c002bfa9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bfaf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bfb5:	c1 e0 06             	shl    eax,0x6
c002bfb8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002bfbf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002bfc9:	d1 e8                	shr    eax,1
c002bfcb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bfd1:	6a 04                	push   0x4
c002bfd3:	6a 0c                	push   0xc
c002bfd5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bfdc:	50                   	push   eax
c002bfdd:	52                   	push   edx
c002bfde:	e8 11 ec ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bfe3:	90                   	nop
c002bfe4:	90                   	nop
c002bfe5:	6a 00                	push   0x0
c002bfe7:	6a 0c                	push   0xc
c002bfe9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bff0:	50                   	push   eax
c002bff1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bff7:	e8 f8 eb ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bffc:	83 c4 14             	add    esp,0x14
c002bfff:	53                   	push   ebx
c002c000:	e8 f5 f6 fe ff       	call   c001b6fa <PhysicalDisk::startCache()>
c002c005:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c008:	e8 31 09 ff ff       	call   c001c93e <createPartitionsForDisk(PhysicalDisk*)>
c002c00d:	83 c4 18             	add    esp,0x18
c002c010:	31 c0                	xor    eax,eax
c002c012:	5b                   	pop    ebx
c002c013:	c3                   	ret    

c002c014 <combineCharAndColour(char, unsigned char)>:
c002c014:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c019:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002c01f:	c1 e0 08             	shl    eax,0x8
c002c022:	09 d0                	or     eax,edx
c002c024:	c3                   	ret    

c002c025 <combineColours(unsigned char, unsigned char)>:
c002c025:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002c02a:	c1 e0 04             	shl    eax,0x4
c002c02d:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002c031:	c3                   	ret    

c002c032 <ATA::read(unsigned long long, int, void*)>:
c002c032:	55                   	push   ebp
c002c033:	57                   	push   edi
c002c034:	56                   	push   esi
c002c035:	be 04 00 00 00       	mov    esi,0x4
c002c03a:	53                   	push   ebx
c002c03b:	83 ec 0c             	sub    esp,0xc
c002c03e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c042:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c046:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c04a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c04e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c051:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c057:	0f 87 a1 01 00 00    	ja     c002c1fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c05d:	85 c9                	test   ecx,ecx
c002c05f:	be 06 00 00 00       	mov    esi,0x6
c002c064:	0f 84 94 01 00 00    	je     c002c1fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c06a:	55                   	push   ebp
c002c06b:	55                   	push   ebp
c002c06c:	6a 00                	push   0x0
c002c06e:	51                   	push   ecx
c002c06f:	53                   	push   ebx
c002c070:	52                   	push   edx
c002c071:	50                   	push   eax
c002c072:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c076:	e8 df fa ff ff       	call   c002bb5a <ATA::access(unsigned long long, int, void*, bool)>
c002c07b:	83 c4 20             	add    esp,0x20
c002c07e:	85 c0                	test   eax,eax
c002c080:	89 c6                	mov    esi,eax
c002c082:	0f 85 71 01 00 00    	jne    c002c1f9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c088:	50                   	push   eax
c002c089:	bd 10 27 00 00       	mov    ebp,0x2710
c002c08e:	50                   	push   eax
c002c08f:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c095:	6a 0f                	push   0xf
c002c097:	6a 00                	push   0x0
c002c099:	89 da                	mov    edx,ebx
c002c09b:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c0a1:	e8 7f ff ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002c0a6:	59                   	pop    ecx
c002c0a7:	b9 0a 00 00 00       	mov    ecx,0xa
c002c0ac:	5b                   	pop    ebx
c002c0ad:	0f b6 d8             	movzx  ebx,al
c002c0b0:	89 d0                	mov    eax,edx
c002c0b2:	53                   	push   ebx
c002c0b3:	99                   	cdq    
c002c0b4:	f7 fd                	idiv   ebp
c002c0b6:	99                   	cdq    
c002c0b7:	f7 f9                	idiv   ecx
c002c0b9:	83 c2 30             	add    edx,0x30
c002c0bc:	0f b6 d2             	movzx  edx,dl
c002c0bf:	52                   	push   edx
c002c0c0:	e8 4f ff ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c0c5:	5f                   	pop    edi
c002c0c6:	bf e8 03 00 00       	mov    edi,0x3e8
c002c0cb:	5a                   	pop    edx
c002c0cc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c0d2:	53                   	push   ebx
c002c0d3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c0d8:	99                   	cdq    
c002c0d9:	f7 ff                	idiv   edi
c002c0db:	99                   	cdq    
c002c0dc:	f7 f9                	idiv   ecx
c002c0de:	8d 42 30             	lea    eax,[edx+0x30]
c002c0e1:	0f b6 c0             	movzx  eax,al
c002c0e4:	50                   	push   eax
c002c0e5:	e8 2a ff ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c0ea:	5f                   	pop    edi
c002c0eb:	bf 64 00 00 00       	mov    edi,0x64
c002c0f0:	5a                   	pop    edx
c002c0f1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c0f7:	53                   	push   ebx
c002c0f8:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c0fd:	99                   	cdq    
c002c0fe:	f7 ff                	idiv   edi
c002c100:	99                   	cdq    
c002c101:	f7 f9                	idiv   ecx
c002c103:	8d 42 30             	lea    eax,[edx+0x30]
c002c106:	0f b6 c0             	movzx  eax,al
c002c109:	50                   	push   eax
c002c10a:	e8 05 ff ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c10f:	5a                   	pop    edx
c002c110:	5a                   	pop    edx
c002c111:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c117:	53                   	push   ebx
c002c118:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c11d:	99                   	cdq    
c002c11e:	f7 f9                	idiv   ecx
c002c120:	99                   	cdq    
c002c121:	f7 f9                	idiv   ecx
c002c123:	8d 42 30             	lea    eax,[edx+0x30]
c002c126:	0f b6 c0             	movzx  eax,al
c002c129:	50                   	push   eax
c002c12a:	e8 e5 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c12f:	5a                   	pop    edx
c002c130:	5a                   	pop    edx
c002c131:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c137:	53                   	push   ebx
c002c138:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c13d:	99                   	cdq    
c002c13e:	f7 f9                	idiv   ecx
c002c140:	83 c2 30             	add    edx,0x30
c002c143:	0f b6 d2             	movzx  edx,dl
c002c146:	52                   	push   edx
c002c147:	e8 c8 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c14c:	5a                   	pop    edx
c002c14d:	5a                   	pop    edx
c002c14e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c154:	53                   	push   ebx
c002c155:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c15a:	99                   	cdq    
c002c15b:	f7 fd                	idiv   ebp
c002c15d:	99                   	cdq    
c002c15e:	f7 f9                	idiv   ecx
c002c160:	8d 42 30             	lea    eax,[edx+0x30]
c002c163:	0f b6 c0             	movzx  eax,al
c002c166:	50                   	push   eax
c002c167:	e8 a8 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c16c:	5d                   	pop    ebp
c002c16d:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c172:	5a                   	pop    edx
c002c173:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c179:	53                   	push   ebx
c002c17a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c17f:	99                   	cdq    
c002c180:	f7 fd                	idiv   ebp
c002c182:	99                   	cdq    
c002c183:	f7 f9                	idiv   ecx
c002c185:	8d 42 30             	lea    eax,[edx+0x30]
c002c188:	0f b6 c0             	movzx  eax,al
c002c18b:	50                   	push   eax
c002c18c:	e8 83 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c191:	5d                   	pop    ebp
c002c192:	5a                   	pop    edx
c002c193:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c199:	53                   	push   ebx
c002c19a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c19f:	99                   	cdq    
c002c1a0:	f7 ff                	idiv   edi
c002c1a2:	99                   	cdq    
c002c1a3:	f7 f9                	idiv   ecx
c002c1a5:	8d 42 30             	lea    eax,[edx+0x30]
c002c1a8:	0f b6 c0             	movzx  eax,al
c002c1ab:	50                   	push   eax
c002c1ac:	e8 63 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c1b1:	5f                   	pop    edi
c002c1b2:	5d                   	pop    ebp
c002c1b3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c1b9:	53                   	push   ebx
c002c1ba:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1bf:	99                   	cdq    
c002c1c0:	f7 f9                	idiv   ecx
c002c1c2:	99                   	cdq    
c002c1c3:	f7 f9                	idiv   ecx
c002c1c5:	8d 42 30             	lea    eax,[edx+0x30]
c002c1c8:	0f b6 c0             	movzx  eax,al
c002c1cb:	50                   	push   eax
c002c1cc:	e8 43 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c1d1:	5a                   	pop    edx
c002c1d2:	5f                   	pop    edi
c002c1d3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c1d9:	53                   	push   ebx
c002c1da:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c1df:	99                   	cdq    
c002c1e0:	f7 f9                	idiv   ecx
c002c1e2:	83 c2 30             	add    edx,0x30
c002c1e5:	0f b6 d2             	movzx  edx,dl
c002c1e8:	52                   	push   edx
c002c1e9:	e8 26 fe ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c1ee:	83 c4 10             	add    esp,0x10
c002c1f1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c1f7:	eb 05                	jmp    c002c1fe <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c1f9:	be 01 00 00 00       	mov    esi,0x1
c002c1fe:	83 c4 0c             	add    esp,0xc
c002c201:	89 f0                	mov    eax,esi
c002c203:	5b                   	pop    ebx
c002c204:	5e                   	pop    esi
c002c205:	5f                   	pop    edi
c002c206:	5d                   	pop    ebp
c002c207:	c3                   	ret    

c002c208 <ATA::write(unsigned long long, int, void*)>:
c002c208:	55                   	push   ebp
c002c209:	57                   	push   edi
c002c20a:	56                   	push   esi
c002c20b:	be 04 00 00 00       	mov    esi,0x4
c002c210:	53                   	push   ebx
c002c211:	83 ec 0c             	sub    esp,0xc
c002c214:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c218:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c21c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c220:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c224:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c227:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c22d:	0f 87 9c 01 00 00    	ja     c002c3cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c233:	85 c9                	test   ecx,ecx
c002c235:	be 06 00 00 00       	mov    esi,0x6
c002c23a:	0f 84 8f 01 00 00    	je     c002c3cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c240:	55                   	push   ebp
c002c241:	55                   	push   ebp
c002c242:	6a 01                	push   0x1
c002c244:	51                   	push   ecx
c002c245:	53                   	push   ebx
c002c246:	52                   	push   edx
c002c247:	50                   	push   eax
c002c248:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c24c:	e8 09 f9 ff ff       	call   c002bb5a <ATA::access(unsigned long long, int, void*, bool)>
c002c251:	83 c4 20             	add    esp,0x20
c002c254:	85 c0                	test   eax,eax
c002c256:	89 c6                	mov    esi,eax
c002c258:	0f 85 6c 01 00 00    	jne    c002c3ca <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c25e:	50                   	push   eax
c002c25f:	bd 10 27 00 00       	mov    ebp,0x2710
c002c264:	50                   	push   eax
c002c265:	6a 0f                	push   0xf
c002c267:	6a 00                	push   0x0
c002c269:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c26f:	e8 b1 fd ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002c274:	5a                   	pop    edx
c002c275:	59                   	pop    ecx
c002c276:	b9 0a 00 00 00       	mov    ecx,0xa
c002c27b:	0f b6 d8             	movzx  ebx,al
c002c27e:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c283:	53                   	push   ebx
c002c284:	99                   	cdq    
c002c285:	f7 fd                	idiv   ebp
c002c287:	99                   	cdq    
c002c288:	f7 f9                	idiv   ecx
c002c28a:	8d 42 30             	lea    eax,[edx+0x30]
c002c28d:	0f b6 c0             	movzx  eax,al
c002c290:	50                   	push   eax
c002c291:	e8 7e fd ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c296:	5f                   	pop    edi
c002c297:	bf e8 03 00 00       	mov    edi,0x3e8
c002c29c:	5a                   	pop    edx
c002c29d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c2a3:	53                   	push   ebx
c002c2a4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2a9:	99                   	cdq    
c002c2aa:	f7 ff                	idiv   edi
c002c2ac:	99                   	cdq    
c002c2ad:	f7 f9                	idiv   ecx
c002c2af:	8d 42 30             	lea    eax,[edx+0x30]
c002c2b2:	0f b6 c0             	movzx  eax,al
c002c2b5:	50                   	push   eax
c002c2b6:	e8 59 fd ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c2bb:	5f                   	pop    edi
c002c2bc:	bf 64 00 00 00       	mov    edi,0x64
c002c2c1:	5a                   	pop    edx
c002c2c2:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c2c8:	53                   	push   ebx
c002c2c9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2ce:	99                   	cdq    
c002c2cf:	f7 ff                	idiv   edi
c002c2d1:	99                   	cdq    
c002c2d2:	f7 f9                	idiv   ecx
c002c2d4:	8d 42 30             	lea    eax,[edx+0x30]
c002c2d7:	0f b6 c0             	movzx  eax,al
c002c2da:	50                   	push   eax
c002c2db:	e8 34 fd ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c2e0:	5a                   	pop    edx
c002c2e1:	5a                   	pop    edx
c002c2e2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c2e8:	53                   	push   ebx
c002c2e9:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c2ee:	99                   	cdq    
c002c2ef:	f7 f9                	idiv   ecx
c002c2f1:	99                   	cdq    
c002c2f2:	f7 f9                	idiv   ecx
c002c2f4:	8d 42 30             	lea    eax,[edx+0x30]
c002c2f7:	0f b6 c0             	movzx  eax,al
c002c2fa:	50                   	push   eax
c002c2fb:	e8 14 fd ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c300:	5a                   	pop    edx
c002c301:	5a                   	pop    edx
c002c302:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c308:	53                   	push   ebx
c002c309:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c30e:	99                   	cdq    
c002c30f:	f7 f9                	idiv   ecx
c002c311:	83 c2 30             	add    edx,0x30
c002c314:	0f b6 d2             	movzx  edx,dl
c002c317:	52                   	push   edx
c002c318:	e8 f7 fc ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c31d:	5a                   	pop    edx
c002c31e:	5a                   	pop    edx
c002c31f:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c325:	53                   	push   ebx
c002c326:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c32b:	99                   	cdq    
c002c32c:	f7 fd                	idiv   ebp
c002c32e:	99                   	cdq    
c002c32f:	f7 f9                	idiv   ecx
c002c331:	8d 42 30             	lea    eax,[edx+0x30]
c002c334:	0f b6 c0             	movzx  eax,al
c002c337:	50                   	push   eax
c002c338:	e8 d7 fc ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c33d:	5d                   	pop    ebp
c002c33e:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c343:	5a                   	pop    edx
c002c344:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c34a:	53                   	push   ebx
c002c34b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c350:	99                   	cdq    
c002c351:	f7 fd                	idiv   ebp
c002c353:	99                   	cdq    
c002c354:	f7 f9                	idiv   ecx
c002c356:	8d 42 30             	lea    eax,[edx+0x30]
c002c359:	0f b6 c0             	movzx  eax,al
c002c35c:	50                   	push   eax
c002c35d:	e8 b2 fc ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c362:	5d                   	pop    ebp
c002c363:	5a                   	pop    edx
c002c364:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c36a:	53                   	push   ebx
c002c36b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c370:	99                   	cdq    
c002c371:	f7 ff                	idiv   edi
c002c373:	99                   	cdq    
c002c374:	f7 f9                	idiv   ecx
c002c376:	8d 42 30             	lea    eax,[edx+0x30]
c002c379:	0f b6 c0             	movzx  eax,al
c002c37c:	50                   	push   eax
c002c37d:	e8 92 fc ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c382:	5f                   	pop    edi
c002c383:	5d                   	pop    ebp
c002c384:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c38a:	53                   	push   ebx
c002c38b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c390:	99                   	cdq    
c002c391:	f7 f9                	idiv   ecx
c002c393:	99                   	cdq    
c002c394:	f7 f9                	idiv   ecx
c002c396:	8d 42 30             	lea    eax,[edx+0x30]
c002c399:	0f b6 c0             	movzx  eax,al
c002c39c:	50                   	push   eax
c002c39d:	e8 72 fc ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c3a2:	5a                   	pop    edx
c002c3a3:	5f                   	pop    edi
c002c3a4:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c3aa:	53                   	push   ebx
c002c3ab:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c3b0:	99                   	cdq    
c002c3b1:	f7 f9                	idiv   ecx
c002c3b3:	83 c2 30             	add    edx,0x30
c002c3b6:	0f b6 d2             	movzx  edx,dl
c002c3b9:	52                   	push   edx
c002c3ba:	e8 55 fc ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002c3bf:	83 c4 10             	add    esp,0x10
c002c3c2:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c3c8:	eb 05                	jmp    c002c3cf <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c3ca:	be 01 00 00 00       	mov    esi,0x1
c002c3cf:	83 c4 0c             	add    esp,0xc
c002c3d2:	89 f0                	mov    eax,esi
c002c3d4:	5b                   	pop    ebx
c002c3d5:	5e                   	pop    esi
c002c3d6:	5f                   	pop    edi
c002c3d7:	5d                   	pop    ebp
c002c3d8:	c3                   	ret    
c002c3d9:	90                   	nop

c002c3da <ATAPI::write(unsigned long long, int, void*)>:
c002c3da:	b8 03 00 00 00       	mov    eax,0x3
c002c3df:	c3                   	ret    

c002c3e0 <ATAPI::close(int, int, void*)>:
c002c3e0:	83 ec 0c             	sub    esp,0xc
c002c3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c3e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c3ed:	85 c0                	test   eax,eax
c002c3ef:	74 0c                	je     c002c3fd <ATAPI::close(int, int, void*)+0x1d>
c002c3f1:	8b 10                	mov    edx,DWORD PTR [eax]
c002c3f3:	83 ec 0c             	sub    esp,0xc
c002c3f6:	50                   	push   eax
c002c3f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c3fa:	83 c4 10             	add    esp,0x10
c002c3fd:	31 c0                	xor    eax,eax
c002c3ff:	83 c4 0c             	add    esp,0xc
c002c402:	c3                   	ret    
c002c403:	90                   	nop

c002c404 <ATAPI::ATAPI()>:
c002c404:	83 ec 0c             	sub    esp,0xc
c002c407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c40b:	83 ec 04             	sub    esp,0x4
c002c40e:	68 00 08 00 00       	push   0x800
c002c413:	68 a5 38 03 c0       	push   0xc00338a5
c002c418:	50                   	push   eax
c002c419:	e8 74 f2 fe ff       	call   c001b692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c41e:	83 c4 10             	add    esp,0x10
c002c421:	ba b4 37 03 c0       	mov    edx,0xc00337b4
c002c426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c42a:	89 10                	mov    DWORD PTR [eax],edx
c002c42c:	90                   	nop
c002c42d:	83 c4 0c             	add    esp,0xc
c002c430:	c3                   	ret    
c002c431:	90                   	nop

c002c432 <ATAPI::readyForCommand()>:
c002c432:	56                   	push   esi
c002c433:	53                   	push   ebx
c002c434:	53                   	push   ebx
c002c435:	31 db                	xor    ebx,ebx
c002c437:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c43b:	51                   	push   ecx
c002c43c:	6a 0c                	push   0xc
c002c43e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c445:	50                   	push   eax
c002c446:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c44c:	e8 63 e8 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002c451:	83 c4 10             	add    esp,0x10
c002c454:	a8 88                	test   al,0x88
c002c456:	74 25                	je     c002c47d <ATAPI::readyForCommand()+0x4b>
c002c458:	43                   	inc    ebx
c002c459:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c45f:	7e da                	jle    c002c43b <ATAPI::readyForCommand()+0x9>
c002c461:	83 ec 0c             	sub    esp,0xc
c002c464:	68 5e 01 00 00       	push   0x15e
c002c469:	e8 06 8f ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002c46e:	83 c4 10             	add    esp,0x10
c002c471:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c477:	75 c2                	jne    c002c43b <ATAPI::readyForCommand()+0x9>
c002c479:	31 c0                	xor    eax,eax
c002c47b:	eb 02                	jmp    c002c47f <ATAPI::readyForCommand()+0x4d>
c002c47d:	b0 01                	mov    al,0x1
c002c47f:	5a                   	pop    edx
c002c480:	5b                   	pop    ebx
c002c481:	5e                   	pop    esi
c002c482:	c3                   	ret    
c002c483:	90                   	nop

c002c484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c484:	55                   	push   ebp
c002c485:	57                   	push   edi
c002c486:	56                   	push   esi
c002c487:	53                   	push   ebx
c002c488:	83 ec 20             	sub    esp,0x20
c002c48b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c48f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c493:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002c497:	6a 01                	push   0x1
c002c499:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4a0:	50                   	push   eax
c002c4a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4a7:	e8 56 e9 ff ff       	call   c002ae02 <IDE::enableIRQs(unsigned char, bool)>
c002c4ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4b3:	59                   	pop    ecx
c002c4b4:	5e                   	pop    esi
c002c4b5:	50                   	push   eax
c002c4b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4bc:	e8 0d e7 ff ff       	call   c002abce <IDE::prepareInterrupt(unsigned char)>
c002c4c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c4c4:	e8 69 ff ff ff       	call   c002c432 <ATAPI::readyForCommand()>
c002c4c9:	83 c4 10             	add    esp,0x10
c002c4cc:	84 c0                	test   al,al
c002c4ce:	75 0a                	jne    c002c4da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x56>
c002c4d0:	bb 01 00 00 00       	mov    ebx,0x1
c002c4d5:	e9 5f 02 00 00       	jmp    c002c739 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c4da:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c4e0:	c1 e0 04             	shl    eax,0x4
c002c4e3:	0f b6 c0             	movzx  eax,al
c002c4e6:	50                   	push   eax
c002c4e7:	6a 06                	push   0x6
c002c4e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4f0:	50                   	push   eax
c002c4f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4f7:	e8 f8 e6 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4fc:	6a 00                	push   0x0
c002c4fe:	6a 01                	push   0x1
c002c500:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c507:	50                   	push   eax
c002c508:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c50e:	e8 e1 e6 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c513:	83 c4 20             	add    esp,0x20
c002c516:	0f b6 c3             	movzx  eax,bl
c002c519:	50                   	push   eax
c002c51a:	0f b6 df             	movzx  ebx,bh
c002c51d:	6a 04                	push   0x4
c002c51f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c526:	50                   	push   eax
c002c527:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c52d:	e8 c2 e6 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c532:	53                   	push   ebx
c002c533:	6a 05                	push   0x5
c002c535:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c53c:	50                   	push   eax
c002c53d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c543:	e8 ac e6 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c548:	83 c4 20             	add    esp,0x20
c002c54b:	68 a0 00 00 00       	push   0xa0
c002c550:	6a 07                	push   0x7
c002c552:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c559:	50                   	push   eax
c002c55a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c560:	e8 8f e6 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c565:	83 c4 0c             	add    esp,0xc
c002c568:	6a 01                	push   0x1
c002c56a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c571:	50                   	push   eax
c002c572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c578:	e8 5b f1 ff ff       	call   c002b6d8 <IDE::polling(unsigned char, unsigned int)>
c002c57d:	83 c4 10             	add    esp,0x10
c002c580:	0f b6 d8             	movzx  ebx,al
c002c583:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c589:	85 db                	test   ebx,ebx
c002c58b:	74 20                	je     c002c5ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x129>
c002c58d:	53                   	push   ebx
c002c58e:	0f b6 c0             	movzx  eax,al
c002c591:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c598:	52                   	push   edx
c002c599:	50                   	push   eax
c002c59a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5a0:	e8 79 f0 ff ff       	call   c002b61e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c5a5:	83 c4 10             	add    esp,0x10
c002c5a8:	e9 8c 01 00 00       	jmp    c002c739 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c5ad:	52                   	push   edx
c002c5ae:	0f b6 c0             	movzx  eax,al
c002c5b1:	52                   	push   edx
c002c5b2:	50                   	push   eax
c002c5b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5b9:	e8 24 e6 ff ff       	call   c002abe2 <IDE::getBase(unsigned char)>
c002c5be:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c5c2:	b9 06 00 00 00       	mov    ecx,0x6
c002c5c7:	89 c2                	mov    edx,eax
c002c5c9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c5cc:	89 e8                	mov    eax,ebp
c002c5ce:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c5d2:	83 c4 10             	add    esp,0x10
c002c5d5:	0f b6 c0             	movzx  eax,al
c002c5d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002c5dc:	85 db                	test   ebx,ebx
c002c5de:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c5e4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c5eb:	0f 84 eb 00 00 00    	je     c002c6dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002c5f1:	55                   	push   ebp
c002c5f2:	55                   	push   ebp
c002c5f3:	52                   	push   edx
c002c5f4:	50                   	push   eax
c002c5f5:	e8 6e e7 ff ff       	call   c002ad68 <IDE::waitInterrupt(unsigned char)>
c002c5fa:	83 c4 10             	add    esp,0x10
c002c5fd:	84 c0                	test   al,al
c002c5ff:	0f 84 cb fe ff ff    	je     c002c4d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c605:	56                   	push   esi
c002c606:	56                   	push   esi
c002c607:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c60e:	50                   	push   eax
c002c60f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c615:	e8 b4 e5 ff ff       	call   c002abce <IDE::prepareInterrupt(unsigned char)>
c002c61a:	83 c4 0c             	add    esp,0xc
c002c61d:	6a 04                	push   0x4
c002c61f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c626:	50                   	push   eax
c002c627:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c62d:	e8 82 e6 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002c632:	83 c4 0c             	add    esp,0xc
c002c635:	6a 05                	push   0x5
c002c637:	89 c6                	mov    esi,eax
c002c639:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c640:	50                   	push   eax
c002c641:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c647:	e8 68 e6 ff ff       	call   c002acb4 <IDE::read(unsigned char, unsigned char)>
c002c64c:	83 c4 10             	add    esp,0x10
c002c64f:	0f b6 e8             	movzx  ebp,al
c002c652:	89 f0                	mov    eax,esi
c002c654:	c1 e5 08             	shl    ebp,0x8
c002c657:	0f b6 f0             	movzx  esi,al
c002c65a:	09 f5                	or     ebp,esi
c002c65c:	31 f6                	xor    esi,esi
c002c65e:	d1 fd                	sar    ebp,1
c002c660:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002c665:	74 5c                	je     c002c6c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x23f>
c002c667:	39 ee                	cmp    esi,ebp
c002c669:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c66f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c676:	75 0d                	jne    c002c685 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x201>
c002c678:	8d 0c 36             	lea    ecx,[esi+esi*1]
c002c67b:	01 4c 24 40          	add    DWORD PTR [esp+0x40],ecx
c002c67f:	4b                   	dec    ebx
c002c680:	e9 57 ff ff ff       	jmp    c002c5dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x158>
c002c685:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002c689:	66 8b 0c 71          	mov    cx,WORD PTR [ecx+esi*2]
c002c68d:	66 89 4c 24 0a       	mov    WORD PTR [esp+0xa],cx
c002c692:	51                   	push   ecx
c002c693:	51                   	push   ecx
c002c694:	52                   	push   edx
c002c695:	50                   	push   eax
c002c696:	e8 47 e5 ff ff       	call   c002abe2 <IDE::getBase(unsigned char)>
c002c69b:	89 c2                	mov    edx,eax
c002c69d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c002c6a2:	66 ef                	out    dx,ax
c002c6a4:	46                   	inc    esi
c002c6a5:	83 c4 10             	add    esp,0x10
c002c6a8:	eb bd                	jmp    c002c667 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e3>
c002c6aa:	51                   	push   ecx
c002c6ab:	51                   	push   ecx
c002c6ac:	52                   	push   edx
c002c6ad:	50                   	push   eax
c002c6ae:	e8 2f e5 ff ff       	call   c002abe2 <IDE::getBase(unsigned char)>
c002c6b3:	89 c2                	mov    edx,eax
c002c6b5:	66 ed                	in     ax,dx
c002c6b7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c002c6bb:	83 c4 10             	add    esp,0x10
c002c6be:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c002c6c2:	46                   	inc    esi
c002c6c3:	39 ee                	cmp    esi,ebp
c002c6c5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c6cb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c6d2:	75 d6                	jne    c002c6aa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x226>
c002c6d4:	01 f6                	add    esi,esi
c002c6d6:	01 74 24 40          	add    DWORD PTR [esp+0x40],esi
c002c6da:	eb a3                	jmp    c002c67f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fb>
c002c6dc:	51                   	push   ecx
c002c6dd:	51                   	push   ecx
c002c6de:	52                   	push   edx
c002c6df:	50                   	push   eax
c002c6e0:	e8 83 e6 ff ff       	call   c002ad68 <IDE::waitInterrupt(unsigned char)>
c002c6e5:	83 c4 10             	add    esp,0x10
c002c6e8:	84 c0                	test   al,al
c002c6ea:	0f 84 e0 fd ff ff    	je     c002c4d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x4c>
c002c6f0:	52                   	push   edx
c002c6f1:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c6f6:	52                   	push   edx
c002c6f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6fe:	50                   	push   eax
c002c6ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c705:	e8 c4 e4 ff ff       	call   c002abce <IDE::prepareInterrupt(unsigned char)>
c002c70a:	83 c4 10             	add    esp,0x10
c002c70d:	50                   	push   eax
c002c70e:	50                   	push   eax
c002c70f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c716:	50                   	push   eax
c002c717:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c71d:	e8 c0 e4 ff ff       	call   c002abe2 <IDE::getBase(unsigned char)>
c002c722:	8d 50 07             	lea    edx,[eax+0x7]
c002c725:	ec                   	in     al,dx
c002c726:	83 c4 10             	add    esp,0x10
c002c729:	a8 88                	test   al,0x88
c002c72b:	74 0a                	je     c002c737 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002c72d:	4b                   	dec    ebx
c002c72e:	75 dd                	jne    c002c70d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002c730:	bb 02 00 00 00       	mov    ebx,0x2
c002c735:	eb 02                	jmp    c002c739 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002c737:	31 db                	xor    ebx,ebx
c002c739:	83 c4 1c             	add    esp,0x1c
c002c73c:	89 d8                	mov    eax,ebx
c002c73e:	5b                   	pop    ebx
c002c73f:	5e                   	pop    esi
c002c740:	5f                   	pop    edi
c002c741:	5d                   	pop    ebp
c002c742:	c3                   	ret    
c002c743:	90                   	nop

c002c744 <ATAPI::diskRemoved()>:
c002c744:	53                   	push   ebx
c002c745:	83 ec 14             	sub    esp,0x14
c002c748:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c74c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c753:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c759:	e8 ce fe fe ff       	call   c001c62c <LogicalDisk::unmount()>
c002c75e:	58                   	pop    eax
c002c75f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c765:	e8 a2 08 ff ff       	call   c001d00c <VCache::writeWriteBuffer()>
c002c76a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c770:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c774:	83 c4 18             	add    esp,0x18
c002c777:	5b                   	pop    ebx
c002c778:	e9 7f 08 ff ff       	jmp    c001cffc <VCache::invalidateReadBuffer()>
c002c77d:	90                   	nop

c002c77e <ATAPI::eject()>:
c002c77e:	57                   	push   edi
c002c77f:	b9 03 00 00 00       	mov    ecx,0x3
c002c784:	53                   	push   ebx
c002c785:	83 ec 14             	sub    esp,0x14
c002c788:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c78c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c790:	fc                   	cld    
c002c791:	31 c0                	xor    eax,eax
c002c793:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c795:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c79a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c79f:	50                   	push   eax
c002c7a0:	50                   	push   eax
c002c7a1:	6a 00                	push   0x0
c002c7a3:	6a 00                	push   0x0
c002c7a5:	6a 00                	push   0x0
c002c7a7:	6a 02                	push   0x2
c002c7a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c7ad:	50                   	push   eax
c002c7ae:	53                   	push   ebx
c002c7af:	e8 d0 fc ff ff       	call   c002c484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c7b4:	83 c4 14             	add    esp,0x14
c002c7b7:	53                   	push   ebx
c002c7b8:	e8 87 ff ff ff       	call   c002c744 <ATAPI::diskRemoved()>
c002c7bd:	83 c4 24             	add    esp,0x24
c002c7c0:	31 c0                	xor    eax,eax
c002c7c2:	5b                   	pop    ebx
c002c7c3:	5f                   	pop    edi
c002c7c4:	c3                   	ret    
c002c7c5:	90                   	nop

c002c7c6 <ATAPI::diskInserted()>:
c002c7c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c7ca:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c7d1:	c3                   	ret    

c002c7d2 <ATAPI::detectMedia()>:
c002c7d2:	56                   	push   esi
c002c7d3:	53                   	push   ebx
c002c7d4:	83 ec 28             	sub    esp,0x28
c002c7d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c7db:	6a 0c                	push   0xc
c002c7dd:	6a 00                	push   0x0
c002c7df:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c7e3:	56                   	push   esi
c002c7e4:	e8 07 3d fd ff       	call   c00004f0 <memset>
c002c7e9:	58                   	pop    eax
c002c7ea:	5a                   	pop    edx
c002c7eb:	6a 00                	push   0x0
c002c7ed:	6a 00                	push   0x0
c002c7ef:	6a 00                	push   0x0
c002c7f1:	6a 00                	push   0x0
c002c7f3:	56                   	push   esi
c002c7f4:	53                   	push   ebx
c002c7f5:	e8 8a fc ff ff       	call   c002c484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c7fa:	83 c4 1c             	add    esp,0x1c
c002c7fd:	6a 0c                	push   0xc
c002c7ff:	6a 00                	push   0x0
c002c801:	56                   	push   esi
c002c802:	e8 e9 3c fd ff       	call   c00004f0 <memset>
c002c807:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c80c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c811:	59                   	pop    ecx
c002c812:	58                   	pop    eax
c002c813:	6a 01                	push   0x1
c002c815:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c819:	50                   	push   eax
c002c81a:	6a 00                	push   0x0
c002c81c:	6a 12                	push   0x12
c002c81e:	56                   	push   esi
c002c81f:	53                   	push   ebx
c002c820:	e8 5f fc ff ff       	call   c002c484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c825:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c829:	83 c4 20             	add    esp,0x20
c002c82c:	83 e0 7f             	and    eax,0x7f
c002c82f:	83 f8 70             	cmp    eax,0x70
c002c832:	74 15                	je     c002c849 <ATAPI::detectMedia()+0x77>
c002c834:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c83b:	75 0c                	jne    c002c849 <ATAPI::detectMedia()+0x77>
c002c83d:	83 ec 0c             	sub    esp,0xc
c002c840:	53                   	push   ebx
c002c841:	e8 80 ff ff ff       	call   c002c7c6 <ATAPI::diskInserted()>
c002c846:	83 c4 10             	add    esp,0x10
c002c849:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c84d:	83 e0 0f             	and    eax,0xf
c002c850:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c855:	0f b6 c0             	movzx  eax,al
c002c858:	75 19                	jne    c002c873 <ATAPI::detectMedia()+0xa1>
c002c85a:	83 f8 02             	cmp    eax,0x2
c002c85d:	75 14                	jne    c002c873 <ATAPI::detectMedia()+0xa1>
c002c85f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c866:	74 24                	je     c002c88c <ATAPI::detectMedia()+0xba>
c002c868:	83 ec 0c             	sub    esp,0xc
c002c86b:	53                   	push   ebx
c002c86c:	e8 d3 fe ff ff       	call   c002c744 <ATAPI::diskRemoved()>
c002c871:	eb 16                	jmp    c002c889 <ATAPI::detectMedia()+0xb7>
c002c873:	85 c0                	test   eax,eax
c002c875:	75 15                	jne    c002c88c <ATAPI::detectMedia()+0xba>
c002c877:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c87e:	75 0c                	jne    c002c88c <ATAPI::detectMedia()+0xba>
c002c880:	83 ec 0c             	sub    esp,0xc
c002c883:	53                   	push   ebx
c002c884:	e8 3d ff ff ff       	call   c002c7c6 <ATAPI::diskInserted()>
c002c889:	83 c4 10             	add    esp,0x10
c002c88c:	83 c4 24             	add    esp,0x24
c002c88f:	5b                   	pop    ebx
c002c890:	5e                   	pop    esi
c002c891:	c3                   	ret    

c002c892 <ATAPI::open(int, int, void*)>:
c002c892:	56                   	push   esi
c002c893:	53                   	push   ebx
c002c894:	50                   	push   eax
c002c895:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c899:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c89d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c8a1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c8a7:	c1 e0 06             	shl    eax,0x6
c002c8aa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c8b0:	01 d0                	add    eax,edx
c002c8b2:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c8b9:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c8bf:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c8c6:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c8d0:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c8d7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c8dd:	6a 04                	push   0x4
c002c8df:	6a 0c                	push   0xc
c002c8e1:	51                   	push   ecx
c002c8e2:	52                   	push   edx
c002c8e3:	e8 0c e3 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c8e8:	90                   	nop
c002c8e9:	90                   	nop
c002c8ea:	6a 00                	push   0x0
c002c8ec:	6a 0c                	push   0xc
c002c8ee:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c8f5:	50                   	push   eax
c002c8f6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c8fc:	e8 f3 e2 ff ff       	call   c002abf4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c901:	83 c4 14             	add    esp,0x14
c002c904:	68 78 01 00 00       	push   0x178
c002c909:	e8 d5 9a fe ff       	call   c00163e3 <malloc>
c002c90e:	83 c4 0c             	add    esp,0xc
c002c911:	6a 00                	push   0x0
c002c913:	68 ff ff ff 7f       	push   0x7fffffff
c002c918:	6a 00                	push   0x0
c002c91a:	6a 00                	push   0x0
c002c91c:	53                   	push   ebx
c002c91d:	68 57 39 03 c0       	push   0xc0033957
c002c922:	89 c6                	mov    esi,eax
c002c924:	50                   	push   eax
c002c925:	e8 40 fb fe ff       	call   c001c46a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c92a:	83 c4 14             	add    esp,0x14
c002c92d:	56                   	push   esi
c002c92e:	e8 f7 fb fe ff       	call   c001c52a <LogicalDisk::assignDriveLetter()>
c002c933:	5a                   	pop    edx
c002c934:	59                   	pop    ecx
c002c935:	0f be c0             	movsx  eax,al
c002c938:	50                   	push   eax
c002c939:	68 9c 37 03 c0       	push   0xc003379c
c002c93e:	e8 d7 c8 fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002c943:	58                   	pop    eax
c002c944:	5a                   	pop    edx
c002c945:	56                   	push   esi
c002c946:	53                   	push   ebx
c002c947:	e8 64 e9 fe ff       	call   c001b2b0 <Device::addChild(Device*)>
c002c94c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c952:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c955:	e8 a0 ed fe ff       	call   c001b6fa <PhysicalDisk::startCache()>
c002c95a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c961:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c964:	e8 69 fe ff ff       	call   c002c7d2 <ATAPI::detectMedia()>
c002c969:	83 c4 14             	add    esp,0x14
c002c96c:	31 c0                	xor    eax,eax
c002c96e:	5b                   	pop    ebx
c002c96f:	5e                   	pop    esi
c002c970:	c3                   	ret    
c002c971:	90                   	nop

c002c972 <ATAPI::read(unsigned long long, int, void*)>:
c002c972:	55                   	push   ebp
c002c973:	57                   	push   edi
c002c974:	56                   	push   esi
c002c975:	53                   	push   ebx
c002c976:	83 ec 1c             	sub    esp,0x1c
c002c979:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c97d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c981:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c985:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c98c:	74 3c                	je     c002c9ca <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c98e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c992:	b9 03 00 00 00       	mov    ecx,0x3
c002c997:	fc                   	cld    
c002c998:	31 c0                	xor    eax,eax
c002c99a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c99c:	89 e8                	mov    eax,ebp
c002c99e:	0f ce                	bswap  esi
c002c9a0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002c9a4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002c9a9:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002c9ad:	50                   	push   eax
c002c9ae:	50                   	push   eax
c002c9af:	55                   	push   ebp
c002c9b0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002c9b4:	c1 e5 0b             	shl    ebp,0xb
c002c9b7:	6a 00                	push   0x0
c002c9b9:	55                   	push   ebp
c002c9ba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c9be:	50                   	push   eax
c002c9bf:	53                   	push   ebx
c002c9c0:	e8 bf fa ff ff       	call   c002c484 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c9c5:	83 c4 20             	add    esp,0x20
c002c9c8:	eb 1a                	jmp    c002c9e4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c002c9ca:	83 ec 0c             	sub    esp,0xc
c002c9cd:	53                   	push   ebx
c002c9ce:	e8 ff fd ff ff       	call   c002c7d2 <ATAPI::detectMedia()>
c002c9d3:	83 c4 10             	add    esp,0x10
c002c9d6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c9dd:	75 af                	jne    c002c98e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002c9df:	b8 02 00 00 00       	mov    eax,0x2
c002c9e4:	83 c4 1c             	add    esp,0x1c
c002c9e7:	5b                   	pop    ebx
c002c9e8:	5e                   	pop    esi
c002c9e9:	5f                   	pop    edi
c002c9ea:	5d                   	pop    ebp
c002c9eb:	c3                   	ret    

c002c9ec <SATA::close(int, int, void*)>:
c002c9ec:	83 ec 0c             	sub    esp,0xc
c002c9ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c9f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c9f9:	85 c0                	test   eax,eax
c002c9fb:	74 0c                	je     c002ca09 <SATA::close(int, int, void*)+0x1d>
c002c9fd:	8b 10                	mov    edx,DWORD PTR [eax]
c002c9ff:	83 ec 0c             	sub    esp,0xc
c002ca02:	50                   	push   eax
c002ca03:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ca06:	83 c4 10             	add    esp,0x10
c002ca09:	31 c0                	xor    eax,eax
c002ca0b:	83 c4 0c             	add    esp,0xc
c002ca0e:	c3                   	ret    
c002ca0f:	90                   	nop

c002ca10 <SATA::powerSaving(PowerSavingLevel)>:
c002ca10:	c3                   	ret    
c002ca11:	90                   	nop

c002ca12 <SATA::open(int, int, void*)>:
c002ca12:	56                   	push   esi
c002ca13:	53                   	push   ebx
c002ca14:	83 ec 10             	sub    esp,0x10
c002ca17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002ca1b:	68 e4 37 03 c0       	push   0xc00337e4
c002ca20:	e8 f5 c7 fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002ca25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002ca29:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002ca33:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002ca3d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002ca43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002ca47:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002ca51:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002ca58:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002ca5e:	e8 8f 9c fe ff       	call   c00166f2 <Phys::allocatePage()>
c002ca63:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002ca69:	89 c6                	mov    esi,eax
c002ca6b:	e8 82 9c fe ff       	call   c00166f2 <Phys::allocatePage()>
c002ca70:	81 c6 00 10 00 00    	add    esi,0x1000
c002ca76:	83 c4 10             	add    esp,0x10
c002ca79:	39 c6                	cmp    esi,eax
c002ca7b:	74 10                	je     c002ca8d <SATA::open(int, int, void*)+0x7b>
c002ca7d:	83 ec 0c             	sub    esp,0xc
c002ca80:	68 f0 37 03 c0       	push   0xc00337f0
c002ca85:	e8 18 37 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ca8a:	83 c4 10             	add    esp,0x10
c002ca8d:	83 ec 0c             	sub    esp,0xc
c002ca90:	6a 02                	push   0x2
c002ca92:	e8 6e b4 fe ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c002ca97:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002ca9d:	6a 03                	push   0x3
c002ca9f:	50                   	push   eax
c002caa0:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002caa6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002caac:	e8 5d bb fe ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c002cab1:	83 c4 14             	add    esp,0x14
c002cab4:	53                   	push   ebx
c002cab5:	e8 40 ec fe ff       	call   c001b6fa <PhysicalDisk::startCache()>
c002caba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002cabd:	e8 7c fe fe ff       	call   c001c93e <createPartitionsForDisk(PhysicalDisk*)>
c002cac2:	83 c4 14             	add    esp,0x14
c002cac5:	31 c0                	xor    eax,eax
c002cac7:	5b                   	pop    ebx
c002cac8:	5e                   	pop    esi
c002cac9:	c3                   	ret    

c002caca <SATA::SATA()>:
c002caca:	83 ec 0c             	sub    esp,0xc
c002cacd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002cad1:	83 ec 04             	sub    esp,0x4
c002cad4:	68 00 02 00 00       	push   0x200
c002cad9:	68 04 38 03 c0       	push   0xc0033804
c002cade:	50                   	push   eax
c002cadf:	e8 ae eb fe ff       	call   c001b692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002cae4:	83 c4 10             	add    esp,0x10
c002cae7:	ba 74 38 03 c0       	mov    edx,0xc0033874
c002caec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002caf0:	89 10                	mov    DWORD PTR [eax],edx
c002caf2:	90                   	nop
c002caf3:	83 c4 0c             	add    esp,0xc
c002caf6:	c3                   	ret    
c002caf7:	90                   	nop

c002caf8 <SATA::access(unsigned long long, int, void*, bool)>:
c002caf8:	55                   	push   ebp
c002caf9:	57                   	push   edi
c002cafa:	56                   	push   esi
c002cafb:	53                   	push   ebx
c002cafc:	83 ec 2c             	sub    esp,0x2c
c002caff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002cb03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002cb07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cb0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002cb0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002cb13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002cb17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cb1b:	fa                   	cli    
c002cb1c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002cb22:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002cb27:	7e 10                	jle    c002cb39 <SATA::access(unsigned long long, int, void*, bool)+0x41>
c002cb29:	83 ec 0c             	sub    esp,0xc
c002cb2c:	68 14 38 03 c0       	push   0xc0033814
c002cb31:	e8 6c 36 ff ff       	call   c00201a2 <KePanic(char const*)>
c002cb36:	83 c4 10             	add    esp,0x10
c002cb39:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cb3f:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c002cb45:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002cb4b:	89 e8                	mov    eax,ebp
c002cb4d:	c1 e0 07             	shl    eax,0x7
c002cb50:	01 d0                	add    eax,edx
c002cb52:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cb5c:	8d 45 02             	lea    eax,[ebp+0x2]
c002cb5f:	51                   	push   ecx
c002cb60:	c1 e0 07             	shl    eax,0x7
c002cb63:	51                   	push   ecx
c002cb64:	01 d0                	add    eax,edx
c002cb66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002cb6a:	50                   	push   eax
c002cb6b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002cb71:	e8 42 ec ff ff       	call   c002b7b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cb76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002cb7a:	83 c4 10             	add    esp,0x10
c002cb7d:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c002cb82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002cb86:	0f 84 ac 01 00 00    	je     c002cd38 <SATA::access(unsigned long long, int, void*, bool)+0x240>
c002cb8c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cb90:	c1 e0 09             	shl    eax,0x9
c002cb93:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cb98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002cb9c:	74 0e                	je     c002cbac <SATA::access(unsigned long long, int, void*, bool)+0xb4>
c002cb9e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cba4:	89 c1                	mov    ecx,eax
c002cba6:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cbaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cbac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cbb0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cbb6:	8d 45 02             	lea    eax,[ebp+0x2]
c002cbb9:	c1 e0 07             	shl    eax,0x7
c002cbbc:	01 d0                	add    eax,edx
c002cbbe:	8b 00                	mov    eax,DWORD PTR [eax]
c002cbc0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cbc6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cbcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cbd0:	c1 e1 05             	shl    ecx,0x5
c002cbd3:	01 c8                	add    eax,ecx
c002cbd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002cbd9:	83 e1 01             	and    ecx,0x1
c002cbdc:	89 ce                	mov    esi,ecx
c002cbde:	8a 08                	mov    cl,BYTE PTR [eax]
c002cbe0:	c1 e6 06             	shl    esi,0x6
c002cbe3:	83 e1 bf             	and    ecx,0xffffffbf
c002cbe6:	09 f1                	or     ecx,esi
c002cbe8:	88 08                	mov    BYTE PTR [eax],cl
c002cbea:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cbec:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cbf2:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cbf8:	89 08                	mov    DWORD PTR [eax],ecx
c002cbfa:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cc00:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cc06:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cc0c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cc0f:	50                   	push   eax
c002cc10:	68 90 00 00 00       	push   0x90
c002cc15:	6a 00                	push   0x0
c002cc17:	56                   	push   esi
c002cc18:	e8 d3 38 fd ff       	call   c00004f0 <memset>
c002cc1d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cc23:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cc29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002cc2d:	83 c4 10             	add    esp,0x10
c002cc30:	48                   	dec    eax
c002cc31:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cc36:	89 c1                	mov    ecx,eax
c002cc38:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cc3e:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cc43:	09 c8                	or     eax,ecx
c002cc45:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cc4b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cc51:	83 c8 80             	or     eax,0xffffff80
c002cc54:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cc5a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cc5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cc61:	25 00 7f 00 00       	and    eax,0x7f00
c002cc66:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cc6b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cc70:	66 89 06             	mov    WORD PTR [esi],ax
c002cc73:	b0 35                	mov    al,0x35
c002cc75:	75 02                	jne    c002cc79 <SATA::access(unsigned long long, int, void*, bool)+0x181>
c002cc77:	b0 25                	mov    al,0x25
c002cc79:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cc7c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cc80:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cc84:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c002cc88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cc8c:	c1 e8 10             	shr    eax,0x10
c002cc8f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cc92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002cc96:	c1 e8 18             	shr    eax,0x18
c002cc99:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cc9c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cca0:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cca3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cca7:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002ccaa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002ccae:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002ccb2:	89 ee                	mov    esi,ebp
c002ccb4:	31 c0                	xor    eax,eax
c002ccb6:	c1 e6 07             	shl    esi,0x7
c002ccb9:	01 d6                	add    esi,edx
c002ccbb:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002ccc1:	80 e1 88             	and    cl,0x88
c002ccc4:	74 0a                	je     c002ccd0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002ccc6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cccb:	74 0a                	je     c002ccd7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cccd:	40                   	inc    eax
c002ccce:	eb eb                	jmp    c002ccbb <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002ccd0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002ccd5:	75 0a                	jne    c002cce1 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002ccd7:	83 ec 0c             	sub    esp,0xc
c002ccda:	68 4d 38 03 c0       	push   0xc003384d
c002ccdf:	eb 34                	jmp    c002cd15 <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002cce1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002cce5:	c1 e5 07             	shl    ebp,0x7
c002cce8:	b8 01 00 00 00       	mov    eax,0x1
c002cced:	01 ea                	add    edx,ebp
c002ccef:	d3 e0                	shl    eax,cl
c002ccf1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002ccf7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002ccfd:	85 c8                	test   eax,ecx
c002ccff:	74 2b                	je     c002cd2c <SATA::access(unsigned long long, int, void*, bool)+0x234>
c002cd01:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cd07:	0f ba e1 1e          	bt     ecx,0x1e
c002cd0b:	73 ea                	jae    c002ccf7 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c002cd0d:	83 ec 0c             	sub    esp,0xc
c002cd10:	68 5b 38 03 c0       	push   0xc003385b
c002cd15:	e8 00 c5 fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002cd1a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd1f:	83 c4 10             	add    esp,0x10
c002cd22:	48                   	dec    eax
c002cd23:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd28:	85 c0                	test   eax,eax
c002cd2a:	eb 17                	jmp    c002cd43 <SATA::access(unsigned long long, int, void*, bool)+0x24b>
c002cd2c:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002cd32:	0f ba e0 1e          	bt     eax,0x1e
c002cd36:	73 15                	jae    c002cd4d <SATA::access(unsigned long long, int, void*, bool)+0x255>
c002cd38:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd3d:	48                   	dec    eax
c002cd3e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd43:	75 01                	jne    c002cd46 <SATA::access(unsigned long long, int, void*, bool)+0x24e>
c002cd45:	fb                   	sti    
c002cd46:	b8 01 00 00 00       	mov    eax,0x1
c002cd4b:	eb 29                	jmp    c002cd76 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cd4d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c002cd52:	75 10                	jne    c002cd64 <SATA::access(unsigned long long, int, void*, bool)+0x26c>
c002cd54:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cd5a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002cd5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cd62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cd64:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002cd69:	48                   	dec    eax
c002cd6a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cd6f:	75 03                	jne    c002cd74 <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c002cd71:	fb                   	sti    
c002cd72:	eb 02                	jmp    c002cd76 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002cd74:	31 c0                	xor    eax,eax
c002cd76:	83 c4 2c             	add    esp,0x2c
c002cd79:	5b                   	pop    ebx
c002cd7a:	5e                   	pop    esi
c002cd7b:	5f                   	pop    edi
c002cd7c:	5d                   	pop    ebp
c002cd7d:	c3                   	ret    

c002cd7e <SATA::read(unsigned long long, int, void*)>:
c002cd7e:	55                   	push   ebp
c002cd7f:	57                   	push   edi
c002cd80:	56                   	push   esi
c002cd81:	be 04 00 00 00       	mov    esi,0x4
c002cd86:	53                   	push   ebx
c002cd87:	83 ec 0c             	sub    esp,0xc
c002cd8a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cd8e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cd92:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cd96:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002cd9a:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cd9d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002cda3:	0f 87 1a 02 00 00    	ja     c002cfc3 <SATA::read(unsigned long long, int, void*)+0x245>
c002cda9:	85 c9                	test   ecx,ecx
c002cdab:	be 06 00 00 00       	mov    esi,0x6
c002cdb0:	0f 84 0d 02 00 00    	je     c002cfc3 <SATA::read(unsigned long long, int, void*)+0x245>
c002cdb6:	56                   	push   esi
c002cdb7:	56                   	push   esi
c002cdb8:	6a 00                	push   0x0
c002cdba:	51                   	push   ecx
c002cdbb:	53                   	push   ebx
c002cdbc:	52                   	push   edx
c002cdbd:	50                   	push   eax
c002cdbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cdc2:	e8 31 fd ff ff       	call   c002caf8 <SATA::access(unsigned long long, int, void*, bool)>
c002cdc7:	83 c4 20             	add    esp,0x20
c002cdca:	85 c0                	test   eax,eax
c002cdcc:	89 c6                	mov    esi,eax
c002cdce:	0f 85 ea 01 00 00    	jne    c002cfbe <SATA::read(unsigned long long, int, void*)+0x240>
c002cdd4:	50                   	push   eax
c002cdd5:	50                   	push   eax
c002cdd6:	6a 0f                	push   0xf
c002cdd8:	6a 00                	push   0x0
c002cdda:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cde0:	bb 0a 00 00 00       	mov    ebx,0xa
c002cde5:	e8 3b f2 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002cdea:	5a                   	pop    edx
c002cdeb:	59                   	pop    ecx
c002cdec:	b9 10 27 00 00       	mov    ecx,0x2710
c002cdf1:	0f b6 c0             	movzx  eax,al
c002cdf4:	50                   	push   eax
c002cdf5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdfa:	99                   	cdq    
c002cdfb:	f7 f9                	idiv   ecx
c002cdfd:	99                   	cdq    
c002cdfe:	f7 fb                	idiv   ebx
c002ce00:	8d 42 30             	lea    eax,[edx+0x30]
c002ce03:	0f b6 c0             	movzx  eax,al
c002ce06:	50                   	push   eax
c002ce07:	e8 08 f2 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002ce0c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002ce12:	5f                   	pop    edi
c002ce13:	5d                   	pop    ebp
c002ce14:	bd e8 03 00 00       	mov    ebp,0x3e8
c002ce19:	6a 0f                	push   0xf
c002ce1b:	6a 00                	push   0x0
c002ce1d:	e8 03 f2 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002ce22:	5a                   	pop    edx
c002ce23:	59                   	pop    ecx
c002ce24:	0f b6 c0             	movzx  eax,al
c002ce27:	50                   	push   eax
c002ce28:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce2d:	99                   	cdq    
c002ce2e:	f7 fd                	idiv   ebp
c002ce30:	99                   	cdq    
c002ce31:	f7 fb                	idiv   ebx
c002ce33:	8d 42 30             	lea    eax,[edx+0x30]
c002ce36:	0f b6 c0             	movzx  eax,al
c002ce39:	50                   	push   eax
c002ce3a:	e8 d5 f1 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002ce3f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002ce45:	5f                   	pop    edi
c002ce46:	bf 64 00 00 00       	mov    edi,0x64
c002ce4b:	58                   	pop    eax
c002ce4c:	6a 0f                	push   0xf
c002ce4e:	6a 00                	push   0x0
c002ce50:	e8 d0 f1 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002ce55:	5a                   	pop    edx
c002ce56:	59                   	pop    ecx
c002ce57:	0f b6 c0             	movzx  eax,al
c002ce5a:	50                   	push   eax
c002ce5b:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce60:	99                   	cdq    
c002ce61:	f7 ff                	idiv   edi
c002ce63:	99                   	cdq    
c002ce64:	f7 fb                	idiv   ebx
c002ce66:	8d 42 30             	lea    eax,[edx+0x30]
c002ce69:	0f b6 c0             	movzx  eax,al
c002ce6c:	50                   	push   eax
c002ce6d:	e8 a2 f1 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002ce72:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002ce78:	58                   	pop    eax
c002ce79:	5a                   	pop    edx
c002ce7a:	6a 0f                	push   0xf
c002ce7c:	6a 00                	push   0x0
c002ce7e:	e8 a2 f1 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002ce83:	59                   	pop    ecx
c002ce84:	5a                   	pop    edx
c002ce85:	0f b6 c0             	movzx  eax,al
c002ce88:	50                   	push   eax
c002ce89:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce8e:	99                   	cdq    
c002ce8f:	f7 fb                	idiv   ebx
c002ce91:	99                   	cdq    
c002ce92:	f7 fb                	idiv   ebx
c002ce94:	8d 42 30             	lea    eax,[edx+0x30]
c002ce97:	0f b6 c0             	movzx  eax,al
c002ce9a:	50                   	push   eax
c002ce9b:	e8 74 f1 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cea0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002cea6:	59                   	pop    ecx
c002cea7:	58                   	pop    eax
c002cea8:	6a 0f                	push   0xf
c002ceaa:	6a 00                	push   0x0
c002ceac:	e8 74 f1 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002ceb1:	5a                   	pop    edx
c002ceb2:	59                   	pop    ecx
c002ceb3:	0f b6 c0             	movzx  eax,al
c002ceb6:	50                   	push   eax
c002ceb7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cebc:	99                   	cdq    
c002cebd:	f7 fb                	idiv   ebx
c002cebf:	83 c2 30             	add    edx,0x30
c002cec2:	0f b6 d2             	movzx  edx,dl
c002cec5:	52                   	push   edx
c002cec6:	e8 49 f1 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cecb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002ced1:	58                   	pop    eax
c002ced2:	5a                   	pop    edx
c002ced3:	6a 0f                	push   0xf
c002ced5:	6a 00                	push   0x0
c002ced7:	e8 49 f1 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002cedc:	59                   	pop    ecx
c002cedd:	b9 10 27 00 00       	mov    ecx,0x2710
c002cee2:	5a                   	pop    edx
c002cee3:	0f b6 c0             	movzx  eax,al
c002cee6:	50                   	push   eax
c002cee7:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ceec:	99                   	cdq    
c002ceed:	f7 f9                	idiv   ecx
c002ceef:	99                   	cdq    
c002cef0:	f7 fb                	idiv   ebx
c002cef2:	8d 42 30             	lea    eax,[edx+0x30]
c002cef5:	0f b6 c0             	movzx  eax,al
c002cef8:	50                   	push   eax
c002cef9:	e8 16 f1 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cefe:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002cf04:	59                   	pop    ecx
c002cf05:	58                   	pop    eax
c002cf06:	6a 0f                	push   0xf
c002cf08:	6a 00                	push   0x0
c002cf0a:	e8 16 f1 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002cf0f:	5a                   	pop    edx
c002cf10:	59                   	pop    ecx
c002cf11:	0f b6 c0             	movzx  eax,al
c002cf14:	50                   	push   eax
c002cf15:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf1a:	99                   	cdq    
c002cf1b:	f7 fd                	idiv   ebp
c002cf1d:	99                   	cdq    
c002cf1e:	f7 fb                	idiv   ebx
c002cf20:	8d 42 30             	lea    eax,[edx+0x30]
c002cf23:	0f b6 c0             	movzx  eax,al
c002cf26:	50                   	push   eax
c002cf27:	e8 e8 f0 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cf2c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cf32:	5d                   	pop    ebp
c002cf33:	58                   	pop    eax
c002cf34:	6a 0f                	push   0xf
c002cf36:	6a 00                	push   0x0
c002cf38:	e8 e8 f0 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002cf3d:	5a                   	pop    edx
c002cf3e:	59                   	pop    ecx
c002cf3f:	0f b6 c0             	movzx  eax,al
c002cf42:	50                   	push   eax
c002cf43:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf48:	99                   	cdq    
c002cf49:	f7 ff                	idiv   edi
c002cf4b:	99                   	cdq    
c002cf4c:	f7 fb                	idiv   ebx
c002cf4e:	8d 42 30             	lea    eax,[edx+0x30]
c002cf51:	0f b6 c0             	movzx  eax,al
c002cf54:	50                   	push   eax
c002cf55:	e8 ba f0 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cf5a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002cf60:	5f                   	pop    edi
c002cf61:	5d                   	pop    ebp
c002cf62:	6a 0f                	push   0xf
c002cf64:	6a 00                	push   0x0
c002cf66:	e8 ba f0 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002cf6b:	5a                   	pop    edx
c002cf6c:	59                   	pop    ecx
c002cf6d:	0f b6 c0             	movzx  eax,al
c002cf70:	50                   	push   eax
c002cf71:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf76:	99                   	cdq    
c002cf77:	f7 fb                	idiv   ebx
c002cf79:	99                   	cdq    
c002cf7a:	f7 fb                	idiv   ebx
c002cf7c:	8d 42 30             	lea    eax,[edx+0x30]
c002cf7f:	0f b6 c0             	movzx  eax,al
c002cf82:	50                   	push   eax
c002cf83:	e8 8c f0 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cf88:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cf8e:	5f                   	pop    edi
c002cf8f:	5d                   	pop    ebp
c002cf90:	6a 0f                	push   0xf
c002cf92:	6a 00                	push   0x0
c002cf94:	e8 8c f0 ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002cf99:	5a                   	pop    edx
c002cf9a:	59                   	pop    ecx
c002cf9b:	0f b6 c0             	movzx  eax,al
c002cf9e:	50                   	push   eax
c002cf9f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cfa4:	99                   	cdq    
c002cfa5:	f7 fb                	idiv   ebx
c002cfa7:	83 c2 30             	add    edx,0x30
c002cfaa:	0f b6 d2             	movzx  edx,dl
c002cfad:	52                   	push   edx
c002cfae:	e8 61 f0 ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002cfb3:	83 c4 10             	add    esp,0x10
c002cfb6:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cfbc:	eb 05                	jmp    c002cfc3 <SATA::read(unsigned long long, int, void*)+0x245>
c002cfbe:	be 01 00 00 00       	mov    esi,0x1
c002cfc3:	83 c4 0c             	add    esp,0xc
c002cfc6:	89 f0                	mov    eax,esi
c002cfc8:	5b                   	pop    ebx
c002cfc9:	5e                   	pop    esi
c002cfca:	5f                   	pop    edi
c002cfcb:	5d                   	pop    ebp
c002cfcc:	c3                   	ret    
c002cfcd:	90                   	nop

c002cfce <SATA::write(unsigned long long, int, void*)>:
c002cfce:	55                   	push   ebp
c002cfcf:	57                   	push   edi
c002cfd0:	56                   	push   esi
c002cfd1:	53                   	push   ebx
c002cfd2:	83 ec 0c             	sub    esp,0xc
c002cfd5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002cfd9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002cfdd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002cfe1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002cfe5:	8d 70 ff             	lea    esi,[eax-0x1]
c002cfe8:	b8 04 00 00 00       	mov    eax,0x4
c002cfed:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002cff3:	0f 87 2c 02 00 00    	ja     c002d225 <SATA::write(unsigned long long, int, void*)+0x257>
c002cff9:	85 db                	test   ebx,ebx
c002cffb:	b8 06 00 00 00       	mov    eax,0x6
c002d000:	0f 84 1f 02 00 00    	je     c002d225 <SATA::write(unsigned long long, int, void*)+0x257>
c002d006:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002d00a:	c1 e6 09             	shl    esi,0x9
c002d00d:	01 de                	add    esi,ebx
c002d00f:	50                   	push   eax
c002d010:	89 d7                	mov    edi,edx
c002d012:	50                   	push   eax
c002d013:	83 c7 01             	add    edi,0x1
c002d016:	6a 01                	push   0x1
c002d018:	89 cd                	mov    ebp,ecx
c002d01a:	53                   	push   ebx
c002d01b:	83 d5 00             	adc    ebp,0x0
c002d01e:	6a 01                	push   0x1
c002d020:	81 c3 00 02 00 00    	add    ebx,0x200
c002d026:	51                   	push   ecx
c002d027:	52                   	push   edx
c002d028:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d02c:	e8 c7 fa ff ff       	call   c002caf8 <SATA::access(unsigned long long, int, void*, bool)>
c002d031:	83 c4 20             	add    esp,0x20
c002d034:	39 f3                	cmp    ebx,esi
c002d036:	89 fa                	mov    edx,edi
c002d038:	89 e9                	mov    ecx,ebp
c002d03a:	75 d3                	jne    c002d00f <SATA::write(unsigned long long, int, void*)+0x41>
c002d03c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002d040:	bd 10 27 00 00       	mov    ebp,0x2710
c002d045:	bb 0a 00 00 00       	mov    ebx,0xa
c002d04a:	01 05 b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,eax
c002d050:	50                   	push   eax
c002d051:	50                   	push   eax
c002d052:	6a 0f                	push   0xf
c002d054:	6a 00                	push   0x0
c002d056:	e8 ca ef ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d05b:	5a                   	pop    edx
c002d05c:	59                   	pop    ecx
c002d05d:	0f b6 c0             	movzx  eax,al
c002d060:	50                   	push   eax
c002d061:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d066:	99                   	cdq    
c002d067:	f7 fd                	idiv   ebp
c002d069:	99                   	cdq    
c002d06a:	f7 fb                	idiv   ebx
c002d06c:	8d 42 30             	lea    eax,[edx+0x30]
c002d06f:	0f b6 c0             	movzx  eax,al
c002d072:	50                   	push   eax
c002d073:	e8 9c ef ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d078:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d07e:	5e                   	pop    esi
c002d07f:	5f                   	pop    edi
c002d080:	bf e8 03 00 00       	mov    edi,0x3e8
c002d085:	6a 0f                	push   0xf
c002d087:	6a 00                	push   0x0
c002d089:	e8 97 ef ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d08e:	5a                   	pop    edx
c002d08f:	59                   	pop    ecx
c002d090:	0f b6 c0             	movzx  eax,al
c002d093:	50                   	push   eax
c002d094:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d099:	99                   	cdq    
c002d09a:	f7 ff                	idiv   edi
c002d09c:	99                   	cdq    
c002d09d:	f7 fb                	idiv   ebx
c002d09f:	8d 42 30             	lea    eax,[edx+0x30]
c002d0a2:	0f b6 c0             	movzx  eax,al
c002d0a5:	50                   	push   eax
c002d0a6:	e8 69 ef ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d0ab:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d0b1:	5e                   	pop    esi
c002d0b2:	be 64 00 00 00       	mov    esi,0x64
c002d0b7:	58                   	pop    eax
c002d0b8:	6a 0f                	push   0xf
c002d0ba:	6a 00                	push   0x0
c002d0bc:	e8 64 ef ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d0c1:	5a                   	pop    edx
c002d0c2:	59                   	pop    ecx
c002d0c3:	0f b6 c0             	movzx  eax,al
c002d0c6:	50                   	push   eax
c002d0c7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0cc:	99                   	cdq    
c002d0cd:	f7 fe                	idiv   esi
c002d0cf:	99                   	cdq    
c002d0d0:	f7 fb                	idiv   ebx
c002d0d2:	8d 42 30             	lea    eax,[edx+0x30]
c002d0d5:	0f b6 c0             	movzx  eax,al
c002d0d8:	50                   	push   eax
c002d0d9:	e8 36 ef ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d0de:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d0e4:	58                   	pop    eax
c002d0e5:	5a                   	pop    edx
c002d0e6:	6a 0f                	push   0xf
c002d0e8:	6a 00                	push   0x0
c002d0ea:	e8 36 ef ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d0ef:	59                   	pop    ecx
c002d0f0:	5a                   	pop    edx
c002d0f1:	0f b6 c0             	movzx  eax,al
c002d0f4:	50                   	push   eax
c002d0f5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0fa:	99                   	cdq    
c002d0fb:	f7 fb                	idiv   ebx
c002d0fd:	99                   	cdq    
c002d0fe:	f7 fb                	idiv   ebx
c002d100:	8d 42 30             	lea    eax,[edx+0x30]
c002d103:	0f b6 c0             	movzx  eax,al
c002d106:	50                   	push   eax
c002d107:	e8 08 ef ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d10c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d112:	59                   	pop    ecx
c002d113:	58                   	pop    eax
c002d114:	6a 0f                	push   0xf
c002d116:	6a 00                	push   0x0
c002d118:	e8 08 ef ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d11d:	5a                   	pop    edx
c002d11e:	59                   	pop    ecx
c002d11f:	0f b6 c0             	movzx  eax,al
c002d122:	50                   	push   eax
c002d123:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d128:	99                   	cdq    
c002d129:	f7 fb                	idiv   ebx
c002d12b:	83 c2 30             	add    edx,0x30
c002d12e:	0f b6 d2             	movzx  edx,dl
c002d131:	52                   	push   edx
c002d132:	e8 dd ee ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d137:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d13d:	58                   	pop    eax
c002d13e:	5a                   	pop    edx
c002d13f:	6a 0f                	push   0xf
c002d141:	6a 00                	push   0x0
c002d143:	e8 dd ee ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d148:	59                   	pop    ecx
c002d149:	5a                   	pop    edx
c002d14a:	0f b6 c0             	movzx  eax,al
c002d14d:	50                   	push   eax
c002d14e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d153:	99                   	cdq    
c002d154:	f7 fd                	idiv   ebp
c002d156:	99                   	cdq    
c002d157:	f7 fb                	idiv   ebx
c002d159:	8d 42 30             	lea    eax,[edx+0x30]
c002d15c:	0f b6 c0             	movzx  eax,al
c002d15f:	50                   	push   eax
c002d160:	e8 af ee ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d165:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d16b:	59                   	pop    ecx
c002d16c:	5d                   	pop    ebp
c002d16d:	6a 0f                	push   0xf
c002d16f:	6a 00                	push   0x0
c002d171:	e8 af ee ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d176:	5a                   	pop    edx
c002d177:	59                   	pop    ecx
c002d178:	0f b6 c0             	movzx  eax,al
c002d17b:	50                   	push   eax
c002d17c:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d181:	99                   	cdq    
c002d182:	f7 ff                	idiv   edi
c002d184:	99                   	cdq    
c002d185:	f7 fb                	idiv   ebx
c002d187:	8d 42 30             	lea    eax,[edx+0x30]
c002d18a:	0f b6 c0             	movzx  eax,al
c002d18d:	50                   	push   eax
c002d18e:	e8 81 ee ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d193:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d199:	5f                   	pop    edi
c002d19a:	5d                   	pop    ebp
c002d19b:	6a 0f                	push   0xf
c002d19d:	6a 00                	push   0x0
c002d19f:	e8 81 ee ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d1a4:	5a                   	pop    edx
c002d1a5:	59                   	pop    ecx
c002d1a6:	0f b6 c0             	movzx  eax,al
c002d1a9:	50                   	push   eax
c002d1aa:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1af:	99                   	cdq    
c002d1b0:	f7 fe                	idiv   esi
c002d1b2:	99                   	cdq    
c002d1b3:	f7 fb                	idiv   ebx
c002d1b5:	8d 42 30             	lea    eax,[edx+0x30]
c002d1b8:	0f b6 c0             	movzx  eax,al
c002d1bb:	50                   	push   eax
c002d1bc:	e8 53 ee ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d1c1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d1c7:	5e                   	pop    esi
c002d1c8:	5f                   	pop    edi
c002d1c9:	6a 0f                	push   0xf
c002d1cb:	6a 00                	push   0x0
c002d1cd:	e8 53 ee ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d1d2:	5d                   	pop    ebp
c002d1d3:	5a                   	pop    edx
c002d1d4:	0f b6 c0             	movzx  eax,al
c002d1d7:	50                   	push   eax
c002d1d8:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d1dd:	99                   	cdq    
c002d1de:	f7 fb                	idiv   ebx
c002d1e0:	99                   	cdq    
c002d1e1:	f7 fb                	idiv   ebx
c002d1e3:	8d 42 30             	lea    eax,[edx+0x30]
c002d1e6:	0f b6 c0             	movzx  eax,al
c002d1e9:	50                   	push   eax
c002d1ea:	e8 25 ee ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d1ef:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d1f5:	59                   	pop    ecx
c002d1f6:	5e                   	pop    esi
c002d1f7:	6a 0f                	push   0xf
c002d1f9:	6a 00                	push   0x0
c002d1fb:	e8 25 ee ff ff       	call   c002c025 <combineColours(unsigned char, unsigned char)>
c002d200:	5f                   	pop    edi
c002d201:	5d                   	pop    ebp
c002d202:	0f b6 c0             	movzx  eax,al
c002d205:	50                   	push   eax
c002d206:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d20b:	99                   	cdq    
c002d20c:	f7 fb                	idiv   ebx
c002d20e:	83 c2 30             	add    edx,0x30
c002d211:	0f b6 d2             	movzx  edx,dl
c002d214:	52                   	push   edx
c002d215:	e8 fa ed ff ff       	call   c002c014 <combineCharAndColour(char, unsigned char)>
c002d21a:	83 c4 10             	add    esp,0x10
c002d21d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d223:	31 c0                	xor    eax,eax
c002d225:	83 c4 0c             	add    esp,0xc
c002d228:	5b                   	pop    ebx
c002d229:	5e                   	pop    esi
c002d22a:	5f                   	pop    edi
c002d22b:	5d                   	pop    ebp
c002d22c:	c3                   	ret    
c002d22d:	90                   	nop

c002d22e <SATAPI::write(unsigned long long, int, void*)>:
c002d22e:	b8 03 00 00 00       	mov    eax,0x3
c002d233:	c3                   	ret    

c002d234 <SATAPI::close(int, int, void*)>:
c002d234:	83 ec 0c             	sub    esp,0xc
c002d237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d23b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d241:	85 c0                	test   eax,eax
c002d243:	74 0c                	je     c002d251 <SATAPI::close(int, int, void*)+0x1d>
c002d245:	8b 10                	mov    edx,DWORD PTR [eax]
c002d247:	83 ec 0c             	sub    esp,0xc
c002d24a:	50                   	push   eax
c002d24b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d24e:	83 c4 10             	add    esp,0x10
c002d251:	31 c0                	xor    eax,eax
c002d253:	83 c4 0c             	add    esp,0xc
c002d256:	c3                   	ret    
c002d257:	90                   	nop

c002d258 <SATAPI::SATAPI()>:
c002d258:	83 ec 0c             	sub    esp,0xc
c002d25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d25f:	83 ec 04             	sub    esp,0x4
c002d262:	68 00 08 00 00       	push   0x800
c002d267:	68 a4 38 03 c0       	push   0xc00338a4
c002d26c:	50                   	push   eax
c002d26d:	e8 20 e4 fe ff       	call   c001b692 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d272:	83 c4 10             	add    esp,0x10
c002d275:	ba 98 39 03 c0       	mov    edx,0xc0033998
c002d27a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d27e:	89 10                	mov    DWORD PTR [eax],edx
c002d280:	90                   	nop
c002d281:	83 c4 0c             	add    esp,0xc
c002d284:	c3                   	ret    
c002d285:	90                   	nop

c002d286 <SATAPI::diskRemoved()>:
c002d286:	c3                   	ret    
c002d287:	90                   	nop

c002d288 <SATAPI::diskInserted()>:
c002d288:	83 ec 18             	sub    esp,0x18
c002d28b:	68 b0 38 03 c0       	push   0xc00338b0
c002d290:	e8 85 bf fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002d295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d299:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d2a0:	83 c4 1c             	add    esp,0x1c
c002d2a3:	c3                   	ret    

c002d2a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d2a4:	55                   	push   ebp
c002d2a5:	57                   	push   edi
c002d2a6:	56                   	push   esi
c002d2a7:	53                   	push   ebx
c002d2a8:	83 ec 34             	sub    esp,0x34
c002d2ab:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d2af:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d2b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002d2b7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d2bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d2bf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d2c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d2cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d2cf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d2d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d2d9:	83 c0 02             	add    eax,0x2
c002d2dc:	c1 e0 07             	shl    eax,0x7
c002d2df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d2e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d2e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d2eb:	c1 e0 07             	shl    eax,0x7
c002d2ee:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d2f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d2f6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d304:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d30a:	e8 a9 e4 ff ff       	call   c002b7b8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d30f:	83 c4 10             	add    esp,0x10
c002d312:	89 c2                	mov    edx,eax
c002d314:	b8 01 00 00 00       	mov    eax,0x1
c002d319:	83 fa ff             	cmp    edx,0xffffffff
c002d31c:	0f 84 5f 02 00 00    	je     c002d581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d322:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002d326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d32a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d330:	8b 00                	mov    eax,DWORD PTR [eax]
c002d332:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d338:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d33e:	89 d1                	mov    ecx,edx
c002d340:	c1 e1 05             	shl    ecx,0x5
c002d343:	01 c8                	add    eax,ecx
c002d345:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d347:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d34d:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d353:	89 08                	mov    DWORD PTR [eax],ecx
c002d355:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d35b:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d361:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d367:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d36a:	50                   	push   eax
c002d36b:	68 90 00 00 00       	push   0x90
c002d370:	6a 00                	push   0x0
c002d372:	53                   	push   ebx
c002d373:	e8 78 31 fd ff       	call   c00004f0 <memset>
c002d378:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d37b:	b9 0c 00 00 00       	mov    ecx,0xc
c002d380:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d384:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d386:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d38c:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d390:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d394:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d39a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d39e:	48                   	dec    eax
c002d39f:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d3a4:	89 c1                	mov    ecx,eax
c002d3a6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d3ac:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d3b1:	09 c8                	or     eax,ecx
c002d3b3:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d3b9:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d3bf:	83 c8 80             	or     eax,0xffffff80
c002d3c2:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d3c8:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d3cb:	25 00 7f 00 00       	and    eax,0x7f00
c002d3d0:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d3d5:	66 89 03             	mov    WORD PTR [ebx],ax
c002d3d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3dc:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c002d3e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3e4:	c1 e8 10             	shr    eax,0x10
c002d3e7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d3ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d3ee:	c1 e8 18             	shr    eax,0x18
c002d3f1:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c002d3f4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d3f8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d3fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d3ff:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d402:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d406:	83 c4 10             	add    esp,0x10
c002d409:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002d40d:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d411:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002d415:	31 c0                	xor    eax,eax
c002d417:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c002d41d:	80 e1 88             	and    cl,0x88
c002d420:	74 0a                	je     c002d42c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c002d422:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d427:	74 0a                	je     c002d433 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18f>
c002d429:	40                   	inc    eax
c002d42a:	eb eb                	jmp    c002d417 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x173>
c002d42c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d431:	75 43                	jne    c002d476 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d2>
c002d433:	83 ec 0c             	sub    esp,0xc
c002d436:	68 c8 38 03 c0       	push   0xc00338c8
c002d43b:	e8 da bd fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002d440:	58                   	pop    eax
c002d441:	5a                   	pop    edx
c002d442:	68 dd 38 03 c0       	push   0xc00338dd
c002d447:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d44d:	e8 6a 9f fe ff       	call   c00173bc <VgaText::puts(char const*)>
c002d452:	59                   	pop    ecx
c002d453:	5b                   	pop    ebx
c002d454:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d458:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d45e:	e8 ef e3 ff ff       	call   c002b852 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d463:	5e                   	pop    esi
c002d464:	5f                   	pop    edi
c002d465:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d469:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d46f:	e8 be e3 ff ff       	call   c002b832 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d474:	eb 48                	jmp    c002d4be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21a>
c002d476:	b8 01 00 00 00       	mov    eax,0x1
c002d47b:	88 d1                	mov    cl,dl
c002d47d:	d3 e0                	shl    eax,cl
c002d47f:	be a8 e4 ff ff       	mov    esi,0xffffe4a8
c002d484:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002d48a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002d48e:	89 c7                	mov    edi,eax
c002d490:	c1 e3 07             	shl    ebx,0x7
c002d493:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002d497:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c002d49d:	85 c7                	test   edi,eax
c002d49f:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c002d4a5:	0f 84 a3 00 00 00    	je     c002d54e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2aa>
c002d4ab:	0f ba e0 1e          	bt     eax,0x1e
c002d4af:	73 1a                	jae    c002d4cb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x227>
c002d4b1:	83 ec 0c             	sub    esp,0xc
c002d4b4:	68 ef 38 03 c0       	push   0xc00338ef
c002d4b9:	e8 5c bd fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002d4be:	83 c4 10             	add    esp,0x10
c002d4c1:	b8 01 00 00 00       	mov    eax,0x1
c002d4c6:	e9 b6 00 00 00       	jmp    c002d581 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2dd>
c002d4cb:	8d 86 70 17 00 00    	lea    eax,[esi+0x1770]
c002d4d1:	83 f8 0d             	cmp    eax,0xd
c002d4d4:	77 0a                	ja     c002d4e0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23c>
c002d4d6:	83 ec 0c             	sub    esp,0xc
c002d4d9:	68 c8 00 00 00       	push   0xc8
c002d4de:	eb 28                	jmp    c002d508 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d4e0:	8d 86 88 13 00 00    	lea    eax,[esi+0x1388]
c002d4e6:	83 f8 0d             	cmp    eax,0xd
c002d4e9:	77 0a                	ja     c002d4f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x251>
c002d4eb:	83 ec 0c             	sub    esp,0xc
c002d4ee:	68 58 02 00 00       	push   0x258
c002d4f3:	eb 13                	jmp    c002d508 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d4f5:	8d 86 a0 0f 00 00    	lea    eax,[esi+0xfa0]
c002d4fb:	83 f8 06             	cmp    eax,0x6
c002d4fe:	77 10                	ja     c002d510 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26c>
c002d500:	83 ec 0c             	sub    esp,0xc
c002d503:	68 dc 05 00 00       	push   0x5dc
c002d508:	e8 67 7e ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002d50d:	83 c4 10             	add    esp,0x10
c002d510:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d514:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d517:	75 06                	jne    c002d51f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27b>
c002d519:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d51d:	74 15                	je     c002d534 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d51f:	83 fe 06             	cmp    esi,0x6
c002d522:	77 10                	ja     c002d534 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x290>
c002d524:	83 ec 0c             	sub    esp,0xc
c002d527:	68 c4 09 00 00       	push   0x9c4
c002d52c:	e8 43 7e ff ff       	call   c0025374 <milliTenthSleep(unsigned int)>
c002d531:	83 c4 10             	add    esp,0x10
c002d534:	46                   	inc    esi
c002d535:	81 fe b9 0b 00 00    	cmp    esi,0xbb9
c002d53b:	0f 85 56 ff ff ff    	jne    c002d497 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f3>
c002d541:	83 ec 0c             	sub    esp,0xc
c002d544:	68 02 39 03 c0       	push   0xc0033902
c002d549:	e9 6b ff ff ff       	jmp    c002d4b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d54e:	0f ba e0 1e          	bt     eax,0x1e
c002d552:	73 0d                	jae    c002d561 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2bd>
c002d554:	83 ec 0c             	sub    esp,0xc
c002d557:	68 16 39 03 c0       	push   0xc0033916
c002d55c:	e9 58 ff ff ff       	jmp    c002d4b9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c002d561:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d566:	74 17                	je     c002d57f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d568:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d56d:	74 10                	je     c002d57f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2db>
c002d56f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d575:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d579:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d57d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d57f:	31 c0                	xor    eax,eax
c002d581:	83 c4 2c             	add    esp,0x2c
c002d584:	5b                   	pop    ebx
c002d585:	5e                   	pop    esi
c002d586:	5f                   	pop    edi
c002d587:	5d                   	pop    ebp
c002d588:	c3                   	ret    
c002d589:	90                   	nop

c002d58a <SATAPI::eject()>:
c002d58a:	57                   	push   edi
c002d58b:	b9 03 00 00 00       	mov    ecx,0x3
c002d590:	83 ec 18             	sub    esp,0x18
c002d593:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d597:	fc                   	cld    
c002d598:	31 c0                	xor    eax,eax
c002d59a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d59c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d5a1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d5a6:	50                   	push   eax
c002d5a7:	6a 00                	push   0x0
c002d5a9:	6a 00                	push   0x0
c002d5ab:	6a 00                	push   0x0
c002d5ad:	6a 00                	push   0x0
c002d5af:	6a 02                	push   0x2
c002d5b1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d5b5:	50                   	push   eax
c002d5b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d5ba:	e8 e5 fc ff ff       	call   c002d2a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d5bf:	83 c4 38             	add    esp,0x38
c002d5c2:	31 c0                	xor    eax,eax
c002d5c4:	5f                   	pop    edi
c002d5c5:	c3                   	ret    

c002d5c6 <SATAPI::detectMedia()>:
c002d5c6:	53                   	push   ebx
c002d5c7:	83 ec 14             	sub    esp,0x14
c002d5ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d5ce:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d5d4:	e8 33 fa fe ff       	call   c001d00c <VCache::writeWriteBuffer()>
c002d5d9:	59                   	pop    ecx
c002d5da:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d5e0:	e8 17 fa fe ff       	call   c001cffc <VCache::invalidateReadBuffer()>
c002d5e5:	c7 04 24 2b 39 03 c0 	mov    DWORD PTR [esp],0xc003392b
c002d5ec:	e8 29 bc fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002d5f1:	83 c4 10             	add    esp,0x10
c002d5f4:	31 c0                	xor    eax,eax
c002d5f6:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d5fd:	85 d2                	test   edx,edx
c002d5ff:	74 0f                	je     c002d610 <SATAPI::detectMedia()+0x4a>
c002d601:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d607:	75 07                	jne    c002d610 <SATAPI::detectMedia()+0x4a>
c002d609:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d610:	40                   	inc    eax
c002d611:	83 f8 1a             	cmp    eax,0x1a
c002d614:	75 e0                	jne    c002d5f6 <SATAPI::detectMedia()+0x30>
c002d616:	83 c4 08             	add    esp,0x8
c002d619:	5b                   	pop    ebx
c002d61a:	c3                   	ret    
c002d61b:	90                   	nop

c002d61c <SATAPI::open(int, int, void*)>:
c002d61c:	56                   	push   esi
c002d61d:	53                   	push   ebx
c002d61e:	51                   	push   ecx
c002d61f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d623:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d627:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d631:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d637:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d63b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d645:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d64f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d656:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d65c:	e8 91 90 fe ff       	call   c00166f2 <Phys::allocatePage()>
c002d661:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d667:	89 c6                	mov    esi,eax
c002d669:	e8 84 90 fe ff       	call   c00166f2 <Phys::allocatePage()>
c002d66e:	81 c6 00 10 00 00    	add    esi,0x1000
c002d674:	39 c6                	cmp    esi,eax
c002d676:	74 10                	je     c002d688 <SATAPI::open(int, int, void*)+0x6c>
c002d678:	83 ec 0c             	sub    esp,0xc
c002d67b:	68 40 39 03 c0       	push   0xc0033940
c002d680:	e8 1d 2b ff ff       	call   c00201a2 <KePanic(char const*)>
c002d685:	83 c4 10             	add    esp,0x10
c002d688:	83 ec 0c             	sub    esp,0xc
c002d68b:	6a 02                	push   0x2
c002d68d:	e8 73 a8 fe ff       	call   c0017f05 <Virt::allocateKernelVirtualPages(int)>
c002d692:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d698:	6a 03                	push   0x3
c002d69a:	50                   	push   eax
c002d69b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d6a1:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d6a7:	e8 62 af fe ff       	call   c001860e <VAS::mapPage(unsigned long, unsigned long, int)>
c002d6ac:	83 c4 14             	add    esp,0x14
c002d6af:	68 78 01 00 00       	push   0x178
c002d6b4:	e8 2a 8d fe ff       	call   c00163e3 <malloc>
c002d6b9:	83 c4 0c             	add    esp,0xc
c002d6bc:	6a 00                	push   0x0
c002d6be:	68 ff ff ff 7f       	push   0x7fffffff
c002d6c3:	6a 00                	push   0x0
c002d6c5:	6a 00                	push   0x0
c002d6c7:	53                   	push   ebx
c002d6c8:	68 56 39 03 c0       	push   0xc0033956
c002d6cd:	89 c6                	mov    esi,eax
c002d6cf:	50                   	push   eax
c002d6d0:	e8 95 ed fe ff       	call   c001c46a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d6d5:	83 c4 14             	add    esp,0x14
c002d6d8:	56                   	push   esi
c002d6d9:	e8 4c ee fe ff       	call   c001c52a <LogicalDisk::assignDriveLetter()>
c002d6de:	5a                   	pop    edx
c002d6df:	59                   	pop    ecx
c002d6e0:	0f be c0             	movsx  eax,al
c002d6e3:	50                   	push   eax
c002d6e4:	68 9c 37 03 c0       	push   0xc003379c
c002d6e9:	e8 2c bb fe ff       	call   c001921a <Dbg::kprintf(char const*, ...)>
c002d6ee:	58                   	pop    eax
c002d6ef:	5a                   	pop    edx
c002d6f0:	56                   	push   esi
c002d6f1:	53                   	push   ebx
c002d6f2:	e8 b9 db fe ff       	call   c001b2b0 <Device::addChild(Device*)>
c002d6f7:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d6fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d700:	e8 f5 df fe ff       	call   c001b6fa <PhysicalDisk::startCache()>
c002d705:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d70c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d70f:	e8 b2 fe ff ff       	call   c002d5c6 <SATAPI::detectMedia()>
c002d714:	83 c4 14             	add    esp,0x14
c002d717:	31 c0                	xor    eax,eax
c002d719:	5b                   	pop    ebx
c002d71a:	5e                   	pop    esi
c002d71b:	c3                   	ret    

c002d71c <SATAPI::read(unsigned long long, int, void*)>:
c002d71c:	55                   	push   ebp
c002d71d:	57                   	push   edi
c002d71e:	56                   	push   esi
c002d71f:	53                   	push   ebx
c002d720:	83 ec 3c             	sub    esp,0x3c
c002d723:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c002d727:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002d72b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002d72f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c002d733:	83 fd 04             	cmp    ebp,0x4
c002d736:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d73a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d73e:	7e 10                	jle    c002d750 <SATAPI::read(unsigned long long, int, void*)+0x34>
c002d740:	83 ec 0c             	sub    esp,0xc
c002d743:	68 64 39 03 c0       	push   0xc0033964
c002d748:	e8 55 2a ff ff       	call   c00201a2 <KePanic(char const*)>
c002d74d:	83 c4 10             	add    esp,0x10
c002d750:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d756:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d75c:	51                   	push   ecx
c002d75d:	50                   	push   eax
c002d75e:	83 c0 02             	add    eax,0x2
c002d761:	c1 e0 07             	shl    eax,0x7
c002d764:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d76a:	50                   	push   eax
c002d76b:	52                   	push   edx
c002d76c:	e8 0b e1 ff ff       	call   c002b87c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d771:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d775:	b9 03 00 00 00       	mov    ecx,0x3
c002d77a:	fc                   	cld    
c002d77b:	31 c0                	xor    eax,eax
c002d77d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d77f:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d784:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d789:	83 c4 0c             	add    esp,0xc
c002d78c:	6a 00                	push   0x0
c002d78e:	6a 00                	push   0x0
c002d790:	6a 00                	push   0x0
c002d792:	6a 00                	push   0x0
c002d794:	6a 02                	push   0x2
c002d796:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d79a:	50                   	push   eax
c002d79b:	53                   	push   ebx
c002d79c:	e8 03 fb ff ff       	call   c002d2a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d7a1:	83 c4 20             	add    esp,0x20
c002d7a4:	85 c0                	test   eax,eax
c002d7a6:	89 c6                	mov    esi,eax
c002d7a8:	75 46                	jne    c002d7f0 <SATAPI::read(unsigned long long, int, void*)+0xd4>
c002d7aa:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d7ae:	b9 03 00 00 00       	mov    ecx,0x3
c002d7b3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d7b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d7b9:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d7be:	0f c8                	bswap  eax
c002d7c0:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d7c4:	89 e8                	mov    eax,ebp
c002d7c6:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d7ca:	50                   	push   eax
c002d7cb:	55                   	push   ebp
c002d7cc:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002d7d0:	c1 e5 0b             	shl    ebp,0xb
c002d7d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d7d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d7db:	55                   	push   ebp
c002d7dc:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d7e0:	50                   	push   eax
c002d7e1:	53                   	push   ebx
c002d7e2:	e8 bd fa ff ff       	call   c002d2a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d7e7:	83 c4 20             	add    esp,0x20
c002d7ea:	85 c0                	test   eax,eax
c002d7ec:	89 c6                	mov    esi,eax
c002d7ee:	74 0c                	je     c002d7fc <SATAPI::read(unsigned long long, int, void*)+0xe0>
c002d7f0:	83 ec 0c             	sub    esp,0xc
c002d7f3:	53                   	push   ebx
c002d7f4:	e8 cd fd ff ff       	call   c002d5c6 <SATAPI::detectMedia()>
c002d7f9:	83 c4 10             	add    esp,0x10
c002d7fc:	83 c4 3c             	add    esp,0x3c
c002d7ff:	89 f0                	mov    eax,esi
c002d801:	5b                   	pop    ebx
c002d802:	5e                   	pop    esi
c002d803:	5f                   	pop    edi
c002d804:	5d                   	pop    ebp
c002d805:	c3                   	ret    

c002d806 <IOAPIC::close(int, int, void*)>:
c002d806:	b8 00 00 00 00       	mov    eax,0x0
c002d80b:	c3                   	ret    

c002d80c <apicGetBase()>:
c002d80c:	55                   	push   ebp
c002d80d:	89 e5                	mov    ebp,esp
c002d80f:	83 ec 18             	sub    esp,0x18
c002d812:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d817:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d81d:	83 e0 08             	and    eax,0x8
c002d820:	0f b6 c0             	movzx  eax,al
c002d823:	85 c0                	test   eax,eax
c002d825:	75 07                	jne    c002d82e <apicGetBase()+0x22>
c002d827:	b8 00 00 00 00       	mov    eax,0x0
c002d82c:	eb 21                	jmp    c002d84f <apicGetBase()+0x43>
c002d82e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d833:	83 ec 08             	sub    esp,0x8
c002d836:	6a 1b                	push   0x1b
c002d838:	50                   	push   eax
c002d839:	e8 b6 81 fe ff       	call   c00159f4 <Computer::rdmsr(unsigned int)>
c002d83e:	83 c4 10             	add    esp,0x10
c002d841:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d844:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d847:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d84a:	25 00 00 ff ff       	and    eax,0xffff0000
c002d84f:	c9                   	leave  
c002d850:	c3                   	ret    
c002d851:	90                   	nop

c002d852 <IOAPIC::IOAPIC()>:
c002d852:	83 ec 0c             	sub    esp,0xc
c002d855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d859:	83 ec 08             	sub    esp,0x8
c002d85c:	68 c8 39 03 c0       	push   0xc00339c8
c002d861:	50                   	push   eax
c002d862:	e8 ab db fe ff       	call   c001b412 <Device::Device(char const*)>
c002d867:	83 c4 10             	add    esp,0x10
c002d86a:	ba d8 39 03 c0       	mov    edx,0xc00339d8
c002d86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d873:	89 10                	mov    DWORD PTR [eax],edx
c002d875:	90                   	nop
c002d876:	83 c4 0c             	add    esp,0xc
c002d879:	c3                   	ret    

c002d87a <apicOpen()>:
c002d87a:	55                   	push   ebp
c002d87b:	89 e5                	mov    ebp,esp
c002d87d:	53                   	push   ebx
c002d87e:	83 ec 34             	sub    esp,0x34
c002d881:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d886:	83 f0 01             	xor    eax,0x1
c002d889:	0f b6 c0             	movzx  eax,al
c002d88c:	85 c0                	test   eax,eax
c002d88e:	0f 84 a3 00 00 00    	je     c002d937 <apicOpen()+0xbd>
c002d894:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d898:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d89d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d8a1:	0f b6 c0             	movzx  eax,al
c002d8a4:	39 c2                	cmp    edx,eax
c002d8a6:	0f 83 84 00 00 00    	jae    c002d930 <apicOpen()+0xb6>
c002d8ac:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d8b3:	83 ec 0c             	sub    esp,0xc
c002d8b6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d8b9:	e8 25 8b fe ff       	call   c00163e3 <malloc>
c002d8be:	83 c4 10             	add    esp,0x10
c002d8c1:	89 c3                	mov    ebx,eax
c002d8c3:	83 ec 0c             	sub    esp,0xc
c002d8c6:	53                   	push   ebx
c002d8c7:	e8 86 ff ff ff       	call   c002d852 <IOAPIC::IOAPIC()>
c002d8cc:	83 c4 10             	add    esp,0x10
c002d8cf:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d8d2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d8d6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d8d9:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d8e0:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d8e5:	83 c0 01             	add    eax,0x1
c002d8e8:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d8ed:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d8f2:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d8f8:	83 ec 08             	sub    esp,0x8
c002d8fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d8fe:	50                   	push   eax
c002d8ff:	e8 ac d9 fe ff       	call   c001b2b0 <Device::addChild(Device*)>
c002d904:	83 c4 10             	add    esp,0x10
c002d907:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d90a:	8b 00                	mov    eax,DWORD PTR [eax]
c002d90c:	83 c0 08             	add    eax,0x8
c002d90f:	8b 00                	mov    eax,DWORD PTR [eax]
c002d911:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d915:	6a 00                	push   0x0
c002d917:	6a 00                	push   0x0
c002d919:	52                   	push   edx
c002d91a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d91d:	ff d0                	call   eax
c002d91f:	83 c4 10             	add    esp,0x10
c002d922:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d925:	83 c0 01             	add    eax,0x1
c002d928:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d92b:	e9 68 ff ff ff       	jmp    c002d898 <apicOpen()+0x1e>
c002d930:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d937:	e8 d0 fe ff ff       	call   c002d80c <apicGetBase()>
c002d93c:	05 f0 00 00 00       	add    eax,0xf0
c002d941:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d944:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d947:	8b 00                	mov    eax,DWORD PTR [eax]
c002d949:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d94c:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d953:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d95a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d95d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d960:	89 10                	mov    DWORD PTR [eax],edx
c002d962:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d969:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d96e:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d971:	7d 7c                	jge    c002d9ef <apicOpen()+0x175>
c002d973:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d976:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d97d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d980:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d983:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d98a:	c1 e8 08             	shr    eax,0x8
c002d98d:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d991:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d994:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d99b:	c1 e8 18             	shr    eax,0x18
c002d99e:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d9a1:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002d9a5:	3d ff 00 00 00       	cmp    eax,0xff
c002d9aa:	75 3a                	jne    c002d9e6 <apicOpen()+0x16c>
c002d9ac:	e8 5b fe ff ff       	call   c002d80c <apicGetBase()>
c002d9b1:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002d9b5:	83 fa 01             	cmp    edx,0x1
c002d9b8:	75 07                	jne    c002d9c1 <apicOpen()+0x147>
c002d9ba:	ba 60 03 00 00       	mov    edx,0x360
c002d9bf:	eb 05                	jmp    c002d9c6 <apicOpen()+0x14c>
c002d9c1:	ba 50 03 00 00       	mov    edx,0x350
c002d9c6:	01 d0                	add    eax,edx
c002d9c8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d9cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9d0:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002d9d3:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002d9da:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002d9de:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d9e1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002d9e4:	89 10                	mov    DWORD PTR [eax],edx
c002d9e6:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002d9ea:	e9 7a ff ff ff       	jmp    c002d969 <apicOpen()+0xef>
c002d9ef:	90                   	nop
c002d9f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d9f3:	c9                   	leave  
c002d9f4:	c3                   	ret    
c002d9f5:	90                   	nop

c002d9f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002d9f6:	55                   	push   ebp
c002d9f7:	89 e5                	mov    ebp,esp
c002d9f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002da02:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da05:	72 1d                	jb     c002da24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da0a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002da10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da13:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002da19:	01 d0                	add    eax,edx
c002da1b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002da1e:	73 04                	jae    c002da24 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002da20:	b0 01                	mov    al,0x1
c002da22:	eb 02                	jmp    c002da26 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002da24:	b0 00                	mov    al,0x0
c002da26:	5d                   	pop    ebp
c002da27:	c3                   	ret    

c002da28 <IOAPIC::read(int)>:
c002da28:	55                   	push   ebp
c002da29:	89 e5                	mov    ebp,esp
c002da2b:	83 ec 10             	sub    esp,0x10
c002da2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da31:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002da37:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002da3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002da3d:	0f b6 d0             	movzx  edx,al
c002da40:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002da43:	89 10                	mov    DWORD PTR [eax],edx
c002da45:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002da48:	83 c0 10             	add    eax,0x10
c002da4b:	8b 00                	mov    eax,DWORD PTR [eax]
c002da4d:	c9                   	leave  
c002da4e:	c3                   	ret    
c002da4f:	90                   	nop

c002da50 <IOAPIC::open(int, int, void*)>:
c002da50:	55                   	push   ebp
c002da51:	89 e5                	mov    ebp,esp
c002da53:	57                   	push   edi
c002da54:	56                   	push   esi
c002da55:	53                   	push   ebx
c002da56:	83 ec 04             	sub    esp,0x4
c002da59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da5c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002da5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002da65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da68:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002da6e:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002da75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da78:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002da7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da81:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002da87:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002da8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da91:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002da97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da9a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002daa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daa3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002daa9:	0f b6 f0             	movzx  esi,al
c002daac:	89 d0                	mov    eax,edx
c002daae:	ba 00 00 00 00       	mov    edx,0x0
c002dab3:	89 c7                	mov    edi,eax
c002dab5:	83 e7 ff             	and    edi,0xffffffff
c002dab8:	89 f9                	mov    ecx,edi
c002daba:	0f b6 da             	movzx  ebx,dl
c002dabd:	89 c8                	mov    eax,ecx
c002dabf:	89 da                	mov    edx,ebx
c002dac1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002dac4:	8d 5e 08             	lea    ebx,[esi+0x8]
c002dac7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002dacb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002dacf:	83 e0 00             	and    eax,0x0
c002dad2:	09 d0                	or     eax,edx
c002dad4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002dad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dadb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002dae1:	8d 50 01             	lea    edx,[eax+0x1]
c002dae4:	88 d1                	mov    cl,dl
c002dae6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002dae9:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002daef:	0f b6 d0             	movzx  edx,al
c002daf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daf5:	83 c2 08             	add    edx,0x8
c002daf8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002dafc:	0f b6 c9             	movzx  ecx,cl
c002daff:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002db05:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002db09:	6a 01                	push   0x1
c002db0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db0e:	e8 15 ff ff ff       	call   c002da28 <IOAPIC::read(int)>
c002db13:	83 c4 08             	add    esp,0x8
c002db16:	c1 f8 10             	sar    eax,0x10
c002db19:	0f b6 c0             	movzx  eax,al
c002db1c:	8d 50 01             	lea    edx,[eax+0x1]
c002db1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db22:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002db28:	b8 00 00 00 00       	mov    eax,0x0
c002db2d:	8d 65 f4             	lea    esp,[ebp-0xc]
c002db30:	5b                   	pop    ebx
c002db31:	5e                   	pop    esi
c002db32:	5f                   	pop    edi
c002db33:	5d                   	pop    ebp
c002db34:	c3                   	ret    
c002db35:	90                   	nop

c002db36 <IOAPIC::write(int, int)>:
c002db36:	55                   	push   ebp
c002db37:	89 e5                	mov    ebp,esp
c002db39:	83 ec 10             	sub    esp,0x10
c002db3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002db3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002db45:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002db48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002db4b:	0f b6 d0             	movzx  edx,al
c002db4e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db51:	89 10                	mov    DWORD PTR [eax],edx
c002db53:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002db56:	8d 50 10             	lea    edx,[eax+0x10]
c002db59:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002db5c:	89 02                	mov    DWORD PTR [edx],eax
c002db5e:	90                   	nop
c002db5f:	c9                   	leave  
c002db60:	c3                   	ret    
c002db61:	90                   	nop

c002db62 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002db62:	55                   	push   ebp
c002db63:	89 e5                	mov    ebp,esp
c002db65:	53                   	push   ebx
c002db66:	83 ec 2c             	sub    esp,0x2c
c002db69:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002db6c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002db6f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002db72:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002db75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002db78:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002db7b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002db7e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002db81:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002db84:	88 d8                	mov    al,bl
c002db86:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002db89:	88 c8                	mov    al,cl
c002db8b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002db8e:	88 d0                	mov    al,dl
c002db90:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002db93:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002db97:	83 c0 08             	add    eax,0x8
c002db9a:	d1 e0                	shl    eax,1
c002db9c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002db9f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002dba3:	83 c0 08             	add    eax,0x8
c002dba6:	d1 e0                	shl    eax,1
c002dba8:	83 c0 01             	add    eax,0x1
c002dbab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002dbae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dbb1:	50                   	push   eax
c002dbb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbb5:	e8 6e fe ff ff       	call   c002da28 <IOAPIC::read(int)>
c002dbba:	83 c4 08             	add    esp,0x8
c002dbbd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002dbc0:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002dbc7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002dbca:	c1 e0 18             	shl    eax,0x18
c002dbcd:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002dbd0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002dbd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002dbd6:	52                   	push   edx
c002dbd7:	50                   	push   eax
c002dbd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbdb:	e8 56 ff ff ff       	call   c002db36 <IOAPIC::write(int, int)>
c002dbe0:	83 c4 0c             	add    esp,0xc
c002dbe3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbe6:	50                   	push   eax
c002dbe7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbea:	e8 39 fe ff ff       	call   c002da28 <IOAPIC::read(int)>
c002dbef:	83 c4 08             	add    esp,0x8
c002dbf2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002dbf5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002dbfc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002dc03:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002dc0a:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002dc0e:	85 c0                	test   eax,eax
c002dc10:	74 09                	je     c002dc1b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002dc12:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dc19:	eb 07                	jmp    c002dc22 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dc1b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dc22:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dc26:	85 c0                	test   eax,eax
c002dc28:	74 09                	je     c002dc33 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dc2a:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dc31:	eb 07                	jmp    c002dc3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dc33:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dc3a:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dc41:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dc45:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dc48:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dc4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dc4e:	52                   	push   edx
c002dc4f:	50                   	push   eax
c002dc50:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dc53:	e8 de fe ff ff       	call   c002db36 <IOAPIC::write(int, int)>
c002dc58:	83 c4 0c             	add    esp,0xc
c002dc5b:	90                   	nop
c002dc5c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dc5f:	c9                   	leave  
c002dc60:	c3                   	ret    
c002dc61:	66 90                	xchg   ax,ax
c002dc63:	90                   	nop

c002dc64 <APICTimer::close(int, int, void*)>:
c002dc64:	b8 00 00 00 00       	mov    eax,0x0
c002dc69:	c3                   	ret    
c002dc6a:	66 90                	xchg   ax,ax

c002dc6c <apicTimerHandler(regs*, void*)>:
c002dc6c:	83 ec 0c             	sub    esp,0xc
c002dc6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dc73:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dc75:	b8 10 27 00 00       	mov    eax,0x2710
c002dc7a:	ba 00 00 00 00       	mov    edx,0x0
c002dc7f:	f7 f1                	div    ecx
c002dc81:	83 ec 0c             	sub    esp,0xc
c002dc84:	50                   	push   eax
c002dc85:	e8 9e f0 fe ff       	call   c001cd28 <timerHandler(unsigned int)>
c002dc8a:	83 c4 10             	add    esp,0x10
c002dc8d:	90                   	nop
c002dc8e:	83 c4 0c             	add    esp,0xc
c002dc91:	c3                   	ret    
c002dc92:	66 90                	xchg   ax,ax

c002dc94 <APICTimer::open(int, int, void*)>:
c002dc94:	83 ec 0c             	sub    esp,0xc
c002dc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc9b:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc9d:	83 c0 24             	add    eax,0x24
c002dca0:	8b 00                	mov    eax,DWORD PTR [eax]
c002dca2:	83 ec 08             	sub    esp,0x8
c002dca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dca9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dcad:	ff d0                	call   eax
c002dcaf:	83 c4 10             	add    esp,0x10
c002dcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dcba:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dcc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dcc8:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dcce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dcd2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dcd8:	83 ec 0c             	sub    esp,0xc
c002dcdb:	51                   	push   ecx
c002dcdc:	6a 01                	push   0x1
c002dcde:	68 6c dc 02 c0       	push   0xc002dc6c
c002dce3:	52                   	push   edx
c002dce4:	50                   	push   eax
c002dce5:	e8 72 d5 fe ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dcea:	83 c4 20             	add    esp,0x20
c002dced:	89 c2                	mov    edx,eax
c002dcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcf3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dcf9:	b8 00 00 00 00       	mov    eax,0x0
c002dcfe:	83 c4 0c             	add    esp,0xc
c002dd01:	c3                   	ret    
c002dd02:	66 90                	xchg   ax,ax

c002dd04 <APICTimer::write(int)>:
c002dd04:	83 ec 0c             	sub    esp,0xc
c002dd07:	83 ec 0c             	sub    esp,0xc
c002dd0a:	68 fc 39 03 c0       	push   0xc00339fc
c002dd0f:	e8 8e 24 ff ff       	call   c00201a2 <KePanic(char const*)>
c002dd14:	83 c4 10             	add    esp,0x10
c002dd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dd1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd25:	90                   	nop
c002dd26:	83 c4 0c             	add    esp,0xc
c002dd29:	c3                   	ret    
c002dd2a:	66 90                	xchg   ax,ax

c002dd2c <APICTimer::APICTimer()>:
c002dd2c:	83 ec 0c             	sub    esp,0xc
c002dd2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd33:	83 ec 08             	sub    esp,0x8
c002dd36:	68 0c 3a 03 c0       	push   0xc0033a0c
c002dd3b:	50                   	push   eax
c002dd3c:	e8 1b ef fe ff       	call   c001cc5c <Timer::Timer(char const*)>
c002dd41:	83 c4 10             	add    esp,0x10
c002dd44:	ba 20 3a 03 c0       	mov    edx,0xc0033a20
c002dd49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd4d:	89 10                	mov    DWORD PTR [eax],edx
c002dd4f:	90                   	nop
c002dd50:	83 c4 0c             	add    esp,0xc
c002dd53:	c3                   	ret    

c002dd54 <PIT::write(int)>:
c002dd54:	83 ec 10             	sub    esp,0x10
c002dd57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dd5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dd5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dd65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002dd69:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002dd6e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002dd73:	89 c2                	mov    edx,eax
c002dd75:	c1 fa 1f             	sar    edx,0x1f
c002dd78:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002dd7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dd80:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dd87:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002dd8c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002dd90:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002dd95:	ee                   	out    dx,al
c002dd96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dd9a:	0f b6 c0             	movzx  eax,al
c002dd9d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002dda4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002dda8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002ddac:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002ddb1:	ee                   	out    dx,al
c002ddb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002ddb6:	c1 f8 08             	sar    eax,0x8
c002ddb9:	0f b6 c0             	movzx  eax,al
c002ddbc:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002ddc3:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002ddc7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002ddcb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002ddd0:	ee                   	out    dx,al
c002ddd1:	90                   	nop
c002ddd2:	83 c4 10             	add    esp,0x10
c002ddd5:	c3                   	ret    
c002ddd6:	66 90                	xchg   ax,ax

c002ddd8 <pitHandler(regs*, void*)>:
c002ddd8:	83 ec 0c             	sub    esp,0xc
c002dddb:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002dde1:	b8 10 27 00 00       	mov    eax,0x2710
c002dde6:	89 c2                	mov    edx,eax
c002dde8:	c1 fa 1f             	sar    edx,0x1f
c002ddeb:	f7 f9                	idiv   ecx
c002dded:	83 ec 0c             	sub    esp,0xc
c002ddf0:	50                   	push   eax
c002ddf1:	e8 32 ef fe ff       	call   c001cd28 <timerHandler(unsigned int)>
c002ddf6:	83 c4 10             	add    esp,0x10
c002ddf9:	90                   	nop
c002ddfa:	83 c4 0c             	add    esp,0xc
c002ddfd:	c3                   	ret    
c002ddfe:	66 90                	xchg   ax,ax

c002de00 <PIT::open(int, int, void*)>:
c002de00:	83 ec 0c             	sub    esp,0xc
c002de03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de07:	8b 00                	mov    eax,DWORD PTR [eax]
c002de09:	83 c0 24             	add    eax,0x24
c002de0c:	8b 00                	mov    eax,DWORD PTR [eax]
c002de0e:	83 ec 08             	sub    esp,0x8
c002de11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002de19:	ff d0                	call   eax
c002de1b:	83 c4 10             	add    esp,0x10
c002de1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de22:	83 ec 0c             	sub    esp,0xc
c002de25:	6a 00                	push   0x0
c002de27:	6a 01                	push   0x1
c002de29:	68 d8 dd 02 c0       	push   0xc002ddd8
c002de2e:	6a 00                	push   0x0
c002de30:	50                   	push   eax
c002de31:	e8 26 d4 fe ff       	call   c001b25c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002de36:	83 c4 20             	add    esp,0x20
c002de39:	89 c2                	mov    edx,eax
c002de3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de3f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002de45:	b8 00 00 00 00       	mov    eax,0x0
c002de4a:	83 c4 0c             	add    esp,0xc
c002de4d:	c3                   	ret    
c002de4e:	66 90                	xchg   ax,ax

c002de50 <PIT::close(int, int, void*)>:
c002de50:	83 ec 0c             	sub    esp,0xc
c002de53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de57:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002de61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de65:	6a 01                	push   0x1
c002de67:	68 d8 dd 02 c0       	push   0xc002ddd8
c002de6c:	6a 00                	push   0x0
c002de6e:	50                   	push   eax
c002de6f:	e8 1e d4 fe ff       	call   c001b292 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002de74:	83 c4 10             	add    esp,0x10
c002de77:	b8 00 00 00 00       	mov    eax,0x0
c002de7c:	83 c4 0c             	add    esp,0xc
c002de7f:	c3                   	ret    

c002de80 <PIT::PIT()>:
c002de80:	83 ec 0c             	sub    esp,0xc
c002de83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de87:	83 ec 08             	sub    esp,0x8
c002de8a:	68 48 3a 03 c0       	push   0xc0033a48
c002de8f:	50                   	push   eax
c002de90:	e8 c7 ed fe ff       	call   c001cc5c <Timer::Timer(char const*)>
c002de95:	83 c4 10             	add    esp,0x10
c002de98:	ba 70 3a 03 c0       	mov    edx,0xc0033a70
c002de9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dea1:	89 10                	mov    DWORD PTR [eax],edx
c002dea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dea7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dead:	0f b6 d0             	movzx  edx,al
c002deb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002deb4:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002debb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002debf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dec5:	0f b6 d0             	movzx  edx,al
c002dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002decc:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002ded1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ded5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002dedb:	8d 50 01             	lea    edx,[eax+0x1]
c002dede:	88 d1                	mov    cl,dl
c002dee0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dee4:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002deea:	0f b6 d0             	movzx  edx,al
c002deed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002def1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002def5:	83 e1 3f             	and    ecx,0x3f
c002def8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002defc:	90                   	nop
c002defd:	83 c4 0c             	add    esp,0xc
c002df00:	c3                   	ret    
c002df01:	66 90                	xchg   ax,ax
c002df03:	66 90                	xchg   ax,ax
c002df05:	66 90                	xchg   ax,ax
c002df07:	66 90                	xchg   ax,ax
c002df09:	66 90                	xchg   ax,ax
c002df0b:	66 90                	xchg   ax,ax
c002df0d:	66 90                	xchg   ax,ax
c002df0f:	90                   	nop

c002df10 <avxDetect>:
c002df10:	b8 01 00 00 00       	mov    eax,0x1
c002df15:	0f a2                	cpuid  
c002df17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002df1d:	74 15                	je     c002df34 <avxDetect.noAVX>
c002df1f:	b8 01 00 00 00       	mov    eax,0x1
c002df24:	0f a2                	cpuid  
c002df26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002df2c:	74 06                	je     c002df34 <avxDetect.noAVX>
c002df2e:	b8 01 00 00 00       	mov    eax,0x1
c002df33:	c3                   	ret    

c002df34 <avxDetect.noAVX>:
c002df34:	b8 00 00 00 00       	mov    eax,0x0
c002df39:	c3                   	ret    

c002df3a <avxSave>:
c002df3a:	53                   	push   ebx
c002df3b:	52                   	push   edx
c002df3c:	31 c0                	xor    eax,eax
c002df3e:	48                   	dec    eax
c002df3f:	89 c2                	mov    edx,eax
c002df41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df45:	0f ae 23             	xsave  [ebx]
c002df48:	5a                   	pop    edx
c002df49:	5b                   	pop    ebx
c002df4a:	c3                   	ret    

c002df4b <avxLoad>:
c002df4b:	53                   	push   ebx
c002df4c:	52                   	push   edx
c002df4d:	31 c0                	xor    eax,eax
c002df4f:	48                   	dec    eax
c002df50:	89 c2                	mov    edx,eax
c002df52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df56:	0f ae 2b             	xrstor [ebx]
c002df59:	5a                   	pop    edx
c002df5a:	5b                   	pop    ebx
c002df5b:	c3                   	ret    

c002df5c <avxInit>:
c002df5c:	e8 47 03 00 00       	call   c002e2a8 <sseInit>
c002df61:	50                   	push   eax
c002df62:	51                   	push   ecx
c002df63:	0f 20 e0             	mov    eax,cr4
c002df66:	0d 00 00 04 00       	or     eax,0x40000
c002df6b:	0f 22 e0             	mov    cr4,eax
c002df6e:	31 c9                	xor    ecx,ecx
c002df70:	0f 01 d0             	xgetbv 
c002df73:	0d 07 00 00 00       	or     eax,0x7
c002df78:	0f 01 d1             	xsetbv 
c002df7b:	59                   	pop    ecx
c002df7c:	58                   	pop    eax
c002df7d:	c3                   	ret    

c002df7e <avxClose>:
c002df7e:	c3                   	ret    
c002df7f:	90                   	nop

c002df80 <isr0>:
c002df80:	fa                   	cli    
c002df81:	68 00 00 00 00       	push   0x0
c002df86:	68 00 00 00 00       	push   0x0
c002df8b:	e9 56 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002df90 <isr1>:
c002df90:	fa                   	cli    
c002df91:	6a 00                	push   0x0
c002df93:	6a 01                	push   0x1
c002df95:	e9 4c 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002df9a <isr2>:
c002df9a:	fa                   	cli    
c002df9b:	6a 00                	push   0x0
c002df9d:	6a 02                	push   0x2
c002df9f:	e9 42 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfa4 <isr3>:
c002dfa4:	fa                   	cli    
c002dfa5:	6a 00                	push   0x0
c002dfa7:	6a 03                	push   0x3
c002dfa9:	e9 38 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfae <isr4>:
c002dfae:	fa                   	cli    
c002dfaf:	6a 00                	push   0x0
c002dfb1:	6a 04                	push   0x4
c002dfb3:	e9 2e 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfb8 <isr5>:
c002dfb8:	fa                   	cli    
c002dfb9:	6a 00                	push   0x0
c002dfbb:	6a 05                	push   0x5
c002dfbd:	e9 24 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfc2 <isr6>:
c002dfc2:	fa                   	cli    
c002dfc3:	6a 00                	push   0x0
c002dfc5:	6a 06                	push   0x6
c002dfc7:	e9 1a 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfcc <isr7>:
c002dfcc:	fa                   	cli    
c002dfcd:	6a 00                	push   0x0
c002dfcf:	6a 07                	push   0x7
c002dfd1:	e9 10 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfd6 <isr8>:
c002dfd6:	fa                   	cli    
c002dfd7:	6a 08                	push   0x8
c002dfd9:	e9 08 01 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfde <isr9>:
c002dfde:	fa                   	cli    
c002dfdf:	6a 00                	push   0x0
c002dfe1:	6a 09                	push   0x9
c002dfe3:	e9 fe 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002dfe8 <isr10>:
c002dfe8:	fa                   	cli    
c002dfe9:	6a 0a                	push   0xa
c002dfeb:	e9 f6 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002dff0 <isr11>:
c002dff0:	fa                   	cli    
c002dff1:	6a 0b                	push   0xb
c002dff3:	e9 ee 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002dff8 <isr12>:
c002dff8:	fa                   	cli    
c002dff9:	6a 0c                	push   0xc
c002dffb:	e9 e6 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e000 <isr13>:
c002e000:	fa                   	cli    
c002e001:	6a 0d                	push   0xd
c002e003:	53                   	push   ebx
c002e004:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e008:	81 fb d6 e1 02 c0    	cmp    ebx,0xc002e1d6
c002e00e:	5b                   	pop    ebx
c002e00f:	0f 84 c3 01 00 00    	je     c002e1d8 <finishSignal2>
c002e015:	e9 cc 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e01a <isr14>:
c002e01a:	fa                   	cli    
c002e01b:	6a 0e                	push   0xe
c002e01d:	e9 c4 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e022 <isr15>:
c002e022:	fa                   	cli    
c002e023:	6a 00                	push   0x0
c002e025:	6a 0f                	push   0xf
c002e027:	e9 ba 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e02c <isr16>:
c002e02c:	fa                   	cli    
c002e02d:	6a 00                	push   0x0
c002e02f:	6a 10                	push   0x10
c002e031:	e9 b0 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e036 <isr17>:
c002e036:	fa                   	cli    
c002e037:	6a 00                	push   0x0
c002e039:	6a 11                	push   0x11
c002e03b:	e9 a6 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e040 <isr18>:
c002e040:	fa                   	cli    
c002e041:	6a 00                	push   0x0
c002e043:	6a 12                	push   0x12
c002e045:	e9 9c 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e04a <irq3>:
c002e04a:	fa                   	cli    
c002e04b:	6a 00                	push   0x0
c002e04d:	6a 23                	push   0x23
c002e04f:	e9 92 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e054 <irq4>:
c002e054:	fa                   	cli    
c002e055:	6a 00                	push   0x0
c002e057:	6a 24                	push   0x24
c002e059:	e9 88 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e05e <irq5>:
c002e05e:	fa                   	cli    
c002e05f:	6a 00                	push   0x0
c002e061:	6a 25                	push   0x25
c002e063:	e9 7e 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e068 <irq6>:
c002e068:	fa                   	cli    
c002e069:	6a 00                	push   0x0
c002e06b:	6a 26                	push   0x26
c002e06d:	e9 74 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e072 <irq7>:
c002e072:	fa                   	cli    
c002e073:	6a 00                	push   0x0
c002e075:	6a 27                	push   0x27
c002e077:	e9 6a 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e07c <irq8>:
c002e07c:	fa                   	cli    
c002e07d:	6a 00                	push   0x0
c002e07f:	6a 28                	push   0x28
c002e081:	e9 60 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e086 <irq9>:
c002e086:	fa                   	cli    
c002e087:	6a 00                	push   0x0
c002e089:	6a 29                	push   0x29
c002e08b:	e9 56 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e090 <irq10>:
c002e090:	fa                   	cli    
c002e091:	6a 00                	push   0x0
c002e093:	6a 2a                	push   0x2a
c002e095:	e9 4c 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e09a <irq11>:
c002e09a:	fa                   	cli    
c002e09b:	6a 00                	push   0x0
c002e09d:	6a 2b                	push   0x2b
c002e09f:	e9 42 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e0a4 <irq12>:
c002e0a4:	fa                   	cli    
c002e0a5:	6a 00                	push   0x0
c002e0a7:	6a 2c                	push   0x2c
c002e0a9:	e9 38 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e0ae <irq13>:
c002e0ae:	fa                   	cli    
c002e0af:	6a 00                	push   0x0
c002e0b1:	6a 2d                	push   0x2d
c002e0b3:	e9 2e 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e0b8 <irq14>:
c002e0b8:	fa                   	cli    
c002e0b9:	6a 00                	push   0x0
c002e0bb:	6a 2e                	push   0x2e
c002e0bd:	e9 24 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e0c2 <irq15>:
c002e0c2:	fa                   	cli    
c002e0c3:	6a 00                	push   0x0
c002e0c5:	6a 2f                	push   0x2f
c002e0c7:	e9 1a 00 00 00       	jmp    c002e0e6 <int_common_stub>

c002e0cc <irq1>:
c002e0cc:	fa                   	cli    
c002e0cd:	6a 00                	push   0x0
c002e0cf:	6a 21                	push   0x21
c002e0d1:	eb 13                	jmp    c002e0e6 <int_common_stub>

c002e0d3 <irq2>:
c002e0d3:	fa                   	cli    
c002e0d4:	6a 00                	push   0x0
c002e0d6:	6a 22                	push   0x22
c002e0d8:	eb 0c                	jmp    c002e0e6 <int_common_stub>

c002e0da <isr96>:
c002e0da:	6a 00                	push   0x0
c002e0dc:	6a 60                	push   0x60
c002e0de:	fb                   	sti    
c002e0df:	eb 37                	jmp    c002e118 <syscall_common_stub>

c002e0e1 <irq0>:
c002e0e1:	fa                   	cli    
c002e0e2:	6a 00                	push   0x0
c002e0e4:	6a 20                	push   0x20

c002e0e6 <int_common_stub>:
c002e0e6:	60                   	pusha  
c002e0e7:	1e                   	push   ds
c002e0e8:	06                   	push   es
c002e0e9:	0f a0                	push   fs
c002e0eb:	0f a8                	push   gs
c002e0ed:	66 b8 10 00          	mov    ax,0x10
c002e0f1:	66 8e d8             	mov    ds,ax
c002e0f4:	66 8e c0             	mov    es,ax
c002e0f7:	66 8e e0             	mov    fs,ax
c002e0fa:	66 8e e8             	mov    gs,ax
c002e0fd:	54                   	push   esp
c002e0fe:	fc                   	cld    
c002e0ff:	e8 6c d6 fe ff       	call   c001b770 <int_handler>
c002e104:	81 c4 04 00 00 00    	add    esp,0x4
c002e10a:	0f a9                	pop    gs
c002e10c:	0f a1                	pop    fs
c002e10e:	07                   	pop    es
c002e10f:	1f                   	pop    ds
c002e110:	61                   	popa   
c002e111:	81 c4 08 00 00 00    	add    esp,0x8
c002e117:	cf                   	iret   

c002e118 <syscall_common_stub>:
c002e118:	60                   	pusha  
c002e119:	1e                   	push   ds
c002e11a:	06                   	push   es
c002e11b:	0f a0                	push   fs
c002e11d:	0f a8                	push   gs
c002e11f:	66 b8 10 00          	mov    ax,0x10
c002e123:	66 8e d8             	mov    ds,ax
c002e126:	66 8e c0             	mov    es,ax
c002e129:	66 8e e0             	mov    fs,ax
c002e12c:	66 8e e8             	mov    gs,ax
c002e12f:	54                   	push   esp
c002e130:	fc                   	cld    
c002e131:	e8 3a d6 fe ff       	call   c001b770 <int_handler>
c002e136:	81 c4 04 00 00 00    	add    esp,0x4
c002e13c:	0f a9                	pop    gs
c002e13e:	0f a1                	pop    fs
c002e140:	07                   	pop    es
c002e141:	1f                   	pop    ds
c002e142:	e8 81 2a ff ff       	call   c0020bc8 <KiCheckSignalZ>
c002e147:	3d 00 00 00 00       	cmp    eax,0x0
c002e14c:	0f 84 c0 00 00 00    	je     c002e212 <skipSignals>
c002e152:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e157:	61                   	popa   
c002e158:	53                   	push   ebx
c002e159:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e15f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e162:	5b                   	pop    ebx
c002e163:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e168:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e16b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e16e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e171:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e174:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e177:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e17a:	81 c4 08 00 00 00    	add    esp,0x8
c002e180:	5e                   	pop    esi
c002e181:	5b                   	pop    ebx
c002e182:	59                   	pop    ecx
c002e183:	5a                   	pop    edx
c002e184:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e187:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e18a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e18d:	52                   	push   edx
c002e18e:	51                   	push   ecx
c002e18f:	53                   	push   ebx
c002e190:	56                   	push   esi
c002e191:	81 ec 08 00 00 00    	sub    esp,0x8
c002e197:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e19a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e19d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e1a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e1a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e1a6:	60                   	pusha  
c002e1a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e1ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e1b0:	89 e3                	mov    ebx,esp
c002e1b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e1b5:	52                   	push   edx
c002e1b6:	68 d6 e1 02 c0       	push   0xc002e1d6
c002e1bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e1be:	89 dc                	mov    esp,ebx
c002e1c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e1c3:	68 23 00 00 00       	push   0x23
c002e1c8:	51                   	push   ecx
c002e1c9:	68 02 02 00 00       	push   0x202
c002e1ce:	68 1b 00 00 00       	push   0x1b
c002e1d3:	ff 36                	push   DWORD PTR [esi]
c002e1d5:	cf                   	iret   

c002e1d6 <finishSignal>:
c002e1d6:	cd 0f                	int    0xf

c002e1d8 <finishSignal2>:
c002e1d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e1de:	e8 62 2a ff ff       	call   c0020c45 <KiFinishSignalZ>
c002e1e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e1e9:	68 23 00 00 00       	push   0x23
c002e1ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e1f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e1f4:	68 1b 00 00 00       	push   0x1b
c002e1f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e1fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e1ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e202:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e205:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e208:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e20b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e20e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e211:	cf                   	iret   

c002e212 <skipSignals>:
c002e212:	61                   	popa   
c002e213:	81 c4 08 00 00 00    	add    esp,0x8
c002e219:	cf                   	iret   
c002e21a:	90                   	nop
c002e21b:	90                   	nop

c002e21c <irq16>:
c002e21c:	fa                   	cli    
c002e21d:	6a 00                	push   0x0
c002e21f:	6a 30                	push   0x30
c002e221:	e9 c0 fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e226 <irq17>:
c002e226:	fa                   	cli    
c002e227:	6a 00                	push   0x0
c002e229:	6a 31                	push   0x31
c002e22b:	e9 b6 fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e230 <irq18>:
c002e230:	fa                   	cli    
c002e231:	6a 00                	push   0x0
c002e233:	6a 32                	push   0x32
c002e235:	e9 ac fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e23a <irq19>:
c002e23a:	fa                   	cli    
c002e23b:	6a 00                	push   0x0
c002e23d:	6a 33                	push   0x33
c002e23f:	e9 a2 fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e244 <irq20>:
c002e244:	fa                   	cli    
c002e245:	6a 00                	push   0x0
c002e247:	6a 34                	push   0x34
c002e249:	e9 98 fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e24e <irq21>:
c002e24e:	fa                   	cli    
c002e24f:	6a 00                	push   0x0
c002e251:	6a 35                	push   0x35
c002e253:	e9 8e fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e258 <irq22>:
c002e258:	fa                   	cli    
c002e259:	6a 00                	push   0x0
c002e25b:	6a 36                	push   0x36
c002e25d:	e9 84 fe ff ff       	jmp    c002e0e6 <int_common_stub>

c002e262 <irq23>:
c002e262:	fa                   	cli    
c002e263:	6a 00                	push   0x0
c002e265:	6a 37                	push   0x37
c002e267:	e9 7a fe ff ff       	jmp    c002e0e6 <int_common_stub>
c002e26c:	66 90                	xchg   ax,ax
c002e26e:	66 90                	xchg   ax,ax

c002e270 <i386GetRDRAND>:
c002e270:	b9 64 00 00 00       	mov    ecx,0x64

c002e275 <retry>:
c002e275:	0f c7 f0             	rdrand eax
c002e278:	72 05                	jb     c002e27f <retry.done>
c002e27a:	e2 f9                	loop   c002e275 <retry>

c002e27c <retry.fail>:
c002e27c:	31 c0                	xor    eax,eax
c002e27e:	c3                   	ret    

c002e27f <retry.done>:
c002e27f:	c3                   	ret    

c002e280 <sseDetect>:
c002e280:	b8 01 00 00 00       	mov    eax,0x1
c002e285:	0f a2                	cpuid  
c002e287:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e28d:	74 06                	je     c002e295 <sseDetect.noSSE>
c002e28f:	b8 01 00 00 00       	mov    eax,0x1
c002e294:	c3                   	ret    

c002e295 <sseDetect.noSSE>:
c002e295:	31 c0                	xor    eax,eax
c002e297:	c3                   	ret    

c002e298 <sseSave>:
c002e298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e29c:	0f ae 00             	fxsave [eax]
c002e29f:	c3                   	ret    

c002e2a0 <sseLoad>:
c002e2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2a4:	0f ae 08             	fxrstor [eax]
c002e2a7:	c3                   	ret    

c002e2a8 <sseInit>:
c002e2a8:	e8 42 00 00 00       	call   c002e2ef <x87Init>
c002e2ad:	0f 20 e0             	mov    eax,cr4
c002e2b0:	66 0d 00 06          	or     ax,0x600
c002e2b4:	0f 22 e0             	mov    cr4,eax
c002e2b7:	c3                   	ret    

c002e2b8 <sseClose>:
c002e2b8:	c3                   	ret    
c002e2b9:	66 90                	xchg   ax,ax
c002e2bb:	66 90                	xchg   ax,ax
c002e2bd:	66 90                	xchg   ax,ax
c002e2bf:	90                   	nop

c002e2c0 <value_37F>:
c002e2c0:	7f 03                	jg     c002e2c5 <value_37A+0x1>

c002e2c2 <value_37E>:
c002e2c2:	7e 03                	jle    c002e2c7 <x87Detect+0x1>

c002e2c4 <value_37A>:
c002e2c4:	7a 03                	jp     c002e2c9 <x87Detect+0x3>

c002e2c6 <x87Detect>:
c002e2c6:	b8 01 00 00 00       	mov    eax,0x1
c002e2cb:	0f a2                	cpuid  
c002e2cd:	f7 c2 01 00 00 00    	test   edx,0x1
c002e2d3:	74 06                	je     c002e2db <x87Detect.nox87>
c002e2d5:	b8 01 00 00 00       	mov    eax,0x1
c002e2da:	c3                   	ret    

c002e2db <x87Detect.nox87>:
c002e2db:	b8 00 00 00 00       	mov    eax,0x0
c002e2e0:	c3                   	ret    

c002e2e1 <x87Save>:
c002e2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2e5:	dd 30                	fnsave [eax]
c002e2e7:	c3                   	ret    

c002e2e8 <x87Load>:
c002e2e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e2ec:	dd 20                	frstor [eax]
c002e2ee:	c3                   	ret    

c002e2ef <x87Init>:
c002e2ef:	0f 20 c0             	mov    eax,cr0
c002e2f2:	66 25 fb ff          	and    ax,0xfffb
c002e2f6:	66 0d 22 00          	or     ax,0x22
c002e2fa:	0f 22 c0             	mov    cr0,eax
c002e2fd:	db e3                	fninit 
c002e2ff:	0f 06                	clts   
c002e301:	d9 2d c4 e2 02 c0    	fldcw  WORD PTR ds:0xc002e2c4
c002e307:	c3                   	ret    

c002e308 <x87Close>:
c002e308:	c3                   	ret    
c002e309:	66 90                	xchg   ax,ax
c002e30b:	90                   	nop

c002e30c <__do_global_ctors_aux>:
c002e30c:	a1 c0 f2 02 c0       	mov    eax,ds:0xc002f2c0
c002e311:	83 f8 ff             	cmp    eax,0xffffffff
c002e314:	74 1a                	je     c002e330 <__do_global_ctors_aux+0x24>
c002e316:	55                   	push   ebp
c002e317:	89 e5                	mov    ebp,esp
c002e319:	53                   	push   ebx
c002e31a:	52                   	push   edx
c002e31b:	bb c0 f2 02 c0       	mov    ebx,0xc002f2c0
c002e320:	ff d0                	call   eax
c002e322:	83 eb 04             	sub    ebx,0x4
c002e325:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e327:	83 f8 ff             	cmp    eax,0xffffffff
c002e32a:	75 f4                	jne    c002e320 <__do_global_ctors_aux+0x14>
c002e32c:	58                   	pop    eax
c002e32d:	5b                   	pop    ebx
c002e32e:	5d                   	pop    ebp
c002e32f:	c3                   	ret    
c002e330:	c3                   	ret    
c002e331:	66 90                	xchg   ax,ax
c002e333:	90                   	nop

c002e334 <__divdi3>:
c002e334:	55                   	push   ebp
c002e335:	57                   	push   edi
c002e336:	56                   	push   esi
c002e337:	53                   	push   ebx
c002e338:	83 ec 1c             	sub    esp,0x1c
c002e33b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e33f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e343:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e346:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e34a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e34e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e352:	85 db                	test   ebx,ebx
c002e354:	0f 88 8e 00 00 00    	js     c002e3e8 <__divdi3+0xb4>
c002e35a:	89 dd                	mov    ebp,ebx
c002e35c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e364:	89 d3                	mov    ebx,edx
c002e366:	85 d2                	test   edx,edx
c002e368:	79 0d                	jns    c002e377 <__divdi3+0x43>
c002e36a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e36e:	f7 d8                	neg    eax
c002e370:	83 d2 00             	adc    edx,0x0
c002e373:	f7 da                	neg    edx
c002e375:	89 d3                	mov    ebx,edx
c002e377:	89 c7                	mov    edi,eax
c002e379:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e37c:	85 db                	test   ebx,ebx
c002e37e:	75 48                	jne    c002e3c8 <__divdi3+0x94>
c002e380:	39 ef                	cmp    edi,ebp
c002e382:	76 24                	jbe    c002e3a8 <__divdi3+0x74>
c002e384:	89 ea                	mov    edx,ebp
c002e386:	f7 f7                	div    edi
c002e388:	89 c1                	mov    ecx,eax
c002e38a:	31 f6                	xor    esi,esi
c002e38c:	89 c8                	mov    eax,ecx
c002e38e:	89 f2                	mov    edx,esi
c002e390:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e394:	85 c9                	test   ecx,ecx
c002e396:	74 07                	je     c002e39f <__divdi3+0x6b>
c002e398:	f7 d8                	neg    eax
c002e39a:	83 d2 00             	adc    edx,0x0
c002e39d:	f7 da                	neg    edx
c002e39f:	83 c4 1c             	add    esp,0x1c
c002e3a2:	5b                   	pop    ebx
c002e3a3:	5e                   	pop    esi
c002e3a4:	5f                   	pop    edi
c002e3a5:	5d                   	pop    ebp
c002e3a6:	c3                   	ret    
c002e3a7:	90                   	nop
c002e3a8:	85 ff                	test   edi,edi
c002e3aa:	75 0b                	jne    c002e3b7 <__divdi3+0x83>
c002e3ac:	b8 01 00 00 00       	mov    eax,0x1
c002e3b1:	31 d2                	xor    edx,edx
c002e3b3:	f7 f3                	div    ebx
c002e3b5:	89 c7                	mov    edi,eax
c002e3b7:	31 d2                	xor    edx,edx
c002e3b9:	89 e8                	mov    eax,ebp
c002e3bb:	f7 f7                	div    edi
c002e3bd:	89 c6                	mov    esi,eax
c002e3bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e3c2:	f7 f7                	div    edi
c002e3c4:	89 c1                	mov    ecx,eax
c002e3c6:	eb c4                	jmp    c002e38c <__divdi3+0x58>
c002e3c8:	39 eb                	cmp    ebx,ebp
c002e3ca:	77 3c                	ja     c002e408 <__divdi3+0xd4>
c002e3cc:	0f bd f3             	bsr    esi,ebx
c002e3cf:	83 f6 1f             	xor    esi,0x1f
c002e3d2:	75 40                	jne    c002e414 <__divdi3+0xe0>
c002e3d4:	39 eb                	cmp    ebx,ebp
c002e3d6:	72 09                	jb     c002e3e1 <__divdi3+0xad>
c002e3d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e3db:	0f 87 97 00 00 00    	ja     c002e478 <__divdi3+0x144>
c002e3e1:	b9 01 00 00 00       	mov    ecx,0x1
c002e3e6:	eb a4                	jmp    c002e38c <__divdi3+0x58>
c002e3e8:	f7 d9                	neg    ecx
c002e3ea:	83 d3 00             	adc    ebx,0x0
c002e3ed:	f7 db                	neg    ebx
c002e3ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e3f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e3f6:	89 dd                	mov    ebp,ebx
c002e3f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e400:	e9 5f ff ff ff       	jmp    c002e364 <__divdi3+0x30>
c002e405:	8d 76 00             	lea    esi,[esi+0x0]
c002e408:	31 f6                	xor    esi,esi
c002e40a:	31 c9                	xor    ecx,ecx
c002e40c:	e9 7b ff ff ff       	jmp    c002e38c <__divdi3+0x58>
c002e411:	8d 76 00             	lea    esi,[esi+0x0]
c002e414:	b8 20 00 00 00       	mov    eax,0x20
c002e419:	29 f0                	sub    eax,esi
c002e41b:	89 f1                	mov    ecx,esi
c002e41d:	d3 e3                	shl    ebx,cl
c002e41f:	89 fa                	mov    edx,edi
c002e421:	88 c1                	mov    cl,al
c002e423:	d3 ea                	shr    edx,cl
c002e425:	09 da                	or     edx,ebx
c002e427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e42b:	89 f1                	mov    ecx,esi
c002e42d:	d3 e7                	shl    edi,cl
c002e42f:	89 eb                	mov    ebx,ebp
c002e431:	88 c1                	mov    cl,al
c002e433:	d3 eb                	shr    ebx,cl
c002e435:	89 f1                	mov    ecx,esi
c002e437:	d3 e5                	shl    ebp,cl
c002e439:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e43c:	88 c1                	mov    cl,al
c002e43e:	d3 ea                	shr    edx,cl
c002e440:	09 d5                	or     ebp,edx
c002e442:	89 e8                	mov    eax,ebp
c002e444:	89 da                	mov    edx,ebx
c002e446:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e44a:	89 d3                	mov    ebx,edx
c002e44c:	89 c5                	mov    ebp,eax
c002e44e:	f7 e7                	mul    edi
c002e450:	39 d3                	cmp    ebx,edx
c002e452:	72 18                	jb     c002e46c <__divdi3+0x138>
c002e454:	74 0a                	je     c002e460 <__divdi3+0x12c>
c002e456:	89 e9                	mov    ecx,ebp
c002e458:	31 f6                	xor    esi,esi
c002e45a:	e9 2d ff ff ff       	jmp    c002e38c <__divdi3+0x58>
c002e45f:	90                   	nop
c002e460:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e463:	89 f1                	mov    ecx,esi
c002e465:	d3 e7                	shl    edi,cl
c002e467:	39 c7                	cmp    edi,eax
c002e469:	73 eb                	jae    c002e456 <__divdi3+0x122>
c002e46b:	90                   	nop
c002e46c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e46f:	31 f6                	xor    esi,esi
c002e471:	e9 16 ff ff ff       	jmp    c002e38c <__divdi3+0x58>
c002e476:	66 90                	xchg   ax,ax
c002e478:	31 c9                	xor    ecx,ecx
c002e47a:	e9 0d ff ff ff       	jmp    c002e38c <__divdi3+0x58>
c002e47f:	90                   	nop

c002e480 <__moddi3>:
c002e480:	55                   	push   ebp
c002e481:	57                   	push   edi
c002e482:	56                   	push   esi
c002e483:	53                   	push   ebx
c002e484:	83 ec 2c             	sub    esp,0x2c
c002e487:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e48b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e48f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e493:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e497:	85 db                	test   ebx,ebx
c002e499:	0f 88 85 00 00 00    	js     c002e524 <__moddi3+0xa4>
c002e49f:	89 de                	mov    esi,ebx
c002e4a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e4a9:	89 d7                	mov    edi,edx
c002e4ab:	85 d2                	test   edx,edx
c002e4ad:	79 09                	jns    c002e4b8 <__moddi3+0x38>
c002e4af:	f7 d8                	neg    eax
c002e4b1:	83 d2 00             	adc    edx,0x0
c002e4b4:	f7 da                	neg    edx
c002e4b6:	89 d7                	mov    edi,edx
c002e4b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e4bc:	89 cd                	mov    ebp,ecx
c002e4be:	85 ff                	test   edi,edi
c002e4c0:	75 52                	jne    c002e514 <__moddi3+0x94>
c002e4c2:	89 c3                	mov    ebx,eax
c002e4c4:	39 f0                	cmp    eax,esi
c002e4c6:	76 24                	jbe    c002e4ec <__moddi3+0x6c>
c002e4c8:	89 c8                	mov    eax,ecx
c002e4ca:	89 f2                	mov    edx,esi
c002e4cc:	f7 f3                	div    ebx
c002e4ce:	89 d6                	mov    esi,edx
c002e4d0:	89 f0                	mov    eax,esi
c002e4d2:	31 d2                	xor    edx,edx
c002e4d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e4d8:	85 c9                	test   ecx,ecx
c002e4da:	74 07                	je     c002e4e3 <__moddi3+0x63>
c002e4dc:	f7 d8                	neg    eax
c002e4de:	83 d2 00             	adc    edx,0x0
c002e4e1:	f7 da                	neg    edx
c002e4e3:	83 c4 2c             	add    esp,0x2c
c002e4e6:	5b                   	pop    ebx
c002e4e7:	5e                   	pop    esi
c002e4e8:	5f                   	pop    edi
c002e4e9:	5d                   	pop    ebp
c002e4ea:	c3                   	ret    
c002e4eb:	90                   	nop
c002e4ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e4f0:	85 db                	test   ebx,ebx
c002e4f2:	75 0d                	jne    c002e501 <__moddi3+0x81>
c002e4f4:	b8 01 00 00 00       	mov    eax,0x1
c002e4f9:	31 d2                	xor    edx,edx
c002e4fb:	f7 f7                	div    edi
c002e4fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e501:	89 f0                	mov    eax,esi
c002e503:	31 d2                	xor    edx,edx
c002e505:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e509:	f7 f7                	div    edi
c002e50b:	89 e8                	mov    eax,ebp
c002e50d:	f7 f7                	div    edi
c002e50f:	89 d6                	mov    esi,edx
c002e511:	eb bd                	jmp    c002e4d0 <__moddi3+0x50>
c002e513:	90                   	nop
c002e514:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e518:	39 f7                	cmp    edi,esi
c002e51a:	76 20                	jbe    c002e53c <__moddi3+0xbc>
c002e51c:	89 c8                	mov    eax,ecx
c002e51e:	89 f2                	mov    edx,esi
c002e520:	eb b2                	jmp    c002e4d4 <__moddi3+0x54>
c002e522:	66 90                	xchg   ax,ax
c002e524:	f7 d9                	neg    ecx
c002e526:	83 d3 00             	adc    ebx,0x0
c002e529:	f7 db                	neg    ebx
c002e52b:	89 de                	mov    esi,ebx
c002e52d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e535:	e9 6f ff ff ff       	jmp    c002e4a9 <__moddi3+0x29>
c002e53a:	66 90                	xchg   ax,ax
c002e53c:	0f bd c7             	bsr    eax,edi
c002e53f:	83 f0 1f             	xor    eax,0x1f
c002e542:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e546:	75 24                	jne    c002e56c <__moddi3+0xec>
c002e548:	39 f7                	cmp    edi,esi
c002e54a:	72 06                	jb     c002e552 <__moddi3+0xd2>
c002e54c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e550:	77 0c                	ja     c002e55e <__moddi3+0xde>
c002e552:	89 e9                	mov    ecx,ebp
c002e554:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e558:	19 fe                	sbb    esi,edi
c002e55a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e55e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e562:	89 f2                	mov    edx,esi
c002e564:	e9 6b ff ff ff       	jmp    c002e4d4 <__moddi3+0x54>
c002e569:	8d 76 00             	lea    esi,[esi+0x0]
c002e56c:	b8 20 00 00 00       	mov    eax,0x20
c002e571:	89 c2                	mov    edx,eax
c002e573:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e577:	29 da                	sub    edx,ebx
c002e579:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e57d:	88 d9                	mov    cl,bl
c002e57f:	d3 e7                	shl    edi,cl
c002e581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e585:	88 d1                	mov    cl,dl
c002e587:	d3 e8                	shr    eax,cl
c002e589:	09 c7                	or     edi,eax
c002e58b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e58f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e593:	89 d8                	mov    eax,ebx
c002e595:	88 d9                	mov    cl,bl
c002e597:	d3 e7                	shl    edi,cl
c002e599:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e59d:	89 f3                	mov    ebx,esi
c002e59f:	88 d1                	mov    cl,dl
c002e5a1:	d3 eb                	shr    ebx,cl
c002e5a3:	89 c7                	mov    edi,eax
c002e5a5:	88 c1                	mov    cl,al
c002e5a7:	d3 e6                	shl    esi,cl
c002e5a9:	89 e8                	mov    eax,ebp
c002e5ab:	88 d1                	mov    cl,dl
c002e5ad:	d3 e8                	shr    eax,cl
c002e5af:	09 f0                	or     eax,esi
c002e5b1:	89 f9                	mov    ecx,edi
c002e5b3:	d3 e5                	shl    ebp,cl
c002e5b5:	89 da                	mov    edx,ebx
c002e5b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e5bb:	89 d3                	mov    ebx,edx
c002e5bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e5c1:	89 c6                	mov    esi,eax
c002e5c3:	89 d1                	mov    ecx,edx
c002e5c5:	39 d3                	cmp    ebx,edx
c002e5c7:	72 27                	jb     c002e5f0 <__moddi3+0x170>
c002e5c9:	74 21                	je     c002e5ec <__moddi3+0x16c>
c002e5cb:	29 f5                	sub    ebp,esi
c002e5cd:	19 cb                	sbb    ebx,ecx
c002e5cf:	89 de                	mov    esi,ebx
c002e5d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e5d5:	d3 e6                	shl    esi,cl
c002e5d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e5db:	89 f9                	mov    ecx,edi
c002e5dd:	d3 ed                	shr    ebp,cl
c002e5df:	09 ee                	or     esi,ebp
c002e5e1:	89 f0                	mov    eax,esi
c002e5e3:	d3 eb                	shr    ebx,cl
c002e5e5:	89 da                	mov    edx,ebx
c002e5e7:	e9 e8 fe ff ff       	jmp    c002e4d4 <__moddi3+0x54>
c002e5ec:	39 c5                	cmp    ebp,eax
c002e5ee:	73 db                	jae    c002e5cb <__moddi3+0x14b>
c002e5f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e5f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e5f8:	89 d1                	mov    ecx,edx
c002e5fa:	89 c6                	mov    esi,eax
c002e5fc:	eb cd                	jmp    c002e5cb <__moddi3+0x14b>
c002e5fe:	66 90                	xchg   ax,ax

c002e600 <__udivdi3>:
c002e600:	55                   	push   ebp
c002e601:	57                   	push   edi
c002e602:	56                   	push   esi
c002e603:	53                   	push   ebx
c002e604:	83 ec 1c             	sub    esp,0x1c
c002e607:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e60b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e60f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e613:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e617:	85 d2                	test   edx,edx
c002e619:	75 41                	jne    c002e65c <__udivdi3+0x5c>
c002e61b:	39 f7                	cmp    edi,esi
c002e61d:	76 15                	jbe    c002e634 <__udivdi3+0x34>
c002e61f:	89 e8                	mov    eax,ebp
c002e621:	89 f2                	mov    edx,esi
c002e623:	f7 f7                	div    edi
c002e625:	31 db                	xor    ebx,ebx
c002e627:	89 da                	mov    edx,ebx
c002e629:	83 c4 1c             	add    esp,0x1c
c002e62c:	5b                   	pop    ebx
c002e62d:	5e                   	pop    esi
c002e62e:	5f                   	pop    edi
c002e62f:	5d                   	pop    ebp
c002e630:	c3                   	ret    
c002e631:	8d 76 00             	lea    esi,[esi+0x0]
c002e634:	89 f9                	mov    ecx,edi
c002e636:	85 ff                	test   edi,edi
c002e638:	75 0b                	jne    c002e645 <__udivdi3+0x45>
c002e63a:	b8 01 00 00 00       	mov    eax,0x1
c002e63f:	31 d2                	xor    edx,edx
c002e641:	f7 f7                	div    edi
c002e643:	89 c1                	mov    ecx,eax
c002e645:	31 d2                	xor    edx,edx
c002e647:	89 f0                	mov    eax,esi
c002e649:	f7 f1                	div    ecx
c002e64b:	89 c3                	mov    ebx,eax
c002e64d:	89 e8                	mov    eax,ebp
c002e64f:	f7 f1                	div    ecx
c002e651:	89 da                	mov    edx,ebx
c002e653:	83 c4 1c             	add    esp,0x1c
c002e656:	5b                   	pop    ebx
c002e657:	5e                   	pop    esi
c002e658:	5f                   	pop    edi
c002e659:	5d                   	pop    ebp
c002e65a:	c3                   	ret    
c002e65b:	90                   	nop
c002e65c:	39 f2                	cmp    edx,esi
c002e65e:	77 1c                	ja     c002e67c <__udivdi3+0x7c>
c002e660:	0f bd da             	bsr    ebx,edx
c002e663:	83 f3 1f             	xor    ebx,0x1f
c002e666:	75 24                	jne    c002e68c <__udivdi3+0x8c>
c002e668:	39 f2                	cmp    edx,esi
c002e66a:	72 08                	jb     c002e674 <__udivdi3+0x74>
c002e66c:	39 ef                	cmp    edi,ebp
c002e66e:	0f 87 84 00 00 00    	ja     c002e6f8 <__udivdi3+0xf8>
c002e674:	b8 01 00 00 00       	mov    eax,0x1
c002e679:	eb ac                	jmp    c002e627 <__udivdi3+0x27>
c002e67b:	90                   	nop
c002e67c:	31 db                	xor    ebx,ebx
c002e67e:	31 c0                	xor    eax,eax
c002e680:	89 da                	mov    edx,ebx
c002e682:	83 c4 1c             	add    esp,0x1c
c002e685:	5b                   	pop    ebx
c002e686:	5e                   	pop    esi
c002e687:	5f                   	pop    edi
c002e688:	5d                   	pop    ebp
c002e689:	c3                   	ret    
c002e68a:	66 90                	xchg   ax,ax
c002e68c:	b8 20 00 00 00       	mov    eax,0x20
c002e691:	29 d8                	sub    eax,ebx
c002e693:	88 d9                	mov    cl,bl
c002e695:	d3 e2                	shl    edx,cl
c002e697:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e69b:	89 fa                	mov    edx,edi
c002e69d:	88 c1                	mov    cl,al
c002e69f:	d3 ea                	shr    edx,cl
c002e6a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e6a5:	09 d1                	or     ecx,edx
c002e6a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e6ab:	88 d9                	mov    cl,bl
c002e6ad:	d3 e7                	shl    edi,cl
c002e6af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e6b3:	89 f7                	mov    edi,esi
c002e6b5:	88 c1                	mov    cl,al
c002e6b7:	d3 ef                	shr    edi,cl
c002e6b9:	88 d9                	mov    cl,bl
c002e6bb:	d3 e6                	shl    esi,cl
c002e6bd:	89 ea                	mov    edx,ebp
c002e6bf:	88 c1                	mov    cl,al
c002e6c1:	d3 ea                	shr    edx,cl
c002e6c3:	09 d6                	or     esi,edx
c002e6c5:	89 f0                	mov    eax,esi
c002e6c7:	89 fa                	mov    edx,edi
c002e6c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e6cd:	89 d7                	mov    edi,edx
c002e6cf:	89 c6                	mov    esi,eax
c002e6d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e6d5:	39 d7                	cmp    edi,edx
c002e6d7:	72 13                	jb     c002e6ec <__udivdi3+0xec>
c002e6d9:	74 09                	je     c002e6e4 <__udivdi3+0xe4>
c002e6db:	89 f0                	mov    eax,esi
c002e6dd:	31 db                	xor    ebx,ebx
c002e6df:	e9 43 ff ff ff       	jmp    c002e627 <__udivdi3+0x27>
c002e6e4:	88 d9                	mov    cl,bl
c002e6e6:	d3 e5                	shl    ebp,cl
c002e6e8:	39 c5                	cmp    ebp,eax
c002e6ea:	73 ef                	jae    c002e6db <__udivdi3+0xdb>
c002e6ec:	8d 46 ff             	lea    eax,[esi-0x1]
c002e6ef:	31 db                	xor    ebx,ebx
c002e6f1:	e9 31 ff ff ff       	jmp    c002e627 <__udivdi3+0x27>
c002e6f6:	66 90                	xchg   ax,ax
c002e6f8:	31 c0                	xor    eax,eax
c002e6fa:	e9 28 ff ff ff       	jmp    c002e627 <__udivdi3+0x27>
c002e6ff:	90                   	nop

c002e700 <__umoddi3>:
c002e700:	55                   	push   ebp
c002e701:	57                   	push   edi
c002e702:	56                   	push   esi
c002e703:	53                   	push   ebx
c002e704:	83 ec 1c             	sub    esp,0x1c
c002e707:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e70b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e70f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e713:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e717:	89 da                	mov    edx,ebx
c002e719:	85 c0                	test   eax,eax
c002e71b:	75 37                	jne    c002e754 <__umoddi3+0x54>
c002e71d:	39 df                	cmp    edi,ebx
c002e71f:	76 13                	jbe    c002e734 <__umoddi3+0x34>
c002e721:	89 f0                	mov    eax,esi
c002e723:	f7 f7                	div    edi
c002e725:	89 d0                	mov    eax,edx
c002e727:	31 d2                	xor    edx,edx
c002e729:	83 c4 1c             	add    esp,0x1c
c002e72c:	5b                   	pop    ebx
c002e72d:	5e                   	pop    esi
c002e72e:	5f                   	pop    edi
c002e72f:	5d                   	pop    ebp
c002e730:	c3                   	ret    
c002e731:	8d 76 00             	lea    esi,[esi+0x0]
c002e734:	89 fd                	mov    ebp,edi
c002e736:	85 ff                	test   edi,edi
c002e738:	75 0b                	jne    c002e745 <__umoddi3+0x45>
c002e73a:	b8 01 00 00 00       	mov    eax,0x1
c002e73f:	31 d2                	xor    edx,edx
c002e741:	f7 f7                	div    edi
c002e743:	89 c5                	mov    ebp,eax
c002e745:	89 d8                	mov    eax,ebx
c002e747:	31 d2                	xor    edx,edx
c002e749:	f7 f5                	div    ebp
c002e74b:	89 f0                	mov    eax,esi
c002e74d:	f7 f5                	div    ebp
c002e74f:	89 d0                	mov    eax,edx
c002e751:	eb d4                	jmp    c002e727 <__umoddi3+0x27>
c002e753:	90                   	nop
c002e754:	89 f1                	mov    ecx,esi
c002e756:	39 d8                	cmp    eax,ebx
c002e758:	76 0a                	jbe    c002e764 <__umoddi3+0x64>
c002e75a:	89 f0                	mov    eax,esi
c002e75c:	83 c4 1c             	add    esp,0x1c
c002e75f:	5b                   	pop    ebx
c002e760:	5e                   	pop    esi
c002e761:	5f                   	pop    edi
c002e762:	5d                   	pop    ebp
c002e763:	c3                   	ret    
c002e764:	0f bd e8             	bsr    ebp,eax
c002e767:	83 f5 1f             	xor    ebp,0x1f
c002e76a:	75 1c                	jne    c002e788 <__umoddi3+0x88>
c002e76c:	39 d8                	cmp    eax,ebx
c002e76e:	72 04                	jb     c002e774 <__umoddi3+0x74>
c002e770:	39 f7                	cmp    edi,esi
c002e772:	77 08                	ja     c002e77c <__umoddi3+0x7c>
c002e774:	89 da                	mov    edx,ebx
c002e776:	29 fe                	sub    esi,edi
c002e778:	19 c2                	sbb    edx,eax
c002e77a:	89 f1                	mov    ecx,esi
c002e77c:	89 c8                	mov    eax,ecx
c002e77e:	83 c4 1c             	add    esp,0x1c
c002e781:	5b                   	pop    ebx
c002e782:	5e                   	pop    esi
c002e783:	5f                   	pop    edi
c002e784:	5d                   	pop    ebp
c002e785:	c3                   	ret    
c002e786:	66 90                	xchg   ax,ax
c002e788:	ba 20 00 00 00       	mov    edx,0x20
c002e78d:	29 ea                	sub    edx,ebp
c002e78f:	89 e9                	mov    ecx,ebp
c002e791:	d3 e0                	shl    eax,cl
c002e793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e797:	89 f8                	mov    eax,edi
c002e799:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e79d:	88 d1                	mov    cl,dl
c002e79f:	d3 e8                	shr    eax,cl
c002e7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e7a5:	09 c1                	or     ecx,eax
c002e7a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e7ab:	89 e9                	mov    ecx,ebp
c002e7ad:	d3 e7                	shl    edi,cl
c002e7af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e7b3:	89 d8                	mov    eax,ebx
c002e7b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e7b9:	88 d1                	mov    cl,dl
c002e7bb:	d3 e8                	shr    eax,cl
c002e7bd:	89 c7                	mov    edi,eax
c002e7bf:	89 e9                	mov    ecx,ebp
c002e7c1:	d3 e3                	shl    ebx,cl
c002e7c3:	89 f0                	mov    eax,esi
c002e7c5:	88 d1                	mov    cl,dl
c002e7c7:	d3 e8                	shr    eax,cl
c002e7c9:	09 d8                	or     eax,ebx
c002e7cb:	89 e9                	mov    ecx,ebp
c002e7cd:	d3 e6                	shl    esi,cl
c002e7cf:	89 f3                	mov    ebx,esi
c002e7d1:	89 fa                	mov    edx,edi
c002e7d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e7d7:	89 d1                	mov    ecx,edx
c002e7d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e7dd:	89 c6                	mov    esi,eax
c002e7df:	89 d7                	mov    edi,edx
c002e7e1:	39 d1                	cmp    ecx,edx
c002e7e3:	72 27                	jb     c002e80c <__umoddi3+0x10c>
c002e7e5:	74 21                	je     c002e808 <__umoddi3+0x108>
c002e7e7:	89 ca                	mov    edx,ecx
c002e7e9:	29 f3                	sub    ebx,esi
c002e7eb:	19 fa                	sbb    edx,edi
c002e7ed:	89 d0                	mov    eax,edx
c002e7ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e7f3:	d3 e0                	shl    eax,cl
c002e7f5:	89 e9                	mov    ecx,ebp
c002e7f7:	d3 eb                	shr    ebx,cl
c002e7f9:	09 d8                	or     eax,ebx
c002e7fb:	d3 ea                	shr    edx,cl
c002e7fd:	83 c4 1c             	add    esp,0x1c
c002e800:	5b                   	pop    ebx
c002e801:	5e                   	pop    esi
c002e802:	5f                   	pop    edi
c002e803:	5d                   	pop    ebp
c002e804:	c3                   	ret    
c002e805:	8d 76 00             	lea    esi,[esi+0x0]
c002e808:	39 c3                	cmp    ebx,eax
c002e80a:	73 db                	jae    c002e7e7 <__umoddi3+0xe7>
c002e80c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e810:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e814:	89 d7                	mov    edi,edx
c002e816:	89 c6                	mov    esi,eax
c002e818:	eb cd                	jmp    c002e7e7 <__umoddi3+0xe7>

Disassembly of section .init:

c002e81a <_init>:
c002e81a:	55                   	push   ebp
c002e81b:	89 e5                	mov    ebp,esp
c002e81d:	e8 d2 18 fd ff       	call   c00000f4 <frame_dummy>
c002e822:	e8 e5 fa ff ff       	call   c002e30c <__do_global_ctors_aux>
c002e827:	5d                   	pop    ebp
c002e828:	c3                   	ret    

Disassembly of section .fini:

c002e829 <_fini>:
c002e829:	55                   	push   ebp
c002e82a:	89 e5                	mov    ebp,esp
c002e82c:	e8 53 18 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e831:	5d                   	pop    ebp
c002e832:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e834 <Computer::~Computer()>:
c002e834:	83 ec 0c             	sub    esp,0xc
c002e837:	ba e4 0f 03 c0       	mov    edx,0xc0030fe4
c002e83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e840:	89 10                	mov    DWORD PTR [eax],edx
c002e842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e846:	83 ec 0c             	sub    esp,0xc
c002e849:	50                   	push   eax
c002e84a:	e8 63 c9 fe ff       	call   c001b1b2 <Device::~Device()>
c002e84f:	83 c4 10             	add    esp,0x10
c002e852:	90                   	nop
c002e853:	83 c4 0c             	add    esp,0xc
c002e856:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e858 <Computer::~Computer()>:
c002e858:	83 ec 0c             	sub    esp,0xc
c002e85b:	83 ec 0c             	sub    esp,0xc
c002e85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e862:	e8 cd ff ff ff       	call   c002e834 <Computer::~Computer()>
c002e867:	83 c4 10             	add    esp,0x10
c002e86a:	83 ec 08             	sub    esp,0x8
c002e86d:	68 70 01 00 00       	push   0x170
c002e872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e876:	e8 a1 a8 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002e87b:	83 c4 10             	add    esp,0x10
c002e87e:	83 c4 0c             	add    esp,0xc
c002e881:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e882 <idleCommon()>:
c002e882:	83 ec 0c             	sub    esp,0xc
c002e885:	fa                   	cli    
c002e886:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e88c:	e8 0b 69 ff ff       	call   c002519c <schedule()>
c002e891:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e896:	48                   	dec    eax
c002e897:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e89c:	75 01                	jne    c002e89f <idleCommon()+0x1d>
c002e89e:	fb                   	sti    
c002e89f:	83 c4 0c             	add    esp,0xc
c002e8a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e8a4 <LinkedList<UnixFile>::~LinkedList()>:
c002e8a4:	90                   	nop
c002e8a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e8a6 <LinkedList<UnixFile>::LinkedList()>:
c002e8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e8d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e8db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e8df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8e6:	90                   	nop
c002e8e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e8e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e8e8:	83 ec 0c             	sub    esp,0xc
c002e8eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e8f0:	75 10                	jne    c002e902 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e8f2:	83 ec 0c             	sub    esp,0xc
c002e8f5:	68 f8 11 03 c0       	push   0xc00311f8
c002e8fa:	e8 a3 18 ff ff       	call   c00201a2 <KePanic(char const*)>
c002e8ff:	83 c4 10             	add    esp,0x10
c002e902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e906:	8b 00                	mov    eax,DWORD PTR [eax]
c002e908:	85 c0                	test   eax,eax
c002e90a:	74 34                	je     c002e940 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e90c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e910:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e913:	85 c0                	test   eax,eax
c002e915:	74 29                	je     c002e940 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e91b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e91e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e922:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e929:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e92d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e934:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e937:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e93e:	eb 65                	jmp    c002e9a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e944:	8b 00                	mov    eax,DWORD PTR [eax]
c002e946:	85 c0                	test   eax,eax
c002e948:	75 4b                	jne    c002e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e94e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e951:	85 c0                	test   eax,eax
c002e953:	75 40                	jne    c002e995 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e959:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e95d:	89 10                	mov    DWORD PTR [eax],edx
c002e95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e963:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e967:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e96e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e971:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e97c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e97f:	85 c0                	test   eax,eax
c002e981:	74 22                	je     c002e9a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e983:	83 ec 0c             	sub    esp,0xc
c002e986:	68 1a 12 03 c0       	push   0xc003121a
c002e98b:	e8 12 18 ff ff       	call   c00201a2 <KePanic(char const*)>
c002e990:	83 c4 10             	add    esp,0x10
c002e993:	eb 10                	jmp    c002e9a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e995:	83 ec 0c             	sub    esp,0xc
c002e998:	68 24 12 03 c0       	push   0xc0031224
c002e99d:	e8 00 18 ff ff       	call   c00201a2 <KePanic(char const*)>
c002e9a2:	83 c4 10             	add    esp,0x10
c002e9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9ac:	8d 50 01             	lea    edx,[eax+0x1]
c002e9af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9b6:	90                   	nop
c002e9b7:	83 c4 0c             	add    esp,0xc
c002e9ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002e9bc <LinkedList<UnixFile>::getFirstElement()>:
c002e9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9c0:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002e9c4 <LinkedList<UnixFile>::removeFirst()>:
c002e9c4:	83 ec 0c             	sub    esp,0xc
c002e9c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9cb:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9cd:	85 c0                	test   eax,eax
c002e9cf:	75 12                	jne    c002e9e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002e9d1:	83 ec 0c             	sub    esp,0xc
c002e9d4:	68 30 12 03 c0       	push   0xc0031230
c002e9d9:	e8 c4 17 ff ff       	call   c00201a2 <KePanic(char const*)>
c002e9de:	83 c4 10             	add    esp,0x10
c002e9e1:	eb 7e                	jmp    c002ea61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002e9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e9ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9ed:	85 c0                	test   eax,eax
c002e9ef:	74 10                	je     c002ea01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002e9f1:	83 ec 0c             	sub    esp,0xc
c002e9f4:	68 7b 12 03 c0       	push   0xc003127b
c002e9f9:	e8 a4 17 ff ff       	call   c00201a2 <KePanic(char const*)>
c002e9fe:	83 c4 10             	add    esp,0x10
c002ea01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea05:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea0a:	85 c0                	test   eax,eax
c002ea0c:	75 33                	jne    c002ea41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002ea0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ea18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea2a:	83 f8 01             	cmp    eax,0x1
c002ea2d:	74 21                	je     c002ea50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea2f:	83 ec 0c             	sub    esp,0xc
c002ea32:	68 54 12 03 c0       	push   0xc0031254
c002ea37:	e8 66 17 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ea3c:	83 c4 10             	add    esp,0x10
c002ea3f:	eb 0f                	jmp    c002ea50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea45:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002ea4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea4e:	89 10                	mov    DWORD PTR [eax],edx
c002ea50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea57:	8d 50 ff             	lea    edx,[eax-0x1]
c002ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ea61:	83 c4 0c             	add    esp,0xc
c002ea64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002ea66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002ea66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ea6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ea6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002ea6e <DriverlessDevice::~DriverlessDevice()>:
c002ea6e:	ba a8 1e 03 c0       	mov    edx,0xc0031ea8
c002ea73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea77:	89 10                	mov    DWORD PTR [eax],edx
c002ea79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ea7d:	50                   	push   eax
c002ea7e:	e8 2f c7 fe ff       	call   c001b1b2 <Device::~Device()>
c002ea83:	83 c4 04             	add    esp,0x4
c002ea86:	90                   	nop
c002ea87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ea88 <DriverlessDevice::~DriverlessDevice()>:
c002ea88:	83 ec 0c             	sub    esp,0xc
c002ea8b:	83 ec 0c             	sub    esp,0xc
c002ea8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea92:	e8 d7 ff ff ff       	call   c002ea6e <DriverlessDevice::~DriverlessDevice()>
c002ea97:	83 c4 10             	add    esp,0x10
c002ea9a:	83 ec 08             	sub    esp,0x8
c002ea9d:	68 58 01 00 00       	push   0x158
c002eaa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eaa6:	e8 71 a6 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002eaab:	83 c4 10             	add    esp,0x10
c002eaae:	83 c4 0c             	add    esp,0xc
c002eab1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002eab2 <LinkedList<Device>::addElement(Device*)>:
c002eab2:	83 ec 0c             	sub    esp,0xc
c002eab5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002eaba:	75 10                	jne    c002eacc <LinkedList<Device>::addElement(Device*)+0x1a>
c002eabc:	83 ec 0c             	sub    esp,0xc
c002eabf:	68 f8 11 03 c0       	push   0xc00311f8
c002eac4:	e8 d9 16 ff ff       	call   c00201a2 <KePanic(char const*)>
c002eac9:	83 c4 10             	add    esp,0x10
c002eacc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ead0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ead2:	85 c0                	test   eax,eax
c002ead4:	74 3a                	je     c002eb10 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ead6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eada:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eadd:	85 c0                	test   eax,eax
c002eadf:	74 2f                	je     c002eb10 <LinkedList<Device>::addElement(Device*)+0x5e>
c002eae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eae8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eaec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eafa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb0e:	eb 68                	jmp    c002eb78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb14:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb16:	85 c0                	test   eax,eax
c002eb18:	75 4e                	jne    c002eb68 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb21:	85 c0                	test   eax,eax
c002eb23:	75 43                	jne    c002eb68 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eb25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb2d:	89 10                	mov    DWORD PTR [eax],edx
c002eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eb37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb52:	85 c0                	test   eax,eax
c002eb54:	74 22                	je     c002eb78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb56:	83 ec 0c             	sub    esp,0xc
c002eb59:	68 1a 12 03 c0       	push   0xc003121a
c002eb5e:	e8 3f 16 ff ff       	call   c00201a2 <KePanic(char const*)>
c002eb63:	83 c4 10             	add    esp,0x10
c002eb66:	eb 10                	jmp    c002eb78 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eb68:	83 ec 0c             	sub    esp,0xc
c002eb6b:	68 24 12 03 c0       	push   0xc0031224
c002eb70:	e8 2d 16 ff ff       	call   c00201a2 <KePanic(char const*)>
c002eb75:	83 c4 10             	add    esp,0x10
c002eb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eb7f:	8d 50 01             	lea    edx,[eax+0x1]
c002eb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eb89:	90                   	nop
c002eb8a:	83 c4 0c             	add    esp,0xc
c002eb8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002eb8e <LinkedList<Device>::LinkedList()>:
c002eb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eba7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ebce:	90                   	nop
c002ebcf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002ebd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002ebd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebd4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebd6:	85 c0                	test   eax,eax
c002ebd8:	75 0e                	jne    c002ebe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ebda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ebe1:	85 c0                	test   eax,eax
c002ebe3:	75 03                	jne    c002ebe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002ebe5:	b0 01                	mov    al,0x1
c002ebe7:	c3                   	ret    
c002ebe8:	b0 00                	mov    al,0x0
c002ebea:	90                   	nop
c002ebeb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002ebec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002ebec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ebf0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002ebf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002ebf4:	83 ec 0c             	sub    esp,0xc
c002ebf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebfb:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebfd:	85 c0                	test   eax,eax
c002ebff:	75 17                	jne    c002ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002ec01:	83 ec 0c             	sub    esp,0xc
c002ec04:	68 30 12 03 c0       	push   0xc0031230
c002ec09:	e8 94 15 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ec0e:	83 c4 10             	add    esp,0x10
c002ec11:	e9 96 00 00 00       	jmp    c002ecac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002ec16:	66 90                	xchg   ax,ax
c002ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec22:	85 c0                	test   eax,eax
c002ec24:	0f 95 c0             	setne  al
c002ec27:	0f b6 c0             	movzx  eax,al
c002ec2a:	85 c0                	test   eax,eax
c002ec2c:	74 12                	je     c002ec40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ec2e:	83 ec 0c             	sub    esp,0xc
c002ec31:	68 7b 12 03 c0       	push   0xc003127b
c002ec36:	e8 67 15 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ec3b:	83 c4 10             	add    esp,0x10
c002ec3e:	66 90                	xchg   ax,ax
c002ec40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec44:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ec49:	85 c0                	test   eax,eax
c002ec4b:	0f 94 c0             	sete   al
c002ec4e:	0f b6 c0             	movzx  eax,al
c002ec51:	85 c0                	test   eax,eax
c002ec53:	74 33                	je     c002ec88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ec55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ec5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ec6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec71:	83 f8 01             	cmp    eax,0x1
c002ec74:	74 22                	je     c002ec98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ec76:	83 ec 0c             	sub    esp,0xc
c002ec79:	68 54 12 03 c0       	push   0xc0031254
c002ec7e:	e8 1f 15 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ec83:	83 c4 10             	add    esp,0x10
c002ec86:	eb 10                	jmp    c002ec98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ec88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec8c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec95:	89 10                	mov    DWORD PTR [eax],edx
c002ec97:	90                   	nop
c002ec98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec9f:	8d 50 ff             	lea    edx,[eax-0x1]
c002eca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eca9:	8d 76 00             	lea    esi,[esi+0x0]
c002ecac:	83 c4 0c             	add    esp,0xc
c002ecaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ecb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ecb0:	83 ec 0c             	sub    esp,0xc
c002ecb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ecb8:	75 12                	jne    c002eccc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ecba:	83 ec 0c             	sub    esp,0xc
c002ecbd:	68 f8 11 03 c0       	push   0xc00311f8
c002ecc2:	e8 db 14 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ecc7:	83 c4 10             	add    esp,0x10
c002ecca:	66 90                	xchg   ax,ax
c002eccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002ecd2:	85 c0                	test   eax,eax
c002ecd4:	74 36                	je     c002ed0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ecd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecdd:	85 c0                	test   eax,eax
c002ecdf:	74 2b                	je     c002ed0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ece1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ece5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ece8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ecef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed08:	eb 6a                	jmp    c002ed74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed0a:	66 90                	xchg   ax,ax
c002ed0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed10:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed12:	85 c0                	test   eax,eax
c002ed14:	75 4e                	jne    c002ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed1d:	85 c0                	test   eax,eax
c002ed1f:	75 43                	jne    c002ed64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ed21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed29:	89 10                	mov    DWORD PTR [eax],edx
c002ed2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ed33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ed36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ed44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed4b:	85 c0                	test   eax,eax
c002ed4d:	74 25                	je     c002ed74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed4f:	83 ec 0c             	sub    esp,0xc
c002ed52:	68 1a 12 03 c0       	push   0xc003121a
c002ed57:	e8 46 14 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ed5c:	83 c4 10             	add    esp,0x10
c002ed5f:	eb 13                	jmp    c002ed74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ed61:	8d 76 00             	lea    esi,[esi+0x0]
c002ed64:	83 ec 0c             	sub    esp,0xc
c002ed67:	68 24 12 03 c0       	push   0xc0031224
c002ed6c:	e8 31 14 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ed71:	83 c4 10             	add    esp,0x10
c002ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ed7b:	8d 50 01             	lea    edx,[eax+0x1]
c002ed7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed85:	90                   	nop
c002ed86:	83 c4 0c             	add    esp,0xc
c002ed89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ed8c <ACPI::~ACPI()>:
c002ed8c:	83 ec 0c             	sub    esp,0xc
c002ed8f:	ba 60 25 03 c0       	mov    edx,0xc0032560
c002ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed98:	89 10                	mov    DWORD PTR [eax],edx
c002ed9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed9e:	83 ec 0c             	sub    esp,0xc
c002eda1:	50                   	push   eax
c002eda2:	e8 0b c4 fe ff       	call   c001b1b2 <Device::~Device()>
c002eda7:	83 c4 10             	add    esp,0x10
c002edaa:	90                   	nop
c002edab:	83 c4 0c             	add    esp,0xc
c002edae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002edb0 <ACPI::~ACPI()>:
c002edb0:	83 ec 0c             	sub    esp,0xc
c002edb3:	83 ec 0c             	sub    esp,0xc
c002edb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edba:	e8 cd ff ff ff       	call   c002ed8c <ACPI::~ACPI()>
c002edbf:	83 c4 10             	add    esp,0x10
c002edc2:	83 ec 08             	sub    esp,0x8
c002edc5:	68 64 12 00 00       	push   0x1264
c002edca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002edce:	e8 49 a3 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002edd3:	83 c4 10             	add    esp,0x10
c002edd6:	83 c4 0c             	add    esp,0xc
c002edd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002eddc <LinkedList<Device>::~LinkedList()>:
c002eddc:	90                   	nop
c002eddd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ede0 <LinkedList<Device>::isEmpty()>:
c002ede0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ede4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ede6:	85 c0                	test   eax,eax
c002ede8:	75 0e                	jne    c002edf8 <LinkedList<Device>::isEmpty()+0x18>
c002edea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002edee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edf1:	85 c0                	test   eax,eax
c002edf3:	75 03                	jne    c002edf8 <LinkedList<Device>::isEmpty()+0x18>
c002edf5:	b0 01                	mov    al,0x1
c002edf7:	c3                   	ret    
c002edf8:	b0 00                	mov    al,0x0
c002edfa:	90                   	nop
c002edfb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002edfc <LinkedList<Device>::getFirstElement()>:
c002edfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee00:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ee04 <LinkedList<Device>::removeFirst()>:
c002ee04:	83 ec 0c             	sub    esp,0xc
c002ee07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee0b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee0d:	85 c0                	test   eax,eax
c002ee0f:	75 17                	jne    c002ee28 <LinkedList<Device>::removeFirst()+0x24>
c002ee11:	83 ec 0c             	sub    esp,0xc
c002ee14:	68 30 12 03 c0       	push   0xc0031230
c002ee19:	e8 84 13 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ee1e:	83 c4 10             	add    esp,0x10
c002ee21:	e9 92 00 00 00       	jmp    c002eeb8 <LinkedList<Device>::removeFirst()+0xb4>
c002ee26:	66 90                	xchg   ax,ax
c002ee28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ee2f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ee35:	85 c0                	test   eax,eax
c002ee37:	74 13                	je     c002ee4c <LinkedList<Device>::removeFirst()+0x48>
c002ee39:	83 ec 0c             	sub    esp,0xc
c002ee3c:	68 7b 12 03 c0       	push   0xc003127b
c002ee41:	e8 5c 13 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ee46:	83 c4 10             	add    esp,0x10
c002ee49:	8d 76 00             	lea    esi,[esi+0x0]
c002ee4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee52:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002ee58:	85 c0                	test   eax,eax
c002ee5a:	75 34                	jne    c002ee90 <LinkedList<Device>::removeFirst()+0x8c>
c002ee5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ee66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ee71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee78:	83 f8 01             	cmp    eax,0x1
c002ee7b:	74 27                	je     c002eea4 <LinkedList<Device>::removeFirst()+0xa0>
c002ee7d:	83 ec 0c             	sub    esp,0xc
c002ee80:	68 54 12 03 c0       	push   0xc0031254
c002ee85:	e8 18 13 ff ff       	call   c00201a2 <KePanic(char const*)>
c002ee8a:	83 c4 10             	add    esp,0x10
c002ee8d:	eb 15                	jmp    c002eea4 <LinkedList<Device>::removeFirst()+0xa0>
c002ee8f:	90                   	nop
c002ee90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee94:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee96:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002ee9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea0:	89 10                	mov    DWORD PTR [eax],edx
c002eea2:	66 90                	xchg   ax,ax
c002eea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eea8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eeab:	8d 50 ff             	lea    edx,[eax-0x1]
c002eeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eeb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eeb5:	8d 76 00             	lea    esi,[esi+0x0]
c002eeb8:	83 c4 0c             	add    esp,0xc
c002eebb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002eebc <CPU::~CPU()>:
c002eebc:	83 ec 0c             	sub    esp,0xc
c002eebf:	ba 08 27 03 c0       	mov    edx,0xc0032708
c002eec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eec8:	89 10                	mov    DWORD PTR [eax],edx
c002eeca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eece:	83 ec 0c             	sub    esp,0xc
c002eed1:	50                   	push   eax
c002eed2:	e8 db c2 fe ff       	call   c001b1b2 <Device::~Device()>
c002eed7:	83 c4 10             	add    esp,0x10
c002eeda:	90                   	nop
c002eedb:	83 c4 0c             	add    esp,0xc
c002eede:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002eee0 <CPU::~CPU()>:
c002eee0:	83 ec 0c             	sub    esp,0xc
c002eee3:	83 ec 0c             	sub    esp,0xc
c002eee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eeea:	e8 cd ff ff ff       	call   c002eebc <CPU::~CPU()>
c002eeef:	83 c4 10             	add    esp,0x10
c002eef2:	83 ec 08             	sub    esp,0x8
c002eef5:	68 94 11 00 00       	push   0x1194
c002eefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eefe:	e8 19 a2 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002ef03:	83 c4 10             	add    esp,0x10
c002ef06:	83 c4 0c             	add    esp,0xc
c002ef09:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ef0c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ef0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ef10:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ef13:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ef14 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ef14:	90                   	nop
c002ef15:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ef18 <ThreadControlBlock::ThreadControlBlock()>:
c002ef18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef1c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ef23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef27:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002ef2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef32:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002ef39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef3d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002ef44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef48:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002ef4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef53:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002ef57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef5b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002ef5f:	90                   	nop
c002ef60:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002ef64 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002ef64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef68:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef72:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002efa4:	90                   	nop
c002efa5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002efa6 <PCI::~PCI()>:
c002efa6:	83 ec 0c             	sub    esp,0xc
c002efa9:	ba 28 36 03 c0       	mov    edx,0xc0033628
c002efae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efb2:	89 10                	mov    DWORD PTR [eax],edx
c002efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efb8:	83 ec 0c             	sub    esp,0xc
c002efbb:	50                   	push   eax
c002efbc:	e8 83 bc fe ff       	call   c001ac44 <Bus::~Bus()>
c002efc1:	83 c4 10             	add    esp,0x10
c002efc4:	90                   	nop
c002efc5:	83 c4 0c             	add    esp,0xc
c002efc8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002efca <PCI::~PCI()>:
c002efca:	83 ec 0c             	sub    esp,0xc
c002efcd:	83 ec 0c             	sub    esp,0xc
c002efd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efd4:	e8 cd ff ff ff       	call   c002efa6 <PCI::~PCI()>
c002efd9:	83 c4 10             	add    esp,0x10
c002efdc:	83 ec 08             	sub    esp,0x8
c002efdf:	68 5c 01 00 00       	push   0x15c
c002efe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efe8:	e8 2f a1 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002efed:	83 c4 10             	add    esp,0x10
c002eff0:	83 c4 0c             	add    esp,0xc
c002eff3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002eff4 <IDE::~IDE()>:
c002eff4:	83 ec 0c             	sub    esp,0xc
c002eff7:	ba dc 36 03 c0       	mov    edx,0xc00336dc
c002effc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f000:	89 10                	mov    DWORD PTR [eax],edx
c002f002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f006:	83 ec 0c             	sub    esp,0xc
c002f009:	50                   	push   eax
c002f00a:	e8 31 c6 fe ff       	call   c001b640 <HardDiskController::~HardDiskController()>
c002f00f:	83 c4 10             	add    esp,0x10
c002f012:	90                   	nop
c002f013:	83 c4 0c             	add    esp,0xc
c002f016:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002f018 <IDE::~IDE()>:
c002f018:	83 ec 0c             	sub    esp,0xc
c002f01b:	83 ec 0c             	sub    esp,0xc
c002f01e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f022:	e8 cd ff ff ff       	call   c002eff4 <IDE::~IDE()>
c002f027:	83 c4 10             	add    esp,0x10
c002f02a:	83 ec 08             	sub    esp,0x8
c002f02d:	68 70 02 00 00       	push   0x270
c002f032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f036:	e8 e1 a0 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f03b:	83 c4 10             	add    esp,0x10
c002f03e:	83 c4 0c             	add    esp,0xc
c002f041:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002f042 <SATABus::~SATABus()>:
c002f042:	83 ec 0c             	sub    esp,0xc
c002f045:	ba 2c 37 03 c0       	mov    edx,0xc003372c
c002f04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f04e:	89 10                	mov    DWORD PTR [eax],edx
c002f050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f054:	83 ec 0c             	sub    esp,0xc
c002f057:	50                   	push   eax
c002f058:	e8 e3 c5 fe ff       	call   c001b640 <HardDiskController::~HardDiskController()>
c002f05d:	83 c4 10             	add    esp,0x10
c002f060:	90                   	nop
c002f061:	83 c4 0c             	add    esp,0xc
c002f064:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002f066 <SATABus::~SATABus()>:
c002f066:	83 ec 0c             	sub    esp,0xc
c002f069:	83 ec 0c             	sub    esp,0xc
c002f06c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f070:	e8 cd ff ff ff       	call   c002f042 <SATABus::~SATABus()>
c002f075:	83 c4 10             	add    esp,0x10
c002f078:	83 ec 08             	sub    esp,0x8
c002f07b:	68 64 01 00 00       	push   0x164
c002f080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f084:	e8 93 a0 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f089:	83 c4 10             	add    esp,0x10
c002f08c:	83 c4 0c             	add    esp,0xc
c002f08f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f090 <ATA::~ATA()>:
c002f090:	83 ec 0c             	sub    esp,0xc
c002f093:	ba 6c 37 03 c0       	mov    edx,0xc003376c
c002f098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f09c:	89 10                	mov    DWORD PTR [eax],edx
c002f09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0a2:	83 ec 0c             	sub    esp,0xc
c002f0a5:	50                   	push   eax
c002f0a6:	e8 77 c6 fe ff       	call   c001b722 <PhysicalDisk::~PhysicalDisk()>
c002f0ab:	83 c4 10             	add    esp,0x10
c002f0ae:	90                   	nop
c002f0af:	83 c4 0c             	add    esp,0xc
c002f0b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f0b4 <ATA::~ATA()>:
c002f0b4:	83 ec 0c             	sub    esp,0xc
c002f0b7:	83 ec 0c             	sub    esp,0xc
c002f0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0be:	e8 cd ff ff ff       	call   c002f090 <ATA::~ATA()>
c002f0c3:	83 c4 10             	add    esp,0x10
c002f0c6:	83 ec 08             	sub    esp,0x8
c002f0c9:	68 7c 01 00 00       	push   0x17c
c002f0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0d2:	e8 45 a0 fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f0d7:	83 c4 10             	add    esp,0x10
c002f0da:	83 c4 0c             	add    esp,0xc
c002f0dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f0de <ATAPI::~ATAPI()>:
c002f0de:	83 ec 0c             	sub    esp,0xc
c002f0e1:	ba b4 37 03 c0       	mov    edx,0xc00337b4
c002f0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0ea:	89 10                	mov    DWORD PTR [eax],edx
c002f0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0f0:	83 ec 0c             	sub    esp,0xc
c002f0f3:	50                   	push   eax
c002f0f4:	e8 29 c6 fe ff       	call   c001b722 <PhysicalDisk::~PhysicalDisk()>
c002f0f9:	83 c4 10             	add    esp,0x10
c002f0fc:	90                   	nop
c002f0fd:	83 c4 0c             	add    esp,0xc
c002f100:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f102 <ATAPI::~ATAPI()>:
c002f102:	83 ec 0c             	sub    esp,0xc
c002f105:	83 ec 0c             	sub    esp,0xc
c002f108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f10c:	e8 cd ff ff ff       	call   c002f0de <ATAPI::~ATAPI()>
c002f111:	83 c4 10             	add    esp,0x10
c002f114:	83 ec 08             	sub    esp,0x8
c002f117:	68 84 01 00 00       	push   0x184
c002f11c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f120:	e8 f7 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f125:	83 c4 10             	add    esp,0x10
c002f128:	83 c4 0c             	add    esp,0xc
c002f12b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f12c <SATA::~SATA()>:
c002f12c:	83 ec 0c             	sub    esp,0xc
c002f12f:	ba 74 38 03 c0       	mov    edx,0xc0033874
c002f134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f138:	89 10                	mov    DWORD PTR [eax],edx
c002f13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f13e:	83 ec 0c             	sub    esp,0xc
c002f141:	50                   	push   eax
c002f142:	e8 db c5 fe ff       	call   c001b722 <PhysicalDisk::~PhysicalDisk()>
c002f147:	83 c4 10             	add    esp,0x10
c002f14a:	90                   	nop
c002f14b:	83 c4 0c             	add    esp,0xc
c002f14e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f150 <SATA::~SATA()>:
c002f150:	83 ec 0c             	sub    esp,0xc
c002f153:	83 ec 0c             	sub    esp,0xc
c002f156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f15a:	e8 cd ff ff ff       	call   c002f12c <SATA::~SATA()>
c002f15f:	83 c4 10             	add    esp,0x10
c002f162:	83 ec 08             	sub    esp,0x8
c002f165:	68 7c 01 00 00       	push   0x17c
c002f16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f16e:	e8 a9 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f173:	83 c4 10             	add    esp,0x10
c002f176:	83 c4 0c             	add    esp,0xc
c002f179:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f17a <SATAPI::~SATAPI()>:
c002f17a:	83 ec 0c             	sub    esp,0xc
c002f17d:	ba 98 39 03 c0       	mov    edx,0xc0033998
c002f182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f186:	89 10                	mov    DWORD PTR [eax],edx
c002f188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f18c:	83 ec 0c             	sub    esp,0xc
c002f18f:	50                   	push   eax
c002f190:	e8 8d c5 fe ff       	call   c001b722 <PhysicalDisk::~PhysicalDisk()>
c002f195:	83 c4 10             	add    esp,0x10
c002f198:	90                   	nop
c002f199:	83 c4 0c             	add    esp,0xc
c002f19c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f19e <SATAPI::~SATAPI()>:
c002f19e:	83 ec 0c             	sub    esp,0xc
c002f1a1:	83 ec 0c             	sub    esp,0xc
c002f1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1a8:	e8 cd ff ff ff       	call   c002f17a <SATAPI::~SATAPI()>
c002f1ad:	83 c4 10             	add    esp,0x10
c002f1b0:	83 ec 08             	sub    esp,0x8
c002f1b3:	68 84 01 00 00       	push   0x184
c002f1b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1bc:	e8 5b 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f1c1:	83 c4 10             	add    esp,0x10
c002f1c4:	83 c4 0c             	add    esp,0xc
c002f1c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f1c8 <IOAPIC::~IOAPIC()>:
c002f1c8:	83 ec 0c             	sub    esp,0xc
c002f1cb:	ba d8 39 03 c0       	mov    edx,0xc00339d8
c002f1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1d4:	89 10                	mov    DWORD PTR [eax],edx
c002f1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1da:	83 ec 0c             	sub    esp,0xc
c002f1dd:	50                   	push   eax
c002f1de:	e8 cf bf fe ff       	call   c001b1b2 <Device::~Device()>
c002f1e3:	83 c4 10             	add    esp,0x10
c002f1e6:	90                   	nop
c002f1e7:	83 c4 0c             	add    esp,0xc
c002f1ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f1ec <IOAPIC::~IOAPIC()>:
c002f1ec:	83 ec 0c             	sub    esp,0xc
c002f1ef:	83 ec 0c             	sub    esp,0xc
c002f1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1f6:	e8 cd ff ff ff       	call   c002f1c8 <IOAPIC::~IOAPIC()>
c002f1fb:	83 c4 10             	add    esp,0x10
c002f1fe:	83 ec 08             	sub    esp,0x8
c002f201:	68 68 01 00 00       	push   0x168
c002f206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f20a:	e8 0d 9f fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f20f:	83 c4 10             	add    esp,0x10
c002f212:	83 c4 0c             	add    esp,0xc
c002f215:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f218 <APICTimer::~APICTimer()>:
c002f218:	83 ec 0c             	sub    esp,0xc
c002f21b:	ba 20 3a 03 c0       	mov    edx,0xc0033a20
c002f220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f224:	89 10                	mov    DWORD PTR [eax],edx
c002f226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f22a:	83 ec 0c             	sub    esp,0xc
c002f22d:	50                   	push   eax
c002f22e:	e8 61 da fe ff       	call   c001cc94 <Timer::~Timer()>
c002f233:	83 c4 10             	add    esp,0x10
c002f236:	90                   	nop
c002f237:	83 c4 0c             	add    esp,0xc
c002f23a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f23c <APICTimer::~APICTimer()>:
c002f23c:	83 ec 0c             	sub    esp,0xc
c002f23f:	83 ec 0c             	sub    esp,0xc
c002f242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f246:	e8 cd ff ff ff       	call   c002f218 <APICTimer::~APICTimer()>
c002f24b:	83 c4 10             	add    esp,0x10
c002f24e:	83 ec 08             	sub    esp,0x8
c002f251:	68 60 01 00 00       	push   0x160
c002f256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f25a:	e8 bd 9e fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f25f:	83 c4 10             	add    esp,0x10
c002f262:	83 c4 0c             	add    esp,0xc
c002f265:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f268 <PIT::~PIT()>:
c002f268:	83 ec 0c             	sub    esp,0xc
c002f26b:	ba 70 3a 03 c0       	mov    edx,0xc0033a70
c002f270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f274:	89 10                	mov    DWORD PTR [eax],edx
c002f276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f27a:	83 ec 0c             	sub    esp,0xc
c002f27d:	50                   	push   eax
c002f27e:	e8 11 da fe ff       	call   c001cc94 <Timer::~Timer()>
c002f283:	83 c4 10             	add    esp,0x10
c002f286:	90                   	nop
c002f287:	83 c4 0c             	add    esp,0xc
c002f28a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f28c <PIT::~PIT()>:
c002f28c:	83 ec 0c             	sub    esp,0xc
c002f28f:	83 ec 0c             	sub    esp,0xc
c002f292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f296:	e8 cd ff ff ff       	call   c002f268 <PIT::~PIT()>
c002f29b:	83 c4 10             	add    esp,0x10
c002f29e:	83 ec 08             	sub    esp,0x8
c002f2a1:	68 5c 01 00 00       	push   0x15c
c002f2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f2aa:	e8 6d 9e fe ff       	call   c001911c <operator delete(void*, unsigned long)>
c002f2af:	83 c4 10             	add    esp,0x10
c002f2b2:	83 c4 0c             	add    esp,0xc
c002f2b5:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be 5b 28 03 c0       	mov    esi,0xc003285b
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be 77 28 03 c0       	mov    esi,0xc0032877
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
